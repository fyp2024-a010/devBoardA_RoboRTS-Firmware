
ROBOT_DEV2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009b44  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08009cf4  08009cf4  00019cf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009db4  08009db4  00020150  2**0
                  CONTENTS
  4 .ARM          00000008  08009db4  08009db4  00019db4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009dbc  08009dbc  00020150  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009dbc  08009dbc  00019dbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009dc0  08009dc0  00019dc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000150  20000000  08009dc4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020150  2**0
                  CONTENTS
 10 .bss          00005f10  20000150  20000150  00020150  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20006060  20006060  00020150  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020150  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 14 .debug_info   000217cc  00000000  00000000  000201c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000055f5  00000000  00000000  0004198f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001c40  00000000  00000000  00046f88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000159a  00000000  00000000  00048bc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00029a40  00000000  00000000  0004a162  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000249a5  00000000  00000000  00073ba2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e9526  00000000  00000000  00098547  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000774c  00000000  00000000  00181a70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000095  00000000  00000000  001891bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000150 	.word	0x20000150
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08009cdc 	.word	0x08009cdc

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000154 	.word	0x20000154
 80001ec:	08009cdc 	.word	0x08009cdc

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000200:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000204:	f000 b970 	b.w	80004e8 <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9e08      	ldr	r6, [sp, #32]
 8000226:	460d      	mov	r5, r1
 8000228:	4604      	mov	r4, r0
 800022a:	460f      	mov	r7, r1
 800022c:	2b00      	cmp	r3, #0
 800022e:	d14a      	bne.n	80002c6 <__udivmoddi4+0xa6>
 8000230:	428a      	cmp	r2, r1
 8000232:	4694      	mov	ip, r2
 8000234:	d965      	bls.n	8000302 <__udivmoddi4+0xe2>
 8000236:	fab2 f382 	clz	r3, r2
 800023a:	b143      	cbz	r3, 800024e <__udivmoddi4+0x2e>
 800023c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000240:	f1c3 0220 	rsb	r2, r3, #32
 8000244:	409f      	lsls	r7, r3
 8000246:	fa20 f202 	lsr.w	r2, r0, r2
 800024a:	4317      	orrs	r7, r2
 800024c:	409c      	lsls	r4, r3
 800024e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000252:	fa1f f58c 	uxth.w	r5, ip
 8000256:	fbb7 f1fe 	udiv	r1, r7, lr
 800025a:	0c22      	lsrs	r2, r4, #16
 800025c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000260:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000264:	fb01 f005 	mul.w	r0, r1, r5
 8000268:	4290      	cmp	r0, r2
 800026a:	d90a      	bls.n	8000282 <__udivmoddi4+0x62>
 800026c:	eb1c 0202 	adds.w	r2, ip, r2
 8000270:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000274:	f080 811c 	bcs.w	80004b0 <__udivmoddi4+0x290>
 8000278:	4290      	cmp	r0, r2
 800027a:	f240 8119 	bls.w	80004b0 <__udivmoddi4+0x290>
 800027e:	3902      	subs	r1, #2
 8000280:	4462      	add	r2, ip
 8000282:	1a12      	subs	r2, r2, r0
 8000284:	b2a4      	uxth	r4, r4
 8000286:	fbb2 f0fe 	udiv	r0, r2, lr
 800028a:	fb0e 2210 	mls	r2, lr, r0, r2
 800028e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000292:	fb00 f505 	mul.w	r5, r0, r5
 8000296:	42a5      	cmp	r5, r4
 8000298:	d90a      	bls.n	80002b0 <__udivmoddi4+0x90>
 800029a:	eb1c 0404 	adds.w	r4, ip, r4
 800029e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002a2:	f080 8107 	bcs.w	80004b4 <__udivmoddi4+0x294>
 80002a6:	42a5      	cmp	r5, r4
 80002a8:	f240 8104 	bls.w	80004b4 <__udivmoddi4+0x294>
 80002ac:	4464      	add	r4, ip
 80002ae:	3802      	subs	r0, #2
 80002b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002b4:	1b64      	subs	r4, r4, r5
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11e      	cbz	r6, 80002c2 <__udivmoddi4+0xa2>
 80002ba:	40dc      	lsrs	r4, r3
 80002bc:	2300      	movs	r3, #0
 80002be:	e9c6 4300 	strd	r4, r3, [r6]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d908      	bls.n	80002dc <__udivmoddi4+0xbc>
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	f000 80ed 	beq.w	80004aa <__udivmoddi4+0x28a>
 80002d0:	2100      	movs	r1, #0
 80002d2:	e9c6 0500 	strd	r0, r5, [r6]
 80002d6:	4608      	mov	r0, r1
 80002d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002dc:	fab3 f183 	clz	r1, r3
 80002e0:	2900      	cmp	r1, #0
 80002e2:	d149      	bne.n	8000378 <__udivmoddi4+0x158>
 80002e4:	42ab      	cmp	r3, r5
 80002e6:	d302      	bcc.n	80002ee <__udivmoddi4+0xce>
 80002e8:	4282      	cmp	r2, r0
 80002ea:	f200 80f8 	bhi.w	80004de <__udivmoddi4+0x2be>
 80002ee:	1a84      	subs	r4, r0, r2
 80002f0:	eb65 0203 	sbc.w	r2, r5, r3
 80002f4:	2001      	movs	r0, #1
 80002f6:	4617      	mov	r7, r2
 80002f8:	2e00      	cmp	r6, #0
 80002fa:	d0e2      	beq.n	80002c2 <__udivmoddi4+0xa2>
 80002fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000300:	e7df      	b.n	80002c2 <__udivmoddi4+0xa2>
 8000302:	b902      	cbnz	r2, 8000306 <__udivmoddi4+0xe6>
 8000304:	deff      	udf	#255	; 0xff
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	2b00      	cmp	r3, #0
 800030c:	f040 8090 	bne.w	8000430 <__udivmoddi4+0x210>
 8000310:	1a8a      	subs	r2, r1, r2
 8000312:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000316:	fa1f fe8c 	uxth.w	lr, ip
 800031a:	2101      	movs	r1, #1
 800031c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000320:	fb07 2015 	mls	r0, r7, r5, r2
 8000324:	0c22      	lsrs	r2, r4, #16
 8000326:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800032a:	fb0e f005 	mul.w	r0, lr, r5
 800032e:	4290      	cmp	r0, r2
 8000330:	d908      	bls.n	8000344 <__udivmoddi4+0x124>
 8000332:	eb1c 0202 	adds.w	r2, ip, r2
 8000336:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x122>
 800033c:	4290      	cmp	r0, r2
 800033e:	f200 80cb 	bhi.w	80004d8 <__udivmoddi4+0x2b8>
 8000342:	4645      	mov	r5, r8
 8000344:	1a12      	subs	r2, r2, r0
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb2 f0f7 	udiv	r0, r2, r7
 800034c:	fb07 2210 	mls	r2, r7, r0, r2
 8000350:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000354:	fb0e fe00 	mul.w	lr, lr, r0
 8000358:	45a6      	cmp	lr, r4
 800035a:	d908      	bls.n	800036e <__udivmoddi4+0x14e>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000364:	d202      	bcs.n	800036c <__udivmoddi4+0x14c>
 8000366:	45a6      	cmp	lr, r4
 8000368:	f200 80bb 	bhi.w	80004e2 <__udivmoddi4+0x2c2>
 800036c:	4610      	mov	r0, r2
 800036e:	eba4 040e 	sub.w	r4, r4, lr
 8000372:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000376:	e79f      	b.n	80002b8 <__udivmoddi4+0x98>
 8000378:	f1c1 0720 	rsb	r7, r1, #32
 800037c:	408b      	lsls	r3, r1
 800037e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000382:	ea4c 0c03 	orr.w	ip, ip, r3
 8000386:	fa05 f401 	lsl.w	r4, r5, r1
 800038a:	fa20 f307 	lsr.w	r3, r0, r7
 800038e:	40fd      	lsrs	r5, r7
 8000390:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000394:	4323      	orrs	r3, r4
 8000396:	fbb5 f8f9 	udiv	r8, r5, r9
 800039a:	fa1f fe8c 	uxth.w	lr, ip
 800039e:	fb09 5518 	mls	r5, r9, r8, r5
 80003a2:	0c1c      	lsrs	r4, r3, #16
 80003a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003a8:	fb08 f50e 	mul.w	r5, r8, lr
 80003ac:	42a5      	cmp	r5, r4
 80003ae:	fa02 f201 	lsl.w	r2, r2, r1
 80003b2:	fa00 f001 	lsl.w	r0, r0, r1
 80003b6:	d90b      	bls.n	80003d0 <__udivmoddi4+0x1b0>
 80003b8:	eb1c 0404 	adds.w	r4, ip, r4
 80003bc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003c0:	f080 8088 	bcs.w	80004d4 <__udivmoddi4+0x2b4>
 80003c4:	42a5      	cmp	r5, r4
 80003c6:	f240 8085 	bls.w	80004d4 <__udivmoddi4+0x2b4>
 80003ca:	f1a8 0802 	sub.w	r8, r8, #2
 80003ce:	4464      	add	r4, ip
 80003d0:	1b64      	subs	r4, r4, r5
 80003d2:	b29d      	uxth	r5, r3
 80003d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003d8:	fb09 4413 	mls	r4, r9, r3, r4
 80003dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003e4:	45a6      	cmp	lr, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x1da>
 80003e8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ec:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003f0:	d26c      	bcs.n	80004cc <__udivmoddi4+0x2ac>
 80003f2:	45a6      	cmp	lr, r4
 80003f4:	d96a      	bls.n	80004cc <__udivmoddi4+0x2ac>
 80003f6:	3b02      	subs	r3, #2
 80003f8:	4464      	add	r4, ip
 80003fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000402:	eba4 040e 	sub.w	r4, r4, lr
 8000406:	42ac      	cmp	r4, r5
 8000408:	46c8      	mov	r8, r9
 800040a:	46ae      	mov	lr, r5
 800040c:	d356      	bcc.n	80004bc <__udivmoddi4+0x29c>
 800040e:	d053      	beq.n	80004b8 <__udivmoddi4+0x298>
 8000410:	b156      	cbz	r6, 8000428 <__udivmoddi4+0x208>
 8000412:	ebb0 0208 	subs.w	r2, r0, r8
 8000416:	eb64 040e 	sbc.w	r4, r4, lr
 800041a:	fa04 f707 	lsl.w	r7, r4, r7
 800041e:	40ca      	lsrs	r2, r1
 8000420:	40cc      	lsrs	r4, r1
 8000422:	4317      	orrs	r7, r2
 8000424:	e9c6 7400 	strd	r7, r4, [r6]
 8000428:	4618      	mov	r0, r3
 800042a:	2100      	movs	r1, #0
 800042c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000430:	f1c3 0120 	rsb	r1, r3, #32
 8000434:	fa02 fc03 	lsl.w	ip, r2, r3
 8000438:	fa20 f201 	lsr.w	r2, r0, r1
 800043c:	fa25 f101 	lsr.w	r1, r5, r1
 8000440:	409d      	lsls	r5, r3
 8000442:	432a      	orrs	r2, r5
 8000444:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000450:	fb07 1510 	mls	r5, r7, r0, r1
 8000454:	0c11      	lsrs	r1, r2, #16
 8000456:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800045a:	fb00 f50e 	mul.w	r5, r0, lr
 800045e:	428d      	cmp	r5, r1
 8000460:	fa04 f403 	lsl.w	r4, r4, r3
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x258>
 8000466:	eb1c 0101 	adds.w	r1, ip, r1
 800046a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800046e:	d22f      	bcs.n	80004d0 <__udivmoddi4+0x2b0>
 8000470:	428d      	cmp	r5, r1
 8000472:	d92d      	bls.n	80004d0 <__udivmoddi4+0x2b0>
 8000474:	3802      	subs	r0, #2
 8000476:	4461      	add	r1, ip
 8000478:	1b49      	subs	r1, r1, r5
 800047a:	b292      	uxth	r2, r2
 800047c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000480:	fb07 1115 	mls	r1, r7, r5, r1
 8000484:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000488:	fb05 f10e 	mul.w	r1, r5, lr
 800048c:	4291      	cmp	r1, r2
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x282>
 8000490:	eb1c 0202 	adds.w	r2, ip, r2
 8000494:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000498:	d216      	bcs.n	80004c8 <__udivmoddi4+0x2a8>
 800049a:	4291      	cmp	r1, r2
 800049c:	d914      	bls.n	80004c8 <__udivmoddi4+0x2a8>
 800049e:	3d02      	subs	r5, #2
 80004a0:	4462      	add	r2, ip
 80004a2:	1a52      	subs	r2, r2, r1
 80004a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004a8:	e738      	b.n	800031c <__udivmoddi4+0xfc>
 80004aa:	4631      	mov	r1, r6
 80004ac:	4630      	mov	r0, r6
 80004ae:	e708      	b.n	80002c2 <__udivmoddi4+0xa2>
 80004b0:	4639      	mov	r1, r7
 80004b2:	e6e6      	b.n	8000282 <__udivmoddi4+0x62>
 80004b4:	4610      	mov	r0, r2
 80004b6:	e6fb      	b.n	80002b0 <__udivmoddi4+0x90>
 80004b8:	4548      	cmp	r0, r9
 80004ba:	d2a9      	bcs.n	8000410 <__udivmoddi4+0x1f0>
 80004bc:	ebb9 0802 	subs.w	r8, r9, r2
 80004c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004c4:	3b01      	subs	r3, #1
 80004c6:	e7a3      	b.n	8000410 <__udivmoddi4+0x1f0>
 80004c8:	4645      	mov	r5, r8
 80004ca:	e7ea      	b.n	80004a2 <__udivmoddi4+0x282>
 80004cc:	462b      	mov	r3, r5
 80004ce:	e794      	b.n	80003fa <__udivmoddi4+0x1da>
 80004d0:	4640      	mov	r0, r8
 80004d2:	e7d1      	b.n	8000478 <__udivmoddi4+0x258>
 80004d4:	46d0      	mov	r8, sl
 80004d6:	e77b      	b.n	80003d0 <__udivmoddi4+0x1b0>
 80004d8:	3d02      	subs	r5, #2
 80004da:	4462      	add	r2, ip
 80004dc:	e732      	b.n	8000344 <__udivmoddi4+0x124>
 80004de:	4608      	mov	r0, r1
 80004e0:	e70a      	b.n	80002f8 <__udivmoddi4+0xd8>
 80004e2:	4464      	add	r4, ip
 80004e4:	3802      	subs	r0, #2
 80004e6:	e742      	b.n	800036e <__udivmoddi4+0x14e>

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <task_init>:
#include "init.h"

osThreadId led_task_t;

void task_init(void){
 80004ec:	b5b0      	push	{r4, r5, r7, lr}
 80004ee:	b088      	sub	sp, #32
 80004f0:	af00      	add	r7, sp, #0
	osThreadDef(LED_TASK, led_task, osPriorityHigh, 0, 512);
 80004f2:	4b0a      	ldr	r3, [pc, #40]	; (800051c <task_init+0x30>)
 80004f4:	1d3c      	adds	r4, r7, #4
 80004f6:	461d      	mov	r5, r3
 80004f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80004fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80004fc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000500:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	led_task_t = osThreadCreate(osThread(LED_TASK), NULL);
 8000504:	1d3b      	adds	r3, r7, #4
 8000506:	2100      	movs	r1, #0
 8000508:	4618      	mov	r0, r3
 800050a:	f007 fbbc 	bl	8007c86 <osThreadCreate>
 800050e:	4603      	mov	r3, r0
 8000510:	4a03      	ldr	r2, [pc, #12]	; (8000520 <task_init+0x34>)
 8000512:	6013      	str	r3, [r2, #0]
}
 8000514:	bf00      	nop
 8000516:	3720      	adds	r7, #32
 8000518:	46bd      	mov	sp, r7
 800051a:	bdb0      	pop	{r4, r5, r7, pc}
 800051c:	08009d00 	.word	0x08009d00
 8000520:	2000016c 	.word	0x2000016c

08000524 <led_task>:
#include "led_task.h"

void led_task(void const *argument){
 8000524:	b580      	push	{r7, lr}
 8000526:	b082      	sub	sp, #8
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
	while(1){
		HAL_GPIO_TogglePin(LED_A_GPIO_Port, LED_A_Pin);
 800052c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000530:	4803      	ldr	r0, [pc, #12]	; (8000540 <led_task+0x1c>)
 8000532:	f001 fbdc 	bl	8001cee <HAL_GPIO_TogglePin>
		osDelay(1000);
 8000536:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800053a:	f007 fbf0 	bl	8007d1e <osDelay>
	while(1){
 800053e:	e7f5      	b.n	800052c <led_task+0x8>
 8000540:	40021800 	.word	0x40021800

08000544 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000548:	4b17      	ldr	r3, [pc, #92]	; (80005a8 <MX_CAN1_Init+0x64>)
 800054a:	4a18      	ldr	r2, [pc, #96]	; (80005ac <MX_CAN1_Init+0x68>)
 800054c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 7;
 800054e:	4b16      	ldr	r3, [pc, #88]	; (80005a8 <MX_CAN1_Init+0x64>)
 8000550:	2207      	movs	r2, #7
 8000552:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000554:	4b14      	ldr	r3, [pc, #80]	; (80005a8 <MX_CAN1_Init+0x64>)
 8000556:	2200      	movs	r2, #0
 8000558:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800055a:	4b13      	ldr	r3, [pc, #76]	; (80005a8 <MX_CAN1_Init+0x64>)
 800055c:	2200      	movs	r2, #0
 800055e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000560:	4b11      	ldr	r3, [pc, #68]	; (80005a8 <MX_CAN1_Init+0x64>)
 8000562:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000566:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000568:	4b0f      	ldr	r3, [pc, #60]	; (80005a8 <MX_CAN1_Init+0x64>)
 800056a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800056e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000570:	4b0d      	ldr	r3, [pc, #52]	; (80005a8 <MX_CAN1_Init+0x64>)
 8000572:	2200      	movs	r2, #0
 8000574:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000576:	4b0c      	ldr	r3, [pc, #48]	; (80005a8 <MX_CAN1_Init+0x64>)
 8000578:	2200      	movs	r2, #0
 800057a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800057c:	4b0a      	ldr	r3, [pc, #40]	; (80005a8 <MX_CAN1_Init+0x64>)
 800057e:	2200      	movs	r2, #0
 8000580:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000582:	4b09      	ldr	r3, [pc, #36]	; (80005a8 <MX_CAN1_Init+0x64>)
 8000584:	2200      	movs	r2, #0
 8000586:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000588:	4b07      	ldr	r3, [pc, #28]	; (80005a8 <MX_CAN1_Init+0x64>)
 800058a:	2200      	movs	r2, #0
 800058c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = ENABLE;
 800058e:	4b06      	ldr	r3, [pc, #24]	; (80005a8 <MX_CAN1_Init+0x64>)
 8000590:	2201      	movs	r2, #1
 8000592:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000594:	4804      	ldr	r0, [pc, #16]	; (80005a8 <MX_CAN1_Init+0x64>)
 8000596:	f000 fd1d 	bl	8000fd4 <HAL_CAN_Init>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d001      	beq.n	80005a4 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80005a0:	f000 fa34 	bl	8000a0c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80005a4:	bf00      	nop
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	20000170 	.word	0x20000170
 80005ac:	40006400 	.word	0x40006400

080005b0 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b08a      	sub	sp, #40	; 0x28
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b8:	f107 0314 	add.w	r3, r7, #20
 80005bc:	2200      	movs	r2, #0
 80005be:	601a      	str	r2, [r3, #0]
 80005c0:	605a      	str	r2, [r3, #4]
 80005c2:	609a      	str	r2, [r3, #8]
 80005c4:	60da      	str	r2, [r3, #12]
 80005c6:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	4a19      	ldr	r2, [pc, #100]	; (8000634 <HAL_CAN_MspInit+0x84>)
 80005ce:	4293      	cmp	r3, r2
 80005d0:	d12b      	bne.n	800062a <HAL_CAN_MspInit+0x7a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80005d2:	2300      	movs	r3, #0
 80005d4:	613b      	str	r3, [r7, #16]
 80005d6:	4b18      	ldr	r3, [pc, #96]	; (8000638 <HAL_CAN_MspInit+0x88>)
 80005d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005da:	4a17      	ldr	r2, [pc, #92]	; (8000638 <HAL_CAN_MspInit+0x88>)
 80005dc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005e0:	6413      	str	r3, [r2, #64]	; 0x40
 80005e2:	4b15      	ldr	r3, [pc, #84]	; (8000638 <HAL_CAN_MspInit+0x88>)
 80005e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80005ea:	613b      	str	r3, [r7, #16]
 80005ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80005ee:	2300      	movs	r3, #0
 80005f0:	60fb      	str	r3, [r7, #12]
 80005f2:	4b11      	ldr	r3, [pc, #68]	; (8000638 <HAL_CAN_MspInit+0x88>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f6:	4a10      	ldr	r2, [pc, #64]	; (8000638 <HAL_CAN_MspInit+0x88>)
 80005f8:	f043 0308 	orr.w	r3, r3, #8
 80005fc:	6313      	str	r3, [r2, #48]	; 0x30
 80005fe:	4b0e      	ldr	r3, [pc, #56]	; (8000638 <HAL_CAN_MspInit+0x88>)
 8000600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000602:	f003 0308 	and.w	r3, r3, #8
 8000606:	60fb      	str	r3, [r7, #12]
 8000608:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800060a:	2303      	movs	r3, #3
 800060c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800060e:	2302      	movs	r3, #2
 8000610:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000612:	2300      	movs	r3, #0
 8000614:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000616:	2303      	movs	r3, #3
 8000618:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800061a:	2309      	movs	r3, #9
 800061c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800061e:	f107 0314 	add.w	r3, r7, #20
 8000622:	4619      	mov	r1, r3
 8000624:	4805      	ldr	r0, [pc, #20]	; (800063c <HAL_CAN_MspInit+0x8c>)
 8000626:	f001 f99d 	bl	8001964 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 800062a:	bf00      	nop
 800062c:	3728      	adds	r7, #40	; 0x28
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	40006400 	.word	0x40006400
 8000638:	40023800 	.word	0x40023800
 800063c:	40020c00 	.word	0x40020c00

08000640 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000646:	2300      	movs	r3, #0
 8000648:	607b      	str	r3, [r7, #4]
 800064a:	4b10      	ldr	r3, [pc, #64]	; (800068c <MX_DMA_Init+0x4c>)
 800064c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064e:	4a0f      	ldr	r2, [pc, #60]	; (800068c <MX_DMA_Init+0x4c>)
 8000650:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000654:	6313      	str	r3, [r2, #48]	; 0x30
 8000656:	4b0d      	ldr	r3, [pc, #52]	; (800068c <MX_DMA_Init+0x4c>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800065e:	607b      	str	r3, [r7, #4]
 8000660:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8000662:	2200      	movs	r2, #0
 8000664:	2105      	movs	r1, #5
 8000666:	2039      	movs	r0, #57	; 0x39
 8000668:	f000 fe68 	bl	800133c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800066c:	2039      	movs	r0, #57	; 0x39
 800066e:	f000 fe81 	bl	8001374 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 8000672:	2200      	movs	r2, #0
 8000674:	2105      	movs	r1, #5
 8000676:	2045      	movs	r0, #69	; 0x45
 8000678:	f000 fe60 	bl	800133c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 800067c:	2045      	movs	r0, #69	; 0x45
 800067e:	f000 fe79 	bl	8001374 <HAL_NVIC_EnableIRQ>

}
 8000682:	bf00      	nop
 8000684:	3708      	adds	r7, #8
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	40023800 	.word	0x40023800

08000690 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000690:	b480      	push	{r7}
 8000692:	b085      	sub	sp, #20
 8000694:	af00      	add	r7, sp, #0
 8000696:	60f8      	str	r0, [r7, #12]
 8000698:	60b9      	str	r1, [r7, #8]
 800069a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	4a07      	ldr	r2, [pc, #28]	; (80006bc <vApplicationGetIdleTaskMemory+0x2c>)
 80006a0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80006a2:	68bb      	ldr	r3, [r7, #8]
 80006a4:	4a06      	ldr	r2, [pc, #24]	; (80006c0 <vApplicationGetIdleTaskMemory+0x30>)
 80006a6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	2280      	movs	r2, #128	; 0x80
 80006ac:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80006ae:	bf00      	nop
 80006b0:	3714      	adds	r7, #20
 80006b2:	46bd      	mov	sp, r7
 80006b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop
 80006bc:	2000019c 	.word	0x2000019c
 80006c0:	2000023c 	.word	0x2000023c

080006c4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80006c4:	b5b0      	push	{r4, r5, r7, lr}
 80006c6:	b088      	sub	sp, #32
 80006c8:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80006ca:	4b0a      	ldr	r3, [pc, #40]	; (80006f4 <MX_FREERTOS_Init+0x30>)
 80006cc:	1d3c      	adds	r4, r7, #4
 80006ce:	461d      	mov	r5, r3
 80006d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006d4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006d8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80006dc:	1d3b      	adds	r3, r7, #4
 80006de:	2100      	movs	r1, #0
 80006e0:	4618      	mov	r0, r3
 80006e2:	f007 fad0 	bl	8007c86 <osThreadCreate>
 80006e6:	4603      	mov	r3, r0
 80006e8:	4a03      	ldr	r2, [pc, #12]	; (80006f8 <MX_FREERTOS_Init+0x34>)
 80006ea:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80006ec:	bf00      	nop
 80006ee:	3720      	adds	r7, #32
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bdb0      	pop	{r4, r5, r7, pc}
 80006f4:	08009d28 	.word	0x08009d28
 80006f8:	20000198 	.word	0x20000198

080006fc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000704:	f008 fd1a 	bl	800913c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000708:	2001      	movs	r0, #1
 800070a:	f007 fb08 	bl	8007d1e <osDelay>
 800070e:	e7fb      	b.n	8000708 <StartDefaultTask+0xc>

08000710 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b08c      	sub	sp, #48	; 0x30
 8000714:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000716:	f107 031c 	add.w	r3, r7, #28
 800071a:	2200      	movs	r2, #0
 800071c:	601a      	str	r2, [r3, #0]
 800071e:	605a      	str	r2, [r3, #4]
 8000720:	609a      	str	r2, [r3, #8]
 8000722:	60da      	str	r2, [r3, #12]
 8000724:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000726:	2300      	movs	r3, #0
 8000728:	61bb      	str	r3, [r7, #24]
 800072a:	4b67      	ldr	r3, [pc, #412]	; (80008c8 <MX_GPIO_Init+0x1b8>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	4a66      	ldr	r2, [pc, #408]	; (80008c8 <MX_GPIO_Init+0x1b8>)
 8000730:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000734:	6313      	str	r3, [r2, #48]	; 0x30
 8000736:	4b64      	ldr	r3, [pc, #400]	; (80008c8 <MX_GPIO_Init+0x1b8>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800073e:	61bb      	str	r3, [r7, #24]
 8000740:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000742:	2300      	movs	r3, #0
 8000744:	617b      	str	r3, [r7, #20]
 8000746:	4b60      	ldr	r3, [pc, #384]	; (80008c8 <MX_GPIO_Init+0x1b8>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	4a5f      	ldr	r2, [pc, #380]	; (80008c8 <MX_GPIO_Init+0x1b8>)
 800074c:	f043 0301 	orr.w	r3, r3, #1
 8000750:	6313      	str	r3, [r2, #48]	; 0x30
 8000752:	4b5d      	ldr	r3, [pc, #372]	; (80008c8 <MX_GPIO_Init+0x1b8>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	f003 0301 	and.w	r3, r3, #1
 800075a:	617b      	str	r3, [r7, #20]
 800075c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800075e:	2300      	movs	r3, #0
 8000760:	613b      	str	r3, [r7, #16]
 8000762:	4b59      	ldr	r3, [pc, #356]	; (80008c8 <MX_GPIO_Init+0x1b8>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	4a58      	ldr	r2, [pc, #352]	; (80008c8 <MX_GPIO_Init+0x1b8>)
 8000768:	f043 0308 	orr.w	r3, r3, #8
 800076c:	6313      	str	r3, [r2, #48]	; 0x30
 800076e:	4b56      	ldr	r3, [pc, #344]	; (80008c8 <MX_GPIO_Init+0x1b8>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	f003 0308 	and.w	r3, r3, #8
 8000776:	613b      	str	r3, [r7, #16]
 8000778:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800077a:	2300      	movs	r3, #0
 800077c:	60fb      	str	r3, [r7, #12]
 800077e:	4b52      	ldr	r3, [pc, #328]	; (80008c8 <MX_GPIO_Init+0x1b8>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	4a51      	ldr	r2, [pc, #324]	; (80008c8 <MX_GPIO_Init+0x1b8>)
 8000784:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000788:	6313      	str	r3, [r2, #48]	; 0x30
 800078a:	4b4f      	ldr	r3, [pc, #316]	; (80008c8 <MX_GPIO_Init+0x1b8>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000792:	60fb      	str	r3, [r7, #12]
 8000794:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	60bb      	str	r3, [r7, #8]
 800079a:	4b4b      	ldr	r3, [pc, #300]	; (80008c8 <MX_GPIO_Init+0x1b8>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	4a4a      	ldr	r2, [pc, #296]	; (80008c8 <MX_GPIO_Init+0x1b8>)
 80007a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007a4:	6313      	str	r3, [r2, #48]	; 0x30
 80007a6:	4b48      	ldr	r3, [pc, #288]	; (80008c8 <MX_GPIO_Init+0x1b8>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007ae:	60bb      	str	r3, [r7, #8]
 80007b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007b2:	2300      	movs	r3, #0
 80007b4:	607b      	str	r3, [r7, #4]
 80007b6:	4b44      	ldr	r3, [pc, #272]	; (80008c8 <MX_GPIO_Init+0x1b8>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	4a43      	ldr	r2, [pc, #268]	; (80008c8 <MX_GPIO_Init+0x1b8>)
 80007bc:	f043 0320 	orr.w	r3, r3, #32
 80007c0:	6313      	str	r3, [r2, #48]	; 0x30
 80007c2:	4b41      	ldr	r3, [pc, #260]	; (80008c8 <MX_GPIO_Init+0x1b8>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	f003 0320 	and.w	r3, r3, #32
 80007ca:	607b      	str	r3, [r7, #4]
 80007cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007ce:	2300      	movs	r3, #0
 80007d0:	603b      	str	r3, [r7, #0]
 80007d2:	4b3d      	ldr	r3, [pc, #244]	; (80008c8 <MX_GPIO_Init+0x1b8>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	4a3c      	ldr	r2, [pc, #240]	; (80008c8 <MX_GPIO_Init+0x1b8>)
 80007d8:	f043 0310 	orr.w	r3, r3, #16
 80007dc:	6313      	str	r3, [r2, #48]	; 0x30
 80007de:	4b3a      	ldr	r3, [pc, #232]	; (80008c8 <MX_GPIO_Init+0x1b8>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	f003 0310 	and.w	r3, r3, #16
 80007e6:	603b      	str	r3, [r7, #0]
 80007e8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, POWER1_CTRL_Pin|POWER2_CTRL_Pin|POWER3_CTRL_Pin|POWER4_CTRL_Pin, GPIO_PIN_RESET);
 80007ea:	2200      	movs	r2, #0
 80007ec:	213c      	movs	r1, #60	; 0x3c
 80007ee:	4837      	ldr	r0, [pc, #220]	; (80008cc <MX_GPIO_Init+0x1bc>)
 80007f0:	f001 fa64 	bl	8001cbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LED_A_Pin|LED_B_Pin|LED_C_Pin|LED_D_Pin
 80007f4:	2200      	movs	r2, #0
 80007f6:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
 80007fa:	4835      	ldr	r0, [pc, #212]	; (80008d0 <MX_GPIO_Init+0x1c0>)
 80007fc:	f001 fa5e 	bl	8001cbc <HAL_GPIO_WritePin>
                          |LED_E_Pin|LED_F_Pin|LED_G_Pin|LED_H_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, SPI5_NSS_Pin|LED_GF14_Pin, GPIO_PIN_RESET);
 8000800:	2200      	movs	r2, #0
 8000802:	f244 0140 	movw	r1, #16448	; 0x4040
 8000806:	4833      	ldr	r0, [pc, #204]	; (80008d4 <MX_GPIO_Init+0x1c4>)
 8000808:	f001 fa58 	bl	8001cbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_RESET);
 800080c:	2200      	movs	r2, #0
 800080e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000812:	4831      	ldr	r0, [pc, #196]	; (80008d8 <MX_GPIO_Init+0x1c8>)
 8000814:	f001 fa52 	bl	8001cbc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PIPin PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = PIN_Y_Pin|PIN_X_Pin|PIN_V_Pin|PIN_Z_Pin;
 8000818:	23e4      	movs	r3, #228	; 0xe4
 800081a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800081c:	2300      	movs	r3, #0
 800081e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000820:	2300      	movs	r3, #0
 8000822:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000824:	f107 031c 	add.w	r3, r7, #28
 8000828:	4619      	mov	r1, r3
 800082a:	482c      	ldr	r0, [pc, #176]	; (80008dc <MX_GPIO_Init+0x1cc>)
 800082c:	f001 f89a 	bl	8001964 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin PHPin */
  GPIO_InitStruct.Pin = POWER1_CTRL_Pin|POWER2_CTRL_Pin|POWER3_CTRL_Pin|POWER4_CTRL_Pin;
 8000830:	233c      	movs	r3, #60	; 0x3c
 8000832:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000834:	2301      	movs	r3, #1
 8000836:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000838:	2300      	movs	r3, #0
 800083a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800083c:	2300      	movs	r3, #0
 800083e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000840:	f107 031c 	add.w	r3, r7, #28
 8000844:	4619      	mov	r1, r3
 8000846:	4821      	ldr	r0, [pc, #132]	; (80008cc <MX_GPIO_Init+0x1bc>)
 8000848:	f001 f88c 	bl	8001964 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = LED_A_Pin|LED_B_Pin|LED_C_Pin|LED_D_Pin
 800084c:	f44f 73ff 	mov.w	r3, #510	; 0x1fe
 8000850:	61fb      	str	r3, [r7, #28]
                          |LED_E_Pin|LED_F_Pin|LED_G_Pin|LED_H_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000852:	2301      	movs	r3, #1
 8000854:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000856:	2300      	movs	r3, #0
 8000858:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085a:	2300      	movs	r3, #0
 800085c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800085e:	f107 031c 	add.w	r3, r7, #28
 8000862:	4619      	mov	r1, r3
 8000864:	481a      	ldr	r0, [pc, #104]	; (80008d0 <MX_GPIO_Init+0x1c0>)
 8000866:	f001 f87d 	bl	8001964 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = SPI5_NSS_Pin|LED_GF14_Pin;
 800086a:	f244 0340 	movw	r3, #16448	; 0x4040
 800086e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000870:	2301      	movs	r3, #1
 8000872:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000874:	2300      	movs	r3, #0
 8000876:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000878:	2300      	movs	r3, #0
 800087a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800087c:	f107 031c 	add.w	r3, r7, #28
 8000880:	4619      	mov	r1, r3
 8000882:	4814      	ldr	r0, [pc, #80]	; (80008d4 <MX_GPIO_Init+0x1c4>)
 8000884:	f001 f86e 	bl	8001964 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = PIN_YA1_Pin|PIN_ZA0_Pin|PIN_XA2_Pin|PIN_W_Pin;
 8000888:	230f      	movs	r3, #15
 800088a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800088c:	2300      	movs	r3, #0
 800088e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000890:	2300      	movs	r3, #0
 8000892:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000894:	f107 031c 	add.w	r3, r7, #28
 8000898:	4619      	mov	r1, r3
 800089a:	4811      	ldr	r0, [pc, #68]	; (80008e0 <MX_GPIO_Init+0x1d0>)
 800089c:	f001 f862 	bl	8001964 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_R_Pin;
 80008a0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80008a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a6:	2301      	movs	r3, #1
 80008a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008aa:	2300      	movs	r3, #0
 80008ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ae:	2300      	movs	r3, #0
 80008b0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_R_GPIO_Port, &GPIO_InitStruct);
 80008b2:	f107 031c 	add.w	r3, r7, #28
 80008b6:	4619      	mov	r1, r3
 80008b8:	4807      	ldr	r0, [pc, #28]	; (80008d8 <MX_GPIO_Init+0x1c8>)
 80008ba:	f001 f853 	bl	8001964 <HAL_GPIO_Init>

}
 80008be:	bf00      	nop
 80008c0:	3730      	adds	r7, #48	; 0x30
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	40023800 	.word	0x40023800
 80008cc:	40021c00 	.word	0x40021c00
 80008d0:	40021800 	.word	0x40021800
 80008d4:	40021400 	.word	0x40021400
 80008d8:	40021000 	.word	0x40021000
 80008dc:	40022000 	.word	0x40022000
 80008e0:	40020000 	.word	0x40020000

080008e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008e8:	f000 fb0e 	bl	8000f08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008ec:	f000 f812 	bl	8000914 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008f0:	f7ff ff0e 	bl	8000710 <MX_GPIO_Init>
  MX_DMA_Init();
 80008f4:	f7ff fea4 	bl	8000640 <MX_DMA_Init>
  MX_SPI5_Init();
 80008f8:	f000 f88e 	bl	8000a18 <MX_SPI5_Init>
  MX_CAN1_Init();
 80008fc:	f7ff fe22 	bl	8000544 <MX_CAN1_Init>
  MX_USART6_UART_Init();
 8000900:	f000 fa00 	bl	8000d04 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  task_init();
 8000904:	f7ff fdf2 	bl	80004ec <task_init>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8000908:	f7ff fedc 	bl	80006c4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800090c:	f007 f9b4 	bl	8007c78 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000910:	e7fe      	b.n	8000910 <main+0x2c>
	...

08000914 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b094      	sub	sp, #80	; 0x50
 8000918:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800091a:	f107 0320 	add.w	r3, r7, #32
 800091e:	2230      	movs	r2, #48	; 0x30
 8000920:	2100      	movs	r1, #0
 8000922:	4618      	mov	r0, r3
 8000924:	f009 f8fe 	bl	8009b24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000928:	f107 030c 	add.w	r3, r7, #12
 800092c:	2200      	movs	r2, #0
 800092e:	601a      	str	r2, [r3, #0]
 8000930:	605a      	str	r2, [r3, #4]
 8000932:	609a      	str	r2, [r3, #8]
 8000934:	60da      	str	r2, [r3, #12]
 8000936:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000938:	2300      	movs	r3, #0
 800093a:	60bb      	str	r3, [r7, #8]
 800093c:	4b28      	ldr	r3, [pc, #160]	; (80009e0 <SystemClock_Config+0xcc>)
 800093e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000940:	4a27      	ldr	r2, [pc, #156]	; (80009e0 <SystemClock_Config+0xcc>)
 8000942:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000946:	6413      	str	r3, [r2, #64]	; 0x40
 8000948:	4b25      	ldr	r3, [pc, #148]	; (80009e0 <SystemClock_Config+0xcc>)
 800094a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800094c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000950:	60bb      	str	r3, [r7, #8]
 8000952:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000954:	2300      	movs	r3, #0
 8000956:	607b      	str	r3, [r7, #4]
 8000958:	4b22      	ldr	r3, [pc, #136]	; (80009e4 <SystemClock_Config+0xd0>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	4a21      	ldr	r2, [pc, #132]	; (80009e4 <SystemClock_Config+0xd0>)
 800095e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000962:	6013      	str	r3, [r2, #0]
 8000964:	4b1f      	ldr	r3, [pc, #124]	; (80009e4 <SystemClock_Config+0xd0>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800096c:	607b      	str	r3, [r7, #4]
 800096e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000970:	2301      	movs	r3, #1
 8000972:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000974:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000978:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800097a:	2302      	movs	r3, #2
 800097c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800097e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000982:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8000984:	2306      	movs	r3, #6
 8000986:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000988:	23a8      	movs	r3, #168	; 0xa8
 800098a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800098c:	2302      	movs	r3, #2
 800098e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000990:	2307      	movs	r3, #7
 8000992:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000994:	f107 0320 	add.w	r3, r7, #32
 8000998:	4618      	mov	r0, r3
 800099a:	f002 fc13 	bl	80031c4 <HAL_RCC_OscConfig>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80009a4:	f000 f832 	bl	8000a0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009a8:	230f      	movs	r3, #15
 80009aa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009ac:	2302      	movs	r3, #2
 80009ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009b0:	2300      	movs	r3, #0
 80009b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80009b4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80009b8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80009ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009be:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80009c0:	f107 030c 	add.w	r3, r7, #12
 80009c4:	2105      	movs	r1, #5
 80009c6:	4618      	mov	r0, r3
 80009c8:	f002 fe74 	bl	80036b4 <HAL_RCC_ClockConfig>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80009d2:	f000 f81b 	bl	8000a0c <Error_Handler>
  }
}
 80009d6:	bf00      	nop
 80009d8:	3750      	adds	r7, #80	; 0x50
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	40023800 	.word	0x40023800
 80009e4:	40007000 	.word	0x40007000

080009e8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a04      	ldr	r2, [pc, #16]	; (8000a08 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d101      	bne.n	80009fe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80009fa:	f000 faa7 	bl	8000f4c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009fe:	bf00      	nop
 8000a00:	3708      	adds	r7, #8
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	40000c00 	.word	0x40000c00

08000a0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a10:	b672      	cpsid	i
}
 8000a12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a14:	e7fe      	b.n	8000a14 <Error_Handler+0x8>
	...

08000a18 <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 8000a1c:	4b17      	ldr	r3, [pc, #92]	; (8000a7c <MX_SPI5_Init+0x64>)
 8000a1e:	4a18      	ldr	r2, [pc, #96]	; (8000a80 <MX_SPI5_Init+0x68>)
 8000a20:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8000a22:	4b16      	ldr	r3, [pc, #88]	; (8000a7c <MX_SPI5_Init+0x64>)
 8000a24:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a28:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8000a2a:	4b14      	ldr	r3, [pc, #80]	; (8000a7c <MX_SPI5_Init+0x64>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a30:	4b12      	ldr	r3, [pc, #72]	; (8000a7c <MX_SPI5_Init+0x64>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a36:	4b11      	ldr	r3, [pc, #68]	; (8000a7c <MX_SPI5_Init+0x64>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a3c:	4b0f      	ldr	r3, [pc, #60]	; (8000a7c <MX_SPI5_Init+0x64>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8000a42:	4b0e      	ldr	r3, [pc, #56]	; (8000a7c <MX_SPI5_Init+0x64>)
 8000a44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a48:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000a4a:	4b0c      	ldr	r3, [pc, #48]	; (8000a7c <MX_SPI5_Init+0x64>)
 8000a4c:	2230      	movs	r2, #48	; 0x30
 8000a4e:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a50:	4b0a      	ldr	r3, [pc, #40]	; (8000a7c <MX_SPI5_Init+0x64>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a56:	4b09      	ldr	r3, [pc, #36]	; (8000a7c <MX_SPI5_Init+0x64>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a5c:	4b07      	ldr	r3, [pc, #28]	; (8000a7c <MX_SPI5_Init+0x64>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8000a62:	4b06      	ldr	r3, [pc, #24]	; (8000a7c <MX_SPI5_Init+0x64>)
 8000a64:	220a      	movs	r2, #10
 8000a66:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000a68:	4804      	ldr	r0, [pc, #16]	; (8000a7c <MX_SPI5_Init+0x64>)
 8000a6a:	f003 f835 	bl	8003ad8 <HAL_SPI_Init>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8000a74:	f7ff ffca 	bl	8000a0c <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8000a78:	bf00      	nop
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	2000043c 	.word	0x2000043c
 8000a80:	40015000 	.word	0x40015000

08000a84 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b08a      	sub	sp, #40	; 0x28
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a8c:	f107 0314 	add.w	r3, r7, #20
 8000a90:	2200      	movs	r2, #0
 8000a92:	601a      	str	r2, [r3, #0]
 8000a94:	605a      	str	r2, [r3, #4]
 8000a96:	609a      	str	r2, [r3, #8]
 8000a98:	60da      	str	r2, [r3, #12]
 8000a9a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4a19      	ldr	r2, [pc, #100]	; (8000b08 <HAL_SPI_MspInit+0x84>)
 8000aa2:	4293      	cmp	r3, r2
 8000aa4:	d12c      	bne.n	8000b00 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	613b      	str	r3, [r7, #16]
 8000aaa:	4b18      	ldr	r3, [pc, #96]	; (8000b0c <HAL_SPI_MspInit+0x88>)
 8000aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aae:	4a17      	ldr	r2, [pc, #92]	; (8000b0c <HAL_SPI_MspInit+0x88>)
 8000ab0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000ab4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ab6:	4b15      	ldr	r3, [pc, #84]	; (8000b0c <HAL_SPI_MspInit+0x88>)
 8000ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000abe:	613b      	str	r3, [r7, #16]
 8000ac0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	60fb      	str	r3, [r7, #12]
 8000ac6:	4b11      	ldr	r3, [pc, #68]	; (8000b0c <HAL_SPI_MspInit+0x88>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aca:	4a10      	ldr	r2, [pc, #64]	; (8000b0c <HAL_SPI_MspInit+0x88>)
 8000acc:	f043 0320 	orr.w	r3, r3, #32
 8000ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad2:	4b0e      	ldr	r3, [pc, #56]	; (8000b0c <HAL_SPI_MspInit+0x88>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad6:	f003 0320 	and.w	r3, r3, #32
 8000ada:	60fb      	str	r3, [r7, #12]
 8000adc:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF9     ------> SPI5_MOSI
    PF8     ------> SPI5_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_8;
 8000ade:	f44f 7360 	mov.w	r3, #896	; 0x380
 8000ae2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae4:	2302      	movs	r3, #2
 8000ae6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aec:	2303      	movs	r3, #3
 8000aee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8000af0:	2305      	movs	r3, #5
 8000af2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000af4:	f107 0314 	add.w	r3, r7, #20
 8000af8:	4619      	mov	r1, r3
 8000afa:	4805      	ldr	r0, [pc, #20]	; (8000b10 <HAL_SPI_MspInit+0x8c>)
 8000afc:	f000 ff32 	bl	8001964 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8000b00:	bf00      	nop
 8000b02:	3728      	adds	r7, #40	; 0x28
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	40015000 	.word	0x40015000
 8000b0c:	40023800 	.word	0x40023800
 8000b10:	40021400 	.word	0x40021400

08000b14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	607b      	str	r3, [r7, #4]
 8000b1e:	4b12      	ldr	r3, [pc, #72]	; (8000b68 <HAL_MspInit+0x54>)
 8000b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b22:	4a11      	ldr	r2, [pc, #68]	; (8000b68 <HAL_MspInit+0x54>)
 8000b24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b28:	6453      	str	r3, [r2, #68]	; 0x44
 8000b2a:	4b0f      	ldr	r3, [pc, #60]	; (8000b68 <HAL_MspInit+0x54>)
 8000b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b32:	607b      	str	r3, [r7, #4]
 8000b34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b36:	2300      	movs	r3, #0
 8000b38:	603b      	str	r3, [r7, #0]
 8000b3a:	4b0b      	ldr	r3, [pc, #44]	; (8000b68 <HAL_MspInit+0x54>)
 8000b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b3e:	4a0a      	ldr	r2, [pc, #40]	; (8000b68 <HAL_MspInit+0x54>)
 8000b40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b44:	6413      	str	r3, [r2, #64]	; 0x40
 8000b46:	4b08      	ldr	r3, [pc, #32]	; (8000b68 <HAL_MspInit+0x54>)
 8000b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b4e:	603b      	str	r3, [r7, #0]
 8000b50:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b52:	2200      	movs	r2, #0
 8000b54:	210f      	movs	r1, #15
 8000b56:	f06f 0001 	mvn.w	r0, #1
 8000b5a:	f000 fbef 	bl	800133c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b5e:	bf00      	nop
 8000b60:	3708      	adds	r7, #8
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	40023800 	.word	0x40023800

08000b6c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b08e      	sub	sp, #56	; 0x38
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000b74:	2300      	movs	r3, #0
 8000b76:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	60fb      	str	r3, [r7, #12]
 8000b80:	4b33      	ldr	r3, [pc, #204]	; (8000c50 <HAL_InitTick+0xe4>)
 8000b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b84:	4a32      	ldr	r2, [pc, #200]	; (8000c50 <HAL_InitTick+0xe4>)
 8000b86:	f043 0308 	orr.w	r3, r3, #8
 8000b8a:	6413      	str	r3, [r2, #64]	; 0x40
 8000b8c:	4b30      	ldr	r3, [pc, #192]	; (8000c50 <HAL_InitTick+0xe4>)
 8000b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b90:	f003 0308 	and.w	r3, r3, #8
 8000b94:	60fb      	str	r3, [r7, #12]
 8000b96:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b98:	f107 0210 	add.w	r2, r7, #16
 8000b9c:	f107 0314 	add.w	r3, r7, #20
 8000ba0:	4611      	mov	r1, r2
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f002 ff66 	bl	8003a74 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000ba8:	6a3b      	ldr	r3, [r7, #32]
 8000baa:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d103      	bne.n	8000bba <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000bb2:	f002 ff37 	bl	8003a24 <HAL_RCC_GetPCLK1Freq>
 8000bb6:	6378      	str	r0, [r7, #52]	; 0x34
 8000bb8:	e004      	b.n	8000bc4 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000bba:	f002 ff33 	bl	8003a24 <HAL_RCC_GetPCLK1Freq>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	005b      	lsls	r3, r3, #1
 8000bc2:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000bc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bc6:	4a23      	ldr	r2, [pc, #140]	; (8000c54 <HAL_InitTick+0xe8>)
 8000bc8:	fba2 2303 	umull	r2, r3, r2, r3
 8000bcc:	0c9b      	lsrs	r3, r3, #18
 8000bce:	3b01      	subs	r3, #1
 8000bd0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8000bd2:	4b21      	ldr	r3, [pc, #132]	; (8000c58 <HAL_InitTick+0xec>)
 8000bd4:	4a21      	ldr	r2, [pc, #132]	; (8000c5c <HAL_InitTick+0xf0>)
 8000bd6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8000bd8:	4b1f      	ldr	r3, [pc, #124]	; (8000c58 <HAL_InitTick+0xec>)
 8000bda:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000bde:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8000be0:	4a1d      	ldr	r2, [pc, #116]	; (8000c58 <HAL_InitTick+0xec>)
 8000be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000be4:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8000be6:	4b1c      	ldr	r3, [pc, #112]	; (8000c58 <HAL_InitTick+0xec>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bec:	4b1a      	ldr	r3, [pc, #104]	; (8000c58 <HAL_InitTick+0xec>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bf2:	4b19      	ldr	r3, [pc, #100]	; (8000c58 <HAL_InitTick+0xec>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 8000bf8:	4817      	ldr	r0, [pc, #92]	; (8000c58 <HAL_InitTick+0xec>)
 8000bfa:	f002 fff6 	bl	8003bea <HAL_TIM_Base_Init>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000c04:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d11b      	bne.n	8000c44 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 8000c0c:	4812      	ldr	r0, [pc, #72]	; (8000c58 <HAL_InitTick+0xec>)
 8000c0e:	f003 f845 	bl	8003c9c <HAL_TIM_Base_Start_IT>
 8000c12:	4603      	mov	r3, r0
 8000c14:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000c18:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d111      	bne.n	8000c44 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8000c20:	2032      	movs	r0, #50	; 0x32
 8000c22:	f000 fba7 	bl	8001374 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	2b0f      	cmp	r3, #15
 8000c2a:	d808      	bhi.n	8000c3e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	6879      	ldr	r1, [r7, #4]
 8000c30:	2032      	movs	r0, #50	; 0x32
 8000c32:	f000 fb83 	bl	800133c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c36:	4a0a      	ldr	r2, [pc, #40]	; (8000c60 <HAL_InitTick+0xf4>)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	6013      	str	r3, [r2, #0]
 8000c3c:	e002      	b.n	8000c44 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000c44:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000c48:	4618      	mov	r0, r3
 8000c4a:	3738      	adds	r7, #56	; 0x38
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	40023800 	.word	0x40023800
 8000c54:	431bde83 	.word	0x431bde83
 8000c58:	20000494 	.word	0x20000494
 8000c5c:	40000c00 	.word	0x40000c00
 8000c60:	20000004 	.word	0x20000004

08000c64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c68:	e7fe      	b.n	8000c68 <NMI_Handler+0x4>

08000c6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c6a:	b480      	push	{r7}
 8000c6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c6e:	e7fe      	b.n	8000c6e <HardFault_Handler+0x4>

08000c70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c74:	e7fe      	b.n	8000c74 <MemManage_Handler+0x4>

08000c76 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c76:	b480      	push	{r7}
 8000c78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c7a:	e7fe      	b.n	8000c7a <BusFault_Handler+0x4>

08000c7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c80:	e7fe      	b.n	8000c80 <UsageFault_Handler+0x4>

08000c82 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c82:	b480      	push	{r7}
 8000c84:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c86:	bf00      	nop
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr

08000c90 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000c94:	4802      	ldr	r0, [pc, #8]	; (8000ca0 <TIM5_IRQHandler+0x10>)
 8000c96:	f003 f871 	bl	8003d7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000c9a:	bf00      	nop
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	20000494 	.word	0x20000494

08000ca4 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8000ca8:	4802      	ldr	r0, [pc, #8]	; (8000cb4 <DMA2_Stream1_IRQHandler+0x10>)
 8000caa:	f000 fc1f 	bl	80014ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8000cae:	bf00      	nop
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	20000524 	.word	0x20000524

08000cb8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000cbc:	4802      	ldr	r0, [pc, #8]	; (8000cc8 <OTG_FS_IRQHandler+0x10>)
 8000cbe:	f001 f974 	bl	8001faa <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000cc2:	bf00      	nop
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	2000581c 	.word	0x2000581c

08000ccc <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8000cd0:	4802      	ldr	r0, [pc, #8]	; (8000cdc <DMA2_Stream6_IRQHandler+0x10>)
 8000cd2:	f000 fc0b 	bl	80014ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8000cd6:	bf00      	nop
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	20000584 	.word	0x20000584

08000ce0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ce4:	4b06      	ldr	r3, [pc, #24]	; (8000d00 <SystemInit+0x20>)
 8000ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cea:	4a05      	ldr	r2, [pc, #20]	; (8000d00 <SystemInit+0x20>)
 8000cec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cf0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cf4:	bf00      	nop
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	e000ed00 	.word	0xe000ed00

08000d04 <MX_USART6_UART_Init>:
DMA_HandleTypeDef hdma_usart6_tx;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000d08:	4b11      	ldr	r3, [pc, #68]	; (8000d50 <MX_USART6_UART_Init+0x4c>)
 8000d0a:	4a12      	ldr	r2, [pc, #72]	; (8000d54 <MX_USART6_UART_Init+0x50>)
 8000d0c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 921600;
 8000d0e:	4b10      	ldr	r3, [pc, #64]	; (8000d50 <MX_USART6_UART_Init+0x4c>)
 8000d10:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8000d14:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000d16:	4b0e      	ldr	r3, [pc, #56]	; (8000d50 <MX_USART6_UART_Init+0x4c>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000d1c:	4b0c      	ldr	r3, [pc, #48]	; (8000d50 <MX_USART6_UART_Init+0x4c>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000d22:	4b0b      	ldr	r3, [pc, #44]	; (8000d50 <MX_USART6_UART_Init+0x4c>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000d28:	4b09      	ldr	r3, [pc, #36]	; (8000d50 <MX_USART6_UART_Init+0x4c>)
 8000d2a:	220c      	movs	r2, #12
 8000d2c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d2e:	4b08      	ldr	r3, [pc, #32]	; (8000d50 <MX_USART6_UART_Init+0x4c>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d34:	4b06      	ldr	r3, [pc, #24]	; (8000d50 <MX_USART6_UART_Init+0x4c>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000d3a:	4805      	ldr	r0, [pc, #20]	; (8000d50 <MX_USART6_UART_Init+0x4c>)
 8000d3c:	f003 f9f6 	bl	800412c <HAL_UART_Init>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000d46:	f7ff fe61 	bl	8000a0c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000d4a:	bf00      	nop
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	200004dc 	.word	0x200004dc
 8000d54:	40011400 	.word	0x40011400

08000d58 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b08a      	sub	sp, #40	; 0x28
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d60:	f107 0314 	add.w	r3, r7, #20
 8000d64:	2200      	movs	r2, #0
 8000d66:	601a      	str	r2, [r3, #0]
 8000d68:	605a      	str	r2, [r3, #4]
 8000d6a:	609a      	str	r2, [r3, #8]
 8000d6c:	60da      	str	r2, [r3, #12]
 8000d6e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART6)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a48      	ldr	r2, [pc, #288]	; (8000e98 <HAL_UART_MspInit+0x140>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	f040 808a 	bne.w	8000e90 <HAL_UART_MspInit+0x138>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	613b      	str	r3, [r7, #16]
 8000d80:	4b46      	ldr	r3, [pc, #280]	; (8000e9c <HAL_UART_MspInit+0x144>)
 8000d82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d84:	4a45      	ldr	r2, [pc, #276]	; (8000e9c <HAL_UART_MspInit+0x144>)
 8000d86:	f043 0320 	orr.w	r3, r3, #32
 8000d8a:	6453      	str	r3, [r2, #68]	; 0x44
 8000d8c:	4b43      	ldr	r3, [pc, #268]	; (8000e9c <HAL_UART_MspInit+0x144>)
 8000d8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d90:	f003 0320 	and.w	r3, r3, #32
 8000d94:	613b      	str	r3, [r7, #16]
 8000d96:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d98:	2300      	movs	r3, #0
 8000d9a:	60fb      	str	r3, [r7, #12]
 8000d9c:	4b3f      	ldr	r3, [pc, #252]	; (8000e9c <HAL_UART_MspInit+0x144>)
 8000d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da0:	4a3e      	ldr	r2, [pc, #248]	; (8000e9c <HAL_UART_MspInit+0x144>)
 8000da2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000da6:	6313      	str	r3, [r2, #48]	; 0x30
 8000da8:	4b3c      	ldr	r3, [pc, #240]	; (8000e9c <HAL_UART_MspInit+0x144>)
 8000daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000db0:	60fb      	str	r3, [r7, #12]
 8000db2:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PG14     ------> USART6_TX
    PG9     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_9;
 8000db4:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8000db8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dba:	2302      	movs	r3, #2
 8000dbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dc2:	2303      	movs	r3, #3
 8000dc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000dc6:	2308      	movs	r3, #8
 8000dc8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000dca:	f107 0314 	add.w	r3, r7, #20
 8000dce:	4619      	mov	r1, r3
 8000dd0:	4833      	ldr	r0, [pc, #204]	; (8000ea0 <HAL_UART_MspInit+0x148>)
 8000dd2:	f000 fdc7 	bl	8001964 <HAL_GPIO_Init>

    /* USART6 DMA Init */
    /* USART6_RX Init */
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8000dd6:	4b33      	ldr	r3, [pc, #204]	; (8000ea4 <HAL_UART_MspInit+0x14c>)
 8000dd8:	4a33      	ldr	r2, [pc, #204]	; (8000ea8 <HAL_UART_MspInit+0x150>)
 8000dda:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8000ddc:	4b31      	ldr	r3, [pc, #196]	; (8000ea4 <HAL_UART_MspInit+0x14c>)
 8000dde:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8000de2:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000de4:	4b2f      	ldr	r3, [pc, #188]	; (8000ea4 <HAL_UART_MspInit+0x14c>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000dea:	4b2e      	ldr	r3, [pc, #184]	; (8000ea4 <HAL_UART_MspInit+0x14c>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000df0:	4b2c      	ldr	r3, [pc, #176]	; (8000ea4 <HAL_UART_MspInit+0x14c>)
 8000df2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000df6:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000df8:	4b2a      	ldr	r3, [pc, #168]	; (8000ea4 <HAL_UART_MspInit+0x14c>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000dfe:	4b29      	ldr	r3, [pc, #164]	; (8000ea4 <HAL_UART_MspInit+0x14c>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8000e04:	4b27      	ldr	r3, [pc, #156]	; (8000ea4 <HAL_UART_MspInit+0x14c>)
 8000e06:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e0a:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000e0c:	4b25      	ldr	r3, [pc, #148]	; (8000ea4 <HAL_UART_MspInit+0x14c>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e12:	4b24      	ldr	r3, [pc, #144]	; (8000ea4 <HAL_UART_MspInit+0x14c>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8000e18:	4822      	ldr	r0, [pc, #136]	; (8000ea4 <HAL_UART_MspInit+0x14c>)
 8000e1a:	f000 fab9 	bl	8001390 <HAL_DMA_Init>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8000e24:	f7ff fdf2 	bl	8000a0c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	4a1e      	ldr	r2, [pc, #120]	; (8000ea4 <HAL_UART_MspInit+0x14c>)
 8000e2c:	63da      	str	r2, [r3, #60]	; 0x3c
 8000e2e:	4a1d      	ldr	r2, [pc, #116]	; (8000ea4 <HAL_UART_MspInit+0x14c>)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART6_TX Init */
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8000e34:	4b1d      	ldr	r3, [pc, #116]	; (8000eac <HAL_UART_MspInit+0x154>)
 8000e36:	4a1e      	ldr	r2, [pc, #120]	; (8000eb0 <HAL_UART_MspInit+0x158>)
 8000e38:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8000e3a:	4b1c      	ldr	r3, [pc, #112]	; (8000eac <HAL_UART_MspInit+0x154>)
 8000e3c:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8000e40:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e42:	4b1a      	ldr	r3, [pc, #104]	; (8000eac <HAL_UART_MspInit+0x154>)
 8000e44:	2240      	movs	r2, #64	; 0x40
 8000e46:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e48:	4b18      	ldr	r3, [pc, #96]	; (8000eac <HAL_UART_MspInit+0x154>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000e4e:	4b17      	ldr	r3, [pc, #92]	; (8000eac <HAL_UART_MspInit+0x154>)
 8000e50:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e54:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e56:	4b15      	ldr	r3, [pc, #84]	; (8000eac <HAL_UART_MspInit+0x154>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e5c:	4b13      	ldr	r3, [pc, #76]	; (8000eac <HAL_UART_MspInit+0x154>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8000e62:	4b12      	ldr	r3, [pc, #72]	; (8000eac <HAL_UART_MspInit+0x154>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000e68:	4b10      	ldr	r3, [pc, #64]	; (8000eac <HAL_UART_MspInit+0x154>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e6e:	4b0f      	ldr	r3, [pc, #60]	; (8000eac <HAL_UART_MspInit+0x154>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8000e74:	480d      	ldr	r0, [pc, #52]	; (8000eac <HAL_UART_MspInit+0x154>)
 8000e76:	f000 fa8b 	bl	8001390 <HAL_DMA_Init>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d001      	beq.n	8000e84 <HAL_UART_MspInit+0x12c>
    {
      Error_Handler();
 8000e80:	f7ff fdc4 	bl	8000a0c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart6_tx);
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	4a09      	ldr	r2, [pc, #36]	; (8000eac <HAL_UART_MspInit+0x154>)
 8000e88:	639a      	str	r2, [r3, #56]	; 0x38
 8000e8a:	4a08      	ldr	r2, [pc, #32]	; (8000eac <HAL_UART_MspInit+0x154>)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8000e90:	bf00      	nop
 8000e92:	3728      	adds	r7, #40	; 0x28
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	40011400 	.word	0x40011400
 8000e9c:	40023800 	.word	0x40023800
 8000ea0:	40021800 	.word	0x40021800
 8000ea4:	20000524 	.word	0x20000524
 8000ea8:	40026428 	.word	0x40026428
 8000eac:	20000584 	.word	0x20000584
 8000eb0:	400264a0 	.word	0x400264a0

08000eb4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000eb4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000eec <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000eb8:	f7ff ff12 	bl	8000ce0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ebc:	480c      	ldr	r0, [pc, #48]	; (8000ef0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ebe:	490d      	ldr	r1, [pc, #52]	; (8000ef4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ec0:	4a0d      	ldr	r2, [pc, #52]	; (8000ef8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ec2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ec4:	e002      	b.n	8000ecc <LoopCopyDataInit>

08000ec6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ec6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ec8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eca:	3304      	adds	r3, #4

08000ecc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ecc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ece:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ed0:	d3f9      	bcc.n	8000ec6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ed2:	4a0a      	ldr	r2, [pc, #40]	; (8000efc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ed4:	4c0a      	ldr	r4, [pc, #40]	; (8000f00 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ed6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ed8:	e001      	b.n	8000ede <LoopFillZerobss>

08000eda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000edc:	3204      	adds	r2, #4

08000ede <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ede:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ee0:	d3fb      	bcc.n	8000eda <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000ee2:	f008 fe7d 	bl	8009be0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ee6:	f7ff fcfd 	bl	80008e4 <main>
  bx  lr    
 8000eea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000eec:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000ef0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ef4:	20000150 	.word	0x20000150
  ldr r2, =_sidata
 8000ef8:	08009dc4 	.word	0x08009dc4
  ldr r2, =_sbss
 8000efc:	20000150 	.word	0x20000150
  ldr r4, =_ebss
 8000f00:	20006060 	.word	0x20006060

08000f04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f04:	e7fe      	b.n	8000f04 <ADC_IRQHandler>
	...

08000f08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f0c:	4b0e      	ldr	r3, [pc, #56]	; (8000f48 <HAL_Init+0x40>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a0d      	ldr	r2, [pc, #52]	; (8000f48 <HAL_Init+0x40>)
 8000f12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f16:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f18:	4b0b      	ldr	r3, [pc, #44]	; (8000f48 <HAL_Init+0x40>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a0a      	ldr	r2, [pc, #40]	; (8000f48 <HAL_Init+0x40>)
 8000f1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f22:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f24:	4b08      	ldr	r3, [pc, #32]	; (8000f48 <HAL_Init+0x40>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a07      	ldr	r2, [pc, #28]	; (8000f48 <HAL_Init+0x40>)
 8000f2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f2e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f30:	2003      	movs	r0, #3
 8000f32:	f000 f9f8 	bl	8001326 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f36:	200f      	movs	r0, #15
 8000f38:	f7ff fe18 	bl	8000b6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f3c:	f7ff fdea 	bl	8000b14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f40:	2300      	movs	r3, #0
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	40023c00 	.word	0x40023c00

08000f4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f50:	4b06      	ldr	r3, [pc, #24]	; (8000f6c <HAL_IncTick+0x20>)
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	461a      	mov	r2, r3
 8000f56:	4b06      	ldr	r3, [pc, #24]	; (8000f70 <HAL_IncTick+0x24>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4413      	add	r3, r2
 8000f5c:	4a04      	ldr	r2, [pc, #16]	; (8000f70 <HAL_IncTick+0x24>)
 8000f5e:	6013      	str	r3, [r2, #0]
}
 8000f60:	bf00      	nop
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	20000008 	.word	0x20000008
 8000f70:	200005e4 	.word	0x200005e4

08000f74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  return uwTick;
 8000f78:	4b03      	ldr	r3, [pc, #12]	; (8000f88 <HAL_GetTick+0x14>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	200005e4 	.word	0x200005e4

08000f8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b084      	sub	sp, #16
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f94:	f7ff ffee 	bl	8000f74 <HAL_GetTick>
 8000f98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000fa4:	d005      	beq.n	8000fb2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fa6:	4b0a      	ldr	r3, [pc, #40]	; (8000fd0 <HAL_Delay+0x44>)
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	461a      	mov	r2, r3
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	4413      	add	r3, r2
 8000fb0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fb2:	bf00      	nop
 8000fb4:	f7ff ffde 	bl	8000f74 <HAL_GetTick>
 8000fb8:	4602      	mov	r2, r0
 8000fba:	68bb      	ldr	r3, [r7, #8]
 8000fbc:	1ad3      	subs	r3, r2, r3
 8000fbe:	68fa      	ldr	r2, [r7, #12]
 8000fc0:	429a      	cmp	r2, r3
 8000fc2:	d8f7      	bhi.n	8000fb4 <HAL_Delay+0x28>
  {
  }
}
 8000fc4:	bf00      	nop
 8000fc6:	bf00      	nop
 8000fc8:	3710      	adds	r7, #16
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	20000008 	.word	0x20000008

08000fd4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b084      	sub	sp, #16
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d101      	bne.n	8000fe6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	e0ed      	b.n	80011c2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000fec:	b2db      	uxtb	r3, r3
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d102      	bne.n	8000ff8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000ff2:	6878      	ldr	r0, [r7, #4]
 8000ff4:	f7ff fadc 	bl	80005b0 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f042 0201 	orr.w	r2, r2, #1
 8001006:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001008:	f7ff ffb4 	bl	8000f74 <HAL_GetTick>
 800100c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800100e:	e012      	b.n	8001036 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001010:	f7ff ffb0 	bl	8000f74 <HAL_GetTick>
 8001014:	4602      	mov	r2, r0
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	1ad3      	subs	r3, r2, r3
 800101a:	2b0a      	cmp	r3, #10
 800101c:	d90b      	bls.n	8001036 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001022:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	2205      	movs	r2, #5
 800102e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001032:	2301      	movs	r3, #1
 8001034:	e0c5      	b.n	80011c2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	f003 0301 	and.w	r3, r3, #1
 8001040:	2b00      	cmp	r3, #0
 8001042:	d0e5      	beq.n	8001010 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	681a      	ldr	r2, [r3, #0]
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f022 0202 	bic.w	r2, r2, #2
 8001052:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001054:	f7ff ff8e 	bl	8000f74 <HAL_GetTick>
 8001058:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800105a:	e012      	b.n	8001082 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800105c:	f7ff ff8a 	bl	8000f74 <HAL_GetTick>
 8001060:	4602      	mov	r2, r0
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	1ad3      	subs	r3, r2, r3
 8001066:	2b0a      	cmp	r3, #10
 8001068:	d90b      	bls.n	8001082 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800106e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2205      	movs	r2, #5
 800107a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800107e:	2301      	movs	r3, #1
 8001080:	e09f      	b.n	80011c2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	f003 0302 	and.w	r3, r3, #2
 800108c:	2b00      	cmp	r3, #0
 800108e:	d1e5      	bne.n	800105c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	7e1b      	ldrb	r3, [r3, #24]
 8001094:	2b01      	cmp	r3, #1
 8001096:	d108      	bne.n	80010aa <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	681a      	ldr	r2, [r3, #0]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80010a6:	601a      	str	r2, [r3, #0]
 80010a8:	e007      	b.n	80010ba <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	681a      	ldr	r2, [r3, #0]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80010b8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	7e5b      	ldrb	r3, [r3, #25]
 80010be:	2b01      	cmp	r3, #1
 80010c0:	d108      	bne.n	80010d4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	681a      	ldr	r2, [r3, #0]
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80010d0:	601a      	str	r2, [r3, #0]
 80010d2:	e007      	b.n	80010e4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	681a      	ldr	r2, [r3, #0]
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80010e2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	7e9b      	ldrb	r3, [r3, #26]
 80010e8:	2b01      	cmp	r3, #1
 80010ea:	d108      	bne.n	80010fe <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	681a      	ldr	r2, [r3, #0]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f042 0220 	orr.w	r2, r2, #32
 80010fa:	601a      	str	r2, [r3, #0]
 80010fc:	e007      	b.n	800110e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	681a      	ldr	r2, [r3, #0]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f022 0220 	bic.w	r2, r2, #32
 800110c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	7edb      	ldrb	r3, [r3, #27]
 8001112:	2b01      	cmp	r3, #1
 8001114:	d108      	bne.n	8001128 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	681a      	ldr	r2, [r3, #0]
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f022 0210 	bic.w	r2, r2, #16
 8001124:	601a      	str	r2, [r3, #0]
 8001126:	e007      	b.n	8001138 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f042 0210 	orr.w	r2, r2, #16
 8001136:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	7f1b      	ldrb	r3, [r3, #28]
 800113c:	2b01      	cmp	r3, #1
 800113e:	d108      	bne.n	8001152 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	681a      	ldr	r2, [r3, #0]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f042 0208 	orr.w	r2, r2, #8
 800114e:	601a      	str	r2, [r3, #0]
 8001150:	e007      	b.n	8001162 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f022 0208 	bic.w	r2, r2, #8
 8001160:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	7f5b      	ldrb	r3, [r3, #29]
 8001166:	2b01      	cmp	r3, #1
 8001168:	d108      	bne.n	800117c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	681a      	ldr	r2, [r3, #0]
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f042 0204 	orr.w	r2, r2, #4
 8001178:	601a      	str	r2, [r3, #0]
 800117a:	e007      	b.n	800118c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	681a      	ldr	r2, [r3, #0]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f022 0204 	bic.w	r2, r2, #4
 800118a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	689a      	ldr	r2, [r3, #8]
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	68db      	ldr	r3, [r3, #12]
 8001194:	431a      	orrs	r2, r3
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	691b      	ldr	r3, [r3, #16]
 800119a:	431a      	orrs	r2, r3
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	695b      	ldr	r3, [r3, #20]
 80011a0:	ea42 0103 	orr.w	r1, r2, r3
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	1e5a      	subs	r2, r3, #1
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	430a      	orrs	r2, r1
 80011b0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	2200      	movs	r2, #0
 80011b6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2201      	movs	r2, #1
 80011bc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80011c0:	2300      	movs	r3, #0
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3710      	adds	r7, #16
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
	...

080011cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b085      	sub	sp, #20
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	f003 0307 	and.w	r3, r3, #7
 80011da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011dc:	4b0c      	ldr	r3, [pc, #48]	; (8001210 <__NVIC_SetPriorityGrouping+0x44>)
 80011de:	68db      	ldr	r3, [r3, #12]
 80011e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011e2:	68ba      	ldr	r2, [r7, #8]
 80011e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011e8:	4013      	ands	r3, r2
 80011ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011fe:	4a04      	ldr	r2, [pc, #16]	; (8001210 <__NVIC_SetPriorityGrouping+0x44>)
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	60d3      	str	r3, [r2, #12]
}
 8001204:	bf00      	nop
 8001206:	3714      	adds	r7, #20
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr
 8001210:	e000ed00 	.word	0xe000ed00

08001214 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001218:	4b04      	ldr	r3, [pc, #16]	; (800122c <__NVIC_GetPriorityGrouping+0x18>)
 800121a:	68db      	ldr	r3, [r3, #12]
 800121c:	0a1b      	lsrs	r3, r3, #8
 800121e:	f003 0307 	and.w	r3, r3, #7
}
 8001222:	4618      	mov	r0, r3
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr
 800122c:	e000ed00 	.word	0xe000ed00

08001230 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
 8001236:	4603      	mov	r3, r0
 8001238:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800123a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800123e:	2b00      	cmp	r3, #0
 8001240:	db0b      	blt.n	800125a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001242:	79fb      	ldrb	r3, [r7, #7]
 8001244:	f003 021f 	and.w	r2, r3, #31
 8001248:	4907      	ldr	r1, [pc, #28]	; (8001268 <__NVIC_EnableIRQ+0x38>)
 800124a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800124e:	095b      	lsrs	r3, r3, #5
 8001250:	2001      	movs	r0, #1
 8001252:	fa00 f202 	lsl.w	r2, r0, r2
 8001256:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800125a:	bf00      	nop
 800125c:	370c      	adds	r7, #12
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	e000e100 	.word	0xe000e100

0800126c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	4603      	mov	r3, r0
 8001274:	6039      	str	r1, [r7, #0]
 8001276:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001278:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800127c:	2b00      	cmp	r3, #0
 800127e:	db0a      	blt.n	8001296 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	b2da      	uxtb	r2, r3
 8001284:	490c      	ldr	r1, [pc, #48]	; (80012b8 <__NVIC_SetPriority+0x4c>)
 8001286:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800128a:	0112      	lsls	r2, r2, #4
 800128c:	b2d2      	uxtb	r2, r2
 800128e:	440b      	add	r3, r1
 8001290:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001294:	e00a      	b.n	80012ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	b2da      	uxtb	r2, r3
 800129a:	4908      	ldr	r1, [pc, #32]	; (80012bc <__NVIC_SetPriority+0x50>)
 800129c:	79fb      	ldrb	r3, [r7, #7]
 800129e:	f003 030f 	and.w	r3, r3, #15
 80012a2:	3b04      	subs	r3, #4
 80012a4:	0112      	lsls	r2, r2, #4
 80012a6:	b2d2      	uxtb	r2, r2
 80012a8:	440b      	add	r3, r1
 80012aa:	761a      	strb	r2, [r3, #24]
}
 80012ac:	bf00      	nop
 80012ae:	370c      	adds	r7, #12
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr
 80012b8:	e000e100 	.word	0xe000e100
 80012bc:	e000ed00 	.word	0xe000ed00

080012c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b089      	sub	sp, #36	; 0x24
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	60f8      	str	r0, [r7, #12]
 80012c8:	60b9      	str	r1, [r7, #8]
 80012ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	f003 0307 	and.w	r3, r3, #7
 80012d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012d4:	69fb      	ldr	r3, [r7, #28]
 80012d6:	f1c3 0307 	rsb	r3, r3, #7
 80012da:	2b04      	cmp	r3, #4
 80012dc:	bf28      	it	cs
 80012de:	2304      	movcs	r3, #4
 80012e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012e2:	69fb      	ldr	r3, [r7, #28]
 80012e4:	3304      	adds	r3, #4
 80012e6:	2b06      	cmp	r3, #6
 80012e8:	d902      	bls.n	80012f0 <NVIC_EncodePriority+0x30>
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	3b03      	subs	r3, #3
 80012ee:	e000      	b.n	80012f2 <NVIC_EncodePriority+0x32>
 80012f0:	2300      	movs	r3, #0
 80012f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80012f8:	69bb      	ldr	r3, [r7, #24]
 80012fa:	fa02 f303 	lsl.w	r3, r2, r3
 80012fe:	43da      	mvns	r2, r3
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	401a      	ands	r2, r3
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001308:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	fa01 f303 	lsl.w	r3, r1, r3
 8001312:	43d9      	mvns	r1, r3
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001318:	4313      	orrs	r3, r2
         );
}
 800131a:	4618      	mov	r0, r3
 800131c:	3724      	adds	r7, #36	; 0x24
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr

08001326 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001326:	b580      	push	{r7, lr}
 8001328:	b082      	sub	sp, #8
 800132a:	af00      	add	r7, sp, #0
 800132c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800132e:	6878      	ldr	r0, [r7, #4]
 8001330:	f7ff ff4c 	bl	80011cc <__NVIC_SetPriorityGrouping>
}
 8001334:	bf00      	nop
 8001336:	3708      	adds	r7, #8
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}

0800133c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800133c:	b580      	push	{r7, lr}
 800133e:	b086      	sub	sp, #24
 8001340:	af00      	add	r7, sp, #0
 8001342:	4603      	mov	r3, r0
 8001344:	60b9      	str	r1, [r7, #8]
 8001346:	607a      	str	r2, [r7, #4]
 8001348:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800134a:	2300      	movs	r3, #0
 800134c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800134e:	f7ff ff61 	bl	8001214 <__NVIC_GetPriorityGrouping>
 8001352:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001354:	687a      	ldr	r2, [r7, #4]
 8001356:	68b9      	ldr	r1, [r7, #8]
 8001358:	6978      	ldr	r0, [r7, #20]
 800135a:	f7ff ffb1 	bl	80012c0 <NVIC_EncodePriority>
 800135e:	4602      	mov	r2, r0
 8001360:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001364:	4611      	mov	r1, r2
 8001366:	4618      	mov	r0, r3
 8001368:	f7ff ff80 	bl	800126c <__NVIC_SetPriority>
}
 800136c:	bf00      	nop
 800136e:	3718      	adds	r7, #24
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}

08001374 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
 800137a:	4603      	mov	r3, r0
 800137c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800137e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001382:	4618      	mov	r0, r3
 8001384:	f7ff ff54 	bl	8001230 <__NVIC_EnableIRQ>
}
 8001388:	bf00      	nop
 800138a:	3708      	adds	r7, #8
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}

08001390 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b086      	sub	sp, #24
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001398:	2300      	movs	r3, #0
 800139a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800139c:	f7ff fdea 	bl	8000f74 <HAL_GetTick>
 80013a0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d101      	bne.n	80013ac <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80013a8:	2301      	movs	r3, #1
 80013aa:	e099      	b.n	80014e0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2202      	movs	r2, #2
 80013b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2200      	movs	r2, #0
 80013b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f022 0201 	bic.w	r2, r2, #1
 80013ca:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013cc:	e00f      	b.n	80013ee <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80013ce:	f7ff fdd1 	bl	8000f74 <HAL_GetTick>
 80013d2:	4602      	mov	r2, r0
 80013d4:	693b      	ldr	r3, [r7, #16]
 80013d6:	1ad3      	subs	r3, r2, r3
 80013d8:	2b05      	cmp	r3, #5
 80013da:	d908      	bls.n	80013ee <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2220      	movs	r2, #32
 80013e0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2203      	movs	r2, #3
 80013e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80013ea:	2303      	movs	r3, #3
 80013ec:	e078      	b.n	80014e0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f003 0301 	and.w	r3, r3, #1
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d1e8      	bne.n	80013ce <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001404:	697a      	ldr	r2, [r7, #20]
 8001406:	4b38      	ldr	r3, [pc, #224]	; (80014e8 <HAL_DMA_Init+0x158>)
 8001408:	4013      	ands	r3, r2
 800140a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	685a      	ldr	r2, [r3, #4]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	689b      	ldr	r3, [r3, #8]
 8001414:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800141a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	691b      	ldr	r3, [r3, #16]
 8001420:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001426:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	699b      	ldr	r3, [r3, #24]
 800142c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001432:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6a1b      	ldr	r3, [r3, #32]
 8001438:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800143a:	697a      	ldr	r2, [r7, #20]
 800143c:	4313      	orrs	r3, r2
 800143e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001444:	2b04      	cmp	r3, #4
 8001446:	d107      	bne.n	8001458 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001450:	4313      	orrs	r3, r2
 8001452:	697a      	ldr	r2, [r7, #20]
 8001454:	4313      	orrs	r3, r2
 8001456:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	697a      	ldr	r2, [r7, #20]
 800145e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	695b      	ldr	r3, [r3, #20]
 8001466:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	f023 0307 	bic.w	r3, r3, #7
 800146e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001474:	697a      	ldr	r2, [r7, #20]
 8001476:	4313      	orrs	r3, r2
 8001478:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800147e:	2b04      	cmp	r3, #4
 8001480:	d117      	bne.n	80014b2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001486:	697a      	ldr	r2, [r7, #20]
 8001488:	4313      	orrs	r3, r2
 800148a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001490:	2b00      	cmp	r3, #0
 8001492:	d00e      	beq.n	80014b2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001494:	6878      	ldr	r0, [r7, #4]
 8001496:	f000 f9e9 	bl	800186c <DMA_CheckFifoParam>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d008      	beq.n	80014b2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2240      	movs	r2, #64	; 0x40
 80014a4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2201      	movs	r2, #1
 80014aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80014ae:	2301      	movs	r3, #1
 80014b0:	e016      	b.n	80014e0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	697a      	ldr	r2, [r7, #20]
 80014b8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80014ba:	6878      	ldr	r0, [r7, #4]
 80014bc:	f000 f9a0 	bl	8001800 <DMA_CalcBaseAndBitshift>
 80014c0:	4603      	mov	r3, r0
 80014c2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014c8:	223f      	movs	r2, #63	; 0x3f
 80014ca:	409a      	lsls	r2, r3
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2200      	movs	r2, #0
 80014d4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2201      	movs	r2, #1
 80014da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80014de:	2300      	movs	r3, #0
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	3718      	adds	r7, #24
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	f010803f 	.word	0xf010803f

080014ec <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b086      	sub	sp, #24
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80014f4:	2300      	movs	r3, #0
 80014f6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80014f8:	4b8e      	ldr	r3, [pc, #568]	; (8001734 <HAL_DMA_IRQHandler+0x248>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a8e      	ldr	r2, [pc, #568]	; (8001738 <HAL_DMA_IRQHandler+0x24c>)
 80014fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001502:	0a9b      	lsrs	r3, r3, #10
 8001504:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800150a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001516:	2208      	movs	r2, #8
 8001518:	409a      	lsls	r2, r3
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	4013      	ands	r3, r2
 800151e:	2b00      	cmp	r3, #0
 8001520:	d01a      	beq.n	8001558 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f003 0304 	and.w	r3, r3, #4
 800152c:	2b00      	cmp	r3, #0
 800152e:	d013      	beq.n	8001558 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f022 0204 	bic.w	r2, r2, #4
 800153e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001544:	2208      	movs	r2, #8
 8001546:	409a      	lsls	r2, r3
 8001548:	693b      	ldr	r3, [r7, #16]
 800154a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001550:	f043 0201 	orr.w	r2, r3, #1
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800155c:	2201      	movs	r2, #1
 800155e:	409a      	lsls	r2, r3
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	4013      	ands	r3, r2
 8001564:	2b00      	cmp	r3, #0
 8001566:	d012      	beq.n	800158e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	695b      	ldr	r3, [r3, #20]
 800156e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001572:	2b00      	cmp	r3, #0
 8001574:	d00b      	beq.n	800158e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800157a:	2201      	movs	r2, #1
 800157c:	409a      	lsls	r2, r3
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001586:	f043 0202 	orr.w	r2, r3, #2
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001592:	2204      	movs	r2, #4
 8001594:	409a      	lsls	r2, r3
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	4013      	ands	r3, r2
 800159a:	2b00      	cmp	r3, #0
 800159c:	d012      	beq.n	80015c4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f003 0302 	and.w	r3, r3, #2
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d00b      	beq.n	80015c4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015b0:	2204      	movs	r2, #4
 80015b2:	409a      	lsls	r2, r3
 80015b4:	693b      	ldr	r3, [r7, #16]
 80015b6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015bc:	f043 0204 	orr.w	r2, r3, #4
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015c8:	2210      	movs	r2, #16
 80015ca:	409a      	lsls	r2, r3
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	4013      	ands	r3, r2
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d043      	beq.n	800165c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f003 0308 	and.w	r3, r3, #8
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d03c      	beq.n	800165c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015e6:	2210      	movs	r2, #16
 80015e8:	409a      	lsls	r2, r3
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d018      	beq.n	800162e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001606:	2b00      	cmp	r3, #0
 8001608:	d108      	bne.n	800161c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160e:	2b00      	cmp	r3, #0
 8001610:	d024      	beq.n	800165c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001616:	6878      	ldr	r0, [r7, #4]
 8001618:	4798      	blx	r3
 800161a:	e01f      	b.n	800165c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001620:	2b00      	cmp	r3, #0
 8001622:	d01b      	beq.n	800165c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001628:	6878      	ldr	r0, [r7, #4]
 800162a:	4798      	blx	r3
 800162c:	e016      	b.n	800165c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001638:	2b00      	cmp	r3, #0
 800163a:	d107      	bne.n	800164c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f022 0208 	bic.w	r2, r2, #8
 800164a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001650:	2b00      	cmp	r3, #0
 8001652:	d003      	beq.n	800165c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001658:	6878      	ldr	r0, [r7, #4]
 800165a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001660:	2220      	movs	r2, #32
 8001662:	409a      	lsls	r2, r3
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	4013      	ands	r3, r2
 8001668:	2b00      	cmp	r3, #0
 800166a:	f000 808f 	beq.w	800178c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f003 0310 	and.w	r3, r3, #16
 8001678:	2b00      	cmp	r3, #0
 800167a:	f000 8087 	beq.w	800178c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001682:	2220      	movs	r2, #32
 8001684:	409a      	lsls	r2, r3
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001690:	b2db      	uxtb	r3, r3
 8001692:	2b05      	cmp	r3, #5
 8001694:	d136      	bne.n	8001704 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f022 0216 	bic.w	r2, r2, #22
 80016a4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	695a      	ldr	r2, [r3, #20]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80016b4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d103      	bne.n	80016c6 <HAL_DMA_IRQHandler+0x1da>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d007      	beq.n	80016d6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f022 0208 	bic.w	r2, r2, #8
 80016d4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016da:	223f      	movs	r2, #63	; 0x3f
 80016dc:	409a      	lsls	r2, r3
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2201      	movs	r2, #1
 80016e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2200      	movs	r2, #0
 80016ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d07e      	beq.n	80017f8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80016fe:	6878      	ldr	r0, [r7, #4]
 8001700:	4798      	blx	r3
        }
        return;
 8001702:	e079      	b.n	80017f8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800170e:	2b00      	cmp	r3, #0
 8001710:	d01d      	beq.n	800174e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800171c:	2b00      	cmp	r3, #0
 800171e:	d10d      	bne.n	800173c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001724:	2b00      	cmp	r3, #0
 8001726:	d031      	beq.n	800178c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800172c:	6878      	ldr	r0, [r7, #4]
 800172e:	4798      	blx	r3
 8001730:	e02c      	b.n	800178c <HAL_DMA_IRQHandler+0x2a0>
 8001732:	bf00      	nop
 8001734:	20000000 	.word	0x20000000
 8001738:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001740:	2b00      	cmp	r3, #0
 8001742:	d023      	beq.n	800178c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001748:	6878      	ldr	r0, [r7, #4]
 800174a:	4798      	blx	r3
 800174c:	e01e      	b.n	800178c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001758:	2b00      	cmp	r3, #0
 800175a:	d10f      	bne.n	800177c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f022 0210 	bic.w	r2, r2, #16
 800176a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2201      	movs	r2, #1
 8001770:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2200      	movs	r2, #0
 8001778:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001780:	2b00      	cmp	r3, #0
 8001782:	d003      	beq.n	800178c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001788:	6878      	ldr	r0, [r7, #4]
 800178a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001790:	2b00      	cmp	r3, #0
 8001792:	d032      	beq.n	80017fa <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001798:	f003 0301 	and.w	r3, r3, #1
 800179c:	2b00      	cmp	r3, #0
 800179e:	d022      	beq.n	80017e6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2205      	movs	r2, #5
 80017a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f022 0201 	bic.w	r2, r2, #1
 80017b6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	3301      	adds	r3, #1
 80017bc:	60bb      	str	r3, [r7, #8]
 80017be:	697a      	ldr	r2, [r7, #20]
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d307      	bcc.n	80017d4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f003 0301 	and.w	r3, r3, #1
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d1f2      	bne.n	80017b8 <HAL_DMA_IRQHandler+0x2cc>
 80017d2:	e000      	b.n	80017d6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80017d4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2201      	movs	r2, #1
 80017da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2200      	movs	r2, #0
 80017e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d005      	beq.n	80017fa <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	4798      	blx	r3
 80017f6:	e000      	b.n	80017fa <HAL_DMA_IRQHandler+0x30e>
        return;
 80017f8:	bf00      	nop
    }
  }
}
 80017fa:	3718      	adds	r7, #24
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}

08001800 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001800:	b480      	push	{r7}
 8001802:	b085      	sub	sp, #20
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	b2db      	uxtb	r3, r3
 800180e:	3b10      	subs	r3, #16
 8001810:	4a14      	ldr	r2, [pc, #80]	; (8001864 <DMA_CalcBaseAndBitshift+0x64>)
 8001812:	fba2 2303 	umull	r2, r3, r2, r3
 8001816:	091b      	lsrs	r3, r3, #4
 8001818:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800181a:	4a13      	ldr	r2, [pc, #76]	; (8001868 <DMA_CalcBaseAndBitshift+0x68>)
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	4413      	add	r3, r2
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	461a      	mov	r2, r3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	2b03      	cmp	r3, #3
 800182c:	d909      	bls.n	8001842 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001836:	f023 0303 	bic.w	r3, r3, #3
 800183a:	1d1a      	adds	r2, r3, #4
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	659a      	str	r2, [r3, #88]	; 0x58
 8001840:	e007      	b.n	8001852 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800184a:	f023 0303 	bic.w	r3, r3, #3
 800184e:	687a      	ldr	r2, [r7, #4]
 8001850:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001856:	4618      	mov	r0, r3
 8001858:	3714      	adds	r7, #20
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr
 8001862:	bf00      	nop
 8001864:	aaaaaaab 	.word	0xaaaaaaab
 8001868:	08009dac 	.word	0x08009dac

0800186c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800186c:	b480      	push	{r7}
 800186e:	b085      	sub	sp, #20
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001874:	2300      	movs	r3, #0
 8001876:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800187c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	699b      	ldr	r3, [r3, #24]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d11f      	bne.n	80018c6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001886:	68bb      	ldr	r3, [r7, #8]
 8001888:	2b03      	cmp	r3, #3
 800188a:	d856      	bhi.n	800193a <DMA_CheckFifoParam+0xce>
 800188c:	a201      	add	r2, pc, #4	; (adr r2, 8001894 <DMA_CheckFifoParam+0x28>)
 800188e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001892:	bf00      	nop
 8001894:	080018a5 	.word	0x080018a5
 8001898:	080018b7 	.word	0x080018b7
 800189c:	080018a5 	.word	0x080018a5
 80018a0:	0800193b 	.word	0x0800193b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d046      	beq.n	800193e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80018b0:	2301      	movs	r3, #1
 80018b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80018b4:	e043      	b.n	800193e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ba:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80018be:	d140      	bne.n	8001942 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80018c0:	2301      	movs	r3, #1
 80018c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80018c4:	e03d      	b.n	8001942 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	699b      	ldr	r3, [r3, #24]
 80018ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80018ce:	d121      	bne.n	8001914 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	2b03      	cmp	r3, #3
 80018d4:	d837      	bhi.n	8001946 <DMA_CheckFifoParam+0xda>
 80018d6:	a201      	add	r2, pc, #4	; (adr r2, 80018dc <DMA_CheckFifoParam+0x70>)
 80018d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018dc:	080018ed 	.word	0x080018ed
 80018e0:	080018f3 	.word	0x080018f3
 80018e4:	080018ed 	.word	0x080018ed
 80018e8:	08001905 	.word	0x08001905
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80018ec:	2301      	movs	r3, #1
 80018ee:	73fb      	strb	r3, [r7, #15]
      break;
 80018f0:	e030      	b.n	8001954 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d025      	beq.n	800194a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001902:	e022      	b.n	800194a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001908:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800190c:	d11f      	bne.n	800194e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001912:	e01c      	b.n	800194e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001914:	68bb      	ldr	r3, [r7, #8]
 8001916:	2b02      	cmp	r3, #2
 8001918:	d903      	bls.n	8001922 <DMA_CheckFifoParam+0xb6>
 800191a:	68bb      	ldr	r3, [r7, #8]
 800191c:	2b03      	cmp	r3, #3
 800191e:	d003      	beq.n	8001928 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001920:	e018      	b.n	8001954 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	73fb      	strb	r3, [r7, #15]
      break;
 8001926:	e015      	b.n	8001954 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800192c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001930:	2b00      	cmp	r3, #0
 8001932:	d00e      	beq.n	8001952 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001934:	2301      	movs	r3, #1
 8001936:	73fb      	strb	r3, [r7, #15]
      break;
 8001938:	e00b      	b.n	8001952 <DMA_CheckFifoParam+0xe6>
      break;
 800193a:	bf00      	nop
 800193c:	e00a      	b.n	8001954 <DMA_CheckFifoParam+0xe8>
      break;
 800193e:	bf00      	nop
 8001940:	e008      	b.n	8001954 <DMA_CheckFifoParam+0xe8>
      break;
 8001942:	bf00      	nop
 8001944:	e006      	b.n	8001954 <DMA_CheckFifoParam+0xe8>
      break;
 8001946:	bf00      	nop
 8001948:	e004      	b.n	8001954 <DMA_CheckFifoParam+0xe8>
      break;
 800194a:	bf00      	nop
 800194c:	e002      	b.n	8001954 <DMA_CheckFifoParam+0xe8>
      break;   
 800194e:	bf00      	nop
 8001950:	e000      	b.n	8001954 <DMA_CheckFifoParam+0xe8>
      break;
 8001952:	bf00      	nop
    }
  } 
  
  return status; 
 8001954:	7bfb      	ldrb	r3, [r7, #15]
}
 8001956:	4618      	mov	r0, r3
 8001958:	3714      	adds	r7, #20
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop

08001964 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001964:	b480      	push	{r7}
 8001966:	b089      	sub	sp, #36	; 0x24
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
 800196c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800196e:	2300      	movs	r3, #0
 8001970:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001972:	2300      	movs	r3, #0
 8001974:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001976:	2300      	movs	r3, #0
 8001978:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800197a:	2300      	movs	r3, #0
 800197c:	61fb      	str	r3, [r7, #28]
 800197e:	e177      	b.n	8001c70 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001980:	2201      	movs	r2, #1
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	fa02 f303 	lsl.w	r3, r2, r3
 8001988:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	697a      	ldr	r2, [r7, #20]
 8001990:	4013      	ands	r3, r2
 8001992:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001994:	693a      	ldr	r2, [r7, #16]
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	429a      	cmp	r2, r3
 800199a:	f040 8166 	bne.w	8001c6a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	f003 0303 	and.w	r3, r3, #3
 80019a6:	2b01      	cmp	r3, #1
 80019a8:	d005      	beq.n	80019b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019b2:	2b02      	cmp	r3, #2
 80019b4:	d130      	bne.n	8001a18 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80019bc:	69fb      	ldr	r3, [r7, #28]
 80019be:	005b      	lsls	r3, r3, #1
 80019c0:	2203      	movs	r2, #3
 80019c2:	fa02 f303 	lsl.w	r3, r2, r3
 80019c6:	43db      	mvns	r3, r3
 80019c8:	69ba      	ldr	r2, [r7, #24]
 80019ca:	4013      	ands	r3, r2
 80019cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	68da      	ldr	r2, [r3, #12]
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	005b      	lsls	r3, r3, #1
 80019d6:	fa02 f303 	lsl.w	r3, r2, r3
 80019da:	69ba      	ldr	r2, [r7, #24]
 80019dc:	4313      	orrs	r3, r2
 80019de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	69ba      	ldr	r2, [r7, #24]
 80019e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019ec:	2201      	movs	r2, #1
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	fa02 f303 	lsl.w	r3, r2, r3
 80019f4:	43db      	mvns	r3, r3
 80019f6:	69ba      	ldr	r2, [r7, #24]
 80019f8:	4013      	ands	r3, r2
 80019fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	091b      	lsrs	r3, r3, #4
 8001a02:	f003 0201 	and.w	r2, r3, #1
 8001a06:	69fb      	ldr	r3, [r7, #28]
 8001a08:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0c:	69ba      	ldr	r2, [r7, #24]
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	69ba      	ldr	r2, [r7, #24]
 8001a16:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	f003 0303 	and.w	r3, r3, #3
 8001a20:	2b03      	cmp	r3, #3
 8001a22:	d017      	beq.n	8001a54 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	68db      	ldr	r3, [r3, #12]
 8001a28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a2a:	69fb      	ldr	r3, [r7, #28]
 8001a2c:	005b      	lsls	r3, r3, #1
 8001a2e:	2203      	movs	r2, #3
 8001a30:	fa02 f303 	lsl.w	r3, r2, r3
 8001a34:	43db      	mvns	r3, r3
 8001a36:	69ba      	ldr	r2, [r7, #24]
 8001a38:	4013      	ands	r3, r2
 8001a3a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	689a      	ldr	r2, [r3, #8]
 8001a40:	69fb      	ldr	r3, [r7, #28]
 8001a42:	005b      	lsls	r3, r3, #1
 8001a44:	fa02 f303 	lsl.w	r3, r2, r3
 8001a48:	69ba      	ldr	r2, [r7, #24]
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	69ba      	ldr	r2, [r7, #24]
 8001a52:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	f003 0303 	and.w	r3, r3, #3
 8001a5c:	2b02      	cmp	r3, #2
 8001a5e:	d123      	bne.n	8001aa8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a60:	69fb      	ldr	r3, [r7, #28]
 8001a62:	08da      	lsrs	r2, r3, #3
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	3208      	adds	r2, #8
 8001a68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	f003 0307 	and.w	r3, r3, #7
 8001a74:	009b      	lsls	r3, r3, #2
 8001a76:	220f      	movs	r2, #15
 8001a78:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7c:	43db      	mvns	r3, r3
 8001a7e:	69ba      	ldr	r2, [r7, #24]
 8001a80:	4013      	ands	r3, r2
 8001a82:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	691a      	ldr	r2, [r3, #16]
 8001a88:	69fb      	ldr	r3, [r7, #28]
 8001a8a:	f003 0307 	and.w	r3, r3, #7
 8001a8e:	009b      	lsls	r3, r3, #2
 8001a90:	fa02 f303 	lsl.w	r3, r2, r3
 8001a94:	69ba      	ldr	r2, [r7, #24]
 8001a96:	4313      	orrs	r3, r2
 8001a98:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	08da      	lsrs	r2, r3, #3
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	3208      	adds	r2, #8
 8001aa2:	69b9      	ldr	r1, [r7, #24]
 8001aa4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	005b      	lsls	r3, r3, #1
 8001ab2:	2203      	movs	r2, #3
 8001ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab8:	43db      	mvns	r3, r3
 8001aba:	69ba      	ldr	r2, [r7, #24]
 8001abc:	4013      	ands	r3, r2
 8001abe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f003 0203 	and.w	r2, r3, #3
 8001ac8:	69fb      	ldr	r3, [r7, #28]
 8001aca:	005b      	lsls	r3, r3, #1
 8001acc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad0:	69ba      	ldr	r2, [r7, #24]
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	69ba      	ldr	r2, [r7, #24]
 8001ada:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	f000 80c0 	beq.w	8001c6a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aea:	2300      	movs	r3, #0
 8001aec:	60fb      	str	r3, [r7, #12]
 8001aee:	4b66      	ldr	r3, [pc, #408]	; (8001c88 <HAL_GPIO_Init+0x324>)
 8001af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001af2:	4a65      	ldr	r2, [pc, #404]	; (8001c88 <HAL_GPIO_Init+0x324>)
 8001af4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001af8:	6453      	str	r3, [r2, #68]	; 0x44
 8001afa:	4b63      	ldr	r3, [pc, #396]	; (8001c88 <HAL_GPIO_Init+0x324>)
 8001afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001afe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b02:	60fb      	str	r3, [r7, #12]
 8001b04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b06:	4a61      	ldr	r2, [pc, #388]	; (8001c8c <HAL_GPIO_Init+0x328>)
 8001b08:	69fb      	ldr	r3, [r7, #28]
 8001b0a:	089b      	lsrs	r3, r3, #2
 8001b0c:	3302      	adds	r3, #2
 8001b0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b14:	69fb      	ldr	r3, [r7, #28]
 8001b16:	f003 0303 	and.w	r3, r3, #3
 8001b1a:	009b      	lsls	r3, r3, #2
 8001b1c:	220f      	movs	r2, #15
 8001b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b22:	43db      	mvns	r3, r3
 8001b24:	69ba      	ldr	r2, [r7, #24]
 8001b26:	4013      	ands	r3, r2
 8001b28:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	4a58      	ldr	r2, [pc, #352]	; (8001c90 <HAL_GPIO_Init+0x32c>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d037      	beq.n	8001ba2 <HAL_GPIO_Init+0x23e>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	4a57      	ldr	r2, [pc, #348]	; (8001c94 <HAL_GPIO_Init+0x330>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d031      	beq.n	8001b9e <HAL_GPIO_Init+0x23a>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	4a56      	ldr	r2, [pc, #344]	; (8001c98 <HAL_GPIO_Init+0x334>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d02b      	beq.n	8001b9a <HAL_GPIO_Init+0x236>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	4a55      	ldr	r2, [pc, #340]	; (8001c9c <HAL_GPIO_Init+0x338>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d025      	beq.n	8001b96 <HAL_GPIO_Init+0x232>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	4a54      	ldr	r2, [pc, #336]	; (8001ca0 <HAL_GPIO_Init+0x33c>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d01f      	beq.n	8001b92 <HAL_GPIO_Init+0x22e>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	4a53      	ldr	r2, [pc, #332]	; (8001ca4 <HAL_GPIO_Init+0x340>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d019      	beq.n	8001b8e <HAL_GPIO_Init+0x22a>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	4a52      	ldr	r2, [pc, #328]	; (8001ca8 <HAL_GPIO_Init+0x344>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d013      	beq.n	8001b8a <HAL_GPIO_Init+0x226>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	4a51      	ldr	r2, [pc, #324]	; (8001cac <HAL_GPIO_Init+0x348>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d00d      	beq.n	8001b86 <HAL_GPIO_Init+0x222>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	4a50      	ldr	r2, [pc, #320]	; (8001cb0 <HAL_GPIO_Init+0x34c>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d007      	beq.n	8001b82 <HAL_GPIO_Init+0x21e>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	4a4f      	ldr	r2, [pc, #316]	; (8001cb4 <HAL_GPIO_Init+0x350>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d101      	bne.n	8001b7e <HAL_GPIO_Init+0x21a>
 8001b7a:	2309      	movs	r3, #9
 8001b7c:	e012      	b.n	8001ba4 <HAL_GPIO_Init+0x240>
 8001b7e:	230a      	movs	r3, #10
 8001b80:	e010      	b.n	8001ba4 <HAL_GPIO_Init+0x240>
 8001b82:	2308      	movs	r3, #8
 8001b84:	e00e      	b.n	8001ba4 <HAL_GPIO_Init+0x240>
 8001b86:	2307      	movs	r3, #7
 8001b88:	e00c      	b.n	8001ba4 <HAL_GPIO_Init+0x240>
 8001b8a:	2306      	movs	r3, #6
 8001b8c:	e00a      	b.n	8001ba4 <HAL_GPIO_Init+0x240>
 8001b8e:	2305      	movs	r3, #5
 8001b90:	e008      	b.n	8001ba4 <HAL_GPIO_Init+0x240>
 8001b92:	2304      	movs	r3, #4
 8001b94:	e006      	b.n	8001ba4 <HAL_GPIO_Init+0x240>
 8001b96:	2303      	movs	r3, #3
 8001b98:	e004      	b.n	8001ba4 <HAL_GPIO_Init+0x240>
 8001b9a:	2302      	movs	r3, #2
 8001b9c:	e002      	b.n	8001ba4 <HAL_GPIO_Init+0x240>
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e000      	b.n	8001ba4 <HAL_GPIO_Init+0x240>
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	69fa      	ldr	r2, [r7, #28]
 8001ba6:	f002 0203 	and.w	r2, r2, #3
 8001baa:	0092      	lsls	r2, r2, #2
 8001bac:	4093      	lsls	r3, r2
 8001bae:	69ba      	ldr	r2, [r7, #24]
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001bb4:	4935      	ldr	r1, [pc, #212]	; (8001c8c <HAL_GPIO_Init+0x328>)
 8001bb6:	69fb      	ldr	r3, [r7, #28]
 8001bb8:	089b      	lsrs	r3, r3, #2
 8001bba:	3302      	adds	r3, #2
 8001bbc:	69ba      	ldr	r2, [r7, #24]
 8001bbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bc2:	4b3d      	ldr	r3, [pc, #244]	; (8001cb8 <HAL_GPIO_Init+0x354>)
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	43db      	mvns	r3, r3
 8001bcc:	69ba      	ldr	r2, [r7, #24]
 8001bce:	4013      	ands	r3, r2
 8001bd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d003      	beq.n	8001be6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001bde:	69ba      	ldr	r2, [r7, #24]
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	4313      	orrs	r3, r2
 8001be4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001be6:	4a34      	ldr	r2, [pc, #208]	; (8001cb8 <HAL_GPIO_Init+0x354>)
 8001be8:	69bb      	ldr	r3, [r7, #24]
 8001bea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001bec:	4b32      	ldr	r3, [pc, #200]	; (8001cb8 <HAL_GPIO_Init+0x354>)
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	43db      	mvns	r3, r3
 8001bf6:	69ba      	ldr	r2, [r7, #24]
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d003      	beq.n	8001c10 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001c08:	69ba      	ldr	r2, [r7, #24]
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c10:	4a29      	ldr	r2, [pc, #164]	; (8001cb8 <HAL_GPIO_Init+0x354>)
 8001c12:	69bb      	ldr	r3, [r7, #24]
 8001c14:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c16:	4b28      	ldr	r3, [pc, #160]	; (8001cb8 <HAL_GPIO_Init+0x354>)
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	43db      	mvns	r3, r3
 8001c20:	69ba      	ldr	r2, [r7, #24]
 8001c22:	4013      	ands	r3, r2
 8001c24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d003      	beq.n	8001c3a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001c32:	69ba      	ldr	r2, [r7, #24]
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	4313      	orrs	r3, r2
 8001c38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c3a:	4a1f      	ldr	r2, [pc, #124]	; (8001cb8 <HAL_GPIO_Init+0x354>)
 8001c3c:	69bb      	ldr	r3, [r7, #24]
 8001c3e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c40:	4b1d      	ldr	r3, [pc, #116]	; (8001cb8 <HAL_GPIO_Init+0x354>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	43db      	mvns	r3, r3
 8001c4a:	69ba      	ldr	r2, [r7, #24]
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d003      	beq.n	8001c64 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001c5c:	69ba      	ldr	r2, [r7, #24]
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	4313      	orrs	r3, r2
 8001c62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c64:	4a14      	ldr	r2, [pc, #80]	; (8001cb8 <HAL_GPIO_Init+0x354>)
 8001c66:	69bb      	ldr	r3, [r7, #24]
 8001c68:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	3301      	adds	r3, #1
 8001c6e:	61fb      	str	r3, [r7, #28]
 8001c70:	69fb      	ldr	r3, [r7, #28]
 8001c72:	2b0f      	cmp	r3, #15
 8001c74:	f67f ae84 	bls.w	8001980 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c78:	bf00      	nop
 8001c7a:	bf00      	nop
 8001c7c:	3724      	adds	r7, #36	; 0x24
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr
 8001c86:	bf00      	nop
 8001c88:	40023800 	.word	0x40023800
 8001c8c:	40013800 	.word	0x40013800
 8001c90:	40020000 	.word	0x40020000
 8001c94:	40020400 	.word	0x40020400
 8001c98:	40020800 	.word	0x40020800
 8001c9c:	40020c00 	.word	0x40020c00
 8001ca0:	40021000 	.word	0x40021000
 8001ca4:	40021400 	.word	0x40021400
 8001ca8:	40021800 	.word	0x40021800
 8001cac:	40021c00 	.word	0x40021c00
 8001cb0:	40022000 	.word	0x40022000
 8001cb4:	40022400 	.word	0x40022400
 8001cb8:	40013c00 	.word	0x40013c00

08001cbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
 8001cc4:	460b      	mov	r3, r1
 8001cc6:	807b      	strh	r3, [r7, #2]
 8001cc8:	4613      	mov	r3, r2
 8001cca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ccc:	787b      	ldrb	r3, [r7, #1]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d003      	beq.n	8001cda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cd2:	887a      	ldrh	r2, [r7, #2]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001cd8:	e003      	b.n	8001ce2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001cda:	887b      	ldrh	r3, [r7, #2]
 8001cdc:	041a      	lsls	r2, r3, #16
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	619a      	str	r2, [r3, #24]
}
 8001ce2:	bf00      	nop
 8001ce4:	370c      	adds	r7, #12
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr

08001cee <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001cee:	b480      	push	{r7}
 8001cf0:	b085      	sub	sp, #20
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	6078      	str	r0, [r7, #4]
 8001cf6:	460b      	mov	r3, r1
 8001cf8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	695b      	ldr	r3, [r3, #20]
 8001cfe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d00:	887a      	ldrh	r2, [r7, #2]
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	4013      	ands	r3, r2
 8001d06:	041a      	lsls	r2, r3, #16
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	43d9      	mvns	r1, r3
 8001d0c:	887b      	ldrh	r3, [r7, #2]
 8001d0e:	400b      	ands	r3, r1
 8001d10:	431a      	orrs	r2, r3
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	619a      	str	r2, [r3, #24]
}
 8001d16:	bf00      	nop
 8001d18:	3714      	adds	r7, #20
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr

08001d22 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001d22:	b580      	push	{r7, lr}
 8001d24:	b086      	sub	sp, #24
 8001d26:	af02      	add	r7, sp, #8
 8001d28:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d101      	bne.n	8001d34 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001d30:	2301      	movs	r3, #1
 8001d32:	e101      	b.n	8001f38 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d106      	bne.n	8001d54 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	f007 fbd4 	bl	80094fc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2203      	movs	r2, #3
 8001d58:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d62:	d102      	bne.n	8001d6a <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2200      	movs	r2, #0
 8001d68:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f002 fdb7 	bl	80048e2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6818      	ldr	r0, [r3, #0]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	7c1a      	ldrb	r2, [r3, #16]
 8001d7c:	f88d 2000 	strb.w	r2, [sp]
 8001d80:	3304      	adds	r3, #4
 8001d82:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d84:	f002 fc96 	bl	80046b4 <USB_CoreInit>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d005      	beq.n	8001d9a <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2202      	movs	r2, #2
 8001d92:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	e0ce      	b.n	8001f38 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	2100      	movs	r1, #0
 8001da0:	4618      	mov	r0, r3
 8001da2:	f002 fdaf 	bl	8004904 <USB_SetCurrentMode>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d005      	beq.n	8001db8 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2202      	movs	r2, #2
 8001db0:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8001db4:	2301      	movs	r3, #1
 8001db6:	e0bf      	b.n	8001f38 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001db8:	2300      	movs	r3, #0
 8001dba:	73fb      	strb	r3, [r7, #15]
 8001dbc:	e04a      	b.n	8001e54 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001dbe:	7bfa      	ldrb	r2, [r7, #15]
 8001dc0:	6879      	ldr	r1, [r7, #4]
 8001dc2:	4613      	mov	r3, r2
 8001dc4:	00db      	lsls	r3, r3, #3
 8001dc6:	4413      	add	r3, r2
 8001dc8:	009b      	lsls	r3, r3, #2
 8001dca:	440b      	add	r3, r1
 8001dcc:	3315      	adds	r3, #21
 8001dce:	2201      	movs	r2, #1
 8001dd0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001dd2:	7bfa      	ldrb	r2, [r7, #15]
 8001dd4:	6879      	ldr	r1, [r7, #4]
 8001dd6:	4613      	mov	r3, r2
 8001dd8:	00db      	lsls	r3, r3, #3
 8001dda:	4413      	add	r3, r2
 8001ddc:	009b      	lsls	r3, r3, #2
 8001dde:	440b      	add	r3, r1
 8001de0:	3314      	adds	r3, #20
 8001de2:	7bfa      	ldrb	r2, [r7, #15]
 8001de4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001de6:	7bfa      	ldrb	r2, [r7, #15]
 8001de8:	7bfb      	ldrb	r3, [r7, #15]
 8001dea:	b298      	uxth	r0, r3
 8001dec:	6879      	ldr	r1, [r7, #4]
 8001dee:	4613      	mov	r3, r2
 8001df0:	00db      	lsls	r3, r3, #3
 8001df2:	4413      	add	r3, r2
 8001df4:	009b      	lsls	r3, r3, #2
 8001df6:	440b      	add	r3, r1
 8001df8:	332e      	adds	r3, #46	; 0x2e
 8001dfa:	4602      	mov	r2, r0
 8001dfc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001dfe:	7bfa      	ldrb	r2, [r7, #15]
 8001e00:	6879      	ldr	r1, [r7, #4]
 8001e02:	4613      	mov	r3, r2
 8001e04:	00db      	lsls	r3, r3, #3
 8001e06:	4413      	add	r3, r2
 8001e08:	009b      	lsls	r3, r3, #2
 8001e0a:	440b      	add	r3, r1
 8001e0c:	3318      	adds	r3, #24
 8001e0e:	2200      	movs	r2, #0
 8001e10:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001e12:	7bfa      	ldrb	r2, [r7, #15]
 8001e14:	6879      	ldr	r1, [r7, #4]
 8001e16:	4613      	mov	r3, r2
 8001e18:	00db      	lsls	r3, r3, #3
 8001e1a:	4413      	add	r3, r2
 8001e1c:	009b      	lsls	r3, r3, #2
 8001e1e:	440b      	add	r3, r1
 8001e20:	331c      	adds	r3, #28
 8001e22:	2200      	movs	r2, #0
 8001e24:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001e26:	7bfa      	ldrb	r2, [r7, #15]
 8001e28:	6879      	ldr	r1, [r7, #4]
 8001e2a:	4613      	mov	r3, r2
 8001e2c:	00db      	lsls	r3, r3, #3
 8001e2e:	4413      	add	r3, r2
 8001e30:	009b      	lsls	r3, r3, #2
 8001e32:	440b      	add	r3, r1
 8001e34:	3320      	adds	r3, #32
 8001e36:	2200      	movs	r2, #0
 8001e38:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001e3a:	7bfa      	ldrb	r2, [r7, #15]
 8001e3c:	6879      	ldr	r1, [r7, #4]
 8001e3e:	4613      	mov	r3, r2
 8001e40:	00db      	lsls	r3, r3, #3
 8001e42:	4413      	add	r3, r2
 8001e44:	009b      	lsls	r3, r3, #2
 8001e46:	440b      	add	r3, r1
 8001e48:	3324      	adds	r3, #36	; 0x24
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e4e:	7bfb      	ldrb	r3, [r7, #15]
 8001e50:	3301      	adds	r3, #1
 8001e52:	73fb      	strb	r3, [r7, #15]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	791b      	ldrb	r3, [r3, #4]
 8001e58:	7bfa      	ldrb	r2, [r7, #15]
 8001e5a:	429a      	cmp	r2, r3
 8001e5c:	d3af      	bcc.n	8001dbe <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e5e:	2300      	movs	r3, #0
 8001e60:	73fb      	strb	r3, [r7, #15]
 8001e62:	e044      	b.n	8001eee <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001e64:	7bfa      	ldrb	r2, [r7, #15]
 8001e66:	6879      	ldr	r1, [r7, #4]
 8001e68:	4613      	mov	r3, r2
 8001e6a:	00db      	lsls	r3, r3, #3
 8001e6c:	4413      	add	r3, r2
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	440b      	add	r3, r1
 8001e72:	f203 2355 	addw	r3, r3, #597	; 0x255
 8001e76:	2200      	movs	r2, #0
 8001e78:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001e7a:	7bfa      	ldrb	r2, [r7, #15]
 8001e7c:	6879      	ldr	r1, [r7, #4]
 8001e7e:	4613      	mov	r3, r2
 8001e80:	00db      	lsls	r3, r3, #3
 8001e82:	4413      	add	r3, r2
 8001e84:	009b      	lsls	r3, r3, #2
 8001e86:	440b      	add	r3, r1
 8001e88:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8001e8c:	7bfa      	ldrb	r2, [r7, #15]
 8001e8e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001e90:	7bfa      	ldrb	r2, [r7, #15]
 8001e92:	6879      	ldr	r1, [r7, #4]
 8001e94:	4613      	mov	r3, r2
 8001e96:	00db      	lsls	r3, r3, #3
 8001e98:	4413      	add	r3, r2
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	440b      	add	r3, r1
 8001e9e:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001ea6:	7bfa      	ldrb	r2, [r7, #15]
 8001ea8:	6879      	ldr	r1, [r7, #4]
 8001eaa:	4613      	mov	r3, r2
 8001eac:	00db      	lsls	r3, r3, #3
 8001eae:	4413      	add	r3, r2
 8001eb0:	009b      	lsls	r3, r3, #2
 8001eb2:	440b      	add	r3, r1
 8001eb4:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8001eb8:	2200      	movs	r2, #0
 8001eba:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001ebc:	7bfa      	ldrb	r2, [r7, #15]
 8001ebe:	6879      	ldr	r1, [r7, #4]
 8001ec0:	4613      	mov	r3, r2
 8001ec2:	00db      	lsls	r3, r3, #3
 8001ec4:	4413      	add	r3, r2
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	440b      	add	r3, r1
 8001eca:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8001ece:	2200      	movs	r2, #0
 8001ed0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001ed2:	7bfa      	ldrb	r2, [r7, #15]
 8001ed4:	6879      	ldr	r1, [r7, #4]
 8001ed6:	4613      	mov	r3, r2
 8001ed8:	00db      	lsls	r3, r3, #3
 8001eda:	4413      	add	r3, r2
 8001edc:	009b      	lsls	r3, r3, #2
 8001ede:	440b      	add	r3, r1
 8001ee0:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ee8:	7bfb      	ldrb	r3, [r7, #15]
 8001eea:	3301      	adds	r3, #1
 8001eec:	73fb      	strb	r3, [r7, #15]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	791b      	ldrb	r3, [r3, #4]
 8001ef2:	7bfa      	ldrb	r2, [r7, #15]
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	d3b5      	bcc.n	8001e64 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6818      	ldr	r0, [r3, #0]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	7c1a      	ldrb	r2, [r3, #16]
 8001f00:	f88d 2000 	strb.w	r2, [sp]
 8001f04:	3304      	adds	r3, #4
 8001f06:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f08:	f002 fd48 	bl	800499c <USB_DevInit>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d005      	beq.n	8001f1e <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2202      	movs	r2, #2
 8001f16:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e00c      	b.n	8001f38 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2200      	movs	r2, #0
 8001f22:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2201      	movs	r2, #1
 8001f28:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4618      	mov	r0, r3
 8001f32:	f003 fd8c 	bl	8005a4e <USB_DevDisconnect>

  return HAL_OK;
 8001f36:	2300      	movs	r3, #0
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3710      	adds	r7, #16
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}

08001f40 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b084      	sub	sp, #16
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d101      	bne.n	8001f5c <HAL_PCD_Start+0x1c>
 8001f58:	2302      	movs	r3, #2
 8001f5a:	e022      	b.n	8001fa2 <HAL_PCD_Start+0x62>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2201      	movs	r2, #1
 8001f60:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d009      	beq.n	8001f84 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d105      	bne.n	8001f84 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f7c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f002 fc99 	bl	80048c0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4618      	mov	r0, r3
 8001f94:	f003 fd3a 	bl	8005a0c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8001fa0:	2300      	movs	r3, #0
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3710      	adds	r7, #16
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}

08001faa <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001faa:	b590      	push	{r4, r7, lr}
 8001fac:	b08d      	sub	sp, #52	; 0x34
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001fb8:	6a3b      	ldr	r3, [r7, #32]
 8001fba:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f003 fdf8 	bl	8005bb6 <USB_GetMode>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	f040 848c 	bne.w	80028e6 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f003 fd5c 	bl	8005a90 <USB_ReadInterrupts>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	f000 8482 	beq.w	80028e4 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001fe0:	69fb      	ldr	r3, [r7, #28]
 8001fe2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	0a1b      	lsrs	r3, r3, #8
 8001fea:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f003 fd49 	bl	8005a90 <USB_ReadInterrupts>
 8001ffe:	4603      	mov	r3, r0
 8002000:	f003 0302 	and.w	r3, r3, #2
 8002004:	2b02      	cmp	r3, #2
 8002006:	d107      	bne.n	8002018 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	695a      	ldr	r2, [r3, #20]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f002 0202 	and.w	r2, r2, #2
 8002016:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4618      	mov	r0, r3
 800201e:	f003 fd37 	bl	8005a90 <USB_ReadInterrupts>
 8002022:	4603      	mov	r3, r0
 8002024:	f003 0310 	and.w	r3, r3, #16
 8002028:	2b10      	cmp	r3, #16
 800202a:	d161      	bne.n	80020f0 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	699a      	ldr	r2, [r3, #24]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f022 0210 	bic.w	r2, r2, #16
 800203a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800203c:	6a3b      	ldr	r3, [r7, #32]
 800203e:	6a1b      	ldr	r3, [r3, #32]
 8002040:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002042:	69bb      	ldr	r3, [r7, #24]
 8002044:	f003 020f 	and.w	r2, r3, #15
 8002048:	4613      	mov	r3, r2
 800204a:	00db      	lsls	r3, r3, #3
 800204c:	4413      	add	r3, r2
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002054:	687a      	ldr	r2, [r7, #4]
 8002056:	4413      	add	r3, r2
 8002058:	3304      	adds	r3, #4
 800205a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800205c:	69bb      	ldr	r3, [r7, #24]
 800205e:	0c5b      	lsrs	r3, r3, #17
 8002060:	f003 030f 	and.w	r3, r3, #15
 8002064:	2b02      	cmp	r3, #2
 8002066:	d124      	bne.n	80020b2 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002068:	69ba      	ldr	r2, [r7, #24]
 800206a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800206e:	4013      	ands	r3, r2
 8002070:	2b00      	cmp	r3, #0
 8002072:	d035      	beq.n	80020e0 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002078:	69bb      	ldr	r3, [r7, #24]
 800207a:	091b      	lsrs	r3, r3, #4
 800207c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800207e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002082:	b29b      	uxth	r3, r3
 8002084:	461a      	mov	r2, r3
 8002086:	6a38      	ldr	r0, [r7, #32]
 8002088:	f003 fb6e 	bl	8005768 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	68da      	ldr	r2, [r3, #12]
 8002090:	69bb      	ldr	r3, [r7, #24]
 8002092:	091b      	lsrs	r3, r3, #4
 8002094:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002098:	441a      	add	r2, r3
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	695a      	ldr	r2, [r3, #20]
 80020a2:	69bb      	ldr	r3, [r7, #24]
 80020a4:	091b      	lsrs	r3, r3, #4
 80020a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80020aa:	441a      	add	r2, r3
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	615a      	str	r2, [r3, #20]
 80020b0:	e016      	b.n	80020e0 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80020b2:	69bb      	ldr	r3, [r7, #24]
 80020b4:	0c5b      	lsrs	r3, r3, #17
 80020b6:	f003 030f 	and.w	r3, r3, #15
 80020ba:	2b06      	cmp	r3, #6
 80020bc:	d110      	bne.n	80020e0 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80020c4:	2208      	movs	r2, #8
 80020c6:	4619      	mov	r1, r3
 80020c8:	6a38      	ldr	r0, [r7, #32]
 80020ca:	f003 fb4d 	bl	8005768 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	695a      	ldr	r2, [r3, #20]
 80020d2:	69bb      	ldr	r3, [r7, #24]
 80020d4:	091b      	lsrs	r3, r3, #4
 80020d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80020da:	441a      	add	r2, r3
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	699a      	ldr	r2, [r3, #24]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f042 0210 	orr.w	r2, r2, #16
 80020ee:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4618      	mov	r0, r3
 80020f6:	f003 fccb 	bl	8005a90 <USB_ReadInterrupts>
 80020fa:	4603      	mov	r3, r0
 80020fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002100:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002104:	f040 80a7 	bne.w	8002256 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002108:	2300      	movs	r3, #0
 800210a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4618      	mov	r0, r3
 8002112:	f003 fcd0 	bl	8005ab6 <USB_ReadDevAllOutEpInterrupt>
 8002116:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002118:	e099      	b.n	800224e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800211a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800211c:	f003 0301 	and.w	r3, r3, #1
 8002120:	2b00      	cmp	r3, #0
 8002122:	f000 808e 	beq.w	8002242 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800212c:	b2d2      	uxtb	r2, r2
 800212e:	4611      	mov	r1, r2
 8002130:	4618      	mov	r0, r3
 8002132:	f003 fcf4 	bl	8005b1e <USB_ReadDevOutEPInterrupt>
 8002136:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	f003 0301 	and.w	r3, r3, #1
 800213e:	2b00      	cmp	r3, #0
 8002140:	d00c      	beq.n	800215c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002144:	015a      	lsls	r2, r3, #5
 8002146:	69fb      	ldr	r3, [r7, #28]
 8002148:	4413      	add	r3, r2
 800214a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800214e:	461a      	mov	r2, r3
 8002150:	2301      	movs	r3, #1
 8002152:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002154:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	f000 fea2 	bl	8002ea0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	f003 0308 	and.w	r3, r3, #8
 8002162:	2b00      	cmp	r3, #0
 8002164:	d00c      	beq.n	8002180 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002168:	015a      	lsls	r2, r3, #5
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	4413      	add	r3, r2
 800216e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002172:	461a      	mov	r2, r3
 8002174:	2308      	movs	r3, #8
 8002176:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002178:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	f000 ff78 	bl	8003070 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	f003 0310 	and.w	r3, r3, #16
 8002186:	2b00      	cmp	r3, #0
 8002188:	d008      	beq.n	800219c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800218a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218c:	015a      	lsls	r2, r3, #5
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	4413      	add	r3, r2
 8002192:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002196:	461a      	mov	r2, r3
 8002198:	2310      	movs	r3, #16
 800219a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	f003 0302 	and.w	r3, r3, #2
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d030      	beq.n	8002208 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80021a6:	6a3b      	ldr	r3, [r7, #32]
 80021a8:	695b      	ldr	r3, [r3, #20]
 80021aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021ae:	2b80      	cmp	r3, #128	; 0x80
 80021b0:	d109      	bne.n	80021c6 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	69fa      	ldr	r2, [r7, #28]
 80021bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80021c0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021c4:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80021c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021c8:	4613      	mov	r3, r2
 80021ca:	00db      	lsls	r3, r3, #3
 80021cc:	4413      	add	r3, r2
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80021d4:	687a      	ldr	r2, [r7, #4]
 80021d6:	4413      	add	r3, r2
 80021d8:	3304      	adds	r3, #4
 80021da:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	78db      	ldrb	r3, [r3, #3]
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d108      	bne.n	80021f6 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	2200      	movs	r2, #0
 80021e8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80021ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	4619      	mov	r1, r3
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	f007 fa89 	bl	8009708 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80021f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f8:	015a      	lsls	r2, r3, #5
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	4413      	add	r3, r2
 80021fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002202:	461a      	mov	r2, r3
 8002204:	2302      	movs	r3, #2
 8002206:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	f003 0320 	and.w	r3, r3, #32
 800220e:	2b00      	cmp	r3, #0
 8002210:	d008      	beq.n	8002224 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002214:	015a      	lsls	r2, r3, #5
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	4413      	add	r3, r2
 800221a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800221e:	461a      	mov	r2, r3
 8002220:	2320      	movs	r3, #32
 8002222:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800222a:	2b00      	cmp	r3, #0
 800222c:	d009      	beq.n	8002242 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800222e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002230:	015a      	lsls	r2, r3, #5
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	4413      	add	r3, r2
 8002236:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800223a:	461a      	mov	r2, r3
 800223c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002240:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002244:	3301      	adds	r3, #1
 8002246:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800224a:	085b      	lsrs	r3, r3, #1
 800224c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800224e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002250:	2b00      	cmp	r3, #0
 8002252:	f47f af62 	bne.w	800211a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4618      	mov	r0, r3
 800225c:	f003 fc18 	bl	8005a90 <USB_ReadInterrupts>
 8002260:	4603      	mov	r3, r0
 8002262:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002266:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800226a:	f040 80db 	bne.w	8002424 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4618      	mov	r0, r3
 8002274:	f003 fc39 	bl	8005aea <USB_ReadDevAllInEpInterrupt>
 8002278:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800227a:	2300      	movs	r3, #0
 800227c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800227e:	e0cd      	b.n	800241c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002282:	f003 0301 	and.w	r3, r3, #1
 8002286:	2b00      	cmp	r3, #0
 8002288:	f000 80c2 	beq.w	8002410 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002292:	b2d2      	uxtb	r2, r2
 8002294:	4611      	mov	r1, r2
 8002296:	4618      	mov	r0, r3
 8002298:	f003 fc5f 	bl	8005b5a <USB_ReadDevInEPInterrupt>
 800229c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	f003 0301 	and.w	r3, r3, #1
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d057      	beq.n	8002358 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80022a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022aa:	f003 030f 	and.w	r3, r3, #15
 80022ae:	2201      	movs	r2, #1
 80022b0:	fa02 f303 	lsl.w	r3, r2, r3
 80022b4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	43db      	mvns	r3, r3
 80022c2:	69f9      	ldr	r1, [r7, #28]
 80022c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80022c8:	4013      	ands	r3, r2
 80022ca:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80022cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ce:	015a      	lsls	r2, r3, #5
 80022d0:	69fb      	ldr	r3, [r7, #28]
 80022d2:	4413      	add	r3, r2
 80022d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80022d8:	461a      	mov	r2, r3
 80022da:	2301      	movs	r3, #1
 80022dc:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	799b      	ldrb	r3, [r3, #6]
 80022e2:	2b01      	cmp	r3, #1
 80022e4:	d132      	bne.n	800234c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80022e6:	6879      	ldr	r1, [r7, #4]
 80022e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022ea:	4613      	mov	r3, r2
 80022ec:	00db      	lsls	r3, r3, #3
 80022ee:	4413      	add	r3, r2
 80022f0:	009b      	lsls	r3, r3, #2
 80022f2:	440b      	add	r3, r1
 80022f4:	3320      	adds	r3, #32
 80022f6:	6819      	ldr	r1, [r3, #0]
 80022f8:	6878      	ldr	r0, [r7, #4]
 80022fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022fc:	4613      	mov	r3, r2
 80022fe:	00db      	lsls	r3, r3, #3
 8002300:	4413      	add	r3, r2
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	4403      	add	r3, r0
 8002306:	331c      	adds	r3, #28
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4419      	add	r1, r3
 800230c:	6878      	ldr	r0, [r7, #4]
 800230e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002310:	4613      	mov	r3, r2
 8002312:	00db      	lsls	r3, r3, #3
 8002314:	4413      	add	r3, r2
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	4403      	add	r3, r0
 800231a:	3320      	adds	r3, #32
 800231c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800231e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002320:	2b00      	cmp	r3, #0
 8002322:	d113      	bne.n	800234c <HAL_PCD_IRQHandler+0x3a2>
 8002324:	6879      	ldr	r1, [r7, #4]
 8002326:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002328:	4613      	mov	r3, r2
 800232a:	00db      	lsls	r3, r3, #3
 800232c:	4413      	add	r3, r2
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	440b      	add	r3, r1
 8002332:	3324      	adds	r3, #36	; 0x24
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d108      	bne.n	800234c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6818      	ldr	r0, [r3, #0]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8002344:	461a      	mov	r2, r3
 8002346:	2101      	movs	r1, #1
 8002348:	f003 fc66 	bl	8005c18 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800234c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234e:	b2db      	uxtb	r3, r3
 8002350:	4619      	mov	r1, r3
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	f007 f953 	bl	80095fe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	f003 0308 	and.w	r3, r3, #8
 800235e:	2b00      	cmp	r3, #0
 8002360:	d008      	beq.n	8002374 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002364:	015a      	lsls	r2, r3, #5
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	4413      	add	r3, r2
 800236a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800236e:	461a      	mov	r2, r3
 8002370:	2308      	movs	r3, #8
 8002372:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	f003 0310 	and.w	r3, r3, #16
 800237a:	2b00      	cmp	r3, #0
 800237c:	d008      	beq.n	8002390 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800237e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002380:	015a      	lsls	r2, r3, #5
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	4413      	add	r3, r2
 8002386:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800238a:	461a      	mov	r2, r3
 800238c:	2310      	movs	r3, #16
 800238e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002396:	2b00      	cmp	r3, #0
 8002398:	d008      	beq.n	80023ac <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800239a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239c:	015a      	lsls	r2, r3, #5
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	4413      	add	r3, r2
 80023a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80023a6:	461a      	mov	r2, r3
 80023a8:	2340      	movs	r3, #64	; 0x40
 80023aa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	f003 0302 	and.w	r3, r3, #2
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d023      	beq.n	80023fe <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80023b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80023b8:	6a38      	ldr	r0, [r7, #32]
 80023ba:	f002 fc53 	bl	8004c64 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80023be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023c0:	4613      	mov	r3, r2
 80023c2:	00db      	lsls	r3, r3, #3
 80023c4:	4413      	add	r3, r2
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	3310      	adds	r3, #16
 80023ca:	687a      	ldr	r2, [r7, #4]
 80023cc:	4413      	add	r3, r2
 80023ce:	3304      	adds	r3, #4
 80023d0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	78db      	ldrb	r3, [r3, #3]
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d108      	bne.n	80023ec <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	2200      	movs	r2, #0
 80023de:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80023e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	4619      	mov	r1, r3
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	f007 f9a0 	bl	800972c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80023ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ee:	015a      	lsls	r2, r3, #5
 80023f0:	69fb      	ldr	r3, [r7, #28]
 80023f2:	4413      	add	r3, r2
 80023f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80023f8:	461a      	mov	r2, r3
 80023fa:	2302      	movs	r3, #2
 80023fc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002404:	2b00      	cmp	r3, #0
 8002406:	d003      	beq.n	8002410 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002408:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	f000 fcbb 	bl	8002d86 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002412:	3301      	adds	r3, #1
 8002414:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002418:	085b      	lsrs	r3, r3, #1
 800241a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800241c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800241e:	2b00      	cmp	r3, #0
 8002420:	f47f af2e 	bne.w	8002280 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4618      	mov	r0, r3
 800242a:	f003 fb31 	bl	8005a90 <USB_ReadInterrupts>
 800242e:	4603      	mov	r3, r0
 8002430:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002434:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002438:	d122      	bne.n	8002480 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	69fa      	ldr	r2, [r7, #28]
 8002444:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002448:	f023 0301 	bic.w	r3, r3, #1
 800244c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 8002454:	2b01      	cmp	r3, #1
 8002456:	d108      	bne.n	800246a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2200      	movs	r2, #0
 800245c:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002460:	2100      	movs	r1, #0
 8002462:	6878      	ldr	r0, [r7, #4]
 8002464:	f000 fea2 	bl	80031ac <HAL_PCDEx_LPM_Callback>
 8002468:	e002      	b.n	8002470 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	f007 f93e 	bl	80096ec <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	695a      	ldr	r2, [r3, #20]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800247e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4618      	mov	r0, r3
 8002486:	f003 fb03 	bl	8005a90 <USB_ReadInterrupts>
 800248a:	4603      	mov	r3, r0
 800248c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002490:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002494:	d112      	bne.n	80024bc <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	f003 0301 	and.w	r3, r3, #1
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d102      	bne.n	80024ac <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f007 f8fa 	bl	80096a0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	695a      	ldr	r2, [r3, #20]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80024ba:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4618      	mov	r0, r3
 80024c2:	f003 fae5 	bl	8005a90 <USB_ReadInterrupts>
 80024c6:	4603      	mov	r3, r0
 80024c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024d0:	f040 80b7 	bne.w	8002642 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80024d4:	69fb      	ldr	r3, [r7, #28]
 80024d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	69fa      	ldr	r2, [r7, #28]
 80024de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80024e2:	f023 0301 	bic.w	r3, r3, #1
 80024e6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	2110      	movs	r1, #16
 80024ee:	4618      	mov	r0, r3
 80024f0:	f002 fbb8 	bl	8004c64 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024f4:	2300      	movs	r3, #0
 80024f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024f8:	e046      	b.n	8002588 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80024fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024fc:	015a      	lsls	r2, r3, #5
 80024fe:	69fb      	ldr	r3, [r7, #28]
 8002500:	4413      	add	r3, r2
 8002502:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002506:	461a      	mov	r2, r3
 8002508:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800250c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800250e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002510:	015a      	lsls	r2, r3, #5
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	4413      	add	r3, r2
 8002516:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800251e:	0151      	lsls	r1, r2, #5
 8002520:	69fa      	ldr	r2, [r7, #28]
 8002522:	440a      	add	r2, r1
 8002524:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002528:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800252c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800252e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002530:	015a      	lsls	r2, r3, #5
 8002532:	69fb      	ldr	r3, [r7, #28]
 8002534:	4413      	add	r3, r2
 8002536:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800253a:	461a      	mov	r2, r3
 800253c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002540:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002544:	015a      	lsls	r2, r3, #5
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	4413      	add	r3, r2
 800254a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002552:	0151      	lsls	r1, r2, #5
 8002554:	69fa      	ldr	r2, [r7, #28]
 8002556:	440a      	add	r2, r1
 8002558:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800255c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002560:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002564:	015a      	lsls	r2, r3, #5
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	4413      	add	r3, r2
 800256a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002572:	0151      	lsls	r1, r2, #5
 8002574:	69fa      	ldr	r2, [r7, #28]
 8002576:	440a      	add	r2, r1
 8002578:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800257c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002580:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002584:	3301      	adds	r3, #1
 8002586:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	791b      	ldrb	r3, [r3, #4]
 800258c:	461a      	mov	r2, r3
 800258e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002590:	4293      	cmp	r3, r2
 8002592:	d3b2      	bcc.n	80024fa <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002594:	69fb      	ldr	r3, [r7, #28]
 8002596:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800259a:	69db      	ldr	r3, [r3, #28]
 800259c:	69fa      	ldr	r2, [r7, #28]
 800259e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025a2:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80025a6:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	7bdb      	ldrb	r3, [r3, #15]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d016      	beq.n	80025de <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80025b0:	69fb      	ldr	r3, [r7, #28]
 80025b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025ba:	69fa      	ldr	r2, [r7, #28]
 80025bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025c0:	f043 030b 	orr.w	r3, r3, #11
 80025c4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80025c8:	69fb      	ldr	r3, [r7, #28]
 80025ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025d0:	69fa      	ldr	r2, [r7, #28]
 80025d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025d6:	f043 030b 	orr.w	r3, r3, #11
 80025da:	6453      	str	r3, [r2, #68]	; 0x44
 80025dc:	e015      	b.n	800260a <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025e4:	695b      	ldr	r3, [r3, #20]
 80025e6:	69fa      	ldr	r2, [r7, #28]
 80025e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025ec:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80025f0:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80025f4:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025fc:	691b      	ldr	r3, [r3, #16]
 80025fe:	69fa      	ldr	r2, [r7, #28]
 8002600:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002604:	f043 030b 	orr.w	r3, r3, #11
 8002608:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800260a:	69fb      	ldr	r3, [r7, #28]
 800260c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	69fa      	ldr	r2, [r7, #28]
 8002614:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002618:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800261c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6818      	ldr	r0, [r3, #0]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	f203 439c 	addw	r3, r3, #1180	; 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800262c:	461a      	mov	r2, r3
 800262e:	f003 faf3 	bl	8005c18 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	695a      	ldr	r2, [r3, #20]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002640:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4618      	mov	r0, r3
 8002648:	f003 fa22 	bl	8005a90 <USB_ReadInterrupts>
 800264c:	4603      	mov	r3, r0
 800264e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002652:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002656:	d123      	bne.n	80026a0 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4618      	mov	r0, r3
 800265e:	f003 fab8 	bl	8005bd2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4618      	mov	r0, r3
 8002668:	f002 fb75 	bl	8004d56 <USB_GetDevSpeed>
 800266c:	4603      	mov	r3, r0
 800266e:	461a      	mov	r2, r3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681c      	ldr	r4, [r3, #0]
 8002678:	f001 f9c8 	bl	8003a0c <HAL_RCC_GetHCLKFreq>
 800267c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002682:	461a      	mov	r2, r3
 8002684:	4620      	mov	r0, r4
 8002686:	f002 f879 	bl	800477c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f006 ffdf 	bl	800964e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	695a      	ldr	r2, [r3, #20]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800269e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4618      	mov	r0, r3
 80026a6:	f003 f9f3 	bl	8005a90 <USB_ReadInterrupts>
 80026aa:	4603      	mov	r3, r0
 80026ac:	f003 0308 	and.w	r3, r3, #8
 80026b0:	2b08      	cmp	r3, #8
 80026b2:	d10a      	bne.n	80026ca <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80026b4:	6878      	ldr	r0, [r7, #4]
 80026b6:	f006 ffbc 	bl	8009632 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	695a      	ldr	r2, [r3, #20]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f002 0208 	and.w	r2, r2, #8
 80026c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4618      	mov	r0, r3
 80026d0:	f003 f9de 	bl	8005a90 <USB_ReadInterrupts>
 80026d4:	4603      	mov	r3, r0
 80026d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026da:	2b80      	cmp	r3, #128	; 0x80
 80026dc:	d123      	bne.n	8002726 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80026de:	6a3b      	ldr	r3, [r7, #32]
 80026e0:	699b      	ldr	r3, [r3, #24]
 80026e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80026e6:	6a3b      	ldr	r3, [r7, #32]
 80026e8:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80026ea:	2301      	movs	r3, #1
 80026ec:	627b      	str	r3, [r7, #36]	; 0x24
 80026ee:	e014      	b.n	800271a <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80026f0:	6879      	ldr	r1, [r7, #4]
 80026f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026f4:	4613      	mov	r3, r2
 80026f6:	00db      	lsls	r3, r3, #3
 80026f8:	4413      	add	r3, r2
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	440b      	add	r3, r1
 80026fe:	f203 2357 	addw	r3, r3, #599	; 0x257
 8002702:	781b      	ldrb	r3, [r3, #0]
 8002704:	2b01      	cmp	r3, #1
 8002706:	d105      	bne.n	8002714 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800270a:	b2db      	uxtb	r3, r3
 800270c:	4619      	mov	r1, r3
 800270e:	6878      	ldr	r0, [r7, #4]
 8002710:	f000 fb08 	bl	8002d24 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002716:	3301      	adds	r3, #1
 8002718:	627b      	str	r3, [r7, #36]	; 0x24
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	791b      	ldrb	r3, [r3, #4]
 800271e:	461a      	mov	r2, r3
 8002720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002722:	4293      	cmp	r3, r2
 8002724:	d3e4      	bcc.n	80026f0 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4618      	mov	r0, r3
 800272c:	f003 f9b0 	bl	8005a90 <USB_ReadInterrupts>
 8002730:	4603      	mov	r3, r0
 8002732:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002736:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800273a:	d13c      	bne.n	80027b6 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800273c:	2301      	movs	r3, #1
 800273e:	627b      	str	r3, [r7, #36]	; 0x24
 8002740:	e02b      	b.n	800279a <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002744:	015a      	lsls	r2, r3, #5
 8002746:	69fb      	ldr	r3, [r7, #28]
 8002748:	4413      	add	r3, r2
 800274a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002752:	6879      	ldr	r1, [r7, #4]
 8002754:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002756:	4613      	mov	r3, r2
 8002758:	00db      	lsls	r3, r3, #3
 800275a:	4413      	add	r3, r2
 800275c:	009b      	lsls	r3, r3, #2
 800275e:	440b      	add	r3, r1
 8002760:	3318      	adds	r3, #24
 8002762:	781b      	ldrb	r3, [r3, #0]
 8002764:	2b01      	cmp	r3, #1
 8002766:	d115      	bne.n	8002794 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002768:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800276a:	2b00      	cmp	r3, #0
 800276c:	da12      	bge.n	8002794 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800276e:	6879      	ldr	r1, [r7, #4]
 8002770:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002772:	4613      	mov	r3, r2
 8002774:	00db      	lsls	r3, r3, #3
 8002776:	4413      	add	r3, r2
 8002778:	009b      	lsls	r3, r3, #2
 800277a:	440b      	add	r3, r1
 800277c:	3317      	adds	r3, #23
 800277e:	2201      	movs	r2, #1
 8002780:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002784:	b2db      	uxtb	r3, r3
 8002786:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800278a:	b2db      	uxtb	r3, r3
 800278c:	4619      	mov	r1, r3
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	f000 fac8 	bl	8002d24 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002796:	3301      	adds	r3, #1
 8002798:	627b      	str	r3, [r7, #36]	; 0x24
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	791b      	ldrb	r3, [r3, #4]
 800279e:	461a      	mov	r2, r3
 80027a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d3cd      	bcc.n	8002742 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	695a      	ldr	r2, [r3, #20]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80027b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4618      	mov	r0, r3
 80027bc:	f003 f968 	bl	8005a90 <USB_ReadInterrupts>
 80027c0:	4603      	mov	r3, r0
 80027c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027c6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80027ca:	d156      	bne.n	800287a <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80027cc:	2301      	movs	r3, #1
 80027ce:	627b      	str	r3, [r7, #36]	; 0x24
 80027d0:	e045      	b.n	800285e <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80027d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d4:	015a      	lsls	r2, r3, #5
 80027d6:	69fb      	ldr	r3, [r7, #28]
 80027d8:	4413      	add	r3, r2
 80027da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80027e2:	6879      	ldr	r1, [r7, #4]
 80027e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027e6:	4613      	mov	r3, r2
 80027e8:	00db      	lsls	r3, r3, #3
 80027ea:	4413      	add	r3, r2
 80027ec:	009b      	lsls	r3, r3, #2
 80027ee:	440b      	add	r3, r1
 80027f0:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80027f4:	781b      	ldrb	r3, [r3, #0]
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d12e      	bne.n	8002858 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80027fa:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	da2b      	bge.n	8002858 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002800:	69bb      	ldr	r3, [r7, #24]
 8002802:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 800280c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002810:	429a      	cmp	r2, r3
 8002812:	d121      	bne.n	8002858 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002814:	6879      	ldr	r1, [r7, #4]
 8002816:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002818:	4613      	mov	r3, r2
 800281a:	00db      	lsls	r3, r3, #3
 800281c:	4413      	add	r3, r2
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	440b      	add	r3, r1
 8002822:	f203 2357 	addw	r3, r3, #599	; 0x257
 8002826:	2201      	movs	r2, #1
 8002828:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800282a:	6a3b      	ldr	r3, [r7, #32]
 800282c:	699b      	ldr	r3, [r3, #24]
 800282e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002832:	6a3b      	ldr	r3, [r7, #32]
 8002834:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002836:	6a3b      	ldr	r3, [r7, #32]
 8002838:	695b      	ldr	r3, [r3, #20]
 800283a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800283e:	2b00      	cmp	r3, #0
 8002840:	d10a      	bne.n	8002858 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	69fa      	ldr	r2, [r7, #28]
 800284c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002850:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002854:	6053      	str	r3, [r2, #4]
            break;
 8002856:	e008      	b.n	800286a <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285a:	3301      	adds	r3, #1
 800285c:	627b      	str	r3, [r7, #36]	; 0x24
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	791b      	ldrb	r3, [r3, #4]
 8002862:	461a      	mov	r2, r3
 8002864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002866:	4293      	cmp	r3, r2
 8002868:	d3b3      	bcc.n	80027d2 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	695a      	ldr	r2, [r3, #20]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002878:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4618      	mov	r0, r3
 8002880:	f003 f906 	bl	8005a90 <USB_ReadInterrupts>
 8002884:	4603      	mov	r3, r0
 8002886:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800288a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800288e:	d10a      	bne.n	80028a6 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002890:	6878      	ldr	r0, [r7, #4]
 8002892:	f006 ff5d 	bl	8009750 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	695a      	ldr	r2, [r3, #20]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80028a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4618      	mov	r0, r3
 80028ac:	f003 f8f0 	bl	8005a90 <USB_ReadInterrupts>
 80028b0:	4603      	mov	r3, r0
 80028b2:	f003 0304 	and.w	r3, r3, #4
 80028b6:	2b04      	cmp	r3, #4
 80028b8:	d115      	bne.n	80028e6 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80028c2:	69bb      	ldr	r3, [r7, #24]
 80028c4:	f003 0304 	and.w	r3, r3, #4
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d002      	beq.n	80028d2 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80028cc:	6878      	ldr	r0, [r7, #4]
 80028ce:	f006 ff4d 	bl	800976c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	6859      	ldr	r1, [r3, #4]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	69ba      	ldr	r2, [r7, #24]
 80028de:	430a      	orrs	r2, r1
 80028e0:	605a      	str	r2, [r3, #4]
 80028e2:	e000      	b.n	80028e6 <HAL_PCD_IRQHandler+0x93c>
      return;
 80028e4:	bf00      	nop
    }
  }
}
 80028e6:	3734      	adds	r7, #52	; 0x34
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd90      	pop	{r4, r7, pc}

080028ec <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b082      	sub	sp, #8
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
 80028f4:	460b      	mov	r3, r1
 80028f6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d101      	bne.n	8002906 <HAL_PCD_SetAddress+0x1a>
 8002902:	2302      	movs	r3, #2
 8002904:	e012      	b.n	800292c <HAL_PCD_SetAddress+0x40>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2201      	movs	r2, #1
 800290a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  hpcd->USB_Address = address;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	78fa      	ldrb	r2, [r7, #3]
 8002912:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	78fa      	ldrb	r2, [r7, #3]
 800291a:	4611      	mov	r1, r2
 800291c:	4618      	mov	r0, r3
 800291e:	f003 f84f 	bl	80059c0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2200      	movs	r2, #0
 8002926:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 800292a:	2300      	movs	r3, #0
}
 800292c:	4618      	mov	r0, r3
 800292e:	3708      	adds	r7, #8
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}

08002934 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b084      	sub	sp, #16
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
 800293c:	4608      	mov	r0, r1
 800293e:	4611      	mov	r1, r2
 8002940:	461a      	mov	r2, r3
 8002942:	4603      	mov	r3, r0
 8002944:	70fb      	strb	r3, [r7, #3]
 8002946:	460b      	mov	r3, r1
 8002948:	803b      	strh	r3, [r7, #0]
 800294a:	4613      	mov	r3, r2
 800294c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800294e:	2300      	movs	r3, #0
 8002950:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002952:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002956:	2b00      	cmp	r3, #0
 8002958:	da0f      	bge.n	800297a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800295a:	78fb      	ldrb	r3, [r7, #3]
 800295c:	f003 020f 	and.w	r2, r3, #15
 8002960:	4613      	mov	r3, r2
 8002962:	00db      	lsls	r3, r3, #3
 8002964:	4413      	add	r3, r2
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	3310      	adds	r3, #16
 800296a:	687a      	ldr	r2, [r7, #4]
 800296c:	4413      	add	r3, r2
 800296e:	3304      	adds	r3, #4
 8002970:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	2201      	movs	r2, #1
 8002976:	705a      	strb	r2, [r3, #1]
 8002978:	e00f      	b.n	800299a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800297a:	78fb      	ldrb	r3, [r7, #3]
 800297c:	f003 020f 	and.w	r2, r3, #15
 8002980:	4613      	mov	r3, r2
 8002982:	00db      	lsls	r3, r3, #3
 8002984:	4413      	add	r3, r2
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800298c:	687a      	ldr	r2, [r7, #4]
 800298e:	4413      	add	r3, r2
 8002990:	3304      	adds	r3, #4
 8002992:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2200      	movs	r2, #0
 8002998:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800299a:	78fb      	ldrb	r3, [r7, #3]
 800299c:	f003 030f 	and.w	r3, r3, #15
 80029a0:	b2da      	uxtb	r2, r3
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80029a6:	883a      	ldrh	r2, [r7, #0]
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	78ba      	ldrb	r2, [r7, #2]
 80029b0:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	785b      	ldrb	r3, [r3, #1]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d004      	beq.n	80029c4 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	781b      	ldrb	r3, [r3, #0]
 80029be:	b29a      	uxth	r2, r3
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80029c4:	78bb      	ldrb	r3, [r7, #2]
 80029c6:	2b02      	cmp	r3, #2
 80029c8:	d102      	bne.n	80029d0 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2200      	movs	r2, #0
 80029ce:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80029d6:	2b01      	cmp	r3, #1
 80029d8:	d101      	bne.n	80029de <HAL_PCD_EP_Open+0xaa>
 80029da:	2302      	movs	r3, #2
 80029dc:	e00e      	b.n	80029fc <HAL_PCD_EP_Open+0xc8>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2201      	movs	r2, #1
 80029e2:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	68f9      	ldr	r1, [r7, #12]
 80029ec:	4618      	mov	r0, r3
 80029ee:	f002 f9d7 	bl	8004da0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2200      	movs	r2, #0
 80029f6:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return ret;
 80029fa:	7afb      	ldrb	r3, [r7, #11]
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	3710      	adds	r7, #16
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}

08002a04 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b084      	sub	sp, #16
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
 8002a0c:	460b      	mov	r3, r1
 8002a0e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002a10:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	da0f      	bge.n	8002a38 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a18:	78fb      	ldrb	r3, [r7, #3]
 8002a1a:	f003 020f 	and.w	r2, r3, #15
 8002a1e:	4613      	mov	r3, r2
 8002a20:	00db      	lsls	r3, r3, #3
 8002a22:	4413      	add	r3, r2
 8002a24:	009b      	lsls	r3, r3, #2
 8002a26:	3310      	adds	r3, #16
 8002a28:	687a      	ldr	r2, [r7, #4]
 8002a2a:	4413      	add	r3, r2
 8002a2c:	3304      	adds	r3, #4
 8002a2e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2201      	movs	r2, #1
 8002a34:	705a      	strb	r2, [r3, #1]
 8002a36:	e00f      	b.n	8002a58 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a38:	78fb      	ldrb	r3, [r7, #3]
 8002a3a:	f003 020f 	and.w	r2, r3, #15
 8002a3e:	4613      	mov	r3, r2
 8002a40:	00db      	lsls	r3, r3, #3
 8002a42:	4413      	add	r3, r2
 8002a44:	009b      	lsls	r3, r3, #2
 8002a46:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002a4a:	687a      	ldr	r2, [r7, #4]
 8002a4c:	4413      	add	r3, r2
 8002a4e:	3304      	adds	r3, #4
 8002a50:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	2200      	movs	r2, #0
 8002a56:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a58:	78fb      	ldrb	r3, [r7, #3]
 8002a5a:	f003 030f 	and.w	r3, r3, #15
 8002a5e:	b2da      	uxtb	r2, r3
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d101      	bne.n	8002a72 <HAL_PCD_EP_Close+0x6e>
 8002a6e:	2302      	movs	r3, #2
 8002a70:	e00e      	b.n	8002a90 <HAL_PCD_EP_Close+0x8c>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2201      	movs	r2, #1
 8002a76:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	68f9      	ldr	r1, [r7, #12]
 8002a80:	4618      	mov	r0, r3
 8002a82:	f002 fa15 	bl	8004eb0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  return HAL_OK;
 8002a8e:	2300      	movs	r3, #0
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	3710      	adds	r7, #16
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}

08002a98 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b086      	sub	sp, #24
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	60f8      	str	r0, [r7, #12]
 8002aa0:	607a      	str	r2, [r7, #4]
 8002aa2:	603b      	str	r3, [r7, #0]
 8002aa4:	460b      	mov	r3, r1
 8002aa6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002aa8:	7afb      	ldrb	r3, [r7, #11]
 8002aaa:	f003 020f 	and.w	r2, r3, #15
 8002aae:	4613      	mov	r3, r2
 8002ab0:	00db      	lsls	r3, r3, #3
 8002ab2:	4413      	add	r3, r2
 8002ab4:	009b      	lsls	r3, r3, #2
 8002ab6:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002aba:	68fa      	ldr	r2, [r7, #12]
 8002abc:	4413      	add	r3, r2
 8002abe:	3304      	adds	r3, #4
 8002ac0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	687a      	ldr	r2, [r7, #4]
 8002ac6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	683a      	ldr	r2, [r7, #0]
 8002acc:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ada:	7afb      	ldrb	r3, [r7, #11]
 8002adc:	f003 030f 	and.w	r3, r3, #15
 8002ae0:	b2da      	uxtb	r2, r3
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	799b      	ldrb	r3, [r3, #6]
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	d102      	bne.n	8002af4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002aee:	687a      	ldr	r2, [r7, #4]
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	6818      	ldr	r0, [r3, #0]
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	799b      	ldrb	r3, [r3, #6]
 8002afc:	461a      	mov	r2, r3
 8002afe:	6979      	ldr	r1, [r7, #20]
 8002b00:	f002 fab2 	bl	8005068 <USB_EPStartXfer>

  return HAL_OK;
 8002b04:	2300      	movs	r3, #0
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	3718      	adds	r7, #24
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}

08002b0e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002b0e:	b480      	push	{r7}
 8002b10:	b083      	sub	sp, #12
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	6078      	str	r0, [r7, #4]
 8002b16:	460b      	mov	r3, r1
 8002b18:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002b1a:	78fb      	ldrb	r3, [r7, #3]
 8002b1c:	f003 020f 	and.w	r2, r3, #15
 8002b20:	6879      	ldr	r1, [r7, #4]
 8002b22:	4613      	mov	r3, r2
 8002b24:	00db      	lsls	r3, r3, #3
 8002b26:	4413      	add	r3, r2
 8002b28:	009b      	lsls	r3, r3, #2
 8002b2a:	440b      	add	r3, r1
 8002b2c:	f503 731a 	add.w	r3, r3, #616	; 0x268
 8002b30:	681b      	ldr	r3, [r3, #0]
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	370c      	adds	r7, #12
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr

08002b3e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002b3e:	b580      	push	{r7, lr}
 8002b40:	b086      	sub	sp, #24
 8002b42:	af00      	add	r7, sp, #0
 8002b44:	60f8      	str	r0, [r7, #12]
 8002b46:	607a      	str	r2, [r7, #4]
 8002b48:	603b      	str	r3, [r7, #0]
 8002b4a:	460b      	mov	r3, r1
 8002b4c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b4e:	7afb      	ldrb	r3, [r7, #11]
 8002b50:	f003 020f 	and.w	r2, r3, #15
 8002b54:	4613      	mov	r3, r2
 8002b56:	00db      	lsls	r3, r3, #3
 8002b58:	4413      	add	r3, r2
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	3310      	adds	r3, #16
 8002b5e:	68fa      	ldr	r2, [r7, #12]
 8002b60:	4413      	add	r3, r2
 8002b62:	3304      	adds	r3, #4
 8002b64:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	687a      	ldr	r2, [r7, #4]
 8002b6a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	683a      	ldr	r2, [r7, #0]
 8002b70:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	2200      	movs	r2, #0
 8002b76:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b7e:	7afb      	ldrb	r3, [r7, #11]
 8002b80:	f003 030f 	and.w	r3, r3, #15
 8002b84:	b2da      	uxtb	r2, r3
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	799b      	ldrb	r3, [r3, #6]
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d102      	bne.n	8002b98 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002b92:	687a      	ldr	r2, [r7, #4]
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	6818      	ldr	r0, [r3, #0]
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	799b      	ldrb	r3, [r3, #6]
 8002ba0:	461a      	mov	r2, r3
 8002ba2:	6979      	ldr	r1, [r7, #20]
 8002ba4:	f002 fa60 	bl	8005068 <USB_EPStartXfer>

  return HAL_OK;
 8002ba8:	2300      	movs	r3, #0
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3718      	adds	r7, #24
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}

08002bb2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002bb2:	b580      	push	{r7, lr}
 8002bb4:	b084      	sub	sp, #16
 8002bb6:	af00      	add	r7, sp, #0
 8002bb8:	6078      	str	r0, [r7, #4]
 8002bba:	460b      	mov	r3, r1
 8002bbc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002bbe:	78fb      	ldrb	r3, [r7, #3]
 8002bc0:	f003 030f 	and.w	r3, r3, #15
 8002bc4:	687a      	ldr	r2, [r7, #4]
 8002bc6:	7912      	ldrb	r2, [r2, #4]
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d901      	bls.n	8002bd0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	e04f      	b.n	8002c70 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002bd0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	da0f      	bge.n	8002bf8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002bd8:	78fb      	ldrb	r3, [r7, #3]
 8002bda:	f003 020f 	and.w	r2, r3, #15
 8002bde:	4613      	mov	r3, r2
 8002be0:	00db      	lsls	r3, r3, #3
 8002be2:	4413      	add	r3, r2
 8002be4:	009b      	lsls	r3, r3, #2
 8002be6:	3310      	adds	r3, #16
 8002be8:	687a      	ldr	r2, [r7, #4]
 8002bea:	4413      	add	r3, r2
 8002bec:	3304      	adds	r3, #4
 8002bee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	705a      	strb	r2, [r3, #1]
 8002bf6:	e00d      	b.n	8002c14 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002bf8:	78fa      	ldrb	r2, [r7, #3]
 8002bfa:	4613      	mov	r3, r2
 8002bfc:	00db      	lsls	r3, r3, #3
 8002bfe:	4413      	add	r3, r2
 8002c00:	009b      	lsls	r3, r3, #2
 8002c02:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002c06:	687a      	ldr	r2, [r7, #4]
 8002c08:	4413      	add	r3, r2
 8002c0a:	3304      	adds	r3, #4
 8002c0c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	2200      	movs	r2, #0
 8002c12:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2201      	movs	r2, #1
 8002c18:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c1a:	78fb      	ldrb	r3, [r7, #3]
 8002c1c:	f003 030f 	and.w	r3, r3, #15
 8002c20:	b2da      	uxtb	r2, r3
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d101      	bne.n	8002c34 <HAL_PCD_EP_SetStall+0x82>
 8002c30:	2302      	movs	r3, #2
 8002c32:	e01d      	b.n	8002c70 <HAL_PCD_EP_SetStall+0xbe>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2201      	movs	r2, #1
 8002c38:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	68f9      	ldr	r1, [r7, #12]
 8002c42:	4618      	mov	r0, r3
 8002c44:	f002 fde8 	bl	8005818 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002c48:	78fb      	ldrb	r3, [r7, #3]
 8002c4a:	f003 030f 	and.w	r3, r3, #15
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d109      	bne.n	8002c66 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6818      	ldr	r0, [r3, #0]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	7999      	ldrb	r1, [r3, #6]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8002c60:	461a      	mov	r2, r3
 8002c62:	f002 ffd9 	bl	8005c18 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8002c6e:	2300      	movs	r3, #0
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	3710      	adds	r7, #16
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}

08002c78 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b084      	sub	sp, #16
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
 8002c80:	460b      	mov	r3, r1
 8002c82:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002c84:	78fb      	ldrb	r3, [r7, #3]
 8002c86:	f003 030f 	and.w	r3, r3, #15
 8002c8a:	687a      	ldr	r2, [r7, #4]
 8002c8c:	7912      	ldrb	r2, [r2, #4]
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d901      	bls.n	8002c96 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e042      	b.n	8002d1c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002c96:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	da0f      	bge.n	8002cbe <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c9e:	78fb      	ldrb	r3, [r7, #3]
 8002ca0:	f003 020f 	and.w	r2, r3, #15
 8002ca4:	4613      	mov	r3, r2
 8002ca6:	00db      	lsls	r3, r3, #3
 8002ca8:	4413      	add	r3, r2
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	3310      	adds	r3, #16
 8002cae:	687a      	ldr	r2, [r7, #4]
 8002cb0:	4413      	add	r3, r2
 8002cb2:	3304      	adds	r3, #4
 8002cb4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2201      	movs	r2, #1
 8002cba:	705a      	strb	r2, [r3, #1]
 8002cbc:	e00f      	b.n	8002cde <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002cbe:	78fb      	ldrb	r3, [r7, #3]
 8002cc0:	f003 020f 	and.w	r2, r3, #15
 8002cc4:	4613      	mov	r3, r2
 8002cc6:	00db      	lsls	r3, r3, #3
 8002cc8:	4413      	add	r3, r2
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002cd0:	687a      	ldr	r2, [r7, #4]
 8002cd2:	4413      	add	r3, r2
 8002cd4:	3304      	adds	r3, #4
 8002cd6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ce4:	78fb      	ldrb	r3, [r7, #3]
 8002ce6:	f003 030f 	and.w	r3, r3, #15
 8002cea:	b2da      	uxtb	r2, r3
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d101      	bne.n	8002cfe <HAL_PCD_EP_ClrStall+0x86>
 8002cfa:	2302      	movs	r3, #2
 8002cfc:	e00e      	b.n	8002d1c <HAL_PCD_EP_ClrStall+0xa4>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2201      	movs	r2, #1
 8002d02:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	68f9      	ldr	r1, [r7, #12]
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f002 fdf1 	bl	80058f4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2200      	movs	r2, #0
 8002d16:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8002d1a:	2300      	movs	r3, #0
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	3710      	adds	r7, #16
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}

08002d24 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b084      	sub	sp, #16
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	460b      	mov	r3, r1
 8002d2e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002d30:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	da0c      	bge.n	8002d52 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d38:	78fb      	ldrb	r3, [r7, #3]
 8002d3a:	f003 020f 	and.w	r2, r3, #15
 8002d3e:	4613      	mov	r3, r2
 8002d40:	00db      	lsls	r3, r3, #3
 8002d42:	4413      	add	r3, r2
 8002d44:	009b      	lsls	r3, r3, #2
 8002d46:	3310      	adds	r3, #16
 8002d48:	687a      	ldr	r2, [r7, #4]
 8002d4a:	4413      	add	r3, r2
 8002d4c:	3304      	adds	r3, #4
 8002d4e:	60fb      	str	r3, [r7, #12]
 8002d50:	e00c      	b.n	8002d6c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d52:	78fb      	ldrb	r3, [r7, #3]
 8002d54:	f003 020f 	and.w	r2, r3, #15
 8002d58:	4613      	mov	r3, r2
 8002d5a:	00db      	lsls	r3, r3, #3
 8002d5c:	4413      	add	r3, r2
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002d64:	687a      	ldr	r2, [r7, #4]
 8002d66:	4413      	add	r3, r2
 8002d68:	3304      	adds	r3, #4
 8002d6a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	68f9      	ldr	r1, [r7, #12]
 8002d72:	4618      	mov	r0, r3
 8002d74:	f002 fc10 	bl	8005598 <USB_EPStopXfer>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002d7c:	7afb      	ldrb	r3, [r7, #11]
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3710      	adds	r7, #16
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}

08002d86 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002d86:	b580      	push	{r7, lr}
 8002d88:	b08a      	sub	sp, #40	; 0x28
 8002d8a:	af02      	add	r7, sp, #8
 8002d8c:	6078      	str	r0, [r7, #4]
 8002d8e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002d9a:	683a      	ldr	r2, [r7, #0]
 8002d9c:	4613      	mov	r3, r2
 8002d9e:	00db      	lsls	r3, r3, #3
 8002da0:	4413      	add	r3, r2
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	3310      	adds	r3, #16
 8002da6:	687a      	ldr	r2, [r7, #4]
 8002da8:	4413      	add	r3, r2
 8002daa:	3304      	adds	r3, #4
 8002dac:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	695a      	ldr	r2, [r3, #20]
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	691b      	ldr	r3, [r3, #16]
 8002db6:	429a      	cmp	r2, r3
 8002db8:	d901      	bls.n	8002dbe <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e06b      	b.n	8002e96 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	691a      	ldr	r2, [r3, #16]
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	695b      	ldr	r3, [r3, #20]
 8002dc6:	1ad3      	subs	r3, r2, r3
 8002dc8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	69fa      	ldr	r2, [r7, #28]
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d902      	bls.n	8002dda <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002dda:	69fb      	ldr	r3, [r7, #28]
 8002ddc:	3303      	adds	r3, #3
 8002dde:	089b      	lsrs	r3, r3, #2
 8002de0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002de2:	e02a      	b.n	8002e3a <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	691a      	ldr	r2, [r3, #16]
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	695b      	ldr	r3, [r3, #20]
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	69fa      	ldr	r2, [r7, #28]
 8002df6:	429a      	cmp	r2, r3
 8002df8:	d902      	bls.n	8002e00 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002e00:	69fb      	ldr	r3, [r7, #28]
 8002e02:	3303      	adds	r3, #3
 8002e04:	089b      	lsrs	r3, r3, #2
 8002e06:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	68d9      	ldr	r1, [r3, #12]
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	b2da      	uxtb	r2, r3
 8002e10:	69fb      	ldr	r3, [r7, #28]
 8002e12:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002e18:	9300      	str	r3, [sp, #0]
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	6978      	ldr	r0, [r7, #20]
 8002e1e:	f002 fc65 	bl	80056ec <USB_WritePacket>

    ep->xfer_buff  += len;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	68da      	ldr	r2, [r3, #12]
 8002e26:	69fb      	ldr	r3, [r7, #28]
 8002e28:	441a      	add	r2, r3
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	695a      	ldr	r2, [r3, #20]
 8002e32:	69fb      	ldr	r3, [r7, #28]
 8002e34:	441a      	add	r2, r3
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	015a      	lsls	r2, r3, #5
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	4413      	add	r3, r2
 8002e42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e46:	699b      	ldr	r3, [r3, #24]
 8002e48:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002e4a:	69ba      	ldr	r2, [r7, #24]
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	d809      	bhi.n	8002e64 <PCD_WriteEmptyTxFifo+0xde>
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	695a      	ldr	r2, [r3, #20]
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d203      	bcs.n	8002e64 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	691b      	ldr	r3, [r3, #16]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d1bf      	bne.n	8002de4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	691a      	ldr	r2, [r3, #16]
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	695b      	ldr	r3, [r3, #20]
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d811      	bhi.n	8002e94 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	f003 030f 	and.w	r3, r3, #15
 8002e76:	2201      	movs	r2, #1
 8002e78:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	43db      	mvns	r3, r3
 8002e8a:	6939      	ldr	r1, [r7, #16]
 8002e8c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002e90:	4013      	ands	r3, r2
 8002e92:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002e94:	2300      	movs	r3, #0
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3720      	adds	r7, #32
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}
	...

08002ea0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b088      	sub	sp, #32
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
 8002ea8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002eb0:	69fb      	ldr	r3, [r7, #28]
 8002eb2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002eb4:	69fb      	ldr	r3, [r7, #28]
 8002eb6:	333c      	adds	r3, #60	; 0x3c
 8002eb8:	3304      	adds	r3, #4
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	015a      	lsls	r2, r3, #5
 8002ec2:	69bb      	ldr	r3, [r7, #24]
 8002ec4:	4413      	add	r3, r2
 8002ec6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	799b      	ldrb	r3, [r3, #6]
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d17b      	bne.n	8002fce <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	f003 0308 	and.w	r3, r3, #8
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d015      	beq.n	8002f0c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	4a61      	ldr	r2, [pc, #388]	; (8003068 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	f240 80b9 	bls.w	800305c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	f000 80b3 	beq.w	800305c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	015a      	lsls	r2, r3, #5
 8002efa:	69bb      	ldr	r3, [r7, #24]
 8002efc:	4413      	add	r3, r2
 8002efe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f02:	461a      	mov	r2, r3
 8002f04:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f08:	6093      	str	r3, [r2, #8]
 8002f0a:	e0a7      	b.n	800305c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	f003 0320 	and.w	r3, r3, #32
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d009      	beq.n	8002f2a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	015a      	lsls	r2, r3, #5
 8002f1a:	69bb      	ldr	r3, [r7, #24]
 8002f1c:	4413      	add	r3, r2
 8002f1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f22:	461a      	mov	r2, r3
 8002f24:	2320      	movs	r3, #32
 8002f26:	6093      	str	r3, [r2, #8]
 8002f28:	e098      	b.n	800305c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	f040 8093 	bne.w	800305c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	4a4b      	ldr	r2, [pc, #300]	; (8003068 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d90f      	bls.n	8002f5e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d00a      	beq.n	8002f5e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	015a      	lsls	r2, r3, #5
 8002f4c:	69bb      	ldr	r3, [r7, #24]
 8002f4e:	4413      	add	r3, r2
 8002f50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f54:	461a      	mov	r2, r3
 8002f56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f5a:	6093      	str	r3, [r2, #8]
 8002f5c:	e07e      	b.n	800305c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002f5e:	683a      	ldr	r2, [r7, #0]
 8002f60:	4613      	mov	r3, r2
 8002f62:	00db      	lsls	r3, r3, #3
 8002f64:	4413      	add	r3, r2
 8002f66:	009b      	lsls	r3, r3, #2
 8002f68:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002f6c:	687a      	ldr	r2, [r7, #4]
 8002f6e:	4413      	add	r3, r2
 8002f70:	3304      	adds	r3, #4
 8002f72:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	6a1a      	ldr	r2, [r3, #32]
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	0159      	lsls	r1, r3, #5
 8002f7c:	69bb      	ldr	r3, [r7, #24]
 8002f7e:	440b      	add	r3, r1
 8002f80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f84:	691b      	ldr	r3, [r3, #16]
 8002f86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f8a:	1ad2      	subs	r2, r2, r3
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d114      	bne.n	8002fc0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	691b      	ldr	r3, [r3, #16]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d109      	bne.n	8002fb2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6818      	ldr	r0, [r3, #0]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8002fa8:	461a      	mov	r2, r3
 8002faa:	2101      	movs	r1, #1
 8002fac:	f002 fe34 	bl	8005c18 <USB_EP0_OutStart>
 8002fb0:	e006      	b.n	8002fc0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	68da      	ldr	r2, [r3, #12]
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	695b      	ldr	r3, [r3, #20]
 8002fba:	441a      	add	r2, r3
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	b2db      	uxtb	r3, r3
 8002fc4:	4619      	mov	r1, r3
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	f006 fafe 	bl	80095c8 <HAL_PCD_DataOutStageCallback>
 8002fcc:	e046      	b.n	800305c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	4a26      	ldr	r2, [pc, #152]	; (800306c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d124      	bne.n	8003020 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d00a      	beq.n	8002ff6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	015a      	lsls	r2, r3, #5
 8002fe4:	69bb      	ldr	r3, [r7, #24]
 8002fe6:	4413      	add	r3, r2
 8002fe8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fec:	461a      	mov	r2, r3
 8002fee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ff2:	6093      	str	r3, [r2, #8]
 8002ff4:	e032      	b.n	800305c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	f003 0320 	and.w	r3, r3, #32
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d008      	beq.n	8003012 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	015a      	lsls	r2, r3, #5
 8003004:	69bb      	ldr	r3, [r7, #24]
 8003006:	4413      	add	r3, r2
 8003008:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800300c:	461a      	mov	r2, r3
 800300e:	2320      	movs	r3, #32
 8003010:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	b2db      	uxtb	r3, r3
 8003016:	4619      	mov	r1, r3
 8003018:	6878      	ldr	r0, [r7, #4]
 800301a:	f006 fad5 	bl	80095c8 <HAL_PCD_DataOutStageCallback>
 800301e:	e01d      	b.n	800305c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d114      	bne.n	8003050 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003026:	6879      	ldr	r1, [r7, #4]
 8003028:	683a      	ldr	r2, [r7, #0]
 800302a:	4613      	mov	r3, r2
 800302c:	00db      	lsls	r3, r3, #3
 800302e:	4413      	add	r3, r2
 8003030:	009b      	lsls	r3, r3, #2
 8003032:	440b      	add	r3, r1
 8003034:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d108      	bne.n	8003050 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6818      	ldr	r0, [r3, #0]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8003048:	461a      	mov	r2, r3
 800304a:	2100      	movs	r1, #0
 800304c:	f002 fde4 	bl	8005c18 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	b2db      	uxtb	r3, r3
 8003054:	4619      	mov	r1, r3
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f006 fab6 	bl	80095c8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800305c:	2300      	movs	r3, #0
}
 800305e:	4618      	mov	r0, r3
 8003060:	3720      	adds	r7, #32
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
 8003066:	bf00      	nop
 8003068:	4f54300a 	.word	0x4f54300a
 800306c:	4f54310a 	.word	0x4f54310a

08003070 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b086      	sub	sp, #24
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
 8003078:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	333c      	adds	r3, #60	; 0x3c
 8003088:	3304      	adds	r3, #4
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	015a      	lsls	r2, r3, #5
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	4413      	add	r3, r2
 8003096:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	4a15      	ldr	r2, [pc, #84]	; (80030f8 <PCD_EP_OutSetupPacket_int+0x88>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d90e      	bls.n	80030c4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d009      	beq.n	80030c4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	015a      	lsls	r2, r3, #5
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	4413      	add	r3, r2
 80030b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030bc:	461a      	mov	r2, r3
 80030be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030c2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80030c4:	6878      	ldr	r0, [r7, #4]
 80030c6:	f006 fa6d 	bl	80095a4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	4a0a      	ldr	r2, [pc, #40]	; (80030f8 <PCD_EP_OutSetupPacket_int+0x88>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d90c      	bls.n	80030ec <PCD_EP_OutSetupPacket_int+0x7c>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	799b      	ldrb	r3, [r3, #6]
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	d108      	bne.n	80030ec <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6818      	ldr	r0, [r3, #0]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80030e4:	461a      	mov	r2, r3
 80030e6:	2101      	movs	r1, #1
 80030e8:	f002 fd96 	bl	8005c18 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80030ec:	2300      	movs	r3, #0
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	3718      	adds	r7, #24
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}
 80030f6:	bf00      	nop
 80030f8:	4f54300a 	.word	0x4f54300a

080030fc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b085      	sub	sp, #20
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
 8003104:	460b      	mov	r3, r1
 8003106:	70fb      	strb	r3, [r7, #3]
 8003108:	4613      	mov	r3, r2
 800310a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003112:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003114:	78fb      	ldrb	r3, [r7, #3]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d107      	bne.n	800312a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800311a:	883b      	ldrh	r3, [r7, #0]
 800311c:	0419      	lsls	r1, r3, #16
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	68ba      	ldr	r2, [r7, #8]
 8003124:	430a      	orrs	r2, r1
 8003126:	629a      	str	r2, [r3, #40]	; 0x28
 8003128:	e028      	b.n	800317c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003130:	0c1b      	lsrs	r3, r3, #16
 8003132:	68ba      	ldr	r2, [r7, #8]
 8003134:	4413      	add	r3, r2
 8003136:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003138:	2300      	movs	r3, #0
 800313a:	73fb      	strb	r3, [r7, #15]
 800313c:	e00d      	b.n	800315a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	7bfb      	ldrb	r3, [r7, #15]
 8003144:	3340      	adds	r3, #64	; 0x40
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	4413      	add	r3, r2
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	0c1b      	lsrs	r3, r3, #16
 800314e:	68ba      	ldr	r2, [r7, #8]
 8003150:	4413      	add	r3, r2
 8003152:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003154:	7bfb      	ldrb	r3, [r7, #15]
 8003156:	3301      	adds	r3, #1
 8003158:	73fb      	strb	r3, [r7, #15]
 800315a:	7bfa      	ldrb	r2, [r7, #15]
 800315c:	78fb      	ldrb	r3, [r7, #3]
 800315e:	3b01      	subs	r3, #1
 8003160:	429a      	cmp	r2, r3
 8003162:	d3ec      	bcc.n	800313e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003164:	883b      	ldrh	r3, [r7, #0]
 8003166:	0418      	lsls	r0, r3, #16
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6819      	ldr	r1, [r3, #0]
 800316c:	78fb      	ldrb	r3, [r7, #3]
 800316e:	3b01      	subs	r3, #1
 8003170:	68ba      	ldr	r2, [r7, #8]
 8003172:	4302      	orrs	r2, r0
 8003174:	3340      	adds	r3, #64	; 0x40
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	440b      	add	r3, r1
 800317a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800317c:	2300      	movs	r3, #0
}
 800317e:	4618      	mov	r0, r3
 8003180:	3714      	adds	r7, #20
 8003182:	46bd      	mov	sp, r7
 8003184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003188:	4770      	bx	lr

0800318a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800318a:	b480      	push	{r7}
 800318c:	b083      	sub	sp, #12
 800318e:	af00      	add	r7, sp, #0
 8003190:	6078      	str	r0, [r7, #4]
 8003192:	460b      	mov	r3, r1
 8003194:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	887a      	ldrh	r2, [r7, #2]
 800319c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800319e:	2300      	movs	r3, #0
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	370c      	adds	r7, #12
 80031a4:	46bd      	mov	sp, r7
 80031a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031aa:	4770      	bx	lr

080031ac <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b083      	sub	sp, #12
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
 80031b4:	460b      	mov	r3, r1
 80031b6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80031b8:	bf00      	nop
 80031ba:	370c      	adds	r7, #12
 80031bc:	46bd      	mov	sp, r7
 80031be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c2:	4770      	bx	lr

080031c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b086      	sub	sp, #24
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d101      	bne.n	80031d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e267      	b.n	80036a6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 0301 	and.w	r3, r3, #1
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d075      	beq.n	80032ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80031e2:	4b88      	ldr	r3, [pc, #544]	; (8003404 <HAL_RCC_OscConfig+0x240>)
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	f003 030c 	and.w	r3, r3, #12
 80031ea:	2b04      	cmp	r3, #4
 80031ec:	d00c      	beq.n	8003208 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031ee:	4b85      	ldr	r3, [pc, #532]	; (8003404 <HAL_RCC_OscConfig+0x240>)
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80031f6:	2b08      	cmp	r3, #8
 80031f8:	d112      	bne.n	8003220 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031fa:	4b82      	ldr	r3, [pc, #520]	; (8003404 <HAL_RCC_OscConfig+0x240>)
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003202:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003206:	d10b      	bne.n	8003220 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003208:	4b7e      	ldr	r3, [pc, #504]	; (8003404 <HAL_RCC_OscConfig+0x240>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003210:	2b00      	cmp	r3, #0
 8003212:	d05b      	beq.n	80032cc <HAL_RCC_OscConfig+0x108>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d157      	bne.n	80032cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	e242      	b.n	80036a6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003228:	d106      	bne.n	8003238 <HAL_RCC_OscConfig+0x74>
 800322a:	4b76      	ldr	r3, [pc, #472]	; (8003404 <HAL_RCC_OscConfig+0x240>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a75      	ldr	r2, [pc, #468]	; (8003404 <HAL_RCC_OscConfig+0x240>)
 8003230:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003234:	6013      	str	r3, [r2, #0]
 8003236:	e01d      	b.n	8003274 <HAL_RCC_OscConfig+0xb0>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003240:	d10c      	bne.n	800325c <HAL_RCC_OscConfig+0x98>
 8003242:	4b70      	ldr	r3, [pc, #448]	; (8003404 <HAL_RCC_OscConfig+0x240>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a6f      	ldr	r2, [pc, #444]	; (8003404 <HAL_RCC_OscConfig+0x240>)
 8003248:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800324c:	6013      	str	r3, [r2, #0]
 800324e:	4b6d      	ldr	r3, [pc, #436]	; (8003404 <HAL_RCC_OscConfig+0x240>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a6c      	ldr	r2, [pc, #432]	; (8003404 <HAL_RCC_OscConfig+0x240>)
 8003254:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003258:	6013      	str	r3, [r2, #0]
 800325a:	e00b      	b.n	8003274 <HAL_RCC_OscConfig+0xb0>
 800325c:	4b69      	ldr	r3, [pc, #420]	; (8003404 <HAL_RCC_OscConfig+0x240>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a68      	ldr	r2, [pc, #416]	; (8003404 <HAL_RCC_OscConfig+0x240>)
 8003262:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003266:	6013      	str	r3, [r2, #0]
 8003268:	4b66      	ldr	r3, [pc, #408]	; (8003404 <HAL_RCC_OscConfig+0x240>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a65      	ldr	r2, [pc, #404]	; (8003404 <HAL_RCC_OscConfig+0x240>)
 800326e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003272:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d013      	beq.n	80032a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800327c:	f7fd fe7a 	bl	8000f74 <HAL_GetTick>
 8003280:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003282:	e008      	b.n	8003296 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003284:	f7fd fe76 	bl	8000f74 <HAL_GetTick>
 8003288:	4602      	mov	r2, r0
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	1ad3      	subs	r3, r2, r3
 800328e:	2b64      	cmp	r3, #100	; 0x64
 8003290:	d901      	bls.n	8003296 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003292:	2303      	movs	r3, #3
 8003294:	e207      	b.n	80036a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003296:	4b5b      	ldr	r3, [pc, #364]	; (8003404 <HAL_RCC_OscConfig+0x240>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d0f0      	beq.n	8003284 <HAL_RCC_OscConfig+0xc0>
 80032a2:	e014      	b.n	80032ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032a4:	f7fd fe66 	bl	8000f74 <HAL_GetTick>
 80032a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032aa:	e008      	b.n	80032be <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032ac:	f7fd fe62 	bl	8000f74 <HAL_GetTick>
 80032b0:	4602      	mov	r2, r0
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	1ad3      	subs	r3, r2, r3
 80032b6:	2b64      	cmp	r3, #100	; 0x64
 80032b8:	d901      	bls.n	80032be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80032ba:	2303      	movs	r3, #3
 80032bc:	e1f3      	b.n	80036a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032be:	4b51      	ldr	r3, [pc, #324]	; (8003404 <HAL_RCC_OscConfig+0x240>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d1f0      	bne.n	80032ac <HAL_RCC_OscConfig+0xe8>
 80032ca:	e000      	b.n	80032ce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 0302 	and.w	r3, r3, #2
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d063      	beq.n	80033a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80032da:	4b4a      	ldr	r3, [pc, #296]	; (8003404 <HAL_RCC_OscConfig+0x240>)
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	f003 030c 	and.w	r3, r3, #12
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d00b      	beq.n	80032fe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032e6:	4b47      	ldr	r3, [pc, #284]	; (8003404 <HAL_RCC_OscConfig+0x240>)
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80032ee:	2b08      	cmp	r3, #8
 80032f0:	d11c      	bne.n	800332c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032f2:	4b44      	ldr	r3, [pc, #272]	; (8003404 <HAL_RCC_OscConfig+0x240>)
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d116      	bne.n	800332c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032fe:	4b41      	ldr	r3, [pc, #260]	; (8003404 <HAL_RCC_OscConfig+0x240>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 0302 	and.w	r3, r3, #2
 8003306:	2b00      	cmp	r3, #0
 8003308:	d005      	beq.n	8003316 <HAL_RCC_OscConfig+0x152>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	68db      	ldr	r3, [r3, #12]
 800330e:	2b01      	cmp	r3, #1
 8003310:	d001      	beq.n	8003316 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	e1c7      	b.n	80036a6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003316:	4b3b      	ldr	r3, [pc, #236]	; (8003404 <HAL_RCC_OscConfig+0x240>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	691b      	ldr	r3, [r3, #16]
 8003322:	00db      	lsls	r3, r3, #3
 8003324:	4937      	ldr	r1, [pc, #220]	; (8003404 <HAL_RCC_OscConfig+0x240>)
 8003326:	4313      	orrs	r3, r2
 8003328:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800332a:	e03a      	b.n	80033a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	68db      	ldr	r3, [r3, #12]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d020      	beq.n	8003376 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003334:	4b34      	ldr	r3, [pc, #208]	; (8003408 <HAL_RCC_OscConfig+0x244>)
 8003336:	2201      	movs	r2, #1
 8003338:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800333a:	f7fd fe1b 	bl	8000f74 <HAL_GetTick>
 800333e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003340:	e008      	b.n	8003354 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003342:	f7fd fe17 	bl	8000f74 <HAL_GetTick>
 8003346:	4602      	mov	r2, r0
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	1ad3      	subs	r3, r2, r3
 800334c:	2b02      	cmp	r3, #2
 800334e:	d901      	bls.n	8003354 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003350:	2303      	movs	r3, #3
 8003352:	e1a8      	b.n	80036a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003354:	4b2b      	ldr	r3, [pc, #172]	; (8003404 <HAL_RCC_OscConfig+0x240>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 0302 	and.w	r3, r3, #2
 800335c:	2b00      	cmp	r3, #0
 800335e:	d0f0      	beq.n	8003342 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003360:	4b28      	ldr	r3, [pc, #160]	; (8003404 <HAL_RCC_OscConfig+0x240>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	691b      	ldr	r3, [r3, #16]
 800336c:	00db      	lsls	r3, r3, #3
 800336e:	4925      	ldr	r1, [pc, #148]	; (8003404 <HAL_RCC_OscConfig+0x240>)
 8003370:	4313      	orrs	r3, r2
 8003372:	600b      	str	r3, [r1, #0]
 8003374:	e015      	b.n	80033a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003376:	4b24      	ldr	r3, [pc, #144]	; (8003408 <HAL_RCC_OscConfig+0x244>)
 8003378:	2200      	movs	r2, #0
 800337a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800337c:	f7fd fdfa 	bl	8000f74 <HAL_GetTick>
 8003380:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003382:	e008      	b.n	8003396 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003384:	f7fd fdf6 	bl	8000f74 <HAL_GetTick>
 8003388:	4602      	mov	r2, r0
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	2b02      	cmp	r3, #2
 8003390:	d901      	bls.n	8003396 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003392:	2303      	movs	r3, #3
 8003394:	e187      	b.n	80036a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003396:	4b1b      	ldr	r3, [pc, #108]	; (8003404 <HAL_RCC_OscConfig+0x240>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 0302 	and.w	r3, r3, #2
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d1f0      	bne.n	8003384 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f003 0308 	and.w	r3, r3, #8
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d036      	beq.n	800341c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	695b      	ldr	r3, [r3, #20]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d016      	beq.n	80033e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033b6:	4b15      	ldr	r3, [pc, #84]	; (800340c <HAL_RCC_OscConfig+0x248>)
 80033b8:	2201      	movs	r2, #1
 80033ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033bc:	f7fd fdda 	bl	8000f74 <HAL_GetTick>
 80033c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033c2:	e008      	b.n	80033d6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033c4:	f7fd fdd6 	bl	8000f74 <HAL_GetTick>
 80033c8:	4602      	mov	r2, r0
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	1ad3      	subs	r3, r2, r3
 80033ce:	2b02      	cmp	r3, #2
 80033d0:	d901      	bls.n	80033d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80033d2:	2303      	movs	r3, #3
 80033d4:	e167      	b.n	80036a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033d6:	4b0b      	ldr	r3, [pc, #44]	; (8003404 <HAL_RCC_OscConfig+0x240>)
 80033d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033da:	f003 0302 	and.w	r3, r3, #2
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d0f0      	beq.n	80033c4 <HAL_RCC_OscConfig+0x200>
 80033e2:	e01b      	b.n	800341c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033e4:	4b09      	ldr	r3, [pc, #36]	; (800340c <HAL_RCC_OscConfig+0x248>)
 80033e6:	2200      	movs	r2, #0
 80033e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033ea:	f7fd fdc3 	bl	8000f74 <HAL_GetTick>
 80033ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033f0:	e00e      	b.n	8003410 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033f2:	f7fd fdbf 	bl	8000f74 <HAL_GetTick>
 80033f6:	4602      	mov	r2, r0
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	1ad3      	subs	r3, r2, r3
 80033fc:	2b02      	cmp	r3, #2
 80033fe:	d907      	bls.n	8003410 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003400:	2303      	movs	r3, #3
 8003402:	e150      	b.n	80036a6 <HAL_RCC_OscConfig+0x4e2>
 8003404:	40023800 	.word	0x40023800
 8003408:	42470000 	.word	0x42470000
 800340c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003410:	4b88      	ldr	r3, [pc, #544]	; (8003634 <HAL_RCC_OscConfig+0x470>)
 8003412:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003414:	f003 0302 	and.w	r3, r3, #2
 8003418:	2b00      	cmp	r3, #0
 800341a:	d1ea      	bne.n	80033f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 0304 	and.w	r3, r3, #4
 8003424:	2b00      	cmp	r3, #0
 8003426:	f000 8097 	beq.w	8003558 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800342a:	2300      	movs	r3, #0
 800342c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800342e:	4b81      	ldr	r3, [pc, #516]	; (8003634 <HAL_RCC_OscConfig+0x470>)
 8003430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003432:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003436:	2b00      	cmp	r3, #0
 8003438:	d10f      	bne.n	800345a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800343a:	2300      	movs	r3, #0
 800343c:	60bb      	str	r3, [r7, #8]
 800343e:	4b7d      	ldr	r3, [pc, #500]	; (8003634 <HAL_RCC_OscConfig+0x470>)
 8003440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003442:	4a7c      	ldr	r2, [pc, #496]	; (8003634 <HAL_RCC_OscConfig+0x470>)
 8003444:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003448:	6413      	str	r3, [r2, #64]	; 0x40
 800344a:	4b7a      	ldr	r3, [pc, #488]	; (8003634 <HAL_RCC_OscConfig+0x470>)
 800344c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003452:	60bb      	str	r3, [r7, #8]
 8003454:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003456:	2301      	movs	r3, #1
 8003458:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800345a:	4b77      	ldr	r3, [pc, #476]	; (8003638 <HAL_RCC_OscConfig+0x474>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003462:	2b00      	cmp	r3, #0
 8003464:	d118      	bne.n	8003498 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003466:	4b74      	ldr	r3, [pc, #464]	; (8003638 <HAL_RCC_OscConfig+0x474>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a73      	ldr	r2, [pc, #460]	; (8003638 <HAL_RCC_OscConfig+0x474>)
 800346c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003470:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003472:	f7fd fd7f 	bl	8000f74 <HAL_GetTick>
 8003476:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003478:	e008      	b.n	800348c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800347a:	f7fd fd7b 	bl	8000f74 <HAL_GetTick>
 800347e:	4602      	mov	r2, r0
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	1ad3      	subs	r3, r2, r3
 8003484:	2b02      	cmp	r3, #2
 8003486:	d901      	bls.n	800348c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003488:	2303      	movs	r3, #3
 800348a:	e10c      	b.n	80036a6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800348c:	4b6a      	ldr	r3, [pc, #424]	; (8003638 <HAL_RCC_OscConfig+0x474>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003494:	2b00      	cmp	r3, #0
 8003496:	d0f0      	beq.n	800347a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	2b01      	cmp	r3, #1
 800349e:	d106      	bne.n	80034ae <HAL_RCC_OscConfig+0x2ea>
 80034a0:	4b64      	ldr	r3, [pc, #400]	; (8003634 <HAL_RCC_OscConfig+0x470>)
 80034a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034a4:	4a63      	ldr	r2, [pc, #396]	; (8003634 <HAL_RCC_OscConfig+0x470>)
 80034a6:	f043 0301 	orr.w	r3, r3, #1
 80034aa:	6713      	str	r3, [r2, #112]	; 0x70
 80034ac:	e01c      	b.n	80034e8 <HAL_RCC_OscConfig+0x324>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	2b05      	cmp	r3, #5
 80034b4:	d10c      	bne.n	80034d0 <HAL_RCC_OscConfig+0x30c>
 80034b6:	4b5f      	ldr	r3, [pc, #380]	; (8003634 <HAL_RCC_OscConfig+0x470>)
 80034b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034ba:	4a5e      	ldr	r2, [pc, #376]	; (8003634 <HAL_RCC_OscConfig+0x470>)
 80034bc:	f043 0304 	orr.w	r3, r3, #4
 80034c0:	6713      	str	r3, [r2, #112]	; 0x70
 80034c2:	4b5c      	ldr	r3, [pc, #368]	; (8003634 <HAL_RCC_OscConfig+0x470>)
 80034c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034c6:	4a5b      	ldr	r2, [pc, #364]	; (8003634 <HAL_RCC_OscConfig+0x470>)
 80034c8:	f043 0301 	orr.w	r3, r3, #1
 80034cc:	6713      	str	r3, [r2, #112]	; 0x70
 80034ce:	e00b      	b.n	80034e8 <HAL_RCC_OscConfig+0x324>
 80034d0:	4b58      	ldr	r3, [pc, #352]	; (8003634 <HAL_RCC_OscConfig+0x470>)
 80034d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034d4:	4a57      	ldr	r2, [pc, #348]	; (8003634 <HAL_RCC_OscConfig+0x470>)
 80034d6:	f023 0301 	bic.w	r3, r3, #1
 80034da:	6713      	str	r3, [r2, #112]	; 0x70
 80034dc:	4b55      	ldr	r3, [pc, #340]	; (8003634 <HAL_RCC_OscConfig+0x470>)
 80034de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034e0:	4a54      	ldr	r2, [pc, #336]	; (8003634 <HAL_RCC_OscConfig+0x470>)
 80034e2:	f023 0304 	bic.w	r3, r3, #4
 80034e6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d015      	beq.n	800351c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034f0:	f7fd fd40 	bl	8000f74 <HAL_GetTick>
 80034f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034f6:	e00a      	b.n	800350e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034f8:	f7fd fd3c 	bl	8000f74 <HAL_GetTick>
 80034fc:	4602      	mov	r2, r0
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	1ad3      	subs	r3, r2, r3
 8003502:	f241 3288 	movw	r2, #5000	; 0x1388
 8003506:	4293      	cmp	r3, r2
 8003508:	d901      	bls.n	800350e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800350a:	2303      	movs	r3, #3
 800350c:	e0cb      	b.n	80036a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800350e:	4b49      	ldr	r3, [pc, #292]	; (8003634 <HAL_RCC_OscConfig+0x470>)
 8003510:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003512:	f003 0302 	and.w	r3, r3, #2
 8003516:	2b00      	cmp	r3, #0
 8003518:	d0ee      	beq.n	80034f8 <HAL_RCC_OscConfig+0x334>
 800351a:	e014      	b.n	8003546 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800351c:	f7fd fd2a 	bl	8000f74 <HAL_GetTick>
 8003520:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003522:	e00a      	b.n	800353a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003524:	f7fd fd26 	bl	8000f74 <HAL_GetTick>
 8003528:	4602      	mov	r2, r0
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	1ad3      	subs	r3, r2, r3
 800352e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003532:	4293      	cmp	r3, r2
 8003534:	d901      	bls.n	800353a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003536:	2303      	movs	r3, #3
 8003538:	e0b5      	b.n	80036a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800353a:	4b3e      	ldr	r3, [pc, #248]	; (8003634 <HAL_RCC_OscConfig+0x470>)
 800353c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800353e:	f003 0302 	and.w	r3, r3, #2
 8003542:	2b00      	cmp	r3, #0
 8003544:	d1ee      	bne.n	8003524 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003546:	7dfb      	ldrb	r3, [r7, #23]
 8003548:	2b01      	cmp	r3, #1
 800354a:	d105      	bne.n	8003558 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800354c:	4b39      	ldr	r3, [pc, #228]	; (8003634 <HAL_RCC_OscConfig+0x470>)
 800354e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003550:	4a38      	ldr	r2, [pc, #224]	; (8003634 <HAL_RCC_OscConfig+0x470>)
 8003552:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003556:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	699b      	ldr	r3, [r3, #24]
 800355c:	2b00      	cmp	r3, #0
 800355e:	f000 80a1 	beq.w	80036a4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003562:	4b34      	ldr	r3, [pc, #208]	; (8003634 <HAL_RCC_OscConfig+0x470>)
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	f003 030c 	and.w	r3, r3, #12
 800356a:	2b08      	cmp	r3, #8
 800356c:	d05c      	beq.n	8003628 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	699b      	ldr	r3, [r3, #24]
 8003572:	2b02      	cmp	r3, #2
 8003574:	d141      	bne.n	80035fa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003576:	4b31      	ldr	r3, [pc, #196]	; (800363c <HAL_RCC_OscConfig+0x478>)
 8003578:	2200      	movs	r2, #0
 800357a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800357c:	f7fd fcfa 	bl	8000f74 <HAL_GetTick>
 8003580:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003582:	e008      	b.n	8003596 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003584:	f7fd fcf6 	bl	8000f74 <HAL_GetTick>
 8003588:	4602      	mov	r2, r0
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	2b02      	cmp	r3, #2
 8003590:	d901      	bls.n	8003596 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003592:	2303      	movs	r3, #3
 8003594:	e087      	b.n	80036a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003596:	4b27      	ldr	r3, [pc, #156]	; (8003634 <HAL_RCC_OscConfig+0x470>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d1f0      	bne.n	8003584 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	69da      	ldr	r2, [r3, #28]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6a1b      	ldr	r3, [r3, #32]
 80035aa:	431a      	orrs	r2, r3
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b0:	019b      	lsls	r3, r3, #6
 80035b2:	431a      	orrs	r2, r3
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035b8:	085b      	lsrs	r3, r3, #1
 80035ba:	3b01      	subs	r3, #1
 80035bc:	041b      	lsls	r3, r3, #16
 80035be:	431a      	orrs	r2, r3
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c4:	061b      	lsls	r3, r3, #24
 80035c6:	491b      	ldr	r1, [pc, #108]	; (8003634 <HAL_RCC_OscConfig+0x470>)
 80035c8:	4313      	orrs	r3, r2
 80035ca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035cc:	4b1b      	ldr	r3, [pc, #108]	; (800363c <HAL_RCC_OscConfig+0x478>)
 80035ce:	2201      	movs	r2, #1
 80035d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035d2:	f7fd fccf 	bl	8000f74 <HAL_GetTick>
 80035d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035d8:	e008      	b.n	80035ec <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035da:	f7fd fccb 	bl	8000f74 <HAL_GetTick>
 80035de:	4602      	mov	r2, r0
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	1ad3      	subs	r3, r2, r3
 80035e4:	2b02      	cmp	r3, #2
 80035e6:	d901      	bls.n	80035ec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80035e8:	2303      	movs	r3, #3
 80035ea:	e05c      	b.n	80036a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035ec:	4b11      	ldr	r3, [pc, #68]	; (8003634 <HAL_RCC_OscConfig+0x470>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d0f0      	beq.n	80035da <HAL_RCC_OscConfig+0x416>
 80035f8:	e054      	b.n	80036a4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035fa:	4b10      	ldr	r3, [pc, #64]	; (800363c <HAL_RCC_OscConfig+0x478>)
 80035fc:	2200      	movs	r2, #0
 80035fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003600:	f7fd fcb8 	bl	8000f74 <HAL_GetTick>
 8003604:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003606:	e008      	b.n	800361a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003608:	f7fd fcb4 	bl	8000f74 <HAL_GetTick>
 800360c:	4602      	mov	r2, r0
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	1ad3      	subs	r3, r2, r3
 8003612:	2b02      	cmp	r3, #2
 8003614:	d901      	bls.n	800361a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003616:	2303      	movs	r3, #3
 8003618:	e045      	b.n	80036a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800361a:	4b06      	ldr	r3, [pc, #24]	; (8003634 <HAL_RCC_OscConfig+0x470>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003622:	2b00      	cmp	r3, #0
 8003624:	d1f0      	bne.n	8003608 <HAL_RCC_OscConfig+0x444>
 8003626:	e03d      	b.n	80036a4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	699b      	ldr	r3, [r3, #24]
 800362c:	2b01      	cmp	r3, #1
 800362e:	d107      	bne.n	8003640 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	e038      	b.n	80036a6 <HAL_RCC_OscConfig+0x4e2>
 8003634:	40023800 	.word	0x40023800
 8003638:	40007000 	.word	0x40007000
 800363c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003640:	4b1b      	ldr	r3, [pc, #108]	; (80036b0 <HAL_RCC_OscConfig+0x4ec>)
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	699b      	ldr	r3, [r3, #24]
 800364a:	2b01      	cmp	r3, #1
 800364c:	d028      	beq.n	80036a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003658:	429a      	cmp	r2, r3
 800365a:	d121      	bne.n	80036a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003666:	429a      	cmp	r2, r3
 8003668:	d11a      	bne.n	80036a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800366a:	68fa      	ldr	r2, [r7, #12]
 800366c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003670:	4013      	ands	r3, r2
 8003672:	687a      	ldr	r2, [r7, #4]
 8003674:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003676:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003678:	4293      	cmp	r3, r2
 800367a:	d111      	bne.n	80036a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003686:	085b      	lsrs	r3, r3, #1
 8003688:	3b01      	subs	r3, #1
 800368a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800368c:	429a      	cmp	r2, r3
 800368e:	d107      	bne.n	80036a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800369a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800369c:	429a      	cmp	r2, r3
 800369e:	d001      	beq.n	80036a4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	e000      	b.n	80036a6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80036a4:	2300      	movs	r3, #0
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	3718      	adds	r7, #24
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}
 80036ae:	bf00      	nop
 80036b0:	40023800 	.word	0x40023800

080036b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b084      	sub	sp, #16
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
 80036bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d101      	bne.n	80036c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	e0cc      	b.n	8003862 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80036c8:	4b68      	ldr	r3, [pc, #416]	; (800386c <HAL_RCC_ClockConfig+0x1b8>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 030f 	and.w	r3, r3, #15
 80036d0:	683a      	ldr	r2, [r7, #0]
 80036d2:	429a      	cmp	r2, r3
 80036d4:	d90c      	bls.n	80036f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036d6:	4b65      	ldr	r3, [pc, #404]	; (800386c <HAL_RCC_ClockConfig+0x1b8>)
 80036d8:	683a      	ldr	r2, [r7, #0]
 80036da:	b2d2      	uxtb	r2, r2
 80036dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036de:	4b63      	ldr	r3, [pc, #396]	; (800386c <HAL_RCC_ClockConfig+0x1b8>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 030f 	and.w	r3, r3, #15
 80036e6:	683a      	ldr	r2, [r7, #0]
 80036e8:	429a      	cmp	r2, r3
 80036ea:	d001      	beq.n	80036f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	e0b8      	b.n	8003862 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 0302 	and.w	r3, r3, #2
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d020      	beq.n	800373e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f003 0304 	and.w	r3, r3, #4
 8003704:	2b00      	cmp	r3, #0
 8003706:	d005      	beq.n	8003714 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003708:	4b59      	ldr	r3, [pc, #356]	; (8003870 <HAL_RCC_ClockConfig+0x1bc>)
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	4a58      	ldr	r2, [pc, #352]	; (8003870 <HAL_RCC_ClockConfig+0x1bc>)
 800370e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003712:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f003 0308 	and.w	r3, r3, #8
 800371c:	2b00      	cmp	r3, #0
 800371e:	d005      	beq.n	800372c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003720:	4b53      	ldr	r3, [pc, #332]	; (8003870 <HAL_RCC_ClockConfig+0x1bc>)
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	4a52      	ldr	r2, [pc, #328]	; (8003870 <HAL_RCC_ClockConfig+0x1bc>)
 8003726:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800372a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800372c:	4b50      	ldr	r3, [pc, #320]	; (8003870 <HAL_RCC_ClockConfig+0x1bc>)
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	494d      	ldr	r1, [pc, #308]	; (8003870 <HAL_RCC_ClockConfig+0x1bc>)
 800373a:	4313      	orrs	r3, r2
 800373c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 0301 	and.w	r3, r3, #1
 8003746:	2b00      	cmp	r3, #0
 8003748:	d044      	beq.n	80037d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	2b01      	cmp	r3, #1
 8003750:	d107      	bne.n	8003762 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003752:	4b47      	ldr	r3, [pc, #284]	; (8003870 <HAL_RCC_ClockConfig+0x1bc>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800375a:	2b00      	cmp	r3, #0
 800375c:	d119      	bne.n	8003792 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e07f      	b.n	8003862 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	2b02      	cmp	r3, #2
 8003768:	d003      	beq.n	8003772 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800376e:	2b03      	cmp	r3, #3
 8003770:	d107      	bne.n	8003782 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003772:	4b3f      	ldr	r3, [pc, #252]	; (8003870 <HAL_RCC_ClockConfig+0x1bc>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800377a:	2b00      	cmp	r3, #0
 800377c:	d109      	bne.n	8003792 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e06f      	b.n	8003862 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003782:	4b3b      	ldr	r3, [pc, #236]	; (8003870 <HAL_RCC_ClockConfig+0x1bc>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f003 0302 	and.w	r3, r3, #2
 800378a:	2b00      	cmp	r3, #0
 800378c:	d101      	bne.n	8003792 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	e067      	b.n	8003862 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003792:	4b37      	ldr	r3, [pc, #220]	; (8003870 <HAL_RCC_ClockConfig+0x1bc>)
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	f023 0203 	bic.w	r2, r3, #3
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	4934      	ldr	r1, [pc, #208]	; (8003870 <HAL_RCC_ClockConfig+0x1bc>)
 80037a0:	4313      	orrs	r3, r2
 80037a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80037a4:	f7fd fbe6 	bl	8000f74 <HAL_GetTick>
 80037a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037aa:	e00a      	b.n	80037c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037ac:	f7fd fbe2 	bl	8000f74 <HAL_GetTick>
 80037b0:	4602      	mov	r2, r0
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	1ad3      	subs	r3, r2, r3
 80037b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d901      	bls.n	80037c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80037be:	2303      	movs	r3, #3
 80037c0:	e04f      	b.n	8003862 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037c2:	4b2b      	ldr	r3, [pc, #172]	; (8003870 <HAL_RCC_ClockConfig+0x1bc>)
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	f003 020c 	and.w	r2, r3, #12
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d1eb      	bne.n	80037ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80037d4:	4b25      	ldr	r3, [pc, #148]	; (800386c <HAL_RCC_ClockConfig+0x1b8>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f003 030f 	and.w	r3, r3, #15
 80037dc:	683a      	ldr	r2, [r7, #0]
 80037de:	429a      	cmp	r2, r3
 80037e0:	d20c      	bcs.n	80037fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037e2:	4b22      	ldr	r3, [pc, #136]	; (800386c <HAL_RCC_ClockConfig+0x1b8>)
 80037e4:	683a      	ldr	r2, [r7, #0]
 80037e6:	b2d2      	uxtb	r2, r2
 80037e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037ea:	4b20      	ldr	r3, [pc, #128]	; (800386c <HAL_RCC_ClockConfig+0x1b8>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 030f 	and.w	r3, r3, #15
 80037f2:	683a      	ldr	r2, [r7, #0]
 80037f4:	429a      	cmp	r2, r3
 80037f6:	d001      	beq.n	80037fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	e032      	b.n	8003862 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 0304 	and.w	r3, r3, #4
 8003804:	2b00      	cmp	r3, #0
 8003806:	d008      	beq.n	800381a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003808:	4b19      	ldr	r3, [pc, #100]	; (8003870 <HAL_RCC_ClockConfig+0x1bc>)
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	68db      	ldr	r3, [r3, #12]
 8003814:	4916      	ldr	r1, [pc, #88]	; (8003870 <HAL_RCC_ClockConfig+0x1bc>)
 8003816:	4313      	orrs	r3, r2
 8003818:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 0308 	and.w	r3, r3, #8
 8003822:	2b00      	cmp	r3, #0
 8003824:	d009      	beq.n	800383a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003826:	4b12      	ldr	r3, [pc, #72]	; (8003870 <HAL_RCC_ClockConfig+0x1bc>)
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	691b      	ldr	r3, [r3, #16]
 8003832:	00db      	lsls	r3, r3, #3
 8003834:	490e      	ldr	r1, [pc, #56]	; (8003870 <HAL_RCC_ClockConfig+0x1bc>)
 8003836:	4313      	orrs	r3, r2
 8003838:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800383a:	f000 f821 	bl	8003880 <HAL_RCC_GetSysClockFreq>
 800383e:	4602      	mov	r2, r0
 8003840:	4b0b      	ldr	r3, [pc, #44]	; (8003870 <HAL_RCC_ClockConfig+0x1bc>)
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	091b      	lsrs	r3, r3, #4
 8003846:	f003 030f 	and.w	r3, r3, #15
 800384a:	490a      	ldr	r1, [pc, #40]	; (8003874 <HAL_RCC_ClockConfig+0x1c0>)
 800384c:	5ccb      	ldrb	r3, [r1, r3]
 800384e:	fa22 f303 	lsr.w	r3, r2, r3
 8003852:	4a09      	ldr	r2, [pc, #36]	; (8003878 <HAL_RCC_ClockConfig+0x1c4>)
 8003854:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003856:	4b09      	ldr	r3, [pc, #36]	; (800387c <HAL_RCC_ClockConfig+0x1c8>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4618      	mov	r0, r3
 800385c:	f7fd f986 	bl	8000b6c <HAL_InitTick>

  return HAL_OK;
 8003860:	2300      	movs	r3, #0
}
 8003862:	4618      	mov	r0, r3
 8003864:	3710      	adds	r7, #16
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}
 800386a:	bf00      	nop
 800386c:	40023c00 	.word	0x40023c00
 8003870:	40023800 	.word	0x40023800
 8003874:	08009d94 	.word	0x08009d94
 8003878:	20000000 	.word	0x20000000
 800387c:	20000004 	.word	0x20000004

08003880 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003880:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003884:	b090      	sub	sp, #64	; 0x40
 8003886:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003888:	2300      	movs	r3, #0
 800388a:	637b      	str	r3, [r7, #52]	; 0x34
 800388c:	2300      	movs	r3, #0
 800388e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003890:	2300      	movs	r3, #0
 8003892:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003894:	2300      	movs	r3, #0
 8003896:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003898:	4b59      	ldr	r3, [pc, #356]	; (8003a00 <HAL_RCC_GetSysClockFreq+0x180>)
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	f003 030c 	and.w	r3, r3, #12
 80038a0:	2b08      	cmp	r3, #8
 80038a2:	d00d      	beq.n	80038c0 <HAL_RCC_GetSysClockFreq+0x40>
 80038a4:	2b08      	cmp	r3, #8
 80038a6:	f200 80a1 	bhi.w	80039ec <HAL_RCC_GetSysClockFreq+0x16c>
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d002      	beq.n	80038b4 <HAL_RCC_GetSysClockFreq+0x34>
 80038ae:	2b04      	cmp	r3, #4
 80038b0:	d003      	beq.n	80038ba <HAL_RCC_GetSysClockFreq+0x3a>
 80038b2:	e09b      	b.n	80039ec <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80038b4:	4b53      	ldr	r3, [pc, #332]	; (8003a04 <HAL_RCC_GetSysClockFreq+0x184>)
 80038b6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80038b8:	e09b      	b.n	80039f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80038ba:	4b53      	ldr	r3, [pc, #332]	; (8003a08 <HAL_RCC_GetSysClockFreq+0x188>)
 80038bc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80038be:	e098      	b.n	80039f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80038c0:	4b4f      	ldr	r3, [pc, #316]	; (8003a00 <HAL_RCC_GetSysClockFreq+0x180>)
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80038c8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80038ca:	4b4d      	ldr	r3, [pc, #308]	; (8003a00 <HAL_RCC_GetSysClockFreq+0x180>)
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d028      	beq.n	8003928 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038d6:	4b4a      	ldr	r3, [pc, #296]	; (8003a00 <HAL_RCC_GetSysClockFreq+0x180>)
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	099b      	lsrs	r3, r3, #6
 80038dc:	2200      	movs	r2, #0
 80038de:	623b      	str	r3, [r7, #32]
 80038e0:	627a      	str	r2, [r7, #36]	; 0x24
 80038e2:	6a3b      	ldr	r3, [r7, #32]
 80038e4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80038e8:	2100      	movs	r1, #0
 80038ea:	4b47      	ldr	r3, [pc, #284]	; (8003a08 <HAL_RCC_GetSysClockFreq+0x188>)
 80038ec:	fb03 f201 	mul.w	r2, r3, r1
 80038f0:	2300      	movs	r3, #0
 80038f2:	fb00 f303 	mul.w	r3, r0, r3
 80038f6:	4413      	add	r3, r2
 80038f8:	4a43      	ldr	r2, [pc, #268]	; (8003a08 <HAL_RCC_GetSysClockFreq+0x188>)
 80038fa:	fba0 1202 	umull	r1, r2, r0, r2
 80038fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003900:	460a      	mov	r2, r1
 8003902:	62ba      	str	r2, [r7, #40]	; 0x28
 8003904:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003906:	4413      	add	r3, r2
 8003908:	62fb      	str	r3, [r7, #44]	; 0x2c
 800390a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800390c:	2200      	movs	r2, #0
 800390e:	61bb      	str	r3, [r7, #24]
 8003910:	61fa      	str	r2, [r7, #28]
 8003912:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003916:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800391a:	f7fc fc69 	bl	80001f0 <__aeabi_uldivmod>
 800391e:	4602      	mov	r2, r0
 8003920:	460b      	mov	r3, r1
 8003922:	4613      	mov	r3, r2
 8003924:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003926:	e053      	b.n	80039d0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003928:	4b35      	ldr	r3, [pc, #212]	; (8003a00 <HAL_RCC_GetSysClockFreq+0x180>)
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	099b      	lsrs	r3, r3, #6
 800392e:	2200      	movs	r2, #0
 8003930:	613b      	str	r3, [r7, #16]
 8003932:	617a      	str	r2, [r7, #20]
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800393a:	f04f 0b00 	mov.w	fp, #0
 800393e:	4652      	mov	r2, sl
 8003940:	465b      	mov	r3, fp
 8003942:	f04f 0000 	mov.w	r0, #0
 8003946:	f04f 0100 	mov.w	r1, #0
 800394a:	0159      	lsls	r1, r3, #5
 800394c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003950:	0150      	lsls	r0, r2, #5
 8003952:	4602      	mov	r2, r0
 8003954:	460b      	mov	r3, r1
 8003956:	ebb2 080a 	subs.w	r8, r2, sl
 800395a:	eb63 090b 	sbc.w	r9, r3, fp
 800395e:	f04f 0200 	mov.w	r2, #0
 8003962:	f04f 0300 	mov.w	r3, #0
 8003966:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800396a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800396e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003972:	ebb2 0408 	subs.w	r4, r2, r8
 8003976:	eb63 0509 	sbc.w	r5, r3, r9
 800397a:	f04f 0200 	mov.w	r2, #0
 800397e:	f04f 0300 	mov.w	r3, #0
 8003982:	00eb      	lsls	r3, r5, #3
 8003984:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003988:	00e2      	lsls	r2, r4, #3
 800398a:	4614      	mov	r4, r2
 800398c:	461d      	mov	r5, r3
 800398e:	eb14 030a 	adds.w	r3, r4, sl
 8003992:	603b      	str	r3, [r7, #0]
 8003994:	eb45 030b 	adc.w	r3, r5, fp
 8003998:	607b      	str	r3, [r7, #4]
 800399a:	f04f 0200 	mov.w	r2, #0
 800399e:	f04f 0300 	mov.w	r3, #0
 80039a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80039a6:	4629      	mov	r1, r5
 80039a8:	028b      	lsls	r3, r1, #10
 80039aa:	4621      	mov	r1, r4
 80039ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80039b0:	4621      	mov	r1, r4
 80039b2:	028a      	lsls	r2, r1, #10
 80039b4:	4610      	mov	r0, r2
 80039b6:	4619      	mov	r1, r3
 80039b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039ba:	2200      	movs	r2, #0
 80039bc:	60bb      	str	r3, [r7, #8]
 80039be:	60fa      	str	r2, [r7, #12]
 80039c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80039c4:	f7fc fc14 	bl	80001f0 <__aeabi_uldivmod>
 80039c8:	4602      	mov	r2, r0
 80039ca:	460b      	mov	r3, r1
 80039cc:	4613      	mov	r3, r2
 80039ce:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80039d0:	4b0b      	ldr	r3, [pc, #44]	; (8003a00 <HAL_RCC_GetSysClockFreq+0x180>)
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	0c1b      	lsrs	r3, r3, #16
 80039d6:	f003 0303 	and.w	r3, r3, #3
 80039da:	3301      	adds	r3, #1
 80039dc:	005b      	lsls	r3, r3, #1
 80039de:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80039e0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80039e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80039e8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80039ea:	e002      	b.n	80039f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80039ec:	4b05      	ldr	r3, [pc, #20]	; (8003a04 <HAL_RCC_GetSysClockFreq+0x184>)
 80039ee:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80039f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	3740      	adds	r7, #64	; 0x40
 80039f8:	46bd      	mov	sp, r7
 80039fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039fe:	bf00      	nop
 8003a00:	40023800 	.word	0x40023800
 8003a04:	00f42400 	.word	0x00f42400
 8003a08:	00b71b00 	.word	0x00b71b00

08003a0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a10:	4b03      	ldr	r3, [pc, #12]	; (8003a20 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a12:	681b      	ldr	r3, [r3, #0]
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	46bd      	mov	sp, r7
 8003a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1c:	4770      	bx	lr
 8003a1e:	bf00      	nop
 8003a20:	20000000 	.word	0x20000000

08003a24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003a28:	f7ff fff0 	bl	8003a0c <HAL_RCC_GetHCLKFreq>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	4b05      	ldr	r3, [pc, #20]	; (8003a44 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	0a9b      	lsrs	r3, r3, #10
 8003a34:	f003 0307 	and.w	r3, r3, #7
 8003a38:	4903      	ldr	r1, [pc, #12]	; (8003a48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a3a:	5ccb      	ldrb	r3, [r1, r3]
 8003a3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	bd80      	pop	{r7, pc}
 8003a44:	40023800 	.word	0x40023800
 8003a48:	08009da4 	.word	0x08009da4

08003a4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003a50:	f7ff ffdc 	bl	8003a0c <HAL_RCC_GetHCLKFreq>
 8003a54:	4602      	mov	r2, r0
 8003a56:	4b05      	ldr	r3, [pc, #20]	; (8003a6c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	0b5b      	lsrs	r3, r3, #13
 8003a5c:	f003 0307 	and.w	r3, r3, #7
 8003a60:	4903      	ldr	r1, [pc, #12]	; (8003a70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a62:	5ccb      	ldrb	r3, [r1, r3]
 8003a64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	bd80      	pop	{r7, pc}
 8003a6c:	40023800 	.word	0x40023800
 8003a70:	08009da4 	.word	0x08009da4

08003a74 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b083      	sub	sp, #12
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
 8003a7c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	220f      	movs	r2, #15
 8003a82:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003a84:	4b12      	ldr	r3, [pc, #72]	; (8003ad0 <HAL_RCC_GetClockConfig+0x5c>)
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	f003 0203 	and.w	r2, r3, #3
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003a90:	4b0f      	ldr	r3, [pc, #60]	; (8003ad0 <HAL_RCC_GetClockConfig+0x5c>)
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003a9c:	4b0c      	ldr	r3, [pc, #48]	; (8003ad0 <HAL_RCC_GetClockConfig+0x5c>)
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003aa8:	4b09      	ldr	r3, [pc, #36]	; (8003ad0 <HAL_RCC_GetClockConfig+0x5c>)
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	08db      	lsrs	r3, r3, #3
 8003aae:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003ab6:	4b07      	ldr	r3, [pc, #28]	; (8003ad4 <HAL_RCC_GetClockConfig+0x60>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f003 020f 	and.w	r2, r3, #15
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	601a      	str	r2, [r3, #0]
}
 8003ac2:	bf00      	nop
 8003ac4:	370c      	adds	r7, #12
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr
 8003ace:	bf00      	nop
 8003ad0:	40023800 	.word	0x40023800
 8003ad4:	40023c00 	.word	0x40023c00

08003ad8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b082      	sub	sp, #8
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d101      	bne.n	8003aea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e07b      	b.n	8003be2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d108      	bne.n	8003b04 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003afa:	d009      	beq.n	8003b10 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2200      	movs	r2, #0
 8003b00:	61da      	str	r2, [r3, #28]
 8003b02:	e005      	b.n	8003b10 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2200      	movs	r2, #0
 8003b08:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2200      	movs	r2, #0
 8003b14:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d106      	bne.n	8003b30 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2200      	movs	r2, #0
 8003b26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f7fc ffaa 	bl	8000a84 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2202      	movs	r2, #2
 8003b34:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	681a      	ldr	r2, [r3, #0]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b46:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003b58:	431a      	orrs	r2, r3
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	68db      	ldr	r3, [r3, #12]
 8003b5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b62:	431a      	orrs	r2, r3
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	691b      	ldr	r3, [r3, #16]
 8003b68:	f003 0302 	and.w	r3, r3, #2
 8003b6c:	431a      	orrs	r2, r3
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	695b      	ldr	r3, [r3, #20]
 8003b72:	f003 0301 	and.w	r3, r3, #1
 8003b76:	431a      	orrs	r2, r3
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	699b      	ldr	r3, [r3, #24]
 8003b7c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b80:	431a      	orrs	r2, r3
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	69db      	ldr	r3, [r3, #28]
 8003b86:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003b8a:	431a      	orrs	r2, r3
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6a1b      	ldr	r3, [r3, #32]
 8003b90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b94:	ea42 0103 	orr.w	r1, r2, r3
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b9c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	430a      	orrs	r2, r1
 8003ba6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	699b      	ldr	r3, [r3, #24]
 8003bac:	0c1b      	lsrs	r3, r3, #16
 8003bae:	f003 0104 	and.w	r1, r3, #4
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb6:	f003 0210 	and.w	r2, r3, #16
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	430a      	orrs	r2, r1
 8003bc0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	69da      	ldr	r2, [r3, #28]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003bd0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2201      	movs	r2, #1
 8003bdc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003be0:	2300      	movs	r3, #0
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3708      	adds	r7, #8
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}

08003bea <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003bea:	b580      	push	{r7, lr}
 8003bec:	b082      	sub	sp, #8
 8003bee:	af00      	add	r7, sp, #0
 8003bf0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d101      	bne.n	8003bfc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	e041      	b.n	8003c80 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c02:	b2db      	uxtb	r3, r3
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d106      	bne.n	8003c16 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c10:	6878      	ldr	r0, [r7, #4]
 8003c12:	f000 f839 	bl	8003c88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2202      	movs	r2, #2
 8003c1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	3304      	adds	r3, #4
 8003c26:	4619      	mov	r1, r3
 8003c28:	4610      	mov	r0, r2
 8003c2a:	f000 f9bf 	bl	8003fac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2201      	movs	r2, #1
 8003c32:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2201      	movs	r2, #1
 8003c3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2201      	movs	r2, #1
 8003c42:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2201      	movs	r2, #1
 8003c4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2201      	movs	r2, #1
 8003c52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2201      	movs	r2, #1
 8003c5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2201      	movs	r2, #1
 8003c62:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2201      	movs	r2, #1
 8003c6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2201      	movs	r2, #1
 8003c72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2201      	movs	r2, #1
 8003c7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c7e:	2300      	movs	r3, #0
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	3708      	adds	r7, #8
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}

08003c88 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b083      	sub	sp, #12
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003c90:	bf00      	nop
 8003c92:	370c      	adds	r7, #12
 8003c94:	46bd      	mov	sp, r7
 8003c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9a:	4770      	bx	lr

08003c9c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b085      	sub	sp, #20
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003caa:	b2db      	uxtb	r3, r3
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	d001      	beq.n	8003cb4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	e04e      	b.n	8003d52 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2202      	movs	r2, #2
 8003cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	68da      	ldr	r2, [r3, #12]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f042 0201 	orr.w	r2, r2, #1
 8003cca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a23      	ldr	r2, [pc, #140]	; (8003d60 <HAL_TIM_Base_Start_IT+0xc4>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d022      	beq.n	8003d1c <HAL_TIM_Base_Start_IT+0x80>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cde:	d01d      	beq.n	8003d1c <HAL_TIM_Base_Start_IT+0x80>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a1f      	ldr	r2, [pc, #124]	; (8003d64 <HAL_TIM_Base_Start_IT+0xc8>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d018      	beq.n	8003d1c <HAL_TIM_Base_Start_IT+0x80>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a1e      	ldr	r2, [pc, #120]	; (8003d68 <HAL_TIM_Base_Start_IT+0xcc>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d013      	beq.n	8003d1c <HAL_TIM_Base_Start_IT+0x80>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a1c      	ldr	r2, [pc, #112]	; (8003d6c <HAL_TIM_Base_Start_IT+0xd0>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d00e      	beq.n	8003d1c <HAL_TIM_Base_Start_IT+0x80>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a1b      	ldr	r2, [pc, #108]	; (8003d70 <HAL_TIM_Base_Start_IT+0xd4>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d009      	beq.n	8003d1c <HAL_TIM_Base_Start_IT+0x80>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a19      	ldr	r2, [pc, #100]	; (8003d74 <HAL_TIM_Base_Start_IT+0xd8>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d004      	beq.n	8003d1c <HAL_TIM_Base_Start_IT+0x80>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a18      	ldr	r2, [pc, #96]	; (8003d78 <HAL_TIM_Base_Start_IT+0xdc>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d111      	bne.n	8003d40 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	f003 0307 	and.w	r3, r3, #7
 8003d26:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	2b06      	cmp	r3, #6
 8003d2c:	d010      	beq.n	8003d50 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f042 0201 	orr.w	r2, r2, #1
 8003d3c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d3e:	e007      	b.n	8003d50 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f042 0201 	orr.w	r2, r2, #1
 8003d4e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d50:	2300      	movs	r3, #0
}
 8003d52:	4618      	mov	r0, r3
 8003d54:	3714      	adds	r7, #20
 8003d56:	46bd      	mov	sp, r7
 8003d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5c:	4770      	bx	lr
 8003d5e:	bf00      	nop
 8003d60:	40010000 	.word	0x40010000
 8003d64:	40000400 	.word	0x40000400
 8003d68:	40000800 	.word	0x40000800
 8003d6c:	40000c00 	.word	0x40000c00
 8003d70:	40010400 	.word	0x40010400
 8003d74:	40014000 	.word	0x40014000
 8003d78:	40001800 	.word	0x40001800

08003d7c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b084      	sub	sp, #16
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	68db      	ldr	r3, [r3, #12]
 8003d8a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	691b      	ldr	r3, [r3, #16]
 8003d92:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	f003 0302 	and.w	r3, r3, #2
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d020      	beq.n	8003de0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	f003 0302 	and.w	r3, r3, #2
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d01b      	beq.n	8003de0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f06f 0202 	mvn.w	r2, #2
 8003db0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2201      	movs	r2, #1
 8003db6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	699b      	ldr	r3, [r3, #24]
 8003dbe:	f003 0303 	and.w	r3, r3, #3
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d003      	beq.n	8003dce <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003dc6:	6878      	ldr	r0, [r7, #4]
 8003dc8:	f000 f8d2 	bl	8003f70 <HAL_TIM_IC_CaptureCallback>
 8003dcc:	e005      	b.n	8003dda <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	f000 f8c4 	bl	8003f5c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dd4:	6878      	ldr	r0, [r7, #4]
 8003dd6:	f000 f8d5 	bl	8003f84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	f003 0304 	and.w	r3, r3, #4
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d020      	beq.n	8003e2c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	f003 0304 	and.w	r3, r3, #4
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d01b      	beq.n	8003e2c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f06f 0204 	mvn.w	r2, #4
 8003dfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2202      	movs	r2, #2
 8003e02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	699b      	ldr	r3, [r3, #24]
 8003e0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d003      	beq.n	8003e1a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f000 f8ac 	bl	8003f70 <HAL_TIM_IC_CaptureCallback>
 8003e18:	e005      	b.n	8003e26 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	f000 f89e 	bl	8003f5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e20:	6878      	ldr	r0, [r7, #4]
 8003e22:	f000 f8af 	bl	8003f84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	f003 0308 	and.w	r3, r3, #8
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d020      	beq.n	8003e78 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	f003 0308 	and.w	r3, r3, #8
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d01b      	beq.n	8003e78 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f06f 0208 	mvn.w	r2, #8
 8003e48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2204      	movs	r2, #4
 8003e4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	69db      	ldr	r3, [r3, #28]
 8003e56:	f003 0303 	and.w	r3, r3, #3
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d003      	beq.n	8003e66 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	f000 f886 	bl	8003f70 <HAL_TIM_IC_CaptureCallback>
 8003e64:	e005      	b.n	8003e72 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	f000 f878 	bl	8003f5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e6c:	6878      	ldr	r0, [r7, #4]
 8003e6e:	f000 f889 	bl	8003f84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2200      	movs	r2, #0
 8003e76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	f003 0310 	and.w	r3, r3, #16
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d020      	beq.n	8003ec4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	f003 0310 	and.w	r3, r3, #16
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d01b      	beq.n	8003ec4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f06f 0210 	mvn.w	r2, #16
 8003e94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2208      	movs	r2, #8
 8003e9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	69db      	ldr	r3, [r3, #28]
 8003ea2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d003      	beq.n	8003eb2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003eaa:	6878      	ldr	r0, [r7, #4]
 8003eac:	f000 f860 	bl	8003f70 <HAL_TIM_IC_CaptureCallback>
 8003eb0:	e005      	b.n	8003ebe <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f000 f852 	bl	8003f5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003eb8:	6878      	ldr	r0, [r7, #4]
 8003eba:	f000 f863 	bl	8003f84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	f003 0301 	and.w	r3, r3, #1
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d00c      	beq.n	8003ee8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	f003 0301 	and.w	r3, r3, #1
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d007      	beq.n	8003ee8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f06f 0201 	mvn.w	r2, #1
 8003ee0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f7fc fd80 	bl	80009e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d00c      	beq.n	8003f0c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d007      	beq.n	8003f0c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003f04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	f000 f906 	bl	8004118 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d00c      	beq.n	8003f30 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d007      	beq.n	8003f30 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003f28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f000 f834 	bl	8003f98 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	f003 0320 	and.w	r3, r3, #32
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d00c      	beq.n	8003f54 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	f003 0320 	and.w	r3, r3, #32
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d007      	beq.n	8003f54 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f06f 0220 	mvn.w	r2, #32
 8003f4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	f000 f8d8 	bl	8004104 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f54:	bf00      	nop
 8003f56:	3710      	adds	r7, #16
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}

08003f5c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b083      	sub	sp, #12
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003f64:	bf00      	nop
 8003f66:	370c      	adds	r7, #12
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6e:	4770      	bx	lr

08003f70 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b083      	sub	sp, #12
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003f78:	bf00      	nop
 8003f7a:	370c      	adds	r7, #12
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f82:	4770      	bx	lr

08003f84 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b083      	sub	sp, #12
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003f8c:	bf00      	nop
 8003f8e:	370c      	adds	r7, #12
 8003f90:	46bd      	mov	sp, r7
 8003f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f96:	4770      	bx	lr

08003f98 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b083      	sub	sp, #12
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003fa0:	bf00      	nop
 8003fa2:	370c      	adds	r7, #12
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003faa:	4770      	bx	lr

08003fac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b085      	sub	sp, #20
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
 8003fb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	4a46      	ldr	r2, [pc, #280]	; (80040d8 <TIM_Base_SetConfig+0x12c>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d013      	beq.n	8003fec <TIM_Base_SetConfig+0x40>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fca:	d00f      	beq.n	8003fec <TIM_Base_SetConfig+0x40>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	4a43      	ldr	r2, [pc, #268]	; (80040dc <TIM_Base_SetConfig+0x130>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d00b      	beq.n	8003fec <TIM_Base_SetConfig+0x40>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	4a42      	ldr	r2, [pc, #264]	; (80040e0 <TIM_Base_SetConfig+0x134>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d007      	beq.n	8003fec <TIM_Base_SetConfig+0x40>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	4a41      	ldr	r2, [pc, #260]	; (80040e4 <TIM_Base_SetConfig+0x138>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d003      	beq.n	8003fec <TIM_Base_SetConfig+0x40>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	4a40      	ldr	r2, [pc, #256]	; (80040e8 <TIM_Base_SetConfig+0x13c>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d108      	bne.n	8003ffe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ff2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	68fa      	ldr	r2, [r7, #12]
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	4a35      	ldr	r2, [pc, #212]	; (80040d8 <TIM_Base_SetConfig+0x12c>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d02b      	beq.n	800405e <TIM_Base_SetConfig+0xb2>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800400c:	d027      	beq.n	800405e <TIM_Base_SetConfig+0xb2>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	4a32      	ldr	r2, [pc, #200]	; (80040dc <TIM_Base_SetConfig+0x130>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d023      	beq.n	800405e <TIM_Base_SetConfig+0xb2>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	4a31      	ldr	r2, [pc, #196]	; (80040e0 <TIM_Base_SetConfig+0x134>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d01f      	beq.n	800405e <TIM_Base_SetConfig+0xb2>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	4a30      	ldr	r2, [pc, #192]	; (80040e4 <TIM_Base_SetConfig+0x138>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d01b      	beq.n	800405e <TIM_Base_SetConfig+0xb2>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	4a2f      	ldr	r2, [pc, #188]	; (80040e8 <TIM_Base_SetConfig+0x13c>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d017      	beq.n	800405e <TIM_Base_SetConfig+0xb2>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	4a2e      	ldr	r2, [pc, #184]	; (80040ec <TIM_Base_SetConfig+0x140>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d013      	beq.n	800405e <TIM_Base_SetConfig+0xb2>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	4a2d      	ldr	r2, [pc, #180]	; (80040f0 <TIM_Base_SetConfig+0x144>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d00f      	beq.n	800405e <TIM_Base_SetConfig+0xb2>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	4a2c      	ldr	r2, [pc, #176]	; (80040f4 <TIM_Base_SetConfig+0x148>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d00b      	beq.n	800405e <TIM_Base_SetConfig+0xb2>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	4a2b      	ldr	r2, [pc, #172]	; (80040f8 <TIM_Base_SetConfig+0x14c>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d007      	beq.n	800405e <TIM_Base_SetConfig+0xb2>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	4a2a      	ldr	r2, [pc, #168]	; (80040fc <TIM_Base_SetConfig+0x150>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d003      	beq.n	800405e <TIM_Base_SetConfig+0xb2>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	4a29      	ldr	r2, [pc, #164]	; (8004100 <TIM_Base_SetConfig+0x154>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d108      	bne.n	8004070 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004064:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	68db      	ldr	r3, [r3, #12]
 800406a:	68fa      	ldr	r2, [r7, #12]
 800406c:	4313      	orrs	r3, r2
 800406e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	695b      	ldr	r3, [r3, #20]
 800407a:	4313      	orrs	r3, r2
 800407c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	68fa      	ldr	r2, [r7, #12]
 8004082:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	689a      	ldr	r2, [r3, #8]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	4a10      	ldr	r2, [pc, #64]	; (80040d8 <TIM_Base_SetConfig+0x12c>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d003      	beq.n	80040a4 <TIM_Base_SetConfig+0xf8>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	4a12      	ldr	r2, [pc, #72]	; (80040e8 <TIM_Base_SetConfig+0x13c>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d103      	bne.n	80040ac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	691a      	ldr	r2, [r3, #16]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2201      	movs	r2, #1
 80040b0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	691b      	ldr	r3, [r3, #16]
 80040b6:	f003 0301 	and.w	r3, r3, #1
 80040ba:	2b01      	cmp	r3, #1
 80040bc:	d105      	bne.n	80040ca <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	691b      	ldr	r3, [r3, #16]
 80040c2:	f023 0201 	bic.w	r2, r3, #1
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	611a      	str	r2, [r3, #16]
  }
}
 80040ca:	bf00      	nop
 80040cc:	3714      	adds	r7, #20
 80040ce:	46bd      	mov	sp, r7
 80040d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d4:	4770      	bx	lr
 80040d6:	bf00      	nop
 80040d8:	40010000 	.word	0x40010000
 80040dc:	40000400 	.word	0x40000400
 80040e0:	40000800 	.word	0x40000800
 80040e4:	40000c00 	.word	0x40000c00
 80040e8:	40010400 	.word	0x40010400
 80040ec:	40014000 	.word	0x40014000
 80040f0:	40014400 	.word	0x40014400
 80040f4:	40014800 	.word	0x40014800
 80040f8:	40001800 	.word	0x40001800
 80040fc:	40001c00 	.word	0x40001c00
 8004100:	40002000 	.word	0x40002000

08004104 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004104:	b480      	push	{r7}
 8004106:	b083      	sub	sp, #12
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800410c:	bf00      	nop
 800410e:	370c      	adds	r7, #12
 8004110:	46bd      	mov	sp, r7
 8004112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004116:	4770      	bx	lr

08004118 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004118:	b480      	push	{r7}
 800411a:	b083      	sub	sp, #12
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004120:	bf00      	nop
 8004122:	370c      	adds	r7, #12
 8004124:	46bd      	mov	sp, r7
 8004126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412a:	4770      	bx	lr

0800412c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b082      	sub	sp, #8
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d101      	bne.n	800413e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	e042      	b.n	80041c4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004144:	b2db      	uxtb	r3, r3
 8004146:	2b00      	cmp	r3, #0
 8004148:	d106      	bne.n	8004158 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2200      	movs	r2, #0
 800414e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f7fc fe00 	bl	8000d58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2224      	movs	r2, #36	; 0x24
 800415c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	68da      	ldr	r2, [r3, #12]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800416e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004170:	6878      	ldr	r0, [r7, #4]
 8004172:	f000 f82b 	bl	80041cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	691a      	ldr	r2, [r3, #16]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004184:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	695a      	ldr	r2, [r3, #20]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004194:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	68da      	ldr	r2, [r3, #12]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80041a4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2200      	movs	r2, #0
 80041aa:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2220      	movs	r2, #32
 80041b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2220      	movs	r2, #32
 80041b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2200      	movs	r2, #0
 80041c0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80041c2:	2300      	movs	r3, #0
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	3708      	adds	r7, #8
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}

080041cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80041d0:	b0c0      	sub	sp, #256	; 0x100
 80041d2:	af00      	add	r7, sp, #0
 80041d4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	691b      	ldr	r3, [r3, #16]
 80041e0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80041e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041e8:	68d9      	ldr	r1, [r3, #12]
 80041ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041ee:	681a      	ldr	r2, [r3, #0]
 80041f0:	ea40 0301 	orr.w	r3, r0, r1
 80041f4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80041f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041fa:	689a      	ldr	r2, [r3, #8]
 80041fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004200:	691b      	ldr	r3, [r3, #16]
 8004202:	431a      	orrs	r2, r3
 8004204:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004208:	695b      	ldr	r3, [r3, #20]
 800420a:	431a      	orrs	r2, r3
 800420c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004210:	69db      	ldr	r3, [r3, #28]
 8004212:	4313      	orrs	r3, r2
 8004214:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004218:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	68db      	ldr	r3, [r3, #12]
 8004220:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004224:	f021 010c 	bic.w	r1, r1, #12
 8004228:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004232:	430b      	orrs	r3, r1
 8004234:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004236:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	695b      	ldr	r3, [r3, #20]
 800423e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004242:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004246:	6999      	ldr	r1, [r3, #24]
 8004248:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800424c:	681a      	ldr	r2, [r3, #0]
 800424e:	ea40 0301 	orr.w	r3, r0, r1
 8004252:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004254:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004258:	681a      	ldr	r2, [r3, #0]
 800425a:	4b8f      	ldr	r3, [pc, #572]	; (8004498 <UART_SetConfig+0x2cc>)
 800425c:	429a      	cmp	r2, r3
 800425e:	d005      	beq.n	800426c <UART_SetConfig+0xa0>
 8004260:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004264:	681a      	ldr	r2, [r3, #0]
 8004266:	4b8d      	ldr	r3, [pc, #564]	; (800449c <UART_SetConfig+0x2d0>)
 8004268:	429a      	cmp	r2, r3
 800426a:	d104      	bne.n	8004276 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800426c:	f7ff fbee 	bl	8003a4c <HAL_RCC_GetPCLK2Freq>
 8004270:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004274:	e003      	b.n	800427e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004276:	f7ff fbd5 	bl	8003a24 <HAL_RCC_GetPCLK1Freq>
 800427a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800427e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004282:	69db      	ldr	r3, [r3, #28]
 8004284:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004288:	f040 810c 	bne.w	80044a4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800428c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004290:	2200      	movs	r2, #0
 8004292:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004296:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800429a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800429e:	4622      	mov	r2, r4
 80042a0:	462b      	mov	r3, r5
 80042a2:	1891      	adds	r1, r2, r2
 80042a4:	65b9      	str	r1, [r7, #88]	; 0x58
 80042a6:	415b      	adcs	r3, r3
 80042a8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80042aa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80042ae:	4621      	mov	r1, r4
 80042b0:	eb12 0801 	adds.w	r8, r2, r1
 80042b4:	4629      	mov	r1, r5
 80042b6:	eb43 0901 	adc.w	r9, r3, r1
 80042ba:	f04f 0200 	mov.w	r2, #0
 80042be:	f04f 0300 	mov.w	r3, #0
 80042c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80042c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80042ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80042ce:	4690      	mov	r8, r2
 80042d0:	4699      	mov	r9, r3
 80042d2:	4623      	mov	r3, r4
 80042d4:	eb18 0303 	adds.w	r3, r8, r3
 80042d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80042dc:	462b      	mov	r3, r5
 80042de:	eb49 0303 	adc.w	r3, r9, r3
 80042e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80042e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	2200      	movs	r2, #0
 80042ee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80042f2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80042f6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80042fa:	460b      	mov	r3, r1
 80042fc:	18db      	adds	r3, r3, r3
 80042fe:	653b      	str	r3, [r7, #80]	; 0x50
 8004300:	4613      	mov	r3, r2
 8004302:	eb42 0303 	adc.w	r3, r2, r3
 8004306:	657b      	str	r3, [r7, #84]	; 0x54
 8004308:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800430c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004310:	f7fb ff6e 	bl	80001f0 <__aeabi_uldivmod>
 8004314:	4602      	mov	r2, r0
 8004316:	460b      	mov	r3, r1
 8004318:	4b61      	ldr	r3, [pc, #388]	; (80044a0 <UART_SetConfig+0x2d4>)
 800431a:	fba3 2302 	umull	r2, r3, r3, r2
 800431e:	095b      	lsrs	r3, r3, #5
 8004320:	011c      	lsls	r4, r3, #4
 8004322:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004326:	2200      	movs	r2, #0
 8004328:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800432c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004330:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004334:	4642      	mov	r2, r8
 8004336:	464b      	mov	r3, r9
 8004338:	1891      	adds	r1, r2, r2
 800433a:	64b9      	str	r1, [r7, #72]	; 0x48
 800433c:	415b      	adcs	r3, r3
 800433e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004340:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004344:	4641      	mov	r1, r8
 8004346:	eb12 0a01 	adds.w	sl, r2, r1
 800434a:	4649      	mov	r1, r9
 800434c:	eb43 0b01 	adc.w	fp, r3, r1
 8004350:	f04f 0200 	mov.w	r2, #0
 8004354:	f04f 0300 	mov.w	r3, #0
 8004358:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800435c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004360:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004364:	4692      	mov	sl, r2
 8004366:	469b      	mov	fp, r3
 8004368:	4643      	mov	r3, r8
 800436a:	eb1a 0303 	adds.w	r3, sl, r3
 800436e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004372:	464b      	mov	r3, r9
 8004374:	eb4b 0303 	adc.w	r3, fp, r3
 8004378:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800437c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	2200      	movs	r2, #0
 8004384:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004388:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800438c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004390:	460b      	mov	r3, r1
 8004392:	18db      	adds	r3, r3, r3
 8004394:	643b      	str	r3, [r7, #64]	; 0x40
 8004396:	4613      	mov	r3, r2
 8004398:	eb42 0303 	adc.w	r3, r2, r3
 800439c:	647b      	str	r3, [r7, #68]	; 0x44
 800439e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80043a2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80043a6:	f7fb ff23 	bl	80001f0 <__aeabi_uldivmod>
 80043aa:	4602      	mov	r2, r0
 80043ac:	460b      	mov	r3, r1
 80043ae:	4611      	mov	r1, r2
 80043b0:	4b3b      	ldr	r3, [pc, #236]	; (80044a0 <UART_SetConfig+0x2d4>)
 80043b2:	fba3 2301 	umull	r2, r3, r3, r1
 80043b6:	095b      	lsrs	r3, r3, #5
 80043b8:	2264      	movs	r2, #100	; 0x64
 80043ba:	fb02 f303 	mul.w	r3, r2, r3
 80043be:	1acb      	subs	r3, r1, r3
 80043c0:	00db      	lsls	r3, r3, #3
 80043c2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80043c6:	4b36      	ldr	r3, [pc, #216]	; (80044a0 <UART_SetConfig+0x2d4>)
 80043c8:	fba3 2302 	umull	r2, r3, r3, r2
 80043cc:	095b      	lsrs	r3, r3, #5
 80043ce:	005b      	lsls	r3, r3, #1
 80043d0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80043d4:	441c      	add	r4, r3
 80043d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80043da:	2200      	movs	r2, #0
 80043dc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80043e0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80043e4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80043e8:	4642      	mov	r2, r8
 80043ea:	464b      	mov	r3, r9
 80043ec:	1891      	adds	r1, r2, r2
 80043ee:	63b9      	str	r1, [r7, #56]	; 0x38
 80043f0:	415b      	adcs	r3, r3
 80043f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80043f4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80043f8:	4641      	mov	r1, r8
 80043fa:	1851      	adds	r1, r2, r1
 80043fc:	6339      	str	r1, [r7, #48]	; 0x30
 80043fe:	4649      	mov	r1, r9
 8004400:	414b      	adcs	r3, r1
 8004402:	637b      	str	r3, [r7, #52]	; 0x34
 8004404:	f04f 0200 	mov.w	r2, #0
 8004408:	f04f 0300 	mov.w	r3, #0
 800440c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004410:	4659      	mov	r1, fp
 8004412:	00cb      	lsls	r3, r1, #3
 8004414:	4651      	mov	r1, sl
 8004416:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800441a:	4651      	mov	r1, sl
 800441c:	00ca      	lsls	r2, r1, #3
 800441e:	4610      	mov	r0, r2
 8004420:	4619      	mov	r1, r3
 8004422:	4603      	mov	r3, r0
 8004424:	4642      	mov	r2, r8
 8004426:	189b      	adds	r3, r3, r2
 8004428:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800442c:	464b      	mov	r3, r9
 800442e:	460a      	mov	r2, r1
 8004430:	eb42 0303 	adc.w	r3, r2, r3
 8004434:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004438:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	2200      	movs	r2, #0
 8004440:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004444:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004448:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800444c:	460b      	mov	r3, r1
 800444e:	18db      	adds	r3, r3, r3
 8004450:	62bb      	str	r3, [r7, #40]	; 0x28
 8004452:	4613      	mov	r3, r2
 8004454:	eb42 0303 	adc.w	r3, r2, r3
 8004458:	62fb      	str	r3, [r7, #44]	; 0x2c
 800445a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800445e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004462:	f7fb fec5 	bl	80001f0 <__aeabi_uldivmod>
 8004466:	4602      	mov	r2, r0
 8004468:	460b      	mov	r3, r1
 800446a:	4b0d      	ldr	r3, [pc, #52]	; (80044a0 <UART_SetConfig+0x2d4>)
 800446c:	fba3 1302 	umull	r1, r3, r3, r2
 8004470:	095b      	lsrs	r3, r3, #5
 8004472:	2164      	movs	r1, #100	; 0x64
 8004474:	fb01 f303 	mul.w	r3, r1, r3
 8004478:	1ad3      	subs	r3, r2, r3
 800447a:	00db      	lsls	r3, r3, #3
 800447c:	3332      	adds	r3, #50	; 0x32
 800447e:	4a08      	ldr	r2, [pc, #32]	; (80044a0 <UART_SetConfig+0x2d4>)
 8004480:	fba2 2303 	umull	r2, r3, r2, r3
 8004484:	095b      	lsrs	r3, r3, #5
 8004486:	f003 0207 	and.w	r2, r3, #7
 800448a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4422      	add	r2, r4
 8004492:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004494:	e106      	b.n	80046a4 <UART_SetConfig+0x4d8>
 8004496:	bf00      	nop
 8004498:	40011000 	.word	0x40011000
 800449c:	40011400 	.word	0x40011400
 80044a0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80044a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80044a8:	2200      	movs	r2, #0
 80044aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80044ae:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80044b2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80044b6:	4642      	mov	r2, r8
 80044b8:	464b      	mov	r3, r9
 80044ba:	1891      	adds	r1, r2, r2
 80044bc:	6239      	str	r1, [r7, #32]
 80044be:	415b      	adcs	r3, r3
 80044c0:	627b      	str	r3, [r7, #36]	; 0x24
 80044c2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80044c6:	4641      	mov	r1, r8
 80044c8:	1854      	adds	r4, r2, r1
 80044ca:	4649      	mov	r1, r9
 80044cc:	eb43 0501 	adc.w	r5, r3, r1
 80044d0:	f04f 0200 	mov.w	r2, #0
 80044d4:	f04f 0300 	mov.w	r3, #0
 80044d8:	00eb      	lsls	r3, r5, #3
 80044da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80044de:	00e2      	lsls	r2, r4, #3
 80044e0:	4614      	mov	r4, r2
 80044e2:	461d      	mov	r5, r3
 80044e4:	4643      	mov	r3, r8
 80044e6:	18e3      	adds	r3, r4, r3
 80044e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80044ec:	464b      	mov	r3, r9
 80044ee:	eb45 0303 	adc.w	r3, r5, r3
 80044f2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80044f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	2200      	movs	r2, #0
 80044fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004502:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004506:	f04f 0200 	mov.w	r2, #0
 800450a:	f04f 0300 	mov.w	r3, #0
 800450e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004512:	4629      	mov	r1, r5
 8004514:	008b      	lsls	r3, r1, #2
 8004516:	4621      	mov	r1, r4
 8004518:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800451c:	4621      	mov	r1, r4
 800451e:	008a      	lsls	r2, r1, #2
 8004520:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004524:	f7fb fe64 	bl	80001f0 <__aeabi_uldivmod>
 8004528:	4602      	mov	r2, r0
 800452a:	460b      	mov	r3, r1
 800452c:	4b60      	ldr	r3, [pc, #384]	; (80046b0 <UART_SetConfig+0x4e4>)
 800452e:	fba3 2302 	umull	r2, r3, r3, r2
 8004532:	095b      	lsrs	r3, r3, #5
 8004534:	011c      	lsls	r4, r3, #4
 8004536:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800453a:	2200      	movs	r2, #0
 800453c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004540:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004544:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004548:	4642      	mov	r2, r8
 800454a:	464b      	mov	r3, r9
 800454c:	1891      	adds	r1, r2, r2
 800454e:	61b9      	str	r1, [r7, #24]
 8004550:	415b      	adcs	r3, r3
 8004552:	61fb      	str	r3, [r7, #28]
 8004554:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004558:	4641      	mov	r1, r8
 800455a:	1851      	adds	r1, r2, r1
 800455c:	6139      	str	r1, [r7, #16]
 800455e:	4649      	mov	r1, r9
 8004560:	414b      	adcs	r3, r1
 8004562:	617b      	str	r3, [r7, #20]
 8004564:	f04f 0200 	mov.w	r2, #0
 8004568:	f04f 0300 	mov.w	r3, #0
 800456c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004570:	4659      	mov	r1, fp
 8004572:	00cb      	lsls	r3, r1, #3
 8004574:	4651      	mov	r1, sl
 8004576:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800457a:	4651      	mov	r1, sl
 800457c:	00ca      	lsls	r2, r1, #3
 800457e:	4610      	mov	r0, r2
 8004580:	4619      	mov	r1, r3
 8004582:	4603      	mov	r3, r0
 8004584:	4642      	mov	r2, r8
 8004586:	189b      	adds	r3, r3, r2
 8004588:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800458c:	464b      	mov	r3, r9
 800458e:	460a      	mov	r2, r1
 8004590:	eb42 0303 	adc.w	r3, r2, r3
 8004594:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004598:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	2200      	movs	r2, #0
 80045a0:	67bb      	str	r3, [r7, #120]	; 0x78
 80045a2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80045a4:	f04f 0200 	mov.w	r2, #0
 80045a8:	f04f 0300 	mov.w	r3, #0
 80045ac:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80045b0:	4649      	mov	r1, r9
 80045b2:	008b      	lsls	r3, r1, #2
 80045b4:	4641      	mov	r1, r8
 80045b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80045ba:	4641      	mov	r1, r8
 80045bc:	008a      	lsls	r2, r1, #2
 80045be:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80045c2:	f7fb fe15 	bl	80001f0 <__aeabi_uldivmod>
 80045c6:	4602      	mov	r2, r0
 80045c8:	460b      	mov	r3, r1
 80045ca:	4611      	mov	r1, r2
 80045cc:	4b38      	ldr	r3, [pc, #224]	; (80046b0 <UART_SetConfig+0x4e4>)
 80045ce:	fba3 2301 	umull	r2, r3, r3, r1
 80045d2:	095b      	lsrs	r3, r3, #5
 80045d4:	2264      	movs	r2, #100	; 0x64
 80045d6:	fb02 f303 	mul.w	r3, r2, r3
 80045da:	1acb      	subs	r3, r1, r3
 80045dc:	011b      	lsls	r3, r3, #4
 80045de:	3332      	adds	r3, #50	; 0x32
 80045e0:	4a33      	ldr	r2, [pc, #204]	; (80046b0 <UART_SetConfig+0x4e4>)
 80045e2:	fba2 2303 	umull	r2, r3, r2, r3
 80045e6:	095b      	lsrs	r3, r3, #5
 80045e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80045ec:	441c      	add	r4, r3
 80045ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80045f2:	2200      	movs	r2, #0
 80045f4:	673b      	str	r3, [r7, #112]	; 0x70
 80045f6:	677a      	str	r2, [r7, #116]	; 0x74
 80045f8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80045fc:	4642      	mov	r2, r8
 80045fe:	464b      	mov	r3, r9
 8004600:	1891      	adds	r1, r2, r2
 8004602:	60b9      	str	r1, [r7, #8]
 8004604:	415b      	adcs	r3, r3
 8004606:	60fb      	str	r3, [r7, #12]
 8004608:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800460c:	4641      	mov	r1, r8
 800460e:	1851      	adds	r1, r2, r1
 8004610:	6039      	str	r1, [r7, #0]
 8004612:	4649      	mov	r1, r9
 8004614:	414b      	adcs	r3, r1
 8004616:	607b      	str	r3, [r7, #4]
 8004618:	f04f 0200 	mov.w	r2, #0
 800461c:	f04f 0300 	mov.w	r3, #0
 8004620:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004624:	4659      	mov	r1, fp
 8004626:	00cb      	lsls	r3, r1, #3
 8004628:	4651      	mov	r1, sl
 800462a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800462e:	4651      	mov	r1, sl
 8004630:	00ca      	lsls	r2, r1, #3
 8004632:	4610      	mov	r0, r2
 8004634:	4619      	mov	r1, r3
 8004636:	4603      	mov	r3, r0
 8004638:	4642      	mov	r2, r8
 800463a:	189b      	adds	r3, r3, r2
 800463c:	66bb      	str	r3, [r7, #104]	; 0x68
 800463e:	464b      	mov	r3, r9
 8004640:	460a      	mov	r2, r1
 8004642:	eb42 0303 	adc.w	r3, r2, r3
 8004646:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004648:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	2200      	movs	r2, #0
 8004650:	663b      	str	r3, [r7, #96]	; 0x60
 8004652:	667a      	str	r2, [r7, #100]	; 0x64
 8004654:	f04f 0200 	mov.w	r2, #0
 8004658:	f04f 0300 	mov.w	r3, #0
 800465c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004660:	4649      	mov	r1, r9
 8004662:	008b      	lsls	r3, r1, #2
 8004664:	4641      	mov	r1, r8
 8004666:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800466a:	4641      	mov	r1, r8
 800466c:	008a      	lsls	r2, r1, #2
 800466e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004672:	f7fb fdbd 	bl	80001f0 <__aeabi_uldivmod>
 8004676:	4602      	mov	r2, r0
 8004678:	460b      	mov	r3, r1
 800467a:	4b0d      	ldr	r3, [pc, #52]	; (80046b0 <UART_SetConfig+0x4e4>)
 800467c:	fba3 1302 	umull	r1, r3, r3, r2
 8004680:	095b      	lsrs	r3, r3, #5
 8004682:	2164      	movs	r1, #100	; 0x64
 8004684:	fb01 f303 	mul.w	r3, r1, r3
 8004688:	1ad3      	subs	r3, r2, r3
 800468a:	011b      	lsls	r3, r3, #4
 800468c:	3332      	adds	r3, #50	; 0x32
 800468e:	4a08      	ldr	r2, [pc, #32]	; (80046b0 <UART_SetConfig+0x4e4>)
 8004690:	fba2 2303 	umull	r2, r3, r2, r3
 8004694:	095b      	lsrs	r3, r3, #5
 8004696:	f003 020f 	and.w	r2, r3, #15
 800469a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4422      	add	r2, r4
 80046a2:	609a      	str	r2, [r3, #8]
}
 80046a4:	bf00      	nop
 80046a6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80046aa:	46bd      	mov	sp, r7
 80046ac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80046b0:	51eb851f 	.word	0x51eb851f

080046b4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80046b4:	b084      	sub	sp, #16
 80046b6:	b580      	push	{r7, lr}
 80046b8:	b084      	sub	sp, #16
 80046ba:	af00      	add	r7, sp, #0
 80046bc:	6078      	str	r0, [r7, #4]
 80046be:	f107 001c 	add.w	r0, r7, #28
 80046c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80046c6:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80046ca:	2b01      	cmp	r3, #1
 80046cc:	d123      	bne.n	8004716 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046d2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	68db      	ldr	r3, [r3, #12]
 80046de:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80046e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046e6:	687a      	ldr	r2, [r7, #4]
 80046e8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	68db      	ldr	r3, [r3, #12]
 80046ee:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80046f6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80046fa:	2b01      	cmp	r3, #1
 80046fc:	d105      	bne.n	800470a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	68db      	ldr	r3, [r3, #12]
 8004702:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	f001 fae2 	bl	8005cd4 <USB_CoreReset>
 8004710:	4603      	mov	r3, r0
 8004712:	73fb      	strb	r3, [r7, #15]
 8004714:	e01b      	b.n	800474e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	68db      	ldr	r3, [r3, #12]
 800471a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	f001 fad6 	bl	8005cd4 <USB_CoreReset>
 8004728:	4603      	mov	r3, r0
 800472a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800472c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8004730:	2b00      	cmp	r3, #0
 8004732:	d106      	bne.n	8004742 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004738:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	639a      	str	r2, [r3, #56]	; 0x38
 8004740:	e005      	b.n	800474e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004746:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800474e:	7fbb      	ldrb	r3, [r7, #30]
 8004750:	2b01      	cmp	r3, #1
 8004752:	d10b      	bne.n	800476c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	f043 0206 	orr.w	r2, r3, #6
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	f043 0220 	orr.w	r2, r3, #32
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800476c:	7bfb      	ldrb	r3, [r7, #15]
}
 800476e:	4618      	mov	r0, r3
 8004770:	3710      	adds	r7, #16
 8004772:	46bd      	mov	sp, r7
 8004774:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004778:	b004      	add	sp, #16
 800477a:	4770      	bx	lr

0800477c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800477c:	b480      	push	{r7}
 800477e:	b087      	sub	sp, #28
 8004780:	af00      	add	r7, sp, #0
 8004782:	60f8      	str	r0, [r7, #12]
 8004784:	60b9      	str	r1, [r7, #8]
 8004786:	4613      	mov	r3, r2
 8004788:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800478a:	79fb      	ldrb	r3, [r7, #7]
 800478c:	2b02      	cmp	r3, #2
 800478e:	d165      	bne.n	800485c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	4a41      	ldr	r2, [pc, #260]	; (8004898 <USB_SetTurnaroundTime+0x11c>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d906      	bls.n	80047a6 <USB_SetTurnaroundTime+0x2a>
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	4a40      	ldr	r2, [pc, #256]	; (800489c <USB_SetTurnaroundTime+0x120>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d202      	bcs.n	80047a6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80047a0:	230f      	movs	r3, #15
 80047a2:	617b      	str	r3, [r7, #20]
 80047a4:	e062      	b.n	800486c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	4a3c      	ldr	r2, [pc, #240]	; (800489c <USB_SetTurnaroundTime+0x120>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d306      	bcc.n	80047bc <USB_SetTurnaroundTime+0x40>
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	4a3b      	ldr	r2, [pc, #236]	; (80048a0 <USB_SetTurnaroundTime+0x124>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d202      	bcs.n	80047bc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80047b6:	230e      	movs	r3, #14
 80047b8:	617b      	str	r3, [r7, #20]
 80047ba:	e057      	b.n	800486c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	4a38      	ldr	r2, [pc, #224]	; (80048a0 <USB_SetTurnaroundTime+0x124>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d306      	bcc.n	80047d2 <USB_SetTurnaroundTime+0x56>
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	4a37      	ldr	r2, [pc, #220]	; (80048a4 <USB_SetTurnaroundTime+0x128>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d202      	bcs.n	80047d2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80047cc:	230d      	movs	r3, #13
 80047ce:	617b      	str	r3, [r7, #20]
 80047d0:	e04c      	b.n	800486c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	4a33      	ldr	r2, [pc, #204]	; (80048a4 <USB_SetTurnaroundTime+0x128>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d306      	bcc.n	80047e8 <USB_SetTurnaroundTime+0x6c>
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	4a32      	ldr	r2, [pc, #200]	; (80048a8 <USB_SetTurnaroundTime+0x12c>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d802      	bhi.n	80047e8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80047e2:	230c      	movs	r3, #12
 80047e4:	617b      	str	r3, [r7, #20]
 80047e6:	e041      	b.n	800486c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	4a2f      	ldr	r2, [pc, #188]	; (80048a8 <USB_SetTurnaroundTime+0x12c>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d906      	bls.n	80047fe <USB_SetTurnaroundTime+0x82>
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	4a2e      	ldr	r2, [pc, #184]	; (80048ac <USB_SetTurnaroundTime+0x130>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d802      	bhi.n	80047fe <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80047f8:	230b      	movs	r3, #11
 80047fa:	617b      	str	r3, [r7, #20]
 80047fc:	e036      	b.n	800486c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	4a2a      	ldr	r2, [pc, #168]	; (80048ac <USB_SetTurnaroundTime+0x130>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d906      	bls.n	8004814 <USB_SetTurnaroundTime+0x98>
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	4a29      	ldr	r2, [pc, #164]	; (80048b0 <USB_SetTurnaroundTime+0x134>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d802      	bhi.n	8004814 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800480e:	230a      	movs	r3, #10
 8004810:	617b      	str	r3, [r7, #20]
 8004812:	e02b      	b.n	800486c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	4a26      	ldr	r2, [pc, #152]	; (80048b0 <USB_SetTurnaroundTime+0x134>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d906      	bls.n	800482a <USB_SetTurnaroundTime+0xae>
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	4a25      	ldr	r2, [pc, #148]	; (80048b4 <USB_SetTurnaroundTime+0x138>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d202      	bcs.n	800482a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004824:	2309      	movs	r3, #9
 8004826:	617b      	str	r3, [r7, #20]
 8004828:	e020      	b.n	800486c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	4a21      	ldr	r2, [pc, #132]	; (80048b4 <USB_SetTurnaroundTime+0x138>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d306      	bcc.n	8004840 <USB_SetTurnaroundTime+0xc4>
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	4a20      	ldr	r2, [pc, #128]	; (80048b8 <USB_SetTurnaroundTime+0x13c>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d802      	bhi.n	8004840 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800483a:	2308      	movs	r3, #8
 800483c:	617b      	str	r3, [r7, #20]
 800483e:	e015      	b.n	800486c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	4a1d      	ldr	r2, [pc, #116]	; (80048b8 <USB_SetTurnaroundTime+0x13c>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d906      	bls.n	8004856 <USB_SetTurnaroundTime+0xda>
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	4a1c      	ldr	r2, [pc, #112]	; (80048bc <USB_SetTurnaroundTime+0x140>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d202      	bcs.n	8004856 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004850:	2307      	movs	r3, #7
 8004852:	617b      	str	r3, [r7, #20]
 8004854:	e00a      	b.n	800486c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004856:	2306      	movs	r3, #6
 8004858:	617b      	str	r3, [r7, #20]
 800485a:	e007      	b.n	800486c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800485c:	79fb      	ldrb	r3, [r7, #7]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d102      	bne.n	8004868 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004862:	2309      	movs	r3, #9
 8004864:	617b      	str	r3, [r7, #20]
 8004866:	e001      	b.n	800486c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004868:	2309      	movs	r3, #9
 800486a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	68db      	ldr	r3, [r3, #12]
 8004870:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	68da      	ldr	r2, [r3, #12]
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	029b      	lsls	r3, r3, #10
 8004880:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004884:	431a      	orrs	r2, r3
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800488a:	2300      	movs	r3, #0
}
 800488c:	4618      	mov	r0, r3
 800488e:	371c      	adds	r7, #28
 8004890:	46bd      	mov	sp, r7
 8004892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004896:	4770      	bx	lr
 8004898:	00d8acbf 	.word	0x00d8acbf
 800489c:	00e4e1c0 	.word	0x00e4e1c0
 80048a0:	00f42400 	.word	0x00f42400
 80048a4:	01067380 	.word	0x01067380
 80048a8:	011a499f 	.word	0x011a499f
 80048ac:	01312cff 	.word	0x01312cff
 80048b0:	014ca43f 	.word	0x014ca43f
 80048b4:	016e3600 	.word	0x016e3600
 80048b8:	01a6ab1f 	.word	0x01a6ab1f
 80048bc:	01e84800 	.word	0x01e84800

080048c0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b083      	sub	sp, #12
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	689b      	ldr	r3, [r3, #8]
 80048cc:	f043 0201 	orr.w	r2, r3, #1
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80048d4:	2300      	movs	r3, #0
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	370c      	adds	r7, #12
 80048da:	46bd      	mov	sp, r7
 80048dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e0:	4770      	bx	lr

080048e2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80048e2:	b480      	push	{r7}
 80048e4:	b083      	sub	sp, #12
 80048e6:	af00      	add	r7, sp, #0
 80048e8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	689b      	ldr	r3, [r3, #8]
 80048ee:	f023 0201 	bic.w	r2, r3, #1
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80048f6:	2300      	movs	r3, #0
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	370c      	adds	r7, #12
 80048fc:	46bd      	mov	sp, r7
 80048fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004902:	4770      	bx	lr

08004904 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b084      	sub	sp, #16
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
 800490c:	460b      	mov	r3, r1
 800490e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004910:	2300      	movs	r3, #0
 8004912:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	68db      	ldr	r3, [r3, #12]
 8004918:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004920:	78fb      	ldrb	r3, [r7, #3]
 8004922:	2b01      	cmp	r3, #1
 8004924:	d115      	bne.n	8004952 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	68db      	ldr	r3, [r3, #12]
 800492a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004932:	200a      	movs	r0, #10
 8004934:	f7fc fb2a 	bl	8000f8c <HAL_Delay>
      ms += 10U;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	330a      	adds	r3, #10
 800493c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	f001 f939 	bl	8005bb6 <USB_GetMode>
 8004944:	4603      	mov	r3, r0
 8004946:	2b01      	cmp	r3, #1
 8004948:	d01e      	beq.n	8004988 <USB_SetCurrentMode+0x84>
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2bc7      	cmp	r3, #199	; 0xc7
 800494e:	d9f0      	bls.n	8004932 <USB_SetCurrentMode+0x2e>
 8004950:	e01a      	b.n	8004988 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004952:	78fb      	ldrb	r3, [r7, #3]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d115      	bne.n	8004984 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	68db      	ldr	r3, [r3, #12]
 800495c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004964:	200a      	movs	r0, #10
 8004966:	f7fc fb11 	bl	8000f8c <HAL_Delay>
      ms += 10U;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	330a      	adds	r3, #10
 800496e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004970:	6878      	ldr	r0, [r7, #4]
 8004972:	f001 f920 	bl	8005bb6 <USB_GetMode>
 8004976:	4603      	mov	r3, r0
 8004978:	2b00      	cmp	r3, #0
 800497a:	d005      	beq.n	8004988 <USB_SetCurrentMode+0x84>
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2bc7      	cmp	r3, #199	; 0xc7
 8004980:	d9f0      	bls.n	8004964 <USB_SetCurrentMode+0x60>
 8004982:	e001      	b.n	8004988 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004984:	2301      	movs	r3, #1
 8004986:	e005      	b.n	8004994 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	2bc8      	cmp	r3, #200	; 0xc8
 800498c:	d101      	bne.n	8004992 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800498e:	2301      	movs	r3, #1
 8004990:	e000      	b.n	8004994 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004992:	2300      	movs	r3, #0
}
 8004994:	4618      	mov	r0, r3
 8004996:	3710      	adds	r7, #16
 8004998:	46bd      	mov	sp, r7
 800499a:	bd80      	pop	{r7, pc}

0800499c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800499c:	b084      	sub	sp, #16
 800499e:	b580      	push	{r7, lr}
 80049a0:	b086      	sub	sp, #24
 80049a2:	af00      	add	r7, sp, #0
 80049a4:	6078      	str	r0, [r7, #4]
 80049a6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80049aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80049ae:	2300      	movs	r3, #0
 80049b0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80049b6:	2300      	movs	r3, #0
 80049b8:	613b      	str	r3, [r7, #16]
 80049ba:	e009      	b.n	80049d0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80049bc:	687a      	ldr	r2, [r7, #4]
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	3340      	adds	r3, #64	; 0x40
 80049c2:	009b      	lsls	r3, r3, #2
 80049c4:	4413      	add	r3, r2
 80049c6:	2200      	movs	r2, #0
 80049c8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	3301      	adds	r3, #1
 80049ce:	613b      	str	r3, [r7, #16]
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	2b0e      	cmp	r3, #14
 80049d4:	d9f2      	bls.n	80049bc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80049d6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d11c      	bne.n	8004a18 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	68fa      	ldr	r2, [r7, #12]
 80049e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80049ec:	f043 0302 	orr.w	r3, r3, #2
 80049f0:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049f6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a02:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a0e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	639a      	str	r2, [r3, #56]	; 0x38
 8004a16:	e00b      	b.n	8004a30 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a1c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a28:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004a36:	461a      	mov	r2, r3
 8004a38:	2300      	movs	r3, #0
 8004a3a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004a3c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8004a40:	2b01      	cmp	r3, #1
 8004a42:	d10d      	bne.n	8004a60 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004a44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d104      	bne.n	8004a56 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004a4c:	2100      	movs	r1, #0
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f000 f968 	bl	8004d24 <USB_SetDevSpeed>
 8004a54:	e008      	b.n	8004a68 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004a56:	2101      	movs	r1, #1
 8004a58:	6878      	ldr	r0, [r7, #4]
 8004a5a:	f000 f963 	bl	8004d24 <USB_SetDevSpeed>
 8004a5e:	e003      	b.n	8004a68 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004a60:	2103      	movs	r1, #3
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	f000 f95e 	bl	8004d24 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004a68:	2110      	movs	r1, #16
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	f000 f8fa 	bl	8004c64 <USB_FlushTxFifo>
 8004a70:	4603      	mov	r3, r0
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d001      	beq.n	8004a7a <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8004a76:	2301      	movs	r3, #1
 8004a78:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	f000 f924 	bl	8004cc8 <USB_FlushRxFifo>
 8004a80:	4603      	mov	r3, r0
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d001      	beq.n	8004a8a <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8004a86:	2301      	movs	r3, #1
 8004a88:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a90:	461a      	mov	r2, r3
 8004a92:	2300      	movs	r3, #0
 8004a94:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a9c:	461a      	mov	r2, r3
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004aa8:	461a      	mov	r2, r3
 8004aaa:	2300      	movs	r3, #0
 8004aac:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004aae:	2300      	movs	r3, #0
 8004ab0:	613b      	str	r3, [r7, #16]
 8004ab2:	e043      	b.n	8004b3c <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	015a      	lsls	r2, r3, #5
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	4413      	add	r3, r2
 8004abc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004ac6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004aca:	d118      	bne.n	8004afe <USB_DevInit+0x162>
    {
      if (i == 0U)
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d10a      	bne.n	8004ae8 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	015a      	lsls	r2, r3, #5
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	4413      	add	r3, r2
 8004ada:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ade:	461a      	mov	r2, r3
 8004ae0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004ae4:	6013      	str	r3, [r2, #0]
 8004ae6:	e013      	b.n	8004b10 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	015a      	lsls	r2, r3, #5
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	4413      	add	r3, r2
 8004af0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004af4:	461a      	mov	r2, r3
 8004af6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004afa:	6013      	str	r3, [r2, #0]
 8004afc:	e008      	b.n	8004b10 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	015a      	lsls	r2, r3, #5
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	4413      	add	r3, r2
 8004b06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b0a:	461a      	mov	r2, r3
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	015a      	lsls	r2, r3, #5
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	4413      	add	r3, r2
 8004b18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b1c:	461a      	mov	r2, r3
 8004b1e:	2300      	movs	r3, #0
 8004b20:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004b22:	693b      	ldr	r3, [r7, #16]
 8004b24:	015a      	lsls	r2, r3, #5
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	4413      	add	r3, r2
 8004b2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b2e:	461a      	mov	r2, r3
 8004b30:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004b34:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	3301      	adds	r3, #1
 8004b3a:	613b      	str	r3, [r7, #16]
 8004b3c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004b40:	461a      	mov	r2, r3
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d3b5      	bcc.n	8004ab4 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b48:	2300      	movs	r3, #0
 8004b4a:	613b      	str	r3, [r7, #16]
 8004b4c:	e043      	b.n	8004bd6 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004b4e:	693b      	ldr	r3, [r7, #16]
 8004b50:	015a      	lsls	r2, r3, #5
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	4413      	add	r3, r2
 8004b56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b60:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b64:	d118      	bne.n	8004b98 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d10a      	bne.n	8004b82 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	015a      	lsls	r2, r3, #5
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	4413      	add	r3, r2
 8004b74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b78:	461a      	mov	r2, r3
 8004b7a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004b7e:	6013      	str	r3, [r2, #0]
 8004b80:	e013      	b.n	8004baa <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	015a      	lsls	r2, r3, #5
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	4413      	add	r3, r2
 8004b8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b8e:	461a      	mov	r2, r3
 8004b90:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004b94:	6013      	str	r3, [r2, #0]
 8004b96:	e008      	b.n	8004baa <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	015a      	lsls	r2, r3, #5
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	4413      	add	r3, r2
 8004ba0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ba4:	461a      	mov	r2, r3
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	015a      	lsls	r2, r3, #5
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	4413      	add	r3, r2
 8004bb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bb6:	461a      	mov	r2, r3
 8004bb8:	2300      	movs	r3, #0
 8004bba:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	015a      	lsls	r2, r3, #5
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	4413      	add	r3, r2
 8004bc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bc8:	461a      	mov	r2, r3
 8004bca:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004bce:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	3301      	adds	r3, #1
 8004bd4:	613b      	str	r3, [r7, #16]
 8004bd6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004bda:	461a      	mov	r2, r3
 8004bdc:	693b      	ldr	r3, [r7, #16]
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d3b5      	bcc.n	8004b4e <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004be8:	691b      	ldr	r3, [r3, #16]
 8004bea:	68fa      	ldr	r2, [r7, #12]
 8004bec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004bf0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004bf4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004c02:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004c04:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d105      	bne.n	8004c18 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	699b      	ldr	r3, [r3, #24]
 8004c10:	f043 0210 	orr.w	r2, r3, #16
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	699a      	ldr	r2, [r3, #24]
 8004c1c:	4b10      	ldr	r3, [pc, #64]	; (8004c60 <USB_DevInit+0x2c4>)
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	687a      	ldr	r2, [r7, #4]
 8004c22:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004c24:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d005      	beq.n	8004c38 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	699b      	ldr	r3, [r3, #24]
 8004c30:	f043 0208 	orr.w	r2, r3, #8
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004c38:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004c3c:	2b01      	cmp	r3, #1
 8004c3e:	d107      	bne.n	8004c50 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	699b      	ldr	r3, [r3, #24]
 8004c44:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004c48:	f043 0304 	orr.w	r3, r3, #4
 8004c4c:	687a      	ldr	r2, [r7, #4]
 8004c4e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004c50:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	3718      	adds	r7, #24
 8004c56:	46bd      	mov	sp, r7
 8004c58:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004c5c:	b004      	add	sp, #16
 8004c5e:	4770      	bx	lr
 8004c60:	803c3800 	.word	0x803c3800

08004c64 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b085      	sub	sp, #20
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
 8004c6c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004c6e:	2300      	movs	r3, #0
 8004c70:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	3301      	adds	r3, #1
 8004c76:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004c7e:	d901      	bls.n	8004c84 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004c80:	2303      	movs	r3, #3
 8004c82:	e01b      	b.n	8004cbc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	691b      	ldr	r3, [r3, #16]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	daf2      	bge.n	8004c72 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	019b      	lsls	r3, r3, #6
 8004c94:	f043 0220 	orr.w	r2, r3, #32
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	3301      	adds	r3, #1
 8004ca0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004ca8:	d901      	bls.n	8004cae <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004caa:	2303      	movs	r3, #3
 8004cac:	e006      	b.n	8004cbc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	691b      	ldr	r3, [r3, #16]
 8004cb2:	f003 0320 	and.w	r3, r3, #32
 8004cb6:	2b20      	cmp	r3, #32
 8004cb8:	d0f0      	beq.n	8004c9c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004cba:	2300      	movs	r3, #0
}
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	3714      	adds	r7, #20
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc6:	4770      	bx	lr

08004cc8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b085      	sub	sp, #20
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	3301      	adds	r3, #1
 8004cd8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004ce0:	d901      	bls.n	8004ce6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004ce2:	2303      	movs	r3, #3
 8004ce4:	e018      	b.n	8004d18 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	691b      	ldr	r3, [r3, #16]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	daf2      	bge.n	8004cd4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2210      	movs	r2, #16
 8004cf6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	3301      	adds	r3, #1
 8004cfc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004d04:	d901      	bls.n	8004d0a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004d06:	2303      	movs	r3, #3
 8004d08:	e006      	b.n	8004d18 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	691b      	ldr	r3, [r3, #16]
 8004d0e:	f003 0310 	and.w	r3, r3, #16
 8004d12:	2b10      	cmp	r3, #16
 8004d14:	d0f0      	beq.n	8004cf8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004d16:	2300      	movs	r3, #0
}
 8004d18:	4618      	mov	r0, r3
 8004d1a:	3714      	adds	r7, #20
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d22:	4770      	bx	lr

08004d24 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004d24:	b480      	push	{r7}
 8004d26:	b085      	sub	sp, #20
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
 8004d2c:	460b      	mov	r3, r1
 8004d2e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d3a:	681a      	ldr	r2, [r3, #0]
 8004d3c:	78fb      	ldrb	r3, [r7, #3]
 8004d3e:	68f9      	ldr	r1, [r7, #12]
 8004d40:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d44:	4313      	orrs	r3, r2
 8004d46:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004d48:	2300      	movs	r3, #0
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	3714      	adds	r7, #20
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d54:	4770      	bx	lr

08004d56 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8004d56:	b480      	push	{r7}
 8004d58:	b087      	sub	sp, #28
 8004d5a:	af00      	add	r7, sp, #0
 8004d5c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d68:	689b      	ldr	r3, [r3, #8]
 8004d6a:	f003 0306 	and.w	r3, r3, #6
 8004d6e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d102      	bne.n	8004d7c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004d76:	2300      	movs	r3, #0
 8004d78:	75fb      	strb	r3, [r7, #23]
 8004d7a:	e00a      	b.n	8004d92 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	2b02      	cmp	r3, #2
 8004d80:	d002      	beq.n	8004d88 <USB_GetDevSpeed+0x32>
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	2b06      	cmp	r3, #6
 8004d86:	d102      	bne.n	8004d8e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004d88:	2302      	movs	r3, #2
 8004d8a:	75fb      	strb	r3, [r7, #23]
 8004d8c:	e001      	b.n	8004d92 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004d8e:	230f      	movs	r3, #15
 8004d90:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004d92:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	371c      	adds	r7, #28
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9e:	4770      	bx	lr

08004da0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b085      	sub	sp, #20
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
 8004da8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	781b      	ldrb	r3, [r3, #0]
 8004db2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	785b      	ldrb	r3, [r3, #1]
 8004db8:	2b01      	cmp	r3, #1
 8004dba:	d13a      	bne.n	8004e32 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dc2:	69da      	ldr	r2, [r3, #28]
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	781b      	ldrb	r3, [r3, #0]
 8004dc8:	f003 030f 	and.w	r3, r3, #15
 8004dcc:	2101      	movs	r1, #1
 8004dce:	fa01 f303 	lsl.w	r3, r1, r3
 8004dd2:	b29b      	uxth	r3, r3
 8004dd4:	68f9      	ldr	r1, [r7, #12]
 8004dd6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	015a      	lsls	r2, r3, #5
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	4413      	add	r3, r2
 8004de6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d155      	bne.n	8004ea0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	015a      	lsls	r2, r3, #5
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	4413      	add	r3, r2
 8004dfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e00:	681a      	ldr	r2, [r3, #0]
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	689b      	ldr	r3, [r3, #8]
 8004e06:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	791b      	ldrb	r3, [r3, #4]
 8004e0e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004e10:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	059b      	lsls	r3, r3, #22
 8004e16:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	68ba      	ldr	r2, [r7, #8]
 8004e1c:	0151      	lsls	r1, r2, #5
 8004e1e:	68fa      	ldr	r2, [r7, #12]
 8004e20:	440a      	add	r2, r1
 8004e22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e2e:	6013      	str	r3, [r2, #0]
 8004e30:	e036      	b.n	8004ea0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e38:	69da      	ldr	r2, [r3, #28]
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	781b      	ldrb	r3, [r3, #0]
 8004e3e:	f003 030f 	and.w	r3, r3, #15
 8004e42:	2101      	movs	r1, #1
 8004e44:	fa01 f303 	lsl.w	r3, r1, r3
 8004e48:	041b      	lsls	r3, r3, #16
 8004e4a:	68f9      	ldr	r1, [r7, #12]
 8004e4c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004e50:	4313      	orrs	r3, r2
 8004e52:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	015a      	lsls	r2, r3, #5
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	4413      	add	r3, r2
 8004e5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d11a      	bne.n	8004ea0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	015a      	lsls	r2, r3, #5
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	4413      	add	r3, r2
 8004e72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e76:	681a      	ldr	r2, [r3, #0]
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	689b      	ldr	r3, [r3, #8]
 8004e7c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	791b      	ldrb	r3, [r3, #4]
 8004e84:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004e86:	430b      	orrs	r3, r1
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	68ba      	ldr	r2, [r7, #8]
 8004e8c:	0151      	lsls	r1, r2, #5
 8004e8e:	68fa      	ldr	r2, [r7, #12]
 8004e90:	440a      	add	r2, r1
 8004e92:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e9e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004ea0:	2300      	movs	r3, #0
}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	3714      	adds	r7, #20
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eac:	4770      	bx	lr
	...

08004eb0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	b085      	sub	sp, #20
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
 8004eb8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	781b      	ldrb	r3, [r3, #0]
 8004ec2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	785b      	ldrb	r3, [r3, #1]
 8004ec8:	2b01      	cmp	r3, #1
 8004eca:	d161      	bne.n	8004f90 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	015a      	lsls	r2, r3, #5
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	4413      	add	r3, r2
 8004ed4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004ede:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ee2:	d11f      	bne.n	8004f24 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	015a      	lsls	r2, r3, #5
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	4413      	add	r3, r2
 8004eec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	68ba      	ldr	r2, [r7, #8]
 8004ef4:	0151      	lsls	r1, r2, #5
 8004ef6:	68fa      	ldr	r2, [r7, #12]
 8004ef8:	440a      	add	r2, r1
 8004efa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004efe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004f02:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	015a      	lsls	r2, r3, #5
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	4413      	add	r3, r2
 8004f0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	68ba      	ldr	r2, [r7, #8]
 8004f14:	0151      	lsls	r1, r2, #5
 8004f16:	68fa      	ldr	r2, [r7, #12]
 8004f18:	440a      	add	r2, r1
 8004f1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f1e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004f22:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	781b      	ldrb	r3, [r3, #0]
 8004f30:	f003 030f 	and.w	r3, r3, #15
 8004f34:	2101      	movs	r1, #1
 8004f36:	fa01 f303 	lsl.w	r3, r1, r3
 8004f3a:	b29b      	uxth	r3, r3
 8004f3c:	43db      	mvns	r3, r3
 8004f3e:	68f9      	ldr	r1, [r7, #12]
 8004f40:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f44:	4013      	ands	r3, r2
 8004f46:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f4e:	69da      	ldr	r2, [r3, #28]
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	781b      	ldrb	r3, [r3, #0]
 8004f54:	f003 030f 	and.w	r3, r3, #15
 8004f58:	2101      	movs	r1, #1
 8004f5a:	fa01 f303 	lsl.w	r3, r1, r3
 8004f5e:	b29b      	uxth	r3, r3
 8004f60:	43db      	mvns	r3, r3
 8004f62:	68f9      	ldr	r1, [r7, #12]
 8004f64:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f68:	4013      	ands	r3, r2
 8004f6a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	015a      	lsls	r2, r3, #5
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	4413      	add	r3, r2
 8004f74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f78:	681a      	ldr	r2, [r3, #0]
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	0159      	lsls	r1, r3, #5
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	440b      	add	r3, r1
 8004f82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f86:	4619      	mov	r1, r3
 8004f88:	4b35      	ldr	r3, [pc, #212]	; (8005060 <USB_DeactivateEndpoint+0x1b0>)
 8004f8a:	4013      	ands	r3, r2
 8004f8c:	600b      	str	r3, [r1, #0]
 8004f8e:	e060      	b.n	8005052 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	015a      	lsls	r2, r3, #5
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	4413      	add	r3, r2
 8004f98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004fa2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004fa6:	d11f      	bne.n	8004fe8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	015a      	lsls	r2, r3, #5
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	4413      	add	r3, r2
 8004fb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	68ba      	ldr	r2, [r7, #8]
 8004fb8:	0151      	lsls	r1, r2, #5
 8004fba:	68fa      	ldr	r2, [r7, #12]
 8004fbc:	440a      	add	r2, r1
 8004fbe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fc2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004fc6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	015a      	lsls	r2, r3, #5
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	4413      	add	r3, r2
 8004fd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	68ba      	ldr	r2, [r7, #8]
 8004fd8:	0151      	lsls	r1, r2, #5
 8004fda:	68fa      	ldr	r2, [r7, #12]
 8004fdc:	440a      	add	r2, r1
 8004fde:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fe2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004fe6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	781b      	ldrb	r3, [r3, #0]
 8004ff4:	f003 030f 	and.w	r3, r3, #15
 8004ff8:	2101      	movs	r1, #1
 8004ffa:	fa01 f303 	lsl.w	r3, r1, r3
 8004ffe:	041b      	lsls	r3, r3, #16
 8005000:	43db      	mvns	r3, r3
 8005002:	68f9      	ldr	r1, [r7, #12]
 8005004:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005008:	4013      	ands	r3, r2
 800500a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005012:	69da      	ldr	r2, [r3, #28]
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	781b      	ldrb	r3, [r3, #0]
 8005018:	f003 030f 	and.w	r3, r3, #15
 800501c:	2101      	movs	r1, #1
 800501e:	fa01 f303 	lsl.w	r3, r1, r3
 8005022:	041b      	lsls	r3, r3, #16
 8005024:	43db      	mvns	r3, r3
 8005026:	68f9      	ldr	r1, [r7, #12]
 8005028:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800502c:	4013      	ands	r3, r2
 800502e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	015a      	lsls	r2, r3, #5
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	4413      	add	r3, r2
 8005038:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800503c:	681a      	ldr	r2, [r3, #0]
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	0159      	lsls	r1, r3, #5
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	440b      	add	r3, r1
 8005046:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800504a:	4619      	mov	r1, r3
 800504c:	4b05      	ldr	r3, [pc, #20]	; (8005064 <USB_DeactivateEndpoint+0x1b4>)
 800504e:	4013      	ands	r3, r2
 8005050:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005052:	2300      	movs	r3, #0
}
 8005054:	4618      	mov	r0, r3
 8005056:	3714      	adds	r7, #20
 8005058:	46bd      	mov	sp, r7
 800505a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505e:	4770      	bx	lr
 8005060:	ec337800 	.word	0xec337800
 8005064:	eff37800 	.word	0xeff37800

08005068 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b08a      	sub	sp, #40	; 0x28
 800506c:	af02      	add	r7, sp, #8
 800506e:	60f8      	str	r0, [r7, #12]
 8005070:	60b9      	str	r1, [r7, #8]
 8005072:	4613      	mov	r3, r2
 8005074:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	781b      	ldrb	r3, [r3, #0]
 800507e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	785b      	ldrb	r3, [r3, #1]
 8005084:	2b01      	cmp	r3, #1
 8005086:	f040 817a 	bne.w	800537e <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	691b      	ldr	r3, [r3, #16]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d132      	bne.n	80050f8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005092:	69bb      	ldr	r3, [r7, #24]
 8005094:	015a      	lsls	r2, r3, #5
 8005096:	69fb      	ldr	r3, [r7, #28]
 8005098:	4413      	add	r3, r2
 800509a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800509e:	691b      	ldr	r3, [r3, #16]
 80050a0:	69ba      	ldr	r2, [r7, #24]
 80050a2:	0151      	lsls	r1, r2, #5
 80050a4:	69fa      	ldr	r2, [r7, #28]
 80050a6:	440a      	add	r2, r1
 80050a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050ac:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80050b0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80050b4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80050b6:	69bb      	ldr	r3, [r7, #24]
 80050b8:	015a      	lsls	r2, r3, #5
 80050ba:	69fb      	ldr	r3, [r7, #28]
 80050bc:	4413      	add	r3, r2
 80050be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050c2:	691b      	ldr	r3, [r3, #16]
 80050c4:	69ba      	ldr	r2, [r7, #24]
 80050c6:	0151      	lsls	r1, r2, #5
 80050c8:	69fa      	ldr	r2, [r7, #28]
 80050ca:	440a      	add	r2, r1
 80050cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050d0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80050d4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80050d6:	69bb      	ldr	r3, [r7, #24]
 80050d8:	015a      	lsls	r2, r3, #5
 80050da:	69fb      	ldr	r3, [r7, #28]
 80050dc:	4413      	add	r3, r2
 80050de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050e2:	691b      	ldr	r3, [r3, #16]
 80050e4:	69ba      	ldr	r2, [r7, #24]
 80050e6:	0151      	lsls	r1, r2, #5
 80050e8:	69fa      	ldr	r2, [r7, #28]
 80050ea:	440a      	add	r2, r1
 80050ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050f0:	0cdb      	lsrs	r3, r3, #19
 80050f2:	04db      	lsls	r3, r3, #19
 80050f4:	6113      	str	r3, [r2, #16]
 80050f6:	e092      	b.n	800521e <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80050f8:	69bb      	ldr	r3, [r7, #24]
 80050fa:	015a      	lsls	r2, r3, #5
 80050fc:	69fb      	ldr	r3, [r7, #28]
 80050fe:	4413      	add	r3, r2
 8005100:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005104:	691b      	ldr	r3, [r3, #16]
 8005106:	69ba      	ldr	r2, [r7, #24]
 8005108:	0151      	lsls	r1, r2, #5
 800510a:	69fa      	ldr	r2, [r7, #28]
 800510c:	440a      	add	r2, r1
 800510e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005112:	0cdb      	lsrs	r3, r3, #19
 8005114:	04db      	lsls	r3, r3, #19
 8005116:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005118:	69bb      	ldr	r3, [r7, #24]
 800511a:	015a      	lsls	r2, r3, #5
 800511c:	69fb      	ldr	r3, [r7, #28]
 800511e:	4413      	add	r3, r2
 8005120:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005124:	691b      	ldr	r3, [r3, #16]
 8005126:	69ba      	ldr	r2, [r7, #24]
 8005128:	0151      	lsls	r1, r2, #5
 800512a:	69fa      	ldr	r2, [r7, #28]
 800512c:	440a      	add	r2, r1
 800512e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005132:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005136:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800513a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800513c:	69bb      	ldr	r3, [r7, #24]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d11a      	bne.n	8005178 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	691a      	ldr	r2, [r3, #16]
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	689b      	ldr	r3, [r3, #8]
 800514a:	429a      	cmp	r2, r3
 800514c:	d903      	bls.n	8005156 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	689a      	ldr	r2, [r3, #8]
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005156:	69bb      	ldr	r3, [r7, #24]
 8005158:	015a      	lsls	r2, r3, #5
 800515a:	69fb      	ldr	r3, [r7, #28]
 800515c:	4413      	add	r3, r2
 800515e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005162:	691b      	ldr	r3, [r3, #16]
 8005164:	69ba      	ldr	r2, [r7, #24]
 8005166:	0151      	lsls	r1, r2, #5
 8005168:	69fa      	ldr	r2, [r7, #28]
 800516a:	440a      	add	r2, r1
 800516c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005170:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005174:	6113      	str	r3, [r2, #16]
 8005176:	e01b      	b.n	80051b0 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005178:	69bb      	ldr	r3, [r7, #24]
 800517a:	015a      	lsls	r2, r3, #5
 800517c:	69fb      	ldr	r3, [r7, #28]
 800517e:	4413      	add	r3, r2
 8005180:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005184:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	6919      	ldr	r1, [r3, #16]
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	440b      	add	r3, r1
 8005190:	1e59      	subs	r1, r3, #1
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	689b      	ldr	r3, [r3, #8]
 8005196:	fbb1 f3f3 	udiv	r3, r1, r3
 800519a:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800519c:	4ba2      	ldr	r3, [pc, #648]	; (8005428 <USB_EPStartXfer+0x3c0>)
 800519e:	400b      	ands	r3, r1
 80051a0:	69b9      	ldr	r1, [r7, #24]
 80051a2:	0148      	lsls	r0, r1, #5
 80051a4:	69f9      	ldr	r1, [r7, #28]
 80051a6:	4401      	add	r1, r0
 80051a8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80051ac:	4313      	orrs	r3, r2
 80051ae:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80051b0:	69bb      	ldr	r3, [r7, #24]
 80051b2:	015a      	lsls	r2, r3, #5
 80051b4:	69fb      	ldr	r3, [r7, #28]
 80051b6:	4413      	add	r3, r2
 80051b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051bc:	691a      	ldr	r2, [r3, #16]
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	691b      	ldr	r3, [r3, #16]
 80051c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80051c6:	69b9      	ldr	r1, [r7, #24]
 80051c8:	0148      	lsls	r0, r1, #5
 80051ca:	69f9      	ldr	r1, [r7, #28]
 80051cc:	4401      	add	r1, r0
 80051ce:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80051d2:	4313      	orrs	r3, r2
 80051d4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	791b      	ldrb	r3, [r3, #4]
 80051da:	2b01      	cmp	r3, #1
 80051dc:	d11f      	bne.n	800521e <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80051de:	69bb      	ldr	r3, [r7, #24]
 80051e0:	015a      	lsls	r2, r3, #5
 80051e2:	69fb      	ldr	r3, [r7, #28]
 80051e4:	4413      	add	r3, r2
 80051e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051ea:	691b      	ldr	r3, [r3, #16]
 80051ec:	69ba      	ldr	r2, [r7, #24]
 80051ee:	0151      	lsls	r1, r2, #5
 80051f0:	69fa      	ldr	r2, [r7, #28]
 80051f2:	440a      	add	r2, r1
 80051f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051f8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80051fc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80051fe:	69bb      	ldr	r3, [r7, #24]
 8005200:	015a      	lsls	r2, r3, #5
 8005202:	69fb      	ldr	r3, [r7, #28]
 8005204:	4413      	add	r3, r2
 8005206:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800520a:	691b      	ldr	r3, [r3, #16]
 800520c:	69ba      	ldr	r2, [r7, #24]
 800520e:	0151      	lsls	r1, r2, #5
 8005210:	69fa      	ldr	r2, [r7, #28]
 8005212:	440a      	add	r2, r1
 8005214:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005218:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800521c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800521e:	79fb      	ldrb	r3, [r7, #7]
 8005220:	2b01      	cmp	r3, #1
 8005222:	d14b      	bne.n	80052bc <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	69db      	ldr	r3, [r3, #28]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d009      	beq.n	8005240 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800522c:	69bb      	ldr	r3, [r7, #24]
 800522e:	015a      	lsls	r2, r3, #5
 8005230:	69fb      	ldr	r3, [r7, #28]
 8005232:	4413      	add	r3, r2
 8005234:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005238:	461a      	mov	r2, r3
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	69db      	ldr	r3, [r3, #28]
 800523e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	791b      	ldrb	r3, [r3, #4]
 8005244:	2b01      	cmp	r3, #1
 8005246:	d128      	bne.n	800529a <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005248:	69fb      	ldr	r3, [r7, #28]
 800524a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800524e:	689b      	ldr	r3, [r3, #8]
 8005250:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005254:	2b00      	cmp	r3, #0
 8005256:	d110      	bne.n	800527a <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005258:	69bb      	ldr	r3, [r7, #24]
 800525a:	015a      	lsls	r2, r3, #5
 800525c:	69fb      	ldr	r3, [r7, #28]
 800525e:	4413      	add	r3, r2
 8005260:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	69ba      	ldr	r2, [r7, #24]
 8005268:	0151      	lsls	r1, r2, #5
 800526a:	69fa      	ldr	r2, [r7, #28]
 800526c:	440a      	add	r2, r1
 800526e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005272:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005276:	6013      	str	r3, [r2, #0]
 8005278:	e00f      	b.n	800529a <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800527a:	69bb      	ldr	r3, [r7, #24]
 800527c:	015a      	lsls	r2, r3, #5
 800527e:	69fb      	ldr	r3, [r7, #28]
 8005280:	4413      	add	r3, r2
 8005282:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	69ba      	ldr	r2, [r7, #24]
 800528a:	0151      	lsls	r1, r2, #5
 800528c:	69fa      	ldr	r2, [r7, #28]
 800528e:	440a      	add	r2, r1
 8005290:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005294:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005298:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800529a:	69bb      	ldr	r3, [r7, #24]
 800529c:	015a      	lsls	r2, r3, #5
 800529e:	69fb      	ldr	r3, [r7, #28]
 80052a0:	4413      	add	r3, r2
 80052a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	69ba      	ldr	r2, [r7, #24]
 80052aa:	0151      	lsls	r1, r2, #5
 80052ac:	69fa      	ldr	r2, [r7, #28]
 80052ae:	440a      	add	r2, r1
 80052b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052b4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80052b8:	6013      	str	r3, [r2, #0]
 80052ba:	e165      	b.n	8005588 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80052bc:	69bb      	ldr	r3, [r7, #24]
 80052be:	015a      	lsls	r2, r3, #5
 80052c0:	69fb      	ldr	r3, [r7, #28]
 80052c2:	4413      	add	r3, r2
 80052c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	69ba      	ldr	r2, [r7, #24]
 80052cc:	0151      	lsls	r1, r2, #5
 80052ce:	69fa      	ldr	r2, [r7, #28]
 80052d0:	440a      	add	r2, r1
 80052d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052d6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80052da:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	791b      	ldrb	r3, [r3, #4]
 80052e0:	2b01      	cmp	r3, #1
 80052e2:	d015      	beq.n	8005310 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	691b      	ldr	r3, [r3, #16]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	f000 814d 	beq.w	8005588 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80052ee:	69fb      	ldr	r3, [r7, #28]
 80052f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	781b      	ldrb	r3, [r3, #0]
 80052fa:	f003 030f 	and.w	r3, r3, #15
 80052fe:	2101      	movs	r1, #1
 8005300:	fa01 f303 	lsl.w	r3, r1, r3
 8005304:	69f9      	ldr	r1, [r7, #28]
 8005306:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800530a:	4313      	orrs	r3, r2
 800530c:	634b      	str	r3, [r1, #52]	; 0x34
 800530e:	e13b      	b.n	8005588 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005310:	69fb      	ldr	r3, [r7, #28]
 8005312:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005316:	689b      	ldr	r3, [r3, #8]
 8005318:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800531c:	2b00      	cmp	r3, #0
 800531e:	d110      	bne.n	8005342 <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005320:	69bb      	ldr	r3, [r7, #24]
 8005322:	015a      	lsls	r2, r3, #5
 8005324:	69fb      	ldr	r3, [r7, #28]
 8005326:	4413      	add	r3, r2
 8005328:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	69ba      	ldr	r2, [r7, #24]
 8005330:	0151      	lsls	r1, r2, #5
 8005332:	69fa      	ldr	r2, [r7, #28]
 8005334:	440a      	add	r2, r1
 8005336:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800533a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800533e:	6013      	str	r3, [r2, #0]
 8005340:	e00f      	b.n	8005362 <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005342:	69bb      	ldr	r3, [r7, #24]
 8005344:	015a      	lsls	r2, r3, #5
 8005346:	69fb      	ldr	r3, [r7, #28]
 8005348:	4413      	add	r3, r2
 800534a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	69ba      	ldr	r2, [r7, #24]
 8005352:	0151      	lsls	r1, r2, #5
 8005354:	69fa      	ldr	r2, [r7, #28]
 8005356:	440a      	add	r2, r1
 8005358:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800535c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005360:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	68d9      	ldr	r1, [r3, #12]
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	781a      	ldrb	r2, [r3, #0]
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	691b      	ldr	r3, [r3, #16]
 800536e:	b298      	uxth	r0, r3
 8005370:	79fb      	ldrb	r3, [r7, #7]
 8005372:	9300      	str	r3, [sp, #0]
 8005374:	4603      	mov	r3, r0
 8005376:	68f8      	ldr	r0, [r7, #12]
 8005378:	f000 f9b8 	bl	80056ec <USB_WritePacket>
 800537c:	e104      	b.n	8005588 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800537e:	69bb      	ldr	r3, [r7, #24]
 8005380:	015a      	lsls	r2, r3, #5
 8005382:	69fb      	ldr	r3, [r7, #28]
 8005384:	4413      	add	r3, r2
 8005386:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800538a:	691b      	ldr	r3, [r3, #16]
 800538c:	69ba      	ldr	r2, [r7, #24]
 800538e:	0151      	lsls	r1, r2, #5
 8005390:	69fa      	ldr	r2, [r7, #28]
 8005392:	440a      	add	r2, r1
 8005394:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005398:	0cdb      	lsrs	r3, r3, #19
 800539a:	04db      	lsls	r3, r3, #19
 800539c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800539e:	69bb      	ldr	r3, [r7, #24]
 80053a0:	015a      	lsls	r2, r3, #5
 80053a2:	69fb      	ldr	r3, [r7, #28]
 80053a4:	4413      	add	r3, r2
 80053a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053aa:	691b      	ldr	r3, [r3, #16]
 80053ac:	69ba      	ldr	r2, [r7, #24]
 80053ae:	0151      	lsls	r1, r2, #5
 80053b0:	69fa      	ldr	r2, [r7, #28]
 80053b2:	440a      	add	r2, r1
 80053b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053b8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80053bc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80053c0:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80053c2:	69bb      	ldr	r3, [r7, #24]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d131      	bne.n	800542c <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	691b      	ldr	r3, [r3, #16]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d003      	beq.n	80053d8 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	689a      	ldr	r2, [r3, #8]
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	689a      	ldr	r2, [r3, #8]
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80053e0:	69bb      	ldr	r3, [r7, #24]
 80053e2:	015a      	lsls	r2, r3, #5
 80053e4:	69fb      	ldr	r3, [r7, #28]
 80053e6:	4413      	add	r3, r2
 80053e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053ec:	691a      	ldr	r2, [r3, #16]
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	6a1b      	ldr	r3, [r3, #32]
 80053f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053f6:	69b9      	ldr	r1, [r7, #24]
 80053f8:	0148      	lsls	r0, r1, #5
 80053fa:	69f9      	ldr	r1, [r7, #28]
 80053fc:	4401      	add	r1, r0
 80053fe:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005402:	4313      	orrs	r3, r2
 8005404:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005406:	69bb      	ldr	r3, [r7, #24]
 8005408:	015a      	lsls	r2, r3, #5
 800540a:	69fb      	ldr	r3, [r7, #28]
 800540c:	4413      	add	r3, r2
 800540e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005412:	691b      	ldr	r3, [r3, #16]
 8005414:	69ba      	ldr	r2, [r7, #24]
 8005416:	0151      	lsls	r1, r2, #5
 8005418:	69fa      	ldr	r2, [r7, #28]
 800541a:	440a      	add	r2, r1
 800541c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005420:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005424:	6113      	str	r3, [r2, #16]
 8005426:	e061      	b.n	80054ec <USB_EPStartXfer+0x484>
 8005428:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	691b      	ldr	r3, [r3, #16]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d123      	bne.n	800547c <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005434:	69bb      	ldr	r3, [r7, #24]
 8005436:	015a      	lsls	r2, r3, #5
 8005438:	69fb      	ldr	r3, [r7, #28]
 800543a:	4413      	add	r3, r2
 800543c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005440:	691a      	ldr	r2, [r3, #16]
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	689b      	ldr	r3, [r3, #8]
 8005446:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800544a:	69b9      	ldr	r1, [r7, #24]
 800544c:	0148      	lsls	r0, r1, #5
 800544e:	69f9      	ldr	r1, [r7, #28]
 8005450:	4401      	add	r1, r0
 8005452:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005456:	4313      	orrs	r3, r2
 8005458:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800545a:	69bb      	ldr	r3, [r7, #24]
 800545c:	015a      	lsls	r2, r3, #5
 800545e:	69fb      	ldr	r3, [r7, #28]
 8005460:	4413      	add	r3, r2
 8005462:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005466:	691b      	ldr	r3, [r3, #16]
 8005468:	69ba      	ldr	r2, [r7, #24]
 800546a:	0151      	lsls	r1, r2, #5
 800546c:	69fa      	ldr	r2, [r7, #28]
 800546e:	440a      	add	r2, r1
 8005470:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005474:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005478:	6113      	str	r3, [r2, #16]
 800547a:	e037      	b.n	80054ec <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	691a      	ldr	r2, [r3, #16]
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	689b      	ldr	r3, [r3, #8]
 8005484:	4413      	add	r3, r2
 8005486:	1e5a      	subs	r2, r3, #1
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	689b      	ldr	r3, [r3, #8]
 800548c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005490:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	689b      	ldr	r3, [r3, #8]
 8005496:	8afa      	ldrh	r2, [r7, #22]
 8005498:	fb03 f202 	mul.w	r2, r3, r2
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80054a0:	69bb      	ldr	r3, [r7, #24]
 80054a2:	015a      	lsls	r2, r3, #5
 80054a4:	69fb      	ldr	r3, [r7, #28]
 80054a6:	4413      	add	r3, r2
 80054a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054ac:	691a      	ldr	r2, [r3, #16]
 80054ae:	8afb      	ldrh	r3, [r7, #22]
 80054b0:	04d9      	lsls	r1, r3, #19
 80054b2:	4b38      	ldr	r3, [pc, #224]	; (8005594 <USB_EPStartXfer+0x52c>)
 80054b4:	400b      	ands	r3, r1
 80054b6:	69b9      	ldr	r1, [r7, #24]
 80054b8:	0148      	lsls	r0, r1, #5
 80054ba:	69f9      	ldr	r1, [r7, #28]
 80054bc:	4401      	add	r1, r0
 80054be:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80054c2:	4313      	orrs	r3, r2
 80054c4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80054c6:	69bb      	ldr	r3, [r7, #24]
 80054c8:	015a      	lsls	r2, r3, #5
 80054ca:	69fb      	ldr	r3, [r7, #28]
 80054cc:	4413      	add	r3, r2
 80054ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054d2:	691a      	ldr	r2, [r3, #16]
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	6a1b      	ldr	r3, [r3, #32]
 80054d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80054dc:	69b9      	ldr	r1, [r7, #24]
 80054de:	0148      	lsls	r0, r1, #5
 80054e0:	69f9      	ldr	r1, [r7, #28]
 80054e2:	4401      	add	r1, r0
 80054e4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80054e8:	4313      	orrs	r3, r2
 80054ea:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80054ec:	79fb      	ldrb	r3, [r7, #7]
 80054ee:	2b01      	cmp	r3, #1
 80054f0:	d10d      	bne.n	800550e <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	68db      	ldr	r3, [r3, #12]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d009      	beq.n	800550e <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	68d9      	ldr	r1, [r3, #12]
 80054fe:	69bb      	ldr	r3, [r7, #24]
 8005500:	015a      	lsls	r2, r3, #5
 8005502:	69fb      	ldr	r3, [r7, #28]
 8005504:	4413      	add	r3, r2
 8005506:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800550a:	460a      	mov	r2, r1
 800550c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	791b      	ldrb	r3, [r3, #4]
 8005512:	2b01      	cmp	r3, #1
 8005514:	d128      	bne.n	8005568 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005516:	69fb      	ldr	r3, [r7, #28]
 8005518:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800551c:	689b      	ldr	r3, [r3, #8]
 800551e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005522:	2b00      	cmp	r3, #0
 8005524:	d110      	bne.n	8005548 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005526:	69bb      	ldr	r3, [r7, #24]
 8005528:	015a      	lsls	r2, r3, #5
 800552a:	69fb      	ldr	r3, [r7, #28]
 800552c:	4413      	add	r3, r2
 800552e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	69ba      	ldr	r2, [r7, #24]
 8005536:	0151      	lsls	r1, r2, #5
 8005538:	69fa      	ldr	r2, [r7, #28]
 800553a:	440a      	add	r2, r1
 800553c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005540:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005544:	6013      	str	r3, [r2, #0]
 8005546:	e00f      	b.n	8005568 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005548:	69bb      	ldr	r3, [r7, #24]
 800554a:	015a      	lsls	r2, r3, #5
 800554c:	69fb      	ldr	r3, [r7, #28]
 800554e:	4413      	add	r3, r2
 8005550:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	69ba      	ldr	r2, [r7, #24]
 8005558:	0151      	lsls	r1, r2, #5
 800555a:	69fa      	ldr	r2, [r7, #28]
 800555c:	440a      	add	r2, r1
 800555e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005562:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005566:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005568:	69bb      	ldr	r3, [r7, #24]
 800556a:	015a      	lsls	r2, r3, #5
 800556c:	69fb      	ldr	r3, [r7, #28]
 800556e:	4413      	add	r3, r2
 8005570:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	69ba      	ldr	r2, [r7, #24]
 8005578:	0151      	lsls	r1, r2, #5
 800557a:	69fa      	ldr	r2, [r7, #28]
 800557c:	440a      	add	r2, r1
 800557e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005582:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005586:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005588:	2300      	movs	r3, #0
}
 800558a:	4618      	mov	r0, r3
 800558c:	3720      	adds	r7, #32
 800558e:	46bd      	mov	sp, r7
 8005590:	bd80      	pop	{r7, pc}
 8005592:	bf00      	nop
 8005594:	1ff80000 	.word	0x1ff80000

08005598 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005598:	b480      	push	{r7}
 800559a:	b087      	sub	sp, #28
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
 80055a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80055a2:	2300      	movs	r3, #0
 80055a4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80055a6:	2300      	movs	r3, #0
 80055a8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	785b      	ldrb	r3, [r3, #1]
 80055b2:	2b01      	cmp	r3, #1
 80055b4:	d14a      	bne.n	800564c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	781b      	ldrb	r3, [r3, #0]
 80055ba:	015a      	lsls	r2, r3, #5
 80055bc:	693b      	ldr	r3, [r7, #16]
 80055be:	4413      	add	r3, r2
 80055c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80055ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80055ce:	f040 8086 	bne.w	80056de <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	781b      	ldrb	r3, [r3, #0]
 80055d6:	015a      	lsls	r2, r3, #5
 80055d8:	693b      	ldr	r3, [r7, #16]
 80055da:	4413      	add	r3, r2
 80055dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	683a      	ldr	r2, [r7, #0]
 80055e4:	7812      	ldrb	r2, [r2, #0]
 80055e6:	0151      	lsls	r1, r2, #5
 80055e8:	693a      	ldr	r2, [r7, #16]
 80055ea:	440a      	add	r2, r1
 80055ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055f0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80055f4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	781b      	ldrb	r3, [r3, #0]
 80055fa:	015a      	lsls	r2, r3, #5
 80055fc:	693b      	ldr	r3, [r7, #16]
 80055fe:	4413      	add	r3, r2
 8005600:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	683a      	ldr	r2, [r7, #0]
 8005608:	7812      	ldrb	r2, [r2, #0]
 800560a:	0151      	lsls	r1, r2, #5
 800560c:	693a      	ldr	r2, [r7, #16]
 800560e:	440a      	add	r2, r1
 8005610:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005614:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005618:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	3301      	adds	r3, #1
 800561e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	f242 7210 	movw	r2, #10000	; 0x2710
 8005626:	4293      	cmp	r3, r2
 8005628:	d902      	bls.n	8005630 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800562a:	2301      	movs	r3, #1
 800562c:	75fb      	strb	r3, [r7, #23]
          break;
 800562e:	e056      	b.n	80056de <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	781b      	ldrb	r3, [r3, #0]
 8005634:	015a      	lsls	r2, r3, #5
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	4413      	add	r3, r2
 800563a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005644:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005648:	d0e7      	beq.n	800561a <USB_EPStopXfer+0x82>
 800564a:	e048      	b.n	80056de <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	781b      	ldrb	r3, [r3, #0]
 8005650:	015a      	lsls	r2, r3, #5
 8005652:	693b      	ldr	r3, [r7, #16]
 8005654:	4413      	add	r3, r2
 8005656:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005660:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005664:	d13b      	bne.n	80056de <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	781b      	ldrb	r3, [r3, #0]
 800566a:	015a      	lsls	r2, r3, #5
 800566c:	693b      	ldr	r3, [r7, #16]
 800566e:	4413      	add	r3, r2
 8005670:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	683a      	ldr	r2, [r7, #0]
 8005678:	7812      	ldrb	r2, [r2, #0]
 800567a:	0151      	lsls	r1, r2, #5
 800567c:	693a      	ldr	r2, [r7, #16]
 800567e:	440a      	add	r2, r1
 8005680:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005684:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005688:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	781b      	ldrb	r3, [r3, #0]
 800568e:	015a      	lsls	r2, r3, #5
 8005690:	693b      	ldr	r3, [r7, #16]
 8005692:	4413      	add	r3, r2
 8005694:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	683a      	ldr	r2, [r7, #0]
 800569c:	7812      	ldrb	r2, [r2, #0]
 800569e:	0151      	lsls	r1, r2, #5
 80056a0:	693a      	ldr	r2, [r7, #16]
 80056a2:	440a      	add	r2, r1
 80056a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056a8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80056ac:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	3301      	adds	r3, #1
 80056b2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	f242 7210 	movw	r2, #10000	; 0x2710
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d902      	bls.n	80056c4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80056be:	2301      	movs	r3, #1
 80056c0:	75fb      	strb	r3, [r7, #23]
          break;
 80056c2:	e00c      	b.n	80056de <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	781b      	ldrb	r3, [r3, #0]
 80056c8:	015a      	lsls	r2, r3, #5
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	4413      	add	r3, r2
 80056ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80056d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80056dc:	d0e7      	beq.n	80056ae <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80056de:	7dfb      	ldrb	r3, [r7, #23]
}
 80056e0:	4618      	mov	r0, r3
 80056e2:	371c      	adds	r7, #28
 80056e4:	46bd      	mov	sp, r7
 80056e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ea:	4770      	bx	lr

080056ec <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b089      	sub	sp, #36	; 0x24
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	60f8      	str	r0, [r7, #12]
 80056f4:	60b9      	str	r1, [r7, #8]
 80056f6:	4611      	mov	r1, r2
 80056f8:	461a      	mov	r2, r3
 80056fa:	460b      	mov	r3, r1
 80056fc:	71fb      	strb	r3, [r7, #7]
 80056fe:	4613      	mov	r3, r2
 8005700:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800570a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800570e:	2b00      	cmp	r3, #0
 8005710:	d123      	bne.n	800575a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005712:	88bb      	ldrh	r3, [r7, #4]
 8005714:	3303      	adds	r3, #3
 8005716:	089b      	lsrs	r3, r3, #2
 8005718:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800571a:	2300      	movs	r3, #0
 800571c:	61bb      	str	r3, [r7, #24]
 800571e:	e018      	b.n	8005752 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005720:	79fb      	ldrb	r3, [r7, #7]
 8005722:	031a      	lsls	r2, r3, #12
 8005724:	697b      	ldr	r3, [r7, #20]
 8005726:	4413      	add	r3, r2
 8005728:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800572c:	461a      	mov	r2, r3
 800572e:	69fb      	ldr	r3, [r7, #28]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005734:	69fb      	ldr	r3, [r7, #28]
 8005736:	3301      	adds	r3, #1
 8005738:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800573a:	69fb      	ldr	r3, [r7, #28]
 800573c:	3301      	adds	r3, #1
 800573e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005740:	69fb      	ldr	r3, [r7, #28]
 8005742:	3301      	adds	r3, #1
 8005744:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005746:	69fb      	ldr	r3, [r7, #28]
 8005748:	3301      	adds	r3, #1
 800574a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800574c:	69bb      	ldr	r3, [r7, #24]
 800574e:	3301      	adds	r3, #1
 8005750:	61bb      	str	r3, [r7, #24]
 8005752:	69ba      	ldr	r2, [r7, #24]
 8005754:	693b      	ldr	r3, [r7, #16]
 8005756:	429a      	cmp	r2, r3
 8005758:	d3e2      	bcc.n	8005720 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800575a:	2300      	movs	r3, #0
}
 800575c:	4618      	mov	r0, r3
 800575e:	3724      	adds	r7, #36	; 0x24
 8005760:	46bd      	mov	sp, r7
 8005762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005766:	4770      	bx	lr

08005768 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005768:	b480      	push	{r7}
 800576a:	b08b      	sub	sp, #44	; 0x2c
 800576c:	af00      	add	r7, sp, #0
 800576e:	60f8      	str	r0, [r7, #12]
 8005770:	60b9      	str	r1, [r7, #8]
 8005772:	4613      	mov	r3, r2
 8005774:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800577e:	88fb      	ldrh	r3, [r7, #6]
 8005780:	089b      	lsrs	r3, r3, #2
 8005782:	b29b      	uxth	r3, r3
 8005784:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005786:	88fb      	ldrh	r3, [r7, #6]
 8005788:	f003 0303 	and.w	r3, r3, #3
 800578c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800578e:	2300      	movs	r3, #0
 8005790:	623b      	str	r3, [r7, #32]
 8005792:	e014      	b.n	80057be <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005794:	69bb      	ldr	r3, [r7, #24]
 8005796:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800579a:	681a      	ldr	r2, [r3, #0]
 800579c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800579e:	601a      	str	r2, [r3, #0]
    pDest++;
 80057a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a2:	3301      	adds	r3, #1
 80057a4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80057a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a8:	3301      	adds	r3, #1
 80057aa:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80057ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ae:	3301      	adds	r3, #1
 80057b0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80057b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b4:	3301      	adds	r3, #1
 80057b6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80057b8:	6a3b      	ldr	r3, [r7, #32]
 80057ba:	3301      	adds	r3, #1
 80057bc:	623b      	str	r3, [r7, #32]
 80057be:	6a3a      	ldr	r2, [r7, #32]
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	429a      	cmp	r2, r3
 80057c4:	d3e6      	bcc.n	8005794 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80057c6:	8bfb      	ldrh	r3, [r7, #30]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d01e      	beq.n	800580a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80057cc:	2300      	movs	r3, #0
 80057ce:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80057d0:	69bb      	ldr	r3, [r7, #24]
 80057d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057d6:	461a      	mov	r2, r3
 80057d8:	f107 0310 	add.w	r3, r7, #16
 80057dc:	6812      	ldr	r2, [r2, #0]
 80057de:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80057e0:	693a      	ldr	r2, [r7, #16]
 80057e2:	6a3b      	ldr	r3, [r7, #32]
 80057e4:	b2db      	uxtb	r3, r3
 80057e6:	00db      	lsls	r3, r3, #3
 80057e8:	fa22 f303 	lsr.w	r3, r2, r3
 80057ec:	b2da      	uxtb	r2, r3
 80057ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f0:	701a      	strb	r2, [r3, #0]
      i++;
 80057f2:	6a3b      	ldr	r3, [r7, #32]
 80057f4:	3301      	adds	r3, #1
 80057f6:	623b      	str	r3, [r7, #32]
      pDest++;
 80057f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057fa:	3301      	adds	r3, #1
 80057fc:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80057fe:	8bfb      	ldrh	r3, [r7, #30]
 8005800:	3b01      	subs	r3, #1
 8005802:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005804:	8bfb      	ldrh	r3, [r7, #30]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d1ea      	bne.n	80057e0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800580a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800580c:	4618      	mov	r0, r3
 800580e:	372c      	adds	r7, #44	; 0x2c
 8005810:	46bd      	mov	sp, r7
 8005812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005816:	4770      	bx	lr

08005818 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005818:	b480      	push	{r7}
 800581a:	b085      	sub	sp, #20
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
 8005820:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	781b      	ldrb	r3, [r3, #0]
 800582a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	785b      	ldrb	r3, [r3, #1]
 8005830:	2b01      	cmp	r3, #1
 8005832:	d12c      	bne.n	800588e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	015a      	lsls	r2, r3, #5
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	4413      	add	r3, r2
 800583c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	2b00      	cmp	r3, #0
 8005844:	db12      	blt.n	800586c <USB_EPSetStall+0x54>
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d00f      	beq.n	800586c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	015a      	lsls	r2, r3, #5
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	4413      	add	r3, r2
 8005854:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	68ba      	ldr	r2, [r7, #8]
 800585c:	0151      	lsls	r1, r2, #5
 800585e:	68fa      	ldr	r2, [r7, #12]
 8005860:	440a      	add	r2, r1
 8005862:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005866:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800586a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	015a      	lsls	r2, r3, #5
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	4413      	add	r3, r2
 8005874:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	68ba      	ldr	r2, [r7, #8]
 800587c:	0151      	lsls	r1, r2, #5
 800587e:	68fa      	ldr	r2, [r7, #12]
 8005880:	440a      	add	r2, r1
 8005882:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005886:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800588a:	6013      	str	r3, [r2, #0]
 800588c:	e02b      	b.n	80058e6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	015a      	lsls	r2, r3, #5
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	4413      	add	r3, r2
 8005896:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	2b00      	cmp	r3, #0
 800589e:	db12      	blt.n	80058c6 <USB_EPSetStall+0xae>
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d00f      	beq.n	80058c6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	015a      	lsls	r2, r3, #5
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	4413      	add	r3, r2
 80058ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	68ba      	ldr	r2, [r7, #8]
 80058b6:	0151      	lsls	r1, r2, #5
 80058b8:	68fa      	ldr	r2, [r7, #12]
 80058ba:	440a      	add	r2, r1
 80058bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058c0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80058c4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	015a      	lsls	r2, r3, #5
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	4413      	add	r3, r2
 80058ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	68ba      	ldr	r2, [r7, #8]
 80058d6:	0151      	lsls	r1, r2, #5
 80058d8:	68fa      	ldr	r2, [r7, #12]
 80058da:	440a      	add	r2, r1
 80058dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058e0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80058e4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80058e6:	2300      	movs	r3, #0
}
 80058e8:	4618      	mov	r0, r3
 80058ea:	3714      	adds	r7, #20
 80058ec:	46bd      	mov	sp, r7
 80058ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f2:	4770      	bx	lr

080058f4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80058f4:	b480      	push	{r7}
 80058f6:	b085      	sub	sp, #20
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
 80058fc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	781b      	ldrb	r3, [r3, #0]
 8005906:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	785b      	ldrb	r3, [r3, #1]
 800590c:	2b01      	cmp	r3, #1
 800590e:	d128      	bne.n	8005962 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	015a      	lsls	r2, r3, #5
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	4413      	add	r3, r2
 8005918:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	68ba      	ldr	r2, [r7, #8]
 8005920:	0151      	lsls	r1, r2, #5
 8005922:	68fa      	ldr	r2, [r7, #12]
 8005924:	440a      	add	r2, r1
 8005926:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800592a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800592e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	791b      	ldrb	r3, [r3, #4]
 8005934:	2b03      	cmp	r3, #3
 8005936:	d003      	beq.n	8005940 <USB_EPClearStall+0x4c>
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	791b      	ldrb	r3, [r3, #4]
 800593c:	2b02      	cmp	r3, #2
 800593e:	d138      	bne.n	80059b2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	015a      	lsls	r2, r3, #5
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	4413      	add	r3, r2
 8005948:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	68ba      	ldr	r2, [r7, #8]
 8005950:	0151      	lsls	r1, r2, #5
 8005952:	68fa      	ldr	r2, [r7, #12]
 8005954:	440a      	add	r2, r1
 8005956:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800595a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800595e:	6013      	str	r3, [r2, #0]
 8005960:	e027      	b.n	80059b2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	015a      	lsls	r2, r3, #5
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	4413      	add	r3, r2
 800596a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	68ba      	ldr	r2, [r7, #8]
 8005972:	0151      	lsls	r1, r2, #5
 8005974:	68fa      	ldr	r2, [r7, #12]
 8005976:	440a      	add	r2, r1
 8005978:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800597c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005980:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	791b      	ldrb	r3, [r3, #4]
 8005986:	2b03      	cmp	r3, #3
 8005988:	d003      	beq.n	8005992 <USB_EPClearStall+0x9e>
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	791b      	ldrb	r3, [r3, #4]
 800598e:	2b02      	cmp	r3, #2
 8005990:	d10f      	bne.n	80059b2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	015a      	lsls	r2, r3, #5
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	4413      	add	r3, r2
 800599a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	68ba      	ldr	r2, [r7, #8]
 80059a2:	0151      	lsls	r1, r2, #5
 80059a4:	68fa      	ldr	r2, [r7, #12]
 80059a6:	440a      	add	r2, r1
 80059a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059b0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80059b2:	2300      	movs	r3, #0
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	3714      	adds	r7, #20
 80059b8:	46bd      	mov	sp, r7
 80059ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059be:	4770      	bx	lr

080059c0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80059c0:	b480      	push	{r7}
 80059c2:	b085      	sub	sp, #20
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
 80059c8:	460b      	mov	r3, r1
 80059ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	68fa      	ldr	r2, [r7, #12]
 80059da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80059de:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80059e2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059ea:	681a      	ldr	r2, [r3, #0]
 80059ec:	78fb      	ldrb	r3, [r7, #3]
 80059ee:	011b      	lsls	r3, r3, #4
 80059f0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80059f4:	68f9      	ldr	r1, [r7, #12]
 80059f6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80059fa:	4313      	orrs	r3, r2
 80059fc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80059fe:	2300      	movs	r3, #0
}
 8005a00:	4618      	mov	r0, r3
 8005a02:	3714      	adds	r7, #20
 8005a04:	46bd      	mov	sp, r7
 8005a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0a:	4770      	bx	lr

08005a0c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b085      	sub	sp, #20
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	68fa      	ldr	r2, [r7, #12]
 8005a22:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005a26:	f023 0303 	bic.w	r3, r3, #3
 8005a2a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	68fa      	ldr	r2, [r7, #12]
 8005a36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a3a:	f023 0302 	bic.w	r3, r3, #2
 8005a3e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005a40:	2300      	movs	r3, #0
}
 8005a42:	4618      	mov	r0, r3
 8005a44:	3714      	adds	r7, #20
 8005a46:	46bd      	mov	sp, r7
 8005a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4c:	4770      	bx	lr

08005a4e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005a4e:	b480      	push	{r7}
 8005a50:	b085      	sub	sp, #20
 8005a52:	af00      	add	r7, sp, #0
 8005a54:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	68fa      	ldr	r2, [r7, #12]
 8005a64:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005a68:	f023 0303 	bic.w	r3, r3, #3
 8005a6c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	68fa      	ldr	r2, [r7, #12]
 8005a78:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a7c:	f043 0302 	orr.w	r3, r3, #2
 8005a80:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005a82:	2300      	movs	r3, #0
}
 8005a84:	4618      	mov	r0, r3
 8005a86:	3714      	adds	r7, #20
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8e:	4770      	bx	lr

08005a90 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005a90:	b480      	push	{r7}
 8005a92:	b085      	sub	sp, #20
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	695b      	ldr	r3, [r3, #20]
 8005a9c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	699b      	ldr	r3, [r3, #24]
 8005aa2:	68fa      	ldr	r2, [r7, #12]
 8005aa4:	4013      	ands	r3, r2
 8005aa6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
}
 8005aaa:	4618      	mov	r0, r3
 8005aac:	3714      	adds	r7, #20
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab4:	4770      	bx	lr

08005ab6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005ab6:	b480      	push	{r7}
 8005ab8:	b085      	sub	sp, #20
 8005aba:	af00      	add	r7, sp, #0
 8005abc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ac8:	699b      	ldr	r3, [r3, #24]
 8005aca:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ad2:	69db      	ldr	r3, [r3, #28]
 8005ad4:	68ba      	ldr	r2, [r7, #8]
 8005ad6:	4013      	ands	r3, r2
 8005ad8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	0c1b      	lsrs	r3, r3, #16
}
 8005ade:	4618      	mov	r0, r3
 8005ae0:	3714      	adds	r7, #20
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae8:	4770      	bx	lr

08005aea <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005aea:	b480      	push	{r7}
 8005aec:	b085      	sub	sp, #20
 8005aee:	af00      	add	r7, sp, #0
 8005af0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005afc:	699b      	ldr	r3, [r3, #24]
 8005afe:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b06:	69db      	ldr	r3, [r3, #28]
 8005b08:	68ba      	ldr	r2, [r7, #8]
 8005b0a:	4013      	ands	r3, r2
 8005b0c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005b0e:	68bb      	ldr	r3, [r7, #8]
 8005b10:	b29b      	uxth	r3, r3
}
 8005b12:	4618      	mov	r0, r3
 8005b14:	3714      	adds	r7, #20
 8005b16:	46bd      	mov	sp, r7
 8005b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1c:	4770      	bx	lr

08005b1e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005b1e:	b480      	push	{r7}
 8005b20:	b085      	sub	sp, #20
 8005b22:	af00      	add	r7, sp, #0
 8005b24:	6078      	str	r0, [r7, #4]
 8005b26:	460b      	mov	r3, r1
 8005b28:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005b2e:	78fb      	ldrb	r3, [r7, #3]
 8005b30:	015a      	lsls	r2, r3, #5
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	4413      	add	r3, r2
 8005b36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b3a:	689b      	ldr	r3, [r3, #8]
 8005b3c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b44:	695b      	ldr	r3, [r3, #20]
 8005b46:	68ba      	ldr	r2, [r7, #8]
 8005b48:	4013      	ands	r3, r2
 8005b4a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005b4c:	68bb      	ldr	r3, [r7, #8]
}
 8005b4e:	4618      	mov	r0, r3
 8005b50:	3714      	adds	r7, #20
 8005b52:	46bd      	mov	sp, r7
 8005b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b58:	4770      	bx	lr

08005b5a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005b5a:	b480      	push	{r7}
 8005b5c:	b087      	sub	sp, #28
 8005b5e:	af00      	add	r7, sp, #0
 8005b60:	6078      	str	r0, [r7, #4]
 8005b62:	460b      	mov	r3, r1
 8005b64:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b70:	691b      	ldr	r3, [r3, #16]
 8005b72:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005b74:	697b      	ldr	r3, [r7, #20]
 8005b76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b7c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005b7e:	78fb      	ldrb	r3, [r7, #3]
 8005b80:	f003 030f 	and.w	r3, r3, #15
 8005b84:	68fa      	ldr	r2, [r7, #12]
 8005b86:	fa22 f303 	lsr.w	r3, r2, r3
 8005b8a:	01db      	lsls	r3, r3, #7
 8005b8c:	b2db      	uxtb	r3, r3
 8005b8e:	693a      	ldr	r2, [r7, #16]
 8005b90:	4313      	orrs	r3, r2
 8005b92:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005b94:	78fb      	ldrb	r3, [r7, #3]
 8005b96:	015a      	lsls	r2, r3, #5
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	4413      	add	r3, r2
 8005b9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ba0:	689b      	ldr	r3, [r3, #8]
 8005ba2:	693a      	ldr	r2, [r7, #16]
 8005ba4:	4013      	ands	r3, r2
 8005ba6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005ba8:	68bb      	ldr	r3, [r7, #8]
}
 8005baa:	4618      	mov	r0, r3
 8005bac:	371c      	adds	r7, #28
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb4:	4770      	bx	lr

08005bb6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005bb6:	b480      	push	{r7}
 8005bb8:	b083      	sub	sp, #12
 8005bba:	af00      	add	r7, sp, #0
 8005bbc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	695b      	ldr	r3, [r3, #20]
 8005bc2:	f003 0301 	and.w	r3, r3, #1
}
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	370c      	adds	r7, #12
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd0:	4770      	bx	lr

08005bd2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8005bd2:	b480      	push	{r7}
 8005bd4:	b085      	sub	sp, #20
 8005bd6:	af00      	add	r7, sp, #0
 8005bd8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	68fa      	ldr	r2, [r7, #12]
 8005be8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bec:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005bf0:	f023 0307 	bic.w	r3, r3, #7
 8005bf4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	68fa      	ldr	r2, [r7, #12]
 8005c00:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c08:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005c0a:	2300      	movs	r3, #0
}
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	3714      	adds	r7, #20
 8005c10:	46bd      	mov	sp, r7
 8005c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c16:	4770      	bx	lr

08005c18 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b087      	sub	sp, #28
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	60f8      	str	r0, [r7, #12]
 8005c20:	460b      	mov	r3, r1
 8005c22:	607a      	str	r2, [r7, #4]
 8005c24:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	333c      	adds	r3, #60	; 0x3c
 8005c2e:	3304      	adds	r3, #4
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005c34:	693b      	ldr	r3, [r7, #16]
 8005c36:	4a26      	ldr	r2, [pc, #152]	; (8005cd0 <USB_EP0_OutStart+0xb8>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d90a      	bls.n	8005c52 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c48:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c4c:	d101      	bne.n	8005c52 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005c4e:	2300      	movs	r3, #0
 8005c50:	e037      	b.n	8005cc2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c58:	461a      	mov	r2, r3
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005c5e:	697b      	ldr	r3, [r7, #20]
 8005c60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c64:	691b      	ldr	r3, [r3, #16]
 8005c66:	697a      	ldr	r2, [r7, #20]
 8005c68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c6c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005c70:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c78:	691b      	ldr	r3, [r3, #16]
 8005c7a:	697a      	ldr	r2, [r7, #20]
 8005c7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c80:	f043 0318 	orr.w	r3, r3, #24
 8005c84:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005c86:	697b      	ldr	r3, [r7, #20]
 8005c88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c8c:	691b      	ldr	r3, [r3, #16]
 8005c8e:	697a      	ldr	r2, [r7, #20]
 8005c90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c94:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005c98:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005c9a:	7afb      	ldrb	r3, [r7, #11]
 8005c9c:	2b01      	cmp	r3, #1
 8005c9e:	d10f      	bne.n	8005cc0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005ca0:	697b      	ldr	r3, [r7, #20]
 8005ca2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ca6:	461a      	mov	r2, r3
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005cac:	697b      	ldr	r3, [r7, #20]
 8005cae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	697a      	ldr	r2, [r7, #20]
 8005cb6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cba:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005cbe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005cc0:	2300      	movs	r3, #0
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	371c      	adds	r7, #28
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ccc:	4770      	bx	lr
 8005cce:	bf00      	nop
 8005cd0:	4f54300a 	.word	0x4f54300a

08005cd4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b085      	sub	sp, #20
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005cdc:	2300      	movs	r3, #0
 8005cde:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	3301      	adds	r3, #1
 8005ce4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005cec:	d901      	bls.n	8005cf2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005cee:	2303      	movs	r3, #3
 8005cf0:	e01b      	b.n	8005d2a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	691b      	ldr	r3, [r3, #16]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	daf2      	bge.n	8005ce0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	691b      	ldr	r3, [r3, #16]
 8005d02:	f043 0201 	orr.w	r2, r3, #1
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	3301      	adds	r3, #1
 8005d0e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005d16:	d901      	bls.n	8005d1c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005d18:	2303      	movs	r3, #3
 8005d1a:	e006      	b.n	8005d2a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	691b      	ldr	r3, [r3, #16]
 8005d20:	f003 0301 	and.w	r3, r3, #1
 8005d24:	2b01      	cmp	r3, #1
 8005d26:	d0f0      	beq.n	8005d0a <USB_CoreReset+0x36>

  return HAL_OK;
 8005d28:	2300      	movs	r3, #0
}
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	3714      	adds	r7, #20
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d34:	4770      	bx	lr
	...

08005d38 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b084      	sub	sp, #16
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
 8005d40:	460b      	mov	r3, r1
 8005d42:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005d44:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005d48:	f003 fea8 	bl	8009a9c <USBD_static_malloc>
 8005d4c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d109      	bne.n	8005d68 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	32b0      	adds	r2, #176	; 0xb0
 8005d5e:	2100      	movs	r1, #0
 8005d60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005d64:	2302      	movs	r3, #2
 8005d66:	e0d4      	b.n	8005f12 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8005d68:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8005d6c:	2100      	movs	r1, #0
 8005d6e:	68f8      	ldr	r0, [r7, #12]
 8005d70:	f003 fed8 	bl	8009b24 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	32b0      	adds	r2, #176	; 0xb0
 8005d7e:	68f9      	ldr	r1, [r7, #12]
 8005d80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	32b0      	adds	r2, #176	; 0xb0
 8005d8e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	7c1b      	ldrb	r3, [r3, #16]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d138      	bne.n	8005e12 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005da0:	4b5e      	ldr	r3, [pc, #376]	; (8005f1c <USBD_CDC_Init+0x1e4>)
 8005da2:	7819      	ldrb	r1, [r3, #0]
 8005da4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005da8:	2202      	movs	r2, #2
 8005daa:	6878      	ldr	r0, [r7, #4]
 8005dac:	f003 fd53 	bl	8009856 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005db0:	4b5a      	ldr	r3, [pc, #360]	; (8005f1c <USBD_CDC_Init+0x1e4>)
 8005db2:	781b      	ldrb	r3, [r3, #0]
 8005db4:	f003 020f 	and.w	r2, r3, #15
 8005db8:	6879      	ldr	r1, [r7, #4]
 8005dba:	4613      	mov	r3, r2
 8005dbc:	009b      	lsls	r3, r3, #2
 8005dbe:	4413      	add	r3, r2
 8005dc0:	009b      	lsls	r3, r3, #2
 8005dc2:	440b      	add	r3, r1
 8005dc4:	3324      	adds	r3, #36	; 0x24
 8005dc6:	2201      	movs	r2, #1
 8005dc8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005dca:	4b55      	ldr	r3, [pc, #340]	; (8005f20 <USBD_CDC_Init+0x1e8>)
 8005dcc:	7819      	ldrb	r1, [r3, #0]
 8005dce:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005dd2:	2202      	movs	r2, #2
 8005dd4:	6878      	ldr	r0, [r7, #4]
 8005dd6:	f003 fd3e 	bl	8009856 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005dda:	4b51      	ldr	r3, [pc, #324]	; (8005f20 <USBD_CDC_Init+0x1e8>)
 8005ddc:	781b      	ldrb	r3, [r3, #0]
 8005dde:	f003 020f 	and.w	r2, r3, #15
 8005de2:	6879      	ldr	r1, [r7, #4]
 8005de4:	4613      	mov	r3, r2
 8005de6:	009b      	lsls	r3, r3, #2
 8005de8:	4413      	add	r3, r2
 8005dea:	009b      	lsls	r3, r3, #2
 8005dec:	440b      	add	r3, r1
 8005dee:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005df2:	2201      	movs	r2, #1
 8005df4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005df6:	4b4b      	ldr	r3, [pc, #300]	; (8005f24 <USBD_CDC_Init+0x1ec>)
 8005df8:	781b      	ldrb	r3, [r3, #0]
 8005dfa:	f003 020f 	and.w	r2, r3, #15
 8005dfe:	6879      	ldr	r1, [r7, #4]
 8005e00:	4613      	mov	r3, r2
 8005e02:	009b      	lsls	r3, r3, #2
 8005e04:	4413      	add	r3, r2
 8005e06:	009b      	lsls	r3, r3, #2
 8005e08:	440b      	add	r3, r1
 8005e0a:	3326      	adds	r3, #38	; 0x26
 8005e0c:	2210      	movs	r2, #16
 8005e0e:	801a      	strh	r2, [r3, #0]
 8005e10:	e035      	b.n	8005e7e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005e12:	4b42      	ldr	r3, [pc, #264]	; (8005f1c <USBD_CDC_Init+0x1e4>)
 8005e14:	7819      	ldrb	r1, [r3, #0]
 8005e16:	2340      	movs	r3, #64	; 0x40
 8005e18:	2202      	movs	r2, #2
 8005e1a:	6878      	ldr	r0, [r7, #4]
 8005e1c:	f003 fd1b 	bl	8009856 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005e20:	4b3e      	ldr	r3, [pc, #248]	; (8005f1c <USBD_CDC_Init+0x1e4>)
 8005e22:	781b      	ldrb	r3, [r3, #0]
 8005e24:	f003 020f 	and.w	r2, r3, #15
 8005e28:	6879      	ldr	r1, [r7, #4]
 8005e2a:	4613      	mov	r3, r2
 8005e2c:	009b      	lsls	r3, r3, #2
 8005e2e:	4413      	add	r3, r2
 8005e30:	009b      	lsls	r3, r3, #2
 8005e32:	440b      	add	r3, r1
 8005e34:	3324      	adds	r3, #36	; 0x24
 8005e36:	2201      	movs	r2, #1
 8005e38:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005e3a:	4b39      	ldr	r3, [pc, #228]	; (8005f20 <USBD_CDC_Init+0x1e8>)
 8005e3c:	7819      	ldrb	r1, [r3, #0]
 8005e3e:	2340      	movs	r3, #64	; 0x40
 8005e40:	2202      	movs	r2, #2
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	f003 fd07 	bl	8009856 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005e48:	4b35      	ldr	r3, [pc, #212]	; (8005f20 <USBD_CDC_Init+0x1e8>)
 8005e4a:	781b      	ldrb	r3, [r3, #0]
 8005e4c:	f003 020f 	and.w	r2, r3, #15
 8005e50:	6879      	ldr	r1, [r7, #4]
 8005e52:	4613      	mov	r3, r2
 8005e54:	009b      	lsls	r3, r3, #2
 8005e56:	4413      	add	r3, r2
 8005e58:	009b      	lsls	r3, r3, #2
 8005e5a:	440b      	add	r3, r1
 8005e5c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005e60:	2201      	movs	r2, #1
 8005e62:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005e64:	4b2f      	ldr	r3, [pc, #188]	; (8005f24 <USBD_CDC_Init+0x1ec>)
 8005e66:	781b      	ldrb	r3, [r3, #0]
 8005e68:	f003 020f 	and.w	r2, r3, #15
 8005e6c:	6879      	ldr	r1, [r7, #4]
 8005e6e:	4613      	mov	r3, r2
 8005e70:	009b      	lsls	r3, r3, #2
 8005e72:	4413      	add	r3, r2
 8005e74:	009b      	lsls	r3, r3, #2
 8005e76:	440b      	add	r3, r1
 8005e78:	3326      	adds	r3, #38	; 0x26
 8005e7a:	2210      	movs	r2, #16
 8005e7c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005e7e:	4b29      	ldr	r3, [pc, #164]	; (8005f24 <USBD_CDC_Init+0x1ec>)
 8005e80:	7819      	ldrb	r1, [r3, #0]
 8005e82:	2308      	movs	r3, #8
 8005e84:	2203      	movs	r2, #3
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	f003 fce5 	bl	8009856 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8005e8c:	4b25      	ldr	r3, [pc, #148]	; (8005f24 <USBD_CDC_Init+0x1ec>)
 8005e8e:	781b      	ldrb	r3, [r3, #0]
 8005e90:	f003 020f 	and.w	r2, r3, #15
 8005e94:	6879      	ldr	r1, [r7, #4]
 8005e96:	4613      	mov	r3, r2
 8005e98:	009b      	lsls	r3, r3, #2
 8005e9a:	4413      	add	r3, r2
 8005e9c:	009b      	lsls	r3, r3, #2
 8005e9e:	440b      	add	r3, r1
 8005ea0:	3324      	adds	r3, #36	; 0x24
 8005ea2:	2201      	movs	r2, #1
 8005ea4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005eb4:	687a      	ldr	r2, [r7, #4]
 8005eb6:	33b0      	adds	r3, #176	; 0xb0
 8005eb8:	009b      	lsls	r3, r3, #2
 8005eba:	4413      	add	r3, r2
 8005ebc:	685b      	ldr	r3, [r3, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d101      	bne.n	8005ee0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8005edc:	2302      	movs	r3, #2
 8005ede:	e018      	b.n	8005f12 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	7c1b      	ldrb	r3, [r3, #16]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d10a      	bne.n	8005efe <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005ee8:	4b0d      	ldr	r3, [pc, #52]	; (8005f20 <USBD_CDC_Init+0x1e8>)
 8005eea:	7819      	ldrb	r1, [r3, #0]
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005ef2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f003 fd9c 	bl	8009a34 <USBD_LL_PrepareReceive>
 8005efc:	e008      	b.n	8005f10 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005efe:	4b08      	ldr	r3, [pc, #32]	; (8005f20 <USBD_CDC_Init+0x1e8>)
 8005f00:	7819      	ldrb	r1, [r3, #0]
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005f08:	2340      	movs	r3, #64	; 0x40
 8005f0a:	6878      	ldr	r0, [r7, #4]
 8005f0c:	f003 fd92 	bl	8009a34 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005f10:	2300      	movs	r3, #0
}
 8005f12:	4618      	mov	r0, r3
 8005f14:	3710      	adds	r7, #16
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bd80      	pop	{r7, pc}
 8005f1a:	bf00      	nop
 8005f1c:	20000093 	.word	0x20000093
 8005f20:	20000094 	.word	0x20000094
 8005f24:	20000095 	.word	0x20000095

08005f28 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b082      	sub	sp, #8
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
 8005f30:	460b      	mov	r3, r1
 8005f32:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8005f34:	4b3a      	ldr	r3, [pc, #232]	; (8006020 <USBD_CDC_DeInit+0xf8>)
 8005f36:	781b      	ldrb	r3, [r3, #0]
 8005f38:	4619      	mov	r1, r3
 8005f3a:	6878      	ldr	r0, [r7, #4]
 8005f3c:	f003 fcb1 	bl	80098a2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8005f40:	4b37      	ldr	r3, [pc, #220]	; (8006020 <USBD_CDC_DeInit+0xf8>)
 8005f42:	781b      	ldrb	r3, [r3, #0]
 8005f44:	f003 020f 	and.w	r2, r3, #15
 8005f48:	6879      	ldr	r1, [r7, #4]
 8005f4a:	4613      	mov	r3, r2
 8005f4c:	009b      	lsls	r3, r3, #2
 8005f4e:	4413      	add	r3, r2
 8005f50:	009b      	lsls	r3, r3, #2
 8005f52:	440b      	add	r3, r1
 8005f54:	3324      	adds	r3, #36	; 0x24
 8005f56:	2200      	movs	r2, #0
 8005f58:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8005f5a:	4b32      	ldr	r3, [pc, #200]	; (8006024 <USBD_CDC_DeInit+0xfc>)
 8005f5c:	781b      	ldrb	r3, [r3, #0]
 8005f5e:	4619      	mov	r1, r3
 8005f60:	6878      	ldr	r0, [r7, #4]
 8005f62:	f003 fc9e 	bl	80098a2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8005f66:	4b2f      	ldr	r3, [pc, #188]	; (8006024 <USBD_CDC_DeInit+0xfc>)
 8005f68:	781b      	ldrb	r3, [r3, #0]
 8005f6a:	f003 020f 	and.w	r2, r3, #15
 8005f6e:	6879      	ldr	r1, [r7, #4]
 8005f70:	4613      	mov	r3, r2
 8005f72:	009b      	lsls	r3, r3, #2
 8005f74:	4413      	add	r3, r2
 8005f76:	009b      	lsls	r3, r3, #2
 8005f78:	440b      	add	r3, r1
 8005f7a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005f7e:	2200      	movs	r2, #0
 8005f80:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8005f82:	4b29      	ldr	r3, [pc, #164]	; (8006028 <USBD_CDC_DeInit+0x100>)
 8005f84:	781b      	ldrb	r3, [r3, #0]
 8005f86:	4619      	mov	r1, r3
 8005f88:	6878      	ldr	r0, [r7, #4]
 8005f8a:	f003 fc8a 	bl	80098a2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8005f8e:	4b26      	ldr	r3, [pc, #152]	; (8006028 <USBD_CDC_DeInit+0x100>)
 8005f90:	781b      	ldrb	r3, [r3, #0]
 8005f92:	f003 020f 	and.w	r2, r3, #15
 8005f96:	6879      	ldr	r1, [r7, #4]
 8005f98:	4613      	mov	r3, r2
 8005f9a:	009b      	lsls	r3, r3, #2
 8005f9c:	4413      	add	r3, r2
 8005f9e:	009b      	lsls	r3, r3, #2
 8005fa0:	440b      	add	r3, r1
 8005fa2:	3324      	adds	r3, #36	; 0x24
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8005fa8:	4b1f      	ldr	r3, [pc, #124]	; (8006028 <USBD_CDC_DeInit+0x100>)
 8005faa:	781b      	ldrb	r3, [r3, #0]
 8005fac:	f003 020f 	and.w	r2, r3, #15
 8005fb0:	6879      	ldr	r1, [r7, #4]
 8005fb2:	4613      	mov	r3, r2
 8005fb4:	009b      	lsls	r3, r3, #2
 8005fb6:	4413      	add	r3, r2
 8005fb8:	009b      	lsls	r3, r3, #2
 8005fba:	440b      	add	r3, r1
 8005fbc:	3326      	adds	r3, #38	; 0x26
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	32b0      	adds	r2, #176	; 0xb0
 8005fcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d01f      	beq.n	8006014 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005fda:	687a      	ldr	r2, [r7, #4]
 8005fdc:	33b0      	adds	r3, #176	; 0xb0
 8005fde:	009b      	lsls	r3, r3, #2
 8005fe0:	4413      	add	r3, r2
 8005fe2:	685b      	ldr	r3, [r3, #4]
 8005fe4:	685b      	ldr	r3, [r3, #4]
 8005fe6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	32b0      	adds	r2, #176	; 0xb0
 8005ff2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	f003 fd5e 	bl	8009ab8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	32b0      	adds	r2, #176	; 0xb0
 8006006:	2100      	movs	r1, #0
 8006008:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2200      	movs	r2, #0
 8006010:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006014:	2300      	movs	r3, #0
}
 8006016:	4618      	mov	r0, r3
 8006018:	3708      	adds	r7, #8
 800601a:	46bd      	mov	sp, r7
 800601c:	bd80      	pop	{r7, pc}
 800601e:	bf00      	nop
 8006020:	20000093 	.word	0x20000093
 8006024:	20000094 	.word	0x20000094
 8006028:	20000095 	.word	0x20000095

0800602c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b086      	sub	sp, #24
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
 8006034:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	32b0      	adds	r2, #176	; 0xb0
 8006040:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006044:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006046:	2300      	movs	r3, #0
 8006048:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800604a:	2300      	movs	r3, #0
 800604c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800604e:	2300      	movs	r3, #0
 8006050:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006052:	693b      	ldr	r3, [r7, #16]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d101      	bne.n	800605c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006058:	2303      	movs	r3, #3
 800605a:	e0bf      	b.n	80061dc <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	781b      	ldrb	r3, [r3, #0]
 8006060:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006064:	2b00      	cmp	r3, #0
 8006066:	d050      	beq.n	800610a <USBD_CDC_Setup+0xde>
 8006068:	2b20      	cmp	r3, #32
 800606a:	f040 80af 	bne.w	80061cc <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	88db      	ldrh	r3, [r3, #6]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d03a      	beq.n	80060ec <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	781b      	ldrb	r3, [r3, #0]
 800607a:	b25b      	sxtb	r3, r3
 800607c:	2b00      	cmp	r3, #0
 800607e:	da1b      	bge.n	80060b8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006086:	687a      	ldr	r2, [r7, #4]
 8006088:	33b0      	adds	r3, #176	; 0xb0
 800608a:	009b      	lsls	r3, r3, #2
 800608c:	4413      	add	r3, r2
 800608e:	685b      	ldr	r3, [r3, #4]
 8006090:	689b      	ldr	r3, [r3, #8]
 8006092:	683a      	ldr	r2, [r7, #0]
 8006094:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006096:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006098:	683a      	ldr	r2, [r7, #0]
 800609a:	88d2      	ldrh	r2, [r2, #6]
 800609c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	88db      	ldrh	r3, [r3, #6]
 80060a2:	2b07      	cmp	r3, #7
 80060a4:	bf28      	it	cs
 80060a6:	2307      	movcs	r3, #7
 80060a8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80060aa:	693b      	ldr	r3, [r7, #16]
 80060ac:	89fa      	ldrh	r2, [r7, #14]
 80060ae:	4619      	mov	r1, r3
 80060b0:	6878      	ldr	r0, [r7, #4]
 80060b2:	f001 fd49 	bl	8007b48 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80060b6:	e090      	b.n	80061da <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	785a      	ldrb	r2, [r3, #1]
 80060bc:	693b      	ldr	r3, [r7, #16]
 80060be:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	88db      	ldrh	r3, [r3, #6]
 80060c6:	2b3f      	cmp	r3, #63	; 0x3f
 80060c8:	d803      	bhi.n	80060d2 <USBD_CDC_Setup+0xa6>
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	88db      	ldrh	r3, [r3, #6]
 80060ce:	b2da      	uxtb	r2, r3
 80060d0:	e000      	b.n	80060d4 <USBD_CDC_Setup+0xa8>
 80060d2:	2240      	movs	r2, #64	; 0x40
 80060d4:	693b      	ldr	r3, [r7, #16]
 80060d6:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80060da:	6939      	ldr	r1, [r7, #16]
 80060dc:	693b      	ldr	r3, [r7, #16]
 80060de:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80060e2:	461a      	mov	r2, r3
 80060e4:	6878      	ldr	r0, [r7, #4]
 80060e6:	f001 fd5b 	bl	8007ba0 <USBD_CtlPrepareRx>
      break;
 80060ea:	e076      	b.n	80061da <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80060f2:	687a      	ldr	r2, [r7, #4]
 80060f4:	33b0      	adds	r3, #176	; 0xb0
 80060f6:	009b      	lsls	r3, r3, #2
 80060f8:	4413      	add	r3, r2
 80060fa:	685b      	ldr	r3, [r3, #4]
 80060fc:	689b      	ldr	r3, [r3, #8]
 80060fe:	683a      	ldr	r2, [r7, #0]
 8006100:	7850      	ldrb	r0, [r2, #1]
 8006102:	2200      	movs	r2, #0
 8006104:	6839      	ldr	r1, [r7, #0]
 8006106:	4798      	blx	r3
      break;
 8006108:	e067      	b.n	80061da <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	785b      	ldrb	r3, [r3, #1]
 800610e:	2b0b      	cmp	r3, #11
 8006110:	d851      	bhi.n	80061b6 <USBD_CDC_Setup+0x18a>
 8006112:	a201      	add	r2, pc, #4	; (adr r2, 8006118 <USBD_CDC_Setup+0xec>)
 8006114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006118:	08006149 	.word	0x08006149
 800611c:	080061c5 	.word	0x080061c5
 8006120:	080061b7 	.word	0x080061b7
 8006124:	080061b7 	.word	0x080061b7
 8006128:	080061b7 	.word	0x080061b7
 800612c:	080061b7 	.word	0x080061b7
 8006130:	080061b7 	.word	0x080061b7
 8006134:	080061b7 	.word	0x080061b7
 8006138:	080061b7 	.word	0x080061b7
 800613c:	080061b7 	.word	0x080061b7
 8006140:	08006173 	.word	0x08006173
 8006144:	0800619d 	.word	0x0800619d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800614e:	b2db      	uxtb	r3, r3
 8006150:	2b03      	cmp	r3, #3
 8006152:	d107      	bne.n	8006164 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006154:	f107 030a 	add.w	r3, r7, #10
 8006158:	2202      	movs	r2, #2
 800615a:	4619      	mov	r1, r3
 800615c:	6878      	ldr	r0, [r7, #4]
 800615e:	f001 fcf3 	bl	8007b48 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006162:	e032      	b.n	80061ca <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006164:	6839      	ldr	r1, [r7, #0]
 8006166:	6878      	ldr	r0, [r7, #4]
 8006168:	f001 fc7d 	bl	8007a66 <USBD_CtlError>
            ret = USBD_FAIL;
 800616c:	2303      	movs	r3, #3
 800616e:	75fb      	strb	r3, [r7, #23]
          break;
 8006170:	e02b      	b.n	80061ca <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006178:	b2db      	uxtb	r3, r3
 800617a:	2b03      	cmp	r3, #3
 800617c:	d107      	bne.n	800618e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800617e:	f107 030d 	add.w	r3, r7, #13
 8006182:	2201      	movs	r2, #1
 8006184:	4619      	mov	r1, r3
 8006186:	6878      	ldr	r0, [r7, #4]
 8006188:	f001 fcde 	bl	8007b48 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800618c:	e01d      	b.n	80061ca <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800618e:	6839      	ldr	r1, [r7, #0]
 8006190:	6878      	ldr	r0, [r7, #4]
 8006192:	f001 fc68 	bl	8007a66 <USBD_CtlError>
            ret = USBD_FAIL;
 8006196:	2303      	movs	r3, #3
 8006198:	75fb      	strb	r3, [r7, #23]
          break;
 800619a:	e016      	b.n	80061ca <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061a2:	b2db      	uxtb	r3, r3
 80061a4:	2b03      	cmp	r3, #3
 80061a6:	d00f      	beq.n	80061c8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80061a8:	6839      	ldr	r1, [r7, #0]
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	f001 fc5b 	bl	8007a66 <USBD_CtlError>
            ret = USBD_FAIL;
 80061b0:	2303      	movs	r3, #3
 80061b2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80061b4:	e008      	b.n	80061c8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80061b6:	6839      	ldr	r1, [r7, #0]
 80061b8:	6878      	ldr	r0, [r7, #4]
 80061ba:	f001 fc54 	bl	8007a66 <USBD_CtlError>
          ret = USBD_FAIL;
 80061be:	2303      	movs	r3, #3
 80061c0:	75fb      	strb	r3, [r7, #23]
          break;
 80061c2:	e002      	b.n	80061ca <USBD_CDC_Setup+0x19e>
          break;
 80061c4:	bf00      	nop
 80061c6:	e008      	b.n	80061da <USBD_CDC_Setup+0x1ae>
          break;
 80061c8:	bf00      	nop
      }
      break;
 80061ca:	e006      	b.n	80061da <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80061cc:	6839      	ldr	r1, [r7, #0]
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	f001 fc49 	bl	8007a66 <USBD_CtlError>
      ret = USBD_FAIL;
 80061d4:	2303      	movs	r3, #3
 80061d6:	75fb      	strb	r3, [r7, #23]
      break;
 80061d8:	bf00      	nop
  }

  return (uint8_t)ret;
 80061da:	7dfb      	ldrb	r3, [r7, #23]
}
 80061dc:	4618      	mov	r0, r3
 80061de:	3718      	adds	r7, #24
 80061e0:	46bd      	mov	sp, r7
 80061e2:	bd80      	pop	{r7, pc}

080061e4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b084      	sub	sp, #16
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
 80061ec:	460b      	mov	r3, r1
 80061ee:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80061f6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	32b0      	adds	r2, #176	; 0xb0
 8006202:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d101      	bne.n	800620e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800620a:	2303      	movs	r3, #3
 800620c:	e065      	b.n	80062da <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	32b0      	adds	r2, #176	; 0xb0
 8006218:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800621c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800621e:	78fb      	ldrb	r3, [r7, #3]
 8006220:	f003 020f 	and.w	r2, r3, #15
 8006224:	6879      	ldr	r1, [r7, #4]
 8006226:	4613      	mov	r3, r2
 8006228:	009b      	lsls	r3, r3, #2
 800622a:	4413      	add	r3, r2
 800622c:	009b      	lsls	r3, r3, #2
 800622e:	440b      	add	r3, r1
 8006230:	3318      	adds	r3, #24
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d02f      	beq.n	8006298 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006238:	78fb      	ldrb	r3, [r7, #3]
 800623a:	f003 020f 	and.w	r2, r3, #15
 800623e:	6879      	ldr	r1, [r7, #4]
 8006240:	4613      	mov	r3, r2
 8006242:	009b      	lsls	r3, r3, #2
 8006244:	4413      	add	r3, r2
 8006246:	009b      	lsls	r3, r3, #2
 8006248:	440b      	add	r3, r1
 800624a:	3318      	adds	r3, #24
 800624c:	681a      	ldr	r2, [r3, #0]
 800624e:	78fb      	ldrb	r3, [r7, #3]
 8006250:	f003 010f 	and.w	r1, r3, #15
 8006254:	68f8      	ldr	r0, [r7, #12]
 8006256:	460b      	mov	r3, r1
 8006258:	00db      	lsls	r3, r3, #3
 800625a:	440b      	add	r3, r1
 800625c:	009b      	lsls	r3, r3, #2
 800625e:	4403      	add	r3, r0
 8006260:	331c      	adds	r3, #28
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	fbb2 f1f3 	udiv	r1, r2, r3
 8006268:	fb01 f303 	mul.w	r3, r1, r3
 800626c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800626e:	2b00      	cmp	r3, #0
 8006270:	d112      	bne.n	8006298 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006272:	78fb      	ldrb	r3, [r7, #3]
 8006274:	f003 020f 	and.w	r2, r3, #15
 8006278:	6879      	ldr	r1, [r7, #4]
 800627a:	4613      	mov	r3, r2
 800627c:	009b      	lsls	r3, r3, #2
 800627e:	4413      	add	r3, r2
 8006280:	009b      	lsls	r3, r3, #2
 8006282:	440b      	add	r3, r1
 8006284:	3318      	adds	r3, #24
 8006286:	2200      	movs	r2, #0
 8006288:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800628a:	78f9      	ldrb	r1, [r7, #3]
 800628c:	2300      	movs	r3, #0
 800628e:	2200      	movs	r2, #0
 8006290:	6878      	ldr	r0, [r7, #4]
 8006292:	f003 fbae 	bl	80099f2 <USBD_LL_Transmit>
 8006296:	e01f      	b.n	80062d8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	2200      	movs	r2, #0
 800629c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80062a6:	687a      	ldr	r2, [r7, #4]
 80062a8:	33b0      	adds	r3, #176	; 0xb0
 80062aa:	009b      	lsls	r3, r3, #2
 80062ac:	4413      	add	r3, r2
 80062ae:	685b      	ldr	r3, [r3, #4]
 80062b0:	691b      	ldr	r3, [r3, #16]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d010      	beq.n	80062d8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80062bc:	687a      	ldr	r2, [r7, #4]
 80062be:	33b0      	adds	r3, #176	; 0xb0
 80062c0:	009b      	lsls	r3, r3, #2
 80062c2:	4413      	add	r3, r2
 80062c4:	685b      	ldr	r3, [r3, #4]
 80062c6:	691b      	ldr	r3, [r3, #16]
 80062c8:	68ba      	ldr	r2, [r7, #8]
 80062ca:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80062ce:	68ba      	ldr	r2, [r7, #8]
 80062d0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80062d4:	78fa      	ldrb	r2, [r7, #3]
 80062d6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80062d8:	2300      	movs	r3, #0
}
 80062da:	4618      	mov	r0, r3
 80062dc:	3710      	adds	r7, #16
 80062de:	46bd      	mov	sp, r7
 80062e0:	bd80      	pop	{r7, pc}

080062e2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80062e2:	b580      	push	{r7, lr}
 80062e4:	b084      	sub	sp, #16
 80062e6:	af00      	add	r7, sp, #0
 80062e8:	6078      	str	r0, [r7, #4]
 80062ea:	460b      	mov	r3, r1
 80062ec:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	32b0      	adds	r2, #176	; 0xb0
 80062f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062fc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	32b0      	adds	r2, #176	; 0xb0
 8006308:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d101      	bne.n	8006314 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006310:	2303      	movs	r3, #3
 8006312:	e01a      	b.n	800634a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006314:	78fb      	ldrb	r3, [r7, #3]
 8006316:	4619      	mov	r1, r3
 8006318:	6878      	ldr	r0, [r7, #4]
 800631a:	f003 fbac 	bl	8009a76 <USBD_LL_GetRxDataSize>
 800631e:	4602      	mov	r2, r0
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800632c:	687a      	ldr	r2, [r7, #4]
 800632e:	33b0      	adds	r3, #176	; 0xb0
 8006330:	009b      	lsls	r3, r3, #2
 8006332:	4413      	add	r3, r2
 8006334:	685b      	ldr	r3, [r3, #4]
 8006336:	68db      	ldr	r3, [r3, #12]
 8006338:	68fa      	ldr	r2, [r7, #12]
 800633a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800633e:	68fa      	ldr	r2, [r7, #12]
 8006340:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006344:	4611      	mov	r1, r2
 8006346:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006348:	2300      	movs	r3, #0
}
 800634a:	4618      	mov	r0, r3
 800634c:	3710      	adds	r7, #16
 800634e:	46bd      	mov	sp, r7
 8006350:	bd80      	pop	{r7, pc}

08006352 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006352:	b580      	push	{r7, lr}
 8006354:	b084      	sub	sp, #16
 8006356:	af00      	add	r7, sp, #0
 8006358:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	32b0      	adds	r2, #176	; 0xb0
 8006364:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006368:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d101      	bne.n	8006374 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006370:	2303      	movs	r3, #3
 8006372:	e025      	b.n	80063c0 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800637a:	687a      	ldr	r2, [r7, #4]
 800637c:	33b0      	adds	r3, #176	; 0xb0
 800637e:	009b      	lsls	r3, r3, #2
 8006380:	4413      	add	r3, r2
 8006382:	685b      	ldr	r3, [r3, #4]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d01a      	beq.n	80063be <USBD_CDC_EP0_RxReady+0x6c>
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800638e:	2bff      	cmp	r3, #255	; 0xff
 8006390:	d015      	beq.n	80063be <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006398:	687a      	ldr	r2, [r7, #4]
 800639a:	33b0      	adds	r3, #176	; 0xb0
 800639c:	009b      	lsls	r3, r3, #2
 800639e:	4413      	add	r3, r2
 80063a0:	685b      	ldr	r3, [r3, #4]
 80063a2:	689b      	ldr	r3, [r3, #8]
 80063a4:	68fa      	ldr	r2, [r7, #12]
 80063a6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80063aa:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80063ac:	68fa      	ldr	r2, [r7, #12]
 80063ae:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80063b2:	b292      	uxth	r2, r2
 80063b4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	22ff      	movs	r2, #255	; 0xff
 80063ba:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80063be:	2300      	movs	r3, #0
}
 80063c0:	4618      	mov	r0, r3
 80063c2:	3710      	adds	r7, #16
 80063c4:	46bd      	mov	sp, r7
 80063c6:	bd80      	pop	{r7, pc}

080063c8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b086      	sub	sp, #24
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80063d0:	2182      	movs	r1, #130	; 0x82
 80063d2:	4818      	ldr	r0, [pc, #96]	; (8006434 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80063d4:	f000 fd0f 	bl	8006df6 <USBD_GetEpDesc>
 80063d8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80063da:	2101      	movs	r1, #1
 80063dc:	4815      	ldr	r0, [pc, #84]	; (8006434 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80063de:	f000 fd0a 	bl	8006df6 <USBD_GetEpDesc>
 80063e2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80063e4:	2181      	movs	r1, #129	; 0x81
 80063e6:	4813      	ldr	r0, [pc, #76]	; (8006434 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80063e8:	f000 fd05 	bl	8006df6 <USBD_GetEpDesc>
 80063ec:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80063ee:	697b      	ldr	r3, [r7, #20]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d002      	beq.n	80063fa <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80063f4:	697b      	ldr	r3, [r7, #20]
 80063f6:	2210      	movs	r2, #16
 80063f8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80063fa:	693b      	ldr	r3, [r7, #16]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d006      	beq.n	800640e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006400:	693b      	ldr	r3, [r7, #16]
 8006402:	2200      	movs	r2, #0
 8006404:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006408:	711a      	strb	r2, [r3, #4]
 800640a:	2200      	movs	r2, #0
 800640c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d006      	beq.n	8006422 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	2200      	movs	r2, #0
 8006418:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800641c:	711a      	strb	r2, [r3, #4]
 800641e:	2200      	movs	r2, #0
 8006420:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2243      	movs	r2, #67	; 0x43
 8006426:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006428:	4b02      	ldr	r3, [pc, #8]	; (8006434 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800642a:	4618      	mov	r0, r3
 800642c:	3718      	adds	r7, #24
 800642e:	46bd      	mov	sp, r7
 8006430:	bd80      	pop	{r7, pc}
 8006432:	bf00      	nop
 8006434:	20000050 	.word	0x20000050

08006438 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b086      	sub	sp, #24
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006440:	2182      	movs	r1, #130	; 0x82
 8006442:	4818      	ldr	r0, [pc, #96]	; (80064a4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006444:	f000 fcd7 	bl	8006df6 <USBD_GetEpDesc>
 8006448:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800644a:	2101      	movs	r1, #1
 800644c:	4815      	ldr	r0, [pc, #84]	; (80064a4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800644e:	f000 fcd2 	bl	8006df6 <USBD_GetEpDesc>
 8006452:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006454:	2181      	movs	r1, #129	; 0x81
 8006456:	4813      	ldr	r0, [pc, #76]	; (80064a4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006458:	f000 fccd 	bl	8006df6 <USBD_GetEpDesc>
 800645c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800645e:	697b      	ldr	r3, [r7, #20]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d002      	beq.n	800646a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006464:	697b      	ldr	r3, [r7, #20]
 8006466:	2210      	movs	r2, #16
 8006468:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800646a:	693b      	ldr	r3, [r7, #16]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d006      	beq.n	800647e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006470:	693b      	ldr	r3, [r7, #16]
 8006472:	2200      	movs	r2, #0
 8006474:	711a      	strb	r2, [r3, #4]
 8006476:	2200      	movs	r2, #0
 8006478:	f042 0202 	orr.w	r2, r2, #2
 800647c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d006      	beq.n	8006492 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	2200      	movs	r2, #0
 8006488:	711a      	strb	r2, [r3, #4]
 800648a:	2200      	movs	r2, #0
 800648c:	f042 0202 	orr.w	r2, r2, #2
 8006490:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2243      	movs	r2, #67	; 0x43
 8006496:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006498:	4b02      	ldr	r3, [pc, #8]	; (80064a4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800649a:	4618      	mov	r0, r3
 800649c:	3718      	adds	r7, #24
 800649e:	46bd      	mov	sp, r7
 80064a0:	bd80      	pop	{r7, pc}
 80064a2:	bf00      	nop
 80064a4:	20000050 	.word	0x20000050

080064a8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b086      	sub	sp, #24
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80064b0:	2182      	movs	r1, #130	; 0x82
 80064b2:	4818      	ldr	r0, [pc, #96]	; (8006514 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80064b4:	f000 fc9f 	bl	8006df6 <USBD_GetEpDesc>
 80064b8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80064ba:	2101      	movs	r1, #1
 80064bc:	4815      	ldr	r0, [pc, #84]	; (8006514 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80064be:	f000 fc9a 	bl	8006df6 <USBD_GetEpDesc>
 80064c2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80064c4:	2181      	movs	r1, #129	; 0x81
 80064c6:	4813      	ldr	r0, [pc, #76]	; (8006514 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80064c8:	f000 fc95 	bl	8006df6 <USBD_GetEpDesc>
 80064cc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d002      	beq.n	80064da <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80064d4:	697b      	ldr	r3, [r7, #20]
 80064d6:	2210      	movs	r2, #16
 80064d8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80064da:	693b      	ldr	r3, [r7, #16]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d006      	beq.n	80064ee <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80064e0:	693b      	ldr	r3, [r7, #16]
 80064e2:	2200      	movs	r2, #0
 80064e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80064e8:	711a      	strb	r2, [r3, #4]
 80064ea:	2200      	movs	r2, #0
 80064ec:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d006      	beq.n	8006502 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	2200      	movs	r2, #0
 80064f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80064fc:	711a      	strb	r2, [r3, #4]
 80064fe:	2200      	movs	r2, #0
 8006500:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2243      	movs	r2, #67	; 0x43
 8006506:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006508:	4b02      	ldr	r3, [pc, #8]	; (8006514 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800650a:	4618      	mov	r0, r3
 800650c:	3718      	adds	r7, #24
 800650e:	46bd      	mov	sp, r7
 8006510:	bd80      	pop	{r7, pc}
 8006512:	bf00      	nop
 8006514:	20000050 	.word	0x20000050

08006518 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006518:	b480      	push	{r7}
 800651a:	b083      	sub	sp, #12
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	220a      	movs	r2, #10
 8006524:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006526:	4b03      	ldr	r3, [pc, #12]	; (8006534 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006528:	4618      	mov	r0, r3
 800652a:	370c      	adds	r7, #12
 800652c:	46bd      	mov	sp, r7
 800652e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006532:	4770      	bx	lr
 8006534:	2000000c 	.word	0x2000000c

08006538 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006538:	b480      	push	{r7}
 800653a:	b083      	sub	sp, #12
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
 8006540:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d101      	bne.n	800654c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006548:	2303      	movs	r3, #3
 800654a:	e009      	b.n	8006560 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006552:	687a      	ldr	r2, [r7, #4]
 8006554:	33b0      	adds	r3, #176	; 0xb0
 8006556:	009b      	lsls	r3, r3, #2
 8006558:	4413      	add	r3, r2
 800655a:	683a      	ldr	r2, [r7, #0]
 800655c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800655e:	2300      	movs	r3, #0
}
 8006560:	4618      	mov	r0, r3
 8006562:	370c      	adds	r7, #12
 8006564:	46bd      	mov	sp, r7
 8006566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656a:	4770      	bx	lr

0800656c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800656c:	b480      	push	{r7}
 800656e:	b087      	sub	sp, #28
 8006570:	af00      	add	r7, sp, #0
 8006572:	60f8      	str	r0, [r7, #12]
 8006574:	60b9      	str	r1, [r7, #8]
 8006576:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	32b0      	adds	r2, #176	; 0xb0
 8006582:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006586:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8006588:	697b      	ldr	r3, [r7, #20]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d101      	bne.n	8006592 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800658e:	2303      	movs	r3, #3
 8006590:	e008      	b.n	80065a4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006592:	697b      	ldr	r3, [r7, #20]
 8006594:	68ba      	ldr	r2, [r7, #8]
 8006596:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800659a:	697b      	ldr	r3, [r7, #20]
 800659c:	687a      	ldr	r2, [r7, #4]
 800659e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80065a2:	2300      	movs	r3, #0
}
 80065a4:	4618      	mov	r0, r3
 80065a6:	371c      	adds	r7, #28
 80065a8:	46bd      	mov	sp, r7
 80065aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ae:	4770      	bx	lr

080065b0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80065b0:	b480      	push	{r7}
 80065b2:	b085      	sub	sp, #20
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
 80065b8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	32b0      	adds	r2, #176	; 0xb0
 80065c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065c8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d101      	bne.n	80065d4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80065d0:	2303      	movs	r3, #3
 80065d2:	e004      	b.n	80065de <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	683a      	ldr	r2, [r7, #0]
 80065d8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80065dc:	2300      	movs	r3, #0
}
 80065de:	4618      	mov	r0, r3
 80065e0:	3714      	adds	r7, #20
 80065e2:	46bd      	mov	sp, r7
 80065e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e8:	4770      	bx	lr
	...

080065ec <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b084      	sub	sp, #16
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	32b0      	adds	r2, #176	; 0xb0
 80065fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006602:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	32b0      	adds	r2, #176	; 0xb0
 800660e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d101      	bne.n	800661a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006616:	2303      	movs	r3, #3
 8006618:	e018      	b.n	800664c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	7c1b      	ldrb	r3, [r3, #16]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d10a      	bne.n	8006638 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006622:	4b0c      	ldr	r3, [pc, #48]	; (8006654 <USBD_CDC_ReceivePacket+0x68>)
 8006624:	7819      	ldrb	r1, [r3, #0]
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800662c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006630:	6878      	ldr	r0, [r7, #4]
 8006632:	f003 f9ff 	bl	8009a34 <USBD_LL_PrepareReceive>
 8006636:	e008      	b.n	800664a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006638:	4b06      	ldr	r3, [pc, #24]	; (8006654 <USBD_CDC_ReceivePacket+0x68>)
 800663a:	7819      	ldrb	r1, [r3, #0]
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006642:	2340      	movs	r3, #64	; 0x40
 8006644:	6878      	ldr	r0, [r7, #4]
 8006646:	f003 f9f5 	bl	8009a34 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800664a:	2300      	movs	r3, #0
}
 800664c:	4618      	mov	r0, r3
 800664e:	3710      	adds	r7, #16
 8006650:	46bd      	mov	sp, r7
 8006652:	bd80      	pop	{r7, pc}
 8006654:	20000094 	.word	0x20000094

08006658 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b086      	sub	sp, #24
 800665c:	af00      	add	r7, sp, #0
 800665e:	60f8      	str	r0, [r7, #12]
 8006660:	60b9      	str	r1, [r7, #8]
 8006662:	4613      	mov	r3, r2
 8006664:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d101      	bne.n	8006670 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800666c:	2303      	movs	r3, #3
 800666e:	e01f      	b.n	80066b0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	2200      	movs	r2, #0
 8006674:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	2200      	movs	r2, #0
 800667c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	2200      	movs	r2, #0
 8006684:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d003      	beq.n	8006696 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	68ba      	ldr	r2, [r7, #8]
 8006692:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	2201      	movs	r2, #1
 800669a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	79fa      	ldrb	r2, [r7, #7]
 80066a2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80066a4:	68f8      	ldr	r0, [r7, #12]
 80066a6:	f003 f86f 	bl	8009788 <USBD_LL_Init>
 80066aa:	4603      	mov	r3, r0
 80066ac:	75fb      	strb	r3, [r7, #23]

  return ret;
 80066ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80066b0:	4618      	mov	r0, r3
 80066b2:	3718      	adds	r7, #24
 80066b4:	46bd      	mov	sp, r7
 80066b6:	bd80      	pop	{r7, pc}

080066b8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b084      	sub	sp, #16
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
 80066c0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80066c2:	2300      	movs	r3, #0
 80066c4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d101      	bne.n	80066d0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80066cc:	2303      	movs	r3, #3
 80066ce:	e025      	b.n	800671c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	683a      	ldr	r2, [r7, #0]
 80066d4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	32ae      	adds	r2, #174	; 0xae
 80066e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d00f      	beq.n	800670c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	32ae      	adds	r2, #174	; 0xae
 80066f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066fc:	f107 020e 	add.w	r2, r7, #14
 8006700:	4610      	mov	r0, r2
 8006702:	4798      	blx	r3
 8006704:	4602      	mov	r2, r0
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8006712:	1c5a      	adds	r2, r3, #1
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800671a:	2300      	movs	r3, #0
}
 800671c:	4618      	mov	r0, r3
 800671e:	3710      	adds	r7, #16
 8006720:	46bd      	mov	sp, r7
 8006722:	bd80      	pop	{r7, pc}

08006724 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b082      	sub	sp, #8
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800672c:	6878      	ldr	r0, [r7, #4]
 800672e:	f003 f877 	bl	8009820 <USBD_LL_Start>
 8006732:	4603      	mov	r3, r0
}
 8006734:	4618      	mov	r0, r3
 8006736:	3708      	adds	r7, #8
 8006738:	46bd      	mov	sp, r7
 800673a:	bd80      	pop	{r7, pc}

0800673c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800673c:	b480      	push	{r7}
 800673e:	b083      	sub	sp, #12
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006744:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006746:	4618      	mov	r0, r3
 8006748:	370c      	adds	r7, #12
 800674a:	46bd      	mov	sp, r7
 800674c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006750:	4770      	bx	lr

08006752 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006752:	b580      	push	{r7, lr}
 8006754:	b084      	sub	sp, #16
 8006756:	af00      	add	r7, sp, #0
 8006758:	6078      	str	r0, [r7, #4]
 800675a:	460b      	mov	r3, r1
 800675c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800675e:	2300      	movs	r3, #0
 8006760:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006768:	2b00      	cmp	r3, #0
 800676a:	d009      	beq.n	8006780 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	78fa      	ldrb	r2, [r7, #3]
 8006776:	4611      	mov	r1, r2
 8006778:	6878      	ldr	r0, [r7, #4]
 800677a:	4798      	blx	r3
 800677c:	4603      	mov	r3, r0
 800677e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006780:	7bfb      	ldrb	r3, [r7, #15]
}
 8006782:	4618      	mov	r0, r3
 8006784:	3710      	adds	r7, #16
 8006786:	46bd      	mov	sp, r7
 8006788:	bd80      	pop	{r7, pc}

0800678a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800678a:	b580      	push	{r7, lr}
 800678c:	b084      	sub	sp, #16
 800678e:	af00      	add	r7, sp, #0
 8006790:	6078      	str	r0, [r7, #4]
 8006792:	460b      	mov	r3, r1
 8006794:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006796:	2300      	movs	r3, #0
 8006798:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067a0:	685b      	ldr	r3, [r3, #4]
 80067a2:	78fa      	ldrb	r2, [r7, #3]
 80067a4:	4611      	mov	r1, r2
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	4798      	blx	r3
 80067aa:	4603      	mov	r3, r0
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d001      	beq.n	80067b4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80067b0:	2303      	movs	r3, #3
 80067b2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80067b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80067b6:	4618      	mov	r0, r3
 80067b8:	3710      	adds	r7, #16
 80067ba:	46bd      	mov	sp, r7
 80067bc:	bd80      	pop	{r7, pc}

080067be <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80067be:	b580      	push	{r7, lr}
 80067c0:	b084      	sub	sp, #16
 80067c2:	af00      	add	r7, sp, #0
 80067c4:	6078      	str	r0, [r7, #4]
 80067c6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80067ce:	6839      	ldr	r1, [r7, #0]
 80067d0:	4618      	mov	r0, r3
 80067d2:	f001 f90e 	bl	80079f2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2201      	movs	r2, #1
 80067da:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80067e4:	461a      	mov	r2, r3
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80067f2:	f003 031f 	and.w	r3, r3, #31
 80067f6:	2b02      	cmp	r3, #2
 80067f8:	d01a      	beq.n	8006830 <USBD_LL_SetupStage+0x72>
 80067fa:	2b02      	cmp	r3, #2
 80067fc:	d822      	bhi.n	8006844 <USBD_LL_SetupStage+0x86>
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d002      	beq.n	8006808 <USBD_LL_SetupStage+0x4a>
 8006802:	2b01      	cmp	r3, #1
 8006804:	d00a      	beq.n	800681c <USBD_LL_SetupStage+0x5e>
 8006806:	e01d      	b.n	8006844 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800680e:	4619      	mov	r1, r3
 8006810:	6878      	ldr	r0, [r7, #4]
 8006812:	f000 fb65 	bl	8006ee0 <USBD_StdDevReq>
 8006816:	4603      	mov	r3, r0
 8006818:	73fb      	strb	r3, [r7, #15]
      break;
 800681a:	e020      	b.n	800685e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006822:	4619      	mov	r1, r3
 8006824:	6878      	ldr	r0, [r7, #4]
 8006826:	f000 fbcd 	bl	8006fc4 <USBD_StdItfReq>
 800682a:	4603      	mov	r3, r0
 800682c:	73fb      	strb	r3, [r7, #15]
      break;
 800682e:	e016      	b.n	800685e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006836:	4619      	mov	r1, r3
 8006838:	6878      	ldr	r0, [r7, #4]
 800683a:	f000 fc2f 	bl	800709c <USBD_StdEPReq>
 800683e:	4603      	mov	r3, r0
 8006840:	73fb      	strb	r3, [r7, #15]
      break;
 8006842:	e00c      	b.n	800685e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800684a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800684e:	b2db      	uxtb	r3, r3
 8006850:	4619      	mov	r1, r3
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	f003 f844 	bl	80098e0 <USBD_LL_StallEP>
 8006858:	4603      	mov	r3, r0
 800685a:	73fb      	strb	r3, [r7, #15]
      break;
 800685c:	bf00      	nop
  }

  return ret;
 800685e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006860:	4618      	mov	r0, r3
 8006862:	3710      	adds	r7, #16
 8006864:	46bd      	mov	sp, r7
 8006866:	bd80      	pop	{r7, pc}

08006868 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b086      	sub	sp, #24
 800686c:	af00      	add	r7, sp, #0
 800686e:	60f8      	str	r0, [r7, #12]
 8006870:	460b      	mov	r3, r1
 8006872:	607a      	str	r2, [r7, #4]
 8006874:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006876:	2300      	movs	r3, #0
 8006878:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800687a:	7afb      	ldrb	r3, [r7, #11]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d16e      	bne.n	800695e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006886:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800688e:	2b03      	cmp	r3, #3
 8006890:	f040 8098 	bne.w	80069c4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006894:	693b      	ldr	r3, [r7, #16]
 8006896:	689a      	ldr	r2, [r3, #8]
 8006898:	693b      	ldr	r3, [r7, #16]
 800689a:	68db      	ldr	r3, [r3, #12]
 800689c:	429a      	cmp	r2, r3
 800689e:	d913      	bls.n	80068c8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80068a0:	693b      	ldr	r3, [r7, #16]
 80068a2:	689a      	ldr	r2, [r3, #8]
 80068a4:	693b      	ldr	r3, [r7, #16]
 80068a6:	68db      	ldr	r3, [r3, #12]
 80068a8:	1ad2      	subs	r2, r2, r3
 80068aa:	693b      	ldr	r3, [r7, #16]
 80068ac:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80068ae:	693b      	ldr	r3, [r7, #16]
 80068b0:	68da      	ldr	r2, [r3, #12]
 80068b2:	693b      	ldr	r3, [r7, #16]
 80068b4:	689b      	ldr	r3, [r3, #8]
 80068b6:	4293      	cmp	r3, r2
 80068b8:	bf28      	it	cs
 80068ba:	4613      	movcs	r3, r2
 80068bc:	461a      	mov	r2, r3
 80068be:	6879      	ldr	r1, [r7, #4]
 80068c0:	68f8      	ldr	r0, [r7, #12]
 80068c2:	f001 f98a 	bl	8007bda <USBD_CtlContinueRx>
 80068c6:	e07d      	b.n	80069c4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80068ce:	f003 031f 	and.w	r3, r3, #31
 80068d2:	2b02      	cmp	r3, #2
 80068d4:	d014      	beq.n	8006900 <USBD_LL_DataOutStage+0x98>
 80068d6:	2b02      	cmp	r3, #2
 80068d8:	d81d      	bhi.n	8006916 <USBD_LL_DataOutStage+0xae>
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d002      	beq.n	80068e4 <USBD_LL_DataOutStage+0x7c>
 80068de:	2b01      	cmp	r3, #1
 80068e0:	d003      	beq.n	80068ea <USBD_LL_DataOutStage+0x82>
 80068e2:	e018      	b.n	8006916 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80068e4:	2300      	movs	r3, #0
 80068e6:	75bb      	strb	r3, [r7, #22]
            break;
 80068e8:	e018      	b.n	800691c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80068f0:	b2db      	uxtb	r3, r3
 80068f2:	4619      	mov	r1, r3
 80068f4:	68f8      	ldr	r0, [r7, #12]
 80068f6:	f000 fa64 	bl	8006dc2 <USBD_CoreFindIF>
 80068fa:	4603      	mov	r3, r0
 80068fc:	75bb      	strb	r3, [r7, #22]
            break;
 80068fe:	e00d      	b.n	800691c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006906:	b2db      	uxtb	r3, r3
 8006908:	4619      	mov	r1, r3
 800690a:	68f8      	ldr	r0, [r7, #12]
 800690c:	f000 fa66 	bl	8006ddc <USBD_CoreFindEP>
 8006910:	4603      	mov	r3, r0
 8006912:	75bb      	strb	r3, [r7, #22]
            break;
 8006914:	e002      	b.n	800691c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006916:	2300      	movs	r3, #0
 8006918:	75bb      	strb	r3, [r7, #22]
            break;
 800691a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800691c:	7dbb      	ldrb	r3, [r7, #22]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d119      	bne.n	8006956 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006928:	b2db      	uxtb	r3, r3
 800692a:	2b03      	cmp	r3, #3
 800692c:	d113      	bne.n	8006956 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800692e:	7dba      	ldrb	r2, [r7, #22]
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	32ae      	adds	r2, #174	; 0xae
 8006934:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006938:	691b      	ldr	r3, [r3, #16]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d00b      	beq.n	8006956 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800693e:	7dba      	ldrb	r2, [r7, #22]
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006946:	7dba      	ldrb	r2, [r7, #22]
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	32ae      	adds	r2, #174	; 0xae
 800694c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006950:	691b      	ldr	r3, [r3, #16]
 8006952:	68f8      	ldr	r0, [r7, #12]
 8006954:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006956:	68f8      	ldr	r0, [r7, #12]
 8006958:	f001 f950 	bl	8007bfc <USBD_CtlSendStatus>
 800695c:	e032      	b.n	80069c4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800695e:	7afb      	ldrb	r3, [r7, #11]
 8006960:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006964:	b2db      	uxtb	r3, r3
 8006966:	4619      	mov	r1, r3
 8006968:	68f8      	ldr	r0, [r7, #12]
 800696a:	f000 fa37 	bl	8006ddc <USBD_CoreFindEP>
 800696e:	4603      	mov	r3, r0
 8006970:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006972:	7dbb      	ldrb	r3, [r7, #22]
 8006974:	2bff      	cmp	r3, #255	; 0xff
 8006976:	d025      	beq.n	80069c4 <USBD_LL_DataOutStage+0x15c>
 8006978:	7dbb      	ldrb	r3, [r7, #22]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d122      	bne.n	80069c4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006984:	b2db      	uxtb	r3, r3
 8006986:	2b03      	cmp	r3, #3
 8006988:	d117      	bne.n	80069ba <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800698a:	7dba      	ldrb	r2, [r7, #22]
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	32ae      	adds	r2, #174	; 0xae
 8006990:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006994:	699b      	ldr	r3, [r3, #24]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d00f      	beq.n	80069ba <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800699a:	7dba      	ldrb	r2, [r7, #22]
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80069a2:	7dba      	ldrb	r2, [r7, #22]
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	32ae      	adds	r2, #174	; 0xae
 80069a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069ac:	699b      	ldr	r3, [r3, #24]
 80069ae:	7afa      	ldrb	r2, [r7, #11]
 80069b0:	4611      	mov	r1, r2
 80069b2:	68f8      	ldr	r0, [r7, #12]
 80069b4:	4798      	blx	r3
 80069b6:	4603      	mov	r3, r0
 80069b8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80069ba:	7dfb      	ldrb	r3, [r7, #23]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d001      	beq.n	80069c4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80069c0:	7dfb      	ldrb	r3, [r7, #23]
 80069c2:	e000      	b.n	80069c6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80069c4:	2300      	movs	r3, #0
}
 80069c6:	4618      	mov	r0, r3
 80069c8:	3718      	adds	r7, #24
 80069ca:	46bd      	mov	sp, r7
 80069cc:	bd80      	pop	{r7, pc}

080069ce <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80069ce:	b580      	push	{r7, lr}
 80069d0:	b086      	sub	sp, #24
 80069d2:	af00      	add	r7, sp, #0
 80069d4:	60f8      	str	r0, [r7, #12]
 80069d6:	460b      	mov	r3, r1
 80069d8:	607a      	str	r2, [r7, #4]
 80069da:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80069dc:	7afb      	ldrb	r3, [r7, #11]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d16f      	bne.n	8006ac2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	3314      	adds	r3, #20
 80069e6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80069ee:	2b02      	cmp	r3, #2
 80069f0:	d15a      	bne.n	8006aa8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80069f2:	693b      	ldr	r3, [r7, #16]
 80069f4:	689a      	ldr	r2, [r3, #8]
 80069f6:	693b      	ldr	r3, [r7, #16]
 80069f8:	68db      	ldr	r3, [r3, #12]
 80069fa:	429a      	cmp	r2, r3
 80069fc:	d914      	bls.n	8006a28 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80069fe:	693b      	ldr	r3, [r7, #16]
 8006a00:	689a      	ldr	r2, [r3, #8]
 8006a02:	693b      	ldr	r3, [r7, #16]
 8006a04:	68db      	ldr	r3, [r3, #12]
 8006a06:	1ad2      	subs	r2, r2, r3
 8006a08:	693b      	ldr	r3, [r7, #16]
 8006a0a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006a0c:	693b      	ldr	r3, [r7, #16]
 8006a0e:	689b      	ldr	r3, [r3, #8]
 8006a10:	461a      	mov	r2, r3
 8006a12:	6879      	ldr	r1, [r7, #4]
 8006a14:	68f8      	ldr	r0, [r7, #12]
 8006a16:	f001 f8b2 	bl	8007b7e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	2100      	movs	r1, #0
 8006a20:	68f8      	ldr	r0, [r7, #12]
 8006a22:	f003 f807 	bl	8009a34 <USBD_LL_PrepareReceive>
 8006a26:	e03f      	b.n	8006aa8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006a28:	693b      	ldr	r3, [r7, #16]
 8006a2a:	68da      	ldr	r2, [r3, #12]
 8006a2c:	693b      	ldr	r3, [r7, #16]
 8006a2e:	689b      	ldr	r3, [r3, #8]
 8006a30:	429a      	cmp	r2, r3
 8006a32:	d11c      	bne.n	8006a6e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006a34:	693b      	ldr	r3, [r7, #16]
 8006a36:	685a      	ldr	r2, [r3, #4]
 8006a38:	693b      	ldr	r3, [r7, #16]
 8006a3a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006a3c:	429a      	cmp	r2, r3
 8006a3e:	d316      	bcc.n	8006a6e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006a40:	693b      	ldr	r3, [r7, #16]
 8006a42:	685a      	ldr	r2, [r3, #4]
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006a4a:	429a      	cmp	r2, r3
 8006a4c:	d20f      	bcs.n	8006a6e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006a4e:	2200      	movs	r2, #0
 8006a50:	2100      	movs	r1, #0
 8006a52:	68f8      	ldr	r0, [r7, #12]
 8006a54:	f001 f893 	bl	8007b7e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006a60:	2300      	movs	r3, #0
 8006a62:	2200      	movs	r2, #0
 8006a64:	2100      	movs	r1, #0
 8006a66:	68f8      	ldr	r0, [r7, #12]
 8006a68:	f002 ffe4 	bl	8009a34 <USBD_LL_PrepareReceive>
 8006a6c:	e01c      	b.n	8006aa8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a74:	b2db      	uxtb	r3, r3
 8006a76:	2b03      	cmp	r3, #3
 8006a78:	d10f      	bne.n	8006a9a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a80:	68db      	ldr	r3, [r3, #12]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d009      	beq.n	8006a9a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	2200      	movs	r2, #0
 8006a8a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a94:	68db      	ldr	r3, [r3, #12]
 8006a96:	68f8      	ldr	r0, [r7, #12]
 8006a98:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006a9a:	2180      	movs	r1, #128	; 0x80
 8006a9c:	68f8      	ldr	r0, [r7, #12]
 8006a9e:	f002 ff1f 	bl	80098e0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006aa2:	68f8      	ldr	r0, [r7, #12]
 8006aa4:	f001 f8bd 	bl	8007c22 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d03a      	beq.n	8006b28 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006ab2:	68f8      	ldr	r0, [r7, #12]
 8006ab4:	f7ff fe42 	bl	800673c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	2200      	movs	r2, #0
 8006abc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006ac0:	e032      	b.n	8006b28 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006ac2:	7afb      	ldrb	r3, [r7, #11]
 8006ac4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006ac8:	b2db      	uxtb	r3, r3
 8006aca:	4619      	mov	r1, r3
 8006acc:	68f8      	ldr	r0, [r7, #12]
 8006ace:	f000 f985 	bl	8006ddc <USBD_CoreFindEP>
 8006ad2:	4603      	mov	r3, r0
 8006ad4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006ad6:	7dfb      	ldrb	r3, [r7, #23]
 8006ad8:	2bff      	cmp	r3, #255	; 0xff
 8006ada:	d025      	beq.n	8006b28 <USBD_LL_DataInStage+0x15a>
 8006adc:	7dfb      	ldrb	r3, [r7, #23]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d122      	bne.n	8006b28 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ae8:	b2db      	uxtb	r3, r3
 8006aea:	2b03      	cmp	r3, #3
 8006aec:	d11c      	bne.n	8006b28 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006aee:	7dfa      	ldrb	r2, [r7, #23]
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	32ae      	adds	r2, #174	; 0xae
 8006af4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006af8:	695b      	ldr	r3, [r3, #20]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d014      	beq.n	8006b28 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006afe:	7dfa      	ldrb	r2, [r7, #23]
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006b06:	7dfa      	ldrb	r2, [r7, #23]
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	32ae      	adds	r2, #174	; 0xae
 8006b0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b10:	695b      	ldr	r3, [r3, #20]
 8006b12:	7afa      	ldrb	r2, [r7, #11]
 8006b14:	4611      	mov	r1, r2
 8006b16:	68f8      	ldr	r0, [r7, #12]
 8006b18:	4798      	blx	r3
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006b1e:	7dbb      	ldrb	r3, [r7, #22]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d001      	beq.n	8006b28 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006b24:	7dbb      	ldrb	r3, [r7, #22]
 8006b26:	e000      	b.n	8006b2a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006b28:	2300      	movs	r3, #0
}
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	3718      	adds	r7, #24
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	bd80      	pop	{r7, pc}

08006b32 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006b32:	b580      	push	{r7, lr}
 8006b34:	b084      	sub	sp, #16
 8006b36:	af00      	add	r7, sp, #0
 8006b38:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2201      	movs	r2, #1
 8006b42:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2200      	movs	r2, #0
 8006b52:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2200      	movs	r2, #0
 8006b58:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d014      	beq.n	8006b98 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b74:	685b      	ldr	r3, [r3, #4]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d00e      	beq.n	8006b98 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b80:	685b      	ldr	r3, [r3, #4]
 8006b82:	687a      	ldr	r2, [r7, #4]
 8006b84:	6852      	ldr	r2, [r2, #4]
 8006b86:	b2d2      	uxtb	r2, r2
 8006b88:	4611      	mov	r1, r2
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	4798      	blx	r3
 8006b8e:	4603      	mov	r3, r0
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d001      	beq.n	8006b98 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006b94:	2303      	movs	r3, #3
 8006b96:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006b98:	2340      	movs	r3, #64	; 0x40
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	2100      	movs	r1, #0
 8006b9e:	6878      	ldr	r0, [r7, #4]
 8006ba0:	f002 fe59 	bl	8009856 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2201      	movs	r2, #1
 8006ba8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2240      	movs	r2, #64	; 0x40
 8006bb0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006bb4:	2340      	movs	r3, #64	; 0x40
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	2180      	movs	r1, #128	; 0x80
 8006bba:	6878      	ldr	r0, [r7, #4]
 8006bbc:	f002 fe4b 	bl	8009856 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2201      	movs	r2, #1
 8006bc4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2240      	movs	r2, #64	; 0x40
 8006bca:	621a      	str	r2, [r3, #32]

  return ret;
 8006bcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bce:	4618      	mov	r0, r3
 8006bd0:	3710      	adds	r7, #16
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	bd80      	pop	{r7, pc}

08006bd6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006bd6:	b480      	push	{r7}
 8006bd8:	b083      	sub	sp, #12
 8006bda:	af00      	add	r7, sp, #0
 8006bdc:	6078      	str	r0, [r7, #4]
 8006bde:	460b      	mov	r3, r1
 8006be0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	78fa      	ldrb	r2, [r7, #3]
 8006be6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006be8:	2300      	movs	r3, #0
}
 8006bea:	4618      	mov	r0, r3
 8006bec:	370c      	adds	r7, #12
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf4:	4770      	bx	lr

08006bf6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006bf6:	b480      	push	{r7}
 8006bf8:	b083      	sub	sp, #12
 8006bfa:	af00      	add	r7, sp, #0
 8006bfc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c04:	b2db      	uxtb	r3, r3
 8006c06:	2b04      	cmp	r3, #4
 8006c08:	d006      	beq.n	8006c18 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c10:	b2da      	uxtb	r2, r3
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2204      	movs	r2, #4
 8006c1c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006c20:	2300      	movs	r3, #0
}
 8006c22:	4618      	mov	r0, r3
 8006c24:	370c      	adds	r7, #12
 8006c26:	46bd      	mov	sp, r7
 8006c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2c:	4770      	bx	lr

08006c2e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006c2e:	b480      	push	{r7}
 8006c30:	b083      	sub	sp, #12
 8006c32:	af00      	add	r7, sp, #0
 8006c34:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c3c:	b2db      	uxtb	r3, r3
 8006c3e:	2b04      	cmp	r3, #4
 8006c40:	d106      	bne.n	8006c50 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006c48:	b2da      	uxtb	r2, r3
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006c50:	2300      	movs	r3, #0
}
 8006c52:	4618      	mov	r0, r3
 8006c54:	370c      	adds	r7, #12
 8006c56:	46bd      	mov	sp, r7
 8006c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5c:	4770      	bx	lr

08006c5e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006c5e:	b580      	push	{r7, lr}
 8006c60:	b082      	sub	sp, #8
 8006c62:	af00      	add	r7, sp, #0
 8006c64:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c6c:	b2db      	uxtb	r3, r3
 8006c6e:	2b03      	cmp	r3, #3
 8006c70:	d110      	bne.n	8006c94 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d00b      	beq.n	8006c94 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c82:	69db      	ldr	r3, [r3, #28]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d005      	beq.n	8006c94 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c8e:	69db      	ldr	r3, [r3, #28]
 8006c90:	6878      	ldr	r0, [r7, #4]
 8006c92:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006c94:	2300      	movs	r3, #0
}
 8006c96:	4618      	mov	r0, r3
 8006c98:	3708      	adds	r7, #8
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	bd80      	pop	{r7, pc}

08006c9e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006c9e:	b580      	push	{r7, lr}
 8006ca0:	b082      	sub	sp, #8
 8006ca2:	af00      	add	r7, sp, #0
 8006ca4:	6078      	str	r0, [r7, #4]
 8006ca6:	460b      	mov	r3, r1
 8006ca8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	32ae      	adds	r2, #174	; 0xae
 8006cb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d101      	bne.n	8006cc0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006cbc:	2303      	movs	r3, #3
 8006cbe:	e01c      	b.n	8006cfa <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cc6:	b2db      	uxtb	r3, r3
 8006cc8:	2b03      	cmp	r3, #3
 8006cca:	d115      	bne.n	8006cf8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	32ae      	adds	r2, #174	; 0xae
 8006cd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cda:	6a1b      	ldr	r3, [r3, #32]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d00b      	beq.n	8006cf8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	32ae      	adds	r2, #174	; 0xae
 8006cea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cee:	6a1b      	ldr	r3, [r3, #32]
 8006cf0:	78fa      	ldrb	r2, [r7, #3]
 8006cf2:	4611      	mov	r1, r2
 8006cf4:	6878      	ldr	r0, [r7, #4]
 8006cf6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006cf8:	2300      	movs	r3, #0
}
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	3708      	adds	r7, #8
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bd80      	pop	{r7, pc}

08006d02 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006d02:	b580      	push	{r7, lr}
 8006d04:	b082      	sub	sp, #8
 8006d06:	af00      	add	r7, sp, #0
 8006d08:	6078      	str	r0, [r7, #4]
 8006d0a:	460b      	mov	r3, r1
 8006d0c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	32ae      	adds	r2, #174	; 0xae
 8006d18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d101      	bne.n	8006d24 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006d20:	2303      	movs	r3, #3
 8006d22:	e01c      	b.n	8006d5e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d2a:	b2db      	uxtb	r3, r3
 8006d2c:	2b03      	cmp	r3, #3
 8006d2e:	d115      	bne.n	8006d5c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	32ae      	adds	r2, #174	; 0xae
 8006d3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d00b      	beq.n	8006d5c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	32ae      	adds	r2, #174	; 0xae
 8006d4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d54:	78fa      	ldrb	r2, [r7, #3]
 8006d56:	4611      	mov	r1, r2
 8006d58:	6878      	ldr	r0, [r7, #4]
 8006d5a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006d5c:	2300      	movs	r3, #0
}
 8006d5e:	4618      	mov	r0, r3
 8006d60:	3708      	adds	r7, #8
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bd80      	pop	{r7, pc}

08006d66 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006d66:	b480      	push	{r7}
 8006d68:	b083      	sub	sp, #12
 8006d6a:	af00      	add	r7, sp, #0
 8006d6c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006d6e:	2300      	movs	r3, #0
}
 8006d70:	4618      	mov	r0, r3
 8006d72:	370c      	adds	r7, #12
 8006d74:	46bd      	mov	sp, r7
 8006d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7a:	4770      	bx	lr

08006d7c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b084      	sub	sp, #16
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006d84:	2300      	movs	r3, #0
 8006d86:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2201      	movs	r2, #1
 8006d8c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d00e      	beq.n	8006db8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006da0:	685b      	ldr	r3, [r3, #4]
 8006da2:	687a      	ldr	r2, [r7, #4]
 8006da4:	6852      	ldr	r2, [r2, #4]
 8006da6:	b2d2      	uxtb	r2, r2
 8006da8:	4611      	mov	r1, r2
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	4798      	blx	r3
 8006dae:	4603      	mov	r3, r0
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d001      	beq.n	8006db8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006db4:	2303      	movs	r3, #3
 8006db6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006db8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dba:	4618      	mov	r0, r3
 8006dbc:	3710      	adds	r7, #16
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	bd80      	pop	{r7, pc}

08006dc2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006dc2:	b480      	push	{r7}
 8006dc4:	b083      	sub	sp, #12
 8006dc6:	af00      	add	r7, sp, #0
 8006dc8:	6078      	str	r0, [r7, #4]
 8006dca:	460b      	mov	r3, r1
 8006dcc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006dce:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	370c      	adds	r7, #12
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dda:	4770      	bx	lr

08006ddc <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006ddc:	b480      	push	{r7}
 8006dde:	b083      	sub	sp, #12
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
 8006de4:	460b      	mov	r3, r1
 8006de6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006de8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006dea:	4618      	mov	r0, r3
 8006dec:	370c      	adds	r7, #12
 8006dee:	46bd      	mov	sp, r7
 8006df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df4:	4770      	bx	lr

08006df6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8006df6:	b580      	push	{r7, lr}
 8006df8:	b086      	sub	sp, #24
 8006dfa:	af00      	add	r7, sp, #0
 8006dfc:	6078      	str	r0, [r7, #4]
 8006dfe:	460b      	mov	r3, r1
 8006e00:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	885b      	ldrh	r3, [r3, #2]
 8006e12:	b29a      	uxth	r2, r3
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	781b      	ldrb	r3, [r3, #0]
 8006e18:	b29b      	uxth	r3, r3
 8006e1a:	429a      	cmp	r2, r3
 8006e1c:	d920      	bls.n	8006e60 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	781b      	ldrb	r3, [r3, #0]
 8006e22:	b29b      	uxth	r3, r3
 8006e24:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006e26:	e013      	b.n	8006e50 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006e28:	f107 030a 	add.w	r3, r7, #10
 8006e2c:	4619      	mov	r1, r3
 8006e2e:	6978      	ldr	r0, [r7, #20]
 8006e30:	f000 f81b 	bl	8006e6a <USBD_GetNextDesc>
 8006e34:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006e36:	697b      	ldr	r3, [r7, #20]
 8006e38:	785b      	ldrb	r3, [r3, #1]
 8006e3a:	2b05      	cmp	r3, #5
 8006e3c:	d108      	bne.n	8006e50 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006e3e:	697b      	ldr	r3, [r7, #20]
 8006e40:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006e42:	693b      	ldr	r3, [r7, #16]
 8006e44:	789b      	ldrb	r3, [r3, #2]
 8006e46:	78fa      	ldrb	r2, [r7, #3]
 8006e48:	429a      	cmp	r2, r3
 8006e4a:	d008      	beq.n	8006e5e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	885b      	ldrh	r3, [r3, #2]
 8006e54:	b29a      	uxth	r2, r3
 8006e56:	897b      	ldrh	r3, [r7, #10]
 8006e58:	429a      	cmp	r2, r3
 8006e5a:	d8e5      	bhi.n	8006e28 <USBD_GetEpDesc+0x32>
 8006e5c:	e000      	b.n	8006e60 <USBD_GetEpDesc+0x6a>
          break;
 8006e5e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006e60:	693b      	ldr	r3, [r7, #16]
}
 8006e62:	4618      	mov	r0, r3
 8006e64:	3718      	adds	r7, #24
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bd80      	pop	{r7, pc}

08006e6a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006e6a:	b480      	push	{r7}
 8006e6c:	b085      	sub	sp, #20
 8006e6e:	af00      	add	r7, sp, #0
 8006e70:	6078      	str	r0, [r7, #4]
 8006e72:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	881a      	ldrh	r2, [r3, #0]
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	781b      	ldrb	r3, [r3, #0]
 8006e80:	b29b      	uxth	r3, r3
 8006e82:	4413      	add	r3, r2
 8006e84:	b29a      	uxth	r2, r3
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	781b      	ldrb	r3, [r3, #0]
 8006e8e:	461a      	mov	r2, r3
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	4413      	add	r3, r2
 8006e94:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006e96:	68fb      	ldr	r3, [r7, #12]
}
 8006e98:	4618      	mov	r0, r3
 8006e9a:	3714      	adds	r7, #20
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea2:	4770      	bx	lr

08006ea4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006ea4:	b480      	push	{r7}
 8006ea6:	b087      	sub	sp, #28
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006eb0:	697b      	ldr	r3, [r7, #20]
 8006eb2:	781b      	ldrb	r3, [r3, #0]
 8006eb4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006eb6:	697b      	ldr	r3, [r7, #20]
 8006eb8:	3301      	adds	r3, #1
 8006eba:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006ebc:	697b      	ldr	r3, [r7, #20]
 8006ebe:	781b      	ldrb	r3, [r3, #0]
 8006ec0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006ec2:	8a3b      	ldrh	r3, [r7, #16]
 8006ec4:	021b      	lsls	r3, r3, #8
 8006ec6:	b21a      	sxth	r2, r3
 8006ec8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006ecc:	4313      	orrs	r3, r2
 8006ece:	b21b      	sxth	r3, r3
 8006ed0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006ed2:	89fb      	ldrh	r3, [r7, #14]
}
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	371c      	adds	r7, #28
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ede:	4770      	bx	lr

08006ee0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b084      	sub	sp, #16
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
 8006ee8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006eea:	2300      	movs	r3, #0
 8006eec:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	781b      	ldrb	r3, [r3, #0]
 8006ef2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006ef6:	2b40      	cmp	r3, #64	; 0x40
 8006ef8:	d005      	beq.n	8006f06 <USBD_StdDevReq+0x26>
 8006efa:	2b40      	cmp	r3, #64	; 0x40
 8006efc:	d857      	bhi.n	8006fae <USBD_StdDevReq+0xce>
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d00f      	beq.n	8006f22 <USBD_StdDevReq+0x42>
 8006f02:	2b20      	cmp	r3, #32
 8006f04:	d153      	bne.n	8006fae <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	32ae      	adds	r2, #174	; 0xae
 8006f10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f14:	689b      	ldr	r3, [r3, #8]
 8006f16:	6839      	ldr	r1, [r7, #0]
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	4798      	blx	r3
 8006f1c:	4603      	mov	r3, r0
 8006f1e:	73fb      	strb	r3, [r7, #15]
      break;
 8006f20:	e04a      	b.n	8006fb8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	785b      	ldrb	r3, [r3, #1]
 8006f26:	2b09      	cmp	r3, #9
 8006f28:	d83b      	bhi.n	8006fa2 <USBD_StdDevReq+0xc2>
 8006f2a:	a201      	add	r2, pc, #4	; (adr r2, 8006f30 <USBD_StdDevReq+0x50>)
 8006f2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f30:	08006f85 	.word	0x08006f85
 8006f34:	08006f99 	.word	0x08006f99
 8006f38:	08006fa3 	.word	0x08006fa3
 8006f3c:	08006f8f 	.word	0x08006f8f
 8006f40:	08006fa3 	.word	0x08006fa3
 8006f44:	08006f63 	.word	0x08006f63
 8006f48:	08006f59 	.word	0x08006f59
 8006f4c:	08006fa3 	.word	0x08006fa3
 8006f50:	08006f7b 	.word	0x08006f7b
 8006f54:	08006f6d 	.word	0x08006f6d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006f58:	6839      	ldr	r1, [r7, #0]
 8006f5a:	6878      	ldr	r0, [r7, #4]
 8006f5c:	f000 fa3c 	bl	80073d8 <USBD_GetDescriptor>
          break;
 8006f60:	e024      	b.n	8006fac <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006f62:	6839      	ldr	r1, [r7, #0]
 8006f64:	6878      	ldr	r0, [r7, #4]
 8006f66:	f000 fba1 	bl	80076ac <USBD_SetAddress>
          break;
 8006f6a:	e01f      	b.n	8006fac <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006f6c:	6839      	ldr	r1, [r7, #0]
 8006f6e:	6878      	ldr	r0, [r7, #4]
 8006f70:	f000 fbe0 	bl	8007734 <USBD_SetConfig>
 8006f74:	4603      	mov	r3, r0
 8006f76:	73fb      	strb	r3, [r7, #15]
          break;
 8006f78:	e018      	b.n	8006fac <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006f7a:	6839      	ldr	r1, [r7, #0]
 8006f7c:	6878      	ldr	r0, [r7, #4]
 8006f7e:	f000 fc83 	bl	8007888 <USBD_GetConfig>
          break;
 8006f82:	e013      	b.n	8006fac <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006f84:	6839      	ldr	r1, [r7, #0]
 8006f86:	6878      	ldr	r0, [r7, #4]
 8006f88:	f000 fcb4 	bl	80078f4 <USBD_GetStatus>
          break;
 8006f8c:	e00e      	b.n	8006fac <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006f8e:	6839      	ldr	r1, [r7, #0]
 8006f90:	6878      	ldr	r0, [r7, #4]
 8006f92:	f000 fce3 	bl	800795c <USBD_SetFeature>
          break;
 8006f96:	e009      	b.n	8006fac <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006f98:	6839      	ldr	r1, [r7, #0]
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	f000 fd07 	bl	80079ae <USBD_ClrFeature>
          break;
 8006fa0:	e004      	b.n	8006fac <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006fa2:	6839      	ldr	r1, [r7, #0]
 8006fa4:	6878      	ldr	r0, [r7, #4]
 8006fa6:	f000 fd5e 	bl	8007a66 <USBD_CtlError>
          break;
 8006faa:	bf00      	nop
      }
      break;
 8006fac:	e004      	b.n	8006fb8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8006fae:	6839      	ldr	r1, [r7, #0]
 8006fb0:	6878      	ldr	r0, [r7, #4]
 8006fb2:	f000 fd58 	bl	8007a66 <USBD_CtlError>
      break;
 8006fb6:	bf00      	nop
  }

  return ret;
 8006fb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fba:	4618      	mov	r0, r3
 8006fbc:	3710      	adds	r7, #16
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	bd80      	pop	{r7, pc}
 8006fc2:	bf00      	nop

08006fc4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b084      	sub	sp, #16
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
 8006fcc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006fce:	2300      	movs	r3, #0
 8006fd0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	781b      	ldrb	r3, [r3, #0]
 8006fd6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006fda:	2b40      	cmp	r3, #64	; 0x40
 8006fdc:	d005      	beq.n	8006fea <USBD_StdItfReq+0x26>
 8006fde:	2b40      	cmp	r3, #64	; 0x40
 8006fe0:	d852      	bhi.n	8007088 <USBD_StdItfReq+0xc4>
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d001      	beq.n	8006fea <USBD_StdItfReq+0x26>
 8006fe6:	2b20      	cmp	r3, #32
 8006fe8:	d14e      	bne.n	8007088 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ff0:	b2db      	uxtb	r3, r3
 8006ff2:	3b01      	subs	r3, #1
 8006ff4:	2b02      	cmp	r3, #2
 8006ff6:	d840      	bhi.n	800707a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	889b      	ldrh	r3, [r3, #4]
 8006ffc:	b2db      	uxtb	r3, r3
 8006ffe:	2b01      	cmp	r3, #1
 8007000:	d836      	bhi.n	8007070 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	889b      	ldrh	r3, [r3, #4]
 8007006:	b2db      	uxtb	r3, r3
 8007008:	4619      	mov	r1, r3
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	f7ff fed9 	bl	8006dc2 <USBD_CoreFindIF>
 8007010:	4603      	mov	r3, r0
 8007012:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007014:	7bbb      	ldrb	r3, [r7, #14]
 8007016:	2bff      	cmp	r3, #255	; 0xff
 8007018:	d01d      	beq.n	8007056 <USBD_StdItfReq+0x92>
 800701a:	7bbb      	ldrb	r3, [r7, #14]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d11a      	bne.n	8007056 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007020:	7bba      	ldrb	r2, [r7, #14]
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	32ae      	adds	r2, #174	; 0xae
 8007026:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800702a:	689b      	ldr	r3, [r3, #8]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d00f      	beq.n	8007050 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007030:	7bba      	ldrb	r2, [r7, #14]
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007038:	7bba      	ldrb	r2, [r7, #14]
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	32ae      	adds	r2, #174	; 0xae
 800703e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007042:	689b      	ldr	r3, [r3, #8]
 8007044:	6839      	ldr	r1, [r7, #0]
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	4798      	blx	r3
 800704a:	4603      	mov	r3, r0
 800704c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800704e:	e004      	b.n	800705a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007050:	2303      	movs	r3, #3
 8007052:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007054:	e001      	b.n	800705a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007056:	2303      	movs	r3, #3
 8007058:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	88db      	ldrh	r3, [r3, #6]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d110      	bne.n	8007084 <USBD_StdItfReq+0xc0>
 8007062:	7bfb      	ldrb	r3, [r7, #15]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d10d      	bne.n	8007084 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007068:	6878      	ldr	r0, [r7, #4]
 800706a:	f000 fdc7 	bl	8007bfc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800706e:	e009      	b.n	8007084 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007070:	6839      	ldr	r1, [r7, #0]
 8007072:	6878      	ldr	r0, [r7, #4]
 8007074:	f000 fcf7 	bl	8007a66 <USBD_CtlError>
          break;
 8007078:	e004      	b.n	8007084 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800707a:	6839      	ldr	r1, [r7, #0]
 800707c:	6878      	ldr	r0, [r7, #4]
 800707e:	f000 fcf2 	bl	8007a66 <USBD_CtlError>
          break;
 8007082:	e000      	b.n	8007086 <USBD_StdItfReq+0xc2>
          break;
 8007084:	bf00      	nop
      }
      break;
 8007086:	e004      	b.n	8007092 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007088:	6839      	ldr	r1, [r7, #0]
 800708a:	6878      	ldr	r0, [r7, #4]
 800708c:	f000 fceb 	bl	8007a66 <USBD_CtlError>
      break;
 8007090:	bf00      	nop
  }

  return ret;
 8007092:	7bfb      	ldrb	r3, [r7, #15]
}
 8007094:	4618      	mov	r0, r3
 8007096:	3710      	adds	r7, #16
 8007098:	46bd      	mov	sp, r7
 800709a:	bd80      	pop	{r7, pc}

0800709c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b084      	sub	sp, #16
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
 80070a4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80070a6:	2300      	movs	r3, #0
 80070a8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	889b      	ldrh	r3, [r3, #4]
 80070ae:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	781b      	ldrb	r3, [r3, #0]
 80070b4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80070b8:	2b40      	cmp	r3, #64	; 0x40
 80070ba:	d007      	beq.n	80070cc <USBD_StdEPReq+0x30>
 80070bc:	2b40      	cmp	r3, #64	; 0x40
 80070be:	f200 817f 	bhi.w	80073c0 <USBD_StdEPReq+0x324>
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d02a      	beq.n	800711c <USBD_StdEPReq+0x80>
 80070c6:	2b20      	cmp	r3, #32
 80070c8:	f040 817a 	bne.w	80073c0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80070cc:	7bbb      	ldrb	r3, [r7, #14]
 80070ce:	4619      	mov	r1, r3
 80070d0:	6878      	ldr	r0, [r7, #4]
 80070d2:	f7ff fe83 	bl	8006ddc <USBD_CoreFindEP>
 80070d6:	4603      	mov	r3, r0
 80070d8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80070da:	7b7b      	ldrb	r3, [r7, #13]
 80070dc:	2bff      	cmp	r3, #255	; 0xff
 80070de:	f000 8174 	beq.w	80073ca <USBD_StdEPReq+0x32e>
 80070e2:	7b7b      	ldrb	r3, [r7, #13]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	f040 8170 	bne.w	80073ca <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80070ea:	7b7a      	ldrb	r2, [r7, #13]
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80070f2:	7b7a      	ldrb	r2, [r7, #13]
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	32ae      	adds	r2, #174	; 0xae
 80070f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070fc:	689b      	ldr	r3, [r3, #8]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	f000 8163 	beq.w	80073ca <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007104:	7b7a      	ldrb	r2, [r7, #13]
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	32ae      	adds	r2, #174	; 0xae
 800710a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800710e:	689b      	ldr	r3, [r3, #8]
 8007110:	6839      	ldr	r1, [r7, #0]
 8007112:	6878      	ldr	r0, [r7, #4]
 8007114:	4798      	blx	r3
 8007116:	4603      	mov	r3, r0
 8007118:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800711a:	e156      	b.n	80073ca <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	785b      	ldrb	r3, [r3, #1]
 8007120:	2b03      	cmp	r3, #3
 8007122:	d008      	beq.n	8007136 <USBD_StdEPReq+0x9a>
 8007124:	2b03      	cmp	r3, #3
 8007126:	f300 8145 	bgt.w	80073b4 <USBD_StdEPReq+0x318>
 800712a:	2b00      	cmp	r3, #0
 800712c:	f000 809b 	beq.w	8007266 <USBD_StdEPReq+0x1ca>
 8007130:	2b01      	cmp	r3, #1
 8007132:	d03c      	beq.n	80071ae <USBD_StdEPReq+0x112>
 8007134:	e13e      	b.n	80073b4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800713c:	b2db      	uxtb	r3, r3
 800713e:	2b02      	cmp	r3, #2
 8007140:	d002      	beq.n	8007148 <USBD_StdEPReq+0xac>
 8007142:	2b03      	cmp	r3, #3
 8007144:	d016      	beq.n	8007174 <USBD_StdEPReq+0xd8>
 8007146:	e02c      	b.n	80071a2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007148:	7bbb      	ldrb	r3, [r7, #14]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d00d      	beq.n	800716a <USBD_StdEPReq+0xce>
 800714e:	7bbb      	ldrb	r3, [r7, #14]
 8007150:	2b80      	cmp	r3, #128	; 0x80
 8007152:	d00a      	beq.n	800716a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007154:	7bbb      	ldrb	r3, [r7, #14]
 8007156:	4619      	mov	r1, r3
 8007158:	6878      	ldr	r0, [r7, #4]
 800715a:	f002 fbc1 	bl	80098e0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800715e:	2180      	movs	r1, #128	; 0x80
 8007160:	6878      	ldr	r0, [r7, #4]
 8007162:	f002 fbbd 	bl	80098e0 <USBD_LL_StallEP>
 8007166:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007168:	e020      	b.n	80071ac <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800716a:	6839      	ldr	r1, [r7, #0]
 800716c:	6878      	ldr	r0, [r7, #4]
 800716e:	f000 fc7a 	bl	8007a66 <USBD_CtlError>
              break;
 8007172:	e01b      	b.n	80071ac <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	885b      	ldrh	r3, [r3, #2]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d10e      	bne.n	800719a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800717c:	7bbb      	ldrb	r3, [r7, #14]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d00b      	beq.n	800719a <USBD_StdEPReq+0xfe>
 8007182:	7bbb      	ldrb	r3, [r7, #14]
 8007184:	2b80      	cmp	r3, #128	; 0x80
 8007186:	d008      	beq.n	800719a <USBD_StdEPReq+0xfe>
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	88db      	ldrh	r3, [r3, #6]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d104      	bne.n	800719a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007190:	7bbb      	ldrb	r3, [r7, #14]
 8007192:	4619      	mov	r1, r3
 8007194:	6878      	ldr	r0, [r7, #4]
 8007196:	f002 fba3 	bl	80098e0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800719a:	6878      	ldr	r0, [r7, #4]
 800719c:	f000 fd2e 	bl	8007bfc <USBD_CtlSendStatus>

              break;
 80071a0:	e004      	b.n	80071ac <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80071a2:	6839      	ldr	r1, [r7, #0]
 80071a4:	6878      	ldr	r0, [r7, #4]
 80071a6:	f000 fc5e 	bl	8007a66 <USBD_CtlError>
              break;
 80071aa:	bf00      	nop
          }
          break;
 80071ac:	e107      	b.n	80073be <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071b4:	b2db      	uxtb	r3, r3
 80071b6:	2b02      	cmp	r3, #2
 80071b8:	d002      	beq.n	80071c0 <USBD_StdEPReq+0x124>
 80071ba:	2b03      	cmp	r3, #3
 80071bc:	d016      	beq.n	80071ec <USBD_StdEPReq+0x150>
 80071be:	e04b      	b.n	8007258 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80071c0:	7bbb      	ldrb	r3, [r7, #14]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d00d      	beq.n	80071e2 <USBD_StdEPReq+0x146>
 80071c6:	7bbb      	ldrb	r3, [r7, #14]
 80071c8:	2b80      	cmp	r3, #128	; 0x80
 80071ca:	d00a      	beq.n	80071e2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80071cc:	7bbb      	ldrb	r3, [r7, #14]
 80071ce:	4619      	mov	r1, r3
 80071d0:	6878      	ldr	r0, [r7, #4]
 80071d2:	f002 fb85 	bl	80098e0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80071d6:	2180      	movs	r1, #128	; 0x80
 80071d8:	6878      	ldr	r0, [r7, #4]
 80071da:	f002 fb81 	bl	80098e0 <USBD_LL_StallEP>
 80071de:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80071e0:	e040      	b.n	8007264 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80071e2:	6839      	ldr	r1, [r7, #0]
 80071e4:	6878      	ldr	r0, [r7, #4]
 80071e6:	f000 fc3e 	bl	8007a66 <USBD_CtlError>
              break;
 80071ea:	e03b      	b.n	8007264 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	885b      	ldrh	r3, [r3, #2]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d136      	bne.n	8007262 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80071f4:	7bbb      	ldrb	r3, [r7, #14]
 80071f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d004      	beq.n	8007208 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80071fe:	7bbb      	ldrb	r3, [r7, #14]
 8007200:	4619      	mov	r1, r3
 8007202:	6878      	ldr	r0, [r7, #4]
 8007204:	f002 fb8b 	bl	800991e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007208:	6878      	ldr	r0, [r7, #4]
 800720a:	f000 fcf7 	bl	8007bfc <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800720e:	7bbb      	ldrb	r3, [r7, #14]
 8007210:	4619      	mov	r1, r3
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	f7ff fde2 	bl	8006ddc <USBD_CoreFindEP>
 8007218:	4603      	mov	r3, r0
 800721a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800721c:	7b7b      	ldrb	r3, [r7, #13]
 800721e:	2bff      	cmp	r3, #255	; 0xff
 8007220:	d01f      	beq.n	8007262 <USBD_StdEPReq+0x1c6>
 8007222:	7b7b      	ldrb	r3, [r7, #13]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d11c      	bne.n	8007262 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007228:	7b7a      	ldrb	r2, [r7, #13]
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007230:	7b7a      	ldrb	r2, [r7, #13]
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	32ae      	adds	r2, #174	; 0xae
 8007236:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800723a:	689b      	ldr	r3, [r3, #8]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d010      	beq.n	8007262 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007240:	7b7a      	ldrb	r2, [r7, #13]
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	32ae      	adds	r2, #174	; 0xae
 8007246:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800724a:	689b      	ldr	r3, [r3, #8]
 800724c:	6839      	ldr	r1, [r7, #0]
 800724e:	6878      	ldr	r0, [r7, #4]
 8007250:	4798      	blx	r3
 8007252:	4603      	mov	r3, r0
 8007254:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007256:	e004      	b.n	8007262 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007258:	6839      	ldr	r1, [r7, #0]
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	f000 fc03 	bl	8007a66 <USBD_CtlError>
              break;
 8007260:	e000      	b.n	8007264 <USBD_StdEPReq+0x1c8>
              break;
 8007262:	bf00      	nop
          }
          break;
 8007264:	e0ab      	b.n	80073be <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800726c:	b2db      	uxtb	r3, r3
 800726e:	2b02      	cmp	r3, #2
 8007270:	d002      	beq.n	8007278 <USBD_StdEPReq+0x1dc>
 8007272:	2b03      	cmp	r3, #3
 8007274:	d032      	beq.n	80072dc <USBD_StdEPReq+0x240>
 8007276:	e097      	b.n	80073a8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007278:	7bbb      	ldrb	r3, [r7, #14]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d007      	beq.n	800728e <USBD_StdEPReq+0x1f2>
 800727e:	7bbb      	ldrb	r3, [r7, #14]
 8007280:	2b80      	cmp	r3, #128	; 0x80
 8007282:	d004      	beq.n	800728e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007284:	6839      	ldr	r1, [r7, #0]
 8007286:	6878      	ldr	r0, [r7, #4]
 8007288:	f000 fbed 	bl	8007a66 <USBD_CtlError>
                break;
 800728c:	e091      	b.n	80073b2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800728e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007292:	2b00      	cmp	r3, #0
 8007294:	da0b      	bge.n	80072ae <USBD_StdEPReq+0x212>
 8007296:	7bbb      	ldrb	r3, [r7, #14]
 8007298:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800729c:	4613      	mov	r3, r2
 800729e:	009b      	lsls	r3, r3, #2
 80072a0:	4413      	add	r3, r2
 80072a2:	009b      	lsls	r3, r3, #2
 80072a4:	3310      	adds	r3, #16
 80072a6:	687a      	ldr	r2, [r7, #4]
 80072a8:	4413      	add	r3, r2
 80072aa:	3304      	adds	r3, #4
 80072ac:	e00b      	b.n	80072c6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80072ae:	7bbb      	ldrb	r3, [r7, #14]
 80072b0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80072b4:	4613      	mov	r3, r2
 80072b6:	009b      	lsls	r3, r3, #2
 80072b8:	4413      	add	r3, r2
 80072ba:	009b      	lsls	r3, r3, #2
 80072bc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80072c0:	687a      	ldr	r2, [r7, #4]
 80072c2:	4413      	add	r3, r2
 80072c4:	3304      	adds	r3, #4
 80072c6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80072c8:	68bb      	ldr	r3, [r7, #8]
 80072ca:	2200      	movs	r2, #0
 80072cc:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80072ce:	68bb      	ldr	r3, [r7, #8]
 80072d0:	2202      	movs	r2, #2
 80072d2:	4619      	mov	r1, r3
 80072d4:	6878      	ldr	r0, [r7, #4]
 80072d6:	f000 fc37 	bl	8007b48 <USBD_CtlSendData>
              break;
 80072da:	e06a      	b.n	80073b2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80072dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	da11      	bge.n	8007308 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80072e4:	7bbb      	ldrb	r3, [r7, #14]
 80072e6:	f003 020f 	and.w	r2, r3, #15
 80072ea:	6879      	ldr	r1, [r7, #4]
 80072ec:	4613      	mov	r3, r2
 80072ee:	009b      	lsls	r3, r3, #2
 80072f0:	4413      	add	r3, r2
 80072f2:	009b      	lsls	r3, r3, #2
 80072f4:	440b      	add	r3, r1
 80072f6:	3324      	adds	r3, #36	; 0x24
 80072f8:	881b      	ldrh	r3, [r3, #0]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d117      	bne.n	800732e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80072fe:	6839      	ldr	r1, [r7, #0]
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	f000 fbb0 	bl	8007a66 <USBD_CtlError>
                  break;
 8007306:	e054      	b.n	80073b2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007308:	7bbb      	ldrb	r3, [r7, #14]
 800730a:	f003 020f 	and.w	r2, r3, #15
 800730e:	6879      	ldr	r1, [r7, #4]
 8007310:	4613      	mov	r3, r2
 8007312:	009b      	lsls	r3, r3, #2
 8007314:	4413      	add	r3, r2
 8007316:	009b      	lsls	r3, r3, #2
 8007318:	440b      	add	r3, r1
 800731a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800731e:	881b      	ldrh	r3, [r3, #0]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d104      	bne.n	800732e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007324:	6839      	ldr	r1, [r7, #0]
 8007326:	6878      	ldr	r0, [r7, #4]
 8007328:	f000 fb9d 	bl	8007a66 <USBD_CtlError>
                  break;
 800732c:	e041      	b.n	80073b2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800732e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007332:	2b00      	cmp	r3, #0
 8007334:	da0b      	bge.n	800734e <USBD_StdEPReq+0x2b2>
 8007336:	7bbb      	ldrb	r3, [r7, #14]
 8007338:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800733c:	4613      	mov	r3, r2
 800733e:	009b      	lsls	r3, r3, #2
 8007340:	4413      	add	r3, r2
 8007342:	009b      	lsls	r3, r3, #2
 8007344:	3310      	adds	r3, #16
 8007346:	687a      	ldr	r2, [r7, #4]
 8007348:	4413      	add	r3, r2
 800734a:	3304      	adds	r3, #4
 800734c:	e00b      	b.n	8007366 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800734e:	7bbb      	ldrb	r3, [r7, #14]
 8007350:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007354:	4613      	mov	r3, r2
 8007356:	009b      	lsls	r3, r3, #2
 8007358:	4413      	add	r3, r2
 800735a:	009b      	lsls	r3, r3, #2
 800735c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007360:	687a      	ldr	r2, [r7, #4]
 8007362:	4413      	add	r3, r2
 8007364:	3304      	adds	r3, #4
 8007366:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007368:	7bbb      	ldrb	r3, [r7, #14]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d002      	beq.n	8007374 <USBD_StdEPReq+0x2d8>
 800736e:	7bbb      	ldrb	r3, [r7, #14]
 8007370:	2b80      	cmp	r3, #128	; 0x80
 8007372:	d103      	bne.n	800737c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007374:	68bb      	ldr	r3, [r7, #8]
 8007376:	2200      	movs	r2, #0
 8007378:	601a      	str	r2, [r3, #0]
 800737a:	e00e      	b.n	800739a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800737c:	7bbb      	ldrb	r3, [r7, #14]
 800737e:	4619      	mov	r1, r3
 8007380:	6878      	ldr	r0, [r7, #4]
 8007382:	f002 faeb 	bl	800995c <USBD_LL_IsStallEP>
 8007386:	4603      	mov	r3, r0
 8007388:	2b00      	cmp	r3, #0
 800738a:	d003      	beq.n	8007394 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800738c:	68bb      	ldr	r3, [r7, #8]
 800738e:	2201      	movs	r2, #1
 8007390:	601a      	str	r2, [r3, #0]
 8007392:	e002      	b.n	800739a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007394:	68bb      	ldr	r3, [r7, #8]
 8007396:	2200      	movs	r2, #0
 8007398:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800739a:	68bb      	ldr	r3, [r7, #8]
 800739c:	2202      	movs	r2, #2
 800739e:	4619      	mov	r1, r3
 80073a0:	6878      	ldr	r0, [r7, #4]
 80073a2:	f000 fbd1 	bl	8007b48 <USBD_CtlSendData>
              break;
 80073a6:	e004      	b.n	80073b2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80073a8:	6839      	ldr	r1, [r7, #0]
 80073aa:	6878      	ldr	r0, [r7, #4]
 80073ac:	f000 fb5b 	bl	8007a66 <USBD_CtlError>
              break;
 80073b0:	bf00      	nop
          }
          break;
 80073b2:	e004      	b.n	80073be <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80073b4:	6839      	ldr	r1, [r7, #0]
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f000 fb55 	bl	8007a66 <USBD_CtlError>
          break;
 80073bc:	bf00      	nop
      }
      break;
 80073be:	e005      	b.n	80073cc <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80073c0:	6839      	ldr	r1, [r7, #0]
 80073c2:	6878      	ldr	r0, [r7, #4]
 80073c4:	f000 fb4f 	bl	8007a66 <USBD_CtlError>
      break;
 80073c8:	e000      	b.n	80073cc <USBD_StdEPReq+0x330>
      break;
 80073ca:	bf00      	nop
  }

  return ret;
 80073cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80073ce:	4618      	mov	r0, r3
 80073d0:	3710      	adds	r7, #16
 80073d2:	46bd      	mov	sp, r7
 80073d4:	bd80      	pop	{r7, pc}
	...

080073d8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b084      	sub	sp, #16
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
 80073e0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80073e2:	2300      	movs	r3, #0
 80073e4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80073e6:	2300      	movs	r3, #0
 80073e8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80073ea:	2300      	movs	r3, #0
 80073ec:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	885b      	ldrh	r3, [r3, #2]
 80073f2:	0a1b      	lsrs	r3, r3, #8
 80073f4:	b29b      	uxth	r3, r3
 80073f6:	3b01      	subs	r3, #1
 80073f8:	2b06      	cmp	r3, #6
 80073fa:	f200 8128 	bhi.w	800764e <USBD_GetDescriptor+0x276>
 80073fe:	a201      	add	r2, pc, #4	; (adr r2, 8007404 <USBD_GetDescriptor+0x2c>)
 8007400:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007404:	08007421 	.word	0x08007421
 8007408:	08007439 	.word	0x08007439
 800740c:	08007479 	.word	0x08007479
 8007410:	0800764f 	.word	0x0800764f
 8007414:	0800764f 	.word	0x0800764f
 8007418:	080075ef 	.word	0x080075ef
 800741c:	0800761b 	.word	0x0800761b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	687a      	ldr	r2, [r7, #4]
 800742a:	7c12      	ldrb	r2, [r2, #16]
 800742c:	f107 0108 	add.w	r1, r7, #8
 8007430:	4610      	mov	r0, r2
 8007432:	4798      	blx	r3
 8007434:	60f8      	str	r0, [r7, #12]
      break;
 8007436:	e112      	b.n	800765e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	7c1b      	ldrb	r3, [r3, #16]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d10d      	bne.n	800745c <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007448:	f107 0208 	add.w	r2, r7, #8
 800744c:	4610      	mov	r0, r2
 800744e:	4798      	blx	r3
 8007450:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	3301      	adds	r3, #1
 8007456:	2202      	movs	r2, #2
 8007458:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800745a:	e100      	b.n	800765e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007464:	f107 0208 	add.w	r2, r7, #8
 8007468:	4610      	mov	r0, r2
 800746a:	4798      	blx	r3
 800746c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	3301      	adds	r3, #1
 8007472:	2202      	movs	r2, #2
 8007474:	701a      	strb	r2, [r3, #0]
      break;
 8007476:	e0f2      	b.n	800765e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	885b      	ldrh	r3, [r3, #2]
 800747c:	b2db      	uxtb	r3, r3
 800747e:	2b05      	cmp	r3, #5
 8007480:	f200 80ac 	bhi.w	80075dc <USBD_GetDescriptor+0x204>
 8007484:	a201      	add	r2, pc, #4	; (adr r2, 800748c <USBD_GetDescriptor+0xb4>)
 8007486:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800748a:	bf00      	nop
 800748c:	080074a5 	.word	0x080074a5
 8007490:	080074d9 	.word	0x080074d9
 8007494:	0800750d 	.word	0x0800750d
 8007498:	08007541 	.word	0x08007541
 800749c:	08007575 	.word	0x08007575
 80074a0:	080075a9 	.word	0x080075a9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074aa:	685b      	ldr	r3, [r3, #4]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d00b      	beq.n	80074c8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074b6:	685b      	ldr	r3, [r3, #4]
 80074b8:	687a      	ldr	r2, [r7, #4]
 80074ba:	7c12      	ldrb	r2, [r2, #16]
 80074bc:	f107 0108 	add.w	r1, r7, #8
 80074c0:	4610      	mov	r0, r2
 80074c2:	4798      	blx	r3
 80074c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80074c6:	e091      	b.n	80075ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80074c8:	6839      	ldr	r1, [r7, #0]
 80074ca:	6878      	ldr	r0, [r7, #4]
 80074cc:	f000 facb 	bl	8007a66 <USBD_CtlError>
            err++;
 80074d0:	7afb      	ldrb	r3, [r7, #11]
 80074d2:	3301      	adds	r3, #1
 80074d4:	72fb      	strb	r3, [r7, #11]
          break;
 80074d6:	e089      	b.n	80075ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074de:	689b      	ldr	r3, [r3, #8]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d00b      	beq.n	80074fc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074ea:	689b      	ldr	r3, [r3, #8]
 80074ec:	687a      	ldr	r2, [r7, #4]
 80074ee:	7c12      	ldrb	r2, [r2, #16]
 80074f0:	f107 0108 	add.w	r1, r7, #8
 80074f4:	4610      	mov	r0, r2
 80074f6:	4798      	blx	r3
 80074f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80074fa:	e077      	b.n	80075ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80074fc:	6839      	ldr	r1, [r7, #0]
 80074fe:	6878      	ldr	r0, [r7, #4]
 8007500:	f000 fab1 	bl	8007a66 <USBD_CtlError>
            err++;
 8007504:	7afb      	ldrb	r3, [r7, #11]
 8007506:	3301      	adds	r3, #1
 8007508:	72fb      	strb	r3, [r7, #11]
          break;
 800750a:	e06f      	b.n	80075ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007512:	68db      	ldr	r3, [r3, #12]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d00b      	beq.n	8007530 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800751e:	68db      	ldr	r3, [r3, #12]
 8007520:	687a      	ldr	r2, [r7, #4]
 8007522:	7c12      	ldrb	r2, [r2, #16]
 8007524:	f107 0108 	add.w	r1, r7, #8
 8007528:	4610      	mov	r0, r2
 800752a:	4798      	blx	r3
 800752c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800752e:	e05d      	b.n	80075ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007530:	6839      	ldr	r1, [r7, #0]
 8007532:	6878      	ldr	r0, [r7, #4]
 8007534:	f000 fa97 	bl	8007a66 <USBD_CtlError>
            err++;
 8007538:	7afb      	ldrb	r3, [r7, #11]
 800753a:	3301      	adds	r3, #1
 800753c:	72fb      	strb	r3, [r7, #11]
          break;
 800753e:	e055      	b.n	80075ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007546:	691b      	ldr	r3, [r3, #16]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d00b      	beq.n	8007564 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007552:	691b      	ldr	r3, [r3, #16]
 8007554:	687a      	ldr	r2, [r7, #4]
 8007556:	7c12      	ldrb	r2, [r2, #16]
 8007558:	f107 0108 	add.w	r1, r7, #8
 800755c:	4610      	mov	r0, r2
 800755e:	4798      	blx	r3
 8007560:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007562:	e043      	b.n	80075ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007564:	6839      	ldr	r1, [r7, #0]
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	f000 fa7d 	bl	8007a66 <USBD_CtlError>
            err++;
 800756c:	7afb      	ldrb	r3, [r7, #11]
 800756e:	3301      	adds	r3, #1
 8007570:	72fb      	strb	r3, [r7, #11]
          break;
 8007572:	e03b      	b.n	80075ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800757a:	695b      	ldr	r3, [r3, #20]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d00b      	beq.n	8007598 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007586:	695b      	ldr	r3, [r3, #20]
 8007588:	687a      	ldr	r2, [r7, #4]
 800758a:	7c12      	ldrb	r2, [r2, #16]
 800758c:	f107 0108 	add.w	r1, r7, #8
 8007590:	4610      	mov	r0, r2
 8007592:	4798      	blx	r3
 8007594:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007596:	e029      	b.n	80075ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007598:	6839      	ldr	r1, [r7, #0]
 800759a:	6878      	ldr	r0, [r7, #4]
 800759c:	f000 fa63 	bl	8007a66 <USBD_CtlError>
            err++;
 80075a0:	7afb      	ldrb	r3, [r7, #11]
 80075a2:	3301      	adds	r3, #1
 80075a4:	72fb      	strb	r3, [r7, #11]
          break;
 80075a6:	e021      	b.n	80075ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075ae:	699b      	ldr	r3, [r3, #24]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d00b      	beq.n	80075cc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075ba:	699b      	ldr	r3, [r3, #24]
 80075bc:	687a      	ldr	r2, [r7, #4]
 80075be:	7c12      	ldrb	r2, [r2, #16]
 80075c0:	f107 0108 	add.w	r1, r7, #8
 80075c4:	4610      	mov	r0, r2
 80075c6:	4798      	blx	r3
 80075c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80075ca:	e00f      	b.n	80075ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80075cc:	6839      	ldr	r1, [r7, #0]
 80075ce:	6878      	ldr	r0, [r7, #4]
 80075d0:	f000 fa49 	bl	8007a66 <USBD_CtlError>
            err++;
 80075d4:	7afb      	ldrb	r3, [r7, #11]
 80075d6:	3301      	adds	r3, #1
 80075d8:	72fb      	strb	r3, [r7, #11]
          break;
 80075da:	e007      	b.n	80075ec <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80075dc:	6839      	ldr	r1, [r7, #0]
 80075de:	6878      	ldr	r0, [r7, #4]
 80075e0:	f000 fa41 	bl	8007a66 <USBD_CtlError>
          err++;
 80075e4:	7afb      	ldrb	r3, [r7, #11]
 80075e6:	3301      	adds	r3, #1
 80075e8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80075ea:	bf00      	nop
      }
      break;
 80075ec:	e037      	b.n	800765e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	7c1b      	ldrb	r3, [r3, #16]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d109      	bne.n	800760a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075fe:	f107 0208 	add.w	r2, r7, #8
 8007602:	4610      	mov	r0, r2
 8007604:	4798      	blx	r3
 8007606:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007608:	e029      	b.n	800765e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800760a:	6839      	ldr	r1, [r7, #0]
 800760c:	6878      	ldr	r0, [r7, #4]
 800760e:	f000 fa2a 	bl	8007a66 <USBD_CtlError>
        err++;
 8007612:	7afb      	ldrb	r3, [r7, #11]
 8007614:	3301      	adds	r3, #1
 8007616:	72fb      	strb	r3, [r7, #11]
      break;
 8007618:	e021      	b.n	800765e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	7c1b      	ldrb	r3, [r3, #16]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d10d      	bne.n	800763e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800762a:	f107 0208 	add.w	r2, r7, #8
 800762e:	4610      	mov	r0, r2
 8007630:	4798      	blx	r3
 8007632:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	3301      	adds	r3, #1
 8007638:	2207      	movs	r2, #7
 800763a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800763c:	e00f      	b.n	800765e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800763e:	6839      	ldr	r1, [r7, #0]
 8007640:	6878      	ldr	r0, [r7, #4]
 8007642:	f000 fa10 	bl	8007a66 <USBD_CtlError>
        err++;
 8007646:	7afb      	ldrb	r3, [r7, #11]
 8007648:	3301      	adds	r3, #1
 800764a:	72fb      	strb	r3, [r7, #11]
      break;
 800764c:	e007      	b.n	800765e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800764e:	6839      	ldr	r1, [r7, #0]
 8007650:	6878      	ldr	r0, [r7, #4]
 8007652:	f000 fa08 	bl	8007a66 <USBD_CtlError>
      err++;
 8007656:	7afb      	ldrb	r3, [r7, #11]
 8007658:	3301      	adds	r3, #1
 800765a:	72fb      	strb	r3, [r7, #11]
      break;
 800765c:	bf00      	nop
  }

  if (err != 0U)
 800765e:	7afb      	ldrb	r3, [r7, #11]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d11e      	bne.n	80076a2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	88db      	ldrh	r3, [r3, #6]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d016      	beq.n	800769a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800766c:	893b      	ldrh	r3, [r7, #8]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d00e      	beq.n	8007690 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	88da      	ldrh	r2, [r3, #6]
 8007676:	893b      	ldrh	r3, [r7, #8]
 8007678:	4293      	cmp	r3, r2
 800767a:	bf28      	it	cs
 800767c:	4613      	movcs	r3, r2
 800767e:	b29b      	uxth	r3, r3
 8007680:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007682:	893b      	ldrh	r3, [r7, #8]
 8007684:	461a      	mov	r2, r3
 8007686:	68f9      	ldr	r1, [r7, #12]
 8007688:	6878      	ldr	r0, [r7, #4]
 800768a:	f000 fa5d 	bl	8007b48 <USBD_CtlSendData>
 800768e:	e009      	b.n	80076a4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007690:	6839      	ldr	r1, [r7, #0]
 8007692:	6878      	ldr	r0, [r7, #4]
 8007694:	f000 f9e7 	bl	8007a66 <USBD_CtlError>
 8007698:	e004      	b.n	80076a4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800769a:	6878      	ldr	r0, [r7, #4]
 800769c:	f000 faae 	bl	8007bfc <USBD_CtlSendStatus>
 80076a0:	e000      	b.n	80076a4 <USBD_GetDescriptor+0x2cc>
    return;
 80076a2:	bf00      	nop
  }
}
 80076a4:	3710      	adds	r7, #16
 80076a6:	46bd      	mov	sp, r7
 80076a8:	bd80      	pop	{r7, pc}
 80076aa:	bf00      	nop

080076ac <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b084      	sub	sp, #16
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
 80076b4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	889b      	ldrh	r3, [r3, #4]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d131      	bne.n	8007722 <USBD_SetAddress+0x76>
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	88db      	ldrh	r3, [r3, #6]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d12d      	bne.n	8007722 <USBD_SetAddress+0x76>
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	885b      	ldrh	r3, [r3, #2]
 80076ca:	2b7f      	cmp	r3, #127	; 0x7f
 80076cc:	d829      	bhi.n	8007722 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	885b      	ldrh	r3, [r3, #2]
 80076d2:	b2db      	uxtb	r3, r3
 80076d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076d8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076e0:	b2db      	uxtb	r3, r3
 80076e2:	2b03      	cmp	r3, #3
 80076e4:	d104      	bne.n	80076f0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80076e6:	6839      	ldr	r1, [r7, #0]
 80076e8:	6878      	ldr	r0, [r7, #4]
 80076ea:	f000 f9bc 	bl	8007a66 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076ee:	e01d      	b.n	800772c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	7bfa      	ldrb	r2, [r7, #15]
 80076f4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80076f8:	7bfb      	ldrb	r3, [r7, #15]
 80076fa:	4619      	mov	r1, r3
 80076fc:	6878      	ldr	r0, [r7, #4]
 80076fe:	f002 f959 	bl	80099b4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007702:	6878      	ldr	r0, [r7, #4]
 8007704:	f000 fa7a 	bl	8007bfc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007708:	7bfb      	ldrb	r3, [r7, #15]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d004      	beq.n	8007718 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2202      	movs	r2, #2
 8007712:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007716:	e009      	b.n	800772c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2201      	movs	r2, #1
 800771c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007720:	e004      	b.n	800772c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007722:	6839      	ldr	r1, [r7, #0]
 8007724:	6878      	ldr	r0, [r7, #4]
 8007726:	f000 f99e 	bl	8007a66 <USBD_CtlError>
  }
}
 800772a:	bf00      	nop
 800772c:	bf00      	nop
 800772e:	3710      	adds	r7, #16
 8007730:	46bd      	mov	sp, r7
 8007732:	bd80      	pop	{r7, pc}

08007734 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b084      	sub	sp, #16
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
 800773c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800773e:	2300      	movs	r3, #0
 8007740:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	885b      	ldrh	r3, [r3, #2]
 8007746:	b2da      	uxtb	r2, r3
 8007748:	4b4e      	ldr	r3, [pc, #312]	; (8007884 <USBD_SetConfig+0x150>)
 800774a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800774c:	4b4d      	ldr	r3, [pc, #308]	; (8007884 <USBD_SetConfig+0x150>)
 800774e:	781b      	ldrb	r3, [r3, #0]
 8007750:	2b01      	cmp	r3, #1
 8007752:	d905      	bls.n	8007760 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007754:	6839      	ldr	r1, [r7, #0]
 8007756:	6878      	ldr	r0, [r7, #4]
 8007758:	f000 f985 	bl	8007a66 <USBD_CtlError>
    return USBD_FAIL;
 800775c:	2303      	movs	r3, #3
 800775e:	e08c      	b.n	800787a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007766:	b2db      	uxtb	r3, r3
 8007768:	2b02      	cmp	r3, #2
 800776a:	d002      	beq.n	8007772 <USBD_SetConfig+0x3e>
 800776c:	2b03      	cmp	r3, #3
 800776e:	d029      	beq.n	80077c4 <USBD_SetConfig+0x90>
 8007770:	e075      	b.n	800785e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007772:	4b44      	ldr	r3, [pc, #272]	; (8007884 <USBD_SetConfig+0x150>)
 8007774:	781b      	ldrb	r3, [r3, #0]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d020      	beq.n	80077bc <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800777a:	4b42      	ldr	r3, [pc, #264]	; (8007884 <USBD_SetConfig+0x150>)
 800777c:	781b      	ldrb	r3, [r3, #0]
 800777e:	461a      	mov	r2, r3
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007784:	4b3f      	ldr	r3, [pc, #252]	; (8007884 <USBD_SetConfig+0x150>)
 8007786:	781b      	ldrb	r3, [r3, #0]
 8007788:	4619      	mov	r1, r3
 800778a:	6878      	ldr	r0, [r7, #4]
 800778c:	f7fe ffe1 	bl	8006752 <USBD_SetClassConfig>
 8007790:	4603      	mov	r3, r0
 8007792:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007794:	7bfb      	ldrb	r3, [r7, #15]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d008      	beq.n	80077ac <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800779a:	6839      	ldr	r1, [r7, #0]
 800779c:	6878      	ldr	r0, [r7, #4]
 800779e:	f000 f962 	bl	8007a66 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2202      	movs	r2, #2
 80077a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80077aa:	e065      	b.n	8007878 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80077ac:	6878      	ldr	r0, [r7, #4]
 80077ae:	f000 fa25 	bl	8007bfc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2203      	movs	r2, #3
 80077b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80077ba:	e05d      	b.n	8007878 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80077bc:	6878      	ldr	r0, [r7, #4]
 80077be:	f000 fa1d 	bl	8007bfc <USBD_CtlSendStatus>
      break;
 80077c2:	e059      	b.n	8007878 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80077c4:	4b2f      	ldr	r3, [pc, #188]	; (8007884 <USBD_SetConfig+0x150>)
 80077c6:	781b      	ldrb	r3, [r3, #0]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d112      	bne.n	80077f2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2202      	movs	r2, #2
 80077d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80077d4:	4b2b      	ldr	r3, [pc, #172]	; (8007884 <USBD_SetConfig+0x150>)
 80077d6:	781b      	ldrb	r3, [r3, #0]
 80077d8:	461a      	mov	r2, r3
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80077de:	4b29      	ldr	r3, [pc, #164]	; (8007884 <USBD_SetConfig+0x150>)
 80077e0:	781b      	ldrb	r3, [r3, #0]
 80077e2:	4619      	mov	r1, r3
 80077e4:	6878      	ldr	r0, [r7, #4]
 80077e6:	f7fe ffd0 	bl	800678a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80077ea:	6878      	ldr	r0, [r7, #4]
 80077ec:	f000 fa06 	bl	8007bfc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80077f0:	e042      	b.n	8007878 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80077f2:	4b24      	ldr	r3, [pc, #144]	; (8007884 <USBD_SetConfig+0x150>)
 80077f4:	781b      	ldrb	r3, [r3, #0]
 80077f6:	461a      	mov	r2, r3
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	685b      	ldr	r3, [r3, #4]
 80077fc:	429a      	cmp	r2, r3
 80077fe:	d02a      	beq.n	8007856 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	685b      	ldr	r3, [r3, #4]
 8007804:	b2db      	uxtb	r3, r3
 8007806:	4619      	mov	r1, r3
 8007808:	6878      	ldr	r0, [r7, #4]
 800780a:	f7fe ffbe 	bl	800678a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800780e:	4b1d      	ldr	r3, [pc, #116]	; (8007884 <USBD_SetConfig+0x150>)
 8007810:	781b      	ldrb	r3, [r3, #0]
 8007812:	461a      	mov	r2, r3
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007818:	4b1a      	ldr	r3, [pc, #104]	; (8007884 <USBD_SetConfig+0x150>)
 800781a:	781b      	ldrb	r3, [r3, #0]
 800781c:	4619      	mov	r1, r3
 800781e:	6878      	ldr	r0, [r7, #4]
 8007820:	f7fe ff97 	bl	8006752 <USBD_SetClassConfig>
 8007824:	4603      	mov	r3, r0
 8007826:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007828:	7bfb      	ldrb	r3, [r7, #15]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d00f      	beq.n	800784e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800782e:	6839      	ldr	r1, [r7, #0]
 8007830:	6878      	ldr	r0, [r7, #4]
 8007832:	f000 f918 	bl	8007a66 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	685b      	ldr	r3, [r3, #4]
 800783a:	b2db      	uxtb	r3, r3
 800783c:	4619      	mov	r1, r3
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	f7fe ffa3 	bl	800678a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2202      	movs	r2, #2
 8007848:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800784c:	e014      	b.n	8007878 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800784e:	6878      	ldr	r0, [r7, #4]
 8007850:	f000 f9d4 	bl	8007bfc <USBD_CtlSendStatus>
      break;
 8007854:	e010      	b.n	8007878 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f000 f9d0 	bl	8007bfc <USBD_CtlSendStatus>
      break;
 800785c:	e00c      	b.n	8007878 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800785e:	6839      	ldr	r1, [r7, #0]
 8007860:	6878      	ldr	r0, [r7, #4]
 8007862:	f000 f900 	bl	8007a66 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007866:	4b07      	ldr	r3, [pc, #28]	; (8007884 <USBD_SetConfig+0x150>)
 8007868:	781b      	ldrb	r3, [r3, #0]
 800786a:	4619      	mov	r1, r3
 800786c:	6878      	ldr	r0, [r7, #4]
 800786e:	f7fe ff8c 	bl	800678a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007872:	2303      	movs	r3, #3
 8007874:	73fb      	strb	r3, [r7, #15]
      break;
 8007876:	bf00      	nop
  }

  return ret;
 8007878:	7bfb      	ldrb	r3, [r7, #15]
}
 800787a:	4618      	mov	r0, r3
 800787c:	3710      	adds	r7, #16
 800787e:	46bd      	mov	sp, r7
 8007880:	bd80      	pop	{r7, pc}
 8007882:	bf00      	nop
 8007884:	200005e8 	.word	0x200005e8

08007888 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b082      	sub	sp, #8
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
 8007890:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	88db      	ldrh	r3, [r3, #6]
 8007896:	2b01      	cmp	r3, #1
 8007898:	d004      	beq.n	80078a4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800789a:	6839      	ldr	r1, [r7, #0]
 800789c:	6878      	ldr	r0, [r7, #4]
 800789e:	f000 f8e2 	bl	8007a66 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80078a2:	e023      	b.n	80078ec <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078aa:	b2db      	uxtb	r3, r3
 80078ac:	2b02      	cmp	r3, #2
 80078ae:	dc02      	bgt.n	80078b6 <USBD_GetConfig+0x2e>
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	dc03      	bgt.n	80078bc <USBD_GetConfig+0x34>
 80078b4:	e015      	b.n	80078e2 <USBD_GetConfig+0x5a>
 80078b6:	2b03      	cmp	r3, #3
 80078b8:	d00b      	beq.n	80078d2 <USBD_GetConfig+0x4a>
 80078ba:	e012      	b.n	80078e2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2200      	movs	r2, #0
 80078c0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	3308      	adds	r3, #8
 80078c6:	2201      	movs	r2, #1
 80078c8:	4619      	mov	r1, r3
 80078ca:	6878      	ldr	r0, [r7, #4]
 80078cc:	f000 f93c 	bl	8007b48 <USBD_CtlSendData>
        break;
 80078d0:	e00c      	b.n	80078ec <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	3304      	adds	r3, #4
 80078d6:	2201      	movs	r2, #1
 80078d8:	4619      	mov	r1, r3
 80078da:	6878      	ldr	r0, [r7, #4]
 80078dc:	f000 f934 	bl	8007b48 <USBD_CtlSendData>
        break;
 80078e0:	e004      	b.n	80078ec <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80078e2:	6839      	ldr	r1, [r7, #0]
 80078e4:	6878      	ldr	r0, [r7, #4]
 80078e6:	f000 f8be 	bl	8007a66 <USBD_CtlError>
        break;
 80078ea:	bf00      	nop
}
 80078ec:	bf00      	nop
 80078ee:	3708      	adds	r7, #8
 80078f0:	46bd      	mov	sp, r7
 80078f2:	bd80      	pop	{r7, pc}

080078f4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b082      	sub	sp, #8
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
 80078fc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007904:	b2db      	uxtb	r3, r3
 8007906:	3b01      	subs	r3, #1
 8007908:	2b02      	cmp	r3, #2
 800790a:	d81e      	bhi.n	800794a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800790c:	683b      	ldr	r3, [r7, #0]
 800790e:	88db      	ldrh	r3, [r3, #6]
 8007910:	2b02      	cmp	r3, #2
 8007912:	d004      	beq.n	800791e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007914:	6839      	ldr	r1, [r7, #0]
 8007916:	6878      	ldr	r0, [r7, #4]
 8007918:	f000 f8a5 	bl	8007a66 <USBD_CtlError>
        break;
 800791c:	e01a      	b.n	8007954 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	2201      	movs	r2, #1
 8007922:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800792a:	2b00      	cmp	r3, #0
 800792c:	d005      	beq.n	800793a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	68db      	ldr	r3, [r3, #12]
 8007932:	f043 0202 	orr.w	r2, r3, #2
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	330c      	adds	r3, #12
 800793e:	2202      	movs	r2, #2
 8007940:	4619      	mov	r1, r3
 8007942:	6878      	ldr	r0, [r7, #4]
 8007944:	f000 f900 	bl	8007b48 <USBD_CtlSendData>
      break;
 8007948:	e004      	b.n	8007954 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800794a:	6839      	ldr	r1, [r7, #0]
 800794c:	6878      	ldr	r0, [r7, #4]
 800794e:	f000 f88a 	bl	8007a66 <USBD_CtlError>
      break;
 8007952:	bf00      	nop
  }
}
 8007954:	bf00      	nop
 8007956:	3708      	adds	r7, #8
 8007958:	46bd      	mov	sp, r7
 800795a:	bd80      	pop	{r7, pc}

0800795c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b082      	sub	sp, #8
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
 8007964:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	885b      	ldrh	r3, [r3, #2]
 800796a:	2b01      	cmp	r3, #1
 800796c:	d107      	bne.n	800797e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2201      	movs	r2, #1
 8007972:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007976:	6878      	ldr	r0, [r7, #4]
 8007978:	f000 f940 	bl	8007bfc <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800797c:	e013      	b.n	80079a6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	885b      	ldrh	r3, [r3, #2]
 8007982:	2b02      	cmp	r3, #2
 8007984:	d10b      	bne.n	800799e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	889b      	ldrh	r3, [r3, #4]
 800798a:	0a1b      	lsrs	r3, r3, #8
 800798c:	b29b      	uxth	r3, r3
 800798e:	b2da      	uxtb	r2, r3
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007996:	6878      	ldr	r0, [r7, #4]
 8007998:	f000 f930 	bl	8007bfc <USBD_CtlSendStatus>
}
 800799c:	e003      	b.n	80079a6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800799e:	6839      	ldr	r1, [r7, #0]
 80079a0:	6878      	ldr	r0, [r7, #4]
 80079a2:	f000 f860 	bl	8007a66 <USBD_CtlError>
}
 80079a6:	bf00      	nop
 80079a8:	3708      	adds	r7, #8
 80079aa:	46bd      	mov	sp, r7
 80079ac:	bd80      	pop	{r7, pc}

080079ae <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80079ae:	b580      	push	{r7, lr}
 80079b0:	b082      	sub	sp, #8
 80079b2:	af00      	add	r7, sp, #0
 80079b4:	6078      	str	r0, [r7, #4]
 80079b6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079be:	b2db      	uxtb	r3, r3
 80079c0:	3b01      	subs	r3, #1
 80079c2:	2b02      	cmp	r3, #2
 80079c4:	d80b      	bhi.n	80079de <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	885b      	ldrh	r3, [r3, #2]
 80079ca:	2b01      	cmp	r3, #1
 80079cc:	d10c      	bne.n	80079e8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2200      	movs	r2, #0
 80079d2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80079d6:	6878      	ldr	r0, [r7, #4]
 80079d8:	f000 f910 	bl	8007bfc <USBD_CtlSendStatus>
      }
      break;
 80079dc:	e004      	b.n	80079e8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80079de:	6839      	ldr	r1, [r7, #0]
 80079e0:	6878      	ldr	r0, [r7, #4]
 80079e2:	f000 f840 	bl	8007a66 <USBD_CtlError>
      break;
 80079e6:	e000      	b.n	80079ea <USBD_ClrFeature+0x3c>
      break;
 80079e8:	bf00      	nop
  }
}
 80079ea:	bf00      	nop
 80079ec:	3708      	adds	r7, #8
 80079ee:	46bd      	mov	sp, r7
 80079f0:	bd80      	pop	{r7, pc}

080079f2 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80079f2:	b580      	push	{r7, lr}
 80079f4:	b084      	sub	sp, #16
 80079f6:	af00      	add	r7, sp, #0
 80079f8:	6078      	str	r0, [r7, #4]
 80079fa:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	781a      	ldrb	r2, [r3, #0]
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	3301      	adds	r3, #1
 8007a0c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	781a      	ldrb	r2, [r3, #0]
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	3301      	adds	r3, #1
 8007a1a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007a1c:	68f8      	ldr	r0, [r7, #12]
 8007a1e:	f7ff fa41 	bl	8006ea4 <SWAPBYTE>
 8007a22:	4603      	mov	r3, r0
 8007a24:	461a      	mov	r2, r3
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	3301      	adds	r3, #1
 8007a2e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	3301      	adds	r3, #1
 8007a34:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007a36:	68f8      	ldr	r0, [r7, #12]
 8007a38:	f7ff fa34 	bl	8006ea4 <SWAPBYTE>
 8007a3c:	4603      	mov	r3, r0
 8007a3e:	461a      	mov	r2, r3
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	3301      	adds	r3, #1
 8007a48:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	3301      	adds	r3, #1
 8007a4e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007a50:	68f8      	ldr	r0, [r7, #12]
 8007a52:	f7ff fa27 	bl	8006ea4 <SWAPBYTE>
 8007a56:	4603      	mov	r3, r0
 8007a58:	461a      	mov	r2, r3
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	80da      	strh	r2, [r3, #6]
}
 8007a5e:	bf00      	nop
 8007a60:	3710      	adds	r7, #16
 8007a62:	46bd      	mov	sp, r7
 8007a64:	bd80      	pop	{r7, pc}

08007a66 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a66:	b580      	push	{r7, lr}
 8007a68:	b082      	sub	sp, #8
 8007a6a:	af00      	add	r7, sp, #0
 8007a6c:	6078      	str	r0, [r7, #4]
 8007a6e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007a70:	2180      	movs	r1, #128	; 0x80
 8007a72:	6878      	ldr	r0, [r7, #4]
 8007a74:	f001 ff34 	bl	80098e0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007a78:	2100      	movs	r1, #0
 8007a7a:	6878      	ldr	r0, [r7, #4]
 8007a7c:	f001 ff30 	bl	80098e0 <USBD_LL_StallEP>
}
 8007a80:	bf00      	nop
 8007a82:	3708      	adds	r7, #8
 8007a84:	46bd      	mov	sp, r7
 8007a86:	bd80      	pop	{r7, pc}

08007a88 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b086      	sub	sp, #24
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	60f8      	str	r0, [r7, #12]
 8007a90:	60b9      	str	r1, [r7, #8]
 8007a92:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007a94:	2300      	movs	r3, #0
 8007a96:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d036      	beq.n	8007b0c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007aa2:	6938      	ldr	r0, [r7, #16]
 8007aa4:	f000 f836 	bl	8007b14 <USBD_GetLen>
 8007aa8:	4603      	mov	r3, r0
 8007aaa:	3301      	adds	r3, #1
 8007aac:	b29b      	uxth	r3, r3
 8007aae:	005b      	lsls	r3, r3, #1
 8007ab0:	b29a      	uxth	r2, r3
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007ab6:	7dfb      	ldrb	r3, [r7, #23]
 8007ab8:	68ba      	ldr	r2, [r7, #8]
 8007aba:	4413      	add	r3, r2
 8007abc:	687a      	ldr	r2, [r7, #4]
 8007abe:	7812      	ldrb	r2, [r2, #0]
 8007ac0:	701a      	strb	r2, [r3, #0]
  idx++;
 8007ac2:	7dfb      	ldrb	r3, [r7, #23]
 8007ac4:	3301      	adds	r3, #1
 8007ac6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007ac8:	7dfb      	ldrb	r3, [r7, #23]
 8007aca:	68ba      	ldr	r2, [r7, #8]
 8007acc:	4413      	add	r3, r2
 8007ace:	2203      	movs	r2, #3
 8007ad0:	701a      	strb	r2, [r3, #0]
  idx++;
 8007ad2:	7dfb      	ldrb	r3, [r7, #23]
 8007ad4:	3301      	adds	r3, #1
 8007ad6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007ad8:	e013      	b.n	8007b02 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007ada:	7dfb      	ldrb	r3, [r7, #23]
 8007adc:	68ba      	ldr	r2, [r7, #8]
 8007ade:	4413      	add	r3, r2
 8007ae0:	693a      	ldr	r2, [r7, #16]
 8007ae2:	7812      	ldrb	r2, [r2, #0]
 8007ae4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007ae6:	693b      	ldr	r3, [r7, #16]
 8007ae8:	3301      	adds	r3, #1
 8007aea:	613b      	str	r3, [r7, #16]
    idx++;
 8007aec:	7dfb      	ldrb	r3, [r7, #23]
 8007aee:	3301      	adds	r3, #1
 8007af0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007af2:	7dfb      	ldrb	r3, [r7, #23]
 8007af4:	68ba      	ldr	r2, [r7, #8]
 8007af6:	4413      	add	r3, r2
 8007af8:	2200      	movs	r2, #0
 8007afa:	701a      	strb	r2, [r3, #0]
    idx++;
 8007afc:	7dfb      	ldrb	r3, [r7, #23]
 8007afe:	3301      	adds	r3, #1
 8007b00:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007b02:	693b      	ldr	r3, [r7, #16]
 8007b04:	781b      	ldrb	r3, [r3, #0]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d1e7      	bne.n	8007ada <USBD_GetString+0x52>
 8007b0a:	e000      	b.n	8007b0e <USBD_GetString+0x86>
    return;
 8007b0c:	bf00      	nop
  }
}
 8007b0e:	3718      	adds	r7, #24
 8007b10:	46bd      	mov	sp, r7
 8007b12:	bd80      	pop	{r7, pc}

08007b14 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007b14:	b480      	push	{r7}
 8007b16:	b085      	sub	sp, #20
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007b24:	e005      	b.n	8007b32 <USBD_GetLen+0x1e>
  {
    len++;
 8007b26:	7bfb      	ldrb	r3, [r7, #15]
 8007b28:	3301      	adds	r3, #1
 8007b2a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007b2c:	68bb      	ldr	r3, [r7, #8]
 8007b2e:	3301      	adds	r3, #1
 8007b30:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007b32:	68bb      	ldr	r3, [r7, #8]
 8007b34:	781b      	ldrb	r3, [r3, #0]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d1f5      	bne.n	8007b26 <USBD_GetLen+0x12>
  }

  return len;
 8007b3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	3714      	adds	r7, #20
 8007b40:	46bd      	mov	sp, r7
 8007b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b46:	4770      	bx	lr

08007b48 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b084      	sub	sp, #16
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	60f8      	str	r0, [r7, #12]
 8007b50:	60b9      	str	r1, [r7, #8]
 8007b52:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	2202      	movs	r2, #2
 8007b58:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	687a      	ldr	r2, [r7, #4]
 8007b60:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	687a      	ldr	r2, [r7, #4]
 8007b66:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	68ba      	ldr	r2, [r7, #8]
 8007b6c:	2100      	movs	r1, #0
 8007b6e:	68f8      	ldr	r0, [r7, #12]
 8007b70:	f001 ff3f 	bl	80099f2 <USBD_LL_Transmit>

  return USBD_OK;
 8007b74:	2300      	movs	r3, #0
}
 8007b76:	4618      	mov	r0, r3
 8007b78:	3710      	adds	r7, #16
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	bd80      	pop	{r7, pc}

08007b7e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007b7e:	b580      	push	{r7, lr}
 8007b80:	b084      	sub	sp, #16
 8007b82:	af00      	add	r7, sp, #0
 8007b84:	60f8      	str	r0, [r7, #12]
 8007b86:	60b9      	str	r1, [r7, #8]
 8007b88:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	68ba      	ldr	r2, [r7, #8]
 8007b8e:	2100      	movs	r1, #0
 8007b90:	68f8      	ldr	r0, [r7, #12]
 8007b92:	f001 ff2e 	bl	80099f2 <USBD_LL_Transmit>

  return USBD_OK;
 8007b96:	2300      	movs	r3, #0
}
 8007b98:	4618      	mov	r0, r3
 8007b9a:	3710      	adds	r7, #16
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	bd80      	pop	{r7, pc}

08007ba0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b084      	sub	sp, #16
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	60f8      	str	r0, [r7, #12]
 8007ba8:	60b9      	str	r1, [r7, #8]
 8007baa:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	2203      	movs	r2, #3
 8007bb0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	687a      	ldr	r2, [r7, #4]
 8007bb8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	687a      	ldr	r2, [r7, #4]
 8007bc0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	68ba      	ldr	r2, [r7, #8]
 8007bc8:	2100      	movs	r1, #0
 8007bca:	68f8      	ldr	r0, [r7, #12]
 8007bcc:	f001 ff32 	bl	8009a34 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007bd0:	2300      	movs	r3, #0
}
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	3710      	adds	r7, #16
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	bd80      	pop	{r7, pc}

08007bda <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007bda:	b580      	push	{r7, lr}
 8007bdc:	b084      	sub	sp, #16
 8007bde:	af00      	add	r7, sp, #0
 8007be0:	60f8      	str	r0, [r7, #12]
 8007be2:	60b9      	str	r1, [r7, #8]
 8007be4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	68ba      	ldr	r2, [r7, #8]
 8007bea:	2100      	movs	r1, #0
 8007bec:	68f8      	ldr	r0, [r7, #12]
 8007bee:	f001 ff21 	bl	8009a34 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007bf2:	2300      	movs	r3, #0
}
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	3710      	adds	r7, #16
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	bd80      	pop	{r7, pc}

08007bfc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b082      	sub	sp, #8
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2204      	movs	r2, #4
 8007c08:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	2200      	movs	r2, #0
 8007c10:	2100      	movs	r1, #0
 8007c12:	6878      	ldr	r0, [r7, #4]
 8007c14:	f001 feed 	bl	80099f2 <USBD_LL_Transmit>

  return USBD_OK;
 8007c18:	2300      	movs	r3, #0
}
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	3708      	adds	r7, #8
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	bd80      	pop	{r7, pc}

08007c22 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007c22:	b580      	push	{r7, lr}
 8007c24:	b082      	sub	sp, #8
 8007c26:	af00      	add	r7, sp, #0
 8007c28:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2205      	movs	r2, #5
 8007c2e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007c32:	2300      	movs	r3, #0
 8007c34:	2200      	movs	r2, #0
 8007c36:	2100      	movs	r1, #0
 8007c38:	6878      	ldr	r0, [r7, #4]
 8007c3a:	f001 fefb 	bl	8009a34 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007c3e:	2300      	movs	r3, #0
}
 8007c40:	4618      	mov	r0, r3
 8007c42:	3708      	adds	r7, #8
 8007c44:	46bd      	mov	sp, r7
 8007c46:	bd80      	pop	{r7, pc}

08007c48 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007c48:	b480      	push	{r7}
 8007c4a:	b085      	sub	sp, #20
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	4603      	mov	r3, r0
 8007c50:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007c52:	2300      	movs	r3, #0
 8007c54:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007c56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007c5a:	2b84      	cmp	r3, #132	; 0x84
 8007c5c:	d005      	beq.n	8007c6a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8007c5e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	4413      	add	r3, r2
 8007c66:	3303      	adds	r3, #3
 8007c68:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
}
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	3714      	adds	r7, #20
 8007c70:	46bd      	mov	sp, r7
 8007c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c76:	4770      	bx	lr

08007c78 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007c7c:	f000 faf6 	bl	800826c <vTaskStartScheduler>
  
  return osOK;
 8007c80:	2300      	movs	r3, #0
}
 8007c82:	4618      	mov	r0, r3
 8007c84:	bd80      	pop	{r7, pc}

08007c86 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007c86:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c88:	b089      	sub	sp, #36	; 0x24
 8007c8a:	af04      	add	r7, sp, #16
 8007c8c:	6078      	str	r0, [r7, #4]
 8007c8e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	695b      	ldr	r3, [r3, #20]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d020      	beq.n	8007cda <osThreadCreate+0x54>
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	699b      	ldr	r3, [r3, #24]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d01c      	beq.n	8007cda <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	685c      	ldr	r4, [r3, #4]
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	691e      	ldr	r6, [r3, #16]
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	f7ff ffc8 	bl	8007c48 <makeFreeRtosPriority>
 8007cb8:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	695b      	ldr	r3, [r3, #20]
 8007cbe:	687a      	ldr	r2, [r7, #4]
 8007cc0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007cc2:	9202      	str	r2, [sp, #8]
 8007cc4:	9301      	str	r3, [sp, #4]
 8007cc6:	9100      	str	r1, [sp, #0]
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	4632      	mov	r2, r6
 8007ccc:	4629      	mov	r1, r5
 8007cce:	4620      	mov	r0, r4
 8007cd0:	f000 f8ed 	bl	8007eae <xTaskCreateStatic>
 8007cd4:	4603      	mov	r3, r0
 8007cd6:	60fb      	str	r3, [r7, #12]
 8007cd8:	e01c      	b.n	8007d14 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	685c      	ldr	r4, [r3, #4]
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007ce6:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007cee:	4618      	mov	r0, r3
 8007cf0:	f7ff ffaa 	bl	8007c48 <makeFreeRtosPriority>
 8007cf4:	4602      	mov	r2, r0
 8007cf6:	f107 030c 	add.w	r3, r7, #12
 8007cfa:	9301      	str	r3, [sp, #4]
 8007cfc:	9200      	str	r2, [sp, #0]
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	4632      	mov	r2, r6
 8007d02:	4629      	mov	r1, r5
 8007d04:	4620      	mov	r0, r4
 8007d06:	f000 f92f 	bl	8007f68 <xTaskCreate>
 8007d0a:	4603      	mov	r3, r0
 8007d0c:	2b01      	cmp	r3, #1
 8007d0e:	d001      	beq.n	8007d14 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8007d10:	2300      	movs	r3, #0
 8007d12:	e000      	b.n	8007d16 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007d14:	68fb      	ldr	r3, [r7, #12]
}
 8007d16:	4618      	mov	r0, r3
 8007d18:	3714      	adds	r7, #20
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007d1e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007d1e:	b580      	push	{r7, lr}
 8007d20:	b084      	sub	sp, #16
 8007d22:	af00      	add	r7, sp, #0
 8007d24:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d001      	beq.n	8007d34 <osDelay+0x16>
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	e000      	b.n	8007d36 <osDelay+0x18>
 8007d34:	2301      	movs	r3, #1
 8007d36:	4618      	mov	r0, r3
 8007d38:	f000 fa64 	bl	8008204 <vTaskDelay>
  
  return osOK;
 8007d3c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007d3e:	4618      	mov	r0, r3
 8007d40:	3710      	adds	r7, #16
 8007d42:	46bd      	mov	sp, r7
 8007d44:	bd80      	pop	{r7, pc}

08007d46 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007d46:	b480      	push	{r7}
 8007d48:	b083      	sub	sp, #12
 8007d4a:	af00      	add	r7, sp, #0
 8007d4c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	f103 0208 	add.w	r2, r3, #8
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007d5e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	f103 0208 	add.w	r2, r3, #8
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	f103 0208 	add.w	r2, r3, #8
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2200      	movs	r2, #0
 8007d78:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007d7a:	bf00      	nop
 8007d7c:	370c      	adds	r7, #12
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d84:	4770      	bx	lr

08007d86 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007d86:	b480      	push	{r7}
 8007d88:	b083      	sub	sp, #12
 8007d8a:	af00      	add	r7, sp, #0
 8007d8c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2200      	movs	r2, #0
 8007d92:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007d94:	bf00      	nop
 8007d96:	370c      	adds	r7, #12
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9e:	4770      	bx	lr

08007da0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007da0:	b480      	push	{r7}
 8007da2:	b085      	sub	sp, #20
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
 8007da8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	685b      	ldr	r3, [r3, #4]
 8007dae:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	68fa      	ldr	r2, [r7, #12]
 8007db4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	689a      	ldr	r2, [r3, #8]
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	689b      	ldr	r3, [r3, #8]
 8007dc2:	683a      	ldr	r2, [r7, #0]
 8007dc4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	683a      	ldr	r2, [r7, #0]
 8007dca:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007dcc:	683b      	ldr	r3, [r7, #0]
 8007dce:	687a      	ldr	r2, [r7, #4]
 8007dd0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	1c5a      	adds	r2, r3, #1
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	601a      	str	r2, [r3, #0]
}
 8007ddc:	bf00      	nop
 8007dde:	3714      	adds	r7, #20
 8007de0:	46bd      	mov	sp, r7
 8007de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de6:	4770      	bx	lr

08007de8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007de8:	b480      	push	{r7}
 8007dea:	b085      	sub	sp, #20
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
 8007df0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007df8:	68bb      	ldr	r3, [r7, #8]
 8007dfa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007dfe:	d103      	bne.n	8007e08 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	691b      	ldr	r3, [r3, #16]
 8007e04:	60fb      	str	r3, [r7, #12]
 8007e06:	e00c      	b.n	8007e22 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	3308      	adds	r3, #8
 8007e0c:	60fb      	str	r3, [r7, #12]
 8007e0e:	e002      	b.n	8007e16 <vListInsert+0x2e>
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	685b      	ldr	r3, [r3, #4]
 8007e14:	60fb      	str	r3, [r7, #12]
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	685b      	ldr	r3, [r3, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	68ba      	ldr	r2, [r7, #8]
 8007e1e:	429a      	cmp	r2, r3
 8007e20:	d2f6      	bcs.n	8007e10 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	685a      	ldr	r2, [r3, #4]
 8007e26:	683b      	ldr	r3, [r7, #0]
 8007e28:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007e2a:	683b      	ldr	r3, [r7, #0]
 8007e2c:	685b      	ldr	r3, [r3, #4]
 8007e2e:	683a      	ldr	r2, [r7, #0]
 8007e30:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	68fa      	ldr	r2, [r7, #12]
 8007e36:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	683a      	ldr	r2, [r7, #0]
 8007e3c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	687a      	ldr	r2, [r7, #4]
 8007e42:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	1c5a      	adds	r2, r3, #1
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	601a      	str	r2, [r3, #0]
}
 8007e4e:	bf00      	nop
 8007e50:	3714      	adds	r7, #20
 8007e52:	46bd      	mov	sp, r7
 8007e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e58:	4770      	bx	lr

08007e5a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007e5a:	b480      	push	{r7}
 8007e5c:	b085      	sub	sp, #20
 8007e5e:	af00      	add	r7, sp, #0
 8007e60:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	691b      	ldr	r3, [r3, #16]
 8007e66:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	685b      	ldr	r3, [r3, #4]
 8007e6c:	687a      	ldr	r2, [r7, #4]
 8007e6e:	6892      	ldr	r2, [r2, #8]
 8007e70:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	689b      	ldr	r3, [r3, #8]
 8007e76:	687a      	ldr	r2, [r7, #4]
 8007e78:	6852      	ldr	r2, [r2, #4]
 8007e7a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	685b      	ldr	r3, [r3, #4]
 8007e80:	687a      	ldr	r2, [r7, #4]
 8007e82:	429a      	cmp	r2, r3
 8007e84:	d103      	bne.n	8007e8e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	689a      	ldr	r2, [r3, #8]
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2200      	movs	r2, #0
 8007e92:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	1e5a      	subs	r2, r3, #1
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	681b      	ldr	r3, [r3, #0]
}
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	3714      	adds	r7, #20
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eac:	4770      	bx	lr

08007eae <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007eae:	b580      	push	{r7, lr}
 8007eb0:	b08e      	sub	sp, #56	; 0x38
 8007eb2:	af04      	add	r7, sp, #16
 8007eb4:	60f8      	str	r0, [r7, #12]
 8007eb6:	60b9      	str	r1, [r7, #8]
 8007eb8:	607a      	str	r2, [r7, #4]
 8007eba:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007ebc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d10a      	bne.n	8007ed8 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ec6:	f383 8811 	msr	BASEPRI, r3
 8007eca:	f3bf 8f6f 	isb	sy
 8007ece:	f3bf 8f4f 	dsb	sy
 8007ed2:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007ed4:	bf00      	nop
 8007ed6:	e7fe      	b.n	8007ed6 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007ed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d10a      	bne.n	8007ef4 <xTaskCreateStatic+0x46>
	__asm volatile
 8007ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ee2:	f383 8811 	msr	BASEPRI, r3
 8007ee6:	f3bf 8f6f 	isb	sy
 8007eea:	f3bf 8f4f 	dsb	sy
 8007eee:	61fb      	str	r3, [r7, #28]
}
 8007ef0:	bf00      	nop
 8007ef2:	e7fe      	b.n	8007ef2 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007ef4:	23a0      	movs	r3, #160	; 0xa0
 8007ef6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007ef8:	693b      	ldr	r3, [r7, #16]
 8007efa:	2ba0      	cmp	r3, #160	; 0xa0
 8007efc:	d00a      	beq.n	8007f14 <xTaskCreateStatic+0x66>
	__asm volatile
 8007efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f02:	f383 8811 	msr	BASEPRI, r3
 8007f06:	f3bf 8f6f 	isb	sy
 8007f0a:	f3bf 8f4f 	dsb	sy
 8007f0e:	61bb      	str	r3, [r7, #24]
}
 8007f10:	bf00      	nop
 8007f12:	e7fe      	b.n	8007f12 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007f14:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d01e      	beq.n	8007f5a <xTaskCreateStatic+0xac>
 8007f1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d01b      	beq.n	8007f5a <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007f22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f24:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f28:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007f2a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f2e:	2202      	movs	r2, #2
 8007f30:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007f34:	2300      	movs	r3, #0
 8007f36:	9303      	str	r3, [sp, #12]
 8007f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f3a:	9302      	str	r3, [sp, #8]
 8007f3c:	f107 0314 	add.w	r3, r7, #20
 8007f40:	9301      	str	r3, [sp, #4]
 8007f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f44:	9300      	str	r3, [sp, #0]
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	687a      	ldr	r2, [r7, #4]
 8007f4a:	68b9      	ldr	r1, [r7, #8]
 8007f4c:	68f8      	ldr	r0, [r7, #12]
 8007f4e:	f000 f851 	bl	8007ff4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007f52:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007f54:	f000 f8ec 	bl	8008130 <prvAddNewTaskToReadyList>
 8007f58:	e001      	b.n	8007f5e <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007f5e:	697b      	ldr	r3, [r7, #20]
	}
 8007f60:	4618      	mov	r0, r3
 8007f62:	3728      	adds	r7, #40	; 0x28
 8007f64:	46bd      	mov	sp, r7
 8007f66:	bd80      	pop	{r7, pc}

08007f68 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b08c      	sub	sp, #48	; 0x30
 8007f6c:	af04      	add	r7, sp, #16
 8007f6e:	60f8      	str	r0, [r7, #12]
 8007f70:	60b9      	str	r1, [r7, #8]
 8007f72:	603b      	str	r3, [r7, #0]
 8007f74:	4613      	mov	r3, r2
 8007f76:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007f78:	88fb      	ldrh	r3, [r7, #6]
 8007f7a:	009b      	lsls	r3, r3, #2
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	f000 fef3 	bl	8008d68 <pvPortMalloc>
 8007f82:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007f84:	697b      	ldr	r3, [r7, #20]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d00e      	beq.n	8007fa8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007f8a:	20a0      	movs	r0, #160	; 0xa0
 8007f8c:	f000 feec 	bl	8008d68 <pvPortMalloc>
 8007f90:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007f92:	69fb      	ldr	r3, [r7, #28]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d003      	beq.n	8007fa0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007f98:	69fb      	ldr	r3, [r7, #28]
 8007f9a:	697a      	ldr	r2, [r7, #20]
 8007f9c:	631a      	str	r2, [r3, #48]	; 0x30
 8007f9e:	e005      	b.n	8007fac <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007fa0:	6978      	ldr	r0, [r7, #20]
 8007fa2:	f000 ffad 	bl	8008f00 <vPortFree>
 8007fa6:	e001      	b.n	8007fac <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007fa8:	2300      	movs	r3, #0
 8007faa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007fac:	69fb      	ldr	r3, [r7, #28]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d017      	beq.n	8007fe2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007fb2:	69fb      	ldr	r3, [r7, #28]
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007fba:	88fa      	ldrh	r2, [r7, #6]
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	9303      	str	r3, [sp, #12]
 8007fc0:	69fb      	ldr	r3, [r7, #28]
 8007fc2:	9302      	str	r3, [sp, #8]
 8007fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fc6:	9301      	str	r3, [sp, #4]
 8007fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fca:	9300      	str	r3, [sp, #0]
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	68b9      	ldr	r1, [r7, #8]
 8007fd0:	68f8      	ldr	r0, [r7, #12]
 8007fd2:	f000 f80f 	bl	8007ff4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007fd6:	69f8      	ldr	r0, [r7, #28]
 8007fd8:	f000 f8aa 	bl	8008130 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007fdc:	2301      	movs	r3, #1
 8007fde:	61bb      	str	r3, [r7, #24]
 8007fe0:	e002      	b.n	8007fe8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007fe2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007fe6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007fe8:	69bb      	ldr	r3, [r7, #24]
	}
 8007fea:	4618      	mov	r0, r3
 8007fec:	3720      	adds	r7, #32
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	bd80      	pop	{r7, pc}
	...

08007ff4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b088      	sub	sp, #32
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	60f8      	str	r0, [r7, #12]
 8007ffc:	60b9      	str	r1, [r7, #8]
 8007ffe:	607a      	str	r2, [r7, #4]
 8008000:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008004:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800800c:	3b01      	subs	r3, #1
 800800e:	009b      	lsls	r3, r3, #2
 8008010:	4413      	add	r3, r2
 8008012:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008014:	69bb      	ldr	r3, [r7, #24]
 8008016:	f023 0307 	bic.w	r3, r3, #7
 800801a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800801c:	69bb      	ldr	r3, [r7, #24]
 800801e:	f003 0307 	and.w	r3, r3, #7
 8008022:	2b00      	cmp	r3, #0
 8008024:	d00a      	beq.n	800803c <prvInitialiseNewTask+0x48>
	__asm volatile
 8008026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800802a:	f383 8811 	msr	BASEPRI, r3
 800802e:	f3bf 8f6f 	isb	sy
 8008032:	f3bf 8f4f 	dsb	sy
 8008036:	617b      	str	r3, [r7, #20]
}
 8008038:	bf00      	nop
 800803a:	e7fe      	b.n	800803a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800803c:	68bb      	ldr	r3, [r7, #8]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d01f      	beq.n	8008082 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008042:	2300      	movs	r3, #0
 8008044:	61fb      	str	r3, [r7, #28]
 8008046:	e012      	b.n	800806e <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008048:	68ba      	ldr	r2, [r7, #8]
 800804a:	69fb      	ldr	r3, [r7, #28]
 800804c:	4413      	add	r3, r2
 800804e:	7819      	ldrb	r1, [r3, #0]
 8008050:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008052:	69fb      	ldr	r3, [r7, #28]
 8008054:	4413      	add	r3, r2
 8008056:	3334      	adds	r3, #52	; 0x34
 8008058:	460a      	mov	r2, r1
 800805a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800805c:	68ba      	ldr	r2, [r7, #8]
 800805e:	69fb      	ldr	r3, [r7, #28]
 8008060:	4413      	add	r3, r2
 8008062:	781b      	ldrb	r3, [r3, #0]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d006      	beq.n	8008076 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008068:	69fb      	ldr	r3, [r7, #28]
 800806a:	3301      	adds	r3, #1
 800806c:	61fb      	str	r3, [r7, #28]
 800806e:	69fb      	ldr	r3, [r7, #28]
 8008070:	2b0f      	cmp	r3, #15
 8008072:	d9e9      	bls.n	8008048 <prvInitialiseNewTask+0x54>
 8008074:	e000      	b.n	8008078 <prvInitialiseNewTask+0x84>
			{
				break;
 8008076:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800807a:	2200      	movs	r2, #0
 800807c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008080:	e003      	b.n	800808a <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008084:	2200      	movs	r2, #0
 8008086:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800808a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800808c:	2b06      	cmp	r3, #6
 800808e:	d901      	bls.n	8008094 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008090:	2306      	movs	r3, #6
 8008092:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008096:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008098:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800809a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800809c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800809e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80080a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080a2:	2200      	movs	r2, #0
 80080a4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80080a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080a8:	3304      	adds	r3, #4
 80080aa:	4618      	mov	r0, r3
 80080ac:	f7ff fe6b 	bl	8007d86 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80080b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080b2:	3318      	adds	r3, #24
 80080b4:	4618      	mov	r0, r3
 80080b6:	f7ff fe66 	bl	8007d86 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80080ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80080be:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80080c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080c2:	f1c3 0207 	rsb	r2, r3, #7
 80080c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080c8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80080ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80080ce:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80080d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080d2:	2200      	movs	r2, #0
 80080d4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80080d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080da:	2200      	movs	r2, #0
 80080dc:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80080e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080e2:	334c      	adds	r3, #76	; 0x4c
 80080e4:	224c      	movs	r2, #76	; 0x4c
 80080e6:	2100      	movs	r1, #0
 80080e8:	4618      	mov	r0, r3
 80080ea:	f001 fd1b 	bl	8009b24 <memset>
 80080ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080f0:	4a0c      	ldr	r2, [pc, #48]	; (8008124 <prvInitialiseNewTask+0x130>)
 80080f2:	651a      	str	r2, [r3, #80]	; 0x50
 80080f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080f6:	4a0c      	ldr	r2, [pc, #48]	; (8008128 <prvInitialiseNewTask+0x134>)
 80080f8:	655a      	str	r2, [r3, #84]	; 0x54
 80080fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080fc:	4a0b      	ldr	r2, [pc, #44]	; (800812c <prvInitialiseNewTask+0x138>)
 80080fe:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008100:	683a      	ldr	r2, [r7, #0]
 8008102:	68f9      	ldr	r1, [r7, #12]
 8008104:	69b8      	ldr	r0, [r7, #24]
 8008106:	f000 fc1f 	bl	8008948 <pxPortInitialiseStack>
 800810a:	4602      	mov	r2, r0
 800810c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800810e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008112:	2b00      	cmp	r3, #0
 8008114:	d002      	beq.n	800811c <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008118:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800811a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800811c:	bf00      	nop
 800811e:	3720      	adds	r7, #32
 8008120:	46bd      	mov	sp, r7
 8008122:	bd80      	pop	{r7, pc}
 8008124:	20005f20 	.word	0x20005f20
 8008128:	20005f88 	.word	0x20005f88
 800812c:	20005ff0 	.word	0x20005ff0

08008130 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b082      	sub	sp, #8
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008138:	f000 fd34 	bl	8008ba4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800813c:	4b2a      	ldr	r3, [pc, #168]	; (80081e8 <prvAddNewTaskToReadyList+0xb8>)
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	3301      	adds	r3, #1
 8008142:	4a29      	ldr	r2, [pc, #164]	; (80081e8 <prvAddNewTaskToReadyList+0xb8>)
 8008144:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008146:	4b29      	ldr	r3, [pc, #164]	; (80081ec <prvAddNewTaskToReadyList+0xbc>)
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d109      	bne.n	8008162 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800814e:	4a27      	ldr	r2, [pc, #156]	; (80081ec <prvAddNewTaskToReadyList+0xbc>)
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008154:	4b24      	ldr	r3, [pc, #144]	; (80081e8 <prvAddNewTaskToReadyList+0xb8>)
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	2b01      	cmp	r3, #1
 800815a:	d110      	bne.n	800817e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800815c:	f000 facc 	bl	80086f8 <prvInitialiseTaskLists>
 8008160:	e00d      	b.n	800817e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008162:	4b23      	ldr	r3, [pc, #140]	; (80081f0 <prvAddNewTaskToReadyList+0xc0>)
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d109      	bne.n	800817e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800816a:	4b20      	ldr	r3, [pc, #128]	; (80081ec <prvAddNewTaskToReadyList+0xbc>)
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008174:	429a      	cmp	r2, r3
 8008176:	d802      	bhi.n	800817e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008178:	4a1c      	ldr	r2, [pc, #112]	; (80081ec <prvAddNewTaskToReadyList+0xbc>)
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800817e:	4b1d      	ldr	r3, [pc, #116]	; (80081f4 <prvAddNewTaskToReadyList+0xc4>)
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	3301      	adds	r3, #1
 8008184:	4a1b      	ldr	r2, [pc, #108]	; (80081f4 <prvAddNewTaskToReadyList+0xc4>)
 8008186:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800818c:	2201      	movs	r2, #1
 800818e:	409a      	lsls	r2, r3
 8008190:	4b19      	ldr	r3, [pc, #100]	; (80081f8 <prvAddNewTaskToReadyList+0xc8>)
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	4313      	orrs	r3, r2
 8008196:	4a18      	ldr	r2, [pc, #96]	; (80081f8 <prvAddNewTaskToReadyList+0xc8>)
 8008198:	6013      	str	r3, [r2, #0]
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800819e:	4613      	mov	r3, r2
 80081a0:	009b      	lsls	r3, r3, #2
 80081a2:	4413      	add	r3, r2
 80081a4:	009b      	lsls	r3, r3, #2
 80081a6:	4a15      	ldr	r2, [pc, #84]	; (80081fc <prvAddNewTaskToReadyList+0xcc>)
 80081a8:	441a      	add	r2, r3
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	3304      	adds	r3, #4
 80081ae:	4619      	mov	r1, r3
 80081b0:	4610      	mov	r0, r2
 80081b2:	f7ff fdf5 	bl	8007da0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80081b6:	f000 fd25 	bl	8008c04 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80081ba:	4b0d      	ldr	r3, [pc, #52]	; (80081f0 <prvAddNewTaskToReadyList+0xc0>)
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d00e      	beq.n	80081e0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80081c2:	4b0a      	ldr	r3, [pc, #40]	; (80081ec <prvAddNewTaskToReadyList+0xbc>)
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081cc:	429a      	cmp	r2, r3
 80081ce:	d207      	bcs.n	80081e0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80081d0:	4b0b      	ldr	r3, [pc, #44]	; (8008200 <prvAddNewTaskToReadyList+0xd0>)
 80081d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081d6:	601a      	str	r2, [r3, #0]
 80081d8:	f3bf 8f4f 	dsb	sy
 80081dc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80081e0:	bf00      	nop
 80081e2:	3708      	adds	r7, #8
 80081e4:	46bd      	mov	sp, r7
 80081e6:	bd80      	pop	{r7, pc}
 80081e8:	200006ec 	.word	0x200006ec
 80081ec:	200005ec 	.word	0x200005ec
 80081f0:	200006f8 	.word	0x200006f8
 80081f4:	20000708 	.word	0x20000708
 80081f8:	200006f4 	.word	0x200006f4
 80081fc:	200005f0 	.word	0x200005f0
 8008200:	e000ed04 	.word	0xe000ed04

08008204 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008204:	b580      	push	{r7, lr}
 8008206:	b084      	sub	sp, #16
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800820c:	2300      	movs	r3, #0
 800820e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2b00      	cmp	r3, #0
 8008214:	d017      	beq.n	8008246 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008216:	4b13      	ldr	r3, [pc, #76]	; (8008264 <vTaskDelay+0x60>)
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d00a      	beq.n	8008234 <vTaskDelay+0x30>
	__asm volatile
 800821e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008222:	f383 8811 	msr	BASEPRI, r3
 8008226:	f3bf 8f6f 	isb	sy
 800822a:	f3bf 8f4f 	dsb	sy
 800822e:	60bb      	str	r3, [r7, #8]
}
 8008230:	bf00      	nop
 8008232:	e7fe      	b.n	8008232 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008234:	f000 f884 	bl	8008340 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008238:	2100      	movs	r1, #0
 800823a:	6878      	ldr	r0, [r7, #4]
 800823c:	f000 fb1e 	bl	800887c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008240:	f000 f88c 	bl	800835c <xTaskResumeAll>
 8008244:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d107      	bne.n	800825c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800824c:	4b06      	ldr	r3, [pc, #24]	; (8008268 <vTaskDelay+0x64>)
 800824e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008252:	601a      	str	r2, [r3, #0]
 8008254:	f3bf 8f4f 	dsb	sy
 8008258:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800825c:	bf00      	nop
 800825e:	3710      	adds	r7, #16
 8008260:	46bd      	mov	sp, r7
 8008262:	bd80      	pop	{r7, pc}
 8008264:	20000714 	.word	0x20000714
 8008268:	e000ed04 	.word	0xe000ed04

0800826c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b08a      	sub	sp, #40	; 0x28
 8008270:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008272:	2300      	movs	r3, #0
 8008274:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008276:	2300      	movs	r3, #0
 8008278:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800827a:	463a      	mov	r2, r7
 800827c:	1d39      	adds	r1, r7, #4
 800827e:	f107 0308 	add.w	r3, r7, #8
 8008282:	4618      	mov	r0, r3
 8008284:	f7f8 fa04 	bl	8000690 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008288:	6839      	ldr	r1, [r7, #0]
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	68ba      	ldr	r2, [r7, #8]
 800828e:	9202      	str	r2, [sp, #8]
 8008290:	9301      	str	r3, [sp, #4]
 8008292:	2300      	movs	r3, #0
 8008294:	9300      	str	r3, [sp, #0]
 8008296:	2300      	movs	r3, #0
 8008298:	460a      	mov	r2, r1
 800829a:	4921      	ldr	r1, [pc, #132]	; (8008320 <vTaskStartScheduler+0xb4>)
 800829c:	4821      	ldr	r0, [pc, #132]	; (8008324 <vTaskStartScheduler+0xb8>)
 800829e:	f7ff fe06 	bl	8007eae <xTaskCreateStatic>
 80082a2:	4603      	mov	r3, r0
 80082a4:	4a20      	ldr	r2, [pc, #128]	; (8008328 <vTaskStartScheduler+0xbc>)
 80082a6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80082a8:	4b1f      	ldr	r3, [pc, #124]	; (8008328 <vTaskStartScheduler+0xbc>)
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d002      	beq.n	80082b6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80082b0:	2301      	movs	r3, #1
 80082b2:	617b      	str	r3, [r7, #20]
 80082b4:	e001      	b.n	80082ba <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80082b6:	2300      	movs	r3, #0
 80082b8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80082ba:	697b      	ldr	r3, [r7, #20]
 80082bc:	2b01      	cmp	r3, #1
 80082be:	d11b      	bne.n	80082f8 <vTaskStartScheduler+0x8c>
	__asm volatile
 80082c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082c4:	f383 8811 	msr	BASEPRI, r3
 80082c8:	f3bf 8f6f 	isb	sy
 80082cc:	f3bf 8f4f 	dsb	sy
 80082d0:	613b      	str	r3, [r7, #16]
}
 80082d2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80082d4:	4b15      	ldr	r3, [pc, #84]	; (800832c <vTaskStartScheduler+0xc0>)
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	334c      	adds	r3, #76	; 0x4c
 80082da:	4a15      	ldr	r2, [pc, #84]	; (8008330 <vTaskStartScheduler+0xc4>)
 80082dc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80082de:	4b15      	ldr	r3, [pc, #84]	; (8008334 <vTaskStartScheduler+0xc8>)
 80082e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80082e4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80082e6:	4b14      	ldr	r3, [pc, #80]	; (8008338 <vTaskStartScheduler+0xcc>)
 80082e8:	2201      	movs	r2, #1
 80082ea:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80082ec:	4b13      	ldr	r3, [pc, #76]	; (800833c <vTaskStartScheduler+0xd0>)
 80082ee:	2200      	movs	r2, #0
 80082f0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80082f2:	f000 fbb5 	bl	8008a60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80082f6:	e00e      	b.n	8008316 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80082f8:	697b      	ldr	r3, [r7, #20]
 80082fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80082fe:	d10a      	bne.n	8008316 <vTaskStartScheduler+0xaa>
	__asm volatile
 8008300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008304:	f383 8811 	msr	BASEPRI, r3
 8008308:	f3bf 8f6f 	isb	sy
 800830c:	f3bf 8f4f 	dsb	sy
 8008310:	60fb      	str	r3, [r7, #12]
}
 8008312:	bf00      	nop
 8008314:	e7fe      	b.n	8008314 <vTaskStartScheduler+0xa8>
}
 8008316:	bf00      	nop
 8008318:	3718      	adds	r7, #24
 800831a:	46bd      	mov	sp, r7
 800831c:	bd80      	pop	{r7, pc}
 800831e:	bf00      	nop
 8008320:	08009d44 	.word	0x08009d44
 8008324:	080086c9 	.word	0x080086c9
 8008328:	20000710 	.word	0x20000710
 800832c:	200005ec 	.word	0x200005ec
 8008330:	2000014c 	.word	0x2000014c
 8008334:	2000070c 	.word	0x2000070c
 8008338:	200006f8 	.word	0x200006f8
 800833c:	200006f0 	.word	0x200006f0

08008340 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008340:	b480      	push	{r7}
 8008342:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008344:	4b04      	ldr	r3, [pc, #16]	; (8008358 <vTaskSuspendAll+0x18>)
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	3301      	adds	r3, #1
 800834a:	4a03      	ldr	r2, [pc, #12]	; (8008358 <vTaskSuspendAll+0x18>)
 800834c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800834e:	bf00      	nop
 8008350:	46bd      	mov	sp, r7
 8008352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008356:	4770      	bx	lr
 8008358:	20000714 	.word	0x20000714

0800835c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b084      	sub	sp, #16
 8008360:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008362:	2300      	movs	r3, #0
 8008364:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008366:	2300      	movs	r3, #0
 8008368:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800836a:	4b41      	ldr	r3, [pc, #260]	; (8008470 <xTaskResumeAll+0x114>)
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d10a      	bne.n	8008388 <xTaskResumeAll+0x2c>
	__asm volatile
 8008372:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008376:	f383 8811 	msr	BASEPRI, r3
 800837a:	f3bf 8f6f 	isb	sy
 800837e:	f3bf 8f4f 	dsb	sy
 8008382:	603b      	str	r3, [r7, #0]
}
 8008384:	bf00      	nop
 8008386:	e7fe      	b.n	8008386 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008388:	f000 fc0c 	bl	8008ba4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800838c:	4b38      	ldr	r3, [pc, #224]	; (8008470 <xTaskResumeAll+0x114>)
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	3b01      	subs	r3, #1
 8008392:	4a37      	ldr	r2, [pc, #220]	; (8008470 <xTaskResumeAll+0x114>)
 8008394:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008396:	4b36      	ldr	r3, [pc, #216]	; (8008470 <xTaskResumeAll+0x114>)
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d161      	bne.n	8008462 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800839e:	4b35      	ldr	r3, [pc, #212]	; (8008474 <xTaskResumeAll+0x118>)
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d05d      	beq.n	8008462 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80083a6:	e02e      	b.n	8008406 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80083a8:	4b33      	ldr	r3, [pc, #204]	; (8008478 <xTaskResumeAll+0x11c>)
 80083aa:	68db      	ldr	r3, [r3, #12]
 80083ac:	68db      	ldr	r3, [r3, #12]
 80083ae:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	3318      	adds	r3, #24
 80083b4:	4618      	mov	r0, r3
 80083b6:	f7ff fd50 	bl	8007e5a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	3304      	adds	r3, #4
 80083be:	4618      	mov	r0, r3
 80083c0:	f7ff fd4b 	bl	8007e5a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083c8:	2201      	movs	r2, #1
 80083ca:	409a      	lsls	r2, r3
 80083cc:	4b2b      	ldr	r3, [pc, #172]	; (800847c <xTaskResumeAll+0x120>)
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	4313      	orrs	r3, r2
 80083d2:	4a2a      	ldr	r2, [pc, #168]	; (800847c <xTaskResumeAll+0x120>)
 80083d4:	6013      	str	r3, [r2, #0]
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083da:	4613      	mov	r3, r2
 80083dc:	009b      	lsls	r3, r3, #2
 80083de:	4413      	add	r3, r2
 80083e0:	009b      	lsls	r3, r3, #2
 80083e2:	4a27      	ldr	r2, [pc, #156]	; (8008480 <xTaskResumeAll+0x124>)
 80083e4:	441a      	add	r2, r3
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	3304      	adds	r3, #4
 80083ea:	4619      	mov	r1, r3
 80083ec:	4610      	mov	r0, r2
 80083ee:	f7ff fcd7 	bl	8007da0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083f6:	4b23      	ldr	r3, [pc, #140]	; (8008484 <xTaskResumeAll+0x128>)
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083fc:	429a      	cmp	r2, r3
 80083fe:	d302      	bcc.n	8008406 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8008400:	4b21      	ldr	r3, [pc, #132]	; (8008488 <xTaskResumeAll+0x12c>)
 8008402:	2201      	movs	r2, #1
 8008404:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008406:	4b1c      	ldr	r3, [pc, #112]	; (8008478 <xTaskResumeAll+0x11c>)
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d1cc      	bne.n	80083a8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d001      	beq.n	8008418 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008414:	f000 fa12 	bl	800883c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008418:	4b1c      	ldr	r3, [pc, #112]	; (800848c <xTaskResumeAll+0x130>)
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d010      	beq.n	8008446 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008424:	f000 f836 	bl	8008494 <xTaskIncrementTick>
 8008428:	4603      	mov	r3, r0
 800842a:	2b00      	cmp	r3, #0
 800842c:	d002      	beq.n	8008434 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800842e:	4b16      	ldr	r3, [pc, #88]	; (8008488 <xTaskResumeAll+0x12c>)
 8008430:	2201      	movs	r2, #1
 8008432:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	3b01      	subs	r3, #1
 8008438:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d1f1      	bne.n	8008424 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8008440:	4b12      	ldr	r3, [pc, #72]	; (800848c <xTaskResumeAll+0x130>)
 8008442:	2200      	movs	r2, #0
 8008444:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008446:	4b10      	ldr	r3, [pc, #64]	; (8008488 <xTaskResumeAll+0x12c>)
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d009      	beq.n	8008462 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800844e:	2301      	movs	r3, #1
 8008450:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008452:	4b0f      	ldr	r3, [pc, #60]	; (8008490 <xTaskResumeAll+0x134>)
 8008454:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008458:	601a      	str	r2, [r3, #0]
 800845a:	f3bf 8f4f 	dsb	sy
 800845e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008462:	f000 fbcf 	bl	8008c04 <vPortExitCritical>

	return xAlreadyYielded;
 8008466:	68bb      	ldr	r3, [r7, #8]
}
 8008468:	4618      	mov	r0, r3
 800846a:	3710      	adds	r7, #16
 800846c:	46bd      	mov	sp, r7
 800846e:	bd80      	pop	{r7, pc}
 8008470:	20000714 	.word	0x20000714
 8008474:	200006ec 	.word	0x200006ec
 8008478:	200006ac 	.word	0x200006ac
 800847c:	200006f4 	.word	0x200006f4
 8008480:	200005f0 	.word	0x200005f0
 8008484:	200005ec 	.word	0x200005ec
 8008488:	20000700 	.word	0x20000700
 800848c:	200006fc 	.word	0x200006fc
 8008490:	e000ed04 	.word	0xe000ed04

08008494 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008494:	b580      	push	{r7, lr}
 8008496:	b086      	sub	sp, #24
 8008498:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800849a:	2300      	movs	r3, #0
 800849c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800849e:	4b4e      	ldr	r3, [pc, #312]	; (80085d8 <xTaskIncrementTick+0x144>)
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	f040 808e 	bne.w	80085c4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80084a8:	4b4c      	ldr	r3, [pc, #304]	; (80085dc <xTaskIncrementTick+0x148>)
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	3301      	adds	r3, #1
 80084ae:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80084b0:	4a4a      	ldr	r2, [pc, #296]	; (80085dc <xTaskIncrementTick+0x148>)
 80084b2:	693b      	ldr	r3, [r7, #16]
 80084b4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80084b6:	693b      	ldr	r3, [r7, #16]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d120      	bne.n	80084fe <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80084bc:	4b48      	ldr	r3, [pc, #288]	; (80085e0 <xTaskIncrementTick+0x14c>)
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d00a      	beq.n	80084dc <xTaskIncrementTick+0x48>
	__asm volatile
 80084c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084ca:	f383 8811 	msr	BASEPRI, r3
 80084ce:	f3bf 8f6f 	isb	sy
 80084d2:	f3bf 8f4f 	dsb	sy
 80084d6:	603b      	str	r3, [r7, #0]
}
 80084d8:	bf00      	nop
 80084da:	e7fe      	b.n	80084da <xTaskIncrementTick+0x46>
 80084dc:	4b40      	ldr	r3, [pc, #256]	; (80085e0 <xTaskIncrementTick+0x14c>)
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	60fb      	str	r3, [r7, #12]
 80084e2:	4b40      	ldr	r3, [pc, #256]	; (80085e4 <xTaskIncrementTick+0x150>)
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	4a3e      	ldr	r2, [pc, #248]	; (80085e0 <xTaskIncrementTick+0x14c>)
 80084e8:	6013      	str	r3, [r2, #0]
 80084ea:	4a3e      	ldr	r2, [pc, #248]	; (80085e4 <xTaskIncrementTick+0x150>)
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	6013      	str	r3, [r2, #0]
 80084f0:	4b3d      	ldr	r3, [pc, #244]	; (80085e8 <xTaskIncrementTick+0x154>)
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	3301      	adds	r3, #1
 80084f6:	4a3c      	ldr	r2, [pc, #240]	; (80085e8 <xTaskIncrementTick+0x154>)
 80084f8:	6013      	str	r3, [r2, #0]
 80084fa:	f000 f99f 	bl	800883c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80084fe:	4b3b      	ldr	r3, [pc, #236]	; (80085ec <xTaskIncrementTick+0x158>)
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	693a      	ldr	r2, [r7, #16]
 8008504:	429a      	cmp	r2, r3
 8008506:	d348      	bcc.n	800859a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008508:	4b35      	ldr	r3, [pc, #212]	; (80085e0 <xTaskIncrementTick+0x14c>)
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d104      	bne.n	800851c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008512:	4b36      	ldr	r3, [pc, #216]	; (80085ec <xTaskIncrementTick+0x158>)
 8008514:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008518:	601a      	str	r2, [r3, #0]
					break;
 800851a:	e03e      	b.n	800859a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800851c:	4b30      	ldr	r3, [pc, #192]	; (80085e0 <xTaskIncrementTick+0x14c>)
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	68db      	ldr	r3, [r3, #12]
 8008522:	68db      	ldr	r3, [r3, #12]
 8008524:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008526:	68bb      	ldr	r3, [r7, #8]
 8008528:	685b      	ldr	r3, [r3, #4]
 800852a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800852c:	693a      	ldr	r2, [r7, #16]
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	429a      	cmp	r2, r3
 8008532:	d203      	bcs.n	800853c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008534:	4a2d      	ldr	r2, [pc, #180]	; (80085ec <xTaskIncrementTick+0x158>)
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800853a:	e02e      	b.n	800859a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800853c:	68bb      	ldr	r3, [r7, #8]
 800853e:	3304      	adds	r3, #4
 8008540:	4618      	mov	r0, r3
 8008542:	f7ff fc8a 	bl	8007e5a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008546:	68bb      	ldr	r3, [r7, #8]
 8008548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800854a:	2b00      	cmp	r3, #0
 800854c:	d004      	beq.n	8008558 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800854e:	68bb      	ldr	r3, [r7, #8]
 8008550:	3318      	adds	r3, #24
 8008552:	4618      	mov	r0, r3
 8008554:	f7ff fc81 	bl	8007e5a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008558:	68bb      	ldr	r3, [r7, #8]
 800855a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800855c:	2201      	movs	r2, #1
 800855e:	409a      	lsls	r2, r3
 8008560:	4b23      	ldr	r3, [pc, #140]	; (80085f0 <xTaskIncrementTick+0x15c>)
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	4313      	orrs	r3, r2
 8008566:	4a22      	ldr	r2, [pc, #136]	; (80085f0 <xTaskIncrementTick+0x15c>)
 8008568:	6013      	str	r3, [r2, #0]
 800856a:	68bb      	ldr	r3, [r7, #8]
 800856c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800856e:	4613      	mov	r3, r2
 8008570:	009b      	lsls	r3, r3, #2
 8008572:	4413      	add	r3, r2
 8008574:	009b      	lsls	r3, r3, #2
 8008576:	4a1f      	ldr	r2, [pc, #124]	; (80085f4 <xTaskIncrementTick+0x160>)
 8008578:	441a      	add	r2, r3
 800857a:	68bb      	ldr	r3, [r7, #8]
 800857c:	3304      	adds	r3, #4
 800857e:	4619      	mov	r1, r3
 8008580:	4610      	mov	r0, r2
 8008582:	f7ff fc0d 	bl	8007da0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008586:	68bb      	ldr	r3, [r7, #8]
 8008588:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800858a:	4b1b      	ldr	r3, [pc, #108]	; (80085f8 <xTaskIncrementTick+0x164>)
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008590:	429a      	cmp	r2, r3
 8008592:	d3b9      	bcc.n	8008508 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008594:	2301      	movs	r3, #1
 8008596:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008598:	e7b6      	b.n	8008508 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800859a:	4b17      	ldr	r3, [pc, #92]	; (80085f8 <xTaskIncrementTick+0x164>)
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085a0:	4914      	ldr	r1, [pc, #80]	; (80085f4 <xTaskIncrementTick+0x160>)
 80085a2:	4613      	mov	r3, r2
 80085a4:	009b      	lsls	r3, r3, #2
 80085a6:	4413      	add	r3, r2
 80085a8:	009b      	lsls	r3, r3, #2
 80085aa:	440b      	add	r3, r1
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	2b01      	cmp	r3, #1
 80085b0:	d901      	bls.n	80085b6 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80085b2:	2301      	movs	r3, #1
 80085b4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80085b6:	4b11      	ldr	r3, [pc, #68]	; (80085fc <xTaskIncrementTick+0x168>)
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d007      	beq.n	80085ce <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80085be:	2301      	movs	r3, #1
 80085c0:	617b      	str	r3, [r7, #20]
 80085c2:	e004      	b.n	80085ce <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80085c4:	4b0e      	ldr	r3, [pc, #56]	; (8008600 <xTaskIncrementTick+0x16c>)
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	3301      	adds	r3, #1
 80085ca:	4a0d      	ldr	r2, [pc, #52]	; (8008600 <xTaskIncrementTick+0x16c>)
 80085cc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80085ce:	697b      	ldr	r3, [r7, #20]
}
 80085d0:	4618      	mov	r0, r3
 80085d2:	3718      	adds	r7, #24
 80085d4:	46bd      	mov	sp, r7
 80085d6:	bd80      	pop	{r7, pc}
 80085d8:	20000714 	.word	0x20000714
 80085dc:	200006f0 	.word	0x200006f0
 80085e0:	200006a4 	.word	0x200006a4
 80085e4:	200006a8 	.word	0x200006a8
 80085e8:	20000704 	.word	0x20000704
 80085ec:	2000070c 	.word	0x2000070c
 80085f0:	200006f4 	.word	0x200006f4
 80085f4:	200005f0 	.word	0x200005f0
 80085f8:	200005ec 	.word	0x200005ec
 80085fc:	20000700 	.word	0x20000700
 8008600:	200006fc 	.word	0x200006fc

08008604 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008604:	b480      	push	{r7}
 8008606:	b087      	sub	sp, #28
 8008608:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800860a:	4b29      	ldr	r3, [pc, #164]	; (80086b0 <vTaskSwitchContext+0xac>)
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d003      	beq.n	800861a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008612:	4b28      	ldr	r3, [pc, #160]	; (80086b4 <vTaskSwitchContext+0xb0>)
 8008614:	2201      	movs	r2, #1
 8008616:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008618:	e044      	b.n	80086a4 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800861a:	4b26      	ldr	r3, [pc, #152]	; (80086b4 <vTaskSwitchContext+0xb0>)
 800861c:	2200      	movs	r2, #0
 800861e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008620:	4b25      	ldr	r3, [pc, #148]	; (80086b8 <vTaskSwitchContext+0xb4>)
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	fab3 f383 	clz	r3, r3
 800862c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800862e:	7afb      	ldrb	r3, [r7, #11]
 8008630:	f1c3 031f 	rsb	r3, r3, #31
 8008634:	617b      	str	r3, [r7, #20]
 8008636:	4921      	ldr	r1, [pc, #132]	; (80086bc <vTaskSwitchContext+0xb8>)
 8008638:	697a      	ldr	r2, [r7, #20]
 800863a:	4613      	mov	r3, r2
 800863c:	009b      	lsls	r3, r3, #2
 800863e:	4413      	add	r3, r2
 8008640:	009b      	lsls	r3, r3, #2
 8008642:	440b      	add	r3, r1
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d10a      	bne.n	8008660 <vTaskSwitchContext+0x5c>
	__asm volatile
 800864a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800864e:	f383 8811 	msr	BASEPRI, r3
 8008652:	f3bf 8f6f 	isb	sy
 8008656:	f3bf 8f4f 	dsb	sy
 800865a:	607b      	str	r3, [r7, #4]
}
 800865c:	bf00      	nop
 800865e:	e7fe      	b.n	800865e <vTaskSwitchContext+0x5a>
 8008660:	697a      	ldr	r2, [r7, #20]
 8008662:	4613      	mov	r3, r2
 8008664:	009b      	lsls	r3, r3, #2
 8008666:	4413      	add	r3, r2
 8008668:	009b      	lsls	r3, r3, #2
 800866a:	4a14      	ldr	r2, [pc, #80]	; (80086bc <vTaskSwitchContext+0xb8>)
 800866c:	4413      	add	r3, r2
 800866e:	613b      	str	r3, [r7, #16]
 8008670:	693b      	ldr	r3, [r7, #16]
 8008672:	685b      	ldr	r3, [r3, #4]
 8008674:	685a      	ldr	r2, [r3, #4]
 8008676:	693b      	ldr	r3, [r7, #16]
 8008678:	605a      	str	r2, [r3, #4]
 800867a:	693b      	ldr	r3, [r7, #16]
 800867c:	685a      	ldr	r2, [r3, #4]
 800867e:	693b      	ldr	r3, [r7, #16]
 8008680:	3308      	adds	r3, #8
 8008682:	429a      	cmp	r2, r3
 8008684:	d104      	bne.n	8008690 <vTaskSwitchContext+0x8c>
 8008686:	693b      	ldr	r3, [r7, #16]
 8008688:	685b      	ldr	r3, [r3, #4]
 800868a:	685a      	ldr	r2, [r3, #4]
 800868c:	693b      	ldr	r3, [r7, #16]
 800868e:	605a      	str	r2, [r3, #4]
 8008690:	693b      	ldr	r3, [r7, #16]
 8008692:	685b      	ldr	r3, [r3, #4]
 8008694:	68db      	ldr	r3, [r3, #12]
 8008696:	4a0a      	ldr	r2, [pc, #40]	; (80086c0 <vTaskSwitchContext+0xbc>)
 8008698:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800869a:	4b09      	ldr	r3, [pc, #36]	; (80086c0 <vTaskSwitchContext+0xbc>)
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	334c      	adds	r3, #76	; 0x4c
 80086a0:	4a08      	ldr	r2, [pc, #32]	; (80086c4 <vTaskSwitchContext+0xc0>)
 80086a2:	6013      	str	r3, [r2, #0]
}
 80086a4:	bf00      	nop
 80086a6:	371c      	adds	r7, #28
 80086a8:	46bd      	mov	sp, r7
 80086aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ae:	4770      	bx	lr
 80086b0:	20000714 	.word	0x20000714
 80086b4:	20000700 	.word	0x20000700
 80086b8:	200006f4 	.word	0x200006f4
 80086bc:	200005f0 	.word	0x200005f0
 80086c0:	200005ec 	.word	0x200005ec
 80086c4:	2000014c 	.word	0x2000014c

080086c8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b082      	sub	sp, #8
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80086d0:	f000 f852 	bl	8008778 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80086d4:	4b06      	ldr	r3, [pc, #24]	; (80086f0 <prvIdleTask+0x28>)
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	2b01      	cmp	r3, #1
 80086da:	d9f9      	bls.n	80086d0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80086dc:	4b05      	ldr	r3, [pc, #20]	; (80086f4 <prvIdleTask+0x2c>)
 80086de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086e2:	601a      	str	r2, [r3, #0]
 80086e4:	f3bf 8f4f 	dsb	sy
 80086e8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80086ec:	e7f0      	b.n	80086d0 <prvIdleTask+0x8>
 80086ee:	bf00      	nop
 80086f0:	200005f0 	.word	0x200005f0
 80086f4:	e000ed04 	.word	0xe000ed04

080086f8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b082      	sub	sp, #8
 80086fc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80086fe:	2300      	movs	r3, #0
 8008700:	607b      	str	r3, [r7, #4]
 8008702:	e00c      	b.n	800871e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008704:	687a      	ldr	r2, [r7, #4]
 8008706:	4613      	mov	r3, r2
 8008708:	009b      	lsls	r3, r3, #2
 800870a:	4413      	add	r3, r2
 800870c:	009b      	lsls	r3, r3, #2
 800870e:	4a12      	ldr	r2, [pc, #72]	; (8008758 <prvInitialiseTaskLists+0x60>)
 8008710:	4413      	add	r3, r2
 8008712:	4618      	mov	r0, r3
 8008714:	f7ff fb17 	bl	8007d46 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	3301      	adds	r3, #1
 800871c:	607b      	str	r3, [r7, #4]
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	2b06      	cmp	r3, #6
 8008722:	d9ef      	bls.n	8008704 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008724:	480d      	ldr	r0, [pc, #52]	; (800875c <prvInitialiseTaskLists+0x64>)
 8008726:	f7ff fb0e 	bl	8007d46 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800872a:	480d      	ldr	r0, [pc, #52]	; (8008760 <prvInitialiseTaskLists+0x68>)
 800872c:	f7ff fb0b 	bl	8007d46 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008730:	480c      	ldr	r0, [pc, #48]	; (8008764 <prvInitialiseTaskLists+0x6c>)
 8008732:	f7ff fb08 	bl	8007d46 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008736:	480c      	ldr	r0, [pc, #48]	; (8008768 <prvInitialiseTaskLists+0x70>)
 8008738:	f7ff fb05 	bl	8007d46 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800873c:	480b      	ldr	r0, [pc, #44]	; (800876c <prvInitialiseTaskLists+0x74>)
 800873e:	f7ff fb02 	bl	8007d46 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008742:	4b0b      	ldr	r3, [pc, #44]	; (8008770 <prvInitialiseTaskLists+0x78>)
 8008744:	4a05      	ldr	r2, [pc, #20]	; (800875c <prvInitialiseTaskLists+0x64>)
 8008746:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008748:	4b0a      	ldr	r3, [pc, #40]	; (8008774 <prvInitialiseTaskLists+0x7c>)
 800874a:	4a05      	ldr	r2, [pc, #20]	; (8008760 <prvInitialiseTaskLists+0x68>)
 800874c:	601a      	str	r2, [r3, #0]
}
 800874e:	bf00      	nop
 8008750:	3708      	adds	r7, #8
 8008752:	46bd      	mov	sp, r7
 8008754:	bd80      	pop	{r7, pc}
 8008756:	bf00      	nop
 8008758:	200005f0 	.word	0x200005f0
 800875c:	2000067c 	.word	0x2000067c
 8008760:	20000690 	.word	0x20000690
 8008764:	200006ac 	.word	0x200006ac
 8008768:	200006c0 	.word	0x200006c0
 800876c:	200006d8 	.word	0x200006d8
 8008770:	200006a4 	.word	0x200006a4
 8008774:	200006a8 	.word	0x200006a8

08008778 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008778:	b580      	push	{r7, lr}
 800877a:	b082      	sub	sp, #8
 800877c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800877e:	e019      	b.n	80087b4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008780:	f000 fa10 	bl	8008ba4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008784:	4b10      	ldr	r3, [pc, #64]	; (80087c8 <prvCheckTasksWaitingTermination+0x50>)
 8008786:	68db      	ldr	r3, [r3, #12]
 8008788:	68db      	ldr	r3, [r3, #12]
 800878a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	3304      	adds	r3, #4
 8008790:	4618      	mov	r0, r3
 8008792:	f7ff fb62 	bl	8007e5a <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008796:	4b0d      	ldr	r3, [pc, #52]	; (80087cc <prvCheckTasksWaitingTermination+0x54>)
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	3b01      	subs	r3, #1
 800879c:	4a0b      	ldr	r2, [pc, #44]	; (80087cc <prvCheckTasksWaitingTermination+0x54>)
 800879e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80087a0:	4b0b      	ldr	r3, [pc, #44]	; (80087d0 <prvCheckTasksWaitingTermination+0x58>)
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	3b01      	subs	r3, #1
 80087a6:	4a0a      	ldr	r2, [pc, #40]	; (80087d0 <prvCheckTasksWaitingTermination+0x58>)
 80087a8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80087aa:	f000 fa2b 	bl	8008c04 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80087ae:	6878      	ldr	r0, [r7, #4]
 80087b0:	f000 f810 	bl	80087d4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80087b4:	4b06      	ldr	r3, [pc, #24]	; (80087d0 <prvCheckTasksWaitingTermination+0x58>)
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d1e1      	bne.n	8008780 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80087bc:	bf00      	nop
 80087be:	bf00      	nop
 80087c0:	3708      	adds	r7, #8
 80087c2:	46bd      	mov	sp, r7
 80087c4:	bd80      	pop	{r7, pc}
 80087c6:	bf00      	nop
 80087c8:	200006c0 	.word	0x200006c0
 80087cc:	200006ec 	.word	0x200006ec
 80087d0:	200006d4 	.word	0x200006d4

080087d4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b084      	sub	sp, #16
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	334c      	adds	r3, #76	; 0x4c
 80087e0:	4618      	mov	r0, r3
 80087e2:	f001 f9a7 	bl	8009b34 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d108      	bne.n	8008802 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087f4:	4618      	mov	r0, r3
 80087f6:	f000 fb83 	bl	8008f00 <vPortFree>
				vPortFree( pxTCB );
 80087fa:	6878      	ldr	r0, [r7, #4]
 80087fc:	f000 fb80 	bl	8008f00 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008800:	e018      	b.n	8008834 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8008808:	2b01      	cmp	r3, #1
 800880a:	d103      	bne.n	8008814 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800880c:	6878      	ldr	r0, [r7, #4]
 800880e:	f000 fb77 	bl	8008f00 <vPortFree>
	}
 8008812:	e00f      	b.n	8008834 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800881a:	2b02      	cmp	r3, #2
 800881c:	d00a      	beq.n	8008834 <prvDeleteTCB+0x60>
	__asm volatile
 800881e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008822:	f383 8811 	msr	BASEPRI, r3
 8008826:	f3bf 8f6f 	isb	sy
 800882a:	f3bf 8f4f 	dsb	sy
 800882e:	60fb      	str	r3, [r7, #12]
}
 8008830:	bf00      	nop
 8008832:	e7fe      	b.n	8008832 <prvDeleteTCB+0x5e>
	}
 8008834:	bf00      	nop
 8008836:	3710      	adds	r7, #16
 8008838:	46bd      	mov	sp, r7
 800883a:	bd80      	pop	{r7, pc}

0800883c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800883c:	b480      	push	{r7}
 800883e:	b083      	sub	sp, #12
 8008840:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008842:	4b0c      	ldr	r3, [pc, #48]	; (8008874 <prvResetNextTaskUnblockTime+0x38>)
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	2b00      	cmp	r3, #0
 800884a:	d104      	bne.n	8008856 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800884c:	4b0a      	ldr	r3, [pc, #40]	; (8008878 <prvResetNextTaskUnblockTime+0x3c>)
 800884e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008852:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008854:	e008      	b.n	8008868 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008856:	4b07      	ldr	r3, [pc, #28]	; (8008874 <prvResetNextTaskUnblockTime+0x38>)
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	68db      	ldr	r3, [r3, #12]
 800885c:	68db      	ldr	r3, [r3, #12]
 800885e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	685b      	ldr	r3, [r3, #4]
 8008864:	4a04      	ldr	r2, [pc, #16]	; (8008878 <prvResetNextTaskUnblockTime+0x3c>)
 8008866:	6013      	str	r3, [r2, #0]
}
 8008868:	bf00      	nop
 800886a:	370c      	adds	r7, #12
 800886c:	46bd      	mov	sp, r7
 800886e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008872:	4770      	bx	lr
 8008874:	200006a4 	.word	0x200006a4
 8008878:	2000070c 	.word	0x2000070c

0800887c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800887c:	b580      	push	{r7, lr}
 800887e:	b084      	sub	sp, #16
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]
 8008884:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008886:	4b29      	ldr	r3, [pc, #164]	; (800892c <prvAddCurrentTaskToDelayedList+0xb0>)
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800888c:	4b28      	ldr	r3, [pc, #160]	; (8008930 <prvAddCurrentTaskToDelayedList+0xb4>)
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	3304      	adds	r3, #4
 8008892:	4618      	mov	r0, r3
 8008894:	f7ff fae1 	bl	8007e5a <uxListRemove>
 8008898:	4603      	mov	r3, r0
 800889a:	2b00      	cmp	r3, #0
 800889c:	d10b      	bne.n	80088b6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800889e:	4b24      	ldr	r3, [pc, #144]	; (8008930 <prvAddCurrentTaskToDelayedList+0xb4>)
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088a4:	2201      	movs	r2, #1
 80088a6:	fa02 f303 	lsl.w	r3, r2, r3
 80088aa:	43da      	mvns	r2, r3
 80088ac:	4b21      	ldr	r3, [pc, #132]	; (8008934 <prvAddCurrentTaskToDelayedList+0xb8>)
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	4013      	ands	r3, r2
 80088b2:	4a20      	ldr	r2, [pc, #128]	; (8008934 <prvAddCurrentTaskToDelayedList+0xb8>)
 80088b4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80088bc:	d10a      	bne.n	80088d4 <prvAddCurrentTaskToDelayedList+0x58>
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d007      	beq.n	80088d4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80088c4:	4b1a      	ldr	r3, [pc, #104]	; (8008930 <prvAddCurrentTaskToDelayedList+0xb4>)
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	3304      	adds	r3, #4
 80088ca:	4619      	mov	r1, r3
 80088cc:	481a      	ldr	r0, [pc, #104]	; (8008938 <prvAddCurrentTaskToDelayedList+0xbc>)
 80088ce:	f7ff fa67 	bl	8007da0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80088d2:	e026      	b.n	8008922 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80088d4:	68fa      	ldr	r2, [r7, #12]
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	4413      	add	r3, r2
 80088da:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80088dc:	4b14      	ldr	r3, [pc, #80]	; (8008930 <prvAddCurrentTaskToDelayedList+0xb4>)
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	68ba      	ldr	r2, [r7, #8]
 80088e2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80088e4:	68ba      	ldr	r2, [r7, #8]
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	429a      	cmp	r2, r3
 80088ea:	d209      	bcs.n	8008900 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80088ec:	4b13      	ldr	r3, [pc, #76]	; (800893c <prvAddCurrentTaskToDelayedList+0xc0>)
 80088ee:	681a      	ldr	r2, [r3, #0]
 80088f0:	4b0f      	ldr	r3, [pc, #60]	; (8008930 <prvAddCurrentTaskToDelayedList+0xb4>)
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	3304      	adds	r3, #4
 80088f6:	4619      	mov	r1, r3
 80088f8:	4610      	mov	r0, r2
 80088fa:	f7ff fa75 	bl	8007de8 <vListInsert>
}
 80088fe:	e010      	b.n	8008922 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008900:	4b0f      	ldr	r3, [pc, #60]	; (8008940 <prvAddCurrentTaskToDelayedList+0xc4>)
 8008902:	681a      	ldr	r2, [r3, #0]
 8008904:	4b0a      	ldr	r3, [pc, #40]	; (8008930 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	3304      	adds	r3, #4
 800890a:	4619      	mov	r1, r3
 800890c:	4610      	mov	r0, r2
 800890e:	f7ff fa6b 	bl	8007de8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008912:	4b0c      	ldr	r3, [pc, #48]	; (8008944 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	68ba      	ldr	r2, [r7, #8]
 8008918:	429a      	cmp	r2, r3
 800891a:	d202      	bcs.n	8008922 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800891c:	4a09      	ldr	r2, [pc, #36]	; (8008944 <prvAddCurrentTaskToDelayedList+0xc8>)
 800891e:	68bb      	ldr	r3, [r7, #8]
 8008920:	6013      	str	r3, [r2, #0]
}
 8008922:	bf00      	nop
 8008924:	3710      	adds	r7, #16
 8008926:	46bd      	mov	sp, r7
 8008928:	bd80      	pop	{r7, pc}
 800892a:	bf00      	nop
 800892c:	200006f0 	.word	0x200006f0
 8008930:	200005ec 	.word	0x200005ec
 8008934:	200006f4 	.word	0x200006f4
 8008938:	200006d8 	.word	0x200006d8
 800893c:	200006a8 	.word	0x200006a8
 8008940:	200006a4 	.word	0x200006a4
 8008944:	2000070c 	.word	0x2000070c

08008948 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008948:	b480      	push	{r7}
 800894a:	b085      	sub	sp, #20
 800894c:	af00      	add	r7, sp, #0
 800894e:	60f8      	str	r0, [r7, #12]
 8008950:	60b9      	str	r1, [r7, #8]
 8008952:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	3b04      	subs	r3, #4
 8008958:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008960:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	3b04      	subs	r3, #4
 8008966:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008968:	68bb      	ldr	r3, [r7, #8]
 800896a:	f023 0201 	bic.w	r2, r3, #1
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	3b04      	subs	r3, #4
 8008976:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008978:	4a0c      	ldr	r2, [pc, #48]	; (80089ac <pxPortInitialiseStack+0x64>)
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	3b14      	subs	r3, #20
 8008982:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008984:	687a      	ldr	r2, [r7, #4]
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	3b04      	subs	r3, #4
 800898e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	f06f 0202 	mvn.w	r2, #2
 8008996:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	3b20      	subs	r3, #32
 800899c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800899e:	68fb      	ldr	r3, [r7, #12]
}
 80089a0:	4618      	mov	r0, r3
 80089a2:	3714      	adds	r7, #20
 80089a4:	46bd      	mov	sp, r7
 80089a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089aa:	4770      	bx	lr
 80089ac:	080089b1 	.word	0x080089b1

080089b0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80089b0:	b480      	push	{r7}
 80089b2:	b085      	sub	sp, #20
 80089b4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80089b6:	2300      	movs	r3, #0
 80089b8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80089ba:	4b12      	ldr	r3, [pc, #72]	; (8008a04 <prvTaskExitError+0x54>)
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80089c2:	d00a      	beq.n	80089da <prvTaskExitError+0x2a>
	__asm volatile
 80089c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089c8:	f383 8811 	msr	BASEPRI, r3
 80089cc:	f3bf 8f6f 	isb	sy
 80089d0:	f3bf 8f4f 	dsb	sy
 80089d4:	60fb      	str	r3, [r7, #12]
}
 80089d6:	bf00      	nop
 80089d8:	e7fe      	b.n	80089d8 <prvTaskExitError+0x28>
	__asm volatile
 80089da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089de:	f383 8811 	msr	BASEPRI, r3
 80089e2:	f3bf 8f6f 	isb	sy
 80089e6:	f3bf 8f4f 	dsb	sy
 80089ea:	60bb      	str	r3, [r7, #8]
}
 80089ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80089ee:	bf00      	nop
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d0fc      	beq.n	80089f0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80089f6:	bf00      	nop
 80089f8:	bf00      	nop
 80089fa:	3714      	adds	r7, #20
 80089fc:	46bd      	mov	sp, r7
 80089fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a02:	4770      	bx	lr
 8008a04:	20000098 	.word	0x20000098
	...

08008a10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008a10:	4b07      	ldr	r3, [pc, #28]	; (8008a30 <pxCurrentTCBConst2>)
 8008a12:	6819      	ldr	r1, [r3, #0]
 8008a14:	6808      	ldr	r0, [r1, #0]
 8008a16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a1a:	f380 8809 	msr	PSP, r0
 8008a1e:	f3bf 8f6f 	isb	sy
 8008a22:	f04f 0000 	mov.w	r0, #0
 8008a26:	f380 8811 	msr	BASEPRI, r0
 8008a2a:	4770      	bx	lr
 8008a2c:	f3af 8000 	nop.w

08008a30 <pxCurrentTCBConst2>:
 8008a30:	200005ec 	.word	0x200005ec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008a34:	bf00      	nop
 8008a36:	bf00      	nop

08008a38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008a38:	4808      	ldr	r0, [pc, #32]	; (8008a5c <prvPortStartFirstTask+0x24>)
 8008a3a:	6800      	ldr	r0, [r0, #0]
 8008a3c:	6800      	ldr	r0, [r0, #0]
 8008a3e:	f380 8808 	msr	MSP, r0
 8008a42:	f04f 0000 	mov.w	r0, #0
 8008a46:	f380 8814 	msr	CONTROL, r0
 8008a4a:	b662      	cpsie	i
 8008a4c:	b661      	cpsie	f
 8008a4e:	f3bf 8f4f 	dsb	sy
 8008a52:	f3bf 8f6f 	isb	sy
 8008a56:	df00      	svc	0
 8008a58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008a5a:	bf00      	nop
 8008a5c:	e000ed08 	.word	0xe000ed08

08008a60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b086      	sub	sp, #24
 8008a64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008a66:	4b46      	ldr	r3, [pc, #280]	; (8008b80 <xPortStartScheduler+0x120>)
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	4a46      	ldr	r2, [pc, #280]	; (8008b84 <xPortStartScheduler+0x124>)
 8008a6c:	4293      	cmp	r3, r2
 8008a6e:	d10a      	bne.n	8008a86 <xPortStartScheduler+0x26>
	__asm volatile
 8008a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a74:	f383 8811 	msr	BASEPRI, r3
 8008a78:	f3bf 8f6f 	isb	sy
 8008a7c:	f3bf 8f4f 	dsb	sy
 8008a80:	613b      	str	r3, [r7, #16]
}
 8008a82:	bf00      	nop
 8008a84:	e7fe      	b.n	8008a84 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008a86:	4b3e      	ldr	r3, [pc, #248]	; (8008b80 <xPortStartScheduler+0x120>)
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	4a3f      	ldr	r2, [pc, #252]	; (8008b88 <xPortStartScheduler+0x128>)
 8008a8c:	4293      	cmp	r3, r2
 8008a8e:	d10a      	bne.n	8008aa6 <xPortStartScheduler+0x46>
	__asm volatile
 8008a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a94:	f383 8811 	msr	BASEPRI, r3
 8008a98:	f3bf 8f6f 	isb	sy
 8008a9c:	f3bf 8f4f 	dsb	sy
 8008aa0:	60fb      	str	r3, [r7, #12]
}
 8008aa2:	bf00      	nop
 8008aa4:	e7fe      	b.n	8008aa4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008aa6:	4b39      	ldr	r3, [pc, #228]	; (8008b8c <xPortStartScheduler+0x12c>)
 8008aa8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008aaa:	697b      	ldr	r3, [r7, #20]
 8008aac:	781b      	ldrb	r3, [r3, #0]
 8008aae:	b2db      	uxtb	r3, r3
 8008ab0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008ab2:	697b      	ldr	r3, [r7, #20]
 8008ab4:	22ff      	movs	r2, #255	; 0xff
 8008ab6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008ab8:	697b      	ldr	r3, [r7, #20]
 8008aba:	781b      	ldrb	r3, [r3, #0]
 8008abc:	b2db      	uxtb	r3, r3
 8008abe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008ac0:	78fb      	ldrb	r3, [r7, #3]
 8008ac2:	b2db      	uxtb	r3, r3
 8008ac4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008ac8:	b2da      	uxtb	r2, r3
 8008aca:	4b31      	ldr	r3, [pc, #196]	; (8008b90 <xPortStartScheduler+0x130>)
 8008acc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008ace:	4b31      	ldr	r3, [pc, #196]	; (8008b94 <xPortStartScheduler+0x134>)
 8008ad0:	2207      	movs	r2, #7
 8008ad2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008ad4:	e009      	b.n	8008aea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008ad6:	4b2f      	ldr	r3, [pc, #188]	; (8008b94 <xPortStartScheduler+0x134>)
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	3b01      	subs	r3, #1
 8008adc:	4a2d      	ldr	r2, [pc, #180]	; (8008b94 <xPortStartScheduler+0x134>)
 8008ade:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008ae0:	78fb      	ldrb	r3, [r7, #3]
 8008ae2:	b2db      	uxtb	r3, r3
 8008ae4:	005b      	lsls	r3, r3, #1
 8008ae6:	b2db      	uxtb	r3, r3
 8008ae8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008aea:	78fb      	ldrb	r3, [r7, #3]
 8008aec:	b2db      	uxtb	r3, r3
 8008aee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008af2:	2b80      	cmp	r3, #128	; 0x80
 8008af4:	d0ef      	beq.n	8008ad6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008af6:	4b27      	ldr	r3, [pc, #156]	; (8008b94 <xPortStartScheduler+0x134>)
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	f1c3 0307 	rsb	r3, r3, #7
 8008afe:	2b04      	cmp	r3, #4
 8008b00:	d00a      	beq.n	8008b18 <xPortStartScheduler+0xb8>
	__asm volatile
 8008b02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b06:	f383 8811 	msr	BASEPRI, r3
 8008b0a:	f3bf 8f6f 	isb	sy
 8008b0e:	f3bf 8f4f 	dsb	sy
 8008b12:	60bb      	str	r3, [r7, #8]
}
 8008b14:	bf00      	nop
 8008b16:	e7fe      	b.n	8008b16 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008b18:	4b1e      	ldr	r3, [pc, #120]	; (8008b94 <xPortStartScheduler+0x134>)
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	021b      	lsls	r3, r3, #8
 8008b1e:	4a1d      	ldr	r2, [pc, #116]	; (8008b94 <xPortStartScheduler+0x134>)
 8008b20:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008b22:	4b1c      	ldr	r3, [pc, #112]	; (8008b94 <xPortStartScheduler+0x134>)
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008b2a:	4a1a      	ldr	r2, [pc, #104]	; (8008b94 <xPortStartScheduler+0x134>)
 8008b2c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	b2da      	uxtb	r2, r3
 8008b32:	697b      	ldr	r3, [r7, #20]
 8008b34:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008b36:	4b18      	ldr	r3, [pc, #96]	; (8008b98 <xPortStartScheduler+0x138>)
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	4a17      	ldr	r2, [pc, #92]	; (8008b98 <xPortStartScheduler+0x138>)
 8008b3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008b40:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008b42:	4b15      	ldr	r3, [pc, #84]	; (8008b98 <xPortStartScheduler+0x138>)
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	4a14      	ldr	r2, [pc, #80]	; (8008b98 <xPortStartScheduler+0x138>)
 8008b48:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008b4c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008b4e:	f000 f8dd 	bl	8008d0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008b52:	4b12      	ldr	r3, [pc, #72]	; (8008b9c <xPortStartScheduler+0x13c>)
 8008b54:	2200      	movs	r2, #0
 8008b56:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008b58:	f000 f8fc 	bl	8008d54 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008b5c:	4b10      	ldr	r3, [pc, #64]	; (8008ba0 <xPortStartScheduler+0x140>)
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	4a0f      	ldr	r2, [pc, #60]	; (8008ba0 <xPortStartScheduler+0x140>)
 8008b62:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008b66:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008b68:	f7ff ff66 	bl	8008a38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008b6c:	f7ff fd4a 	bl	8008604 <vTaskSwitchContext>
	prvTaskExitError();
 8008b70:	f7ff ff1e 	bl	80089b0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008b74:	2300      	movs	r3, #0
}
 8008b76:	4618      	mov	r0, r3
 8008b78:	3718      	adds	r7, #24
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	bd80      	pop	{r7, pc}
 8008b7e:	bf00      	nop
 8008b80:	e000ed00 	.word	0xe000ed00
 8008b84:	410fc271 	.word	0x410fc271
 8008b88:	410fc270 	.word	0x410fc270
 8008b8c:	e000e400 	.word	0xe000e400
 8008b90:	20000718 	.word	0x20000718
 8008b94:	2000071c 	.word	0x2000071c
 8008b98:	e000ed20 	.word	0xe000ed20
 8008b9c:	20000098 	.word	0x20000098
 8008ba0:	e000ef34 	.word	0xe000ef34

08008ba4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008ba4:	b480      	push	{r7}
 8008ba6:	b083      	sub	sp, #12
 8008ba8:	af00      	add	r7, sp, #0
	__asm volatile
 8008baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bae:	f383 8811 	msr	BASEPRI, r3
 8008bb2:	f3bf 8f6f 	isb	sy
 8008bb6:	f3bf 8f4f 	dsb	sy
 8008bba:	607b      	str	r3, [r7, #4]
}
 8008bbc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008bbe:	4b0f      	ldr	r3, [pc, #60]	; (8008bfc <vPortEnterCritical+0x58>)
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	3301      	adds	r3, #1
 8008bc4:	4a0d      	ldr	r2, [pc, #52]	; (8008bfc <vPortEnterCritical+0x58>)
 8008bc6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008bc8:	4b0c      	ldr	r3, [pc, #48]	; (8008bfc <vPortEnterCritical+0x58>)
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	2b01      	cmp	r3, #1
 8008bce:	d10f      	bne.n	8008bf0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008bd0:	4b0b      	ldr	r3, [pc, #44]	; (8008c00 <vPortEnterCritical+0x5c>)
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	b2db      	uxtb	r3, r3
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d00a      	beq.n	8008bf0 <vPortEnterCritical+0x4c>
	__asm volatile
 8008bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bde:	f383 8811 	msr	BASEPRI, r3
 8008be2:	f3bf 8f6f 	isb	sy
 8008be6:	f3bf 8f4f 	dsb	sy
 8008bea:	603b      	str	r3, [r7, #0]
}
 8008bec:	bf00      	nop
 8008bee:	e7fe      	b.n	8008bee <vPortEnterCritical+0x4a>
	}
}
 8008bf0:	bf00      	nop
 8008bf2:	370c      	adds	r7, #12
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfa:	4770      	bx	lr
 8008bfc:	20000098 	.word	0x20000098
 8008c00:	e000ed04 	.word	0xe000ed04

08008c04 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008c04:	b480      	push	{r7}
 8008c06:	b083      	sub	sp, #12
 8008c08:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008c0a:	4b12      	ldr	r3, [pc, #72]	; (8008c54 <vPortExitCritical+0x50>)
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d10a      	bne.n	8008c28 <vPortExitCritical+0x24>
	__asm volatile
 8008c12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c16:	f383 8811 	msr	BASEPRI, r3
 8008c1a:	f3bf 8f6f 	isb	sy
 8008c1e:	f3bf 8f4f 	dsb	sy
 8008c22:	607b      	str	r3, [r7, #4]
}
 8008c24:	bf00      	nop
 8008c26:	e7fe      	b.n	8008c26 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008c28:	4b0a      	ldr	r3, [pc, #40]	; (8008c54 <vPortExitCritical+0x50>)
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	3b01      	subs	r3, #1
 8008c2e:	4a09      	ldr	r2, [pc, #36]	; (8008c54 <vPortExitCritical+0x50>)
 8008c30:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008c32:	4b08      	ldr	r3, [pc, #32]	; (8008c54 <vPortExitCritical+0x50>)
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d105      	bne.n	8008c46 <vPortExitCritical+0x42>
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008c3e:	683b      	ldr	r3, [r7, #0]
 8008c40:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008c44:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008c46:	bf00      	nop
 8008c48:	370c      	adds	r7, #12
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c50:	4770      	bx	lr
 8008c52:	bf00      	nop
 8008c54:	20000098 	.word	0x20000098
	...

08008c60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008c60:	f3ef 8009 	mrs	r0, PSP
 8008c64:	f3bf 8f6f 	isb	sy
 8008c68:	4b15      	ldr	r3, [pc, #84]	; (8008cc0 <pxCurrentTCBConst>)
 8008c6a:	681a      	ldr	r2, [r3, #0]
 8008c6c:	f01e 0f10 	tst.w	lr, #16
 8008c70:	bf08      	it	eq
 8008c72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008c76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c7a:	6010      	str	r0, [r2, #0]
 8008c7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008c80:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008c84:	f380 8811 	msr	BASEPRI, r0
 8008c88:	f3bf 8f4f 	dsb	sy
 8008c8c:	f3bf 8f6f 	isb	sy
 8008c90:	f7ff fcb8 	bl	8008604 <vTaskSwitchContext>
 8008c94:	f04f 0000 	mov.w	r0, #0
 8008c98:	f380 8811 	msr	BASEPRI, r0
 8008c9c:	bc09      	pop	{r0, r3}
 8008c9e:	6819      	ldr	r1, [r3, #0]
 8008ca0:	6808      	ldr	r0, [r1, #0]
 8008ca2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ca6:	f01e 0f10 	tst.w	lr, #16
 8008caa:	bf08      	it	eq
 8008cac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008cb0:	f380 8809 	msr	PSP, r0
 8008cb4:	f3bf 8f6f 	isb	sy
 8008cb8:	4770      	bx	lr
 8008cba:	bf00      	nop
 8008cbc:	f3af 8000 	nop.w

08008cc0 <pxCurrentTCBConst>:
 8008cc0:	200005ec 	.word	0x200005ec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008cc4:	bf00      	nop
 8008cc6:	bf00      	nop

08008cc8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b082      	sub	sp, #8
 8008ccc:	af00      	add	r7, sp, #0
	__asm volatile
 8008cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cd2:	f383 8811 	msr	BASEPRI, r3
 8008cd6:	f3bf 8f6f 	isb	sy
 8008cda:	f3bf 8f4f 	dsb	sy
 8008cde:	607b      	str	r3, [r7, #4]
}
 8008ce0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008ce2:	f7ff fbd7 	bl	8008494 <xTaskIncrementTick>
 8008ce6:	4603      	mov	r3, r0
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d003      	beq.n	8008cf4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008cec:	4b06      	ldr	r3, [pc, #24]	; (8008d08 <SysTick_Handler+0x40>)
 8008cee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008cf2:	601a      	str	r2, [r3, #0]
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008cf8:	683b      	ldr	r3, [r7, #0]
 8008cfa:	f383 8811 	msr	BASEPRI, r3
}
 8008cfe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008d00:	bf00      	nop
 8008d02:	3708      	adds	r7, #8
 8008d04:	46bd      	mov	sp, r7
 8008d06:	bd80      	pop	{r7, pc}
 8008d08:	e000ed04 	.word	0xe000ed04

08008d0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008d0c:	b480      	push	{r7}
 8008d0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008d10:	4b0b      	ldr	r3, [pc, #44]	; (8008d40 <vPortSetupTimerInterrupt+0x34>)
 8008d12:	2200      	movs	r2, #0
 8008d14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008d16:	4b0b      	ldr	r3, [pc, #44]	; (8008d44 <vPortSetupTimerInterrupt+0x38>)
 8008d18:	2200      	movs	r2, #0
 8008d1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008d1c:	4b0a      	ldr	r3, [pc, #40]	; (8008d48 <vPortSetupTimerInterrupt+0x3c>)
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	4a0a      	ldr	r2, [pc, #40]	; (8008d4c <vPortSetupTimerInterrupt+0x40>)
 8008d22:	fba2 2303 	umull	r2, r3, r2, r3
 8008d26:	099b      	lsrs	r3, r3, #6
 8008d28:	4a09      	ldr	r2, [pc, #36]	; (8008d50 <vPortSetupTimerInterrupt+0x44>)
 8008d2a:	3b01      	subs	r3, #1
 8008d2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008d2e:	4b04      	ldr	r3, [pc, #16]	; (8008d40 <vPortSetupTimerInterrupt+0x34>)
 8008d30:	2207      	movs	r2, #7
 8008d32:	601a      	str	r2, [r3, #0]
}
 8008d34:	bf00      	nop
 8008d36:	46bd      	mov	sp, r7
 8008d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3c:	4770      	bx	lr
 8008d3e:	bf00      	nop
 8008d40:	e000e010 	.word	0xe000e010
 8008d44:	e000e018 	.word	0xe000e018
 8008d48:	20000000 	.word	0x20000000
 8008d4c:	10624dd3 	.word	0x10624dd3
 8008d50:	e000e014 	.word	0xe000e014

08008d54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008d54:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008d64 <vPortEnableVFP+0x10>
 8008d58:	6801      	ldr	r1, [r0, #0]
 8008d5a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008d5e:	6001      	str	r1, [r0, #0]
 8008d60:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008d62:	bf00      	nop
 8008d64:	e000ed88 	.word	0xe000ed88

08008d68 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	b08a      	sub	sp, #40	; 0x28
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008d70:	2300      	movs	r3, #0
 8008d72:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008d74:	f7ff fae4 	bl	8008340 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008d78:	4b5b      	ldr	r3, [pc, #364]	; (8008ee8 <pvPortMalloc+0x180>)
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d101      	bne.n	8008d84 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008d80:	f000 f920 	bl	8008fc4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008d84:	4b59      	ldr	r3, [pc, #356]	; (8008eec <pvPortMalloc+0x184>)
 8008d86:	681a      	ldr	r2, [r3, #0]
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	4013      	ands	r3, r2
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	f040 8093 	bne.w	8008eb8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d01d      	beq.n	8008dd4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008d98:	2208      	movs	r2, #8
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	4413      	add	r3, r2
 8008d9e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	f003 0307 	and.w	r3, r3, #7
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d014      	beq.n	8008dd4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	f023 0307 	bic.w	r3, r3, #7
 8008db0:	3308      	adds	r3, #8
 8008db2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	f003 0307 	and.w	r3, r3, #7
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d00a      	beq.n	8008dd4 <pvPortMalloc+0x6c>
	__asm volatile
 8008dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dc2:	f383 8811 	msr	BASEPRI, r3
 8008dc6:	f3bf 8f6f 	isb	sy
 8008dca:	f3bf 8f4f 	dsb	sy
 8008dce:	617b      	str	r3, [r7, #20]
}
 8008dd0:	bf00      	nop
 8008dd2:	e7fe      	b.n	8008dd2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d06e      	beq.n	8008eb8 <pvPortMalloc+0x150>
 8008dda:	4b45      	ldr	r3, [pc, #276]	; (8008ef0 <pvPortMalloc+0x188>)
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	687a      	ldr	r2, [r7, #4]
 8008de0:	429a      	cmp	r2, r3
 8008de2:	d869      	bhi.n	8008eb8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008de4:	4b43      	ldr	r3, [pc, #268]	; (8008ef4 <pvPortMalloc+0x18c>)
 8008de6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008de8:	4b42      	ldr	r3, [pc, #264]	; (8008ef4 <pvPortMalloc+0x18c>)
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008dee:	e004      	b.n	8008dfa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008df2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dfc:	685b      	ldr	r3, [r3, #4]
 8008dfe:	687a      	ldr	r2, [r7, #4]
 8008e00:	429a      	cmp	r2, r3
 8008e02:	d903      	bls.n	8008e0c <pvPortMalloc+0xa4>
 8008e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d1f1      	bne.n	8008df0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008e0c:	4b36      	ldr	r3, [pc, #216]	; (8008ee8 <pvPortMalloc+0x180>)
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e12:	429a      	cmp	r2, r3
 8008e14:	d050      	beq.n	8008eb8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008e16:	6a3b      	ldr	r3, [r7, #32]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	2208      	movs	r2, #8
 8008e1c:	4413      	add	r3, r2
 8008e1e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e22:	681a      	ldr	r2, [r3, #0]
 8008e24:	6a3b      	ldr	r3, [r7, #32]
 8008e26:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e2a:	685a      	ldr	r2, [r3, #4]
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	1ad2      	subs	r2, r2, r3
 8008e30:	2308      	movs	r3, #8
 8008e32:	005b      	lsls	r3, r3, #1
 8008e34:	429a      	cmp	r2, r3
 8008e36:	d91f      	bls.n	8008e78 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008e38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	4413      	add	r3, r2
 8008e3e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008e40:	69bb      	ldr	r3, [r7, #24]
 8008e42:	f003 0307 	and.w	r3, r3, #7
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d00a      	beq.n	8008e60 <pvPortMalloc+0xf8>
	__asm volatile
 8008e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e4e:	f383 8811 	msr	BASEPRI, r3
 8008e52:	f3bf 8f6f 	isb	sy
 8008e56:	f3bf 8f4f 	dsb	sy
 8008e5a:	613b      	str	r3, [r7, #16]
}
 8008e5c:	bf00      	nop
 8008e5e:	e7fe      	b.n	8008e5e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e62:	685a      	ldr	r2, [r3, #4]
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	1ad2      	subs	r2, r2, r3
 8008e68:	69bb      	ldr	r3, [r7, #24]
 8008e6a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e6e:	687a      	ldr	r2, [r7, #4]
 8008e70:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008e72:	69b8      	ldr	r0, [r7, #24]
 8008e74:	f000 f908 	bl	8009088 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008e78:	4b1d      	ldr	r3, [pc, #116]	; (8008ef0 <pvPortMalloc+0x188>)
 8008e7a:	681a      	ldr	r2, [r3, #0]
 8008e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e7e:	685b      	ldr	r3, [r3, #4]
 8008e80:	1ad3      	subs	r3, r2, r3
 8008e82:	4a1b      	ldr	r2, [pc, #108]	; (8008ef0 <pvPortMalloc+0x188>)
 8008e84:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008e86:	4b1a      	ldr	r3, [pc, #104]	; (8008ef0 <pvPortMalloc+0x188>)
 8008e88:	681a      	ldr	r2, [r3, #0]
 8008e8a:	4b1b      	ldr	r3, [pc, #108]	; (8008ef8 <pvPortMalloc+0x190>)
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	429a      	cmp	r2, r3
 8008e90:	d203      	bcs.n	8008e9a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008e92:	4b17      	ldr	r3, [pc, #92]	; (8008ef0 <pvPortMalloc+0x188>)
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	4a18      	ldr	r2, [pc, #96]	; (8008ef8 <pvPortMalloc+0x190>)
 8008e98:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e9c:	685a      	ldr	r2, [r3, #4]
 8008e9e:	4b13      	ldr	r3, [pc, #76]	; (8008eec <pvPortMalloc+0x184>)
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	431a      	orrs	r2, r3
 8008ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ea6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eaa:	2200      	movs	r2, #0
 8008eac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008eae:	4b13      	ldr	r3, [pc, #76]	; (8008efc <pvPortMalloc+0x194>)
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	3301      	adds	r3, #1
 8008eb4:	4a11      	ldr	r2, [pc, #68]	; (8008efc <pvPortMalloc+0x194>)
 8008eb6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008eb8:	f7ff fa50 	bl	800835c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008ebc:	69fb      	ldr	r3, [r7, #28]
 8008ebe:	f003 0307 	and.w	r3, r3, #7
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d00a      	beq.n	8008edc <pvPortMalloc+0x174>
	__asm volatile
 8008ec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eca:	f383 8811 	msr	BASEPRI, r3
 8008ece:	f3bf 8f6f 	isb	sy
 8008ed2:	f3bf 8f4f 	dsb	sy
 8008ed6:	60fb      	str	r3, [r7, #12]
}
 8008ed8:	bf00      	nop
 8008eda:	e7fe      	b.n	8008eda <pvPortMalloc+0x172>
	return pvReturn;
 8008edc:	69fb      	ldr	r3, [r7, #28]
}
 8008ede:	4618      	mov	r0, r3
 8008ee0:	3728      	adds	r7, #40	; 0x28
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	bd80      	pop	{r7, pc}
 8008ee6:	bf00      	nop
 8008ee8:	20004328 	.word	0x20004328
 8008eec:	2000433c 	.word	0x2000433c
 8008ef0:	2000432c 	.word	0x2000432c
 8008ef4:	20004320 	.word	0x20004320
 8008ef8:	20004330 	.word	0x20004330
 8008efc:	20004334 	.word	0x20004334

08008f00 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b086      	sub	sp, #24
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d04d      	beq.n	8008fae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008f12:	2308      	movs	r3, #8
 8008f14:	425b      	negs	r3, r3
 8008f16:	697a      	ldr	r2, [r7, #20]
 8008f18:	4413      	add	r3, r2
 8008f1a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008f1c:	697b      	ldr	r3, [r7, #20]
 8008f1e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008f20:	693b      	ldr	r3, [r7, #16]
 8008f22:	685a      	ldr	r2, [r3, #4]
 8008f24:	4b24      	ldr	r3, [pc, #144]	; (8008fb8 <vPortFree+0xb8>)
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	4013      	ands	r3, r2
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d10a      	bne.n	8008f44 <vPortFree+0x44>
	__asm volatile
 8008f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f32:	f383 8811 	msr	BASEPRI, r3
 8008f36:	f3bf 8f6f 	isb	sy
 8008f3a:	f3bf 8f4f 	dsb	sy
 8008f3e:	60fb      	str	r3, [r7, #12]
}
 8008f40:	bf00      	nop
 8008f42:	e7fe      	b.n	8008f42 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008f44:	693b      	ldr	r3, [r7, #16]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d00a      	beq.n	8008f62 <vPortFree+0x62>
	__asm volatile
 8008f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f50:	f383 8811 	msr	BASEPRI, r3
 8008f54:	f3bf 8f6f 	isb	sy
 8008f58:	f3bf 8f4f 	dsb	sy
 8008f5c:	60bb      	str	r3, [r7, #8]
}
 8008f5e:	bf00      	nop
 8008f60:	e7fe      	b.n	8008f60 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008f62:	693b      	ldr	r3, [r7, #16]
 8008f64:	685a      	ldr	r2, [r3, #4]
 8008f66:	4b14      	ldr	r3, [pc, #80]	; (8008fb8 <vPortFree+0xb8>)
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	4013      	ands	r3, r2
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d01e      	beq.n	8008fae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008f70:	693b      	ldr	r3, [r7, #16]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d11a      	bne.n	8008fae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008f78:	693b      	ldr	r3, [r7, #16]
 8008f7a:	685a      	ldr	r2, [r3, #4]
 8008f7c:	4b0e      	ldr	r3, [pc, #56]	; (8008fb8 <vPortFree+0xb8>)
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	43db      	mvns	r3, r3
 8008f82:	401a      	ands	r2, r3
 8008f84:	693b      	ldr	r3, [r7, #16]
 8008f86:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008f88:	f7ff f9da 	bl	8008340 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008f8c:	693b      	ldr	r3, [r7, #16]
 8008f8e:	685a      	ldr	r2, [r3, #4]
 8008f90:	4b0a      	ldr	r3, [pc, #40]	; (8008fbc <vPortFree+0xbc>)
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	4413      	add	r3, r2
 8008f96:	4a09      	ldr	r2, [pc, #36]	; (8008fbc <vPortFree+0xbc>)
 8008f98:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008f9a:	6938      	ldr	r0, [r7, #16]
 8008f9c:	f000 f874 	bl	8009088 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008fa0:	4b07      	ldr	r3, [pc, #28]	; (8008fc0 <vPortFree+0xc0>)
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	3301      	adds	r3, #1
 8008fa6:	4a06      	ldr	r2, [pc, #24]	; (8008fc0 <vPortFree+0xc0>)
 8008fa8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008faa:	f7ff f9d7 	bl	800835c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008fae:	bf00      	nop
 8008fb0:	3718      	adds	r7, #24
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	bd80      	pop	{r7, pc}
 8008fb6:	bf00      	nop
 8008fb8:	2000433c 	.word	0x2000433c
 8008fbc:	2000432c 	.word	0x2000432c
 8008fc0:	20004338 	.word	0x20004338

08008fc4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008fc4:	b480      	push	{r7}
 8008fc6:	b085      	sub	sp, #20
 8008fc8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008fca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008fce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008fd0:	4b27      	ldr	r3, [pc, #156]	; (8009070 <prvHeapInit+0xac>)
 8008fd2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	f003 0307 	and.w	r3, r3, #7
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d00c      	beq.n	8008ff8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	3307      	adds	r3, #7
 8008fe2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	f023 0307 	bic.w	r3, r3, #7
 8008fea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008fec:	68ba      	ldr	r2, [r7, #8]
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	1ad3      	subs	r3, r2, r3
 8008ff2:	4a1f      	ldr	r2, [pc, #124]	; (8009070 <prvHeapInit+0xac>)
 8008ff4:	4413      	add	r3, r2
 8008ff6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008ffc:	4a1d      	ldr	r2, [pc, #116]	; (8009074 <prvHeapInit+0xb0>)
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009002:	4b1c      	ldr	r3, [pc, #112]	; (8009074 <prvHeapInit+0xb0>)
 8009004:	2200      	movs	r2, #0
 8009006:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	68ba      	ldr	r2, [r7, #8]
 800900c:	4413      	add	r3, r2
 800900e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009010:	2208      	movs	r2, #8
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	1a9b      	subs	r3, r3, r2
 8009016:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	f023 0307 	bic.w	r3, r3, #7
 800901e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	4a15      	ldr	r2, [pc, #84]	; (8009078 <prvHeapInit+0xb4>)
 8009024:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009026:	4b14      	ldr	r3, [pc, #80]	; (8009078 <prvHeapInit+0xb4>)
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	2200      	movs	r2, #0
 800902c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800902e:	4b12      	ldr	r3, [pc, #72]	; (8009078 <prvHeapInit+0xb4>)
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	2200      	movs	r2, #0
 8009034:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800903a:	683b      	ldr	r3, [r7, #0]
 800903c:	68fa      	ldr	r2, [r7, #12]
 800903e:	1ad2      	subs	r2, r2, r3
 8009040:	683b      	ldr	r3, [r7, #0]
 8009042:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009044:	4b0c      	ldr	r3, [pc, #48]	; (8009078 <prvHeapInit+0xb4>)
 8009046:	681a      	ldr	r2, [r3, #0]
 8009048:	683b      	ldr	r3, [r7, #0]
 800904a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800904c:	683b      	ldr	r3, [r7, #0]
 800904e:	685b      	ldr	r3, [r3, #4]
 8009050:	4a0a      	ldr	r2, [pc, #40]	; (800907c <prvHeapInit+0xb8>)
 8009052:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009054:	683b      	ldr	r3, [r7, #0]
 8009056:	685b      	ldr	r3, [r3, #4]
 8009058:	4a09      	ldr	r2, [pc, #36]	; (8009080 <prvHeapInit+0xbc>)
 800905a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800905c:	4b09      	ldr	r3, [pc, #36]	; (8009084 <prvHeapInit+0xc0>)
 800905e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009062:	601a      	str	r2, [r3, #0]
}
 8009064:	bf00      	nop
 8009066:	3714      	adds	r7, #20
 8009068:	46bd      	mov	sp, r7
 800906a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906e:	4770      	bx	lr
 8009070:	20000720 	.word	0x20000720
 8009074:	20004320 	.word	0x20004320
 8009078:	20004328 	.word	0x20004328
 800907c:	20004330 	.word	0x20004330
 8009080:	2000432c 	.word	0x2000432c
 8009084:	2000433c 	.word	0x2000433c

08009088 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009088:	b480      	push	{r7}
 800908a:	b085      	sub	sp, #20
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009090:	4b28      	ldr	r3, [pc, #160]	; (8009134 <prvInsertBlockIntoFreeList+0xac>)
 8009092:	60fb      	str	r3, [r7, #12]
 8009094:	e002      	b.n	800909c <prvInsertBlockIntoFreeList+0x14>
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	60fb      	str	r3, [r7, #12]
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	687a      	ldr	r2, [r7, #4]
 80090a2:	429a      	cmp	r2, r3
 80090a4:	d8f7      	bhi.n	8009096 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	685b      	ldr	r3, [r3, #4]
 80090ae:	68ba      	ldr	r2, [r7, #8]
 80090b0:	4413      	add	r3, r2
 80090b2:	687a      	ldr	r2, [r7, #4]
 80090b4:	429a      	cmp	r2, r3
 80090b6:	d108      	bne.n	80090ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	685a      	ldr	r2, [r3, #4]
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	685b      	ldr	r3, [r3, #4]
 80090c0:	441a      	add	r2, r3
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	685b      	ldr	r3, [r3, #4]
 80090d2:	68ba      	ldr	r2, [r7, #8]
 80090d4:	441a      	add	r2, r3
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	429a      	cmp	r2, r3
 80090dc:	d118      	bne.n	8009110 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	681a      	ldr	r2, [r3, #0]
 80090e2:	4b15      	ldr	r3, [pc, #84]	; (8009138 <prvInsertBlockIntoFreeList+0xb0>)
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	429a      	cmp	r2, r3
 80090e8:	d00d      	beq.n	8009106 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	685a      	ldr	r2, [r3, #4]
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	685b      	ldr	r3, [r3, #4]
 80090f4:	441a      	add	r2, r3
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	681a      	ldr	r2, [r3, #0]
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	601a      	str	r2, [r3, #0]
 8009104:	e008      	b.n	8009118 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009106:	4b0c      	ldr	r3, [pc, #48]	; (8009138 <prvInsertBlockIntoFreeList+0xb0>)
 8009108:	681a      	ldr	r2, [r3, #0]
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	601a      	str	r2, [r3, #0]
 800910e:	e003      	b.n	8009118 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	681a      	ldr	r2, [r3, #0]
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009118:	68fa      	ldr	r2, [r7, #12]
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	429a      	cmp	r2, r3
 800911e:	d002      	beq.n	8009126 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	687a      	ldr	r2, [r7, #4]
 8009124:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009126:	bf00      	nop
 8009128:	3714      	adds	r7, #20
 800912a:	46bd      	mov	sp, r7
 800912c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009130:	4770      	bx	lr
 8009132:	bf00      	nop
 8009134:	20004320 	.word	0x20004320
 8009138:	20004328 	.word	0x20004328

0800913c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800913c:	b580      	push	{r7, lr}
 800913e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009140:	2200      	movs	r2, #0
 8009142:	4912      	ldr	r1, [pc, #72]	; (800918c <MX_USB_DEVICE_Init+0x50>)
 8009144:	4812      	ldr	r0, [pc, #72]	; (8009190 <MX_USB_DEVICE_Init+0x54>)
 8009146:	f7fd fa87 	bl	8006658 <USBD_Init>
 800914a:	4603      	mov	r3, r0
 800914c:	2b00      	cmp	r3, #0
 800914e:	d001      	beq.n	8009154 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009150:	f7f7 fc5c 	bl	8000a0c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009154:	490f      	ldr	r1, [pc, #60]	; (8009194 <MX_USB_DEVICE_Init+0x58>)
 8009156:	480e      	ldr	r0, [pc, #56]	; (8009190 <MX_USB_DEVICE_Init+0x54>)
 8009158:	f7fd faae 	bl	80066b8 <USBD_RegisterClass>
 800915c:	4603      	mov	r3, r0
 800915e:	2b00      	cmp	r3, #0
 8009160:	d001      	beq.n	8009166 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009162:	f7f7 fc53 	bl	8000a0c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009166:	490c      	ldr	r1, [pc, #48]	; (8009198 <MX_USB_DEVICE_Init+0x5c>)
 8009168:	4809      	ldr	r0, [pc, #36]	; (8009190 <MX_USB_DEVICE_Init+0x54>)
 800916a:	f7fd f9e5 	bl	8006538 <USBD_CDC_RegisterInterface>
 800916e:	4603      	mov	r3, r0
 8009170:	2b00      	cmp	r3, #0
 8009172:	d001      	beq.n	8009178 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009174:	f7f7 fc4a 	bl	8000a0c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009178:	4805      	ldr	r0, [pc, #20]	; (8009190 <MX_USB_DEVICE_Init+0x54>)
 800917a:	f7fd fad3 	bl	8006724 <USBD_Start>
 800917e:	4603      	mov	r3, r0
 8009180:	2b00      	cmp	r3, #0
 8009182:	d001      	beq.n	8009188 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009184:	f7f7 fc42 	bl	8000a0c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009188:	bf00      	nop
 800918a:	bd80      	pop	{r7, pc}
 800918c:	200000b0 	.word	0x200000b0
 8009190:	20004340 	.word	0x20004340
 8009194:	20000018 	.word	0x20000018
 8009198:	2000009c 	.word	0x2000009c

0800919c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800919c:	b580      	push	{r7, lr}
 800919e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80091a0:	2200      	movs	r2, #0
 80091a2:	4905      	ldr	r1, [pc, #20]	; (80091b8 <CDC_Init_FS+0x1c>)
 80091a4:	4805      	ldr	r0, [pc, #20]	; (80091bc <CDC_Init_FS+0x20>)
 80091a6:	f7fd f9e1 	bl	800656c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80091aa:	4905      	ldr	r1, [pc, #20]	; (80091c0 <CDC_Init_FS+0x24>)
 80091ac:	4803      	ldr	r0, [pc, #12]	; (80091bc <CDC_Init_FS+0x20>)
 80091ae:	f7fd f9ff 	bl	80065b0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80091b2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80091b4:	4618      	mov	r0, r3
 80091b6:	bd80      	pop	{r7, pc}
 80091b8:	20004e1c 	.word	0x20004e1c
 80091bc:	20004340 	.word	0x20004340
 80091c0:	2000461c 	.word	0x2000461c

080091c4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80091c4:	b480      	push	{r7}
 80091c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80091c8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80091ca:	4618      	mov	r0, r3
 80091cc:	46bd      	mov	sp, r7
 80091ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d2:	4770      	bx	lr

080091d4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80091d4:	b480      	push	{r7}
 80091d6:	b083      	sub	sp, #12
 80091d8:	af00      	add	r7, sp, #0
 80091da:	4603      	mov	r3, r0
 80091dc:	6039      	str	r1, [r7, #0]
 80091de:	71fb      	strb	r3, [r7, #7]
 80091e0:	4613      	mov	r3, r2
 80091e2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80091e4:	79fb      	ldrb	r3, [r7, #7]
 80091e6:	2b23      	cmp	r3, #35	; 0x23
 80091e8:	d84a      	bhi.n	8009280 <CDC_Control_FS+0xac>
 80091ea:	a201      	add	r2, pc, #4	; (adr r2, 80091f0 <CDC_Control_FS+0x1c>)
 80091ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091f0:	08009281 	.word	0x08009281
 80091f4:	08009281 	.word	0x08009281
 80091f8:	08009281 	.word	0x08009281
 80091fc:	08009281 	.word	0x08009281
 8009200:	08009281 	.word	0x08009281
 8009204:	08009281 	.word	0x08009281
 8009208:	08009281 	.word	0x08009281
 800920c:	08009281 	.word	0x08009281
 8009210:	08009281 	.word	0x08009281
 8009214:	08009281 	.word	0x08009281
 8009218:	08009281 	.word	0x08009281
 800921c:	08009281 	.word	0x08009281
 8009220:	08009281 	.word	0x08009281
 8009224:	08009281 	.word	0x08009281
 8009228:	08009281 	.word	0x08009281
 800922c:	08009281 	.word	0x08009281
 8009230:	08009281 	.word	0x08009281
 8009234:	08009281 	.word	0x08009281
 8009238:	08009281 	.word	0x08009281
 800923c:	08009281 	.word	0x08009281
 8009240:	08009281 	.word	0x08009281
 8009244:	08009281 	.word	0x08009281
 8009248:	08009281 	.word	0x08009281
 800924c:	08009281 	.word	0x08009281
 8009250:	08009281 	.word	0x08009281
 8009254:	08009281 	.word	0x08009281
 8009258:	08009281 	.word	0x08009281
 800925c:	08009281 	.word	0x08009281
 8009260:	08009281 	.word	0x08009281
 8009264:	08009281 	.word	0x08009281
 8009268:	08009281 	.word	0x08009281
 800926c:	08009281 	.word	0x08009281
 8009270:	08009281 	.word	0x08009281
 8009274:	08009281 	.word	0x08009281
 8009278:	08009281 	.word	0x08009281
 800927c:	08009281 	.word	0x08009281
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009280:	bf00      	nop
  }

  return (USBD_OK);
 8009282:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009284:	4618      	mov	r0, r3
 8009286:	370c      	adds	r7, #12
 8009288:	46bd      	mov	sp, r7
 800928a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928e:	4770      	bx	lr

08009290 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009290:	b580      	push	{r7, lr}
 8009292:	b082      	sub	sp, #8
 8009294:	af00      	add	r7, sp, #0
 8009296:	6078      	str	r0, [r7, #4]
 8009298:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800929a:	6879      	ldr	r1, [r7, #4]
 800929c:	4805      	ldr	r0, [pc, #20]	; (80092b4 <CDC_Receive_FS+0x24>)
 800929e:	f7fd f987 	bl	80065b0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80092a2:	4804      	ldr	r0, [pc, #16]	; (80092b4 <CDC_Receive_FS+0x24>)
 80092a4:	f7fd f9a2 	bl	80065ec <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80092a8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80092aa:	4618      	mov	r0, r3
 80092ac:	3708      	adds	r7, #8
 80092ae:	46bd      	mov	sp, r7
 80092b0:	bd80      	pop	{r7, pc}
 80092b2:	bf00      	nop
 80092b4:	20004340 	.word	0x20004340

080092b8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80092b8:	b480      	push	{r7}
 80092ba:	b087      	sub	sp, #28
 80092bc:	af00      	add	r7, sp, #0
 80092be:	60f8      	str	r0, [r7, #12]
 80092c0:	60b9      	str	r1, [r7, #8]
 80092c2:	4613      	mov	r3, r2
 80092c4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80092c6:	2300      	movs	r3, #0
 80092c8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80092ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80092ce:	4618      	mov	r0, r3
 80092d0:	371c      	adds	r7, #28
 80092d2:	46bd      	mov	sp, r7
 80092d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d8:	4770      	bx	lr
	...

080092dc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80092dc:	b480      	push	{r7}
 80092de:	b083      	sub	sp, #12
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	4603      	mov	r3, r0
 80092e4:	6039      	str	r1, [r7, #0]
 80092e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80092e8:	683b      	ldr	r3, [r7, #0]
 80092ea:	2212      	movs	r2, #18
 80092ec:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80092ee:	4b03      	ldr	r3, [pc, #12]	; (80092fc <USBD_FS_DeviceDescriptor+0x20>)
}
 80092f0:	4618      	mov	r0, r3
 80092f2:	370c      	adds	r7, #12
 80092f4:	46bd      	mov	sp, r7
 80092f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fa:	4770      	bx	lr
 80092fc:	200000cc 	.word	0x200000cc

08009300 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009300:	b480      	push	{r7}
 8009302:	b083      	sub	sp, #12
 8009304:	af00      	add	r7, sp, #0
 8009306:	4603      	mov	r3, r0
 8009308:	6039      	str	r1, [r7, #0]
 800930a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800930c:	683b      	ldr	r3, [r7, #0]
 800930e:	2204      	movs	r2, #4
 8009310:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009312:	4b03      	ldr	r3, [pc, #12]	; (8009320 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009314:	4618      	mov	r0, r3
 8009316:	370c      	adds	r7, #12
 8009318:	46bd      	mov	sp, r7
 800931a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931e:	4770      	bx	lr
 8009320:	200000e0 	.word	0x200000e0

08009324 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009324:	b580      	push	{r7, lr}
 8009326:	b082      	sub	sp, #8
 8009328:	af00      	add	r7, sp, #0
 800932a:	4603      	mov	r3, r0
 800932c:	6039      	str	r1, [r7, #0]
 800932e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009330:	79fb      	ldrb	r3, [r7, #7]
 8009332:	2b00      	cmp	r3, #0
 8009334:	d105      	bne.n	8009342 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009336:	683a      	ldr	r2, [r7, #0]
 8009338:	4907      	ldr	r1, [pc, #28]	; (8009358 <USBD_FS_ProductStrDescriptor+0x34>)
 800933a:	4808      	ldr	r0, [pc, #32]	; (800935c <USBD_FS_ProductStrDescriptor+0x38>)
 800933c:	f7fe fba4 	bl	8007a88 <USBD_GetString>
 8009340:	e004      	b.n	800934c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009342:	683a      	ldr	r2, [r7, #0]
 8009344:	4904      	ldr	r1, [pc, #16]	; (8009358 <USBD_FS_ProductStrDescriptor+0x34>)
 8009346:	4805      	ldr	r0, [pc, #20]	; (800935c <USBD_FS_ProductStrDescriptor+0x38>)
 8009348:	f7fe fb9e 	bl	8007a88 <USBD_GetString>
  }
  return USBD_StrDesc;
 800934c:	4b02      	ldr	r3, [pc, #8]	; (8009358 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800934e:	4618      	mov	r0, r3
 8009350:	3708      	adds	r7, #8
 8009352:	46bd      	mov	sp, r7
 8009354:	bd80      	pop	{r7, pc}
 8009356:	bf00      	nop
 8009358:	2000561c 	.word	0x2000561c
 800935c:	08009d4c 	.word	0x08009d4c

08009360 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009360:	b580      	push	{r7, lr}
 8009362:	b082      	sub	sp, #8
 8009364:	af00      	add	r7, sp, #0
 8009366:	4603      	mov	r3, r0
 8009368:	6039      	str	r1, [r7, #0]
 800936a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800936c:	683a      	ldr	r2, [r7, #0]
 800936e:	4904      	ldr	r1, [pc, #16]	; (8009380 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009370:	4804      	ldr	r0, [pc, #16]	; (8009384 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009372:	f7fe fb89 	bl	8007a88 <USBD_GetString>
  return USBD_StrDesc;
 8009376:	4b02      	ldr	r3, [pc, #8]	; (8009380 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009378:	4618      	mov	r0, r3
 800937a:	3708      	adds	r7, #8
 800937c:	46bd      	mov	sp, r7
 800937e:	bd80      	pop	{r7, pc}
 8009380:	2000561c 	.word	0x2000561c
 8009384:	08009d64 	.word	0x08009d64

08009388 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009388:	b580      	push	{r7, lr}
 800938a:	b082      	sub	sp, #8
 800938c:	af00      	add	r7, sp, #0
 800938e:	4603      	mov	r3, r0
 8009390:	6039      	str	r1, [r7, #0]
 8009392:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009394:	683b      	ldr	r3, [r7, #0]
 8009396:	221a      	movs	r2, #26
 8009398:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800939a:	f000 f843 	bl	8009424 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800939e:	4b02      	ldr	r3, [pc, #8]	; (80093a8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80093a0:	4618      	mov	r0, r3
 80093a2:	3708      	adds	r7, #8
 80093a4:	46bd      	mov	sp, r7
 80093a6:	bd80      	pop	{r7, pc}
 80093a8:	200000e4 	.word	0x200000e4

080093ac <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80093ac:	b580      	push	{r7, lr}
 80093ae:	b082      	sub	sp, #8
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	4603      	mov	r3, r0
 80093b4:	6039      	str	r1, [r7, #0]
 80093b6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80093b8:	79fb      	ldrb	r3, [r7, #7]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d105      	bne.n	80093ca <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80093be:	683a      	ldr	r2, [r7, #0]
 80093c0:	4907      	ldr	r1, [pc, #28]	; (80093e0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80093c2:	4808      	ldr	r0, [pc, #32]	; (80093e4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80093c4:	f7fe fb60 	bl	8007a88 <USBD_GetString>
 80093c8:	e004      	b.n	80093d4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80093ca:	683a      	ldr	r2, [r7, #0]
 80093cc:	4904      	ldr	r1, [pc, #16]	; (80093e0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80093ce:	4805      	ldr	r0, [pc, #20]	; (80093e4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80093d0:	f7fe fb5a 	bl	8007a88 <USBD_GetString>
  }
  return USBD_StrDesc;
 80093d4:	4b02      	ldr	r3, [pc, #8]	; (80093e0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80093d6:	4618      	mov	r0, r3
 80093d8:	3708      	adds	r7, #8
 80093da:	46bd      	mov	sp, r7
 80093dc:	bd80      	pop	{r7, pc}
 80093de:	bf00      	nop
 80093e0:	2000561c 	.word	0x2000561c
 80093e4:	08009d78 	.word	0x08009d78

080093e8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80093e8:	b580      	push	{r7, lr}
 80093ea:	b082      	sub	sp, #8
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	4603      	mov	r3, r0
 80093f0:	6039      	str	r1, [r7, #0]
 80093f2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80093f4:	79fb      	ldrb	r3, [r7, #7]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d105      	bne.n	8009406 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80093fa:	683a      	ldr	r2, [r7, #0]
 80093fc:	4907      	ldr	r1, [pc, #28]	; (800941c <USBD_FS_InterfaceStrDescriptor+0x34>)
 80093fe:	4808      	ldr	r0, [pc, #32]	; (8009420 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009400:	f7fe fb42 	bl	8007a88 <USBD_GetString>
 8009404:	e004      	b.n	8009410 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009406:	683a      	ldr	r2, [r7, #0]
 8009408:	4904      	ldr	r1, [pc, #16]	; (800941c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800940a:	4805      	ldr	r0, [pc, #20]	; (8009420 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800940c:	f7fe fb3c 	bl	8007a88 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009410:	4b02      	ldr	r3, [pc, #8]	; (800941c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009412:	4618      	mov	r0, r3
 8009414:	3708      	adds	r7, #8
 8009416:	46bd      	mov	sp, r7
 8009418:	bd80      	pop	{r7, pc}
 800941a:	bf00      	nop
 800941c:	2000561c 	.word	0x2000561c
 8009420:	08009d84 	.word	0x08009d84

08009424 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009424:	b580      	push	{r7, lr}
 8009426:	b084      	sub	sp, #16
 8009428:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800942a:	4b0f      	ldr	r3, [pc, #60]	; (8009468 <Get_SerialNum+0x44>)
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009430:	4b0e      	ldr	r3, [pc, #56]	; (800946c <Get_SerialNum+0x48>)
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009436:	4b0e      	ldr	r3, [pc, #56]	; (8009470 <Get_SerialNum+0x4c>)
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800943c:	68fa      	ldr	r2, [r7, #12]
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	4413      	add	r3, r2
 8009442:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d009      	beq.n	800945e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800944a:	2208      	movs	r2, #8
 800944c:	4909      	ldr	r1, [pc, #36]	; (8009474 <Get_SerialNum+0x50>)
 800944e:	68f8      	ldr	r0, [r7, #12]
 8009450:	f000 f814 	bl	800947c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009454:	2204      	movs	r2, #4
 8009456:	4908      	ldr	r1, [pc, #32]	; (8009478 <Get_SerialNum+0x54>)
 8009458:	68b8      	ldr	r0, [r7, #8]
 800945a:	f000 f80f 	bl	800947c <IntToUnicode>
  }
}
 800945e:	bf00      	nop
 8009460:	3710      	adds	r7, #16
 8009462:	46bd      	mov	sp, r7
 8009464:	bd80      	pop	{r7, pc}
 8009466:	bf00      	nop
 8009468:	1fff7a10 	.word	0x1fff7a10
 800946c:	1fff7a14 	.word	0x1fff7a14
 8009470:	1fff7a18 	.word	0x1fff7a18
 8009474:	200000e6 	.word	0x200000e6
 8009478:	200000f6 	.word	0x200000f6

0800947c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800947c:	b480      	push	{r7}
 800947e:	b087      	sub	sp, #28
 8009480:	af00      	add	r7, sp, #0
 8009482:	60f8      	str	r0, [r7, #12]
 8009484:	60b9      	str	r1, [r7, #8]
 8009486:	4613      	mov	r3, r2
 8009488:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800948a:	2300      	movs	r3, #0
 800948c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800948e:	2300      	movs	r3, #0
 8009490:	75fb      	strb	r3, [r7, #23]
 8009492:	e027      	b.n	80094e4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	0f1b      	lsrs	r3, r3, #28
 8009498:	2b09      	cmp	r3, #9
 800949a:	d80b      	bhi.n	80094b4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	0f1b      	lsrs	r3, r3, #28
 80094a0:	b2da      	uxtb	r2, r3
 80094a2:	7dfb      	ldrb	r3, [r7, #23]
 80094a4:	005b      	lsls	r3, r3, #1
 80094a6:	4619      	mov	r1, r3
 80094a8:	68bb      	ldr	r3, [r7, #8]
 80094aa:	440b      	add	r3, r1
 80094ac:	3230      	adds	r2, #48	; 0x30
 80094ae:	b2d2      	uxtb	r2, r2
 80094b0:	701a      	strb	r2, [r3, #0]
 80094b2:	e00a      	b.n	80094ca <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	0f1b      	lsrs	r3, r3, #28
 80094b8:	b2da      	uxtb	r2, r3
 80094ba:	7dfb      	ldrb	r3, [r7, #23]
 80094bc:	005b      	lsls	r3, r3, #1
 80094be:	4619      	mov	r1, r3
 80094c0:	68bb      	ldr	r3, [r7, #8]
 80094c2:	440b      	add	r3, r1
 80094c4:	3237      	adds	r2, #55	; 0x37
 80094c6:	b2d2      	uxtb	r2, r2
 80094c8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	011b      	lsls	r3, r3, #4
 80094ce:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80094d0:	7dfb      	ldrb	r3, [r7, #23]
 80094d2:	005b      	lsls	r3, r3, #1
 80094d4:	3301      	adds	r3, #1
 80094d6:	68ba      	ldr	r2, [r7, #8]
 80094d8:	4413      	add	r3, r2
 80094da:	2200      	movs	r2, #0
 80094dc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80094de:	7dfb      	ldrb	r3, [r7, #23]
 80094e0:	3301      	adds	r3, #1
 80094e2:	75fb      	strb	r3, [r7, #23]
 80094e4:	7dfa      	ldrb	r2, [r7, #23]
 80094e6:	79fb      	ldrb	r3, [r7, #7]
 80094e8:	429a      	cmp	r2, r3
 80094ea:	d3d3      	bcc.n	8009494 <IntToUnicode+0x18>
  }
}
 80094ec:	bf00      	nop
 80094ee:	bf00      	nop
 80094f0:	371c      	adds	r7, #28
 80094f2:	46bd      	mov	sp, r7
 80094f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f8:	4770      	bx	lr
	...

080094fc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80094fc:	b580      	push	{r7, lr}
 80094fe:	b08a      	sub	sp, #40	; 0x28
 8009500:	af00      	add	r7, sp, #0
 8009502:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009504:	f107 0314 	add.w	r3, r7, #20
 8009508:	2200      	movs	r2, #0
 800950a:	601a      	str	r2, [r3, #0]
 800950c:	605a      	str	r2, [r3, #4]
 800950e:	609a      	str	r2, [r3, #8]
 8009510:	60da      	str	r2, [r3, #12]
 8009512:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800951c:	d13a      	bne.n	8009594 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800951e:	2300      	movs	r3, #0
 8009520:	613b      	str	r3, [r7, #16]
 8009522:	4b1e      	ldr	r3, [pc, #120]	; (800959c <HAL_PCD_MspInit+0xa0>)
 8009524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009526:	4a1d      	ldr	r2, [pc, #116]	; (800959c <HAL_PCD_MspInit+0xa0>)
 8009528:	f043 0301 	orr.w	r3, r3, #1
 800952c:	6313      	str	r3, [r2, #48]	; 0x30
 800952e:	4b1b      	ldr	r3, [pc, #108]	; (800959c <HAL_PCD_MspInit+0xa0>)
 8009530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009532:	f003 0301 	and.w	r3, r3, #1
 8009536:	613b      	str	r3, [r7, #16]
 8009538:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 800953a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800953e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009540:	2302      	movs	r3, #2
 8009542:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009544:	2300      	movs	r3, #0
 8009546:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009548:	2303      	movs	r3, #3
 800954a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800954c:	230a      	movs	r3, #10
 800954e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009550:	f107 0314 	add.w	r3, r7, #20
 8009554:	4619      	mov	r1, r3
 8009556:	4812      	ldr	r0, [pc, #72]	; (80095a0 <HAL_PCD_MspInit+0xa4>)
 8009558:	f7f8 fa04 	bl	8001964 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800955c:	4b0f      	ldr	r3, [pc, #60]	; (800959c <HAL_PCD_MspInit+0xa0>)
 800955e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009560:	4a0e      	ldr	r2, [pc, #56]	; (800959c <HAL_PCD_MspInit+0xa0>)
 8009562:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009566:	6353      	str	r3, [r2, #52]	; 0x34
 8009568:	2300      	movs	r3, #0
 800956a:	60fb      	str	r3, [r7, #12]
 800956c:	4b0b      	ldr	r3, [pc, #44]	; (800959c <HAL_PCD_MspInit+0xa0>)
 800956e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009570:	4a0a      	ldr	r2, [pc, #40]	; (800959c <HAL_PCD_MspInit+0xa0>)
 8009572:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009576:	6453      	str	r3, [r2, #68]	; 0x44
 8009578:	4b08      	ldr	r3, [pc, #32]	; (800959c <HAL_PCD_MspInit+0xa0>)
 800957a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800957c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009580:	60fb      	str	r3, [r7, #12]
 8009582:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8009584:	2200      	movs	r2, #0
 8009586:	2105      	movs	r1, #5
 8009588:	2043      	movs	r0, #67	; 0x43
 800958a:	f7f7 fed7 	bl	800133c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800958e:	2043      	movs	r0, #67	; 0x43
 8009590:	f7f7 fef0 	bl	8001374 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009594:	bf00      	nop
 8009596:	3728      	adds	r7, #40	; 0x28
 8009598:	46bd      	mov	sp, r7
 800959a:	bd80      	pop	{r7, pc}
 800959c:	40023800 	.word	0x40023800
 80095a0:	40020000 	.word	0x40020000

080095a4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095a4:	b580      	push	{r7, lr}
 80095a6:	b082      	sub	sp, #8
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	; 0x4e0
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80095b8:	4619      	mov	r1, r3
 80095ba:	4610      	mov	r0, r2
 80095bc:	f7fd f8ff 	bl	80067be <USBD_LL_SetupStage>
}
 80095c0:	bf00      	nop
 80095c2:	3708      	adds	r7, #8
 80095c4:	46bd      	mov	sp, r7
 80095c6:	bd80      	pop	{r7, pc}

080095c8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b082      	sub	sp, #8
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]
 80095d0:	460b      	mov	r3, r1
 80095d2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 80095da:	78fa      	ldrb	r2, [r7, #3]
 80095dc:	6879      	ldr	r1, [r7, #4]
 80095de:	4613      	mov	r3, r2
 80095e0:	00db      	lsls	r3, r3, #3
 80095e2:	4413      	add	r3, r2
 80095e4:	009b      	lsls	r3, r3, #2
 80095e6:	440b      	add	r3, r1
 80095e8:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80095ec:	681a      	ldr	r2, [r3, #0]
 80095ee:	78fb      	ldrb	r3, [r7, #3]
 80095f0:	4619      	mov	r1, r3
 80095f2:	f7fd f939 	bl	8006868 <USBD_LL_DataOutStage>
}
 80095f6:	bf00      	nop
 80095f8:	3708      	adds	r7, #8
 80095fa:	46bd      	mov	sp, r7
 80095fc:	bd80      	pop	{r7, pc}

080095fe <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095fe:	b580      	push	{r7, lr}
 8009600:	b082      	sub	sp, #8
 8009602:	af00      	add	r7, sp, #0
 8009604:	6078      	str	r0, [r7, #4]
 8009606:	460b      	mov	r3, r1
 8009608:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 8009610:	78fa      	ldrb	r2, [r7, #3]
 8009612:	6879      	ldr	r1, [r7, #4]
 8009614:	4613      	mov	r3, r2
 8009616:	00db      	lsls	r3, r3, #3
 8009618:	4413      	add	r3, r2
 800961a:	009b      	lsls	r3, r3, #2
 800961c:	440b      	add	r3, r1
 800961e:	3320      	adds	r3, #32
 8009620:	681a      	ldr	r2, [r3, #0]
 8009622:	78fb      	ldrb	r3, [r7, #3]
 8009624:	4619      	mov	r1, r3
 8009626:	f7fd f9d2 	bl	80069ce <USBD_LL_DataInStage>
}
 800962a:	bf00      	nop
 800962c:	3708      	adds	r7, #8
 800962e:	46bd      	mov	sp, r7
 8009630:	bd80      	pop	{r7, pc}

08009632 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009632:	b580      	push	{r7, lr}
 8009634:	b082      	sub	sp, #8
 8009636:	af00      	add	r7, sp, #0
 8009638:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8009640:	4618      	mov	r0, r3
 8009642:	f7fd fb0c 	bl	8006c5e <USBD_LL_SOF>
}
 8009646:	bf00      	nop
 8009648:	3708      	adds	r7, #8
 800964a:	46bd      	mov	sp, r7
 800964c:	bd80      	pop	{r7, pc}

0800964e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800964e:	b580      	push	{r7, lr}
 8009650:	b084      	sub	sp, #16
 8009652:	af00      	add	r7, sp, #0
 8009654:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009656:	2301      	movs	r3, #1
 8009658:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	79db      	ldrb	r3, [r3, #7]
 800965e:	2b00      	cmp	r3, #0
 8009660:	d102      	bne.n	8009668 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8009662:	2300      	movs	r3, #0
 8009664:	73fb      	strb	r3, [r7, #15]
 8009666:	e008      	b.n	800967a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	79db      	ldrb	r3, [r3, #7]
 800966c:	2b02      	cmp	r3, #2
 800966e:	d102      	bne.n	8009676 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8009670:	2301      	movs	r3, #1
 8009672:	73fb      	strb	r3, [r7, #15]
 8009674:	e001      	b.n	800967a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8009676:	f7f7 f9c9 	bl	8000a0c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8009680:	7bfa      	ldrb	r2, [r7, #15]
 8009682:	4611      	mov	r1, r2
 8009684:	4618      	mov	r0, r3
 8009686:	f7fd faa6 	bl	8006bd6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8009690:	4618      	mov	r0, r3
 8009692:	f7fd fa4e 	bl	8006b32 <USBD_LL_Reset>
}
 8009696:	bf00      	nop
 8009698:	3710      	adds	r7, #16
 800969a:	46bd      	mov	sp, r7
 800969c:	bd80      	pop	{r7, pc}
	...

080096a0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b082      	sub	sp, #8
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80096ae:	4618      	mov	r0, r3
 80096b0:	f7fd faa1 	bl	8006bf6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	687a      	ldr	r2, [r7, #4]
 80096c0:	6812      	ldr	r2, [r2, #0]
 80096c2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80096c6:	f043 0301 	orr.w	r3, r3, #1
 80096ca:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	7adb      	ldrb	r3, [r3, #11]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d005      	beq.n	80096e0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80096d4:	4b04      	ldr	r3, [pc, #16]	; (80096e8 <HAL_PCD_SuspendCallback+0x48>)
 80096d6:	691b      	ldr	r3, [r3, #16]
 80096d8:	4a03      	ldr	r2, [pc, #12]	; (80096e8 <HAL_PCD_SuspendCallback+0x48>)
 80096da:	f043 0306 	orr.w	r3, r3, #6
 80096de:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80096e0:	bf00      	nop
 80096e2:	3708      	adds	r7, #8
 80096e4:	46bd      	mov	sp, r7
 80096e6:	bd80      	pop	{r7, pc}
 80096e8:	e000ed00 	.word	0xe000ed00

080096ec <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096ec:	b580      	push	{r7, lr}
 80096ee:	b082      	sub	sp, #8
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80096fa:	4618      	mov	r0, r3
 80096fc:	f7fd fa97 	bl	8006c2e <USBD_LL_Resume>
}
 8009700:	bf00      	nop
 8009702:	3708      	adds	r7, #8
 8009704:	46bd      	mov	sp, r7
 8009706:	bd80      	pop	{r7, pc}

08009708 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009708:	b580      	push	{r7, lr}
 800970a:	b082      	sub	sp, #8
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]
 8009710:	460b      	mov	r3, r1
 8009712:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800971a:	78fa      	ldrb	r2, [r7, #3]
 800971c:	4611      	mov	r1, r2
 800971e:	4618      	mov	r0, r3
 8009720:	f7fd faef 	bl	8006d02 <USBD_LL_IsoOUTIncomplete>
}
 8009724:	bf00      	nop
 8009726:	3708      	adds	r7, #8
 8009728:	46bd      	mov	sp, r7
 800972a:	bd80      	pop	{r7, pc}

0800972c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800972c:	b580      	push	{r7, lr}
 800972e:	b082      	sub	sp, #8
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]
 8009734:	460b      	mov	r3, r1
 8009736:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800973e:	78fa      	ldrb	r2, [r7, #3]
 8009740:	4611      	mov	r1, r2
 8009742:	4618      	mov	r0, r3
 8009744:	f7fd faab 	bl	8006c9e <USBD_LL_IsoINIncomplete>
}
 8009748:	bf00      	nop
 800974a:	3708      	adds	r7, #8
 800974c:	46bd      	mov	sp, r7
 800974e:	bd80      	pop	{r7, pc}

08009750 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009750:	b580      	push	{r7, lr}
 8009752:	b082      	sub	sp, #8
 8009754:	af00      	add	r7, sp, #0
 8009756:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800975e:	4618      	mov	r0, r3
 8009760:	f7fd fb01 	bl	8006d66 <USBD_LL_DevConnected>
}
 8009764:	bf00      	nop
 8009766:	3708      	adds	r7, #8
 8009768:	46bd      	mov	sp, r7
 800976a:	bd80      	pop	{r7, pc}

0800976c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800976c:	b580      	push	{r7, lr}
 800976e:	b082      	sub	sp, #8
 8009770:	af00      	add	r7, sp, #0
 8009772:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800977a:	4618      	mov	r0, r3
 800977c:	f7fd fafe 	bl	8006d7c <USBD_LL_DevDisconnected>
}
 8009780:	bf00      	nop
 8009782:	3708      	adds	r7, #8
 8009784:	46bd      	mov	sp, r7
 8009786:	bd80      	pop	{r7, pc}

08009788 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009788:	b580      	push	{r7, lr}
 800978a:	b082      	sub	sp, #8
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	781b      	ldrb	r3, [r3, #0]
 8009794:	2b00      	cmp	r3, #0
 8009796:	d13c      	bne.n	8009812 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009798:	4a20      	ldr	r2, [pc, #128]	; (800981c <USBD_LL_Init+0x94>)
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	4a1e      	ldr	r2, [pc, #120]	; (800981c <USBD_LL_Init+0x94>)
 80097a4:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80097a8:	4b1c      	ldr	r3, [pc, #112]	; (800981c <USBD_LL_Init+0x94>)
 80097aa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80097ae:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80097b0:	4b1a      	ldr	r3, [pc, #104]	; (800981c <USBD_LL_Init+0x94>)
 80097b2:	2204      	movs	r2, #4
 80097b4:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80097b6:	4b19      	ldr	r3, [pc, #100]	; (800981c <USBD_LL_Init+0x94>)
 80097b8:	2202      	movs	r2, #2
 80097ba:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80097bc:	4b17      	ldr	r3, [pc, #92]	; (800981c <USBD_LL_Init+0x94>)
 80097be:	2200      	movs	r2, #0
 80097c0:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80097c2:	4b16      	ldr	r3, [pc, #88]	; (800981c <USBD_LL_Init+0x94>)
 80097c4:	2202      	movs	r2, #2
 80097c6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80097c8:	4b14      	ldr	r3, [pc, #80]	; (800981c <USBD_LL_Init+0x94>)
 80097ca:	2200      	movs	r2, #0
 80097cc:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80097ce:	4b13      	ldr	r3, [pc, #76]	; (800981c <USBD_LL_Init+0x94>)
 80097d0:	2200      	movs	r2, #0
 80097d2:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80097d4:	4b11      	ldr	r3, [pc, #68]	; (800981c <USBD_LL_Init+0x94>)
 80097d6:	2200      	movs	r2, #0
 80097d8:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80097da:	4b10      	ldr	r3, [pc, #64]	; (800981c <USBD_LL_Init+0x94>)
 80097dc:	2200      	movs	r2, #0
 80097de:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80097e0:	4b0e      	ldr	r3, [pc, #56]	; (800981c <USBD_LL_Init+0x94>)
 80097e2:	2200      	movs	r2, #0
 80097e4:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80097e6:	480d      	ldr	r0, [pc, #52]	; (800981c <USBD_LL_Init+0x94>)
 80097e8:	f7f8 fa9b 	bl	8001d22 <HAL_PCD_Init>
 80097ec:	4603      	mov	r3, r0
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d001      	beq.n	80097f6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80097f2:	f7f7 f90b 	bl	8000a0c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80097f6:	2180      	movs	r1, #128	; 0x80
 80097f8:	4808      	ldr	r0, [pc, #32]	; (800981c <USBD_LL_Init+0x94>)
 80097fa:	f7f9 fcc6 	bl	800318a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80097fe:	2240      	movs	r2, #64	; 0x40
 8009800:	2100      	movs	r1, #0
 8009802:	4806      	ldr	r0, [pc, #24]	; (800981c <USBD_LL_Init+0x94>)
 8009804:	f7f9 fc7a 	bl	80030fc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009808:	2280      	movs	r2, #128	; 0x80
 800980a:	2101      	movs	r1, #1
 800980c:	4803      	ldr	r0, [pc, #12]	; (800981c <USBD_LL_Init+0x94>)
 800980e:	f7f9 fc75 	bl	80030fc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009812:	2300      	movs	r3, #0
}
 8009814:	4618      	mov	r0, r3
 8009816:	3708      	adds	r7, #8
 8009818:	46bd      	mov	sp, r7
 800981a:	bd80      	pop	{r7, pc}
 800981c:	2000581c 	.word	0x2000581c

08009820 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009820:	b580      	push	{r7, lr}
 8009822:	b084      	sub	sp, #16
 8009824:	af00      	add	r7, sp, #0
 8009826:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009828:	2300      	movs	r3, #0
 800982a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800982c:	2300      	movs	r3, #0
 800982e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009836:	4618      	mov	r0, r3
 8009838:	f7f8 fb82 	bl	8001f40 <HAL_PCD_Start>
 800983c:	4603      	mov	r3, r0
 800983e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009840:	7bfb      	ldrb	r3, [r7, #15]
 8009842:	4618      	mov	r0, r3
 8009844:	f000 f942 	bl	8009acc <USBD_Get_USB_Status>
 8009848:	4603      	mov	r3, r0
 800984a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800984c:	7bbb      	ldrb	r3, [r7, #14]
}
 800984e:	4618      	mov	r0, r3
 8009850:	3710      	adds	r7, #16
 8009852:	46bd      	mov	sp, r7
 8009854:	bd80      	pop	{r7, pc}

08009856 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009856:	b580      	push	{r7, lr}
 8009858:	b084      	sub	sp, #16
 800985a:	af00      	add	r7, sp, #0
 800985c:	6078      	str	r0, [r7, #4]
 800985e:	4608      	mov	r0, r1
 8009860:	4611      	mov	r1, r2
 8009862:	461a      	mov	r2, r3
 8009864:	4603      	mov	r3, r0
 8009866:	70fb      	strb	r3, [r7, #3]
 8009868:	460b      	mov	r3, r1
 800986a:	70bb      	strb	r3, [r7, #2]
 800986c:	4613      	mov	r3, r2
 800986e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009870:	2300      	movs	r3, #0
 8009872:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009874:	2300      	movs	r3, #0
 8009876:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800987e:	78bb      	ldrb	r3, [r7, #2]
 8009880:	883a      	ldrh	r2, [r7, #0]
 8009882:	78f9      	ldrb	r1, [r7, #3]
 8009884:	f7f9 f856 	bl	8002934 <HAL_PCD_EP_Open>
 8009888:	4603      	mov	r3, r0
 800988a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800988c:	7bfb      	ldrb	r3, [r7, #15]
 800988e:	4618      	mov	r0, r3
 8009890:	f000 f91c 	bl	8009acc <USBD_Get_USB_Status>
 8009894:	4603      	mov	r3, r0
 8009896:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009898:	7bbb      	ldrb	r3, [r7, #14]
}
 800989a:	4618      	mov	r0, r3
 800989c:	3710      	adds	r7, #16
 800989e:	46bd      	mov	sp, r7
 80098a0:	bd80      	pop	{r7, pc}

080098a2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80098a2:	b580      	push	{r7, lr}
 80098a4:	b084      	sub	sp, #16
 80098a6:	af00      	add	r7, sp, #0
 80098a8:	6078      	str	r0, [r7, #4]
 80098aa:	460b      	mov	r3, r1
 80098ac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098ae:	2300      	movs	r3, #0
 80098b0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80098b2:	2300      	movs	r3, #0
 80098b4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80098bc:	78fa      	ldrb	r2, [r7, #3]
 80098be:	4611      	mov	r1, r2
 80098c0:	4618      	mov	r0, r3
 80098c2:	f7f9 f89f 	bl	8002a04 <HAL_PCD_EP_Close>
 80098c6:	4603      	mov	r3, r0
 80098c8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80098ca:	7bfb      	ldrb	r3, [r7, #15]
 80098cc:	4618      	mov	r0, r3
 80098ce:	f000 f8fd 	bl	8009acc <USBD_Get_USB_Status>
 80098d2:	4603      	mov	r3, r0
 80098d4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80098d6:	7bbb      	ldrb	r3, [r7, #14]
}
 80098d8:	4618      	mov	r0, r3
 80098da:	3710      	adds	r7, #16
 80098dc:	46bd      	mov	sp, r7
 80098de:	bd80      	pop	{r7, pc}

080098e0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80098e0:	b580      	push	{r7, lr}
 80098e2:	b084      	sub	sp, #16
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	6078      	str	r0, [r7, #4]
 80098e8:	460b      	mov	r3, r1
 80098ea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098ec:	2300      	movs	r3, #0
 80098ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80098f0:	2300      	movs	r3, #0
 80098f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80098fa:	78fa      	ldrb	r2, [r7, #3]
 80098fc:	4611      	mov	r1, r2
 80098fe:	4618      	mov	r0, r3
 8009900:	f7f9 f957 	bl	8002bb2 <HAL_PCD_EP_SetStall>
 8009904:	4603      	mov	r3, r0
 8009906:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009908:	7bfb      	ldrb	r3, [r7, #15]
 800990a:	4618      	mov	r0, r3
 800990c:	f000 f8de 	bl	8009acc <USBD_Get_USB_Status>
 8009910:	4603      	mov	r3, r0
 8009912:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009914:	7bbb      	ldrb	r3, [r7, #14]
}
 8009916:	4618      	mov	r0, r3
 8009918:	3710      	adds	r7, #16
 800991a:	46bd      	mov	sp, r7
 800991c:	bd80      	pop	{r7, pc}

0800991e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800991e:	b580      	push	{r7, lr}
 8009920:	b084      	sub	sp, #16
 8009922:	af00      	add	r7, sp, #0
 8009924:	6078      	str	r0, [r7, #4]
 8009926:	460b      	mov	r3, r1
 8009928:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800992a:	2300      	movs	r3, #0
 800992c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800992e:	2300      	movs	r3, #0
 8009930:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009938:	78fa      	ldrb	r2, [r7, #3]
 800993a:	4611      	mov	r1, r2
 800993c:	4618      	mov	r0, r3
 800993e:	f7f9 f99b 	bl	8002c78 <HAL_PCD_EP_ClrStall>
 8009942:	4603      	mov	r3, r0
 8009944:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009946:	7bfb      	ldrb	r3, [r7, #15]
 8009948:	4618      	mov	r0, r3
 800994a:	f000 f8bf 	bl	8009acc <USBD_Get_USB_Status>
 800994e:	4603      	mov	r3, r0
 8009950:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009952:	7bbb      	ldrb	r3, [r7, #14]
}
 8009954:	4618      	mov	r0, r3
 8009956:	3710      	adds	r7, #16
 8009958:	46bd      	mov	sp, r7
 800995a:	bd80      	pop	{r7, pc}

0800995c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800995c:	b480      	push	{r7}
 800995e:	b085      	sub	sp, #20
 8009960:	af00      	add	r7, sp, #0
 8009962:	6078      	str	r0, [r7, #4]
 8009964:	460b      	mov	r3, r1
 8009966:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800996e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009970:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009974:	2b00      	cmp	r3, #0
 8009976:	da0b      	bge.n	8009990 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009978:	78fb      	ldrb	r3, [r7, #3]
 800997a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800997e:	68f9      	ldr	r1, [r7, #12]
 8009980:	4613      	mov	r3, r2
 8009982:	00db      	lsls	r3, r3, #3
 8009984:	4413      	add	r3, r2
 8009986:	009b      	lsls	r3, r3, #2
 8009988:	440b      	add	r3, r1
 800998a:	3316      	adds	r3, #22
 800998c:	781b      	ldrb	r3, [r3, #0]
 800998e:	e00b      	b.n	80099a8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009990:	78fb      	ldrb	r3, [r7, #3]
 8009992:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009996:	68f9      	ldr	r1, [r7, #12]
 8009998:	4613      	mov	r3, r2
 800999a:	00db      	lsls	r3, r3, #3
 800999c:	4413      	add	r3, r2
 800999e:	009b      	lsls	r3, r3, #2
 80099a0:	440b      	add	r3, r1
 80099a2:	f203 2356 	addw	r3, r3, #598	; 0x256
 80099a6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80099a8:	4618      	mov	r0, r3
 80099aa:	3714      	adds	r7, #20
 80099ac:	46bd      	mov	sp, r7
 80099ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b2:	4770      	bx	lr

080099b4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80099b4:	b580      	push	{r7, lr}
 80099b6:	b084      	sub	sp, #16
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]
 80099bc:	460b      	mov	r3, r1
 80099be:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099c0:	2300      	movs	r3, #0
 80099c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80099c4:	2300      	movs	r3, #0
 80099c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80099ce:	78fa      	ldrb	r2, [r7, #3]
 80099d0:	4611      	mov	r1, r2
 80099d2:	4618      	mov	r0, r3
 80099d4:	f7f8 ff8a 	bl	80028ec <HAL_PCD_SetAddress>
 80099d8:	4603      	mov	r3, r0
 80099da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80099dc:	7bfb      	ldrb	r3, [r7, #15]
 80099de:	4618      	mov	r0, r3
 80099e0:	f000 f874 	bl	8009acc <USBD_Get_USB_Status>
 80099e4:	4603      	mov	r3, r0
 80099e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80099e8:	7bbb      	ldrb	r3, [r7, #14]
}
 80099ea:	4618      	mov	r0, r3
 80099ec:	3710      	adds	r7, #16
 80099ee:	46bd      	mov	sp, r7
 80099f0:	bd80      	pop	{r7, pc}

080099f2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80099f2:	b580      	push	{r7, lr}
 80099f4:	b086      	sub	sp, #24
 80099f6:	af00      	add	r7, sp, #0
 80099f8:	60f8      	str	r0, [r7, #12]
 80099fa:	607a      	str	r2, [r7, #4]
 80099fc:	603b      	str	r3, [r7, #0]
 80099fe:	460b      	mov	r3, r1
 8009a00:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a02:	2300      	movs	r3, #0
 8009a04:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a06:	2300      	movs	r3, #0
 8009a08:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009a10:	7af9      	ldrb	r1, [r7, #11]
 8009a12:	683b      	ldr	r3, [r7, #0]
 8009a14:	687a      	ldr	r2, [r7, #4]
 8009a16:	f7f9 f892 	bl	8002b3e <HAL_PCD_EP_Transmit>
 8009a1a:	4603      	mov	r3, r0
 8009a1c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a1e:	7dfb      	ldrb	r3, [r7, #23]
 8009a20:	4618      	mov	r0, r3
 8009a22:	f000 f853 	bl	8009acc <USBD_Get_USB_Status>
 8009a26:	4603      	mov	r3, r0
 8009a28:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009a2a:	7dbb      	ldrb	r3, [r7, #22]
}
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	3718      	adds	r7, #24
 8009a30:	46bd      	mov	sp, r7
 8009a32:	bd80      	pop	{r7, pc}

08009a34 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009a34:	b580      	push	{r7, lr}
 8009a36:	b086      	sub	sp, #24
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	60f8      	str	r0, [r7, #12]
 8009a3c:	607a      	str	r2, [r7, #4]
 8009a3e:	603b      	str	r3, [r7, #0]
 8009a40:	460b      	mov	r3, r1
 8009a42:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a44:	2300      	movs	r3, #0
 8009a46:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a48:	2300      	movs	r3, #0
 8009a4a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009a52:	7af9      	ldrb	r1, [r7, #11]
 8009a54:	683b      	ldr	r3, [r7, #0]
 8009a56:	687a      	ldr	r2, [r7, #4]
 8009a58:	f7f9 f81e 	bl	8002a98 <HAL_PCD_EP_Receive>
 8009a5c:	4603      	mov	r3, r0
 8009a5e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a60:	7dfb      	ldrb	r3, [r7, #23]
 8009a62:	4618      	mov	r0, r3
 8009a64:	f000 f832 	bl	8009acc <USBD_Get_USB_Status>
 8009a68:	4603      	mov	r3, r0
 8009a6a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009a6c:	7dbb      	ldrb	r3, [r7, #22]
}
 8009a6e:	4618      	mov	r0, r3
 8009a70:	3718      	adds	r7, #24
 8009a72:	46bd      	mov	sp, r7
 8009a74:	bd80      	pop	{r7, pc}

08009a76 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009a76:	b580      	push	{r7, lr}
 8009a78:	b082      	sub	sp, #8
 8009a7a:	af00      	add	r7, sp, #0
 8009a7c:	6078      	str	r0, [r7, #4]
 8009a7e:	460b      	mov	r3, r1
 8009a80:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009a88:	78fa      	ldrb	r2, [r7, #3]
 8009a8a:	4611      	mov	r1, r2
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	f7f9 f83e 	bl	8002b0e <HAL_PCD_EP_GetRxCount>
 8009a92:	4603      	mov	r3, r0
}
 8009a94:	4618      	mov	r0, r3
 8009a96:	3708      	adds	r7, #8
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	bd80      	pop	{r7, pc}

08009a9c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009a9c:	b480      	push	{r7}
 8009a9e:	b083      	sub	sp, #12
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009aa4:	4b03      	ldr	r3, [pc, #12]	; (8009ab4 <USBD_static_malloc+0x18>)
}
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	370c      	adds	r7, #12
 8009aaa:	46bd      	mov	sp, r7
 8009aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab0:	4770      	bx	lr
 8009ab2:	bf00      	nop
 8009ab4:	20005d00 	.word	0x20005d00

08009ab8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009ab8:	b480      	push	{r7}
 8009aba:	b083      	sub	sp, #12
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	6078      	str	r0, [r7, #4]

}
 8009ac0:	bf00      	nop
 8009ac2:	370c      	adds	r7, #12
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aca:	4770      	bx	lr

08009acc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009acc:	b480      	push	{r7}
 8009ace:	b085      	sub	sp, #20
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	4603      	mov	r3, r0
 8009ad4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009ada:	79fb      	ldrb	r3, [r7, #7]
 8009adc:	2b03      	cmp	r3, #3
 8009ade:	d817      	bhi.n	8009b10 <USBD_Get_USB_Status+0x44>
 8009ae0:	a201      	add	r2, pc, #4	; (adr r2, 8009ae8 <USBD_Get_USB_Status+0x1c>)
 8009ae2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ae6:	bf00      	nop
 8009ae8:	08009af9 	.word	0x08009af9
 8009aec:	08009aff 	.word	0x08009aff
 8009af0:	08009b05 	.word	0x08009b05
 8009af4:	08009b0b 	.word	0x08009b0b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009af8:	2300      	movs	r3, #0
 8009afa:	73fb      	strb	r3, [r7, #15]
    break;
 8009afc:	e00b      	b.n	8009b16 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009afe:	2303      	movs	r3, #3
 8009b00:	73fb      	strb	r3, [r7, #15]
    break;
 8009b02:	e008      	b.n	8009b16 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009b04:	2301      	movs	r3, #1
 8009b06:	73fb      	strb	r3, [r7, #15]
    break;
 8009b08:	e005      	b.n	8009b16 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009b0a:	2303      	movs	r3, #3
 8009b0c:	73fb      	strb	r3, [r7, #15]
    break;
 8009b0e:	e002      	b.n	8009b16 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009b10:	2303      	movs	r3, #3
 8009b12:	73fb      	strb	r3, [r7, #15]
    break;
 8009b14:	bf00      	nop
  }
  return usb_status;
 8009b16:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b18:	4618      	mov	r0, r3
 8009b1a:	3714      	adds	r7, #20
 8009b1c:	46bd      	mov	sp, r7
 8009b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b22:	4770      	bx	lr

08009b24 <memset>:
 8009b24:	4402      	add	r2, r0
 8009b26:	4603      	mov	r3, r0
 8009b28:	4293      	cmp	r3, r2
 8009b2a:	d100      	bne.n	8009b2e <memset+0xa>
 8009b2c:	4770      	bx	lr
 8009b2e:	f803 1b01 	strb.w	r1, [r3], #1
 8009b32:	e7f9      	b.n	8009b28 <memset+0x4>

08009b34 <_reclaim_reent>:
 8009b34:	4b29      	ldr	r3, [pc, #164]	; (8009bdc <_reclaim_reent+0xa8>)
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	4283      	cmp	r3, r0
 8009b3a:	b570      	push	{r4, r5, r6, lr}
 8009b3c:	4604      	mov	r4, r0
 8009b3e:	d04b      	beq.n	8009bd8 <_reclaim_reent+0xa4>
 8009b40:	69c3      	ldr	r3, [r0, #28]
 8009b42:	b143      	cbz	r3, 8009b56 <_reclaim_reent+0x22>
 8009b44:	68db      	ldr	r3, [r3, #12]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d144      	bne.n	8009bd4 <_reclaim_reent+0xa0>
 8009b4a:	69e3      	ldr	r3, [r4, #28]
 8009b4c:	6819      	ldr	r1, [r3, #0]
 8009b4e:	b111      	cbz	r1, 8009b56 <_reclaim_reent+0x22>
 8009b50:	4620      	mov	r0, r4
 8009b52:	f000 f86b 	bl	8009c2c <_free_r>
 8009b56:	6961      	ldr	r1, [r4, #20]
 8009b58:	b111      	cbz	r1, 8009b60 <_reclaim_reent+0x2c>
 8009b5a:	4620      	mov	r0, r4
 8009b5c:	f000 f866 	bl	8009c2c <_free_r>
 8009b60:	69e1      	ldr	r1, [r4, #28]
 8009b62:	b111      	cbz	r1, 8009b6a <_reclaim_reent+0x36>
 8009b64:	4620      	mov	r0, r4
 8009b66:	f000 f861 	bl	8009c2c <_free_r>
 8009b6a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8009b6c:	b111      	cbz	r1, 8009b74 <_reclaim_reent+0x40>
 8009b6e:	4620      	mov	r0, r4
 8009b70:	f000 f85c 	bl	8009c2c <_free_r>
 8009b74:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009b76:	b111      	cbz	r1, 8009b7e <_reclaim_reent+0x4a>
 8009b78:	4620      	mov	r0, r4
 8009b7a:	f000 f857 	bl	8009c2c <_free_r>
 8009b7e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009b80:	b111      	cbz	r1, 8009b88 <_reclaim_reent+0x54>
 8009b82:	4620      	mov	r0, r4
 8009b84:	f000 f852 	bl	8009c2c <_free_r>
 8009b88:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8009b8a:	b111      	cbz	r1, 8009b92 <_reclaim_reent+0x5e>
 8009b8c:	4620      	mov	r0, r4
 8009b8e:	f000 f84d 	bl	8009c2c <_free_r>
 8009b92:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8009b94:	b111      	cbz	r1, 8009b9c <_reclaim_reent+0x68>
 8009b96:	4620      	mov	r0, r4
 8009b98:	f000 f848 	bl	8009c2c <_free_r>
 8009b9c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8009b9e:	b111      	cbz	r1, 8009ba6 <_reclaim_reent+0x72>
 8009ba0:	4620      	mov	r0, r4
 8009ba2:	f000 f843 	bl	8009c2c <_free_r>
 8009ba6:	6a23      	ldr	r3, [r4, #32]
 8009ba8:	b1b3      	cbz	r3, 8009bd8 <_reclaim_reent+0xa4>
 8009baa:	4620      	mov	r0, r4
 8009bac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009bb0:	4718      	bx	r3
 8009bb2:	5949      	ldr	r1, [r1, r5]
 8009bb4:	b941      	cbnz	r1, 8009bc8 <_reclaim_reent+0x94>
 8009bb6:	3504      	adds	r5, #4
 8009bb8:	69e3      	ldr	r3, [r4, #28]
 8009bba:	2d80      	cmp	r5, #128	; 0x80
 8009bbc:	68d9      	ldr	r1, [r3, #12]
 8009bbe:	d1f8      	bne.n	8009bb2 <_reclaim_reent+0x7e>
 8009bc0:	4620      	mov	r0, r4
 8009bc2:	f000 f833 	bl	8009c2c <_free_r>
 8009bc6:	e7c0      	b.n	8009b4a <_reclaim_reent+0x16>
 8009bc8:	680e      	ldr	r6, [r1, #0]
 8009bca:	4620      	mov	r0, r4
 8009bcc:	f000 f82e 	bl	8009c2c <_free_r>
 8009bd0:	4631      	mov	r1, r6
 8009bd2:	e7ef      	b.n	8009bb4 <_reclaim_reent+0x80>
 8009bd4:	2500      	movs	r5, #0
 8009bd6:	e7ef      	b.n	8009bb8 <_reclaim_reent+0x84>
 8009bd8:	bd70      	pop	{r4, r5, r6, pc}
 8009bda:	bf00      	nop
 8009bdc:	2000014c 	.word	0x2000014c

08009be0 <__libc_init_array>:
 8009be0:	b570      	push	{r4, r5, r6, lr}
 8009be2:	4d0d      	ldr	r5, [pc, #52]	; (8009c18 <__libc_init_array+0x38>)
 8009be4:	4c0d      	ldr	r4, [pc, #52]	; (8009c1c <__libc_init_array+0x3c>)
 8009be6:	1b64      	subs	r4, r4, r5
 8009be8:	10a4      	asrs	r4, r4, #2
 8009bea:	2600      	movs	r6, #0
 8009bec:	42a6      	cmp	r6, r4
 8009bee:	d109      	bne.n	8009c04 <__libc_init_array+0x24>
 8009bf0:	4d0b      	ldr	r5, [pc, #44]	; (8009c20 <__libc_init_array+0x40>)
 8009bf2:	4c0c      	ldr	r4, [pc, #48]	; (8009c24 <__libc_init_array+0x44>)
 8009bf4:	f000 f872 	bl	8009cdc <_init>
 8009bf8:	1b64      	subs	r4, r4, r5
 8009bfa:	10a4      	asrs	r4, r4, #2
 8009bfc:	2600      	movs	r6, #0
 8009bfe:	42a6      	cmp	r6, r4
 8009c00:	d105      	bne.n	8009c0e <__libc_init_array+0x2e>
 8009c02:	bd70      	pop	{r4, r5, r6, pc}
 8009c04:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c08:	4798      	blx	r3
 8009c0a:	3601      	adds	r6, #1
 8009c0c:	e7ee      	b.n	8009bec <__libc_init_array+0xc>
 8009c0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c12:	4798      	blx	r3
 8009c14:	3601      	adds	r6, #1
 8009c16:	e7f2      	b.n	8009bfe <__libc_init_array+0x1e>
 8009c18:	08009dbc 	.word	0x08009dbc
 8009c1c:	08009dbc 	.word	0x08009dbc
 8009c20:	08009dbc 	.word	0x08009dbc
 8009c24:	08009dc0 	.word	0x08009dc0

08009c28 <__retarget_lock_acquire_recursive>:
 8009c28:	4770      	bx	lr

08009c2a <__retarget_lock_release_recursive>:
 8009c2a:	4770      	bx	lr

08009c2c <_free_r>:
 8009c2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009c2e:	2900      	cmp	r1, #0
 8009c30:	d044      	beq.n	8009cbc <_free_r+0x90>
 8009c32:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c36:	9001      	str	r0, [sp, #4]
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	f1a1 0404 	sub.w	r4, r1, #4
 8009c3e:	bfb8      	it	lt
 8009c40:	18e4      	addlt	r4, r4, r3
 8009c42:	f000 f83f 	bl	8009cc4 <__malloc_lock>
 8009c46:	4a1e      	ldr	r2, [pc, #120]	; (8009cc0 <_free_r+0x94>)
 8009c48:	9801      	ldr	r0, [sp, #4]
 8009c4a:	6813      	ldr	r3, [r2, #0]
 8009c4c:	b933      	cbnz	r3, 8009c5c <_free_r+0x30>
 8009c4e:	6063      	str	r3, [r4, #4]
 8009c50:	6014      	str	r4, [r2, #0]
 8009c52:	b003      	add	sp, #12
 8009c54:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009c58:	f000 b83a 	b.w	8009cd0 <__malloc_unlock>
 8009c5c:	42a3      	cmp	r3, r4
 8009c5e:	d908      	bls.n	8009c72 <_free_r+0x46>
 8009c60:	6825      	ldr	r5, [r4, #0]
 8009c62:	1961      	adds	r1, r4, r5
 8009c64:	428b      	cmp	r3, r1
 8009c66:	bf01      	itttt	eq
 8009c68:	6819      	ldreq	r1, [r3, #0]
 8009c6a:	685b      	ldreq	r3, [r3, #4]
 8009c6c:	1949      	addeq	r1, r1, r5
 8009c6e:	6021      	streq	r1, [r4, #0]
 8009c70:	e7ed      	b.n	8009c4e <_free_r+0x22>
 8009c72:	461a      	mov	r2, r3
 8009c74:	685b      	ldr	r3, [r3, #4]
 8009c76:	b10b      	cbz	r3, 8009c7c <_free_r+0x50>
 8009c78:	42a3      	cmp	r3, r4
 8009c7a:	d9fa      	bls.n	8009c72 <_free_r+0x46>
 8009c7c:	6811      	ldr	r1, [r2, #0]
 8009c7e:	1855      	adds	r5, r2, r1
 8009c80:	42a5      	cmp	r5, r4
 8009c82:	d10b      	bne.n	8009c9c <_free_r+0x70>
 8009c84:	6824      	ldr	r4, [r4, #0]
 8009c86:	4421      	add	r1, r4
 8009c88:	1854      	adds	r4, r2, r1
 8009c8a:	42a3      	cmp	r3, r4
 8009c8c:	6011      	str	r1, [r2, #0]
 8009c8e:	d1e0      	bne.n	8009c52 <_free_r+0x26>
 8009c90:	681c      	ldr	r4, [r3, #0]
 8009c92:	685b      	ldr	r3, [r3, #4]
 8009c94:	6053      	str	r3, [r2, #4]
 8009c96:	440c      	add	r4, r1
 8009c98:	6014      	str	r4, [r2, #0]
 8009c9a:	e7da      	b.n	8009c52 <_free_r+0x26>
 8009c9c:	d902      	bls.n	8009ca4 <_free_r+0x78>
 8009c9e:	230c      	movs	r3, #12
 8009ca0:	6003      	str	r3, [r0, #0]
 8009ca2:	e7d6      	b.n	8009c52 <_free_r+0x26>
 8009ca4:	6825      	ldr	r5, [r4, #0]
 8009ca6:	1961      	adds	r1, r4, r5
 8009ca8:	428b      	cmp	r3, r1
 8009caa:	bf04      	itt	eq
 8009cac:	6819      	ldreq	r1, [r3, #0]
 8009cae:	685b      	ldreq	r3, [r3, #4]
 8009cb0:	6063      	str	r3, [r4, #4]
 8009cb2:	bf04      	itt	eq
 8009cb4:	1949      	addeq	r1, r1, r5
 8009cb6:	6021      	streq	r1, [r4, #0]
 8009cb8:	6054      	str	r4, [r2, #4]
 8009cba:	e7ca      	b.n	8009c52 <_free_r+0x26>
 8009cbc:	b003      	add	sp, #12
 8009cbe:	bd30      	pop	{r4, r5, pc}
 8009cc0:	2000605c 	.word	0x2000605c

08009cc4 <__malloc_lock>:
 8009cc4:	4801      	ldr	r0, [pc, #4]	; (8009ccc <__malloc_lock+0x8>)
 8009cc6:	f7ff bfaf 	b.w	8009c28 <__retarget_lock_acquire_recursive>
 8009cca:	bf00      	nop
 8009ccc:	20006058 	.word	0x20006058

08009cd0 <__malloc_unlock>:
 8009cd0:	4801      	ldr	r0, [pc, #4]	; (8009cd8 <__malloc_unlock+0x8>)
 8009cd2:	f7ff bfaa 	b.w	8009c2a <__retarget_lock_release_recursive>
 8009cd6:	bf00      	nop
 8009cd8:	20006058 	.word	0x20006058

08009cdc <_init>:
 8009cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cde:	bf00      	nop
 8009ce0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ce2:	bc08      	pop	{r3}
 8009ce4:	469e      	mov	lr, r3
 8009ce6:	4770      	bx	lr

08009ce8 <_fini>:
 8009ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cea:	bf00      	nop
 8009cec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009cee:	bc08      	pop	{r3}
 8009cf0:	469e      	mov	lr, r3
 8009cf2:	4770      	bx	lr
