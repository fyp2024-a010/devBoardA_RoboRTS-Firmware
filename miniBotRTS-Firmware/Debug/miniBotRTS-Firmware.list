
miniBotRTS-Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013570  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e0  08013720  08013720  00023720  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013b00  08013b00  000301a8  2**0
                  CONTENTS
  4 .ARM          00000008  08013b00  08013b00  00023b00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013b08  08013b08  000301a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013b08  08013b08  00023b08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013b0c  08013b0c  00023b0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001a8  20000000  08013b10  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000301a8  2**0
                  CONTENTS
 10 .bss          00012e4c  200001a8  200001a8  000301a8  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20012ff4  20012ff4  000301a8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000301a8  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000301d8  2**0
                  CONTENTS, READONLY
 14 .debug_info   0002b529  00000000  00000000  0003021b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00007f3e  00000000  00000000  0005b744  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002398  00000000  00000000  00063688  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001afd  00000000  00000000  00065a20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002fe83  00000000  00000000  0006751d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0003648d  00000000  00000000  000973a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000ed9c1  00000000  00000000  000cd82d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000097d4  00000000  00000000  001bb1f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000008a  00000000  00000000  001c49c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001a8 	.word	0x200001a8
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08013708 	.word	0x08013708

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001ac 	.word	0x200001ac
 80001ec:	08013708 	.word	0x08013708

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <__aeabi_drsub>:
 8000200:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000204:	e002      	b.n	800020c <__adddf3>
 8000206:	bf00      	nop

08000208 <__aeabi_dsub>:
 8000208:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800020c <__adddf3>:
 800020c:	b530      	push	{r4, r5, lr}
 800020e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000212:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000216:	ea94 0f05 	teq	r4, r5
 800021a:	bf08      	it	eq
 800021c:	ea90 0f02 	teqeq	r0, r2
 8000220:	bf1f      	itttt	ne
 8000222:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000226:	ea55 0c02 	orrsne.w	ip, r5, r2
 800022a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800022e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000232:	f000 80e2 	beq.w	80003fa <__adddf3+0x1ee>
 8000236:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800023a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800023e:	bfb8      	it	lt
 8000240:	426d      	neglt	r5, r5
 8000242:	dd0c      	ble.n	800025e <__adddf3+0x52>
 8000244:	442c      	add	r4, r5
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	ea82 0000 	eor.w	r0, r2, r0
 8000252:	ea83 0101 	eor.w	r1, r3, r1
 8000256:	ea80 0202 	eor.w	r2, r0, r2
 800025a:	ea81 0303 	eor.w	r3, r1, r3
 800025e:	2d36      	cmp	r5, #54	; 0x36
 8000260:	bf88      	it	hi
 8000262:	bd30      	pophi	{r4, r5, pc}
 8000264:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000268:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800026c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000270:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000274:	d002      	beq.n	800027c <__adddf3+0x70>
 8000276:	4240      	negs	r0, r0
 8000278:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800027c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000280:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000284:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000288:	d002      	beq.n	8000290 <__adddf3+0x84>
 800028a:	4252      	negs	r2, r2
 800028c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000290:	ea94 0f05 	teq	r4, r5
 8000294:	f000 80a7 	beq.w	80003e6 <__adddf3+0x1da>
 8000298:	f1a4 0401 	sub.w	r4, r4, #1
 800029c:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a0:	db0d      	blt.n	80002be <__adddf3+0xb2>
 80002a2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002a6:	fa22 f205 	lsr.w	r2, r2, r5
 80002aa:	1880      	adds	r0, r0, r2
 80002ac:	f141 0100 	adc.w	r1, r1, #0
 80002b0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002b4:	1880      	adds	r0, r0, r2
 80002b6:	fa43 f305 	asr.w	r3, r3, r5
 80002ba:	4159      	adcs	r1, r3
 80002bc:	e00e      	b.n	80002dc <__adddf3+0xd0>
 80002be:	f1a5 0520 	sub.w	r5, r5, #32
 80002c2:	f10e 0e20 	add.w	lr, lr, #32
 80002c6:	2a01      	cmp	r2, #1
 80002c8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002cc:	bf28      	it	cs
 80002ce:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002d2:	fa43 f305 	asr.w	r3, r3, r5
 80002d6:	18c0      	adds	r0, r0, r3
 80002d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e0:	d507      	bpl.n	80002f2 <__adddf3+0xe6>
 80002e2:	f04f 0e00 	mov.w	lr, #0
 80002e6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ea:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ee:	eb6e 0101 	sbc.w	r1, lr, r1
 80002f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002f6:	d31b      	bcc.n	8000330 <__adddf3+0x124>
 80002f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002fc:	d30c      	bcc.n	8000318 <__adddf3+0x10c>
 80002fe:	0849      	lsrs	r1, r1, #1
 8000300:	ea5f 0030 	movs.w	r0, r0, rrx
 8000304:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000308:	f104 0401 	add.w	r4, r4, #1
 800030c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000310:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000314:	f080 809a 	bcs.w	800044c <__adddf3+0x240>
 8000318:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800031c:	bf08      	it	eq
 800031e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000322:	f150 0000 	adcs.w	r0, r0, #0
 8000326:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800032a:	ea41 0105 	orr.w	r1, r1, r5
 800032e:	bd30      	pop	{r4, r5, pc}
 8000330:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000334:	4140      	adcs	r0, r0
 8000336:	eb41 0101 	adc.w	r1, r1, r1
 800033a:	3c01      	subs	r4, #1
 800033c:	bf28      	it	cs
 800033e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000342:	d2e9      	bcs.n	8000318 <__adddf3+0x10c>
 8000344:	f091 0f00 	teq	r1, #0
 8000348:	bf04      	itt	eq
 800034a:	4601      	moveq	r1, r0
 800034c:	2000      	moveq	r0, #0
 800034e:	fab1 f381 	clz	r3, r1
 8000352:	bf08      	it	eq
 8000354:	3320      	addeq	r3, #32
 8000356:	f1a3 030b 	sub.w	r3, r3, #11
 800035a:	f1b3 0220 	subs.w	r2, r3, #32
 800035e:	da0c      	bge.n	800037a <__adddf3+0x16e>
 8000360:	320c      	adds	r2, #12
 8000362:	dd08      	ble.n	8000376 <__adddf3+0x16a>
 8000364:	f102 0c14 	add.w	ip, r2, #20
 8000368:	f1c2 020c 	rsb	r2, r2, #12
 800036c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000370:	fa21 f102 	lsr.w	r1, r1, r2
 8000374:	e00c      	b.n	8000390 <__adddf3+0x184>
 8000376:	f102 0214 	add.w	r2, r2, #20
 800037a:	bfd8      	it	le
 800037c:	f1c2 0c20 	rsble	ip, r2, #32
 8000380:	fa01 f102 	lsl.w	r1, r1, r2
 8000384:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000388:	bfdc      	itt	le
 800038a:	ea41 010c 	orrle.w	r1, r1, ip
 800038e:	4090      	lslle	r0, r2
 8000390:	1ae4      	subs	r4, r4, r3
 8000392:	bfa2      	ittt	ge
 8000394:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000398:	4329      	orrge	r1, r5
 800039a:	bd30      	popge	{r4, r5, pc}
 800039c:	ea6f 0404 	mvn.w	r4, r4
 80003a0:	3c1f      	subs	r4, #31
 80003a2:	da1c      	bge.n	80003de <__adddf3+0x1d2>
 80003a4:	340c      	adds	r4, #12
 80003a6:	dc0e      	bgt.n	80003c6 <__adddf3+0x1ba>
 80003a8:	f104 0414 	add.w	r4, r4, #20
 80003ac:	f1c4 0220 	rsb	r2, r4, #32
 80003b0:	fa20 f004 	lsr.w	r0, r0, r4
 80003b4:	fa01 f302 	lsl.w	r3, r1, r2
 80003b8:	ea40 0003 	orr.w	r0, r0, r3
 80003bc:	fa21 f304 	lsr.w	r3, r1, r4
 80003c0:	ea45 0103 	orr.w	r1, r5, r3
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f1c4 040c 	rsb	r4, r4, #12
 80003ca:	f1c4 0220 	rsb	r2, r4, #32
 80003ce:	fa20 f002 	lsr.w	r0, r0, r2
 80003d2:	fa01 f304 	lsl.w	r3, r1, r4
 80003d6:	ea40 0003 	orr.w	r0, r0, r3
 80003da:	4629      	mov	r1, r5
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	fa21 f004 	lsr.w	r0, r1, r4
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f094 0f00 	teq	r4, #0
 80003ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ee:	bf06      	itte	eq
 80003f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003f4:	3401      	addeq	r4, #1
 80003f6:	3d01      	subne	r5, #1
 80003f8:	e74e      	b.n	8000298 <__adddf3+0x8c>
 80003fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003fe:	bf18      	it	ne
 8000400:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000404:	d029      	beq.n	800045a <__adddf3+0x24e>
 8000406:	ea94 0f05 	teq	r4, r5
 800040a:	bf08      	it	eq
 800040c:	ea90 0f02 	teqeq	r0, r2
 8000410:	d005      	beq.n	800041e <__adddf3+0x212>
 8000412:	ea54 0c00 	orrs.w	ip, r4, r0
 8000416:	bf04      	itt	eq
 8000418:	4619      	moveq	r1, r3
 800041a:	4610      	moveq	r0, r2
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	ea91 0f03 	teq	r1, r3
 8000422:	bf1e      	ittt	ne
 8000424:	2100      	movne	r1, #0
 8000426:	2000      	movne	r0, #0
 8000428:	bd30      	popne	{r4, r5, pc}
 800042a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800042e:	d105      	bne.n	800043c <__adddf3+0x230>
 8000430:	0040      	lsls	r0, r0, #1
 8000432:	4149      	adcs	r1, r1
 8000434:	bf28      	it	cs
 8000436:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800043a:	bd30      	pop	{r4, r5, pc}
 800043c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000440:	bf3c      	itt	cc
 8000442:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000446:	bd30      	popcc	{r4, r5, pc}
 8000448:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800044c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000450:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000454:	f04f 0000 	mov.w	r0, #0
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800045e:	bf1a      	itte	ne
 8000460:	4619      	movne	r1, r3
 8000462:	4610      	movne	r0, r2
 8000464:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000468:	bf1c      	itt	ne
 800046a:	460b      	movne	r3, r1
 800046c:	4602      	movne	r2, r0
 800046e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000472:	bf06      	itte	eq
 8000474:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000478:	ea91 0f03 	teqeq	r1, r3
 800047c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	bf00      	nop

08000484 <__aeabi_ui2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f04f 0500 	mov.w	r5, #0
 800049c:	f04f 0100 	mov.w	r1, #0
 80004a0:	e750      	b.n	8000344 <__adddf3+0x138>
 80004a2:	bf00      	nop

080004a4 <__aeabi_i2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004bc:	bf48      	it	mi
 80004be:	4240      	negmi	r0, r0
 80004c0:	f04f 0100 	mov.w	r1, #0
 80004c4:	e73e      	b.n	8000344 <__adddf3+0x138>
 80004c6:	bf00      	nop

080004c8 <__aeabi_f2d>:
 80004c8:	0042      	lsls	r2, r0, #1
 80004ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ce:	ea4f 0131 	mov.w	r1, r1, rrx
 80004d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004d6:	bf1f      	itttt	ne
 80004d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004e4:	4770      	bxne	lr
 80004e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ea:	bf08      	it	eq
 80004ec:	4770      	bxeq	lr
 80004ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004f2:	bf04      	itt	eq
 80004f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004f8:	4770      	bxeq	lr
 80004fa:	b530      	push	{r4, r5, lr}
 80004fc:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000504:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000508:	e71c      	b.n	8000344 <__adddf3+0x138>
 800050a:	bf00      	nop

0800050c <__aeabi_ul2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f04f 0500 	mov.w	r5, #0
 800051a:	e00a      	b.n	8000532 <__aeabi_l2d+0x16>

0800051c <__aeabi_l2d>:
 800051c:	ea50 0201 	orrs.w	r2, r0, r1
 8000520:	bf08      	it	eq
 8000522:	4770      	bxeq	lr
 8000524:	b530      	push	{r4, r5, lr}
 8000526:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800052a:	d502      	bpl.n	8000532 <__aeabi_l2d+0x16>
 800052c:	4240      	negs	r0, r0
 800052e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000532:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000536:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800053a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800053e:	f43f aed8 	beq.w	80002f2 <__adddf3+0xe6>
 8000542:	f04f 0203 	mov.w	r2, #3
 8000546:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054a:	bf18      	it	ne
 800054c:	3203      	addne	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800055a:	f1c2 0320 	rsb	r3, r2, #32
 800055e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000562:	fa20 f002 	lsr.w	r0, r0, r2
 8000566:	fa01 fe03 	lsl.w	lr, r1, r3
 800056a:	ea40 000e 	orr.w	r0, r0, lr
 800056e:	fa21 f102 	lsr.w	r1, r1, r2
 8000572:	4414      	add	r4, r2
 8000574:	e6bd      	b.n	80002f2 <__adddf3+0xe6>
 8000576:	bf00      	nop

08000578 <__aeabi_dmul>:
 8000578:	b570      	push	{r4, r5, r6, lr}
 800057a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800057e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000582:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000586:	bf1d      	ittte	ne
 8000588:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800058c:	ea94 0f0c 	teqne	r4, ip
 8000590:	ea95 0f0c 	teqne	r5, ip
 8000594:	f000 f8de 	bleq	8000754 <__aeabi_dmul+0x1dc>
 8000598:	442c      	add	r4, r5
 800059a:	ea81 0603 	eor.w	r6, r1, r3
 800059e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005aa:	bf18      	it	ne
 80005ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005b8:	d038      	beq.n	800062c <__aeabi_dmul+0xb4>
 80005ba:	fba0 ce02 	umull	ip, lr, r0, r2
 80005be:	f04f 0500 	mov.w	r5, #0
 80005c2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005c6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ca:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ce:	f04f 0600 	mov.w	r6, #0
 80005d2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005d6:	f09c 0f00 	teq	ip, #0
 80005da:	bf18      	it	ne
 80005dc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005e4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005e8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005ec:	d204      	bcs.n	80005f8 <__aeabi_dmul+0x80>
 80005ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005f2:	416d      	adcs	r5, r5
 80005f4:	eb46 0606 	adc.w	r6, r6, r6
 80005f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000600:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000604:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000608:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800060c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000610:	bf88      	it	hi
 8000612:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000616:	d81e      	bhi.n	8000656 <__aeabi_dmul+0xde>
 8000618:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800061c:	bf08      	it	eq
 800061e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000622:	f150 0000 	adcs.w	r0, r0, #0
 8000626:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000630:	ea46 0101 	orr.w	r1, r6, r1
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	ea81 0103 	eor.w	r1, r1, r3
 800063c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000640:	bfc2      	ittt	gt
 8000642:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000646:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800064a:	bd70      	popgt	{r4, r5, r6, pc}
 800064c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000650:	f04f 0e00 	mov.w	lr, #0
 8000654:	3c01      	subs	r4, #1
 8000656:	f300 80ab 	bgt.w	80007b0 <__aeabi_dmul+0x238>
 800065a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800065e:	bfde      	ittt	le
 8000660:	2000      	movle	r0, #0
 8000662:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000666:	bd70      	pople	{r4, r5, r6, pc}
 8000668:	f1c4 0400 	rsb	r4, r4, #0
 800066c:	3c20      	subs	r4, #32
 800066e:	da35      	bge.n	80006dc <__aeabi_dmul+0x164>
 8000670:	340c      	adds	r4, #12
 8000672:	dc1b      	bgt.n	80006ac <__aeabi_dmul+0x134>
 8000674:	f104 0414 	add.w	r4, r4, #20
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f305 	lsl.w	r3, r0, r5
 8000680:	fa20 f004 	lsr.w	r0, r0, r4
 8000684:	fa01 f205 	lsl.w	r2, r1, r5
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000690:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000694:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000698:	fa21 f604 	lsr.w	r6, r1, r4
 800069c:	eb42 0106 	adc.w	r1, r2, r6
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 040c 	rsb	r4, r4, #12
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f304 	lsl.w	r3, r0, r4
 80006b8:	fa20 f005 	lsr.w	r0, r0, r5
 80006bc:	fa01 f204 	lsl.w	r2, r1, r4
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006cc:	f141 0100 	adc.w	r1, r1, #0
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 0520 	rsb	r5, r4, #32
 80006e0:	fa00 f205 	lsl.w	r2, r0, r5
 80006e4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006e8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ec:	fa01 f205 	lsl.w	r2, r1, r5
 80006f0:	ea43 0302 	orr.w	r3, r3, r2
 80006f4:	fa21 f004 	lsr.w	r0, r1, r4
 80006f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006fc:	fa21 f204 	lsr.w	r2, r1, r4
 8000700:	ea20 0002 	bic.w	r0, r0, r2
 8000704:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f094 0f00 	teq	r4, #0
 8000718:	d10f      	bne.n	800073a <__aeabi_dmul+0x1c2>
 800071a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800071e:	0040      	lsls	r0, r0, #1
 8000720:	eb41 0101 	adc.w	r1, r1, r1
 8000724:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3c01      	subeq	r4, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1a6>
 800072e:	ea41 0106 	orr.w	r1, r1, r6
 8000732:	f095 0f00 	teq	r5, #0
 8000736:	bf18      	it	ne
 8000738:	4770      	bxne	lr
 800073a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800073e:	0052      	lsls	r2, r2, #1
 8000740:	eb43 0303 	adc.w	r3, r3, r3
 8000744:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000748:	bf08      	it	eq
 800074a:	3d01      	subeq	r5, #1
 800074c:	d0f7      	beq.n	800073e <__aeabi_dmul+0x1c6>
 800074e:	ea43 0306 	orr.w	r3, r3, r6
 8000752:	4770      	bx	lr
 8000754:	ea94 0f0c 	teq	r4, ip
 8000758:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800075c:	bf18      	it	ne
 800075e:	ea95 0f0c 	teqne	r5, ip
 8000762:	d00c      	beq.n	800077e <__aeabi_dmul+0x206>
 8000764:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000768:	bf18      	it	ne
 800076a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076e:	d1d1      	bne.n	8000714 <__aeabi_dmul+0x19c>
 8000770:	ea81 0103 	eor.w	r1, r1, r3
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	f04f 0000 	mov.w	r0, #0
 800077c:	bd70      	pop	{r4, r5, r6, pc}
 800077e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000782:	bf06      	itte	eq
 8000784:	4610      	moveq	r0, r2
 8000786:	4619      	moveq	r1, r3
 8000788:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800078c:	d019      	beq.n	80007c2 <__aeabi_dmul+0x24a>
 800078e:	ea94 0f0c 	teq	r4, ip
 8000792:	d102      	bne.n	800079a <__aeabi_dmul+0x222>
 8000794:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000798:	d113      	bne.n	80007c2 <__aeabi_dmul+0x24a>
 800079a:	ea95 0f0c 	teq	r5, ip
 800079e:	d105      	bne.n	80007ac <__aeabi_dmul+0x234>
 80007a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007a4:	bf1c      	itt	ne
 80007a6:	4610      	movne	r0, r2
 80007a8:	4619      	movne	r1, r3
 80007aa:	d10a      	bne.n	80007c2 <__aeabi_dmul+0x24a>
 80007ac:	ea81 0103 	eor.w	r1, r1, r3
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007bc:	f04f 0000 	mov.w	r0, #0
 80007c0:	bd70      	pop	{r4, r5, r6, pc}
 80007c2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ca:	bd70      	pop	{r4, r5, r6, pc}

080007cc <__aeabi_ddiv>:
 80007cc:	b570      	push	{r4, r5, r6, lr}
 80007ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007da:	bf1d      	ittte	ne
 80007dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e0:	ea94 0f0c 	teqne	r4, ip
 80007e4:	ea95 0f0c 	teqne	r5, ip
 80007e8:	f000 f8a7 	bleq	800093a <__aeabi_ddiv+0x16e>
 80007ec:	eba4 0405 	sub.w	r4, r4, r5
 80007f0:	ea81 0e03 	eor.w	lr, r1, r3
 80007f4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007fc:	f000 8088 	beq.w	8000910 <__aeabi_ddiv+0x144>
 8000800:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000804:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000808:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800080c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000810:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000814:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000818:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800081c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000820:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000824:	429d      	cmp	r5, r3
 8000826:	bf08      	it	eq
 8000828:	4296      	cmpeq	r6, r2
 800082a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800082e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000832:	d202      	bcs.n	800083a <__aeabi_ddiv+0x6e>
 8000834:	085b      	lsrs	r3, r3, #1
 8000836:	ea4f 0232 	mov.w	r2, r2, rrx
 800083a:	1ab6      	subs	r6, r6, r2
 800083c:	eb65 0503 	sbc.w	r5, r5, r3
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800084a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008a8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008ac:	d018      	beq.n	80008e0 <__aeabi_ddiv+0x114>
 80008ae:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008b2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008b6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008be:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008c2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008c6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ca:	d1c0      	bne.n	800084e <__aeabi_ddiv+0x82>
 80008cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d0:	d10b      	bne.n	80008ea <__aeabi_ddiv+0x11e>
 80008d2:	ea41 0100 	orr.w	r1, r1, r0
 80008d6:	f04f 0000 	mov.w	r0, #0
 80008da:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008de:	e7b6      	b.n	800084e <__aeabi_ddiv+0x82>
 80008e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e4:	bf04      	itt	eq
 80008e6:	4301      	orreq	r1, r0
 80008e8:	2000      	moveq	r0, #0
 80008ea:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ee:	bf88      	it	hi
 80008f0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008f4:	f63f aeaf 	bhi.w	8000656 <__aeabi_dmul+0xde>
 80008f8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008fc:	bf04      	itt	eq
 80008fe:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000902:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000906:	f150 0000 	adcs.w	r0, r0, #0
 800090a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800090e:	bd70      	pop	{r4, r5, r6, pc}
 8000910:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000914:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000918:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800091c:	bfc2      	ittt	gt
 800091e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000922:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000926:	bd70      	popgt	{r4, r5, r6, pc}
 8000928:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800092c:	f04f 0e00 	mov.w	lr, #0
 8000930:	3c01      	subs	r4, #1
 8000932:	e690      	b.n	8000656 <__aeabi_dmul+0xde>
 8000934:	ea45 0e06 	orr.w	lr, r5, r6
 8000938:	e68d      	b.n	8000656 <__aeabi_dmul+0xde>
 800093a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800093e:	ea94 0f0c 	teq	r4, ip
 8000942:	bf08      	it	eq
 8000944:	ea95 0f0c 	teqeq	r5, ip
 8000948:	f43f af3b 	beq.w	80007c2 <__aeabi_dmul+0x24a>
 800094c:	ea94 0f0c 	teq	r4, ip
 8000950:	d10a      	bne.n	8000968 <__aeabi_ddiv+0x19c>
 8000952:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000956:	f47f af34 	bne.w	80007c2 <__aeabi_dmul+0x24a>
 800095a:	ea95 0f0c 	teq	r5, ip
 800095e:	f47f af25 	bne.w	80007ac <__aeabi_dmul+0x234>
 8000962:	4610      	mov	r0, r2
 8000964:	4619      	mov	r1, r3
 8000966:	e72c      	b.n	80007c2 <__aeabi_dmul+0x24a>
 8000968:	ea95 0f0c 	teq	r5, ip
 800096c:	d106      	bne.n	800097c <__aeabi_ddiv+0x1b0>
 800096e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000972:	f43f aefd 	beq.w	8000770 <__aeabi_dmul+0x1f8>
 8000976:	4610      	mov	r0, r2
 8000978:	4619      	mov	r1, r3
 800097a:	e722      	b.n	80007c2 <__aeabi_dmul+0x24a>
 800097c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000980:	bf18      	it	ne
 8000982:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000986:	f47f aec5 	bne.w	8000714 <__aeabi_dmul+0x19c>
 800098a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800098e:	f47f af0d 	bne.w	80007ac <__aeabi_dmul+0x234>
 8000992:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000996:	f47f aeeb 	bne.w	8000770 <__aeabi_dmul+0x1f8>
 800099a:	e712      	b.n	80007c2 <__aeabi_dmul+0x24a>

0800099c <__gedf2>:
 800099c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009a0:	e006      	b.n	80009b0 <__cmpdf2+0x4>
 80009a2:	bf00      	nop

080009a4 <__ledf2>:
 80009a4:	f04f 0c01 	mov.w	ip, #1
 80009a8:	e002      	b.n	80009b0 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__cmpdf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009b4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009bc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c0:	bf18      	it	ne
 80009c2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009c6:	d01b      	beq.n	8000a00 <__cmpdf2+0x54>
 80009c8:	b001      	add	sp, #4
 80009ca:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ce:	bf0c      	ite	eq
 80009d0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009d4:	ea91 0f03 	teqne	r1, r3
 80009d8:	bf02      	ittt	eq
 80009da:	ea90 0f02 	teqeq	r0, r2
 80009de:	2000      	moveq	r0, #0
 80009e0:	4770      	bxeq	lr
 80009e2:	f110 0f00 	cmn.w	r0, #0
 80009e6:	ea91 0f03 	teq	r1, r3
 80009ea:	bf58      	it	pl
 80009ec:	4299      	cmppl	r1, r3
 80009ee:	bf08      	it	eq
 80009f0:	4290      	cmpeq	r0, r2
 80009f2:	bf2c      	ite	cs
 80009f4:	17d8      	asrcs	r0, r3, #31
 80009f6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009fa:	f040 0001 	orr.w	r0, r0, #1
 80009fe:	4770      	bx	lr
 8000a00:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	d102      	bne.n	8000a10 <__cmpdf2+0x64>
 8000a0a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0e:	d107      	bne.n	8000a20 <__cmpdf2+0x74>
 8000a10:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a18:	d1d6      	bne.n	80009c8 <__cmpdf2+0x1c>
 8000a1a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1e:	d0d3      	beq.n	80009c8 <__cmpdf2+0x1c>
 8000a20:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop

08000a28 <__aeabi_cdrcmple>:
 8000a28:	4684      	mov	ip, r0
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4662      	mov	r2, ip
 8000a2e:	468c      	mov	ip, r1
 8000a30:	4619      	mov	r1, r3
 8000a32:	4663      	mov	r3, ip
 8000a34:	e000      	b.n	8000a38 <__aeabi_cdcmpeq>
 8000a36:	bf00      	nop

08000a38 <__aeabi_cdcmpeq>:
 8000a38:	b501      	push	{r0, lr}
 8000a3a:	f7ff ffb7 	bl	80009ac <__cmpdf2>
 8000a3e:	2800      	cmp	r0, #0
 8000a40:	bf48      	it	mi
 8000a42:	f110 0f00 	cmnmi.w	r0, #0
 8000a46:	bd01      	pop	{r0, pc}

08000a48 <__aeabi_dcmpeq>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff fff4 	bl	8000a38 <__aeabi_cdcmpeq>
 8000a50:	bf0c      	ite	eq
 8000a52:	2001      	moveq	r0, #1
 8000a54:	2000      	movne	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmplt>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffea 	bl	8000a38 <__aeabi_cdcmpeq>
 8000a64:	bf34      	ite	cc
 8000a66:	2001      	movcc	r0, #1
 8000a68:	2000      	movcs	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmple>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffe0 	bl	8000a38 <__aeabi_cdcmpeq>
 8000a78:	bf94      	ite	ls
 8000a7a:	2001      	movls	r0, #1
 8000a7c:	2000      	movhi	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpge>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff ffce 	bl	8000a28 <__aeabi_cdrcmple>
 8000a8c:	bf94      	ite	ls
 8000a8e:	2001      	movls	r0, #1
 8000a90:	2000      	movhi	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_dcmpgt>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff ffc4 	bl	8000a28 <__aeabi_cdrcmple>
 8000aa0:	bf34      	ite	cc
 8000aa2:	2001      	movcc	r0, #1
 8000aa4:	2000      	movcs	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_dcmpun>:
 8000aac:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab4:	d102      	bne.n	8000abc <__aeabi_dcmpun+0x10>
 8000ab6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aba:	d10a      	bne.n	8000ad2 <__aeabi_dcmpun+0x26>
 8000abc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac4:	d102      	bne.n	8000acc <__aeabi_dcmpun+0x20>
 8000ac6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aca:	d102      	bne.n	8000ad2 <__aeabi_dcmpun+0x26>
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	f04f 0001 	mov.w	r0, #1
 8000ad6:	4770      	bx	lr

08000ad8 <__aeabi_d2iz>:
 8000ad8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000adc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ae0:	d215      	bcs.n	8000b0e <__aeabi_d2iz+0x36>
 8000ae2:	d511      	bpl.n	8000b08 <__aeabi_d2iz+0x30>
 8000ae4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ae8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000aec:	d912      	bls.n	8000b14 <__aeabi_d2iz+0x3c>
 8000aee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000af2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000af6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000afa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000afe:	fa23 f002 	lsr.w	r0, r3, r2
 8000b02:	bf18      	it	ne
 8000b04:	4240      	negne	r0, r0
 8000b06:	4770      	bx	lr
 8000b08:	f04f 0000 	mov.w	r0, #0
 8000b0c:	4770      	bx	lr
 8000b0e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b12:	d105      	bne.n	8000b20 <__aeabi_d2iz+0x48>
 8000b14:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b18:	bf08      	it	eq
 8000b1a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b1e:	4770      	bx	lr
 8000b20:	f04f 0000 	mov.w	r0, #0
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_d2f>:
 8000b28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b30:	bf24      	itt	cs
 8000b32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b3a:	d90d      	bls.n	8000b58 <__aeabi_d2f+0x30>
 8000b3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b50:	bf08      	it	eq
 8000b52:	f020 0001 	biceq.w	r0, r0, #1
 8000b56:	4770      	bx	lr
 8000b58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b5c:	d121      	bne.n	8000ba2 <__aeabi_d2f+0x7a>
 8000b5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b62:	bfbc      	itt	lt
 8000b64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b68:	4770      	bxlt	lr
 8000b6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b72:	f1c2 0218 	rsb	r2, r2, #24
 8000b76:	f1c2 0c20 	rsb	ip, r2, #32
 8000b7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b82:	bf18      	it	ne
 8000b84:	f040 0001 	orrne.w	r0, r0, #1
 8000b88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b94:	ea40 000c 	orr.w	r0, r0, ip
 8000b98:	fa23 f302 	lsr.w	r3, r3, r2
 8000b9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ba0:	e7cc      	b.n	8000b3c <__aeabi_d2f+0x14>
 8000ba2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ba6:	d107      	bne.n	8000bb8 <__aeabi_d2f+0x90>
 8000ba8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bac:	bf1e      	ittt	ne
 8000bae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bb6:	4770      	bxne	lr
 8000bb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bdc:	f000 b970 	b.w	8000ec0 <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9e08      	ldr	r6, [sp, #32]
 8000bfe:	460d      	mov	r5, r1
 8000c00:	4604      	mov	r4, r0
 8000c02:	460f      	mov	r7, r1
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d14a      	bne.n	8000c9e <__udivmoddi4+0xa6>
 8000c08:	428a      	cmp	r2, r1
 8000c0a:	4694      	mov	ip, r2
 8000c0c:	d965      	bls.n	8000cda <__udivmoddi4+0xe2>
 8000c0e:	fab2 f382 	clz	r3, r2
 8000c12:	b143      	cbz	r3, 8000c26 <__udivmoddi4+0x2e>
 8000c14:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c18:	f1c3 0220 	rsb	r2, r3, #32
 8000c1c:	409f      	lsls	r7, r3
 8000c1e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c22:	4317      	orrs	r7, r2
 8000c24:	409c      	lsls	r4, r3
 8000c26:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c2a:	fa1f f58c 	uxth.w	r5, ip
 8000c2e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c32:	0c22      	lsrs	r2, r4, #16
 8000c34:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c38:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c3c:	fb01 f005 	mul.w	r0, r1, r5
 8000c40:	4290      	cmp	r0, r2
 8000c42:	d90a      	bls.n	8000c5a <__udivmoddi4+0x62>
 8000c44:	eb1c 0202 	adds.w	r2, ip, r2
 8000c48:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000c4c:	f080 811c 	bcs.w	8000e88 <__udivmoddi4+0x290>
 8000c50:	4290      	cmp	r0, r2
 8000c52:	f240 8119 	bls.w	8000e88 <__udivmoddi4+0x290>
 8000c56:	3902      	subs	r1, #2
 8000c58:	4462      	add	r2, ip
 8000c5a:	1a12      	subs	r2, r2, r0
 8000c5c:	b2a4      	uxth	r4, r4
 8000c5e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c62:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c66:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c6a:	fb00 f505 	mul.w	r5, r0, r5
 8000c6e:	42a5      	cmp	r5, r4
 8000c70:	d90a      	bls.n	8000c88 <__udivmoddi4+0x90>
 8000c72:	eb1c 0404 	adds.w	r4, ip, r4
 8000c76:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000c7a:	f080 8107 	bcs.w	8000e8c <__udivmoddi4+0x294>
 8000c7e:	42a5      	cmp	r5, r4
 8000c80:	f240 8104 	bls.w	8000e8c <__udivmoddi4+0x294>
 8000c84:	4464      	add	r4, ip
 8000c86:	3802      	subs	r0, #2
 8000c88:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c8c:	1b64      	subs	r4, r4, r5
 8000c8e:	2100      	movs	r1, #0
 8000c90:	b11e      	cbz	r6, 8000c9a <__udivmoddi4+0xa2>
 8000c92:	40dc      	lsrs	r4, r3
 8000c94:	2300      	movs	r3, #0
 8000c96:	e9c6 4300 	strd	r4, r3, [r6]
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	428b      	cmp	r3, r1
 8000ca0:	d908      	bls.n	8000cb4 <__udivmoddi4+0xbc>
 8000ca2:	2e00      	cmp	r6, #0
 8000ca4:	f000 80ed 	beq.w	8000e82 <__udivmoddi4+0x28a>
 8000ca8:	2100      	movs	r1, #0
 8000caa:	e9c6 0500 	strd	r0, r5, [r6]
 8000cae:	4608      	mov	r0, r1
 8000cb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb4:	fab3 f183 	clz	r1, r3
 8000cb8:	2900      	cmp	r1, #0
 8000cba:	d149      	bne.n	8000d50 <__udivmoddi4+0x158>
 8000cbc:	42ab      	cmp	r3, r5
 8000cbe:	d302      	bcc.n	8000cc6 <__udivmoddi4+0xce>
 8000cc0:	4282      	cmp	r2, r0
 8000cc2:	f200 80f8 	bhi.w	8000eb6 <__udivmoddi4+0x2be>
 8000cc6:	1a84      	subs	r4, r0, r2
 8000cc8:	eb65 0203 	sbc.w	r2, r5, r3
 8000ccc:	2001      	movs	r0, #1
 8000cce:	4617      	mov	r7, r2
 8000cd0:	2e00      	cmp	r6, #0
 8000cd2:	d0e2      	beq.n	8000c9a <__udivmoddi4+0xa2>
 8000cd4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cd8:	e7df      	b.n	8000c9a <__udivmoddi4+0xa2>
 8000cda:	b902      	cbnz	r2, 8000cde <__udivmoddi4+0xe6>
 8000cdc:	deff      	udf	#255	; 0xff
 8000cde:	fab2 f382 	clz	r3, r2
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	f040 8090 	bne.w	8000e08 <__udivmoddi4+0x210>
 8000ce8:	1a8a      	subs	r2, r1, r2
 8000cea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cee:	fa1f fe8c 	uxth.w	lr, ip
 8000cf2:	2101      	movs	r1, #1
 8000cf4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cf8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cfc:	0c22      	lsrs	r2, r4, #16
 8000cfe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d02:	fb0e f005 	mul.w	r0, lr, r5
 8000d06:	4290      	cmp	r0, r2
 8000d08:	d908      	bls.n	8000d1c <__udivmoddi4+0x124>
 8000d0a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d0e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x122>
 8000d14:	4290      	cmp	r0, r2
 8000d16:	f200 80cb 	bhi.w	8000eb0 <__udivmoddi4+0x2b8>
 8000d1a:	4645      	mov	r5, r8
 8000d1c:	1a12      	subs	r2, r2, r0
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d24:	fb07 2210 	mls	r2, r7, r0, r2
 8000d28:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d2c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d30:	45a6      	cmp	lr, r4
 8000d32:	d908      	bls.n	8000d46 <__udivmoddi4+0x14e>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d3c:	d202      	bcs.n	8000d44 <__udivmoddi4+0x14c>
 8000d3e:	45a6      	cmp	lr, r4
 8000d40:	f200 80bb 	bhi.w	8000eba <__udivmoddi4+0x2c2>
 8000d44:	4610      	mov	r0, r2
 8000d46:	eba4 040e 	sub.w	r4, r4, lr
 8000d4a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d4e:	e79f      	b.n	8000c90 <__udivmoddi4+0x98>
 8000d50:	f1c1 0720 	rsb	r7, r1, #32
 8000d54:	408b      	lsls	r3, r1
 8000d56:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d5a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d5e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d62:	fa20 f307 	lsr.w	r3, r0, r7
 8000d66:	40fd      	lsrs	r5, r7
 8000d68:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d6c:	4323      	orrs	r3, r4
 8000d6e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d72:	fa1f fe8c 	uxth.w	lr, ip
 8000d76:	fb09 5518 	mls	r5, r9, r8, r5
 8000d7a:	0c1c      	lsrs	r4, r3, #16
 8000d7c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d80:	fb08 f50e 	mul.w	r5, r8, lr
 8000d84:	42a5      	cmp	r5, r4
 8000d86:	fa02 f201 	lsl.w	r2, r2, r1
 8000d8a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d8e:	d90b      	bls.n	8000da8 <__udivmoddi4+0x1b0>
 8000d90:	eb1c 0404 	adds.w	r4, ip, r4
 8000d94:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d98:	f080 8088 	bcs.w	8000eac <__udivmoddi4+0x2b4>
 8000d9c:	42a5      	cmp	r5, r4
 8000d9e:	f240 8085 	bls.w	8000eac <__udivmoddi4+0x2b4>
 8000da2:	f1a8 0802 	sub.w	r8, r8, #2
 8000da6:	4464      	add	r4, ip
 8000da8:	1b64      	subs	r4, r4, r5
 8000daa:	b29d      	uxth	r5, r3
 8000dac:	fbb4 f3f9 	udiv	r3, r4, r9
 8000db0:	fb09 4413 	mls	r4, r9, r3, r4
 8000db4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000db8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dbc:	45a6      	cmp	lr, r4
 8000dbe:	d908      	bls.n	8000dd2 <__udivmoddi4+0x1da>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000dc8:	d26c      	bcs.n	8000ea4 <__udivmoddi4+0x2ac>
 8000dca:	45a6      	cmp	lr, r4
 8000dcc:	d96a      	bls.n	8000ea4 <__udivmoddi4+0x2ac>
 8000dce:	3b02      	subs	r3, #2
 8000dd0:	4464      	add	r4, ip
 8000dd2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dd6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dda:	eba4 040e 	sub.w	r4, r4, lr
 8000dde:	42ac      	cmp	r4, r5
 8000de0:	46c8      	mov	r8, r9
 8000de2:	46ae      	mov	lr, r5
 8000de4:	d356      	bcc.n	8000e94 <__udivmoddi4+0x29c>
 8000de6:	d053      	beq.n	8000e90 <__udivmoddi4+0x298>
 8000de8:	b156      	cbz	r6, 8000e00 <__udivmoddi4+0x208>
 8000dea:	ebb0 0208 	subs.w	r2, r0, r8
 8000dee:	eb64 040e 	sbc.w	r4, r4, lr
 8000df2:	fa04 f707 	lsl.w	r7, r4, r7
 8000df6:	40ca      	lsrs	r2, r1
 8000df8:	40cc      	lsrs	r4, r1
 8000dfa:	4317      	orrs	r7, r2
 8000dfc:	e9c6 7400 	strd	r7, r4, [r6]
 8000e00:	4618      	mov	r0, r3
 8000e02:	2100      	movs	r1, #0
 8000e04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e08:	f1c3 0120 	rsb	r1, r3, #32
 8000e0c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e10:	fa20 f201 	lsr.w	r2, r0, r1
 8000e14:	fa25 f101 	lsr.w	r1, r5, r1
 8000e18:	409d      	lsls	r5, r3
 8000e1a:	432a      	orrs	r2, r5
 8000e1c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e20:	fa1f fe8c 	uxth.w	lr, ip
 8000e24:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e28:	fb07 1510 	mls	r5, r7, r0, r1
 8000e2c:	0c11      	lsrs	r1, r2, #16
 8000e2e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e32:	fb00 f50e 	mul.w	r5, r0, lr
 8000e36:	428d      	cmp	r5, r1
 8000e38:	fa04 f403 	lsl.w	r4, r4, r3
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x258>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e46:	d22f      	bcs.n	8000ea8 <__udivmoddi4+0x2b0>
 8000e48:	428d      	cmp	r5, r1
 8000e4a:	d92d      	bls.n	8000ea8 <__udivmoddi4+0x2b0>
 8000e4c:	3802      	subs	r0, #2
 8000e4e:	4461      	add	r1, ip
 8000e50:	1b49      	subs	r1, r1, r5
 8000e52:	b292      	uxth	r2, r2
 8000e54:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e58:	fb07 1115 	mls	r1, r7, r5, r1
 8000e5c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e60:	fb05 f10e 	mul.w	r1, r5, lr
 8000e64:	4291      	cmp	r1, r2
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x282>
 8000e68:	eb1c 0202 	adds.w	r2, ip, r2
 8000e6c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e70:	d216      	bcs.n	8000ea0 <__udivmoddi4+0x2a8>
 8000e72:	4291      	cmp	r1, r2
 8000e74:	d914      	bls.n	8000ea0 <__udivmoddi4+0x2a8>
 8000e76:	3d02      	subs	r5, #2
 8000e78:	4462      	add	r2, ip
 8000e7a:	1a52      	subs	r2, r2, r1
 8000e7c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e80:	e738      	b.n	8000cf4 <__udivmoddi4+0xfc>
 8000e82:	4631      	mov	r1, r6
 8000e84:	4630      	mov	r0, r6
 8000e86:	e708      	b.n	8000c9a <__udivmoddi4+0xa2>
 8000e88:	4639      	mov	r1, r7
 8000e8a:	e6e6      	b.n	8000c5a <__udivmoddi4+0x62>
 8000e8c:	4610      	mov	r0, r2
 8000e8e:	e6fb      	b.n	8000c88 <__udivmoddi4+0x90>
 8000e90:	4548      	cmp	r0, r9
 8000e92:	d2a9      	bcs.n	8000de8 <__udivmoddi4+0x1f0>
 8000e94:	ebb9 0802 	subs.w	r8, r9, r2
 8000e98:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e9c:	3b01      	subs	r3, #1
 8000e9e:	e7a3      	b.n	8000de8 <__udivmoddi4+0x1f0>
 8000ea0:	4645      	mov	r5, r8
 8000ea2:	e7ea      	b.n	8000e7a <__udivmoddi4+0x282>
 8000ea4:	462b      	mov	r3, r5
 8000ea6:	e794      	b.n	8000dd2 <__udivmoddi4+0x1da>
 8000ea8:	4640      	mov	r0, r8
 8000eaa:	e7d1      	b.n	8000e50 <__udivmoddi4+0x258>
 8000eac:	46d0      	mov	r8, sl
 8000eae:	e77b      	b.n	8000da8 <__udivmoddi4+0x1b0>
 8000eb0:	3d02      	subs	r5, #2
 8000eb2:	4462      	add	r2, ip
 8000eb4:	e732      	b.n	8000d1c <__udivmoddi4+0x124>
 8000eb6:	4608      	mov	r0, r1
 8000eb8:	e70a      	b.n	8000cd0 <__udivmoddi4+0xd8>
 8000eba:	4464      	add	r4, ip
 8000ebc:	3802      	subs	r0, #2
 8000ebe:	e742      	b.n	8000d46 <__udivmoddi4+0x14e>

08000ec0 <__aeabi_idiv0>:
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop

08000ec4 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000ec8:	4b17      	ldr	r3, [pc, #92]	; (8000f28 <MX_CAN1_Init+0x64>)
 8000eca:	4a18      	ldr	r2, [pc, #96]	; (8000f2c <MX_CAN1_Init+0x68>)
 8000ecc:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 7;
 8000ece:	4b16      	ldr	r3, [pc, #88]	; (8000f28 <MX_CAN1_Init+0x64>)
 8000ed0:	2207      	movs	r2, #7
 8000ed2:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000ed4:	4b14      	ldr	r3, [pc, #80]	; (8000f28 <MX_CAN1_Init+0x64>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000eda:	4b13      	ldr	r3, [pc, #76]	; (8000f28 <MX_CAN1_Init+0x64>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000ee0:	4b11      	ldr	r3, [pc, #68]	; (8000f28 <MX_CAN1_Init+0x64>)
 8000ee2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000ee6:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000ee8:	4b0f      	ldr	r3, [pc, #60]	; (8000f28 <MX_CAN1_Init+0x64>)
 8000eea:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000eee:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000ef0:	4b0d      	ldr	r3, [pc, #52]	; (8000f28 <MX_CAN1_Init+0x64>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000ef6:	4b0c      	ldr	r3, [pc, #48]	; (8000f28 <MX_CAN1_Init+0x64>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000efc:	4b0a      	ldr	r3, [pc, #40]	; (8000f28 <MX_CAN1_Init+0x64>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000f02:	4b09      	ldr	r3, [pc, #36]	; (8000f28 <MX_CAN1_Init+0x64>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000f08:	4b07      	ldr	r3, [pc, #28]	; (8000f28 <MX_CAN1_Init+0x64>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = ENABLE;
 8000f0e:	4b06      	ldr	r3, [pc, #24]	; (8000f28 <MX_CAN1_Init+0x64>)
 8000f10:	2201      	movs	r2, #1
 8000f12:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000f14:	4804      	ldr	r0, [pc, #16]	; (8000f28 <MX_CAN1_Init+0x64>)
 8000f16:	f001 f9c3 	bl	80022a0 <HAL_CAN_Init>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d001      	beq.n	8000f24 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000f20:	f000 fbac 	bl	800167c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000f24:	bf00      	nop
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	200001c4 	.word	0x200001c4
 8000f2c:	40006400 	.word	0x40006400

08000f30 <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8000f34:	4b16      	ldr	r3, [pc, #88]	; (8000f90 <MX_CAN2_Init+0x60>)
 8000f36:	4a17      	ldr	r2, [pc, #92]	; (8000f94 <MX_CAN2_Init+0x64>)
 8000f38:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 16;
 8000f3a:	4b15      	ldr	r3, [pc, #84]	; (8000f90 <MX_CAN2_Init+0x60>)
 8000f3c:	2210      	movs	r2, #16
 8000f3e:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000f40:	4b13      	ldr	r3, [pc, #76]	; (8000f90 <MX_CAN2_Init+0x60>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000f46:	4b12      	ldr	r3, [pc, #72]	; (8000f90 <MX_CAN2_Init+0x60>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000f4c:	4b10      	ldr	r3, [pc, #64]	; (8000f90 <MX_CAN2_Init+0x60>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000f52:	4b0f      	ldr	r3, [pc, #60]	; (8000f90 <MX_CAN2_Init+0x60>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000f58:	4b0d      	ldr	r3, [pc, #52]	; (8000f90 <MX_CAN2_Init+0x60>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8000f5e:	4b0c      	ldr	r3, [pc, #48]	; (8000f90 <MX_CAN2_Init+0x60>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000f64:	4b0a      	ldr	r3, [pc, #40]	; (8000f90 <MX_CAN2_Init+0x60>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8000f6a:	4b09      	ldr	r3, [pc, #36]	; (8000f90 <MX_CAN2_Init+0x60>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000f70:	4b07      	ldr	r3, [pc, #28]	; (8000f90 <MX_CAN2_Init+0x60>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8000f76:	4b06      	ldr	r3, [pc, #24]	; (8000f90 <MX_CAN2_Init+0x60>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000f7c:	4804      	ldr	r0, [pc, #16]	; (8000f90 <MX_CAN2_Init+0x60>)
 8000f7e:	f001 f98f 	bl	80022a0 <HAL_CAN_Init>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <MX_CAN2_Init+0x5c>
  {
    Error_Handler();
 8000f88:	f000 fb78 	bl	800167c <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8000f8c:	bf00      	nop
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	200001ec 	.word	0x200001ec
 8000f94:	40006800 	.word	0x40006800

08000f98 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b08c      	sub	sp, #48	; 0x30
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa0:	f107 031c 	add.w	r3, r7, #28
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]
 8000fa8:	605a      	str	r2, [r3, #4]
 8000faa:	609a      	str	r2, [r3, #8]
 8000fac:	60da      	str	r2, [r3, #12]
 8000fae:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a4a      	ldr	r2, [pc, #296]	; (80010e0 <HAL_CAN_MspInit+0x148>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d145      	bne.n	8001046 <HAL_CAN_MspInit+0xae>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000fba:	4b4a      	ldr	r3, [pc, #296]	; (80010e4 <HAL_CAN_MspInit+0x14c>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	3301      	adds	r3, #1
 8000fc0:	4a48      	ldr	r2, [pc, #288]	; (80010e4 <HAL_CAN_MspInit+0x14c>)
 8000fc2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000fc4:	4b47      	ldr	r3, [pc, #284]	; (80010e4 <HAL_CAN_MspInit+0x14c>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	2b01      	cmp	r3, #1
 8000fca:	d10d      	bne.n	8000fe8 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000fcc:	2300      	movs	r3, #0
 8000fce:	61bb      	str	r3, [r7, #24]
 8000fd0:	4b45      	ldr	r3, [pc, #276]	; (80010e8 <HAL_CAN_MspInit+0x150>)
 8000fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd4:	4a44      	ldr	r2, [pc, #272]	; (80010e8 <HAL_CAN_MspInit+0x150>)
 8000fd6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000fda:	6413      	str	r3, [r2, #64]	; 0x40
 8000fdc:	4b42      	ldr	r3, [pc, #264]	; (80010e8 <HAL_CAN_MspInit+0x150>)
 8000fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fe4:	61bb      	str	r3, [r7, #24]
 8000fe6:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fe8:	2300      	movs	r3, #0
 8000fea:	617b      	str	r3, [r7, #20]
 8000fec:	4b3e      	ldr	r3, [pc, #248]	; (80010e8 <HAL_CAN_MspInit+0x150>)
 8000fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff0:	4a3d      	ldr	r2, [pc, #244]	; (80010e8 <HAL_CAN_MspInit+0x150>)
 8000ff2:	f043 0308 	orr.w	r3, r3, #8
 8000ff6:	6313      	str	r3, [r2, #48]	; 0x30
 8000ff8:	4b3b      	ldr	r3, [pc, #236]	; (80010e8 <HAL_CAN_MspInit+0x150>)
 8000ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffc:	f003 0308 	and.w	r3, r3, #8
 8001000:	617b      	str	r3, [r7, #20]
 8001002:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001004:	2303      	movs	r3, #3
 8001006:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001008:	2302      	movs	r3, #2
 800100a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100c:	2300      	movs	r3, #0
 800100e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001010:	2303      	movs	r3, #3
 8001012:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001014:	2309      	movs	r3, #9
 8001016:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001018:	f107 031c 	add.w	r3, r7, #28
 800101c:	4619      	mov	r1, r3
 800101e:	4833      	ldr	r0, [pc, #204]	; (80010ec <HAL_CAN_MspInit+0x154>)
 8001020:	f002 fc34 	bl	800388c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 8001024:	2200      	movs	r2, #0
 8001026:	2105      	movs	r1, #5
 8001028:	2013      	movs	r0, #19
 800102a:	f002 f889 	bl	8003140 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 800102e:	2013      	movs	r0, #19
 8001030:	f002 f8a2 	bl	8003178 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8001034:	2200      	movs	r2, #0
 8001036:	2105      	movs	r1, #5
 8001038:	2014      	movs	r0, #20
 800103a:	f002 f881 	bl	8003140 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800103e:	2014      	movs	r0, #20
 8001040:	f002 f89a 	bl	8003178 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 8001044:	e048      	b.n	80010d8 <HAL_CAN_MspInit+0x140>
  else if(canHandle->Instance==CAN2)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4a29      	ldr	r2, [pc, #164]	; (80010f0 <HAL_CAN_MspInit+0x158>)
 800104c:	4293      	cmp	r3, r2
 800104e:	d143      	bne.n	80010d8 <HAL_CAN_MspInit+0x140>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8001050:	2300      	movs	r3, #0
 8001052:	613b      	str	r3, [r7, #16]
 8001054:	4b24      	ldr	r3, [pc, #144]	; (80010e8 <HAL_CAN_MspInit+0x150>)
 8001056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001058:	4a23      	ldr	r2, [pc, #140]	; (80010e8 <HAL_CAN_MspInit+0x150>)
 800105a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800105e:	6413      	str	r3, [r2, #64]	; 0x40
 8001060:	4b21      	ldr	r3, [pc, #132]	; (80010e8 <HAL_CAN_MspInit+0x150>)
 8001062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001064:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001068:	613b      	str	r3, [r7, #16]
 800106a:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 800106c:	4b1d      	ldr	r3, [pc, #116]	; (80010e4 <HAL_CAN_MspInit+0x14c>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	3301      	adds	r3, #1
 8001072:	4a1c      	ldr	r2, [pc, #112]	; (80010e4 <HAL_CAN_MspInit+0x14c>)
 8001074:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001076:	4b1b      	ldr	r3, [pc, #108]	; (80010e4 <HAL_CAN_MspInit+0x14c>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	2b01      	cmp	r3, #1
 800107c:	d10d      	bne.n	800109a <HAL_CAN_MspInit+0x102>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800107e:	2300      	movs	r3, #0
 8001080:	60fb      	str	r3, [r7, #12]
 8001082:	4b19      	ldr	r3, [pc, #100]	; (80010e8 <HAL_CAN_MspInit+0x150>)
 8001084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001086:	4a18      	ldr	r2, [pc, #96]	; (80010e8 <HAL_CAN_MspInit+0x150>)
 8001088:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800108c:	6413      	str	r3, [r2, #64]	; 0x40
 800108e:	4b16      	ldr	r3, [pc, #88]	; (80010e8 <HAL_CAN_MspInit+0x150>)
 8001090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001092:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001096:	60fb      	str	r3, [r7, #12]
 8001098:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800109a:	2300      	movs	r3, #0
 800109c:	60bb      	str	r3, [r7, #8]
 800109e:	4b12      	ldr	r3, [pc, #72]	; (80010e8 <HAL_CAN_MspInit+0x150>)
 80010a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a2:	4a11      	ldr	r2, [pc, #68]	; (80010e8 <HAL_CAN_MspInit+0x150>)
 80010a4:	f043 0302 	orr.w	r3, r3, #2
 80010a8:	6313      	str	r3, [r2, #48]	; 0x30
 80010aa:	4b0f      	ldr	r3, [pc, #60]	; (80010e8 <HAL_CAN_MspInit+0x150>)
 80010ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ae:	f003 0302 	and.w	r3, r3, #2
 80010b2:	60bb      	str	r3, [r7, #8]
 80010b4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80010b6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80010ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010bc:	2302      	movs	r3, #2
 80010be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c0:	2300      	movs	r3, #0
 80010c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010c4:	2303      	movs	r3, #3
 80010c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 80010c8:	2309      	movs	r3, #9
 80010ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010cc:	f107 031c 	add.w	r3, r7, #28
 80010d0:	4619      	mov	r1, r3
 80010d2:	4808      	ldr	r0, [pc, #32]	; (80010f4 <HAL_CAN_MspInit+0x15c>)
 80010d4:	f002 fbda 	bl	800388c <HAL_GPIO_Init>
}
 80010d8:	bf00      	nop
 80010da:	3730      	adds	r7, #48	; 0x30
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	40006400 	.word	0x40006400
 80010e4:	20000214 	.word	0x20000214
 80010e8:	40023800 	.word	0x40023800
 80010ec:	40020c00 	.word	0x40020c00
 80010f0:	40006800 	.word	0x40006800
 80010f4:	40020400 	.word	0x40020400

080010f8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80010fe:	2300      	movs	r3, #0
 8001100:	607b      	str	r3, [r7, #4]
 8001102:	4b10      	ldr	r3, [pc, #64]	; (8001144 <MX_DMA_Init+0x4c>)
 8001104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001106:	4a0f      	ldr	r2, [pc, #60]	; (8001144 <MX_DMA_Init+0x4c>)
 8001108:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800110c:	6313      	str	r3, [r2, #48]	; 0x30
 800110e:	4b0d      	ldr	r3, [pc, #52]	; (8001144 <MX_DMA_Init+0x4c>)
 8001110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001112:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001116:	607b      	str	r3, [r7, #4]
 8001118:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 800111a:	2200      	movs	r2, #0
 800111c:	2105      	movs	r1, #5
 800111e:	2039      	movs	r0, #57	; 0x39
 8001120:	f002 f80e 	bl	8003140 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001124:	2039      	movs	r0, #57	; 0x39
 8001126:	f002 f827 	bl	8003178 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 800112a:	2200      	movs	r2, #0
 800112c:	2105      	movs	r1, #5
 800112e:	2045      	movs	r0, #69	; 0x45
 8001130:	f002 f806 	bl	8003140 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8001134:	2045      	movs	r0, #69	; 0x45
 8001136:	f002 f81f 	bl	8003178 <HAL_NVIC_EnableIRQ>

}
 800113a:	bf00      	nop
 800113c:	3708      	adds	r7, #8
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	40023800 	.word	0x40023800

08001148 <vApplicationStackOverflowHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
 8001150:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8001152:	bf00      	nop
 8001154:	370c      	adds	r7, #12
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr

0800115e <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 800115e:	b480      	push	{r7}
 8001160:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8001162:	bf00      	nop
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr

0800116c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800116c:	b5b0      	push	{r4, r5, r7, lr}
 800116e:	b086      	sub	sp, #24
 8001170:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8001172:	4b09      	ldr	r3, [pc, #36]	; (8001198 <MX_FREERTOS_Init+0x2c>)
 8001174:	1d3c      	adds	r4, r7, #4
 8001176:	461d      	mov	r5, r3
 8001178:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800117a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800117c:	682b      	ldr	r3, [r5, #0]
 800117e:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001180:	1d3b      	adds	r3, r7, #4
 8001182:	2100      	movs	r1, #0
 8001184:	4618      	mov	r0, r3
 8001186:	f00a f944 	bl	800b412 <osThreadCreate>
 800118a:	4603      	mov	r3, r0
 800118c:	4a03      	ldr	r2, [pc, #12]	; (800119c <MX_FREERTOS_Init+0x30>)
 800118e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8001190:	bf00      	nop
 8001192:	3718      	adds	r7, #24
 8001194:	46bd      	mov	sp, r7
 8001196:	bdb0      	pop	{r4, r5, r7, pc}
 8001198:	0801372c 	.word	0x0801372c
 800119c:	20000218 	.word	0x20000218

080011a0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80011a8:	f00b fbf4 	bl	800c994 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80011ac:	2001      	movs	r0, #1
 80011ae:	f00a f957 	bl	800b460 <osDelay>
 80011b2:	e7fb      	b.n	80011ac <StartDefaultTask+0xc>

080011b4 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b08e      	sub	sp, #56	; 0x38
 80011b8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011be:	2200      	movs	r2, #0
 80011c0:	601a      	str	r2, [r3, #0]
 80011c2:	605a      	str	r2, [r3, #4]
 80011c4:	609a      	str	r2, [r3, #8]
 80011c6:	60da      	str	r2, [r3, #12]
 80011c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80011ca:	2300      	movs	r3, #0
 80011cc:	623b      	str	r3, [r7, #32]
 80011ce:	4bb3      	ldr	r3, [pc, #716]	; (800149c <MX_GPIO_Init+0x2e8>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d2:	4ab2      	ldr	r2, [pc, #712]	; (800149c <MX_GPIO_Init+0x2e8>)
 80011d4:	f043 0310 	orr.w	r3, r3, #16
 80011d8:	6313      	str	r3, [r2, #48]	; 0x30
 80011da:	4bb0      	ldr	r3, [pc, #704]	; (800149c <MX_GPIO_Init+0x2e8>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011de:	f003 0310 	and.w	r3, r3, #16
 80011e2:	623b      	str	r3, [r7, #32]
 80011e4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011e6:	2300      	movs	r3, #0
 80011e8:	61fb      	str	r3, [r7, #28]
 80011ea:	4bac      	ldr	r3, [pc, #688]	; (800149c <MX_GPIO_Init+0x2e8>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ee:	4aab      	ldr	r2, [pc, #684]	; (800149c <MX_GPIO_Init+0x2e8>)
 80011f0:	f043 0302 	orr.w	r3, r3, #2
 80011f4:	6313      	str	r3, [r2, #48]	; 0x30
 80011f6:	4ba9      	ldr	r3, [pc, #676]	; (800149c <MX_GPIO_Init+0x2e8>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fa:	f003 0302 	and.w	r3, r3, #2
 80011fe:	61fb      	str	r3, [r7, #28]
 8001200:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001202:	2300      	movs	r3, #0
 8001204:	61bb      	str	r3, [r7, #24]
 8001206:	4ba5      	ldr	r3, [pc, #660]	; (800149c <MX_GPIO_Init+0x2e8>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120a:	4aa4      	ldr	r2, [pc, #656]	; (800149c <MX_GPIO_Init+0x2e8>)
 800120c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001210:	6313      	str	r3, [r2, #48]	; 0x30
 8001212:	4ba2      	ldr	r3, [pc, #648]	; (800149c <MX_GPIO_Init+0x2e8>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001216:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800121a:	61bb      	str	r3, [r7, #24]
 800121c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800121e:	2300      	movs	r3, #0
 8001220:	617b      	str	r3, [r7, #20]
 8001222:	4b9e      	ldr	r3, [pc, #632]	; (800149c <MX_GPIO_Init+0x2e8>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001226:	4a9d      	ldr	r2, [pc, #628]	; (800149c <MX_GPIO_Init+0x2e8>)
 8001228:	f043 0308 	orr.w	r3, r3, #8
 800122c:	6313      	str	r3, [r2, #48]	; 0x30
 800122e:	4b9b      	ldr	r3, [pc, #620]	; (800149c <MX_GPIO_Init+0x2e8>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001232:	f003 0308 	and.w	r3, r3, #8
 8001236:	617b      	str	r3, [r7, #20]
 8001238:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800123a:	2300      	movs	r3, #0
 800123c:	613b      	str	r3, [r7, #16]
 800123e:	4b97      	ldr	r3, [pc, #604]	; (800149c <MX_GPIO_Init+0x2e8>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001242:	4a96      	ldr	r2, [pc, #600]	; (800149c <MX_GPIO_Init+0x2e8>)
 8001244:	f043 0304 	orr.w	r3, r3, #4
 8001248:	6313      	str	r3, [r2, #48]	; 0x30
 800124a:	4b94      	ldr	r3, [pc, #592]	; (800149c <MX_GPIO_Init+0x2e8>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124e:	f003 0304 	and.w	r3, r3, #4
 8001252:	613b      	str	r3, [r7, #16]
 8001254:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001256:	2300      	movs	r3, #0
 8001258:	60fb      	str	r3, [r7, #12]
 800125a:	4b90      	ldr	r3, [pc, #576]	; (800149c <MX_GPIO_Init+0x2e8>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125e:	4a8f      	ldr	r2, [pc, #572]	; (800149c <MX_GPIO_Init+0x2e8>)
 8001260:	f043 0301 	orr.w	r3, r3, #1
 8001264:	6313      	str	r3, [r2, #48]	; 0x30
 8001266:	4b8d      	ldr	r3, [pc, #564]	; (800149c <MX_GPIO_Init+0x2e8>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126a:	f003 0301 	and.w	r3, r3, #1
 800126e:	60fb      	str	r3, [r7, #12]
 8001270:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001272:	2300      	movs	r3, #0
 8001274:	60bb      	str	r3, [r7, #8]
 8001276:	4b89      	ldr	r3, [pc, #548]	; (800149c <MX_GPIO_Init+0x2e8>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127a:	4a88      	ldr	r2, [pc, #544]	; (800149c <MX_GPIO_Init+0x2e8>)
 800127c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001280:	6313      	str	r3, [r2, #48]	; 0x30
 8001282:	4b86      	ldr	r3, [pc, #536]	; (800149c <MX_GPIO_Init+0x2e8>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800128a:	60bb      	str	r3, [r7, #8]
 800128c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800128e:	2300      	movs	r3, #0
 8001290:	607b      	str	r3, [r7, #4]
 8001292:	4b82      	ldr	r3, [pc, #520]	; (800149c <MX_GPIO_Init+0x2e8>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001296:	4a81      	ldr	r2, [pc, #516]	; (800149c <MX_GPIO_Init+0x2e8>)
 8001298:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800129c:	6313      	str	r3, [r2, #48]	; 0x30
 800129e:	4b7f      	ldr	r3, [pc, #508]	; (800149c <MX_GPIO_Init+0x2e8>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012a6:	607b      	str	r3, [r7, #4]
 80012a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80012aa:	2300      	movs	r3, #0
 80012ac:	603b      	str	r3, [r7, #0]
 80012ae:	4b7b      	ldr	r3, [pc, #492]	; (800149c <MX_GPIO_Init+0x2e8>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b2:	4a7a      	ldr	r2, [pc, #488]	; (800149c <MX_GPIO_Init+0x2e8>)
 80012b4:	f043 0320 	orr.w	r3, r3, #32
 80012b8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ba:	4b78      	ldr	r3, [pc, #480]	; (800149c <MX_GPIO_Init+0x2e8>)
 80012bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012be:	f003 0320 	and.w	r3, r3, #32
 80012c2:	603b      	str	r3, [r7, #0]
 80012c4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, IST_RESET_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 80012c6:	2200      	movs	r2, #0
 80012c8:	f640 0104 	movw	r1, #2052	; 0x804
 80012cc:	4874      	ldr	r0, [pc, #464]	; (80014a0 <MX_GPIO_Init+0x2ec>)
 80012ce:	f002 fc89 	bl	8003be4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, POWER1_CTRL_Pin|POWER2_CTRL_Pin|POWER3_CTRL_Pin|POWER4_CTRL_Pin, GPIO_PIN_RESET);
 80012d2:	2200      	movs	r2, #0
 80012d4:	213c      	movs	r1, #60	; 0x3c
 80012d6:	4873      	ldr	r0, [pc, #460]	; (80014a4 <MX_GPIO_Init+0x2f0>)
 80012d8:	f002 fc84 	bl	8003be4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LED_A_Pin|LED_B_Pin|LED_C_Pin|LED_D_Pin
 80012dc:	2200      	movs	r2, #0
 80012de:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
 80012e2:	4871      	ldr	r0, [pc, #452]	; (80014a8 <MX_GPIO_Init+0x2f4>)
 80012e4:	f002 fc7e 	bl	8003be4 <HAL_GPIO_WritePin>
                          |LED_E_Pin|LED_F_Pin|LED_G_Pin|LED_H_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, SPI5_NSS_Pin|LED_GREEN_Pin, GPIO_PIN_RESET);
 80012e8:	2200      	movs	r2, #0
 80012ea:	f244 0140 	movw	r1, #16448	; 0x4040
 80012ee:	486f      	ldr	r0, [pc, #444]	; (80014ac <MX_GPIO_Init+0x2f8>)
 80012f0:	f002 fc78 	bl	8003be4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IO_PROBE_GPIO_Port, IO_PROBE_Pin, GPIO_PIN_RESET);
 80012f4:	2200      	movs	r2, #0
 80012f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012fa:	486d      	ldr	r0, [pc, #436]	; (80014b0 <MX_GPIO_Init+0x2fc>)
 80012fc:	f002 fc72 	bl	8003be4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE3 PE1 PE0 PE4
                           PE5 PE6 PE13 PE8
                           PE9 PE7 PE10 PE12
                           PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_4
 8001300:	f24b 73fb 	movw	r3, #47099	; 0xb7fb
 8001304:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_13|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001306:	2303      	movs	r3, #3
 8001308:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130a:	2300      	movs	r3, #0
 800130c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800130e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001312:	4619      	mov	r1, r3
 8001314:	4862      	ldr	r0, [pc, #392]	; (80014a0 <MX_GPIO_Init+0x2ec>)
 8001316:	f002 fab9 	bl	800388c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = IST_RESET_Pin|LED_RED_Pin;
 800131a:	f640 0304 	movw	r3, #2052	; 0x804
 800131e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001320:	2301      	movs	r3, #1
 8001322:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001324:	2300      	movs	r3, #0
 8001326:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001328:	2300      	movs	r3, #0
 800132a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800132c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001330:	4619      	mov	r1, r3
 8001332:	485b      	ldr	r0, [pc, #364]	; (80014a0 <MX_GPIO_Init+0x2ec>)
 8001334:	f002 faaa 	bl	800388c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB4 PB3 PB9
                           PB7 PB6 PB1 PB0
                           PB10 PB11 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_9
 8001338:	f64c 73db 	movw	r3, #53211	; 0xcfdb
 800133c:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_1|GPIO_PIN_0
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800133e:	2303      	movs	r3, #3
 8001340:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001342:	2300      	movs	r3, #0
 8001344:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001346:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800134a:	4619      	mov	r1, r3
 800134c:	4859      	ldr	r0, [pc, #356]	; (80014b4 <MX_GPIO_Init+0x300>)
 800134e:	f002 fa9d 	bl	800388c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG13 PG15 PG12 PG11
                           PG10 PG0 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_12|GPIO_PIN_11
 8001352:	f64b 4301 	movw	r3, #48129	; 0xbc01
 8001356:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_10|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001358:	2303      	movs	r3, #3
 800135a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135c:	2300      	movs	r3, #0
 800135e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001360:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001364:	4619      	mov	r1, r3
 8001366:	4850      	ldr	r0, [pc, #320]	; (80014a8 <MX_GPIO_Init+0x2f4>)
 8001368:	f002 fa90 	bl	800388c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD7 PD5 PD4 PD3
                           PD2 PD15 PD14 PD13
                           PD11 PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_3
 800136c:	f64e 43bc 	movw	r3, #60604	; 0xecbc
 8001370:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_2|GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13
                          |GPIO_PIN_11|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001372:	2303      	movs	r3, #3
 8001374:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001376:	2300      	movs	r3, #0
 8001378:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800137a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800137e:	4619      	mov	r1, r3
 8001380:	484b      	ldr	r0, [pc, #300]	; (80014b0 <MX_GPIO_Init+0x2fc>)
 8001382:	f002 fa83 	bl	800388c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC12 PC11 PC10 PC13
                           PC14 PC15 PC9 PC8
                           PC7 PC6 PC0 PC1
                           PC2 PC3 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_13
 8001386:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800138a:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_9|GPIO_PIN_8
                          |GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800138c:	2303      	movs	r3, #3
 800138e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001390:	2300      	movs	r3, #0
 8001392:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001394:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001398:	4619      	mov	r1, r3
 800139a:	4847      	ldr	r0, [pc, #284]	; (80014b8 <MX_GPIO_Init+0x304>)
 800139c:	f002 fa76 	bl	800388c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA15 PA10 PA9 PA4
                           PA6 PA5 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_4
 80013a0:	f248 63f0 	movw	r3, #34544	; 0x86f0
 80013a4:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013a6:	2303      	movs	r3, #3
 80013a8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013aa:	2300      	movs	r3, #0
 80013ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013b2:	4619      	mov	r1, r3
 80013b4:	4841      	ldr	r0, [pc, #260]	; (80014bc <MX_GPIO_Init+0x308>)
 80013b6:	f002 fa69 	bl	800388c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SYS_CFG_Pin;
 80013ba:	2340      	movs	r3, #64	; 0x40
 80013bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013be:	2300      	movs	r3, #0
 80013c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c2:	2300      	movs	r3, #0
 80013c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SYS_CFG_GPIO_Port, &GPIO_InitStruct);
 80013c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013ca:	4619      	mov	r1, r3
 80013cc:	4838      	ldr	r0, [pc, #224]	; (80014b0 <MX_GPIO_Init+0x2fc>)
 80013ce:	f002 fa5d 	bl	800388c <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = PIN_Y_Pin|PIN_X_Pin|PIN_V_Pin|PIN_Z_Pin;
 80013d2:	23e4      	movs	r3, #228	; 0xe4
 80013d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013d6:	2300      	movs	r3, #0
 80013d8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013da:	2300      	movs	r3, #0
 80013dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80013de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013e2:	4619      	mov	r1, r3
 80013e4:	4836      	ldr	r0, [pc, #216]	; (80014c0 <MX_GPIO_Init+0x30c>)
 80013e6:	f002 fa51 	bl	800388c <HAL_GPIO_Init>

  /*Configure GPIO pins : PI3 PI8 PI9 PI4
                           PI1 PI10 PI11 PI0 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_4
 80013ea:	f640 731b 	movw	r3, #3867	; 0xf1b
 80013ee:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013f0:	2303      	movs	r3, #3
 80013f2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f4:	2300      	movs	r3, #0
 80013f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80013f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013fc:	4619      	mov	r1, r3
 80013fe:	4830      	ldr	r0, [pc, #192]	; (80014c0 <MX_GPIO_Init+0x30c>)
 8001400:	f002 fa44 	bl	800388c <HAL_GPIO_Init>

  /*Configure GPIO pins : PH15 PH13 PH14 PH12
                           PH11 PH10 PH8 PH9
                           PH7 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_12
 8001404:	f64f 7380 	movw	r3, #65408	; 0xff80
 8001408:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800140a:	2303      	movs	r3, #3
 800140c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140e:	2300      	movs	r3, #0
 8001410:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001412:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001416:	4619      	mov	r1, r3
 8001418:	4822      	ldr	r0, [pc, #136]	; (80014a4 <MX_GPIO_Init+0x2f0>)
 800141a:	f002 fa37 	bl	800388c <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF2 PF1 PF3
                           PF4 PF5 PF13 PF12
                           PF15 PF11 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_3
 800141e:	f64b 033f 	movw	r3, #47167	; 0xb83f
 8001422:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_13|GPIO_PIN_12
                          |GPIO_PIN_15|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001424:	2303      	movs	r3, #3
 8001426:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001428:	2300      	movs	r3, #0
 800142a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800142c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001430:	4619      	mov	r1, r3
 8001432:	481e      	ldr	r0, [pc, #120]	; (80014ac <MX_GPIO_Init+0x2f8>)
 8001434:	f002 fa2a 	bl	800388c <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin PHPin */
  GPIO_InitStruct.Pin = POWER1_CTRL_Pin|POWER2_CTRL_Pin|POWER3_CTRL_Pin|POWER4_CTRL_Pin;
 8001438:	233c      	movs	r3, #60	; 0x3c
 800143a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800143c:	2301      	movs	r3, #1
 800143e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001440:	2300      	movs	r3, #0
 8001442:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001444:	2300      	movs	r3, #0
 8001446:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001448:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800144c:	4619      	mov	r1, r3
 800144e:	4815      	ldr	r0, [pc, #84]	; (80014a4 <MX_GPIO_Init+0x2f0>)
 8001450:	f002 fa1c 	bl	800388c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = LED_A_Pin|LED_B_Pin|LED_C_Pin|LED_D_Pin
 8001454:	f44f 73ff 	mov.w	r3, #510	; 0x1fe
 8001458:	627b      	str	r3, [r7, #36]	; 0x24
                          |LED_E_Pin|LED_F_Pin|LED_G_Pin|LED_H_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800145a:	2301      	movs	r3, #1
 800145c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145e:	2300      	movs	r3, #0
 8001460:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001462:	2300      	movs	r3, #0
 8001464:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001466:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800146a:	4619      	mov	r1, r3
 800146c:	480e      	ldr	r0, [pc, #56]	; (80014a8 <MX_GPIO_Init+0x2f4>)
 800146e:	f002 fa0d 	bl	800388c <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = SPI5_NSS_Pin|LED_GREEN_Pin;
 8001472:	f244 0340 	movw	r3, #16448	; 0x4040
 8001476:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001478:	2301      	movs	r3, #1
 800147a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147c:	2300      	movs	r3, #0
 800147e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001480:	2300      	movs	r3, #0
 8001482:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001484:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001488:	4619      	mov	r1, r3
 800148a:	4808      	ldr	r0, [pc, #32]	; (80014ac <MX_GPIO_Init+0x2f8>)
 800148c:	f002 f9fe 	bl	800388c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TRIG_Pin;
 8001490:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001494:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001496:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800149a:	e013      	b.n	80014c4 <MX_GPIO_Init+0x310>
 800149c:	40023800 	.word	0x40023800
 80014a0:	40021000 	.word	0x40021000
 80014a4:	40021c00 	.word	0x40021c00
 80014a8:	40021800 	.word	0x40021800
 80014ac:	40021400 	.word	0x40021400
 80014b0:	40020c00 	.word	0x40020c00
 80014b4:	40020400 	.word	0x40020400
 80014b8:	40020800 	.word	0x40020800
 80014bc:	40020000 	.word	0x40020000
 80014c0:	40022000 	.word	0x40022000
 80014c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014c6:	2301      	movs	r3, #1
 80014c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TRIG_GPIO_Port, &GPIO_InitStruct);
 80014ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014ce:	4619      	mov	r1, r3
 80014d0:	4816      	ldr	r0, [pc, #88]	; (800152c <MX_GPIO_Init+0x378>)
 80014d2:	f002 f9db 	bl	800388c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY_Pin;
 80014d6:	2304      	movs	r3, #4
 80014d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014da:	2300      	movs	r3, #0
 80014dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014de:	2300      	movs	r3, #0
 80014e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(KEY_GPIO_Port, &GPIO_InitStruct);
 80014e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014e6:	4619      	mov	r1, r3
 80014e8:	4811      	ldr	r0, [pc, #68]	; (8001530 <MX_GPIO_Init+0x37c>)
 80014ea:	f002 f9cf 	bl	800388c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = PIN_YA1_Pin|PIN_ZA0_Pin|PIN_XA2_Pin|PIN_W_Pin;
 80014ee:	230f      	movs	r3, #15
 80014f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014f2:	2300      	movs	r3, #0
 80014f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f6:	2300      	movs	r3, #0
 80014f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014fe:	4619      	mov	r1, r3
 8001500:	480c      	ldr	r0, [pc, #48]	; (8001534 <MX_GPIO_Init+0x380>)
 8001502:	f002 f9c3 	bl	800388c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IO_PROBE_Pin;
 8001506:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800150a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800150c:	2301      	movs	r3, #1
 800150e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001510:	2300      	movs	r3, #0
 8001512:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001514:	2300      	movs	r3, #0
 8001516:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(IO_PROBE_GPIO_Port, &GPIO_InitStruct);
 8001518:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800151c:	4619      	mov	r1, r3
 800151e:	4806      	ldr	r0, [pc, #24]	; (8001538 <MX_GPIO_Init+0x384>)
 8001520:	f002 f9b4 	bl	800388c <HAL_GPIO_Init>

}
 8001524:	bf00      	nop
 8001526:	3738      	adds	r7, #56	; 0x38
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	40021400 	.word	0x40021400
 8001530:	40020400 	.word	0x40020400
 8001534:	40020000 	.word	0x40020000
 8001538:	40020c00 	.word	0x40020c00

0800153c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick.
   */
  HAL_Init();
 8001540:	f000 fe48 	bl	80021d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001544:	f000 f81e 	bl	8001584 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001548:	f7ff fe34 	bl	80011b4 <MX_GPIO_Init>
  MX_DMA_Init();
 800154c:	f7ff fdd4 	bl	80010f8 <MX_DMA_Init>
  MX_SPI5_Init();
 8001550:	f000 f89a 	bl	8001688 <MX_SPI5_Init>
  MX_CAN1_Init();
 8001554:	f7ff fcb6 	bl	8000ec4 <MX_CAN1_Init>
  MX_USART6_UART_Init();
 8001558:	f000 fcfa 	bl	8001f50 <MX_USART6_UART_Init>
  MX_TIM1_Init();
 800155c:	f000 fa32 	bl	80019c4 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001560:	f000 fac0 	bl	8001ae4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001564:	f000 fb0a 	bl	8001b7c <MX_TIM3_Init>
  MX_TIM12_Init();
 8001568:	f000 fb62 	bl	8001c30 <MX_TIM12_Init>
  MX_CAN2_Init();
 800156c:	f7ff fce0 	bl	8000f30 <MX_CAN2_Init>
  MX_USART3_UART_Init();
 8001570:	f000 fcc4 	bl	8001efc <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  task_init();
 8001574:	f00c fae6 	bl	800db44 <task_init>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8001578:	f7ff fdf8 	bl	800116c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800157c:	f009 ff32 	bl	800b3e4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
 8001580:	e7fe      	b.n	8001580 <main+0x44>
	...

08001584 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001584:	b580      	push	{r7, lr}
 8001586:	b094      	sub	sp, #80	; 0x50
 8001588:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800158a:	f107 0320 	add.w	r3, r7, #32
 800158e:	2230      	movs	r2, #48	; 0x30
 8001590:	2100      	movs	r1, #0
 8001592:	4618      	mov	r0, r3
 8001594:	f010 f9a5 	bl	80118e2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001598:	f107 030c 	add.w	r3, r7, #12
 800159c:	2200      	movs	r2, #0
 800159e:	601a      	str	r2, [r3, #0]
 80015a0:	605a      	str	r2, [r3, #4]
 80015a2:	609a      	str	r2, [r3, #8]
 80015a4:	60da      	str	r2, [r3, #12]
 80015a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015a8:	2300      	movs	r3, #0
 80015aa:	60bb      	str	r3, [r7, #8]
 80015ac:	4b28      	ldr	r3, [pc, #160]	; (8001650 <SystemClock_Config+0xcc>)
 80015ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b0:	4a27      	ldr	r2, [pc, #156]	; (8001650 <SystemClock_Config+0xcc>)
 80015b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015b6:	6413      	str	r3, [r2, #64]	; 0x40
 80015b8:	4b25      	ldr	r3, [pc, #148]	; (8001650 <SystemClock_Config+0xcc>)
 80015ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015c0:	60bb      	str	r3, [r7, #8]
 80015c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015c4:	2300      	movs	r3, #0
 80015c6:	607b      	str	r3, [r7, #4]
 80015c8:	4b22      	ldr	r3, [pc, #136]	; (8001654 <SystemClock_Config+0xd0>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a21      	ldr	r2, [pc, #132]	; (8001654 <SystemClock_Config+0xd0>)
 80015ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80015d2:	6013      	str	r3, [r2, #0]
 80015d4:	4b1f      	ldr	r3, [pc, #124]	; (8001654 <SystemClock_Config+0xd0>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80015dc:	607b      	str	r3, [r7, #4]
 80015de:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015e0:	2301      	movs	r3, #1
 80015e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015e8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015ea:	2302      	movs	r3, #2
 80015ec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015ee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80015f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 80015f4:	2306      	movs	r3, #6
 80015f6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80015f8:	23a8      	movs	r3, #168	; 0xa8
 80015fa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015fc:	2302      	movs	r3, #2
 80015fe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001600:	2307      	movs	r3, #7
 8001602:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001604:	f107 0320 	add.w	r3, r7, #32
 8001608:	4618      	mov	r0, r3
 800160a:	f003 fd6f 	bl	80050ec <HAL_RCC_OscConfig>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <SystemClock_Config+0x94>
    Error_Handler();
 8001614:	f000 f832 	bl	800167c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 8001618:	230f      	movs	r3, #15
 800161a:	60fb      	str	r3, [r7, #12]
                                RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800161c:	2302      	movs	r3, #2
 800161e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001620:	2300      	movs	r3, #0
 8001622:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001624:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001628:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800162a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800162e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8001630:	f107 030c 	add.w	r3, r7, #12
 8001634:	2105      	movs	r1, #5
 8001636:	4618      	mov	r0, r3
 8001638:	f003 ffd0 	bl	80055dc <HAL_RCC_ClockConfig>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <SystemClock_Config+0xc2>
    Error_Handler();
 8001642:	f000 f81b 	bl	800167c <Error_Handler>
  }
}
 8001646:	bf00      	nop
 8001648:	3750      	adds	r7, #80	; 0x50
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	40023800 	.word	0x40023800
 8001654:	40007000 	.word	0x40007000

08001658 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a04      	ldr	r2, [pc, #16]	; (8001678 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d101      	bne.n	800166e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800166a:	f000 fdd5 	bl	8002218 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800166e:	bf00      	nop
 8001670:	3708      	adds	r7, #8
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	40000c00 	.word	0x40000c00

0800167c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001680:	b672      	cpsid	i
}
 8001682:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 8001684:	e7fe      	b.n	8001684 <Error_Handler+0x8>
	...

08001688 <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 800168c:	4b17      	ldr	r3, [pc, #92]	; (80016ec <MX_SPI5_Init+0x64>)
 800168e:	4a18      	ldr	r2, [pc, #96]	; (80016f0 <MX_SPI5_Init+0x68>)
 8001690:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001692:	4b16      	ldr	r3, [pc, #88]	; (80016ec <MX_SPI5_Init+0x64>)
 8001694:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001698:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800169a:	4b14      	ldr	r3, [pc, #80]	; (80016ec <MX_SPI5_Init+0x64>)
 800169c:	2200      	movs	r2, #0
 800169e:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80016a0:	4b12      	ldr	r3, [pc, #72]	; (80016ec <MX_SPI5_Init+0x64>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016a6:	4b11      	ldr	r3, [pc, #68]	; (80016ec <MX_SPI5_Init+0x64>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016ac:	4b0f      	ldr	r3, [pc, #60]	; (80016ec <MX_SPI5_Init+0x64>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80016b2:	4b0e      	ldr	r3, [pc, #56]	; (80016ec <MX_SPI5_Init+0x64>)
 80016b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016b8:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80016ba:	4b0c      	ldr	r3, [pc, #48]	; (80016ec <MX_SPI5_Init+0x64>)
 80016bc:	2230      	movs	r2, #48	; 0x30
 80016be:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016c0:	4b0a      	ldr	r3, [pc, #40]	; (80016ec <MX_SPI5_Init+0x64>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80016c6:	4b09      	ldr	r3, [pc, #36]	; (80016ec <MX_SPI5_Init+0x64>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016cc:	4b07      	ldr	r3, [pc, #28]	; (80016ec <MX_SPI5_Init+0x64>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 80016d2:	4b06      	ldr	r3, [pc, #24]	; (80016ec <MX_SPI5_Init+0x64>)
 80016d4:	220a      	movs	r2, #10
 80016d6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80016d8:	4804      	ldr	r0, [pc, #16]	; (80016ec <MX_SPI5_Init+0x64>)
 80016da:	f004 f991 	bl	8005a00 <HAL_SPI_Init>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 80016e4:	f7ff ffca 	bl	800167c <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80016e8:	bf00      	nop
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	2000021c 	.word	0x2000021c
 80016f0:	40015000 	.word	0x40015000

080016f4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b08a      	sub	sp, #40	; 0x28
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016fc:	f107 0314 	add.w	r3, r7, #20
 8001700:	2200      	movs	r2, #0
 8001702:	601a      	str	r2, [r3, #0]
 8001704:	605a      	str	r2, [r3, #4]
 8001706:	609a      	str	r2, [r3, #8]
 8001708:	60da      	str	r2, [r3, #12]
 800170a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a19      	ldr	r2, [pc, #100]	; (8001778 <HAL_SPI_MspInit+0x84>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d12c      	bne.n	8001770 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001716:	2300      	movs	r3, #0
 8001718:	613b      	str	r3, [r7, #16]
 800171a:	4b18      	ldr	r3, [pc, #96]	; (800177c <HAL_SPI_MspInit+0x88>)
 800171c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800171e:	4a17      	ldr	r2, [pc, #92]	; (800177c <HAL_SPI_MspInit+0x88>)
 8001720:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001724:	6453      	str	r3, [r2, #68]	; 0x44
 8001726:	4b15      	ldr	r3, [pc, #84]	; (800177c <HAL_SPI_MspInit+0x88>)
 8001728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800172a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800172e:	613b      	str	r3, [r7, #16]
 8001730:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001732:	2300      	movs	r3, #0
 8001734:	60fb      	str	r3, [r7, #12]
 8001736:	4b11      	ldr	r3, [pc, #68]	; (800177c <HAL_SPI_MspInit+0x88>)
 8001738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173a:	4a10      	ldr	r2, [pc, #64]	; (800177c <HAL_SPI_MspInit+0x88>)
 800173c:	f043 0320 	orr.w	r3, r3, #32
 8001740:	6313      	str	r3, [r2, #48]	; 0x30
 8001742:	4b0e      	ldr	r3, [pc, #56]	; (800177c <HAL_SPI_MspInit+0x88>)
 8001744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001746:	f003 0320 	and.w	r3, r3, #32
 800174a:	60fb      	str	r3, [r7, #12]
 800174c:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF9     ------> SPI5_MOSI
    PF8     ------> SPI5_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_8;
 800174e:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001752:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001754:	2302      	movs	r3, #2
 8001756:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001758:	2300      	movs	r3, #0
 800175a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800175c:	2303      	movs	r3, #3
 800175e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001760:	2305      	movs	r3, #5
 8001762:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001764:	f107 0314 	add.w	r3, r7, #20
 8001768:	4619      	mov	r1, r3
 800176a:	4805      	ldr	r0, [pc, #20]	; (8001780 <HAL_SPI_MspInit+0x8c>)
 800176c:	f002 f88e 	bl	800388c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8001770:	bf00      	nop
 8001772:	3728      	adds	r7, #40	; 0x28
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	40015000 	.word	0x40015000
 800177c:	40023800 	.word	0x40023800
 8001780:	40021400 	.word	0x40021400

08001784 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800178a:	2300      	movs	r3, #0
 800178c:	607b      	str	r3, [r7, #4]
 800178e:	4b12      	ldr	r3, [pc, #72]	; (80017d8 <HAL_MspInit+0x54>)
 8001790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001792:	4a11      	ldr	r2, [pc, #68]	; (80017d8 <HAL_MspInit+0x54>)
 8001794:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001798:	6453      	str	r3, [r2, #68]	; 0x44
 800179a:	4b0f      	ldr	r3, [pc, #60]	; (80017d8 <HAL_MspInit+0x54>)
 800179c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800179e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017a2:	607b      	str	r3, [r7, #4]
 80017a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017a6:	2300      	movs	r3, #0
 80017a8:	603b      	str	r3, [r7, #0]
 80017aa:	4b0b      	ldr	r3, [pc, #44]	; (80017d8 <HAL_MspInit+0x54>)
 80017ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ae:	4a0a      	ldr	r2, [pc, #40]	; (80017d8 <HAL_MspInit+0x54>)
 80017b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017b4:	6413      	str	r3, [r2, #64]	; 0x40
 80017b6:	4b08      	ldr	r3, [pc, #32]	; (80017d8 <HAL_MspInit+0x54>)
 80017b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017be:	603b      	str	r3, [r7, #0]
 80017c0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80017c2:	2200      	movs	r2, #0
 80017c4:	210f      	movs	r1, #15
 80017c6:	f06f 0001 	mvn.w	r0, #1
 80017ca:	f001 fcb9 	bl	8003140 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017ce:	bf00      	nop
 80017d0:	3708      	adds	r7, #8
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	40023800 	.word	0x40023800

080017dc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b08e      	sub	sp, #56	; 0x38
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80017e4:	2300      	movs	r3, #0
 80017e6:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80017e8:	2300      	movs	r3, #0
 80017ea:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 80017ec:	2300      	movs	r3, #0
 80017ee:	60fb      	str	r3, [r7, #12]
 80017f0:	4b33      	ldr	r3, [pc, #204]	; (80018c0 <HAL_InitTick+0xe4>)
 80017f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f4:	4a32      	ldr	r2, [pc, #200]	; (80018c0 <HAL_InitTick+0xe4>)
 80017f6:	f043 0308 	orr.w	r3, r3, #8
 80017fa:	6413      	str	r3, [r2, #64]	; 0x40
 80017fc:	4b30      	ldr	r3, [pc, #192]	; (80018c0 <HAL_InitTick+0xe4>)
 80017fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001800:	f003 0308 	and.w	r3, r3, #8
 8001804:	60fb      	str	r3, [r7, #12]
 8001806:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001808:	f107 0210 	add.w	r2, r7, #16
 800180c:	f107 0314 	add.w	r3, r7, #20
 8001810:	4611      	mov	r1, r2
 8001812:	4618      	mov	r0, r3
 8001814:	f004 f8c2 	bl	800599c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001818:	6a3b      	ldr	r3, [r7, #32]
 800181a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800181c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800181e:	2b00      	cmp	r3, #0
 8001820:	d103      	bne.n	800182a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001822:	f004 f893 	bl	800594c <HAL_RCC_GetPCLK1Freq>
 8001826:	6378      	str	r0, [r7, #52]	; 0x34
 8001828:	e004      	b.n	8001834 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800182a:	f004 f88f 	bl	800594c <HAL_RCC_GetPCLK1Freq>
 800182e:	4603      	mov	r3, r0
 8001830:	005b      	lsls	r3, r3, #1
 8001832:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001834:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001836:	4a23      	ldr	r2, [pc, #140]	; (80018c4 <HAL_InitTick+0xe8>)
 8001838:	fba2 2303 	umull	r2, r3, r2, r3
 800183c:	0c9b      	lsrs	r3, r3, #18
 800183e:	3b01      	subs	r3, #1
 8001840:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8001842:	4b21      	ldr	r3, [pc, #132]	; (80018c8 <HAL_InitTick+0xec>)
 8001844:	4a21      	ldr	r2, [pc, #132]	; (80018cc <HAL_InitTick+0xf0>)
 8001846:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8001848:	4b1f      	ldr	r3, [pc, #124]	; (80018c8 <HAL_InitTick+0xec>)
 800184a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800184e:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8001850:	4a1d      	ldr	r2, [pc, #116]	; (80018c8 <HAL_InitTick+0xec>)
 8001852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001854:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8001856:	4b1c      	ldr	r3, [pc, #112]	; (80018c8 <HAL_InitTick+0xec>)
 8001858:	2200      	movs	r2, #0
 800185a:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800185c:	4b1a      	ldr	r3, [pc, #104]	; (80018c8 <HAL_InitTick+0xec>)
 800185e:	2200      	movs	r2, #0
 8001860:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001862:	4b19      	ldr	r3, [pc, #100]	; (80018c8 <HAL_InitTick+0xec>)
 8001864:	2200      	movs	r2, #0
 8001866:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 8001868:	4817      	ldr	r0, [pc, #92]	; (80018c8 <HAL_InitTick+0xec>)
 800186a:	f004 fbdf 	bl	800602c <HAL_TIM_Base_Init>
 800186e:	4603      	mov	r3, r0
 8001870:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001874:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001878:	2b00      	cmp	r3, #0
 800187a:	d11b      	bne.n	80018b4 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 800187c:	4812      	ldr	r0, [pc, #72]	; (80018c8 <HAL_InitTick+0xec>)
 800187e:	f004 fc25 	bl	80060cc <HAL_TIM_Base_Start_IT>
 8001882:	4603      	mov	r3, r0
 8001884:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001888:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800188c:	2b00      	cmp	r3, #0
 800188e:	d111      	bne.n	80018b4 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001890:	2032      	movs	r0, #50	; 0x32
 8001892:	f001 fc71 	bl	8003178 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2b0f      	cmp	r3, #15
 800189a:	d808      	bhi.n	80018ae <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 800189c:	2200      	movs	r2, #0
 800189e:	6879      	ldr	r1, [r7, #4]
 80018a0:	2032      	movs	r0, #50	; 0x32
 80018a2:	f001 fc4d 	bl	8003140 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80018a6:	4a0a      	ldr	r2, [pc, #40]	; (80018d0 <HAL_InitTick+0xf4>)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6013      	str	r3, [r2, #0]
 80018ac:	e002      	b.n	80018b4 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
 80018b0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80018b4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	3738      	adds	r7, #56	; 0x38
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	40023800 	.word	0x40023800
 80018c4:	431bde83 	.word	0x431bde83
 80018c8:	20000274 	.word	0x20000274
 80018cc:	40000c00 	.word	0x40000c00
 80018d0:	20000004 	.word	0x20000004

080018d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80018d8:	e7fe      	b.n	80018d8 <NMI_Handler+0x4>

080018da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018da:	b480      	push	{r7}
 80018dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018de:	e7fe      	b.n	80018de <HardFault_Handler+0x4>

080018e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018e4:	e7fe      	b.n	80018e4 <MemManage_Handler+0x4>

080018e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018e6:	b480      	push	{r7}
 80018e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018ea:	e7fe      	b.n	80018ea <BusFault_Handler+0x4>

080018ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018f0:	e7fe      	b.n	80018f0 <UsageFault_Handler+0x4>

080018f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018f2:	b480      	push	{r7}
 80018f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018f6:	bf00      	nop
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr

08001900 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001904:	4802      	ldr	r0, [pc, #8]	; (8001910 <CAN1_TX_IRQHandler+0x10>)
 8001906:	f001 f938 	bl	8002b7a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 800190a:	bf00      	nop
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	200001c4 	.word	0x200001c4

08001914 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001918:	4802      	ldr	r0, [pc, #8]	; (8001924 <CAN1_RX0_IRQHandler+0x10>)
 800191a:	f001 f92e 	bl	8002b7a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800191e:	bf00      	nop
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	200001c4 	.word	0x200001c4

08001928 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800192c:	4802      	ldr	r0, [pc, #8]	; (8001938 <TIM2_IRQHandler+0x10>)
 800192e:	f004 fc8c 	bl	800624a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001932:	bf00      	nop
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	20000304 	.word	0x20000304

0800193c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001940:	4802      	ldr	r0, [pc, #8]	; (800194c <TIM5_IRQHandler+0x10>)
 8001942:	f004 fc82 	bl	800624a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001946:	bf00      	nop
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	20000274 	.word	0x20000274

08001950 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8001954:	4802      	ldr	r0, [pc, #8]	; (8001960 <DMA2_Stream1_IRQHandler+0x10>)
 8001956:	f001 fd5d 	bl	8003414 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800195a:	bf00      	nop
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	2000046c 	.word	0x2000046c

08001964 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001968:	4802      	ldr	r0, [pc, #8]	; (8001974 <OTG_FS_IRQHandler+0x10>)
 800196a:	f002 fab2 	bl	8003ed2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800196e:	bf00      	nop
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	20010b64 	.word	0x20010b64

08001978 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 800197c:	4802      	ldr	r0, [pc, #8]	; (8001988 <DMA2_Stream6_IRQHandler+0x10>)
 800197e:	f001 fd49 	bl	8003414 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001982:	bf00      	nop
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	200004cc 	.word	0x200004cc

0800198c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001990:	4802      	ldr	r0, [pc, #8]	; (800199c <USART6_IRQHandler+0x10>)
 8001992:	f005 fb25 	bl	8006fe0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001996:	bf00      	nop
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	20000424 	.word	0x20000424

080019a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019a4:	4b06      	ldr	r3, [pc, #24]	; (80019c0 <SystemInit+0x20>)
 80019a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019aa:	4a05      	ldr	r2, [pc, #20]	; (80019c0 <SystemInit+0x20>)
 80019ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019b4:	bf00      	nop
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop
 80019c0:	e000ed00 	.word	0xe000ed00

080019c4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim12;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b092      	sub	sp, #72	; 0x48
 80019c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019ca:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80019ce:	2200      	movs	r2, #0
 80019d0:	601a      	str	r2, [r3, #0]
 80019d2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019d8:	2200      	movs	r2, #0
 80019da:	601a      	str	r2, [r3, #0]
 80019dc:	605a      	str	r2, [r3, #4]
 80019de:	609a      	str	r2, [r3, #8]
 80019e0:	60da      	str	r2, [r3, #12]
 80019e2:	611a      	str	r2, [r3, #16]
 80019e4:	615a      	str	r2, [r3, #20]
 80019e6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80019e8:	1d3b      	adds	r3, r7, #4
 80019ea:	2220      	movs	r2, #32
 80019ec:	2100      	movs	r1, #0
 80019ee:	4618      	mov	r0, r3
 80019f0:	f00f ff77 	bl	80118e2 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80019f4:	4b39      	ldr	r3, [pc, #228]	; (8001adc <MX_TIM1_Init+0x118>)
 80019f6:	4a3a      	ldr	r2, [pc, #232]	; (8001ae0 <MX_TIM1_Init+0x11c>)
 80019f8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16;
 80019fa:	4b38      	ldr	r3, [pc, #224]	; (8001adc <MX_TIM1_Init+0x118>)
 80019fc:	2210      	movs	r2, #16
 80019fe:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a00:	4b36      	ldr	r3, [pc, #216]	; (8001adc <MX_TIM1_Init+0x118>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000-1;
 8001a06:	4b35      	ldr	r3, [pc, #212]	; (8001adc <MX_TIM1_Init+0x118>)
 8001a08:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001a0c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a0e:	4b33      	ldr	r3, [pc, #204]	; (8001adc <MX_TIM1_Init+0x118>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001a14:	4b31      	ldr	r3, [pc, #196]	; (8001adc <MX_TIM1_Init+0x118>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a1a:	4b30      	ldr	r3, [pc, #192]	; (8001adc <MX_TIM1_Init+0x118>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001a20:	482e      	ldr	r0, [pc, #184]	; (8001adc <MX_TIM1_Init+0x118>)
 8001a22:	f004 fbc3 	bl	80061ac <HAL_TIM_PWM_Init>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d001      	beq.n	8001a30 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001a2c:	f7ff fe26 	bl	800167c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a30:	2300      	movs	r3, #0
 8001a32:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a34:	2300      	movs	r3, #0
 8001a36:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a38:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	4827      	ldr	r0, [pc, #156]	; (8001adc <MX_TIM1_Init+0x118>)
 8001a40:	f005 f99c 	bl	8006d7c <HAL_TIMEx_MasterConfigSynchronization>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d001      	beq.n	8001a4e <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8001a4a:	f7ff fe17 	bl	800167c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a4e:	2360      	movs	r3, #96	; 0x60
 8001a50:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 1000;
 8001a52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a56:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a60:	2300      	movs	r3, #0
 8001a62:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001a64:	2300      	movs	r3, #0
 8001a66:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a70:	2200      	movs	r2, #0
 8001a72:	4619      	mov	r1, r3
 8001a74:	4819      	ldr	r0, [pc, #100]	; (8001adc <MX_TIM1_Init+0x118>)
 8001a76:	f004 fcd9 	bl	800642c <HAL_TIM_PWM_ConfigChannel>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d001      	beq.n	8001a84 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8001a80:	f7ff fdfc 	bl	800167c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001a84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a88:	220c      	movs	r2, #12
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	4813      	ldr	r0, [pc, #76]	; (8001adc <MX_TIM1_Init+0x118>)
 8001a8e:	f004 fccd 	bl	800642c <HAL_TIM_PWM_ConfigChannel>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d001      	beq.n	8001a9c <MX_TIM1_Init+0xd8>
  {
    Error_Handler();
 8001a98:	f7ff fdf0 	bl	800167c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001aac:	2300      	movs	r3, #0
 8001aae:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001ab0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ab4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001aba:	1d3b      	adds	r3, r7, #4
 8001abc:	4619      	mov	r1, r3
 8001abe:	4807      	ldr	r0, [pc, #28]	; (8001adc <MX_TIM1_Init+0x118>)
 8001ac0:	f005 f9d8 	bl	8006e74 <HAL_TIMEx_ConfigBreakDeadTime>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d001      	beq.n	8001ace <MX_TIM1_Init+0x10a>
  {
    Error_Handler();
 8001aca:	f7ff fdd7 	bl	800167c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001ace:	4803      	ldr	r0, [pc, #12]	; (8001adc <MX_TIM1_Init+0x118>)
 8001ad0:	f000 f968 	bl	8001da4 <HAL_TIM_MspPostInit>

}
 8001ad4:	bf00      	nop
 8001ad6:	3748      	adds	r7, #72	; 0x48
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	200002bc 	.word	0x200002bc
 8001ae0:	40010000 	.word	0x40010000

08001ae4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b086      	sub	sp, #24
 8001ae8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001aea:	f107 0308 	add.w	r3, r7, #8
 8001aee:	2200      	movs	r2, #0
 8001af0:	601a      	str	r2, [r3, #0]
 8001af2:	605a      	str	r2, [r3, #4]
 8001af4:	609a      	str	r2, [r3, #8]
 8001af6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001af8:	463b      	mov	r3, r7
 8001afa:	2200      	movs	r2, #0
 8001afc:	601a      	str	r2, [r3, #0]
 8001afe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b00:	4b1d      	ldr	r3, [pc, #116]	; (8001b78 <MX_TIM2_Init+0x94>)
 8001b02:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b06:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8001b08:	4b1b      	ldr	r3, [pc, #108]	; (8001b78 <MX_TIM2_Init+0x94>)
 8001b0a:	2253      	movs	r2, #83	; 0x53
 8001b0c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b0e:	4b1a      	ldr	r3, [pc, #104]	; (8001b78 <MX_TIM2_Init+0x94>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8001b14:	4b18      	ldr	r3, [pc, #96]	; (8001b78 <MX_TIM2_Init+0x94>)
 8001b16:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001b1a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b1c:	4b16      	ldr	r3, [pc, #88]	; (8001b78 <MX_TIM2_Init+0x94>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b22:	4b15      	ldr	r3, [pc, #84]	; (8001b78 <MX_TIM2_Init+0x94>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b28:	4813      	ldr	r0, [pc, #76]	; (8001b78 <MX_TIM2_Init+0x94>)
 8001b2a:	f004 fa7f 	bl	800602c <HAL_TIM_Base_Init>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d001      	beq.n	8001b38 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001b34:	f7ff fda2 	bl	800167c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b3c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b3e:	f107 0308 	add.w	r3, r7, #8
 8001b42:	4619      	mov	r1, r3
 8001b44:	480c      	ldr	r0, [pc, #48]	; (8001b78 <MX_TIM2_Init+0x94>)
 8001b46:	f004 fd33 	bl	80065b0 <HAL_TIM_ConfigClockSource>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d001      	beq.n	8001b54 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001b50:	f7ff fd94 	bl	800167c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b54:	2300      	movs	r3, #0
 8001b56:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b5c:	463b      	mov	r3, r7
 8001b5e:	4619      	mov	r1, r3
 8001b60:	4805      	ldr	r0, [pc, #20]	; (8001b78 <MX_TIM2_Init+0x94>)
 8001b62:	f005 f90b 	bl	8006d7c <HAL_TIMEx_MasterConfigSynchronization>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d001      	beq.n	8001b70 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001b6c:	f7ff fd86 	bl	800167c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001b70:	bf00      	nop
 8001b72:	3718      	adds	r7, #24
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	20000304 	.word	0x20000304

08001b7c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b08a      	sub	sp, #40	; 0x28
 8001b80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b82:	f107 0320 	add.w	r3, r7, #32
 8001b86:	2200      	movs	r2, #0
 8001b88:	601a      	str	r2, [r3, #0]
 8001b8a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b8c:	1d3b      	adds	r3, r7, #4
 8001b8e:	2200      	movs	r2, #0
 8001b90:	601a      	str	r2, [r3, #0]
 8001b92:	605a      	str	r2, [r3, #4]
 8001b94:	609a      	str	r2, [r3, #8]
 8001b96:	60da      	str	r2, [r3, #12]
 8001b98:	611a      	str	r2, [r3, #16]
 8001b9a:	615a      	str	r2, [r3, #20]
 8001b9c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001b9e:	4b22      	ldr	r3, [pc, #136]	; (8001c28 <MX_TIM3_Init+0xac>)
 8001ba0:	4a22      	ldr	r2, [pc, #136]	; (8001c2c <MX_TIM3_Init+0xb0>)
 8001ba2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 8001ba4:	4b20      	ldr	r3, [pc, #128]	; (8001c28 <MX_TIM3_Init+0xac>)
 8001ba6:	2253      	movs	r2, #83	; 0x53
 8001ba8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001baa:	4b1f      	ldr	r3, [pc, #124]	; (8001c28 <MX_TIM3_Init+0xac>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2000-1;
 8001bb0:	4b1d      	ldr	r3, [pc, #116]	; (8001c28 <MX_TIM3_Init+0xac>)
 8001bb2:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8001bb6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bb8:	4b1b      	ldr	r3, [pc, #108]	; (8001c28 <MX_TIM3_Init+0xac>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bbe:	4b1a      	ldr	r3, [pc, #104]	; (8001c28 <MX_TIM3_Init+0xac>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001bc4:	4818      	ldr	r0, [pc, #96]	; (8001c28 <MX_TIM3_Init+0xac>)
 8001bc6:	f004 faf1 	bl	80061ac <HAL_TIM_PWM_Init>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d001      	beq.n	8001bd4 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001bd0:	f7ff fd54 	bl	800167c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001bdc:	f107 0320 	add.w	r3, r7, #32
 8001be0:	4619      	mov	r1, r3
 8001be2:	4811      	ldr	r0, [pc, #68]	; (8001c28 <MX_TIM3_Init+0xac>)
 8001be4:	f005 f8ca 	bl	8006d7c <HAL_TIMEx_MasterConfigSynchronization>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d001      	beq.n	8001bf2 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001bee:	f7ff fd45 	bl	800167c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001bf2:	2360      	movs	r3, #96	; 0x60
 8001bf4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001c02:	1d3b      	adds	r3, r7, #4
 8001c04:	2204      	movs	r2, #4
 8001c06:	4619      	mov	r1, r3
 8001c08:	4807      	ldr	r0, [pc, #28]	; (8001c28 <MX_TIM3_Init+0xac>)
 8001c0a:	f004 fc0f 	bl	800642c <HAL_TIM_PWM_ConfigChannel>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d001      	beq.n	8001c18 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001c14:	f7ff fd32 	bl	800167c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001c18:	4803      	ldr	r0, [pc, #12]	; (8001c28 <MX_TIM3_Init+0xac>)
 8001c1a:	f000 f8c3 	bl	8001da4 <HAL_TIM_MspPostInit>

}
 8001c1e:	bf00      	nop
 8001c20:	3728      	adds	r7, #40	; 0x28
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	2000034c 	.word	0x2000034c
 8001c2c:	40000400 	.word	0x40000400

08001c30 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b088      	sub	sp, #32
 8001c34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c36:	1d3b      	adds	r3, r7, #4
 8001c38:	2200      	movs	r2, #0
 8001c3a:	601a      	str	r2, [r3, #0]
 8001c3c:	605a      	str	r2, [r3, #4]
 8001c3e:	609a      	str	r2, [r3, #8]
 8001c40:	60da      	str	r2, [r3, #12]
 8001c42:	611a      	str	r2, [r3, #16]
 8001c44:	615a      	str	r2, [r3, #20]
 8001c46:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001c48:	4b1a      	ldr	r3, [pc, #104]	; (8001cb4 <MX_TIM12_Init+0x84>)
 8001c4a:	4a1b      	ldr	r2, [pc, #108]	; (8001cb8 <MX_TIM12_Init+0x88>)
 8001c4c:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 83;
 8001c4e:	4b19      	ldr	r3, [pc, #100]	; (8001cb4 <MX_TIM12_Init+0x84>)
 8001c50:	2253      	movs	r2, #83	; 0x53
 8001c52:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c54:	4b17      	ldr	r3, [pc, #92]	; (8001cb4 <MX_TIM12_Init+0x84>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 20000-1;
 8001c5a:	4b16      	ldr	r3, [pc, #88]	; (8001cb4 <MX_TIM12_Init+0x84>)
 8001c5c:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001c60:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c62:	4b14      	ldr	r3, [pc, #80]	; (8001cb4 <MX_TIM12_Init+0x84>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c68:	4b12      	ldr	r3, [pc, #72]	; (8001cb4 <MX_TIM12_Init+0x84>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001c6e:	4811      	ldr	r0, [pc, #68]	; (8001cb4 <MX_TIM12_Init+0x84>)
 8001c70:	f004 fa9c 	bl	80061ac <HAL_TIM_PWM_Init>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d001      	beq.n	8001c7e <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8001c7a:	f7ff fcff 	bl	800167c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c7e:	2360      	movs	r3, #96	; 0x60
 8001c80:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001c82:	2300      	movs	r3, #0
 8001c84:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c86:	2300      	movs	r3, #0
 8001c88:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c8e:	1d3b      	adds	r3, r7, #4
 8001c90:	2200      	movs	r2, #0
 8001c92:	4619      	mov	r1, r3
 8001c94:	4807      	ldr	r0, [pc, #28]	; (8001cb4 <MX_TIM12_Init+0x84>)
 8001c96:	f004 fbc9 	bl	800642c <HAL_TIM_PWM_ConfigChannel>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d001      	beq.n	8001ca4 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8001ca0:	f7ff fcec 	bl	800167c <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001ca4:	4803      	ldr	r0, [pc, #12]	; (8001cb4 <MX_TIM12_Init+0x84>)
 8001ca6:	f000 f87d 	bl	8001da4 <HAL_TIM_MspPostInit>

}
 8001caa:	bf00      	nop
 8001cac:	3720      	adds	r7, #32
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	20000394 	.word	0x20000394
 8001cb8:	40001800 	.word	0x40001800

08001cbc <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b087      	sub	sp, #28
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a1f      	ldr	r2, [pc, #124]	; (8001d48 <HAL_TIM_PWM_MspInit+0x8c>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d10e      	bne.n	8001cec <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001cce:	2300      	movs	r3, #0
 8001cd0:	617b      	str	r3, [r7, #20]
 8001cd2:	4b1e      	ldr	r3, [pc, #120]	; (8001d4c <HAL_TIM_PWM_MspInit+0x90>)
 8001cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cd6:	4a1d      	ldr	r2, [pc, #116]	; (8001d4c <HAL_TIM_PWM_MspInit+0x90>)
 8001cd8:	f043 0301 	orr.w	r3, r3, #1
 8001cdc:	6453      	str	r3, [r2, #68]	; 0x44
 8001cde:	4b1b      	ldr	r3, [pc, #108]	; (8001d4c <HAL_TIM_PWM_MspInit+0x90>)
 8001ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ce2:	f003 0301 	and.w	r3, r3, #1
 8001ce6:	617b      	str	r3, [r7, #20]
 8001ce8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM12_CLK_ENABLE();
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 8001cea:	e026      	b.n	8001d3a <HAL_TIM_PWM_MspInit+0x7e>
  else if(tim_pwmHandle->Instance==TIM3)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a17      	ldr	r2, [pc, #92]	; (8001d50 <HAL_TIM_PWM_MspInit+0x94>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d10e      	bne.n	8001d14 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	613b      	str	r3, [r7, #16]
 8001cfa:	4b14      	ldr	r3, [pc, #80]	; (8001d4c <HAL_TIM_PWM_MspInit+0x90>)
 8001cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfe:	4a13      	ldr	r2, [pc, #76]	; (8001d4c <HAL_TIM_PWM_MspInit+0x90>)
 8001d00:	f043 0302 	orr.w	r3, r3, #2
 8001d04:	6413      	str	r3, [r2, #64]	; 0x40
 8001d06:	4b11      	ldr	r3, [pc, #68]	; (8001d4c <HAL_TIM_PWM_MspInit+0x90>)
 8001d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0a:	f003 0302 	and.w	r3, r3, #2
 8001d0e:	613b      	str	r3, [r7, #16]
 8001d10:	693b      	ldr	r3, [r7, #16]
}
 8001d12:	e012      	b.n	8001d3a <HAL_TIM_PWM_MspInit+0x7e>
  else if(tim_pwmHandle->Instance==TIM12)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a0e      	ldr	r2, [pc, #56]	; (8001d54 <HAL_TIM_PWM_MspInit+0x98>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d10d      	bne.n	8001d3a <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8001d1e:	2300      	movs	r3, #0
 8001d20:	60fb      	str	r3, [r7, #12]
 8001d22:	4b0a      	ldr	r3, [pc, #40]	; (8001d4c <HAL_TIM_PWM_MspInit+0x90>)
 8001d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d26:	4a09      	ldr	r2, [pc, #36]	; (8001d4c <HAL_TIM_PWM_MspInit+0x90>)
 8001d28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d2c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d2e:	4b07      	ldr	r3, [pc, #28]	; (8001d4c <HAL_TIM_PWM_MspInit+0x90>)
 8001d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d36:	60fb      	str	r3, [r7, #12]
 8001d38:	68fb      	ldr	r3, [r7, #12]
}
 8001d3a:	bf00      	nop
 8001d3c:	371c      	adds	r7, #28
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop
 8001d48:	40010000 	.word	0x40010000
 8001d4c:	40023800 	.word	0x40023800
 8001d50:	40000400 	.word	0x40000400
 8001d54:	40001800 	.word	0x40001800

08001d58 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b084      	sub	sp, #16
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d68:	d115      	bne.n	8001d96 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	60fb      	str	r3, [r7, #12]
 8001d6e:	4b0c      	ldr	r3, [pc, #48]	; (8001da0 <HAL_TIM_Base_MspInit+0x48>)
 8001d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d72:	4a0b      	ldr	r2, [pc, #44]	; (8001da0 <HAL_TIM_Base_MspInit+0x48>)
 8001d74:	f043 0301 	orr.w	r3, r3, #1
 8001d78:	6413      	str	r3, [r2, #64]	; 0x40
 8001d7a:	4b09      	ldr	r3, [pc, #36]	; (8001da0 <HAL_TIM_Base_MspInit+0x48>)
 8001d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7e:	f003 0301 	and.w	r3, r3, #1
 8001d82:	60fb      	str	r3, [r7, #12]
 8001d84:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001d86:	2200      	movs	r2, #0
 8001d88:	2105      	movs	r1, #5
 8001d8a:	201c      	movs	r0, #28
 8001d8c:	f001 f9d8 	bl	8003140 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001d90:	201c      	movs	r0, #28
 8001d92:	f001 f9f1 	bl	8003178 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001d96:	bf00      	nop
 8001d98:	3710      	adds	r7, #16
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	40023800 	.word	0x40023800

08001da4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b08c      	sub	sp, #48	; 0x30
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dac:	f107 031c 	add.w	r3, r7, #28
 8001db0:	2200      	movs	r2, #0
 8001db2:	601a      	str	r2, [r3, #0]
 8001db4:	605a      	str	r2, [r3, #4]
 8001db6:	609a      	str	r2, [r3, #8]
 8001db8:	60da      	str	r2, [r3, #12]
 8001dba:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a46      	ldr	r2, [pc, #280]	; (8001edc <HAL_TIM_MspPostInit+0x138>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d13e      	bne.n	8001e44 <HAL_TIM_MspPostInit+0xa0>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	61bb      	str	r3, [r7, #24]
 8001dca:	4b45      	ldr	r3, [pc, #276]	; (8001ee0 <HAL_TIM_MspPostInit+0x13c>)
 8001dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dce:	4a44      	ldr	r2, [pc, #272]	; (8001ee0 <HAL_TIM_MspPostInit+0x13c>)
 8001dd0:	f043 0301 	orr.w	r3, r3, #1
 8001dd4:	6313      	str	r3, [r2, #48]	; 0x30
 8001dd6:	4b42      	ldr	r3, [pc, #264]	; (8001ee0 <HAL_TIM_MspPostInit+0x13c>)
 8001dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dda:	f003 0301 	and.w	r3, r3, #1
 8001dde:	61bb      	str	r3, [r7, #24]
 8001de0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001de2:	2300      	movs	r3, #0
 8001de4:	617b      	str	r3, [r7, #20]
 8001de6:	4b3e      	ldr	r3, [pc, #248]	; (8001ee0 <HAL_TIM_MspPostInit+0x13c>)
 8001de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dea:	4a3d      	ldr	r2, [pc, #244]	; (8001ee0 <HAL_TIM_MspPostInit+0x13c>)
 8001dec:	f043 0310 	orr.w	r3, r3, #16
 8001df0:	6313      	str	r3, [r2, #48]	; 0x30
 8001df2:	4b3b      	ldr	r3, [pc, #236]	; (8001ee0 <HAL_TIM_MspPostInit+0x13c>)
 8001df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df6:	f003 0310 	and.w	r3, r3, #16
 8001dfa:	617b      	str	r3, [r7, #20]
 8001dfc:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001dfe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e04:	2302      	movs	r3, #2
 8001e06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001e10:	2301      	movs	r3, #1
 8001e12:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e14:	f107 031c 	add.w	r3, r7, #28
 8001e18:	4619      	mov	r1, r3
 8001e1a:	4832      	ldr	r0, [pc, #200]	; (8001ee4 <HAL_TIM_MspPostInit+0x140>)
 8001e1c:	f001 fd36 	bl	800388c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001e20:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001e24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e26:	2302      	movs	r3, #2
 8001e28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001e32:	2301      	movs	r3, #1
 8001e34:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e36:	f107 031c 	add.w	r3, r7, #28
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	482a      	ldr	r0, [pc, #168]	; (8001ee8 <HAL_TIM_MspPostInit+0x144>)
 8001e3e:	f001 fd25 	bl	800388c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8001e42:	e046      	b.n	8001ed2 <HAL_TIM_MspPostInit+0x12e>
  else if(timHandle->Instance==TIM3)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a28      	ldr	r2, [pc, #160]	; (8001eec <HAL_TIM_MspPostInit+0x148>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d11e      	bne.n	8001e8c <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e4e:	2300      	movs	r3, #0
 8001e50:	613b      	str	r3, [r7, #16]
 8001e52:	4b23      	ldr	r3, [pc, #140]	; (8001ee0 <HAL_TIM_MspPostInit+0x13c>)
 8001e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e56:	4a22      	ldr	r2, [pc, #136]	; (8001ee0 <HAL_TIM_MspPostInit+0x13c>)
 8001e58:	f043 0302 	orr.w	r3, r3, #2
 8001e5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e5e:	4b20      	ldr	r3, [pc, #128]	; (8001ee0 <HAL_TIM_MspPostInit+0x13c>)
 8001e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e62:	f003 0302 	and.w	r3, r3, #2
 8001e66:	613b      	str	r3, [r7, #16]
 8001e68:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001e6a:	2320      	movs	r3, #32
 8001e6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e6e:	2302      	movs	r3, #2
 8001e70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e72:	2300      	movs	r3, #0
 8001e74:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e76:	2300      	movs	r3, #0
 8001e78:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001e7a:	2302      	movs	r3, #2
 8001e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e7e:	f107 031c 	add.w	r3, r7, #28
 8001e82:	4619      	mov	r1, r3
 8001e84:	481a      	ldr	r0, [pc, #104]	; (8001ef0 <HAL_TIM_MspPostInit+0x14c>)
 8001e86:	f001 fd01 	bl	800388c <HAL_GPIO_Init>
}
 8001e8a:	e022      	b.n	8001ed2 <HAL_TIM_MspPostInit+0x12e>
  else if(timHandle->Instance==TIM12)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a18      	ldr	r2, [pc, #96]	; (8001ef4 <HAL_TIM_MspPostInit+0x150>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d11d      	bne.n	8001ed2 <HAL_TIM_MspPostInit+0x12e>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e96:	2300      	movs	r3, #0
 8001e98:	60fb      	str	r3, [r7, #12]
 8001e9a:	4b11      	ldr	r3, [pc, #68]	; (8001ee0 <HAL_TIM_MspPostInit+0x13c>)
 8001e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9e:	4a10      	ldr	r2, [pc, #64]	; (8001ee0 <HAL_TIM_MspPostInit+0x13c>)
 8001ea0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ea4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ea6:	4b0e      	ldr	r3, [pc, #56]	; (8001ee0 <HAL_TIM_MspPostInit+0x13c>)
 8001ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001eae:	60fb      	str	r3, [r7, #12]
 8001eb0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001eb2:	2340      	movs	r3, #64	; 0x40
 8001eb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eb6:	2302      	movs	r3, #2
 8001eb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8001ec2:	2309      	movs	r3, #9
 8001ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001ec6:	f107 031c 	add.w	r3, r7, #28
 8001eca:	4619      	mov	r1, r3
 8001ecc:	480a      	ldr	r0, [pc, #40]	; (8001ef8 <HAL_TIM_MspPostInit+0x154>)
 8001ece:	f001 fcdd 	bl	800388c <HAL_GPIO_Init>
}
 8001ed2:	bf00      	nop
 8001ed4:	3730      	adds	r7, #48	; 0x30
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	40010000 	.word	0x40010000
 8001ee0:	40023800 	.word	0x40023800
 8001ee4:	40020000 	.word	0x40020000
 8001ee8:	40021000 	.word	0x40021000
 8001eec:	40000400 	.word	0x40000400
 8001ef0:	40020400 	.word	0x40020400
 8001ef4:	40001800 	.word	0x40001800
 8001ef8:	40021c00 	.word	0x40021c00

08001efc <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart6_tx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001f00:	4b11      	ldr	r3, [pc, #68]	; (8001f48 <MX_USART3_UART_Init+0x4c>)
 8001f02:	4a12      	ldr	r2, [pc, #72]	; (8001f4c <MX_USART3_UART_Init+0x50>)
 8001f04:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 921600;
 8001f06:	4b10      	ldr	r3, [pc, #64]	; (8001f48 <MX_USART3_UART_Init+0x4c>)
 8001f08:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8001f0c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001f0e:	4b0e      	ldr	r3, [pc, #56]	; (8001f48 <MX_USART3_UART_Init+0x4c>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001f14:	4b0c      	ldr	r3, [pc, #48]	; (8001f48 <MX_USART3_UART_Init+0x4c>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001f1a:	4b0b      	ldr	r3, [pc, #44]	; (8001f48 <MX_USART3_UART_Init+0x4c>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001f20:	4b09      	ldr	r3, [pc, #36]	; (8001f48 <MX_USART3_UART_Init+0x4c>)
 8001f22:	220c      	movs	r2, #12
 8001f24:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f26:	4b08      	ldr	r3, [pc, #32]	; (8001f48 <MX_USART3_UART_Init+0x4c>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f2c:	4b06      	ldr	r3, [pc, #24]	; (8001f48 <MX_USART3_UART_Init+0x4c>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001f32:	4805      	ldr	r0, [pc, #20]	; (8001f48 <MX_USART3_UART_Init+0x4c>)
 8001f34:	f005 f804 	bl	8006f40 <HAL_UART_Init>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d001      	beq.n	8001f42 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001f3e:	f7ff fb9d 	bl	800167c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001f42:	bf00      	nop
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	200003dc 	.word	0x200003dc
 8001f4c:	40004800 	.word	0x40004800

08001f50 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001f54:	4b11      	ldr	r3, [pc, #68]	; (8001f9c <MX_USART6_UART_Init+0x4c>)
 8001f56:	4a12      	ldr	r2, [pc, #72]	; (8001fa0 <MX_USART6_UART_Init+0x50>)
 8001f58:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 921600;
 8001f5a:	4b10      	ldr	r3, [pc, #64]	; (8001f9c <MX_USART6_UART_Init+0x4c>)
 8001f5c:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8001f60:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001f62:	4b0e      	ldr	r3, [pc, #56]	; (8001f9c <MX_USART6_UART_Init+0x4c>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001f68:	4b0c      	ldr	r3, [pc, #48]	; (8001f9c <MX_USART6_UART_Init+0x4c>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001f6e:	4b0b      	ldr	r3, [pc, #44]	; (8001f9c <MX_USART6_UART_Init+0x4c>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001f74:	4b09      	ldr	r3, [pc, #36]	; (8001f9c <MX_USART6_UART_Init+0x4c>)
 8001f76:	220c      	movs	r2, #12
 8001f78:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f7a:	4b08      	ldr	r3, [pc, #32]	; (8001f9c <MX_USART6_UART_Init+0x4c>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f80:	4b06      	ldr	r3, [pc, #24]	; (8001f9c <MX_USART6_UART_Init+0x4c>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001f86:	4805      	ldr	r0, [pc, #20]	; (8001f9c <MX_USART6_UART_Init+0x4c>)
 8001f88:	f004 ffda 	bl	8006f40 <HAL_UART_Init>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d001      	beq.n	8001f96 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001f92:	f7ff fb73 	bl	800167c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001f96:	bf00      	nop
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	20000424 	.word	0x20000424
 8001fa0:	40011400 	.word	0x40011400

08001fa4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b08c      	sub	sp, #48	; 0x30
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fac:	f107 031c 	add.w	r3, r7, #28
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	601a      	str	r2, [r3, #0]
 8001fb4:	605a      	str	r2, [r3, #4]
 8001fb6:	609a      	str	r2, [r3, #8]
 8001fb8:	60da      	str	r2, [r3, #12]
 8001fba:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a66      	ldr	r2, [pc, #408]	; (800215c <HAL_UART_MspInit+0x1b8>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d12d      	bne.n	8002022 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	61bb      	str	r3, [r7, #24]
 8001fca:	4b65      	ldr	r3, [pc, #404]	; (8002160 <HAL_UART_MspInit+0x1bc>)
 8001fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fce:	4a64      	ldr	r2, [pc, #400]	; (8002160 <HAL_UART_MspInit+0x1bc>)
 8001fd0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fd4:	6413      	str	r3, [r2, #64]	; 0x40
 8001fd6:	4b62      	ldr	r3, [pc, #392]	; (8002160 <HAL_UART_MspInit+0x1bc>)
 8001fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fda:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fde:	61bb      	str	r3, [r7, #24]
 8001fe0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	617b      	str	r3, [r7, #20]
 8001fe6:	4b5e      	ldr	r3, [pc, #376]	; (8002160 <HAL_UART_MspInit+0x1bc>)
 8001fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fea:	4a5d      	ldr	r2, [pc, #372]	; (8002160 <HAL_UART_MspInit+0x1bc>)
 8001fec:	f043 0308 	orr.w	r3, r3, #8
 8001ff0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ff2:	4b5b      	ldr	r3, [pc, #364]	; (8002160 <HAL_UART_MspInit+0x1bc>)
 8001ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff6:	f003 0308 	and.w	r3, r3, #8
 8001ffa:	617b      	str	r3, [r7, #20]
 8001ffc:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration
    PD9     ------> USART3_RX
    PD8     ------> USART3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 8001ffe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002002:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002004:	2302      	movs	r3, #2
 8002006:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002008:	2301      	movs	r3, #1
 800200a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800200c:	2303      	movs	r3, #3
 800200e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002010:	2307      	movs	r3, #7
 8002012:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002014:	f107 031c 	add.w	r3, r7, #28
 8002018:	4619      	mov	r1, r3
 800201a:	4852      	ldr	r0, [pc, #328]	; (8002164 <HAL_UART_MspInit+0x1c0>)
 800201c:	f001 fc36 	bl	800388c <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8002020:	e097      	b.n	8002152 <HAL_UART_MspInit+0x1ae>
  else if(uartHandle->Instance==USART6)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a50      	ldr	r2, [pc, #320]	; (8002168 <HAL_UART_MspInit+0x1c4>)
 8002028:	4293      	cmp	r3, r2
 800202a:	f040 8092 	bne.w	8002152 <HAL_UART_MspInit+0x1ae>
    __HAL_RCC_USART6_CLK_ENABLE();
 800202e:	2300      	movs	r3, #0
 8002030:	613b      	str	r3, [r7, #16]
 8002032:	4b4b      	ldr	r3, [pc, #300]	; (8002160 <HAL_UART_MspInit+0x1bc>)
 8002034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002036:	4a4a      	ldr	r2, [pc, #296]	; (8002160 <HAL_UART_MspInit+0x1bc>)
 8002038:	f043 0320 	orr.w	r3, r3, #32
 800203c:	6453      	str	r3, [r2, #68]	; 0x44
 800203e:	4b48      	ldr	r3, [pc, #288]	; (8002160 <HAL_UART_MspInit+0x1bc>)
 8002040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002042:	f003 0320 	and.w	r3, r3, #32
 8002046:	613b      	str	r3, [r7, #16]
 8002048:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800204a:	2300      	movs	r3, #0
 800204c:	60fb      	str	r3, [r7, #12]
 800204e:	4b44      	ldr	r3, [pc, #272]	; (8002160 <HAL_UART_MspInit+0x1bc>)
 8002050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002052:	4a43      	ldr	r2, [pc, #268]	; (8002160 <HAL_UART_MspInit+0x1bc>)
 8002054:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002058:	6313      	str	r3, [r2, #48]	; 0x30
 800205a:	4b41      	ldr	r3, [pc, #260]	; (8002160 <HAL_UART_MspInit+0x1bc>)
 800205c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002062:	60fb      	str	r3, [r7, #12]
 8002064:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_9;
 8002066:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 800206a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800206c:	2302      	movs	r3, #2
 800206e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002070:	2301      	movs	r3, #1
 8002072:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002074:	2303      	movs	r3, #3
 8002076:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002078:	2308      	movs	r3, #8
 800207a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800207c:	f107 031c 	add.w	r3, r7, #28
 8002080:	4619      	mov	r1, r3
 8002082:	483a      	ldr	r0, [pc, #232]	; (800216c <HAL_UART_MspInit+0x1c8>)
 8002084:	f001 fc02 	bl	800388c <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8002088:	4b39      	ldr	r3, [pc, #228]	; (8002170 <HAL_UART_MspInit+0x1cc>)
 800208a:	4a3a      	ldr	r2, [pc, #232]	; (8002174 <HAL_UART_MspInit+0x1d0>)
 800208c:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 800208e:	4b38      	ldr	r3, [pc, #224]	; (8002170 <HAL_UART_MspInit+0x1cc>)
 8002090:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8002094:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002096:	4b36      	ldr	r3, [pc, #216]	; (8002170 <HAL_UART_MspInit+0x1cc>)
 8002098:	2200      	movs	r2, #0
 800209a:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800209c:	4b34      	ldr	r3, [pc, #208]	; (8002170 <HAL_UART_MspInit+0x1cc>)
 800209e:	2200      	movs	r2, #0
 80020a0:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 80020a2:	4b33      	ldr	r3, [pc, #204]	; (8002170 <HAL_UART_MspInit+0x1cc>)
 80020a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80020a8:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80020aa:	4b31      	ldr	r3, [pc, #196]	; (8002170 <HAL_UART_MspInit+0x1cc>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80020b0:	4b2f      	ldr	r3, [pc, #188]	; (8002170 <HAL_UART_MspInit+0x1cc>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 80020b6:	4b2e      	ldr	r3, [pc, #184]	; (8002170 <HAL_UART_MspInit+0x1cc>)
 80020b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020bc:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 80020be:	4b2c      	ldr	r3, [pc, #176]	; (8002170 <HAL_UART_MspInit+0x1cc>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80020c4:	4b2a      	ldr	r3, [pc, #168]	; (8002170 <HAL_UART_MspInit+0x1cc>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 80020ca:	4829      	ldr	r0, [pc, #164]	; (8002170 <HAL_UART_MspInit+0x1cc>)
 80020cc:	f001 f862 	bl	8003194 <HAL_DMA_Init>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d001      	beq.n	80020da <HAL_UART_MspInit+0x136>
      Error_Handler();
 80020d6:	f7ff fad1 	bl	800167c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	4a24      	ldr	r2, [pc, #144]	; (8002170 <HAL_UART_MspInit+0x1cc>)
 80020de:	63da      	str	r2, [r3, #60]	; 0x3c
 80020e0:	4a23      	ldr	r2, [pc, #140]	; (8002170 <HAL_UART_MspInit+0x1cc>)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart6_tx.Instance = DMA2_Stream6;
 80020e6:	4b24      	ldr	r3, [pc, #144]	; (8002178 <HAL_UART_MspInit+0x1d4>)
 80020e8:	4a24      	ldr	r2, [pc, #144]	; (800217c <HAL_UART_MspInit+0x1d8>)
 80020ea:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 80020ec:	4b22      	ldr	r3, [pc, #136]	; (8002178 <HAL_UART_MspInit+0x1d4>)
 80020ee:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80020f2:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80020f4:	4b20      	ldr	r3, [pc, #128]	; (8002178 <HAL_UART_MspInit+0x1d4>)
 80020f6:	2240      	movs	r2, #64	; 0x40
 80020f8:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80020fa:	4b1f      	ldr	r3, [pc, #124]	; (8002178 <HAL_UART_MspInit+0x1d4>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002100:	4b1d      	ldr	r3, [pc, #116]	; (8002178 <HAL_UART_MspInit+0x1d4>)
 8002102:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002106:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002108:	4b1b      	ldr	r3, [pc, #108]	; (8002178 <HAL_UART_MspInit+0x1d4>)
 800210a:	2200      	movs	r2, #0
 800210c:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800210e:	4b1a      	ldr	r3, [pc, #104]	; (8002178 <HAL_UART_MspInit+0x1d4>)
 8002110:	2200      	movs	r2, #0
 8002112:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8002114:	4b18      	ldr	r3, [pc, #96]	; (8002178 <HAL_UART_MspInit+0x1d4>)
 8002116:	2200      	movs	r2, #0
 8002118:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 800211a:	4b17      	ldr	r3, [pc, #92]	; (8002178 <HAL_UART_MspInit+0x1d4>)
 800211c:	2200      	movs	r2, #0
 800211e:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002120:	4b15      	ldr	r3, [pc, #84]	; (8002178 <HAL_UART_MspInit+0x1d4>)
 8002122:	2200      	movs	r2, #0
 8002124:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8002126:	4814      	ldr	r0, [pc, #80]	; (8002178 <HAL_UART_MspInit+0x1d4>)
 8002128:	f001 f834 	bl	8003194 <HAL_DMA_Init>
 800212c:	4603      	mov	r3, r0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d001      	beq.n	8002136 <HAL_UART_MspInit+0x192>
      Error_Handler();
 8002132:	f7ff faa3 	bl	800167c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart6_tx);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	4a0f      	ldr	r2, [pc, #60]	; (8002178 <HAL_UART_MspInit+0x1d4>)
 800213a:	639a      	str	r2, [r3, #56]	; 0x38
 800213c:	4a0e      	ldr	r2, [pc, #56]	; (8002178 <HAL_UART_MspInit+0x1d4>)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8002142:	2200      	movs	r2, #0
 8002144:	2105      	movs	r1, #5
 8002146:	2047      	movs	r0, #71	; 0x47
 8002148:	f000 fffa 	bl	8003140 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800214c:	2047      	movs	r0, #71	; 0x47
 800214e:	f001 f813 	bl	8003178 <HAL_NVIC_EnableIRQ>
}
 8002152:	bf00      	nop
 8002154:	3730      	adds	r7, #48	; 0x30
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	40004800 	.word	0x40004800
 8002160:	40023800 	.word	0x40023800
 8002164:	40020c00 	.word	0x40020c00
 8002168:	40011400 	.word	0x40011400
 800216c:	40021800 	.word	0x40021800
 8002170:	2000046c 	.word	0x2000046c
 8002174:	40026428 	.word	0x40026428
 8002178:	200004cc 	.word	0x200004cc
 800217c:	400264a0 	.word	0x400264a0

08002180 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002180:	f8df d034 	ldr.w	sp, [pc, #52]	; 80021b8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002184:	f7ff fc0c 	bl	80019a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002188:	480c      	ldr	r0, [pc, #48]	; (80021bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800218a:	490d      	ldr	r1, [pc, #52]	; (80021c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800218c:	4a0d      	ldr	r2, [pc, #52]	; (80021c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800218e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002190:	e002      	b.n	8002198 <LoopCopyDataInit>

08002192 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002192:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002194:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002196:	3304      	adds	r3, #4

08002198 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002198:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800219a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800219c:	d3f9      	bcc.n	8002192 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800219e:	4a0a      	ldr	r2, [pc, #40]	; (80021c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80021a0:	4c0a      	ldr	r4, [pc, #40]	; (80021cc <LoopFillZerobss+0x22>)
  movs r3, #0
 80021a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021a4:	e001      	b.n	80021aa <LoopFillZerobss>

080021a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021a8:	3204      	adds	r2, #4

080021aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021ac:	d3fb      	bcc.n	80021a6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80021ae:	f00f fbfd 	bl	80119ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021b2:	f7ff f9c3 	bl	800153c <main>
  bx  lr    
 80021b6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80021b8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80021bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021c0:	200001a8 	.word	0x200001a8
  ldr r2, =_sidata
 80021c4:	08013b10 	.word	0x08013b10
  ldr r2, =_sbss
 80021c8:	200001a8 	.word	0x200001a8
  ldr r4, =_ebss
 80021cc:	20012ff4 	.word	0x20012ff4

080021d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021d0:	e7fe      	b.n	80021d0 <ADC_IRQHandler>
	...

080021d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80021d8:	4b0e      	ldr	r3, [pc, #56]	; (8002214 <HAL_Init+0x40>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a0d      	ldr	r2, [pc, #52]	; (8002214 <HAL_Init+0x40>)
 80021de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80021e4:	4b0b      	ldr	r3, [pc, #44]	; (8002214 <HAL_Init+0x40>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a0a      	ldr	r2, [pc, #40]	; (8002214 <HAL_Init+0x40>)
 80021ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021f0:	4b08      	ldr	r3, [pc, #32]	; (8002214 <HAL_Init+0x40>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a07      	ldr	r2, [pc, #28]	; (8002214 <HAL_Init+0x40>)
 80021f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021fc:	2003      	movs	r0, #3
 80021fe:	f000 ff94 	bl	800312a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002202:	200f      	movs	r0, #15
 8002204:	f7ff faea 	bl	80017dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002208:	f7ff fabc 	bl	8001784 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800220c:	2300      	movs	r3, #0
}
 800220e:	4618      	mov	r0, r3
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	40023c00 	.word	0x40023c00

08002218 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800221c:	4b06      	ldr	r3, [pc, #24]	; (8002238 <HAL_IncTick+0x20>)
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	461a      	mov	r2, r3
 8002222:	4b06      	ldr	r3, [pc, #24]	; (800223c <HAL_IncTick+0x24>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4413      	add	r3, r2
 8002228:	4a04      	ldr	r2, [pc, #16]	; (800223c <HAL_IncTick+0x24>)
 800222a:	6013      	str	r3, [r2, #0]
}
 800222c:	bf00      	nop
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr
 8002236:	bf00      	nop
 8002238:	20000008 	.word	0x20000008
 800223c:	2000052c 	.word	0x2000052c

08002240 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002240:	b480      	push	{r7}
 8002242:	af00      	add	r7, sp, #0
  return uwTick;
 8002244:	4b03      	ldr	r3, [pc, #12]	; (8002254 <HAL_GetTick+0x14>)
 8002246:	681b      	ldr	r3, [r3, #0]
}
 8002248:	4618      	mov	r0, r3
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr
 8002252:	bf00      	nop
 8002254:	2000052c 	.word	0x2000052c

08002258 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b084      	sub	sp, #16
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002260:	f7ff ffee 	bl	8002240 <HAL_GetTick>
 8002264:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002270:	d005      	beq.n	800227e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002272:	4b0a      	ldr	r3, [pc, #40]	; (800229c <HAL_Delay+0x44>)
 8002274:	781b      	ldrb	r3, [r3, #0]
 8002276:	461a      	mov	r2, r3
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	4413      	add	r3, r2
 800227c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800227e:	bf00      	nop
 8002280:	f7ff ffde 	bl	8002240 <HAL_GetTick>
 8002284:	4602      	mov	r2, r0
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	68fa      	ldr	r2, [r7, #12]
 800228c:	429a      	cmp	r2, r3
 800228e:	d8f7      	bhi.n	8002280 <HAL_Delay+0x28>
  {
  }
}
 8002290:	bf00      	nop
 8002292:	bf00      	nop
 8002294:	3710      	adds	r7, #16
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	20000008 	.word	0x20000008

080022a0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b084      	sub	sp, #16
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d101      	bne.n	80022b2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e0ed      	b.n	800248e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d102      	bne.n	80022c4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f7fe fe6a 	bl	8000f98 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f042 0201 	orr.w	r2, r2, #1
 80022d2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80022d4:	f7ff ffb4 	bl	8002240 <HAL_GetTick>
 80022d8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80022da:	e012      	b.n	8002302 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80022dc:	f7ff ffb0 	bl	8002240 <HAL_GetTick>
 80022e0:	4602      	mov	r2, r0
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	2b0a      	cmp	r3, #10
 80022e8:	d90b      	bls.n	8002302 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ee:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2205      	movs	r2, #5
 80022fa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	e0c5      	b.n	800248e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	f003 0301 	and.w	r3, r3, #1
 800230c:	2b00      	cmp	r3, #0
 800230e:	d0e5      	beq.n	80022dc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f022 0202 	bic.w	r2, r2, #2
 800231e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002320:	f7ff ff8e 	bl	8002240 <HAL_GetTick>
 8002324:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002326:	e012      	b.n	800234e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002328:	f7ff ff8a 	bl	8002240 <HAL_GetTick>
 800232c:	4602      	mov	r2, r0
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	2b0a      	cmp	r3, #10
 8002334:	d90b      	bls.n	800234e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800233a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2205      	movs	r2, #5
 8002346:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e09f      	b.n	800248e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f003 0302 	and.w	r3, r3, #2
 8002358:	2b00      	cmp	r3, #0
 800235a:	d1e5      	bne.n	8002328 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	7e1b      	ldrb	r3, [r3, #24]
 8002360:	2b01      	cmp	r3, #1
 8002362:	d108      	bne.n	8002376 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002372:	601a      	str	r2, [r3, #0]
 8002374:	e007      	b.n	8002386 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002384:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	7e5b      	ldrb	r3, [r3, #25]
 800238a:	2b01      	cmp	r3, #1
 800238c:	d108      	bne.n	80023a0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800239c:	601a      	str	r2, [r3, #0]
 800239e:	e007      	b.n	80023b0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80023ae:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	7e9b      	ldrb	r3, [r3, #26]
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d108      	bne.n	80023ca <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f042 0220 	orr.w	r2, r2, #32
 80023c6:	601a      	str	r2, [r3, #0]
 80023c8:	e007      	b.n	80023da <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f022 0220 	bic.w	r2, r2, #32
 80023d8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	7edb      	ldrb	r3, [r3, #27]
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d108      	bne.n	80023f4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f022 0210 	bic.w	r2, r2, #16
 80023f0:	601a      	str	r2, [r3, #0]
 80023f2:	e007      	b.n	8002404 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f042 0210 	orr.w	r2, r2, #16
 8002402:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	7f1b      	ldrb	r3, [r3, #28]
 8002408:	2b01      	cmp	r3, #1
 800240a:	d108      	bne.n	800241e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f042 0208 	orr.w	r2, r2, #8
 800241a:	601a      	str	r2, [r3, #0]
 800241c:	e007      	b.n	800242e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f022 0208 	bic.w	r2, r2, #8
 800242c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	7f5b      	ldrb	r3, [r3, #29]
 8002432:	2b01      	cmp	r3, #1
 8002434:	d108      	bne.n	8002448 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f042 0204 	orr.w	r2, r2, #4
 8002444:	601a      	str	r2, [r3, #0]
 8002446:	e007      	b.n	8002458 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f022 0204 	bic.w	r2, r2, #4
 8002456:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	689a      	ldr	r2, [r3, #8]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	431a      	orrs	r2, r3
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	691b      	ldr	r3, [r3, #16]
 8002466:	431a      	orrs	r2, r3
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	695b      	ldr	r3, [r3, #20]
 800246c:	ea42 0103 	orr.w	r1, r2, r3
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	1e5a      	subs	r2, r3, #1
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	430a      	orrs	r2, r1
 800247c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2200      	movs	r2, #0
 8002482:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2201      	movs	r2, #1
 8002488:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800248c:	2300      	movs	r3, #0
}
 800248e:	4618      	mov	r0, r3
 8002490:	3710      	adds	r7, #16
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
	...

08002498 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8002498:	b480      	push	{r7}
 800249a:	b087      	sub	sp, #28
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024ae:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80024b0:	7cfb      	ldrb	r3, [r7, #19]
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d003      	beq.n	80024be <HAL_CAN_ConfigFilter+0x26>
 80024b6:	7cfb      	ldrb	r3, [r7, #19]
 80024b8:	2b02      	cmp	r3, #2
 80024ba:	f040 80be 	bne.w	800263a <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80024be:	4b65      	ldr	r3, [pc, #404]	; (8002654 <HAL_CAN_ConfigFilter+0x1bc>)
 80024c0:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80024c8:	f043 0201 	orr.w	r2, r3, #1
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80024d8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ec:	021b      	lsls	r3, r3, #8
 80024ee:	431a      	orrs	r2, r3
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	695b      	ldr	r3, [r3, #20]
 80024fa:	f003 031f 	and.w	r3, r3, #31
 80024fe:	2201      	movs	r2, #1
 8002500:	fa02 f303 	lsl.w	r3, r2, r3
 8002504:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	43db      	mvns	r3, r3
 8002510:	401a      	ands	r2, r3
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	69db      	ldr	r3, [r3, #28]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d123      	bne.n	8002568 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	43db      	mvns	r3, r3
 800252a:	401a      	ands	r2, r3
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	68db      	ldr	r3, [r3, #12]
 8002536:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800253e:	683a      	ldr	r2, [r7, #0]
 8002540:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002542:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	3248      	adds	r2, #72	; 0x48
 8002548:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800255c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800255e:	6979      	ldr	r1, [r7, #20]
 8002560:	3348      	adds	r3, #72	; 0x48
 8002562:	00db      	lsls	r3, r3, #3
 8002564:	440b      	add	r3, r1
 8002566:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	69db      	ldr	r3, [r3, #28]
 800256c:	2b01      	cmp	r3, #1
 800256e:	d122      	bne.n	80025b6 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	431a      	orrs	r2, r3
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800258c:	683a      	ldr	r2, [r7, #0]
 800258e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002590:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	3248      	adds	r2, #72	; 0x48
 8002596:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80025aa:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80025ac:	6979      	ldr	r1, [r7, #20]
 80025ae:	3348      	adds	r3, #72	; 0x48
 80025b0:	00db      	lsls	r3, r3, #3
 80025b2:	440b      	add	r3, r1
 80025b4:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	699b      	ldr	r3, [r3, #24]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d109      	bne.n	80025d2 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	43db      	mvns	r3, r3
 80025c8:	401a      	ands	r2, r3
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80025d0:	e007      	b.n	80025e2 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	431a      	orrs	r2, r3
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	691b      	ldr	r3, [r3, #16]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d109      	bne.n	80025fe <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	43db      	mvns	r3, r3
 80025f4:	401a      	ands	r2, r3
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80025fc:	e007      	b.n	800260e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	431a      	orrs	r2, r3
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	6a1b      	ldr	r3, [r3, #32]
 8002612:	2b01      	cmp	r3, #1
 8002614:	d107      	bne.n	8002626 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	431a      	orrs	r2, r3
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800262c:	f023 0201 	bic.w	r2, r3, #1
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002636:	2300      	movs	r3, #0
 8002638:	e006      	b.n	8002648 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800263e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
  }
}
 8002648:	4618      	mov	r0, r3
 800264a:	371c      	adds	r7, #28
 800264c:	46bd      	mov	sp, r7
 800264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002652:	4770      	bx	lr
 8002654:	40006400 	.word	0x40006400

08002658 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b084      	sub	sp, #16
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002666:	b2db      	uxtb	r3, r3
 8002668:	2b01      	cmp	r3, #1
 800266a:	d12e      	bne.n	80026ca <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2202      	movs	r2, #2
 8002670:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f022 0201 	bic.w	r2, r2, #1
 8002682:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002684:	f7ff fddc 	bl	8002240 <HAL_GetTick>
 8002688:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800268a:	e012      	b.n	80026b2 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800268c:	f7ff fdd8 	bl	8002240 <HAL_GetTick>
 8002690:	4602      	mov	r2, r0
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	2b0a      	cmp	r3, #10
 8002698:	d90b      	bls.n	80026b2 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800269e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2205      	movs	r2, #5
 80026aa:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e012      	b.n	80026d8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	f003 0301 	and.w	r3, r3, #1
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d1e5      	bne.n	800268c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2200      	movs	r2, #0
 80026c4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80026c6:	2300      	movs	r3, #0
 80026c8:	e006      	b.n	80026d8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ce:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
  }
}
 80026d8:	4618      	mov	r0, r3
 80026da:	3710      	adds	r7, #16
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}

080026e0 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b089      	sub	sp, #36	; 0x24
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	60f8      	str	r0, [r7, #12]
 80026e8:	60b9      	str	r1, [r7, #8]
 80026ea:	607a      	str	r2, [r7, #4]
 80026ec:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026f4:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80026fe:	7ffb      	ldrb	r3, [r7, #31]
 8002700:	2b01      	cmp	r3, #1
 8002702:	d003      	beq.n	800270c <HAL_CAN_AddTxMessage+0x2c>
 8002704:	7ffb      	ldrb	r3, [r7, #31]
 8002706:	2b02      	cmp	r3, #2
 8002708:	f040 80ad 	bne.w	8002866 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800270c:	69bb      	ldr	r3, [r7, #24]
 800270e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002712:	2b00      	cmp	r3, #0
 8002714:	d10a      	bne.n	800272c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002716:	69bb      	ldr	r3, [r7, #24]
 8002718:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800271c:	2b00      	cmp	r3, #0
 800271e:	d105      	bne.n	800272c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002720:	69bb      	ldr	r3, [r7, #24]
 8002722:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002726:	2b00      	cmp	r3, #0
 8002728:	f000 8095 	beq.w	8002856 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800272c:	69bb      	ldr	r3, [r7, #24]
 800272e:	0e1b      	lsrs	r3, r3, #24
 8002730:	f003 0303 	and.w	r3, r3, #3
 8002734:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002736:	2201      	movs	r2, #1
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	409a      	lsls	r2, r3
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d10d      	bne.n	8002764 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002752:	68f9      	ldr	r1, [r7, #12]
 8002754:	6809      	ldr	r1, [r1, #0]
 8002756:	431a      	orrs	r2, r3
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	3318      	adds	r3, #24
 800275c:	011b      	lsls	r3, r3, #4
 800275e:	440b      	add	r3, r1
 8002760:	601a      	str	r2, [r3, #0]
 8002762:	e00f      	b.n	8002784 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800276e:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002774:	68f9      	ldr	r1, [r7, #12]
 8002776:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002778:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	3318      	adds	r3, #24
 800277e:	011b      	lsls	r3, r3, #4
 8002780:	440b      	add	r3, r1
 8002782:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	6819      	ldr	r1, [r3, #0]
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	691a      	ldr	r2, [r3, #16]
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	3318      	adds	r3, #24
 8002790:	011b      	lsls	r3, r3, #4
 8002792:	440b      	add	r3, r1
 8002794:	3304      	adds	r3, #4
 8002796:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	7d1b      	ldrb	r3, [r3, #20]
 800279c:	2b01      	cmp	r3, #1
 800279e:	d111      	bne.n	80027c4 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	3318      	adds	r3, #24
 80027a8:	011b      	lsls	r3, r3, #4
 80027aa:	4413      	add	r3, r2
 80027ac:	3304      	adds	r3, #4
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	68fa      	ldr	r2, [r7, #12]
 80027b2:	6811      	ldr	r1, [r2, #0]
 80027b4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	3318      	adds	r3, #24
 80027bc:	011b      	lsls	r3, r3, #4
 80027be:	440b      	add	r3, r1
 80027c0:	3304      	adds	r3, #4
 80027c2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	3307      	adds	r3, #7
 80027c8:	781b      	ldrb	r3, [r3, #0]
 80027ca:	061a      	lsls	r2, r3, #24
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	3306      	adds	r3, #6
 80027d0:	781b      	ldrb	r3, [r3, #0]
 80027d2:	041b      	lsls	r3, r3, #16
 80027d4:	431a      	orrs	r2, r3
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	3305      	adds	r3, #5
 80027da:	781b      	ldrb	r3, [r3, #0]
 80027dc:	021b      	lsls	r3, r3, #8
 80027de:	4313      	orrs	r3, r2
 80027e0:	687a      	ldr	r2, [r7, #4]
 80027e2:	3204      	adds	r2, #4
 80027e4:	7812      	ldrb	r2, [r2, #0]
 80027e6:	4610      	mov	r0, r2
 80027e8:	68fa      	ldr	r2, [r7, #12]
 80027ea:	6811      	ldr	r1, [r2, #0]
 80027ec:	ea43 0200 	orr.w	r2, r3, r0
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	011b      	lsls	r3, r3, #4
 80027f4:	440b      	add	r3, r1
 80027f6:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80027fa:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	3303      	adds	r3, #3
 8002800:	781b      	ldrb	r3, [r3, #0]
 8002802:	061a      	lsls	r2, r3, #24
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	3302      	adds	r3, #2
 8002808:	781b      	ldrb	r3, [r3, #0]
 800280a:	041b      	lsls	r3, r3, #16
 800280c:	431a      	orrs	r2, r3
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	3301      	adds	r3, #1
 8002812:	781b      	ldrb	r3, [r3, #0]
 8002814:	021b      	lsls	r3, r3, #8
 8002816:	4313      	orrs	r3, r2
 8002818:	687a      	ldr	r2, [r7, #4]
 800281a:	7812      	ldrb	r2, [r2, #0]
 800281c:	4610      	mov	r0, r2
 800281e:	68fa      	ldr	r2, [r7, #12]
 8002820:	6811      	ldr	r1, [r2, #0]
 8002822:	ea43 0200 	orr.w	r2, r3, r0
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	011b      	lsls	r3, r3, #4
 800282a:	440b      	add	r3, r1
 800282c:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002830:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	3318      	adds	r3, #24
 800283a:	011b      	lsls	r3, r3, #4
 800283c:	4413      	add	r3, r2
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	68fa      	ldr	r2, [r7, #12]
 8002842:	6811      	ldr	r1, [r2, #0]
 8002844:	f043 0201 	orr.w	r2, r3, #1
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	3318      	adds	r3, #24
 800284c:	011b      	lsls	r3, r3, #4
 800284e:	440b      	add	r3, r1
 8002850:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002852:	2300      	movs	r3, #0
 8002854:	e00e      	b.n	8002874 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800285a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e006      	b.n	8002874 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800286a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
  }
}
 8002874:	4618      	mov	r0, r3
 8002876:	3724      	adds	r7, #36	; 0x24
 8002878:	46bd      	mov	sp, r7
 800287a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287e:	4770      	bx	lr

08002880 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 8002880:	b480      	push	{r7}
 8002882:	b085      	sub	sp, #20
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8002888:	2300      	movs	r3, #0
 800288a:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002892:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8002894:	7afb      	ldrb	r3, [r7, #11]
 8002896:	2b01      	cmp	r3, #1
 8002898:	d002      	beq.n	80028a0 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 800289a:	7afb      	ldrb	r3, [r7, #11]
 800289c:	2b02      	cmp	r3, #2
 800289e:	d11d      	bne.n	80028dc <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d002      	beq.n	80028b4 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	3301      	adds	r3, #1
 80028b2:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d002      	beq.n	80028c8 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	3301      	adds	r3, #1
 80028c6:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d002      	beq.n	80028dc <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	3301      	adds	r3, #1
 80028da:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 80028dc:	68fb      	ldr	r3, [r7, #12]
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3714      	adds	r7, #20
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr

080028ea <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80028ea:	b480      	push	{r7}
 80028ec:	b087      	sub	sp, #28
 80028ee:	af00      	add	r7, sp, #0
 80028f0:	60f8      	str	r0, [r7, #12]
 80028f2:	60b9      	str	r1, [r7, #8]
 80028f4:	607a      	str	r2, [r7, #4]
 80028f6:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028fe:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002900:	7dfb      	ldrb	r3, [r7, #23]
 8002902:	2b01      	cmp	r3, #1
 8002904:	d003      	beq.n	800290e <HAL_CAN_GetRxMessage+0x24>
 8002906:	7dfb      	ldrb	r3, [r7, #23]
 8002908:	2b02      	cmp	r3, #2
 800290a:	f040 8103 	bne.w	8002b14 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d10e      	bne.n	8002932 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	68db      	ldr	r3, [r3, #12]
 800291a:	f003 0303 	and.w	r3, r3, #3
 800291e:	2b00      	cmp	r3, #0
 8002920:	d116      	bne.n	8002950 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002926:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e0f7      	b.n	8002b22 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	691b      	ldr	r3, [r3, #16]
 8002938:	f003 0303 	and.w	r3, r3, #3
 800293c:	2b00      	cmp	r3, #0
 800293e:	d107      	bne.n	8002950 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002944:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	e0e8      	b.n	8002b22 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	331b      	adds	r3, #27
 8002958:	011b      	lsls	r3, r3, #4
 800295a:	4413      	add	r3, r2
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 0204 	and.w	r2, r3, #4
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d10c      	bne.n	8002988 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	331b      	adds	r3, #27
 8002976:	011b      	lsls	r3, r3, #4
 8002978:	4413      	add	r3, r2
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	0d5b      	lsrs	r3, r3, #21
 800297e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	601a      	str	r2, [r3, #0]
 8002986:	e00b      	b.n	80029a0 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	331b      	adds	r3, #27
 8002990:	011b      	lsls	r3, r3, #4
 8002992:	4413      	add	r3, r2
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	08db      	lsrs	r3, r3, #3
 8002998:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	331b      	adds	r3, #27
 80029a8:	011b      	lsls	r3, r3, #4
 80029aa:	4413      	add	r3, r2
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 0202 	and.w	r2, r3, #2
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	331b      	adds	r3, #27
 80029be:	011b      	lsls	r3, r3, #4
 80029c0:	4413      	add	r3, r2
 80029c2:	3304      	adds	r3, #4
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 0308 	and.w	r3, r3, #8
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d003      	beq.n	80029d6 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2208      	movs	r2, #8
 80029d2:	611a      	str	r2, [r3, #16]
 80029d4:	e00b      	b.n	80029ee <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	331b      	adds	r3, #27
 80029de:	011b      	lsls	r3, r3, #4
 80029e0:	4413      	add	r3, r2
 80029e2:	3304      	adds	r3, #4
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 020f 	and.w	r2, r3, #15
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	331b      	adds	r3, #27
 80029f6:	011b      	lsls	r3, r3, #4
 80029f8:	4413      	add	r3, r2
 80029fa:	3304      	adds	r3, #4
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	0a1b      	lsrs	r3, r3, #8
 8002a00:	b2da      	uxtb	r2, r3
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	331b      	adds	r3, #27
 8002a0e:	011b      	lsls	r3, r3, #4
 8002a10:	4413      	add	r3, r2
 8002a12:	3304      	adds	r3, #4
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	0c1b      	lsrs	r3, r3, #16
 8002a18:	b29a      	uxth	r2, r3
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	011b      	lsls	r3, r3, #4
 8002a26:	4413      	add	r3, r2
 8002a28:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	b2da      	uxtb	r2, r3
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	011b      	lsls	r3, r3, #4
 8002a3c:	4413      	add	r3, r2
 8002a3e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	0a1a      	lsrs	r2, r3, #8
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	3301      	adds	r3, #1
 8002a4a:	b2d2      	uxtb	r2, r2
 8002a4c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	011b      	lsls	r3, r3, #4
 8002a56:	4413      	add	r3, r2
 8002a58:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	0c1a      	lsrs	r2, r3, #16
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	3302      	adds	r3, #2
 8002a64:	b2d2      	uxtb	r2, r2
 8002a66:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	011b      	lsls	r3, r3, #4
 8002a70:	4413      	add	r3, r2
 8002a72:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	0e1a      	lsrs	r2, r3, #24
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	3303      	adds	r3, #3
 8002a7e:	b2d2      	uxtb	r2, r2
 8002a80:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	011b      	lsls	r3, r3, #4
 8002a8a:	4413      	add	r3, r2
 8002a8c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	3304      	adds	r3, #4
 8002a96:	b2d2      	uxtb	r2, r2
 8002a98:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681a      	ldr	r2, [r3, #0]
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	011b      	lsls	r3, r3, #4
 8002aa2:	4413      	add	r3, r2
 8002aa4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	0a1a      	lsrs	r2, r3, #8
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	3305      	adds	r3, #5
 8002ab0:	b2d2      	uxtb	r2, r2
 8002ab2:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	011b      	lsls	r3, r3, #4
 8002abc:	4413      	add	r3, r2
 8002abe:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	0c1a      	lsrs	r2, r3, #16
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	3306      	adds	r3, #6
 8002aca:	b2d2      	uxtb	r2, r2
 8002acc:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	011b      	lsls	r3, r3, #4
 8002ad6:	4413      	add	r3, r2
 8002ad8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	0e1a      	lsrs	r2, r3, #24
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	3307      	adds	r3, #7
 8002ae4:	b2d2      	uxtb	r2, r2
 8002ae6:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d108      	bne.n	8002b00 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	68da      	ldr	r2, [r3, #12]
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f042 0220 	orr.w	r2, r2, #32
 8002afc:	60da      	str	r2, [r3, #12]
 8002afe:	e007      	b.n	8002b10 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	691a      	ldr	r2, [r3, #16]
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f042 0220 	orr.w	r2, r2, #32
 8002b0e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002b10:	2300      	movs	r3, #0
 8002b12:	e006      	b.n	8002b22 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b18:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
  }
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	371c      	adds	r7, #28
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr

08002b2e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002b2e:	b480      	push	{r7}
 8002b30:	b085      	sub	sp, #20
 8002b32:	af00      	add	r7, sp, #0
 8002b34:	6078      	str	r0, [r7, #4]
 8002b36:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b3e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002b40:	7bfb      	ldrb	r3, [r7, #15]
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d002      	beq.n	8002b4c <HAL_CAN_ActivateNotification+0x1e>
 8002b46:	7bfb      	ldrb	r3, [r7, #15]
 8002b48:	2b02      	cmp	r3, #2
 8002b4a:	d109      	bne.n	8002b60 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	6959      	ldr	r1, [r3, #20]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	683a      	ldr	r2, [r7, #0]
 8002b58:	430a      	orrs	r2, r1
 8002b5a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	e006      	b.n	8002b6e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b64:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
  }
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3714      	adds	r7, #20
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr

08002b7a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002b7a:	b580      	push	{r7, lr}
 8002b7c:	b08a      	sub	sp, #40	; 0x28
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002b82:	2300      	movs	r3, #0
 8002b84:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	695b      	ldr	r3, [r3, #20]
 8002b8c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	691b      	ldr	r3, [r3, #16]
 8002bac:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	699b      	ldr	r3, [r3, #24]
 8002bb4:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002bb6:	6a3b      	ldr	r3, [r7, #32]
 8002bb8:	f003 0301 	and.w	r3, r3, #1
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d07c      	beq.n	8002cba <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002bc0:	69bb      	ldr	r3, [r7, #24]
 8002bc2:	f003 0301 	and.w	r3, r3, #1
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d023      	beq.n	8002c12 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	2201      	movs	r2, #1
 8002bd0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002bd2:	69bb      	ldr	r3, [r7, #24]
 8002bd4:	f003 0302 	and.w	r3, r3, #2
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d003      	beq.n	8002be4 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	f00b fdf9 	bl	800e7d4 <HAL_CAN_TxMailbox0CompleteCallback>
 8002be2:	e016      	b.n	8002c12 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002be4:	69bb      	ldr	r3, [r7, #24]
 8002be6:	f003 0304 	and.w	r3, r3, #4
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d004      	beq.n	8002bf8 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002bf4:	627b      	str	r3, [r7, #36]	; 0x24
 8002bf6:	e00c      	b.n	8002c12 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002bf8:	69bb      	ldr	r3, [r7, #24]
 8002bfa:	f003 0308 	and.w	r3, r3, #8
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d004      	beq.n	8002c0c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c04:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002c08:	627b      	str	r3, [r7, #36]	; 0x24
 8002c0a:	e002      	b.n	8002c12 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002c0c:	6878      	ldr	r0, [r7, #4]
 8002c0e:	f000 f96b 	bl	8002ee8 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002c12:	69bb      	ldr	r3, [r7, #24]
 8002c14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d024      	beq.n	8002c66 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c24:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002c26:	69bb      	ldr	r3, [r7, #24]
 8002c28:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d003      	beq.n	8002c38 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002c30:	6878      	ldr	r0, [r7, #4]
 8002c32:	f00b fde3 	bl	800e7fc <HAL_CAN_TxMailbox1CompleteCallback>
 8002c36:	e016      	b.n	8002c66 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002c38:	69bb      	ldr	r3, [r7, #24]
 8002c3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d004      	beq.n	8002c4c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c44:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002c48:	627b      	str	r3, [r7, #36]	; 0x24
 8002c4a:	e00c      	b.n	8002c66 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002c4c:	69bb      	ldr	r3, [r7, #24]
 8002c4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d004      	beq.n	8002c60 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c5c:	627b      	str	r3, [r7, #36]	; 0x24
 8002c5e:	e002      	b.n	8002c66 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002c60:	6878      	ldr	r0, [r7, #4]
 8002c62:	f000 f94b 	bl	8002efc <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002c66:	69bb      	ldr	r3, [r7, #24]
 8002c68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d024      	beq.n	8002cba <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002c78:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002c7a:	69bb      	ldr	r3, [r7, #24]
 8002c7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d003      	beq.n	8002c8c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002c84:	6878      	ldr	r0, [r7, #4]
 8002c86:	f00b fdcd 	bl	800e824 <HAL_CAN_TxMailbox2CompleteCallback>
 8002c8a:	e016      	b.n	8002cba <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002c8c:	69bb      	ldr	r3, [r7, #24]
 8002c8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d004      	beq.n	8002ca0 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c9c:	627b      	str	r3, [r7, #36]	; 0x24
 8002c9e:	e00c      	b.n	8002cba <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002ca0:	69bb      	ldr	r3, [r7, #24]
 8002ca2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d004      	beq.n	8002cb4 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cb0:	627b      	str	r3, [r7, #36]	; 0x24
 8002cb2:	e002      	b.n	8002cba <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002cb4:	6878      	ldr	r0, [r7, #4]
 8002cb6:	f000 f92b 	bl	8002f10 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002cba:	6a3b      	ldr	r3, [r7, #32]
 8002cbc:	f003 0308 	and.w	r3, r3, #8
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d00c      	beq.n	8002cde <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	f003 0310 	and.w	r3, r3, #16
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d007      	beq.n	8002cde <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002cd4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	2210      	movs	r2, #16
 8002cdc:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002cde:	6a3b      	ldr	r3, [r7, #32]
 8002ce0:	f003 0304 	and.w	r3, r3, #4
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d00b      	beq.n	8002d00 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	f003 0308 	and.w	r3, r3, #8
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d006      	beq.n	8002d00 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	2208      	movs	r2, #8
 8002cf8:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f000 f912 	bl	8002f24 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002d00:	6a3b      	ldr	r3, [r7, #32]
 8002d02:	f003 0302 	and.w	r3, r3, #2
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d009      	beq.n	8002d1e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	f003 0303 	and.w	r3, r3, #3
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d002      	beq.n	8002d1e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002d18:	6878      	ldr	r0, [r7, #4]
 8002d1a:	f00b fdad 	bl	800e878 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002d1e:	6a3b      	ldr	r3, [r7, #32]
 8002d20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d00c      	beq.n	8002d42 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	f003 0310 	and.w	r3, r3, #16
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d007      	beq.n	8002d42 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d34:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d38:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	2210      	movs	r2, #16
 8002d40:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002d42:	6a3b      	ldr	r3, [r7, #32]
 8002d44:	f003 0320 	and.w	r3, r3, #32
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d00b      	beq.n	8002d64 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	f003 0308 	and.w	r3, r3, #8
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d006      	beq.n	8002d64 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	2208      	movs	r2, #8
 8002d5c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f000 f8f4 	bl	8002f4c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002d64:	6a3b      	ldr	r3, [r7, #32]
 8002d66:	f003 0310 	and.w	r3, r3, #16
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d009      	beq.n	8002d82 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	691b      	ldr	r3, [r3, #16]
 8002d74:	f003 0303 	and.w	r3, r3, #3
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d002      	beq.n	8002d82 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002d7c:	6878      	ldr	r0, [r7, #4]
 8002d7e:	f000 f8db 	bl	8002f38 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002d82:	6a3b      	ldr	r3, [r7, #32]
 8002d84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d00b      	beq.n	8002da4 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002d8c:	69fb      	ldr	r3, [r7, #28]
 8002d8e:	f003 0310 	and.w	r3, r3, #16
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d006      	beq.n	8002da4 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	2210      	movs	r2, #16
 8002d9c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	f000 f8de 	bl	8002f60 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002da4:	6a3b      	ldr	r3, [r7, #32]
 8002da6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d00b      	beq.n	8002dc6 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002dae:	69fb      	ldr	r3, [r7, #28]
 8002db0:	f003 0308 	and.w	r3, r3, #8
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d006      	beq.n	8002dc6 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	2208      	movs	r2, #8
 8002dbe:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002dc0:	6878      	ldr	r0, [r7, #4]
 8002dc2:	f000 f8d7 	bl	8002f74 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002dc6:	6a3b      	ldr	r3, [r7, #32]
 8002dc8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d07b      	beq.n	8002ec8 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002dd0:	69fb      	ldr	r3, [r7, #28]
 8002dd2:	f003 0304 	and.w	r3, r3, #4
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d072      	beq.n	8002ec0 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002dda:	6a3b      	ldr	r3, [r7, #32]
 8002ddc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d008      	beq.n	8002df6 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d003      	beq.n	8002df6 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df0:	f043 0301 	orr.w	r3, r3, #1
 8002df4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002df6:	6a3b      	ldr	r3, [r7, #32]
 8002df8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d008      	beq.n	8002e12 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d003      	beq.n	8002e12 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e0c:	f043 0302 	orr.w	r3, r3, #2
 8002e10:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002e12:	6a3b      	ldr	r3, [r7, #32]
 8002e14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d008      	beq.n	8002e2e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d003      	beq.n	8002e2e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e28:	f043 0304 	orr.w	r3, r3, #4
 8002e2c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002e2e:	6a3b      	ldr	r3, [r7, #32]
 8002e30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d043      	beq.n	8002ec0 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d03e      	beq.n	8002ec0 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002e48:	2b60      	cmp	r3, #96	; 0x60
 8002e4a:	d02b      	beq.n	8002ea4 <HAL_CAN_IRQHandler+0x32a>
 8002e4c:	2b60      	cmp	r3, #96	; 0x60
 8002e4e:	d82e      	bhi.n	8002eae <HAL_CAN_IRQHandler+0x334>
 8002e50:	2b50      	cmp	r3, #80	; 0x50
 8002e52:	d022      	beq.n	8002e9a <HAL_CAN_IRQHandler+0x320>
 8002e54:	2b50      	cmp	r3, #80	; 0x50
 8002e56:	d82a      	bhi.n	8002eae <HAL_CAN_IRQHandler+0x334>
 8002e58:	2b40      	cmp	r3, #64	; 0x40
 8002e5a:	d019      	beq.n	8002e90 <HAL_CAN_IRQHandler+0x316>
 8002e5c:	2b40      	cmp	r3, #64	; 0x40
 8002e5e:	d826      	bhi.n	8002eae <HAL_CAN_IRQHandler+0x334>
 8002e60:	2b30      	cmp	r3, #48	; 0x30
 8002e62:	d010      	beq.n	8002e86 <HAL_CAN_IRQHandler+0x30c>
 8002e64:	2b30      	cmp	r3, #48	; 0x30
 8002e66:	d822      	bhi.n	8002eae <HAL_CAN_IRQHandler+0x334>
 8002e68:	2b10      	cmp	r3, #16
 8002e6a:	d002      	beq.n	8002e72 <HAL_CAN_IRQHandler+0x2f8>
 8002e6c:	2b20      	cmp	r3, #32
 8002e6e:	d005      	beq.n	8002e7c <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002e70:	e01d      	b.n	8002eae <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e74:	f043 0308 	orr.w	r3, r3, #8
 8002e78:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002e7a:	e019      	b.n	8002eb0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e7e:	f043 0310 	orr.w	r3, r3, #16
 8002e82:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002e84:	e014      	b.n	8002eb0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e88:	f043 0320 	orr.w	r3, r3, #32
 8002e8c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002e8e:	e00f      	b.n	8002eb0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e96:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002e98:	e00a      	b.n	8002eb0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ea0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002ea2:	e005      	b.n	8002eb0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002eaa:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002eac:	e000      	b.n	8002eb0 <HAL_CAN_IRQHandler+0x336>
            break;
 8002eae:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	699a      	ldr	r2, [r3, #24]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002ebe:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	2204      	movs	r2, #4
 8002ec6:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d008      	beq.n	8002ee0 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed4:	431a      	orrs	r2, r3
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	f00b fcb6 	bl	800e84c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002ee0:	bf00      	nop
 8002ee2:	3728      	adds	r7, #40	; 0x28
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}

08002ee8 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b083      	sub	sp, #12
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002ef0:	bf00      	nop
 8002ef2:	370c      	adds	r7, #12
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efa:	4770      	bx	lr

08002efc <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b083      	sub	sp, #12
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002f04:	bf00      	nop
 8002f06:	370c      	adds	r7, #12
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0e:	4770      	bx	lr

08002f10 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b083      	sub	sp, #12
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002f18:	bf00      	nop
 8002f1a:	370c      	adds	r7, #12
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f22:	4770      	bx	lr

08002f24 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b083      	sub	sp, #12
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002f2c:	bf00      	nop
 8002f2e:	370c      	adds	r7, #12
 8002f30:	46bd      	mov	sp, r7
 8002f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f36:	4770      	bx	lr

08002f38 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b083      	sub	sp, #12
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002f40:	bf00      	nop
 8002f42:	370c      	adds	r7, #12
 8002f44:	46bd      	mov	sp, r7
 8002f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4a:	4770      	bx	lr

08002f4c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b083      	sub	sp, #12
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002f54:	bf00      	nop
 8002f56:	370c      	adds	r7, #12
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5e:	4770      	bx	lr

08002f60 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b083      	sub	sp, #12
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002f68:	bf00      	nop
 8002f6a:	370c      	adds	r7, #12
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f72:	4770      	bx	lr

08002f74 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b083      	sub	sp, #12
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002f7c:	bf00      	nop
 8002f7e:	370c      	adds	r7, #12
 8002f80:	46bd      	mov	sp, r7
 8002f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f86:	4770      	bx	lr

08002f88 <HAL_CAN_ResetError>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ResetError(CAN_HandleTypeDef *hcan)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b085      	sub	sp, #20
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f90:	2300      	movs	r3, #0
 8002f92:	73fb      	strb	r3, [r7, #15]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f9a:	73bb      	strb	r3, [r7, #14]

  if ((state == HAL_CAN_STATE_READY) ||
 8002f9c:	7bbb      	ldrb	r3, [r7, #14]
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d002      	beq.n	8002fa8 <HAL_CAN_ResetError+0x20>
 8002fa2:	7bbb      	ldrb	r3, [r7, #14]
 8002fa4:	2b02      	cmp	r3, #2
 8002fa6:	d103      	bne.n	8002fb0 <HAL_CAN_ResetError+0x28>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Reset CAN error code */
    hcan->ErrorCode = 0U;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2200      	movs	r2, #0
 8002fac:	625a      	str	r2, [r3, #36]	; 0x24
 8002fae:	e007      	b.n	8002fc0 <HAL_CAN_ResetError+0x38>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	625a      	str	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the status */
  return status;
 8002fc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3714      	adds	r7, #20
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fcc:	4770      	bx	lr
	...

08002fd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b085      	sub	sp, #20
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	f003 0307 	and.w	r3, r3, #7
 8002fde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002fe0:	4b0c      	ldr	r3, [pc, #48]	; (8003014 <__NVIC_SetPriorityGrouping+0x44>)
 8002fe2:	68db      	ldr	r3, [r3, #12]
 8002fe4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002fe6:	68ba      	ldr	r2, [r7, #8]
 8002fe8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002fec:	4013      	ands	r3, r2
 8002fee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ff8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ffc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003000:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003002:	4a04      	ldr	r2, [pc, #16]	; (8003014 <__NVIC_SetPriorityGrouping+0x44>)
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	60d3      	str	r3, [r2, #12]
}
 8003008:	bf00      	nop
 800300a:	3714      	adds	r7, #20
 800300c:	46bd      	mov	sp, r7
 800300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003012:	4770      	bx	lr
 8003014:	e000ed00 	.word	0xe000ed00

08003018 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003018:	b480      	push	{r7}
 800301a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800301c:	4b04      	ldr	r3, [pc, #16]	; (8003030 <__NVIC_GetPriorityGrouping+0x18>)
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	0a1b      	lsrs	r3, r3, #8
 8003022:	f003 0307 	and.w	r3, r3, #7
}
 8003026:	4618      	mov	r0, r3
 8003028:	46bd      	mov	sp, r7
 800302a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302e:	4770      	bx	lr
 8003030:	e000ed00 	.word	0xe000ed00

08003034 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003034:	b480      	push	{r7}
 8003036:	b083      	sub	sp, #12
 8003038:	af00      	add	r7, sp, #0
 800303a:	4603      	mov	r3, r0
 800303c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800303e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003042:	2b00      	cmp	r3, #0
 8003044:	db0b      	blt.n	800305e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003046:	79fb      	ldrb	r3, [r7, #7]
 8003048:	f003 021f 	and.w	r2, r3, #31
 800304c:	4907      	ldr	r1, [pc, #28]	; (800306c <__NVIC_EnableIRQ+0x38>)
 800304e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003052:	095b      	lsrs	r3, r3, #5
 8003054:	2001      	movs	r0, #1
 8003056:	fa00 f202 	lsl.w	r2, r0, r2
 800305a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800305e:	bf00      	nop
 8003060:	370c      	adds	r7, #12
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr
 800306a:	bf00      	nop
 800306c:	e000e100 	.word	0xe000e100

08003070 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003070:	b480      	push	{r7}
 8003072:	b083      	sub	sp, #12
 8003074:	af00      	add	r7, sp, #0
 8003076:	4603      	mov	r3, r0
 8003078:	6039      	str	r1, [r7, #0]
 800307a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800307c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003080:	2b00      	cmp	r3, #0
 8003082:	db0a      	blt.n	800309a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	b2da      	uxtb	r2, r3
 8003088:	490c      	ldr	r1, [pc, #48]	; (80030bc <__NVIC_SetPriority+0x4c>)
 800308a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800308e:	0112      	lsls	r2, r2, #4
 8003090:	b2d2      	uxtb	r2, r2
 8003092:	440b      	add	r3, r1
 8003094:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003098:	e00a      	b.n	80030b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	b2da      	uxtb	r2, r3
 800309e:	4908      	ldr	r1, [pc, #32]	; (80030c0 <__NVIC_SetPriority+0x50>)
 80030a0:	79fb      	ldrb	r3, [r7, #7]
 80030a2:	f003 030f 	and.w	r3, r3, #15
 80030a6:	3b04      	subs	r3, #4
 80030a8:	0112      	lsls	r2, r2, #4
 80030aa:	b2d2      	uxtb	r2, r2
 80030ac:	440b      	add	r3, r1
 80030ae:	761a      	strb	r2, [r3, #24]
}
 80030b0:	bf00      	nop
 80030b2:	370c      	adds	r7, #12
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr
 80030bc:	e000e100 	.word	0xe000e100
 80030c0:	e000ed00 	.word	0xe000ed00

080030c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b089      	sub	sp, #36	; 0x24
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	60f8      	str	r0, [r7, #12]
 80030cc:	60b9      	str	r1, [r7, #8]
 80030ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	f003 0307 	and.w	r3, r3, #7
 80030d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030d8:	69fb      	ldr	r3, [r7, #28]
 80030da:	f1c3 0307 	rsb	r3, r3, #7
 80030de:	2b04      	cmp	r3, #4
 80030e0:	bf28      	it	cs
 80030e2:	2304      	movcs	r3, #4
 80030e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030e6:	69fb      	ldr	r3, [r7, #28]
 80030e8:	3304      	adds	r3, #4
 80030ea:	2b06      	cmp	r3, #6
 80030ec:	d902      	bls.n	80030f4 <NVIC_EncodePriority+0x30>
 80030ee:	69fb      	ldr	r3, [r7, #28]
 80030f0:	3b03      	subs	r3, #3
 80030f2:	e000      	b.n	80030f6 <NVIC_EncodePriority+0x32>
 80030f4:	2300      	movs	r3, #0
 80030f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80030fc:	69bb      	ldr	r3, [r7, #24]
 80030fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003102:	43da      	mvns	r2, r3
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	401a      	ands	r2, r3
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800310c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	fa01 f303 	lsl.w	r3, r1, r3
 8003116:	43d9      	mvns	r1, r3
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800311c:	4313      	orrs	r3, r2
         );
}
 800311e:	4618      	mov	r0, r3
 8003120:	3724      	adds	r7, #36	; 0x24
 8003122:	46bd      	mov	sp, r7
 8003124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003128:	4770      	bx	lr

0800312a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800312a:	b580      	push	{r7, lr}
 800312c:	b082      	sub	sp, #8
 800312e:	af00      	add	r7, sp, #0
 8003130:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	f7ff ff4c 	bl	8002fd0 <__NVIC_SetPriorityGrouping>
}
 8003138:	bf00      	nop
 800313a:	3708      	adds	r7, #8
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}

08003140 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003140:	b580      	push	{r7, lr}
 8003142:	b086      	sub	sp, #24
 8003144:	af00      	add	r7, sp, #0
 8003146:	4603      	mov	r3, r0
 8003148:	60b9      	str	r1, [r7, #8]
 800314a:	607a      	str	r2, [r7, #4]
 800314c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800314e:	2300      	movs	r3, #0
 8003150:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003152:	f7ff ff61 	bl	8003018 <__NVIC_GetPriorityGrouping>
 8003156:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003158:	687a      	ldr	r2, [r7, #4]
 800315a:	68b9      	ldr	r1, [r7, #8]
 800315c:	6978      	ldr	r0, [r7, #20]
 800315e:	f7ff ffb1 	bl	80030c4 <NVIC_EncodePriority>
 8003162:	4602      	mov	r2, r0
 8003164:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003168:	4611      	mov	r1, r2
 800316a:	4618      	mov	r0, r3
 800316c:	f7ff ff80 	bl	8003070 <__NVIC_SetPriority>
}
 8003170:	bf00      	nop
 8003172:	3718      	adds	r7, #24
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}

08003178 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b082      	sub	sp, #8
 800317c:	af00      	add	r7, sp, #0
 800317e:	4603      	mov	r3, r0
 8003180:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003182:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003186:	4618      	mov	r0, r3
 8003188:	f7ff ff54 	bl	8003034 <__NVIC_EnableIRQ>
}
 800318c:	bf00      	nop
 800318e:	3708      	adds	r7, #8
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}

08003194 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b086      	sub	sp, #24
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800319c:	2300      	movs	r3, #0
 800319e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80031a0:	f7ff f84e 	bl	8002240 <HAL_GetTick>
 80031a4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d101      	bne.n	80031b0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	e099      	b.n	80032e4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2202      	movs	r2, #2
 80031b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2200      	movs	r2, #0
 80031bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f022 0201 	bic.w	r2, r2, #1
 80031ce:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031d0:	e00f      	b.n	80031f2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80031d2:	f7ff f835 	bl	8002240 <HAL_GetTick>
 80031d6:	4602      	mov	r2, r0
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	1ad3      	subs	r3, r2, r3
 80031dc:	2b05      	cmp	r3, #5
 80031de:	d908      	bls.n	80031f2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2220      	movs	r2, #32
 80031e4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2203      	movs	r2, #3
 80031ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80031ee:	2303      	movs	r3, #3
 80031f0:	e078      	b.n	80032e4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 0301 	and.w	r3, r3, #1
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d1e8      	bne.n	80031d2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003208:	697a      	ldr	r2, [r7, #20]
 800320a:	4b38      	ldr	r3, [pc, #224]	; (80032ec <HAL_DMA_Init+0x158>)
 800320c:	4013      	ands	r3, r2
 800320e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	685a      	ldr	r2, [r3, #4]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800321e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	691b      	ldr	r3, [r3, #16]
 8003224:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800322a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	699b      	ldr	r3, [r3, #24]
 8003230:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003236:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6a1b      	ldr	r3, [r3, #32]
 800323c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800323e:	697a      	ldr	r2, [r7, #20]
 8003240:	4313      	orrs	r3, r2
 8003242:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003248:	2b04      	cmp	r3, #4
 800324a:	d107      	bne.n	800325c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003254:	4313      	orrs	r3, r2
 8003256:	697a      	ldr	r2, [r7, #20]
 8003258:	4313      	orrs	r3, r2
 800325a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	697a      	ldr	r2, [r7, #20]
 8003262:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	695b      	ldr	r3, [r3, #20]
 800326a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	f023 0307 	bic.w	r3, r3, #7
 8003272:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003278:	697a      	ldr	r2, [r7, #20]
 800327a:	4313      	orrs	r3, r2
 800327c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003282:	2b04      	cmp	r3, #4
 8003284:	d117      	bne.n	80032b6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800328a:	697a      	ldr	r2, [r7, #20]
 800328c:	4313      	orrs	r3, r2
 800328e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003294:	2b00      	cmp	r3, #0
 8003296:	d00e      	beq.n	80032b6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003298:	6878      	ldr	r0, [r7, #4]
 800329a:	f000 fa7b 	bl	8003794 <DMA_CheckFifoParam>
 800329e:	4603      	mov	r3, r0
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d008      	beq.n	80032b6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2240      	movs	r2, #64	; 0x40
 80032a8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2201      	movs	r2, #1
 80032ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80032b2:	2301      	movs	r3, #1
 80032b4:	e016      	b.n	80032e4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	697a      	ldr	r2, [r7, #20]
 80032bc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f000 fa32 	bl	8003728 <DMA_CalcBaseAndBitshift>
 80032c4:	4603      	mov	r3, r0
 80032c6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032cc:	223f      	movs	r2, #63	; 0x3f
 80032ce:	409a      	lsls	r2, r3
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2200      	movs	r2, #0
 80032d8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2201      	movs	r2, #1
 80032de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80032e2:	2300      	movs	r3, #0
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	3718      	adds	r7, #24
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}
 80032ec:	f010803f 	.word	0xf010803f

080032f0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b084      	sub	sp, #16
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032fc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80032fe:	f7fe ff9f 	bl	8002240 <HAL_GetTick>
 8003302:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800330a:	b2db      	uxtb	r3, r3
 800330c:	2b02      	cmp	r3, #2
 800330e:	d008      	beq.n	8003322 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2280      	movs	r2, #128	; 0x80
 8003314:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2200      	movs	r2, #0
 800331a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e052      	b.n	80033c8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f022 0216 	bic.w	r2, r2, #22
 8003330:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	695a      	ldr	r2, [r3, #20]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003340:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003346:	2b00      	cmp	r3, #0
 8003348:	d103      	bne.n	8003352 <HAL_DMA_Abort+0x62>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800334e:	2b00      	cmp	r3, #0
 8003350:	d007      	beq.n	8003362 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f022 0208 	bic.w	r2, r2, #8
 8003360:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f022 0201 	bic.w	r2, r2, #1
 8003370:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003372:	e013      	b.n	800339c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003374:	f7fe ff64 	bl	8002240 <HAL_GetTick>
 8003378:	4602      	mov	r2, r0
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	2b05      	cmp	r3, #5
 8003380:	d90c      	bls.n	800339c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2220      	movs	r2, #32
 8003386:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2203      	movs	r2, #3
 800338c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2200      	movs	r2, #0
 8003394:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003398:	2303      	movs	r3, #3
 800339a:	e015      	b.n	80033c8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 0301 	and.w	r3, r3, #1
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d1e4      	bne.n	8003374 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033ae:	223f      	movs	r2, #63	; 0x3f
 80033b0:	409a      	lsls	r2, r3
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2201      	movs	r2, #1
 80033ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2200      	movs	r2, #0
 80033c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80033c6:	2300      	movs	r3, #0
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3710      	adds	r7, #16
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}

080033d0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b083      	sub	sp, #12
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033de:	b2db      	uxtb	r3, r3
 80033e0:	2b02      	cmp	r3, #2
 80033e2:	d004      	beq.n	80033ee <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2280      	movs	r2, #128	; 0x80
 80033e8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e00c      	b.n	8003408 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2205      	movs	r2, #5
 80033f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f022 0201 	bic.w	r2, r2, #1
 8003404:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003406:	2300      	movs	r3, #0
}
 8003408:	4618      	mov	r0, r3
 800340a:	370c      	adds	r7, #12
 800340c:	46bd      	mov	sp, r7
 800340e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003412:	4770      	bx	lr

08003414 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b086      	sub	sp, #24
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800341c:	2300      	movs	r3, #0
 800341e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003420:	4b8e      	ldr	r3, [pc, #568]	; (800365c <HAL_DMA_IRQHandler+0x248>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a8e      	ldr	r2, [pc, #568]	; (8003660 <HAL_DMA_IRQHandler+0x24c>)
 8003426:	fba2 2303 	umull	r2, r3, r2, r3
 800342a:	0a9b      	lsrs	r3, r3, #10
 800342c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003432:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800343e:	2208      	movs	r2, #8
 8003440:	409a      	lsls	r2, r3
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	4013      	ands	r3, r2
 8003446:	2b00      	cmp	r3, #0
 8003448:	d01a      	beq.n	8003480 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f003 0304 	and.w	r3, r3, #4
 8003454:	2b00      	cmp	r3, #0
 8003456:	d013      	beq.n	8003480 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f022 0204 	bic.w	r2, r2, #4
 8003466:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800346c:	2208      	movs	r2, #8
 800346e:	409a      	lsls	r2, r3
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003478:	f043 0201 	orr.w	r2, r3, #1
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003484:	2201      	movs	r2, #1
 8003486:	409a      	lsls	r2, r3
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	4013      	ands	r3, r2
 800348c:	2b00      	cmp	r3, #0
 800348e:	d012      	beq.n	80034b6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	695b      	ldr	r3, [r3, #20]
 8003496:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800349a:	2b00      	cmp	r3, #0
 800349c:	d00b      	beq.n	80034b6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034a2:	2201      	movs	r2, #1
 80034a4:	409a      	lsls	r2, r3
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034ae:	f043 0202 	orr.w	r2, r3, #2
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034ba:	2204      	movs	r2, #4
 80034bc:	409a      	lsls	r2, r3
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	4013      	ands	r3, r2
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d012      	beq.n	80034ec <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 0302 	and.w	r3, r3, #2
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d00b      	beq.n	80034ec <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034d8:	2204      	movs	r2, #4
 80034da:	409a      	lsls	r2, r3
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034e4:	f043 0204 	orr.w	r2, r3, #4
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034f0:	2210      	movs	r2, #16
 80034f2:	409a      	lsls	r2, r3
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	4013      	ands	r3, r2
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d043      	beq.n	8003584 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 0308 	and.w	r3, r3, #8
 8003506:	2b00      	cmp	r3, #0
 8003508:	d03c      	beq.n	8003584 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800350e:	2210      	movs	r2, #16
 8003510:	409a      	lsls	r2, r3
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003520:	2b00      	cmp	r3, #0
 8003522:	d018      	beq.n	8003556 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800352e:	2b00      	cmp	r3, #0
 8003530:	d108      	bne.n	8003544 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003536:	2b00      	cmp	r3, #0
 8003538:	d024      	beq.n	8003584 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	4798      	blx	r3
 8003542:	e01f      	b.n	8003584 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003548:	2b00      	cmp	r3, #0
 800354a:	d01b      	beq.n	8003584 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	4798      	blx	r3
 8003554:	e016      	b.n	8003584 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003560:	2b00      	cmp	r3, #0
 8003562:	d107      	bne.n	8003574 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f022 0208 	bic.w	r2, r2, #8
 8003572:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003578:	2b00      	cmp	r3, #0
 800357a:	d003      	beq.n	8003584 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003580:	6878      	ldr	r0, [r7, #4]
 8003582:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003588:	2220      	movs	r2, #32
 800358a:	409a      	lsls	r2, r3
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	4013      	ands	r3, r2
 8003590:	2b00      	cmp	r3, #0
 8003592:	f000 808f 	beq.w	80036b4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 0310 	and.w	r3, r3, #16
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	f000 8087 	beq.w	80036b4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035aa:	2220      	movs	r2, #32
 80035ac:	409a      	lsls	r2, r3
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	2b05      	cmp	r3, #5
 80035bc:	d136      	bne.n	800362c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f022 0216 	bic.w	r2, r2, #22
 80035cc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	695a      	ldr	r2, [r3, #20]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80035dc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d103      	bne.n	80035ee <HAL_DMA_IRQHandler+0x1da>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d007      	beq.n	80035fe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f022 0208 	bic.w	r2, r2, #8
 80035fc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003602:	223f      	movs	r2, #63	; 0x3f
 8003604:	409a      	lsls	r2, r3
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2201      	movs	r2, #1
 800360e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2200      	movs	r2, #0
 8003616:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800361e:	2b00      	cmp	r3, #0
 8003620:	d07e      	beq.n	8003720 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	4798      	blx	r3
        }
        return;
 800362a:	e079      	b.n	8003720 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003636:	2b00      	cmp	r3, #0
 8003638:	d01d      	beq.n	8003676 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003644:	2b00      	cmp	r3, #0
 8003646:	d10d      	bne.n	8003664 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800364c:	2b00      	cmp	r3, #0
 800364e:	d031      	beq.n	80036b4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003654:	6878      	ldr	r0, [r7, #4]
 8003656:	4798      	blx	r3
 8003658:	e02c      	b.n	80036b4 <HAL_DMA_IRQHandler+0x2a0>
 800365a:	bf00      	nop
 800365c:	20000000 	.word	0x20000000
 8003660:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003668:	2b00      	cmp	r3, #0
 800366a:	d023      	beq.n	80036b4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003670:	6878      	ldr	r0, [r7, #4]
 8003672:	4798      	blx	r3
 8003674:	e01e      	b.n	80036b4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003680:	2b00      	cmp	r3, #0
 8003682:	d10f      	bne.n	80036a4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f022 0210 	bic.w	r2, r2, #16
 8003692:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2201      	movs	r2, #1
 8003698:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2200      	movs	r2, #0
 80036a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d003      	beq.n	80036b4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036b0:	6878      	ldr	r0, [r7, #4]
 80036b2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d032      	beq.n	8003722 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036c0:	f003 0301 	and.w	r3, r3, #1
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d022      	beq.n	800370e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2205      	movs	r2, #5
 80036cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f022 0201 	bic.w	r2, r2, #1
 80036de:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	3301      	adds	r3, #1
 80036e4:	60bb      	str	r3, [r7, #8]
 80036e6:	697a      	ldr	r2, [r7, #20]
 80036e8:	429a      	cmp	r2, r3
 80036ea:	d307      	bcc.n	80036fc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f003 0301 	and.w	r3, r3, #1
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d1f2      	bne.n	80036e0 <HAL_DMA_IRQHandler+0x2cc>
 80036fa:	e000      	b.n	80036fe <HAL_DMA_IRQHandler+0x2ea>
          break;
 80036fc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2201      	movs	r2, #1
 8003702:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2200      	movs	r2, #0
 800370a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003712:	2b00      	cmp	r3, #0
 8003714:	d005      	beq.n	8003722 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	4798      	blx	r3
 800371e:	e000      	b.n	8003722 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003720:	bf00      	nop
    }
  }
}
 8003722:	3718      	adds	r7, #24
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}

08003728 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003728:	b480      	push	{r7}
 800372a:	b085      	sub	sp, #20
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	b2db      	uxtb	r3, r3
 8003736:	3b10      	subs	r3, #16
 8003738:	4a14      	ldr	r2, [pc, #80]	; (800378c <DMA_CalcBaseAndBitshift+0x64>)
 800373a:	fba2 2303 	umull	r2, r3, r2, r3
 800373e:	091b      	lsrs	r3, r3, #4
 8003740:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003742:	4a13      	ldr	r2, [pc, #76]	; (8003790 <DMA_CalcBaseAndBitshift+0x68>)
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	4413      	add	r3, r2
 8003748:	781b      	ldrb	r3, [r3, #0]
 800374a:	461a      	mov	r2, r3
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2b03      	cmp	r3, #3
 8003754:	d909      	bls.n	800376a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800375e:	f023 0303 	bic.w	r3, r3, #3
 8003762:	1d1a      	adds	r2, r3, #4
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	659a      	str	r2, [r3, #88]	; 0x58
 8003768:	e007      	b.n	800377a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003772:	f023 0303 	bic.w	r3, r3, #3
 8003776:	687a      	ldr	r2, [r7, #4]
 8003778:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800377e:	4618      	mov	r0, r3
 8003780:	3714      	adds	r7, #20
 8003782:	46bd      	mov	sp, r7
 8003784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003788:	4770      	bx	lr
 800378a:	bf00      	nop
 800378c:	aaaaaaab 	.word	0xaaaaaaab
 8003790:	080138a8 	.word	0x080138a8

08003794 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003794:	b480      	push	{r7}
 8003796:	b085      	sub	sp, #20
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800379c:	2300      	movs	r3, #0
 800379e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037a4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	699b      	ldr	r3, [r3, #24]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d11f      	bne.n	80037ee <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	2b03      	cmp	r3, #3
 80037b2:	d856      	bhi.n	8003862 <DMA_CheckFifoParam+0xce>
 80037b4:	a201      	add	r2, pc, #4	; (adr r2, 80037bc <DMA_CheckFifoParam+0x28>)
 80037b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037ba:	bf00      	nop
 80037bc:	080037cd 	.word	0x080037cd
 80037c0:	080037df 	.word	0x080037df
 80037c4:	080037cd 	.word	0x080037cd
 80037c8:	08003863 	.word	0x08003863
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d046      	beq.n	8003866 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037dc:	e043      	b.n	8003866 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037e2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80037e6:	d140      	bne.n	800386a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037ec:	e03d      	b.n	800386a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	699b      	ldr	r3, [r3, #24]
 80037f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037f6:	d121      	bne.n	800383c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	2b03      	cmp	r3, #3
 80037fc:	d837      	bhi.n	800386e <DMA_CheckFifoParam+0xda>
 80037fe:	a201      	add	r2, pc, #4	; (adr r2, 8003804 <DMA_CheckFifoParam+0x70>)
 8003800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003804:	08003815 	.word	0x08003815
 8003808:	0800381b 	.word	0x0800381b
 800380c:	08003815 	.word	0x08003815
 8003810:	0800382d 	.word	0x0800382d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	73fb      	strb	r3, [r7, #15]
      break;
 8003818:	e030      	b.n	800387c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800381e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003822:	2b00      	cmp	r3, #0
 8003824:	d025      	beq.n	8003872 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800382a:	e022      	b.n	8003872 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003830:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003834:	d11f      	bne.n	8003876 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800383a:	e01c      	b.n	8003876 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	2b02      	cmp	r3, #2
 8003840:	d903      	bls.n	800384a <DMA_CheckFifoParam+0xb6>
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	2b03      	cmp	r3, #3
 8003846:	d003      	beq.n	8003850 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003848:	e018      	b.n	800387c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	73fb      	strb	r3, [r7, #15]
      break;
 800384e:	e015      	b.n	800387c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003854:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003858:	2b00      	cmp	r3, #0
 800385a:	d00e      	beq.n	800387a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	73fb      	strb	r3, [r7, #15]
      break;
 8003860:	e00b      	b.n	800387a <DMA_CheckFifoParam+0xe6>
      break;
 8003862:	bf00      	nop
 8003864:	e00a      	b.n	800387c <DMA_CheckFifoParam+0xe8>
      break;
 8003866:	bf00      	nop
 8003868:	e008      	b.n	800387c <DMA_CheckFifoParam+0xe8>
      break;
 800386a:	bf00      	nop
 800386c:	e006      	b.n	800387c <DMA_CheckFifoParam+0xe8>
      break;
 800386e:	bf00      	nop
 8003870:	e004      	b.n	800387c <DMA_CheckFifoParam+0xe8>
      break;
 8003872:	bf00      	nop
 8003874:	e002      	b.n	800387c <DMA_CheckFifoParam+0xe8>
      break;   
 8003876:	bf00      	nop
 8003878:	e000      	b.n	800387c <DMA_CheckFifoParam+0xe8>
      break;
 800387a:	bf00      	nop
    }
  } 
  
  return status; 
 800387c:	7bfb      	ldrb	r3, [r7, #15]
}
 800387e:	4618      	mov	r0, r3
 8003880:	3714      	adds	r7, #20
 8003882:	46bd      	mov	sp, r7
 8003884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003888:	4770      	bx	lr
 800388a:	bf00      	nop

0800388c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800388c:	b480      	push	{r7}
 800388e:	b089      	sub	sp, #36	; 0x24
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
 8003894:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003896:	2300      	movs	r3, #0
 8003898:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800389a:	2300      	movs	r3, #0
 800389c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800389e:	2300      	movs	r3, #0
 80038a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80038a2:	2300      	movs	r3, #0
 80038a4:	61fb      	str	r3, [r7, #28]
 80038a6:	e177      	b.n	8003b98 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80038a8:	2201      	movs	r2, #1
 80038aa:	69fb      	ldr	r3, [r7, #28]
 80038ac:	fa02 f303 	lsl.w	r3, r2, r3
 80038b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	697a      	ldr	r2, [r7, #20]
 80038b8:	4013      	ands	r3, r2
 80038ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80038bc:	693a      	ldr	r2, [r7, #16]
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	429a      	cmp	r2, r3
 80038c2:	f040 8166 	bne.w	8003b92 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	f003 0303 	and.w	r3, r3, #3
 80038ce:	2b01      	cmp	r3, #1
 80038d0:	d005      	beq.n	80038de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80038da:	2b02      	cmp	r3, #2
 80038dc:	d130      	bne.n	8003940 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80038e4:	69fb      	ldr	r3, [r7, #28]
 80038e6:	005b      	lsls	r3, r3, #1
 80038e8:	2203      	movs	r2, #3
 80038ea:	fa02 f303 	lsl.w	r3, r2, r3
 80038ee:	43db      	mvns	r3, r3
 80038f0:	69ba      	ldr	r2, [r7, #24]
 80038f2:	4013      	ands	r3, r2
 80038f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	68da      	ldr	r2, [r3, #12]
 80038fa:	69fb      	ldr	r3, [r7, #28]
 80038fc:	005b      	lsls	r3, r3, #1
 80038fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003902:	69ba      	ldr	r2, [r7, #24]
 8003904:	4313      	orrs	r3, r2
 8003906:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	69ba      	ldr	r2, [r7, #24]
 800390c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003914:	2201      	movs	r2, #1
 8003916:	69fb      	ldr	r3, [r7, #28]
 8003918:	fa02 f303 	lsl.w	r3, r2, r3
 800391c:	43db      	mvns	r3, r3
 800391e:	69ba      	ldr	r2, [r7, #24]
 8003920:	4013      	ands	r3, r2
 8003922:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	091b      	lsrs	r3, r3, #4
 800392a:	f003 0201 	and.w	r2, r3, #1
 800392e:	69fb      	ldr	r3, [r7, #28]
 8003930:	fa02 f303 	lsl.w	r3, r2, r3
 8003934:	69ba      	ldr	r2, [r7, #24]
 8003936:	4313      	orrs	r3, r2
 8003938:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	69ba      	ldr	r2, [r7, #24]
 800393e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	f003 0303 	and.w	r3, r3, #3
 8003948:	2b03      	cmp	r3, #3
 800394a:	d017      	beq.n	800397c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	68db      	ldr	r3, [r3, #12]
 8003950:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003952:	69fb      	ldr	r3, [r7, #28]
 8003954:	005b      	lsls	r3, r3, #1
 8003956:	2203      	movs	r2, #3
 8003958:	fa02 f303 	lsl.w	r3, r2, r3
 800395c:	43db      	mvns	r3, r3
 800395e:	69ba      	ldr	r2, [r7, #24]
 8003960:	4013      	ands	r3, r2
 8003962:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	689a      	ldr	r2, [r3, #8]
 8003968:	69fb      	ldr	r3, [r7, #28]
 800396a:	005b      	lsls	r3, r3, #1
 800396c:	fa02 f303 	lsl.w	r3, r2, r3
 8003970:	69ba      	ldr	r2, [r7, #24]
 8003972:	4313      	orrs	r3, r2
 8003974:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	69ba      	ldr	r2, [r7, #24]
 800397a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	f003 0303 	and.w	r3, r3, #3
 8003984:	2b02      	cmp	r3, #2
 8003986:	d123      	bne.n	80039d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003988:	69fb      	ldr	r3, [r7, #28]
 800398a:	08da      	lsrs	r2, r3, #3
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	3208      	adds	r2, #8
 8003990:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003994:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003996:	69fb      	ldr	r3, [r7, #28]
 8003998:	f003 0307 	and.w	r3, r3, #7
 800399c:	009b      	lsls	r3, r3, #2
 800399e:	220f      	movs	r2, #15
 80039a0:	fa02 f303 	lsl.w	r3, r2, r3
 80039a4:	43db      	mvns	r3, r3
 80039a6:	69ba      	ldr	r2, [r7, #24]
 80039a8:	4013      	ands	r3, r2
 80039aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	691a      	ldr	r2, [r3, #16]
 80039b0:	69fb      	ldr	r3, [r7, #28]
 80039b2:	f003 0307 	and.w	r3, r3, #7
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	fa02 f303 	lsl.w	r3, r2, r3
 80039bc:	69ba      	ldr	r2, [r7, #24]
 80039be:	4313      	orrs	r3, r2
 80039c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80039c2:	69fb      	ldr	r3, [r7, #28]
 80039c4:	08da      	lsrs	r2, r3, #3
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	3208      	adds	r2, #8
 80039ca:	69b9      	ldr	r1, [r7, #24]
 80039cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80039d6:	69fb      	ldr	r3, [r7, #28]
 80039d8:	005b      	lsls	r3, r3, #1
 80039da:	2203      	movs	r2, #3
 80039dc:	fa02 f303 	lsl.w	r3, r2, r3
 80039e0:	43db      	mvns	r3, r3
 80039e2:	69ba      	ldr	r2, [r7, #24]
 80039e4:	4013      	ands	r3, r2
 80039e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	f003 0203 	and.w	r2, r3, #3
 80039f0:	69fb      	ldr	r3, [r7, #28]
 80039f2:	005b      	lsls	r3, r3, #1
 80039f4:	fa02 f303 	lsl.w	r3, r2, r3
 80039f8:	69ba      	ldr	r2, [r7, #24]
 80039fa:	4313      	orrs	r3, r2
 80039fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	69ba      	ldr	r2, [r7, #24]
 8003a02:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	f000 80c0 	beq.w	8003b92 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a12:	2300      	movs	r3, #0
 8003a14:	60fb      	str	r3, [r7, #12]
 8003a16:	4b66      	ldr	r3, [pc, #408]	; (8003bb0 <HAL_GPIO_Init+0x324>)
 8003a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a1a:	4a65      	ldr	r2, [pc, #404]	; (8003bb0 <HAL_GPIO_Init+0x324>)
 8003a1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a20:	6453      	str	r3, [r2, #68]	; 0x44
 8003a22:	4b63      	ldr	r3, [pc, #396]	; (8003bb0 <HAL_GPIO_Init+0x324>)
 8003a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a2a:	60fb      	str	r3, [r7, #12]
 8003a2c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003a2e:	4a61      	ldr	r2, [pc, #388]	; (8003bb4 <HAL_GPIO_Init+0x328>)
 8003a30:	69fb      	ldr	r3, [r7, #28]
 8003a32:	089b      	lsrs	r3, r3, #2
 8003a34:	3302      	adds	r3, #2
 8003a36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003a3c:	69fb      	ldr	r3, [r7, #28]
 8003a3e:	f003 0303 	and.w	r3, r3, #3
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	220f      	movs	r2, #15
 8003a46:	fa02 f303 	lsl.w	r3, r2, r3
 8003a4a:	43db      	mvns	r3, r3
 8003a4c:	69ba      	ldr	r2, [r7, #24]
 8003a4e:	4013      	ands	r3, r2
 8003a50:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	4a58      	ldr	r2, [pc, #352]	; (8003bb8 <HAL_GPIO_Init+0x32c>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d037      	beq.n	8003aca <HAL_GPIO_Init+0x23e>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	4a57      	ldr	r2, [pc, #348]	; (8003bbc <HAL_GPIO_Init+0x330>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d031      	beq.n	8003ac6 <HAL_GPIO_Init+0x23a>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	4a56      	ldr	r2, [pc, #344]	; (8003bc0 <HAL_GPIO_Init+0x334>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d02b      	beq.n	8003ac2 <HAL_GPIO_Init+0x236>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	4a55      	ldr	r2, [pc, #340]	; (8003bc4 <HAL_GPIO_Init+0x338>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d025      	beq.n	8003abe <HAL_GPIO_Init+0x232>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	4a54      	ldr	r2, [pc, #336]	; (8003bc8 <HAL_GPIO_Init+0x33c>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d01f      	beq.n	8003aba <HAL_GPIO_Init+0x22e>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	4a53      	ldr	r2, [pc, #332]	; (8003bcc <HAL_GPIO_Init+0x340>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d019      	beq.n	8003ab6 <HAL_GPIO_Init+0x22a>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	4a52      	ldr	r2, [pc, #328]	; (8003bd0 <HAL_GPIO_Init+0x344>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d013      	beq.n	8003ab2 <HAL_GPIO_Init+0x226>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	4a51      	ldr	r2, [pc, #324]	; (8003bd4 <HAL_GPIO_Init+0x348>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d00d      	beq.n	8003aae <HAL_GPIO_Init+0x222>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	4a50      	ldr	r2, [pc, #320]	; (8003bd8 <HAL_GPIO_Init+0x34c>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d007      	beq.n	8003aaa <HAL_GPIO_Init+0x21e>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	4a4f      	ldr	r2, [pc, #316]	; (8003bdc <HAL_GPIO_Init+0x350>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d101      	bne.n	8003aa6 <HAL_GPIO_Init+0x21a>
 8003aa2:	2309      	movs	r3, #9
 8003aa4:	e012      	b.n	8003acc <HAL_GPIO_Init+0x240>
 8003aa6:	230a      	movs	r3, #10
 8003aa8:	e010      	b.n	8003acc <HAL_GPIO_Init+0x240>
 8003aaa:	2308      	movs	r3, #8
 8003aac:	e00e      	b.n	8003acc <HAL_GPIO_Init+0x240>
 8003aae:	2307      	movs	r3, #7
 8003ab0:	e00c      	b.n	8003acc <HAL_GPIO_Init+0x240>
 8003ab2:	2306      	movs	r3, #6
 8003ab4:	e00a      	b.n	8003acc <HAL_GPIO_Init+0x240>
 8003ab6:	2305      	movs	r3, #5
 8003ab8:	e008      	b.n	8003acc <HAL_GPIO_Init+0x240>
 8003aba:	2304      	movs	r3, #4
 8003abc:	e006      	b.n	8003acc <HAL_GPIO_Init+0x240>
 8003abe:	2303      	movs	r3, #3
 8003ac0:	e004      	b.n	8003acc <HAL_GPIO_Init+0x240>
 8003ac2:	2302      	movs	r3, #2
 8003ac4:	e002      	b.n	8003acc <HAL_GPIO_Init+0x240>
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e000      	b.n	8003acc <HAL_GPIO_Init+0x240>
 8003aca:	2300      	movs	r3, #0
 8003acc:	69fa      	ldr	r2, [r7, #28]
 8003ace:	f002 0203 	and.w	r2, r2, #3
 8003ad2:	0092      	lsls	r2, r2, #2
 8003ad4:	4093      	lsls	r3, r2
 8003ad6:	69ba      	ldr	r2, [r7, #24]
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003adc:	4935      	ldr	r1, [pc, #212]	; (8003bb4 <HAL_GPIO_Init+0x328>)
 8003ade:	69fb      	ldr	r3, [r7, #28]
 8003ae0:	089b      	lsrs	r3, r3, #2
 8003ae2:	3302      	adds	r3, #2
 8003ae4:	69ba      	ldr	r2, [r7, #24]
 8003ae6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003aea:	4b3d      	ldr	r3, [pc, #244]	; (8003be0 <HAL_GPIO_Init+0x354>)
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	43db      	mvns	r3, r3
 8003af4:	69ba      	ldr	r2, [r7, #24]
 8003af6:	4013      	ands	r3, r2
 8003af8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d003      	beq.n	8003b0e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003b06:	69ba      	ldr	r2, [r7, #24]
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003b0e:	4a34      	ldr	r2, [pc, #208]	; (8003be0 <HAL_GPIO_Init+0x354>)
 8003b10:	69bb      	ldr	r3, [r7, #24]
 8003b12:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003b14:	4b32      	ldr	r3, [pc, #200]	; (8003be0 <HAL_GPIO_Init+0x354>)
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	43db      	mvns	r3, r3
 8003b1e:	69ba      	ldr	r2, [r7, #24]
 8003b20:	4013      	ands	r3, r2
 8003b22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d003      	beq.n	8003b38 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003b30:	69ba      	ldr	r2, [r7, #24]
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	4313      	orrs	r3, r2
 8003b36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003b38:	4a29      	ldr	r2, [pc, #164]	; (8003be0 <HAL_GPIO_Init+0x354>)
 8003b3a:	69bb      	ldr	r3, [r7, #24]
 8003b3c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003b3e:	4b28      	ldr	r3, [pc, #160]	; (8003be0 <HAL_GPIO_Init+0x354>)
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	43db      	mvns	r3, r3
 8003b48:	69ba      	ldr	r2, [r7, #24]
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d003      	beq.n	8003b62 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003b5a:	69ba      	ldr	r2, [r7, #24]
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003b62:	4a1f      	ldr	r2, [pc, #124]	; (8003be0 <HAL_GPIO_Init+0x354>)
 8003b64:	69bb      	ldr	r3, [r7, #24]
 8003b66:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003b68:	4b1d      	ldr	r3, [pc, #116]	; (8003be0 <HAL_GPIO_Init+0x354>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	43db      	mvns	r3, r3
 8003b72:	69ba      	ldr	r2, [r7, #24]
 8003b74:	4013      	ands	r3, r2
 8003b76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d003      	beq.n	8003b8c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003b84:	69ba      	ldr	r2, [r7, #24]
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003b8c:	4a14      	ldr	r2, [pc, #80]	; (8003be0 <HAL_GPIO_Init+0x354>)
 8003b8e:	69bb      	ldr	r3, [r7, #24]
 8003b90:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b92:	69fb      	ldr	r3, [r7, #28]
 8003b94:	3301      	adds	r3, #1
 8003b96:	61fb      	str	r3, [r7, #28]
 8003b98:	69fb      	ldr	r3, [r7, #28]
 8003b9a:	2b0f      	cmp	r3, #15
 8003b9c:	f67f ae84 	bls.w	80038a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003ba0:	bf00      	nop
 8003ba2:	bf00      	nop
 8003ba4:	3724      	adds	r7, #36	; 0x24
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bac:	4770      	bx	lr
 8003bae:	bf00      	nop
 8003bb0:	40023800 	.word	0x40023800
 8003bb4:	40013800 	.word	0x40013800
 8003bb8:	40020000 	.word	0x40020000
 8003bbc:	40020400 	.word	0x40020400
 8003bc0:	40020800 	.word	0x40020800
 8003bc4:	40020c00 	.word	0x40020c00
 8003bc8:	40021000 	.word	0x40021000
 8003bcc:	40021400 	.word	0x40021400
 8003bd0:	40021800 	.word	0x40021800
 8003bd4:	40021c00 	.word	0x40021c00
 8003bd8:	40022000 	.word	0x40022000
 8003bdc:	40022400 	.word	0x40022400
 8003be0:	40013c00 	.word	0x40013c00

08003be4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b083      	sub	sp, #12
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
 8003bec:	460b      	mov	r3, r1
 8003bee:	807b      	strh	r3, [r7, #2]
 8003bf0:	4613      	mov	r3, r2
 8003bf2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003bf4:	787b      	ldrb	r3, [r7, #1]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d003      	beq.n	8003c02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003bfa:	887a      	ldrh	r2, [r7, #2]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003c00:	e003      	b.n	8003c0a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003c02:	887b      	ldrh	r3, [r7, #2]
 8003c04:	041a      	lsls	r2, r3, #16
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	619a      	str	r2, [r3, #24]
}
 8003c0a:	bf00      	nop
 8003c0c:	370c      	adds	r7, #12
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c14:	4770      	bx	lr

08003c16 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003c16:	b480      	push	{r7}
 8003c18:	b085      	sub	sp, #20
 8003c1a:	af00      	add	r7, sp, #0
 8003c1c:	6078      	str	r0, [r7, #4]
 8003c1e:	460b      	mov	r3, r1
 8003c20:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	695b      	ldr	r3, [r3, #20]
 8003c26:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003c28:	887a      	ldrh	r2, [r7, #2]
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	4013      	ands	r3, r2
 8003c2e:	041a      	lsls	r2, r3, #16
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	43d9      	mvns	r1, r3
 8003c34:	887b      	ldrh	r3, [r7, #2]
 8003c36:	400b      	ands	r3, r1
 8003c38:	431a      	orrs	r2, r3
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	619a      	str	r2, [r3, #24]
}
 8003c3e:	bf00      	nop
 8003c40:	3714      	adds	r7, #20
 8003c42:	46bd      	mov	sp, r7
 8003c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c48:	4770      	bx	lr

08003c4a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003c4a:	b580      	push	{r7, lr}
 8003c4c:	b086      	sub	sp, #24
 8003c4e:	af02      	add	r7, sp, #8
 8003c50:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d101      	bne.n	8003c5c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003c58:	2301      	movs	r3, #1
 8003c5a:	e101      	b.n	8003e60 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8003c68:	b2db      	uxtb	r3, r3
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d106      	bne.n	8003c7c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2200      	movs	r2, #0
 8003c72:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	f009 f86a 	bl	800cd50 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2203      	movs	r2, #3
 8003c80:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c8a:	d102      	bne.n	8003c92 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4618      	mov	r0, r3
 8003c98:	f004 f987 	bl	8007faa <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6818      	ldr	r0, [r3, #0]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	7c1a      	ldrb	r2, [r3, #16]
 8003ca4:	f88d 2000 	strb.w	r2, [sp]
 8003ca8:	3304      	adds	r3, #4
 8003caa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003cac:	f004 f866 	bl	8007d7c <USB_CoreInit>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d005      	beq.n	8003cc2 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2202      	movs	r2, #2
 8003cba:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e0ce      	b.n	8003e60 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	2100      	movs	r1, #0
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f004 f97f 	bl	8007fcc <USB_SetCurrentMode>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d005      	beq.n	8003ce0 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2202      	movs	r2, #2
 8003cd8:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	e0bf      	b.n	8003e60 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	73fb      	strb	r3, [r7, #15]
 8003ce4:	e04a      	b.n	8003d7c <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003ce6:	7bfa      	ldrb	r2, [r7, #15]
 8003ce8:	6879      	ldr	r1, [r7, #4]
 8003cea:	4613      	mov	r3, r2
 8003cec:	00db      	lsls	r3, r3, #3
 8003cee:	4413      	add	r3, r2
 8003cf0:	009b      	lsls	r3, r3, #2
 8003cf2:	440b      	add	r3, r1
 8003cf4:	3315      	adds	r3, #21
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003cfa:	7bfa      	ldrb	r2, [r7, #15]
 8003cfc:	6879      	ldr	r1, [r7, #4]
 8003cfe:	4613      	mov	r3, r2
 8003d00:	00db      	lsls	r3, r3, #3
 8003d02:	4413      	add	r3, r2
 8003d04:	009b      	lsls	r3, r3, #2
 8003d06:	440b      	add	r3, r1
 8003d08:	3314      	adds	r3, #20
 8003d0a:	7bfa      	ldrb	r2, [r7, #15]
 8003d0c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003d0e:	7bfa      	ldrb	r2, [r7, #15]
 8003d10:	7bfb      	ldrb	r3, [r7, #15]
 8003d12:	b298      	uxth	r0, r3
 8003d14:	6879      	ldr	r1, [r7, #4]
 8003d16:	4613      	mov	r3, r2
 8003d18:	00db      	lsls	r3, r3, #3
 8003d1a:	4413      	add	r3, r2
 8003d1c:	009b      	lsls	r3, r3, #2
 8003d1e:	440b      	add	r3, r1
 8003d20:	332e      	adds	r3, #46	; 0x2e
 8003d22:	4602      	mov	r2, r0
 8003d24:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003d26:	7bfa      	ldrb	r2, [r7, #15]
 8003d28:	6879      	ldr	r1, [r7, #4]
 8003d2a:	4613      	mov	r3, r2
 8003d2c:	00db      	lsls	r3, r3, #3
 8003d2e:	4413      	add	r3, r2
 8003d30:	009b      	lsls	r3, r3, #2
 8003d32:	440b      	add	r3, r1
 8003d34:	3318      	adds	r3, #24
 8003d36:	2200      	movs	r2, #0
 8003d38:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003d3a:	7bfa      	ldrb	r2, [r7, #15]
 8003d3c:	6879      	ldr	r1, [r7, #4]
 8003d3e:	4613      	mov	r3, r2
 8003d40:	00db      	lsls	r3, r3, #3
 8003d42:	4413      	add	r3, r2
 8003d44:	009b      	lsls	r3, r3, #2
 8003d46:	440b      	add	r3, r1
 8003d48:	331c      	adds	r3, #28
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003d4e:	7bfa      	ldrb	r2, [r7, #15]
 8003d50:	6879      	ldr	r1, [r7, #4]
 8003d52:	4613      	mov	r3, r2
 8003d54:	00db      	lsls	r3, r3, #3
 8003d56:	4413      	add	r3, r2
 8003d58:	009b      	lsls	r3, r3, #2
 8003d5a:	440b      	add	r3, r1
 8003d5c:	3320      	adds	r3, #32
 8003d5e:	2200      	movs	r2, #0
 8003d60:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003d62:	7bfa      	ldrb	r2, [r7, #15]
 8003d64:	6879      	ldr	r1, [r7, #4]
 8003d66:	4613      	mov	r3, r2
 8003d68:	00db      	lsls	r3, r3, #3
 8003d6a:	4413      	add	r3, r2
 8003d6c:	009b      	lsls	r3, r3, #2
 8003d6e:	440b      	add	r3, r1
 8003d70:	3324      	adds	r3, #36	; 0x24
 8003d72:	2200      	movs	r2, #0
 8003d74:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d76:	7bfb      	ldrb	r3, [r7, #15]
 8003d78:	3301      	adds	r3, #1
 8003d7a:	73fb      	strb	r3, [r7, #15]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	791b      	ldrb	r3, [r3, #4]
 8003d80:	7bfa      	ldrb	r2, [r7, #15]
 8003d82:	429a      	cmp	r2, r3
 8003d84:	d3af      	bcc.n	8003ce6 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d86:	2300      	movs	r3, #0
 8003d88:	73fb      	strb	r3, [r7, #15]
 8003d8a:	e044      	b.n	8003e16 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003d8c:	7bfa      	ldrb	r2, [r7, #15]
 8003d8e:	6879      	ldr	r1, [r7, #4]
 8003d90:	4613      	mov	r3, r2
 8003d92:	00db      	lsls	r3, r3, #3
 8003d94:	4413      	add	r3, r2
 8003d96:	009b      	lsls	r3, r3, #2
 8003d98:	440b      	add	r3, r1
 8003d9a:	f203 2355 	addw	r3, r3, #597	; 0x255
 8003d9e:	2200      	movs	r2, #0
 8003da0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003da2:	7bfa      	ldrb	r2, [r7, #15]
 8003da4:	6879      	ldr	r1, [r7, #4]
 8003da6:	4613      	mov	r3, r2
 8003da8:	00db      	lsls	r3, r3, #3
 8003daa:	4413      	add	r3, r2
 8003dac:	009b      	lsls	r3, r3, #2
 8003dae:	440b      	add	r3, r1
 8003db0:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8003db4:	7bfa      	ldrb	r2, [r7, #15]
 8003db6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003db8:	7bfa      	ldrb	r2, [r7, #15]
 8003dba:	6879      	ldr	r1, [r7, #4]
 8003dbc:	4613      	mov	r3, r2
 8003dbe:	00db      	lsls	r3, r3, #3
 8003dc0:	4413      	add	r3, r2
 8003dc2:	009b      	lsls	r3, r3, #2
 8003dc4:	440b      	add	r3, r1
 8003dc6:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8003dca:	2200      	movs	r2, #0
 8003dcc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003dce:	7bfa      	ldrb	r2, [r7, #15]
 8003dd0:	6879      	ldr	r1, [r7, #4]
 8003dd2:	4613      	mov	r3, r2
 8003dd4:	00db      	lsls	r3, r3, #3
 8003dd6:	4413      	add	r3, r2
 8003dd8:	009b      	lsls	r3, r3, #2
 8003dda:	440b      	add	r3, r1
 8003ddc:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8003de0:	2200      	movs	r2, #0
 8003de2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003de4:	7bfa      	ldrb	r2, [r7, #15]
 8003de6:	6879      	ldr	r1, [r7, #4]
 8003de8:	4613      	mov	r3, r2
 8003dea:	00db      	lsls	r3, r3, #3
 8003dec:	4413      	add	r3, r2
 8003dee:	009b      	lsls	r3, r3, #2
 8003df0:	440b      	add	r3, r1
 8003df2:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8003df6:	2200      	movs	r2, #0
 8003df8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003dfa:	7bfa      	ldrb	r2, [r7, #15]
 8003dfc:	6879      	ldr	r1, [r7, #4]
 8003dfe:	4613      	mov	r3, r2
 8003e00:	00db      	lsls	r3, r3, #3
 8003e02:	4413      	add	r3, r2
 8003e04:	009b      	lsls	r3, r3, #2
 8003e06:	440b      	add	r3, r1
 8003e08:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e10:	7bfb      	ldrb	r3, [r7, #15]
 8003e12:	3301      	adds	r3, #1
 8003e14:	73fb      	strb	r3, [r7, #15]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	791b      	ldrb	r3, [r3, #4]
 8003e1a:	7bfa      	ldrb	r2, [r7, #15]
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	d3b5      	bcc.n	8003d8c <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6818      	ldr	r0, [r3, #0]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	7c1a      	ldrb	r2, [r3, #16]
 8003e28:	f88d 2000 	strb.w	r2, [sp]
 8003e2c:	3304      	adds	r3, #4
 8003e2e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003e30:	f004 f918 	bl	8008064 <USB_DevInit>
 8003e34:	4603      	mov	r3, r0
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d005      	beq.n	8003e46 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2202      	movs	r2, #2
 8003e3e:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	e00c      	b.n	8003e60 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2201      	movs	r2, #1
 8003e50:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f005 f95c 	bl	8009116 <USB_DevDisconnect>

  return HAL_OK;
 8003e5e:	2300      	movs	r3, #0
}
 8003e60:	4618      	mov	r0, r3
 8003e62:	3710      	adds	r7, #16
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bd80      	pop	{r7, pc}

08003e68 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b084      	sub	sp, #16
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8003e7c:	2b01      	cmp	r3, #1
 8003e7e:	d101      	bne.n	8003e84 <HAL_PCD_Start+0x1c>
 8003e80:	2302      	movs	r3, #2
 8003e82:	e022      	b.n	8003eca <HAL_PCD_Start+0x62>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2201      	movs	r2, #1
 8003e88:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d009      	beq.n	8003eac <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d105      	bne.n	8003eac <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ea4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f004 f869 	bl	8007f88 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f005 f90a 	bl	80090d4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8003ec8:	2300      	movs	r3, #0
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	3710      	adds	r7, #16
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}

08003ed2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003ed2:	b590      	push	{r4, r7, lr}
 8003ed4:	b08d      	sub	sp, #52	; 0x34
 8003ed6:	af00      	add	r7, sp, #0
 8003ed8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ee0:	6a3b      	ldr	r3, [r7, #32]
 8003ee2:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f005 f9c8 	bl	800927e <USB_GetMode>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	f040 848c 	bne.w	800480e <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4618      	mov	r0, r3
 8003efc:	f005 f92c 	bl	8009158 <USB_ReadInterrupts>
 8003f00:	4603      	mov	r3, r0
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	f000 8482 	beq.w	800480c <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003f08:	69fb      	ldr	r3, [r7, #28]
 8003f0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	0a1b      	lsrs	r3, r3, #8
 8003f12:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4618      	mov	r0, r3
 8003f22:	f005 f919 	bl	8009158 <USB_ReadInterrupts>
 8003f26:	4603      	mov	r3, r0
 8003f28:	f003 0302 	and.w	r3, r3, #2
 8003f2c:	2b02      	cmp	r3, #2
 8003f2e:	d107      	bne.n	8003f40 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	695a      	ldr	r2, [r3, #20]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f002 0202 	and.w	r2, r2, #2
 8003f3e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4618      	mov	r0, r3
 8003f46:	f005 f907 	bl	8009158 <USB_ReadInterrupts>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	f003 0310 	and.w	r3, r3, #16
 8003f50:	2b10      	cmp	r3, #16
 8003f52:	d161      	bne.n	8004018 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	699a      	ldr	r2, [r3, #24]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f022 0210 	bic.w	r2, r2, #16
 8003f62:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003f64:	6a3b      	ldr	r3, [r7, #32]
 8003f66:	6a1b      	ldr	r3, [r3, #32]
 8003f68:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003f6a:	69bb      	ldr	r3, [r7, #24]
 8003f6c:	f003 020f 	and.w	r2, r3, #15
 8003f70:	4613      	mov	r3, r2
 8003f72:	00db      	lsls	r3, r3, #3
 8003f74:	4413      	add	r3, r2
 8003f76:	009b      	lsls	r3, r3, #2
 8003f78:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003f7c:	687a      	ldr	r2, [r7, #4]
 8003f7e:	4413      	add	r3, r2
 8003f80:	3304      	adds	r3, #4
 8003f82:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003f84:	69bb      	ldr	r3, [r7, #24]
 8003f86:	0c5b      	lsrs	r3, r3, #17
 8003f88:	f003 030f 	and.w	r3, r3, #15
 8003f8c:	2b02      	cmp	r3, #2
 8003f8e:	d124      	bne.n	8003fda <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003f90:	69ba      	ldr	r2, [r7, #24]
 8003f92:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003f96:	4013      	ands	r3, r2
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d035      	beq.n	8004008 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003fa0:	69bb      	ldr	r3, [r7, #24]
 8003fa2:	091b      	lsrs	r3, r3, #4
 8003fa4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003fa6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003faa:	b29b      	uxth	r3, r3
 8003fac:	461a      	mov	r2, r3
 8003fae:	6a38      	ldr	r0, [r7, #32]
 8003fb0:	f004 ff3e 	bl	8008e30 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	68da      	ldr	r2, [r3, #12]
 8003fb8:	69bb      	ldr	r3, [r7, #24]
 8003fba:	091b      	lsrs	r3, r3, #4
 8003fbc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003fc0:	441a      	add	r2, r3
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	695a      	ldr	r2, [r3, #20]
 8003fca:	69bb      	ldr	r3, [r7, #24]
 8003fcc:	091b      	lsrs	r3, r3, #4
 8003fce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003fd2:	441a      	add	r2, r3
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	615a      	str	r2, [r3, #20]
 8003fd8:	e016      	b.n	8004008 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003fda:	69bb      	ldr	r3, [r7, #24]
 8003fdc:	0c5b      	lsrs	r3, r3, #17
 8003fde:	f003 030f 	and.w	r3, r3, #15
 8003fe2:	2b06      	cmp	r3, #6
 8003fe4:	d110      	bne.n	8004008 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8003fec:	2208      	movs	r2, #8
 8003fee:	4619      	mov	r1, r3
 8003ff0:	6a38      	ldr	r0, [r7, #32]
 8003ff2:	f004 ff1d 	bl	8008e30 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	695a      	ldr	r2, [r3, #20]
 8003ffa:	69bb      	ldr	r3, [r7, #24]
 8003ffc:	091b      	lsrs	r3, r3, #4
 8003ffe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004002:	441a      	add	r2, r3
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	699a      	ldr	r2, [r3, #24]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f042 0210 	orr.w	r2, r2, #16
 8004016:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4618      	mov	r0, r3
 800401e:	f005 f89b 	bl	8009158 <USB_ReadInterrupts>
 8004022:	4603      	mov	r3, r0
 8004024:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004028:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800402c:	f040 80a7 	bne.w	800417e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8004030:	2300      	movs	r3, #0
 8004032:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4618      	mov	r0, r3
 800403a:	f005 f8a0 	bl	800917e <USB_ReadDevAllOutEpInterrupt>
 800403e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8004040:	e099      	b.n	8004176 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004044:	f003 0301 	and.w	r3, r3, #1
 8004048:	2b00      	cmp	r3, #0
 800404a:	f000 808e 	beq.w	800416a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004054:	b2d2      	uxtb	r2, r2
 8004056:	4611      	mov	r1, r2
 8004058:	4618      	mov	r0, r3
 800405a:	f005 f8c4 	bl	80091e6 <USB_ReadDevOutEPInterrupt>
 800405e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	f003 0301 	and.w	r3, r3, #1
 8004066:	2b00      	cmp	r3, #0
 8004068:	d00c      	beq.n	8004084 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800406a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800406c:	015a      	lsls	r2, r3, #5
 800406e:	69fb      	ldr	r3, [r7, #28]
 8004070:	4413      	add	r3, r2
 8004072:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004076:	461a      	mov	r2, r3
 8004078:	2301      	movs	r3, #1
 800407a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800407c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	f000 fea2 	bl	8004dc8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	f003 0308 	and.w	r3, r3, #8
 800408a:	2b00      	cmp	r3, #0
 800408c:	d00c      	beq.n	80040a8 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800408e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004090:	015a      	lsls	r2, r3, #5
 8004092:	69fb      	ldr	r3, [r7, #28]
 8004094:	4413      	add	r3, r2
 8004096:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800409a:	461a      	mov	r2, r3
 800409c:	2308      	movs	r3, #8
 800409e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80040a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f000 ff78 	bl	8004f98 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	f003 0310 	and.w	r3, r3, #16
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d008      	beq.n	80040c4 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80040b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b4:	015a      	lsls	r2, r3, #5
 80040b6:	69fb      	ldr	r3, [r7, #28]
 80040b8:	4413      	add	r3, r2
 80040ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040be:	461a      	mov	r2, r3
 80040c0:	2310      	movs	r3, #16
 80040c2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	f003 0302 	and.w	r3, r3, #2
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d030      	beq.n	8004130 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80040ce:	6a3b      	ldr	r3, [r7, #32]
 80040d0:	695b      	ldr	r3, [r3, #20]
 80040d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040d6:	2b80      	cmp	r3, #128	; 0x80
 80040d8:	d109      	bne.n	80040ee <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80040da:	69fb      	ldr	r3, [r7, #28]
 80040dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	69fa      	ldr	r2, [r7, #28]
 80040e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80040e8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80040ec:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80040ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040f0:	4613      	mov	r3, r2
 80040f2:	00db      	lsls	r3, r3, #3
 80040f4:	4413      	add	r3, r2
 80040f6:	009b      	lsls	r3, r3, #2
 80040f8:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80040fc:	687a      	ldr	r2, [r7, #4]
 80040fe:	4413      	add	r3, r2
 8004100:	3304      	adds	r3, #4
 8004102:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	78db      	ldrb	r3, [r3, #3]
 8004108:	2b01      	cmp	r3, #1
 800410a:	d108      	bne.n	800411e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	2200      	movs	r2, #0
 8004110:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004114:	b2db      	uxtb	r3, r3
 8004116:	4619      	mov	r1, r3
 8004118:	6878      	ldr	r0, [r7, #4]
 800411a:	f008 ff1f 	bl	800cf5c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800411e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004120:	015a      	lsls	r2, r3, #5
 8004122:	69fb      	ldr	r3, [r7, #28]
 8004124:	4413      	add	r3, r2
 8004126:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800412a:	461a      	mov	r2, r3
 800412c:	2302      	movs	r3, #2
 800412e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	f003 0320 	and.w	r3, r3, #32
 8004136:	2b00      	cmp	r3, #0
 8004138:	d008      	beq.n	800414c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800413a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800413c:	015a      	lsls	r2, r3, #5
 800413e:	69fb      	ldr	r3, [r7, #28]
 8004140:	4413      	add	r3, r2
 8004142:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004146:	461a      	mov	r2, r3
 8004148:	2320      	movs	r3, #32
 800414a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004152:	2b00      	cmp	r3, #0
 8004154:	d009      	beq.n	800416a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004158:	015a      	lsls	r2, r3, #5
 800415a:	69fb      	ldr	r3, [r7, #28]
 800415c:	4413      	add	r3, r2
 800415e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004162:	461a      	mov	r2, r3
 8004164:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004168:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800416a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800416c:	3301      	adds	r3, #1
 800416e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004172:	085b      	lsrs	r3, r3, #1
 8004174:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004178:	2b00      	cmp	r3, #0
 800417a:	f47f af62 	bne.w	8004042 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4618      	mov	r0, r3
 8004184:	f004 ffe8 	bl	8009158 <USB_ReadInterrupts>
 8004188:	4603      	mov	r3, r0
 800418a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800418e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004192:	f040 80db 	bne.w	800434c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4618      	mov	r0, r3
 800419c:	f005 f809 	bl	80091b2 <USB_ReadDevAllInEpInterrupt>
 80041a0:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80041a2:	2300      	movs	r3, #0
 80041a4:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80041a6:	e0cd      	b.n	8004344 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80041a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041aa:	f003 0301 	and.w	r3, r3, #1
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	f000 80c2 	beq.w	8004338 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041ba:	b2d2      	uxtb	r2, r2
 80041bc:	4611      	mov	r1, r2
 80041be:	4618      	mov	r0, r3
 80041c0:	f005 f82f 	bl	8009222 <USB_ReadDevInEPInterrupt>
 80041c4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	f003 0301 	and.w	r3, r3, #1
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d057      	beq.n	8004280 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80041d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d2:	f003 030f 	and.w	r3, r3, #15
 80041d6:	2201      	movs	r2, #1
 80041d8:	fa02 f303 	lsl.w	r3, r2, r3
 80041dc:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80041de:	69fb      	ldr	r3, [r7, #28]
 80041e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	43db      	mvns	r3, r3
 80041ea:	69f9      	ldr	r1, [r7, #28]
 80041ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80041f0:	4013      	ands	r3, r2
 80041f2:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80041f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f6:	015a      	lsls	r2, r3, #5
 80041f8:	69fb      	ldr	r3, [r7, #28]
 80041fa:	4413      	add	r3, r2
 80041fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004200:	461a      	mov	r2, r3
 8004202:	2301      	movs	r3, #1
 8004204:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	799b      	ldrb	r3, [r3, #6]
 800420a:	2b01      	cmp	r3, #1
 800420c:	d132      	bne.n	8004274 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800420e:	6879      	ldr	r1, [r7, #4]
 8004210:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004212:	4613      	mov	r3, r2
 8004214:	00db      	lsls	r3, r3, #3
 8004216:	4413      	add	r3, r2
 8004218:	009b      	lsls	r3, r3, #2
 800421a:	440b      	add	r3, r1
 800421c:	3320      	adds	r3, #32
 800421e:	6819      	ldr	r1, [r3, #0]
 8004220:	6878      	ldr	r0, [r7, #4]
 8004222:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004224:	4613      	mov	r3, r2
 8004226:	00db      	lsls	r3, r3, #3
 8004228:	4413      	add	r3, r2
 800422a:	009b      	lsls	r3, r3, #2
 800422c:	4403      	add	r3, r0
 800422e:	331c      	adds	r3, #28
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4419      	add	r1, r3
 8004234:	6878      	ldr	r0, [r7, #4]
 8004236:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004238:	4613      	mov	r3, r2
 800423a:	00db      	lsls	r3, r3, #3
 800423c:	4413      	add	r3, r2
 800423e:	009b      	lsls	r3, r3, #2
 8004240:	4403      	add	r3, r0
 8004242:	3320      	adds	r3, #32
 8004244:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004248:	2b00      	cmp	r3, #0
 800424a:	d113      	bne.n	8004274 <HAL_PCD_IRQHandler+0x3a2>
 800424c:	6879      	ldr	r1, [r7, #4]
 800424e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004250:	4613      	mov	r3, r2
 8004252:	00db      	lsls	r3, r3, #3
 8004254:	4413      	add	r3, r2
 8004256:	009b      	lsls	r3, r3, #2
 8004258:	440b      	add	r3, r1
 800425a:	3324      	adds	r3, #36	; 0x24
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d108      	bne.n	8004274 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6818      	ldr	r0, [r3, #0]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800426c:	461a      	mov	r2, r3
 800426e:	2101      	movs	r1, #1
 8004270:	f005 f836 	bl	80092e0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004276:	b2db      	uxtb	r3, r3
 8004278:	4619      	mov	r1, r3
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f008 fde9 	bl	800ce52 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	f003 0308 	and.w	r3, r3, #8
 8004286:	2b00      	cmp	r3, #0
 8004288:	d008      	beq.n	800429c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800428a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800428c:	015a      	lsls	r2, r3, #5
 800428e:	69fb      	ldr	r3, [r7, #28]
 8004290:	4413      	add	r3, r2
 8004292:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004296:	461a      	mov	r2, r3
 8004298:	2308      	movs	r3, #8
 800429a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	f003 0310 	and.w	r3, r3, #16
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d008      	beq.n	80042b8 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80042a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a8:	015a      	lsls	r2, r3, #5
 80042aa:	69fb      	ldr	r3, [r7, #28]
 80042ac:	4413      	add	r3, r2
 80042ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042b2:	461a      	mov	r2, r3
 80042b4:	2310      	movs	r3, #16
 80042b6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d008      	beq.n	80042d4 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80042c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c4:	015a      	lsls	r2, r3, #5
 80042c6:	69fb      	ldr	r3, [r7, #28]
 80042c8:	4413      	add	r3, r2
 80042ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042ce:	461a      	mov	r2, r3
 80042d0:	2340      	movs	r3, #64	; 0x40
 80042d2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	f003 0302 	and.w	r3, r3, #2
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d023      	beq.n	8004326 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80042de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80042e0:	6a38      	ldr	r0, [r7, #32]
 80042e2:	f004 f823 	bl	800832c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80042e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042e8:	4613      	mov	r3, r2
 80042ea:	00db      	lsls	r3, r3, #3
 80042ec:	4413      	add	r3, r2
 80042ee:	009b      	lsls	r3, r3, #2
 80042f0:	3310      	adds	r3, #16
 80042f2:	687a      	ldr	r2, [r7, #4]
 80042f4:	4413      	add	r3, r2
 80042f6:	3304      	adds	r3, #4
 80042f8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	78db      	ldrb	r3, [r3, #3]
 80042fe:	2b01      	cmp	r3, #1
 8004300:	d108      	bne.n	8004314 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	2200      	movs	r2, #0
 8004306:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800430a:	b2db      	uxtb	r3, r3
 800430c:	4619      	mov	r1, r3
 800430e:	6878      	ldr	r0, [r7, #4]
 8004310:	f008 fe36 	bl	800cf80 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004316:	015a      	lsls	r2, r3, #5
 8004318:	69fb      	ldr	r3, [r7, #28]
 800431a:	4413      	add	r3, r2
 800431c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004320:	461a      	mov	r2, r3
 8004322:	2302      	movs	r3, #2
 8004324:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800432c:	2b00      	cmp	r3, #0
 800432e:	d003      	beq.n	8004338 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004330:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f000 fcbb 	bl	8004cae <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800433a:	3301      	adds	r3, #1
 800433c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800433e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004340:	085b      	lsrs	r3, r3, #1
 8004342:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004346:	2b00      	cmp	r3, #0
 8004348:	f47f af2e 	bne.w	80041a8 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4618      	mov	r0, r3
 8004352:	f004 ff01 	bl	8009158 <USB_ReadInterrupts>
 8004356:	4603      	mov	r3, r0
 8004358:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800435c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004360:	d122      	bne.n	80043a8 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004362:	69fb      	ldr	r3, [r7, #28]
 8004364:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	69fa      	ldr	r2, [r7, #28]
 800436c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004370:	f023 0301 	bic.w	r3, r3, #1
 8004374:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 800437c:	2b01      	cmp	r3, #1
 800437e:	d108      	bne.n	8004392 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2200      	movs	r2, #0
 8004384:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004388:	2100      	movs	r1, #0
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f000 fea2 	bl	80050d4 <HAL_PCDEx_LPM_Callback>
 8004390:	e002      	b.n	8004398 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f008 fdd4 	bl	800cf40 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	695a      	ldr	r2, [r3, #20]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80043a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4618      	mov	r0, r3
 80043ae:	f004 fed3 	bl	8009158 <USB_ReadInterrupts>
 80043b2:	4603      	mov	r3, r0
 80043b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043bc:	d112      	bne.n	80043e4 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80043be:	69fb      	ldr	r3, [r7, #28]
 80043c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043c4:	689b      	ldr	r3, [r3, #8]
 80043c6:	f003 0301 	and.w	r3, r3, #1
 80043ca:	2b01      	cmp	r3, #1
 80043cc:	d102      	bne.n	80043d4 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	f008 fd90 	bl	800cef4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	695a      	ldr	r2, [r3, #20]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80043e2:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4618      	mov	r0, r3
 80043ea:	f004 feb5 	bl	8009158 <USB_ReadInterrupts>
 80043ee:	4603      	mov	r3, r0
 80043f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80043f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043f8:	f040 80b7 	bne.w	800456a <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80043fc:	69fb      	ldr	r3, [r7, #28]
 80043fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	69fa      	ldr	r2, [r7, #28]
 8004406:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800440a:	f023 0301 	bic.w	r3, r3, #1
 800440e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	2110      	movs	r1, #16
 8004416:	4618      	mov	r0, r3
 8004418:	f003 ff88 	bl	800832c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800441c:	2300      	movs	r3, #0
 800441e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004420:	e046      	b.n	80044b0 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004424:	015a      	lsls	r2, r3, #5
 8004426:	69fb      	ldr	r3, [r7, #28]
 8004428:	4413      	add	r3, r2
 800442a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800442e:	461a      	mov	r2, r3
 8004430:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004434:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004438:	015a      	lsls	r2, r3, #5
 800443a:	69fb      	ldr	r3, [r7, #28]
 800443c:	4413      	add	r3, r2
 800443e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004446:	0151      	lsls	r1, r2, #5
 8004448:	69fa      	ldr	r2, [r7, #28]
 800444a:	440a      	add	r2, r1
 800444c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004450:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004454:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004458:	015a      	lsls	r2, r3, #5
 800445a:	69fb      	ldr	r3, [r7, #28]
 800445c:	4413      	add	r3, r2
 800445e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004462:	461a      	mov	r2, r3
 8004464:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004468:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800446a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800446c:	015a      	lsls	r2, r3, #5
 800446e:	69fb      	ldr	r3, [r7, #28]
 8004470:	4413      	add	r3, r2
 8004472:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800447a:	0151      	lsls	r1, r2, #5
 800447c:	69fa      	ldr	r2, [r7, #28]
 800447e:	440a      	add	r2, r1
 8004480:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004484:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004488:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800448a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800448c:	015a      	lsls	r2, r3, #5
 800448e:	69fb      	ldr	r3, [r7, #28]
 8004490:	4413      	add	r3, r2
 8004492:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800449a:	0151      	lsls	r1, r2, #5
 800449c:	69fa      	ldr	r2, [r7, #28]
 800449e:	440a      	add	r2, r1
 80044a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044a4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80044a8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80044aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044ac:	3301      	adds	r3, #1
 80044ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	791b      	ldrb	r3, [r3, #4]
 80044b4:	461a      	mov	r2, r3
 80044b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d3b2      	bcc.n	8004422 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80044bc:	69fb      	ldr	r3, [r7, #28]
 80044be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044c2:	69db      	ldr	r3, [r3, #28]
 80044c4:	69fa      	ldr	r2, [r7, #28]
 80044c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80044ca:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80044ce:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	7bdb      	ldrb	r3, [r3, #15]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d016      	beq.n	8004506 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80044d8:	69fb      	ldr	r3, [r7, #28]
 80044da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044e2:	69fa      	ldr	r2, [r7, #28]
 80044e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80044e8:	f043 030b 	orr.w	r3, r3, #11
 80044ec:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80044f0:	69fb      	ldr	r3, [r7, #28]
 80044f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044f8:	69fa      	ldr	r2, [r7, #28]
 80044fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80044fe:	f043 030b 	orr.w	r3, r3, #11
 8004502:	6453      	str	r3, [r2, #68]	; 0x44
 8004504:	e015      	b.n	8004532 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004506:	69fb      	ldr	r3, [r7, #28]
 8004508:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800450c:	695b      	ldr	r3, [r3, #20]
 800450e:	69fa      	ldr	r2, [r7, #28]
 8004510:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004514:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004518:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800451c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800451e:	69fb      	ldr	r3, [r7, #28]
 8004520:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004524:	691b      	ldr	r3, [r3, #16]
 8004526:	69fa      	ldr	r2, [r7, #28]
 8004528:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800452c:	f043 030b 	orr.w	r3, r3, #11
 8004530:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004532:	69fb      	ldr	r3, [r7, #28]
 8004534:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	69fa      	ldr	r2, [r7, #28]
 800453c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004540:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004544:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6818      	ldr	r0, [r3, #0]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	f203 439c 	addw	r3, r3, #1180	; 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004554:	461a      	mov	r2, r3
 8004556:	f004 fec3 	bl	80092e0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	695a      	ldr	r2, [r3, #20]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004568:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4618      	mov	r0, r3
 8004570:	f004 fdf2 	bl	8009158 <USB_ReadInterrupts>
 8004574:	4603      	mov	r3, r0
 8004576:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800457a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800457e:	d123      	bne.n	80045c8 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4618      	mov	r0, r3
 8004586:	f004 fe88 	bl	800929a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4618      	mov	r0, r3
 8004590:	f003 ff45 	bl	800841e <USB_GetDevSpeed>
 8004594:	4603      	mov	r3, r0
 8004596:	461a      	mov	r2, r3
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681c      	ldr	r4, [r3, #0]
 80045a0:	f001 f9c8 	bl	8005934 <HAL_RCC_GetHCLKFreq>
 80045a4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80045aa:	461a      	mov	r2, r3
 80045ac:	4620      	mov	r0, r4
 80045ae:	f003 fc49 	bl	8007e44 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	f008 fc75 	bl	800cea2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	695a      	ldr	r2, [r3, #20]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80045c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4618      	mov	r0, r3
 80045ce:	f004 fdc3 	bl	8009158 <USB_ReadInterrupts>
 80045d2:	4603      	mov	r3, r0
 80045d4:	f003 0308 	and.w	r3, r3, #8
 80045d8:	2b08      	cmp	r3, #8
 80045da:	d10a      	bne.n	80045f2 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	f008 fc52 	bl	800ce86 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	695a      	ldr	r2, [r3, #20]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f002 0208 	and.w	r2, r2, #8
 80045f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4618      	mov	r0, r3
 80045f8:	f004 fdae 	bl	8009158 <USB_ReadInterrupts>
 80045fc:	4603      	mov	r3, r0
 80045fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004602:	2b80      	cmp	r3, #128	; 0x80
 8004604:	d123      	bne.n	800464e <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004606:	6a3b      	ldr	r3, [r7, #32]
 8004608:	699b      	ldr	r3, [r3, #24]
 800460a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800460e:	6a3b      	ldr	r3, [r7, #32]
 8004610:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004612:	2301      	movs	r3, #1
 8004614:	627b      	str	r3, [r7, #36]	; 0x24
 8004616:	e014      	b.n	8004642 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004618:	6879      	ldr	r1, [r7, #4]
 800461a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800461c:	4613      	mov	r3, r2
 800461e:	00db      	lsls	r3, r3, #3
 8004620:	4413      	add	r3, r2
 8004622:	009b      	lsls	r3, r3, #2
 8004624:	440b      	add	r3, r1
 8004626:	f203 2357 	addw	r3, r3, #599	; 0x257
 800462a:	781b      	ldrb	r3, [r3, #0]
 800462c:	2b01      	cmp	r3, #1
 800462e:	d105      	bne.n	800463c <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004632:	b2db      	uxtb	r3, r3
 8004634:	4619      	mov	r1, r3
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	f000 fb08 	bl	8004c4c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800463c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800463e:	3301      	adds	r3, #1
 8004640:	627b      	str	r3, [r7, #36]	; 0x24
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	791b      	ldrb	r3, [r3, #4]
 8004646:	461a      	mov	r2, r3
 8004648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800464a:	4293      	cmp	r3, r2
 800464c:	d3e4      	bcc.n	8004618 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4618      	mov	r0, r3
 8004654:	f004 fd80 	bl	8009158 <USB_ReadInterrupts>
 8004658:	4603      	mov	r3, r0
 800465a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800465e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004662:	d13c      	bne.n	80046de <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004664:	2301      	movs	r3, #1
 8004666:	627b      	str	r3, [r7, #36]	; 0x24
 8004668:	e02b      	b.n	80046c2 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800466a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800466c:	015a      	lsls	r2, r3, #5
 800466e:	69fb      	ldr	r3, [r7, #28]
 8004670:	4413      	add	r3, r2
 8004672:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800467a:	6879      	ldr	r1, [r7, #4]
 800467c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800467e:	4613      	mov	r3, r2
 8004680:	00db      	lsls	r3, r3, #3
 8004682:	4413      	add	r3, r2
 8004684:	009b      	lsls	r3, r3, #2
 8004686:	440b      	add	r3, r1
 8004688:	3318      	adds	r3, #24
 800468a:	781b      	ldrb	r3, [r3, #0]
 800468c:	2b01      	cmp	r3, #1
 800468e:	d115      	bne.n	80046bc <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004690:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004692:	2b00      	cmp	r3, #0
 8004694:	da12      	bge.n	80046bc <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004696:	6879      	ldr	r1, [r7, #4]
 8004698:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800469a:	4613      	mov	r3, r2
 800469c:	00db      	lsls	r3, r3, #3
 800469e:	4413      	add	r3, r2
 80046a0:	009b      	lsls	r3, r3, #2
 80046a2:	440b      	add	r3, r1
 80046a4:	3317      	adds	r3, #23
 80046a6:	2201      	movs	r2, #1
 80046a8:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80046aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ac:	b2db      	uxtb	r3, r3
 80046ae:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80046b2:	b2db      	uxtb	r3, r3
 80046b4:	4619      	mov	r1, r3
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f000 fac8 	bl	8004c4c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80046bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046be:	3301      	adds	r3, #1
 80046c0:	627b      	str	r3, [r7, #36]	; 0x24
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	791b      	ldrb	r3, [r3, #4]
 80046c6:	461a      	mov	r2, r3
 80046c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d3cd      	bcc.n	800466a <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	695a      	ldr	r2, [r3, #20]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80046dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4618      	mov	r0, r3
 80046e4:	f004 fd38 	bl	8009158 <USB_ReadInterrupts>
 80046e8:	4603      	mov	r3, r0
 80046ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046ee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80046f2:	d156      	bne.n	80047a2 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80046f4:	2301      	movs	r3, #1
 80046f6:	627b      	str	r3, [r7, #36]	; 0x24
 80046f8:	e045      	b.n	8004786 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80046fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046fc:	015a      	lsls	r2, r3, #5
 80046fe:	69fb      	ldr	r3, [r7, #28]
 8004700:	4413      	add	r3, r2
 8004702:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800470a:	6879      	ldr	r1, [r7, #4]
 800470c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800470e:	4613      	mov	r3, r2
 8004710:	00db      	lsls	r3, r3, #3
 8004712:	4413      	add	r3, r2
 8004714:	009b      	lsls	r3, r3, #2
 8004716:	440b      	add	r3, r1
 8004718:	f503 7316 	add.w	r3, r3, #600	; 0x258
 800471c:	781b      	ldrb	r3, [r3, #0]
 800471e:	2b01      	cmp	r3, #1
 8004720:	d12e      	bne.n	8004780 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004722:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004724:	2b00      	cmp	r3, #0
 8004726:	da2b      	bge.n	8004780 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004728:	69bb      	ldr	r3, [r7, #24]
 800472a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 8004734:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004738:	429a      	cmp	r2, r3
 800473a:	d121      	bne.n	8004780 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800473c:	6879      	ldr	r1, [r7, #4]
 800473e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004740:	4613      	mov	r3, r2
 8004742:	00db      	lsls	r3, r3, #3
 8004744:	4413      	add	r3, r2
 8004746:	009b      	lsls	r3, r3, #2
 8004748:	440b      	add	r3, r1
 800474a:	f203 2357 	addw	r3, r3, #599	; 0x257
 800474e:	2201      	movs	r2, #1
 8004750:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004752:	6a3b      	ldr	r3, [r7, #32]
 8004754:	699b      	ldr	r3, [r3, #24]
 8004756:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800475a:	6a3b      	ldr	r3, [r7, #32]
 800475c:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800475e:	6a3b      	ldr	r3, [r7, #32]
 8004760:	695b      	ldr	r3, [r3, #20]
 8004762:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004766:	2b00      	cmp	r3, #0
 8004768:	d10a      	bne.n	8004780 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800476a:	69fb      	ldr	r3, [r7, #28]
 800476c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	69fa      	ldr	r2, [r7, #28]
 8004774:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004778:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800477c:	6053      	str	r3, [r2, #4]
            break;
 800477e:	e008      	b.n	8004792 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004782:	3301      	adds	r3, #1
 8004784:	627b      	str	r3, [r7, #36]	; 0x24
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	791b      	ldrb	r3, [r3, #4]
 800478a:	461a      	mov	r2, r3
 800478c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800478e:	4293      	cmp	r3, r2
 8004790:	d3b3      	bcc.n	80046fa <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	695a      	ldr	r2, [r3, #20]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80047a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4618      	mov	r0, r3
 80047a8:	f004 fcd6 	bl	8009158 <USB_ReadInterrupts>
 80047ac:	4603      	mov	r3, r0
 80047ae:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80047b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047b6:	d10a      	bne.n	80047ce <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80047b8:	6878      	ldr	r0, [r7, #4]
 80047ba:	f008 fbf3 	bl	800cfa4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	695a      	ldr	r2, [r3, #20]
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80047cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4618      	mov	r0, r3
 80047d4:	f004 fcc0 	bl	8009158 <USB_ReadInterrupts>
 80047d8:	4603      	mov	r3, r0
 80047da:	f003 0304 	and.w	r3, r3, #4
 80047de:	2b04      	cmp	r3, #4
 80047e0:	d115      	bne.n	800480e <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80047ea:	69bb      	ldr	r3, [r7, #24]
 80047ec:	f003 0304 	and.w	r3, r3, #4
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d002      	beq.n	80047fa <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80047f4:	6878      	ldr	r0, [r7, #4]
 80047f6:	f008 fbe3 	bl	800cfc0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	6859      	ldr	r1, [r3, #4]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	69ba      	ldr	r2, [r7, #24]
 8004806:	430a      	orrs	r2, r1
 8004808:	605a      	str	r2, [r3, #4]
 800480a:	e000      	b.n	800480e <HAL_PCD_IRQHandler+0x93c>
      return;
 800480c:	bf00      	nop
    }
  }
}
 800480e:	3734      	adds	r7, #52	; 0x34
 8004810:	46bd      	mov	sp, r7
 8004812:	bd90      	pop	{r4, r7, pc}

08004814 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b082      	sub	sp, #8
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
 800481c:	460b      	mov	r3, r1
 800481e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8004826:	2b01      	cmp	r3, #1
 8004828:	d101      	bne.n	800482e <HAL_PCD_SetAddress+0x1a>
 800482a:	2302      	movs	r3, #2
 800482c:	e012      	b.n	8004854 <HAL_PCD_SetAddress+0x40>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2201      	movs	r2, #1
 8004832:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  hpcd->USB_Address = address;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	78fa      	ldrb	r2, [r7, #3]
 800483a:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	78fa      	ldrb	r2, [r7, #3]
 8004842:	4611      	mov	r1, r2
 8004844:	4618      	mov	r0, r3
 8004846:	f004 fc1f 	bl	8009088 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2200      	movs	r2, #0
 800484e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8004852:	2300      	movs	r3, #0
}
 8004854:	4618      	mov	r0, r3
 8004856:	3708      	adds	r7, #8
 8004858:	46bd      	mov	sp, r7
 800485a:	bd80      	pop	{r7, pc}

0800485c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b084      	sub	sp, #16
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
 8004864:	4608      	mov	r0, r1
 8004866:	4611      	mov	r1, r2
 8004868:	461a      	mov	r2, r3
 800486a:	4603      	mov	r3, r0
 800486c:	70fb      	strb	r3, [r7, #3]
 800486e:	460b      	mov	r3, r1
 8004870:	803b      	strh	r3, [r7, #0]
 8004872:	4613      	mov	r3, r2
 8004874:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004876:	2300      	movs	r3, #0
 8004878:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800487a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800487e:	2b00      	cmp	r3, #0
 8004880:	da0f      	bge.n	80048a2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004882:	78fb      	ldrb	r3, [r7, #3]
 8004884:	f003 020f 	and.w	r2, r3, #15
 8004888:	4613      	mov	r3, r2
 800488a:	00db      	lsls	r3, r3, #3
 800488c:	4413      	add	r3, r2
 800488e:	009b      	lsls	r3, r3, #2
 8004890:	3310      	adds	r3, #16
 8004892:	687a      	ldr	r2, [r7, #4]
 8004894:	4413      	add	r3, r2
 8004896:	3304      	adds	r3, #4
 8004898:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	2201      	movs	r2, #1
 800489e:	705a      	strb	r2, [r3, #1]
 80048a0:	e00f      	b.n	80048c2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80048a2:	78fb      	ldrb	r3, [r7, #3]
 80048a4:	f003 020f 	and.w	r2, r3, #15
 80048a8:	4613      	mov	r3, r2
 80048aa:	00db      	lsls	r3, r3, #3
 80048ac:	4413      	add	r3, r2
 80048ae:	009b      	lsls	r3, r3, #2
 80048b0:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80048b4:	687a      	ldr	r2, [r7, #4]
 80048b6:	4413      	add	r3, r2
 80048b8:	3304      	adds	r3, #4
 80048ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	2200      	movs	r2, #0
 80048c0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80048c2:	78fb      	ldrb	r3, [r7, #3]
 80048c4:	f003 030f 	and.w	r3, r3, #15
 80048c8:	b2da      	uxtb	r2, r3
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80048ce:	883a      	ldrh	r2, [r7, #0]
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	78ba      	ldrb	r2, [r7, #2]
 80048d8:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	785b      	ldrb	r3, [r3, #1]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d004      	beq.n	80048ec <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	781b      	ldrb	r3, [r3, #0]
 80048e6:	b29a      	uxth	r2, r3
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80048ec:	78bb      	ldrb	r3, [r7, #2]
 80048ee:	2b02      	cmp	r3, #2
 80048f0:	d102      	bne.n	80048f8 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	2200      	movs	r2, #0
 80048f6:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80048fe:	2b01      	cmp	r3, #1
 8004900:	d101      	bne.n	8004906 <HAL_PCD_EP_Open+0xaa>
 8004902:	2302      	movs	r3, #2
 8004904:	e00e      	b.n	8004924 <HAL_PCD_EP_Open+0xc8>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2201      	movs	r2, #1
 800490a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	68f9      	ldr	r1, [r7, #12]
 8004914:	4618      	mov	r0, r3
 8004916:	f003 fda7 	bl	8008468 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2200      	movs	r2, #0
 800491e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return ret;
 8004922:	7afb      	ldrb	r3, [r7, #11]
}
 8004924:	4618      	mov	r0, r3
 8004926:	3710      	adds	r7, #16
 8004928:	46bd      	mov	sp, r7
 800492a:	bd80      	pop	{r7, pc}

0800492c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b084      	sub	sp, #16
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
 8004934:	460b      	mov	r3, r1
 8004936:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004938:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800493c:	2b00      	cmp	r3, #0
 800493e:	da0f      	bge.n	8004960 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004940:	78fb      	ldrb	r3, [r7, #3]
 8004942:	f003 020f 	and.w	r2, r3, #15
 8004946:	4613      	mov	r3, r2
 8004948:	00db      	lsls	r3, r3, #3
 800494a:	4413      	add	r3, r2
 800494c:	009b      	lsls	r3, r3, #2
 800494e:	3310      	adds	r3, #16
 8004950:	687a      	ldr	r2, [r7, #4]
 8004952:	4413      	add	r3, r2
 8004954:	3304      	adds	r3, #4
 8004956:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	2201      	movs	r2, #1
 800495c:	705a      	strb	r2, [r3, #1]
 800495e:	e00f      	b.n	8004980 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004960:	78fb      	ldrb	r3, [r7, #3]
 8004962:	f003 020f 	and.w	r2, r3, #15
 8004966:	4613      	mov	r3, r2
 8004968:	00db      	lsls	r3, r3, #3
 800496a:	4413      	add	r3, r2
 800496c:	009b      	lsls	r3, r3, #2
 800496e:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8004972:	687a      	ldr	r2, [r7, #4]
 8004974:	4413      	add	r3, r2
 8004976:	3304      	adds	r3, #4
 8004978:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	2200      	movs	r2, #0
 800497e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004980:	78fb      	ldrb	r3, [r7, #3]
 8004982:	f003 030f 	and.w	r3, r3, #15
 8004986:	b2da      	uxtb	r2, r3
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8004992:	2b01      	cmp	r3, #1
 8004994:	d101      	bne.n	800499a <HAL_PCD_EP_Close+0x6e>
 8004996:	2302      	movs	r3, #2
 8004998:	e00e      	b.n	80049b8 <HAL_PCD_EP_Close+0x8c>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2201      	movs	r2, #1
 800499e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	68f9      	ldr	r1, [r7, #12]
 80049a8:	4618      	mov	r0, r3
 80049aa:	f003 fde5 	bl	8008578 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2200      	movs	r2, #0
 80049b2:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  return HAL_OK;
 80049b6:	2300      	movs	r3, #0
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	3710      	adds	r7, #16
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}

080049c0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b086      	sub	sp, #24
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	60f8      	str	r0, [r7, #12]
 80049c8:	607a      	str	r2, [r7, #4]
 80049ca:	603b      	str	r3, [r7, #0]
 80049cc:	460b      	mov	r3, r1
 80049ce:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80049d0:	7afb      	ldrb	r3, [r7, #11]
 80049d2:	f003 020f 	and.w	r2, r3, #15
 80049d6:	4613      	mov	r3, r2
 80049d8:	00db      	lsls	r3, r3, #3
 80049da:	4413      	add	r3, r2
 80049dc:	009b      	lsls	r3, r3, #2
 80049de:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80049e2:	68fa      	ldr	r2, [r7, #12]
 80049e4:	4413      	add	r3, r2
 80049e6:	3304      	adds	r3, #4
 80049e8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	687a      	ldr	r2, [r7, #4]
 80049ee:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80049f0:	697b      	ldr	r3, [r7, #20]
 80049f2:	683a      	ldr	r2, [r7, #0]
 80049f4:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	2200      	movs	r2, #0
 80049fa:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	2200      	movs	r2, #0
 8004a00:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004a02:	7afb      	ldrb	r3, [r7, #11]
 8004a04:	f003 030f 	and.w	r3, r3, #15
 8004a08:	b2da      	uxtb	r2, r3
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	799b      	ldrb	r3, [r3, #6]
 8004a12:	2b01      	cmp	r3, #1
 8004a14:	d102      	bne.n	8004a1c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004a16:	687a      	ldr	r2, [r7, #4]
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	6818      	ldr	r0, [r3, #0]
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	799b      	ldrb	r3, [r3, #6]
 8004a24:	461a      	mov	r2, r3
 8004a26:	6979      	ldr	r1, [r7, #20]
 8004a28:	f003 fe82 	bl	8008730 <USB_EPStartXfer>

  return HAL_OK;
 8004a2c:	2300      	movs	r3, #0
}
 8004a2e:	4618      	mov	r0, r3
 8004a30:	3718      	adds	r7, #24
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}

08004a36 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004a36:	b480      	push	{r7}
 8004a38:	b083      	sub	sp, #12
 8004a3a:	af00      	add	r7, sp, #0
 8004a3c:	6078      	str	r0, [r7, #4]
 8004a3e:	460b      	mov	r3, r1
 8004a40:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004a42:	78fb      	ldrb	r3, [r7, #3]
 8004a44:	f003 020f 	and.w	r2, r3, #15
 8004a48:	6879      	ldr	r1, [r7, #4]
 8004a4a:	4613      	mov	r3, r2
 8004a4c:	00db      	lsls	r3, r3, #3
 8004a4e:	4413      	add	r3, r2
 8004a50:	009b      	lsls	r3, r3, #2
 8004a52:	440b      	add	r3, r1
 8004a54:	f503 731a 	add.w	r3, r3, #616	; 0x268
 8004a58:	681b      	ldr	r3, [r3, #0]
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	370c      	adds	r7, #12
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a64:	4770      	bx	lr

08004a66 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004a66:	b580      	push	{r7, lr}
 8004a68:	b086      	sub	sp, #24
 8004a6a:	af00      	add	r7, sp, #0
 8004a6c:	60f8      	str	r0, [r7, #12]
 8004a6e:	607a      	str	r2, [r7, #4]
 8004a70:	603b      	str	r3, [r7, #0]
 8004a72:	460b      	mov	r3, r1
 8004a74:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004a76:	7afb      	ldrb	r3, [r7, #11]
 8004a78:	f003 020f 	and.w	r2, r3, #15
 8004a7c:	4613      	mov	r3, r2
 8004a7e:	00db      	lsls	r3, r3, #3
 8004a80:	4413      	add	r3, r2
 8004a82:	009b      	lsls	r3, r3, #2
 8004a84:	3310      	adds	r3, #16
 8004a86:	68fa      	ldr	r2, [r7, #12]
 8004a88:	4413      	add	r3, r2
 8004a8a:	3304      	adds	r3, #4
 8004a8c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	687a      	ldr	r2, [r7, #4]
 8004a92:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	683a      	ldr	r2, [r7, #0]
 8004a98:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	2201      	movs	r2, #1
 8004aa4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004aa6:	7afb      	ldrb	r3, [r7, #11]
 8004aa8:	f003 030f 	and.w	r3, r3, #15
 8004aac:	b2da      	uxtb	r2, r3
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	799b      	ldrb	r3, [r3, #6]
 8004ab6:	2b01      	cmp	r3, #1
 8004ab8:	d102      	bne.n	8004ac0 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004aba:	687a      	ldr	r2, [r7, #4]
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	6818      	ldr	r0, [r3, #0]
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	799b      	ldrb	r3, [r3, #6]
 8004ac8:	461a      	mov	r2, r3
 8004aca:	6979      	ldr	r1, [r7, #20]
 8004acc:	f003 fe30 	bl	8008730 <USB_EPStartXfer>

  return HAL_OK;
 8004ad0:	2300      	movs	r3, #0
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	3718      	adds	r7, #24
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd80      	pop	{r7, pc}

08004ada <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004ada:	b580      	push	{r7, lr}
 8004adc:	b084      	sub	sp, #16
 8004ade:	af00      	add	r7, sp, #0
 8004ae0:	6078      	str	r0, [r7, #4]
 8004ae2:	460b      	mov	r3, r1
 8004ae4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004ae6:	78fb      	ldrb	r3, [r7, #3]
 8004ae8:	f003 030f 	and.w	r3, r3, #15
 8004aec:	687a      	ldr	r2, [r7, #4]
 8004aee:	7912      	ldrb	r2, [r2, #4]
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d901      	bls.n	8004af8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004af4:	2301      	movs	r3, #1
 8004af6:	e04f      	b.n	8004b98 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004af8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	da0f      	bge.n	8004b20 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b00:	78fb      	ldrb	r3, [r7, #3]
 8004b02:	f003 020f 	and.w	r2, r3, #15
 8004b06:	4613      	mov	r3, r2
 8004b08:	00db      	lsls	r3, r3, #3
 8004b0a:	4413      	add	r3, r2
 8004b0c:	009b      	lsls	r3, r3, #2
 8004b0e:	3310      	adds	r3, #16
 8004b10:	687a      	ldr	r2, [r7, #4]
 8004b12:	4413      	add	r3, r2
 8004b14:	3304      	adds	r3, #4
 8004b16:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	705a      	strb	r2, [r3, #1]
 8004b1e:	e00d      	b.n	8004b3c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004b20:	78fa      	ldrb	r2, [r7, #3]
 8004b22:	4613      	mov	r3, r2
 8004b24:	00db      	lsls	r3, r3, #3
 8004b26:	4413      	add	r3, r2
 8004b28:	009b      	lsls	r3, r3, #2
 8004b2a:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8004b2e:	687a      	ldr	r2, [r7, #4]
 8004b30:	4413      	add	r3, r2
 8004b32:	3304      	adds	r3, #4
 8004b34:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	2201      	movs	r2, #1
 8004b40:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004b42:	78fb      	ldrb	r3, [r7, #3]
 8004b44:	f003 030f 	and.w	r3, r3, #15
 8004b48:	b2da      	uxtb	r2, r3
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8004b54:	2b01      	cmp	r3, #1
 8004b56:	d101      	bne.n	8004b5c <HAL_PCD_EP_SetStall+0x82>
 8004b58:	2302      	movs	r3, #2
 8004b5a:	e01d      	b.n	8004b98 <HAL_PCD_EP_SetStall+0xbe>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2201      	movs	r2, #1
 8004b60:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	68f9      	ldr	r1, [r7, #12]
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f004 f9b8 	bl	8008ee0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004b70:	78fb      	ldrb	r3, [r7, #3]
 8004b72:	f003 030f 	and.w	r3, r3, #15
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d109      	bne.n	8004b8e <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6818      	ldr	r0, [r3, #0]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	7999      	ldrb	r1, [r3, #6]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8004b88:	461a      	mov	r2, r3
 8004b8a:	f004 fba9 	bl	80092e0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2200      	movs	r2, #0
 8004b92:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8004b96:	2300      	movs	r3, #0
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	3710      	adds	r7, #16
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bd80      	pop	{r7, pc}

08004ba0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b084      	sub	sp, #16
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
 8004ba8:	460b      	mov	r3, r1
 8004baa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004bac:	78fb      	ldrb	r3, [r7, #3]
 8004bae:	f003 030f 	and.w	r3, r3, #15
 8004bb2:	687a      	ldr	r2, [r7, #4]
 8004bb4:	7912      	ldrb	r2, [r2, #4]
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d901      	bls.n	8004bbe <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e042      	b.n	8004c44 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004bbe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	da0f      	bge.n	8004be6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004bc6:	78fb      	ldrb	r3, [r7, #3]
 8004bc8:	f003 020f 	and.w	r2, r3, #15
 8004bcc:	4613      	mov	r3, r2
 8004bce:	00db      	lsls	r3, r3, #3
 8004bd0:	4413      	add	r3, r2
 8004bd2:	009b      	lsls	r3, r3, #2
 8004bd4:	3310      	adds	r3, #16
 8004bd6:	687a      	ldr	r2, [r7, #4]
 8004bd8:	4413      	add	r3, r2
 8004bda:	3304      	adds	r3, #4
 8004bdc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	2201      	movs	r2, #1
 8004be2:	705a      	strb	r2, [r3, #1]
 8004be4:	e00f      	b.n	8004c06 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004be6:	78fb      	ldrb	r3, [r7, #3]
 8004be8:	f003 020f 	and.w	r2, r3, #15
 8004bec:	4613      	mov	r3, r2
 8004bee:	00db      	lsls	r3, r3, #3
 8004bf0:	4413      	add	r3, r2
 8004bf2:	009b      	lsls	r3, r3, #2
 8004bf4:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8004bf8:	687a      	ldr	r2, [r7, #4]
 8004bfa:	4413      	add	r3, r2
 8004bfc:	3304      	adds	r3, #4
 8004bfe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	2200      	movs	r2, #0
 8004c04:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004c0c:	78fb      	ldrb	r3, [r7, #3]
 8004c0e:	f003 030f 	and.w	r3, r3, #15
 8004c12:	b2da      	uxtb	r2, r3
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8004c1e:	2b01      	cmp	r3, #1
 8004c20:	d101      	bne.n	8004c26 <HAL_PCD_EP_ClrStall+0x86>
 8004c22:	2302      	movs	r3, #2
 8004c24:	e00e      	b.n	8004c44 <HAL_PCD_EP_ClrStall+0xa4>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2201      	movs	r2, #1
 8004c2a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	68f9      	ldr	r1, [r7, #12]
 8004c34:	4618      	mov	r0, r3
 8004c36:	f004 f9c1 	bl	8008fbc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8004c42:	2300      	movs	r3, #0
}
 8004c44:	4618      	mov	r0, r3
 8004c46:	3710      	adds	r7, #16
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bd80      	pop	{r7, pc}

08004c4c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b084      	sub	sp, #16
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
 8004c54:	460b      	mov	r3, r1
 8004c56:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004c58:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	da0c      	bge.n	8004c7a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004c60:	78fb      	ldrb	r3, [r7, #3]
 8004c62:	f003 020f 	and.w	r2, r3, #15
 8004c66:	4613      	mov	r3, r2
 8004c68:	00db      	lsls	r3, r3, #3
 8004c6a:	4413      	add	r3, r2
 8004c6c:	009b      	lsls	r3, r3, #2
 8004c6e:	3310      	adds	r3, #16
 8004c70:	687a      	ldr	r2, [r7, #4]
 8004c72:	4413      	add	r3, r2
 8004c74:	3304      	adds	r3, #4
 8004c76:	60fb      	str	r3, [r7, #12]
 8004c78:	e00c      	b.n	8004c94 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004c7a:	78fb      	ldrb	r3, [r7, #3]
 8004c7c:	f003 020f 	and.w	r2, r3, #15
 8004c80:	4613      	mov	r3, r2
 8004c82:	00db      	lsls	r3, r3, #3
 8004c84:	4413      	add	r3, r2
 8004c86:	009b      	lsls	r3, r3, #2
 8004c88:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8004c8c:	687a      	ldr	r2, [r7, #4]
 8004c8e:	4413      	add	r3, r2
 8004c90:	3304      	adds	r3, #4
 8004c92:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	68f9      	ldr	r1, [r7, #12]
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	f003 ffe0 	bl	8008c60 <USB_EPStopXfer>
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004ca4:	7afb      	ldrb	r3, [r7, #11]
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	3710      	adds	r7, #16
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bd80      	pop	{r7, pc}

08004cae <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004cae:	b580      	push	{r7, lr}
 8004cb0:	b08a      	sub	sp, #40	; 0x28
 8004cb2:	af02      	add	r7, sp, #8
 8004cb4:	6078      	str	r0, [r7, #4]
 8004cb6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004cc2:	683a      	ldr	r2, [r7, #0]
 8004cc4:	4613      	mov	r3, r2
 8004cc6:	00db      	lsls	r3, r3, #3
 8004cc8:	4413      	add	r3, r2
 8004cca:	009b      	lsls	r3, r3, #2
 8004ccc:	3310      	adds	r3, #16
 8004cce:	687a      	ldr	r2, [r7, #4]
 8004cd0:	4413      	add	r3, r2
 8004cd2:	3304      	adds	r3, #4
 8004cd4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	695a      	ldr	r2, [r3, #20]
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	691b      	ldr	r3, [r3, #16]
 8004cde:	429a      	cmp	r2, r3
 8004ce0:	d901      	bls.n	8004ce6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	e06b      	b.n	8004dbe <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	691a      	ldr	r2, [r3, #16]
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	695b      	ldr	r3, [r3, #20]
 8004cee:	1ad3      	subs	r3, r2, r3
 8004cf0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	689b      	ldr	r3, [r3, #8]
 8004cf6:	69fa      	ldr	r2, [r7, #28]
 8004cf8:	429a      	cmp	r2, r3
 8004cfa:	d902      	bls.n	8004d02 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	689b      	ldr	r3, [r3, #8]
 8004d00:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004d02:	69fb      	ldr	r3, [r7, #28]
 8004d04:	3303      	adds	r3, #3
 8004d06:	089b      	lsrs	r3, r3, #2
 8004d08:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004d0a:	e02a      	b.n	8004d62 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	691a      	ldr	r2, [r3, #16]
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	695b      	ldr	r3, [r3, #20]
 8004d14:	1ad3      	subs	r3, r2, r3
 8004d16:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	689b      	ldr	r3, [r3, #8]
 8004d1c:	69fa      	ldr	r2, [r7, #28]
 8004d1e:	429a      	cmp	r2, r3
 8004d20:	d902      	bls.n	8004d28 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	689b      	ldr	r3, [r3, #8]
 8004d26:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004d28:	69fb      	ldr	r3, [r7, #28]
 8004d2a:	3303      	adds	r3, #3
 8004d2c:	089b      	lsrs	r3, r3, #2
 8004d2e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	68d9      	ldr	r1, [r3, #12]
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	b2da      	uxtb	r2, r3
 8004d38:	69fb      	ldr	r3, [r7, #28]
 8004d3a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004d40:	9300      	str	r3, [sp, #0]
 8004d42:	4603      	mov	r3, r0
 8004d44:	6978      	ldr	r0, [r7, #20]
 8004d46:	f004 f835 	bl	8008db4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	68da      	ldr	r2, [r3, #12]
 8004d4e:	69fb      	ldr	r3, [r7, #28]
 8004d50:	441a      	add	r2, r3
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	695a      	ldr	r2, [r3, #20]
 8004d5a:	69fb      	ldr	r3, [r7, #28]
 8004d5c:	441a      	add	r2, r3
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	015a      	lsls	r2, r3, #5
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	4413      	add	r3, r2
 8004d6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d6e:	699b      	ldr	r3, [r3, #24]
 8004d70:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004d72:	69ba      	ldr	r2, [r7, #24]
 8004d74:	429a      	cmp	r2, r3
 8004d76:	d809      	bhi.n	8004d8c <PCD_WriteEmptyTxFifo+0xde>
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	695a      	ldr	r2, [r3, #20]
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004d80:	429a      	cmp	r2, r3
 8004d82:	d203      	bcs.n	8004d8c <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	691b      	ldr	r3, [r3, #16]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d1bf      	bne.n	8004d0c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	691a      	ldr	r2, [r3, #16]
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	695b      	ldr	r3, [r3, #20]
 8004d94:	429a      	cmp	r2, r3
 8004d96:	d811      	bhi.n	8004dbc <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	f003 030f 	and.w	r3, r3, #15
 8004d9e:	2201      	movs	r2, #1
 8004da0:	fa02 f303 	lsl.w	r3, r2, r3
 8004da4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	43db      	mvns	r3, r3
 8004db2:	6939      	ldr	r1, [r7, #16]
 8004db4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004db8:	4013      	ands	r3, r2
 8004dba:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004dbc:	2300      	movs	r3, #0
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	3720      	adds	r7, #32
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}
	...

08004dc8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b088      	sub	sp, #32
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
 8004dd0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dd8:	69fb      	ldr	r3, [r7, #28]
 8004dda:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004ddc:	69fb      	ldr	r3, [r7, #28]
 8004dde:	333c      	adds	r3, #60	; 0x3c
 8004de0:	3304      	adds	r3, #4
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	015a      	lsls	r2, r3, #5
 8004dea:	69bb      	ldr	r3, [r7, #24]
 8004dec:	4413      	add	r3, r2
 8004dee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004df2:	689b      	ldr	r3, [r3, #8]
 8004df4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	799b      	ldrb	r3, [r3, #6]
 8004dfa:	2b01      	cmp	r3, #1
 8004dfc:	d17b      	bne.n	8004ef6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	f003 0308 	and.w	r3, r3, #8
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d015      	beq.n	8004e34 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	4a61      	ldr	r2, [pc, #388]	; (8004f90 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	f240 80b9 	bls.w	8004f84 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	f000 80b3 	beq.w	8004f84 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	015a      	lsls	r2, r3, #5
 8004e22:	69bb      	ldr	r3, [r7, #24]
 8004e24:	4413      	add	r3, r2
 8004e26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e2a:	461a      	mov	r2, r3
 8004e2c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e30:	6093      	str	r3, [r2, #8]
 8004e32:	e0a7      	b.n	8004f84 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	f003 0320 	and.w	r3, r3, #32
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d009      	beq.n	8004e52 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	015a      	lsls	r2, r3, #5
 8004e42:	69bb      	ldr	r3, [r7, #24]
 8004e44:	4413      	add	r3, r2
 8004e46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e4a:	461a      	mov	r2, r3
 8004e4c:	2320      	movs	r3, #32
 8004e4e:	6093      	str	r3, [r2, #8]
 8004e50:	e098      	b.n	8004f84 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	f040 8093 	bne.w	8004f84 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	4a4b      	ldr	r2, [pc, #300]	; (8004f90 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d90f      	bls.n	8004e86 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004e66:	693b      	ldr	r3, [r7, #16]
 8004e68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d00a      	beq.n	8004e86 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	015a      	lsls	r2, r3, #5
 8004e74:	69bb      	ldr	r3, [r7, #24]
 8004e76:	4413      	add	r3, r2
 8004e78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e7c:	461a      	mov	r2, r3
 8004e7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e82:	6093      	str	r3, [r2, #8]
 8004e84:	e07e      	b.n	8004f84 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004e86:	683a      	ldr	r2, [r7, #0]
 8004e88:	4613      	mov	r3, r2
 8004e8a:	00db      	lsls	r3, r3, #3
 8004e8c:	4413      	add	r3, r2
 8004e8e:	009b      	lsls	r3, r3, #2
 8004e90:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8004e94:	687a      	ldr	r2, [r7, #4]
 8004e96:	4413      	add	r3, r2
 8004e98:	3304      	adds	r3, #4
 8004e9a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	6a1a      	ldr	r2, [r3, #32]
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	0159      	lsls	r1, r3, #5
 8004ea4:	69bb      	ldr	r3, [r7, #24]
 8004ea6:	440b      	add	r3, r1
 8004ea8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004eac:	691b      	ldr	r3, [r3, #16]
 8004eae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004eb2:	1ad2      	subs	r2, r2, r3
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d114      	bne.n	8004ee8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	691b      	ldr	r3, [r3, #16]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d109      	bne.n	8004eda <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6818      	ldr	r0, [r3, #0]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8004ed0:	461a      	mov	r2, r3
 8004ed2:	2101      	movs	r1, #1
 8004ed4:	f004 fa04 	bl	80092e0 <USB_EP0_OutStart>
 8004ed8:	e006      	b.n	8004ee8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	68da      	ldr	r2, [r3, #12]
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	695b      	ldr	r3, [r3, #20]
 8004ee2:	441a      	add	r2, r3
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	b2db      	uxtb	r3, r3
 8004eec:	4619      	mov	r1, r3
 8004eee:	6878      	ldr	r0, [r7, #4]
 8004ef0:	f007 ff94 	bl	800ce1c <HAL_PCD_DataOutStageCallback>
 8004ef4:	e046      	b.n	8004f84 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	4a26      	ldr	r2, [pc, #152]	; (8004f94 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d124      	bne.n	8004f48 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d00a      	beq.n	8004f1e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	015a      	lsls	r2, r3, #5
 8004f0c:	69bb      	ldr	r3, [r7, #24]
 8004f0e:	4413      	add	r3, r2
 8004f10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f14:	461a      	mov	r2, r3
 8004f16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f1a:	6093      	str	r3, [r2, #8]
 8004f1c:	e032      	b.n	8004f84 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	f003 0320 	and.w	r3, r3, #32
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d008      	beq.n	8004f3a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	015a      	lsls	r2, r3, #5
 8004f2c:	69bb      	ldr	r3, [r7, #24]
 8004f2e:	4413      	add	r3, r2
 8004f30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f34:	461a      	mov	r2, r3
 8004f36:	2320      	movs	r3, #32
 8004f38:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	b2db      	uxtb	r3, r3
 8004f3e:	4619      	mov	r1, r3
 8004f40:	6878      	ldr	r0, [r7, #4]
 8004f42:	f007 ff6b 	bl	800ce1c <HAL_PCD_DataOutStageCallback>
 8004f46:	e01d      	b.n	8004f84 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d114      	bne.n	8004f78 <PCD_EP_OutXfrComplete_int+0x1b0>
 8004f4e:	6879      	ldr	r1, [r7, #4]
 8004f50:	683a      	ldr	r2, [r7, #0]
 8004f52:	4613      	mov	r3, r2
 8004f54:	00db      	lsls	r3, r3, #3
 8004f56:	4413      	add	r3, r2
 8004f58:	009b      	lsls	r3, r3, #2
 8004f5a:	440b      	add	r3, r1
 8004f5c:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d108      	bne.n	8004f78 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6818      	ldr	r0, [r3, #0]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8004f70:	461a      	mov	r2, r3
 8004f72:	2100      	movs	r1, #0
 8004f74:	f004 f9b4 	bl	80092e0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	b2db      	uxtb	r3, r3
 8004f7c:	4619      	mov	r1, r3
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f007 ff4c 	bl	800ce1c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004f84:	2300      	movs	r3, #0
}
 8004f86:	4618      	mov	r0, r3
 8004f88:	3720      	adds	r7, #32
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}
 8004f8e:	bf00      	nop
 8004f90:	4f54300a 	.word	0x4f54300a
 8004f94:	4f54310a 	.word	0x4f54310a

08004f98 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b086      	sub	sp, #24
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
 8004fa0:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	333c      	adds	r3, #60	; 0x3c
 8004fb0:	3304      	adds	r3, #4
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	015a      	lsls	r2, r3, #5
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	4413      	add	r3, r2
 8004fbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fc2:	689b      	ldr	r3, [r3, #8]
 8004fc4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	4a15      	ldr	r2, [pc, #84]	; (8005020 <PCD_EP_OutSetupPacket_int+0x88>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d90e      	bls.n	8004fec <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d009      	beq.n	8004fec <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	015a      	lsls	r2, r3, #5
 8004fdc:	693b      	ldr	r3, [r7, #16]
 8004fde:	4413      	add	r3, r2
 8004fe0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fe4:	461a      	mov	r2, r3
 8004fe6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004fea:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004fec:	6878      	ldr	r0, [r7, #4]
 8004fee:	f007 ff03 	bl	800cdf8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	4a0a      	ldr	r2, [pc, #40]	; (8005020 <PCD_EP_OutSetupPacket_int+0x88>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d90c      	bls.n	8005014 <PCD_EP_OutSetupPacket_int+0x7c>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	799b      	ldrb	r3, [r3, #6]
 8004ffe:	2b01      	cmp	r3, #1
 8005000:	d108      	bne.n	8005014 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6818      	ldr	r0, [r3, #0]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800500c:	461a      	mov	r2, r3
 800500e:	2101      	movs	r1, #1
 8005010:	f004 f966 	bl	80092e0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005014:	2300      	movs	r3, #0
}
 8005016:	4618      	mov	r0, r3
 8005018:	3718      	adds	r7, #24
 800501a:	46bd      	mov	sp, r7
 800501c:	bd80      	pop	{r7, pc}
 800501e:	bf00      	nop
 8005020:	4f54300a 	.word	0x4f54300a

08005024 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005024:	b480      	push	{r7}
 8005026:	b085      	sub	sp, #20
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
 800502c:	460b      	mov	r3, r1
 800502e:	70fb      	strb	r3, [r7, #3]
 8005030:	4613      	mov	r3, r2
 8005032:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800503a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800503c:	78fb      	ldrb	r3, [r7, #3]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d107      	bne.n	8005052 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005042:	883b      	ldrh	r3, [r7, #0]
 8005044:	0419      	lsls	r1, r3, #16
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	68ba      	ldr	r2, [r7, #8]
 800504c:	430a      	orrs	r2, r1
 800504e:	629a      	str	r2, [r3, #40]	; 0x28
 8005050:	e028      	b.n	80050a4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005058:	0c1b      	lsrs	r3, r3, #16
 800505a:	68ba      	ldr	r2, [r7, #8]
 800505c:	4413      	add	r3, r2
 800505e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005060:	2300      	movs	r3, #0
 8005062:	73fb      	strb	r3, [r7, #15]
 8005064:	e00d      	b.n	8005082 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681a      	ldr	r2, [r3, #0]
 800506a:	7bfb      	ldrb	r3, [r7, #15]
 800506c:	3340      	adds	r3, #64	; 0x40
 800506e:	009b      	lsls	r3, r3, #2
 8005070:	4413      	add	r3, r2
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	0c1b      	lsrs	r3, r3, #16
 8005076:	68ba      	ldr	r2, [r7, #8]
 8005078:	4413      	add	r3, r2
 800507a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800507c:	7bfb      	ldrb	r3, [r7, #15]
 800507e:	3301      	adds	r3, #1
 8005080:	73fb      	strb	r3, [r7, #15]
 8005082:	7bfa      	ldrb	r2, [r7, #15]
 8005084:	78fb      	ldrb	r3, [r7, #3]
 8005086:	3b01      	subs	r3, #1
 8005088:	429a      	cmp	r2, r3
 800508a:	d3ec      	bcc.n	8005066 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800508c:	883b      	ldrh	r3, [r7, #0]
 800508e:	0418      	lsls	r0, r3, #16
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6819      	ldr	r1, [r3, #0]
 8005094:	78fb      	ldrb	r3, [r7, #3]
 8005096:	3b01      	subs	r3, #1
 8005098:	68ba      	ldr	r2, [r7, #8]
 800509a:	4302      	orrs	r2, r0
 800509c:	3340      	adds	r3, #64	; 0x40
 800509e:	009b      	lsls	r3, r3, #2
 80050a0:	440b      	add	r3, r1
 80050a2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80050a4:	2300      	movs	r3, #0
}
 80050a6:	4618      	mov	r0, r3
 80050a8:	3714      	adds	r7, #20
 80050aa:	46bd      	mov	sp, r7
 80050ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b0:	4770      	bx	lr

080050b2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80050b2:	b480      	push	{r7}
 80050b4:	b083      	sub	sp, #12
 80050b6:	af00      	add	r7, sp, #0
 80050b8:	6078      	str	r0, [r7, #4]
 80050ba:	460b      	mov	r3, r1
 80050bc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	887a      	ldrh	r2, [r7, #2]
 80050c4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80050c6:	2300      	movs	r3, #0
}
 80050c8:	4618      	mov	r0, r3
 80050ca:	370c      	adds	r7, #12
 80050cc:	46bd      	mov	sp, r7
 80050ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d2:	4770      	bx	lr

080050d4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80050d4:	b480      	push	{r7}
 80050d6:	b083      	sub	sp, #12
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
 80050dc:	460b      	mov	r3, r1
 80050de:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80050e0:	bf00      	nop
 80050e2:	370c      	adds	r7, #12
 80050e4:	46bd      	mov	sp, r7
 80050e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ea:	4770      	bx	lr

080050ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b086      	sub	sp, #24
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d101      	bne.n	80050fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80050fa:	2301      	movs	r3, #1
 80050fc:	e267      	b.n	80055ce <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f003 0301 	and.w	r3, r3, #1
 8005106:	2b00      	cmp	r3, #0
 8005108:	d075      	beq.n	80051f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800510a:	4b88      	ldr	r3, [pc, #544]	; (800532c <HAL_RCC_OscConfig+0x240>)
 800510c:	689b      	ldr	r3, [r3, #8]
 800510e:	f003 030c 	and.w	r3, r3, #12
 8005112:	2b04      	cmp	r3, #4
 8005114:	d00c      	beq.n	8005130 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005116:	4b85      	ldr	r3, [pc, #532]	; (800532c <HAL_RCC_OscConfig+0x240>)
 8005118:	689b      	ldr	r3, [r3, #8]
 800511a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800511e:	2b08      	cmp	r3, #8
 8005120:	d112      	bne.n	8005148 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005122:	4b82      	ldr	r3, [pc, #520]	; (800532c <HAL_RCC_OscConfig+0x240>)
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800512a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800512e:	d10b      	bne.n	8005148 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005130:	4b7e      	ldr	r3, [pc, #504]	; (800532c <HAL_RCC_OscConfig+0x240>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005138:	2b00      	cmp	r3, #0
 800513a:	d05b      	beq.n	80051f4 <HAL_RCC_OscConfig+0x108>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d157      	bne.n	80051f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005144:	2301      	movs	r3, #1
 8005146:	e242      	b.n	80055ce <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005150:	d106      	bne.n	8005160 <HAL_RCC_OscConfig+0x74>
 8005152:	4b76      	ldr	r3, [pc, #472]	; (800532c <HAL_RCC_OscConfig+0x240>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a75      	ldr	r2, [pc, #468]	; (800532c <HAL_RCC_OscConfig+0x240>)
 8005158:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800515c:	6013      	str	r3, [r2, #0]
 800515e:	e01d      	b.n	800519c <HAL_RCC_OscConfig+0xb0>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005168:	d10c      	bne.n	8005184 <HAL_RCC_OscConfig+0x98>
 800516a:	4b70      	ldr	r3, [pc, #448]	; (800532c <HAL_RCC_OscConfig+0x240>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4a6f      	ldr	r2, [pc, #444]	; (800532c <HAL_RCC_OscConfig+0x240>)
 8005170:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005174:	6013      	str	r3, [r2, #0]
 8005176:	4b6d      	ldr	r3, [pc, #436]	; (800532c <HAL_RCC_OscConfig+0x240>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a6c      	ldr	r2, [pc, #432]	; (800532c <HAL_RCC_OscConfig+0x240>)
 800517c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005180:	6013      	str	r3, [r2, #0]
 8005182:	e00b      	b.n	800519c <HAL_RCC_OscConfig+0xb0>
 8005184:	4b69      	ldr	r3, [pc, #420]	; (800532c <HAL_RCC_OscConfig+0x240>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a68      	ldr	r2, [pc, #416]	; (800532c <HAL_RCC_OscConfig+0x240>)
 800518a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800518e:	6013      	str	r3, [r2, #0]
 8005190:	4b66      	ldr	r3, [pc, #408]	; (800532c <HAL_RCC_OscConfig+0x240>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4a65      	ldr	r2, [pc, #404]	; (800532c <HAL_RCC_OscConfig+0x240>)
 8005196:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800519a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d013      	beq.n	80051cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051a4:	f7fd f84c 	bl	8002240 <HAL_GetTick>
 80051a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051aa:	e008      	b.n	80051be <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80051ac:	f7fd f848 	bl	8002240 <HAL_GetTick>
 80051b0:	4602      	mov	r2, r0
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	1ad3      	subs	r3, r2, r3
 80051b6:	2b64      	cmp	r3, #100	; 0x64
 80051b8:	d901      	bls.n	80051be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80051ba:	2303      	movs	r3, #3
 80051bc:	e207      	b.n	80055ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051be:	4b5b      	ldr	r3, [pc, #364]	; (800532c <HAL_RCC_OscConfig+0x240>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d0f0      	beq.n	80051ac <HAL_RCC_OscConfig+0xc0>
 80051ca:	e014      	b.n	80051f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051cc:	f7fd f838 	bl	8002240 <HAL_GetTick>
 80051d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80051d2:	e008      	b.n	80051e6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80051d4:	f7fd f834 	bl	8002240 <HAL_GetTick>
 80051d8:	4602      	mov	r2, r0
 80051da:	693b      	ldr	r3, [r7, #16]
 80051dc:	1ad3      	subs	r3, r2, r3
 80051de:	2b64      	cmp	r3, #100	; 0x64
 80051e0:	d901      	bls.n	80051e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80051e2:	2303      	movs	r3, #3
 80051e4:	e1f3      	b.n	80055ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80051e6:	4b51      	ldr	r3, [pc, #324]	; (800532c <HAL_RCC_OscConfig+0x240>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d1f0      	bne.n	80051d4 <HAL_RCC_OscConfig+0xe8>
 80051f2:	e000      	b.n	80051f6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f003 0302 	and.w	r3, r3, #2
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d063      	beq.n	80052ca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005202:	4b4a      	ldr	r3, [pc, #296]	; (800532c <HAL_RCC_OscConfig+0x240>)
 8005204:	689b      	ldr	r3, [r3, #8]
 8005206:	f003 030c 	and.w	r3, r3, #12
 800520a:	2b00      	cmp	r3, #0
 800520c:	d00b      	beq.n	8005226 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800520e:	4b47      	ldr	r3, [pc, #284]	; (800532c <HAL_RCC_OscConfig+0x240>)
 8005210:	689b      	ldr	r3, [r3, #8]
 8005212:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005216:	2b08      	cmp	r3, #8
 8005218:	d11c      	bne.n	8005254 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800521a:	4b44      	ldr	r3, [pc, #272]	; (800532c <HAL_RCC_OscConfig+0x240>)
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005222:	2b00      	cmp	r3, #0
 8005224:	d116      	bne.n	8005254 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005226:	4b41      	ldr	r3, [pc, #260]	; (800532c <HAL_RCC_OscConfig+0x240>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f003 0302 	and.w	r3, r3, #2
 800522e:	2b00      	cmp	r3, #0
 8005230:	d005      	beq.n	800523e <HAL_RCC_OscConfig+0x152>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	68db      	ldr	r3, [r3, #12]
 8005236:	2b01      	cmp	r3, #1
 8005238:	d001      	beq.n	800523e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800523a:	2301      	movs	r3, #1
 800523c:	e1c7      	b.n	80055ce <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800523e:	4b3b      	ldr	r3, [pc, #236]	; (800532c <HAL_RCC_OscConfig+0x240>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	691b      	ldr	r3, [r3, #16]
 800524a:	00db      	lsls	r3, r3, #3
 800524c:	4937      	ldr	r1, [pc, #220]	; (800532c <HAL_RCC_OscConfig+0x240>)
 800524e:	4313      	orrs	r3, r2
 8005250:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005252:	e03a      	b.n	80052ca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	68db      	ldr	r3, [r3, #12]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d020      	beq.n	800529e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800525c:	4b34      	ldr	r3, [pc, #208]	; (8005330 <HAL_RCC_OscConfig+0x244>)
 800525e:	2201      	movs	r2, #1
 8005260:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005262:	f7fc ffed 	bl	8002240 <HAL_GetTick>
 8005266:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005268:	e008      	b.n	800527c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800526a:	f7fc ffe9 	bl	8002240 <HAL_GetTick>
 800526e:	4602      	mov	r2, r0
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	1ad3      	subs	r3, r2, r3
 8005274:	2b02      	cmp	r3, #2
 8005276:	d901      	bls.n	800527c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005278:	2303      	movs	r3, #3
 800527a:	e1a8      	b.n	80055ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800527c:	4b2b      	ldr	r3, [pc, #172]	; (800532c <HAL_RCC_OscConfig+0x240>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f003 0302 	and.w	r3, r3, #2
 8005284:	2b00      	cmp	r3, #0
 8005286:	d0f0      	beq.n	800526a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005288:	4b28      	ldr	r3, [pc, #160]	; (800532c <HAL_RCC_OscConfig+0x240>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	691b      	ldr	r3, [r3, #16]
 8005294:	00db      	lsls	r3, r3, #3
 8005296:	4925      	ldr	r1, [pc, #148]	; (800532c <HAL_RCC_OscConfig+0x240>)
 8005298:	4313      	orrs	r3, r2
 800529a:	600b      	str	r3, [r1, #0]
 800529c:	e015      	b.n	80052ca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800529e:	4b24      	ldr	r3, [pc, #144]	; (8005330 <HAL_RCC_OscConfig+0x244>)
 80052a0:	2200      	movs	r2, #0
 80052a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052a4:	f7fc ffcc 	bl	8002240 <HAL_GetTick>
 80052a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80052aa:	e008      	b.n	80052be <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80052ac:	f7fc ffc8 	bl	8002240 <HAL_GetTick>
 80052b0:	4602      	mov	r2, r0
 80052b2:	693b      	ldr	r3, [r7, #16]
 80052b4:	1ad3      	subs	r3, r2, r3
 80052b6:	2b02      	cmp	r3, #2
 80052b8:	d901      	bls.n	80052be <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80052ba:	2303      	movs	r3, #3
 80052bc:	e187      	b.n	80055ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80052be:	4b1b      	ldr	r3, [pc, #108]	; (800532c <HAL_RCC_OscConfig+0x240>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f003 0302 	and.w	r3, r3, #2
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d1f0      	bne.n	80052ac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f003 0308 	and.w	r3, r3, #8
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d036      	beq.n	8005344 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	695b      	ldr	r3, [r3, #20]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d016      	beq.n	800530c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80052de:	4b15      	ldr	r3, [pc, #84]	; (8005334 <HAL_RCC_OscConfig+0x248>)
 80052e0:	2201      	movs	r2, #1
 80052e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052e4:	f7fc ffac 	bl	8002240 <HAL_GetTick>
 80052e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80052ea:	e008      	b.n	80052fe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80052ec:	f7fc ffa8 	bl	8002240 <HAL_GetTick>
 80052f0:	4602      	mov	r2, r0
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	1ad3      	subs	r3, r2, r3
 80052f6:	2b02      	cmp	r3, #2
 80052f8:	d901      	bls.n	80052fe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80052fa:	2303      	movs	r3, #3
 80052fc:	e167      	b.n	80055ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80052fe:	4b0b      	ldr	r3, [pc, #44]	; (800532c <HAL_RCC_OscConfig+0x240>)
 8005300:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005302:	f003 0302 	and.w	r3, r3, #2
 8005306:	2b00      	cmp	r3, #0
 8005308:	d0f0      	beq.n	80052ec <HAL_RCC_OscConfig+0x200>
 800530a:	e01b      	b.n	8005344 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800530c:	4b09      	ldr	r3, [pc, #36]	; (8005334 <HAL_RCC_OscConfig+0x248>)
 800530e:	2200      	movs	r2, #0
 8005310:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005312:	f7fc ff95 	bl	8002240 <HAL_GetTick>
 8005316:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005318:	e00e      	b.n	8005338 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800531a:	f7fc ff91 	bl	8002240 <HAL_GetTick>
 800531e:	4602      	mov	r2, r0
 8005320:	693b      	ldr	r3, [r7, #16]
 8005322:	1ad3      	subs	r3, r2, r3
 8005324:	2b02      	cmp	r3, #2
 8005326:	d907      	bls.n	8005338 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005328:	2303      	movs	r3, #3
 800532a:	e150      	b.n	80055ce <HAL_RCC_OscConfig+0x4e2>
 800532c:	40023800 	.word	0x40023800
 8005330:	42470000 	.word	0x42470000
 8005334:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005338:	4b88      	ldr	r3, [pc, #544]	; (800555c <HAL_RCC_OscConfig+0x470>)
 800533a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800533c:	f003 0302 	and.w	r3, r3, #2
 8005340:	2b00      	cmp	r3, #0
 8005342:	d1ea      	bne.n	800531a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f003 0304 	and.w	r3, r3, #4
 800534c:	2b00      	cmp	r3, #0
 800534e:	f000 8097 	beq.w	8005480 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005352:	2300      	movs	r3, #0
 8005354:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005356:	4b81      	ldr	r3, [pc, #516]	; (800555c <HAL_RCC_OscConfig+0x470>)
 8005358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800535a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800535e:	2b00      	cmp	r3, #0
 8005360:	d10f      	bne.n	8005382 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005362:	2300      	movs	r3, #0
 8005364:	60bb      	str	r3, [r7, #8]
 8005366:	4b7d      	ldr	r3, [pc, #500]	; (800555c <HAL_RCC_OscConfig+0x470>)
 8005368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800536a:	4a7c      	ldr	r2, [pc, #496]	; (800555c <HAL_RCC_OscConfig+0x470>)
 800536c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005370:	6413      	str	r3, [r2, #64]	; 0x40
 8005372:	4b7a      	ldr	r3, [pc, #488]	; (800555c <HAL_RCC_OscConfig+0x470>)
 8005374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005376:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800537a:	60bb      	str	r3, [r7, #8]
 800537c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800537e:	2301      	movs	r3, #1
 8005380:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005382:	4b77      	ldr	r3, [pc, #476]	; (8005560 <HAL_RCC_OscConfig+0x474>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800538a:	2b00      	cmp	r3, #0
 800538c:	d118      	bne.n	80053c0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800538e:	4b74      	ldr	r3, [pc, #464]	; (8005560 <HAL_RCC_OscConfig+0x474>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4a73      	ldr	r2, [pc, #460]	; (8005560 <HAL_RCC_OscConfig+0x474>)
 8005394:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005398:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800539a:	f7fc ff51 	bl	8002240 <HAL_GetTick>
 800539e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053a0:	e008      	b.n	80053b4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053a2:	f7fc ff4d 	bl	8002240 <HAL_GetTick>
 80053a6:	4602      	mov	r2, r0
 80053a8:	693b      	ldr	r3, [r7, #16]
 80053aa:	1ad3      	subs	r3, r2, r3
 80053ac:	2b02      	cmp	r3, #2
 80053ae:	d901      	bls.n	80053b4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80053b0:	2303      	movs	r3, #3
 80053b2:	e10c      	b.n	80055ce <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053b4:	4b6a      	ldr	r3, [pc, #424]	; (8005560 <HAL_RCC_OscConfig+0x474>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d0f0      	beq.n	80053a2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	689b      	ldr	r3, [r3, #8]
 80053c4:	2b01      	cmp	r3, #1
 80053c6:	d106      	bne.n	80053d6 <HAL_RCC_OscConfig+0x2ea>
 80053c8:	4b64      	ldr	r3, [pc, #400]	; (800555c <HAL_RCC_OscConfig+0x470>)
 80053ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053cc:	4a63      	ldr	r2, [pc, #396]	; (800555c <HAL_RCC_OscConfig+0x470>)
 80053ce:	f043 0301 	orr.w	r3, r3, #1
 80053d2:	6713      	str	r3, [r2, #112]	; 0x70
 80053d4:	e01c      	b.n	8005410 <HAL_RCC_OscConfig+0x324>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	689b      	ldr	r3, [r3, #8]
 80053da:	2b05      	cmp	r3, #5
 80053dc:	d10c      	bne.n	80053f8 <HAL_RCC_OscConfig+0x30c>
 80053de:	4b5f      	ldr	r3, [pc, #380]	; (800555c <HAL_RCC_OscConfig+0x470>)
 80053e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053e2:	4a5e      	ldr	r2, [pc, #376]	; (800555c <HAL_RCC_OscConfig+0x470>)
 80053e4:	f043 0304 	orr.w	r3, r3, #4
 80053e8:	6713      	str	r3, [r2, #112]	; 0x70
 80053ea:	4b5c      	ldr	r3, [pc, #368]	; (800555c <HAL_RCC_OscConfig+0x470>)
 80053ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053ee:	4a5b      	ldr	r2, [pc, #364]	; (800555c <HAL_RCC_OscConfig+0x470>)
 80053f0:	f043 0301 	orr.w	r3, r3, #1
 80053f4:	6713      	str	r3, [r2, #112]	; 0x70
 80053f6:	e00b      	b.n	8005410 <HAL_RCC_OscConfig+0x324>
 80053f8:	4b58      	ldr	r3, [pc, #352]	; (800555c <HAL_RCC_OscConfig+0x470>)
 80053fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053fc:	4a57      	ldr	r2, [pc, #348]	; (800555c <HAL_RCC_OscConfig+0x470>)
 80053fe:	f023 0301 	bic.w	r3, r3, #1
 8005402:	6713      	str	r3, [r2, #112]	; 0x70
 8005404:	4b55      	ldr	r3, [pc, #340]	; (800555c <HAL_RCC_OscConfig+0x470>)
 8005406:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005408:	4a54      	ldr	r2, [pc, #336]	; (800555c <HAL_RCC_OscConfig+0x470>)
 800540a:	f023 0304 	bic.w	r3, r3, #4
 800540e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	689b      	ldr	r3, [r3, #8]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d015      	beq.n	8005444 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005418:	f7fc ff12 	bl	8002240 <HAL_GetTick>
 800541c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800541e:	e00a      	b.n	8005436 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005420:	f7fc ff0e 	bl	8002240 <HAL_GetTick>
 8005424:	4602      	mov	r2, r0
 8005426:	693b      	ldr	r3, [r7, #16]
 8005428:	1ad3      	subs	r3, r2, r3
 800542a:	f241 3288 	movw	r2, #5000	; 0x1388
 800542e:	4293      	cmp	r3, r2
 8005430:	d901      	bls.n	8005436 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005432:	2303      	movs	r3, #3
 8005434:	e0cb      	b.n	80055ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005436:	4b49      	ldr	r3, [pc, #292]	; (800555c <HAL_RCC_OscConfig+0x470>)
 8005438:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800543a:	f003 0302 	and.w	r3, r3, #2
 800543e:	2b00      	cmp	r3, #0
 8005440:	d0ee      	beq.n	8005420 <HAL_RCC_OscConfig+0x334>
 8005442:	e014      	b.n	800546e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005444:	f7fc fefc 	bl	8002240 <HAL_GetTick>
 8005448:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800544a:	e00a      	b.n	8005462 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800544c:	f7fc fef8 	bl	8002240 <HAL_GetTick>
 8005450:	4602      	mov	r2, r0
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	1ad3      	subs	r3, r2, r3
 8005456:	f241 3288 	movw	r2, #5000	; 0x1388
 800545a:	4293      	cmp	r3, r2
 800545c:	d901      	bls.n	8005462 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800545e:	2303      	movs	r3, #3
 8005460:	e0b5      	b.n	80055ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005462:	4b3e      	ldr	r3, [pc, #248]	; (800555c <HAL_RCC_OscConfig+0x470>)
 8005464:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005466:	f003 0302 	and.w	r3, r3, #2
 800546a:	2b00      	cmp	r3, #0
 800546c:	d1ee      	bne.n	800544c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800546e:	7dfb      	ldrb	r3, [r7, #23]
 8005470:	2b01      	cmp	r3, #1
 8005472:	d105      	bne.n	8005480 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005474:	4b39      	ldr	r3, [pc, #228]	; (800555c <HAL_RCC_OscConfig+0x470>)
 8005476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005478:	4a38      	ldr	r2, [pc, #224]	; (800555c <HAL_RCC_OscConfig+0x470>)
 800547a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800547e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	699b      	ldr	r3, [r3, #24]
 8005484:	2b00      	cmp	r3, #0
 8005486:	f000 80a1 	beq.w	80055cc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800548a:	4b34      	ldr	r3, [pc, #208]	; (800555c <HAL_RCC_OscConfig+0x470>)
 800548c:	689b      	ldr	r3, [r3, #8]
 800548e:	f003 030c 	and.w	r3, r3, #12
 8005492:	2b08      	cmp	r3, #8
 8005494:	d05c      	beq.n	8005550 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	699b      	ldr	r3, [r3, #24]
 800549a:	2b02      	cmp	r3, #2
 800549c:	d141      	bne.n	8005522 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800549e:	4b31      	ldr	r3, [pc, #196]	; (8005564 <HAL_RCC_OscConfig+0x478>)
 80054a0:	2200      	movs	r2, #0
 80054a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054a4:	f7fc fecc 	bl	8002240 <HAL_GetTick>
 80054a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054aa:	e008      	b.n	80054be <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80054ac:	f7fc fec8 	bl	8002240 <HAL_GetTick>
 80054b0:	4602      	mov	r2, r0
 80054b2:	693b      	ldr	r3, [r7, #16]
 80054b4:	1ad3      	subs	r3, r2, r3
 80054b6:	2b02      	cmp	r3, #2
 80054b8:	d901      	bls.n	80054be <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80054ba:	2303      	movs	r3, #3
 80054bc:	e087      	b.n	80055ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054be:	4b27      	ldr	r3, [pc, #156]	; (800555c <HAL_RCC_OscConfig+0x470>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d1f0      	bne.n	80054ac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	69da      	ldr	r2, [r3, #28]
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6a1b      	ldr	r3, [r3, #32]
 80054d2:	431a      	orrs	r2, r3
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d8:	019b      	lsls	r3, r3, #6
 80054da:	431a      	orrs	r2, r3
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054e0:	085b      	lsrs	r3, r3, #1
 80054e2:	3b01      	subs	r3, #1
 80054e4:	041b      	lsls	r3, r3, #16
 80054e6:	431a      	orrs	r2, r3
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054ec:	061b      	lsls	r3, r3, #24
 80054ee:	491b      	ldr	r1, [pc, #108]	; (800555c <HAL_RCC_OscConfig+0x470>)
 80054f0:	4313      	orrs	r3, r2
 80054f2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80054f4:	4b1b      	ldr	r3, [pc, #108]	; (8005564 <HAL_RCC_OscConfig+0x478>)
 80054f6:	2201      	movs	r2, #1
 80054f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054fa:	f7fc fea1 	bl	8002240 <HAL_GetTick>
 80054fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005500:	e008      	b.n	8005514 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005502:	f7fc fe9d 	bl	8002240 <HAL_GetTick>
 8005506:	4602      	mov	r2, r0
 8005508:	693b      	ldr	r3, [r7, #16]
 800550a:	1ad3      	subs	r3, r2, r3
 800550c:	2b02      	cmp	r3, #2
 800550e:	d901      	bls.n	8005514 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005510:	2303      	movs	r3, #3
 8005512:	e05c      	b.n	80055ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005514:	4b11      	ldr	r3, [pc, #68]	; (800555c <HAL_RCC_OscConfig+0x470>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800551c:	2b00      	cmp	r3, #0
 800551e:	d0f0      	beq.n	8005502 <HAL_RCC_OscConfig+0x416>
 8005520:	e054      	b.n	80055cc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005522:	4b10      	ldr	r3, [pc, #64]	; (8005564 <HAL_RCC_OscConfig+0x478>)
 8005524:	2200      	movs	r2, #0
 8005526:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005528:	f7fc fe8a 	bl	8002240 <HAL_GetTick>
 800552c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800552e:	e008      	b.n	8005542 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005530:	f7fc fe86 	bl	8002240 <HAL_GetTick>
 8005534:	4602      	mov	r2, r0
 8005536:	693b      	ldr	r3, [r7, #16]
 8005538:	1ad3      	subs	r3, r2, r3
 800553a:	2b02      	cmp	r3, #2
 800553c:	d901      	bls.n	8005542 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800553e:	2303      	movs	r3, #3
 8005540:	e045      	b.n	80055ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005542:	4b06      	ldr	r3, [pc, #24]	; (800555c <HAL_RCC_OscConfig+0x470>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800554a:	2b00      	cmp	r3, #0
 800554c:	d1f0      	bne.n	8005530 <HAL_RCC_OscConfig+0x444>
 800554e:	e03d      	b.n	80055cc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	699b      	ldr	r3, [r3, #24]
 8005554:	2b01      	cmp	r3, #1
 8005556:	d107      	bne.n	8005568 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005558:	2301      	movs	r3, #1
 800555a:	e038      	b.n	80055ce <HAL_RCC_OscConfig+0x4e2>
 800555c:	40023800 	.word	0x40023800
 8005560:	40007000 	.word	0x40007000
 8005564:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005568:	4b1b      	ldr	r3, [pc, #108]	; (80055d8 <HAL_RCC_OscConfig+0x4ec>)
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	699b      	ldr	r3, [r3, #24]
 8005572:	2b01      	cmp	r3, #1
 8005574:	d028      	beq.n	80055c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005580:	429a      	cmp	r2, r3
 8005582:	d121      	bne.n	80055c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800558e:	429a      	cmp	r2, r3
 8005590:	d11a      	bne.n	80055c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005592:	68fa      	ldr	r2, [r7, #12]
 8005594:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005598:	4013      	ands	r3, r2
 800559a:	687a      	ldr	r2, [r7, #4]
 800559c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800559e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d111      	bne.n	80055c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055ae:	085b      	lsrs	r3, r3, #1
 80055b0:	3b01      	subs	r3, #1
 80055b2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80055b4:	429a      	cmp	r2, r3
 80055b6:	d107      	bne.n	80055c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055c2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80055c4:	429a      	cmp	r2, r3
 80055c6:	d001      	beq.n	80055cc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80055c8:	2301      	movs	r3, #1
 80055ca:	e000      	b.n	80055ce <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80055cc:	2300      	movs	r3, #0
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	3718      	adds	r7, #24
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}
 80055d6:	bf00      	nop
 80055d8:	40023800 	.word	0x40023800

080055dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b084      	sub	sp, #16
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
 80055e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d101      	bne.n	80055f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80055ec:	2301      	movs	r3, #1
 80055ee:	e0cc      	b.n	800578a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80055f0:	4b68      	ldr	r3, [pc, #416]	; (8005794 <HAL_RCC_ClockConfig+0x1b8>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f003 030f 	and.w	r3, r3, #15
 80055f8:	683a      	ldr	r2, [r7, #0]
 80055fa:	429a      	cmp	r2, r3
 80055fc:	d90c      	bls.n	8005618 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055fe:	4b65      	ldr	r3, [pc, #404]	; (8005794 <HAL_RCC_ClockConfig+0x1b8>)
 8005600:	683a      	ldr	r2, [r7, #0]
 8005602:	b2d2      	uxtb	r2, r2
 8005604:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005606:	4b63      	ldr	r3, [pc, #396]	; (8005794 <HAL_RCC_ClockConfig+0x1b8>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f003 030f 	and.w	r3, r3, #15
 800560e:	683a      	ldr	r2, [r7, #0]
 8005610:	429a      	cmp	r2, r3
 8005612:	d001      	beq.n	8005618 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005614:	2301      	movs	r3, #1
 8005616:	e0b8      	b.n	800578a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f003 0302 	and.w	r3, r3, #2
 8005620:	2b00      	cmp	r3, #0
 8005622:	d020      	beq.n	8005666 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f003 0304 	and.w	r3, r3, #4
 800562c:	2b00      	cmp	r3, #0
 800562e:	d005      	beq.n	800563c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005630:	4b59      	ldr	r3, [pc, #356]	; (8005798 <HAL_RCC_ClockConfig+0x1bc>)
 8005632:	689b      	ldr	r3, [r3, #8]
 8005634:	4a58      	ldr	r2, [pc, #352]	; (8005798 <HAL_RCC_ClockConfig+0x1bc>)
 8005636:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800563a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f003 0308 	and.w	r3, r3, #8
 8005644:	2b00      	cmp	r3, #0
 8005646:	d005      	beq.n	8005654 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005648:	4b53      	ldr	r3, [pc, #332]	; (8005798 <HAL_RCC_ClockConfig+0x1bc>)
 800564a:	689b      	ldr	r3, [r3, #8]
 800564c:	4a52      	ldr	r2, [pc, #328]	; (8005798 <HAL_RCC_ClockConfig+0x1bc>)
 800564e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005652:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005654:	4b50      	ldr	r3, [pc, #320]	; (8005798 <HAL_RCC_ClockConfig+0x1bc>)
 8005656:	689b      	ldr	r3, [r3, #8]
 8005658:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	689b      	ldr	r3, [r3, #8]
 8005660:	494d      	ldr	r1, [pc, #308]	; (8005798 <HAL_RCC_ClockConfig+0x1bc>)
 8005662:	4313      	orrs	r3, r2
 8005664:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f003 0301 	and.w	r3, r3, #1
 800566e:	2b00      	cmp	r3, #0
 8005670:	d044      	beq.n	80056fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	2b01      	cmp	r3, #1
 8005678:	d107      	bne.n	800568a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800567a:	4b47      	ldr	r3, [pc, #284]	; (8005798 <HAL_RCC_ClockConfig+0x1bc>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005682:	2b00      	cmp	r3, #0
 8005684:	d119      	bne.n	80056ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005686:	2301      	movs	r3, #1
 8005688:	e07f      	b.n	800578a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	2b02      	cmp	r3, #2
 8005690:	d003      	beq.n	800569a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005696:	2b03      	cmp	r3, #3
 8005698:	d107      	bne.n	80056aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800569a:	4b3f      	ldr	r3, [pc, #252]	; (8005798 <HAL_RCC_ClockConfig+0x1bc>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d109      	bne.n	80056ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80056a6:	2301      	movs	r3, #1
 80056a8:	e06f      	b.n	800578a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056aa:	4b3b      	ldr	r3, [pc, #236]	; (8005798 <HAL_RCC_ClockConfig+0x1bc>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f003 0302 	and.w	r3, r3, #2
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d101      	bne.n	80056ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80056b6:	2301      	movs	r3, #1
 80056b8:	e067      	b.n	800578a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80056ba:	4b37      	ldr	r3, [pc, #220]	; (8005798 <HAL_RCC_ClockConfig+0x1bc>)
 80056bc:	689b      	ldr	r3, [r3, #8]
 80056be:	f023 0203 	bic.w	r2, r3, #3
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	4934      	ldr	r1, [pc, #208]	; (8005798 <HAL_RCC_ClockConfig+0x1bc>)
 80056c8:	4313      	orrs	r3, r2
 80056ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80056cc:	f7fc fdb8 	bl	8002240 <HAL_GetTick>
 80056d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056d2:	e00a      	b.n	80056ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056d4:	f7fc fdb4 	bl	8002240 <HAL_GetTick>
 80056d8:	4602      	mov	r2, r0
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	1ad3      	subs	r3, r2, r3
 80056de:	f241 3288 	movw	r2, #5000	; 0x1388
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d901      	bls.n	80056ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80056e6:	2303      	movs	r3, #3
 80056e8:	e04f      	b.n	800578a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056ea:	4b2b      	ldr	r3, [pc, #172]	; (8005798 <HAL_RCC_ClockConfig+0x1bc>)
 80056ec:	689b      	ldr	r3, [r3, #8]
 80056ee:	f003 020c 	and.w	r2, r3, #12
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	009b      	lsls	r3, r3, #2
 80056f8:	429a      	cmp	r2, r3
 80056fa:	d1eb      	bne.n	80056d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80056fc:	4b25      	ldr	r3, [pc, #148]	; (8005794 <HAL_RCC_ClockConfig+0x1b8>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f003 030f 	and.w	r3, r3, #15
 8005704:	683a      	ldr	r2, [r7, #0]
 8005706:	429a      	cmp	r2, r3
 8005708:	d20c      	bcs.n	8005724 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800570a:	4b22      	ldr	r3, [pc, #136]	; (8005794 <HAL_RCC_ClockConfig+0x1b8>)
 800570c:	683a      	ldr	r2, [r7, #0]
 800570e:	b2d2      	uxtb	r2, r2
 8005710:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005712:	4b20      	ldr	r3, [pc, #128]	; (8005794 <HAL_RCC_ClockConfig+0x1b8>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f003 030f 	and.w	r3, r3, #15
 800571a:	683a      	ldr	r2, [r7, #0]
 800571c:	429a      	cmp	r2, r3
 800571e:	d001      	beq.n	8005724 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005720:	2301      	movs	r3, #1
 8005722:	e032      	b.n	800578a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f003 0304 	and.w	r3, r3, #4
 800572c:	2b00      	cmp	r3, #0
 800572e:	d008      	beq.n	8005742 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005730:	4b19      	ldr	r3, [pc, #100]	; (8005798 <HAL_RCC_ClockConfig+0x1bc>)
 8005732:	689b      	ldr	r3, [r3, #8]
 8005734:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	68db      	ldr	r3, [r3, #12]
 800573c:	4916      	ldr	r1, [pc, #88]	; (8005798 <HAL_RCC_ClockConfig+0x1bc>)
 800573e:	4313      	orrs	r3, r2
 8005740:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f003 0308 	and.w	r3, r3, #8
 800574a:	2b00      	cmp	r3, #0
 800574c:	d009      	beq.n	8005762 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800574e:	4b12      	ldr	r3, [pc, #72]	; (8005798 <HAL_RCC_ClockConfig+0x1bc>)
 8005750:	689b      	ldr	r3, [r3, #8]
 8005752:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	691b      	ldr	r3, [r3, #16]
 800575a:	00db      	lsls	r3, r3, #3
 800575c:	490e      	ldr	r1, [pc, #56]	; (8005798 <HAL_RCC_ClockConfig+0x1bc>)
 800575e:	4313      	orrs	r3, r2
 8005760:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005762:	f000 f821 	bl	80057a8 <HAL_RCC_GetSysClockFreq>
 8005766:	4602      	mov	r2, r0
 8005768:	4b0b      	ldr	r3, [pc, #44]	; (8005798 <HAL_RCC_ClockConfig+0x1bc>)
 800576a:	689b      	ldr	r3, [r3, #8]
 800576c:	091b      	lsrs	r3, r3, #4
 800576e:	f003 030f 	and.w	r3, r3, #15
 8005772:	490a      	ldr	r1, [pc, #40]	; (800579c <HAL_RCC_ClockConfig+0x1c0>)
 8005774:	5ccb      	ldrb	r3, [r1, r3]
 8005776:	fa22 f303 	lsr.w	r3, r2, r3
 800577a:	4a09      	ldr	r2, [pc, #36]	; (80057a0 <HAL_RCC_ClockConfig+0x1c4>)
 800577c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800577e:	4b09      	ldr	r3, [pc, #36]	; (80057a4 <HAL_RCC_ClockConfig+0x1c8>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4618      	mov	r0, r3
 8005784:	f7fc f82a 	bl	80017dc <HAL_InitTick>

  return HAL_OK;
 8005788:	2300      	movs	r3, #0
}
 800578a:	4618      	mov	r0, r3
 800578c:	3710      	adds	r7, #16
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}
 8005792:	bf00      	nop
 8005794:	40023c00 	.word	0x40023c00
 8005798:	40023800 	.word	0x40023800
 800579c:	08013890 	.word	0x08013890
 80057a0:	20000000 	.word	0x20000000
 80057a4:	20000004 	.word	0x20000004

080057a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80057a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80057ac:	b090      	sub	sp, #64	; 0x40
 80057ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80057b0:	2300      	movs	r3, #0
 80057b2:	637b      	str	r3, [r7, #52]	; 0x34
 80057b4:	2300      	movs	r3, #0
 80057b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057b8:	2300      	movs	r3, #0
 80057ba:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80057bc:	2300      	movs	r3, #0
 80057be:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80057c0:	4b59      	ldr	r3, [pc, #356]	; (8005928 <HAL_RCC_GetSysClockFreq+0x180>)
 80057c2:	689b      	ldr	r3, [r3, #8]
 80057c4:	f003 030c 	and.w	r3, r3, #12
 80057c8:	2b08      	cmp	r3, #8
 80057ca:	d00d      	beq.n	80057e8 <HAL_RCC_GetSysClockFreq+0x40>
 80057cc:	2b08      	cmp	r3, #8
 80057ce:	f200 80a1 	bhi.w	8005914 <HAL_RCC_GetSysClockFreq+0x16c>
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d002      	beq.n	80057dc <HAL_RCC_GetSysClockFreq+0x34>
 80057d6:	2b04      	cmp	r3, #4
 80057d8:	d003      	beq.n	80057e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80057da:	e09b      	b.n	8005914 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80057dc:	4b53      	ldr	r3, [pc, #332]	; (800592c <HAL_RCC_GetSysClockFreq+0x184>)
 80057de:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80057e0:	e09b      	b.n	800591a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80057e2:	4b53      	ldr	r3, [pc, #332]	; (8005930 <HAL_RCC_GetSysClockFreq+0x188>)
 80057e4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80057e6:	e098      	b.n	800591a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80057e8:	4b4f      	ldr	r3, [pc, #316]	; (8005928 <HAL_RCC_GetSysClockFreq+0x180>)
 80057ea:	685b      	ldr	r3, [r3, #4]
 80057ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80057f0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80057f2:	4b4d      	ldr	r3, [pc, #308]	; (8005928 <HAL_RCC_GetSysClockFreq+0x180>)
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d028      	beq.n	8005850 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80057fe:	4b4a      	ldr	r3, [pc, #296]	; (8005928 <HAL_RCC_GetSysClockFreq+0x180>)
 8005800:	685b      	ldr	r3, [r3, #4]
 8005802:	099b      	lsrs	r3, r3, #6
 8005804:	2200      	movs	r2, #0
 8005806:	623b      	str	r3, [r7, #32]
 8005808:	627a      	str	r2, [r7, #36]	; 0x24
 800580a:	6a3b      	ldr	r3, [r7, #32]
 800580c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005810:	2100      	movs	r1, #0
 8005812:	4b47      	ldr	r3, [pc, #284]	; (8005930 <HAL_RCC_GetSysClockFreq+0x188>)
 8005814:	fb03 f201 	mul.w	r2, r3, r1
 8005818:	2300      	movs	r3, #0
 800581a:	fb00 f303 	mul.w	r3, r0, r3
 800581e:	4413      	add	r3, r2
 8005820:	4a43      	ldr	r2, [pc, #268]	; (8005930 <HAL_RCC_GetSysClockFreq+0x188>)
 8005822:	fba0 1202 	umull	r1, r2, r0, r2
 8005826:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005828:	460a      	mov	r2, r1
 800582a:	62ba      	str	r2, [r7, #40]	; 0x28
 800582c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800582e:	4413      	add	r3, r2
 8005830:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005832:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005834:	2200      	movs	r2, #0
 8005836:	61bb      	str	r3, [r7, #24]
 8005838:	61fa      	str	r2, [r7, #28]
 800583a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800583e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005842:	f7fb f9c1 	bl	8000bc8 <__aeabi_uldivmod>
 8005846:	4602      	mov	r2, r0
 8005848:	460b      	mov	r3, r1
 800584a:	4613      	mov	r3, r2
 800584c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800584e:	e053      	b.n	80058f8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005850:	4b35      	ldr	r3, [pc, #212]	; (8005928 <HAL_RCC_GetSysClockFreq+0x180>)
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	099b      	lsrs	r3, r3, #6
 8005856:	2200      	movs	r2, #0
 8005858:	613b      	str	r3, [r7, #16]
 800585a:	617a      	str	r2, [r7, #20]
 800585c:	693b      	ldr	r3, [r7, #16]
 800585e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005862:	f04f 0b00 	mov.w	fp, #0
 8005866:	4652      	mov	r2, sl
 8005868:	465b      	mov	r3, fp
 800586a:	f04f 0000 	mov.w	r0, #0
 800586e:	f04f 0100 	mov.w	r1, #0
 8005872:	0159      	lsls	r1, r3, #5
 8005874:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005878:	0150      	lsls	r0, r2, #5
 800587a:	4602      	mov	r2, r0
 800587c:	460b      	mov	r3, r1
 800587e:	ebb2 080a 	subs.w	r8, r2, sl
 8005882:	eb63 090b 	sbc.w	r9, r3, fp
 8005886:	f04f 0200 	mov.w	r2, #0
 800588a:	f04f 0300 	mov.w	r3, #0
 800588e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005892:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005896:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800589a:	ebb2 0408 	subs.w	r4, r2, r8
 800589e:	eb63 0509 	sbc.w	r5, r3, r9
 80058a2:	f04f 0200 	mov.w	r2, #0
 80058a6:	f04f 0300 	mov.w	r3, #0
 80058aa:	00eb      	lsls	r3, r5, #3
 80058ac:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80058b0:	00e2      	lsls	r2, r4, #3
 80058b2:	4614      	mov	r4, r2
 80058b4:	461d      	mov	r5, r3
 80058b6:	eb14 030a 	adds.w	r3, r4, sl
 80058ba:	603b      	str	r3, [r7, #0]
 80058bc:	eb45 030b 	adc.w	r3, r5, fp
 80058c0:	607b      	str	r3, [r7, #4]
 80058c2:	f04f 0200 	mov.w	r2, #0
 80058c6:	f04f 0300 	mov.w	r3, #0
 80058ca:	e9d7 4500 	ldrd	r4, r5, [r7]
 80058ce:	4629      	mov	r1, r5
 80058d0:	028b      	lsls	r3, r1, #10
 80058d2:	4621      	mov	r1, r4
 80058d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80058d8:	4621      	mov	r1, r4
 80058da:	028a      	lsls	r2, r1, #10
 80058dc:	4610      	mov	r0, r2
 80058de:	4619      	mov	r1, r3
 80058e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058e2:	2200      	movs	r2, #0
 80058e4:	60bb      	str	r3, [r7, #8]
 80058e6:	60fa      	str	r2, [r7, #12]
 80058e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80058ec:	f7fb f96c 	bl	8000bc8 <__aeabi_uldivmod>
 80058f0:	4602      	mov	r2, r0
 80058f2:	460b      	mov	r3, r1
 80058f4:	4613      	mov	r3, r2
 80058f6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80058f8:	4b0b      	ldr	r3, [pc, #44]	; (8005928 <HAL_RCC_GetSysClockFreq+0x180>)
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	0c1b      	lsrs	r3, r3, #16
 80058fe:	f003 0303 	and.w	r3, r3, #3
 8005902:	3301      	adds	r3, #1
 8005904:	005b      	lsls	r3, r3, #1
 8005906:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8005908:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800590a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800590c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005910:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005912:	e002      	b.n	800591a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005914:	4b05      	ldr	r3, [pc, #20]	; (800592c <HAL_RCC_GetSysClockFreq+0x184>)
 8005916:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005918:	bf00      	nop
    }
  }
  return sysclockfreq;
 800591a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800591c:	4618      	mov	r0, r3
 800591e:	3740      	adds	r7, #64	; 0x40
 8005920:	46bd      	mov	sp, r7
 8005922:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005926:	bf00      	nop
 8005928:	40023800 	.word	0x40023800
 800592c:	00f42400 	.word	0x00f42400
 8005930:	00b71b00 	.word	0x00b71b00

08005934 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005934:	b480      	push	{r7}
 8005936:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005938:	4b03      	ldr	r3, [pc, #12]	; (8005948 <HAL_RCC_GetHCLKFreq+0x14>)
 800593a:	681b      	ldr	r3, [r3, #0]
}
 800593c:	4618      	mov	r0, r3
 800593e:	46bd      	mov	sp, r7
 8005940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005944:	4770      	bx	lr
 8005946:	bf00      	nop
 8005948:	20000000 	.word	0x20000000

0800594c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005950:	f7ff fff0 	bl	8005934 <HAL_RCC_GetHCLKFreq>
 8005954:	4602      	mov	r2, r0
 8005956:	4b05      	ldr	r3, [pc, #20]	; (800596c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005958:	689b      	ldr	r3, [r3, #8]
 800595a:	0a9b      	lsrs	r3, r3, #10
 800595c:	f003 0307 	and.w	r3, r3, #7
 8005960:	4903      	ldr	r1, [pc, #12]	; (8005970 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005962:	5ccb      	ldrb	r3, [r1, r3]
 8005964:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005968:	4618      	mov	r0, r3
 800596a:	bd80      	pop	{r7, pc}
 800596c:	40023800 	.word	0x40023800
 8005970:	080138a0 	.word	0x080138a0

08005974 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005978:	f7ff ffdc 	bl	8005934 <HAL_RCC_GetHCLKFreq>
 800597c:	4602      	mov	r2, r0
 800597e:	4b05      	ldr	r3, [pc, #20]	; (8005994 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005980:	689b      	ldr	r3, [r3, #8]
 8005982:	0b5b      	lsrs	r3, r3, #13
 8005984:	f003 0307 	and.w	r3, r3, #7
 8005988:	4903      	ldr	r1, [pc, #12]	; (8005998 <HAL_RCC_GetPCLK2Freq+0x24>)
 800598a:	5ccb      	ldrb	r3, [r1, r3]
 800598c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005990:	4618      	mov	r0, r3
 8005992:	bd80      	pop	{r7, pc}
 8005994:	40023800 	.word	0x40023800
 8005998:	080138a0 	.word	0x080138a0

0800599c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800599c:	b480      	push	{r7}
 800599e:	b083      	sub	sp, #12
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
 80059a4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	220f      	movs	r2, #15
 80059aa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80059ac:	4b12      	ldr	r3, [pc, #72]	; (80059f8 <HAL_RCC_GetClockConfig+0x5c>)
 80059ae:	689b      	ldr	r3, [r3, #8]
 80059b0:	f003 0203 	and.w	r2, r3, #3
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80059b8:	4b0f      	ldr	r3, [pc, #60]	; (80059f8 <HAL_RCC_GetClockConfig+0x5c>)
 80059ba:	689b      	ldr	r3, [r3, #8]
 80059bc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80059c4:	4b0c      	ldr	r3, [pc, #48]	; (80059f8 <HAL_RCC_GetClockConfig+0x5c>)
 80059c6:	689b      	ldr	r3, [r3, #8]
 80059c8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80059d0:	4b09      	ldr	r3, [pc, #36]	; (80059f8 <HAL_RCC_GetClockConfig+0x5c>)
 80059d2:	689b      	ldr	r3, [r3, #8]
 80059d4:	08db      	lsrs	r3, r3, #3
 80059d6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80059de:	4b07      	ldr	r3, [pc, #28]	; (80059fc <HAL_RCC_GetClockConfig+0x60>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f003 020f 	and.w	r2, r3, #15
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	601a      	str	r2, [r3, #0]
}
 80059ea:	bf00      	nop
 80059ec:	370c      	adds	r7, #12
 80059ee:	46bd      	mov	sp, r7
 80059f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f4:	4770      	bx	lr
 80059f6:	bf00      	nop
 80059f8:	40023800 	.word	0x40023800
 80059fc:	40023c00 	.word	0x40023c00

08005a00 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b082      	sub	sp, #8
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d101      	bne.n	8005a12 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005a0e:	2301      	movs	r3, #1
 8005a10:	e07b      	b.n	8005b0a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d108      	bne.n	8005a2c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a22:	d009      	beq.n	8005a38 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2200      	movs	r2, #0
 8005a28:	61da      	str	r2, [r3, #28]
 8005a2a:	e005      	b.n	8005a38 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2200      	movs	r2, #0
 8005a36:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005a44:	b2db      	uxtb	r3, r3
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d106      	bne.n	8005a58 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f7fb fe4e 	bl	80016f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2202      	movs	r2, #2
 8005a5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	681a      	ldr	r2, [r3, #0]
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a6e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	685b      	ldr	r3, [r3, #4]
 8005a74:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	689b      	ldr	r3, [r3, #8]
 8005a7c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005a80:	431a      	orrs	r2, r3
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	68db      	ldr	r3, [r3, #12]
 8005a86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a8a:	431a      	orrs	r2, r3
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	691b      	ldr	r3, [r3, #16]
 8005a90:	f003 0302 	and.w	r3, r3, #2
 8005a94:	431a      	orrs	r2, r3
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	695b      	ldr	r3, [r3, #20]
 8005a9a:	f003 0301 	and.w	r3, r3, #1
 8005a9e:	431a      	orrs	r2, r3
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	699b      	ldr	r3, [r3, #24]
 8005aa4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005aa8:	431a      	orrs	r2, r3
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	69db      	ldr	r3, [r3, #28]
 8005aae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005ab2:	431a      	orrs	r2, r3
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6a1b      	ldr	r3, [r3, #32]
 8005ab8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005abc:	ea42 0103 	orr.w	r1, r2, r3
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ac4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	430a      	orrs	r2, r1
 8005ace:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	699b      	ldr	r3, [r3, #24]
 8005ad4:	0c1b      	lsrs	r3, r3, #16
 8005ad6:	f003 0104 	and.w	r1, r3, #4
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ade:	f003 0210 	and.w	r2, r3, #16
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	430a      	orrs	r2, r1
 8005ae8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	69da      	ldr	r2, [r3, #28]
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005af8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2200      	movs	r2, #0
 8005afe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2201      	movs	r2, #1
 8005b04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005b08:	2300      	movs	r3, #0
}
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	3708      	adds	r7, #8
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bd80      	pop	{r7, pc}

08005b12 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005b12:	b580      	push	{r7, lr}
 8005b14:	b08c      	sub	sp, #48	; 0x30
 8005b16:	af00      	add	r7, sp, #0
 8005b18:	60f8      	str	r0, [r7, #12]
 8005b1a:	60b9      	str	r1, [r7, #8]
 8005b1c:	607a      	str	r2, [r7, #4]
 8005b1e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005b20:	2301      	movs	r3, #1
 8005b22:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005b24:	2300      	movs	r3, #0
 8005b26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005b30:	2b01      	cmp	r3, #1
 8005b32:	d101      	bne.n	8005b38 <HAL_SPI_TransmitReceive+0x26>
 8005b34:	2302      	movs	r3, #2
 8005b36:	e198      	b.n	8005e6a <HAL_SPI_TransmitReceive+0x358>
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	2201      	movs	r2, #1
 8005b3c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005b40:	f7fc fb7e 	bl	8002240 <HAL_GetTick>
 8005b44:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005b4c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005b56:	887b      	ldrh	r3, [r7, #2]
 8005b58:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005b5a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005b5e:	2b01      	cmp	r3, #1
 8005b60:	d00f      	beq.n	8005b82 <HAL_SPI_TransmitReceive+0x70>
 8005b62:	69fb      	ldr	r3, [r7, #28]
 8005b64:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b68:	d107      	bne.n	8005b7a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	689b      	ldr	r3, [r3, #8]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d103      	bne.n	8005b7a <HAL_SPI_TransmitReceive+0x68>
 8005b72:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005b76:	2b04      	cmp	r3, #4
 8005b78:	d003      	beq.n	8005b82 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005b7a:	2302      	movs	r3, #2
 8005b7c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005b80:	e16d      	b.n	8005e5e <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d005      	beq.n	8005b94 <HAL_SPI_TransmitReceive+0x82>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d002      	beq.n	8005b94 <HAL_SPI_TransmitReceive+0x82>
 8005b8e:	887b      	ldrh	r3, [r7, #2]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d103      	bne.n	8005b9c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005b94:	2301      	movs	r3, #1
 8005b96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005b9a:	e160      	b.n	8005e5e <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005ba2:	b2db      	uxtb	r3, r3
 8005ba4:	2b04      	cmp	r3, #4
 8005ba6:	d003      	beq.n	8005bb0 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	2205      	movs	r2, #5
 8005bac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	687a      	ldr	r2, [r7, #4]
 8005bba:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	887a      	ldrh	r2, [r7, #2]
 8005bc0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	887a      	ldrh	r2, [r7, #2]
 8005bc6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	68ba      	ldr	r2, [r7, #8]
 8005bcc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	887a      	ldrh	r2, [r7, #2]
 8005bd2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	887a      	ldrh	r2, [r7, #2]
 8005bd8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	2200      	movs	r2, #0
 8005be4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bf0:	2b40      	cmp	r3, #64	; 0x40
 8005bf2:	d007      	beq.n	8005c04 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	681a      	ldr	r2, [r3, #0]
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c02:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	68db      	ldr	r3, [r3, #12]
 8005c08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c0c:	d17c      	bne.n	8005d08 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	685b      	ldr	r3, [r3, #4]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d002      	beq.n	8005c1c <HAL_SPI_TransmitReceive+0x10a>
 8005c16:	8b7b      	ldrh	r3, [r7, #26]
 8005c18:	2b01      	cmp	r3, #1
 8005c1a:	d16a      	bne.n	8005cf2 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c20:	881a      	ldrh	r2, [r3, #0]
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c2c:	1c9a      	adds	r2, r3, #2
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c36:	b29b      	uxth	r3, r3
 8005c38:	3b01      	subs	r3, #1
 8005c3a:	b29a      	uxth	r2, r3
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c40:	e057      	b.n	8005cf2 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	689b      	ldr	r3, [r3, #8]
 8005c48:	f003 0302 	and.w	r3, r3, #2
 8005c4c:	2b02      	cmp	r3, #2
 8005c4e:	d11b      	bne.n	8005c88 <HAL_SPI_TransmitReceive+0x176>
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c54:	b29b      	uxth	r3, r3
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d016      	beq.n	8005c88 <HAL_SPI_TransmitReceive+0x176>
 8005c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c5c:	2b01      	cmp	r3, #1
 8005c5e:	d113      	bne.n	8005c88 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c64:	881a      	ldrh	r2, [r3, #0]
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c70:	1c9a      	adds	r2, r3, #2
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c7a:	b29b      	uxth	r3, r3
 8005c7c:	3b01      	subs	r3, #1
 8005c7e:	b29a      	uxth	r2, r3
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005c84:	2300      	movs	r3, #0
 8005c86:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	689b      	ldr	r3, [r3, #8]
 8005c8e:	f003 0301 	and.w	r3, r3, #1
 8005c92:	2b01      	cmp	r3, #1
 8005c94:	d119      	bne.n	8005cca <HAL_SPI_TransmitReceive+0x1b8>
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c9a:	b29b      	uxth	r3, r3
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d014      	beq.n	8005cca <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	68da      	ldr	r2, [r3, #12]
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005caa:	b292      	uxth	r2, r2
 8005cac:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cb2:	1c9a      	adds	r2, r3, #2
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cbc:	b29b      	uxth	r3, r3
 8005cbe:	3b01      	subs	r3, #1
 8005cc0:	b29a      	uxth	r2, r3
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005cca:	f7fc fab9 	bl	8002240 <HAL_GetTick>
 8005cce:	4602      	mov	r2, r0
 8005cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd2:	1ad3      	subs	r3, r2, r3
 8005cd4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005cd6:	429a      	cmp	r2, r3
 8005cd8:	d80b      	bhi.n	8005cf2 <HAL_SPI_TransmitReceive+0x1e0>
 8005cda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cdc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ce0:	d007      	beq.n	8005cf2 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8005ce2:	2303      	movs	r3, #3
 8005ce4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	2201      	movs	r2, #1
 8005cec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8005cf0:	e0b5      	b.n	8005e5e <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005cf6:	b29b      	uxth	r3, r3
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d1a2      	bne.n	8005c42 <HAL_SPI_TransmitReceive+0x130>
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d00:	b29b      	uxth	r3, r3
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d19d      	bne.n	8005c42 <HAL_SPI_TransmitReceive+0x130>
 8005d06:	e080      	b.n	8005e0a <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d002      	beq.n	8005d16 <HAL_SPI_TransmitReceive+0x204>
 8005d10:	8b7b      	ldrh	r3, [r7, #26]
 8005d12:	2b01      	cmp	r3, #1
 8005d14:	d16f      	bne.n	8005df6 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	330c      	adds	r3, #12
 8005d20:	7812      	ldrb	r2, [r2, #0]
 8005d22:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d28:	1c5a      	adds	r2, r3, #1
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d32:	b29b      	uxth	r3, r3
 8005d34:	3b01      	subs	r3, #1
 8005d36:	b29a      	uxth	r2, r3
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005d3c:	e05b      	b.n	8005df6 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	689b      	ldr	r3, [r3, #8]
 8005d44:	f003 0302 	and.w	r3, r3, #2
 8005d48:	2b02      	cmp	r3, #2
 8005d4a:	d11c      	bne.n	8005d86 <HAL_SPI_TransmitReceive+0x274>
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d50:	b29b      	uxth	r3, r3
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d017      	beq.n	8005d86 <HAL_SPI_TransmitReceive+0x274>
 8005d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d58:	2b01      	cmp	r3, #1
 8005d5a:	d114      	bne.n	8005d86 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	330c      	adds	r3, #12
 8005d66:	7812      	ldrb	r2, [r2, #0]
 8005d68:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d6e:	1c5a      	adds	r2, r3, #1
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d78:	b29b      	uxth	r3, r3
 8005d7a:	3b01      	subs	r3, #1
 8005d7c:	b29a      	uxth	r2, r3
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005d82:	2300      	movs	r3, #0
 8005d84:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	689b      	ldr	r3, [r3, #8]
 8005d8c:	f003 0301 	and.w	r3, r3, #1
 8005d90:	2b01      	cmp	r3, #1
 8005d92:	d119      	bne.n	8005dc8 <HAL_SPI_TransmitReceive+0x2b6>
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d98:	b29b      	uxth	r3, r3
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d014      	beq.n	8005dc8 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	68da      	ldr	r2, [r3, #12]
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005da8:	b2d2      	uxtb	r2, r2
 8005daa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005db0:	1c5a      	adds	r2, r3, #1
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005dba:	b29b      	uxth	r3, r3
 8005dbc:	3b01      	subs	r3, #1
 8005dbe:	b29a      	uxth	r2, r3
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005dc8:	f7fc fa3a 	bl	8002240 <HAL_GetTick>
 8005dcc:	4602      	mov	r2, r0
 8005dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd0:	1ad3      	subs	r3, r2, r3
 8005dd2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005dd4:	429a      	cmp	r2, r3
 8005dd6:	d803      	bhi.n	8005de0 <HAL_SPI_TransmitReceive+0x2ce>
 8005dd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dda:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005dde:	d102      	bne.n	8005de6 <HAL_SPI_TransmitReceive+0x2d4>
 8005de0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d107      	bne.n	8005df6 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8005de6:	2303      	movs	r3, #3
 8005de8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	2201      	movs	r2, #1
 8005df0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8005df4:	e033      	b.n	8005e5e <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005dfa:	b29b      	uxth	r3, r3
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d19e      	bne.n	8005d3e <HAL_SPI_TransmitReceive+0x22c>
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e04:	b29b      	uxth	r3, r3
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d199      	bne.n	8005d3e <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005e0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e0c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005e0e:	68f8      	ldr	r0, [r7, #12]
 8005e10:	f000 f8b8 	bl	8005f84 <SPI_EndRxTxTransaction>
 8005e14:	4603      	mov	r3, r0
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d006      	beq.n	8005e28 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	2220      	movs	r2, #32
 8005e24:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005e26:	e01a      	b.n	8005e5e <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	689b      	ldr	r3, [r3, #8]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d10a      	bne.n	8005e46 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005e30:	2300      	movs	r3, #0
 8005e32:	617b      	str	r3, [r7, #20]
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	68db      	ldr	r3, [r3, #12]
 8005e3a:	617b      	str	r3, [r7, #20]
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	689b      	ldr	r3, [r3, #8]
 8005e42:	617b      	str	r3, [r7, #20]
 8005e44:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d003      	beq.n	8005e56 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8005e4e:	2301      	movs	r3, #1
 8005e50:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e54:	e003      	b.n	8005e5e <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	2201      	movs	r2, #1
 8005e5a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	2200      	movs	r2, #0
 8005e62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005e66:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	3730      	adds	r7, #48	; 0x30
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	bd80      	pop	{r7, pc}
	...

08005e74 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b088      	sub	sp, #32
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	60f8      	str	r0, [r7, #12]
 8005e7c:	60b9      	str	r1, [r7, #8]
 8005e7e:	603b      	str	r3, [r7, #0]
 8005e80:	4613      	mov	r3, r2
 8005e82:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005e84:	f7fc f9dc 	bl	8002240 <HAL_GetTick>
 8005e88:	4602      	mov	r2, r0
 8005e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e8c:	1a9b      	subs	r3, r3, r2
 8005e8e:	683a      	ldr	r2, [r7, #0]
 8005e90:	4413      	add	r3, r2
 8005e92:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005e94:	f7fc f9d4 	bl	8002240 <HAL_GetTick>
 8005e98:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005e9a:	4b39      	ldr	r3, [pc, #228]	; (8005f80 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	015b      	lsls	r3, r3, #5
 8005ea0:	0d1b      	lsrs	r3, r3, #20
 8005ea2:	69fa      	ldr	r2, [r7, #28]
 8005ea4:	fb02 f303 	mul.w	r3, r2, r3
 8005ea8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005eaa:	e054      	b.n	8005f56 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005eb2:	d050      	beq.n	8005f56 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005eb4:	f7fc f9c4 	bl	8002240 <HAL_GetTick>
 8005eb8:	4602      	mov	r2, r0
 8005eba:	69bb      	ldr	r3, [r7, #24]
 8005ebc:	1ad3      	subs	r3, r2, r3
 8005ebe:	69fa      	ldr	r2, [r7, #28]
 8005ec0:	429a      	cmp	r2, r3
 8005ec2:	d902      	bls.n	8005eca <SPI_WaitFlagStateUntilTimeout+0x56>
 8005ec4:	69fb      	ldr	r3, [r7, #28]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d13d      	bne.n	8005f46 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	685a      	ldr	r2, [r3, #4]
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005ed8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	685b      	ldr	r3, [r3, #4]
 8005ede:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ee2:	d111      	bne.n	8005f08 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	689b      	ldr	r3, [r3, #8]
 8005ee8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005eec:	d004      	beq.n	8005ef8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	689b      	ldr	r3, [r3, #8]
 8005ef2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ef6:	d107      	bne.n	8005f08 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	681a      	ldr	r2, [r3, #0]
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f06:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f10:	d10f      	bne.n	8005f32 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	681a      	ldr	r2, [r3, #0]
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005f20:	601a      	str	r2, [r3, #0]
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	681a      	ldr	r2, [r3, #0]
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005f30:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	2201      	movs	r2, #1
 8005f36:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005f42:	2303      	movs	r3, #3
 8005f44:	e017      	b.n	8005f76 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005f46:	697b      	ldr	r3, [r7, #20]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d101      	bne.n	8005f50 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005f50:	697b      	ldr	r3, [r7, #20]
 8005f52:	3b01      	subs	r3, #1
 8005f54:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	689a      	ldr	r2, [r3, #8]
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	4013      	ands	r3, r2
 8005f60:	68ba      	ldr	r2, [r7, #8]
 8005f62:	429a      	cmp	r2, r3
 8005f64:	bf0c      	ite	eq
 8005f66:	2301      	moveq	r3, #1
 8005f68:	2300      	movne	r3, #0
 8005f6a:	b2db      	uxtb	r3, r3
 8005f6c:	461a      	mov	r2, r3
 8005f6e:	79fb      	ldrb	r3, [r7, #7]
 8005f70:	429a      	cmp	r2, r3
 8005f72:	d19b      	bne.n	8005eac <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005f74:	2300      	movs	r3, #0
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	3720      	adds	r7, #32
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}
 8005f7e:	bf00      	nop
 8005f80:	20000000 	.word	0x20000000

08005f84 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b088      	sub	sp, #32
 8005f88:	af02      	add	r7, sp, #8
 8005f8a:	60f8      	str	r0, [r7, #12]
 8005f8c:	60b9      	str	r1, [r7, #8]
 8005f8e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	9300      	str	r3, [sp, #0]
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	2201      	movs	r2, #1
 8005f98:	2102      	movs	r1, #2
 8005f9a:	68f8      	ldr	r0, [r7, #12]
 8005f9c:	f7ff ff6a 	bl	8005e74 <SPI_WaitFlagStateUntilTimeout>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d007      	beq.n	8005fb6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005faa:	f043 0220 	orr.w	r2, r3, #32
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8005fb2:	2303      	movs	r3, #3
 8005fb4:	e032      	b.n	800601c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005fb6:	4b1b      	ldr	r3, [pc, #108]	; (8006024 <SPI_EndRxTxTransaction+0xa0>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4a1b      	ldr	r2, [pc, #108]	; (8006028 <SPI_EndRxTxTransaction+0xa4>)
 8005fbc:	fba2 2303 	umull	r2, r3, r2, r3
 8005fc0:	0d5b      	lsrs	r3, r3, #21
 8005fc2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005fc6:	fb02 f303 	mul.w	r3, r2, r3
 8005fca:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	685b      	ldr	r3, [r3, #4]
 8005fd0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005fd4:	d112      	bne.n	8005ffc <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	9300      	str	r3, [sp, #0]
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	2200      	movs	r2, #0
 8005fde:	2180      	movs	r1, #128	; 0x80
 8005fe0:	68f8      	ldr	r0, [r7, #12]
 8005fe2:	f7ff ff47 	bl	8005e74 <SPI_WaitFlagStateUntilTimeout>
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d016      	beq.n	800601a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ff0:	f043 0220 	orr.w	r2, r3, #32
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005ff8:	2303      	movs	r3, #3
 8005ffa:	e00f      	b.n	800601c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005ffc:	697b      	ldr	r3, [r7, #20]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d00a      	beq.n	8006018 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	3b01      	subs	r3, #1
 8006006:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	689b      	ldr	r3, [r3, #8]
 800600e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006012:	2b80      	cmp	r3, #128	; 0x80
 8006014:	d0f2      	beq.n	8005ffc <SPI_EndRxTxTransaction+0x78>
 8006016:	e000      	b.n	800601a <SPI_EndRxTxTransaction+0x96>
        break;
 8006018:	bf00      	nop
  }

  return HAL_OK;
 800601a:	2300      	movs	r3, #0
}
 800601c:	4618      	mov	r0, r3
 800601e:	3718      	adds	r7, #24
 8006020:	46bd      	mov	sp, r7
 8006022:	bd80      	pop	{r7, pc}
 8006024:	20000000 	.word	0x20000000
 8006028:	165e9f81 	.word	0x165e9f81

0800602c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b082      	sub	sp, #8
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d101      	bne.n	800603e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800603a:	2301      	movs	r3, #1
 800603c:	e041      	b.n	80060c2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006044:	b2db      	uxtb	r3, r3
 8006046:	2b00      	cmp	r3, #0
 8006048:	d106      	bne.n	8006058 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2200      	movs	r2, #0
 800604e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	f7fb fe80 	bl	8001d58 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2202      	movs	r2, #2
 800605c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681a      	ldr	r2, [r3, #0]
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	3304      	adds	r3, #4
 8006068:	4619      	mov	r1, r3
 800606a:	4610      	mov	r0, r2
 800606c:	f000 fb90 	bl	8006790 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2201      	movs	r2, #1
 8006074:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2201      	movs	r2, #1
 800607c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2201      	movs	r2, #1
 8006084:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2201      	movs	r2, #1
 800608c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2201      	movs	r2, #1
 8006094:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2201      	movs	r2, #1
 800609c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2201      	movs	r2, #1
 80060a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2201      	movs	r2, #1
 80060ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2201      	movs	r2, #1
 80060b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2201      	movs	r2, #1
 80060bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80060c0:	2300      	movs	r3, #0
}
 80060c2:	4618      	mov	r0, r3
 80060c4:	3708      	adds	r7, #8
 80060c6:	46bd      	mov	sp, r7
 80060c8:	bd80      	pop	{r7, pc}
	...

080060cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80060cc:	b480      	push	{r7}
 80060ce:	b085      	sub	sp, #20
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060da:	b2db      	uxtb	r3, r3
 80060dc:	2b01      	cmp	r3, #1
 80060de:	d001      	beq.n	80060e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80060e0:	2301      	movs	r3, #1
 80060e2:	e04e      	b.n	8006182 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2202      	movs	r2, #2
 80060e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	68da      	ldr	r2, [r3, #12]
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f042 0201 	orr.w	r2, r2, #1
 80060fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4a23      	ldr	r2, [pc, #140]	; (8006190 <HAL_TIM_Base_Start_IT+0xc4>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d022      	beq.n	800614c <HAL_TIM_Base_Start_IT+0x80>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800610e:	d01d      	beq.n	800614c <HAL_TIM_Base_Start_IT+0x80>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4a1f      	ldr	r2, [pc, #124]	; (8006194 <HAL_TIM_Base_Start_IT+0xc8>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d018      	beq.n	800614c <HAL_TIM_Base_Start_IT+0x80>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4a1e      	ldr	r2, [pc, #120]	; (8006198 <HAL_TIM_Base_Start_IT+0xcc>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d013      	beq.n	800614c <HAL_TIM_Base_Start_IT+0x80>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4a1c      	ldr	r2, [pc, #112]	; (800619c <HAL_TIM_Base_Start_IT+0xd0>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d00e      	beq.n	800614c <HAL_TIM_Base_Start_IT+0x80>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	4a1b      	ldr	r2, [pc, #108]	; (80061a0 <HAL_TIM_Base_Start_IT+0xd4>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d009      	beq.n	800614c <HAL_TIM_Base_Start_IT+0x80>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	4a19      	ldr	r2, [pc, #100]	; (80061a4 <HAL_TIM_Base_Start_IT+0xd8>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d004      	beq.n	800614c <HAL_TIM_Base_Start_IT+0x80>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4a18      	ldr	r2, [pc, #96]	; (80061a8 <HAL_TIM_Base_Start_IT+0xdc>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d111      	bne.n	8006170 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	689b      	ldr	r3, [r3, #8]
 8006152:	f003 0307 	and.w	r3, r3, #7
 8006156:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	2b06      	cmp	r3, #6
 800615c:	d010      	beq.n	8006180 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	681a      	ldr	r2, [r3, #0]
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f042 0201 	orr.w	r2, r2, #1
 800616c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800616e:	e007      	b.n	8006180 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	681a      	ldr	r2, [r3, #0]
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f042 0201 	orr.w	r2, r2, #1
 800617e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006180:	2300      	movs	r3, #0
}
 8006182:	4618      	mov	r0, r3
 8006184:	3714      	adds	r7, #20
 8006186:	46bd      	mov	sp, r7
 8006188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618c:	4770      	bx	lr
 800618e:	bf00      	nop
 8006190:	40010000 	.word	0x40010000
 8006194:	40000400 	.word	0x40000400
 8006198:	40000800 	.word	0x40000800
 800619c:	40000c00 	.word	0x40000c00
 80061a0:	40010400 	.word	0x40010400
 80061a4:	40014000 	.word	0x40014000
 80061a8:	40001800 	.word	0x40001800

080061ac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b082      	sub	sp, #8
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d101      	bne.n	80061be <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80061ba:	2301      	movs	r3, #1
 80061bc:	e041      	b.n	8006242 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061c4:	b2db      	uxtb	r3, r3
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d106      	bne.n	80061d8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2200      	movs	r2, #0
 80061ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80061d2:	6878      	ldr	r0, [r7, #4]
 80061d4:	f7fb fd72 	bl	8001cbc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2202      	movs	r2, #2
 80061dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681a      	ldr	r2, [r3, #0]
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	3304      	adds	r3, #4
 80061e8:	4619      	mov	r1, r3
 80061ea:	4610      	mov	r0, r2
 80061ec:	f000 fad0 	bl	8006790 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2201      	movs	r2, #1
 80061f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2201      	movs	r2, #1
 80061fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2201      	movs	r2, #1
 8006204:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2201      	movs	r2, #1
 800620c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2201      	movs	r2, #1
 8006214:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2201      	movs	r2, #1
 800621c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2201      	movs	r2, #1
 8006224:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2201      	movs	r2, #1
 800622c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2201      	movs	r2, #1
 8006234:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2201      	movs	r2, #1
 800623c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006240:	2300      	movs	r3, #0
}
 8006242:	4618      	mov	r0, r3
 8006244:	3708      	adds	r7, #8
 8006246:	46bd      	mov	sp, r7
 8006248:	bd80      	pop	{r7, pc}

0800624a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800624a:	b580      	push	{r7, lr}
 800624c:	b084      	sub	sp, #16
 800624e:	af00      	add	r7, sp, #0
 8006250:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	68db      	ldr	r3, [r3, #12]
 8006258:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	691b      	ldr	r3, [r3, #16]
 8006260:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	f003 0302 	and.w	r3, r3, #2
 8006268:	2b00      	cmp	r3, #0
 800626a:	d020      	beq.n	80062ae <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	f003 0302 	and.w	r3, r3, #2
 8006272:	2b00      	cmp	r3, #0
 8006274:	d01b      	beq.n	80062ae <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f06f 0202 	mvn.w	r2, #2
 800627e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2201      	movs	r2, #1
 8006284:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	699b      	ldr	r3, [r3, #24]
 800628c:	f003 0303 	and.w	r3, r3, #3
 8006290:	2b00      	cmp	r3, #0
 8006292:	d003      	beq.n	800629c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006294:	6878      	ldr	r0, [r7, #4]
 8006296:	f000 fa5c 	bl	8006752 <HAL_TIM_IC_CaptureCallback>
 800629a:	e005      	b.n	80062a8 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800629c:	6878      	ldr	r0, [r7, #4]
 800629e:	f000 fa4e 	bl	800673e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062a2:	6878      	ldr	r0, [r7, #4]
 80062a4:	f000 fa5f 	bl	8006766 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2200      	movs	r2, #0
 80062ac:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	f003 0304 	and.w	r3, r3, #4
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d020      	beq.n	80062fa <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	f003 0304 	and.w	r3, r3, #4
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d01b      	beq.n	80062fa <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f06f 0204 	mvn.w	r2, #4
 80062ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2202      	movs	r2, #2
 80062d0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	699b      	ldr	r3, [r3, #24]
 80062d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d003      	beq.n	80062e8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062e0:	6878      	ldr	r0, [r7, #4]
 80062e2:	f000 fa36 	bl	8006752 <HAL_TIM_IC_CaptureCallback>
 80062e6:	e005      	b.n	80062f4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062e8:	6878      	ldr	r0, [r7, #4]
 80062ea:	f000 fa28 	bl	800673e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	f000 fa39 	bl	8006766 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2200      	movs	r2, #0
 80062f8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	f003 0308 	and.w	r3, r3, #8
 8006300:	2b00      	cmp	r3, #0
 8006302:	d020      	beq.n	8006346 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	f003 0308 	and.w	r3, r3, #8
 800630a:	2b00      	cmp	r3, #0
 800630c:	d01b      	beq.n	8006346 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f06f 0208 	mvn.w	r2, #8
 8006316:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2204      	movs	r2, #4
 800631c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	69db      	ldr	r3, [r3, #28]
 8006324:	f003 0303 	and.w	r3, r3, #3
 8006328:	2b00      	cmp	r3, #0
 800632a:	d003      	beq.n	8006334 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800632c:	6878      	ldr	r0, [r7, #4]
 800632e:	f000 fa10 	bl	8006752 <HAL_TIM_IC_CaptureCallback>
 8006332:	e005      	b.n	8006340 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006334:	6878      	ldr	r0, [r7, #4]
 8006336:	f000 fa02 	bl	800673e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	f000 fa13 	bl	8006766 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2200      	movs	r2, #0
 8006344:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006346:	68bb      	ldr	r3, [r7, #8]
 8006348:	f003 0310 	and.w	r3, r3, #16
 800634c:	2b00      	cmp	r3, #0
 800634e:	d020      	beq.n	8006392 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	f003 0310 	and.w	r3, r3, #16
 8006356:	2b00      	cmp	r3, #0
 8006358:	d01b      	beq.n	8006392 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f06f 0210 	mvn.w	r2, #16
 8006362:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2208      	movs	r2, #8
 8006368:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	69db      	ldr	r3, [r3, #28]
 8006370:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006374:	2b00      	cmp	r3, #0
 8006376:	d003      	beq.n	8006380 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006378:	6878      	ldr	r0, [r7, #4]
 800637a:	f000 f9ea 	bl	8006752 <HAL_TIM_IC_CaptureCallback>
 800637e:	e005      	b.n	800638c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006380:	6878      	ldr	r0, [r7, #4]
 8006382:	f000 f9dc 	bl	800673e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	f000 f9ed 	bl	8006766 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2200      	movs	r2, #0
 8006390:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006392:	68bb      	ldr	r3, [r7, #8]
 8006394:	f003 0301 	and.w	r3, r3, #1
 8006398:	2b00      	cmp	r3, #0
 800639a:	d00c      	beq.n	80063b6 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	f003 0301 	and.w	r3, r3, #1
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d007      	beq.n	80063b6 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f06f 0201 	mvn.w	r2, #1
 80063ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80063b0:	6878      	ldr	r0, [r7, #4]
 80063b2:	f7fb f951 	bl	8001658 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d00c      	beq.n	80063da <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d007      	beq.n	80063da <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80063d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80063d4:	6878      	ldr	r0, [r7, #4]
 80063d6:	f000 fda9 	bl	8006f2c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80063da:	68bb      	ldr	r3, [r7, #8]
 80063dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d00c      	beq.n	80063fe <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d007      	beq.n	80063fe <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80063f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80063f8:	6878      	ldr	r0, [r7, #4]
 80063fa:	f000 f9be 	bl	800677a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	f003 0320 	and.w	r3, r3, #32
 8006404:	2b00      	cmp	r3, #0
 8006406:	d00c      	beq.n	8006422 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	f003 0320 	and.w	r3, r3, #32
 800640e:	2b00      	cmp	r3, #0
 8006410:	d007      	beq.n	8006422 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f06f 0220 	mvn.w	r2, #32
 800641a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800641c:	6878      	ldr	r0, [r7, #4]
 800641e:	f000 fd7b 	bl	8006f18 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006422:	bf00      	nop
 8006424:	3710      	adds	r7, #16
 8006426:	46bd      	mov	sp, r7
 8006428:	bd80      	pop	{r7, pc}
	...

0800642c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b086      	sub	sp, #24
 8006430:	af00      	add	r7, sp, #0
 8006432:	60f8      	str	r0, [r7, #12]
 8006434:	60b9      	str	r1, [r7, #8]
 8006436:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006438:	2300      	movs	r3, #0
 800643a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006442:	2b01      	cmp	r3, #1
 8006444:	d101      	bne.n	800644a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006446:	2302      	movs	r3, #2
 8006448:	e0ae      	b.n	80065a8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	2201      	movs	r2, #1
 800644e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2b0c      	cmp	r3, #12
 8006456:	f200 809f 	bhi.w	8006598 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800645a:	a201      	add	r2, pc, #4	; (adr r2, 8006460 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800645c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006460:	08006495 	.word	0x08006495
 8006464:	08006599 	.word	0x08006599
 8006468:	08006599 	.word	0x08006599
 800646c:	08006599 	.word	0x08006599
 8006470:	080064d5 	.word	0x080064d5
 8006474:	08006599 	.word	0x08006599
 8006478:	08006599 	.word	0x08006599
 800647c:	08006599 	.word	0x08006599
 8006480:	08006517 	.word	0x08006517
 8006484:	08006599 	.word	0x08006599
 8006488:	08006599 	.word	0x08006599
 800648c:	08006599 	.word	0x08006599
 8006490:	08006557 	.word	0x08006557
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	68b9      	ldr	r1, [r7, #8]
 800649a:	4618      	mov	r0, r3
 800649c:	f000 fa24 	bl	80068e8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	699a      	ldr	r2, [r3, #24]
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f042 0208 	orr.w	r2, r2, #8
 80064ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	699a      	ldr	r2, [r3, #24]
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f022 0204 	bic.w	r2, r2, #4
 80064be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	6999      	ldr	r1, [r3, #24]
 80064c6:	68bb      	ldr	r3, [r7, #8]
 80064c8:	691a      	ldr	r2, [r3, #16]
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	430a      	orrs	r2, r1
 80064d0:	619a      	str	r2, [r3, #24]
      break;
 80064d2:	e064      	b.n	800659e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	68b9      	ldr	r1, [r7, #8]
 80064da:	4618      	mov	r0, r3
 80064dc:	f000 fa74 	bl	80069c8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	699a      	ldr	r2, [r3, #24]
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80064ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	699a      	ldr	r2, [r3, #24]
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	6999      	ldr	r1, [r3, #24]
 8006506:	68bb      	ldr	r3, [r7, #8]
 8006508:	691b      	ldr	r3, [r3, #16]
 800650a:	021a      	lsls	r2, r3, #8
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	430a      	orrs	r2, r1
 8006512:	619a      	str	r2, [r3, #24]
      break;
 8006514:	e043      	b.n	800659e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	68b9      	ldr	r1, [r7, #8]
 800651c:	4618      	mov	r0, r3
 800651e:	f000 fac9 	bl	8006ab4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	69da      	ldr	r2, [r3, #28]
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f042 0208 	orr.w	r2, r2, #8
 8006530:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	69da      	ldr	r2, [r3, #28]
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f022 0204 	bic.w	r2, r2, #4
 8006540:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	69d9      	ldr	r1, [r3, #28]
 8006548:	68bb      	ldr	r3, [r7, #8]
 800654a:	691a      	ldr	r2, [r3, #16]
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	430a      	orrs	r2, r1
 8006552:	61da      	str	r2, [r3, #28]
      break;
 8006554:	e023      	b.n	800659e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	68b9      	ldr	r1, [r7, #8]
 800655c:	4618      	mov	r0, r3
 800655e:	f000 fb1d 	bl	8006b9c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	69da      	ldr	r2, [r3, #28]
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006570:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	69da      	ldr	r2, [r3, #28]
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006580:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	69d9      	ldr	r1, [r3, #28]
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	691b      	ldr	r3, [r3, #16]
 800658c:	021a      	lsls	r2, r3, #8
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	430a      	orrs	r2, r1
 8006594:	61da      	str	r2, [r3, #28]
      break;
 8006596:	e002      	b.n	800659e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006598:	2301      	movs	r3, #1
 800659a:	75fb      	strb	r3, [r7, #23]
      break;
 800659c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	2200      	movs	r2, #0
 80065a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80065a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80065a8:	4618      	mov	r0, r3
 80065aa:	3718      	adds	r7, #24
 80065ac:	46bd      	mov	sp, r7
 80065ae:	bd80      	pop	{r7, pc}

080065b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b084      	sub	sp, #16
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
 80065b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80065ba:	2300      	movs	r3, #0
 80065bc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065c4:	2b01      	cmp	r3, #1
 80065c6:	d101      	bne.n	80065cc <HAL_TIM_ConfigClockSource+0x1c>
 80065c8:	2302      	movs	r3, #2
 80065ca:	e0b4      	b.n	8006736 <HAL_TIM_ConfigClockSource+0x186>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2201      	movs	r2, #1
 80065d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2202      	movs	r2, #2
 80065d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	689b      	ldr	r3, [r3, #8]
 80065e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80065ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80065ec:	68bb      	ldr	r3, [r7, #8]
 80065ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80065f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	68ba      	ldr	r2, [r7, #8]
 80065fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006604:	d03e      	beq.n	8006684 <HAL_TIM_ConfigClockSource+0xd4>
 8006606:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800660a:	f200 8087 	bhi.w	800671c <HAL_TIM_ConfigClockSource+0x16c>
 800660e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006612:	f000 8086 	beq.w	8006722 <HAL_TIM_ConfigClockSource+0x172>
 8006616:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800661a:	d87f      	bhi.n	800671c <HAL_TIM_ConfigClockSource+0x16c>
 800661c:	2b70      	cmp	r3, #112	; 0x70
 800661e:	d01a      	beq.n	8006656 <HAL_TIM_ConfigClockSource+0xa6>
 8006620:	2b70      	cmp	r3, #112	; 0x70
 8006622:	d87b      	bhi.n	800671c <HAL_TIM_ConfigClockSource+0x16c>
 8006624:	2b60      	cmp	r3, #96	; 0x60
 8006626:	d050      	beq.n	80066ca <HAL_TIM_ConfigClockSource+0x11a>
 8006628:	2b60      	cmp	r3, #96	; 0x60
 800662a:	d877      	bhi.n	800671c <HAL_TIM_ConfigClockSource+0x16c>
 800662c:	2b50      	cmp	r3, #80	; 0x50
 800662e:	d03c      	beq.n	80066aa <HAL_TIM_ConfigClockSource+0xfa>
 8006630:	2b50      	cmp	r3, #80	; 0x50
 8006632:	d873      	bhi.n	800671c <HAL_TIM_ConfigClockSource+0x16c>
 8006634:	2b40      	cmp	r3, #64	; 0x40
 8006636:	d058      	beq.n	80066ea <HAL_TIM_ConfigClockSource+0x13a>
 8006638:	2b40      	cmp	r3, #64	; 0x40
 800663a:	d86f      	bhi.n	800671c <HAL_TIM_ConfigClockSource+0x16c>
 800663c:	2b30      	cmp	r3, #48	; 0x30
 800663e:	d064      	beq.n	800670a <HAL_TIM_ConfigClockSource+0x15a>
 8006640:	2b30      	cmp	r3, #48	; 0x30
 8006642:	d86b      	bhi.n	800671c <HAL_TIM_ConfigClockSource+0x16c>
 8006644:	2b20      	cmp	r3, #32
 8006646:	d060      	beq.n	800670a <HAL_TIM_ConfigClockSource+0x15a>
 8006648:	2b20      	cmp	r3, #32
 800664a:	d867      	bhi.n	800671c <HAL_TIM_ConfigClockSource+0x16c>
 800664c:	2b00      	cmp	r3, #0
 800664e:	d05c      	beq.n	800670a <HAL_TIM_ConfigClockSource+0x15a>
 8006650:	2b10      	cmp	r3, #16
 8006652:	d05a      	beq.n	800670a <HAL_TIM_ConfigClockSource+0x15a>
 8006654:	e062      	b.n	800671c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006666:	f000 fb69 	bl	8006d3c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	689b      	ldr	r3, [r3, #8]
 8006670:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006672:	68bb      	ldr	r3, [r7, #8]
 8006674:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006678:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	68ba      	ldr	r2, [r7, #8]
 8006680:	609a      	str	r2, [r3, #8]
      break;
 8006682:	e04f      	b.n	8006724 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006694:	f000 fb52 	bl	8006d3c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	689a      	ldr	r2, [r3, #8]
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80066a6:	609a      	str	r2, [r3, #8]
      break;
 80066a8:	e03c      	b.n	8006724 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80066b6:	461a      	mov	r2, r3
 80066b8:	f000 fac6 	bl	8006c48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	2150      	movs	r1, #80	; 0x50
 80066c2:	4618      	mov	r0, r3
 80066c4:	f000 fb1f 	bl	8006d06 <TIM_ITRx_SetConfig>
      break;
 80066c8:	e02c      	b.n	8006724 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80066d6:	461a      	mov	r2, r3
 80066d8:	f000 fae5 	bl	8006ca6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	2160      	movs	r1, #96	; 0x60
 80066e2:	4618      	mov	r0, r3
 80066e4:	f000 fb0f 	bl	8006d06 <TIM_ITRx_SetConfig>
      break;
 80066e8:	e01c      	b.n	8006724 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80066f6:	461a      	mov	r2, r3
 80066f8:	f000 faa6 	bl	8006c48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	2140      	movs	r1, #64	; 0x40
 8006702:	4618      	mov	r0, r3
 8006704:	f000 faff 	bl	8006d06 <TIM_ITRx_SetConfig>
      break;
 8006708:	e00c      	b.n	8006724 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681a      	ldr	r2, [r3, #0]
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	4619      	mov	r1, r3
 8006714:	4610      	mov	r0, r2
 8006716:	f000 faf6 	bl	8006d06 <TIM_ITRx_SetConfig>
      break;
 800671a:	e003      	b.n	8006724 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800671c:	2301      	movs	r3, #1
 800671e:	73fb      	strb	r3, [r7, #15]
      break;
 8006720:	e000      	b.n	8006724 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006722:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2201      	movs	r2, #1
 8006728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2200      	movs	r2, #0
 8006730:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006734:	7bfb      	ldrb	r3, [r7, #15]
}
 8006736:	4618      	mov	r0, r3
 8006738:	3710      	adds	r7, #16
 800673a:	46bd      	mov	sp, r7
 800673c:	bd80      	pop	{r7, pc}

0800673e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800673e:	b480      	push	{r7}
 8006740:	b083      	sub	sp, #12
 8006742:	af00      	add	r7, sp, #0
 8006744:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006746:	bf00      	nop
 8006748:	370c      	adds	r7, #12
 800674a:	46bd      	mov	sp, r7
 800674c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006750:	4770      	bx	lr

08006752 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006752:	b480      	push	{r7}
 8006754:	b083      	sub	sp, #12
 8006756:	af00      	add	r7, sp, #0
 8006758:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800675a:	bf00      	nop
 800675c:	370c      	adds	r7, #12
 800675e:	46bd      	mov	sp, r7
 8006760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006764:	4770      	bx	lr

08006766 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006766:	b480      	push	{r7}
 8006768:	b083      	sub	sp, #12
 800676a:	af00      	add	r7, sp, #0
 800676c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800676e:	bf00      	nop
 8006770:	370c      	adds	r7, #12
 8006772:	46bd      	mov	sp, r7
 8006774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006778:	4770      	bx	lr

0800677a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800677a:	b480      	push	{r7}
 800677c:	b083      	sub	sp, #12
 800677e:	af00      	add	r7, sp, #0
 8006780:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006782:	bf00      	nop
 8006784:	370c      	adds	r7, #12
 8006786:	46bd      	mov	sp, r7
 8006788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678c:	4770      	bx	lr
	...

08006790 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006790:	b480      	push	{r7}
 8006792:	b085      	sub	sp, #20
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
 8006798:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	4a46      	ldr	r2, [pc, #280]	; (80068bc <TIM_Base_SetConfig+0x12c>)
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d013      	beq.n	80067d0 <TIM_Base_SetConfig+0x40>
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067ae:	d00f      	beq.n	80067d0 <TIM_Base_SetConfig+0x40>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	4a43      	ldr	r2, [pc, #268]	; (80068c0 <TIM_Base_SetConfig+0x130>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d00b      	beq.n	80067d0 <TIM_Base_SetConfig+0x40>
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	4a42      	ldr	r2, [pc, #264]	; (80068c4 <TIM_Base_SetConfig+0x134>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d007      	beq.n	80067d0 <TIM_Base_SetConfig+0x40>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	4a41      	ldr	r2, [pc, #260]	; (80068c8 <TIM_Base_SetConfig+0x138>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d003      	beq.n	80067d0 <TIM_Base_SetConfig+0x40>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	4a40      	ldr	r2, [pc, #256]	; (80068cc <TIM_Base_SetConfig+0x13c>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d108      	bne.n	80067e2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	685b      	ldr	r3, [r3, #4]
 80067dc:	68fa      	ldr	r2, [r7, #12]
 80067de:	4313      	orrs	r3, r2
 80067e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	4a35      	ldr	r2, [pc, #212]	; (80068bc <TIM_Base_SetConfig+0x12c>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d02b      	beq.n	8006842 <TIM_Base_SetConfig+0xb2>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067f0:	d027      	beq.n	8006842 <TIM_Base_SetConfig+0xb2>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	4a32      	ldr	r2, [pc, #200]	; (80068c0 <TIM_Base_SetConfig+0x130>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d023      	beq.n	8006842 <TIM_Base_SetConfig+0xb2>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	4a31      	ldr	r2, [pc, #196]	; (80068c4 <TIM_Base_SetConfig+0x134>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d01f      	beq.n	8006842 <TIM_Base_SetConfig+0xb2>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	4a30      	ldr	r2, [pc, #192]	; (80068c8 <TIM_Base_SetConfig+0x138>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d01b      	beq.n	8006842 <TIM_Base_SetConfig+0xb2>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	4a2f      	ldr	r2, [pc, #188]	; (80068cc <TIM_Base_SetConfig+0x13c>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d017      	beq.n	8006842 <TIM_Base_SetConfig+0xb2>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	4a2e      	ldr	r2, [pc, #184]	; (80068d0 <TIM_Base_SetConfig+0x140>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d013      	beq.n	8006842 <TIM_Base_SetConfig+0xb2>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	4a2d      	ldr	r2, [pc, #180]	; (80068d4 <TIM_Base_SetConfig+0x144>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d00f      	beq.n	8006842 <TIM_Base_SetConfig+0xb2>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	4a2c      	ldr	r2, [pc, #176]	; (80068d8 <TIM_Base_SetConfig+0x148>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d00b      	beq.n	8006842 <TIM_Base_SetConfig+0xb2>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	4a2b      	ldr	r2, [pc, #172]	; (80068dc <TIM_Base_SetConfig+0x14c>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d007      	beq.n	8006842 <TIM_Base_SetConfig+0xb2>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	4a2a      	ldr	r2, [pc, #168]	; (80068e0 <TIM_Base_SetConfig+0x150>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d003      	beq.n	8006842 <TIM_Base_SetConfig+0xb2>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	4a29      	ldr	r2, [pc, #164]	; (80068e4 <TIM_Base_SetConfig+0x154>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d108      	bne.n	8006854 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006848:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	68db      	ldr	r3, [r3, #12]
 800684e:	68fa      	ldr	r2, [r7, #12]
 8006850:	4313      	orrs	r3, r2
 8006852:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	695b      	ldr	r3, [r3, #20]
 800685e:	4313      	orrs	r3, r2
 8006860:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	68fa      	ldr	r2, [r7, #12]
 8006866:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	689a      	ldr	r2, [r3, #8]
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	681a      	ldr	r2, [r3, #0]
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	4a10      	ldr	r2, [pc, #64]	; (80068bc <TIM_Base_SetConfig+0x12c>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d003      	beq.n	8006888 <TIM_Base_SetConfig+0xf8>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	4a12      	ldr	r2, [pc, #72]	; (80068cc <TIM_Base_SetConfig+0x13c>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d103      	bne.n	8006890 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	691a      	ldr	r2, [r3, #16]
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2201      	movs	r2, #1
 8006894:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	691b      	ldr	r3, [r3, #16]
 800689a:	f003 0301 	and.w	r3, r3, #1
 800689e:	2b01      	cmp	r3, #1
 80068a0:	d105      	bne.n	80068ae <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	691b      	ldr	r3, [r3, #16]
 80068a6:	f023 0201 	bic.w	r2, r3, #1
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	611a      	str	r2, [r3, #16]
  }
}
 80068ae:	bf00      	nop
 80068b0:	3714      	adds	r7, #20
 80068b2:	46bd      	mov	sp, r7
 80068b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b8:	4770      	bx	lr
 80068ba:	bf00      	nop
 80068bc:	40010000 	.word	0x40010000
 80068c0:	40000400 	.word	0x40000400
 80068c4:	40000800 	.word	0x40000800
 80068c8:	40000c00 	.word	0x40000c00
 80068cc:	40010400 	.word	0x40010400
 80068d0:	40014000 	.word	0x40014000
 80068d4:	40014400 	.word	0x40014400
 80068d8:	40014800 	.word	0x40014800
 80068dc:	40001800 	.word	0x40001800
 80068e0:	40001c00 	.word	0x40001c00
 80068e4:	40002000 	.word	0x40002000

080068e8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80068e8:	b480      	push	{r7}
 80068ea:	b087      	sub	sp, #28
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
 80068f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6a1b      	ldr	r3, [r3, #32]
 80068f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6a1b      	ldr	r3, [r3, #32]
 80068fc:	f023 0201 	bic.w	r2, r3, #1
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	685b      	ldr	r3, [r3, #4]
 8006908:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	699b      	ldr	r3, [r3, #24]
 800690e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006916:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	f023 0303 	bic.w	r3, r3, #3
 800691e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	68fa      	ldr	r2, [r7, #12]
 8006926:	4313      	orrs	r3, r2
 8006928:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800692a:	697b      	ldr	r3, [r7, #20]
 800692c:	f023 0302 	bic.w	r3, r3, #2
 8006930:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	689b      	ldr	r3, [r3, #8]
 8006936:	697a      	ldr	r2, [r7, #20]
 8006938:	4313      	orrs	r3, r2
 800693a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	4a20      	ldr	r2, [pc, #128]	; (80069c0 <TIM_OC1_SetConfig+0xd8>)
 8006940:	4293      	cmp	r3, r2
 8006942:	d003      	beq.n	800694c <TIM_OC1_SetConfig+0x64>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	4a1f      	ldr	r2, [pc, #124]	; (80069c4 <TIM_OC1_SetConfig+0xdc>)
 8006948:	4293      	cmp	r3, r2
 800694a:	d10c      	bne.n	8006966 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800694c:	697b      	ldr	r3, [r7, #20]
 800694e:	f023 0308 	bic.w	r3, r3, #8
 8006952:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	68db      	ldr	r3, [r3, #12]
 8006958:	697a      	ldr	r2, [r7, #20]
 800695a:	4313      	orrs	r3, r2
 800695c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800695e:	697b      	ldr	r3, [r7, #20]
 8006960:	f023 0304 	bic.w	r3, r3, #4
 8006964:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	4a15      	ldr	r2, [pc, #84]	; (80069c0 <TIM_OC1_SetConfig+0xd8>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d003      	beq.n	8006976 <TIM_OC1_SetConfig+0x8e>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	4a14      	ldr	r2, [pc, #80]	; (80069c4 <TIM_OC1_SetConfig+0xdc>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d111      	bne.n	800699a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006976:	693b      	ldr	r3, [r7, #16]
 8006978:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800697c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800697e:	693b      	ldr	r3, [r7, #16]
 8006980:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006984:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	695b      	ldr	r3, [r3, #20]
 800698a:	693a      	ldr	r2, [r7, #16]
 800698c:	4313      	orrs	r3, r2
 800698e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	699b      	ldr	r3, [r3, #24]
 8006994:	693a      	ldr	r2, [r7, #16]
 8006996:	4313      	orrs	r3, r2
 8006998:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	693a      	ldr	r2, [r7, #16]
 800699e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	68fa      	ldr	r2, [r7, #12]
 80069a4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	685a      	ldr	r2, [r3, #4]
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	697a      	ldr	r2, [r7, #20]
 80069b2:	621a      	str	r2, [r3, #32]
}
 80069b4:	bf00      	nop
 80069b6:	371c      	adds	r7, #28
 80069b8:	46bd      	mov	sp, r7
 80069ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069be:	4770      	bx	lr
 80069c0:	40010000 	.word	0x40010000
 80069c4:	40010400 	.word	0x40010400

080069c8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80069c8:	b480      	push	{r7}
 80069ca:	b087      	sub	sp, #28
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
 80069d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6a1b      	ldr	r3, [r3, #32]
 80069d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6a1b      	ldr	r3, [r3, #32]
 80069dc:	f023 0210 	bic.w	r2, r3, #16
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	685b      	ldr	r3, [r3, #4]
 80069e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	699b      	ldr	r3, [r3, #24]
 80069ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80069fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	021b      	lsls	r3, r3, #8
 8006a06:	68fa      	ldr	r2, [r7, #12]
 8006a08:	4313      	orrs	r3, r2
 8006a0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006a0c:	697b      	ldr	r3, [r7, #20]
 8006a0e:	f023 0320 	bic.w	r3, r3, #32
 8006a12:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	689b      	ldr	r3, [r3, #8]
 8006a18:	011b      	lsls	r3, r3, #4
 8006a1a:	697a      	ldr	r2, [r7, #20]
 8006a1c:	4313      	orrs	r3, r2
 8006a1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	4a22      	ldr	r2, [pc, #136]	; (8006aac <TIM_OC2_SetConfig+0xe4>)
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d003      	beq.n	8006a30 <TIM_OC2_SetConfig+0x68>
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	4a21      	ldr	r2, [pc, #132]	; (8006ab0 <TIM_OC2_SetConfig+0xe8>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d10d      	bne.n	8006a4c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006a30:	697b      	ldr	r3, [r7, #20]
 8006a32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	68db      	ldr	r3, [r3, #12]
 8006a3c:	011b      	lsls	r3, r3, #4
 8006a3e:	697a      	ldr	r2, [r7, #20]
 8006a40:	4313      	orrs	r3, r2
 8006a42:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006a44:	697b      	ldr	r3, [r7, #20]
 8006a46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a4a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	4a17      	ldr	r2, [pc, #92]	; (8006aac <TIM_OC2_SetConfig+0xe4>)
 8006a50:	4293      	cmp	r3, r2
 8006a52:	d003      	beq.n	8006a5c <TIM_OC2_SetConfig+0x94>
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	4a16      	ldr	r2, [pc, #88]	; (8006ab0 <TIM_OC2_SetConfig+0xe8>)
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d113      	bne.n	8006a84 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006a5c:	693b      	ldr	r3, [r7, #16]
 8006a5e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006a62:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006a64:	693b      	ldr	r3, [r7, #16]
 8006a66:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006a6a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	695b      	ldr	r3, [r3, #20]
 8006a70:	009b      	lsls	r3, r3, #2
 8006a72:	693a      	ldr	r2, [r7, #16]
 8006a74:	4313      	orrs	r3, r2
 8006a76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	699b      	ldr	r3, [r3, #24]
 8006a7c:	009b      	lsls	r3, r3, #2
 8006a7e:	693a      	ldr	r2, [r7, #16]
 8006a80:	4313      	orrs	r3, r2
 8006a82:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	693a      	ldr	r2, [r7, #16]
 8006a88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	68fa      	ldr	r2, [r7, #12]
 8006a8e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	685a      	ldr	r2, [r3, #4]
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	697a      	ldr	r2, [r7, #20]
 8006a9c:	621a      	str	r2, [r3, #32]
}
 8006a9e:	bf00      	nop
 8006aa0:	371c      	adds	r7, #28
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa8:	4770      	bx	lr
 8006aaa:	bf00      	nop
 8006aac:	40010000 	.word	0x40010000
 8006ab0:	40010400 	.word	0x40010400

08006ab4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006ab4:	b480      	push	{r7}
 8006ab6:	b087      	sub	sp, #28
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
 8006abc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6a1b      	ldr	r3, [r3, #32]
 8006ac2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6a1b      	ldr	r3, [r3, #32]
 8006ac8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	685b      	ldr	r3, [r3, #4]
 8006ad4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	69db      	ldr	r3, [r3, #28]
 8006ada:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ae2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	f023 0303 	bic.w	r3, r3, #3
 8006aea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	68fa      	ldr	r2, [r7, #12]
 8006af2:	4313      	orrs	r3, r2
 8006af4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006af6:	697b      	ldr	r3, [r7, #20]
 8006af8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006afc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	689b      	ldr	r3, [r3, #8]
 8006b02:	021b      	lsls	r3, r3, #8
 8006b04:	697a      	ldr	r2, [r7, #20]
 8006b06:	4313      	orrs	r3, r2
 8006b08:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	4a21      	ldr	r2, [pc, #132]	; (8006b94 <TIM_OC3_SetConfig+0xe0>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d003      	beq.n	8006b1a <TIM_OC3_SetConfig+0x66>
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	4a20      	ldr	r2, [pc, #128]	; (8006b98 <TIM_OC3_SetConfig+0xe4>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d10d      	bne.n	8006b36 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006b1a:	697b      	ldr	r3, [r7, #20]
 8006b1c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006b20:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	68db      	ldr	r3, [r3, #12]
 8006b26:	021b      	lsls	r3, r3, #8
 8006b28:	697a      	ldr	r2, [r7, #20]
 8006b2a:	4313      	orrs	r3, r2
 8006b2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006b2e:	697b      	ldr	r3, [r7, #20]
 8006b30:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006b34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	4a16      	ldr	r2, [pc, #88]	; (8006b94 <TIM_OC3_SetConfig+0xe0>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d003      	beq.n	8006b46 <TIM_OC3_SetConfig+0x92>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	4a15      	ldr	r2, [pc, #84]	; (8006b98 <TIM_OC3_SetConfig+0xe4>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d113      	bne.n	8006b6e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006b46:	693b      	ldr	r3, [r7, #16]
 8006b48:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006b4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006b4e:	693b      	ldr	r3, [r7, #16]
 8006b50:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006b54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	695b      	ldr	r3, [r3, #20]
 8006b5a:	011b      	lsls	r3, r3, #4
 8006b5c:	693a      	ldr	r2, [r7, #16]
 8006b5e:	4313      	orrs	r3, r2
 8006b60:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	699b      	ldr	r3, [r3, #24]
 8006b66:	011b      	lsls	r3, r3, #4
 8006b68:	693a      	ldr	r2, [r7, #16]
 8006b6a:	4313      	orrs	r3, r2
 8006b6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	693a      	ldr	r2, [r7, #16]
 8006b72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	68fa      	ldr	r2, [r7, #12]
 8006b78:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	685a      	ldr	r2, [r3, #4]
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	697a      	ldr	r2, [r7, #20]
 8006b86:	621a      	str	r2, [r3, #32]
}
 8006b88:	bf00      	nop
 8006b8a:	371c      	adds	r7, #28
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b92:	4770      	bx	lr
 8006b94:	40010000 	.word	0x40010000
 8006b98:	40010400 	.word	0x40010400

08006b9c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006b9c:	b480      	push	{r7}
 8006b9e:	b087      	sub	sp, #28
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
 8006ba4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6a1b      	ldr	r3, [r3, #32]
 8006baa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	6a1b      	ldr	r3, [r3, #32]
 8006bb0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	685b      	ldr	r3, [r3, #4]
 8006bbc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	69db      	ldr	r3, [r3, #28]
 8006bc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006bd2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	021b      	lsls	r3, r3, #8
 8006bda:	68fa      	ldr	r2, [r7, #12]
 8006bdc:	4313      	orrs	r3, r2
 8006bde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006be0:	693b      	ldr	r3, [r7, #16]
 8006be2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006be6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	689b      	ldr	r3, [r3, #8]
 8006bec:	031b      	lsls	r3, r3, #12
 8006bee:	693a      	ldr	r2, [r7, #16]
 8006bf0:	4313      	orrs	r3, r2
 8006bf2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	4a12      	ldr	r2, [pc, #72]	; (8006c40 <TIM_OC4_SetConfig+0xa4>)
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d003      	beq.n	8006c04 <TIM_OC4_SetConfig+0x68>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	4a11      	ldr	r2, [pc, #68]	; (8006c44 <TIM_OC4_SetConfig+0xa8>)
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d109      	bne.n	8006c18 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006c04:	697b      	ldr	r3, [r7, #20]
 8006c06:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006c0a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	695b      	ldr	r3, [r3, #20]
 8006c10:	019b      	lsls	r3, r3, #6
 8006c12:	697a      	ldr	r2, [r7, #20]
 8006c14:	4313      	orrs	r3, r2
 8006c16:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	697a      	ldr	r2, [r7, #20]
 8006c1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	68fa      	ldr	r2, [r7, #12]
 8006c22:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	685a      	ldr	r2, [r3, #4]
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	693a      	ldr	r2, [r7, #16]
 8006c30:	621a      	str	r2, [r3, #32]
}
 8006c32:	bf00      	nop
 8006c34:	371c      	adds	r7, #28
 8006c36:	46bd      	mov	sp, r7
 8006c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3c:	4770      	bx	lr
 8006c3e:	bf00      	nop
 8006c40:	40010000 	.word	0x40010000
 8006c44:	40010400 	.word	0x40010400

08006c48 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c48:	b480      	push	{r7}
 8006c4a:	b087      	sub	sp, #28
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	60f8      	str	r0, [r7, #12]
 8006c50:	60b9      	str	r1, [r7, #8]
 8006c52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	6a1b      	ldr	r3, [r3, #32]
 8006c58:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	6a1b      	ldr	r3, [r3, #32]
 8006c5e:	f023 0201 	bic.w	r2, r3, #1
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	699b      	ldr	r3, [r3, #24]
 8006c6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006c6c:	693b      	ldr	r3, [r7, #16]
 8006c6e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006c72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	011b      	lsls	r3, r3, #4
 8006c78:	693a      	ldr	r2, [r7, #16]
 8006c7a:	4313      	orrs	r3, r2
 8006c7c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006c7e:	697b      	ldr	r3, [r7, #20]
 8006c80:	f023 030a 	bic.w	r3, r3, #10
 8006c84:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006c86:	697a      	ldr	r2, [r7, #20]
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	4313      	orrs	r3, r2
 8006c8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	693a      	ldr	r2, [r7, #16]
 8006c92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	697a      	ldr	r2, [r7, #20]
 8006c98:	621a      	str	r2, [r3, #32]
}
 8006c9a:	bf00      	nop
 8006c9c:	371c      	adds	r7, #28
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca4:	4770      	bx	lr

08006ca6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ca6:	b480      	push	{r7}
 8006ca8:	b087      	sub	sp, #28
 8006caa:	af00      	add	r7, sp, #0
 8006cac:	60f8      	str	r0, [r7, #12]
 8006cae:	60b9      	str	r1, [r7, #8]
 8006cb0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	6a1b      	ldr	r3, [r3, #32]
 8006cb6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	6a1b      	ldr	r3, [r3, #32]
 8006cbc:	f023 0210 	bic.w	r2, r3, #16
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	699b      	ldr	r3, [r3, #24]
 8006cc8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006cca:	693b      	ldr	r3, [r7, #16]
 8006ccc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006cd0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	031b      	lsls	r3, r3, #12
 8006cd6:	693a      	ldr	r2, [r7, #16]
 8006cd8:	4313      	orrs	r3, r2
 8006cda:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006cdc:	697b      	ldr	r3, [r7, #20]
 8006cde:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006ce2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006ce4:	68bb      	ldr	r3, [r7, #8]
 8006ce6:	011b      	lsls	r3, r3, #4
 8006ce8:	697a      	ldr	r2, [r7, #20]
 8006cea:	4313      	orrs	r3, r2
 8006cec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	693a      	ldr	r2, [r7, #16]
 8006cf2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	697a      	ldr	r2, [r7, #20]
 8006cf8:	621a      	str	r2, [r3, #32]
}
 8006cfa:	bf00      	nop
 8006cfc:	371c      	adds	r7, #28
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d04:	4770      	bx	lr

08006d06 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006d06:	b480      	push	{r7}
 8006d08:	b085      	sub	sp, #20
 8006d0a:	af00      	add	r7, sp, #0
 8006d0c:	6078      	str	r0, [r7, #4]
 8006d0e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	689b      	ldr	r3, [r3, #8]
 8006d14:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d1c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006d1e:	683a      	ldr	r2, [r7, #0]
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	4313      	orrs	r3, r2
 8006d24:	f043 0307 	orr.w	r3, r3, #7
 8006d28:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	68fa      	ldr	r2, [r7, #12]
 8006d2e:	609a      	str	r2, [r3, #8]
}
 8006d30:	bf00      	nop
 8006d32:	3714      	adds	r7, #20
 8006d34:	46bd      	mov	sp, r7
 8006d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3a:	4770      	bx	lr

08006d3c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006d3c:	b480      	push	{r7}
 8006d3e:	b087      	sub	sp, #28
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	60f8      	str	r0, [r7, #12]
 8006d44:	60b9      	str	r1, [r7, #8]
 8006d46:	607a      	str	r2, [r7, #4]
 8006d48:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	689b      	ldr	r3, [r3, #8]
 8006d4e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d50:	697b      	ldr	r3, [r7, #20]
 8006d52:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006d56:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	021a      	lsls	r2, r3, #8
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	431a      	orrs	r2, r3
 8006d60:	68bb      	ldr	r3, [r7, #8]
 8006d62:	4313      	orrs	r3, r2
 8006d64:	697a      	ldr	r2, [r7, #20]
 8006d66:	4313      	orrs	r3, r2
 8006d68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	697a      	ldr	r2, [r7, #20]
 8006d6e:	609a      	str	r2, [r3, #8]
}
 8006d70:	bf00      	nop
 8006d72:	371c      	adds	r7, #28
 8006d74:	46bd      	mov	sp, r7
 8006d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7a:	4770      	bx	lr

08006d7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	b085      	sub	sp, #20
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
 8006d84:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d8c:	2b01      	cmp	r3, #1
 8006d8e:	d101      	bne.n	8006d94 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006d90:	2302      	movs	r3, #2
 8006d92:	e05a      	b.n	8006e4a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2201      	movs	r2, #1
 8006d98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2202      	movs	r2, #2
 8006da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	685b      	ldr	r3, [r3, #4]
 8006daa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	689b      	ldr	r3, [r3, #8]
 8006db2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	68fa      	ldr	r2, [r7, #12]
 8006dc2:	4313      	orrs	r3, r2
 8006dc4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	68fa      	ldr	r2, [r7, #12]
 8006dcc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	4a21      	ldr	r2, [pc, #132]	; (8006e58 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006dd4:	4293      	cmp	r3, r2
 8006dd6:	d022      	beq.n	8006e1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006de0:	d01d      	beq.n	8006e1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	4a1d      	ldr	r2, [pc, #116]	; (8006e5c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d018      	beq.n	8006e1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	4a1b      	ldr	r2, [pc, #108]	; (8006e60 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d013      	beq.n	8006e1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	4a1a      	ldr	r2, [pc, #104]	; (8006e64 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d00e      	beq.n	8006e1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	4a18      	ldr	r2, [pc, #96]	; (8006e68 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d009      	beq.n	8006e1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	4a17      	ldr	r2, [pc, #92]	; (8006e6c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006e10:	4293      	cmp	r3, r2
 8006e12:	d004      	beq.n	8006e1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	4a15      	ldr	r2, [pc, #84]	; (8006e70 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	d10c      	bne.n	8006e38 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006e1e:	68bb      	ldr	r3, [r7, #8]
 8006e20:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e24:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	685b      	ldr	r3, [r3, #4]
 8006e2a:	68ba      	ldr	r2, [r7, #8]
 8006e2c:	4313      	orrs	r3, r2
 8006e2e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	68ba      	ldr	r2, [r7, #8]
 8006e36:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2201      	movs	r2, #1
 8006e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2200      	movs	r2, #0
 8006e44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006e48:	2300      	movs	r3, #0
}
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	3714      	adds	r7, #20
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e54:	4770      	bx	lr
 8006e56:	bf00      	nop
 8006e58:	40010000 	.word	0x40010000
 8006e5c:	40000400 	.word	0x40000400
 8006e60:	40000800 	.word	0x40000800
 8006e64:	40000c00 	.word	0x40000c00
 8006e68:	40010400 	.word	0x40010400
 8006e6c:	40014000 	.word	0x40014000
 8006e70:	40001800 	.word	0x40001800

08006e74 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006e74:	b480      	push	{r7}
 8006e76:	b085      	sub	sp, #20
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
 8006e7c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006e7e:	2300      	movs	r3, #0
 8006e80:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e88:	2b01      	cmp	r3, #1
 8006e8a:	d101      	bne.n	8006e90 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006e8c:	2302      	movs	r3, #2
 8006e8e:	e03d      	b.n	8006f0c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2201      	movs	r2, #1
 8006e94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	68db      	ldr	r3, [r3, #12]
 8006ea2:	4313      	orrs	r3, r2
 8006ea4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	689b      	ldr	r3, [r3, #8]
 8006eb0:	4313      	orrs	r3, r2
 8006eb2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	685b      	ldr	r3, [r3, #4]
 8006ebe:	4313      	orrs	r3, r2
 8006ec0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	4313      	orrs	r3, r2
 8006ece:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	691b      	ldr	r3, [r3, #16]
 8006eda:	4313      	orrs	r3, r2
 8006edc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	695b      	ldr	r3, [r3, #20]
 8006ee8:	4313      	orrs	r3, r2
 8006eea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	69db      	ldr	r3, [r3, #28]
 8006ef6:	4313      	orrs	r3, r2
 8006ef8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	68fa      	ldr	r2, [r7, #12]
 8006f00:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2200      	movs	r2, #0
 8006f06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006f0a:	2300      	movs	r3, #0
}
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	3714      	adds	r7, #20
 8006f10:	46bd      	mov	sp, r7
 8006f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f16:	4770      	bx	lr

08006f18 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006f18:	b480      	push	{r7}
 8006f1a:	b083      	sub	sp, #12
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006f20:	bf00      	nop
 8006f22:	370c      	adds	r7, #12
 8006f24:	46bd      	mov	sp, r7
 8006f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2a:	4770      	bx	lr

08006f2c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	b083      	sub	sp, #12
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006f34:	bf00      	nop
 8006f36:	370c      	adds	r7, #12
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3e:	4770      	bx	lr

08006f40 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b082      	sub	sp, #8
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d101      	bne.n	8006f52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006f4e:	2301      	movs	r3, #1
 8006f50:	e042      	b.n	8006fd8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f58:	b2db      	uxtb	r3, r3
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d106      	bne.n	8006f6c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2200      	movs	r2, #0
 8006f62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	f7fb f81c 	bl	8001fa4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2224      	movs	r2, #36	; 0x24
 8006f70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	68da      	ldr	r2, [r3, #12]
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006f82:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006f84:	6878      	ldr	r0, [r7, #4]
 8006f86:	f000 fc85 	bl	8007894 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	691a      	ldr	r2, [r3, #16]
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006f98:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	695a      	ldr	r2, [r3, #20]
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006fa8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	68da      	ldr	r2, [r3, #12]
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006fb8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2220      	movs	r2, #32
 8006fc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2220      	movs	r2, #32
 8006fcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006fd6:	2300      	movs	r3, #0
}
 8006fd8:	4618      	mov	r0, r3
 8006fda:	3708      	adds	r7, #8
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	bd80      	pop	{r7, pc}

08006fe0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b0ba      	sub	sp, #232	; 0xe8
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	68db      	ldr	r3, [r3, #12]
 8006ff8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	695b      	ldr	r3, [r3, #20]
 8007002:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007006:	2300      	movs	r3, #0
 8007008:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800700c:	2300      	movs	r3, #0
 800700e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007012:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007016:	f003 030f 	and.w	r3, r3, #15
 800701a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800701e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007022:	2b00      	cmp	r3, #0
 8007024:	d10f      	bne.n	8007046 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007026:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800702a:	f003 0320 	and.w	r3, r3, #32
 800702e:	2b00      	cmp	r3, #0
 8007030:	d009      	beq.n	8007046 <HAL_UART_IRQHandler+0x66>
 8007032:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007036:	f003 0320 	and.w	r3, r3, #32
 800703a:	2b00      	cmp	r3, #0
 800703c:	d003      	beq.n	8007046 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	f000 fb69 	bl	8007716 <UART_Receive_IT>
      return;
 8007044:	e25b      	b.n	80074fe <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007046:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800704a:	2b00      	cmp	r3, #0
 800704c:	f000 80de 	beq.w	800720c <HAL_UART_IRQHandler+0x22c>
 8007050:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007054:	f003 0301 	and.w	r3, r3, #1
 8007058:	2b00      	cmp	r3, #0
 800705a:	d106      	bne.n	800706a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800705c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007060:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007064:	2b00      	cmp	r3, #0
 8007066:	f000 80d1 	beq.w	800720c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800706a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800706e:	f003 0301 	and.w	r3, r3, #1
 8007072:	2b00      	cmp	r3, #0
 8007074:	d00b      	beq.n	800708e <HAL_UART_IRQHandler+0xae>
 8007076:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800707a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800707e:	2b00      	cmp	r3, #0
 8007080:	d005      	beq.n	800708e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007086:	f043 0201 	orr.w	r2, r3, #1
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800708e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007092:	f003 0304 	and.w	r3, r3, #4
 8007096:	2b00      	cmp	r3, #0
 8007098:	d00b      	beq.n	80070b2 <HAL_UART_IRQHandler+0xd2>
 800709a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800709e:	f003 0301 	and.w	r3, r3, #1
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d005      	beq.n	80070b2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070aa:	f043 0202 	orr.w	r2, r3, #2
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80070b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070b6:	f003 0302 	and.w	r3, r3, #2
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d00b      	beq.n	80070d6 <HAL_UART_IRQHandler+0xf6>
 80070be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80070c2:	f003 0301 	and.w	r3, r3, #1
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d005      	beq.n	80070d6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070ce:	f043 0204 	orr.w	r2, r3, #4
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80070d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070da:	f003 0308 	and.w	r3, r3, #8
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d011      	beq.n	8007106 <HAL_UART_IRQHandler+0x126>
 80070e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070e6:	f003 0320 	and.w	r3, r3, #32
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d105      	bne.n	80070fa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80070ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80070f2:	f003 0301 	and.w	r3, r3, #1
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d005      	beq.n	8007106 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070fe:	f043 0208 	orr.w	r2, r3, #8
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800710a:	2b00      	cmp	r3, #0
 800710c:	f000 81f2 	beq.w	80074f4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007110:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007114:	f003 0320 	and.w	r3, r3, #32
 8007118:	2b00      	cmp	r3, #0
 800711a:	d008      	beq.n	800712e <HAL_UART_IRQHandler+0x14e>
 800711c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007120:	f003 0320 	and.w	r3, r3, #32
 8007124:	2b00      	cmp	r3, #0
 8007126:	d002      	beq.n	800712e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007128:	6878      	ldr	r0, [r7, #4]
 800712a:	f000 faf4 	bl	8007716 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	695b      	ldr	r3, [r3, #20]
 8007134:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007138:	2b40      	cmp	r3, #64	; 0x40
 800713a:	bf0c      	ite	eq
 800713c:	2301      	moveq	r3, #1
 800713e:	2300      	movne	r3, #0
 8007140:	b2db      	uxtb	r3, r3
 8007142:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800714a:	f003 0308 	and.w	r3, r3, #8
 800714e:	2b00      	cmp	r3, #0
 8007150:	d103      	bne.n	800715a <HAL_UART_IRQHandler+0x17a>
 8007152:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007156:	2b00      	cmp	r3, #0
 8007158:	d04f      	beq.n	80071fa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800715a:	6878      	ldr	r0, [r7, #4]
 800715c:	f000 f9fc 	bl	8007558 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	695b      	ldr	r3, [r3, #20]
 8007166:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800716a:	2b40      	cmp	r3, #64	; 0x40
 800716c:	d141      	bne.n	80071f2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	3314      	adds	r3, #20
 8007174:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007178:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800717c:	e853 3f00 	ldrex	r3, [r3]
 8007180:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007184:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007188:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800718c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	3314      	adds	r3, #20
 8007196:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800719a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800719e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071a2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80071a6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80071aa:	e841 2300 	strex	r3, r2, [r1]
 80071ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80071b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d1d9      	bne.n	800716e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d013      	beq.n	80071ea <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071c6:	4a7e      	ldr	r2, [pc, #504]	; (80073c0 <HAL_UART_IRQHandler+0x3e0>)
 80071c8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071ce:	4618      	mov	r0, r3
 80071d0:	f7fc f8fe 	bl	80033d0 <HAL_DMA_Abort_IT>
 80071d4:	4603      	mov	r3, r0
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d016      	beq.n	8007208 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071e0:	687a      	ldr	r2, [r7, #4]
 80071e2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80071e4:	4610      	mov	r0, r2
 80071e6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071e8:	e00e      	b.n	8007208 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80071ea:	6878      	ldr	r0, [r7, #4]
 80071ec:	f000 f99e 	bl	800752c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071f0:	e00a      	b.n	8007208 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80071f2:	6878      	ldr	r0, [r7, #4]
 80071f4:	f000 f99a 	bl	800752c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071f8:	e006      	b.n	8007208 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80071fa:	6878      	ldr	r0, [r7, #4]
 80071fc:	f000 f996 	bl	800752c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2200      	movs	r2, #0
 8007204:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8007206:	e175      	b.n	80074f4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007208:	bf00      	nop
    return;
 800720a:	e173      	b.n	80074f4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007210:	2b01      	cmp	r3, #1
 8007212:	f040 814f 	bne.w	80074b4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007216:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800721a:	f003 0310 	and.w	r3, r3, #16
 800721e:	2b00      	cmp	r3, #0
 8007220:	f000 8148 	beq.w	80074b4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007224:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007228:	f003 0310 	and.w	r3, r3, #16
 800722c:	2b00      	cmp	r3, #0
 800722e:	f000 8141 	beq.w	80074b4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007232:	2300      	movs	r3, #0
 8007234:	60bb      	str	r3, [r7, #8]
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	60bb      	str	r3, [r7, #8]
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	685b      	ldr	r3, [r3, #4]
 8007244:	60bb      	str	r3, [r7, #8]
 8007246:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	695b      	ldr	r3, [r3, #20]
 800724e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007252:	2b40      	cmp	r3, #64	; 0x40
 8007254:	f040 80b6 	bne.w	80073c4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	685b      	ldr	r3, [r3, #4]
 8007260:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007264:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007268:	2b00      	cmp	r3, #0
 800726a:	f000 8145 	beq.w	80074f8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007272:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007276:	429a      	cmp	r2, r3
 8007278:	f080 813e 	bcs.w	80074f8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007282:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007288:	69db      	ldr	r3, [r3, #28]
 800728a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800728e:	f000 8088 	beq.w	80073a2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	330c      	adds	r3, #12
 8007298:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800729c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80072a0:	e853 3f00 	ldrex	r3, [r3]
 80072a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80072a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80072ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80072b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	330c      	adds	r3, #12
 80072ba:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80072be:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80072c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072c6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80072ca:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80072ce:	e841 2300 	strex	r3, r2, [r1]
 80072d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80072d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d1d9      	bne.n	8007292 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	3314      	adds	r3, #20
 80072e4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80072e8:	e853 3f00 	ldrex	r3, [r3]
 80072ec:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80072ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80072f0:	f023 0301 	bic.w	r3, r3, #1
 80072f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	3314      	adds	r3, #20
 80072fe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007302:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007306:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007308:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800730a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800730e:	e841 2300 	strex	r3, r2, [r1]
 8007312:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007314:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007316:	2b00      	cmp	r3, #0
 8007318:	d1e1      	bne.n	80072de <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	3314      	adds	r3, #20
 8007320:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007322:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007324:	e853 3f00 	ldrex	r3, [r3]
 8007328:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800732a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800732c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007330:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	3314      	adds	r3, #20
 800733a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800733e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007340:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007342:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007344:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007346:	e841 2300 	strex	r3, r2, [r1]
 800734a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800734c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800734e:	2b00      	cmp	r3, #0
 8007350:	d1e3      	bne.n	800731a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2220      	movs	r2, #32
 8007356:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	2200      	movs	r2, #0
 800735e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	330c      	adds	r3, #12
 8007366:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007368:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800736a:	e853 3f00 	ldrex	r3, [r3]
 800736e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007370:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007372:	f023 0310 	bic.w	r3, r3, #16
 8007376:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	330c      	adds	r3, #12
 8007380:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007384:	65ba      	str	r2, [r7, #88]	; 0x58
 8007386:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007388:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800738a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800738c:	e841 2300 	strex	r3, r2, [r1]
 8007390:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007392:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007394:	2b00      	cmp	r3, #0
 8007396:	d1e3      	bne.n	8007360 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800739c:	4618      	mov	r0, r3
 800739e:	f7fb ffa7 	bl	80032f0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2202      	movs	r2, #2
 80073a6:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80073b0:	b29b      	uxth	r3, r3
 80073b2:	1ad3      	subs	r3, r2, r3
 80073b4:	b29b      	uxth	r3, r3
 80073b6:	4619      	mov	r1, r3
 80073b8:	6878      	ldr	r0, [r7, #4]
 80073ba:	f000 f8c1 	bl	8007540 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80073be:	e09b      	b.n	80074f8 <HAL_UART_IRQHandler+0x518>
 80073c0:	0800761f 	.word	0x0800761f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80073cc:	b29b      	uxth	r3, r3
 80073ce:	1ad3      	subs	r3, r2, r3
 80073d0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80073d8:	b29b      	uxth	r3, r3
 80073da:	2b00      	cmp	r3, #0
 80073dc:	f000 808e 	beq.w	80074fc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80073e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	f000 8089 	beq.w	80074fc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	330c      	adds	r3, #12
 80073f0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073f4:	e853 3f00 	ldrex	r3, [r3]
 80073f8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80073fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073fc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007400:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	330c      	adds	r3, #12
 800740a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800740e:	647a      	str	r2, [r7, #68]	; 0x44
 8007410:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007412:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007414:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007416:	e841 2300 	strex	r3, r2, [r1]
 800741a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800741c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800741e:	2b00      	cmp	r3, #0
 8007420:	d1e3      	bne.n	80073ea <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	3314      	adds	r3, #20
 8007428:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800742a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800742c:	e853 3f00 	ldrex	r3, [r3]
 8007430:	623b      	str	r3, [r7, #32]
   return(result);
 8007432:	6a3b      	ldr	r3, [r7, #32]
 8007434:	f023 0301 	bic.w	r3, r3, #1
 8007438:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	3314      	adds	r3, #20
 8007442:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007446:	633a      	str	r2, [r7, #48]	; 0x30
 8007448:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800744a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800744c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800744e:	e841 2300 	strex	r3, r2, [r1]
 8007452:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007456:	2b00      	cmp	r3, #0
 8007458:	d1e3      	bne.n	8007422 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2220      	movs	r2, #32
 800745e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2200      	movs	r2, #0
 8007466:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	330c      	adds	r3, #12
 800746e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007470:	693b      	ldr	r3, [r7, #16]
 8007472:	e853 3f00 	ldrex	r3, [r3]
 8007476:	60fb      	str	r3, [r7, #12]
   return(result);
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	f023 0310 	bic.w	r3, r3, #16
 800747e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	330c      	adds	r3, #12
 8007488:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800748c:	61fa      	str	r2, [r7, #28]
 800748e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007490:	69b9      	ldr	r1, [r7, #24]
 8007492:	69fa      	ldr	r2, [r7, #28]
 8007494:	e841 2300 	strex	r3, r2, [r1]
 8007498:	617b      	str	r3, [r7, #20]
   return(result);
 800749a:	697b      	ldr	r3, [r7, #20]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d1e3      	bne.n	8007468 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2202      	movs	r2, #2
 80074a4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80074a6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80074aa:	4619      	mov	r1, r3
 80074ac:	6878      	ldr	r0, [r7, #4]
 80074ae:	f000 f847 	bl	8007540 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80074b2:	e023      	b.n	80074fc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80074b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d009      	beq.n	80074d4 <HAL_UART_IRQHandler+0x4f4>
 80074c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80074c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d003      	beq.n	80074d4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80074cc:	6878      	ldr	r0, [r7, #4]
 80074ce:	f000 f8ba 	bl	8007646 <UART_Transmit_IT>
    return;
 80074d2:	e014      	b.n	80074fe <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80074d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d00e      	beq.n	80074fe <HAL_UART_IRQHandler+0x51e>
 80074e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80074e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d008      	beq.n	80074fe <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80074ec:	6878      	ldr	r0, [r7, #4]
 80074ee:	f000 f8fa 	bl	80076e6 <UART_EndTransmit_IT>
    return;
 80074f2:	e004      	b.n	80074fe <HAL_UART_IRQHandler+0x51e>
    return;
 80074f4:	bf00      	nop
 80074f6:	e002      	b.n	80074fe <HAL_UART_IRQHandler+0x51e>
      return;
 80074f8:	bf00      	nop
 80074fa:	e000      	b.n	80074fe <HAL_UART_IRQHandler+0x51e>
      return;
 80074fc:	bf00      	nop
  }
}
 80074fe:	37e8      	adds	r7, #232	; 0xe8
 8007500:	46bd      	mov	sp, r7
 8007502:	bd80      	pop	{r7, pc}

08007504 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007504:	b480      	push	{r7}
 8007506:	b083      	sub	sp, #12
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800750c:	bf00      	nop
 800750e:	370c      	adds	r7, #12
 8007510:	46bd      	mov	sp, r7
 8007512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007516:	4770      	bx	lr

08007518 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007518:	b480      	push	{r7}
 800751a:	b083      	sub	sp, #12
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007520:	bf00      	nop
 8007522:	370c      	adds	r7, #12
 8007524:	46bd      	mov	sp, r7
 8007526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752a:	4770      	bx	lr

0800752c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800752c:	b480      	push	{r7}
 800752e:	b083      	sub	sp, #12
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007534:	bf00      	nop
 8007536:	370c      	adds	r7, #12
 8007538:	46bd      	mov	sp, r7
 800753a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753e:	4770      	bx	lr

08007540 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007540:	b480      	push	{r7}
 8007542:	b083      	sub	sp, #12
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
 8007548:	460b      	mov	r3, r1
 800754a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800754c:	bf00      	nop
 800754e:	370c      	adds	r7, #12
 8007550:	46bd      	mov	sp, r7
 8007552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007556:	4770      	bx	lr

08007558 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007558:	b480      	push	{r7}
 800755a:	b095      	sub	sp, #84	; 0x54
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	330c      	adds	r3, #12
 8007566:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007568:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800756a:	e853 3f00 	ldrex	r3, [r3]
 800756e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007572:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007576:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	330c      	adds	r3, #12
 800757e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007580:	643a      	str	r2, [r7, #64]	; 0x40
 8007582:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007584:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007586:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007588:	e841 2300 	strex	r3, r2, [r1]
 800758c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800758e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007590:	2b00      	cmp	r3, #0
 8007592:	d1e5      	bne.n	8007560 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	3314      	adds	r3, #20
 800759a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800759c:	6a3b      	ldr	r3, [r7, #32]
 800759e:	e853 3f00 	ldrex	r3, [r3]
 80075a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80075a4:	69fb      	ldr	r3, [r7, #28]
 80075a6:	f023 0301 	bic.w	r3, r3, #1
 80075aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	3314      	adds	r3, #20
 80075b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80075b4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80075b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80075ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80075bc:	e841 2300 	strex	r3, r2, [r1]
 80075c0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80075c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d1e5      	bne.n	8007594 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075cc:	2b01      	cmp	r3, #1
 80075ce:	d119      	bne.n	8007604 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	330c      	adds	r3, #12
 80075d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	e853 3f00 	ldrex	r3, [r3]
 80075de:	60bb      	str	r3, [r7, #8]
   return(result);
 80075e0:	68bb      	ldr	r3, [r7, #8]
 80075e2:	f023 0310 	bic.w	r3, r3, #16
 80075e6:	647b      	str	r3, [r7, #68]	; 0x44
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	330c      	adds	r3, #12
 80075ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80075f0:	61ba      	str	r2, [r7, #24]
 80075f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075f4:	6979      	ldr	r1, [r7, #20]
 80075f6:	69ba      	ldr	r2, [r7, #24]
 80075f8:	e841 2300 	strex	r3, r2, [r1]
 80075fc:	613b      	str	r3, [r7, #16]
   return(result);
 80075fe:	693b      	ldr	r3, [r7, #16]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d1e5      	bne.n	80075d0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2220      	movs	r2, #32
 8007608:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2200      	movs	r2, #0
 8007610:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007612:	bf00      	nop
 8007614:	3754      	adds	r7, #84	; 0x54
 8007616:	46bd      	mov	sp, r7
 8007618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761c:	4770      	bx	lr

0800761e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800761e:	b580      	push	{r7, lr}
 8007620:	b084      	sub	sp, #16
 8007622:	af00      	add	r7, sp, #0
 8007624:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800762a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	2200      	movs	r2, #0
 8007630:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	2200      	movs	r2, #0
 8007636:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007638:	68f8      	ldr	r0, [r7, #12]
 800763a:	f7ff ff77 	bl	800752c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800763e:	bf00      	nop
 8007640:	3710      	adds	r7, #16
 8007642:	46bd      	mov	sp, r7
 8007644:	bd80      	pop	{r7, pc}

08007646 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007646:	b480      	push	{r7}
 8007648:	b085      	sub	sp, #20
 800764a:	af00      	add	r7, sp, #0
 800764c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007654:	b2db      	uxtb	r3, r3
 8007656:	2b21      	cmp	r3, #33	; 0x21
 8007658:	d13e      	bne.n	80076d8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	689b      	ldr	r3, [r3, #8]
 800765e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007662:	d114      	bne.n	800768e <UART_Transmit_IT+0x48>
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	691b      	ldr	r3, [r3, #16]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d110      	bne.n	800768e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	6a1b      	ldr	r3, [r3, #32]
 8007670:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	881b      	ldrh	r3, [r3, #0]
 8007676:	461a      	mov	r2, r3
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007680:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	6a1b      	ldr	r3, [r3, #32]
 8007686:	1c9a      	adds	r2, r3, #2
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	621a      	str	r2, [r3, #32]
 800768c:	e008      	b.n	80076a0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6a1b      	ldr	r3, [r3, #32]
 8007692:	1c59      	adds	r1, r3, #1
 8007694:	687a      	ldr	r2, [r7, #4]
 8007696:	6211      	str	r1, [r2, #32]
 8007698:	781a      	ldrb	r2, [r3, #0]
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80076a4:	b29b      	uxth	r3, r3
 80076a6:	3b01      	subs	r3, #1
 80076a8:	b29b      	uxth	r3, r3
 80076aa:	687a      	ldr	r2, [r7, #4]
 80076ac:	4619      	mov	r1, r3
 80076ae:	84d1      	strh	r1, [r2, #38]	; 0x26
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d10f      	bne.n	80076d4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	68da      	ldr	r2, [r3, #12]
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80076c2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	68da      	ldr	r2, [r3, #12]
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80076d2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80076d4:	2300      	movs	r3, #0
 80076d6:	e000      	b.n	80076da <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80076d8:	2302      	movs	r3, #2
  }
}
 80076da:	4618      	mov	r0, r3
 80076dc:	3714      	adds	r7, #20
 80076de:	46bd      	mov	sp, r7
 80076e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e4:	4770      	bx	lr

080076e6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80076e6:	b580      	push	{r7, lr}
 80076e8:	b082      	sub	sp, #8
 80076ea:	af00      	add	r7, sp, #0
 80076ec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	68da      	ldr	r2, [r3, #12]
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80076fc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2220      	movs	r2, #32
 8007702:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007706:	6878      	ldr	r0, [r7, #4]
 8007708:	f7ff fefc 	bl	8007504 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800770c:	2300      	movs	r3, #0
}
 800770e:	4618      	mov	r0, r3
 8007710:	3708      	adds	r7, #8
 8007712:	46bd      	mov	sp, r7
 8007714:	bd80      	pop	{r7, pc}

08007716 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007716:	b580      	push	{r7, lr}
 8007718:	b08c      	sub	sp, #48	; 0x30
 800771a:	af00      	add	r7, sp, #0
 800771c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007724:	b2db      	uxtb	r3, r3
 8007726:	2b22      	cmp	r3, #34	; 0x22
 8007728:	f040 80ae 	bne.w	8007888 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	689b      	ldr	r3, [r3, #8]
 8007730:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007734:	d117      	bne.n	8007766 <UART_Receive_IT+0x50>
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	691b      	ldr	r3, [r3, #16]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d113      	bne.n	8007766 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800773e:	2300      	movs	r3, #0
 8007740:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007746:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	685b      	ldr	r3, [r3, #4]
 800774e:	b29b      	uxth	r3, r3
 8007750:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007754:	b29a      	uxth	r2, r3
 8007756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007758:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800775e:	1c9a      	adds	r2, r3, #2
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	629a      	str	r2, [r3, #40]	; 0x28
 8007764:	e026      	b.n	80077b4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800776a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800776c:	2300      	movs	r3, #0
 800776e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	689b      	ldr	r3, [r3, #8]
 8007774:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007778:	d007      	beq.n	800778a <UART_Receive_IT+0x74>
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	689b      	ldr	r3, [r3, #8]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d10a      	bne.n	8007798 <UART_Receive_IT+0x82>
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	691b      	ldr	r3, [r3, #16]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d106      	bne.n	8007798 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	685b      	ldr	r3, [r3, #4]
 8007790:	b2da      	uxtb	r2, r3
 8007792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007794:	701a      	strb	r2, [r3, #0]
 8007796:	e008      	b.n	80077aa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	685b      	ldr	r3, [r3, #4]
 800779e:	b2db      	uxtb	r3, r3
 80077a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077a4:	b2da      	uxtb	r2, r3
 80077a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077a8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077ae:	1c5a      	adds	r2, r3, #1
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80077b8:	b29b      	uxth	r3, r3
 80077ba:	3b01      	subs	r3, #1
 80077bc:	b29b      	uxth	r3, r3
 80077be:	687a      	ldr	r2, [r7, #4]
 80077c0:	4619      	mov	r1, r3
 80077c2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d15d      	bne.n	8007884 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	68da      	ldr	r2, [r3, #12]
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f022 0220 	bic.w	r2, r2, #32
 80077d6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	68da      	ldr	r2, [r3, #12]
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80077e6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	695a      	ldr	r2, [r3, #20]
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f022 0201 	bic.w	r2, r2, #1
 80077f6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2220      	movs	r2, #32
 80077fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2200      	movs	r2, #0
 8007804:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800780a:	2b01      	cmp	r3, #1
 800780c:	d135      	bne.n	800787a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2200      	movs	r2, #0
 8007812:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	330c      	adds	r3, #12
 800781a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800781c:	697b      	ldr	r3, [r7, #20]
 800781e:	e853 3f00 	ldrex	r3, [r3]
 8007822:	613b      	str	r3, [r7, #16]
   return(result);
 8007824:	693b      	ldr	r3, [r7, #16]
 8007826:	f023 0310 	bic.w	r3, r3, #16
 800782a:	627b      	str	r3, [r7, #36]	; 0x24
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	330c      	adds	r3, #12
 8007832:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007834:	623a      	str	r2, [r7, #32]
 8007836:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007838:	69f9      	ldr	r1, [r7, #28]
 800783a:	6a3a      	ldr	r2, [r7, #32]
 800783c:	e841 2300 	strex	r3, r2, [r1]
 8007840:	61bb      	str	r3, [r7, #24]
   return(result);
 8007842:	69bb      	ldr	r3, [r7, #24]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d1e5      	bne.n	8007814 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f003 0310 	and.w	r3, r3, #16
 8007852:	2b10      	cmp	r3, #16
 8007854:	d10a      	bne.n	800786c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007856:	2300      	movs	r3, #0
 8007858:	60fb      	str	r3, [r7, #12]
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	60fb      	str	r3, [r7, #12]
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	685b      	ldr	r3, [r3, #4]
 8007868:	60fb      	str	r3, [r7, #12]
 800786a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007870:	4619      	mov	r1, r3
 8007872:	6878      	ldr	r0, [r7, #4]
 8007874:	f7ff fe64 	bl	8007540 <HAL_UARTEx_RxEventCallback>
 8007878:	e002      	b.n	8007880 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	f7ff fe4c 	bl	8007518 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007880:	2300      	movs	r3, #0
 8007882:	e002      	b.n	800788a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007884:	2300      	movs	r3, #0
 8007886:	e000      	b.n	800788a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007888:	2302      	movs	r3, #2
  }
}
 800788a:	4618      	mov	r0, r3
 800788c:	3730      	adds	r7, #48	; 0x30
 800788e:	46bd      	mov	sp, r7
 8007890:	bd80      	pop	{r7, pc}
	...

08007894 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007894:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007898:	b0c0      	sub	sp, #256	; 0x100
 800789a:	af00      	add	r7, sp, #0
 800789c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80078a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	691b      	ldr	r3, [r3, #16]
 80078a8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80078ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078b0:	68d9      	ldr	r1, [r3, #12]
 80078b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078b6:	681a      	ldr	r2, [r3, #0]
 80078b8:	ea40 0301 	orr.w	r3, r0, r1
 80078bc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80078be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078c2:	689a      	ldr	r2, [r3, #8]
 80078c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078c8:	691b      	ldr	r3, [r3, #16]
 80078ca:	431a      	orrs	r2, r3
 80078cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078d0:	695b      	ldr	r3, [r3, #20]
 80078d2:	431a      	orrs	r2, r3
 80078d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078d8:	69db      	ldr	r3, [r3, #28]
 80078da:	4313      	orrs	r3, r2
 80078dc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80078e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	68db      	ldr	r3, [r3, #12]
 80078e8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80078ec:	f021 010c 	bic.w	r1, r1, #12
 80078f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078f4:	681a      	ldr	r2, [r3, #0]
 80078f6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80078fa:	430b      	orrs	r3, r1
 80078fc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80078fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	695b      	ldr	r3, [r3, #20]
 8007906:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800790a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800790e:	6999      	ldr	r1, [r3, #24]
 8007910:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007914:	681a      	ldr	r2, [r3, #0]
 8007916:	ea40 0301 	orr.w	r3, r0, r1
 800791a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800791c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007920:	681a      	ldr	r2, [r3, #0]
 8007922:	4b8f      	ldr	r3, [pc, #572]	; (8007b60 <UART_SetConfig+0x2cc>)
 8007924:	429a      	cmp	r2, r3
 8007926:	d005      	beq.n	8007934 <UART_SetConfig+0xa0>
 8007928:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800792c:	681a      	ldr	r2, [r3, #0]
 800792e:	4b8d      	ldr	r3, [pc, #564]	; (8007b64 <UART_SetConfig+0x2d0>)
 8007930:	429a      	cmp	r2, r3
 8007932:	d104      	bne.n	800793e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007934:	f7fe f81e 	bl	8005974 <HAL_RCC_GetPCLK2Freq>
 8007938:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800793c:	e003      	b.n	8007946 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800793e:	f7fe f805 	bl	800594c <HAL_RCC_GetPCLK1Freq>
 8007942:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007946:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800794a:	69db      	ldr	r3, [r3, #28]
 800794c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007950:	f040 810c 	bne.w	8007b6c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007954:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007958:	2200      	movs	r2, #0
 800795a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800795e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007962:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007966:	4622      	mov	r2, r4
 8007968:	462b      	mov	r3, r5
 800796a:	1891      	adds	r1, r2, r2
 800796c:	65b9      	str	r1, [r7, #88]	; 0x58
 800796e:	415b      	adcs	r3, r3
 8007970:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007972:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007976:	4621      	mov	r1, r4
 8007978:	eb12 0801 	adds.w	r8, r2, r1
 800797c:	4629      	mov	r1, r5
 800797e:	eb43 0901 	adc.w	r9, r3, r1
 8007982:	f04f 0200 	mov.w	r2, #0
 8007986:	f04f 0300 	mov.w	r3, #0
 800798a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800798e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007992:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007996:	4690      	mov	r8, r2
 8007998:	4699      	mov	r9, r3
 800799a:	4623      	mov	r3, r4
 800799c:	eb18 0303 	adds.w	r3, r8, r3
 80079a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80079a4:	462b      	mov	r3, r5
 80079a6:	eb49 0303 	adc.w	r3, r9, r3
 80079aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80079ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079b2:	685b      	ldr	r3, [r3, #4]
 80079b4:	2200      	movs	r2, #0
 80079b6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80079ba:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80079be:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80079c2:	460b      	mov	r3, r1
 80079c4:	18db      	adds	r3, r3, r3
 80079c6:	653b      	str	r3, [r7, #80]	; 0x50
 80079c8:	4613      	mov	r3, r2
 80079ca:	eb42 0303 	adc.w	r3, r2, r3
 80079ce:	657b      	str	r3, [r7, #84]	; 0x54
 80079d0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80079d4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80079d8:	f7f9 f8f6 	bl	8000bc8 <__aeabi_uldivmod>
 80079dc:	4602      	mov	r2, r0
 80079de:	460b      	mov	r3, r1
 80079e0:	4b61      	ldr	r3, [pc, #388]	; (8007b68 <UART_SetConfig+0x2d4>)
 80079e2:	fba3 2302 	umull	r2, r3, r3, r2
 80079e6:	095b      	lsrs	r3, r3, #5
 80079e8:	011c      	lsls	r4, r3, #4
 80079ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80079ee:	2200      	movs	r2, #0
 80079f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80079f4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80079f8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80079fc:	4642      	mov	r2, r8
 80079fe:	464b      	mov	r3, r9
 8007a00:	1891      	adds	r1, r2, r2
 8007a02:	64b9      	str	r1, [r7, #72]	; 0x48
 8007a04:	415b      	adcs	r3, r3
 8007a06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007a08:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007a0c:	4641      	mov	r1, r8
 8007a0e:	eb12 0a01 	adds.w	sl, r2, r1
 8007a12:	4649      	mov	r1, r9
 8007a14:	eb43 0b01 	adc.w	fp, r3, r1
 8007a18:	f04f 0200 	mov.w	r2, #0
 8007a1c:	f04f 0300 	mov.w	r3, #0
 8007a20:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007a24:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007a28:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007a2c:	4692      	mov	sl, r2
 8007a2e:	469b      	mov	fp, r3
 8007a30:	4643      	mov	r3, r8
 8007a32:	eb1a 0303 	adds.w	r3, sl, r3
 8007a36:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007a3a:	464b      	mov	r3, r9
 8007a3c:	eb4b 0303 	adc.w	r3, fp, r3
 8007a40:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007a44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a48:	685b      	ldr	r3, [r3, #4]
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007a50:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007a54:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007a58:	460b      	mov	r3, r1
 8007a5a:	18db      	adds	r3, r3, r3
 8007a5c:	643b      	str	r3, [r7, #64]	; 0x40
 8007a5e:	4613      	mov	r3, r2
 8007a60:	eb42 0303 	adc.w	r3, r2, r3
 8007a64:	647b      	str	r3, [r7, #68]	; 0x44
 8007a66:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007a6a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007a6e:	f7f9 f8ab 	bl	8000bc8 <__aeabi_uldivmod>
 8007a72:	4602      	mov	r2, r0
 8007a74:	460b      	mov	r3, r1
 8007a76:	4611      	mov	r1, r2
 8007a78:	4b3b      	ldr	r3, [pc, #236]	; (8007b68 <UART_SetConfig+0x2d4>)
 8007a7a:	fba3 2301 	umull	r2, r3, r3, r1
 8007a7e:	095b      	lsrs	r3, r3, #5
 8007a80:	2264      	movs	r2, #100	; 0x64
 8007a82:	fb02 f303 	mul.w	r3, r2, r3
 8007a86:	1acb      	subs	r3, r1, r3
 8007a88:	00db      	lsls	r3, r3, #3
 8007a8a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007a8e:	4b36      	ldr	r3, [pc, #216]	; (8007b68 <UART_SetConfig+0x2d4>)
 8007a90:	fba3 2302 	umull	r2, r3, r3, r2
 8007a94:	095b      	lsrs	r3, r3, #5
 8007a96:	005b      	lsls	r3, r3, #1
 8007a98:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007a9c:	441c      	add	r4, r3
 8007a9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007aa8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007aac:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007ab0:	4642      	mov	r2, r8
 8007ab2:	464b      	mov	r3, r9
 8007ab4:	1891      	adds	r1, r2, r2
 8007ab6:	63b9      	str	r1, [r7, #56]	; 0x38
 8007ab8:	415b      	adcs	r3, r3
 8007aba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007abc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007ac0:	4641      	mov	r1, r8
 8007ac2:	1851      	adds	r1, r2, r1
 8007ac4:	6339      	str	r1, [r7, #48]	; 0x30
 8007ac6:	4649      	mov	r1, r9
 8007ac8:	414b      	adcs	r3, r1
 8007aca:	637b      	str	r3, [r7, #52]	; 0x34
 8007acc:	f04f 0200 	mov.w	r2, #0
 8007ad0:	f04f 0300 	mov.w	r3, #0
 8007ad4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007ad8:	4659      	mov	r1, fp
 8007ada:	00cb      	lsls	r3, r1, #3
 8007adc:	4651      	mov	r1, sl
 8007ade:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007ae2:	4651      	mov	r1, sl
 8007ae4:	00ca      	lsls	r2, r1, #3
 8007ae6:	4610      	mov	r0, r2
 8007ae8:	4619      	mov	r1, r3
 8007aea:	4603      	mov	r3, r0
 8007aec:	4642      	mov	r2, r8
 8007aee:	189b      	adds	r3, r3, r2
 8007af0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007af4:	464b      	mov	r3, r9
 8007af6:	460a      	mov	r2, r1
 8007af8:	eb42 0303 	adc.w	r3, r2, r3
 8007afc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007b00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b04:	685b      	ldr	r3, [r3, #4]
 8007b06:	2200      	movs	r2, #0
 8007b08:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007b0c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007b10:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007b14:	460b      	mov	r3, r1
 8007b16:	18db      	adds	r3, r3, r3
 8007b18:	62bb      	str	r3, [r7, #40]	; 0x28
 8007b1a:	4613      	mov	r3, r2
 8007b1c:	eb42 0303 	adc.w	r3, r2, r3
 8007b20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007b22:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007b26:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007b2a:	f7f9 f84d 	bl	8000bc8 <__aeabi_uldivmod>
 8007b2e:	4602      	mov	r2, r0
 8007b30:	460b      	mov	r3, r1
 8007b32:	4b0d      	ldr	r3, [pc, #52]	; (8007b68 <UART_SetConfig+0x2d4>)
 8007b34:	fba3 1302 	umull	r1, r3, r3, r2
 8007b38:	095b      	lsrs	r3, r3, #5
 8007b3a:	2164      	movs	r1, #100	; 0x64
 8007b3c:	fb01 f303 	mul.w	r3, r1, r3
 8007b40:	1ad3      	subs	r3, r2, r3
 8007b42:	00db      	lsls	r3, r3, #3
 8007b44:	3332      	adds	r3, #50	; 0x32
 8007b46:	4a08      	ldr	r2, [pc, #32]	; (8007b68 <UART_SetConfig+0x2d4>)
 8007b48:	fba2 2303 	umull	r2, r3, r2, r3
 8007b4c:	095b      	lsrs	r3, r3, #5
 8007b4e:	f003 0207 	and.w	r2, r3, #7
 8007b52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	4422      	add	r2, r4
 8007b5a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007b5c:	e106      	b.n	8007d6c <UART_SetConfig+0x4d8>
 8007b5e:	bf00      	nop
 8007b60:	40011000 	.word	0x40011000
 8007b64:	40011400 	.word	0x40011400
 8007b68:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007b6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007b70:	2200      	movs	r2, #0
 8007b72:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007b76:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007b7a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007b7e:	4642      	mov	r2, r8
 8007b80:	464b      	mov	r3, r9
 8007b82:	1891      	adds	r1, r2, r2
 8007b84:	6239      	str	r1, [r7, #32]
 8007b86:	415b      	adcs	r3, r3
 8007b88:	627b      	str	r3, [r7, #36]	; 0x24
 8007b8a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007b8e:	4641      	mov	r1, r8
 8007b90:	1854      	adds	r4, r2, r1
 8007b92:	4649      	mov	r1, r9
 8007b94:	eb43 0501 	adc.w	r5, r3, r1
 8007b98:	f04f 0200 	mov.w	r2, #0
 8007b9c:	f04f 0300 	mov.w	r3, #0
 8007ba0:	00eb      	lsls	r3, r5, #3
 8007ba2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007ba6:	00e2      	lsls	r2, r4, #3
 8007ba8:	4614      	mov	r4, r2
 8007baa:	461d      	mov	r5, r3
 8007bac:	4643      	mov	r3, r8
 8007bae:	18e3      	adds	r3, r4, r3
 8007bb0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007bb4:	464b      	mov	r3, r9
 8007bb6:	eb45 0303 	adc.w	r3, r5, r3
 8007bba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007bbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bc2:	685b      	ldr	r3, [r3, #4]
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007bca:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007bce:	f04f 0200 	mov.w	r2, #0
 8007bd2:	f04f 0300 	mov.w	r3, #0
 8007bd6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007bda:	4629      	mov	r1, r5
 8007bdc:	008b      	lsls	r3, r1, #2
 8007bde:	4621      	mov	r1, r4
 8007be0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007be4:	4621      	mov	r1, r4
 8007be6:	008a      	lsls	r2, r1, #2
 8007be8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007bec:	f7f8 ffec 	bl	8000bc8 <__aeabi_uldivmod>
 8007bf0:	4602      	mov	r2, r0
 8007bf2:	460b      	mov	r3, r1
 8007bf4:	4b60      	ldr	r3, [pc, #384]	; (8007d78 <UART_SetConfig+0x4e4>)
 8007bf6:	fba3 2302 	umull	r2, r3, r3, r2
 8007bfa:	095b      	lsrs	r3, r3, #5
 8007bfc:	011c      	lsls	r4, r3, #4
 8007bfe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007c02:	2200      	movs	r2, #0
 8007c04:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007c08:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007c0c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007c10:	4642      	mov	r2, r8
 8007c12:	464b      	mov	r3, r9
 8007c14:	1891      	adds	r1, r2, r2
 8007c16:	61b9      	str	r1, [r7, #24]
 8007c18:	415b      	adcs	r3, r3
 8007c1a:	61fb      	str	r3, [r7, #28]
 8007c1c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007c20:	4641      	mov	r1, r8
 8007c22:	1851      	adds	r1, r2, r1
 8007c24:	6139      	str	r1, [r7, #16]
 8007c26:	4649      	mov	r1, r9
 8007c28:	414b      	adcs	r3, r1
 8007c2a:	617b      	str	r3, [r7, #20]
 8007c2c:	f04f 0200 	mov.w	r2, #0
 8007c30:	f04f 0300 	mov.w	r3, #0
 8007c34:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007c38:	4659      	mov	r1, fp
 8007c3a:	00cb      	lsls	r3, r1, #3
 8007c3c:	4651      	mov	r1, sl
 8007c3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007c42:	4651      	mov	r1, sl
 8007c44:	00ca      	lsls	r2, r1, #3
 8007c46:	4610      	mov	r0, r2
 8007c48:	4619      	mov	r1, r3
 8007c4a:	4603      	mov	r3, r0
 8007c4c:	4642      	mov	r2, r8
 8007c4e:	189b      	adds	r3, r3, r2
 8007c50:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007c54:	464b      	mov	r3, r9
 8007c56:	460a      	mov	r2, r1
 8007c58:	eb42 0303 	adc.w	r3, r2, r3
 8007c5c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007c60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c64:	685b      	ldr	r3, [r3, #4]
 8007c66:	2200      	movs	r2, #0
 8007c68:	67bb      	str	r3, [r7, #120]	; 0x78
 8007c6a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007c6c:	f04f 0200 	mov.w	r2, #0
 8007c70:	f04f 0300 	mov.w	r3, #0
 8007c74:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007c78:	4649      	mov	r1, r9
 8007c7a:	008b      	lsls	r3, r1, #2
 8007c7c:	4641      	mov	r1, r8
 8007c7e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007c82:	4641      	mov	r1, r8
 8007c84:	008a      	lsls	r2, r1, #2
 8007c86:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007c8a:	f7f8 ff9d 	bl	8000bc8 <__aeabi_uldivmod>
 8007c8e:	4602      	mov	r2, r0
 8007c90:	460b      	mov	r3, r1
 8007c92:	4611      	mov	r1, r2
 8007c94:	4b38      	ldr	r3, [pc, #224]	; (8007d78 <UART_SetConfig+0x4e4>)
 8007c96:	fba3 2301 	umull	r2, r3, r3, r1
 8007c9a:	095b      	lsrs	r3, r3, #5
 8007c9c:	2264      	movs	r2, #100	; 0x64
 8007c9e:	fb02 f303 	mul.w	r3, r2, r3
 8007ca2:	1acb      	subs	r3, r1, r3
 8007ca4:	011b      	lsls	r3, r3, #4
 8007ca6:	3332      	adds	r3, #50	; 0x32
 8007ca8:	4a33      	ldr	r2, [pc, #204]	; (8007d78 <UART_SetConfig+0x4e4>)
 8007caa:	fba2 2303 	umull	r2, r3, r2, r3
 8007cae:	095b      	lsrs	r3, r3, #5
 8007cb0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007cb4:	441c      	add	r4, r3
 8007cb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007cba:	2200      	movs	r2, #0
 8007cbc:	673b      	str	r3, [r7, #112]	; 0x70
 8007cbe:	677a      	str	r2, [r7, #116]	; 0x74
 8007cc0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007cc4:	4642      	mov	r2, r8
 8007cc6:	464b      	mov	r3, r9
 8007cc8:	1891      	adds	r1, r2, r2
 8007cca:	60b9      	str	r1, [r7, #8]
 8007ccc:	415b      	adcs	r3, r3
 8007cce:	60fb      	str	r3, [r7, #12]
 8007cd0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007cd4:	4641      	mov	r1, r8
 8007cd6:	1851      	adds	r1, r2, r1
 8007cd8:	6039      	str	r1, [r7, #0]
 8007cda:	4649      	mov	r1, r9
 8007cdc:	414b      	adcs	r3, r1
 8007cde:	607b      	str	r3, [r7, #4]
 8007ce0:	f04f 0200 	mov.w	r2, #0
 8007ce4:	f04f 0300 	mov.w	r3, #0
 8007ce8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007cec:	4659      	mov	r1, fp
 8007cee:	00cb      	lsls	r3, r1, #3
 8007cf0:	4651      	mov	r1, sl
 8007cf2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007cf6:	4651      	mov	r1, sl
 8007cf8:	00ca      	lsls	r2, r1, #3
 8007cfa:	4610      	mov	r0, r2
 8007cfc:	4619      	mov	r1, r3
 8007cfe:	4603      	mov	r3, r0
 8007d00:	4642      	mov	r2, r8
 8007d02:	189b      	adds	r3, r3, r2
 8007d04:	66bb      	str	r3, [r7, #104]	; 0x68
 8007d06:	464b      	mov	r3, r9
 8007d08:	460a      	mov	r2, r1
 8007d0a:	eb42 0303 	adc.w	r3, r2, r3
 8007d0e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007d10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d14:	685b      	ldr	r3, [r3, #4]
 8007d16:	2200      	movs	r2, #0
 8007d18:	663b      	str	r3, [r7, #96]	; 0x60
 8007d1a:	667a      	str	r2, [r7, #100]	; 0x64
 8007d1c:	f04f 0200 	mov.w	r2, #0
 8007d20:	f04f 0300 	mov.w	r3, #0
 8007d24:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007d28:	4649      	mov	r1, r9
 8007d2a:	008b      	lsls	r3, r1, #2
 8007d2c:	4641      	mov	r1, r8
 8007d2e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007d32:	4641      	mov	r1, r8
 8007d34:	008a      	lsls	r2, r1, #2
 8007d36:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007d3a:	f7f8 ff45 	bl	8000bc8 <__aeabi_uldivmod>
 8007d3e:	4602      	mov	r2, r0
 8007d40:	460b      	mov	r3, r1
 8007d42:	4b0d      	ldr	r3, [pc, #52]	; (8007d78 <UART_SetConfig+0x4e4>)
 8007d44:	fba3 1302 	umull	r1, r3, r3, r2
 8007d48:	095b      	lsrs	r3, r3, #5
 8007d4a:	2164      	movs	r1, #100	; 0x64
 8007d4c:	fb01 f303 	mul.w	r3, r1, r3
 8007d50:	1ad3      	subs	r3, r2, r3
 8007d52:	011b      	lsls	r3, r3, #4
 8007d54:	3332      	adds	r3, #50	; 0x32
 8007d56:	4a08      	ldr	r2, [pc, #32]	; (8007d78 <UART_SetConfig+0x4e4>)
 8007d58:	fba2 2303 	umull	r2, r3, r2, r3
 8007d5c:	095b      	lsrs	r3, r3, #5
 8007d5e:	f003 020f 	and.w	r2, r3, #15
 8007d62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	4422      	add	r2, r4
 8007d6a:	609a      	str	r2, [r3, #8]
}
 8007d6c:	bf00      	nop
 8007d6e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007d72:	46bd      	mov	sp, r7
 8007d74:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007d78:	51eb851f 	.word	0x51eb851f

08007d7c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007d7c:	b084      	sub	sp, #16
 8007d7e:	b580      	push	{r7, lr}
 8007d80:	b084      	sub	sp, #16
 8007d82:	af00      	add	r7, sp, #0
 8007d84:	6078      	str	r0, [r7, #4]
 8007d86:	f107 001c 	add.w	r0, r7, #28
 8007d8a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007d8e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8007d92:	2b01      	cmp	r3, #1
 8007d94:	d123      	bne.n	8007dde <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d9a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	68db      	ldr	r3, [r3, #12]
 8007da6:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007daa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007dae:	687a      	ldr	r2, [r7, #4]
 8007db0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	68db      	ldr	r3, [r3, #12]
 8007db6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007dbe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007dc2:	2b01      	cmp	r3, #1
 8007dc4:	d105      	bne.n	8007dd2 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	68db      	ldr	r3, [r3, #12]
 8007dca:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007dd2:	6878      	ldr	r0, [r7, #4]
 8007dd4:	f001 fae2 	bl	800939c <USB_CoreReset>
 8007dd8:	4603      	mov	r3, r0
 8007dda:	73fb      	strb	r3, [r7, #15]
 8007ddc:	e01b      	b.n	8007e16 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	68db      	ldr	r3, [r3, #12]
 8007de2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007dea:	6878      	ldr	r0, [r7, #4]
 8007dec:	f001 fad6 	bl	800939c <USB_CoreReset>
 8007df0:	4603      	mov	r3, r0
 8007df2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007df4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d106      	bne.n	8007e0a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e00:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	639a      	str	r2, [r3, #56]	; 0x38
 8007e08:	e005      	b.n	8007e16 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e0e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007e16:	7fbb      	ldrb	r3, [r7, #30]
 8007e18:	2b01      	cmp	r3, #1
 8007e1a:	d10b      	bne.n	8007e34 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	689b      	ldr	r3, [r3, #8]
 8007e20:	f043 0206 	orr.w	r2, r3, #6
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	689b      	ldr	r3, [r3, #8]
 8007e2c:	f043 0220 	orr.w	r2, r3, #32
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007e34:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e36:	4618      	mov	r0, r3
 8007e38:	3710      	adds	r7, #16
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007e40:	b004      	add	sp, #16
 8007e42:	4770      	bx	lr

08007e44 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007e44:	b480      	push	{r7}
 8007e46:	b087      	sub	sp, #28
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	60f8      	str	r0, [r7, #12]
 8007e4c:	60b9      	str	r1, [r7, #8]
 8007e4e:	4613      	mov	r3, r2
 8007e50:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007e52:	79fb      	ldrb	r3, [r7, #7]
 8007e54:	2b02      	cmp	r3, #2
 8007e56:	d165      	bne.n	8007f24 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007e58:	68bb      	ldr	r3, [r7, #8]
 8007e5a:	4a41      	ldr	r2, [pc, #260]	; (8007f60 <USB_SetTurnaroundTime+0x11c>)
 8007e5c:	4293      	cmp	r3, r2
 8007e5e:	d906      	bls.n	8007e6e <USB_SetTurnaroundTime+0x2a>
 8007e60:	68bb      	ldr	r3, [r7, #8]
 8007e62:	4a40      	ldr	r2, [pc, #256]	; (8007f64 <USB_SetTurnaroundTime+0x120>)
 8007e64:	4293      	cmp	r3, r2
 8007e66:	d202      	bcs.n	8007e6e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007e68:	230f      	movs	r3, #15
 8007e6a:	617b      	str	r3, [r7, #20]
 8007e6c:	e062      	b.n	8007f34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007e6e:	68bb      	ldr	r3, [r7, #8]
 8007e70:	4a3c      	ldr	r2, [pc, #240]	; (8007f64 <USB_SetTurnaroundTime+0x120>)
 8007e72:	4293      	cmp	r3, r2
 8007e74:	d306      	bcc.n	8007e84 <USB_SetTurnaroundTime+0x40>
 8007e76:	68bb      	ldr	r3, [r7, #8]
 8007e78:	4a3b      	ldr	r2, [pc, #236]	; (8007f68 <USB_SetTurnaroundTime+0x124>)
 8007e7a:	4293      	cmp	r3, r2
 8007e7c:	d202      	bcs.n	8007e84 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8007e7e:	230e      	movs	r3, #14
 8007e80:	617b      	str	r3, [r7, #20]
 8007e82:	e057      	b.n	8007f34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007e84:	68bb      	ldr	r3, [r7, #8]
 8007e86:	4a38      	ldr	r2, [pc, #224]	; (8007f68 <USB_SetTurnaroundTime+0x124>)
 8007e88:	4293      	cmp	r3, r2
 8007e8a:	d306      	bcc.n	8007e9a <USB_SetTurnaroundTime+0x56>
 8007e8c:	68bb      	ldr	r3, [r7, #8]
 8007e8e:	4a37      	ldr	r2, [pc, #220]	; (8007f6c <USB_SetTurnaroundTime+0x128>)
 8007e90:	4293      	cmp	r3, r2
 8007e92:	d202      	bcs.n	8007e9a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007e94:	230d      	movs	r3, #13
 8007e96:	617b      	str	r3, [r7, #20]
 8007e98:	e04c      	b.n	8007f34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007e9a:	68bb      	ldr	r3, [r7, #8]
 8007e9c:	4a33      	ldr	r2, [pc, #204]	; (8007f6c <USB_SetTurnaroundTime+0x128>)
 8007e9e:	4293      	cmp	r3, r2
 8007ea0:	d306      	bcc.n	8007eb0 <USB_SetTurnaroundTime+0x6c>
 8007ea2:	68bb      	ldr	r3, [r7, #8]
 8007ea4:	4a32      	ldr	r2, [pc, #200]	; (8007f70 <USB_SetTurnaroundTime+0x12c>)
 8007ea6:	4293      	cmp	r3, r2
 8007ea8:	d802      	bhi.n	8007eb0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007eaa:	230c      	movs	r3, #12
 8007eac:	617b      	str	r3, [r7, #20]
 8007eae:	e041      	b.n	8007f34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007eb0:	68bb      	ldr	r3, [r7, #8]
 8007eb2:	4a2f      	ldr	r2, [pc, #188]	; (8007f70 <USB_SetTurnaroundTime+0x12c>)
 8007eb4:	4293      	cmp	r3, r2
 8007eb6:	d906      	bls.n	8007ec6 <USB_SetTurnaroundTime+0x82>
 8007eb8:	68bb      	ldr	r3, [r7, #8]
 8007eba:	4a2e      	ldr	r2, [pc, #184]	; (8007f74 <USB_SetTurnaroundTime+0x130>)
 8007ebc:	4293      	cmp	r3, r2
 8007ebe:	d802      	bhi.n	8007ec6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007ec0:	230b      	movs	r3, #11
 8007ec2:	617b      	str	r3, [r7, #20]
 8007ec4:	e036      	b.n	8007f34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007ec6:	68bb      	ldr	r3, [r7, #8]
 8007ec8:	4a2a      	ldr	r2, [pc, #168]	; (8007f74 <USB_SetTurnaroundTime+0x130>)
 8007eca:	4293      	cmp	r3, r2
 8007ecc:	d906      	bls.n	8007edc <USB_SetTurnaroundTime+0x98>
 8007ece:	68bb      	ldr	r3, [r7, #8]
 8007ed0:	4a29      	ldr	r2, [pc, #164]	; (8007f78 <USB_SetTurnaroundTime+0x134>)
 8007ed2:	4293      	cmp	r3, r2
 8007ed4:	d802      	bhi.n	8007edc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007ed6:	230a      	movs	r3, #10
 8007ed8:	617b      	str	r3, [r7, #20]
 8007eda:	e02b      	b.n	8007f34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007edc:	68bb      	ldr	r3, [r7, #8]
 8007ede:	4a26      	ldr	r2, [pc, #152]	; (8007f78 <USB_SetTurnaroundTime+0x134>)
 8007ee0:	4293      	cmp	r3, r2
 8007ee2:	d906      	bls.n	8007ef2 <USB_SetTurnaroundTime+0xae>
 8007ee4:	68bb      	ldr	r3, [r7, #8]
 8007ee6:	4a25      	ldr	r2, [pc, #148]	; (8007f7c <USB_SetTurnaroundTime+0x138>)
 8007ee8:	4293      	cmp	r3, r2
 8007eea:	d202      	bcs.n	8007ef2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007eec:	2309      	movs	r3, #9
 8007eee:	617b      	str	r3, [r7, #20]
 8007ef0:	e020      	b.n	8007f34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007ef2:	68bb      	ldr	r3, [r7, #8]
 8007ef4:	4a21      	ldr	r2, [pc, #132]	; (8007f7c <USB_SetTurnaroundTime+0x138>)
 8007ef6:	4293      	cmp	r3, r2
 8007ef8:	d306      	bcc.n	8007f08 <USB_SetTurnaroundTime+0xc4>
 8007efa:	68bb      	ldr	r3, [r7, #8]
 8007efc:	4a20      	ldr	r2, [pc, #128]	; (8007f80 <USB_SetTurnaroundTime+0x13c>)
 8007efe:	4293      	cmp	r3, r2
 8007f00:	d802      	bhi.n	8007f08 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007f02:	2308      	movs	r3, #8
 8007f04:	617b      	str	r3, [r7, #20]
 8007f06:	e015      	b.n	8007f34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007f08:	68bb      	ldr	r3, [r7, #8]
 8007f0a:	4a1d      	ldr	r2, [pc, #116]	; (8007f80 <USB_SetTurnaroundTime+0x13c>)
 8007f0c:	4293      	cmp	r3, r2
 8007f0e:	d906      	bls.n	8007f1e <USB_SetTurnaroundTime+0xda>
 8007f10:	68bb      	ldr	r3, [r7, #8]
 8007f12:	4a1c      	ldr	r2, [pc, #112]	; (8007f84 <USB_SetTurnaroundTime+0x140>)
 8007f14:	4293      	cmp	r3, r2
 8007f16:	d202      	bcs.n	8007f1e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007f18:	2307      	movs	r3, #7
 8007f1a:	617b      	str	r3, [r7, #20]
 8007f1c:	e00a      	b.n	8007f34 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007f1e:	2306      	movs	r3, #6
 8007f20:	617b      	str	r3, [r7, #20]
 8007f22:	e007      	b.n	8007f34 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007f24:	79fb      	ldrb	r3, [r7, #7]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d102      	bne.n	8007f30 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8007f2a:	2309      	movs	r3, #9
 8007f2c:	617b      	str	r3, [r7, #20]
 8007f2e:	e001      	b.n	8007f34 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007f30:	2309      	movs	r3, #9
 8007f32:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	68db      	ldr	r3, [r3, #12]
 8007f38:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	68da      	ldr	r2, [r3, #12]
 8007f44:	697b      	ldr	r3, [r7, #20]
 8007f46:	029b      	lsls	r3, r3, #10
 8007f48:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8007f4c:	431a      	orrs	r2, r3
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007f52:	2300      	movs	r3, #0
}
 8007f54:	4618      	mov	r0, r3
 8007f56:	371c      	adds	r7, #28
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5e:	4770      	bx	lr
 8007f60:	00d8acbf 	.word	0x00d8acbf
 8007f64:	00e4e1c0 	.word	0x00e4e1c0
 8007f68:	00f42400 	.word	0x00f42400
 8007f6c:	01067380 	.word	0x01067380
 8007f70:	011a499f 	.word	0x011a499f
 8007f74:	01312cff 	.word	0x01312cff
 8007f78:	014ca43f 	.word	0x014ca43f
 8007f7c:	016e3600 	.word	0x016e3600
 8007f80:	01a6ab1f 	.word	0x01a6ab1f
 8007f84:	01e84800 	.word	0x01e84800

08007f88 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007f88:	b480      	push	{r7}
 8007f8a:	b083      	sub	sp, #12
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	689b      	ldr	r3, [r3, #8]
 8007f94:	f043 0201 	orr.w	r2, r3, #1
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007f9c:	2300      	movs	r3, #0
}
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	370c      	adds	r7, #12
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa8:	4770      	bx	lr

08007faa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007faa:	b480      	push	{r7}
 8007fac:	b083      	sub	sp, #12
 8007fae:	af00      	add	r7, sp, #0
 8007fb0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	689b      	ldr	r3, [r3, #8]
 8007fb6:	f023 0201 	bic.w	r2, r3, #1
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007fbe:	2300      	movs	r3, #0
}
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	370c      	adds	r7, #12
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fca:	4770      	bx	lr

08007fcc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b084      	sub	sp, #16
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
 8007fd4:	460b      	mov	r3, r1
 8007fd6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007fd8:	2300      	movs	r3, #0
 8007fda:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	68db      	ldr	r3, [r3, #12]
 8007fe0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007fe8:	78fb      	ldrb	r3, [r7, #3]
 8007fea:	2b01      	cmp	r3, #1
 8007fec:	d115      	bne.n	800801a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	68db      	ldr	r3, [r3, #12]
 8007ff2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007ffa:	200a      	movs	r0, #10
 8007ffc:	f7fa f92c 	bl	8002258 <HAL_Delay>
      ms += 10U;
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	330a      	adds	r3, #10
 8008004:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008006:	6878      	ldr	r0, [r7, #4]
 8008008:	f001 f939 	bl	800927e <USB_GetMode>
 800800c:	4603      	mov	r3, r0
 800800e:	2b01      	cmp	r3, #1
 8008010:	d01e      	beq.n	8008050 <USB_SetCurrentMode+0x84>
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	2bc7      	cmp	r3, #199	; 0xc7
 8008016:	d9f0      	bls.n	8007ffa <USB_SetCurrentMode+0x2e>
 8008018:	e01a      	b.n	8008050 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800801a:	78fb      	ldrb	r3, [r7, #3]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d115      	bne.n	800804c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	68db      	ldr	r3, [r3, #12]
 8008024:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800802c:	200a      	movs	r0, #10
 800802e:	f7fa f913 	bl	8002258 <HAL_Delay>
      ms += 10U;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	330a      	adds	r3, #10
 8008036:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008038:	6878      	ldr	r0, [r7, #4]
 800803a:	f001 f920 	bl	800927e <USB_GetMode>
 800803e:	4603      	mov	r3, r0
 8008040:	2b00      	cmp	r3, #0
 8008042:	d005      	beq.n	8008050 <USB_SetCurrentMode+0x84>
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	2bc7      	cmp	r3, #199	; 0xc7
 8008048:	d9f0      	bls.n	800802c <USB_SetCurrentMode+0x60>
 800804a:	e001      	b.n	8008050 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800804c:	2301      	movs	r3, #1
 800804e:	e005      	b.n	800805c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	2bc8      	cmp	r3, #200	; 0xc8
 8008054:	d101      	bne.n	800805a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008056:	2301      	movs	r3, #1
 8008058:	e000      	b.n	800805c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800805a:	2300      	movs	r3, #0
}
 800805c:	4618      	mov	r0, r3
 800805e:	3710      	adds	r7, #16
 8008060:	46bd      	mov	sp, r7
 8008062:	bd80      	pop	{r7, pc}

08008064 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008064:	b084      	sub	sp, #16
 8008066:	b580      	push	{r7, lr}
 8008068:	b086      	sub	sp, #24
 800806a:	af00      	add	r7, sp, #0
 800806c:	6078      	str	r0, [r7, #4]
 800806e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008072:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008076:	2300      	movs	r3, #0
 8008078:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800807e:	2300      	movs	r3, #0
 8008080:	613b      	str	r3, [r7, #16]
 8008082:	e009      	b.n	8008098 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008084:	687a      	ldr	r2, [r7, #4]
 8008086:	693b      	ldr	r3, [r7, #16]
 8008088:	3340      	adds	r3, #64	; 0x40
 800808a:	009b      	lsls	r3, r3, #2
 800808c:	4413      	add	r3, r2
 800808e:	2200      	movs	r2, #0
 8008090:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008092:	693b      	ldr	r3, [r7, #16]
 8008094:	3301      	adds	r3, #1
 8008096:	613b      	str	r3, [r7, #16]
 8008098:	693b      	ldr	r3, [r7, #16]
 800809a:	2b0e      	cmp	r3, #14
 800809c:	d9f2      	bls.n	8008084 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800809e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d11c      	bne.n	80080e0 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080ac:	685b      	ldr	r3, [r3, #4]
 80080ae:	68fa      	ldr	r2, [r7, #12]
 80080b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80080b4:	f043 0302 	orr.w	r3, r3, #2
 80080b8:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080be:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080ca:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080d6:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	639a      	str	r2, [r3, #56]	; 0x38
 80080de:	e00b      	b.n	80080f8 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080e4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080f0:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80080fe:	461a      	mov	r2, r3
 8008100:	2300      	movs	r3, #0
 8008102:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008104:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8008108:	2b01      	cmp	r3, #1
 800810a:	d10d      	bne.n	8008128 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800810c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008110:	2b00      	cmp	r3, #0
 8008112:	d104      	bne.n	800811e <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008114:	2100      	movs	r1, #0
 8008116:	6878      	ldr	r0, [r7, #4]
 8008118:	f000 f968 	bl	80083ec <USB_SetDevSpeed>
 800811c:	e008      	b.n	8008130 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800811e:	2101      	movs	r1, #1
 8008120:	6878      	ldr	r0, [r7, #4]
 8008122:	f000 f963 	bl	80083ec <USB_SetDevSpeed>
 8008126:	e003      	b.n	8008130 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008128:	2103      	movs	r1, #3
 800812a:	6878      	ldr	r0, [r7, #4]
 800812c:	f000 f95e 	bl	80083ec <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008130:	2110      	movs	r1, #16
 8008132:	6878      	ldr	r0, [r7, #4]
 8008134:	f000 f8fa 	bl	800832c <USB_FlushTxFifo>
 8008138:	4603      	mov	r3, r0
 800813a:	2b00      	cmp	r3, #0
 800813c:	d001      	beq.n	8008142 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800813e:	2301      	movs	r3, #1
 8008140:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008142:	6878      	ldr	r0, [r7, #4]
 8008144:	f000 f924 	bl	8008390 <USB_FlushRxFifo>
 8008148:	4603      	mov	r3, r0
 800814a:	2b00      	cmp	r3, #0
 800814c:	d001      	beq.n	8008152 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800814e:	2301      	movs	r3, #1
 8008150:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008158:	461a      	mov	r2, r3
 800815a:	2300      	movs	r3, #0
 800815c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008164:	461a      	mov	r2, r3
 8008166:	2300      	movs	r3, #0
 8008168:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008170:	461a      	mov	r2, r3
 8008172:	2300      	movs	r3, #0
 8008174:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008176:	2300      	movs	r3, #0
 8008178:	613b      	str	r3, [r7, #16]
 800817a:	e043      	b.n	8008204 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800817c:	693b      	ldr	r3, [r7, #16]
 800817e:	015a      	lsls	r2, r3, #5
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	4413      	add	r3, r2
 8008184:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800818e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008192:	d118      	bne.n	80081c6 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8008194:	693b      	ldr	r3, [r7, #16]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d10a      	bne.n	80081b0 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800819a:	693b      	ldr	r3, [r7, #16]
 800819c:	015a      	lsls	r2, r3, #5
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	4413      	add	r3, r2
 80081a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081a6:	461a      	mov	r2, r3
 80081a8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80081ac:	6013      	str	r3, [r2, #0]
 80081ae:	e013      	b.n	80081d8 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80081b0:	693b      	ldr	r3, [r7, #16]
 80081b2:	015a      	lsls	r2, r3, #5
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	4413      	add	r3, r2
 80081b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081bc:	461a      	mov	r2, r3
 80081be:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80081c2:	6013      	str	r3, [r2, #0]
 80081c4:	e008      	b.n	80081d8 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80081c6:	693b      	ldr	r3, [r7, #16]
 80081c8:	015a      	lsls	r2, r3, #5
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	4413      	add	r3, r2
 80081ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081d2:	461a      	mov	r2, r3
 80081d4:	2300      	movs	r3, #0
 80081d6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80081d8:	693b      	ldr	r3, [r7, #16]
 80081da:	015a      	lsls	r2, r3, #5
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	4413      	add	r3, r2
 80081e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081e4:	461a      	mov	r2, r3
 80081e6:	2300      	movs	r3, #0
 80081e8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80081ea:	693b      	ldr	r3, [r7, #16]
 80081ec:	015a      	lsls	r2, r3, #5
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	4413      	add	r3, r2
 80081f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081f6:	461a      	mov	r2, r3
 80081f8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80081fc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80081fe:	693b      	ldr	r3, [r7, #16]
 8008200:	3301      	adds	r3, #1
 8008202:	613b      	str	r3, [r7, #16]
 8008204:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008208:	461a      	mov	r2, r3
 800820a:	693b      	ldr	r3, [r7, #16]
 800820c:	4293      	cmp	r3, r2
 800820e:	d3b5      	bcc.n	800817c <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008210:	2300      	movs	r3, #0
 8008212:	613b      	str	r3, [r7, #16]
 8008214:	e043      	b.n	800829e <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008216:	693b      	ldr	r3, [r7, #16]
 8008218:	015a      	lsls	r2, r3, #5
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	4413      	add	r3, r2
 800821e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008228:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800822c:	d118      	bne.n	8008260 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800822e:	693b      	ldr	r3, [r7, #16]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d10a      	bne.n	800824a <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008234:	693b      	ldr	r3, [r7, #16]
 8008236:	015a      	lsls	r2, r3, #5
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	4413      	add	r3, r2
 800823c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008240:	461a      	mov	r2, r3
 8008242:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008246:	6013      	str	r3, [r2, #0]
 8008248:	e013      	b.n	8008272 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800824a:	693b      	ldr	r3, [r7, #16]
 800824c:	015a      	lsls	r2, r3, #5
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	4413      	add	r3, r2
 8008252:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008256:	461a      	mov	r2, r3
 8008258:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800825c:	6013      	str	r3, [r2, #0]
 800825e:	e008      	b.n	8008272 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008260:	693b      	ldr	r3, [r7, #16]
 8008262:	015a      	lsls	r2, r3, #5
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	4413      	add	r3, r2
 8008268:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800826c:	461a      	mov	r2, r3
 800826e:	2300      	movs	r3, #0
 8008270:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008272:	693b      	ldr	r3, [r7, #16]
 8008274:	015a      	lsls	r2, r3, #5
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	4413      	add	r3, r2
 800827a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800827e:	461a      	mov	r2, r3
 8008280:	2300      	movs	r3, #0
 8008282:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008284:	693b      	ldr	r3, [r7, #16]
 8008286:	015a      	lsls	r2, r3, #5
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	4413      	add	r3, r2
 800828c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008290:	461a      	mov	r2, r3
 8008292:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008296:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008298:	693b      	ldr	r3, [r7, #16]
 800829a:	3301      	adds	r3, #1
 800829c:	613b      	str	r3, [r7, #16]
 800829e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80082a2:	461a      	mov	r2, r3
 80082a4:	693b      	ldr	r3, [r7, #16]
 80082a6:	4293      	cmp	r3, r2
 80082a8:	d3b5      	bcc.n	8008216 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082b0:	691b      	ldr	r3, [r3, #16]
 80082b2:	68fa      	ldr	r2, [r7, #12]
 80082b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80082b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80082bc:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	2200      	movs	r2, #0
 80082c2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80082ca:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80082cc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d105      	bne.n	80082e0 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	699b      	ldr	r3, [r3, #24]
 80082d8:	f043 0210 	orr.w	r2, r3, #16
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	699a      	ldr	r2, [r3, #24]
 80082e4:	4b10      	ldr	r3, [pc, #64]	; (8008328 <USB_DevInit+0x2c4>)
 80082e6:	4313      	orrs	r3, r2
 80082e8:	687a      	ldr	r2, [r7, #4]
 80082ea:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80082ec:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d005      	beq.n	8008300 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	699b      	ldr	r3, [r3, #24]
 80082f8:	f043 0208 	orr.w	r2, r3, #8
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008300:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8008304:	2b01      	cmp	r3, #1
 8008306:	d107      	bne.n	8008318 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	699b      	ldr	r3, [r3, #24]
 800830c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008310:	f043 0304 	orr.w	r3, r3, #4
 8008314:	687a      	ldr	r2, [r7, #4]
 8008316:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008318:	7dfb      	ldrb	r3, [r7, #23]
}
 800831a:	4618      	mov	r0, r3
 800831c:	3718      	adds	r7, #24
 800831e:	46bd      	mov	sp, r7
 8008320:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008324:	b004      	add	sp, #16
 8008326:	4770      	bx	lr
 8008328:	803c3800 	.word	0x803c3800

0800832c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800832c:	b480      	push	{r7}
 800832e:	b085      	sub	sp, #20
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
 8008334:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008336:	2300      	movs	r3, #0
 8008338:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	3301      	adds	r3, #1
 800833e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8008346:	d901      	bls.n	800834c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008348:	2303      	movs	r3, #3
 800834a:	e01b      	b.n	8008384 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	691b      	ldr	r3, [r3, #16]
 8008350:	2b00      	cmp	r3, #0
 8008352:	daf2      	bge.n	800833a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008354:	2300      	movs	r3, #0
 8008356:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008358:	683b      	ldr	r3, [r7, #0]
 800835a:	019b      	lsls	r3, r3, #6
 800835c:	f043 0220 	orr.w	r2, r3, #32
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	3301      	adds	r3, #1
 8008368:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8008370:	d901      	bls.n	8008376 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008372:	2303      	movs	r3, #3
 8008374:	e006      	b.n	8008384 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	691b      	ldr	r3, [r3, #16]
 800837a:	f003 0320 	and.w	r3, r3, #32
 800837e:	2b20      	cmp	r3, #32
 8008380:	d0f0      	beq.n	8008364 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008382:	2300      	movs	r3, #0
}
 8008384:	4618      	mov	r0, r3
 8008386:	3714      	adds	r7, #20
 8008388:	46bd      	mov	sp, r7
 800838a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838e:	4770      	bx	lr

08008390 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008390:	b480      	push	{r7}
 8008392:	b085      	sub	sp, #20
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008398:	2300      	movs	r3, #0
 800839a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	3301      	adds	r3, #1
 80083a0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80083a8:	d901      	bls.n	80083ae <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80083aa:	2303      	movs	r3, #3
 80083ac:	e018      	b.n	80083e0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	691b      	ldr	r3, [r3, #16]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	daf2      	bge.n	800839c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80083b6:	2300      	movs	r3, #0
 80083b8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	2210      	movs	r2, #16
 80083be:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	3301      	adds	r3, #1
 80083c4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80083cc:	d901      	bls.n	80083d2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80083ce:	2303      	movs	r3, #3
 80083d0:	e006      	b.n	80083e0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	691b      	ldr	r3, [r3, #16]
 80083d6:	f003 0310 	and.w	r3, r3, #16
 80083da:	2b10      	cmp	r3, #16
 80083dc:	d0f0      	beq.n	80083c0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80083de:	2300      	movs	r3, #0
}
 80083e0:	4618      	mov	r0, r3
 80083e2:	3714      	adds	r7, #20
 80083e4:	46bd      	mov	sp, r7
 80083e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ea:	4770      	bx	lr

080083ec <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80083ec:	b480      	push	{r7}
 80083ee:	b085      	sub	sp, #20
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
 80083f4:	460b      	mov	r3, r1
 80083f6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008402:	681a      	ldr	r2, [r3, #0]
 8008404:	78fb      	ldrb	r3, [r7, #3]
 8008406:	68f9      	ldr	r1, [r7, #12]
 8008408:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800840c:	4313      	orrs	r3, r2
 800840e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008410:	2300      	movs	r3, #0
}
 8008412:	4618      	mov	r0, r3
 8008414:	3714      	adds	r7, #20
 8008416:	46bd      	mov	sp, r7
 8008418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841c:	4770      	bx	lr

0800841e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800841e:	b480      	push	{r7}
 8008420:	b087      	sub	sp, #28
 8008422:	af00      	add	r7, sp, #0
 8008424:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800842a:	693b      	ldr	r3, [r7, #16]
 800842c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008430:	689b      	ldr	r3, [r3, #8]
 8008432:	f003 0306 	and.w	r3, r3, #6
 8008436:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d102      	bne.n	8008444 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800843e:	2300      	movs	r3, #0
 8008440:	75fb      	strb	r3, [r7, #23]
 8008442:	e00a      	b.n	800845a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	2b02      	cmp	r3, #2
 8008448:	d002      	beq.n	8008450 <USB_GetDevSpeed+0x32>
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	2b06      	cmp	r3, #6
 800844e:	d102      	bne.n	8008456 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008450:	2302      	movs	r3, #2
 8008452:	75fb      	strb	r3, [r7, #23]
 8008454:	e001      	b.n	800845a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8008456:	230f      	movs	r3, #15
 8008458:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800845a:	7dfb      	ldrb	r3, [r7, #23]
}
 800845c:	4618      	mov	r0, r3
 800845e:	371c      	adds	r7, #28
 8008460:	46bd      	mov	sp, r7
 8008462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008466:	4770      	bx	lr

08008468 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008468:	b480      	push	{r7}
 800846a:	b085      	sub	sp, #20
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
 8008470:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	781b      	ldrb	r3, [r3, #0]
 800847a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800847c:	683b      	ldr	r3, [r7, #0]
 800847e:	785b      	ldrb	r3, [r3, #1]
 8008480:	2b01      	cmp	r3, #1
 8008482:	d13a      	bne.n	80084fa <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800848a:	69da      	ldr	r2, [r3, #28]
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	781b      	ldrb	r3, [r3, #0]
 8008490:	f003 030f 	and.w	r3, r3, #15
 8008494:	2101      	movs	r1, #1
 8008496:	fa01 f303 	lsl.w	r3, r1, r3
 800849a:	b29b      	uxth	r3, r3
 800849c:	68f9      	ldr	r1, [r7, #12]
 800849e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80084a2:	4313      	orrs	r3, r2
 80084a4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80084a6:	68bb      	ldr	r3, [r7, #8]
 80084a8:	015a      	lsls	r2, r3, #5
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	4413      	add	r3, r2
 80084ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d155      	bne.n	8008568 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80084bc:	68bb      	ldr	r3, [r7, #8]
 80084be:	015a      	lsls	r2, r3, #5
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	4413      	add	r3, r2
 80084c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084c8:	681a      	ldr	r2, [r3, #0]
 80084ca:	683b      	ldr	r3, [r7, #0]
 80084cc:	689b      	ldr	r3, [r3, #8]
 80084ce:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	791b      	ldrb	r3, [r3, #4]
 80084d6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80084d8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80084da:	68bb      	ldr	r3, [r7, #8]
 80084dc:	059b      	lsls	r3, r3, #22
 80084de:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80084e0:	4313      	orrs	r3, r2
 80084e2:	68ba      	ldr	r2, [r7, #8]
 80084e4:	0151      	lsls	r1, r2, #5
 80084e6:	68fa      	ldr	r2, [r7, #12]
 80084e8:	440a      	add	r2, r1
 80084ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80084ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80084f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80084f6:	6013      	str	r3, [r2, #0]
 80084f8:	e036      	b.n	8008568 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008500:	69da      	ldr	r2, [r3, #28]
 8008502:	683b      	ldr	r3, [r7, #0]
 8008504:	781b      	ldrb	r3, [r3, #0]
 8008506:	f003 030f 	and.w	r3, r3, #15
 800850a:	2101      	movs	r1, #1
 800850c:	fa01 f303 	lsl.w	r3, r1, r3
 8008510:	041b      	lsls	r3, r3, #16
 8008512:	68f9      	ldr	r1, [r7, #12]
 8008514:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008518:	4313      	orrs	r3, r2
 800851a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800851c:	68bb      	ldr	r3, [r7, #8]
 800851e:	015a      	lsls	r2, r3, #5
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	4413      	add	r3, r2
 8008524:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800852e:	2b00      	cmp	r3, #0
 8008530:	d11a      	bne.n	8008568 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008532:	68bb      	ldr	r3, [r7, #8]
 8008534:	015a      	lsls	r2, r3, #5
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	4413      	add	r3, r2
 800853a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800853e:	681a      	ldr	r2, [r3, #0]
 8008540:	683b      	ldr	r3, [r7, #0]
 8008542:	689b      	ldr	r3, [r3, #8]
 8008544:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008548:	683b      	ldr	r3, [r7, #0]
 800854a:	791b      	ldrb	r3, [r3, #4]
 800854c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800854e:	430b      	orrs	r3, r1
 8008550:	4313      	orrs	r3, r2
 8008552:	68ba      	ldr	r2, [r7, #8]
 8008554:	0151      	lsls	r1, r2, #5
 8008556:	68fa      	ldr	r2, [r7, #12]
 8008558:	440a      	add	r2, r1
 800855a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800855e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008562:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008566:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008568:	2300      	movs	r3, #0
}
 800856a:	4618      	mov	r0, r3
 800856c:	3714      	adds	r7, #20
 800856e:	46bd      	mov	sp, r7
 8008570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008574:	4770      	bx	lr
	...

08008578 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008578:	b480      	push	{r7}
 800857a:	b085      	sub	sp, #20
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
 8008580:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008586:	683b      	ldr	r3, [r7, #0]
 8008588:	781b      	ldrb	r3, [r3, #0]
 800858a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800858c:	683b      	ldr	r3, [r7, #0]
 800858e:	785b      	ldrb	r3, [r3, #1]
 8008590:	2b01      	cmp	r3, #1
 8008592:	d161      	bne.n	8008658 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008594:	68bb      	ldr	r3, [r7, #8]
 8008596:	015a      	lsls	r2, r3, #5
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	4413      	add	r3, r2
 800859c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80085a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80085aa:	d11f      	bne.n	80085ec <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80085ac:	68bb      	ldr	r3, [r7, #8]
 80085ae:	015a      	lsls	r2, r3, #5
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	4413      	add	r3, r2
 80085b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	68ba      	ldr	r2, [r7, #8]
 80085bc:	0151      	lsls	r1, r2, #5
 80085be:	68fa      	ldr	r2, [r7, #12]
 80085c0:	440a      	add	r2, r1
 80085c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80085c6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80085ca:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80085cc:	68bb      	ldr	r3, [r7, #8]
 80085ce:	015a      	lsls	r2, r3, #5
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	4413      	add	r3, r2
 80085d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	68ba      	ldr	r2, [r7, #8]
 80085dc:	0151      	lsls	r1, r2, #5
 80085de:	68fa      	ldr	r2, [r7, #12]
 80085e0:	440a      	add	r2, r1
 80085e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80085e6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80085ea:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80085f4:	683b      	ldr	r3, [r7, #0]
 80085f6:	781b      	ldrb	r3, [r3, #0]
 80085f8:	f003 030f 	and.w	r3, r3, #15
 80085fc:	2101      	movs	r1, #1
 80085fe:	fa01 f303 	lsl.w	r3, r1, r3
 8008602:	b29b      	uxth	r3, r3
 8008604:	43db      	mvns	r3, r3
 8008606:	68f9      	ldr	r1, [r7, #12]
 8008608:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800860c:	4013      	ands	r3, r2
 800860e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008616:	69da      	ldr	r2, [r3, #28]
 8008618:	683b      	ldr	r3, [r7, #0]
 800861a:	781b      	ldrb	r3, [r3, #0]
 800861c:	f003 030f 	and.w	r3, r3, #15
 8008620:	2101      	movs	r1, #1
 8008622:	fa01 f303 	lsl.w	r3, r1, r3
 8008626:	b29b      	uxth	r3, r3
 8008628:	43db      	mvns	r3, r3
 800862a:	68f9      	ldr	r1, [r7, #12]
 800862c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008630:	4013      	ands	r3, r2
 8008632:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008634:	68bb      	ldr	r3, [r7, #8]
 8008636:	015a      	lsls	r2, r3, #5
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	4413      	add	r3, r2
 800863c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008640:	681a      	ldr	r2, [r3, #0]
 8008642:	68bb      	ldr	r3, [r7, #8]
 8008644:	0159      	lsls	r1, r3, #5
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	440b      	add	r3, r1
 800864a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800864e:	4619      	mov	r1, r3
 8008650:	4b35      	ldr	r3, [pc, #212]	; (8008728 <USB_DeactivateEndpoint+0x1b0>)
 8008652:	4013      	ands	r3, r2
 8008654:	600b      	str	r3, [r1, #0]
 8008656:	e060      	b.n	800871a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008658:	68bb      	ldr	r3, [r7, #8]
 800865a:	015a      	lsls	r2, r3, #5
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	4413      	add	r3, r2
 8008660:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800866a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800866e:	d11f      	bne.n	80086b0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008670:	68bb      	ldr	r3, [r7, #8]
 8008672:	015a      	lsls	r2, r3, #5
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	4413      	add	r3, r2
 8008678:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	68ba      	ldr	r2, [r7, #8]
 8008680:	0151      	lsls	r1, r2, #5
 8008682:	68fa      	ldr	r2, [r7, #12]
 8008684:	440a      	add	r2, r1
 8008686:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800868a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800868e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008690:	68bb      	ldr	r3, [r7, #8]
 8008692:	015a      	lsls	r2, r3, #5
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	4413      	add	r3, r2
 8008698:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	68ba      	ldr	r2, [r7, #8]
 80086a0:	0151      	lsls	r1, r2, #5
 80086a2:	68fa      	ldr	r2, [r7, #12]
 80086a4:	440a      	add	r2, r1
 80086a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80086aa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80086ae:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	781b      	ldrb	r3, [r3, #0]
 80086bc:	f003 030f 	and.w	r3, r3, #15
 80086c0:	2101      	movs	r1, #1
 80086c2:	fa01 f303 	lsl.w	r3, r1, r3
 80086c6:	041b      	lsls	r3, r3, #16
 80086c8:	43db      	mvns	r3, r3
 80086ca:	68f9      	ldr	r1, [r7, #12]
 80086cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80086d0:	4013      	ands	r3, r2
 80086d2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086da:	69da      	ldr	r2, [r3, #28]
 80086dc:	683b      	ldr	r3, [r7, #0]
 80086de:	781b      	ldrb	r3, [r3, #0]
 80086e0:	f003 030f 	and.w	r3, r3, #15
 80086e4:	2101      	movs	r1, #1
 80086e6:	fa01 f303 	lsl.w	r3, r1, r3
 80086ea:	041b      	lsls	r3, r3, #16
 80086ec:	43db      	mvns	r3, r3
 80086ee:	68f9      	ldr	r1, [r7, #12]
 80086f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80086f4:	4013      	ands	r3, r2
 80086f6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80086f8:	68bb      	ldr	r3, [r7, #8]
 80086fa:	015a      	lsls	r2, r3, #5
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	4413      	add	r3, r2
 8008700:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008704:	681a      	ldr	r2, [r3, #0]
 8008706:	68bb      	ldr	r3, [r7, #8]
 8008708:	0159      	lsls	r1, r3, #5
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	440b      	add	r3, r1
 800870e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008712:	4619      	mov	r1, r3
 8008714:	4b05      	ldr	r3, [pc, #20]	; (800872c <USB_DeactivateEndpoint+0x1b4>)
 8008716:	4013      	ands	r3, r2
 8008718:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800871a:	2300      	movs	r3, #0
}
 800871c:	4618      	mov	r0, r3
 800871e:	3714      	adds	r7, #20
 8008720:	46bd      	mov	sp, r7
 8008722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008726:	4770      	bx	lr
 8008728:	ec337800 	.word	0xec337800
 800872c:	eff37800 	.word	0xeff37800

08008730 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008730:	b580      	push	{r7, lr}
 8008732:	b08a      	sub	sp, #40	; 0x28
 8008734:	af02      	add	r7, sp, #8
 8008736:	60f8      	str	r0, [r7, #12]
 8008738:	60b9      	str	r1, [r7, #8]
 800873a:	4613      	mov	r3, r2
 800873c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8008742:	68bb      	ldr	r3, [r7, #8]
 8008744:	781b      	ldrb	r3, [r3, #0]
 8008746:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008748:	68bb      	ldr	r3, [r7, #8]
 800874a:	785b      	ldrb	r3, [r3, #1]
 800874c:	2b01      	cmp	r3, #1
 800874e:	f040 817a 	bne.w	8008a46 <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008752:	68bb      	ldr	r3, [r7, #8]
 8008754:	691b      	ldr	r3, [r3, #16]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d132      	bne.n	80087c0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800875a:	69bb      	ldr	r3, [r7, #24]
 800875c:	015a      	lsls	r2, r3, #5
 800875e:	69fb      	ldr	r3, [r7, #28]
 8008760:	4413      	add	r3, r2
 8008762:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008766:	691b      	ldr	r3, [r3, #16]
 8008768:	69ba      	ldr	r2, [r7, #24]
 800876a:	0151      	lsls	r1, r2, #5
 800876c:	69fa      	ldr	r2, [r7, #28]
 800876e:	440a      	add	r2, r1
 8008770:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008774:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008778:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800877c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800877e:	69bb      	ldr	r3, [r7, #24]
 8008780:	015a      	lsls	r2, r3, #5
 8008782:	69fb      	ldr	r3, [r7, #28]
 8008784:	4413      	add	r3, r2
 8008786:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800878a:	691b      	ldr	r3, [r3, #16]
 800878c:	69ba      	ldr	r2, [r7, #24]
 800878e:	0151      	lsls	r1, r2, #5
 8008790:	69fa      	ldr	r2, [r7, #28]
 8008792:	440a      	add	r2, r1
 8008794:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008798:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800879c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800879e:	69bb      	ldr	r3, [r7, #24]
 80087a0:	015a      	lsls	r2, r3, #5
 80087a2:	69fb      	ldr	r3, [r7, #28]
 80087a4:	4413      	add	r3, r2
 80087a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087aa:	691b      	ldr	r3, [r3, #16]
 80087ac:	69ba      	ldr	r2, [r7, #24]
 80087ae:	0151      	lsls	r1, r2, #5
 80087b0:	69fa      	ldr	r2, [r7, #28]
 80087b2:	440a      	add	r2, r1
 80087b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80087b8:	0cdb      	lsrs	r3, r3, #19
 80087ba:	04db      	lsls	r3, r3, #19
 80087bc:	6113      	str	r3, [r2, #16]
 80087be:	e092      	b.n	80088e6 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80087c0:	69bb      	ldr	r3, [r7, #24]
 80087c2:	015a      	lsls	r2, r3, #5
 80087c4:	69fb      	ldr	r3, [r7, #28]
 80087c6:	4413      	add	r3, r2
 80087c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087cc:	691b      	ldr	r3, [r3, #16]
 80087ce:	69ba      	ldr	r2, [r7, #24]
 80087d0:	0151      	lsls	r1, r2, #5
 80087d2:	69fa      	ldr	r2, [r7, #28]
 80087d4:	440a      	add	r2, r1
 80087d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80087da:	0cdb      	lsrs	r3, r3, #19
 80087dc:	04db      	lsls	r3, r3, #19
 80087de:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80087e0:	69bb      	ldr	r3, [r7, #24]
 80087e2:	015a      	lsls	r2, r3, #5
 80087e4:	69fb      	ldr	r3, [r7, #28]
 80087e6:	4413      	add	r3, r2
 80087e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087ec:	691b      	ldr	r3, [r3, #16]
 80087ee:	69ba      	ldr	r2, [r7, #24]
 80087f0:	0151      	lsls	r1, r2, #5
 80087f2:	69fa      	ldr	r2, [r7, #28]
 80087f4:	440a      	add	r2, r1
 80087f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80087fa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80087fe:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008802:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8008804:	69bb      	ldr	r3, [r7, #24]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d11a      	bne.n	8008840 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800880a:	68bb      	ldr	r3, [r7, #8]
 800880c:	691a      	ldr	r2, [r3, #16]
 800880e:	68bb      	ldr	r3, [r7, #8]
 8008810:	689b      	ldr	r3, [r3, #8]
 8008812:	429a      	cmp	r2, r3
 8008814:	d903      	bls.n	800881e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8008816:	68bb      	ldr	r3, [r7, #8]
 8008818:	689a      	ldr	r2, [r3, #8]
 800881a:	68bb      	ldr	r3, [r7, #8]
 800881c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800881e:	69bb      	ldr	r3, [r7, #24]
 8008820:	015a      	lsls	r2, r3, #5
 8008822:	69fb      	ldr	r3, [r7, #28]
 8008824:	4413      	add	r3, r2
 8008826:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800882a:	691b      	ldr	r3, [r3, #16]
 800882c:	69ba      	ldr	r2, [r7, #24]
 800882e:	0151      	lsls	r1, r2, #5
 8008830:	69fa      	ldr	r2, [r7, #28]
 8008832:	440a      	add	r2, r1
 8008834:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008838:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800883c:	6113      	str	r3, [r2, #16]
 800883e:	e01b      	b.n	8008878 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008840:	69bb      	ldr	r3, [r7, #24]
 8008842:	015a      	lsls	r2, r3, #5
 8008844:	69fb      	ldr	r3, [r7, #28]
 8008846:	4413      	add	r3, r2
 8008848:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800884c:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800884e:	68bb      	ldr	r3, [r7, #8]
 8008850:	6919      	ldr	r1, [r3, #16]
 8008852:	68bb      	ldr	r3, [r7, #8]
 8008854:	689b      	ldr	r3, [r3, #8]
 8008856:	440b      	add	r3, r1
 8008858:	1e59      	subs	r1, r3, #1
 800885a:	68bb      	ldr	r3, [r7, #8]
 800885c:	689b      	ldr	r3, [r3, #8]
 800885e:	fbb1 f3f3 	udiv	r3, r1, r3
 8008862:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008864:	4ba2      	ldr	r3, [pc, #648]	; (8008af0 <USB_EPStartXfer+0x3c0>)
 8008866:	400b      	ands	r3, r1
 8008868:	69b9      	ldr	r1, [r7, #24]
 800886a:	0148      	lsls	r0, r1, #5
 800886c:	69f9      	ldr	r1, [r7, #28]
 800886e:	4401      	add	r1, r0
 8008870:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008874:	4313      	orrs	r3, r2
 8008876:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008878:	69bb      	ldr	r3, [r7, #24]
 800887a:	015a      	lsls	r2, r3, #5
 800887c:	69fb      	ldr	r3, [r7, #28]
 800887e:	4413      	add	r3, r2
 8008880:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008884:	691a      	ldr	r2, [r3, #16]
 8008886:	68bb      	ldr	r3, [r7, #8]
 8008888:	691b      	ldr	r3, [r3, #16]
 800888a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800888e:	69b9      	ldr	r1, [r7, #24]
 8008890:	0148      	lsls	r0, r1, #5
 8008892:	69f9      	ldr	r1, [r7, #28]
 8008894:	4401      	add	r1, r0
 8008896:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800889a:	4313      	orrs	r3, r2
 800889c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800889e:	68bb      	ldr	r3, [r7, #8]
 80088a0:	791b      	ldrb	r3, [r3, #4]
 80088a2:	2b01      	cmp	r3, #1
 80088a4:	d11f      	bne.n	80088e6 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80088a6:	69bb      	ldr	r3, [r7, #24]
 80088a8:	015a      	lsls	r2, r3, #5
 80088aa:	69fb      	ldr	r3, [r7, #28]
 80088ac:	4413      	add	r3, r2
 80088ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088b2:	691b      	ldr	r3, [r3, #16]
 80088b4:	69ba      	ldr	r2, [r7, #24]
 80088b6:	0151      	lsls	r1, r2, #5
 80088b8:	69fa      	ldr	r2, [r7, #28]
 80088ba:	440a      	add	r2, r1
 80088bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80088c0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80088c4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80088c6:	69bb      	ldr	r3, [r7, #24]
 80088c8:	015a      	lsls	r2, r3, #5
 80088ca:	69fb      	ldr	r3, [r7, #28]
 80088cc:	4413      	add	r3, r2
 80088ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088d2:	691b      	ldr	r3, [r3, #16]
 80088d4:	69ba      	ldr	r2, [r7, #24]
 80088d6:	0151      	lsls	r1, r2, #5
 80088d8:	69fa      	ldr	r2, [r7, #28]
 80088da:	440a      	add	r2, r1
 80088dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80088e0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80088e4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80088e6:	79fb      	ldrb	r3, [r7, #7]
 80088e8:	2b01      	cmp	r3, #1
 80088ea:	d14b      	bne.n	8008984 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80088ec:	68bb      	ldr	r3, [r7, #8]
 80088ee:	69db      	ldr	r3, [r3, #28]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d009      	beq.n	8008908 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80088f4:	69bb      	ldr	r3, [r7, #24]
 80088f6:	015a      	lsls	r2, r3, #5
 80088f8:	69fb      	ldr	r3, [r7, #28]
 80088fa:	4413      	add	r3, r2
 80088fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008900:	461a      	mov	r2, r3
 8008902:	68bb      	ldr	r3, [r7, #8]
 8008904:	69db      	ldr	r3, [r3, #28]
 8008906:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008908:	68bb      	ldr	r3, [r7, #8]
 800890a:	791b      	ldrb	r3, [r3, #4]
 800890c:	2b01      	cmp	r3, #1
 800890e:	d128      	bne.n	8008962 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008910:	69fb      	ldr	r3, [r7, #28]
 8008912:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008916:	689b      	ldr	r3, [r3, #8]
 8008918:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800891c:	2b00      	cmp	r3, #0
 800891e:	d110      	bne.n	8008942 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008920:	69bb      	ldr	r3, [r7, #24]
 8008922:	015a      	lsls	r2, r3, #5
 8008924:	69fb      	ldr	r3, [r7, #28]
 8008926:	4413      	add	r3, r2
 8008928:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	69ba      	ldr	r2, [r7, #24]
 8008930:	0151      	lsls	r1, r2, #5
 8008932:	69fa      	ldr	r2, [r7, #28]
 8008934:	440a      	add	r2, r1
 8008936:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800893a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800893e:	6013      	str	r3, [r2, #0]
 8008940:	e00f      	b.n	8008962 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008942:	69bb      	ldr	r3, [r7, #24]
 8008944:	015a      	lsls	r2, r3, #5
 8008946:	69fb      	ldr	r3, [r7, #28]
 8008948:	4413      	add	r3, r2
 800894a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	69ba      	ldr	r2, [r7, #24]
 8008952:	0151      	lsls	r1, r2, #5
 8008954:	69fa      	ldr	r2, [r7, #28]
 8008956:	440a      	add	r2, r1
 8008958:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800895c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008960:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008962:	69bb      	ldr	r3, [r7, #24]
 8008964:	015a      	lsls	r2, r3, #5
 8008966:	69fb      	ldr	r3, [r7, #28]
 8008968:	4413      	add	r3, r2
 800896a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	69ba      	ldr	r2, [r7, #24]
 8008972:	0151      	lsls	r1, r2, #5
 8008974:	69fa      	ldr	r2, [r7, #28]
 8008976:	440a      	add	r2, r1
 8008978:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800897c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008980:	6013      	str	r3, [r2, #0]
 8008982:	e165      	b.n	8008c50 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008984:	69bb      	ldr	r3, [r7, #24]
 8008986:	015a      	lsls	r2, r3, #5
 8008988:	69fb      	ldr	r3, [r7, #28]
 800898a:	4413      	add	r3, r2
 800898c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	69ba      	ldr	r2, [r7, #24]
 8008994:	0151      	lsls	r1, r2, #5
 8008996:	69fa      	ldr	r2, [r7, #28]
 8008998:	440a      	add	r2, r1
 800899a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800899e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80089a2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80089a4:	68bb      	ldr	r3, [r7, #8]
 80089a6:	791b      	ldrb	r3, [r3, #4]
 80089a8:	2b01      	cmp	r3, #1
 80089aa:	d015      	beq.n	80089d8 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80089ac:	68bb      	ldr	r3, [r7, #8]
 80089ae:	691b      	ldr	r3, [r3, #16]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	f000 814d 	beq.w	8008c50 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80089b6:	69fb      	ldr	r3, [r7, #28]
 80089b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80089be:	68bb      	ldr	r3, [r7, #8]
 80089c0:	781b      	ldrb	r3, [r3, #0]
 80089c2:	f003 030f 	and.w	r3, r3, #15
 80089c6:	2101      	movs	r1, #1
 80089c8:	fa01 f303 	lsl.w	r3, r1, r3
 80089cc:	69f9      	ldr	r1, [r7, #28]
 80089ce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80089d2:	4313      	orrs	r3, r2
 80089d4:	634b      	str	r3, [r1, #52]	; 0x34
 80089d6:	e13b      	b.n	8008c50 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80089d8:	69fb      	ldr	r3, [r7, #28]
 80089da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089de:	689b      	ldr	r3, [r3, #8]
 80089e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d110      	bne.n	8008a0a <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80089e8:	69bb      	ldr	r3, [r7, #24]
 80089ea:	015a      	lsls	r2, r3, #5
 80089ec:	69fb      	ldr	r3, [r7, #28]
 80089ee:	4413      	add	r3, r2
 80089f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	69ba      	ldr	r2, [r7, #24]
 80089f8:	0151      	lsls	r1, r2, #5
 80089fa:	69fa      	ldr	r2, [r7, #28]
 80089fc:	440a      	add	r2, r1
 80089fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a02:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008a06:	6013      	str	r3, [r2, #0]
 8008a08:	e00f      	b.n	8008a2a <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008a0a:	69bb      	ldr	r3, [r7, #24]
 8008a0c:	015a      	lsls	r2, r3, #5
 8008a0e:	69fb      	ldr	r3, [r7, #28]
 8008a10:	4413      	add	r3, r2
 8008a12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	69ba      	ldr	r2, [r7, #24]
 8008a1a:	0151      	lsls	r1, r2, #5
 8008a1c:	69fa      	ldr	r2, [r7, #28]
 8008a1e:	440a      	add	r2, r1
 8008a20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008a28:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008a2a:	68bb      	ldr	r3, [r7, #8]
 8008a2c:	68d9      	ldr	r1, [r3, #12]
 8008a2e:	68bb      	ldr	r3, [r7, #8]
 8008a30:	781a      	ldrb	r2, [r3, #0]
 8008a32:	68bb      	ldr	r3, [r7, #8]
 8008a34:	691b      	ldr	r3, [r3, #16]
 8008a36:	b298      	uxth	r0, r3
 8008a38:	79fb      	ldrb	r3, [r7, #7]
 8008a3a:	9300      	str	r3, [sp, #0]
 8008a3c:	4603      	mov	r3, r0
 8008a3e:	68f8      	ldr	r0, [r7, #12]
 8008a40:	f000 f9b8 	bl	8008db4 <USB_WritePacket>
 8008a44:	e104      	b.n	8008c50 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008a46:	69bb      	ldr	r3, [r7, #24]
 8008a48:	015a      	lsls	r2, r3, #5
 8008a4a:	69fb      	ldr	r3, [r7, #28]
 8008a4c:	4413      	add	r3, r2
 8008a4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a52:	691b      	ldr	r3, [r3, #16]
 8008a54:	69ba      	ldr	r2, [r7, #24]
 8008a56:	0151      	lsls	r1, r2, #5
 8008a58:	69fa      	ldr	r2, [r7, #28]
 8008a5a:	440a      	add	r2, r1
 8008a5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008a60:	0cdb      	lsrs	r3, r3, #19
 8008a62:	04db      	lsls	r3, r3, #19
 8008a64:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008a66:	69bb      	ldr	r3, [r7, #24]
 8008a68:	015a      	lsls	r2, r3, #5
 8008a6a:	69fb      	ldr	r3, [r7, #28]
 8008a6c:	4413      	add	r3, r2
 8008a6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a72:	691b      	ldr	r3, [r3, #16]
 8008a74:	69ba      	ldr	r2, [r7, #24]
 8008a76:	0151      	lsls	r1, r2, #5
 8008a78:	69fa      	ldr	r2, [r7, #28]
 8008a7a:	440a      	add	r2, r1
 8008a7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008a80:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008a84:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008a88:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8008a8a:	69bb      	ldr	r3, [r7, #24]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d131      	bne.n	8008af4 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 8008a90:	68bb      	ldr	r3, [r7, #8]
 8008a92:	691b      	ldr	r3, [r3, #16]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d003      	beq.n	8008aa0 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 8008a98:	68bb      	ldr	r3, [r7, #8]
 8008a9a:	689a      	ldr	r2, [r3, #8]
 8008a9c:	68bb      	ldr	r3, [r7, #8]
 8008a9e:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8008aa0:	68bb      	ldr	r3, [r7, #8]
 8008aa2:	689a      	ldr	r2, [r3, #8]
 8008aa4:	68bb      	ldr	r3, [r7, #8]
 8008aa6:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8008aa8:	69bb      	ldr	r3, [r7, #24]
 8008aaa:	015a      	lsls	r2, r3, #5
 8008aac:	69fb      	ldr	r3, [r7, #28]
 8008aae:	4413      	add	r3, r2
 8008ab0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ab4:	691a      	ldr	r2, [r3, #16]
 8008ab6:	68bb      	ldr	r3, [r7, #8]
 8008ab8:	6a1b      	ldr	r3, [r3, #32]
 8008aba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008abe:	69b9      	ldr	r1, [r7, #24]
 8008ac0:	0148      	lsls	r0, r1, #5
 8008ac2:	69f9      	ldr	r1, [r7, #28]
 8008ac4:	4401      	add	r1, r0
 8008ac6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008aca:	4313      	orrs	r3, r2
 8008acc:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008ace:	69bb      	ldr	r3, [r7, #24]
 8008ad0:	015a      	lsls	r2, r3, #5
 8008ad2:	69fb      	ldr	r3, [r7, #28]
 8008ad4:	4413      	add	r3, r2
 8008ad6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ada:	691b      	ldr	r3, [r3, #16]
 8008adc:	69ba      	ldr	r2, [r7, #24]
 8008ade:	0151      	lsls	r1, r2, #5
 8008ae0:	69fa      	ldr	r2, [r7, #28]
 8008ae2:	440a      	add	r2, r1
 8008ae4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008ae8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008aec:	6113      	str	r3, [r2, #16]
 8008aee:	e061      	b.n	8008bb4 <USB_EPStartXfer+0x484>
 8008af0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8008af4:	68bb      	ldr	r3, [r7, #8]
 8008af6:	691b      	ldr	r3, [r3, #16]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d123      	bne.n	8008b44 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008afc:	69bb      	ldr	r3, [r7, #24]
 8008afe:	015a      	lsls	r2, r3, #5
 8008b00:	69fb      	ldr	r3, [r7, #28]
 8008b02:	4413      	add	r3, r2
 8008b04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b08:	691a      	ldr	r2, [r3, #16]
 8008b0a:	68bb      	ldr	r3, [r7, #8]
 8008b0c:	689b      	ldr	r3, [r3, #8]
 8008b0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008b12:	69b9      	ldr	r1, [r7, #24]
 8008b14:	0148      	lsls	r0, r1, #5
 8008b16:	69f9      	ldr	r1, [r7, #28]
 8008b18:	4401      	add	r1, r0
 8008b1a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008b1e:	4313      	orrs	r3, r2
 8008b20:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008b22:	69bb      	ldr	r3, [r7, #24]
 8008b24:	015a      	lsls	r2, r3, #5
 8008b26:	69fb      	ldr	r3, [r7, #28]
 8008b28:	4413      	add	r3, r2
 8008b2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b2e:	691b      	ldr	r3, [r3, #16]
 8008b30:	69ba      	ldr	r2, [r7, #24]
 8008b32:	0151      	lsls	r1, r2, #5
 8008b34:	69fa      	ldr	r2, [r7, #28]
 8008b36:	440a      	add	r2, r1
 8008b38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008b3c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008b40:	6113      	str	r3, [r2, #16]
 8008b42:	e037      	b.n	8008bb4 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008b44:	68bb      	ldr	r3, [r7, #8]
 8008b46:	691a      	ldr	r2, [r3, #16]
 8008b48:	68bb      	ldr	r3, [r7, #8]
 8008b4a:	689b      	ldr	r3, [r3, #8]
 8008b4c:	4413      	add	r3, r2
 8008b4e:	1e5a      	subs	r2, r3, #1
 8008b50:	68bb      	ldr	r3, [r7, #8]
 8008b52:	689b      	ldr	r3, [r3, #8]
 8008b54:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b58:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8008b5a:	68bb      	ldr	r3, [r7, #8]
 8008b5c:	689b      	ldr	r3, [r3, #8]
 8008b5e:	8afa      	ldrh	r2, [r7, #22]
 8008b60:	fb03 f202 	mul.w	r2, r3, r2
 8008b64:	68bb      	ldr	r3, [r7, #8]
 8008b66:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008b68:	69bb      	ldr	r3, [r7, #24]
 8008b6a:	015a      	lsls	r2, r3, #5
 8008b6c:	69fb      	ldr	r3, [r7, #28]
 8008b6e:	4413      	add	r3, r2
 8008b70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b74:	691a      	ldr	r2, [r3, #16]
 8008b76:	8afb      	ldrh	r3, [r7, #22]
 8008b78:	04d9      	lsls	r1, r3, #19
 8008b7a:	4b38      	ldr	r3, [pc, #224]	; (8008c5c <USB_EPStartXfer+0x52c>)
 8008b7c:	400b      	ands	r3, r1
 8008b7e:	69b9      	ldr	r1, [r7, #24]
 8008b80:	0148      	lsls	r0, r1, #5
 8008b82:	69f9      	ldr	r1, [r7, #28]
 8008b84:	4401      	add	r1, r0
 8008b86:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008b8a:	4313      	orrs	r3, r2
 8008b8c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8008b8e:	69bb      	ldr	r3, [r7, #24]
 8008b90:	015a      	lsls	r2, r3, #5
 8008b92:	69fb      	ldr	r3, [r7, #28]
 8008b94:	4413      	add	r3, r2
 8008b96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b9a:	691a      	ldr	r2, [r3, #16]
 8008b9c:	68bb      	ldr	r3, [r7, #8]
 8008b9e:	6a1b      	ldr	r3, [r3, #32]
 8008ba0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008ba4:	69b9      	ldr	r1, [r7, #24]
 8008ba6:	0148      	lsls	r0, r1, #5
 8008ba8:	69f9      	ldr	r1, [r7, #28]
 8008baa:	4401      	add	r1, r0
 8008bac:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008bb0:	4313      	orrs	r3, r2
 8008bb2:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8008bb4:	79fb      	ldrb	r3, [r7, #7]
 8008bb6:	2b01      	cmp	r3, #1
 8008bb8:	d10d      	bne.n	8008bd6 <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008bba:	68bb      	ldr	r3, [r7, #8]
 8008bbc:	68db      	ldr	r3, [r3, #12]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d009      	beq.n	8008bd6 <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008bc2:	68bb      	ldr	r3, [r7, #8]
 8008bc4:	68d9      	ldr	r1, [r3, #12]
 8008bc6:	69bb      	ldr	r3, [r7, #24]
 8008bc8:	015a      	lsls	r2, r3, #5
 8008bca:	69fb      	ldr	r3, [r7, #28]
 8008bcc:	4413      	add	r3, r2
 8008bce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bd2:	460a      	mov	r2, r1
 8008bd4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008bd6:	68bb      	ldr	r3, [r7, #8]
 8008bd8:	791b      	ldrb	r3, [r3, #4]
 8008bda:	2b01      	cmp	r3, #1
 8008bdc:	d128      	bne.n	8008c30 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008bde:	69fb      	ldr	r3, [r7, #28]
 8008be0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008be4:	689b      	ldr	r3, [r3, #8]
 8008be6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d110      	bne.n	8008c10 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008bee:	69bb      	ldr	r3, [r7, #24]
 8008bf0:	015a      	lsls	r2, r3, #5
 8008bf2:	69fb      	ldr	r3, [r7, #28]
 8008bf4:	4413      	add	r3, r2
 8008bf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	69ba      	ldr	r2, [r7, #24]
 8008bfe:	0151      	lsls	r1, r2, #5
 8008c00:	69fa      	ldr	r2, [r7, #28]
 8008c02:	440a      	add	r2, r1
 8008c04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c08:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008c0c:	6013      	str	r3, [r2, #0]
 8008c0e:	e00f      	b.n	8008c30 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008c10:	69bb      	ldr	r3, [r7, #24]
 8008c12:	015a      	lsls	r2, r3, #5
 8008c14:	69fb      	ldr	r3, [r7, #28]
 8008c16:	4413      	add	r3, r2
 8008c18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	69ba      	ldr	r2, [r7, #24]
 8008c20:	0151      	lsls	r1, r2, #5
 8008c22:	69fa      	ldr	r2, [r7, #28]
 8008c24:	440a      	add	r2, r1
 8008c26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008c2e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008c30:	69bb      	ldr	r3, [r7, #24]
 8008c32:	015a      	lsls	r2, r3, #5
 8008c34:	69fb      	ldr	r3, [r7, #28]
 8008c36:	4413      	add	r3, r2
 8008c38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	69ba      	ldr	r2, [r7, #24]
 8008c40:	0151      	lsls	r1, r2, #5
 8008c42:	69fa      	ldr	r2, [r7, #28]
 8008c44:	440a      	add	r2, r1
 8008c46:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c4a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008c4e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008c50:	2300      	movs	r3, #0
}
 8008c52:	4618      	mov	r0, r3
 8008c54:	3720      	adds	r7, #32
 8008c56:	46bd      	mov	sp, r7
 8008c58:	bd80      	pop	{r7, pc}
 8008c5a:	bf00      	nop
 8008c5c:	1ff80000 	.word	0x1ff80000

08008c60 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008c60:	b480      	push	{r7}
 8008c62:	b087      	sub	sp, #28
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
 8008c68:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8008c6e:	2300      	movs	r3, #0
 8008c70:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008c76:	683b      	ldr	r3, [r7, #0]
 8008c78:	785b      	ldrb	r3, [r3, #1]
 8008c7a:	2b01      	cmp	r3, #1
 8008c7c:	d14a      	bne.n	8008d14 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008c7e:	683b      	ldr	r3, [r7, #0]
 8008c80:	781b      	ldrb	r3, [r3, #0]
 8008c82:	015a      	lsls	r2, r3, #5
 8008c84:	693b      	ldr	r3, [r7, #16]
 8008c86:	4413      	add	r3, r2
 8008c88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008c92:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008c96:	f040 8086 	bne.w	8008da6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8008c9a:	683b      	ldr	r3, [r7, #0]
 8008c9c:	781b      	ldrb	r3, [r3, #0]
 8008c9e:	015a      	lsls	r2, r3, #5
 8008ca0:	693b      	ldr	r3, [r7, #16]
 8008ca2:	4413      	add	r3, r2
 8008ca4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	683a      	ldr	r2, [r7, #0]
 8008cac:	7812      	ldrb	r2, [r2, #0]
 8008cae:	0151      	lsls	r1, r2, #5
 8008cb0:	693a      	ldr	r2, [r7, #16]
 8008cb2:	440a      	add	r2, r1
 8008cb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008cb8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008cbc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8008cbe:	683b      	ldr	r3, [r7, #0]
 8008cc0:	781b      	ldrb	r3, [r3, #0]
 8008cc2:	015a      	lsls	r2, r3, #5
 8008cc4:	693b      	ldr	r3, [r7, #16]
 8008cc6:	4413      	add	r3, r2
 8008cc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	683a      	ldr	r2, [r7, #0]
 8008cd0:	7812      	ldrb	r2, [r2, #0]
 8008cd2:	0151      	lsls	r1, r2, #5
 8008cd4:	693a      	ldr	r2, [r7, #16]
 8008cd6:	440a      	add	r2, r1
 8008cd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008cdc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008ce0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	3301      	adds	r3, #1
 8008ce6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	f242 7210 	movw	r2, #10000	; 0x2710
 8008cee:	4293      	cmp	r3, r2
 8008cf0:	d902      	bls.n	8008cf8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8008cf2:	2301      	movs	r3, #1
 8008cf4:	75fb      	strb	r3, [r7, #23]
          break;
 8008cf6:	e056      	b.n	8008da6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8008cf8:	683b      	ldr	r3, [r7, #0]
 8008cfa:	781b      	ldrb	r3, [r3, #0]
 8008cfc:	015a      	lsls	r2, r3, #5
 8008cfe:	693b      	ldr	r3, [r7, #16]
 8008d00:	4413      	add	r3, r2
 8008d02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008d0c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008d10:	d0e7      	beq.n	8008ce2 <USB_EPStopXfer+0x82>
 8008d12:	e048      	b.n	8008da6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008d14:	683b      	ldr	r3, [r7, #0]
 8008d16:	781b      	ldrb	r3, [r3, #0]
 8008d18:	015a      	lsls	r2, r3, #5
 8008d1a:	693b      	ldr	r3, [r7, #16]
 8008d1c:	4413      	add	r3, r2
 8008d1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008d28:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008d2c:	d13b      	bne.n	8008da6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8008d2e:	683b      	ldr	r3, [r7, #0]
 8008d30:	781b      	ldrb	r3, [r3, #0]
 8008d32:	015a      	lsls	r2, r3, #5
 8008d34:	693b      	ldr	r3, [r7, #16]
 8008d36:	4413      	add	r3, r2
 8008d38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	683a      	ldr	r2, [r7, #0]
 8008d40:	7812      	ldrb	r2, [r2, #0]
 8008d42:	0151      	lsls	r1, r2, #5
 8008d44:	693a      	ldr	r2, [r7, #16]
 8008d46:	440a      	add	r2, r1
 8008d48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008d4c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008d50:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8008d52:	683b      	ldr	r3, [r7, #0]
 8008d54:	781b      	ldrb	r3, [r3, #0]
 8008d56:	015a      	lsls	r2, r3, #5
 8008d58:	693b      	ldr	r3, [r7, #16]
 8008d5a:	4413      	add	r3, r2
 8008d5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	683a      	ldr	r2, [r7, #0]
 8008d64:	7812      	ldrb	r2, [r2, #0]
 8008d66:	0151      	lsls	r1, r2, #5
 8008d68:	693a      	ldr	r2, [r7, #16]
 8008d6a:	440a      	add	r2, r1
 8008d6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008d70:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008d74:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	3301      	adds	r3, #1
 8008d7a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	f242 7210 	movw	r2, #10000	; 0x2710
 8008d82:	4293      	cmp	r3, r2
 8008d84:	d902      	bls.n	8008d8c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8008d86:	2301      	movs	r3, #1
 8008d88:	75fb      	strb	r3, [r7, #23]
          break;
 8008d8a:	e00c      	b.n	8008da6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	781b      	ldrb	r3, [r3, #0]
 8008d90:	015a      	lsls	r2, r3, #5
 8008d92:	693b      	ldr	r3, [r7, #16]
 8008d94:	4413      	add	r3, r2
 8008d96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008da0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008da4:	d0e7      	beq.n	8008d76 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8008da6:	7dfb      	ldrb	r3, [r7, #23]
}
 8008da8:	4618      	mov	r0, r3
 8008daa:	371c      	adds	r7, #28
 8008dac:	46bd      	mov	sp, r7
 8008dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db2:	4770      	bx	lr

08008db4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008db4:	b480      	push	{r7}
 8008db6:	b089      	sub	sp, #36	; 0x24
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	60f8      	str	r0, [r7, #12]
 8008dbc:	60b9      	str	r1, [r7, #8]
 8008dbe:	4611      	mov	r1, r2
 8008dc0:	461a      	mov	r2, r3
 8008dc2:	460b      	mov	r3, r1
 8008dc4:	71fb      	strb	r3, [r7, #7]
 8008dc6:	4613      	mov	r3, r2
 8008dc8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008dce:	68bb      	ldr	r3, [r7, #8]
 8008dd0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008dd2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d123      	bne.n	8008e22 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008dda:	88bb      	ldrh	r3, [r7, #4]
 8008ddc:	3303      	adds	r3, #3
 8008dde:	089b      	lsrs	r3, r3, #2
 8008de0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008de2:	2300      	movs	r3, #0
 8008de4:	61bb      	str	r3, [r7, #24]
 8008de6:	e018      	b.n	8008e1a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008de8:	79fb      	ldrb	r3, [r7, #7]
 8008dea:	031a      	lsls	r2, r3, #12
 8008dec:	697b      	ldr	r3, [r7, #20]
 8008dee:	4413      	add	r3, r2
 8008df0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008df4:	461a      	mov	r2, r3
 8008df6:	69fb      	ldr	r3, [r7, #28]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008dfc:	69fb      	ldr	r3, [r7, #28]
 8008dfe:	3301      	adds	r3, #1
 8008e00:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008e02:	69fb      	ldr	r3, [r7, #28]
 8008e04:	3301      	adds	r3, #1
 8008e06:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008e08:	69fb      	ldr	r3, [r7, #28]
 8008e0a:	3301      	adds	r3, #1
 8008e0c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008e0e:	69fb      	ldr	r3, [r7, #28]
 8008e10:	3301      	adds	r3, #1
 8008e12:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008e14:	69bb      	ldr	r3, [r7, #24]
 8008e16:	3301      	adds	r3, #1
 8008e18:	61bb      	str	r3, [r7, #24]
 8008e1a:	69ba      	ldr	r2, [r7, #24]
 8008e1c:	693b      	ldr	r3, [r7, #16]
 8008e1e:	429a      	cmp	r2, r3
 8008e20:	d3e2      	bcc.n	8008de8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008e22:	2300      	movs	r3, #0
}
 8008e24:	4618      	mov	r0, r3
 8008e26:	3724      	adds	r7, #36	; 0x24
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2e:	4770      	bx	lr

08008e30 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008e30:	b480      	push	{r7}
 8008e32:	b08b      	sub	sp, #44	; 0x2c
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	60f8      	str	r0, [r7, #12]
 8008e38:	60b9      	str	r1, [r7, #8]
 8008e3a:	4613      	mov	r3, r2
 8008e3c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008e42:	68bb      	ldr	r3, [r7, #8]
 8008e44:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008e46:	88fb      	ldrh	r3, [r7, #6]
 8008e48:	089b      	lsrs	r3, r3, #2
 8008e4a:	b29b      	uxth	r3, r3
 8008e4c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008e4e:	88fb      	ldrh	r3, [r7, #6]
 8008e50:	f003 0303 	and.w	r3, r3, #3
 8008e54:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008e56:	2300      	movs	r3, #0
 8008e58:	623b      	str	r3, [r7, #32]
 8008e5a:	e014      	b.n	8008e86 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008e5c:	69bb      	ldr	r3, [r7, #24]
 8008e5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e62:	681a      	ldr	r2, [r3, #0]
 8008e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e66:	601a      	str	r2, [r3, #0]
    pDest++;
 8008e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e6a:	3301      	adds	r3, #1
 8008e6c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e70:	3301      	adds	r3, #1
 8008e72:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e76:	3301      	adds	r3, #1
 8008e78:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e7c:	3301      	adds	r3, #1
 8008e7e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8008e80:	6a3b      	ldr	r3, [r7, #32]
 8008e82:	3301      	adds	r3, #1
 8008e84:	623b      	str	r3, [r7, #32]
 8008e86:	6a3a      	ldr	r2, [r7, #32]
 8008e88:	697b      	ldr	r3, [r7, #20]
 8008e8a:	429a      	cmp	r2, r3
 8008e8c:	d3e6      	bcc.n	8008e5c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008e8e:	8bfb      	ldrh	r3, [r7, #30]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d01e      	beq.n	8008ed2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008e94:	2300      	movs	r3, #0
 8008e96:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008e98:	69bb      	ldr	r3, [r7, #24]
 8008e9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e9e:	461a      	mov	r2, r3
 8008ea0:	f107 0310 	add.w	r3, r7, #16
 8008ea4:	6812      	ldr	r2, [r2, #0]
 8008ea6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008ea8:	693a      	ldr	r2, [r7, #16]
 8008eaa:	6a3b      	ldr	r3, [r7, #32]
 8008eac:	b2db      	uxtb	r3, r3
 8008eae:	00db      	lsls	r3, r3, #3
 8008eb0:	fa22 f303 	lsr.w	r3, r2, r3
 8008eb4:	b2da      	uxtb	r2, r3
 8008eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eb8:	701a      	strb	r2, [r3, #0]
      i++;
 8008eba:	6a3b      	ldr	r3, [r7, #32]
 8008ebc:	3301      	adds	r3, #1
 8008ebe:	623b      	str	r3, [r7, #32]
      pDest++;
 8008ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ec2:	3301      	adds	r3, #1
 8008ec4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8008ec6:	8bfb      	ldrh	r3, [r7, #30]
 8008ec8:	3b01      	subs	r3, #1
 8008eca:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008ecc:	8bfb      	ldrh	r3, [r7, #30]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d1ea      	bne.n	8008ea8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	372c      	adds	r7, #44	; 0x2c
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ede:	4770      	bx	lr

08008ee0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008ee0:	b480      	push	{r7}
 8008ee2:	b085      	sub	sp, #20
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
 8008ee8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008eee:	683b      	ldr	r3, [r7, #0]
 8008ef0:	781b      	ldrb	r3, [r3, #0]
 8008ef2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008ef4:	683b      	ldr	r3, [r7, #0]
 8008ef6:	785b      	ldrb	r3, [r3, #1]
 8008ef8:	2b01      	cmp	r3, #1
 8008efa:	d12c      	bne.n	8008f56 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008efc:	68bb      	ldr	r3, [r7, #8]
 8008efe:	015a      	lsls	r2, r3, #5
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	4413      	add	r3, r2
 8008f04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	db12      	blt.n	8008f34 <USB_EPSetStall+0x54>
 8008f0e:	68bb      	ldr	r3, [r7, #8]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d00f      	beq.n	8008f34 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008f14:	68bb      	ldr	r3, [r7, #8]
 8008f16:	015a      	lsls	r2, r3, #5
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	4413      	add	r3, r2
 8008f1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	68ba      	ldr	r2, [r7, #8]
 8008f24:	0151      	lsls	r1, r2, #5
 8008f26:	68fa      	ldr	r2, [r7, #12]
 8008f28:	440a      	add	r2, r1
 8008f2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f2e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008f32:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008f34:	68bb      	ldr	r3, [r7, #8]
 8008f36:	015a      	lsls	r2, r3, #5
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	4413      	add	r3, r2
 8008f3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	68ba      	ldr	r2, [r7, #8]
 8008f44:	0151      	lsls	r1, r2, #5
 8008f46:	68fa      	ldr	r2, [r7, #12]
 8008f48:	440a      	add	r2, r1
 8008f4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f4e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008f52:	6013      	str	r3, [r2, #0]
 8008f54:	e02b      	b.n	8008fae <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008f56:	68bb      	ldr	r3, [r7, #8]
 8008f58:	015a      	lsls	r2, r3, #5
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	4413      	add	r3, r2
 8008f5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	db12      	blt.n	8008f8e <USB_EPSetStall+0xae>
 8008f68:	68bb      	ldr	r3, [r7, #8]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d00f      	beq.n	8008f8e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008f6e:	68bb      	ldr	r3, [r7, #8]
 8008f70:	015a      	lsls	r2, r3, #5
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	4413      	add	r3, r2
 8008f76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	68ba      	ldr	r2, [r7, #8]
 8008f7e:	0151      	lsls	r1, r2, #5
 8008f80:	68fa      	ldr	r2, [r7, #12]
 8008f82:	440a      	add	r2, r1
 8008f84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f88:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008f8c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008f8e:	68bb      	ldr	r3, [r7, #8]
 8008f90:	015a      	lsls	r2, r3, #5
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	4413      	add	r3, r2
 8008f96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	68ba      	ldr	r2, [r7, #8]
 8008f9e:	0151      	lsls	r1, r2, #5
 8008fa0:	68fa      	ldr	r2, [r7, #12]
 8008fa2:	440a      	add	r2, r1
 8008fa4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008fa8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008fac:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008fae:	2300      	movs	r3, #0
}
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	3714      	adds	r7, #20
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fba:	4770      	bx	lr

08008fbc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008fbc:	b480      	push	{r7}
 8008fbe:	b085      	sub	sp, #20
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]
 8008fc4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008fca:	683b      	ldr	r3, [r7, #0]
 8008fcc:	781b      	ldrb	r3, [r3, #0]
 8008fce:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008fd0:	683b      	ldr	r3, [r7, #0]
 8008fd2:	785b      	ldrb	r3, [r3, #1]
 8008fd4:	2b01      	cmp	r3, #1
 8008fd6:	d128      	bne.n	800902a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008fd8:	68bb      	ldr	r3, [r7, #8]
 8008fda:	015a      	lsls	r2, r3, #5
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	4413      	add	r3, r2
 8008fe0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	68ba      	ldr	r2, [r7, #8]
 8008fe8:	0151      	lsls	r1, r2, #5
 8008fea:	68fa      	ldr	r2, [r7, #12]
 8008fec:	440a      	add	r2, r1
 8008fee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ff2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008ff6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008ff8:	683b      	ldr	r3, [r7, #0]
 8008ffa:	791b      	ldrb	r3, [r3, #4]
 8008ffc:	2b03      	cmp	r3, #3
 8008ffe:	d003      	beq.n	8009008 <USB_EPClearStall+0x4c>
 8009000:	683b      	ldr	r3, [r7, #0]
 8009002:	791b      	ldrb	r3, [r3, #4]
 8009004:	2b02      	cmp	r3, #2
 8009006:	d138      	bne.n	800907a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009008:	68bb      	ldr	r3, [r7, #8]
 800900a:	015a      	lsls	r2, r3, #5
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	4413      	add	r3, r2
 8009010:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	68ba      	ldr	r2, [r7, #8]
 8009018:	0151      	lsls	r1, r2, #5
 800901a:	68fa      	ldr	r2, [r7, #12]
 800901c:	440a      	add	r2, r1
 800901e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009022:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009026:	6013      	str	r3, [r2, #0]
 8009028:	e027      	b.n	800907a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800902a:	68bb      	ldr	r3, [r7, #8]
 800902c:	015a      	lsls	r2, r3, #5
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	4413      	add	r3, r2
 8009032:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	68ba      	ldr	r2, [r7, #8]
 800903a:	0151      	lsls	r1, r2, #5
 800903c:	68fa      	ldr	r2, [r7, #12]
 800903e:	440a      	add	r2, r1
 8009040:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009044:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009048:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800904a:	683b      	ldr	r3, [r7, #0]
 800904c:	791b      	ldrb	r3, [r3, #4]
 800904e:	2b03      	cmp	r3, #3
 8009050:	d003      	beq.n	800905a <USB_EPClearStall+0x9e>
 8009052:	683b      	ldr	r3, [r7, #0]
 8009054:	791b      	ldrb	r3, [r3, #4]
 8009056:	2b02      	cmp	r3, #2
 8009058:	d10f      	bne.n	800907a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800905a:	68bb      	ldr	r3, [r7, #8]
 800905c:	015a      	lsls	r2, r3, #5
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	4413      	add	r3, r2
 8009062:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	68ba      	ldr	r2, [r7, #8]
 800906a:	0151      	lsls	r1, r2, #5
 800906c:	68fa      	ldr	r2, [r7, #12]
 800906e:	440a      	add	r2, r1
 8009070:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009074:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009078:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800907a:	2300      	movs	r3, #0
}
 800907c:	4618      	mov	r0, r3
 800907e:	3714      	adds	r7, #20
 8009080:	46bd      	mov	sp, r7
 8009082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009086:	4770      	bx	lr

08009088 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009088:	b480      	push	{r7}
 800908a:	b085      	sub	sp, #20
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]
 8009090:	460b      	mov	r3, r1
 8009092:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	68fa      	ldr	r2, [r7, #12]
 80090a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80090a6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80090aa:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090b2:	681a      	ldr	r2, [r3, #0]
 80090b4:	78fb      	ldrb	r3, [r7, #3]
 80090b6:	011b      	lsls	r3, r3, #4
 80090b8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80090bc:	68f9      	ldr	r1, [r7, #12]
 80090be:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80090c2:	4313      	orrs	r3, r2
 80090c4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80090c6:	2300      	movs	r3, #0
}
 80090c8:	4618      	mov	r0, r3
 80090ca:	3714      	adds	r7, #20
 80090cc:	46bd      	mov	sp, r7
 80090ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d2:	4770      	bx	lr

080090d4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80090d4:	b480      	push	{r7}
 80090d6:	b085      	sub	sp, #20
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	68fa      	ldr	r2, [r7, #12]
 80090ea:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80090ee:	f023 0303 	bic.w	r3, r3, #3
 80090f2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090fa:	685b      	ldr	r3, [r3, #4]
 80090fc:	68fa      	ldr	r2, [r7, #12]
 80090fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009102:	f023 0302 	bic.w	r3, r3, #2
 8009106:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009108:	2300      	movs	r3, #0
}
 800910a:	4618      	mov	r0, r3
 800910c:	3714      	adds	r7, #20
 800910e:	46bd      	mov	sp, r7
 8009110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009114:	4770      	bx	lr

08009116 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8009116:	b480      	push	{r7}
 8009118:	b085      	sub	sp, #20
 800911a:	af00      	add	r7, sp, #0
 800911c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	68fa      	ldr	r2, [r7, #12]
 800912c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009130:	f023 0303 	bic.w	r3, r3, #3
 8009134:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800913c:	685b      	ldr	r3, [r3, #4]
 800913e:	68fa      	ldr	r2, [r7, #12]
 8009140:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009144:	f043 0302 	orr.w	r3, r3, #2
 8009148:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800914a:	2300      	movs	r3, #0
}
 800914c:	4618      	mov	r0, r3
 800914e:	3714      	adds	r7, #20
 8009150:	46bd      	mov	sp, r7
 8009152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009156:	4770      	bx	lr

08009158 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8009158:	b480      	push	{r7}
 800915a:	b085      	sub	sp, #20
 800915c:	af00      	add	r7, sp, #0
 800915e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	695b      	ldr	r3, [r3, #20]
 8009164:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	699b      	ldr	r3, [r3, #24]
 800916a:	68fa      	ldr	r2, [r7, #12]
 800916c:	4013      	ands	r3, r2
 800916e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009170:	68fb      	ldr	r3, [r7, #12]
}
 8009172:	4618      	mov	r0, r3
 8009174:	3714      	adds	r7, #20
 8009176:	46bd      	mov	sp, r7
 8009178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917c:	4770      	bx	lr

0800917e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800917e:	b480      	push	{r7}
 8009180:	b085      	sub	sp, #20
 8009182:	af00      	add	r7, sp, #0
 8009184:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009190:	699b      	ldr	r3, [r3, #24]
 8009192:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800919a:	69db      	ldr	r3, [r3, #28]
 800919c:	68ba      	ldr	r2, [r7, #8]
 800919e:	4013      	ands	r3, r2
 80091a0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80091a2:	68bb      	ldr	r3, [r7, #8]
 80091a4:	0c1b      	lsrs	r3, r3, #16
}
 80091a6:	4618      	mov	r0, r3
 80091a8:	3714      	adds	r7, #20
 80091aa:	46bd      	mov	sp, r7
 80091ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b0:	4770      	bx	lr

080091b2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80091b2:	b480      	push	{r7}
 80091b4:	b085      	sub	sp, #20
 80091b6:	af00      	add	r7, sp, #0
 80091b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091c4:	699b      	ldr	r3, [r3, #24]
 80091c6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091ce:	69db      	ldr	r3, [r3, #28]
 80091d0:	68ba      	ldr	r2, [r7, #8]
 80091d2:	4013      	ands	r3, r2
 80091d4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80091d6:	68bb      	ldr	r3, [r7, #8]
 80091d8:	b29b      	uxth	r3, r3
}
 80091da:	4618      	mov	r0, r3
 80091dc:	3714      	adds	r7, #20
 80091de:	46bd      	mov	sp, r7
 80091e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e4:	4770      	bx	lr

080091e6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80091e6:	b480      	push	{r7}
 80091e8:	b085      	sub	sp, #20
 80091ea:	af00      	add	r7, sp, #0
 80091ec:	6078      	str	r0, [r7, #4]
 80091ee:	460b      	mov	r3, r1
 80091f0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80091f6:	78fb      	ldrb	r3, [r7, #3]
 80091f8:	015a      	lsls	r2, r3, #5
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	4413      	add	r3, r2
 80091fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009202:	689b      	ldr	r3, [r3, #8]
 8009204:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800920c:	695b      	ldr	r3, [r3, #20]
 800920e:	68ba      	ldr	r2, [r7, #8]
 8009210:	4013      	ands	r3, r2
 8009212:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009214:	68bb      	ldr	r3, [r7, #8]
}
 8009216:	4618      	mov	r0, r3
 8009218:	3714      	adds	r7, #20
 800921a:	46bd      	mov	sp, r7
 800921c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009220:	4770      	bx	lr

08009222 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009222:	b480      	push	{r7}
 8009224:	b087      	sub	sp, #28
 8009226:	af00      	add	r7, sp, #0
 8009228:	6078      	str	r0, [r7, #4]
 800922a:	460b      	mov	r3, r1
 800922c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009232:	697b      	ldr	r3, [r7, #20]
 8009234:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009238:	691b      	ldr	r3, [r3, #16]
 800923a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800923c:	697b      	ldr	r3, [r7, #20]
 800923e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009242:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009244:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009246:	78fb      	ldrb	r3, [r7, #3]
 8009248:	f003 030f 	and.w	r3, r3, #15
 800924c:	68fa      	ldr	r2, [r7, #12]
 800924e:	fa22 f303 	lsr.w	r3, r2, r3
 8009252:	01db      	lsls	r3, r3, #7
 8009254:	b2db      	uxtb	r3, r3
 8009256:	693a      	ldr	r2, [r7, #16]
 8009258:	4313      	orrs	r3, r2
 800925a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800925c:	78fb      	ldrb	r3, [r7, #3]
 800925e:	015a      	lsls	r2, r3, #5
 8009260:	697b      	ldr	r3, [r7, #20]
 8009262:	4413      	add	r3, r2
 8009264:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009268:	689b      	ldr	r3, [r3, #8]
 800926a:	693a      	ldr	r2, [r7, #16]
 800926c:	4013      	ands	r3, r2
 800926e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009270:	68bb      	ldr	r3, [r7, #8]
}
 8009272:	4618      	mov	r0, r3
 8009274:	371c      	adds	r7, #28
 8009276:	46bd      	mov	sp, r7
 8009278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927c:	4770      	bx	lr

0800927e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800927e:	b480      	push	{r7}
 8009280:	b083      	sub	sp, #12
 8009282:	af00      	add	r7, sp, #0
 8009284:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	695b      	ldr	r3, [r3, #20]
 800928a:	f003 0301 	and.w	r3, r3, #1
}
 800928e:	4618      	mov	r0, r3
 8009290:	370c      	adds	r7, #12
 8009292:	46bd      	mov	sp, r7
 8009294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009298:	4770      	bx	lr

0800929a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800929a:	b480      	push	{r7}
 800929c:	b085      	sub	sp, #20
 800929e:	af00      	add	r7, sp, #0
 80092a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	68fa      	ldr	r2, [r7, #12]
 80092b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80092b4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80092b8:	f023 0307 	bic.w	r3, r3, #7
 80092bc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80092c4:	685b      	ldr	r3, [r3, #4]
 80092c6:	68fa      	ldr	r2, [r7, #12]
 80092c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80092cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80092d0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80092d2:	2300      	movs	r3, #0
}
 80092d4:	4618      	mov	r0, r3
 80092d6:	3714      	adds	r7, #20
 80092d8:	46bd      	mov	sp, r7
 80092da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092de:	4770      	bx	lr

080092e0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80092e0:	b480      	push	{r7}
 80092e2:	b087      	sub	sp, #28
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	60f8      	str	r0, [r7, #12]
 80092e8:	460b      	mov	r3, r1
 80092ea:	607a      	str	r2, [r7, #4]
 80092ec:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	333c      	adds	r3, #60	; 0x3c
 80092f6:	3304      	adds	r3, #4
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80092fc:	693b      	ldr	r3, [r7, #16]
 80092fe:	4a26      	ldr	r2, [pc, #152]	; (8009398 <USB_EP0_OutStart+0xb8>)
 8009300:	4293      	cmp	r3, r2
 8009302:	d90a      	bls.n	800931a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009304:	697b      	ldr	r3, [r7, #20]
 8009306:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009310:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009314:	d101      	bne.n	800931a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8009316:	2300      	movs	r3, #0
 8009318:	e037      	b.n	800938a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800931a:	697b      	ldr	r3, [r7, #20]
 800931c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009320:	461a      	mov	r2, r3
 8009322:	2300      	movs	r3, #0
 8009324:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009326:	697b      	ldr	r3, [r7, #20]
 8009328:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800932c:	691b      	ldr	r3, [r3, #16]
 800932e:	697a      	ldr	r2, [r7, #20]
 8009330:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009334:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009338:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800933a:	697b      	ldr	r3, [r7, #20]
 800933c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009340:	691b      	ldr	r3, [r3, #16]
 8009342:	697a      	ldr	r2, [r7, #20]
 8009344:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009348:	f043 0318 	orr.w	r3, r3, #24
 800934c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800934e:	697b      	ldr	r3, [r7, #20]
 8009350:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009354:	691b      	ldr	r3, [r3, #16]
 8009356:	697a      	ldr	r2, [r7, #20]
 8009358:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800935c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8009360:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8009362:	7afb      	ldrb	r3, [r7, #11]
 8009364:	2b01      	cmp	r3, #1
 8009366:	d10f      	bne.n	8009388 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009368:	697b      	ldr	r3, [r7, #20]
 800936a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800936e:	461a      	mov	r2, r3
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009374:	697b      	ldr	r3, [r7, #20]
 8009376:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	697a      	ldr	r2, [r7, #20]
 800937e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009382:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8009386:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009388:	2300      	movs	r3, #0
}
 800938a:	4618      	mov	r0, r3
 800938c:	371c      	adds	r7, #28
 800938e:	46bd      	mov	sp, r7
 8009390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009394:	4770      	bx	lr
 8009396:	bf00      	nop
 8009398:	4f54300a 	.word	0x4f54300a

0800939c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800939c:	b480      	push	{r7}
 800939e:	b085      	sub	sp, #20
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80093a4:	2300      	movs	r3, #0
 80093a6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	3301      	adds	r3, #1
 80093ac:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80093b4:	d901      	bls.n	80093ba <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80093b6:	2303      	movs	r3, #3
 80093b8:	e01b      	b.n	80093f2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	691b      	ldr	r3, [r3, #16]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	daf2      	bge.n	80093a8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80093c2:	2300      	movs	r3, #0
 80093c4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	691b      	ldr	r3, [r3, #16]
 80093ca:	f043 0201 	orr.w	r2, r3, #1
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	3301      	adds	r3, #1
 80093d6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80093de:	d901      	bls.n	80093e4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80093e0:	2303      	movs	r3, #3
 80093e2:	e006      	b.n	80093f2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	691b      	ldr	r3, [r3, #16]
 80093e8:	f003 0301 	and.w	r3, r3, #1
 80093ec:	2b01      	cmp	r3, #1
 80093ee:	d0f0      	beq.n	80093d2 <USB_CoreReset+0x36>

  return HAL_OK;
 80093f0:	2300      	movs	r3, #0
}
 80093f2:	4618      	mov	r0, r3
 80093f4:	3714      	adds	r7, #20
 80093f6:	46bd      	mov	sp, r7
 80093f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093fc:	4770      	bx	lr
	...

08009400 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009400:	b580      	push	{r7, lr}
 8009402:	b084      	sub	sp, #16
 8009404:	af00      	add	r7, sp, #0
 8009406:	6078      	str	r0, [r7, #4]
 8009408:	460b      	mov	r3, r1
 800940a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800940c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009410:	f003 ff6e 	bl	800d2f0 <USBD_static_malloc>
 8009414:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d109      	bne.n	8009430 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	32b0      	adds	r2, #176	; 0xb0
 8009426:	2100      	movs	r1, #0
 8009428:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800942c:	2302      	movs	r3, #2
 800942e:	e0d4      	b.n	80095da <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8009430:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8009434:	2100      	movs	r1, #0
 8009436:	68f8      	ldr	r0, [r7, #12]
 8009438:	f008 fa53 	bl	80118e2 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	32b0      	adds	r2, #176	; 0xb0
 8009446:	68f9      	ldr	r1, [r7, #12]
 8009448:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	32b0      	adds	r2, #176	; 0xb0
 8009456:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	7c1b      	ldrb	r3, [r3, #16]
 8009464:	2b00      	cmp	r3, #0
 8009466:	d138      	bne.n	80094da <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009468:	4b5e      	ldr	r3, [pc, #376]	; (80095e4 <USBD_CDC_Init+0x1e4>)
 800946a:	7819      	ldrb	r1, [r3, #0]
 800946c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009470:	2202      	movs	r2, #2
 8009472:	6878      	ldr	r0, [r7, #4]
 8009474:	f003 fe19 	bl	800d0aa <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009478:	4b5a      	ldr	r3, [pc, #360]	; (80095e4 <USBD_CDC_Init+0x1e4>)
 800947a:	781b      	ldrb	r3, [r3, #0]
 800947c:	f003 020f 	and.w	r2, r3, #15
 8009480:	6879      	ldr	r1, [r7, #4]
 8009482:	4613      	mov	r3, r2
 8009484:	009b      	lsls	r3, r3, #2
 8009486:	4413      	add	r3, r2
 8009488:	009b      	lsls	r3, r3, #2
 800948a:	440b      	add	r3, r1
 800948c:	3324      	adds	r3, #36	; 0x24
 800948e:	2201      	movs	r2, #1
 8009490:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009492:	4b55      	ldr	r3, [pc, #340]	; (80095e8 <USBD_CDC_Init+0x1e8>)
 8009494:	7819      	ldrb	r1, [r3, #0]
 8009496:	f44f 7300 	mov.w	r3, #512	; 0x200
 800949a:	2202      	movs	r2, #2
 800949c:	6878      	ldr	r0, [r7, #4]
 800949e:	f003 fe04 	bl	800d0aa <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80094a2:	4b51      	ldr	r3, [pc, #324]	; (80095e8 <USBD_CDC_Init+0x1e8>)
 80094a4:	781b      	ldrb	r3, [r3, #0]
 80094a6:	f003 020f 	and.w	r2, r3, #15
 80094aa:	6879      	ldr	r1, [r7, #4]
 80094ac:	4613      	mov	r3, r2
 80094ae:	009b      	lsls	r3, r3, #2
 80094b0:	4413      	add	r3, r2
 80094b2:	009b      	lsls	r3, r3, #2
 80094b4:	440b      	add	r3, r1
 80094b6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80094ba:	2201      	movs	r2, #1
 80094bc:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80094be:	4b4b      	ldr	r3, [pc, #300]	; (80095ec <USBD_CDC_Init+0x1ec>)
 80094c0:	781b      	ldrb	r3, [r3, #0]
 80094c2:	f003 020f 	and.w	r2, r3, #15
 80094c6:	6879      	ldr	r1, [r7, #4]
 80094c8:	4613      	mov	r3, r2
 80094ca:	009b      	lsls	r3, r3, #2
 80094cc:	4413      	add	r3, r2
 80094ce:	009b      	lsls	r3, r3, #2
 80094d0:	440b      	add	r3, r1
 80094d2:	3326      	adds	r3, #38	; 0x26
 80094d4:	2210      	movs	r2, #16
 80094d6:	801a      	strh	r2, [r3, #0]
 80094d8:	e035      	b.n	8009546 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80094da:	4b42      	ldr	r3, [pc, #264]	; (80095e4 <USBD_CDC_Init+0x1e4>)
 80094dc:	7819      	ldrb	r1, [r3, #0]
 80094de:	2340      	movs	r3, #64	; 0x40
 80094e0:	2202      	movs	r2, #2
 80094e2:	6878      	ldr	r0, [r7, #4]
 80094e4:	f003 fde1 	bl	800d0aa <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80094e8:	4b3e      	ldr	r3, [pc, #248]	; (80095e4 <USBD_CDC_Init+0x1e4>)
 80094ea:	781b      	ldrb	r3, [r3, #0]
 80094ec:	f003 020f 	and.w	r2, r3, #15
 80094f0:	6879      	ldr	r1, [r7, #4]
 80094f2:	4613      	mov	r3, r2
 80094f4:	009b      	lsls	r3, r3, #2
 80094f6:	4413      	add	r3, r2
 80094f8:	009b      	lsls	r3, r3, #2
 80094fa:	440b      	add	r3, r1
 80094fc:	3324      	adds	r3, #36	; 0x24
 80094fe:	2201      	movs	r2, #1
 8009500:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009502:	4b39      	ldr	r3, [pc, #228]	; (80095e8 <USBD_CDC_Init+0x1e8>)
 8009504:	7819      	ldrb	r1, [r3, #0]
 8009506:	2340      	movs	r3, #64	; 0x40
 8009508:	2202      	movs	r2, #2
 800950a:	6878      	ldr	r0, [r7, #4]
 800950c:	f003 fdcd 	bl	800d0aa <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009510:	4b35      	ldr	r3, [pc, #212]	; (80095e8 <USBD_CDC_Init+0x1e8>)
 8009512:	781b      	ldrb	r3, [r3, #0]
 8009514:	f003 020f 	and.w	r2, r3, #15
 8009518:	6879      	ldr	r1, [r7, #4]
 800951a:	4613      	mov	r3, r2
 800951c:	009b      	lsls	r3, r3, #2
 800951e:	4413      	add	r3, r2
 8009520:	009b      	lsls	r3, r3, #2
 8009522:	440b      	add	r3, r1
 8009524:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009528:	2201      	movs	r2, #1
 800952a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800952c:	4b2f      	ldr	r3, [pc, #188]	; (80095ec <USBD_CDC_Init+0x1ec>)
 800952e:	781b      	ldrb	r3, [r3, #0]
 8009530:	f003 020f 	and.w	r2, r3, #15
 8009534:	6879      	ldr	r1, [r7, #4]
 8009536:	4613      	mov	r3, r2
 8009538:	009b      	lsls	r3, r3, #2
 800953a:	4413      	add	r3, r2
 800953c:	009b      	lsls	r3, r3, #2
 800953e:	440b      	add	r3, r1
 8009540:	3326      	adds	r3, #38	; 0x26
 8009542:	2210      	movs	r2, #16
 8009544:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009546:	4b29      	ldr	r3, [pc, #164]	; (80095ec <USBD_CDC_Init+0x1ec>)
 8009548:	7819      	ldrb	r1, [r3, #0]
 800954a:	2308      	movs	r3, #8
 800954c:	2203      	movs	r2, #3
 800954e:	6878      	ldr	r0, [r7, #4]
 8009550:	f003 fdab 	bl	800d0aa <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8009554:	4b25      	ldr	r3, [pc, #148]	; (80095ec <USBD_CDC_Init+0x1ec>)
 8009556:	781b      	ldrb	r3, [r3, #0]
 8009558:	f003 020f 	and.w	r2, r3, #15
 800955c:	6879      	ldr	r1, [r7, #4]
 800955e:	4613      	mov	r3, r2
 8009560:	009b      	lsls	r3, r3, #2
 8009562:	4413      	add	r3, r2
 8009564:	009b      	lsls	r3, r3, #2
 8009566:	440b      	add	r3, r1
 8009568:	3324      	adds	r3, #36	; 0x24
 800956a:	2201      	movs	r2, #1
 800956c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	2200      	movs	r2, #0
 8009572:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800957c:	687a      	ldr	r2, [r7, #4]
 800957e:	33b0      	adds	r3, #176	; 0xb0
 8009580:	009b      	lsls	r3, r3, #2
 8009582:	4413      	add	r3, r2
 8009584:	685b      	ldr	r3, [r3, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	2200      	movs	r2, #0
 800958e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	2200      	movs	r2, #0
 8009596:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d101      	bne.n	80095a8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80095a4:	2302      	movs	r3, #2
 80095a6:	e018      	b.n	80095da <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	7c1b      	ldrb	r3, [r3, #16]
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d10a      	bne.n	80095c6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80095b0:	4b0d      	ldr	r3, [pc, #52]	; (80095e8 <USBD_CDC_Init+0x1e8>)
 80095b2:	7819      	ldrb	r1, [r3, #0]
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80095ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80095be:	6878      	ldr	r0, [r7, #4]
 80095c0:	f003 fe62 	bl	800d288 <USBD_LL_PrepareReceive>
 80095c4:	e008      	b.n	80095d8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80095c6:	4b08      	ldr	r3, [pc, #32]	; (80095e8 <USBD_CDC_Init+0x1e8>)
 80095c8:	7819      	ldrb	r1, [r3, #0]
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80095d0:	2340      	movs	r3, #64	; 0x40
 80095d2:	6878      	ldr	r0, [r7, #4]
 80095d4:	f003 fe58 	bl	800d288 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80095d8:	2300      	movs	r3, #0
}
 80095da:	4618      	mov	r0, r3
 80095dc:	3710      	adds	r7, #16
 80095de:	46bd      	mov	sp, r7
 80095e0:	bd80      	pop	{r7, pc}
 80095e2:	bf00      	nop
 80095e4:	20000093 	.word	0x20000093
 80095e8:	20000094 	.word	0x20000094
 80095ec:	20000095 	.word	0x20000095

080095f0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80095f0:	b580      	push	{r7, lr}
 80095f2:	b082      	sub	sp, #8
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]
 80095f8:	460b      	mov	r3, r1
 80095fa:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80095fc:	4b3a      	ldr	r3, [pc, #232]	; (80096e8 <USBD_CDC_DeInit+0xf8>)
 80095fe:	781b      	ldrb	r3, [r3, #0]
 8009600:	4619      	mov	r1, r3
 8009602:	6878      	ldr	r0, [r7, #4]
 8009604:	f003 fd77 	bl	800d0f6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8009608:	4b37      	ldr	r3, [pc, #220]	; (80096e8 <USBD_CDC_DeInit+0xf8>)
 800960a:	781b      	ldrb	r3, [r3, #0]
 800960c:	f003 020f 	and.w	r2, r3, #15
 8009610:	6879      	ldr	r1, [r7, #4]
 8009612:	4613      	mov	r3, r2
 8009614:	009b      	lsls	r3, r3, #2
 8009616:	4413      	add	r3, r2
 8009618:	009b      	lsls	r3, r3, #2
 800961a:	440b      	add	r3, r1
 800961c:	3324      	adds	r3, #36	; 0x24
 800961e:	2200      	movs	r2, #0
 8009620:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8009622:	4b32      	ldr	r3, [pc, #200]	; (80096ec <USBD_CDC_DeInit+0xfc>)
 8009624:	781b      	ldrb	r3, [r3, #0]
 8009626:	4619      	mov	r1, r3
 8009628:	6878      	ldr	r0, [r7, #4]
 800962a:	f003 fd64 	bl	800d0f6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800962e:	4b2f      	ldr	r3, [pc, #188]	; (80096ec <USBD_CDC_DeInit+0xfc>)
 8009630:	781b      	ldrb	r3, [r3, #0]
 8009632:	f003 020f 	and.w	r2, r3, #15
 8009636:	6879      	ldr	r1, [r7, #4]
 8009638:	4613      	mov	r3, r2
 800963a:	009b      	lsls	r3, r3, #2
 800963c:	4413      	add	r3, r2
 800963e:	009b      	lsls	r3, r3, #2
 8009640:	440b      	add	r3, r1
 8009642:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009646:	2200      	movs	r2, #0
 8009648:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800964a:	4b29      	ldr	r3, [pc, #164]	; (80096f0 <USBD_CDC_DeInit+0x100>)
 800964c:	781b      	ldrb	r3, [r3, #0]
 800964e:	4619      	mov	r1, r3
 8009650:	6878      	ldr	r0, [r7, #4]
 8009652:	f003 fd50 	bl	800d0f6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8009656:	4b26      	ldr	r3, [pc, #152]	; (80096f0 <USBD_CDC_DeInit+0x100>)
 8009658:	781b      	ldrb	r3, [r3, #0]
 800965a:	f003 020f 	and.w	r2, r3, #15
 800965e:	6879      	ldr	r1, [r7, #4]
 8009660:	4613      	mov	r3, r2
 8009662:	009b      	lsls	r3, r3, #2
 8009664:	4413      	add	r3, r2
 8009666:	009b      	lsls	r3, r3, #2
 8009668:	440b      	add	r3, r1
 800966a:	3324      	adds	r3, #36	; 0x24
 800966c:	2200      	movs	r2, #0
 800966e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8009670:	4b1f      	ldr	r3, [pc, #124]	; (80096f0 <USBD_CDC_DeInit+0x100>)
 8009672:	781b      	ldrb	r3, [r3, #0]
 8009674:	f003 020f 	and.w	r2, r3, #15
 8009678:	6879      	ldr	r1, [r7, #4]
 800967a:	4613      	mov	r3, r2
 800967c:	009b      	lsls	r3, r3, #2
 800967e:	4413      	add	r3, r2
 8009680:	009b      	lsls	r3, r3, #2
 8009682:	440b      	add	r3, r1
 8009684:	3326      	adds	r3, #38	; 0x26
 8009686:	2200      	movs	r2, #0
 8009688:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	32b0      	adds	r2, #176	; 0xb0
 8009694:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009698:	2b00      	cmp	r3, #0
 800969a:	d01f      	beq.n	80096dc <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80096a2:	687a      	ldr	r2, [r7, #4]
 80096a4:	33b0      	adds	r3, #176	; 0xb0
 80096a6:	009b      	lsls	r3, r3, #2
 80096a8:	4413      	add	r3, r2
 80096aa:	685b      	ldr	r3, [r3, #4]
 80096ac:	685b      	ldr	r3, [r3, #4]
 80096ae:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	32b0      	adds	r2, #176	; 0xb0
 80096ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096be:	4618      	mov	r0, r3
 80096c0:	f003 fe24 	bl	800d30c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	32b0      	adds	r2, #176	; 0xb0
 80096ce:	2100      	movs	r1, #0
 80096d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	2200      	movs	r2, #0
 80096d8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80096dc:	2300      	movs	r3, #0
}
 80096de:	4618      	mov	r0, r3
 80096e0:	3708      	adds	r7, #8
 80096e2:	46bd      	mov	sp, r7
 80096e4:	bd80      	pop	{r7, pc}
 80096e6:	bf00      	nop
 80096e8:	20000093 	.word	0x20000093
 80096ec:	20000094 	.word	0x20000094
 80096f0:	20000095 	.word	0x20000095

080096f4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80096f4:	b580      	push	{r7, lr}
 80096f6:	b086      	sub	sp, #24
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
 80096fc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	32b0      	adds	r2, #176	; 0xb0
 8009708:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800970c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800970e:	2300      	movs	r3, #0
 8009710:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8009712:	2300      	movs	r3, #0
 8009714:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8009716:	2300      	movs	r3, #0
 8009718:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800971a:	693b      	ldr	r3, [r7, #16]
 800971c:	2b00      	cmp	r3, #0
 800971e:	d101      	bne.n	8009724 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8009720:	2303      	movs	r3, #3
 8009722:	e0bf      	b.n	80098a4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009724:	683b      	ldr	r3, [r7, #0]
 8009726:	781b      	ldrb	r3, [r3, #0]
 8009728:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800972c:	2b00      	cmp	r3, #0
 800972e:	d050      	beq.n	80097d2 <USBD_CDC_Setup+0xde>
 8009730:	2b20      	cmp	r3, #32
 8009732:	f040 80af 	bne.w	8009894 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8009736:	683b      	ldr	r3, [r7, #0]
 8009738:	88db      	ldrh	r3, [r3, #6]
 800973a:	2b00      	cmp	r3, #0
 800973c:	d03a      	beq.n	80097b4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800973e:	683b      	ldr	r3, [r7, #0]
 8009740:	781b      	ldrb	r3, [r3, #0]
 8009742:	b25b      	sxtb	r3, r3
 8009744:	2b00      	cmp	r3, #0
 8009746:	da1b      	bge.n	8009780 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800974e:	687a      	ldr	r2, [r7, #4]
 8009750:	33b0      	adds	r3, #176	; 0xb0
 8009752:	009b      	lsls	r3, r3, #2
 8009754:	4413      	add	r3, r2
 8009756:	685b      	ldr	r3, [r3, #4]
 8009758:	689b      	ldr	r3, [r3, #8]
 800975a:	683a      	ldr	r2, [r7, #0]
 800975c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800975e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009760:	683a      	ldr	r2, [r7, #0]
 8009762:	88d2      	ldrh	r2, [r2, #6]
 8009764:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009766:	683b      	ldr	r3, [r7, #0]
 8009768:	88db      	ldrh	r3, [r3, #6]
 800976a:	2b07      	cmp	r3, #7
 800976c:	bf28      	it	cs
 800976e:	2307      	movcs	r3, #7
 8009770:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8009772:	693b      	ldr	r3, [r7, #16]
 8009774:	89fa      	ldrh	r2, [r7, #14]
 8009776:	4619      	mov	r1, r3
 8009778:	6878      	ldr	r0, [r7, #4]
 800977a:	f001 fd89 	bl	800b290 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800977e:	e090      	b.n	80098a2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8009780:	683b      	ldr	r3, [r7, #0]
 8009782:	785a      	ldrb	r2, [r3, #1]
 8009784:	693b      	ldr	r3, [r7, #16]
 8009786:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800978a:	683b      	ldr	r3, [r7, #0]
 800978c:	88db      	ldrh	r3, [r3, #6]
 800978e:	2b3f      	cmp	r3, #63	; 0x3f
 8009790:	d803      	bhi.n	800979a <USBD_CDC_Setup+0xa6>
 8009792:	683b      	ldr	r3, [r7, #0]
 8009794:	88db      	ldrh	r3, [r3, #6]
 8009796:	b2da      	uxtb	r2, r3
 8009798:	e000      	b.n	800979c <USBD_CDC_Setup+0xa8>
 800979a:	2240      	movs	r2, #64	; 0x40
 800979c:	693b      	ldr	r3, [r7, #16]
 800979e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80097a2:	6939      	ldr	r1, [r7, #16]
 80097a4:	693b      	ldr	r3, [r7, #16]
 80097a6:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80097aa:	461a      	mov	r2, r3
 80097ac:	6878      	ldr	r0, [r7, #4]
 80097ae:	f001 fd9b 	bl	800b2e8 <USBD_CtlPrepareRx>
      break;
 80097b2:	e076      	b.n	80098a2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80097ba:	687a      	ldr	r2, [r7, #4]
 80097bc:	33b0      	adds	r3, #176	; 0xb0
 80097be:	009b      	lsls	r3, r3, #2
 80097c0:	4413      	add	r3, r2
 80097c2:	685b      	ldr	r3, [r3, #4]
 80097c4:	689b      	ldr	r3, [r3, #8]
 80097c6:	683a      	ldr	r2, [r7, #0]
 80097c8:	7850      	ldrb	r0, [r2, #1]
 80097ca:	2200      	movs	r2, #0
 80097cc:	6839      	ldr	r1, [r7, #0]
 80097ce:	4798      	blx	r3
      break;
 80097d0:	e067      	b.n	80098a2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80097d2:	683b      	ldr	r3, [r7, #0]
 80097d4:	785b      	ldrb	r3, [r3, #1]
 80097d6:	2b0b      	cmp	r3, #11
 80097d8:	d851      	bhi.n	800987e <USBD_CDC_Setup+0x18a>
 80097da:	a201      	add	r2, pc, #4	; (adr r2, 80097e0 <USBD_CDC_Setup+0xec>)
 80097dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097e0:	08009811 	.word	0x08009811
 80097e4:	0800988d 	.word	0x0800988d
 80097e8:	0800987f 	.word	0x0800987f
 80097ec:	0800987f 	.word	0x0800987f
 80097f0:	0800987f 	.word	0x0800987f
 80097f4:	0800987f 	.word	0x0800987f
 80097f8:	0800987f 	.word	0x0800987f
 80097fc:	0800987f 	.word	0x0800987f
 8009800:	0800987f 	.word	0x0800987f
 8009804:	0800987f 	.word	0x0800987f
 8009808:	0800983b 	.word	0x0800983b
 800980c:	08009865 	.word	0x08009865
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009816:	b2db      	uxtb	r3, r3
 8009818:	2b03      	cmp	r3, #3
 800981a:	d107      	bne.n	800982c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800981c:	f107 030a 	add.w	r3, r7, #10
 8009820:	2202      	movs	r2, #2
 8009822:	4619      	mov	r1, r3
 8009824:	6878      	ldr	r0, [r7, #4]
 8009826:	f001 fd33 	bl	800b290 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800982a:	e032      	b.n	8009892 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800982c:	6839      	ldr	r1, [r7, #0]
 800982e:	6878      	ldr	r0, [r7, #4]
 8009830:	f001 fcbd 	bl	800b1ae <USBD_CtlError>
            ret = USBD_FAIL;
 8009834:	2303      	movs	r3, #3
 8009836:	75fb      	strb	r3, [r7, #23]
          break;
 8009838:	e02b      	b.n	8009892 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009840:	b2db      	uxtb	r3, r3
 8009842:	2b03      	cmp	r3, #3
 8009844:	d107      	bne.n	8009856 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009846:	f107 030d 	add.w	r3, r7, #13
 800984a:	2201      	movs	r2, #1
 800984c:	4619      	mov	r1, r3
 800984e:	6878      	ldr	r0, [r7, #4]
 8009850:	f001 fd1e 	bl	800b290 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009854:	e01d      	b.n	8009892 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009856:	6839      	ldr	r1, [r7, #0]
 8009858:	6878      	ldr	r0, [r7, #4]
 800985a:	f001 fca8 	bl	800b1ae <USBD_CtlError>
            ret = USBD_FAIL;
 800985e:	2303      	movs	r3, #3
 8009860:	75fb      	strb	r3, [r7, #23]
          break;
 8009862:	e016      	b.n	8009892 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800986a:	b2db      	uxtb	r3, r3
 800986c:	2b03      	cmp	r3, #3
 800986e:	d00f      	beq.n	8009890 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8009870:	6839      	ldr	r1, [r7, #0]
 8009872:	6878      	ldr	r0, [r7, #4]
 8009874:	f001 fc9b 	bl	800b1ae <USBD_CtlError>
            ret = USBD_FAIL;
 8009878:	2303      	movs	r3, #3
 800987a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800987c:	e008      	b.n	8009890 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800987e:	6839      	ldr	r1, [r7, #0]
 8009880:	6878      	ldr	r0, [r7, #4]
 8009882:	f001 fc94 	bl	800b1ae <USBD_CtlError>
          ret = USBD_FAIL;
 8009886:	2303      	movs	r3, #3
 8009888:	75fb      	strb	r3, [r7, #23]
          break;
 800988a:	e002      	b.n	8009892 <USBD_CDC_Setup+0x19e>
          break;
 800988c:	bf00      	nop
 800988e:	e008      	b.n	80098a2 <USBD_CDC_Setup+0x1ae>
          break;
 8009890:	bf00      	nop
      }
      break;
 8009892:	e006      	b.n	80098a2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8009894:	6839      	ldr	r1, [r7, #0]
 8009896:	6878      	ldr	r0, [r7, #4]
 8009898:	f001 fc89 	bl	800b1ae <USBD_CtlError>
      ret = USBD_FAIL;
 800989c:	2303      	movs	r3, #3
 800989e:	75fb      	strb	r3, [r7, #23]
      break;
 80098a0:	bf00      	nop
  }

  return (uint8_t)ret;
 80098a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80098a4:	4618      	mov	r0, r3
 80098a6:	3718      	adds	r7, #24
 80098a8:	46bd      	mov	sp, r7
 80098aa:	bd80      	pop	{r7, pc}

080098ac <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80098ac:	b580      	push	{r7, lr}
 80098ae:	b084      	sub	sp, #16
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]
 80098b4:	460b      	mov	r3, r1
 80098b6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80098be:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	32b0      	adds	r2, #176	; 0xb0
 80098ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d101      	bne.n	80098d6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80098d2:	2303      	movs	r3, #3
 80098d4:	e065      	b.n	80099a2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	32b0      	adds	r2, #176	; 0xb0
 80098e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098e4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80098e6:	78fb      	ldrb	r3, [r7, #3]
 80098e8:	f003 020f 	and.w	r2, r3, #15
 80098ec:	6879      	ldr	r1, [r7, #4]
 80098ee:	4613      	mov	r3, r2
 80098f0:	009b      	lsls	r3, r3, #2
 80098f2:	4413      	add	r3, r2
 80098f4:	009b      	lsls	r3, r3, #2
 80098f6:	440b      	add	r3, r1
 80098f8:	3318      	adds	r3, #24
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d02f      	beq.n	8009960 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8009900:	78fb      	ldrb	r3, [r7, #3]
 8009902:	f003 020f 	and.w	r2, r3, #15
 8009906:	6879      	ldr	r1, [r7, #4]
 8009908:	4613      	mov	r3, r2
 800990a:	009b      	lsls	r3, r3, #2
 800990c:	4413      	add	r3, r2
 800990e:	009b      	lsls	r3, r3, #2
 8009910:	440b      	add	r3, r1
 8009912:	3318      	adds	r3, #24
 8009914:	681a      	ldr	r2, [r3, #0]
 8009916:	78fb      	ldrb	r3, [r7, #3]
 8009918:	f003 010f 	and.w	r1, r3, #15
 800991c:	68f8      	ldr	r0, [r7, #12]
 800991e:	460b      	mov	r3, r1
 8009920:	00db      	lsls	r3, r3, #3
 8009922:	440b      	add	r3, r1
 8009924:	009b      	lsls	r3, r3, #2
 8009926:	4403      	add	r3, r0
 8009928:	331c      	adds	r3, #28
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	fbb2 f1f3 	udiv	r1, r2, r3
 8009930:	fb01 f303 	mul.w	r3, r1, r3
 8009934:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009936:	2b00      	cmp	r3, #0
 8009938:	d112      	bne.n	8009960 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800993a:	78fb      	ldrb	r3, [r7, #3]
 800993c:	f003 020f 	and.w	r2, r3, #15
 8009940:	6879      	ldr	r1, [r7, #4]
 8009942:	4613      	mov	r3, r2
 8009944:	009b      	lsls	r3, r3, #2
 8009946:	4413      	add	r3, r2
 8009948:	009b      	lsls	r3, r3, #2
 800994a:	440b      	add	r3, r1
 800994c:	3318      	adds	r3, #24
 800994e:	2200      	movs	r2, #0
 8009950:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009952:	78f9      	ldrb	r1, [r7, #3]
 8009954:	2300      	movs	r3, #0
 8009956:	2200      	movs	r2, #0
 8009958:	6878      	ldr	r0, [r7, #4]
 800995a:	f003 fc74 	bl	800d246 <USBD_LL_Transmit>
 800995e:	e01f      	b.n	80099a0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8009960:	68bb      	ldr	r3, [r7, #8]
 8009962:	2200      	movs	r2, #0
 8009964:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800996e:	687a      	ldr	r2, [r7, #4]
 8009970:	33b0      	adds	r3, #176	; 0xb0
 8009972:	009b      	lsls	r3, r3, #2
 8009974:	4413      	add	r3, r2
 8009976:	685b      	ldr	r3, [r3, #4]
 8009978:	691b      	ldr	r3, [r3, #16]
 800997a:	2b00      	cmp	r3, #0
 800997c:	d010      	beq.n	80099a0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009984:	687a      	ldr	r2, [r7, #4]
 8009986:	33b0      	adds	r3, #176	; 0xb0
 8009988:	009b      	lsls	r3, r3, #2
 800998a:	4413      	add	r3, r2
 800998c:	685b      	ldr	r3, [r3, #4]
 800998e:	691b      	ldr	r3, [r3, #16]
 8009990:	68ba      	ldr	r2, [r7, #8]
 8009992:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8009996:	68ba      	ldr	r2, [r7, #8]
 8009998:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800999c:	78fa      	ldrb	r2, [r7, #3]
 800999e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80099a0:	2300      	movs	r3, #0
}
 80099a2:	4618      	mov	r0, r3
 80099a4:	3710      	adds	r7, #16
 80099a6:	46bd      	mov	sp, r7
 80099a8:	bd80      	pop	{r7, pc}

080099aa <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80099aa:	b580      	push	{r7, lr}
 80099ac:	b084      	sub	sp, #16
 80099ae:	af00      	add	r7, sp, #0
 80099b0:	6078      	str	r0, [r7, #4]
 80099b2:	460b      	mov	r3, r1
 80099b4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	32b0      	adds	r2, #176	; 0xb0
 80099c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099c4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	32b0      	adds	r2, #176	; 0xb0
 80099d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d101      	bne.n	80099dc <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80099d8:	2303      	movs	r3, #3
 80099da:	e01a      	b.n	8009a12 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80099dc:	78fb      	ldrb	r3, [r7, #3]
 80099de:	4619      	mov	r1, r3
 80099e0:	6878      	ldr	r0, [r7, #4]
 80099e2:	f003 fc72 	bl	800d2ca <USBD_LL_GetRxDataSize>
 80099e6:	4602      	mov	r2, r0
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80099f4:	687a      	ldr	r2, [r7, #4]
 80099f6:	33b0      	adds	r3, #176	; 0xb0
 80099f8:	009b      	lsls	r3, r3, #2
 80099fa:	4413      	add	r3, r2
 80099fc:	685b      	ldr	r3, [r3, #4]
 80099fe:	68db      	ldr	r3, [r3, #12]
 8009a00:	68fa      	ldr	r2, [r7, #12]
 8009a02:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8009a06:	68fa      	ldr	r2, [r7, #12]
 8009a08:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8009a0c:	4611      	mov	r1, r2
 8009a0e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009a10:	2300      	movs	r3, #0
}
 8009a12:	4618      	mov	r0, r3
 8009a14:	3710      	adds	r7, #16
 8009a16:	46bd      	mov	sp, r7
 8009a18:	bd80      	pop	{r7, pc}

08009a1a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009a1a:	b580      	push	{r7, lr}
 8009a1c:	b084      	sub	sp, #16
 8009a1e:	af00      	add	r7, sp, #0
 8009a20:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	32b0      	adds	r2, #176	; 0xb0
 8009a2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a30:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d101      	bne.n	8009a3c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009a38:	2303      	movs	r3, #3
 8009a3a:	e025      	b.n	8009a88 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009a42:	687a      	ldr	r2, [r7, #4]
 8009a44:	33b0      	adds	r3, #176	; 0xb0
 8009a46:	009b      	lsls	r3, r3, #2
 8009a48:	4413      	add	r3, r2
 8009a4a:	685b      	ldr	r3, [r3, #4]
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d01a      	beq.n	8009a86 <USBD_CDC_EP0_RxReady+0x6c>
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009a56:	2bff      	cmp	r3, #255	; 0xff
 8009a58:	d015      	beq.n	8009a86 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009a60:	687a      	ldr	r2, [r7, #4]
 8009a62:	33b0      	adds	r3, #176	; 0xb0
 8009a64:	009b      	lsls	r3, r3, #2
 8009a66:	4413      	add	r3, r2
 8009a68:	685b      	ldr	r3, [r3, #4]
 8009a6a:	689b      	ldr	r3, [r3, #8]
 8009a6c:	68fa      	ldr	r2, [r7, #12]
 8009a6e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8009a72:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8009a74:	68fa      	ldr	r2, [r7, #12]
 8009a76:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009a7a:	b292      	uxth	r2, r2
 8009a7c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	22ff      	movs	r2, #255	; 0xff
 8009a82:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8009a86:	2300      	movs	r3, #0
}
 8009a88:	4618      	mov	r0, r3
 8009a8a:	3710      	adds	r7, #16
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	bd80      	pop	{r7, pc}

08009a90 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b086      	sub	sp, #24
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009a98:	2182      	movs	r1, #130	; 0x82
 8009a9a:	4818      	ldr	r0, [pc, #96]	; (8009afc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009a9c:	f000 fd4f 	bl	800a53e <USBD_GetEpDesc>
 8009aa0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009aa2:	2101      	movs	r1, #1
 8009aa4:	4815      	ldr	r0, [pc, #84]	; (8009afc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009aa6:	f000 fd4a 	bl	800a53e <USBD_GetEpDesc>
 8009aaa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009aac:	2181      	movs	r1, #129	; 0x81
 8009aae:	4813      	ldr	r0, [pc, #76]	; (8009afc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009ab0:	f000 fd45 	bl	800a53e <USBD_GetEpDesc>
 8009ab4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009ab6:	697b      	ldr	r3, [r7, #20]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d002      	beq.n	8009ac2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009abc:	697b      	ldr	r3, [r7, #20]
 8009abe:	2210      	movs	r2, #16
 8009ac0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009ac2:	693b      	ldr	r3, [r7, #16]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d006      	beq.n	8009ad6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009ac8:	693b      	ldr	r3, [r7, #16]
 8009aca:	2200      	movs	r2, #0
 8009acc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009ad0:	711a      	strb	r2, [r3, #4]
 8009ad2:	2200      	movs	r2, #0
 8009ad4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d006      	beq.n	8009aea <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	2200      	movs	r2, #0
 8009ae0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009ae4:	711a      	strb	r2, [r3, #4]
 8009ae6:	2200      	movs	r2, #0
 8009ae8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	2243      	movs	r2, #67	; 0x43
 8009aee:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009af0:	4b02      	ldr	r3, [pc, #8]	; (8009afc <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8009af2:	4618      	mov	r0, r3
 8009af4:	3718      	adds	r7, #24
 8009af6:	46bd      	mov	sp, r7
 8009af8:	bd80      	pop	{r7, pc}
 8009afa:	bf00      	nop
 8009afc:	20000050 	.word	0x20000050

08009b00 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009b00:	b580      	push	{r7, lr}
 8009b02:	b086      	sub	sp, #24
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009b08:	2182      	movs	r1, #130	; 0x82
 8009b0a:	4818      	ldr	r0, [pc, #96]	; (8009b6c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009b0c:	f000 fd17 	bl	800a53e <USBD_GetEpDesc>
 8009b10:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009b12:	2101      	movs	r1, #1
 8009b14:	4815      	ldr	r0, [pc, #84]	; (8009b6c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009b16:	f000 fd12 	bl	800a53e <USBD_GetEpDesc>
 8009b1a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009b1c:	2181      	movs	r1, #129	; 0x81
 8009b1e:	4813      	ldr	r0, [pc, #76]	; (8009b6c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009b20:	f000 fd0d 	bl	800a53e <USBD_GetEpDesc>
 8009b24:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009b26:	697b      	ldr	r3, [r7, #20]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d002      	beq.n	8009b32 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8009b2c:	697b      	ldr	r3, [r7, #20]
 8009b2e:	2210      	movs	r2, #16
 8009b30:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009b32:	693b      	ldr	r3, [r7, #16]
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d006      	beq.n	8009b46 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009b38:	693b      	ldr	r3, [r7, #16]
 8009b3a:	2200      	movs	r2, #0
 8009b3c:	711a      	strb	r2, [r3, #4]
 8009b3e:	2200      	movs	r2, #0
 8009b40:	f042 0202 	orr.w	r2, r2, #2
 8009b44:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d006      	beq.n	8009b5a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	2200      	movs	r2, #0
 8009b50:	711a      	strb	r2, [r3, #4]
 8009b52:	2200      	movs	r2, #0
 8009b54:	f042 0202 	orr.w	r2, r2, #2
 8009b58:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	2243      	movs	r2, #67	; 0x43
 8009b5e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009b60:	4b02      	ldr	r3, [pc, #8]	; (8009b6c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8009b62:	4618      	mov	r0, r3
 8009b64:	3718      	adds	r7, #24
 8009b66:	46bd      	mov	sp, r7
 8009b68:	bd80      	pop	{r7, pc}
 8009b6a:	bf00      	nop
 8009b6c:	20000050 	.word	0x20000050

08009b70 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009b70:	b580      	push	{r7, lr}
 8009b72:	b086      	sub	sp, #24
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009b78:	2182      	movs	r1, #130	; 0x82
 8009b7a:	4818      	ldr	r0, [pc, #96]	; (8009bdc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009b7c:	f000 fcdf 	bl	800a53e <USBD_GetEpDesc>
 8009b80:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009b82:	2101      	movs	r1, #1
 8009b84:	4815      	ldr	r0, [pc, #84]	; (8009bdc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009b86:	f000 fcda 	bl	800a53e <USBD_GetEpDesc>
 8009b8a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009b8c:	2181      	movs	r1, #129	; 0x81
 8009b8e:	4813      	ldr	r0, [pc, #76]	; (8009bdc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009b90:	f000 fcd5 	bl	800a53e <USBD_GetEpDesc>
 8009b94:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009b96:	697b      	ldr	r3, [r7, #20]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d002      	beq.n	8009ba2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009b9c:	697b      	ldr	r3, [r7, #20]
 8009b9e:	2210      	movs	r2, #16
 8009ba0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009ba2:	693b      	ldr	r3, [r7, #16]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d006      	beq.n	8009bb6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009ba8:	693b      	ldr	r3, [r7, #16]
 8009baa:	2200      	movs	r2, #0
 8009bac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009bb0:	711a      	strb	r2, [r3, #4]
 8009bb2:	2200      	movs	r2, #0
 8009bb4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d006      	beq.n	8009bca <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	2200      	movs	r2, #0
 8009bc0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009bc4:	711a      	strb	r2, [r3, #4]
 8009bc6:	2200      	movs	r2, #0
 8009bc8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	2243      	movs	r2, #67	; 0x43
 8009bce:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009bd0:	4b02      	ldr	r3, [pc, #8]	; (8009bdc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	3718      	adds	r7, #24
 8009bd6:	46bd      	mov	sp, r7
 8009bd8:	bd80      	pop	{r7, pc}
 8009bda:	bf00      	nop
 8009bdc:	20000050 	.word	0x20000050

08009be0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009be0:	b480      	push	{r7}
 8009be2:	b083      	sub	sp, #12
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	220a      	movs	r2, #10
 8009bec:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8009bee:	4b03      	ldr	r3, [pc, #12]	; (8009bfc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009bf0:	4618      	mov	r0, r3
 8009bf2:	370c      	adds	r7, #12
 8009bf4:	46bd      	mov	sp, r7
 8009bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfa:	4770      	bx	lr
 8009bfc:	2000000c 	.word	0x2000000c

08009c00 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009c00:	b480      	push	{r7}
 8009c02:	b083      	sub	sp, #12
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	6078      	str	r0, [r7, #4]
 8009c08:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009c0a:	683b      	ldr	r3, [r7, #0]
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d101      	bne.n	8009c14 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009c10:	2303      	movs	r3, #3
 8009c12:	e009      	b.n	8009c28 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009c1a:	687a      	ldr	r2, [r7, #4]
 8009c1c:	33b0      	adds	r3, #176	; 0xb0
 8009c1e:	009b      	lsls	r3, r3, #2
 8009c20:	4413      	add	r3, r2
 8009c22:	683a      	ldr	r2, [r7, #0]
 8009c24:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8009c26:	2300      	movs	r3, #0
}
 8009c28:	4618      	mov	r0, r3
 8009c2a:	370c      	adds	r7, #12
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c32:	4770      	bx	lr

08009c34 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009c34:	b480      	push	{r7}
 8009c36:	b087      	sub	sp, #28
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	60f8      	str	r0, [r7, #12]
 8009c3c:	60b9      	str	r1, [r7, #8]
 8009c3e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	32b0      	adds	r2, #176	; 0xb0
 8009c4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c4e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8009c50:	697b      	ldr	r3, [r7, #20]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d101      	bne.n	8009c5a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8009c56:	2303      	movs	r3, #3
 8009c58:	e008      	b.n	8009c6c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8009c5a:	697b      	ldr	r3, [r7, #20]
 8009c5c:	68ba      	ldr	r2, [r7, #8]
 8009c5e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8009c62:	697b      	ldr	r3, [r7, #20]
 8009c64:	687a      	ldr	r2, [r7, #4]
 8009c66:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8009c6a:	2300      	movs	r3, #0
}
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	371c      	adds	r7, #28
 8009c70:	46bd      	mov	sp, r7
 8009c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c76:	4770      	bx	lr

08009c78 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009c78:	b480      	push	{r7}
 8009c7a:	b085      	sub	sp, #20
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	6078      	str	r0, [r7, #4]
 8009c80:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	32b0      	adds	r2, #176	; 0xb0
 8009c8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c90:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d101      	bne.n	8009c9c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8009c98:	2303      	movs	r3, #3
 8009c9a:	e004      	b.n	8009ca6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	683a      	ldr	r2, [r7, #0]
 8009ca0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8009ca4:	2300      	movs	r3, #0
}
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	3714      	adds	r7, #20
 8009caa:	46bd      	mov	sp, r7
 8009cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb0:	4770      	bx	lr
	...

08009cb4 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009cb4:	b580      	push	{r7, lr}
 8009cb6:	b084      	sub	sp, #16
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	32b0      	adds	r2, #176	; 0xb0
 8009cc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cca:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8009ccc:	2301      	movs	r3, #1
 8009cce:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8009cd0:	68bb      	ldr	r3, [r7, #8]
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d101      	bne.n	8009cda <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8009cd6:	2303      	movs	r3, #3
 8009cd8:	e025      	b.n	8009d26 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8009cda:	68bb      	ldr	r3, [r7, #8]
 8009cdc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d11f      	bne.n	8009d24 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8009ce4:	68bb      	ldr	r3, [r7, #8]
 8009ce6:	2201      	movs	r2, #1
 8009ce8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8009cec:	4b10      	ldr	r3, [pc, #64]	; (8009d30 <USBD_CDC_TransmitPacket+0x7c>)
 8009cee:	781b      	ldrb	r3, [r3, #0]
 8009cf0:	f003 020f 	and.w	r2, r3, #15
 8009cf4:	68bb      	ldr	r3, [r7, #8]
 8009cf6:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8009cfa:	6878      	ldr	r0, [r7, #4]
 8009cfc:	4613      	mov	r3, r2
 8009cfe:	009b      	lsls	r3, r3, #2
 8009d00:	4413      	add	r3, r2
 8009d02:	009b      	lsls	r3, r3, #2
 8009d04:	4403      	add	r3, r0
 8009d06:	3318      	adds	r3, #24
 8009d08:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8009d0a:	4b09      	ldr	r3, [pc, #36]	; (8009d30 <USBD_CDC_TransmitPacket+0x7c>)
 8009d0c:	7819      	ldrb	r1, [r3, #0]
 8009d0e:	68bb      	ldr	r3, [r7, #8]
 8009d10:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8009d14:	68bb      	ldr	r3, [r7, #8]
 8009d16:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8009d1a:	6878      	ldr	r0, [r7, #4]
 8009d1c:	f003 fa93 	bl	800d246 <USBD_LL_Transmit>

    ret = USBD_OK;
 8009d20:	2300      	movs	r3, #0
 8009d22:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8009d24:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d26:	4618      	mov	r0, r3
 8009d28:	3710      	adds	r7, #16
 8009d2a:	46bd      	mov	sp, r7
 8009d2c:	bd80      	pop	{r7, pc}
 8009d2e:	bf00      	nop
 8009d30:	20000093 	.word	0x20000093

08009d34 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009d34:	b580      	push	{r7, lr}
 8009d36:	b084      	sub	sp, #16
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	32b0      	adds	r2, #176	; 0xb0
 8009d46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d4a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	32b0      	adds	r2, #176	; 0xb0
 8009d56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d101      	bne.n	8009d62 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8009d5e:	2303      	movs	r3, #3
 8009d60:	e018      	b.n	8009d94 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	7c1b      	ldrb	r3, [r3, #16]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d10a      	bne.n	8009d80 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009d6a:	4b0c      	ldr	r3, [pc, #48]	; (8009d9c <USBD_CDC_ReceivePacket+0x68>)
 8009d6c:	7819      	ldrb	r1, [r3, #0]
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009d74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009d78:	6878      	ldr	r0, [r7, #4]
 8009d7a:	f003 fa85 	bl	800d288 <USBD_LL_PrepareReceive>
 8009d7e:	e008      	b.n	8009d92 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009d80:	4b06      	ldr	r3, [pc, #24]	; (8009d9c <USBD_CDC_ReceivePacket+0x68>)
 8009d82:	7819      	ldrb	r1, [r3, #0]
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009d8a:	2340      	movs	r3, #64	; 0x40
 8009d8c:	6878      	ldr	r0, [r7, #4]
 8009d8e:	f003 fa7b 	bl	800d288 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009d92:	2300      	movs	r3, #0
}
 8009d94:	4618      	mov	r0, r3
 8009d96:	3710      	adds	r7, #16
 8009d98:	46bd      	mov	sp, r7
 8009d9a:	bd80      	pop	{r7, pc}
 8009d9c:	20000094 	.word	0x20000094

08009da0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009da0:	b580      	push	{r7, lr}
 8009da2:	b086      	sub	sp, #24
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	60f8      	str	r0, [r7, #12]
 8009da8:	60b9      	str	r1, [r7, #8]
 8009daa:	4613      	mov	r3, r2
 8009dac:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d101      	bne.n	8009db8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009db4:	2303      	movs	r3, #3
 8009db6:	e01f      	b.n	8009df8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	2200      	movs	r2, #0
 8009dbc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	2200      	movs	r2, #0
 8009dc4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	2200      	movs	r2, #0
 8009dcc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009dd0:	68bb      	ldr	r3, [r7, #8]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d003      	beq.n	8009dde <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	68ba      	ldr	r2, [r7, #8]
 8009dda:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	2201      	movs	r2, #1
 8009de2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	79fa      	ldrb	r2, [r7, #7]
 8009dea:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009dec:	68f8      	ldr	r0, [r7, #12]
 8009dee:	f003 f8f5 	bl	800cfdc <USBD_LL_Init>
 8009df2:	4603      	mov	r3, r0
 8009df4:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009df6:	7dfb      	ldrb	r3, [r7, #23]
}
 8009df8:	4618      	mov	r0, r3
 8009dfa:	3718      	adds	r7, #24
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	bd80      	pop	{r7, pc}

08009e00 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009e00:	b580      	push	{r7, lr}
 8009e02:	b084      	sub	sp, #16
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	6078      	str	r0, [r7, #4]
 8009e08:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009e0e:	683b      	ldr	r3, [r7, #0]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d101      	bne.n	8009e18 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009e14:	2303      	movs	r3, #3
 8009e16:	e025      	b.n	8009e64 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	683a      	ldr	r2, [r7, #0]
 8009e1c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	32ae      	adds	r2, #174	; 0xae
 8009e2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d00f      	beq.n	8009e54 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	32ae      	adds	r2, #174	; 0xae
 8009e3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e44:	f107 020e 	add.w	r2, r7, #14
 8009e48:	4610      	mov	r0, r2
 8009e4a:	4798      	blx	r3
 8009e4c:	4602      	mov	r2, r0
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8009e5a:	1c5a      	adds	r2, r3, #1
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8009e62:	2300      	movs	r3, #0
}
 8009e64:	4618      	mov	r0, r3
 8009e66:	3710      	adds	r7, #16
 8009e68:	46bd      	mov	sp, r7
 8009e6a:	bd80      	pop	{r7, pc}

08009e6c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009e6c:	b580      	push	{r7, lr}
 8009e6e:	b082      	sub	sp, #8
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009e74:	6878      	ldr	r0, [r7, #4]
 8009e76:	f003 f8fd 	bl	800d074 <USBD_LL_Start>
 8009e7a:	4603      	mov	r3, r0
}
 8009e7c:	4618      	mov	r0, r3
 8009e7e:	3708      	adds	r7, #8
 8009e80:	46bd      	mov	sp, r7
 8009e82:	bd80      	pop	{r7, pc}

08009e84 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8009e84:	b480      	push	{r7}
 8009e86:	b083      	sub	sp, #12
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009e8c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8009e8e:	4618      	mov	r0, r3
 8009e90:	370c      	adds	r7, #12
 8009e92:	46bd      	mov	sp, r7
 8009e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e98:	4770      	bx	lr

08009e9a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009e9a:	b580      	push	{r7, lr}
 8009e9c:	b084      	sub	sp, #16
 8009e9e:	af00      	add	r7, sp, #0
 8009ea0:	6078      	str	r0, [r7, #4]
 8009ea2:	460b      	mov	r3, r1
 8009ea4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009ea6:	2300      	movs	r3, #0
 8009ea8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d009      	beq.n	8009ec8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	78fa      	ldrb	r2, [r7, #3]
 8009ebe:	4611      	mov	r1, r2
 8009ec0:	6878      	ldr	r0, [r7, #4]
 8009ec2:	4798      	blx	r3
 8009ec4:	4603      	mov	r3, r0
 8009ec6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009ec8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009eca:	4618      	mov	r0, r3
 8009ecc:	3710      	adds	r7, #16
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	bd80      	pop	{r7, pc}

08009ed2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009ed2:	b580      	push	{r7, lr}
 8009ed4:	b084      	sub	sp, #16
 8009ed6:	af00      	add	r7, sp, #0
 8009ed8:	6078      	str	r0, [r7, #4]
 8009eda:	460b      	mov	r3, r1
 8009edc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009ede:	2300      	movs	r3, #0
 8009ee0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ee8:	685b      	ldr	r3, [r3, #4]
 8009eea:	78fa      	ldrb	r2, [r7, #3]
 8009eec:	4611      	mov	r1, r2
 8009eee:	6878      	ldr	r0, [r7, #4]
 8009ef0:	4798      	blx	r3
 8009ef2:	4603      	mov	r3, r0
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d001      	beq.n	8009efc <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8009ef8:	2303      	movs	r3, #3
 8009efa:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009efc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009efe:	4618      	mov	r0, r3
 8009f00:	3710      	adds	r7, #16
 8009f02:	46bd      	mov	sp, r7
 8009f04:	bd80      	pop	{r7, pc}

08009f06 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009f06:	b580      	push	{r7, lr}
 8009f08:	b084      	sub	sp, #16
 8009f0a:	af00      	add	r7, sp, #0
 8009f0c:	6078      	str	r0, [r7, #4]
 8009f0e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009f16:	6839      	ldr	r1, [r7, #0]
 8009f18:	4618      	mov	r0, r3
 8009f1a:	f001 f90e 	bl	800b13a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	2201      	movs	r2, #1
 8009f22:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8009f2c:	461a      	mov	r2, r3
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009f3a:	f003 031f 	and.w	r3, r3, #31
 8009f3e:	2b02      	cmp	r3, #2
 8009f40:	d01a      	beq.n	8009f78 <USBD_LL_SetupStage+0x72>
 8009f42:	2b02      	cmp	r3, #2
 8009f44:	d822      	bhi.n	8009f8c <USBD_LL_SetupStage+0x86>
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d002      	beq.n	8009f50 <USBD_LL_SetupStage+0x4a>
 8009f4a:	2b01      	cmp	r3, #1
 8009f4c:	d00a      	beq.n	8009f64 <USBD_LL_SetupStage+0x5e>
 8009f4e:	e01d      	b.n	8009f8c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009f56:	4619      	mov	r1, r3
 8009f58:	6878      	ldr	r0, [r7, #4]
 8009f5a:	f000 fb65 	bl	800a628 <USBD_StdDevReq>
 8009f5e:	4603      	mov	r3, r0
 8009f60:	73fb      	strb	r3, [r7, #15]
      break;
 8009f62:	e020      	b.n	8009fa6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009f6a:	4619      	mov	r1, r3
 8009f6c:	6878      	ldr	r0, [r7, #4]
 8009f6e:	f000 fbcd 	bl	800a70c <USBD_StdItfReq>
 8009f72:	4603      	mov	r3, r0
 8009f74:	73fb      	strb	r3, [r7, #15]
      break;
 8009f76:	e016      	b.n	8009fa6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009f7e:	4619      	mov	r1, r3
 8009f80:	6878      	ldr	r0, [r7, #4]
 8009f82:	f000 fc2f 	bl	800a7e4 <USBD_StdEPReq>
 8009f86:	4603      	mov	r3, r0
 8009f88:	73fb      	strb	r3, [r7, #15]
      break;
 8009f8a:	e00c      	b.n	8009fa6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009f92:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009f96:	b2db      	uxtb	r3, r3
 8009f98:	4619      	mov	r1, r3
 8009f9a:	6878      	ldr	r0, [r7, #4]
 8009f9c:	f003 f8ca 	bl	800d134 <USBD_LL_StallEP>
 8009fa0:	4603      	mov	r3, r0
 8009fa2:	73fb      	strb	r3, [r7, #15]
      break;
 8009fa4:	bf00      	nop
  }

  return ret;
 8009fa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fa8:	4618      	mov	r0, r3
 8009faa:	3710      	adds	r7, #16
 8009fac:	46bd      	mov	sp, r7
 8009fae:	bd80      	pop	{r7, pc}

08009fb0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009fb0:	b580      	push	{r7, lr}
 8009fb2:	b086      	sub	sp, #24
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	60f8      	str	r0, [r7, #12]
 8009fb8:	460b      	mov	r3, r1
 8009fba:	607a      	str	r2, [r7, #4]
 8009fbc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8009fc2:	7afb      	ldrb	r3, [r7, #11]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d16e      	bne.n	800a0a6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009fce:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009fd6:	2b03      	cmp	r3, #3
 8009fd8:	f040 8098 	bne.w	800a10c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8009fdc:	693b      	ldr	r3, [r7, #16]
 8009fde:	689a      	ldr	r2, [r3, #8]
 8009fe0:	693b      	ldr	r3, [r7, #16]
 8009fe2:	68db      	ldr	r3, [r3, #12]
 8009fe4:	429a      	cmp	r2, r3
 8009fe6:	d913      	bls.n	800a010 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8009fe8:	693b      	ldr	r3, [r7, #16]
 8009fea:	689a      	ldr	r2, [r3, #8]
 8009fec:	693b      	ldr	r3, [r7, #16]
 8009fee:	68db      	ldr	r3, [r3, #12]
 8009ff0:	1ad2      	subs	r2, r2, r3
 8009ff2:	693b      	ldr	r3, [r7, #16]
 8009ff4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009ff6:	693b      	ldr	r3, [r7, #16]
 8009ff8:	68da      	ldr	r2, [r3, #12]
 8009ffa:	693b      	ldr	r3, [r7, #16]
 8009ffc:	689b      	ldr	r3, [r3, #8]
 8009ffe:	4293      	cmp	r3, r2
 800a000:	bf28      	it	cs
 800a002:	4613      	movcs	r3, r2
 800a004:	461a      	mov	r2, r3
 800a006:	6879      	ldr	r1, [r7, #4]
 800a008:	68f8      	ldr	r0, [r7, #12]
 800a00a:	f001 f98a 	bl	800b322 <USBD_CtlContinueRx>
 800a00e:	e07d      	b.n	800a10c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a016:	f003 031f 	and.w	r3, r3, #31
 800a01a:	2b02      	cmp	r3, #2
 800a01c:	d014      	beq.n	800a048 <USBD_LL_DataOutStage+0x98>
 800a01e:	2b02      	cmp	r3, #2
 800a020:	d81d      	bhi.n	800a05e <USBD_LL_DataOutStage+0xae>
 800a022:	2b00      	cmp	r3, #0
 800a024:	d002      	beq.n	800a02c <USBD_LL_DataOutStage+0x7c>
 800a026:	2b01      	cmp	r3, #1
 800a028:	d003      	beq.n	800a032 <USBD_LL_DataOutStage+0x82>
 800a02a:	e018      	b.n	800a05e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800a02c:	2300      	movs	r3, #0
 800a02e:	75bb      	strb	r3, [r7, #22]
            break;
 800a030:	e018      	b.n	800a064 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a038:	b2db      	uxtb	r3, r3
 800a03a:	4619      	mov	r1, r3
 800a03c:	68f8      	ldr	r0, [r7, #12]
 800a03e:	f000 fa64 	bl	800a50a <USBD_CoreFindIF>
 800a042:	4603      	mov	r3, r0
 800a044:	75bb      	strb	r3, [r7, #22]
            break;
 800a046:	e00d      	b.n	800a064 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a04e:	b2db      	uxtb	r3, r3
 800a050:	4619      	mov	r1, r3
 800a052:	68f8      	ldr	r0, [r7, #12]
 800a054:	f000 fa66 	bl	800a524 <USBD_CoreFindEP>
 800a058:	4603      	mov	r3, r0
 800a05a:	75bb      	strb	r3, [r7, #22]
            break;
 800a05c:	e002      	b.n	800a064 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800a05e:	2300      	movs	r3, #0
 800a060:	75bb      	strb	r3, [r7, #22]
            break;
 800a062:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800a064:	7dbb      	ldrb	r3, [r7, #22]
 800a066:	2b00      	cmp	r3, #0
 800a068:	d119      	bne.n	800a09e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a070:	b2db      	uxtb	r3, r3
 800a072:	2b03      	cmp	r3, #3
 800a074:	d113      	bne.n	800a09e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800a076:	7dba      	ldrb	r2, [r7, #22]
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	32ae      	adds	r2, #174	; 0xae
 800a07c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a080:	691b      	ldr	r3, [r3, #16]
 800a082:	2b00      	cmp	r3, #0
 800a084:	d00b      	beq.n	800a09e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800a086:	7dba      	ldrb	r2, [r7, #22]
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800a08e:	7dba      	ldrb	r2, [r7, #22]
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	32ae      	adds	r2, #174	; 0xae
 800a094:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a098:	691b      	ldr	r3, [r3, #16]
 800a09a:	68f8      	ldr	r0, [r7, #12]
 800a09c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a09e:	68f8      	ldr	r0, [r7, #12]
 800a0a0:	f001 f950 	bl	800b344 <USBD_CtlSendStatus>
 800a0a4:	e032      	b.n	800a10c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800a0a6:	7afb      	ldrb	r3, [r7, #11]
 800a0a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a0ac:	b2db      	uxtb	r3, r3
 800a0ae:	4619      	mov	r1, r3
 800a0b0:	68f8      	ldr	r0, [r7, #12]
 800a0b2:	f000 fa37 	bl	800a524 <USBD_CoreFindEP>
 800a0b6:	4603      	mov	r3, r0
 800a0b8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a0ba:	7dbb      	ldrb	r3, [r7, #22]
 800a0bc:	2bff      	cmp	r3, #255	; 0xff
 800a0be:	d025      	beq.n	800a10c <USBD_LL_DataOutStage+0x15c>
 800a0c0:	7dbb      	ldrb	r3, [r7, #22]
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d122      	bne.n	800a10c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a0cc:	b2db      	uxtb	r3, r3
 800a0ce:	2b03      	cmp	r3, #3
 800a0d0:	d117      	bne.n	800a102 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800a0d2:	7dba      	ldrb	r2, [r7, #22]
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	32ae      	adds	r2, #174	; 0xae
 800a0d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0dc:	699b      	ldr	r3, [r3, #24]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d00f      	beq.n	800a102 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800a0e2:	7dba      	ldrb	r2, [r7, #22]
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800a0ea:	7dba      	ldrb	r2, [r7, #22]
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	32ae      	adds	r2, #174	; 0xae
 800a0f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0f4:	699b      	ldr	r3, [r3, #24]
 800a0f6:	7afa      	ldrb	r2, [r7, #11]
 800a0f8:	4611      	mov	r1, r2
 800a0fa:	68f8      	ldr	r0, [r7, #12]
 800a0fc:	4798      	blx	r3
 800a0fe:	4603      	mov	r3, r0
 800a100:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800a102:	7dfb      	ldrb	r3, [r7, #23]
 800a104:	2b00      	cmp	r3, #0
 800a106:	d001      	beq.n	800a10c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800a108:	7dfb      	ldrb	r3, [r7, #23]
 800a10a:	e000      	b.n	800a10e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800a10c:	2300      	movs	r3, #0
}
 800a10e:	4618      	mov	r0, r3
 800a110:	3718      	adds	r7, #24
 800a112:	46bd      	mov	sp, r7
 800a114:	bd80      	pop	{r7, pc}

0800a116 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a116:	b580      	push	{r7, lr}
 800a118:	b086      	sub	sp, #24
 800a11a:	af00      	add	r7, sp, #0
 800a11c:	60f8      	str	r0, [r7, #12]
 800a11e:	460b      	mov	r3, r1
 800a120:	607a      	str	r2, [r7, #4]
 800a122:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800a124:	7afb      	ldrb	r3, [r7, #11]
 800a126:	2b00      	cmp	r3, #0
 800a128:	d16f      	bne.n	800a20a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	3314      	adds	r3, #20
 800a12e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a136:	2b02      	cmp	r3, #2
 800a138:	d15a      	bne.n	800a1f0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800a13a:	693b      	ldr	r3, [r7, #16]
 800a13c:	689a      	ldr	r2, [r3, #8]
 800a13e:	693b      	ldr	r3, [r7, #16]
 800a140:	68db      	ldr	r3, [r3, #12]
 800a142:	429a      	cmp	r2, r3
 800a144:	d914      	bls.n	800a170 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a146:	693b      	ldr	r3, [r7, #16]
 800a148:	689a      	ldr	r2, [r3, #8]
 800a14a:	693b      	ldr	r3, [r7, #16]
 800a14c:	68db      	ldr	r3, [r3, #12]
 800a14e:	1ad2      	subs	r2, r2, r3
 800a150:	693b      	ldr	r3, [r7, #16]
 800a152:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a154:	693b      	ldr	r3, [r7, #16]
 800a156:	689b      	ldr	r3, [r3, #8]
 800a158:	461a      	mov	r2, r3
 800a15a:	6879      	ldr	r1, [r7, #4]
 800a15c:	68f8      	ldr	r0, [r7, #12]
 800a15e:	f001 f8b2 	bl	800b2c6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a162:	2300      	movs	r3, #0
 800a164:	2200      	movs	r2, #0
 800a166:	2100      	movs	r1, #0
 800a168:	68f8      	ldr	r0, [r7, #12]
 800a16a:	f003 f88d 	bl	800d288 <USBD_LL_PrepareReceive>
 800a16e:	e03f      	b.n	800a1f0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a170:	693b      	ldr	r3, [r7, #16]
 800a172:	68da      	ldr	r2, [r3, #12]
 800a174:	693b      	ldr	r3, [r7, #16]
 800a176:	689b      	ldr	r3, [r3, #8]
 800a178:	429a      	cmp	r2, r3
 800a17a:	d11c      	bne.n	800a1b6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a17c:	693b      	ldr	r3, [r7, #16]
 800a17e:	685a      	ldr	r2, [r3, #4]
 800a180:	693b      	ldr	r3, [r7, #16]
 800a182:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a184:	429a      	cmp	r2, r3
 800a186:	d316      	bcc.n	800a1b6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a188:	693b      	ldr	r3, [r7, #16]
 800a18a:	685a      	ldr	r2, [r3, #4]
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a192:	429a      	cmp	r2, r3
 800a194:	d20f      	bcs.n	800a1b6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a196:	2200      	movs	r2, #0
 800a198:	2100      	movs	r1, #0
 800a19a:	68f8      	ldr	r0, [r7, #12]
 800a19c:	f001 f893 	bl	800b2c6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	2200      	movs	r2, #0
 800a1a4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	2200      	movs	r2, #0
 800a1ac:	2100      	movs	r1, #0
 800a1ae:	68f8      	ldr	r0, [r7, #12]
 800a1b0:	f003 f86a 	bl	800d288 <USBD_LL_PrepareReceive>
 800a1b4:	e01c      	b.n	800a1f0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a1bc:	b2db      	uxtb	r3, r3
 800a1be:	2b03      	cmp	r3, #3
 800a1c0:	d10f      	bne.n	800a1e2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a1c8:	68db      	ldr	r3, [r3, #12]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d009      	beq.n	800a1e2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	2200      	movs	r2, #0
 800a1d2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a1dc:	68db      	ldr	r3, [r3, #12]
 800a1de:	68f8      	ldr	r0, [r7, #12]
 800a1e0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a1e2:	2180      	movs	r1, #128	; 0x80
 800a1e4:	68f8      	ldr	r0, [r7, #12]
 800a1e6:	f002 ffa5 	bl	800d134 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a1ea:	68f8      	ldr	r0, [r7, #12]
 800a1ec:	f001 f8bd 	bl	800b36a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d03a      	beq.n	800a270 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800a1fa:	68f8      	ldr	r0, [r7, #12]
 800a1fc:	f7ff fe42 	bl	8009e84 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	2200      	movs	r2, #0
 800a204:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a208:	e032      	b.n	800a270 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800a20a:	7afb      	ldrb	r3, [r7, #11]
 800a20c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a210:	b2db      	uxtb	r3, r3
 800a212:	4619      	mov	r1, r3
 800a214:	68f8      	ldr	r0, [r7, #12]
 800a216:	f000 f985 	bl	800a524 <USBD_CoreFindEP>
 800a21a:	4603      	mov	r3, r0
 800a21c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a21e:	7dfb      	ldrb	r3, [r7, #23]
 800a220:	2bff      	cmp	r3, #255	; 0xff
 800a222:	d025      	beq.n	800a270 <USBD_LL_DataInStage+0x15a>
 800a224:	7dfb      	ldrb	r3, [r7, #23]
 800a226:	2b00      	cmp	r3, #0
 800a228:	d122      	bne.n	800a270 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a230:	b2db      	uxtb	r3, r3
 800a232:	2b03      	cmp	r3, #3
 800a234:	d11c      	bne.n	800a270 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800a236:	7dfa      	ldrb	r2, [r7, #23]
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	32ae      	adds	r2, #174	; 0xae
 800a23c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a240:	695b      	ldr	r3, [r3, #20]
 800a242:	2b00      	cmp	r3, #0
 800a244:	d014      	beq.n	800a270 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800a246:	7dfa      	ldrb	r2, [r7, #23]
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a24e:	7dfa      	ldrb	r2, [r7, #23]
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	32ae      	adds	r2, #174	; 0xae
 800a254:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a258:	695b      	ldr	r3, [r3, #20]
 800a25a:	7afa      	ldrb	r2, [r7, #11]
 800a25c:	4611      	mov	r1, r2
 800a25e:	68f8      	ldr	r0, [r7, #12]
 800a260:	4798      	blx	r3
 800a262:	4603      	mov	r3, r0
 800a264:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800a266:	7dbb      	ldrb	r3, [r7, #22]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d001      	beq.n	800a270 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800a26c:	7dbb      	ldrb	r3, [r7, #22]
 800a26e:	e000      	b.n	800a272 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800a270:	2300      	movs	r3, #0
}
 800a272:	4618      	mov	r0, r3
 800a274:	3718      	adds	r7, #24
 800a276:	46bd      	mov	sp, r7
 800a278:	bd80      	pop	{r7, pc}

0800a27a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a27a:	b580      	push	{r7, lr}
 800a27c:	b084      	sub	sp, #16
 800a27e:	af00      	add	r7, sp, #0
 800a280:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800a282:	2300      	movs	r3, #0
 800a284:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	2201      	movs	r2, #1
 800a28a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	2200      	movs	r2, #0
 800a292:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	2200      	movs	r2, #0
 800a29a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	2200      	movs	r2, #0
 800a2a0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	2200      	movs	r2, #0
 800a2a8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d014      	beq.n	800a2e0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a2bc:	685b      	ldr	r3, [r3, #4]
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d00e      	beq.n	800a2e0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a2c8:	685b      	ldr	r3, [r3, #4]
 800a2ca:	687a      	ldr	r2, [r7, #4]
 800a2cc:	6852      	ldr	r2, [r2, #4]
 800a2ce:	b2d2      	uxtb	r2, r2
 800a2d0:	4611      	mov	r1, r2
 800a2d2:	6878      	ldr	r0, [r7, #4]
 800a2d4:	4798      	blx	r3
 800a2d6:	4603      	mov	r3, r0
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d001      	beq.n	800a2e0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800a2dc:	2303      	movs	r3, #3
 800a2de:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a2e0:	2340      	movs	r3, #64	; 0x40
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	2100      	movs	r1, #0
 800a2e6:	6878      	ldr	r0, [r7, #4]
 800a2e8:	f002 fedf 	bl	800d0aa <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	2201      	movs	r2, #1
 800a2f0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	2240      	movs	r2, #64	; 0x40
 800a2f8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a2fc:	2340      	movs	r3, #64	; 0x40
 800a2fe:	2200      	movs	r2, #0
 800a300:	2180      	movs	r1, #128	; 0x80
 800a302:	6878      	ldr	r0, [r7, #4]
 800a304:	f002 fed1 	bl	800d0aa <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	2201      	movs	r2, #1
 800a30c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	2240      	movs	r2, #64	; 0x40
 800a312:	621a      	str	r2, [r3, #32]

  return ret;
 800a314:	7bfb      	ldrb	r3, [r7, #15]
}
 800a316:	4618      	mov	r0, r3
 800a318:	3710      	adds	r7, #16
 800a31a:	46bd      	mov	sp, r7
 800a31c:	bd80      	pop	{r7, pc}

0800a31e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a31e:	b480      	push	{r7}
 800a320:	b083      	sub	sp, #12
 800a322:	af00      	add	r7, sp, #0
 800a324:	6078      	str	r0, [r7, #4]
 800a326:	460b      	mov	r3, r1
 800a328:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	78fa      	ldrb	r2, [r7, #3]
 800a32e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a330:	2300      	movs	r3, #0
}
 800a332:	4618      	mov	r0, r3
 800a334:	370c      	adds	r7, #12
 800a336:	46bd      	mov	sp, r7
 800a338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a33c:	4770      	bx	lr

0800a33e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a33e:	b480      	push	{r7}
 800a340:	b083      	sub	sp, #12
 800a342:	af00      	add	r7, sp, #0
 800a344:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a34c:	b2db      	uxtb	r3, r3
 800a34e:	2b04      	cmp	r3, #4
 800a350:	d006      	beq.n	800a360 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a358:	b2da      	uxtb	r2, r3
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	2204      	movs	r2, #4
 800a364:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a368:	2300      	movs	r3, #0
}
 800a36a:	4618      	mov	r0, r3
 800a36c:	370c      	adds	r7, #12
 800a36e:	46bd      	mov	sp, r7
 800a370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a374:	4770      	bx	lr

0800a376 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a376:	b480      	push	{r7}
 800a378:	b083      	sub	sp, #12
 800a37a:	af00      	add	r7, sp, #0
 800a37c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a384:	b2db      	uxtb	r3, r3
 800a386:	2b04      	cmp	r3, #4
 800a388:	d106      	bne.n	800a398 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800a390:	b2da      	uxtb	r2, r3
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a398:	2300      	movs	r3, #0
}
 800a39a:	4618      	mov	r0, r3
 800a39c:	370c      	adds	r7, #12
 800a39e:	46bd      	mov	sp, r7
 800a3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a4:	4770      	bx	lr

0800a3a6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a3a6:	b580      	push	{r7, lr}
 800a3a8:	b082      	sub	sp, #8
 800a3aa:	af00      	add	r7, sp, #0
 800a3ac:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a3b4:	b2db      	uxtb	r3, r3
 800a3b6:	2b03      	cmp	r3, #3
 800a3b8:	d110      	bne.n	800a3dc <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d00b      	beq.n	800a3dc <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a3ca:	69db      	ldr	r3, [r3, #28]
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d005      	beq.n	800a3dc <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a3d6:	69db      	ldr	r3, [r3, #28]
 800a3d8:	6878      	ldr	r0, [r7, #4]
 800a3da:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800a3dc:	2300      	movs	r3, #0
}
 800a3de:	4618      	mov	r0, r3
 800a3e0:	3708      	adds	r7, #8
 800a3e2:	46bd      	mov	sp, r7
 800a3e4:	bd80      	pop	{r7, pc}

0800a3e6 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a3e6:	b580      	push	{r7, lr}
 800a3e8:	b082      	sub	sp, #8
 800a3ea:	af00      	add	r7, sp, #0
 800a3ec:	6078      	str	r0, [r7, #4]
 800a3ee:	460b      	mov	r3, r1
 800a3f0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	32ae      	adds	r2, #174	; 0xae
 800a3fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a400:	2b00      	cmp	r3, #0
 800a402:	d101      	bne.n	800a408 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800a404:	2303      	movs	r3, #3
 800a406:	e01c      	b.n	800a442 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a40e:	b2db      	uxtb	r3, r3
 800a410:	2b03      	cmp	r3, #3
 800a412:	d115      	bne.n	800a440 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	32ae      	adds	r2, #174	; 0xae
 800a41e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a422:	6a1b      	ldr	r3, [r3, #32]
 800a424:	2b00      	cmp	r3, #0
 800a426:	d00b      	beq.n	800a440 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	32ae      	adds	r2, #174	; 0xae
 800a432:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a436:	6a1b      	ldr	r3, [r3, #32]
 800a438:	78fa      	ldrb	r2, [r7, #3]
 800a43a:	4611      	mov	r1, r2
 800a43c:	6878      	ldr	r0, [r7, #4]
 800a43e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a440:	2300      	movs	r3, #0
}
 800a442:	4618      	mov	r0, r3
 800a444:	3708      	adds	r7, #8
 800a446:	46bd      	mov	sp, r7
 800a448:	bd80      	pop	{r7, pc}

0800a44a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a44a:	b580      	push	{r7, lr}
 800a44c:	b082      	sub	sp, #8
 800a44e:	af00      	add	r7, sp, #0
 800a450:	6078      	str	r0, [r7, #4]
 800a452:	460b      	mov	r3, r1
 800a454:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	32ae      	adds	r2, #174	; 0xae
 800a460:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a464:	2b00      	cmp	r3, #0
 800a466:	d101      	bne.n	800a46c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800a468:	2303      	movs	r3, #3
 800a46a:	e01c      	b.n	800a4a6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a472:	b2db      	uxtb	r3, r3
 800a474:	2b03      	cmp	r3, #3
 800a476:	d115      	bne.n	800a4a4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	32ae      	adds	r2, #174	; 0xae
 800a482:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d00b      	beq.n	800a4a4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	32ae      	adds	r2, #174	; 0xae
 800a496:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a49a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a49c:	78fa      	ldrb	r2, [r7, #3]
 800a49e:	4611      	mov	r1, r2
 800a4a0:	6878      	ldr	r0, [r7, #4]
 800a4a2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a4a4:	2300      	movs	r3, #0
}
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	3708      	adds	r7, #8
 800a4aa:	46bd      	mov	sp, r7
 800a4ac:	bd80      	pop	{r7, pc}

0800a4ae <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a4ae:	b480      	push	{r7}
 800a4b0:	b083      	sub	sp, #12
 800a4b2:	af00      	add	r7, sp, #0
 800a4b4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a4b6:	2300      	movs	r3, #0
}
 800a4b8:	4618      	mov	r0, r3
 800a4ba:	370c      	adds	r7, #12
 800a4bc:	46bd      	mov	sp, r7
 800a4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c2:	4770      	bx	lr

0800a4c4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a4c4:	b580      	push	{r7, lr}
 800a4c6:	b084      	sub	sp, #16
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800a4cc:	2300      	movs	r3, #0
 800a4ce:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	2201      	movs	r2, #1
 800a4d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d00e      	beq.n	800a500 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a4e8:	685b      	ldr	r3, [r3, #4]
 800a4ea:	687a      	ldr	r2, [r7, #4]
 800a4ec:	6852      	ldr	r2, [r2, #4]
 800a4ee:	b2d2      	uxtb	r2, r2
 800a4f0:	4611      	mov	r1, r2
 800a4f2:	6878      	ldr	r0, [r7, #4]
 800a4f4:	4798      	blx	r3
 800a4f6:	4603      	mov	r3, r0
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d001      	beq.n	800a500 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800a4fc:	2303      	movs	r3, #3
 800a4fe:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a500:	7bfb      	ldrb	r3, [r7, #15]
}
 800a502:	4618      	mov	r0, r3
 800a504:	3710      	adds	r7, #16
 800a506:	46bd      	mov	sp, r7
 800a508:	bd80      	pop	{r7, pc}

0800a50a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a50a:	b480      	push	{r7}
 800a50c:	b083      	sub	sp, #12
 800a50e:	af00      	add	r7, sp, #0
 800a510:	6078      	str	r0, [r7, #4]
 800a512:	460b      	mov	r3, r1
 800a514:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a516:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a518:	4618      	mov	r0, r3
 800a51a:	370c      	adds	r7, #12
 800a51c:	46bd      	mov	sp, r7
 800a51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a522:	4770      	bx	lr

0800a524 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a524:	b480      	push	{r7}
 800a526:	b083      	sub	sp, #12
 800a528:	af00      	add	r7, sp, #0
 800a52a:	6078      	str	r0, [r7, #4]
 800a52c:	460b      	mov	r3, r1
 800a52e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a530:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a532:	4618      	mov	r0, r3
 800a534:	370c      	adds	r7, #12
 800a536:	46bd      	mov	sp, r7
 800a538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a53c:	4770      	bx	lr

0800a53e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800a53e:	b580      	push	{r7, lr}
 800a540:	b086      	sub	sp, #24
 800a542:	af00      	add	r7, sp, #0
 800a544:	6078      	str	r0, [r7, #4]
 800a546:	460b      	mov	r3, r1
 800a548:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800a552:	2300      	movs	r3, #0
 800a554:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	885b      	ldrh	r3, [r3, #2]
 800a55a:	b29a      	uxth	r2, r3
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	781b      	ldrb	r3, [r3, #0]
 800a560:	b29b      	uxth	r3, r3
 800a562:	429a      	cmp	r2, r3
 800a564:	d920      	bls.n	800a5a8 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	781b      	ldrb	r3, [r3, #0]
 800a56a:	b29b      	uxth	r3, r3
 800a56c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800a56e:	e013      	b.n	800a598 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800a570:	f107 030a 	add.w	r3, r7, #10
 800a574:	4619      	mov	r1, r3
 800a576:	6978      	ldr	r0, [r7, #20]
 800a578:	f000 f81b 	bl	800a5b2 <USBD_GetNextDesc>
 800a57c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a57e:	697b      	ldr	r3, [r7, #20]
 800a580:	785b      	ldrb	r3, [r3, #1]
 800a582:	2b05      	cmp	r3, #5
 800a584:	d108      	bne.n	800a598 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800a586:	697b      	ldr	r3, [r7, #20]
 800a588:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800a58a:	693b      	ldr	r3, [r7, #16]
 800a58c:	789b      	ldrb	r3, [r3, #2]
 800a58e:	78fa      	ldrb	r2, [r7, #3]
 800a590:	429a      	cmp	r2, r3
 800a592:	d008      	beq.n	800a5a6 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800a594:	2300      	movs	r3, #0
 800a596:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	885b      	ldrh	r3, [r3, #2]
 800a59c:	b29a      	uxth	r2, r3
 800a59e:	897b      	ldrh	r3, [r7, #10]
 800a5a0:	429a      	cmp	r2, r3
 800a5a2:	d8e5      	bhi.n	800a570 <USBD_GetEpDesc+0x32>
 800a5a4:	e000      	b.n	800a5a8 <USBD_GetEpDesc+0x6a>
          break;
 800a5a6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800a5a8:	693b      	ldr	r3, [r7, #16]
}
 800a5aa:	4618      	mov	r0, r3
 800a5ac:	3718      	adds	r7, #24
 800a5ae:	46bd      	mov	sp, r7
 800a5b0:	bd80      	pop	{r7, pc}

0800a5b2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a5b2:	b480      	push	{r7}
 800a5b4:	b085      	sub	sp, #20
 800a5b6:	af00      	add	r7, sp, #0
 800a5b8:	6078      	str	r0, [r7, #4]
 800a5ba:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800a5c0:	683b      	ldr	r3, [r7, #0]
 800a5c2:	881a      	ldrh	r2, [r3, #0]
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	781b      	ldrb	r3, [r3, #0]
 800a5c8:	b29b      	uxth	r3, r3
 800a5ca:	4413      	add	r3, r2
 800a5cc:	b29a      	uxth	r2, r3
 800a5ce:	683b      	ldr	r3, [r7, #0]
 800a5d0:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	781b      	ldrb	r3, [r3, #0]
 800a5d6:	461a      	mov	r2, r3
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	4413      	add	r3, r2
 800a5dc:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a5de:	68fb      	ldr	r3, [r7, #12]
}
 800a5e0:	4618      	mov	r0, r3
 800a5e2:	3714      	adds	r7, #20
 800a5e4:	46bd      	mov	sp, r7
 800a5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ea:	4770      	bx	lr

0800a5ec <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a5ec:	b480      	push	{r7}
 800a5ee:	b087      	sub	sp, #28
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a5f8:	697b      	ldr	r3, [r7, #20]
 800a5fa:	781b      	ldrb	r3, [r3, #0]
 800a5fc:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a5fe:	697b      	ldr	r3, [r7, #20]
 800a600:	3301      	adds	r3, #1
 800a602:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a604:	697b      	ldr	r3, [r7, #20]
 800a606:	781b      	ldrb	r3, [r3, #0]
 800a608:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a60a:	8a3b      	ldrh	r3, [r7, #16]
 800a60c:	021b      	lsls	r3, r3, #8
 800a60e:	b21a      	sxth	r2, r3
 800a610:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a614:	4313      	orrs	r3, r2
 800a616:	b21b      	sxth	r3, r3
 800a618:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a61a:	89fb      	ldrh	r3, [r7, #14]
}
 800a61c:	4618      	mov	r0, r3
 800a61e:	371c      	adds	r7, #28
 800a620:	46bd      	mov	sp, r7
 800a622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a626:	4770      	bx	lr

0800a628 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a628:	b580      	push	{r7, lr}
 800a62a:	b084      	sub	sp, #16
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	6078      	str	r0, [r7, #4]
 800a630:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a632:	2300      	movs	r3, #0
 800a634:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a636:	683b      	ldr	r3, [r7, #0]
 800a638:	781b      	ldrb	r3, [r3, #0]
 800a63a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a63e:	2b40      	cmp	r3, #64	; 0x40
 800a640:	d005      	beq.n	800a64e <USBD_StdDevReq+0x26>
 800a642:	2b40      	cmp	r3, #64	; 0x40
 800a644:	d857      	bhi.n	800a6f6 <USBD_StdDevReq+0xce>
 800a646:	2b00      	cmp	r3, #0
 800a648:	d00f      	beq.n	800a66a <USBD_StdDevReq+0x42>
 800a64a:	2b20      	cmp	r3, #32
 800a64c:	d153      	bne.n	800a6f6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	32ae      	adds	r2, #174	; 0xae
 800a658:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a65c:	689b      	ldr	r3, [r3, #8]
 800a65e:	6839      	ldr	r1, [r7, #0]
 800a660:	6878      	ldr	r0, [r7, #4]
 800a662:	4798      	blx	r3
 800a664:	4603      	mov	r3, r0
 800a666:	73fb      	strb	r3, [r7, #15]
      break;
 800a668:	e04a      	b.n	800a700 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a66a:	683b      	ldr	r3, [r7, #0]
 800a66c:	785b      	ldrb	r3, [r3, #1]
 800a66e:	2b09      	cmp	r3, #9
 800a670:	d83b      	bhi.n	800a6ea <USBD_StdDevReq+0xc2>
 800a672:	a201      	add	r2, pc, #4	; (adr r2, 800a678 <USBD_StdDevReq+0x50>)
 800a674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a678:	0800a6cd 	.word	0x0800a6cd
 800a67c:	0800a6e1 	.word	0x0800a6e1
 800a680:	0800a6eb 	.word	0x0800a6eb
 800a684:	0800a6d7 	.word	0x0800a6d7
 800a688:	0800a6eb 	.word	0x0800a6eb
 800a68c:	0800a6ab 	.word	0x0800a6ab
 800a690:	0800a6a1 	.word	0x0800a6a1
 800a694:	0800a6eb 	.word	0x0800a6eb
 800a698:	0800a6c3 	.word	0x0800a6c3
 800a69c:	0800a6b5 	.word	0x0800a6b5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a6a0:	6839      	ldr	r1, [r7, #0]
 800a6a2:	6878      	ldr	r0, [r7, #4]
 800a6a4:	f000 fa3c 	bl	800ab20 <USBD_GetDescriptor>
          break;
 800a6a8:	e024      	b.n	800a6f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a6aa:	6839      	ldr	r1, [r7, #0]
 800a6ac:	6878      	ldr	r0, [r7, #4]
 800a6ae:	f000 fba1 	bl	800adf4 <USBD_SetAddress>
          break;
 800a6b2:	e01f      	b.n	800a6f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a6b4:	6839      	ldr	r1, [r7, #0]
 800a6b6:	6878      	ldr	r0, [r7, #4]
 800a6b8:	f000 fbe0 	bl	800ae7c <USBD_SetConfig>
 800a6bc:	4603      	mov	r3, r0
 800a6be:	73fb      	strb	r3, [r7, #15]
          break;
 800a6c0:	e018      	b.n	800a6f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a6c2:	6839      	ldr	r1, [r7, #0]
 800a6c4:	6878      	ldr	r0, [r7, #4]
 800a6c6:	f000 fc83 	bl	800afd0 <USBD_GetConfig>
          break;
 800a6ca:	e013      	b.n	800a6f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a6cc:	6839      	ldr	r1, [r7, #0]
 800a6ce:	6878      	ldr	r0, [r7, #4]
 800a6d0:	f000 fcb4 	bl	800b03c <USBD_GetStatus>
          break;
 800a6d4:	e00e      	b.n	800a6f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a6d6:	6839      	ldr	r1, [r7, #0]
 800a6d8:	6878      	ldr	r0, [r7, #4]
 800a6da:	f000 fce3 	bl	800b0a4 <USBD_SetFeature>
          break;
 800a6de:	e009      	b.n	800a6f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a6e0:	6839      	ldr	r1, [r7, #0]
 800a6e2:	6878      	ldr	r0, [r7, #4]
 800a6e4:	f000 fd07 	bl	800b0f6 <USBD_ClrFeature>
          break;
 800a6e8:	e004      	b.n	800a6f4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800a6ea:	6839      	ldr	r1, [r7, #0]
 800a6ec:	6878      	ldr	r0, [r7, #4]
 800a6ee:	f000 fd5e 	bl	800b1ae <USBD_CtlError>
          break;
 800a6f2:	bf00      	nop
      }
      break;
 800a6f4:	e004      	b.n	800a700 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800a6f6:	6839      	ldr	r1, [r7, #0]
 800a6f8:	6878      	ldr	r0, [r7, #4]
 800a6fa:	f000 fd58 	bl	800b1ae <USBD_CtlError>
      break;
 800a6fe:	bf00      	nop
  }

  return ret;
 800a700:	7bfb      	ldrb	r3, [r7, #15]
}
 800a702:	4618      	mov	r0, r3
 800a704:	3710      	adds	r7, #16
 800a706:	46bd      	mov	sp, r7
 800a708:	bd80      	pop	{r7, pc}
 800a70a:	bf00      	nop

0800a70c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a70c:	b580      	push	{r7, lr}
 800a70e:	b084      	sub	sp, #16
 800a710:	af00      	add	r7, sp, #0
 800a712:	6078      	str	r0, [r7, #4]
 800a714:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a716:	2300      	movs	r3, #0
 800a718:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a71a:	683b      	ldr	r3, [r7, #0]
 800a71c:	781b      	ldrb	r3, [r3, #0]
 800a71e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a722:	2b40      	cmp	r3, #64	; 0x40
 800a724:	d005      	beq.n	800a732 <USBD_StdItfReq+0x26>
 800a726:	2b40      	cmp	r3, #64	; 0x40
 800a728:	d852      	bhi.n	800a7d0 <USBD_StdItfReq+0xc4>
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d001      	beq.n	800a732 <USBD_StdItfReq+0x26>
 800a72e:	2b20      	cmp	r3, #32
 800a730:	d14e      	bne.n	800a7d0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a738:	b2db      	uxtb	r3, r3
 800a73a:	3b01      	subs	r3, #1
 800a73c:	2b02      	cmp	r3, #2
 800a73e:	d840      	bhi.n	800a7c2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a740:	683b      	ldr	r3, [r7, #0]
 800a742:	889b      	ldrh	r3, [r3, #4]
 800a744:	b2db      	uxtb	r3, r3
 800a746:	2b01      	cmp	r3, #1
 800a748:	d836      	bhi.n	800a7b8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800a74a:	683b      	ldr	r3, [r7, #0]
 800a74c:	889b      	ldrh	r3, [r3, #4]
 800a74e:	b2db      	uxtb	r3, r3
 800a750:	4619      	mov	r1, r3
 800a752:	6878      	ldr	r0, [r7, #4]
 800a754:	f7ff fed9 	bl	800a50a <USBD_CoreFindIF>
 800a758:	4603      	mov	r3, r0
 800a75a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a75c:	7bbb      	ldrb	r3, [r7, #14]
 800a75e:	2bff      	cmp	r3, #255	; 0xff
 800a760:	d01d      	beq.n	800a79e <USBD_StdItfReq+0x92>
 800a762:	7bbb      	ldrb	r3, [r7, #14]
 800a764:	2b00      	cmp	r3, #0
 800a766:	d11a      	bne.n	800a79e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800a768:	7bba      	ldrb	r2, [r7, #14]
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	32ae      	adds	r2, #174	; 0xae
 800a76e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a772:	689b      	ldr	r3, [r3, #8]
 800a774:	2b00      	cmp	r3, #0
 800a776:	d00f      	beq.n	800a798 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800a778:	7bba      	ldrb	r2, [r7, #14]
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a780:	7bba      	ldrb	r2, [r7, #14]
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	32ae      	adds	r2, #174	; 0xae
 800a786:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a78a:	689b      	ldr	r3, [r3, #8]
 800a78c:	6839      	ldr	r1, [r7, #0]
 800a78e:	6878      	ldr	r0, [r7, #4]
 800a790:	4798      	blx	r3
 800a792:	4603      	mov	r3, r0
 800a794:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a796:	e004      	b.n	800a7a2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800a798:	2303      	movs	r3, #3
 800a79a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a79c:	e001      	b.n	800a7a2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800a79e:	2303      	movs	r3, #3
 800a7a0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a7a2:	683b      	ldr	r3, [r7, #0]
 800a7a4:	88db      	ldrh	r3, [r3, #6]
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d110      	bne.n	800a7cc <USBD_StdItfReq+0xc0>
 800a7aa:	7bfb      	ldrb	r3, [r7, #15]
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d10d      	bne.n	800a7cc <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a7b0:	6878      	ldr	r0, [r7, #4]
 800a7b2:	f000 fdc7 	bl	800b344 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a7b6:	e009      	b.n	800a7cc <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800a7b8:	6839      	ldr	r1, [r7, #0]
 800a7ba:	6878      	ldr	r0, [r7, #4]
 800a7bc:	f000 fcf7 	bl	800b1ae <USBD_CtlError>
          break;
 800a7c0:	e004      	b.n	800a7cc <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800a7c2:	6839      	ldr	r1, [r7, #0]
 800a7c4:	6878      	ldr	r0, [r7, #4]
 800a7c6:	f000 fcf2 	bl	800b1ae <USBD_CtlError>
          break;
 800a7ca:	e000      	b.n	800a7ce <USBD_StdItfReq+0xc2>
          break;
 800a7cc:	bf00      	nop
      }
      break;
 800a7ce:	e004      	b.n	800a7da <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800a7d0:	6839      	ldr	r1, [r7, #0]
 800a7d2:	6878      	ldr	r0, [r7, #4]
 800a7d4:	f000 fceb 	bl	800b1ae <USBD_CtlError>
      break;
 800a7d8:	bf00      	nop
  }

  return ret;
 800a7da:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7dc:	4618      	mov	r0, r3
 800a7de:	3710      	adds	r7, #16
 800a7e0:	46bd      	mov	sp, r7
 800a7e2:	bd80      	pop	{r7, pc}

0800a7e4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a7e4:	b580      	push	{r7, lr}
 800a7e6:	b084      	sub	sp, #16
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	6078      	str	r0, [r7, #4]
 800a7ec:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800a7ee:	2300      	movs	r3, #0
 800a7f0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800a7f2:	683b      	ldr	r3, [r7, #0]
 800a7f4:	889b      	ldrh	r3, [r3, #4]
 800a7f6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a7f8:	683b      	ldr	r3, [r7, #0]
 800a7fa:	781b      	ldrb	r3, [r3, #0]
 800a7fc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a800:	2b40      	cmp	r3, #64	; 0x40
 800a802:	d007      	beq.n	800a814 <USBD_StdEPReq+0x30>
 800a804:	2b40      	cmp	r3, #64	; 0x40
 800a806:	f200 817f 	bhi.w	800ab08 <USBD_StdEPReq+0x324>
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d02a      	beq.n	800a864 <USBD_StdEPReq+0x80>
 800a80e:	2b20      	cmp	r3, #32
 800a810:	f040 817a 	bne.w	800ab08 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800a814:	7bbb      	ldrb	r3, [r7, #14]
 800a816:	4619      	mov	r1, r3
 800a818:	6878      	ldr	r0, [r7, #4]
 800a81a:	f7ff fe83 	bl	800a524 <USBD_CoreFindEP>
 800a81e:	4603      	mov	r3, r0
 800a820:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a822:	7b7b      	ldrb	r3, [r7, #13]
 800a824:	2bff      	cmp	r3, #255	; 0xff
 800a826:	f000 8174 	beq.w	800ab12 <USBD_StdEPReq+0x32e>
 800a82a:	7b7b      	ldrb	r3, [r7, #13]
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	f040 8170 	bne.w	800ab12 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800a832:	7b7a      	ldrb	r2, [r7, #13]
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800a83a:	7b7a      	ldrb	r2, [r7, #13]
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	32ae      	adds	r2, #174	; 0xae
 800a840:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a844:	689b      	ldr	r3, [r3, #8]
 800a846:	2b00      	cmp	r3, #0
 800a848:	f000 8163 	beq.w	800ab12 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800a84c:	7b7a      	ldrb	r2, [r7, #13]
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	32ae      	adds	r2, #174	; 0xae
 800a852:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a856:	689b      	ldr	r3, [r3, #8]
 800a858:	6839      	ldr	r1, [r7, #0]
 800a85a:	6878      	ldr	r0, [r7, #4]
 800a85c:	4798      	blx	r3
 800a85e:	4603      	mov	r3, r0
 800a860:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a862:	e156      	b.n	800ab12 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a864:	683b      	ldr	r3, [r7, #0]
 800a866:	785b      	ldrb	r3, [r3, #1]
 800a868:	2b03      	cmp	r3, #3
 800a86a:	d008      	beq.n	800a87e <USBD_StdEPReq+0x9a>
 800a86c:	2b03      	cmp	r3, #3
 800a86e:	f300 8145 	bgt.w	800aafc <USBD_StdEPReq+0x318>
 800a872:	2b00      	cmp	r3, #0
 800a874:	f000 809b 	beq.w	800a9ae <USBD_StdEPReq+0x1ca>
 800a878:	2b01      	cmp	r3, #1
 800a87a:	d03c      	beq.n	800a8f6 <USBD_StdEPReq+0x112>
 800a87c:	e13e      	b.n	800aafc <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a884:	b2db      	uxtb	r3, r3
 800a886:	2b02      	cmp	r3, #2
 800a888:	d002      	beq.n	800a890 <USBD_StdEPReq+0xac>
 800a88a:	2b03      	cmp	r3, #3
 800a88c:	d016      	beq.n	800a8bc <USBD_StdEPReq+0xd8>
 800a88e:	e02c      	b.n	800a8ea <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a890:	7bbb      	ldrb	r3, [r7, #14]
 800a892:	2b00      	cmp	r3, #0
 800a894:	d00d      	beq.n	800a8b2 <USBD_StdEPReq+0xce>
 800a896:	7bbb      	ldrb	r3, [r7, #14]
 800a898:	2b80      	cmp	r3, #128	; 0x80
 800a89a:	d00a      	beq.n	800a8b2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a89c:	7bbb      	ldrb	r3, [r7, #14]
 800a89e:	4619      	mov	r1, r3
 800a8a0:	6878      	ldr	r0, [r7, #4]
 800a8a2:	f002 fc47 	bl	800d134 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a8a6:	2180      	movs	r1, #128	; 0x80
 800a8a8:	6878      	ldr	r0, [r7, #4]
 800a8aa:	f002 fc43 	bl	800d134 <USBD_LL_StallEP>
 800a8ae:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a8b0:	e020      	b.n	800a8f4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800a8b2:	6839      	ldr	r1, [r7, #0]
 800a8b4:	6878      	ldr	r0, [r7, #4]
 800a8b6:	f000 fc7a 	bl	800b1ae <USBD_CtlError>
              break;
 800a8ba:	e01b      	b.n	800a8f4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a8bc:	683b      	ldr	r3, [r7, #0]
 800a8be:	885b      	ldrh	r3, [r3, #2]
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d10e      	bne.n	800a8e2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a8c4:	7bbb      	ldrb	r3, [r7, #14]
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d00b      	beq.n	800a8e2 <USBD_StdEPReq+0xfe>
 800a8ca:	7bbb      	ldrb	r3, [r7, #14]
 800a8cc:	2b80      	cmp	r3, #128	; 0x80
 800a8ce:	d008      	beq.n	800a8e2 <USBD_StdEPReq+0xfe>
 800a8d0:	683b      	ldr	r3, [r7, #0]
 800a8d2:	88db      	ldrh	r3, [r3, #6]
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d104      	bne.n	800a8e2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a8d8:	7bbb      	ldrb	r3, [r7, #14]
 800a8da:	4619      	mov	r1, r3
 800a8dc:	6878      	ldr	r0, [r7, #4]
 800a8de:	f002 fc29 	bl	800d134 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a8e2:	6878      	ldr	r0, [r7, #4]
 800a8e4:	f000 fd2e 	bl	800b344 <USBD_CtlSendStatus>

              break;
 800a8e8:	e004      	b.n	800a8f4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800a8ea:	6839      	ldr	r1, [r7, #0]
 800a8ec:	6878      	ldr	r0, [r7, #4]
 800a8ee:	f000 fc5e 	bl	800b1ae <USBD_CtlError>
              break;
 800a8f2:	bf00      	nop
          }
          break;
 800a8f4:	e107      	b.n	800ab06 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a8fc:	b2db      	uxtb	r3, r3
 800a8fe:	2b02      	cmp	r3, #2
 800a900:	d002      	beq.n	800a908 <USBD_StdEPReq+0x124>
 800a902:	2b03      	cmp	r3, #3
 800a904:	d016      	beq.n	800a934 <USBD_StdEPReq+0x150>
 800a906:	e04b      	b.n	800a9a0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a908:	7bbb      	ldrb	r3, [r7, #14]
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d00d      	beq.n	800a92a <USBD_StdEPReq+0x146>
 800a90e:	7bbb      	ldrb	r3, [r7, #14]
 800a910:	2b80      	cmp	r3, #128	; 0x80
 800a912:	d00a      	beq.n	800a92a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a914:	7bbb      	ldrb	r3, [r7, #14]
 800a916:	4619      	mov	r1, r3
 800a918:	6878      	ldr	r0, [r7, #4]
 800a91a:	f002 fc0b 	bl	800d134 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a91e:	2180      	movs	r1, #128	; 0x80
 800a920:	6878      	ldr	r0, [r7, #4]
 800a922:	f002 fc07 	bl	800d134 <USBD_LL_StallEP>
 800a926:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a928:	e040      	b.n	800a9ac <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800a92a:	6839      	ldr	r1, [r7, #0]
 800a92c:	6878      	ldr	r0, [r7, #4]
 800a92e:	f000 fc3e 	bl	800b1ae <USBD_CtlError>
              break;
 800a932:	e03b      	b.n	800a9ac <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a934:	683b      	ldr	r3, [r7, #0]
 800a936:	885b      	ldrh	r3, [r3, #2]
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d136      	bne.n	800a9aa <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a93c:	7bbb      	ldrb	r3, [r7, #14]
 800a93e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a942:	2b00      	cmp	r3, #0
 800a944:	d004      	beq.n	800a950 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a946:	7bbb      	ldrb	r3, [r7, #14]
 800a948:	4619      	mov	r1, r3
 800a94a:	6878      	ldr	r0, [r7, #4]
 800a94c:	f002 fc11 	bl	800d172 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a950:	6878      	ldr	r0, [r7, #4]
 800a952:	f000 fcf7 	bl	800b344 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800a956:	7bbb      	ldrb	r3, [r7, #14]
 800a958:	4619      	mov	r1, r3
 800a95a:	6878      	ldr	r0, [r7, #4]
 800a95c:	f7ff fde2 	bl	800a524 <USBD_CoreFindEP>
 800a960:	4603      	mov	r3, r0
 800a962:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a964:	7b7b      	ldrb	r3, [r7, #13]
 800a966:	2bff      	cmp	r3, #255	; 0xff
 800a968:	d01f      	beq.n	800a9aa <USBD_StdEPReq+0x1c6>
 800a96a:	7b7b      	ldrb	r3, [r7, #13]
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d11c      	bne.n	800a9aa <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800a970:	7b7a      	ldrb	r2, [r7, #13]
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800a978:	7b7a      	ldrb	r2, [r7, #13]
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	32ae      	adds	r2, #174	; 0xae
 800a97e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a982:	689b      	ldr	r3, [r3, #8]
 800a984:	2b00      	cmp	r3, #0
 800a986:	d010      	beq.n	800a9aa <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a988:	7b7a      	ldrb	r2, [r7, #13]
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	32ae      	adds	r2, #174	; 0xae
 800a98e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a992:	689b      	ldr	r3, [r3, #8]
 800a994:	6839      	ldr	r1, [r7, #0]
 800a996:	6878      	ldr	r0, [r7, #4]
 800a998:	4798      	blx	r3
 800a99a:	4603      	mov	r3, r0
 800a99c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800a99e:	e004      	b.n	800a9aa <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800a9a0:	6839      	ldr	r1, [r7, #0]
 800a9a2:	6878      	ldr	r0, [r7, #4]
 800a9a4:	f000 fc03 	bl	800b1ae <USBD_CtlError>
              break;
 800a9a8:	e000      	b.n	800a9ac <USBD_StdEPReq+0x1c8>
              break;
 800a9aa:	bf00      	nop
          }
          break;
 800a9ac:	e0ab      	b.n	800ab06 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a9b4:	b2db      	uxtb	r3, r3
 800a9b6:	2b02      	cmp	r3, #2
 800a9b8:	d002      	beq.n	800a9c0 <USBD_StdEPReq+0x1dc>
 800a9ba:	2b03      	cmp	r3, #3
 800a9bc:	d032      	beq.n	800aa24 <USBD_StdEPReq+0x240>
 800a9be:	e097      	b.n	800aaf0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a9c0:	7bbb      	ldrb	r3, [r7, #14]
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d007      	beq.n	800a9d6 <USBD_StdEPReq+0x1f2>
 800a9c6:	7bbb      	ldrb	r3, [r7, #14]
 800a9c8:	2b80      	cmp	r3, #128	; 0x80
 800a9ca:	d004      	beq.n	800a9d6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800a9cc:	6839      	ldr	r1, [r7, #0]
 800a9ce:	6878      	ldr	r0, [r7, #4]
 800a9d0:	f000 fbed 	bl	800b1ae <USBD_CtlError>
                break;
 800a9d4:	e091      	b.n	800aafa <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a9d6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	da0b      	bge.n	800a9f6 <USBD_StdEPReq+0x212>
 800a9de:	7bbb      	ldrb	r3, [r7, #14]
 800a9e0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a9e4:	4613      	mov	r3, r2
 800a9e6:	009b      	lsls	r3, r3, #2
 800a9e8:	4413      	add	r3, r2
 800a9ea:	009b      	lsls	r3, r3, #2
 800a9ec:	3310      	adds	r3, #16
 800a9ee:	687a      	ldr	r2, [r7, #4]
 800a9f0:	4413      	add	r3, r2
 800a9f2:	3304      	adds	r3, #4
 800a9f4:	e00b      	b.n	800aa0e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a9f6:	7bbb      	ldrb	r3, [r7, #14]
 800a9f8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a9fc:	4613      	mov	r3, r2
 800a9fe:	009b      	lsls	r3, r3, #2
 800aa00:	4413      	add	r3, r2
 800aa02:	009b      	lsls	r3, r3, #2
 800aa04:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800aa08:	687a      	ldr	r2, [r7, #4]
 800aa0a:	4413      	add	r3, r2
 800aa0c:	3304      	adds	r3, #4
 800aa0e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800aa10:	68bb      	ldr	r3, [r7, #8]
 800aa12:	2200      	movs	r2, #0
 800aa14:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800aa16:	68bb      	ldr	r3, [r7, #8]
 800aa18:	2202      	movs	r2, #2
 800aa1a:	4619      	mov	r1, r3
 800aa1c:	6878      	ldr	r0, [r7, #4]
 800aa1e:	f000 fc37 	bl	800b290 <USBD_CtlSendData>
              break;
 800aa22:	e06a      	b.n	800aafa <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800aa24:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	da11      	bge.n	800aa50 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800aa2c:	7bbb      	ldrb	r3, [r7, #14]
 800aa2e:	f003 020f 	and.w	r2, r3, #15
 800aa32:	6879      	ldr	r1, [r7, #4]
 800aa34:	4613      	mov	r3, r2
 800aa36:	009b      	lsls	r3, r3, #2
 800aa38:	4413      	add	r3, r2
 800aa3a:	009b      	lsls	r3, r3, #2
 800aa3c:	440b      	add	r3, r1
 800aa3e:	3324      	adds	r3, #36	; 0x24
 800aa40:	881b      	ldrh	r3, [r3, #0]
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d117      	bne.n	800aa76 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800aa46:	6839      	ldr	r1, [r7, #0]
 800aa48:	6878      	ldr	r0, [r7, #4]
 800aa4a:	f000 fbb0 	bl	800b1ae <USBD_CtlError>
                  break;
 800aa4e:	e054      	b.n	800aafa <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800aa50:	7bbb      	ldrb	r3, [r7, #14]
 800aa52:	f003 020f 	and.w	r2, r3, #15
 800aa56:	6879      	ldr	r1, [r7, #4]
 800aa58:	4613      	mov	r3, r2
 800aa5a:	009b      	lsls	r3, r3, #2
 800aa5c:	4413      	add	r3, r2
 800aa5e:	009b      	lsls	r3, r3, #2
 800aa60:	440b      	add	r3, r1
 800aa62:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800aa66:	881b      	ldrh	r3, [r3, #0]
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d104      	bne.n	800aa76 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800aa6c:	6839      	ldr	r1, [r7, #0]
 800aa6e:	6878      	ldr	r0, [r7, #4]
 800aa70:	f000 fb9d 	bl	800b1ae <USBD_CtlError>
                  break;
 800aa74:	e041      	b.n	800aafa <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aa76:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	da0b      	bge.n	800aa96 <USBD_StdEPReq+0x2b2>
 800aa7e:	7bbb      	ldrb	r3, [r7, #14]
 800aa80:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aa84:	4613      	mov	r3, r2
 800aa86:	009b      	lsls	r3, r3, #2
 800aa88:	4413      	add	r3, r2
 800aa8a:	009b      	lsls	r3, r3, #2
 800aa8c:	3310      	adds	r3, #16
 800aa8e:	687a      	ldr	r2, [r7, #4]
 800aa90:	4413      	add	r3, r2
 800aa92:	3304      	adds	r3, #4
 800aa94:	e00b      	b.n	800aaae <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800aa96:	7bbb      	ldrb	r3, [r7, #14]
 800aa98:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aa9c:	4613      	mov	r3, r2
 800aa9e:	009b      	lsls	r3, r3, #2
 800aaa0:	4413      	add	r3, r2
 800aaa2:	009b      	lsls	r3, r3, #2
 800aaa4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800aaa8:	687a      	ldr	r2, [r7, #4]
 800aaaa:	4413      	add	r3, r2
 800aaac:	3304      	adds	r3, #4
 800aaae:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800aab0:	7bbb      	ldrb	r3, [r7, #14]
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d002      	beq.n	800aabc <USBD_StdEPReq+0x2d8>
 800aab6:	7bbb      	ldrb	r3, [r7, #14]
 800aab8:	2b80      	cmp	r3, #128	; 0x80
 800aaba:	d103      	bne.n	800aac4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800aabc:	68bb      	ldr	r3, [r7, #8]
 800aabe:	2200      	movs	r2, #0
 800aac0:	601a      	str	r2, [r3, #0]
 800aac2:	e00e      	b.n	800aae2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800aac4:	7bbb      	ldrb	r3, [r7, #14]
 800aac6:	4619      	mov	r1, r3
 800aac8:	6878      	ldr	r0, [r7, #4]
 800aaca:	f002 fb71 	bl	800d1b0 <USBD_LL_IsStallEP>
 800aace:	4603      	mov	r3, r0
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d003      	beq.n	800aadc <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800aad4:	68bb      	ldr	r3, [r7, #8]
 800aad6:	2201      	movs	r2, #1
 800aad8:	601a      	str	r2, [r3, #0]
 800aada:	e002      	b.n	800aae2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800aadc:	68bb      	ldr	r3, [r7, #8]
 800aade:	2200      	movs	r2, #0
 800aae0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800aae2:	68bb      	ldr	r3, [r7, #8]
 800aae4:	2202      	movs	r2, #2
 800aae6:	4619      	mov	r1, r3
 800aae8:	6878      	ldr	r0, [r7, #4]
 800aaea:	f000 fbd1 	bl	800b290 <USBD_CtlSendData>
              break;
 800aaee:	e004      	b.n	800aafa <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800aaf0:	6839      	ldr	r1, [r7, #0]
 800aaf2:	6878      	ldr	r0, [r7, #4]
 800aaf4:	f000 fb5b 	bl	800b1ae <USBD_CtlError>
              break;
 800aaf8:	bf00      	nop
          }
          break;
 800aafa:	e004      	b.n	800ab06 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800aafc:	6839      	ldr	r1, [r7, #0]
 800aafe:	6878      	ldr	r0, [r7, #4]
 800ab00:	f000 fb55 	bl	800b1ae <USBD_CtlError>
          break;
 800ab04:	bf00      	nop
      }
      break;
 800ab06:	e005      	b.n	800ab14 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800ab08:	6839      	ldr	r1, [r7, #0]
 800ab0a:	6878      	ldr	r0, [r7, #4]
 800ab0c:	f000 fb4f 	bl	800b1ae <USBD_CtlError>
      break;
 800ab10:	e000      	b.n	800ab14 <USBD_StdEPReq+0x330>
      break;
 800ab12:	bf00      	nop
  }

  return ret;
 800ab14:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab16:	4618      	mov	r0, r3
 800ab18:	3710      	adds	r7, #16
 800ab1a:	46bd      	mov	sp, r7
 800ab1c:	bd80      	pop	{r7, pc}
	...

0800ab20 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ab20:	b580      	push	{r7, lr}
 800ab22:	b084      	sub	sp, #16
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	6078      	str	r0, [r7, #4]
 800ab28:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ab2a:	2300      	movs	r3, #0
 800ab2c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800ab2e:	2300      	movs	r3, #0
 800ab30:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800ab32:	2300      	movs	r3, #0
 800ab34:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800ab36:	683b      	ldr	r3, [r7, #0]
 800ab38:	885b      	ldrh	r3, [r3, #2]
 800ab3a:	0a1b      	lsrs	r3, r3, #8
 800ab3c:	b29b      	uxth	r3, r3
 800ab3e:	3b01      	subs	r3, #1
 800ab40:	2b06      	cmp	r3, #6
 800ab42:	f200 8128 	bhi.w	800ad96 <USBD_GetDescriptor+0x276>
 800ab46:	a201      	add	r2, pc, #4	; (adr r2, 800ab4c <USBD_GetDescriptor+0x2c>)
 800ab48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab4c:	0800ab69 	.word	0x0800ab69
 800ab50:	0800ab81 	.word	0x0800ab81
 800ab54:	0800abc1 	.word	0x0800abc1
 800ab58:	0800ad97 	.word	0x0800ad97
 800ab5c:	0800ad97 	.word	0x0800ad97
 800ab60:	0800ad37 	.word	0x0800ad37
 800ab64:	0800ad63 	.word	0x0800ad63
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	687a      	ldr	r2, [r7, #4]
 800ab72:	7c12      	ldrb	r2, [r2, #16]
 800ab74:	f107 0108 	add.w	r1, r7, #8
 800ab78:	4610      	mov	r0, r2
 800ab7a:	4798      	blx	r3
 800ab7c:	60f8      	str	r0, [r7, #12]
      break;
 800ab7e:	e112      	b.n	800ada6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	7c1b      	ldrb	r3, [r3, #16]
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d10d      	bne.n	800aba4 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab90:	f107 0208 	add.w	r2, r7, #8
 800ab94:	4610      	mov	r0, r2
 800ab96:	4798      	blx	r3
 800ab98:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	3301      	adds	r3, #1
 800ab9e:	2202      	movs	r2, #2
 800aba0:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800aba2:	e100      	b.n	800ada6 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800abaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abac:	f107 0208 	add.w	r2, r7, #8
 800abb0:	4610      	mov	r0, r2
 800abb2:	4798      	blx	r3
 800abb4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	3301      	adds	r3, #1
 800abba:	2202      	movs	r2, #2
 800abbc:	701a      	strb	r2, [r3, #0]
      break;
 800abbe:	e0f2      	b.n	800ada6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800abc0:	683b      	ldr	r3, [r7, #0]
 800abc2:	885b      	ldrh	r3, [r3, #2]
 800abc4:	b2db      	uxtb	r3, r3
 800abc6:	2b05      	cmp	r3, #5
 800abc8:	f200 80ac 	bhi.w	800ad24 <USBD_GetDescriptor+0x204>
 800abcc:	a201      	add	r2, pc, #4	; (adr r2, 800abd4 <USBD_GetDescriptor+0xb4>)
 800abce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abd2:	bf00      	nop
 800abd4:	0800abed 	.word	0x0800abed
 800abd8:	0800ac21 	.word	0x0800ac21
 800abdc:	0800ac55 	.word	0x0800ac55
 800abe0:	0800ac89 	.word	0x0800ac89
 800abe4:	0800acbd 	.word	0x0800acbd
 800abe8:	0800acf1 	.word	0x0800acf1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800abf2:	685b      	ldr	r3, [r3, #4]
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d00b      	beq.n	800ac10 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800abfe:	685b      	ldr	r3, [r3, #4]
 800ac00:	687a      	ldr	r2, [r7, #4]
 800ac02:	7c12      	ldrb	r2, [r2, #16]
 800ac04:	f107 0108 	add.w	r1, r7, #8
 800ac08:	4610      	mov	r0, r2
 800ac0a:	4798      	blx	r3
 800ac0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ac0e:	e091      	b.n	800ad34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ac10:	6839      	ldr	r1, [r7, #0]
 800ac12:	6878      	ldr	r0, [r7, #4]
 800ac14:	f000 facb 	bl	800b1ae <USBD_CtlError>
            err++;
 800ac18:	7afb      	ldrb	r3, [r7, #11]
 800ac1a:	3301      	adds	r3, #1
 800ac1c:	72fb      	strb	r3, [r7, #11]
          break;
 800ac1e:	e089      	b.n	800ad34 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac26:	689b      	ldr	r3, [r3, #8]
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d00b      	beq.n	800ac44 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac32:	689b      	ldr	r3, [r3, #8]
 800ac34:	687a      	ldr	r2, [r7, #4]
 800ac36:	7c12      	ldrb	r2, [r2, #16]
 800ac38:	f107 0108 	add.w	r1, r7, #8
 800ac3c:	4610      	mov	r0, r2
 800ac3e:	4798      	blx	r3
 800ac40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ac42:	e077      	b.n	800ad34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ac44:	6839      	ldr	r1, [r7, #0]
 800ac46:	6878      	ldr	r0, [r7, #4]
 800ac48:	f000 fab1 	bl	800b1ae <USBD_CtlError>
            err++;
 800ac4c:	7afb      	ldrb	r3, [r7, #11]
 800ac4e:	3301      	adds	r3, #1
 800ac50:	72fb      	strb	r3, [r7, #11]
          break;
 800ac52:	e06f      	b.n	800ad34 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac5a:	68db      	ldr	r3, [r3, #12]
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d00b      	beq.n	800ac78 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac66:	68db      	ldr	r3, [r3, #12]
 800ac68:	687a      	ldr	r2, [r7, #4]
 800ac6a:	7c12      	ldrb	r2, [r2, #16]
 800ac6c:	f107 0108 	add.w	r1, r7, #8
 800ac70:	4610      	mov	r0, r2
 800ac72:	4798      	blx	r3
 800ac74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ac76:	e05d      	b.n	800ad34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ac78:	6839      	ldr	r1, [r7, #0]
 800ac7a:	6878      	ldr	r0, [r7, #4]
 800ac7c:	f000 fa97 	bl	800b1ae <USBD_CtlError>
            err++;
 800ac80:	7afb      	ldrb	r3, [r7, #11]
 800ac82:	3301      	adds	r3, #1
 800ac84:	72fb      	strb	r3, [r7, #11]
          break;
 800ac86:	e055      	b.n	800ad34 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac8e:	691b      	ldr	r3, [r3, #16]
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d00b      	beq.n	800acac <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac9a:	691b      	ldr	r3, [r3, #16]
 800ac9c:	687a      	ldr	r2, [r7, #4]
 800ac9e:	7c12      	ldrb	r2, [r2, #16]
 800aca0:	f107 0108 	add.w	r1, r7, #8
 800aca4:	4610      	mov	r0, r2
 800aca6:	4798      	blx	r3
 800aca8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800acaa:	e043      	b.n	800ad34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800acac:	6839      	ldr	r1, [r7, #0]
 800acae:	6878      	ldr	r0, [r7, #4]
 800acb0:	f000 fa7d 	bl	800b1ae <USBD_CtlError>
            err++;
 800acb4:	7afb      	ldrb	r3, [r7, #11]
 800acb6:	3301      	adds	r3, #1
 800acb8:	72fb      	strb	r3, [r7, #11]
          break;
 800acba:	e03b      	b.n	800ad34 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800acc2:	695b      	ldr	r3, [r3, #20]
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d00b      	beq.n	800ace0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800acce:	695b      	ldr	r3, [r3, #20]
 800acd0:	687a      	ldr	r2, [r7, #4]
 800acd2:	7c12      	ldrb	r2, [r2, #16]
 800acd4:	f107 0108 	add.w	r1, r7, #8
 800acd8:	4610      	mov	r0, r2
 800acda:	4798      	blx	r3
 800acdc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800acde:	e029      	b.n	800ad34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ace0:	6839      	ldr	r1, [r7, #0]
 800ace2:	6878      	ldr	r0, [r7, #4]
 800ace4:	f000 fa63 	bl	800b1ae <USBD_CtlError>
            err++;
 800ace8:	7afb      	ldrb	r3, [r7, #11]
 800acea:	3301      	adds	r3, #1
 800acec:	72fb      	strb	r3, [r7, #11]
          break;
 800acee:	e021      	b.n	800ad34 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800acf6:	699b      	ldr	r3, [r3, #24]
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d00b      	beq.n	800ad14 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad02:	699b      	ldr	r3, [r3, #24]
 800ad04:	687a      	ldr	r2, [r7, #4]
 800ad06:	7c12      	ldrb	r2, [r2, #16]
 800ad08:	f107 0108 	add.w	r1, r7, #8
 800ad0c:	4610      	mov	r0, r2
 800ad0e:	4798      	blx	r3
 800ad10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ad12:	e00f      	b.n	800ad34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ad14:	6839      	ldr	r1, [r7, #0]
 800ad16:	6878      	ldr	r0, [r7, #4]
 800ad18:	f000 fa49 	bl	800b1ae <USBD_CtlError>
            err++;
 800ad1c:	7afb      	ldrb	r3, [r7, #11]
 800ad1e:	3301      	adds	r3, #1
 800ad20:	72fb      	strb	r3, [r7, #11]
          break;
 800ad22:	e007      	b.n	800ad34 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800ad24:	6839      	ldr	r1, [r7, #0]
 800ad26:	6878      	ldr	r0, [r7, #4]
 800ad28:	f000 fa41 	bl	800b1ae <USBD_CtlError>
          err++;
 800ad2c:	7afb      	ldrb	r3, [r7, #11]
 800ad2e:	3301      	adds	r3, #1
 800ad30:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800ad32:	bf00      	nop
      }
      break;
 800ad34:	e037      	b.n	800ada6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	7c1b      	ldrb	r3, [r3, #16]
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d109      	bne.n	800ad52 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad46:	f107 0208 	add.w	r2, r7, #8
 800ad4a:	4610      	mov	r0, r2
 800ad4c:	4798      	blx	r3
 800ad4e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ad50:	e029      	b.n	800ada6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ad52:	6839      	ldr	r1, [r7, #0]
 800ad54:	6878      	ldr	r0, [r7, #4]
 800ad56:	f000 fa2a 	bl	800b1ae <USBD_CtlError>
        err++;
 800ad5a:	7afb      	ldrb	r3, [r7, #11]
 800ad5c:	3301      	adds	r3, #1
 800ad5e:	72fb      	strb	r3, [r7, #11]
      break;
 800ad60:	e021      	b.n	800ada6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	7c1b      	ldrb	r3, [r3, #16]
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d10d      	bne.n	800ad86 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad72:	f107 0208 	add.w	r2, r7, #8
 800ad76:	4610      	mov	r0, r2
 800ad78:	4798      	blx	r3
 800ad7a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	3301      	adds	r3, #1
 800ad80:	2207      	movs	r2, #7
 800ad82:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ad84:	e00f      	b.n	800ada6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ad86:	6839      	ldr	r1, [r7, #0]
 800ad88:	6878      	ldr	r0, [r7, #4]
 800ad8a:	f000 fa10 	bl	800b1ae <USBD_CtlError>
        err++;
 800ad8e:	7afb      	ldrb	r3, [r7, #11]
 800ad90:	3301      	adds	r3, #1
 800ad92:	72fb      	strb	r3, [r7, #11]
      break;
 800ad94:	e007      	b.n	800ada6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800ad96:	6839      	ldr	r1, [r7, #0]
 800ad98:	6878      	ldr	r0, [r7, #4]
 800ad9a:	f000 fa08 	bl	800b1ae <USBD_CtlError>
      err++;
 800ad9e:	7afb      	ldrb	r3, [r7, #11]
 800ada0:	3301      	adds	r3, #1
 800ada2:	72fb      	strb	r3, [r7, #11]
      break;
 800ada4:	bf00      	nop
  }

  if (err != 0U)
 800ada6:	7afb      	ldrb	r3, [r7, #11]
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d11e      	bne.n	800adea <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800adac:	683b      	ldr	r3, [r7, #0]
 800adae:	88db      	ldrh	r3, [r3, #6]
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d016      	beq.n	800ade2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800adb4:	893b      	ldrh	r3, [r7, #8]
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d00e      	beq.n	800add8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800adba:	683b      	ldr	r3, [r7, #0]
 800adbc:	88da      	ldrh	r2, [r3, #6]
 800adbe:	893b      	ldrh	r3, [r7, #8]
 800adc0:	4293      	cmp	r3, r2
 800adc2:	bf28      	it	cs
 800adc4:	4613      	movcs	r3, r2
 800adc6:	b29b      	uxth	r3, r3
 800adc8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800adca:	893b      	ldrh	r3, [r7, #8]
 800adcc:	461a      	mov	r2, r3
 800adce:	68f9      	ldr	r1, [r7, #12]
 800add0:	6878      	ldr	r0, [r7, #4]
 800add2:	f000 fa5d 	bl	800b290 <USBD_CtlSendData>
 800add6:	e009      	b.n	800adec <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800add8:	6839      	ldr	r1, [r7, #0]
 800adda:	6878      	ldr	r0, [r7, #4]
 800addc:	f000 f9e7 	bl	800b1ae <USBD_CtlError>
 800ade0:	e004      	b.n	800adec <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800ade2:	6878      	ldr	r0, [r7, #4]
 800ade4:	f000 faae 	bl	800b344 <USBD_CtlSendStatus>
 800ade8:	e000      	b.n	800adec <USBD_GetDescriptor+0x2cc>
    return;
 800adea:	bf00      	nop
  }
}
 800adec:	3710      	adds	r7, #16
 800adee:	46bd      	mov	sp, r7
 800adf0:	bd80      	pop	{r7, pc}
 800adf2:	bf00      	nop

0800adf4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800adf4:	b580      	push	{r7, lr}
 800adf6:	b084      	sub	sp, #16
 800adf8:	af00      	add	r7, sp, #0
 800adfa:	6078      	str	r0, [r7, #4]
 800adfc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800adfe:	683b      	ldr	r3, [r7, #0]
 800ae00:	889b      	ldrh	r3, [r3, #4]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d131      	bne.n	800ae6a <USBD_SetAddress+0x76>
 800ae06:	683b      	ldr	r3, [r7, #0]
 800ae08:	88db      	ldrh	r3, [r3, #6]
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d12d      	bne.n	800ae6a <USBD_SetAddress+0x76>
 800ae0e:	683b      	ldr	r3, [r7, #0]
 800ae10:	885b      	ldrh	r3, [r3, #2]
 800ae12:	2b7f      	cmp	r3, #127	; 0x7f
 800ae14:	d829      	bhi.n	800ae6a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ae16:	683b      	ldr	r3, [r7, #0]
 800ae18:	885b      	ldrh	r3, [r3, #2]
 800ae1a:	b2db      	uxtb	r3, r3
 800ae1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae20:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae28:	b2db      	uxtb	r3, r3
 800ae2a:	2b03      	cmp	r3, #3
 800ae2c:	d104      	bne.n	800ae38 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800ae2e:	6839      	ldr	r1, [r7, #0]
 800ae30:	6878      	ldr	r0, [r7, #4]
 800ae32:	f000 f9bc 	bl	800b1ae <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae36:	e01d      	b.n	800ae74 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	7bfa      	ldrb	r2, [r7, #15]
 800ae3c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ae40:	7bfb      	ldrb	r3, [r7, #15]
 800ae42:	4619      	mov	r1, r3
 800ae44:	6878      	ldr	r0, [r7, #4]
 800ae46:	f002 f9df 	bl	800d208 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800ae4a:	6878      	ldr	r0, [r7, #4]
 800ae4c:	f000 fa7a 	bl	800b344 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ae50:	7bfb      	ldrb	r3, [r7, #15]
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d004      	beq.n	800ae60 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	2202      	movs	r2, #2
 800ae5a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae5e:	e009      	b.n	800ae74 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	2201      	movs	r2, #1
 800ae64:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae68:	e004      	b.n	800ae74 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ae6a:	6839      	ldr	r1, [r7, #0]
 800ae6c:	6878      	ldr	r0, [r7, #4]
 800ae6e:	f000 f99e 	bl	800b1ae <USBD_CtlError>
  }
}
 800ae72:	bf00      	nop
 800ae74:	bf00      	nop
 800ae76:	3710      	adds	r7, #16
 800ae78:	46bd      	mov	sp, r7
 800ae7a:	bd80      	pop	{r7, pc}

0800ae7c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae7c:	b580      	push	{r7, lr}
 800ae7e:	b084      	sub	sp, #16
 800ae80:	af00      	add	r7, sp, #0
 800ae82:	6078      	str	r0, [r7, #4]
 800ae84:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ae86:	2300      	movs	r3, #0
 800ae88:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ae8a:	683b      	ldr	r3, [r7, #0]
 800ae8c:	885b      	ldrh	r3, [r3, #2]
 800ae8e:	b2da      	uxtb	r2, r3
 800ae90:	4b4e      	ldr	r3, [pc, #312]	; (800afcc <USBD_SetConfig+0x150>)
 800ae92:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ae94:	4b4d      	ldr	r3, [pc, #308]	; (800afcc <USBD_SetConfig+0x150>)
 800ae96:	781b      	ldrb	r3, [r3, #0]
 800ae98:	2b01      	cmp	r3, #1
 800ae9a:	d905      	bls.n	800aea8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800ae9c:	6839      	ldr	r1, [r7, #0]
 800ae9e:	6878      	ldr	r0, [r7, #4]
 800aea0:	f000 f985 	bl	800b1ae <USBD_CtlError>
    return USBD_FAIL;
 800aea4:	2303      	movs	r3, #3
 800aea6:	e08c      	b.n	800afc2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aeae:	b2db      	uxtb	r3, r3
 800aeb0:	2b02      	cmp	r3, #2
 800aeb2:	d002      	beq.n	800aeba <USBD_SetConfig+0x3e>
 800aeb4:	2b03      	cmp	r3, #3
 800aeb6:	d029      	beq.n	800af0c <USBD_SetConfig+0x90>
 800aeb8:	e075      	b.n	800afa6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800aeba:	4b44      	ldr	r3, [pc, #272]	; (800afcc <USBD_SetConfig+0x150>)
 800aebc:	781b      	ldrb	r3, [r3, #0]
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d020      	beq.n	800af04 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800aec2:	4b42      	ldr	r3, [pc, #264]	; (800afcc <USBD_SetConfig+0x150>)
 800aec4:	781b      	ldrb	r3, [r3, #0]
 800aec6:	461a      	mov	r2, r3
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800aecc:	4b3f      	ldr	r3, [pc, #252]	; (800afcc <USBD_SetConfig+0x150>)
 800aece:	781b      	ldrb	r3, [r3, #0]
 800aed0:	4619      	mov	r1, r3
 800aed2:	6878      	ldr	r0, [r7, #4]
 800aed4:	f7fe ffe1 	bl	8009e9a <USBD_SetClassConfig>
 800aed8:	4603      	mov	r3, r0
 800aeda:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800aedc:	7bfb      	ldrb	r3, [r7, #15]
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d008      	beq.n	800aef4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800aee2:	6839      	ldr	r1, [r7, #0]
 800aee4:	6878      	ldr	r0, [r7, #4]
 800aee6:	f000 f962 	bl	800b1ae <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	2202      	movs	r2, #2
 800aeee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800aef2:	e065      	b.n	800afc0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800aef4:	6878      	ldr	r0, [r7, #4]
 800aef6:	f000 fa25 	bl	800b344 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	2203      	movs	r2, #3
 800aefe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800af02:	e05d      	b.n	800afc0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800af04:	6878      	ldr	r0, [r7, #4]
 800af06:	f000 fa1d 	bl	800b344 <USBD_CtlSendStatus>
      break;
 800af0a:	e059      	b.n	800afc0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800af0c:	4b2f      	ldr	r3, [pc, #188]	; (800afcc <USBD_SetConfig+0x150>)
 800af0e:	781b      	ldrb	r3, [r3, #0]
 800af10:	2b00      	cmp	r3, #0
 800af12:	d112      	bne.n	800af3a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	2202      	movs	r2, #2
 800af18:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800af1c:	4b2b      	ldr	r3, [pc, #172]	; (800afcc <USBD_SetConfig+0x150>)
 800af1e:	781b      	ldrb	r3, [r3, #0]
 800af20:	461a      	mov	r2, r3
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800af26:	4b29      	ldr	r3, [pc, #164]	; (800afcc <USBD_SetConfig+0x150>)
 800af28:	781b      	ldrb	r3, [r3, #0]
 800af2a:	4619      	mov	r1, r3
 800af2c:	6878      	ldr	r0, [r7, #4]
 800af2e:	f7fe ffd0 	bl	8009ed2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800af32:	6878      	ldr	r0, [r7, #4]
 800af34:	f000 fa06 	bl	800b344 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800af38:	e042      	b.n	800afc0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800af3a:	4b24      	ldr	r3, [pc, #144]	; (800afcc <USBD_SetConfig+0x150>)
 800af3c:	781b      	ldrb	r3, [r3, #0]
 800af3e:	461a      	mov	r2, r3
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	685b      	ldr	r3, [r3, #4]
 800af44:	429a      	cmp	r2, r3
 800af46:	d02a      	beq.n	800af9e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	685b      	ldr	r3, [r3, #4]
 800af4c:	b2db      	uxtb	r3, r3
 800af4e:	4619      	mov	r1, r3
 800af50:	6878      	ldr	r0, [r7, #4]
 800af52:	f7fe ffbe 	bl	8009ed2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800af56:	4b1d      	ldr	r3, [pc, #116]	; (800afcc <USBD_SetConfig+0x150>)
 800af58:	781b      	ldrb	r3, [r3, #0]
 800af5a:	461a      	mov	r2, r3
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800af60:	4b1a      	ldr	r3, [pc, #104]	; (800afcc <USBD_SetConfig+0x150>)
 800af62:	781b      	ldrb	r3, [r3, #0]
 800af64:	4619      	mov	r1, r3
 800af66:	6878      	ldr	r0, [r7, #4]
 800af68:	f7fe ff97 	bl	8009e9a <USBD_SetClassConfig>
 800af6c:	4603      	mov	r3, r0
 800af6e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800af70:	7bfb      	ldrb	r3, [r7, #15]
 800af72:	2b00      	cmp	r3, #0
 800af74:	d00f      	beq.n	800af96 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800af76:	6839      	ldr	r1, [r7, #0]
 800af78:	6878      	ldr	r0, [r7, #4]
 800af7a:	f000 f918 	bl	800b1ae <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	685b      	ldr	r3, [r3, #4]
 800af82:	b2db      	uxtb	r3, r3
 800af84:	4619      	mov	r1, r3
 800af86:	6878      	ldr	r0, [r7, #4]
 800af88:	f7fe ffa3 	bl	8009ed2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	2202      	movs	r2, #2
 800af90:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800af94:	e014      	b.n	800afc0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800af96:	6878      	ldr	r0, [r7, #4]
 800af98:	f000 f9d4 	bl	800b344 <USBD_CtlSendStatus>
      break;
 800af9c:	e010      	b.n	800afc0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800af9e:	6878      	ldr	r0, [r7, #4]
 800afa0:	f000 f9d0 	bl	800b344 <USBD_CtlSendStatus>
      break;
 800afa4:	e00c      	b.n	800afc0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800afa6:	6839      	ldr	r1, [r7, #0]
 800afa8:	6878      	ldr	r0, [r7, #4]
 800afaa:	f000 f900 	bl	800b1ae <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800afae:	4b07      	ldr	r3, [pc, #28]	; (800afcc <USBD_SetConfig+0x150>)
 800afb0:	781b      	ldrb	r3, [r3, #0]
 800afb2:	4619      	mov	r1, r3
 800afb4:	6878      	ldr	r0, [r7, #4]
 800afb6:	f7fe ff8c 	bl	8009ed2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800afba:	2303      	movs	r3, #3
 800afbc:	73fb      	strb	r3, [r7, #15]
      break;
 800afbe:	bf00      	nop
  }

  return ret;
 800afc0:	7bfb      	ldrb	r3, [r7, #15]
}
 800afc2:	4618      	mov	r0, r3
 800afc4:	3710      	adds	r7, #16
 800afc6:	46bd      	mov	sp, r7
 800afc8:	bd80      	pop	{r7, pc}
 800afca:	bf00      	nop
 800afcc:	20000530 	.word	0x20000530

0800afd0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800afd0:	b580      	push	{r7, lr}
 800afd2:	b082      	sub	sp, #8
 800afd4:	af00      	add	r7, sp, #0
 800afd6:	6078      	str	r0, [r7, #4]
 800afd8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800afda:	683b      	ldr	r3, [r7, #0]
 800afdc:	88db      	ldrh	r3, [r3, #6]
 800afde:	2b01      	cmp	r3, #1
 800afe0:	d004      	beq.n	800afec <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800afe2:	6839      	ldr	r1, [r7, #0]
 800afe4:	6878      	ldr	r0, [r7, #4]
 800afe6:	f000 f8e2 	bl	800b1ae <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800afea:	e023      	b.n	800b034 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aff2:	b2db      	uxtb	r3, r3
 800aff4:	2b02      	cmp	r3, #2
 800aff6:	dc02      	bgt.n	800affe <USBD_GetConfig+0x2e>
 800aff8:	2b00      	cmp	r3, #0
 800affa:	dc03      	bgt.n	800b004 <USBD_GetConfig+0x34>
 800affc:	e015      	b.n	800b02a <USBD_GetConfig+0x5a>
 800affe:	2b03      	cmp	r3, #3
 800b000:	d00b      	beq.n	800b01a <USBD_GetConfig+0x4a>
 800b002:	e012      	b.n	800b02a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	2200      	movs	r2, #0
 800b008:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	3308      	adds	r3, #8
 800b00e:	2201      	movs	r2, #1
 800b010:	4619      	mov	r1, r3
 800b012:	6878      	ldr	r0, [r7, #4]
 800b014:	f000 f93c 	bl	800b290 <USBD_CtlSendData>
        break;
 800b018:	e00c      	b.n	800b034 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	3304      	adds	r3, #4
 800b01e:	2201      	movs	r2, #1
 800b020:	4619      	mov	r1, r3
 800b022:	6878      	ldr	r0, [r7, #4]
 800b024:	f000 f934 	bl	800b290 <USBD_CtlSendData>
        break;
 800b028:	e004      	b.n	800b034 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b02a:	6839      	ldr	r1, [r7, #0]
 800b02c:	6878      	ldr	r0, [r7, #4]
 800b02e:	f000 f8be 	bl	800b1ae <USBD_CtlError>
        break;
 800b032:	bf00      	nop
}
 800b034:	bf00      	nop
 800b036:	3708      	adds	r7, #8
 800b038:	46bd      	mov	sp, r7
 800b03a:	bd80      	pop	{r7, pc}

0800b03c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b03c:	b580      	push	{r7, lr}
 800b03e:	b082      	sub	sp, #8
 800b040:	af00      	add	r7, sp, #0
 800b042:	6078      	str	r0, [r7, #4]
 800b044:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b04c:	b2db      	uxtb	r3, r3
 800b04e:	3b01      	subs	r3, #1
 800b050:	2b02      	cmp	r3, #2
 800b052:	d81e      	bhi.n	800b092 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b054:	683b      	ldr	r3, [r7, #0]
 800b056:	88db      	ldrh	r3, [r3, #6]
 800b058:	2b02      	cmp	r3, #2
 800b05a:	d004      	beq.n	800b066 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b05c:	6839      	ldr	r1, [r7, #0]
 800b05e:	6878      	ldr	r0, [r7, #4]
 800b060:	f000 f8a5 	bl	800b1ae <USBD_CtlError>
        break;
 800b064:	e01a      	b.n	800b09c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	2201      	movs	r2, #1
 800b06a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b072:	2b00      	cmp	r3, #0
 800b074:	d005      	beq.n	800b082 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	68db      	ldr	r3, [r3, #12]
 800b07a:	f043 0202 	orr.w	r2, r3, #2
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	330c      	adds	r3, #12
 800b086:	2202      	movs	r2, #2
 800b088:	4619      	mov	r1, r3
 800b08a:	6878      	ldr	r0, [r7, #4]
 800b08c:	f000 f900 	bl	800b290 <USBD_CtlSendData>
      break;
 800b090:	e004      	b.n	800b09c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b092:	6839      	ldr	r1, [r7, #0]
 800b094:	6878      	ldr	r0, [r7, #4]
 800b096:	f000 f88a 	bl	800b1ae <USBD_CtlError>
      break;
 800b09a:	bf00      	nop
  }
}
 800b09c:	bf00      	nop
 800b09e:	3708      	adds	r7, #8
 800b0a0:	46bd      	mov	sp, r7
 800b0a2:	bd80      	pop	{r7, pc}

0800b0a4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b0a4:	b580      	push	{r7, lr}
 800b0a6:	b082      	sub	sp, #8
 800b0a8:	af00      	add	r7, sp, #0
 800b0aa:	6078      	str	r0, [r7, #4]
 800b0ac:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b0ae:	683b      	ldr	r3, [r7, #0]
 800b0b0:	885b      	ldrh	r3, [r3, #2]
 800b0b2:	2b01      	cmp	r3, #1
 800b0b4:	d107      	bne.n	800b0c6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	2201      	movs	r2, #1
 800b0ba:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b0be:	6878      	ldr	r0, [r7, #4]
 800b0c0:	f000 f940 	bl	800b344 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800b0c4:	e013      	b.n	800b0ee <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800b0c6:	683b      	ldr	r3, [r7, #0]
 800b0c8:	885b      	ldrh	r3, [r3, #2]
 800b0ca:	2b02      	cmp	r3, #2
 800b0cc:	d10b      	bne.n	800b0e6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800b0ce:	683b      	ldr	r3, [r7, #0]
 800b0d0:	889b      	ldrh	r3, [r3, #4]
 800b0d2:	0a1b      	lsrs	r3, r3, #8
 800b0d4:	b29b      	uxth	r3, r3
 800b0d6:	b2da      	uxtb	r2, r3
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800b0de:	6878      	ldr	r0, [r7, #4]
 800b0e0:	f000 f930 	bl	800b344 <USBD_CtlSendStatus>
}
 800b0e4:	e003      	b.n	800b0ee <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800b0e6:	6839      	ldr	r1, [r7, #0]
 800b0e8:	6878      	ldr	r0, [r7, #4]
 800b0ea:	f000 f860 	bl	800b1ae <USBD_CtlError>
}
 800b0ee:	bf00      	nop
 800b0f0:	3708      	adds	r7, #8
 800b0f2:	46bd      	mov	sp, r7
 800b0f4:	bd80      	pop	{r7, pc}

0800b0f6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b0f6:	b580      	push	{r7, lr}
 800b0f8:	b082      	sub	sp, #8
 800b0fa:	af00      	add	r7, sp, #0
 800b0fc:	6078      	str	r0, [r7, #4]
 800b0fe:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b106:	b2db      	uxtb	r3, r3
 800b108:	3b01      	subs	r3, #1
 800b10a:	2b02      	cmp	r3, #2
 800b10c:	d80b      	bhi.n	800b126 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b10e:	683b      	ldr	r3, [r7, #0]
 800b110:	885b      	ldrh	r3, [r3, #2]
 800b112:	2b01      	cmp	r3, #1
 800b114:	d10c      	bne.n	800b130 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	2200      	movs	r2, #0
 800b11a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b11e:	6878      	ldr	r0, [r7, #4]
 800b120:	f000 f910 	bl	800b344 <USBD_CtlSendStatus>
      }
      break;
 800b124:	e004      	b.n	800b130 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b126:	6839      	ldr	r1, [r7, #0]
 800b128:	6878      	ldr	r0, [r7, #4]
 800b12a:	f000 f840 	bl	800b1ae <USBD_CtlError>
      break;
 800b12e:	e000      	b.n	800b132 <USBD_ClrFeature+0x3c>
      break;
 800b130:	bf00      	nop
  }
}
 800b132:	bf00      	nop
 800b134:	3708      	adds	r7, #8
 800b136:	46bd      	mov	sp, r7
 800b138:	bd80      	pop	{r7, pc}

0800b13a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b13a:	b580      	push	{r7, lr}
 800b13c:	b084      	sub	sp, #16
 800b13e:	af00      	add	r7, sp, #0
 800b140:	6078      	str	r0, [r7, #4]
 800b142:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b144:	683b      	ldr	r3, [r7, #0]
 800b146:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	781a      	ldrb	r2, [r3, #0]
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	3301      	adds	r3, #1
 800b154:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	781a      	ldrb	r2, [r3, #0]
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	3301      	adds	r3, #1
 800b162:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b164:	68f8      	ldr	r0, [r7, #12]
 800b166:	f7ff fa41 	bl	800a5ec <SWAPBYTE>
 800b16a:	4603      	mov	r3, r0
 800b16c:	461a      	mov	r2, r3
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	3301      	adds	r3, #1
 800b176:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	3301      	adds	r3, #1
 800b17c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b17e:	68f8      	ldr	r0, [r7, #12]
 800b180:	f7ff fa34 	bl	800a5ec <SWAPBYTE>
 800b184:	4603      	mov	r3, r0
 800b186:	461a      	mov	r2, r3
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	3301      	adds	r3, #1
 800b190:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	3301      	adds	r3, #1
 800b196:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b198:	68f8      	ldr	r0, [r7, #12]
 800b19a:	f7ff fa27 	bl	800a5ec <SWAPBYTE>
 800b19e:	4603      	mov	r3, r0
 800b1a0:	461a      	mov	r2, r3
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	80da      	strh	r2, [r3, #6]
}
 800b1a6:	bf00      	nop
 800b1a8:	3710      	adds	r7, #16
 800b1aa:	46bd      	mov	sp, r7
 800b1ac:	bd80      	pop	{r7, pc}

0800b1ae <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b1ae:	b580      	push	{r7, lr}
 800b1b0:	b082      	sub	sp, #8
 800b1b2:	af00      	add	r7, sp, #0
 800b1b4:	6078      	str	r0, [r7, #4]
 800b1b6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b1b8:	2180      	movs	r1, #128	; 0x80
 800b1ba:	6878      	ldr	r0, [r7, #4]
 800b1bc:	f001 ffba 	bl	800d134 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b1c0:	2100      	movs	r1, #0
 800b1c2:	6878      	ldr	r0, [r7, #4]
 800b1c4:	f001 ffb6 	bl	800d134 <USBD_LL_StallEP>
}
 800b1c8:	bf00      	nop
 800b1ca:	3708      	adds	r7, #8
 800b1cc:	46bd      	mov	sp, r7
 800b1ce:	bd80      	pop	{r7, pc}

0800b1d0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b1d0:	b580      	push	{r7, lr}
 800b1d2:	b086      	sub	sp, #24
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	60f8      	str	r0, [r7, #12]
 800b1d8:	60b9      	str	r1, [r7, #8]
 800b1da:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b1dc:	2300      	movs	r3, #0
 800b1de:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d036      	beq.n	800b254 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b1ea:	6938      	ldr	r0, [r7, #16]
 800b1ec:	f000 f836 	bl	800b25c <USBD_GetLen>
 800b1f0:	4603      	mov	r3, r0
 800b1f2:	3301      	adds	r3, #1
 800b1f4:	b29b      	uxth	r3, r3
 800b1f6:	005b      	lsls	r3, r3, #1
 800b1f8:	b29a      	uxth	r2, r3
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b1fe:	7dfb      	ldrb	r3, [r7, #23]
 800b200:	68ba      	ldr	r2, [r7, #8]
 800b202:	4413      	add	r3, r2
 800b204:	687a      	ldr	r2, [r7, #4]
 800b206:	7812      	ldrb	r2, [r2, #0]
 800b208:	701a      	strb	r2, [r3, #0]
  idx++;
 800b20a:	7dfb      	ldrb	r3, [r7, #23]
 800b20c:	3301      	adds	r3, #1
 800b20e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b210:	7dfb      	ldrb	r3, [r7, #23]
 800b212:	68ba      	ldr	r2, [r7, #8]
 800b214:	4413      	add	r3, r2
 800b216:	2203      	movs	r2, #3
 800b218:	701a      	strb	r2, [r3, #0]
  idx++;
 800b21a:	7dfb      	ldrb	r3, [r7, #23]
 800b21c:	3301      	adds	r3, #1
 800b21e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b220:	e013      	b.n	800b24a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b222:	7dfb      	ldrb	r3, [r7, #23]
 800b224:	68ba      	ldr	r2, [r7, #8]
 800b226:	4413      	add	r3, r2
 800b228:	693a      	ldr	r2, [r7, #16]
 800b22a:	7812      	ldrb	r2, [r2, #0]
 800b22c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b22e:	693b      	ldr	r3, [r7, #16]
 800b230:	3301      	adds	r3, #1
 800b232:	613b      	str	r3, [r7, #16]
    idx++;
 800b234:	7dfb      	ldrb	r3, [r7, #23]
 800b236:	3301      	adds	r3, #1
 800b238:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b23a:	7dfb      	ldrb	r3, [r7, #23]
 800b23c:	68ba      	ldr	r2, [r7, #8]
 800b23e:	4413      	add	r3, r2
 800b240:	2200      	movs	r2, #0
 800b242:	701a      	strb	r2, [r3, #0]
    idx++;
 800b244:	7dfb      	ldrb	r3, [r7, #23]
 800b246:	3301      	adds	r3, #1
 800b248:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b24a:	693b      	ldr	r3, [r7, #16]
 800b24c:	781b      	ldrb	r3, [r3, #0]
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d1e7      	bne.n	800b222 <USBD_GetString+0x52>
 800b252:	e000      	b.n	800b256 <USBD_GetString+0x86>
    return;
 800b254:	bf00      	nop
  }
}
 800b256:	3718      	adds	r7, #24
 800b258:	46bd      	mov	sp, r7
 800b25a:	bd80      	pop	{r7, pc}

0800b25c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b25c:	b480      	push	{r7}
 800b25e:	b085      	sub	sp, #20
 800b260:	af00      	add	r7, sp, #0
 800b262:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b264:	2300      	movs	r3, #0
 800b266:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b26c:	e005      	b.n	800b27a <USBD_GetLen+0x1e>
  {
    len++;
 800b26e:	7bfb      	ldrb	r3, [r7, #15]
 800b270:	3301      	adds	r3, #1
 800b272:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b274:	68bb      	ldr	r3, [r7, #8]
 800b276:	3301      	adds	r3, #1
 800b278:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b27a:	68bb      	ldr	r3, [r7, #8]
 800b27c:	781b      	ldrb	r3, [r3, #0]
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d1f5      	bne.n	800b26e <USBD_GetLen+0x12>
  }

  return len;
 800b282:	7bfb      	ldrb	r3, [r7, #15]
}
 800b284:	4618      	mov	r0, r3
 800b286:	3714      	adds	r7, #20
 800b288:	46bd      	mov	sp, r7
 800b28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b28e:	4770      	bx	lr

0800b290 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b290:	b580      	push	{r7, lr}
 800b292:	b084      	sub	sp, #16
 800b294:	af00      	add	r7, sp, #0
 800b296:	60f8      	str	r0, [r7, #12]
 800b298:	60b9      	str	r1, [r7, #8]
 800b29a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	2202      	movs	r2, #2
 800b2a0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	687a      	ldr	r2, [r7, #4]
 800b2a8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	687a      	ldr	r2, [r7, #4]
 800b2ae:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	68ba      	ldr	r2, [r7, #8]
 800b2b4:	2100      	movs	r1, #0
 800b2b6:	68f8      	ldr	r0, [r7, #12]
 800b2b8:	f001 ffc5 	bl	800d246 <USBD_LL_Transmit>

  return USBD_OK;
 800b2bc:	2300      	movs	r3, #0
}
 800b2be:	4618      	mov	r0, r3
 800b2c0:	3710      	adds	r7, #16
 800b2c2:	46bd      	mov	sp, r7
 800b2c4:	bd80      	pop	{r7, pc}

0800b2c6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b2c6:	b580      	push	{r7, lr}
 800b2c8:	b084      	sub	sp, #16
 800b2ca:	af00      	add	r7, sp, #0
 800b2cc:	60f8      	str	r0, [r7, #12]
 800b2ce:	60b9      	str	r1, [r7, #8]
 800b2d0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	68ba      	ldr	r2, [r7, #8]
 800b2d6:	2100      	movs	r1, #0
 800b2d8:	68f8      	ldr	r0, [r7, #12]
 800b2da:	f001 ffb4 	bl	800d246 <USBD_LL_Transmit>

  return USBD_OK;
 800b2de:	2300      	movs	r3, #0
}
 800b2e0:	4618      	mov	r0, r3
 800b2e2:	3710      	adds	r7, #16
 800b2e4:	46bd      	mov	sp, r7
 800b2e6:	bd80      	pop	{r7, pc}

0800b2e8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b2e8:	b580      	push	{r7, lr}
 800b2ea:	b084      	sub	sp, #16
 800b2ec:	af00      	add	r7, sp, #0
 800b2ee:	60f8      	str	r0, [r7, #12]
 800b2f0:	60b9      	str	r1, [r7, #8]
 800b2f2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	2203      	movs	r2, #3
 800b2f8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	687a      	ldr	r2, [r7, #4]
 800b300:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	687a      	ldr	r2, [r7, #4]
 800b308:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	68ba      	ldr	r2, [r7, #8]
 800b310:	2100      	movs	r1, #0
 800b312:	68f8      	ldr	r0, [r7, #12]
 800b314:	f001 ffb8 	bl	800d288 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b318:	2300      	movs	r3, #0
}
 800b31a:	4618      	mov	r0, r3
 800b31c:	3710      	adds	r7, #16
 800b31e:	46bd      	mov	sp, r7
 800b320:	bd80      	pop	{r7, pc}

0800b322 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b322:	b580      	push	{r7, lr}
 800b324:	b084      	sub	sp, #16
 800b326:	af00      	add	r7, sp, #0
 800b328:	60f8      	str	r0, [r7, #12]
 800b32a:	60b9      	str	r1, [r7, #8]
 800b32c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	68ba      	ldr	r2, [r7, #8]
 800b332:	2100      	movs	r1, #0
 800b334:	68f8      	ldr	r0, [r7, #12]
 800b336:	f001 ffa7 	bl	800d288 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b33a:	2300      	movs	r3, #0
}
 800b33c:	4618      	mov	r0, r3
 800b33e:	3710      	adds	r7, #16
 800b340:	46bd      	mov	sp, r7
 800b342:	bd80      	pop	{r7, pc}

0800b344 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b344:	b580      	push	{r7, lr}
 800b346:	b082      	sub	sp, #8
 800b348:	af00      	add	r7, sp, #0
 800b34a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	2204      	movs	r2, #4
 800b350:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b354:	2300      	movs	r3, #0
 800b356:	2200      	movs	r2, #0
 800b358:	2100      	movs	r1, #0
 800b35a:	6878      	ldr	r0, [r7, #4]
 800b35c:	f001 ff73 	bl	800d246 <USBD_LL_Transmit>

  return USBD_OK;
 800b360:	2300      	movs	r3, #0
}
 800b362:	4618      	mov	r0, r3
 800b364:	3708      	adds	r7, #8
 800b366:	46bd      	mov	sp, r7
 800b368:	bd80      	pop	{r7, pc}

0800b36a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b36a:	b580      	push	{r7, lr}
 800b36c:	b082      	sub	sp, #8
 800b36e:	af00      	add	r7, sp, #0
 800b370:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	2205      	movs	r2, #5
 800b376:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b37a:	2300      	movs	r3, #0
 800b37c:	2200      	movs	r2, #0
 800b37e:	2100      	movs	r1, #0
 800b380:	6878      	ldr	r0, [r7, #4]
 800b382:	f001 ff81 	bl	800d288 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b386:	2300      	movs	r3, #0
}
 800b388:	4618      	mov	r0, r3
 800b38a:	3708      	adds	r7, #8
 800b38c:	46bd      	mov	sp, r7
 800b38e:	bd80      	pop	{r7, pc}

0800b390 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800b390:	b480      	push	{r7}
 800b392:	b085      	sub	sp, #20
 800b394:	af00      	add	r7, sp, #0
 800b396:	4603      	mov	r3, r0
 800b398:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800b39a:	2300      	movs	r3, #0
 800b39c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800b39e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b3a2:	2b84      	cmp	r3, #132	; 0x84
 800b3a4:	d005      	beq.n	800b3b2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800b3a6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	4413      	add	r3, r2
 800b3ae:	3303      	adds	r3, #3
 800b3b0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800b3b2:	68fb      	ldr	r3, [r7, #12]
}
 800b3b4:	4618      	mov	r0, r3
 800b3b6:	3714      	adds	r7, #20
 800b3b8:	46bd      	mov	sp, r7
 800b3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3be:	4770      	bx	lr

0800b3c0 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800b3c0:	b480      	push	{r7}
 800b3c2:	b083      	sub	sp, #12
 800b3c4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b3c6:	f3ef 8305 	mrs	r3, IPSR
 800b3ca:	607b      	str	r3, [r7, #4]
  return(result);
 800b3cc:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	bf14      	ite	ne
 800b3d2:	2301      	movne	r3, #1
 800b3d4:	2300      	moveq	r3, #0
 800b3d6:	b2db      	uxtb	r3, r3
}
 800b3d8:	4618      	mov	r0, r3
 800b3da:	370c      	adds	r7, #12
 800b3dc:	46bd      	mov	sp, r7
 800b3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e2:	4770      	bx	lr

0800b3e4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800b3e4:	b580      	push	{r7, lr}
 800b3e6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800b3e8:	f000 fb1c 	bl	800ba24 <vTaskStartScheduler>
  
  return osOK;
 800b3ec:	2300      	movs	r3, #0
}
 800b3ee:	4618      	mov	r0, r3
 800b3f0:	bd80      	pop	{r7, pc}

0800b3f2 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800b3f2:	b580      	push	{r7, lr}
 800b3f4:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800b3f6:	f7ff ffe3 	bl	800b3c0 <inHandlerMode>
 800b3fa:	4603      	mov	r3, r0
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d003      	beq.n	800b408 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800b400:	f000 fc1a 	bl	800bc38 <xTaskGetTickCountFromISR>
 800b404:	4603      	mov	r3, r0
 800b406:	e002      	b.n	800b40e <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800b408:	f000 fc06 	bl	800bc18 <xTaskGetTickCount>
 800b40c:	4603      	mov	r3, r0
  }
}
 800b40e:	4618      	mov	r0, r3
 800b410:	bd80      	pop	{r7, pc}

0800b412 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800b412:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b414:	b087      	sub	sp, #28
 800b416:	af02      	add	r7, sp, #8
 800b418:	6078      	str	r0, [r7, #4]
 800b41a:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	685c      	ldr	r4, [r3, #4]
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b428:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b430:	4618      	mov	r0, r3
 800b432:	f7ff ffad 	bl	800b390 <makeFreeRtosPriority>
 800b436:	4602      	mov	r2, r0
 800b438:	f107 030c 	add.w	r3, r7, #12
 800b43c:	9301      	str	r3, [sp, #4]
 800b43e:	9200      	str	r2, [sp, #0]
 800b440:	683b      	ldr	r3, [r7, #0]
 800b442:	4632      	mov	r2, r6
 800b444:	4629      	mov	r1, r5
 800b446:	4620      	mov	r0, r4
 800b448:	f000 f8e8 	bl	800b61c <xTaskCreate>
 800b44c:	4603      	mov	r3, r0
 800b44e:	2b01      	cmp	r3, #1
 800b450:	d001      	beq.n	800b456 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 800b452:	2300      	movs	r3, #0
 800b454:	e000      	b.n	800b458 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 800b456:	68fb      	ldr	r3, [r7, #12]
}
 800b458:	4618      	mov	r0, r3
 800b45a:	3714      	adds	r7, #20
 800b45c:	46bd      	mov	sp, r7
 800b45e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b460 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800b460:	b580      	push	{r7, lr}
 800b462:	b084      	sub	sp, #16
 800b464:	af00      	add	r7, sp, #0
 800b466:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d001      	beq.n	800b476 <osDelay+0x16>
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	e000      	b.n	800b478 <osDelay+0x18>
 800b476:	2301      	movs	r3, #1
 800b478:	4618      	mov	r0, r3
 800b47a:	f000 fa9f 	bl	800b9bc <vTaskDelay>
  
  return osOK;
 800b47e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800b480:	4618      	mov	r0, r3
 800b482:	3710      	adds	r7, #16
 800b484:	46bd      	mov	sp, r7
 800b486:	bd80      	pop	{r7, pc}

0800b488 <osDelayUntil>:
*          prior to its first use (PreviousWakeTime = osKernelSysTick() )
* @param   millisec    time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelayUntil (uint32_t *PreviousWakeTime, uint32_t millisec)
{
 800b488:	b580      	push	{r7, lr}
 800b48a:	b084      	sub	sp, #16
 800b48c:	af00      	add	r7, sp, #0
 800b48e:	6078      	str	r0, [r7, #4]
 800b490:	6039      	str	r1, [r7, #0]
#if INCLUDE_vTaskDelayUntil
  TickType_t ticks = (millisec / portTICK_PERIOD_MS);
 800b492:	683b      	ldr	r3, [r7, #0]
 800b494:	60fb      	str	r3, [r7, #12]
  vTaskDelayUntil((TickType_t *) PreviousWakeTime, ticks ? ticks : 1);
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d001      	beq.n	800b4a0 <osDelayUntil+0x18>
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	e000      	b.n	800b4a2 <osDelayUntil+0x1a>
 800b4a0:	2301      	movs	r3, #1
 800b4a2:	4619      	mov	r1, r3
 800b4a4:	6878      	ldr	r0, [r7, #4]
 800b4a6:	f000 fa0b 	bl	800b8c0 <vTaskDelayUntil>
  
  return osOK;
 800b4aa:	2300      	movs	r3, #0
  (void) millisec;
  (void) PreviousWakeTime;
  
  return osErrorResource;
#endif
}
 800b4ac:	4618      	mov	r0, r3
 800b4ae:	3710      	adds	r7, #16
 800b4b0:	46bd      	mov	sp, r7
 800b4b2:	bd80      	pop	{r7, pc}

0800b4b4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b4b4:	b480      	push	{r7}
 800b4b6:	b083      	sub	sp, #12
 800b4b8:	af00      	add	r7, sp, #0
 800b4ba:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	f103 0208 	add.w	r2, r3, #8
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b4cc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	f103 0208 	add.w	r2, r3, #8
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	f103 0208 	add.w	r2, r3, #8
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	2200      	movs	r2, #0
 800b4e6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b4e8:	bf00      	nop
 800b4ea:	370c      	adds	r7, #12
 800b4ec:	46bd      	mov	sp, r7
 800b4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f2:	4770      	bx	lr

0800b4f4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b4f4:	b480      	push	{r7}
 800b4f6:	b083      	sub	sp, #12
 800b4f8:	af00      	add	r7, sp, #0
 800b4fa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	2200      	movs	r2, #0
 800b500:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b502:	bf00      	nop
 800b504:	370c      	adds	r7, #12
 800b506:	46bd      	mov	sp, r7
 800b508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b50c:	4770      	bx	lr

0800b50e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b50e:	b480      	push	{r7}
 800b510:	b085      	sub	sp, #20
 800b512:	af00      	add	r7, sp, #0
 800b514:	6078      	str	r0, [r7, #4]
 800b516:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	685b      	ldr	r3, [r3, #4]
 800b51c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b51e:	683b      	ldr	r3, [r7, #0]
 800b520:	68fa      	ldr	r2, [r7, #12]
 800b522:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	689a      	ldr	r2, [r3, #8]
 800b528:	683b      	ldr	r3, [r7, #0]
 800b52a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	689b      	ldr	r3, [r3, #8]
 800b530:	683a      	ldr	r2, [r7, #0]
 800b532:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	683a      	ldr	r2, [r7, #0]
 800b538:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b53a:	683b      	ldr	r3, [r7, #0]
 800b53c:	687a      	ldr	r2, [r7, #4]
 800b53e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	1c5a      	adds	r2, r3, #1
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	601a      	str	r2, [r3, #0]
}
 800b54a:	bf00      	nop
 800b54c:	3714      	adds	r7, #20
 800b54e:	46bd      	mov	sp, r7
 800b550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b554:	4770      	bx	lr

0800b556 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b556:	b480      	push	{r7}
 800b558:	b085      	sub	sp, #20
 800b55a:	af00      	add	r7, sp, #0
 800b55c:	6078      	str	r0, [r7, #4]
 800b55e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b560:	683b      	ldr	r3, [r7, #0]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b566:	68bb      	ldr	r3, [r7, #8]
 800b568:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b56c:	d103      	bne.n	800b576 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	691b      	ldr	r3, [r3, #16]
 800b572:	60fb      	str	r3, [r7, #12]
 800b574:	e00c      	b.n	800b590 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	3308      	adds	r3, #8
 800b57a:	60fb      	str	r3, [r7, #12]
 800b57c:	e002      	b.n	800b584 <vListInsert+0x2e>
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	685b      	ldr	r3, [r3, #4]
 800b582:	60fb      	str	r3, [r7, #12]
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	685b      	ldr	r3, [r3, #4]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	68ba      	ldr	r2, [r7, #8]
 800b58c:	429a      	cmp	r2, r3
 800b58e:	d2f6      	bcs.n	800b57e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	685a      	ldr	r2, [r3, #4]
 800b594:	683b      	ldr	r3, [r7, #0]
 800b596:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b598:	683b      	ldr	r3, [r7, #0]
 800b59a:	685b      	ldr	r3, [r3, #4]
 800b59c:	683a      	ldr	r2, [r7, #0]
 800b59e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b5a0:	683b      	ldr	r3, [r7, #0]
 800b5a2:	68fa      	ldr	r2, [r7, #12]
 800b5a4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	683a      	ldr	r2, [r7, #0]
 800b5aa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b5ac:	683b      	ldr	r3, [r7, #0]
 800b5ae:	687a      	ldr	r2, [r7, #4]
 800b5b0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	1c5a      	adds	r2, r3, #1
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	601a      	str	r2, [r3, #0]
}
 800b5bc:	bf00      	nop
 800b5be:	3714      	adds	r7, #20
 800b5c0:	46bd      	mov	sp, r7
 800b5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c6:	4770      	bx	lr

0800b5c8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b5c8:	b480      	push	{r7}
 800b5ca:	b085      	sub	sp, #20
 800b5cc:	af00      	add	r7, sp, #0
 800b5ce:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	691b      	ldr	r3, [r3, #16]
 800b5d4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	685b      	ldr	r3, [r3, #4]
 800b5da:	687a      	ldr	r2, [r7, #4]
 800b5dc:	6892      	ldr	r2, [r2, #8]
 800b5de:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	689b      	ldr	r3, [r3, #8]
 800b5e4:	687a      	ldr	r2, [r7, #4]
 800b5e6:	6852      	ldr	r2, [r2, #4]
 800b5e8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	685b      	ldr	r3, [r3, #4]
 800b5ee:	687a      	ldr	r2, [r7, #4]
 800b5f0:	429a      	cmp	r2, r3
 800b5f2:	d103      	bne.n	800b5fc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	689a      	ldr	r2, [r3, #8]
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	2200      	movs	r2, #0
 800b600:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	1e5a      	subs	r2, r3, #1
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	681b      	ldr	r3, [r3, #0]
}
 800b610:	4618      	mov	r0, r3
 800b612:	3714      	adds	r7, #20
 800b614:	46bd      	mov	sp, r7
 800b616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b61a:	4770      	bx	lr

0800b61c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b61c:	b580      	push	{r7, lr}
 800b61e:	b08c      	sub	sp, #48	; 0x30
 800b620:	af04      	add	r7, sp, #16
 800b622:	60f8      	str	r0, [r7, #12]
 800b624:	60b9      	str	r1, [r7, #8]
 800b626:	603b      	str	r3, [r7, #0]
 800b628:	4613      	mov	r3, r2
 800b62a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b62c:	88fb      	ldrh	r3, [r7, #6]
 800b62e:	009b      	lsls	r3, r3, #2
 800b630:	4618      	mov	r0, r3
 800b632:	f000 ffc1 	bl	800c5b8 <pvPortMalloc>
 800b636:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b638:	697b      	ldr	r3, [r7, #20]
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d00e      	beq.n	800b65c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b63e:	20a0      	movs	r0, #160	; 0xa0
 800b640:	f000 ffba 	bl	800c5b8 <pvPortMalloc>
 800b644:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b646:	69fb      	ldr	r3, [r7, #28]
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d003      	beq.n	800b654 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b64c:	69fb      	ldr	r3, [r7, #28]
 800b64e:	697a      	ldr	r2, [r7, #20]
 800b650:	631a      	str	r2, [r3, #48]	; 0x30
 800b652:	e005      	b.n	800b660 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b654:	6978      	ldr	r0, [r7, #20]
 800b656:	f001 f87f 	bl	800c758 <vPortFree>
 800b65a:	e001      	b.n	800b660 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b65c:	2300      	movs	r3, #0
 800b65e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b660:	69fb      	ldr	r3, [r7, #28]
 800b662:	2b00      	cmp	r3, #0
 800b664:	d013      	beq.n	800b68e <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b666:	88fa      	ldrh	r2, [r7, #6]
 800b668:	2300      	movs	r3, #0
 800b66a:	9303      	str	r3, [sp, #12]
 800b66c:	69fb      	ldr	r3, [r7, #28]
 800b66e:	9302      	str	r3, [sp, #8]
 800b670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b672:	9301      	str	r3, [sp, #4]
 800b674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b676:	9300      	str	r3, [sp, #0]
 800b678:	683b      	ldr	r3, [r7, #0]
 800b67a:	68b9      	ldr	r1, [r7, #8]
 800b67c:	68f8      	ldr	r0, [r7, #12]
 800b67e:	f000 f80f 	bl	800b6a0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b682:	69f8      	ldr	r0, [r7, #28]
 800b684:	f000 f8b2 	bl	800b7ec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b688:	2301      	movs	r3, #1
 800b68a:	61bb      	str	r3, [r7, #24]
 800b68c:	e002      	b.n	800b694 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b68e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b692:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b694:	69bb      	ldr	r3, [r7, #24]
	}
 800b696:	4618      	mov	r0, r3
 800b698:	3720      	adds	r7, #32
 800b69a:	46bd      	mov	sp, r7
 800b69c:	bd80      	pop	{r7, pc}
	...

0800b6a0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b6a0:	b580      	push	{r7, lr}
 800b6a2:	b088      	sub	sp, #32
 800b6a4:	af00      	add	r7, sp, #0
 800b6a6:	60f8      	str	r0, [r7, #12]
 800b6a8:	60b9      	str	r1, [r7, #8]
 800b6aa:	607a      	str	r2, [r7, #4]
 800b6ac:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b6ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6b0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	009b      	lsls	r3, r3, #2
 800b6b6:	461a      	mov	r2, r3
 800b6b8:	21a5      	movs	r1, #165	; 0xa5
 800b6ba:	f006 f912 	bl	80118e2 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b6be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b6c8:	3b01      	subs	r3, #1
 800b6ca:	009b      	lsls	r3, r3, #2
 800b6cc:	4413      	add	r3, r2
 800b6ce:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b6d0:	69bb      	ldr	r3, [r7, #24]
 800b6d2:	f023 0307 	bic.w	r3, r3, #7
 800b6d6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b6d8:	69bb      	ldr	r3, [r7, #24]
 800b6da:	f003 0307 	and.w	r3, r3, #7
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d00a      	beq.n	800b6f8 <prvInitialiseNewTask+0x58>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b6e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6e6:	f383 8811 	msr	BASEPRI, r3
 800b6ea:	f3bf 8f6f 	isb	sy
 800b6ee:	f3bf 8f4f 	dsb	sy
 800b6f2:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b6f4:	bf00      	nop
 800b6f6:	e7fe      	b.n	800b6f6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b6f8:	68bb      	ldr	r3, [r7, #8]
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d01f      	beq.n	800b73e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b6fe:	2300      	movs	r3, #0
 800b700:	61fb      	str	r3, [r7, #28]
 800b702:	e012      	b.n	800b72a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b704:	68ba      	ldr	r2, [r7, #8]
 800b706:	69fb      	ldr	r3, [r7, #28]
 800b708:	4413      	add	r3, r2
 800b70a:	7819      	ldrb	r1, [r3, #0]
 800b70c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b70e:	69fb      	ldr	r3, [r7, #28]
 800b710:	4413      	add	r3, r2
 800b712:	3334      	adds	r3, #52	; 0x34
 800b714:	460a      	mov	r2, r1
 800b716:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b718:	68ba      	ldr	r2, [r7, #8]
 800b71a:	69fb      	ldr	r3, [r7, #28]
 800b71c:	4413      	add	r3, r2
 800b71e:	781b      	ldrb	r3, [r3, #0]
 800b720:	2b00      	cmp	r3, #0
 800b722:	d006      	beq.n	800b732 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b724:	69fb      	ldr	r3, [r7, #28]
 800b726:	3301      	adds	r3, #1
 800b728:	61fb      	str	r3, [r7, #28]
 800b72a:	69fb      	ldr	r3, [r7, #28]
 800b72c:	2b0f      	cmp	r3, #15
 800b72e:	d9e9      	bls.n	800b704 <prvInitialiseNewTask+0x64>
 800b730:	e000      	b.n	800b734 <prvInitialiseNewTask+0x94>
			{
				break;
 800b732:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b736:	2200      	movs	r2, #0
 800b738:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b73c:	e003      	b.n	800b746 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b73e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b740:	2200      	movs	r2, #0
 800b742:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b748:	2b06      	cmp	r3, #6
 800b74a:	d901      	bls.n	800b750 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b74c:	2306      	movs	r3, #6
 800b74e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b752:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b754:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b758:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b75a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800b75c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b75e:	2200      	movs	r2, #0
 800b760:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b764:	3304      	adds	r3, #4
 800b766:	4618      	mov	r0, r3
 800b768:	f7ff fec4 	bl	800b4f4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b76c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b76e:	3318      	adds	r3, #24
 800b770:	4618      	mov	r0, r3
 800b772:	f7ff febf 	bl	800b4f4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b778:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b77a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b77c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b77e:	f1c3 0207 	rsb	r2, r3, #7
 800b782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b784:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b788:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b78a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b78c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b78e:	2200      	movs	r2, #0
 800b790:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b796:	2200      	movs	r2, #0
 800b798:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800b79c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b79e:	334c      	adds	r3, #76	; 0x4c
 800b7a0:	224c      	movs	r2, #76	; 0x4c
 800b7a2:	2100      	movs	r1, #0
 800b7a4:	4618      	mov	r0, r3
 800b7a6:	f006 f89c 	bl	80118e2 <memset>
 800b7aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7ac:	4a0c      	ldr	r2, [pc, #48]	; (800b7e0 <prvInitialiseNewTask+0x140>)
 800b7ae:	651a      	str	r2, [r3, #80]	; 0x50
 800b7b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7b2:	4a0c      	ldr	r2, [pc, #48]	; (800b7e4 <prvInitialiseNewTask+0x144>)
 800b7b4:	655a      	str	r2, [r3, #84]	; 0x54
 800b7b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7b8:	4a0b      	ldr	r2, [pc, #44]	; (800b7e8 <prvInitialiseNewTask+0x148>)
 800b7ba:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b7bc:	683a      	ldr	r2, [r7, #0]
 800b7be:	68f9      	ldr	r1, [r7, #12]
 800b7c0:	69b8      	ldr	r0, [r7, #24]
 800b7c2:	f000 fcad 	bl	800c120 <pxPortInitialiseStack>
 800b7c6:	4602      	mov	r2, r0
 800b7c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7ca:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b7cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d002      	beq.n	800b7d8 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b7d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b7d6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b7d8:	bf00      	nop
 800b7da:	3720      	adds	r7, #32
 800b7dc:	46bd      	mov	sp, r7
 800b7de:	bd80      	pop	{r7, pc}
 800b7e0:	20012eb8 	.word	0x20012eb8
 800b7e4:	20012f20 	.word	0x20012f20
 800b7e8:	20012f88 	.word	0x20012f88

0800b7ec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b7ec:	b580      	push	{r7, lr}
 800b7ee:	b082      	sub	sp, #8
 800b7f0:	af00      	add	r7, sp, #0
 800b7f2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b7f4:	f000 fdbe 	bl	800c374 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b7f8:	4b2a      	ldr	r3, [pc, #168]	; (800b8a4 <prvAddNewTaskToReadyList+0xb8>)
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	3301      	adds	r3, #1
 800b7fe:	4a29      	ldr	r2, [pc, #164]	; (800b8a4 <prvAddNewTaskToReadyList+0xb8>)
 800b800:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b802:	4b29      	ldr	r3, [pc, #164]	; (800b8a8 <prvAddNewTaskToReadyList+0xbc>)
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	2b00      	cmp	r3, #0
 800b808:	d109      	bne.n	800b81e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b80a:	4a27      	ldr	r2, [pc, #156]	; (800b8a8 <prvAddNewTaskToReadyList+0xbc>)
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b810:	4b24      	ldr	r3, [pc, #144]	; (800b8a4 <prvAddNewTaskToReadyList+0xb8>)
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	2b01      	cmp	r3, #1
 800b816:	d110      	bne.n	800b83a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b818:	f000 fb78 	bl	800bf0c <prvInitialiseTaskLists>
 800b81c:	e00d      	b.n	800b83a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b81e:	4b23      	ldr	r3, [pc, #140]	; (800b8ac <prvAddNewTaskToReadyList+0xc0>)
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	2b00      	cmp	r3, #0
 800b824:	d109      	bne.n	800b83a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b826:	4b20      	ldr	r3, [pc, #128]	; (800b8a8 <prvAddNewTaskToReadyList+0xbc>)
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b830:	429a      	cmp	r2, r3
 800b832:	d802      	bhi.n	800b83a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b834:	4a1c      	ldr	r2, [pc, #112]	; (800b8a8 <prvAddNewTaskToReadyList+0xbc>)
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b83a:	4b1d      	ldr	r3, [pc, #116]	; (800b8b0 <prvAddNewTaskToReadyList+0xc4>)
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	3301      	adds	r3, #1
 800b840:	4a1b      	ldr	r2, [pc, #108]	; (800b8b0 <prvAddNewTaskToReadyList+0xc4>)
 800b842:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b848:	2201      	movs	r2, #1
 800b84a:	409a      	lsls	r2, r3
 800b84c:	4b19      	ldr	r3, [pc, #100]	; (800b8b4 <prvAddNewTaskToReadyList+0xc8>)
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	4313      	orrs	r3, r2
 800b852:	4a18      	ldr	r2, [pc, #96]	; (800b8b4 <prvAddNewTaskToReadyList+0xc8>)
 800b854:	6013      	str	r3, [r2, #0]
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b85a:	4613      	mov	r3, r2
 800b85c:	009b      	lsls	r3, r3, #2
 800b85e:	4413      	add	r3, r2
 800b860:	009b      	lsls	r3, r3, #2
 800b862:	4a15      	ldr	r2, [pc, #84]	; (800b8b8 <prvAddNewTaskToReadyList+0xcc>)
 800b864:	441a      	add	r2, r3
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	3304      	adds	r3, #4
 800b86a:	4619      	mov	r1, r3
 800b86c:	4610      	mov	r0, r2
 800b86e:	f7ff fe4e 	bl	800b50e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b872:	f000 fdaf 	bl	800c3d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b876:	4b0d      	ldr	r3, [pc, #52]	; (800b8ac <prvAddNewTaskToReadyList+0xc0>)
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d00e      	beq.n	800b89c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b87e:	4b0a      	ldr	r3, [pc, #40]	; (800b8a8 <prvAddNewTaskToReadyList+0xbc>)
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b888:	429a      	cmp	r2, r3
 800b88a:	d207      	bcs.n	800b89c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b88c:	4b0b      	ldr	r3, [pc, #44]	; (800b8bc <prvAddNewTaskToReadyList+0xd0>)
 800b88e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b892:	601a      	str	r2, [r3, #0]
 800b894:	f3bf 8f4f 	dsb	sy
 800b898:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b89c:	bf00      	nop
 800b89e:	3708      	adds	r7, #8
 800b8a0:	46bd      	mov	sp, r7
 800b8a2:	bd80      	pop	{r7, pc}
 800b8a4:	20000634 	.word	0x20000634
 800b8a8:	20000534 	.word	0x20000534
 800b8ac:	20000640 	.word	0x20000640
 800b8b0:	20000650 	.word	0x20000650
 800b8b4:	2000063c 	.word	0x2000063c
 800b8b8:	20000538 	.word	0x20000538
 800b8bc:	e000ed04 	.word	0xe000ed04

0800b8c0 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800b8c0:	b580      	push	{r7, lr}
 800b8c2:	b08a      	sub	sp, #40	; 0x28
 800b8c4:	af00      	add	r7, sp, #0
 800b8c6:	6078      	str	r0, [r7, #4]
 800b8c8:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800b8ca:	2300      	movs	r3, #0
 800b8cc:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d10a      	bne.n	800b8ea <vTaskDelayUntil+0x2a>
	__asm volatile
 800b8d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8d8:	f383 8811 	msr	BASEPRI, r3
 800b8dc:	f3bf 8f6f 	isb	sy
 800b8e0:	f3bf 8f4f 	dsb	sy
 800b8e4:	617b      	str	r3, [r7, #20]
}
 800b8e6:	bf00      	nop
 800b8e8:	e7fe      	b.n	800b8e8 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800b8ea:	683b      	ldr	r3, [r7, #0]
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d10a      	bne.n	800b906 <vTaskDelayUntil+0x46>
	__asm volatile
 800b8f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8f4:	f383 8811 	msr	BASEPRI, r3
 800b8f8:	f3bf 8f6f 	isb	sy
 800b8fc:	f3bf 8f4f 	dsb	sy
 800b900:	613b      	str	r3, [r7, #16]
}
 800b902:	bf00      	nop
 800b904:	e7fe      	b.n	800b904 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800b906:	4b2a      	ldr	r3, [pc, #168]	; (800b9b0 <vTaskDelayUntil+0xf0>)
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d00a      	beq.n	800b924 <vTaskDelayUntil+0x64>
	__asm volatile
 800b90e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b912:	f383 8811 	msr	BASEPRI, r3
 800b916:	f3bf 8f6f 	isb	sy
 800b91a:	f3bf 8f4f 	dsb	sy
 800b91e:	60fb      	str	r3, [r7, #12]
}
 800b920:	bf00      	nop
 800b922:	e7fe      	b.n	800b922 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 800b924:	f000 f8ce 	bl	800bac4 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800b928:	4b22      	ldr	r3, [pc, #136]	; (800b9b4 <vTaskDelayUntil+0xf4>)
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	683a      	ldr	r2, [r7, #0]
 800b934:	4413      	add	r3, r2
 800b936:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	6a3a      	ldr	r2, [r7, #32]
 800b93e:	429a      	cmp	r2, r3
 800b940:	d20b      	bcs.n	800b95a <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	69fa      	ldr	r2, [r7, #28]
 800b948:	429a      	cmp	r2, r3
 800b94a:	d211      	bcs.n	800b970 <vTaskDelayUntil+0xb0>
 800b94c:	69fa      	ldr	r2, [r7, #28]
 800b94e:	6a3b      	ldr	r3, [r7, #32]
 800b950:	429a      	cmp	r2, r3
 800b952:	d90d      	bls.n	800b970 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800b954:	2301      	movs	r3, #1
 800b956:	627b      	str	r3, [r7, #36]	; 0x24
 800b958:	e00a      	b.n	800b970 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	69fa      	ldr	r2, [r7, #28]
 800b960:	429a      	cmp	r2, r3
 800b962:	d303      	bcc.n	800b96c <vTaskDelayUntil+0xac>
 800b964:	69fa      	ldr	r2, [r7, #28]
 800b966:	6a3b      	ldr	r3, [r7, #32]
 800b968:	429a      	cmp	r2, r3
 800b96a:	d901      	bls.n	800b970 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800b96c:	2301      	movs	r3, #1
 800b96e:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	69fa      	ldr	r2, [r7, #28]
 800b974:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800b976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d006      	beq.n	800b98a <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800b97c:	69fa      	ldr	r2, [r7, #28]
 800b97e:	6a3b      	ldr	r3, [r7, #32]
 800b980:	1ad3      	subs	r3, r2, r3
 800b982:	2100      	movs	r1, #0
 800b984:	4618      	mov	r0, r3
 800b986:	f000 fb65 	bl	800c054 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800b98a:	f000 f8a9 	bl	800bae0 <xTaskResumeAll>
 800b98e:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b990:	69bb      	ldr	r3, [r7, #24]
 800b992:	2b00      	cmp	r3, #0
 800b994:	d107      	bne.n	800b9a6 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800b996:	4b08      	ldr	r3, [pc, #32]	; (800b9b8 <vTaskDelayUntil+0xf8>)
 800b998:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b99c:	601a      	str	r2, [r3, #0]
 800b99e:	f3bf 8f4f 	dsb	sy
 800b9a2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b9a6:	bf00      	nop
 800b9a8:	3728      	adds	r7, #40	; 0x28
 800b9aa:	46bd      	mov	sp, r7
 800b9ac:	bd80      	pop	{r7, pc}
 800b9ae:	bf00      	nop
 800b9b0:	2000065c 	.word	0x2000065c
 800b9b4:	20000638 	.word	0x20000638
 800b9b8:	e000ed04 	.word	0xe000ed04

0800b9bc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b9bc:	b580      	push	{r7, lr}
 800b9be:	b084      	sub	sp, #16
 800b9c0:	af00      	add	r7, sp, #0
 800b9c2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b9c4:	2300      	movs	r3, #0
 800b9c6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d017      	beq.n	800b9fe <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b9ce:	4b13      	ldr	r3, [pc, #76]	; (800ba1c <vTaskDelay+0x60>)
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d00a      	beq.n	800b9ec <vTaskDelay+0x30>
	__asm volatile
 800b9d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9da:	f383 8811 	msr	BASEPRI, r3
 800b9de:	f3bf 8f6f 	isb	sy
 800b9e2:	f3bf 8f4f 	dsb	sy
 800b9e6:	60bb      	str	r3, [r7, #8]
}
 800b9e8:	bf00      	nop
 800b9ea:	e7fe      	b.n	800b9ea <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b9ec:	f000 f86a 	bl	800bac4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b9f0:	2100      	movs	r1, #0
 800b9f2:	6878      	ldr	r0, [r7, #4]
 800b9f4:	f000 fb2e 	bl	800c054 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b9f8:	f000 f872 	bl	800bae0 <xTaskResumeAll>
 800b9fc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d107      	bne.n	800ba14 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800ba04:	4b06      	ldr	r3, [pc, #24]	; (800ba20 <vTaskDelay+0x64>)
 800ba06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba0a:	601a      	str	r2, [r3, #0]
 800ba0c:	f3bf 8f4f 	dsb	sy
 800ba10:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ba14:	bf00      	nop
 800ba16:	3710      	adds	r7, #16
 800ba18:	46bd      	mov	sp, r7
 800ba1a:	bd80      	pop	{r7, pc}
 800ba1c:	2000065c 	.word	0x2000065c
 800ba20:	e000ed04 	.word	0xe000ed04

0800ba24 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ba24:	b580      	push	{r7, lr}
 800ba26:	b086      	sub	sp, #24
 800ba28:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800ba2a:	4b1e      	ldr	r3, [pc, #120]	; (800baa4 <vTaskStartScheduler+0x80>)
 800ba2c:	9301      	str	r3, [sp, #4]
 800ba2e:	2300      	movs	r3, #0
 800ba30:	9300      	str	r3, [sp, #0]
 800ba32:	2300      	movs	r3, #0
 800ba34:	2280      	movs	r2, #128	; 0x80
 800ba36:	491c      	ldr	r1, [pc, #112]	; (800baa8 <vTaskStartScheduler+0x84>)
 800ba38:	481c      	ldr	r0, [pc, #112]	; (800baac <vTaskStartScheduler+0x88>)
 800ba3a:	f7ff fdef 	bl	800b61c <xTaskCreate>
 800ba3e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	2b01      	cmp	r3, #1
 800ba44:	d11b      	bne.n	800ba7e <vTaskStartScheduler+0x5a>
	__asm volatile
 800ba46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba4a:	f383 8811 	msr	BASEPRI, r3
 800ba4e:	f3bf 8f6f 	isb	sy
 800ba52:	f3bf 8f4f 	dsb	sy
 800ba56:	60bb      	str	r3, [r7, #8]
}
 800ba58:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ba5a:	4b15      	ldr	r3, [pc, #84]	; (800bab0 <vTaskStartScheduler+0x8c>)
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	334c      	adds	r3, #76	; 0x4c
 800ba60:	4a14      	ldr	r2, [pc, #80]	; (800bab4 <vTaskStartScheduler+0x90>)
 800ba62:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ba64:	4b14      	ldr	r3, [pc, #80]	; (800bab8 <vTaskStartScheduler+0x94>)
 800ba66:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ba6a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ba6c:	4b13      	ldr	r3, [pc, #76]	; (800babc <vTaskStartScheduler+0x98>)
 800ba6e:	2201      	movs	r2, #1
 800ba70:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ba72:	4b13      	ldr	r3, [pc, #76]	; (800bac0 <vTaskStartScheduler+0x9c>)
 800ba74:	2200      	movs	r2, #0
 800ba76:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ba78:	f000 fbda 	bl	800c230 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ba7c:	e00e      	b.n	800ba9c <vTaskStartScheduler+0x78>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ba84:	d10a      	bne.n	800ba9c <vTaskStartScheduler+0x78>
	__asm volatile
 800ba86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba8a:	f383 8811 	msr	BASEPRI, r3
 800ba8e:	f3bf 8f6f 	isb	sy
 800ba92:	f3bf 8f4f 	dsb	sy
 800ba96:	607b      	str	r3, [r7, #4]
}
 800ba98:	bf00      	nop
 800ba9a:	e7fe      	b.n	800ba9a <vTaskStartScheduler+0x76>
}
 800ba9c:	bf00      	nop
 800ba9e:	3710      	adds	r7, #16
 800baa0:	46bd      	mov	sp, r7
 800baa2:	bd80      	pop	{r7, pc}
 800baa4:	20000658 	.word	0x20000658
 800baa8:	08013740 	.word	0x08013740
 800baac:	0800bedd 	.word	0x0800bedd
 800bab0:	20000534 	.word	0x20000534
 800bab4:	20000190 	.word	0x20000190
 800bab8:	20000654 	.word	0x20000654
 800babc:	20000640 	.word	0x20000640
 800bac0:	20000638 	.word	0x20000638

0800bac4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800bac4:	b480      	push	{r7}
 800bac6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800bac8:	4b04      	ldr	r3, [pc, #16]	; (800badc <vTaskSuspendAll+0x18>)
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	3301      	adds	r3, #1
 800bace:	4a03      	ldr	r2, [pc, #12]	; (800badc <vTaskSuspendAll+0x18>)
 800bad0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800bad2:	bf00      	nop
 800bad4:	46bd      	mov	sp, r7
 800bad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bada:	4770      	bx	lr
 800badc:	2000065c 	.word	0x2000065c

0800bae0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800bae0:	b580      	push	{r7, lr}
 800bae2:	b084      	sub	sp, #16
 800bae4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800bae6:	2300      	movs	r3, #0
 800bae8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800baea:	2300      	movs	r3, #0
 800baec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800baee:	4b41      	ldr	r3, [pc, #260]	; (800bbf4 <xTaskResumeAll+0x114>)
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d10a      	bne.n	800bb0c <xTaskResumeAll+0x2c>
	__asm volatile
 800baf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bafa:	f383 8811 	msr	BASEPRI, r3
 800bafe:	f3bf 8f6f 	isb	sy
 800bb02:	f3bf 8f4f 	dsb	sy
 800bb06:	603b      	str	r3, [r7, #0]
}
 800bb08:	bf00      	nop
 800bb0a:	e7fe      	b.n	800bb0a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800bb0c:	f000 fc32 	bl	800c374 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800bb10:	4b38      	ldr	r3, [pc, #224]	; (800bbf4 <xTaskResumeAll+0x114>)
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	3b01      	subs	r3, #1
 800bb16:	4a37      	ldr	r2, [pc, #220]	; (800bbf4 <xTaskResumeAll+0x114>)
 800bb18:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bb1a:	4b36      	ldr	r3, [pc, #216]	; (800bbf4 <xTaskResumeAll+0x114>)
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d161      	bne.n	800bbe6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800bb22:	4b35      	ldr	r3, [pc, #212]	; (800bbf8 <xTaskResumeAll+0x118>)
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d05d      	beq.n	800bbe6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bb2a:	e02e      	b.n	800bb8a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb2c:	4b33      	ldr	r3, [pc, #204]	; (800bbfc <xTaskResumeAll+0x11c>)
 800bb2e:	68db      	ldr	r3, [r3, #12]
 800bb30:	68db      	ldr	r3, [r3, #12]
 800bb32:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	3318      	adds	r3, #24
 800bb38:	4618      	mov	r0, r3
 800bb3a:	f7ff fd45 	bl	800b5c8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	3304      	adds	r3, #4
 800bb42:	4618      	mov	r0, r3
 800bb44:	f7ff fd40 	bl	800b5c8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb4c:	2201      	movs	r2, #1
 800bb4e:	409a      	lsls	r2, r3
 800bb50:	4b2b      	ldr	r3, [pc, #172]	; (800bc00 <xTaskResumeAll+0x120>)
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	4313      	orrs	r3, r2
 800bb56:	4a2a      	ldr	r2, [pc, #168]	; (800bc00 <xTaskResumeAll+0x120>)
 800bb58:	6013      	str	r3, [r2, #0]
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb5e:	4613      	mov	r3, r2
 800bb60:	009b      	lsls	r3, r3, #2
 800bb62:	4413      	add	r3, r2
 800bb64:	009b      	lsls	r3, r3, #2
 800bb66:	4a27      	ldr	r2, [pc, #156]	; (800bc04 <xTaskResumeAll+0x124>)
 800bb68:	441a      	add	r2, r3
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	3304      	adds	r3, #4
 800bb6e:	4619      	mov	r1, r3
 800bb70:	4610      	mov	r0, r2
 800bb72:	f7ff fccc 	bl	800b50e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb7a:	4b23      	ldr	r3, [pc, #140]	; (800bc08 <xTaskResumeAll+0x128>)
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb80:	429a      	cmp	r2, r3
 800bb82:	d302      	bcc.n	800bb8a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800bb84:	4b21      	ldr	r3, [pc, #132]	; (800bc0c <xTaskResumeAll+0x12c>)
 800bb86:	2201      	movs	r2, #1
 800bb88:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bb8a:	4b1c      	ldr	r3, [pc, #112]	; (800bbfc <xTaskResumeAll+0x11c>)
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d1cc      	bne.n	800bb2c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d001      	beq.n	800bb9c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800bb98:	f000 fa3c 	bl	800c014 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800bb9c:	4b1c      	ldr	r3, [pc, #112]	; (800bc10 <xTaskResumeAll+0x130>)
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d010      	beq.n	800bbca <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800bba8:	f000 f858 	bl	800bc5c <xTaskIncrementTick>
 800bbac:	4603      	mov	r3, r0
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d002      	beq.n	800bbb8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800bbb2:	4b16      	ldr	r3, [pc, #88]	; (800bc0c <xTaskResumeAll+0x12c>)
 800bbb4:	2201      	movs	r2, #1
 800bbb6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	3b01      	subs	r3, #1
 800bbbc:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d1f1      	bne.n	800bba8 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800bbc4:	4b12      	ldr	r3, [pc, #72]	; (800bc10 <xTaskResumeAll+0x130>)
 800bbc6:	2200      	movs	r2, #0
 800bbc8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800bbca:	4b10      	ldr	r3, [pc, #64]	; (800bc0c <xTaskResumeAll+0x12c>)
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d009      	beq.n	800bbe6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800bbd2:	2301      	movs	r3, #1
 800bbd4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800bbd6:	4b0f      	ldr	r3, [pc, #60]	; (800bc14 <xTaskResumeAll+0x134>)
 800bbd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bbdc:	601a      	str	r2, [r3, #0]
 800bbde:	f3bf 8f4f 	dsb	sy
 800bbe2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bbe6:	f000 fbf5 	bl	800c3d4 <vPortExitCritical>

	return xAlreadyYielded;
 800bbea:	68bb      	ldr	r3, [r7, #8]
}
 800bbec:	4618      	mov	r0, r3
 800bbee:	3710      	adds	r7, #16
 800bbf0:	46bd      	mov	sp, r7
 800bbf2:	bd80      	pop	{r7, pc}
 800bbf4:	2000065c 	.word	0x2000065c
 800bbf8:	20000634 	.word	0x20000634
 800bbfc:	200005f4 	.word	0x200005f4
 800bc00:	2000063c 	.word	0x2000063c
 800bc04:	20000538 	.word	0x20000538
 800bc08:	20000534 	.word	0x20000534
 800bc0c:	20000648 	.word	0x20000648
 800bc10:	20000644 	.word	0x20000644
 800bc14:	e000ed04 	.word	0xe000ed04

0800bc18 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800bc18:	b480      	push	{r7}
 800bc1a:	b083      	sub	sp, #12
 800bc1c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800bc1e:	4b05      	ldr	r3, [pc, #20]	; (800bc34 <xTaskGetTickCount+0x1c>)
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800bc24:	687b      	ldr	r3, [r7, #4]
}
 800bc26:	4618      	mov	r0, r3
 800bc28:	370c      	adds	r7, #12
 800bc2a:	46bd      	mov	sp, r7
 800bc2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc30:	4770      	bx	lr
 800bc32:	bf00      	nop
 800bc34:	20000638 	.word	0x20000638

0800bc38 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800bc38:	b580      	push	{r7, lr}
 800bc3a:	b082      	sub	sp, #8
 800bc3c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bc3e:	f000 fc7b 	bl	800c538 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800bc42:	2300      	movs	r3, #0
 800bc44:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800bc46:	4b04      	ldr	r3, [pc, #16]	; (800bc58 <xTaskGetTickCountFromISR+0x20>)
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bc4c:	683b      	ldr	r3, [r7, #0]
}
 800bc4e:	4618      	mov	r0, r3
 800bc50:	3708      	adds	r7, #8
 800bc52:	46bd      	mov	sp, r7
 800bc54:	bd80      	pop	{r7, pc}
 800bc56:	bf00      	nop
 800bc58:	20000638 	.word	0x20000638

0800bc5c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800bc5c:	b580      	push	{r7, lr}
 800bc5e:	b086      	sub	sp, #24
 800bc60:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800bc62:	2300      	movs	r3, #0
 800bc64:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bc66:	4b4e      	ldr	r3, [pc, #312]	; (800bda0 <xTaskIncrementTick+0x144>)
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	f040 808e 	bne.w	800bd8c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800bc70:	4b4c      	ldr	r3, [pc, #304]	; (800bda4 <xTaskIncrementTick+0x148>)
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	3301      	adds	r3, #1
 800bc76:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800bc78:	4a4a      	ldr	r2, [pc, #296]	; (800bda4 <xTaskIncrementTick+0x148>)
 800bc7a:	693b      	ldr	r3, [r7, #16]
 800bc7c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800bc7e:	693b      	ldr	r3, [r7, #16]
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d120      	bne.n	800bcc6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800bc84:	4b48      	ldr	r3, [pc, #288]	; (800bda8 <xTaskIncrementTick+0x14c>)
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d00a      	beq.n	800bca4 <xTaskIncrementTick+0x48>
	__asm volatile
 800bc8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc92:	f383 8811 	msr	BASEPRI, r3
 800bc96:	f3bf 8f6f 	isb	sy
 800bc9a:	f3bf 8f4f 	dsb	sy
 800bc9e:	603b      	str	r3, [r7, #0]
}
 800bca0:	bf00      	nop
 800bca2:	e7fe      	b.n	800bca2 <xTaskIncrementTick+0x46>
 800bca4:	4b40      	ldr	r3, [pc, #256]	; (800bda8 <xTaskIncrementTick+0x14c>)
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	60fb      	str	r3, [r7, #12]
 800bcaa:	4b40      	ldr	r3, [pc, #256]	; (800bdac <xTaskIncrementTick+0x150>)
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	4a3e      	ldr	r2, [pc, #248]	; (800bda8 <xTaskIncrementTick+0x14c>)
 800bcb0:	6013      	str	r3, [r2, #0]
 800bcb2:	4a3e      	ldr	r2, [pc, #248]	; (800bdac <xTaskIncrementTick+0x150>)
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	6013      	str	r3, [r2, #0]
 800bcb8:	4b3d      	ldr	r3, [pc, #244]	; (800bdb0 <xTaskIncrementTick+0x154>)
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	3301      	adds	r3, #1
 800bcbe:	4a3c      	ldr	r2, [pc, #240]	; (800bdb0 <xTaskIncrementTick+0x154>)
 800bcc0:	6013      	str	r3, [r2, #0]
 800bcc2:	f000 f9a7 	bl	800c014 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800bcc6:	4b3b      	ldr	r3, [pc, #236]	; (800bdb4 <xTaskIncrementTick+0x158>)
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	693a      	ldr	r2, [r7, #16]
 800bccc:	429a      	cmp	r2, r3
 800bcce:	d348      	bcc.n	800bd62 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bcd0:	4b35      	ldr	r3, [pc, #212]	; (800bda8 <xTaskIncrementTick+0x14c>)
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d104      	bne.n	800bce4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bcda:	4b36      	ldr	r3, [pc, #216]	; (800bdb4 <xTaskIncrementTick+0x158>)
 800bcdc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bce0:	601a      	str	r2, [r3, #0]
					break;
 800bce2:	e03e      	b.n	800bd62 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bce4:	4b30      	ldr	r3, [pc, #192]	; (800bda8 <xTaskIncrementTick+0x14c>)
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	68db      	ldr	r3, [r3, #12]
 800bcea:	68db      	ldr	r3, [r3, #12]
 800bcec:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800bcee:	68bb      	ldr	r3, [r7, #8]
 800bcf0:	685b      	ldr	r3, [r3, #4]
 800bcf2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800bcf4:	693a      	ldr	r2, [r7, #16]
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	429a      	cmp	r2, r3
 800bcfa:	d203      	bcs.n	800bd04 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800bcfc:	4a2d      	ldr	r2, [pc, #180]	; (800bdb4 <xTaskIncrementTick+0x158>)
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800bd02:	e02e      	b.n	800bd62 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bd04:	68bb      	ldr	r3, [r7, #8]
 800bd06:	3304      	adds	r3, #4
 800bd08:	4618      	mov	r0, r3
 800bd0a:	f7ff fc5d 	bl	800b5c8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800bd0e:	68bb      	ldr	r3, [r7, #8]
 800bd10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d004      	beq.n	800bd20 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bd16:	68bb      	ldr	r3, [r7, #8]
 800bd18:	3318      	adds	r3, #24
 800bd1a:	4618      	mov	r0, r3
 800bd1c:	f7ff fc54 	bl	800b5c8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800bd20:	68bb      	ldr	r3, [r7, #8]
 800bd22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd24:	2201      	movs	r2, #1
 800bd26:	409a      	lsls	r2, r3
 800bd28:	4b23      	ldr	r3, [pc, #140]	; (800bdb8 <xTaskIncrementTick+0x15c>)
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	4313      	orrs	r3, r2
 800bd2e:	4a22      	ldr	r2, [pc, #136]	; (800bdb8 <xTaskIncrementTick+0x15c>)
 800bd30:	6013      	str	r3, [r2, #0]
 800bd32:	68bb      	ldr	r3, [r7, #8]
 800bd34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd36:	4613      	mov	r3, r2
 800bd38:	009b      	lsls	r3, r3, #2
 800bd3a:	4413      	add	r3, r2
 800bd3c:	009b      	lsls	r3, r3, #2
 800bd3e:	4a1f      	ldr	r2, [pc, #124]	; (800bdbc <xTaskIncrementTick+0x160>)
 800bd40:	441a      	add	r2, r3
 800bd42:	68bb      	ldr	r3, [r7, #8]
 800bd44:	3304      	adds	r3, #4
 800bd46:	4619      	mov	r1, r3
 800bd48:	4610      	mov	r0, r2
 800bd4a:	f7ff fbe0 	bl	800b50e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bd4e:	68bb      	ldr	r3, [r7, #8]
 800bd50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd52:	4b1b      	ldr	r3, [pc, #108]	; (800bdc0 <xTaskIncrementTick+0x164>)
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd58:	429a      	cmp	r2, r3
 800bd5a:	d3b9      	bcc.n	800bcd0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800bd5c:	2301      	movs	r3, #1
 800bd5e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bd60:	e7b6      	b.n	800bcd0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800bd62:	4b17      	ldr	r3, [pc, #92]	; (800bdc0 <xTaskIncrementTick+0x164>)
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd68:	4914      	ldr	r1, [pc, #80]	; (800bdbc <xTaskIncrementTick+0x160>)
 800bd6a:	4613      	mov	r3, r2
 800bd6c:	009b      	lsls	r3, r3, #2
 800bd6e:	4413      	add	r3, r2
 800bd70:	009b      	lsls	r3, r3, #2
 800bd72:	440b      	add	r3, r1
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	2b01      	cmp	r3, #1
 800bd78:	d901      	bls.n	800bd7e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800bd7a:	2301      	movs	r3, #1
 800bd7c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800bd7e:	4b11      	ldr	r3, [pc, #68]	; (800bdc4 <xTaskIncrementTick+0x168>)
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d007      	beq.n	800bd96 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800bd86:	2301      	movs	r3, #1
 800bd88:	617b      	str	r3, [r7, #20]
 800bd8a:	e004      	b.n	800bd96 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800bd8c:	4b0e      	ldr	r3, [pc, #56]	; (800bdc8 <xTaskIncrementTick+0x16c>)
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	3301      	adds	r3, #1
 800bd92:	4a0d      	ldr	r2, [pc, #52]	; (800bdc8 <xTaskIncrementTick+0x16c>)
 800bd94:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800bd96:	697b      	ldr	r3, [r7, #20]
}
 800bd98:	4618      	mov	r0, r3
 800bd9a:	3718      	adds	r7, #24
 800bd9c:	46bd      	mov	sp, r7
 800bd9e:	bd80      	pop	{r7, pc}
 800bda0:	2000065c 	.word	0x2000065c
 800bda4:	20000638 	.word	0x20000638
 800bda8:	200005ec 	.word	0x200005ec
 800bdac:	200005f0 	.word	0x200005f0
 800bdb0:	2000064c 	.word	0x2000064c
 800bdb4:	20000654 	.word	0x20000654
 800bdb8:	2000063c 	.word	0x2000063c
 800bdbc:	20000538 	.word	0x20000538
 800bdc0:	20000534 	.word	0x20000534
 800bdc4:	20000648 	.word	0x20000648
 800bdc8:	20000644 	.word	0x20000644

0800bdcc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800bdcc:	b580      	push	{r7, lr}
 800bdce:	b088      	sub	sp, #32
 800bdd0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800bdd2:	4b3c      	ldr	r3, [pc, #240]	; (800bec4 <vTaskSwitchContext+0xf8>)
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d003      	beq.n	800bde2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800bdda:	4b3b      	ldr	r3, [pc, #236]	; (800bec8 <vTaskSwitchContext+0xfc>)
 800bddc:	2201      	movs	r2, #1
 800bdde:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800bde0:	e06b      	b.n	800beba <vTaskSwitchContext+0xee>
		xYieldPending = pdFALSE;
 800bde2:	4b39      	ldr	r3, [pc, #228]	; (800bec8 <vTaskSwitchContext+0xfc>)
 800bde4:	2200      	movs	r2, #0
 800bde6:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800bde8:	4b38      	ldr	r3, [pc, #224]	; (800becc <vTaskSwitchContext+0x100>)
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bdee:	61fb      	str	r3, [r7, #28]
 800bdf0:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800bdf4:	61bb      	str	r3, [r7, #24]
 800bdf6:	69fb      	ldr	r3, [r7, #28]
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	69ba      	ldr	r2, [r7, #24]
 800bdfc:	429a      	cmp	r2, r3
 800bdfe:	d111      	bne.n	800be24 <vTaskSwitchContext+0x58>
 800be00:	69fb      	ldr	r3, [r7, #28]
 800be02:	3304      	adds	r3, #4
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	69ba      	ldr	r2, [r7, #24]
 800be08:	429a      	cmp	r2, r3
 800be0a:	d10b      	bne.n	800be24 <vTaskSwitchContext+0x58>
 800be0c:	69fb      	ldr	r3, [r7, #28]
 800be0e:	3308      	adds	r3, #8
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	69ba      	ldr	r2, [r7, #24]
 800be14:	429a      	cmp	r2, r3
 800be16:	d105      	bne.n	800be24 <vTaskSwitchContext+0x58>
 800be18:	69fb      	ldr	r3, [r7, #28]
 800be1a:	330c      	adds	r3, #12
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	69ba      	ldr	r2, [r7, #24]
 800be20:	429a      	cmp	r2, r3
 800be22:	d008      	beq.n	800be36 <vTaskSwitchContext+0x6a>
 800be24:	4b29      	ldr	r3, [pc, #164]	; (800becc <vTaskSwitchContext+0x100>)
 800be26:	681a      	ldr	r2, [r3, #0]
 800be28:	4b28      	ldr	r3, [pc, #160]	; (800becc <vTaskSwitchContext+0x100>)
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	3334      	adds	r3, #52	; 0x34
 800be2e:	4619      	mov	r1, r3
 800be30:	4610      	mov	r0, r2
 800be32:	f7f5 f989 	bl	8001148 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800be36:	4b26      	ldr	r3, [pc, #152]	; (800bed0 <vTaskSwitchContext+0x104>)
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	fab3 f383 	clz	r3, r3
 800be42:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800be44:	7afb      	ldrb	r3, [r7, #11]
 800be46:	f1c3 031f 	rsb	r3, r3, #31
 800be4a:	617b      	str	r3, [r7, #20]
 800be4c:	4921      	ldr	r1, [pc, #132]	; (800bed4 <vTaskSwitchContext+0x108>)
 800be4e:	697a      	ldr	r2, [r7, #20]
 800be50:	4613      	mov	r3, r2
 800be52:	009b      	lsls	r3, r3, #2
 800be54:	4413      	add	r3, r2
 800be56:	009b      	lsls	r3, r3, #2
 800be58:	440b      	add	r3, r1
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d10a      	bne.n	800be76 <vTaskSwitchContext+0xaa>
	__asm volatile
 800be60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be64:	f383 8811 	msr	BASEPRI, r3
 800be68:	f3bf 8f6f 	isb	sy
 800be6c:	f3bf 8f4f 	dsb	sy
 800be70:	607b      	str	r3, [r7, #4]
}
 800be72:	bf00      	nop
 800be74:	e7fe      	b.n	800be74 <vTaskSwitchContext+0xa8>
 800be76:	697a      	ldr	r2, [r7, #20]
 800be78:	4613      	mov	r3, r2
 800be7a:	009b      	lsls	r3, r3, #2
 800be7c:	4413      	add	r3, r2
 800be7e:	009b      	lsls	r3, r3, #2
 800be80:	4a14      	ldr	r2, [pc, #80]	; (800bed4 <vTaskSwitchContext+0x108>)
 800be82:	4413      	add	r3, r2
 800be84:	613b      	str	r3, [r7, #16]
 800be86:	693b      	ldr	r3, [r7, #16]
 800be88:	685b      	ldr	r3, [r3, #4]
 800be8a:	685a      	ldr	r2, [r3, #4]
 800be8c:	693b      	ldr	r3, [r7, #16]
 800be8e:	605a      	str	r2, [r3, #4]
 800be90:	693b      	ldr	r3, [r7, #16]
 800be92:	685a      	ldr	r2, [r3, #4]
 800be94:	693b      	ldr	r3, [r7, #16]
 800be96:	3308      	adds	r3, #8
 800be98:	429a      	cmp	r2, r3
 800be9a:	d104      	bne.n	800bea6 <vTaskSwitchContext+0xda>
 800be9c:	693b      	ldr	r3, [r7, #16]
 800be9e:	685b      	ldr	r3, [r3, #4]
 800bea0:	685a      	ldr	r2, [r3, #4]
 800bea2:	693b      	ldr	r3, [r7, #16]
 800bea4:	605a      	str	r2, [r3, #4]
 800bea6:	693b      	ldr	r3, [r7, #16]
 800bea8:	685b      	ldr	r3, [r3, #4]
 800beaa:	68db      	ldr	r3, [r3, #12]
 800beac:	4a07      	ldr	r2, [pc, #28]	; (800becc <vTaskSwitchContext+0x100>)
 800beae:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800beb0:	4b06      	ldr	r3, [pc, #24]	; (800becc <vTaskSwitchContext+0x100>)
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	334c      	adds	r3, #76	; 0x4c
 800beb6:	4a08      	ldr	r2, [pc, #32]	; (800bed8 <vTaskSwitchContext+0x10c>)
 800beb8:	6013      	str	r3, [r2, #0]
}
 800beba:	bf00      	nop
 800bebc:	3720      	adds	r7, #32
 800bebe:	46bd      	mov	sp, r7
 800bec0:	bd80      	pop	{r7, pc}
 800bec2:	bf00      	nop
 800bec4:	2000065c 	.word	0x2000065c
 800bec8:	20000648 	.word	0x20000648
 800becc:	20000534 	.word	0x20000534
 800bed0:	2000063c 	.word	0x2000063c
 800bed4:	20000538 	.word	0x20000538
 800bed8:	20000190 	.word	0x20000190

0800bedc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bedc:	b580      	push	{r7, lr}
 800bede:	b082      	sub	sp, #8
 800bee0:	af00      	add	r7, sp, #0
 800bee2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bee4:	f000 f852 	bl	800bf8c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bee8:	4b06      	ldr	r3, [pc, #24]	; (800bf04 <prvIdleTask+0x28>)
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	2b01      	cmp	r3, #1
 800beee:	d9f9      	bls.n	800bee4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800bef0:	4b05      	ldr	r3, [pc, #20]	; (800bf08 <prvIdleTask+0x2c>)
 800bef2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bef6:	601a      	str	r2, [r3, #0]
 800bef8:	f3bf 8f4f 	dsb	sy
 800befc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800bf00:	e7f0      	b.n	800bee4 <prvIdleTask+0x8>
 800bf02:	bf00      	nop
 800bf04:	20000538 	.word	0x20000538
 800bf08:	e000ed04 	.word	0xe000ed04

0800bf0c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bf0c:	b580      	push	{r7, lr}
 800bf0e:	b082      	sub	sp, #8
 800bf10:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bf12:	2300      	movs	r3, #0
 800bf14:	607b      	str	r3, [r7, #4]
 800bf16:	e00c      	b.n	800bf32 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bf18:	687a      	ldr	r2, [r7, #4]
 800bf1a:	4613      	mov	r3, r2
 800bf1c:	009b      	lsls	r3, r3, #2
 800bf1e:	4413      	add	r3, r2
 800bf20:	009b      	lsls	r3, r3, #2
 800bf22:	4a12      	ldr	r2, [pc, #72]	; (800bf6c <prvInitialiseTaskLists+0x60>)
 800bf24:	4413      	add	r3, r2
 800bf26:	4618      	mov	r0, r3
 800bf28:	f7ff fac4 	bl	800b4b4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	3301      	adds	r3, #1
 800bf30:	607b      	str	r3, [r7, #4]
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	2b06      	cmp	r3, #6
 800bf36:	d9ef      	bls.n	800bf18 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bf38:	480d      	ldr	r0, [pc, #52]	; (800bf70 <prvInitialiseTaskLists+0x64>)
 800bf3a:	f7ff fabb 	bl	800b4b4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bf3e:	480d      	ldr	r0, [pc, #52]	; (800bf74 <prvInitialiseTaskLists+0x68>)
 800bf40:	f7ff fab8 	bl	800b4b4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bf44:	480c      	ldr	r0, [pc, #48]	; (800bf78 <prvInitialiseTaskLists+0x6c>)
 800bf46:	f7ff fab5 	bl	800b4b4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bf4a:	480c      	ldr	r0, [pc, #48]	; (800bf7c <prvInitialiseTaskLists+0x70>)
 800bf4c:	f7ff fab2 	bl	800b4b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bf50:	480b      	ldr	r0, [pc, #44]	; (800bf80 <prvInitialiseTaskLists+0x74>)
 800bf52:	f7ff faaf 	bl	800b4b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bf56:	4b0b      	ldr	r3, [pc, #44]	; (800bf84 <prvInitialiseTaskLists+0x78>)
 800bf58:	4a05      	ldr	r2, [pc, #20]	; (800bf70 <prvInitialiseTaskLists+0x64>)
 800bf5a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bf5c:	4b0a      	ldr	r3, [pc, #40]	; (800bf88 <prvInitialiseTaskLists+0x7c>)
 800bf5e:	4a05      	ldr	r2, [pc, #20]	; (800bf74 <prvInitialiseTaskLists+0x68>)
 800bf60:	601a      	str	r2, [r3, #0]
}
 800bf62:	bf00      	nop
 800bf64:	3708      	adds	r7, #8
 800bf66:	46bd      	mov	sp, r7
 800bf68:	bd80      	pop	{r7, pc}
 800bf6a:	bf00      	nop
 800bf6c:	20000538 	.word	0x20000538
 800bf70:	200005c4 	.word	0x200005c4
 800bf74:	200005d8 	.word	0x200005d8
 800bf78:	200005f4 	.word	0x200005f4
 800bf7c:	20000608 	.word	0x20000608
 800bf80:	20000620 	.word	0x20000620
 800bf84:	200005ec 	.word	0x200005ec
 800bf88:	200005f0 	.word	0x200005f0

0800bf8c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800bf8c:	b580      	push	{r7, lr}
 800bf8e:	b082      	sub	sp, #8
 800bf90:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bf92:	e019      	b.n	800bfc8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800bf94:	f000 f9ee 	bl	800c374 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bf98:	4b10      	ldr	r3, [pc, #64]	; (800bfdc <prvCheckTasksWaitingTermination+0x50>)
 800bf9a:	68db      	ldr	r3, [r3, #12]
 800bf9c:	68db      	ldr	r3, [r3, #12]
 800bf9e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	3304      	adds	r3, #4
 800bfa4:	4618      	mov	r0, r3
 800bfa6:	f7ff fb0f 	bl	800b5c8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bfaa:	4b0d      	ldr	r3, [pc, #52]	; (800bfe0 <prvCheckTasksWaitingTermination+0x54>)
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	3b01      	subs	r3, #1
 800bfb0:	4a0b      	ldr	r2, [pc, #44]	; (800bfe0 <prvCheckTasksWaitingTermination+0x54>)
 800bfb2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bfb4:	4b0b      	ldr	r3, [pc, #44]	; (800bfe4 <prvCheckTasksWaitingTermination+0x58>)
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	3b01      	subs	r3, #1
 800bfba:	4a0a      	ldr	r2, [pc, #40]	; (800bfe4 <prvCheckTasksWaitingTermination+0x58>)
 800bfbc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800bfbe:	f000 fa09 	bl	800c3d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800bfc2:	6878      	ldr	r0, [r7, #4]
 800bfc4:	f000 f810 	bl	800bfe8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bfc8:	4b06      	ldr	r3, [pc, #24]	; (800bfe4 <prvCheckTasksWaitingTermination+0x58>)
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d1e1      	bne.n	800bf94 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800bfd0:	bf00      	nop
 800bfd2:	bf00      	nop
 800bfd4:	3708      	adds	r7, #8
 800bfd6:	46bd      	mov	sp, r7
 800bfd8:	bd80      	pop	{r7, pc}
 800bfda:	bf00      	nop
 800bfdc:	20000608 	.word	0x20000608
 800bfe0:	20000634 	.word	0x20000634
 800bfe4:	2000061c 	.word	0x2000061c

0800bfe8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800bfe8:	b580      	push	{r7, lr}
 800bfea:	b082      	sub	sp, #8
 800bfec:	af00      	add	r7, sp, #0
 800bfee:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	334c      	adds	r3, #76	; 0x4c
 800bff4:	4618      	mov	r0, r3
 800bff6:	f005 fc7d 	bl	80118f4 <_reclaim_reent>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bffe:	4618      	mov	r0, r3
 800c000:	f000 fbaa 	bl	800c758 <vPortFree>
			vPortFree( pxTCB );
 800c004:	6878      	ldr	r0, [r7, #4]
 800c006:	f000 fba7 	bl	800c758 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c00a:	bf00      	nop
 800c00c:	3708      	adds	r7, #8
 800c00e:	46bd      	mov	sp, r7
 800c010:	bd80      	pop	{r7, pc}
	...

0800c014 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c014:	b480      	push	{r7}
 800c016:	b083      	sub	sp, #12
 800c018:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c01a:	4b0c      	ldr	r3, [pc, #48]	; (800c04c <prvResetNextTaskUnblockTime+0x38>)
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	2b00      	cmp	r3, #0
 800c022:	d104      	bne.n	800c02e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c024:	4b0a      	ldr	r3, [pc, #40]	; (800c050 <prvResetNextTaskUnblockTime+0x3c>)
 800c026:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c02a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c02c:	e008      	b.n	800c040 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c02e:	4b07      	ldr	r3, [pc, #28]	; (800c04c <prvResetNextTaskUnblockTime+0x38>)
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	68db      	ldr	r3, [r3, #12]
 800c034:	68db      	ldr	r3, [r3, #12]
 800c036:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	685b      	ldr	r3, [r3, #4]
 800c03c:	4a04      	ldr	r2, [pc, #16]	; (800c050 <prvResetNextTaskUnblockTime+0x3c>)
 800c03e:	6013      	str	r3, [r2, #0]
}
 800c040:	bf00      	nop
 800c042:	370c      	adds	r7, #12
 800c044:	46bd      	mov	sp, r7
 800c046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c04a:	4770      	bx	lr
 800c04c:	200005ec 	.word	0x200005ec
 800c050:	20000654 	.word	0x20000654

0800c054 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c054:	b580      	push	{r7, lr}
 800c056:	b084      	sub	sp, #16
 800c058:	af00      	add	r7, sp, #0
 800c05a:	6078      	str	r0, [r7, #4]
 800c05c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c05e:	4b29      	ldr	r3, [pc, #164]	; (800c104 <prvAddCurrentTaskToDelayedList+0xb0>)
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c064:	4b28      	ldr	r3, [pc, #160]	; (800c108 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	3304      	adds	r3, #4
 800c06a:	4618      	mov	r0, r3
 800c06c:	f7ff faac 	bl	800b5c8 <uxListRemove>
 800c070:	4603      	mov	r3, r0
 800c072:	2b00      	cmp	r3, #0
 800c074:	d10b      	bne.n	800c08e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800c076:	4b24      	ldr	r3, [pc, #144]	; (800c108 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c07c:	2201      	movs	r2, #1
 800c07e:	fa02 f303 	lsl.w	r3, r2, r3
 800c082:	43da      	mvns	r2, r3
 800c084:	4b21      	ldr	r3, [pc, #132]	; (800c10c <prvAddCurrentTaskToDelayedList+0xb8>)
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	4013      	ands	r3, r2
 800c08a:	4a20      	ldr	r2, [pc, #128]	; (800c10c <prvAddCurrentTaskToDelayedList+0xb8>)
 800c08c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c094:	d10a      	bne.n	800c0ac <prvAddCurrentTaskToDelayedList+0x58>
 800c096:	683b      	ldr	r3, [r7, #0]
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d007      	beq.n	800c0ac <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c09c:	4b1a      	ldr	r3, [pc, #104]	; (800c108 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	3304      	adds	r3, #4
 800c0a2:	4619      	mov	r1, r3
 800c0a4:	481a      	ldr	r0, [pc, #104]	; (800c110 <prvAddCurrentTaskToDelayedList+0xbc>)
 800c0a6:	f7ff fa32 	bl	800b50e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c0aa:	e026      	b.n	800c0fa <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c0ac:	68fa      	ldr	r2, [r7, #12]
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	4413      	add	r3, r2
 800c0b2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c0b4:	4b14      	ldr	r3, [pc, #80]	; (800c108 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	68ba      	ldr	r2, [r7, #8]
 800c0ba:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c0bc:	68ba      	ldr	r2, [r7, #8]
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	429a      	cmp	r2, r3
 800c0c2:	d209      	bcs.n	800c0d8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c0c4:	4b13      	ldr	r3, [pc, #76]	; (800c114 <prvAddCurrentTaskToDelayedList+0xc0>)
 800c0c6:	681a      	ldr	r2, [r3, #0]
 800c0c8:	4b0f      	ldr	r3, [pc, #60]	; (800c108 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	3304      	adds	r3, #4
 800c0ce:	4619      	mov	r1, r3
 800c0d0:	4610      	mov	r0, r2
 800c0d2:	f7ff fa40 	bl	800b556 <vListInsert>
}
 800c0d6:	e010      	b.n	800c0fa <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c0d8:	4b0f      	ldr	r3, [pc, #60]	; (800c118 <prvAddCurrentTaskToDelayedList+0xc4>)
 800c0da:	681a      	ldr	r2, [r3, #0]
 800c0dc:	4b0a      	ldr	r3, [pc, #40]	; (800c108 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	3304      	adds	r3, #4
 800c0e2:	4619      	mov	r1, r3
 800c0e4:	4610      	mov	r0, r2
 800c0e6:	f7ff fa36 	bl	800b556 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c0ea:	4b0c      	ldr	r3, [pc, #48]	; (800c11c <prvAddCurrentTaskToDelayedList+0xc8>)
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	68ba      	ldr	r2, [r7, #8]
 800c0f0:	429a      	cmp	r2, r3
 800c0f2:	d202      	bcs.n	800c0fa <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800c0f4:	4a09      	ldr	r2, [pc, #36]	; (800c11c <prvAddCurrentTaskToDelayedList+0xc8>)
 800c0f6:	68bb      	ldr	r3, [r7, #8]
 800c0f8:	6013      	str	r3, [r2, #0]
}
 800c0fa:	bf00      	nop
 800c0fc:	3710      	adds	r7, #16
 800c0fe:	46bd      	mov	sp, r7
 800c100:	bd80      	pop	{r7, pc}
 800c102:	bf00      	nop
 800c104:	20000638 	.word	0x20000638
 800c108:	20000534 	.word	0x20000534
 800c10c:	2000063c 	.word	0x2000063c
 800c110:	20000620 	.word	0x20000620
 800c114:	200005f0 	.word	0x200005f0
 800c118:	200005ec 	.word	0x200005ec
 800c11c:	20000654 	.word	0x20000654

0800c120 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c120:	b480      	push	{r7}
 800c122:	b085      	sub	sp, #20
 800c124:	af00      	add	r7, sp, #0
 800c126:	60f8      	str	r0, [r7, #12]
 800c128:	60b9      	str	r1, [r7, #8]
 800c12a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	3b04      	subs	r3, #4
 800c130:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c138:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	3b04      	subs	r3, #4
 800c13e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c140:	68bb      	ldr	r3, [r7, #8]
 800c142:	f023 0201 	bic.w	r2, r3, #1
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	3b04      	subs	r3, #4
 800c14e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c150:	4a0c      	ldr	r2, [pc, #48]	; (800c184 <pxPortInitialiseStack+0x64>)
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	3b14      	subs	r3, #20
 800c15a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c15c:	687a      	ldr	r2, [r7, #4]
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	3b04      	subs	r3, #4
 800c166:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	f06f 0202 	mvn.w	r2, #2
 800c16e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	3b20      	subs	r3, #32
 800c174:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c176:	68fb      	ldr	r3, [r7, #12]
}
 800c178:	4618      	mov	r0, r3
 800c17a:	3714      	adds	r7, #20
 800c17c:	46bd      	mov	sp, r7
 800c17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c182:	4770      	bx	lr
 800c184:	0800c189 	.word	0x0800c189

0800c188 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c188:	b480      	push	{r7}
 800c18a:	b085      	sub	sp, #20
 800c18c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c18e:	2300      	movs	r3, #0
 800c190:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c192:	4b12      	ldr	r3, [pc, #72]	; (800c1dc <prvTaskExitError+0x54>)
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c19a:	d00a      	beq.n	800c1b2 <prvTaskExitError+0x2a>
	__asm volatile
 800c19c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1a0:	f383 8811 	msr	BASEPRI, r3
 800c1a4:	f3bf 8f6f 	isb	sy
 800c1a8:	f3bf 8f4f 	dsb	sy
 800c1ac:	60fb      	str	r3, [r7, #12]
}
 800c1ae:	bf00      	nop
 800c1b0:	e7fe      	b.n	800c1b0 <prvTaskExitError+0x28>
	__asm volatile
 800c1b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1b6:	f383 8811 	msr	BASEPRI, r3
 800c1ba:	f3bf 8f6f 	isb	sy
 800c1be:	f3bf 8f4f 	dsb	sy
 800c1c2:	60bb      	str	r3, [r7, #8]
}
 800c1c4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c1c6:	bf00      	nop
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d0fc      	beq.n	800c1c8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c1ce:	bf00      	nop
 800c1d0:	bf00      	nop
 800c1d2:	3714      	adds	r7, #20
 800c1d4:	46bd      	mov	sp, r7
 800c1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1da:	4770      	bx	lr
 800c1dc:	20000098 	.word	0x20000098

0800c1e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c1e0:	4b07      	ldr	r3, [pc, #28]	; (800c200 <pxCurrentTCBConst2>)
 800c1e2:	6819      	ldr	r1, [r3, #0]
 800c1e4:	6808      	ldr	r0, [r1, #0]
 800c1e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1ea:	f380 8809 	msr	PSP, r0
 800c1ee:	f3bf 8f6f 	isb	sy
 800c1f2:	f04f 0000 	mov.w	r0, #0
 800c1f6:	f380 8811 	msr	BASEPRI, r0
 800c1fa:	4770      	bx	lr
 800c1fc:	f3af 8000 	nop.w

0800c200 <pxCurrentTCBConst2>:
 800c200:	20000534 	.word	0x20000534
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c204:	bf00      	nop
 800c206:	bf00      	nop

0800c208 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c208:	4808      	ldr	r0, [pc, #32]	; (800c22c <prvPortStartFirstTask+0x24>)
 800c20a:	6800      	ldr	r0, [r0, #0]
 800c20c:	6800      	ldr	r0, [r0, #0]
 800c20e:	f380 8808 	msr	MSP, r0
 800c212:	f04f 0000 	mov.w	r0, #0
 800c216:	f380 8814 	msr	CONTROL, r0
 800c21a:	b662      	cpsie	i
 800c21c:	b661      	cpsie	f
 800c21e:	f3bf 8f4f 	dsb	sy
 800c222:	f3bf 8f6f 	isb	sy
 800c226:	df00      	svc	0
 800c228:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c22a:	bf00      	nop
 800c22c:	e000ed08 	.word	0xe000ed08

0800c230 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c230:	b580      	push	{r7, lr}
 800c232:	b086      	sub	sp, #24
 800c234:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c236:	4b46      	ldr	r3, [pc, #280]	; (800c350 <xPortStartScheduler+0x120>)
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	4a46      	ldr	r2, [pc, #280]	; (800c354 <xPortStartScheduler+0x124>)
 800c23c:	4293      	cmp	r3, r2
 800c23e:	d10a      	bne.n	800c256 <xPortStartScheduler+0x26>
	__asm volatile
 800c240:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c244:	f383 8811 	msr	BASEPRI, r3
 800c248:	f3bf 8f6f 	isb	sy
 800c24c:	f3bf 8f4f 	dsb	sy
 800c250:	613b      	str	r3, [r7, #16]
}
 800c252:	bf00      	nop
 800c254:	e7fe      	b.n	800c254 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c256:	4b3e      	ldr	r3, [pc, #248]	; (800c350 <xPortStartScheduler+0x120>)
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	4a3f      	ldr	r2, [pc, #252]	; (800c358 <xPortStartScheduler+0x128>)
 800c25c:	4293      	cmp	r3, r2
 800c25e:	d10a      	bne.n	800c276 <xPortStartScheduler+0x46>
	__asm volatile
 800c260:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c264:	f383 8811 	msr	BASEPRI, r3
 800c268:	f3bf 8f6f 	isb	sy
 800c26c:	f3bf 8f4f 	dsb	sy
 800c270:	60fb      	str	r3, [r7, #12]
}
 800c272:	bf00      	nop
 800c274:	e7fe      	b.n	800c274 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c276:	4b39      	ldr	r3, [pc, #228]	; (800c35c <xPortStartScheduler+0x12c>)
 800c278:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c27a:	697b      	ldr	r3, [r7, #20]
 800c27c:	781b      	ldrb	r3, [r3, #0]
 800c27e:	b2db      	uxtb	r3, r3
 800c280:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c282:	697b      	ldr	r3, [r7, #20]
 800c284:	22ff      	movs	r2, #255	; 0xff
 800c286:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c288:	697b      	ldr	r3, [r7, #20]
 800c28a:	781b      	ldrb	r3, [r3, #0]
 800c28c:	b2db      	uxtb	r3, r3
 800c28e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c290:	78fb      	ldrb	r3, [r7, #3]
 800c292:	b2db      	uxtb	r3, r3
 800c294:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c298:	b2da      	uxtb	r2, r3
 800c29a:	4b31      	ldr	r3, [pc, #196]	; (800c360 <xPortStartScheduler+0x130>)
 800c29c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c29e:	4b31      	ldr	r3, [pc, #196]	; (800c364 <xPortStartScheduler+0x134>)
 800c2a0:	2207      	movs	r2, #7
 800c2a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c2a4:	e009      	b.n	800c2ba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800c2a6:	4b2f      	ldr	r3, [pc, #188]	; (800c364 <xPortStartScheduler+0x134>)
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	3b01      	subs	r3, #1
 800c2ac:	4a2d      	ldr	r2, [pc, #180]	; (800c364 <xPortStartScheduler+0x134>)
 800c2ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c2b0:	78fb      	ldrb	r3, [r7, #3]
 800c2b2:	b2db      	uxtb	r3, r3
 800c2b4:	005b      	lsls	r3, r3, #1
 800c2b6:	b2db      	uxtb	r3, r3
 800c2b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c2ba:	78fb      	ldrb	r3, [r7, #3]
 800c2bc:	b2db      	uxtb	r3, r3
 800c2be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c2c2:	2b80      	cmp	r3, #128	; 0x80
 800c2c4:	d0ef      	beq.n	800c2a6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c2c6:	4b27      	ldr	r3, [pc, #156]	; (800c364 <xPortStartScheduler+0x134>)
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	f1c3 0307 	rsb	r3, r3, #7
 800c2ce:	2b04      	cmp	r3, #4
 800c2d0:	d00a      	beq.n	800c2e8 <xPortStartScheduler+0xb8>
	__asm volatile
 800c2d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2d6:	f383 8811 	msr	BASEPRI, r3
 800c2da:	f3bf 8f6f 	isb	sy
 800c2de:	f3bf 8f4f 	dsb	sy
 800c2e2:	60bb      	str	r3, [r7, #8]
}
 800c2e4:	bf00      	nop
 800c2e6:	e7fe      	b.n	800c2e6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c2e8:	4b1e      	ldr	r3, [pc, #120]	; (800c364 <xPortStartScheduler+0x134>)
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	021b      	lsls	r3, r3, #8
 800c2ee:	4a1d      	ldr	r2, [pc, #116]	; (800c364 <xPortStartScheduler+0x134>)
 800c2f0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c2f2:	4b1c      	ldr	r3, [pc, #112]	; (800c364 <xPortStartScheduler+0x134>)
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c2fa:	4a1a      	ldr	r2, [pc, #104]	; (800c364 <xPortStartScheduler+0x134>)
 800c2fc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	b2da      	uxtb	r2, r3
 800c302:	697b      	ldr	r3, [r7, #20]
 800c304:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c306:	4b18      	ldr	r3, [pc, #96]	; (800c368 <xPortStartScheduler+0x138>)
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	4a17      	ldr	r2, [pc, #92]	; (800c368 <xPortStartScheduler+0x138>)
 800c30c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c310:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c312:	4b15      	ldr	r3, [pc, #84]	; (800c368 <xPortStartScheduler+0x138>)
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	4a14      	ldr	r2, [pc, #80]	; (800c368 <xPortStartScheduler+0x138>)
 800c318:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c31c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c31e:	f000 f8dd 	bl	800c4dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c322:	4b12      	ldr	r3, [pc, #72]	; (800c36c <xPortStartScheduler+0x13c>)
 800c324:	2200      	movs	r2, #0
 800c326:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c328:	f000 f8fc 	bl	800c524 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c32c:	4b10      	ldr	r3, [pc, #64]	; (800c370 <xPortStartScheduler+0x140>)
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	4a0f      	ldr	r2, [pc, #60]	; (800c370 <xPortStartScheduler+0x140>)
 800c332:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c336:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c338:	f7ff ff66 	bl	800c208 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c33c:	f7ff fd46 	bl	800bdcc <vTaskSwitchContext>
	prvTaskExitError();
 800c340:	f7ff ff22 	bl	800c188 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c344:	2300      	movs	r3, #0
}
 800c346:	4618      	mov	r0, r3
 800c348:	3718      	adds	r7, #24
 800c34a:	46bd      	mov	sp, r7
 800c34c:	bd80      	pop	{r7, pc}
 800c34e:	bf00      	nop
 800c350:	e000ed00 	.word	0xe000ed00
 800c354:	410fc271 	.word	0x410fc271
 800c358:	410fc270 	.word	0x410fc270
 800c35c:	e000e400 	.word	0xe000e400
 800c360:	20000660 	.word	0x20000660
 800c364:	20000664 	.word	0x20000664
 800c368:	e000ed20 	.word	0xe000ed20
 800c36c:	20000098 	.word	0x20000098
 800c370:	e000ef34 	.word	0xe000ef34

0800c374 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c374:	b480      	push	{r7}
 800c376:	b083      	sub	sp, #12
 800c378:	af00      	add	r7, sp, #0
	__asm volatile
 800c37a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c37e:	f383 8811 	msr	BASEPRI, r3
 800c382:	f3bf 8f6f 	isb	sy
 800c386:	f3bf 8f4f 	dsb	sy
 800c38a:	607b      	str	r3, [r7, #4]
}
 800c38c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c38e:	4b0f      	ldr	r3, [pc, #60]	; (800c3cc <vPortEnterCritical+0x58>)
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	3301      	adds	r3, #1
 800c394:	4a0d      	ldr	r2, [pc, #52]	; (800c3cc <vPortEnterCritical+0x58>)
 800c396:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c398:	4b0c      	ldr	r3, [pc, #48]	; (800c3cc <vPortEnterCritical+0x58>)
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	2b01      	cmp	r3, #1
 800c39e:	d10f      	bne.n	800c3c0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c3a0:	4b0b      	ldr	r3, [pc, #44]	; (800c3d0 <vPortEnterCritical+0x5c>)
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	b2db      	uxtb	r3, r3
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d00a      	beq.n	800c3c0 <vPortEnterCritical+0x4c>
	__asm volatile
 800c3aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3ae:	f383 8811 	msr	BASEPRI, r3
 800c3b2:	f3bf 8f6f 	isb	sy
 800c3b6:	f3bf 8f4f 	dsb	sy
 800c3ba:	603b      	str	r3, [r7, #0]
}
 800c3bc:	bf00      	nop
 800c3be:	e7fe      	b.n	800c3be <vPortEnterCritical+0x4a>
	}
}
 800c3c0:	bf00      	nop
 800c3c2:	370c      	adds	r7, #12
 800c3c4:	46bd      	mov	sp, r7
 800c3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ca:	4770      	bx	lr
 800c3cc:	20000098 	.word	0x20000098
 800c3d0:	e000ed04 	.word	0xe000ed04

0800c3d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c3d4:	b480      	push	{r7}
 800c3d6:	b083      	sub	sp, #12
 800c3d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c3da:	4b12      	ldr	r3, [pc, #72]	; (800c424 <vPortExitCritical+0x50>)
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d10a      	bne.n	800c3f8 <vPortExitCritical+0x24>
	__asm volatile
 800c3e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3e6:	f383 8811 	msr	BASEPRI, r3
 800c3ea:	f3bf 8f6f 	isb	sy
 800c3ee:	f3bf 8f4f 	dsb	sy
 800c3f2:	607b      	str	r3, [r7, #4]
}
 800c3f4:	bf00      	nop
 800c3f6:	e7fe      	b.n	800c3f6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c3f8:	4b0a      	ldr	r3, [pc, #40]	; (800c424 <vPortExitCritical+0x50>)
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	3b01      	subs	r3, #1
 800c3fe:	4a09      	ldr	r2, [pc, #36]	; (800c424 <vPortExitCritical+0x50>)
 800c400:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c402:	4b08      	ldr	r3, [pc, #32]	; (800c424 <vPortExitCritical+0x50>)
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	2b00      	cmp	r3, #0
 800c408:	d105      	bne.n	800c416 <vPortExitCritical+0x42>
 800c40a:	2300      	movs	r3, #0
 800c40c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c40e:	683b      	ldr	r3, [r7, #0]
 800c410:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c414:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c416:	bf00      	nop
 800c418:	370c      	adds	r7, #12
 800c41a:	46bd      	mov	sp, r7
 800c41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c420:	4770      	bx	lr
 800c422:	bf00      	nop
 800c424:	20000098 	.word	0x20000098
	...

0800c430 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c430:	f3ef 8009 	mrs	r0, PSP
 800c434:	f3bf 8f6f 	isb	sy
 800c438:	4b15      	ldr	r3, [pc, #84]	; (800c490 <pxCurrentTCBConst>)
 800c43a:	681a      	ldr	r2, [r3, #0]
 800c43c:	f01e 0f10 	tst.w	lr, #16
 800c440:	bf08      	it	eq
 800c442:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c446:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c44a:	6010      	str	r0, [r2, #0]
 800c44c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c450:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c454:	f380 8811 	msr	BASEPRI, r0
 800c458:	f3bf 8f4f 	dsb	sy
 800c45c:	f3bf 8f6f 	isb	sy
 800c460:	f7ff fcb4 	bl	800bdcc <vTaskSwitchContext>
 800c464:	f04f 0000 	mov.w	r0, #0
 800c468:	f380 8811 	msr	BASEPRI, r0
 800c46c:	bc09      	pop	{r0, r3}
 800c46e:	6819      	ldr	r1, [r3, #0]
 800c470:	6808      	ldr	r0, [r1, #0]
 800c472:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c476:	f01e 0f10 	tst.w	lr, #16
 800c47a:	bf08      	it	eq
 800c47c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c480:	f380 8809 	msr	PSP, r0
 800c484:	f3bf 8f6f 	isb	sy
 800c488:	4770      	bx	lr
 800c48a:	bf00      	nop
 800c48c:	f3af 8000 	nop.w

0800c490 <pxCurrentTCBConst>:
 800c490:	20000534 	.word	0x20000534
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c494:	bf00      	nop
 800c496:	bf00      	nop

0800c498 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c498:	b580      	push	{r7, lr}
 800c49a:	b082      	sub	sp, #8
 800c49c:	af00      	add	r7, sp, #0
	__asm volatile
 800c49e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4a2:	f383 8811 	msr	BASEPRI, r3
 800c4a6:	f3bf 8f6f 	isb	sy
 800c4aa:	f3bf 8f4f 	dsb	sy
 800c4ae:	607b      	str	r3, [r7, #4]
}
 800c4b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c4b2:	f7ff fbd3 	bl	800bc5c <xTaskIncrementTick>
 800c4b6:	4603      	mov	r3, r0
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d003      	beq.n	800c4c4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c4bc:	4b06      	ldr	r3, [pc, #24]	; (800c4d8 <SysTick_Handler+0x40>)
 800c4be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c4c2:	601a      	str	r2, [r3, #0]
 800c4c4:	2300      	movs	r3, #0
 800c4c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c4c8:	683b      	ldr	r3, [r7, #0]
 800c4ca:	f383 8811 	msr	BASEPRI, r3
}
 800c4ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c4d0:	bf00      	nop
 800c4d2:	3708      	adds	r7, #8
 800c4d4:	46bd      	mov	sp, r7
 800c4d6:	bd80      	pop	{r7, pc}
 800c4d8:	e000ed04 	.word	0xe000ed04

0800c4dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c4dc:	b480      	push	{r7}
 800c4de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c4e0:	4b0b      	ldr	r3, [pc, #44]	; (800c510 <vPortSetupTimerInterrupt+0x34>)
 800c4e2:	2200      	movs	r2, #0
 800c4e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c4e6:	4b0b      	ldr	r3, [pc, #44]	; (800c514 <vPortSetupTimerInterrupt+0x38>)
 800c4e8:	2200      	movs	r2, #0
 800c4ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c4ec:	4b0a      	ldr	r3, [pc, #40]	; (800c518 <vPortSetupTimerInterrupt+0x3c>)
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	4a0a      	ldr	r2, [pc, #40]	; (800c51c <vPortSetupTimerInterrupt+0x40>)
 800c4f2:	fba2 2303 	umull	r2, r3, r2, r3
 800c4f6:	099b      	lsrs	r3, r3, #6
 800c4f8:	4a09      	ldr	r2, [pc, #36]	; (800c520 <vPortSetupTimerInterrupt+0x44>)
 800c4fa:	3b01      	subs	r3, #1
 800c4fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c4fe:	4b04      	ldr	r3, [pc, #16]	; (800c510 <vPortSetupTimerInterrupt+0x34>)
 800c500:	2207      	movs	r2, #7
 800c502:	601a      	str	r2, [r3, #0]
}
 800c504:	bf00      	nop
 800c506:	46bd      	mov	sp, r7
 800c508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c50c:	4770      	bx	lr
 800c50e:	bf00      	nop
 800c510:	e000e010 	.word	0xe000e010
 800c514:	e000e018 	.word	0xe000e018
 800c518:	20000000 	.word	0x20000000
 800c51c:	10624dd3 	.word	0x10624dd3
 800c520:	e000e014 	.word	0xe000e014

0800c524 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c524:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c534 <vPortEnableVFP+0x10>
 800c528:	6801      	ldr	r1, [r0, #0]
 800c52a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c52e:	6001      	str	r1, [r0, #0]
 800c530:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c532:	bf00      	nop
 800c534:	e000ed88 	.word	0xe000ed88

0800c538 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c538:	b480      	push	{r7}
 800c53a:	b085      	sub	sp, #20
 800c53c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c53e:	f3ef 8305 	mrs	r3, IPSR
 800c542:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	2b0f      	cmp	r3, #15
 800c548:	d914      	bls.n	800c574 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c54a:	4a17      	ldr	r2, [pc, #92]	; (800c5a8 <vPortValidateInterruptPriority+0x70>)
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	4413      	add	r3, r2
 800c550:	781b      	ldrb	r3, [r3, #0]
 800c552:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c554:	4b15      	ldr	r3, [pc, #84]	; (800c5ac <vPortValidateInterruptPriority+0x74>)
 800c556:	781b      	ldrb	r3, [r3, #0]
 800c558:	7afa      	ldrb	r2, [r7, #11]
 800c55a:	429a      	cmp	r2, r3
 800c55c:	d20a      	bcs.n	800c574 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800c55e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c562:	f383 8811 	msr	BASEPRI, r3
 800c566:	f3bf 8f6f 	isb	sy
 800c56a:	f3bf 8f4f 	dsb	sy
 800c56e:	607b      	str	r3, [r7, #4]
}
 800c570:	bf00      	nop
 800c572:	e7fe      	b.n	800c572 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c574:	4b0e      	ldr	r3, [pc, #56]	; (800c5b0 <vPortValidateInterruptPriority+0x78>)
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c57c:	4b0d      	ldr	r3, [pc, #52]	; (800c5b4 <vPortValidateInterruptPriority+0x7c>)
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	429a      	cmp	r2, r3
 800c582:	d90a      	bls.n	800c59a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800c584:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c588:	f383 8811 	msr	BASEPRI, r3
 800c58c:	f3bf 8f6f 	isb	sy
 800c590:	f3bf 8f4f 	dsb	sy
 800c594:	603b      	str	r3, [r7, #0]
}
 800c596:	bf00      	nop
 800c598:	e7fe      	b.n	800c598 <vPortValidateInterruptPriority+0x60>
	}
 800c59a:	bf00      	nop
 800c59c:	3714      	adds	r7, #20
 800c59e:	46bd      	mov	sp, r7
 800c5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5a4:	4770      	bx	lr
 800c5a6:	bf00      	nop
 800c5a8:	e000e3f0 	.word	0xe000e3f0
 800c5ac:	20000660 	.word	0x20000660
 800c5b0:	e000ed0c 	.word	0xe000ed0c
 800c5b4:	20000664 	.word	0x20000664

0800c5b8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c5b8:	b580      	push	{r7, lr}
 800c5ba:	b08a      	sub	sp, #40	; 0x28
 800c5bc:	af00      	add	r7, sp, #0
 800c5be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c5c0:	2300      	movs	r3, #0
 800c5c2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c5c4:	f7ff fa7e 	bl	800bac4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c5c8:	4b5d      	ldr	r3, [pc, #372]	; (800c740 <pvPortMalloc+0x188>)
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d101      	bne.n	800c5d4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c5d0:	f000 f924 	bl	800c81c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c5d4:	4b5b      	ldr	r3, [pc, #364]	; (800c744 <pvPortMalloc+0x18c>)
 800c5d6:	681a      	ldr	r2, [r3, #0]
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	4013      	ands	r3, r2
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	f040 8093 	bne.w	800c708 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d01d      	beq.n	800c624 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c5e8:	2208      	movs	r2, #8
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	4413      	add	r3, r2
 800c5ee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	f003 0307 	and.w	r3, r3, #7
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d014      	beq.n	800c624 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	f023 0307 	bic.w	r3, r3, #7
 800c600:	3308      	adds	r3, #8
 800c602:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	f003 0307 	and.w	r3, r3, #7
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d00a      	beq.n	800c624 <pvPortMalloc+0x6c>
	__asm volatile
 800c60e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c612:	f383 8811 	msr	BASEPRI, r3
 800c616:	f3bf 8f6f 	isb	sy
 800c61a:	f3bf 8f4f 	dsb	sy
 800c61e:	617b      	str	r3, [r7, #20]
}
 800c620:	bf00      	nop
 800c622:	e7fe      	b.n	800c622 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	2b00      	cmp	r3, #0
 800c628:	d06e      	beq.n	800c708 <pvPortMalloc+0x150>
 800c62a:	4b47      	ldr	r3, [pc, #284]	; (800c748 <pvPortMalloc+0x190>)
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	687a      	ldr	r2, [r7, #4]
 800c630:	429a      	cmp	r2, r3
 800c632:	d869      	bhi.n	800c708 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c634:	4b45      	ldr	r3, [pc, #276]	; (800c74c <pvPortMalloc+0x194>)
 800c636:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c638:	4b44      	ldr	r3, [pc, #272]	; (800c74c <pvPortMalloc+0x194>)
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c63e:	e004      	b.n	800c64a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c642:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c64a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c64c:	685b      	ldr	r3, [r3, #4]
 800c64e:	687a      	ldr	r2, [r7, #4]
 800c650:	429a      	cmp	r2, r3
 800c652:	d903      	bls.n	800c65c <pvPortMalloc+0xa4>
 800c654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d1f1      	bne.n	800c640 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c65c:	4b38      	ldr	r3, [pc, #224]	; (800c740 <pvPortMalloc+0x188>)
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c662:	429a      	cmp	r2, r3
 800c664:	d050      	beq.n	800c708 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c666:	6a3b      	ldr	r3, [r7, #32]
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	2208      	movs	r2, #8
 800c66c:	4413      	add	r3, r2
 800c66e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c672:	681a      	ldr	r2, [r3, #0]
 800c674:	6a3b      	ldr	r3, [r7, #32]
 800c676:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c67a:	685a      	ldr	r2, [r3, #4]
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	1ad2      	subs	r2, r2, r3
 800c680:	2308      	movs	r3, #8
 800c682:	005b      	lsls	r3, r3, #1
 800c684:	429a      	cmp	r2, r3
 800c686:	d91f      	bls.n	800c6c8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c688:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	4413      	add	r3, r2
 800c68e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c690:	69bb      	ldr	r3, [r7, #24]
 800c692:	f003 0307 	and.w	r3, r3, #7
 800c696:	2b00      	cmp	r3, #0
 800c698:	d00a      	beq.n	800c6b0 <pvPortMalloc+0xf8>
	__asm volatile
 800c69a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c69e:	f383 8811 	msr	BASEPRI, r3
 800c6a2:	f3bf 8f6f 	isb	sy
 800c6a6:	f3bf 8f4f 	dsb	sy
 800c6aa:	613b      	str	r3, [r7, #16]
}
 800c6ac:	bf00      	nop
 800c6ae:	e7fe      	b.n	800c6ae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c6b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6b2:	685a      	ldr	r2, [r3, #4]
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	1ad2      	subs	r2, r2, r3
 800c6b8:	69bb      	ldr	r3, [r7, #24]
 800c6ba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c6bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6be:	687a      	ldr	r2, [r7, #4]
 800c6c0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c6c2:	69b8      	ldr	r0, [r7, #24]
 800c6c4:	f000 f90c 	bl	800c8e0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c6c8:	4b1f      	ldr	r3, [pc, #124]	; (800c748 <pvPortMalloc+0x190>)
 800c6ca:	681a      	ldr	r2, [r3, #0]
 800c6cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6ce:	685b      	ldr	r3, [r3, #4]
 800c6d0:	1ad3      	subs	r3, r2, r3
 800c6d2:	4a1d      	ldr	r2, [pc, #116]	; (800c748 <pvPortMalloc+0x190>)
 800c6d4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c6d6:	4b1c      	ldr	r3, [pc, #112]	; (800c748 <pvPortMalloc+0x190>)
 800c6d8:	681a      	ldr	r2, [r3, #0]
 800c6da:	4b1d      	ldr	r3, [pc, #116]	; (800c750 <pvPortMalloc+0x198>)
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	429a      	cmp	r2, r3
 800c6e0:	d203      	bcs.n	800c6ea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c6e2:	4b19      	ldr	r3, [pc, #100]	; (800c748 <pvPortMalloc+0x190>)
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	4a1a      	ldr	r2, [pc, #104]	; (800c750 <pvPortMalloc+0x198>)
 800c6e8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c6ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6ec:	685a      	ldr	r2, [r3, #4]
 800c6ee:	4b15      	ldr	r3, [pc, #84]	; (800c744 <pvPortMalloc+0x18c>)
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	431a      	orrs	r2, r3
 800c6f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6f6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c6f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6fa:	2200      	movs	r2, #0
 800c6fc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c6fe:	4b15      	ldr	r3, [pc, #84]	; (800c754 <pvPortMalloc+0x19c>)
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	3301      	adds	r3, #1
 800c704:	4a13      	ldr	r2, [pc, #76]	; (800c754 <pvPortMalloc+0x19c>)
 800c706:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c708:	f7ff f9ea 	bl	800bae0 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800c70c:	69fb      	ldr	r3, [r7, #28]
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d101      	bne.n	800c716 <pvPortMalloc+0x15e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800c712:	f7f4 fd24 	bl	800115e <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c716:	69fb      	ldr	r3, [r7, #28]
 800c718:	f003 0307 	and.w	r3, r3, #7
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d00a      	beq.n	800c736 <pvPortMalloc+0x17e>
	__asm volatile
 800c720:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c724:	f383 8811 	msr	BASEPRI, r3
 800c728:	f3bf 8f6f 	isb	sy
 800c72c:	f3bf 8f4f 	dsb	sy
 800c730:	60fb      	str	r3, [r7, #12]
}
 800c732:	bf00      	nop
 800c734:	e7fe      	b.n	800c734 <pvPortMalloc+0x17c>
	return pvReturn;
 800c736:	69fb      	ldr	r3, [r7, #28]
}
 800c738:	4618      	mov	r0, r3
 800c73a:	3728      	adds	r7, #40	; 0x28
 800c73c:	46bd      	mov	sp, r7
 800c73e:	bd80      	pop	{r7, pc}
 800c740:	2000f670 	.word	0x2000f670
 800c744:	2000f684 	.word	0x2000f684
 800c748:	2000f674 	.word	0x2000f674
 800c74c:	2000f668 	.word	0x2000f668
 800c750:	2000f678 	.word	0x2000f678
 800c754:	2000f67c 	.word	0x2000f67c

0800c758 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c758:	b580      	push	{r7, lr}
 800c75a:	b086      	sub	sp, #24
 800c75c:	af00      	add	r7, sp, #0
 800c75e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	2b00      	cmp	r3, #0
 800c768:	d04d      	beq.n	800c806 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c76a:	2308      	movs	r3, #8
 800c76c:	425b      	negs	r3, r3
 800c76e:	697a      	ldr	r2, [r7, #20]
 800c770:	4413      	add	r3, r2
 800c772:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c774:	697b      	ldr	r3, [r7, #20]
 800c776:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c778:	693b      	ldr	r3, [r7, #16]
 800c77a:	685a      	ldr	r2, [r3, #4]
 800c77c:	4b24      	ldr	r3, [pc, #144]	; (800c810 <vPortFree+0xb8>)
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	4013      	ands	r3, r2
 800c782:	2b00      	cmp	r3, #0
 800c784:	d10a      	bne.n	800c79c <vPortFree+0x44>
	__asm volatile
 800c786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c78a:	f383 8811 	msr	BASEPRI, r3
 800c78e:	f3bf 8f6f 	isb	sy
 800c792:	f3bf 8f4f 	dsb	sy
 800c796:	60fb      	str	r3, [r7, #12]
}
 800c798:	bf00      	nop
 800c79a:	e7fe      	b.n	800c79a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c79c:	693b      	ldr	r3, [r7, #16]
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d00a      	beq.n	800c7ba <vPortFree+0x62>
	__asm volatile
 800c7a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7a8:	f383 8811 	msr	BASEPRI, r3
 800c7ac:	f3bf 8f6f 	isb	sy
 800c7b0:	f3bf 8f4f 	dsb	sy
 800c7b4:	60bb      	str	r3, [r7, #8]
}
 800c7b6:	bf00      	nop
 800c7b8:	e7fe      	b.n	800c7b8 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c7ba:	693b      	ldr	r3, [r7, #16]
 800c7bc:	685a      	ldr	r2, [r3, #4]
 800c7be:	4b14      	ldr	r3, [pc, #80]	; (800c810 <vPortFree+0xb8>)
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	4013      	ands	r3, r2
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d01e      	beq.n	800c806 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c7c8:	693b      	ldr	r3, [r7, #16]
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d11a      	bne.n	800c806 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c7d0:	693b      	ldr	r3, [r7, #16]
 800c7d2:	685a      	ldr	r2, [r3, #4]
 800c7d4:	4b0e      	ldr	r3, [pc, #56]	; (800c810 <vPortFree+0xb8>)
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	43db      	mvns	r3, r3
 800c7da:	401a      	ands	r2, r3
 800c7dc:	693b      	ldr	r3, [r7, #16]
 800c7de:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c7e0:	f7ff f970 	bl	800bac4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c7e4:	693b      	ldr	r3, [r7, #16]
 800c7e6:	685a      	ldr	r2, [r3, #4]
 800c7e8:	4b0a      	ldr	r3, [pc, #40]	; (800c814 <vPortFree+0xbc>)
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	4413      	add	r3, r2
 800c7ee:	4a09      	ldr	r2, [pc, #36]	; (800c814 <vPortFree+0xbc>)
 800c7f0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c7f2:	6938      	ldr	r0, [r7, #16]
 800c7f4:	f000 f874 	bl	800c8e0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c7f8:	4b07      	ldr	r3, [pc, #28]	; (800c818 <vPortFree+0xc0>)
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	3301      	adds	r3, #1
 800c7fe:	4a06      	ldr	r2, [pc, #24]	; (800c818 <vPortFree+0xc0>)
 800c800:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c802:	f7ff f96d 	bl	800bae0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c806:	bf00      	nop
 800c808:	3718      	adds	r7, #24
 800c80a:	46bd      	mov	sp, r7
 800c80c:	bd80      	pop	{r7, pc}
 800c80e:	bf00      	nop
 800c810:	2000f684 	.word	0x2000f684
 800c814:	2000f674 	.word	0x2000f674
 800c818:	2000f680 	.word	0x2000f680

0800c81c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c81c:	b480      	push	{r7}
 800c81e:	b085      	sub	sp, #20
 800c820:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c822:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800c826:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c828:	4b27      	ldr	r3, [pc, #156]	; (800c8c8 <prvHeapInit+0xac>)
 800c82a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	f003 0307 	and.w	r3, r3, #7
 800c832:	2b00      	cmp	r3, #0
 800c834:	d00c      	beq.n	800c850 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	3307      	adds	r3, #7
 800c83a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	f023 0307 	bic.w	r3, r3, #7
 800c842:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c844:	68ba      	ldr	r2, [r7, #8]
 800c846:	68fb      	ldr	r3, [r7, #12]
 800c848:	1ad3      	subs	r3, r2, r3
 800c84a:	4a1f      	ldr	r2, [pc, #124]	; (800c8c8 <prvHeapInit+0xac>)
 800c84c:	4413      	add	r3, r2
 800c84e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c854:	4a1d      	ldr	r2, [pc, #116]	; (800c8cc <prvHeapInit+0xb0>)
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c85a:	4b1c      	ldr	r3, [pc, #112]	; (800c8cc <prvHeapInit+0xb0>)
 800c85c:	2200      	movs	r2, #0
 800c85e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	68ba      	ldr	r2, [r7, #8]
 800c864:	4413      	add	r3, r2
 800c866:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c868:	2208      	movs	r2, #8
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	1a9b      	subs	r3, r3, r2
 800c86e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	f023 0307 	bic.w	r3, r3, #7
 800c876:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	4a15      	ldr	r2, [pc, #84]	; (800c8d0 <prvHeapInit+0xb4>)
 800c87c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c87e:	4b14      	ldr	r3, [pc, #80]	; (800c8d0 <prvHeapInit+0xb4>)
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	2200      	movs	r2, #0
 800c884:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c886:	4b12      	ldr	r3, [pc, #72]	; (800c8d0 <prvHeapInit+0xb4>)
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	2200      	movs	r2, #0
 800c88c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c892:	683b      	ldr	r3, [r7, #0]
 800c894:	68fa      	ldr	r2, [r7, #12]
 800c896:	1ad2      	subs	r2, r2, r3
 800c898:	683b      	ldr	r3, [r7, #0]
 800c89a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c89c:	4b0c      	ldr	r3, [pc, #48]	; (800c8d0 <prvHeapInit+0xb4>)
 800c89e:	681a      	ldr	r2, [r3, #0]
 800c8a0:	683b      	ldr	r3, [r7, #0]
 800c8a2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c8a4:	683b      	ldr	r3, [r7, #0]
 800c8a6:	685b      	ldr	r3, [r3, #4]
 800c8a8:	4a0a      	ldr	r2, [pc, #40]	; (800c8d4 <prvHeapInit+0xb8>)
 800c8aa:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c8ac:	683b      	ldr	r3, [r7, #0]
 800c8ae:	685b      	ldr	r3, [r3, #4]
 800c8b0:	4a09      	ldr	r2, [pc, #36]	; (800c8d8 <prvHeapInit+0xbc>)
 800c8b2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c8b4:	4b09      	ldr	r3, [pc, #36]	; (800c8dc <prvHeapInit+0xc0>)
 800c8b6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c8ba:	601a      	str	r2, [r3, #0]
}
 800c8bc:	bf00      	nop
 800c8be:	3714      	adds	r7, #20
 800c8c0:	46bd      	mov	sp, r7
 800c8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8c6:	4770      	bx	lr
 800c8c8:	20000668 	.word	0x20000668
 800c8cc:	2000f668 	.word	0x2000f668
 800c8d0:	2000f670 	.word	0x2000f670
 800c8d4:	2000f678 	.word	0x2000f678
 800c8d8:	2000f674 	.word	0x2000f674
 800c8dc:	2000f684 	.word	0x2000f684

0800c8e0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c8e0:	b480      	push	{r7}
 800c8e2:	b085      	sub	sp, #20
 800c8e4:	af00      	add	r7, sp, #0
 800c8e6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c8e8:	4b28      	ldr	r3, [pc, #160]	; (800c98c <prvInsertBlockIntoFreeList+0xac>)
 800c8ea:	60fb      	str	r3, [r7, #12]
 800c8ec:	e002      	b.n	800c8f4 <prvInsertBlockIntoFreeList+0x14>
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	60fb      	str	r3, [r7, #12]
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	687a      	ldr	r2, [r7, #4]
 800c8fa:	429a      	cmp	r2, r3
 800c8fc:	d8f7      	bhi.n	800c8ee <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	685b      	ldr	r3, [r3, #4]
 800c906:	68ba      	ldr	r2, [r7, #8]
 800c908:	4413      	add	r3, r2
 800c90a:	687a      	ldr	r2, [r7, #4]
 800c90c:	429a      	cmp	r2, r3
 800c90e:	d108      	bne.n	800c922 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	685a      	ldr	r2, [r3, #4]
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	685b      	ldr	r3, [r3, #4]
 800c918:	441a      	add	r2, r3
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	685b      	ldr	r3, [r3, #4]
 800c92a:	68ba      	ldr	r2, [r7, #8]
 800c92c:	441a      	add	r2, r3
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	429a      	cmp	r2, r3
 800c934:	d118      	bne.n	800c968 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	681a      	ldr	r2, [r3, #0]
 800c93a:	4b15      	ldr	r3, [pc, #84]	; (800c990 <prvInsertBlockIntoFreeList+0xb0>)
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	429a      	cmp	r2, r3
 800c940:	d00d      	beq.n	800c95e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	685a      	ldr	r2, [r3, #4]
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	685b      	ldr	r3, [r3, #4]
 800c94c:	441a      	add	r2, r3
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	681a      	ldr	r2, [r3, #0]
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	601a      	str	r2, [r3, #0]
 800c95c:	e008      	b.n	800c970 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c95e:	4b0c      	ldr	r3, [pc, #48]	; (800c990 <prvInsertBlockIntoFreeList+0xb0>)
 800c960:	681a      	ldr	r2, [r3, #0]
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	601a      	str	r2, [r3, #0]
 800c966:	e003      	b.n	800c970 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	681a      	ldr	r2, [r3, #0]
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c970:	68fa      	ldr	r2, [r7, #12]
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	429a      	cmp	r2, r3
 800c976:	d002      	beq.n	800c97e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	687a      	ldr	r2, [r7, #4]
 800c97c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c97e:	bf00      	nop
 800c980:	3714      	adds	r7, #20
 800c982:	46bd      	mov	sp, r7
 800c984:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c988:	4770      	bx	lr
 800c98a:	bf00      	nop
 800c98c:	2000f668 	.word	0x2000f668
 800c990:	2000f670 	.word	0x2000f670

0800c994 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c994:	b580      	push	{r7, lr}
 800c996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c998:	2200      	movs	r2, #0
 800c99a:	4912      	ldr	r1, [pc, #72]	; (800c9e4 <MX_USB_DEVICE_Init+0x50>)
 800c99c:	4812      	ldr	r0, [pc, #72]	; (800c9e8 <MX_USB_DEVICE_Init+0x54>)
 800c99e:	f7fd f9ff 	bl	8009da0 <USBD_Init>
 800c9a2:	4603      	mov	r3, r0
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d001      	beq.n	800c9ac <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c9a8:	f7f4 fe68 	bl	800167c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800c9ac:	490f      	ldr	r1, [pc, #60]	; (800c9ec <MX_USB_DEVICE_Init+0x58>)
 800c9ae:	480e      	ldr	r0, [pc, #56]	; (800c9e8 <MX_USB_DEVICE_Init+0x54>)
 800c9b0:	f7fd fa26 	bl	8009e00 <USBD_RegisterClass>
 800c9b4:	4603      	mov	r3, r0
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d001      	beq.n	800c9be <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c9ba:	f7f4 fe5f 	bl	800167c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800c9be:	490c      	ldr	r1, [pc, #48]	; (800c9f0 <MX_USB_DEVICE_Init+0x5c>)
 800c9c0:	4809      	ldr	r0, [pc, #36]	; (800c9e8 <MX_USB_DEVICE_Init+0x54>)
 800c9c2:	f7fd f91d 	bl	8009c00 <USBD_CDC_RegisterInterface>
 800c9c6:	4603      	mov	r3, r0
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d001      	beq.n	800c9d0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c9cc:	f7f4 fe56 	bl	800167c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c9d0:	4805      	ldr	r0, [pc, #20]	; (800c9e8 <MX_USB_DEVICE_Init+0x54>)
 800c9d2:	f7fd fa4b 	bl	8009e6c <USBD_Start>
 800c9d6:	4603      	mov	r3, r0
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d001      	beq.n	800c9e0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c9dc:	f7f4 fe4e 	bl	800167c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c9e0:	bf00      	nop
 800c9e2:	bd80      	pop	{r7, pc}
 800c9e4:	200000b0 	.word	0x200000b0
 800c9e8:	2000f688 	.word	0x2000f688
 800c9ec:	20000018 	.word	0x20000018
 800c9f0:	2000009c 	.word	0x2000009c

0800c9f4 <CDC_Init_FS>:
/* Private functions ---------------------------------------------------------*/
/**
 * @brief  Initializes the CDC media low layer over the FS USB IP
 * @retval USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_Init_FS(void) {
 800c9f4:	b580      	push	{r7, lr}
 800c9f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c9f8:	2200      	movs	r2, #0
 800c9fa:	4905      	ldr	r1, [pc, #20]	; (800ca10 <CDC_Init_FS+0x1c>)
 800c9fc:	4805      	ldr	r0, [pc, #20]	; (800ca14 <CDC_Init_FS+0x20>)
 800c9fe:	f7fd f919 	bl	8009c34 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800ca02:	4905      	ldr	r1, [pc, #20]	; (800ca18 <CDC_Init_FS+0x24>)
 800ca04:	4803      	ldr	r0, [pc, #12]	; (800ca14 <CDC_Init_FS+0x20>)
 800ca06:	f7fd f937 	bl	8009c78 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800ca0a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800ca0c:	4618      	mov	r0, r3
 800ca0e:	bd80      	pop	{r7, pc}
 800ca10:	20010164 	.word	0x20010164
 800ca14:	2000f688 	.word	0x2000f688
 800ca18:	2000f964 	.word	0x2000f964

0800ca1c <CDC_DeInit_FS>:

/**
 * @brief  DeInitializes the CDC media low layer
 * @retval USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_DeInit_FS(void) {
 800ca1c:	b480      	push	{r7}
 800ca1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800ca20:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800ca22:	4618      	mov	r0, r3
 800ca24:	46bd      	mov	sp, r7
 800ca26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca2a:	4770      	bx	lr

0800ca2c <CDC_Control_FS>:
 * @param  pbuf: Buffer containing command data (request parameters)
 * @param  length: Number of data to be sent (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else
 * USBD_FAIL
 */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t *pbuf, uint16_t length) {
 800ca2c:	b480      	push	{r7}
 800ca2e:	b083      	sub	sp, #12
 800ca30:	af00      	add	r7, sp, #0
 800ca32:	4603      	mov	r3, r0
 800ca34:	6039      	str	r1, [r7, #0]
 800ca36:	71fb      	strb	r3, [r7, #7]
 800ca38:	4613      	mov	r3, r2
 800ca3a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch (cmd) {
 800ca3c:	79fb      	ldrb	r3, [r7, #7]
 800ca3e:	2b23      	cmp	r3, #35	; 0x23
 800ca40:	d84a      	bhi.n	800cad8 <CDC_Control_FS+0xac>
 800ca42:	a201      	add	r2, pc, #4	; (adr r2, 800ca48 <CDC_Control_FS+0x1c>)
 800ca44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca48:	0800cad9 	.word	0x0800cad9
 800ca4c:	0800cad9 	.word	0x0800cad9
 800ca50:	0800cad9 	.word	0x0800cad9
 800ca54:	0800cad9 	.word	0x0800cad9
 800ca58:	0800cad9 	.word	0x0800cad9
 800ca5c:	0800cad9 	.word	0x0800cad9
 800ca60:	0800cad9 	.word	0x0800cad9
 800ca64:	0800cad9 	.word	0x0800cad9
 800ca68:	0800cad9 	.word	0x0800cad9
 800ca6c:	0800cad9 	.word	0x0800cad9
 800ca70:	0800cad9 	.word	0x0800cad9
 800ca74:	0800cad9 	.word	0x0800cad9
 800ca78:	0800cad9 	.word	0x0800cad9
 800ca7c:	0800cad9 	.word	0x0800cad9
 800ca80:	0800cad9 	.word	0x0800cad9
 800ca84:	0800cad9 	.word	0x0800cad9
 800ca88:	0800cad9 	.word	0x0800cad9
 800ca8c:	0800cad9 	.word	0x0800cad9
 800ca90:	0800cad9 	.word	0x0800cad9
 800ca94:	0800cad9 	.word	0x0800cad9
 800ca98:	0800cad9 	.word	0x0800cad9
 800ca9c:	0800cad9 	.word	0x0800cad9
 800caa0:	0800cad9 	.word	0x0800cad9
 800caa4:	0800cad9 	.word	0x0800cad9
 800caa8:	0800cad9 	.word	0x0800cad9
 800caac:	0800cad9 	.word	0x0800cad9
 800cab0:	0800cad9 	.word	0x0800cad9
 800cab4:	0800cad9 	.word	0x0800cad9
 800cab8:	0800cad9 	.word	0x0800cad9
 800cabc:	0800cad9 	.word	0x0800cad9
 800cac0:	0800cad9 	.word	0x0800cad9
 800cac4:	0800cad9 	.word	0x0800cad9
 800cac8:	0800cad9 	.word	0x0800cad9
 800cacc:	0800cad9 	.word	0x0800cad9
 800cad0:	0800cad9 	.word	0x0800cad9
 800cad4:	0800cad9 	.word	0x0800cad9
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 800cad8:	bf00      	nop
  }

  return (USBD_OK);
 800cada:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800cadc:	4618      	mov	r0, r3
 800cade:	370c      	adds	r7, #12
 800cae0:	46bd      	mov	sp, r7
 800cae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae6:	4770      	bx	lr

0800cae8 <CDC_Receive_FS>:
 * @param  Buf: Buffer of data to be received
 * @param  Len: Number of data received (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else
 * USBD_FAIL
 */
static int8_t CDC_Receive_FS(uint8_t *Buf, uint32_t *Len) {
 800cae8:	b580      	push	{r7, lr}
 800caea:	b082      	sub	sp, #8
 800caec:	af00      	add	r7, sp, #0
 800caee:	6078      	str	r0, [r7, #4]
 800caf0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  usb_vcp_receive_processing(Buf, Len);
 800caf2:	6839      	ldr	r1, [r7, #0]
 800caf4:	6878      	ldr	r0, [r7, #4]
 800caf6:	f004 fe4d 	bl	8011794 <usb_vcp_receive_processing>
  return (USBD_OK);
 800cafa:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800cafc:	4618      	mov	r0, r3
 800cafe:	3708      	adds	r7, #8
 800cb00:	46bd      	mov	sp, r7
 800cb02:	bd80      	pop	{r7, pc}

0800cb04 <CDC_TransmitCplt_FS>:
 * @param  Buf: Buffer of data to be received
 * @param  Len: Number of data received (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else
 * USBD_FAIL
 */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum) {
 800cb04:	b580      	push	{r7, lr}
 800cb06:	b086      	sub	sp, #24
 800cb08:	af00      	add	r7, sp, #0
 800cb0a:	60f8      	str	r0, [r7, #12]
 800cb0c:	60b9      	str	r1, [r7, #8]
 800cb0e:	4613      	mov	r3, r2
 800cb10:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800cb12:	2300      	movs	r3, #0
 800cb14:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  result = usb_vcp_transmit_callback_processing(Buf, Len);
 800cb16:	68b9      	ldr	r1, [r7, #8]
 800cb18:	68f8      	ldr	r0, [r7, #12]
 800cb1a:	f004 fe67 	bl	80117ec <usb_vcp_transmit_callback_processing>
 800cb1e:	4603      	mov	r3, r0
 800cb20:	75fb      	strb	r3, [r7, #23]

  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800cb22:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cb26:	4618      	mov	r0, r3
 800cb28:	3718      	adds	r7, #24
 800cb2a:	46bd      	mov	sp, r7
 800cb2c:	bd80      	pop	{r7, pc}
	...

0800cb30 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cb30:	b480      	push	{r7}
 800cb32:	b083      	sub	sp, #12
 800cb34:	af00      	add	r7, sp, #0
 800cb36:	4603      	mov	r3, r0
 800cb38:	6039      	str	r1, [r7, #0]
 800cb3a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800cb3c:	683b      	ldr	r3, [r7, #0]
 800cb3e:	2212      	movs	r2, #18
 800cb40:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800cb42:	4b03      	ldr	r3, [pc, #12]	; (800cb50 <USBD_FS_DeviceDescriptor+0x20>)
}
 800cb44:	4618      	mov	r0, r3
 800cb46:	370c      	adds	r7, #12
 800cb48:	46bd      	mov	sp, r7
 800cb4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb4e:	4770      	bx	lr
 800cb50:	200000cc 	.word	0x200000cc

0800cb54 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cb54:	b480      	push	{r7}
 800cb56:	b083      	sub	sp, #12
 800cb58:	af00      	add	r7, sp, #0
 800cb5a:	4603      	mov	r3, r0
 800cb5c:	6039      	str	r1, [r7, #0]
 800cb5e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800cb60:	683b      	ldr	r3, [r7, #0]
 800cb62:	2204      	movs	r2, #4
 800cb64:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800cb66:	4b03      	ldr	r3, [pc, #12]	; (800cb74 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800cb68:	4618      	mov	r0, r3
 800cb6a:	370c      	adds	r7, #12
 800cb6c:	46bd      	mov	sp, r7
 800cb6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb72:	4770      	bx	lr
 800cb74:	200000e0 	.word	0x200000e0

0800cb78 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cb78:	b580      	push	{r7, lr}
 800cb7a:	b082      	sub	sp, #8
 800cb7c:	af00      	add	r7, sp, #0
 800cb7e:	4603      	mov	r3, r0
 800cb80:	6039      	str	r1, [r7, #0]
 800cb82:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cb84:	79fb      	ldrb	r3, [r7, #7]
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d105      	bne.n	800cb96 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cb8a:	683a      	ldr	r2, [r7, #0]
 800cb8c:	4907      	ldr	r1, [pc, #28]	; (800cbac <USBD_FS_ProductStrDescriptor+0x34>)
 800cb8e:	4808      	ldr	r0, [pc, #32]	; (800cbb0 <USBD_FS_ProductStrDescriptor+0x38>)
 800cb90:	f7fe fb1e 	bl	800b1d0 <USBD_GetString>
 800cb94:	e004      	b.n	800cba0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cb96:	683a      	ldr	r2, [r7, #0]
 800cb98:	4904      	ldr	r1, [pc, #16]	; (800cbac <USBD_FS_ProductStrDescriptor+0x34>)
 800cb9a:	4805      	ldr	r0, [pc, #20]	; (800cbb0 <USBD_FS_ProductStrDescriptor+0x38>)
 800cb9c:	f7fe fb18 	bl	800b1d0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cba0:	4b02      	ldr	r3, [pc, #8]	; (800cbac <USBD_FS_ProductStrDescriptor+0x34>)
}
 800cba2:	4618      	mov	r0, r3
 800cba4:	3708      	adds	r7, #8
 800cba6:	46bd      	mov	sp, r7
 800cba8:	bd80      	pop	{r7, pc}
 800cbaa:	bf00      	nop
 800cbac:	20010964 	.word	0x20010964
 800cbb0:	08013748 	.word	0x08013748

0800cbb4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cbb4:	b580      	push	{r7, lr}
 800cbb6:	b082      	sub	sp, #8
 800cbb8:	af00      	add	r7, sp, #0
 800cbba:	4603      	mov	r3, r0
 800cbbc:	6039      	str	r1, [r7, #0]
 800cbbe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800cbc0:	683a      	ldr	r2, [r7, #0]
 800cbc2:	4904      	ldr	r1, [pc, #16]	; (800cbd4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800cbc4:	4804      	ldr	r0, [pc, #16]	; (800cbd8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800cbc6:	f7fe fb03 	bl	800b1d0 <USBD_GetString>
  return USBD_StrDesc;
 800cbca:	4b02      	ldr	r3, [pc, #8]	; (800cbd4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800cbcc:	4618      	mov	r0, r3
 800cbce:	3708      	adds	r7, #8
 800cbd0:	46bd      	mov	sp, r7
 800cbd2:	bd80      	pop	{r7, pc}
 800cbd4:	20010964 	.word	0x20010964
 800cbd8:	08013760 	.word	0x08013760

0800cbdc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cbdc:	b580      	push	{r7, lr}
 800cbde:	b082      	sub	sp, #8
 800cbe0:	af00      	add	r7, sp, #0
 800cbe2:	4603      	mov	r3, r0
 800cbe4:	6039      	str	r1, [r7, #0]
 800cbe6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800cbe8:	683b      	ldr	r3, [r7, #0]
 800cbea:	221a      	movs	r2, #26
 800cbec:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800cbee:	f000 f843 	bl	800cc78 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800cbf2:	4b02      	ldr	r3, [pc, #8]	; (800cbfc <USBD_FS_SerialStrDescriptor+0x20>)
}
 800cbf4:	4618      	mov	r0, r3
 800cbf6:	3708      	adds	r7, #8
 800cbf8:	46bd      	mov	sp, r7
 800cbfa:	bd80      	pop	{r7, pc}
 800cbfc:	200000e4 	.word	0x200000e4

0800cc00 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cc00:	b580      	push	{r7, lr}
 800cc02:	b082      	sub	sp, #8
 800cc04:	af00      	add	r7, sp, #0
 800cc06:	4603      	mov	r3, r0
 800cc08:	6039      	str	r1, [r7, #0]
 800cc0a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800cc0c:	79fb      	ldrb	r3, [r7, #7]
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d105      	bne.n	800cc1e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cc12:	683a      	ldr	r2, [r7, #0]
 800cc14:	4907      	ldr	r1, [pc, #28]	; (800cc34 <USBD_FS_ConfigStrDescriptor+0x34>)
 800cc16:	4808      	ldr	r0, [pc, #32]	; (800cc38 <USBD_FS_ConfigStrDescriptor+0x38>)
 800cc18:	f7fe fada 	bl	800b1d0 <USBD_GetString>
 800cc1c:	e004      	b.n	800cc28 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cc1e:	683a      	ldr	r2, [r7, #0]
 800cc20:	4904      	ldr	r1, [pc, #16]	; (800cc34 <USBD_FS_ConfigStrDescriptor+0x34>)
 800cc22:	4805      	ldr	r0, [pc, #20]	; (800cc38 <USBD_FS_ConfigStrDescriptor+0x38>)
 800cc24:	f7fe fad4 	bl	800b1d0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cc28:	4b02      	ldr	r3, [pc, #8]	; (800cc34 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800cc2a:	4618      	mov	r0, r3
 800cc2c:	3708      	adds	r7, #8
 800cc2e:	46bd      	mov	sp, r7
 800cc30:	bd80      	pop	{r7, pc}
 800cc32:	bf00      	nop
 800cc34:	20010964 	.word	0x20010964
 800cc38:	08013774 	.word	0x08013774

0800cc3c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cc3c:	b580      	push	{r7, lr}
 800cc3e:	b082      	sub	sp, #8
 800cc40:	af00      	add	r7, sp, #0
 800cc42:	4603      	mov	r3, r0
 800cc44:	6039      	str	r1, [r7, #0]
 800cc46:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cc48:	79fb      	ldrb	r3, [r7, #7]
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d105      	bne.n	800cc5a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cc4e:	683a      	ldr	r2, [r7, #0]
 800cc50:	4907      	ldr	r1, [pc, #28]	; (800cc70 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800cc52:	4808      	ldr	r0, [pc, #32]	; (800cc74 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cc54:	f7fe fabc 	bl	800b1d0 <USBD_GetString>
 800cc58:	e004      	b.n	800cc64 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cc5a:	683a      	ldr	r2, [r7, #0]
 800cc5c:	4904      	ldr	r1, [pc, #16]	; (800cc70 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800cc5e:	4805      	ldr	r0, [pc, #20]	; (800cc74 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cc60:	f7fe fab6 	bl	800b1d0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cc64:	4b02      	ldr	r3, [pc, #8]	; (800cc70 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800cc66:	4618      	mov	r0, r3
 800cc68:	3708      	adds	r7, #8
 800cc6a:	46bd      	mov	sp, r7
 800cc6c:	bd80      	pop	{r7, pc}
 800cc6e:	bf00      	nop
 800cc70:	20010964 	.word	0x20010964
 800cc74:	08013780 	.word	0x08013780

0800cc78 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800cc78:	b580      	push	{r7, lr}
 800cc7a:	b084      	sub	sp, #16
 800cc7c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800cc7e:	4b0f      	ldr	r3, [pc, #60]	; (800ccbc <Get_SerialNum+0x44>)
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800cc84:	4b0e      	ldr	r3, [pc, #56]	; (800ccc0 <Get_SerialNum+0x48>)
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800cc8a:	4b0e      	ldr	r3, [pc, #56]	; (800ccc4 <Get_SerialNum+0x4c>)
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800cc90:	68fa      	ldr	r2, [r7, #12]
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	4413      	add	r3, r2
 800cc96:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800cc98:	68fb      	ldr	r3, [r7, #12]
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d009      	beq.n	800ccb2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800cc9e:	2208      	movs	r2, #8
 800cca0:	4909      	ldr	r1, [pc, #36]	; (800ccc8 <Get_SerialNum+0x50>)
 800cca2:	68f8      	ldr	r0, [r7, #12]
 800cca4:	f000 f814 	bl	800ccd0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800cca8:	2204      	movs	r2, #4
 800ccaa:	4908      	ldr	r1, [pc, #32]	; (800cccc <Get_SerialNum+0x54>)
 800ccac:	68b8      	ldr	r0, [r7, #8]
 800ccae:	f000 f80f 	bl	800ccd0 <IntToUnicode>
  }
}
 800ccb2:	bf00      	nop
 800ccb4:	3710      	adds	r7, #16
 800ccb6:	46bd      	mov	sp, r7
 800ccb8:	bd80      	pop	{r7, pc}
 800ccba:	bf00      	nop
 800ccbc:	1fff7a10 	.word	0x1fff7a10
 800ccc0:	1fff7a14 	.word	0x1fff7a14
 800ccc4:	1fff7a18 	.word	0x1fff7a18
 800ccc8:	200000e6 	.word	0x200000e6
 800cccc:	200000f6 	.word	0x200000f6

0800ccd0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ccd0:	b480      	push	{r7}
 800ccd2:	b087      	sub	sp, #28
 800ccd4:	af00      	add	r7, sp, #0
 800ccd6:	60f8      	str	r0, [r7, #12]
 800ccd8:	60b9      	str	r1, [r7, #8]
 800ccda:	4613      	mov	r3, r2
 800ccdc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ccde:	2300      	movs	r3, #0
 800cce0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800cce2:	2300      	movs	r3, #0
 800cce4:	75fb      	strb	r3, [r7, #23]
 800cce6:	e027      	b.n	800cd38 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	0f1b      	lsrs	r3, r3, #28
 800ccec:	2b09      	cmp	r3, #9
 800ccee:	d80b      	bhi.n	800cd08 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	0f1b      	lsrs	r3, r3, #28
 800ccf4:	b2da      	uxtb	r2, r3
 800ccf6:	7dfb      	ldrb	r3, [r7, #23]
 800ccf8:	005b      	lsls	r3, r3, #1
 800ccfa:	4619      	mov	r1, r3
 800ccfc:	68bb      	ldr	r3, [r7, #8]
 800ccfe:	440b      	add	r3, r1
 800cd00:	3230      	adds	r2, #48	; 0x30
 800cd02:	b2d2      	uxtb	r2, r2
 800cd04:	701a      	strb	r2, [r3, #0]
 800cd06:	e00a      	b.n	800cd1e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800cd08:	68fb      	ldr	r3, [r7, #12]
 800cd0a:	0f1b      	lsrs	r3, r3, #28
 800cd0c:	b2da      	uxtb	r2, r3
 800cd0e:	7dfb      	ldrb	r3, [r7, #23]
 800cd10:	005b      	lsls	r3, r3, #1
 800cd12:	4619      	mov	r1, r3
 800cd14:	68bb      	ldr	r3, [r7, #8]
 800cd16:	440b      	add	r3, r1
 800cd18:	3237      	adds	r2, #55	; 0x37
 800cd1a:	b2d2      	uxtb	r2, r2
 800cd1c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	011b      	lsls	r3, r3, #4
 800cd22:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800cd24:	7dfb      	ldrb	r3, [r7, #23]
 800cd26:	005b      	lsls	r3, r3, #1
 800cd28:	3301      	adds	r3, #1
 800cd2a:	68ba      	ldr	r2, [r7, #8]
 800cd2c:	4413      	add	r3, r2
 800cd2e:	2200      	movs	r2, #0
 800cd30:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800cd32:	7dfb      	ldrb	r3, [r7, #23]
 800cd34:	3301      	adds	r3, #1
 800cd36:	75fb      	strb	r3, [r7, #23]
 800cd38:	7dfa      	ldrb	r2, [r7, #23]
 800cd3a:	79fb      	ldrb	r3, [r7, #7]
 800cd3c:	429a      	cmp	r2, r3
 800cd3e:	d3d3      	bcc.n	800cce8 <IntToUnicode+0x18>
  }
}
 800cd40:	bf00      	nop
 800cd42:	bf00      	nop
 800cd44:	371c      	adds	r7, #28
 800cd46:	46bd      	mov	sp, r7
 800cd48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd4c:	4770      	bx	lr
	...

0800cd50 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800cd50:	b580      	push	{r7, lr}
 800cd52:	b08a      	sub	sp, #40	; 0x28
 800cd54:	af00      	add	r7, sp, #0
 800cd56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cd58:	f107 0314 	add.w	r3, r7, #20
 800cd5c:	2200      	movs	r2, #0
 800cd5e:	601a      	str	r2, [r3, #0]
 800cd60:	605a      	str	r2, [r3, #4]
 800cd62:	609a      	str	r2, [r3, #8]
 800cd64:	60da      	str	r2, [r3, #12]
 800cd66:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cd70:	d13a      	bne.n	800cde8 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cd72:	2300      	movs	r3, #0
 800cd74:	613b      	str	r3, [r7, #16]
 800cd76:	4b1e      	ldr	r3, [pc, #120]	; (800cdf0 <HAL_PCD_MspInit+0xa0>)
 800cd78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd7a:	4a1d      	ldr	r2, [pc, #116]	; (800cdf0 <HAL_PCD_MspInit+0xa0>)
 800cd7c:	f043 0301 	orr.w	r3, r3, #1
 800cd80:	6313      	str	r3, [r2, #48]	; 0x30
 800cd82:	4b1b      	ldr	r3, [pc, #108]	; (800cdf0 <HAL_PCD_MspInit+0xa0>)
 800cd84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd86:	f003 0301 	and.w	r3, r3, #1
 800cd8a:	613b      	str	r3, [r7, #16]
 800cd8c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 800cd8e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800cd92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cd94:	2302      	movs	r3, #2
 800cd96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cd98:	2300      	movs	r3, #0
 800cd9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cd9c:	2303      	movs	r3, #3
 800cd9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800cda0:	230a      	movs	r3, #10
 800cda2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cda4:	f107 0314 	add.w	r3, r7, #20
 800cda8:	4619      	mov	r1, r3
 800cdaa:	4812      	ldr	r0, [pc, #72]	; (800cdf4 <HAL_PCD_MspInit+0xa4>)
 800cdac:	f7f6 fd6e 	bl	800388c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800cdb0:	4b0f      	ldr	r3, [pc, #60]	; (800cdf0 <HAL_PCD_MspInit+0xa0>)
 800cdb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cdb4:	4a0e      	ldr	r2, [pc, #56]	; (800cdf0 <HAL_PCD_MspInit+0xa0>)
 800cdb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cdba:	6353      	str	r3, [r2, #52]	; 0x34
 800cdbc:	2300      	movs	r3, #0
 800cdbe:	60fb      	str	r3, [r7, #12]
 800cdc0:	4b0b      	ldr	r3, [pc, #44]	; (800cdf0 <HAL_PCD_MspInit+0xa0>)
 800cdc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cdc4:	4a0a      	ldr	r2, [pc, #40]	; (800cdf0 <HAL_PCD_MspInit+0xa0>)
 800cdc6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800cdca:	6453      	str	r3, [r2, #68]	; 0x44
 800cdcc:	4b08      	ldr	r3, [pc, #32]	; (800cdf0 <HAL_PCD_MspInit+0xa0>)
 800cdce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cdd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cdd4:	60fb      	str	r3, [r7, #12]
 800cdd6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800cdd8:	2200      	movs	r2, #0
 800cdda:	2105      	movs	r1, #5
 800cddc:	2043      	movs	r0, #67	; 0x43
 800cdde:	f7f6 f9af 	bl	8003140 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800cde2:	2043      	movs	r0, #67	; 0x43
 800cde4:	f7f6 f9c8 	bl	8003178 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800cde8:	bf00      	nop
 800cdea:	3728      	adds	r7, #40	; 0x28
 800cdec:	46bd      	mov	sp, r7
 800cdee:	bd80      	pop	{r7, pc}
 800cdf0:	40023800 	.word	0x40023800
 800cdf4:	40020000 	.word	0x40020000

0800cdf8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cdf8:	b580      	push	{r7, lr}
 800cdfa:	b082      	sub	sp, #8
 800cdfc:	af00      	add	r7, sp, #0
 800cdfe:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	; 0x4e0
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800ce0c:	4619      	mov	r1, r3
 800ce0e:	4610      	mov	r0, r2
 800ce10:	f7fd f879 	bl	8009f06 <USBD_LL_SetupStage>
}
 800ce14:	bf00      	nop
 800ce16:	3708      	adds	r7, #8
 800ce18:	46bd      	mov	sp, r7
 800ce1a:	bd80      	pop	{r7, pc}

0800ce1c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ce1c:	b580      	push	{r7, lr}
 800ce1e:	b082      	sub	sp, #8
 800ce20:	af00      	add	r7, sp, #0
 800ce22:	6078      	str	r0, [r7, #4]
 800ce24:	460b      	mov	r3, r1
 800ce26:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 800ce2e:	78fa      	ldrb	r2, [r7, #3]
 800ce30:	6879      	ldr	r1, [r7, #4]
 800ce32:	4613      	mov	r3, r2
 800ce34:	00db      	lsls	r3, r3, #3
 800ce36:	4413      	add	r3, r2
 800ce38:	009b      	lsls	r3, r3, #2
 800ce3a:	440b      	add	r3, r1
 800ce3c:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800ce40:	681a      	ldr	r2, [r3, #0]
 800ce42:	78fb      	ldrb	r3, [r7, #3]
 800ce44:	4619      	mov	r1, r3
 800ce46:	f7fd f8b3 	bl	8009fb0 <USBD_LL_DataOutStage>
}
 800ce4a:	bf00      	nop
 800ce4c:	3708      	adds	r7, #8
 800ce4e:	46bd      	mov	sp, r7
 800ce50:	bd80      	pop	{r7, pc}

0800ce52 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ce52:	b580      	push	{r7, lr}
 800ce54:	b082      	sub	sp, #8
 800ce56:	af00      	add	r7, sp, #0
 800ce58:	6078      	str	r0, [r7, #4]
 800ce5a:	460b      	mov	r3, r1
 800ce5c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 800ce64:	78fa      	ldrb	r2, [r7, #3]
 800ce66:	6879      	ldr	r1, [r7, #4]
 800ce68:	4613      	mov	r3, r2
 800ce6a:	00db      	lsls	r3, r3, #3
 800ce6c:	4413      	add	r3, r2
 800ce6e:	009b      	lsls	r3, r3, #2
 800ce70:	440b      	add	r3, r1
 800ce72:	3320      	adds	r3, #32
 800ce74:	681a      	ldr	r2, [r3, #0]
 800ce76:	78fb      	ldrb	r3, [r7, #3]
 800ce78:	4619      	mov	r1, r3
 800ce7a:	f7fd f94c 	bl	800a116 <USBD_LL_DataInStage>
}
 800ce7e:	bf00      	nop
 800ce80:	3708      	adds	r7, #8
 800ce82:	46bd      	mov	sp, r7
 800ce84:	bd80      	pop	{r7, pc}

0800ce86 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ce86:	b580      	push	{r7, lr}
 800ce88:	b082      	sub	sp, #8
 800ce8a:	af00      	add	r7, sp, #0
 800ce8c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800ce94:	4618      	mov	r0, r3
 800ce96:	f7fd fa86 	bl	800a3a6 <USBD_LL_SOF>
}
 800ce9a:	bf00      	nop
 800ce9c:	3708      	adds	r7, #8
 800ce9e:	46bd      	mov	sp, r7
 800cea0:	bd80      	pop	{r7, pc}

0800cea2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cea2:	b580      	push	{r7, lr}
 800cea4:	b084      	sub	sp, #16
 800cea6:	af00      	add	r7, sp, #0
 800cea8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ceaa:	2301      	movs	r3, #1
 800ceac:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	79db      	ldrb	r3, [r3, #7]
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d102      	bne.n	800cebc <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800ceb6:	2300      	movs	r3, #0
 800ceb8:	73fb      	strb	r3, [r7, #15]
 800ceba:	e008      	b.n	800cece <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	79db      	ldrb	r3, [r3, #7]
 800cec0:	2b02      	cmp	r3, #2
 800cec2:	d102      	bne.n	800ceca <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800cec4:	2301      	movs	r3, #1
 800cec6:	73fb      	strb	r3, [r7, #15]
 800cec8:	e001      	b.n	800cece <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800ceca:	f7f4 fbd7 	bl	800167c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800ced4:	7bfa      	ldrb	r2, [r7, #15]
 800ced6:	4611      	mov	r1, r2
 800ced8:	4618      	mov	r0, r3
 800ceda:	f7fd fa20 	bl	800a31e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800cee4:	4618      	mov	r0, r3
 800cee6:	f7fd f9c8 	bl	800a27a <USBD_LL_Reset>
}
 800ceea:	bf00      	nop
 800ceec:	3710      	adds	r7, #16
 800ceee:	46bd      	mov	sp, r7
 800cef0:	bd80      	pop	{r7, pc}
	...

0800cef4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cef4:	b580      	push	{r7, lr}
 800cef6:	b082      	sub	sp, #8
 800cef8:	af00      	add	r7, sp, #0
 800cefa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800cf02:	4618      	mov	r0, r3
 800cf04:	f7fd fa1b 	bl	800a33e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	687a      	ldr	r2, [r7, #4]
 800cf14:	6812      	ldr	r2, [r2, #0]
 800cf16:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800cf1a:	f043 0301 	orr.w	r3, r3, #1
 800cf1e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	7adb      	ldrb	r3, [r3, #11]
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d005      	beq.n	800cf34 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cf28:	4b04      	ldr	r3, [pc, #16]	; (800cf3c <HAL_PCD_SuspendCallback+0x48>)
 800cf2a:	691b      	ldr	r3, [r3, #16]
 800cf2c:	4a03      	ldr	r2, [pc, #12]	; (800cf3c <HAL_PCD_SuspendCallback+0x48>)
 800cf2e:	f043 0306 	orr.w	r3, r3, #6
 800cf32:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800cf34:	bf00      	nop
 800cf36:	3708      	adds	r7, #8
 800cf38:	46bd      	mov	sp, r7
 800cf3a:	bd80      	pop	{r7, pc}
 800cf3c:	e000ed00 	.word	0xe000ed00

0800cf40 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf40:	b580      	push	{r7, lr}
 800cf42:	b082      	sub	sp, #8
 800cf44:	af00      	add	r7, sp, #0
 800cf46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800cf4e:	4618      	mov	r0, r3
 800cf50:	f7fd fa11 	bl	800a376 <USBD_LL_Resume>
}
 800cf54:	bf00      	nop
 800cf56:	3708      	adds	r7, #8
 800cf58:	46bd      	mov	sp, r7
 800cf5a:	bd80      	pop	{r7, pc}

0800cf5c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf5c:	b580      	push	{r7, lr}
 800cf5e:	b082      	sub	sp, #8
 800cf60:	af00      	add	r7, sp, #0
 800cf62:	6078      	str	r0, [r7, #4]
 800cf64:	460b      	mov	r3, r1
 800cf66:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800cf6e:	78fa      	ldrb	r2, [r7, #3]
 800cf70:	4611      	mov	r1, r2
 800cf72:	4618      	mov	r0, r3
 800cf74:	f7fd fa69 	bl	800a44a <USBD_LL_IsoOUTIncomplete>
}
 800cf78:	bf00      	nop
 800cf7a:	3708      	adds	r7, #8
 800cf7c:	46bd      	mov	sp, r7
 800cf7e:	bd80      	pop	{r7, pc}

0800cf80 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf80:	b580      	push	{r7, lr}
 800cf82:	b082      	sub	sp, #8
 800cf84:	af00      	add	r7, sp, #0
 800cf86:	6078      	str	r0, [r7, #4]
 800cf88:	460b      	mov	r3, r1
 800cf8a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800cf92:	78fa      	ldrb	r2, [r7, #3]
 800cf94:	4611      	mov	r1, r2
 800cf96:	4618      	mov	r0, r3
 800cf98:	f7fd fa25 	bl	800a3e6 <USBD_LL_IsoINIncomplete>
}
 800cf9c:	bf00      	nop
 800cf9e:	3708      	adds	r7, #8
 800cfa0:	46bd      	mov	sp, r7
 800cfa2:	bd80      	pop	{r7, pc}

0800cfa4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cfa4:	b580      	push	{r7, lr}
 800cfa6:	b082      	sub	sp, #8
 800cfa8:	af00      	add	r7, sp, #0
 800cfaa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800cfb2:	4618      	mov	r0, r3
 800cfb4:	f7fd fa7b 	bl	800a4ae <USBD_LL_DevConnected>
}
 800cfb8:	bf00      	nop
 800cfba:	3708      	adds	r7, #8
 800cfbc:	46bd      	mov	sp, r7
 800cfbe:	bd80      	pop	{r7, pc}

0800cfc0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cfc0:	b580      	push	{r7, lr}
 800cfc2:	b082      	sub	sp, #8
 800cfc4:	af00      	add	r7, sp, #0
 800cfc6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800cfce:	4618      	mov	r0, r3
 800cfd0:	f7fd fa78 	bl	800a4c4 <USBD_LL_DevDisconnected>
}
 800cfd4:	bf00      	nop
 800cfd6:	3708      	adds	r7, #8
 800cfd8:	46bd      	mov	sp, r7
 800cfda:	bd80      	pop	{r7, pc}

0800cfdc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800cfdc:	b580      	push	{r7, lr}
 800cfde:	b082      	sub	sp, #8
 800cfe0:	af00      	add	r7, sp, #0
 800cfe2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	781b      	ldrb	r3, [r3, #0]
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d13c      	bne.n	800d066 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800cfec:	4a20      	ldr	r2, [pc, #128]	; (800d070 <USBD_LL_Init+0x94>)
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	4a1e      	ldr	r2, [pc, #120]	; (800d070 <USBD_LL_Init+0x94>)
 800cff8:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800cffc:	4b1c      	ldr	r3, [pc, #112]	; (800d070 <USBD_LL_Init+0x94>)
 800cffe:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800d002:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800d004:	4b1a      	ldr	r3, [pc, #104]	; (800d070 <USBD_LL_Init+0x94>)
 800d006:	2204      	movs	r2, #4
 800d008:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800d00a:	4b19      	ldr	r3, [pc, #100]	; (800d070 <USBD_LL_Init+0x94>)
 800d00c:	2202      	movs	r2, #2
 800d00e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d010:	4b17      	ldr	r3, [pc, #92]	; (800d070 <USBD_LL_Init+0x94>)
 800d012:	2200      	movs	r2, #0
 800d014:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d016:	4b16      	ldr	r3, [pc, #88]	; (800d070 <USBD_LL_Init+0x94>)
 800d018:	2202      	movs	r2, #2
 800d01a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d01c:	4b14      	ldr	r3, [pc, #80]	; (800d070 <USBD_LL_Init+0x94>)
 800d01e:	2200      	movs	r2, #0
 800d020:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800d022:	4b13      	ldr	r3, [pc, #76]	; (800d070 <USBD_LL_Init+0x94>)
 800d024:	2200      	movs	r2, #0
 800d026:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800d028:	4b11      	ldr	r3, [pc, #68]	; (800d070 <USBD_LL_Init+0x94>)
 800d02a:	2200      	movs	r2, #0
 800d02c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800d02e:	4b10      	ldr	r3, [pc, #64]	; (800d070 <USBD_LL_Init+0x94>)
 800d030:	2200      	movs	r2, #0
 800d032:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800d034:	4b0e      	ldr	r3, [pc, #56]	; (800d070 <USBD_LL_Init+0x94>)
 800d036:	2200      	movs	r2, #0
 800d038:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800d03a:	480d      	ldr	r0, [pc, #52]	; (800d070 <USBD_LL_Init+0x94>)
 800d03c:	f7f6 fe05 	bl	8003c4a <HAL_PCD_Init>
 800d040:	4603      	mov	r3, r0
 800d042:	2b00      	cmp	r3, #0
 800d044:	d001      	beq.n	800d04a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800d046:	f7f4 fb19 	bl	800167c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800d04a:	2180      	movs	r1, #128	; 0x80
 800d04c:	4808      	ldr	r0, [pc, #32]	; (800d070 <USBD_LL_Init+0x94>)
 800d04e:	f7f8 f830 	bl	80050b2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800d052:	2240      	movs	r2, #64	; 0x40
 800d054:	2100      	movs	r1, #0
 800d056:	4806      	ldr	r0, [pc, #24]	; (800d070 <USBD_LL_Init+0x94>)
 800d058:	f7f7 ffe4 	bl	8005024 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800d05c:	2280      	movs	r2, #128	; 0x80
 800d05e:	2101      	movs	r1, #1
 800d060:	4803      	ldr	r0, [pc, #12]	; (800d070 <USBD_LL_Init+0x94>)
 800d062:	f7f7 ffdf 	bl	8005024 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800d066:	2300      	movs	r3, #0
}
 800d068:	4618      	mov	r0, r3
 800d06a:	3708      	adds	r7, #8
 800d06c:	46bd      	mov	sp, r7
 800d06e:	bd80      	pop	{r7, pc}
 800d070:	20010b64 	.word	0x20010b64

0800d074 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d074:	b580      	push	{r7, lr}
 800d076:	b084      	sub	sp, #16
 800d078:	af00      	add	r7, sp, #0
 800d07a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d07c:	2300      	movs	r3, #0
 800d07e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d080:	2300      	movs	r3, #0
 800d082:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d08a:	4618      	mov	r0, r3
 800d08c:	f7f6 feec 	bl	8003e68 <HAL_PCD_Start>
 800d090:	4603      	mov	r3, r0
 800d092:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d094:	7bfb      	ldrb	r3, [r7, #15]
 800d096:	4618      	mov	r0, r3
 800d098:	f000 f942 	bl	800d320 <USBD_Get_USB_Status>
 800d09c:	4603      	mov	r3, r0
 800d09e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d0a0:	7bbb      	ldrb	r3, [r7, #14]
}
 800d0a2:	4618      	mov	r0, r3
 800d0a4:	3710      	adds	r7, #16
 800d0a6:	46bd      	mov	sp, r7
 800d0a8:	bd80      	pop	{r7, pc}

0800d0aa <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d0aa:	b580      	push	{r7, lr}
 800d0ac:	b084      	sub	sp, #16
 800d0ae:	af00      	add	r7, sp, #0
 800d0b0:	6078      	str	r0, [r7, #4]
 800d0b2:	4608      	mov	r0, r1
 800d0b4:	4611      	mov	r1, r2
 800d0b6:	461a      	mov	r2, r3
 800d0b8:	4603      	mov	r3, r0
 800d0ba:	70fb      	strb	r3, [r7, #3]
 800d0bc:	460b      	mov	r3, r1
 800d0be:	70bb      	strb	r3, [r7, #2]
 800d0c0:	4613      	mov	r3, r2
 800d0c2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d0c4:	2300      	movs	r3, #0
 800d0c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d0c8:	2300      	movs	r3, #0
 800d0ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800d0d2:	78bb      	ldrb	r3, [r7, #2]
 800d0d4:	883a      	ldrh	r2, [r7, #0]
 800d0d6:	78f9      	ldrb	r1, [r7, #3]
 800d0d8:	f7f7 fbc0 	bl	800485c <HAL_PCD_EP_Open>
 800d0dc:	4603      	mov	r3, r0
 800d0de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d0e0:	7bfb      	ldrb	r3, [r7, #15]
 800d0e2:	4618      	mov	r0, r3
 800d0e4:	f000 f91c 	bl	800d320 <USBD_Get_USB_Status>
 800d0e8:	4603      	mov	r3, r0
 800d0ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d0ec:	7bbb      	ldrb	r3, [r7, #14]
}
 800d0ee:	4618      	mov	r0, r3
 800d0f0:	3710      	adds	r7, #16
 800d0f2:	46bd      	mov	sp, r7
 800d0f4:	bd80      	pop	{r7, pc}

0800d0f6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d0f6:	b580      	push	{r7, lr}
 800d0f8:	b084      	sub	sp, #16
 800d0fa:	af00      	add	r7, sp, #0
 800d0fc:	6078      	str	r0, [r7, #4]
 800d0fe:	460b      	mov	r3, r1
 800d100:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d102:	2300      	movs	r3, #0
 800d104:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d106:	2300      	movs	r3, #0
 800d108:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d110:	78fa      	ldrb	r2, [r7, #3]
 800d112:	4611      	mov	r1, r2
 800d114:	4618      	mov	r0, r3
 800d116:	f7f7 fc09 	bl	800492c <HAL_PCD_EP_Close>
 800d11a:	4603      	mov	r3, r0
 800d11c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d11e:	7bfb      	ldrb	r3, [r7, #15]
 800d120:	4618      	mov	r0, r3
 800d122:	f000 f8fd 	bl	800d320 <USBD_Get_USB_Status>
 800d126:	4603      	mov	r3, r0
 800d128:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d12a:	7bbb      	ldrb	r3, [r7, #14]
}
 800d12c:	4618      	mov	r0, r3
 800d12e:	3710      	adds	r7, #16
 800d130:	46bd      	mov	sp, r7
 800d132:	bd80      	pop	{r7, pc}

0800d134 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d134:	b580      	push	{r7, lr}
 800d136:	b084      	sub	sp, #16
 800d138:	af00      	add	r7, sp, #0
 800d13a:	6078      	str	r0, [r7, #4]
 800d13c:	460b      	mov	r3, r1
 800d13e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d140:	2300      	movs	r3, #0
 800d142:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d144:	2300      	movs	r3, #0
 800d146:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d14e:	78fa      	ldrb	r2, [r7, #3]
 800d150:	4611      	mov	r1, r2
 800d152:	4618      	mov	r0, r3
 800d154:	f7f7 fcc1 	bl	8004ada <HAL_PCD_EP_SetStall>
 800d158:	4603      	mov	r3, r0
 800d15a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d15c:	7bfb      	ldrb	r3, [r7, #15]
 800d15e:	4618      	mov	r0, r3
 800d160:	f000 f8de 	bl	800d320 <USBD_Get_USB_Status>
 800d164:	4603      	mov	r3, r0
 800d166:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d168:	7bbb      	ldrb	r3, [r7, #14]
}
 800d16a:	4618      	mov	r0, r3
 800d16c:	3710      	adds	r7, #16
 800d16e:	46bd      	mov	sp, r7
 800d170:	bd80      	pop	{r7, pc}

0800d172 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d172:	b580      	push	{r7, lr}
 800d174:	b084      	sub	sp, #16
 800d176:	af00      	add	r7, sp, #0
 800d178:	6078      	str	r0, [r7, #4]
 800d17a:	460b      	mov	r3, r1
 800d17c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d17e:	2300      	movs	r3, #0
 800d180:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d182:	2300      	movs	r3, #0
 800d184:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d18c:	78fa      	ldrb	r2, [r7, #3]
 800d18e:	4611      	mov	r1, r2
 800d190:	4618      	mov	r0, r3
 800d192:	f7f7 fd05 	bl	8004ba0 <HAL_PCD_EP_ClrStall>
 800d196:	4603      	mov	r3, r0
 800d198:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d19a:	7bfb      	ldrb	r3, [r7, #15]
 800d19c:	4618      	mov	r0, r3
 800d19e:	f000 f8bf 	bl	800d320 <USBD_Get_USB_Status>
 800d1a2:	4603      	mov	r3, r0
 800d1a4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d1a6:	7bbb      	ldrb	r3, [r7, #14]
}
 800d1a8:	4618      	mov	r0, r3
 800d1aa:	3710      	adds	r7, #16
 800d1ac:	46bd      	mov	sp, r7
 800d1ae:	bd80      	pop	{r7, pc}

0800d1b0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d1b0:	b480      	push	{r7}
 800d1b2:	b085      	sub	sp, #20
 800d1b4:	af00      	add	r7, sp, #0
 800d1b6:	6078      	str	r0, [r7, #4]
 800d1b8:	460b      	mov	r3, r1
 800d1ba:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d1c2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d1c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	da0b      	bge.n	800d1e4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d1cc:	78fb      	ldrb	r3, [r7, #3]
 800d1ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d1d2:	68f9      	ldr	r1, [r7, #12]
 800d1d4:	4613      	mov	r3, r2
 800d1d6:	00db      	lsls	r3, r3, #3
 800d1d8:	4413      	add	r3, r2
 800d1da:	009b      	lsls	r3, r3, #2
 800d1dc:	440b      	add	r3, r1
 800d1de:	3316      	adds	r3, #22
 800d1e0:	781b      	ldrb	r3, [r3, #0]
 800d1e2:	e00b      	b.n	800d1fc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d1e4:	78fb      	ldrb	r3, [r7, #3]
 800d1e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d1ea:	68f9      	ldr	r1, [r7, #12]
 800d1ec:	4613      	mov	r3, r2
 800d1ee:	00db      	lsls	r3, r3, #3
 800d1f0:	4413      	add	r3, r2
 800d1f2:	009b      	lsls	r3, r3, #2
 800d1f4:	440b      	add	r3, r1
 800d1f6:	f203 2356 	addw	r3, r3, #598	; 0x256
 800d1fa:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d1fc:	4618      	mov	r0, r3
 800d1fe:	3714      	adds	r7, #20
 800d200:	46bd      	mov	sp, r7
 800d202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d206:	4770      	bx	lr

0800d208 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d208:	b580      	push	{r7, lr}
 800d20a:	b084      	sub	sp, #16
 800d20c:	af00      	add	r7, sp, #0
 800d20e:	6078      	str	r0, [r7, #4]
 800d210:	460b      	mov	r3, r1
 800d212:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d214:	2300      	movs	r3, #0
 800d216:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d218:	2300      	movs	r3, #0
 800d21a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d222:	78fa      	ldrb	r2, [r7, #3]
 800d224:	4611      	mov	r1, r2
 800d226:	4618      	mov	r0, r3
 800d228:	f7f7 faf4 	bl	8004814 <HAL_PCD_SetAddress>
 800d22c:	4603      	mov	r3, r0
 800d22e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d230:	7bfb      	ldrb	r3, [r7, #15]
 800d232:	4618      	mov	r0, r3
 800d234:	f000 f874 	bl	800d320 <USBD_Get_USB_Status>
 800d238:	4603      	mov	r3, r0
 800d23a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d23c:	7bbb      	ldrb	r3, [r7, #14]
}
 800d23e:	4618      	mov	r0, r3
 800d240:	3710      	adds	r7, #16
 800d242:	46bd      	mov	sp, r7
 800d244:	bd80      	pop	{r7, pc}

0800d246 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d246:	b580      	push	{r7, lr}
 800d248:	b086      	sub	sp, #24
 800d24a:	af00      	add	r7, sp, #0
 800d24c:	60f8      	str	r0, [r7, #12]
 800d24e:	607a      	str	r2, [r7, #4]
 800d250:	603b      	str	r3, [r7, #0]
 800d252:	460b      	mov	r3, r1
 800d254:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d256:	2300      	movs	r3, #0
 800d258:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d25a:	2300      	movs	r3, #0
 800d25c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800d264:	7af9      	ldrb	r1, [r7, #11]
 800d266:	683b      	ldr	r3, [r7, #0]
 800d268:	687a      	ldr	r2, [r7, #4]
 800d26a:	f7f7 fbfc 	bl	8004a66 <HAL_PCD_EP_Transmit>
 800d26e:	4603      	mov	r3, r0
 800d270:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d272:	7dfb      	ldrb	r3, [r7, #23]
 800d274:	4618      	mov	r0, r3
 800d276:	f000 f853 	bl	800d320 <USBD_Get_USB_Status>
 800d27a:	4603      	mov	r3, r0
 800d27c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d27e:	7dbb      	ldrb	r3, [r7, #22]
}
 800d280:	4618      	mov	r0, r3
 800d282:	3718      	adds	r7, #24
 800d284:	46bd      	mov	sp, r7
 800d286:	bd80      	pop	{r7, pc}

0800d288 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d288:	b580      	push	{r7, lr}
 800d28a:	b086      	sub	sp, #24
 800d28c:	af00      	add	r7, sp, #0
 800d28e:	60f8      	str	r0, [r7, #12]
 800d290:	607a      	str	r2, [r7, #4]
 800d292:	603b      	str	r3, [r7, #0]
 800d294:	460b      	mov	r3, r1
 800d296:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d298:	2300      	movs	r3, #0
 800d29a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d29c:	2300      	movs	r3, #0
 800d29e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d2a0:	68fb      	ldr	r3, [r7, #12]
 800d2a2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800d2a6:	7af9      	ldrb	r1, [r7, #11]
 800d2a8:	683b      	ldr	r3, [r7, #0]
 800d2aa:	687a      	ldr	r2, [r7, #4]
 800d2ac:	f7f7 fb88 	bl	80049c0 <HAL_PCD_EP_Receive>
 800d2b0:	4603      	mov	r3, r0
 800d2b2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d2b4:	7dfb      	ldrb	r3, [r7, #23]
 800d2b6:	4618      	mov	r0, r3
 800d2b8:	f000 f832 	bl	800d320 <USBD_Get_USB_Status>
 800d2bc:	4603      	mov	r3, r0
 800d2be:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d2c0:	7dbb      	ldrb	r3, [r7, #22]
}
 800d2c2:	4618      	mov	r0, r3
 800d2c4:	3718      	adds	r7, #24
 800d2c6:	46bd      	mov	sp, r7
 800d2c8:	bd80      	pop	{r7, pc}

0800d2ca <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d2ca:	b580      	push	{r7, lr}
 800d2cc:	b082      	sub	sp, #8
 800d2ce:	af00      	add	r7, sp, #0
 800d2d0:	6078      	str	r0, [r7, #4]
 800d2d2:	460b      	mov	r3, r1
 800d2d4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d2dc:	78fa      	ldrb	r2, [r7, #3]
 800d2de:	4611      	mov	r1, r2
 800d2e0:	4618      	mov	r0, r3
 800d2e2:	f7f7 fba8 	bl	8004a36 <HAL_PCD_EP_GetRxCount>
 800d2e6:	4603      	mov	r3, r0
}
 800d2e8:	4618      	mov	r0, r3
 800d2ea:	3708      	adds	r7, #8
 800d2ec:	46bd      	mov	sp, r7
 800d2ee:	bd80      	pop	{r7, pc}

0800d2f0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d2f0:	b480      	push	{r7}
 800d2f2:	b083      	sub	sp, #12
 800d2f4:	af00      	add	r7, sp, #0
 800d2f6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d2f8:	4b03      	ldr	r3, [pc, #12]	; (800d308 <USBD_static_malloc+0x18>)
}
 800d2fa:	4618      	mov	r0, r3
 800d2fc:	370c      	adds	r7, #12
 800d2fe:	46bd      	mov	sp, r7
 800d300:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d304:	4770      	bx	lr
 800d306:	bf00      	nop
 800d308:	20011048 	.word	0x20011048

0800d30c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d30c:	b480      	push	{r7}
 800d30e:	b083      	sub	sp, #12
 800d310:	af00      	add	r7, sp, #0
 800d312:	6078      	str	r0, [r7, #4]

}
 800d314:	bf00      	nop
 800d316:	370c      	adds	r7, #12
 800d318:	46bd      	mov	sp, r7
 800d31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d31e:	4770      	bx	lr

0800d320 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d320:	b480      	push	{r7}
 800d322:	b085      	sub	sp, #20
 800d324:	af00      	add	r7, sp, #0
 800d326:	4603      	mov	r3, r0
 800d328:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d32a:	2300      	movs	r3, #0
 800d32c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d32e:	79fb      	ldrb	r3, [r7, #7]
 800d330:	2b03      	cmp	r3, #3
 800d332:	d817      	bhi.n	800d364 <USBD_Get_USB_Status+0x44>
 800d334:	a201      	add	r2, pc, #4	; (adr r2, 800d33c <USBD_Get_USB_Status+0x1c>)
 800d336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d33a:	bf00      	nop
 800d33c:	0800d34d 	.word	0x0800d34d
 800d340:	0800d353 	.word	0x0800d353
 800d344:	0800d359 	.word	0x0800d359
 800d348:	0800d35f 	.word	0x0800d35f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d34c:	2300      	movs	r3, #0
 800d34e:	73fb      	strb	r3, [r7, #15]
    break;
 800d350:	e00b      	b.n	800d36a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d352:	2303      	movs	r3, #3
 800d354:	73fb      	strb	r3, [r7, #15]
    break;
 800d356:	e008      	b.n	800d36a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d358:	2301      	movs	r3, #1
 800d35a:	73fb      	strb	r3, [r7, #15]
    break;
 800d35c:	e005      	b.n	800d36a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d35e:	2303      	movs	r3, #3
 800d360:	73fb      	strb	r3, [r7, #15]
    break;
 800d362:	e002      	b.n	800d36a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d364:	2303      	movs	r3, #3
 800d366:	73fb      	strb	r3, [r7, #15]
    break;
 800d368:	bf00      	nop
  }
  return usb_status;
 800d36a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d36c:	4618      	mov	r0, r3
 800d36e:	3714      	adds	r7, #20
 800d370:	46bd      	mov	sp, r7
 800d372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d376:	4770      	bx	lr

0800d378 <toggle_led_green>:
#include "blinky_task.h"

int32_t toggle_led_green(void *argc) {
 800d378:	b580      	push	{r7, lr}
 800d37a:	b082      	sub	sp, #8
 800d37c:	af00      	add	r7, sp, #0
 800d37e:	6078      	str	r0, [r7, #4]
  HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 800d380:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800d384:	4803      	ldr	r0, [pc, #12]	; (800d394 <toggle_led_green+0x1c>)
 800d386:	f7f6 fc46 	bl	8003c16 <HAL_GPIO_TogglePin>
  return 0;
 800d38a:	2300      	movs	r3, #0
}
 800d38c:	4618      	mov	r0, r3
 800d38e:	3708      	adds	r7, #8
 800d390:	46bd      	mov	sp, r7
 800d392:	bd80      	pop	{r7, pc}
 800d394:	40021400 	.word	0x40021400

0800d398 <blinky_task>:

void blinky_task(void const *argument) {
 800d398:	b580      	push	{r7, lr}
 800d39a:	b084      	sub	sp, #16
 800d39c:	af00      	add	r7, sp, #0
 800d39e:	6078      	str	r0, [r7, #4]
  uint32_t t = osKernelSysTick();
 800d3a0:	f7fe f827 	bl	800b3f2 <osKernelSysTick>
 800d3a4:	4603      	mov	r3, r0
 800d3a6:	60bb      	str	r3, [r7, #8]
  uint32_t period = 100;
 800d3a8:	2364      	movs	r3, #100	; 0x64
 800d3aa:	60fb      	str	r3, [r7, #12]

  soft_timer_register(toggle_led_green, NULL, 1000);
 800d3ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d3b0:	2100      	movs	r1, #0
 800d3b2:	482a      	ldr	r0, [pc, #168]	; (800d45c <blinky_task+0xc4>)
 800d3b4:	f000 fcde 	bl	800dd74 <soft_timer_register>

  for (;;) {
    HAL_GPIO_TogglePin(LED_A_GPIO_Port, LED_A_Pin);
 800d3b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 800d3bc:	4828      	ldr	r0, [pc, #160]	; (800d460 <blinky_task+0xc8>)
 800d3be:	f7f6 fc2a 	bl	8003c16 <HAL_GPIO_TogglePin>
    osDelayUntil(&t, period);
 800d3c2:	f107 0308 	add.w	r3, r7, #8
 800d3c6:	68f9      	ldr	r1, [r7, #12]
 800d3c8:	4618      	mov	r0, r3
 800d3ca:	f7fe f85d 	bl	800b488 <osDelayUntil>

    HAL_GPIO_TogglePin(LED_B_GPIO_Port, LED_B_Pin);
 800d3ce:	2180      	movs	r1, #128	; 0x80
 800d3d0:	4823      	ldr	r0, [pc, #140]	; (800d460 <blinky_task+0xc8>)
 800d3d2:	f7f6 fc20 	bl	8003c16 <HAL_GPIO_TogglePin>
    osDelayUntil(&t, period);
 800d3d6:	f107 0308 	add.w	r3, r7, #8
 800d3da:	68f9      	ldr	r1, [r7, #12]
 800d3dc:	4618      	mov	r0, r3
 800d3de:	f7fe f853 	bl	800b488 <osDelayUntil>

    HAL_GPIO_TogglePin(LED_C_GPIO_Port, LED_C_Pin);
 800d3e2:	2140      	movs	r1, #64	; 0x40
 800d3e4:	481e      	ldr	r0, [pc, #120]	; (800d460 <blinky_task+0xc8>)
 800d3e6:	f7f6 fc16 	bl	8003c16 <HAL_GPIO_TogglePin>
    osDelayUntil(&t, period);
 800d3ea:	f107 0308 	add.w	r3, r7, #8
 800d3ee:	68f9      	ldr	r1, [r7, #12]
 800d3f0:	4618      	mov	r0, r3
 800d3f2:	f7fe f849 	bl	800b488 <osDelayUntil>

    HAL_GPIO_TogglePin(LED_D_GPIO_Port, LED_D_Pin);
 800d3f6:	2120      	movs	r1, #32
 800d3f8:	4819      	ldr	r0, [pc, #100]	; (800d460 <blinky_task+0xc8>)
 800d3fa:	f7f6 fc0c 	bl	8003c16 <HAL_GPIO_TogglePin>
    osDelayUntil(&t, period);
 800d3fe:	f107 0308 	add.w	r3, r7, #8
 800d402:	68f9      	ldr	r1, [r7, #12]
 800d404:	4618      	mov	r0, r3
 800d406:	f7fe f83f 	bl	800b488 <osDelayUntil>

    HAL_GPIO_TogglePin(LED_E_GPIO_Port, LED_E_Pin);
 800d40a:	2110      	movs	r1, #16
 800d40c:	4814      	ldr	r0, [pc, #80]	; (800d460 <blinky_task+0xc8>)
 800d40e:	f7f6 fc02 	bl	8003c16 <HAL_GPIO_TogglePin>
    osDelayUntil(&t, period);
 800d412:	f107 0308 	add.w	r3, r7, #8
 800d416:	68f9      	ldr	r1, [r7, #12]
 800d418:	4618      	mov	r0, r3
 800d41a:	f7fe f835 	bl	800b488 <osDelayUntil>

    HAL_GPIO_TogglePin(LED_F_GPIO_Port, LED_F_Pin);
 800d41e:	2108      	movs	r1, #8
 800d420:	480f      	ldr	r0, [pc, #60]	; (800d460 <blinky_task+0xc8>)
 800d422:	f7f6 fbf8 	bl	8003c16 <HAL_GPIO_TogglePin>
    osDelayUntil(&t, period);
 800d426:	f107 0308 	add.w	r3, r7, #8
 800d42a:	68f9      	ldr	r1, [r7, #12]
 800d42c:	4618      	mov	r0, r3
 800d42e:	f7fe f82b 	bl	800b488 <osDelayUntil>

    HAL_GPIO_TogglePin(LED_G_GPIO_Port, LED_G_Pin);
 800d432:	2104      	movs	r1, #4
 800d434:	480a      	ldr	r0, [pc, #40]	; (800d460 <blinky_task+0xc8>)
 800d436:	f7f6 fbee 	bl	8003c16 <HAL_GPIO_TogglePin>
    osDelayUntil(&t, period);
 800d43a:	f107 0308 	add.w	r3, r7, #8
 800d43e:	68f9      	ldr	r1, [r7, #12]
 800d440:	4618      	mov	r0, r3
 800d442:	f7fe f821 	bl	800b488 <osDelayUntil>

    HAL_GPIO_TogglePin(LED_H_GPIO_Port, LED_H_Pin);
 800d446:	2102      	movs	r1, #2
 800d448:	4805      	ldr	r0, [pc, #20]	; (800d460 <blinky_task+0xc8>)
 800d44a:	f7f6 fbe4 	bl	8003c16 <HAL_GPIO_TogglePin>
    osDelayUntil(&t, period);
 800d44e:	f107 0308 	add.w	r3, r7, #8
 800d452:	68f9      	ldr	r1, [r7, #12]
 800d454:	4618      	mov	r0, r3
 800d456:	f7fe f817 	bl	800b488 <osDelayUntil>
    HAL_GPIO_TogglePin(LED_A_GPIO_Port, LED_A_Pin);
 800d45a:	e7ad      	b.n	800d3b8 <blinky_task+0x20>
 800d45c:	0800d379 	.word	0x0800d379
 800d460:	40021800 	.word	0x40021800

0800d464 <toggle_led_red>:
// source: init.c
struct chassis chassis;
// source: infantry_cmd_task
struct chassis_info cmd_chassis_info;

int32_t toggle_led_red(void *argc) {
 800d464:	b580      	push	{r7, lr}
 800d466:	b082      	sub	sp, #8
 800d468:	af00      	add	r7, sp, #0
 800d46a:	6078      	str	r0, [r7, #4]
  HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 800d46c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800d470:	4803      	ldr	r0, [pc, #12]	; (800d480 <toggle_led_red+0x1c>)
 800d472:	f7f6 fbd0 	bl	8003c16 <HAL_GPIO_TogglePin>
  return 0;
 800d476:	2300      	movs	r3, #0
}
 800d478:	4618      	mov	r0, r3
 800d47a:	3708      	adds	r7, #8
 800d47c:	46bd      	mov	sp, r7
 800d47e:	bd80      	pop	{r7, pc}
 800d480:	40021000 	.word	0x40021000

0800d484 <motor_can1_output_1ms>:

// soft timer callback
// source: board.c
int32_t motor_can1_output_1ms(void *argc) {
 800d484:	b580      	push	{r7, lr}
 800d486:	b082      	sub	sp, #8
 800d488:	af00      	add	r7, sp, #0
 800d48a:	6078      	str	r0, [r7, #4]
  motor_device_can_output(DEVICE_CAN1); // from motor.c
 800d48c:	2000      	movs	r0, #0
 800d48e:	f003 f94d 	bl	801072c <motor_device_can_output>
  return 0;
 800d492:	2300      	movs	r3, #0
}
 800d494:	4618      	mov	r0, r3
 800d496:	3708      	adds	r7, #8
 800d498:	46bd      	mov	sp, r7
 800d49a:	bd80      	pop	{r7, pc}

0800d49c <motor_canstd_send>:

/// sends the can message
int32_t motor_canstd_send(enum device_can can, struct can_msg msg) {
 800d49c:	b084      	sub	sp, #16
 800d49e:	b590      	push	{r4, r7, lr}
 800d4a0:	b083      	sub	sp, #12
 800d4a2:	af00      	add	r7, sp, #0
 800d4a4:	4604      	mov	r4, r0
 800d4a6:	f107 001c 	add.w	r0, r7, #28
 800d4aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800d4ae:	4623      	mov	r3, r4
 800d4b0:	71fb      	strb	r3, [r7, #7]
  can_msg_bytes_send(&hcan1, msg.data, 8, msg.id);
 800d4b2:	69fb      	ldr	r3, [r7, #28]
 800d4b4:	f3c3 031c 	ubfx	r3, r3, #0, #29
 800d4b8:	b29a      	uxth	r2, r3
 800d4ba:	f107 031c 	add.w	r3, r7, #28
 800d4be:	f103 0108 	add.w	r1, r3, #8
 800d4c2:	4613      	mov	r3, r2
 800d4c4:	2208      	movs	r2, #8
 800d4c6:	4805      	ldr	r0, [pc, #20]	; (800d4dc <motor_canstd_send+0x40>)
 800d4c8:	f001 f85e 	bl	800e588 <can_msg_bytes_send>
  return 0;
 800d4cc:	2300      	movs	r3, #0
}
 800d4ce:	4618      	mov	r0, r3
 800d4d0:	370c      	adds	r7, #12
 800d4d2:	46bd      	mov	sp, r7
 800d4d4:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800d4d8:	b004      	add	sp, #16
 800d4da:	4770      	bx	lr
 800d4dc:	200001c4 	.word	0x200001c4

0800d4e0 <can1_motor_msg_rec>:

/// receives the can message
int32_t can1_motor_msg_rec(CAN_RxHeaderTypeDef *header, uint8_t *data) {
 800d4e0:	b580      	push	{r7, lr}
 800d4e2:	b082      	sub	sp, #8
 800d4e4:	af00      	add	r7, sp, #0
 800d4e6:	6078      	str	r0, [r7, #4]
 800d4e8:	6039      	str	r1, [r7, #0]
  motor_device_data_update(DEVICE_CAN1, header->StdId, data); // from motor.c
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	b29b      	uxth	r3, r3
 800d4f0:	683a      	ldr	r2, [r7, #0]
 800d4f2:	4619      	mov	r1, r3
 800d4f4:	2000      	movs	r0, #0
 800d4f6:	f003 fa0f 	bl	8010918 <motor_device_data_update>
  return 0;
 800d4fa:	2300      	movs	r3, #0
}
 800d4fc:	4618      	mov	r0, r3
 800d4fe:	3708      	adds	r7, #8
 800d500:	46bd      	mov	sp, r7
 800d502:	bd80      	pop	{r7, pc}

0800d504 <chassis_task_init>:

void chassis_task_init(void) {
 800d504:	b580      	push	{r7, lr}
 800d506:	af00      	add	r7, sp, #0
  // Enable the motors
  HAL_GPIO_WritePin(POWER1_CTRL_GPIO_Port, POWER1_CTRL_Pin, SET);
 800d508:	2201      	movs	r2, #1
 800d50a:	2104      	movs	r1, #4
 800d50c:	4818      	ldr	r0, [pc, #96]	; (800d570 <chassis_task_init+0x6c>)
 800d50e:	f7f6 fb69 	bl	8003be4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(POWER2_CTRL_GPIO_Port, POWER2_CTRL_Pin, SET);
 800d512:	2201      	movs	r2, #1
 800d514:	2108      	movs	r1, #8
 800d516:	4816      	ldr	r0, [pc, #88]	; (800d570 <chassis_task_init+0x6c>)
 800d518:	f7f6 fb64 	bl	8003be4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(POWER3_CTRL_GPIO_Port, POWER3_CTRL_Pin, SET);
 800d51c:	2201      	movs	r2, #1
 800d51e:	2110      	movs	r1, #16
 800d520:	4813      	ldr	r0, [pc, #76]	; (800d570 <chassis_task_init+0x6c>)
 800d522:	f7f6 fb5f 	bl	8003be4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(POWER4_CTRL_GPIO_Port, POWER4_CTRL_Pin, SET);
 800d526:	2201      	movs	r2, #1
 800d528:	2120      	movs	r1, #32
 800d52a:	4811      	ldr	r0, [pc, #68]	; (800d570 <chassis_task_init+0x6c>)
 800d52c:	f7f6 fb5a 	bl	8003be4 <HAL_GPIO_WritePin>

  // board.c -> board_config()
  soft_timer_init();
 800d530:	f004 f840 	bl	80115b4 <soft_timer_init>
  can_manage_init();
 800d534:	f000 ffc2 	bl	800e4bc <can_manage_init>
  soft_timer_register(motor_can1_output_1ms, NULL, 1);
 800d538:	2201      	movs	r2, #1
 800d53a:	2100      	movs	r1, #0
 800d53c:	480d      	ldr	r0, [pc, #52]	; (800d574 <chassis_task_init+0x70>)
 800d53e:	f000 fc19 	bl	800dd74 <soft_timer_register>
  soft_timer_register(toggle_led_red, NULL, 1000);
 800d542:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d546:	2100      	movs	r1, #0
 800d548:	480b      	ldr	r0, [pc, #44]	; (800d578 <chassis_task_init+0x74>)
 800d54a:	f000 fc13 	bl	800dd74 <soft_timer_register>

  motor_device_can_send_register(motor_canstd_send); // from motor.c
 800d54e:	480b      	ldr	r0, [pc, #44]	; (800d57c <chassis_task_init+0x78>)
 800d550:	f003 f868 	bl	8010624 <motor_device_can_send_register>
  can_fifo0_rx_callback_register(&can1_manage,
 800d554:	490a      	ldr	r1, [pc, #40]	; (800d580 <chassis_task_init+0x7c>)
 800d556:	480b      	ldr	r0, [pc, #44]	; (800d584 <chassis_task_init+0x80>)
 800d558:	f001 f8c2 	bl	800e6e0 <can_fifo0_rx_callback_register>
                                 can1_motor_msg_rec); // from drv_can.c

  // init.c
  chassis_pid_register(&chassis, "chassis", DEVICE_CAN1);
 800d55c:	2200      	movs	r2, #0
 800d55e:	490a      	ldr	r1, [pc, #40]	; (800d588 <chassis_task_init+0x84>)
 800d560:	480a      	ldr	r0, [pc, #40]	; (800d58c <chassis_task_init+0x88>)
 800d562:	f003 fab9 	bl	8010ad8 <chassis_pid_register>
  chassis_disable(&chassis);
 800d566:	4809      	ldr	r0, [pc, #36]	; (800d58c <chassis_task_init+0x88>)
 800d568:	f003 fd3e 	bl	8010fe8 <chassis_disable>
}
 800d56c:	bf00      	nop
 800d56e:	bd80      	pop	{r7, pc}
 800d570:	40021c00 	.word	0x40021c00
 800d574:	0800d485 	.word	0x0800d485
 800d578:	0800d465 	.word	0x0800d465
 800d57c:	0800d49d 	.word	0x0800d49d
 800d580:	0800d4e1 	.word	0x0800d4e1
 800d584:	20011868 	.word	0x20011868
 800d588:	08013790 	.word	0x08013790
 800d58c:	20011268 	.word	0x20011268

0800d590 <chassis_task>:

// source: chassis_task
void chassis_task(void const *argument) {
 800d590:	b580      	push	{r7, lr}
 800d592:	b094      	sub	sp, #80	; 0x50
 800d594:	af00      	add	r7, sp, #0
 800d596:	6078      	str	r0, [r7, #4]
  chassis_task_init();
 800d598:	f7ff ffb4 	bl	800d504 <chassis_task_init>
  uint32_t period = osKernelSysTick();
 800d59c:	f7fd ff29 	bl	800b3f2 <osKernelSysTick>
 800d5a0:	4603      	mov	r3, r0
 800d5a2:	60fb      	str	r3, [r7, #12]
  chassis_t pchassis = NULL;
 800d5a4:	2300      	movs	r3, #0
 800d5a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  pchassis = chassis_find("chassis");
 800d5a8:	48b4      	ldr	r0, [pc, #720]	; (800d87c <chassis_task+0x2ec>)
 800d5aa:	f003 fcea 	bl	8010f82 <chassis_find>
 800d5ae:	64f8      	str	r0, [r7, #76]	; 0x4c

  chassis_enable(pchassis);
 800d5b0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800d5b2:	f003 fcf4 	bl	8010f9e <chassis_enable>

  for (;;) {
    float linear_x = cmd_twist.linear.x * 1000.0f;
 800d5b6:	4bb2      	ldr	r3, [pc, #712]	; (800d880 <chassis_task+0x2f0>)
 800d5b8:	edd3 7a00 	vldr	s15, [r3]
 800d5bc:	ed9f 7ab1 	vldr	s14, [pc, #708]	; 800d884 <chassis_task+0x2f4>
 800d5c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d5c4:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    float angular_z = cmd_twist.angular.z * 1000.0f;
 800d5c8:	4bad      	ldr	r3, [pc, #692]	; (800d880 <chassis_task+0x2f0>)
 800d5ca:	edd3 7a05 	vldr	s15, [r3, #20]
 800d5ce:	ed9f 7aad 	vldr	s14, [pc, #692]	; 800d884 <chassis_task+0x2f4>
 800d5d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d5d6:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44

    chassis_set_speed(pchassis, linear_x, angular_z);
 800d5da:	edd7 0a11 	vldr	s1, [r7, #68]	; 0x44
 800d5de:	ed97 0a12 	vldr	s0, [r7, #72]	; 0x48
 800d5e2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800d5e4:	f003 fcb2 	bl	8010f4c <chassis_set_speed>

    chassis_execute(pchassis);
 800d5e8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800d5ea:	f003 fbef 	bl	8010dcc <chassis_execute>
    robot_odom.point.x = pchassis->skid_steer.position.position_x_mm / 1000.0f;
 800d5ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d5f0:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 800d5f4:	eddf 6aa3 	vldr	s13, [pc, #652]	; 800d884 <chassis_task+0x2f4>
 800d5f8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800d5fc:	4ba2      	ldr	r3, [pc, #648]	; (800d888 <chassis_task+0x2f8>)
 800d5fe:	edc3 7a00 	vstr	s15, [r3]
    robot_odom.point.y = pchassis->skid_steer.position.position_y_mm / 1000.0f;
 800d602:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d604:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 800d608:	eddf 6a9e 	vldr	s13, [pc, #632]	; 800d884 <chassis_task+0x2f4>
 800d60c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800d610:	4b9d      	ldr	r3, [pc, #628]	; (800d888 <chassis_task+0x2f8>)
 800d612:	edc3 7a01 	vstr	s15, [r3, #4]

    float yaw = pchassis->skid_steer.position.angle_deg / RADIAN_COEF;
 800d616:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d618:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 800d61c:	eddf 6a9b 	vldr	s13, [pc, #620]	; 800d88c <chassis_task+0x2fc>
 800d620:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800d624:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    float pitch = 0.0;
 800d628:	f04f 0300 	mov.w	r3, #0
 800d62c:	63fb      	str	r3, [r7, #60]	; 0x3c
    float roll = 0.0;
 800d62e:	f04f 0300 	mov.w	r3, #0
 800d632:	63bb      	str	r3, [r7, #56]	; 0x38
    float cy = cos(yaw * 0.5);
 800d634:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800d636:	f7f2 ff47 	bl	80004c8 <__aeabi_f2d>
 800d63a:	f04f 0200 	mov.w	r2, #0
 800d63e:	4b94      	ldr	r3, [pc, #592]	; (800d890 <chassis_task+0x300>)
 800d640:	f7f2 ff9a 	bl	8000578 <__aeabi_dmul>
 800d644:	4602      	mov	r2, r0
 800d646:	460b      	mov	r3, r1
 800d648:	ec43 2b17 	vmov	d7, r2, r3
 800d64c:	eeb0 0a47 	vmov.f32	s0, s14
 800d650:	eef0 0a67 	vmov.f32	s1, s15
 800d654:	f004 fedc 	bl	8012410 <cos>
 800d658:	ec53 2b10 	vmov	r2, r3, d0
 800d65c:	4610      	mov	r0, r2
 800d65e:	4619      	mov	r1, r3
 800d660:	f7f3 fa62 	bl	8000b28 <__aeabi_d2f>
 800d664:	4603      	mov	r3, r0
 800d666:	637b      	str	r3, [r7, #52]	; 0x34
    float sy = sin(yaw * 0.5);
 800d668:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800d66a:	f7f2 ff2d 	bl	80004c8 <__aeabi_f2d>
 800d66e:	f04f 0200 	mov.w	r2, #0
 800d672:	4b87      	ldr	r3, [pc, #540]	; (800d890 <chassis_task+0x300>)
 800d674:	f7f2 ff80 	bl	8000578 <__aeabi_dmul>
 800d678:	4602      	mov	r2, r0
 800d67a:	460b      	mov	r3, r1
 800d67c:	ec43 2b17 	vmov	d7, r2, r3
 800d680:	eeb0 0a47 	vmov.f32	s0, s14
 800d684:	eef0 0a67 	vmov.f32	s1, s15
 800d688:	f004 ff22 	bl	80124d0 <sin>
 800d68c:	ec53 2b10 	vmov	r2, r3, d0
 800d690:	4610      	mov	r0, r2
 800d692:	4619      	mov	r1, r3
 800d694:	f7f3 fa48 	bl	8000b28 <__aeabi_d2f>
 800d698:	4603      	mov	r3, r0
 800d69a:	633b      	str	r3, [r7, #48]	; 0x30
    float cp = cos(pitch * 0.5);
 800d69c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800d69e:	f7f2 ff13 	bl	80004c8 <__aeabi_f2d>
 800d6a2:	f04f 0200 	mov.w	r2, #0
 800d6a6:	4b7a      	ldr	r3, [pc, #488]	; (800d890 <chassis_task+0x300>)
 800d6a8:	f7f2 ff66 	bl	8000578 <__aeabi_dmul>
 800d6ac:	4602      	mov	r2, r0
 800d6ae:	460b      	mov	r3, r1
 800d6b0:	ec43 2b17 	vmov	d7, r2, r3
 800d6b4:	eeb0 0a47 	vmov.f32	s0, s14
 800d6b8:	eef0 0a67 	vmov.f32	s1, s15
 800d6bc:	f004 fea8 	bl	8012410 <cos>
 800d6c0:	ec53 2b10 	vmov	r2, r3, d0
 800d6c4:	4610      	mov	r0, r2
 800d6c6:	4619      	mov	r1, r3
 800d6c8:	f7f3 fa2e 	bl	8000b28 <__aeabi_d2f>
 800d6cc:	4603      	mov	r3, r0
 800d6ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    float sp = sin(pitch * 0.5);
 800d6d0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800d6d2:	f7f2 fef9 	bl	80004c8 <__aeabi_f2d>
 800d6d6:	f04f 0200 	mov.w	r2, #0
 800d6da:	4b6d      	ldr	r3, [pc, #436]	; (800d890 <chassis_task+0x300>)
 800d6dc:	f7f2 ff4c 	bl	8000578 <__aeabi_dmul>
 800d6e0:	4602      	mov	r2, r0
 800d6e2:	460b      	mov	r3, r1
 800d6e4:	ec43 2b17 	vmov	d7, r2, r3
 800d6e8:	eeb0 0a47 	vmov.f32	s0, s14
 800d6ec:	eef0 0a67 	vmov.f32	s1, s15
 800d6f0:	f004 feee 	bl	80124d0 <sin>
 800d6f4:	ec53 2b10 	vmov	r2, r3, d0
 800d6f8:	4610      	mov	r0, r2
 800d6fa:	4619      	mov	r1, r3
 800d6fc:	f7f3 fa14 	bl	8000b28 <__aeabi_d2f>
 800d700:	4603      	mov	r3, r0
 800d702:	62bb      	str	r3, [r7, #40]	; 0x28
    float cr = cos(roll * 0.5);
 800d704:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d706:	f7f2 fedf 	bl	80004c8 <__aeabi_f2d>
 800d70a:	f04f 0200 	mov.w	r2, #0
 800d70e:	4b60      	ldr	r3, [pc, #384]	; (800d890 <chassis_task+0x300>)
 800d710:	f7f2 ff32 	bl	8000578 <__aeabi_dmul>
 800d714:	4602      	mov	r2, r0
 800d716:	460b      	mov	r3, r1
 800d718:	ec43 2b17 	vmov	d7, r2, r3
 800d71c:	eeb0 0a47 	vmov.f32	s0, s14
 800d720:	eef0 0a67 	vmov.f32	s1, s15
 800d724:	f004 fe74 	bl	8012410 <cos>
 800d728:	ec53 2b10 	vmov	r2, r3, d0
 800d72c:	4610      	mov	r0, r2
 800d72e:	4619      	mov	r1, r3
 800d730:	f7f3 f9fa 	bl	8000b28 <__aeabi_d2f>
 800d734:	4603      	mov	r3, r0
 800d736:	627b      	str	r3, [r7, #36]	; 0x24
    float sr = sin(roll * 0.5);
 800d738:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d73a:	f7f2 fec5 	bl	80004c8 <__aeabi_f2d>
 800d73e:	f04f 0200 	mov.w	r2, #0
 800d742:	4b53      	ldr	r3, [pc, #332]	; (800d890 <chassis_task+0x300>)
 800d744:	f7f2 ff18 	bl	8000578 <__aeabi_dmul>
 800d748:	4602      	mov	r2, r0
 800d74a:	460b      	mov	r3, r1
 800d74c:	ec43 2b17 	vmov	d7, r2, r3
 800d750:	eeb0 0a47 	vmov.f32	s0, s14
 800d754:	eef0 0a67 	vmov.f32	s1, s15
 800d758:	f004 feba 	bl	80124d0 <sin>
 800d75c:	ec53 2b10 	vmov	r2, r3, d0
 800d760:	4610      	mov	r0, r2
 800d762:	4619      	mov	r1, r3
 800d764:	f7f3 f9e0 	bl	8000b28 <__aeabi_d2f>
 800d768:	4603      	mov	r3, r0
 800d76a:	623b      	str	r3, [r7, #32]
    float qx = sr * cp * cy - cr * sp * sy;
 800d76c:	ed97 7a08 	vldr	s14, [r7, #32]
 800d770:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800d774:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d778:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800d77c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d780:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800d784:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d788:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800d78c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800d790:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d794:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d798:	edc7 7a07 	vstr	s15, [r7, #28]
    float qy = cr * sp * cy + sr * cp * sy;
 800d79c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800d7a0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d7a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d7a8:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800d7ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d7b0:	edd7 6a08 	vldr	s13, [r7, #32]
 800d7b4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800d7b8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800d7bc:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800d7c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d7c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d7c8:	edc7 7a06 	vstr	s15, [r7, #24]
    float qz = cr * cp * sy - sr * sp * cy;
 800d7cc:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800d7d0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800d7d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d7d8:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800d7dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d7e0:	edd7 6a08 	vldr	s13, [r7, #32]
 800d7e4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d7e8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800d7ec:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800d7f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d7f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d7f8:	edc7 7a05 	vstr	s15, [r7, #20]
    float qw = cr * cp * cy + sr * sp * sy;
 800d7fc:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800d800:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800d804:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d808:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800d80c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d810:	edd7 6a08 	vldr	s13, [r7, #32]
 800d814:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d818:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800d81c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800d820:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d824:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d828:	edc7 7a04 	vstr	s15, [r7, #16]
    robot_odom.quaternion.x = qx;
 800d82c:	4a16      	ldr	r2, [pc, #88]	; (800d888 <chassis_task+0x2f8>)
 800d82e:	69fb      	ldr	r3, [r7, #28]
 800d830:	60d3      	str	r3, [r2, #12]
    robot_odom.quaternion.y = qy;
 800d832:	4a15      	ldr	r2, [pc, #84]	; (800d888 <chassis_task+0x2f8>)
 800d834:	69bb      	ldr	r3, [r7, #24]
 800d836:	6113      	str	r3, [r2, #16]
    robot_odom.quaternion.z = qz;
 800d838:	4a13      	ldr	r2, [pc, #76]	; (800d888 <chassis_task+0x2f8>)
 800d83a:	697b      	ldr	r3, [r7, #20]
 800d83c:	6153      	str	r3, [r2, #20]
    robot_odom.quaternion.w = qw;
 800d83e:	4a12      	ldr	r2, [pc, #72]	; (800d888 <chassis_task+0x2f8>)
 800d840:	693b      	ldr	r3, [r7, #16]
 800d842:	6193      	str	r3, [r2, #24]

    robot_odom.linear.x = pchassis->skid_steer.position.v_x_mm / 1000.0f;
 800d844:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d846:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 800d84a:	eddf 6a0e 	vldr	s13, [pc, #56]	; 800d884 <chassis_task+0x2f4>
 800d84e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800d852:	4b0d      	ldr	r3, [pc, #52]	; (800d888 <chassis_task+0x2f8>)
 800d854:	edc3 7a07 	vstr	s15, [r3, #28]
    robot_odom.angular.z = pchassis->skid_steer.position.rate_deg / RADIAN_COEF;
 800d858:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d85a:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 800d85e:	eddf 6a0b 	vldr	s13, [pc, #44]	; 800d88c <chassis_task+0x2fc>
 800d862:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800d866:	4b08      	ldr	r3, [pc, #32]	; (800d888 <chassis_task+0x2f8>)
 800d868:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30

    osDelayUntil(&period, 1);
 800d86c:	f107 030c 	add.w	r3, r7, #12
 800d870:	2101      	movs	r1, #1
 800d872:	4618      	mov	r0, r3
 800d874:	f7fd fe08 	bl	800b488 <osDelayUntil>
  for (;;) {
 800d878:	e69d      	b.n	800d5b6 <chassis_task+0x26>
 800d87a:	bf00      	nop
 800d87c:	08013790 	.word	0x08013790
 800d880:	200116b8 	.word	0x200116b8
 800d884:	447a0000 	.word	0x447a0000
 800d888:	200116d0 	.word	0x200116d0
 800d88c:	42653333 	.word	0x42653333
 800d890:	3fe00000 	.word	0x3fe00000

0800d894 <imu_update>:

#ifndef RADIAN_COEF
#define RADIAN_COEF 57.3f
#endif

int32_t imu_update() {
 800d894:	b580      	push	{r7, lr}
 800d896:	b09a      	sub	sp, #104	; 0x68
 800d898:	af00      	add	r7, sp, #0
  struct ahrs_sensor mpu_sensor;
  struct attitude mahony_atti;
  mpu_get_data(&mpu_sensor);
 800d89a:	f107 0310 	add.w	r3, r7, #16
 800d89e:	4618      	mov	r0, r3
 800d8a0:	f001 fa02 	bl	800eca8 <mpu_get_data>
  mahony_ahrs_updateIMU(&mpu_sensor, &mahony_atti);
 800d8a4:	1d3a      	adds	r2, r7, #4
 800d8a6:	f107 0310 	add.w	r3, r7, #16
 800d8aa:	4611      	mov	r1, r2
 800d8ac:	4618      	mov	r0, r3
 800d8ae:	f001 fd7f 	bl	800f3b0 <mahony_ahrs_updateIMU>

  // Convert euler angle to quaternion
  float roll = mahony_atti.roll / RADIAN_COEF;
 800d8b2:	ed97 7a01 	vldr	s14, [r7, #4]
 800d8b6:	eddf 6a9a 	vldr	s13, [pc, #616]	; 800db20 <imu_update+0x28c>
 800d8ba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800d8be:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
  float pitch = mahony_atti.pitch / RADIAN_COEF;
 800d8c2:	ed97 7a02 	vldr	s14, [r7, #8]
 800d8c6:	eddf 6a96 	vldr	s13, [pc, #600]	; 800db20 <imu_update+0x28c>
 800d8ca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800d8ce:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
  float yaw = mahony_atti.yaw / RADIAN_COEF;
 800d8d2:	ed97 7a03 	vldr	s14, [r7, #12]
 800d8d6:	eddf 6a92 	vldr	s13, [pc, #584]	; 800db20 <imu_update+0x28c>
 800d8da:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800d8de:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
  float cy = cos(yaw * 0.5);
 800d8e2:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800d8e4:	f7f2 fdf0 	bl	80004c8 <__aeabi_f2d>
 800d8e8:	f04f 0200 	mov.w	r2, #0
 800d8ec:	4b8d      	ldr	r3, [pc, #564]	; (800db24 <imu_update+0x290>)
 800d8ee:	f7f2 fe43 	bl	8000578 <__aeabi_dmul>
 800d8f2:	4602      	mov	r2, r0
 800d8f4:	460b      	mov	r3, r1
 800d8f6:	ec43 2b17 	vmov	d7, r2, r3
 800d8fa:	eeb0 0a47 	vmov.f32	s0, s14
 800d8fe:	eef0 0a67 	vmov.f32	s1, s15
 800d902:	f004 fd85 	bl	8012410 <cos>
 800d906:	ec53 2b10 	vmov	r2, r3, d0
 800d90a:	4610      	mov	r0, r2
 800d90c:	4619      	mov	r1, r3
 800d90e:	f7f3 f90b 	bl	8000b28 <__aeabi_d2f>
 800d912:	4603      	mov	r3, r0
 800d914:	65bb      	str	r3, [r7, #88]	; 0x58
  float sy = sin(yaw * 0.5);
 800d916:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800d918:	f7f2 fdd6 	bl	80004c8 <__aeabi_f2d>
 800d91c:	f04f 0200 	mov.w	r2, #0
 800d920:	4b80      	ldr	r3, [pc, #512]	; (800db24 <imu_update+0x290>)
 800d922:	f7f2 fe29 	bl	8000578 <__aeabi_dmul>
 800d926:	4602      	mov	r2, r0
 800d928:	460b      	mov	r3, r1
 800d92a:	ec43 2b17 	vmov	d7, r2, r3
 800d92e:	eeb0 0a47 	vmov.f32	s0, s14
 800d932:	eef0 0a67 	vmov.f32	s1, s15
 800d936:	f004 fdcb 	bl	80124d0 <sin>
 800d93a:	ec53 2b10 	vmov	r2, r3, d0
 800d93e:	4610      	mov	r0, r2
 800d940:	4619      	mov	r1, r3
 800d942:	f7f3 f8f1 	bl	8000b28 <__aeabi_d2f>
 800d946:	4603      	mov	r3, r0
 800d948:	657b      	str	r3, [r7, #84]	; 0x54
  float cp = cos(pitch * 0.5);
 800d94a:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800d94c:	f7f2 fdbc 	bl	80004c8 <__aeabi_f2d>
 800d950:	f04f 0200 	mov.w	r2, #0
 800d954:	4b73      	ldr	r3, [pc, #460]	; (800db24 <imu_update+0x290>)
 800d956:	f7f2 fe0f 	bl	8000578 <__aeabi_dmul>
 800d95a:	4602      	mov	r2, r0
 800d95c:	460b      	mov	r3, r1
 800d95e:	ec43 2b17 	vmov	d7, r2, r3
 800d962:	eeb0 0a47 	vmov.f32	s0, s14
 800d966:	eef0 0a67 	vmov.f32	s1, s15
 800d96a:	f004 fd51 	bl	8012410 <cos>
 800d96e:	ec53 2b10 	vmov	r2, r3, d0
 800d972:	4610      	mov	r0, r2
 800d974:	4619      	mov	r1, r3
 800d976:	f7f3 f8d7 	bl	8000b28 <__aeabi_d2f>
 800d97a:	4603      	mov	r3, r0
 800d97c:	653b      	str	r3, [r7, #80]	; 0x50
  float sp = sin(pitch * 0.5);
 800d97e:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800d980:	f7f2 fda2 	bl	80004c8 <__aeabi_f2d>
 800d984:	f04f 0200 	mov.w	r2, #0
 800d988:	4b66      	ldr	r3, [pc, #408]	; (800db24 <imu_update+0x290>)
 800d98a:	f7f2 fdf5 	bl	8000578 <__aeabi_dmul>
 800d98e:	4602      	mov	r2, r0
 800d990:	460b      	mov	r3, r1
 800d992:	ec43 2b17 	vmov	d7, r2, r3
 800d996:	eeb0 0a47 	vmov.f32	s0, s14
 800d99a:	eef0 0a67 	vmov.f32	s1, s15
 800d99e:	f004 fd97 	bl	80124d0 <sin>
 800d9a2:	ec53 2b10 	vmov	r2, r3, d0
 800d9a6:	4610      	mov	r0, r2
 800d9a8:	4619      	mov	r1, r3
 800d9aa:	f7f3 f8bd 	bl	8000b28 <__aeabi_d2f>
 800d9ae:	4603      	mov	r3, r0
 800d9b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  float cr = cos(roll * 0.5);
 800d9b2:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800d9b4:	f7f2 fd88 	bl	80004c8 <__aeabi_f2d>
 800d9b8:	f04f 0200 	mov.w	r2, #0
 800d9bc:	4b59      	ldr	r3, [pc, #356]	; (800db24 <imu_update+0x290>)
 800d9be:	f7f2 fddb 	bl	8000578 <__aeabi_dmul>
 800d9c2:	4602      	mov	r2, r0
 800d9c4:	460b      	mov	r3, r1
 800d9c6:	ec43 2b17 	vmov	d7, r2, r3
 800d9ca:	eeb0 0a47 	vmov.f32	s0, s14
 800d9ce:	eef0 0a67 	vmov.f32	s1, s15
 800d9d2:	f004 fd1d 	bl	8012410 <cos>
 800d9d6:	ec53 2b10 	vmov	r2, r3, d0
 800d9da:	4610      	mov	r0, r2
 800d9dc:	4619      	mov	r1, r3
 800d9de:	f7f3 f8a3 	bl	8000b28 <__aeabi_d2f>
 800d9e2:	4603      	mov	r3, r0
 800d9e4:	64bb      	str	r3, [r7, #72]	; 0x48
  float sr = sin(roll * 0.5);
 800d9e6:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800d9e8:	f7f2 fd6e 	bl	80004c8 <__aeabi_f2d>
 800d9ec:	f04f 0200 	mov.w	r2, #0
 800d9f0:	4b4c      	ldr	r3, [pc, #304]	; (800db24 <imu_update+0x290>)
 800d9f2:	f7f2 fdc1 	bl	8000578 <__aeabi_dmul>
 800d9f6:	4602      	mov	r2, r0
 800d9f8:	460b      	mov	r3, r1
 800d9fa:	ec43 2b17 	vmov	d7, r2, r3
 800d9fe:	eeb0 0a47 	vmov.f32	s0, s14
 800da02:	eef0 0a67 	vmov.f32	s1, s15
 800da06:	f004 fd63 	bl	80124d0 <sin>
 800da0a:	ec53 2b10 	vmov	r2, r3, d0
 800da0e:	4610      	mov	r0, r2
 800da10:	4619      	mov	r1, r3
 800da12:	f7f3 f889 	bl	8000b28 <__aeabi_d2f>
 800da16:	4603      	mov	r3, r0
 800da18:	647b      	str	r3, [r7, #68]	; 0x44
  float qx = sr * cp * cy - cr * sp * sy;
 800da1a:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800da1e:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800da22:	ee27 7a27 	vmul.f32	s14, s14, s15
 800da26:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800da2a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800da2e:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 800da32:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800da36:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800da3a:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800da3e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800da42:	ee77 7a67 	vsub.f32	s15, s14, s15
 800da46:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
  float qy = cr * sp * cy + sr * cp * sy;
 800da4a:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800da4e:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800da52:	ee27 7a27 	vmul.f32	s14, s14, s15
 800da56:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800da5a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800da5e:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 800da62:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800da66:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800da6a:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800da6e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800da72:	ee77 7a27 	vadd.f32	s15, s14, s15
 800da76:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
  float qz = cr * cp * sy - sr * sp * cy;
 800da7a:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800da7e:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800da82:	ee27 7a27 	vmul.f32	s14, s14, s15
 800da86:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800da8a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800da8e:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 800da92:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800da96:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800da9a:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800da9e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800daa2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800daa6:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
  float qw = cr * cp * cy + sr * sp * sy;
 800daaa:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800daae:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800dab2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800dab6:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800daba:	ee27 7a27 	vmul.f32	s14, s14, s15
 800dabe:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 800dac2:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800dac6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800daca:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800dace:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800dad2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800dad6:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

  robot_imu.quaternion.x = qx;
 800dada:	4a13      	ldr	r2, [pc, #76]	; (800db28 <imu_update+0x294>)
 800dadc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dade:	6013      	str	r3, [r2, #0]
  robot_imu.quaternion.y = qy;
 800dae0:	4a11      	ldr	r2, [pc, #68]	; (800db28 <imu_update+0x294>)
 800dae2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dae4:	6053      	str	r3, [r2, #4]
  robot_imu.quaternion.z = qz;
 800dae6:	4a10      	ldr	r2, [pc, #64]	; (800db28 <imu_update+0x294>)
 800dae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800daea:	6093      	str	r3, [r2, #8]
  robot_imu.quaternion.w = qw;
 800daec:	4a0e      	ldr	r2, [pc, #56]	; (800db28 <imu_update+0x294>)
 800daee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800daf0:	60d3      	str	r3, [r2, #12]

  robot_imu.angular.x = mpu_sensor.wx;
 800daf2:	69fb      	ldr	r3, [r7, #28]
 800daf4:	4a0c      	ldr	r2, [pc, #48]	; (800db28 <imu_update+0x294>)
 800daf6:	6113      	str	r3, [r2, #16]
  robot_imu.angular.y = mpu_sensor.wy;
 800daf8:	6a3b      	ldr	r3, [r7, #32]
 800dafa:	4a0b      	ldr	r2, [pc, #44]	; (800db28 <imu_update+0x294>)
 800dafc:	6153      	str	r3, [r2, #20]
  robot_imu.angular.z = mpu_sensor.wz;
 800dafe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db00:	4a09      	ldr	r2, [pc, #36]	; (800db28 <imu_update+0x294>)
 800db02:	6193      	str	r3, [r2, #24]

  robot_imu.accel.x = mpu_sensor.ax;
 800db04:	693b      	ldr	r3, [r7, #16]
 800db06:	4a08      	ldr	r2, [pc, #32]	; (800db28 <imu_update+0x294>)
 800db08:	61d3      	str	r3, [r2, #28]
  robot_imu.accel.y = mpu_sensor.ay;
 800db0a:	697b      	ldr	r3, [r7, #20]
 800db0c:	4a06      	ldr	r2, [pc, #24]	; (800db28 <imu_update+0x294>)
 800db0e:	6213      	str	r3, [r2, #32]
  robot_imu.accel.z = mpu_sensor.az;
 800db10:	69bb      	ldr	r3, [r7, #24]
 800db12:	4a05      	ldr	r2, [pc, #20]	; (800db28 <imu_update+0x294>)
 800db14:	6253      	str	r3, [r2, #36]	; 0x24

  return 0;
 800db16:	2300      	movs	r3, #0
}
 800db18:	4618      	mov	r0, r3
 800db1a:	3768      	adds	r7, #104	; 0x68
 800db1c:	46bd      	mov	sp, r7
 800db1e:	bd80      	pop	{r7, pc}
 800db20:	42653333 	.word	0x42653333
 800db24:	3fe00000 	.word	0x3fe00000
 800db28:	20011704 	.word	0x20011704

0800db2c <imu_task>:

void imu_task(void const *argument) {
 800db2c:	b580      	push	{r7, lr}
 800db2e:	b082      	sub	sp, #8
 800db30:	af00      	add	r7, sp, #0
 800db32:	6078      	str	r0, [r7, #4]
  mpu_device_init();
 800db34:	f001 f9de 	bl	800eef4 <mpu_device_init>
  while (1) {
    imu_update();
 800db38:	f7ff feac 	bl	800d894 <imu_update>
    osDelay(1);
 800db3c:	2001      	movs	r0, #1
 800db3e:	f7fd fc8f 	bl	800b460 <osDelay>
    imu_update();
 800db42:	e7f9      	b.n	800db38 <imu_task+0xc>

0800db44 <task_init>:
osThreadId blinky_task_t;
osThreadId usbComm_task_t;
osThreadId imu_task_t;
osThreadId chassis_task_t;

void task_init() {
 800db44:	b5b0      	push	{r4, r5, r7, lr}
 800db46:	b09a      	sub	sp, #104	; 0x68
 800db48:	af00      	add	r7, sp, #0
  osThreadDef(TIMER_1MS, timer_task, osPriorityLow, 0, 512);
 800db4a:	4b2b      	ldr	r3, [pc, #172]	; (800dbf8 <task_init+0xb4>)
 800db4c:	f107 0454 	add.w	r4, r7, #84	; 0x54
 800db50:	461d      	mov	r5, r3
 800db52:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800db54:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800db56:	682b      	ldr	r3, [r5, #0]
 800db58:	6023      	str	r3, [r4, #0]
  timer_task_t = osThreadCreate(osThread(TIMER_1MS), NULL);
 800db5a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800db5e:	2100      	movs	r1, #0
 800db60:	4618      	mov	r0, r3
 800db62:	f7fd fc56 	bl	800b412 <osThreadCreate>
 800db66:	4603      	mov	r3, r0
 800db68:	4a24      	ldr	r2, [pc, #144]	; (800dbfc <task_init+0xb8>)
 800db6a:	6013      	str	r3, [r2, #0]

  osThreadDef(BLINKY_TASK, blinky_task, osPriorityIdle, 0, 64);
 800db6c:	4b24      	ldr	r3, [pc, #144]	; (800dc00 <task_init+0xbc>)
 800db6e:	f107 0440 	add.w	r4, r7, #64	; 0x40
 800db72:	461d      	mov	r5, r3
 800db74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800db76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800db78:	682b      	ldr	r3, [r5, #0]
 800db7a:	6023      	str	r3, [r4, #0]
  blinky_task_t = osThreadCreate(osThread(BLINKY_TASK), NULL);
 800db7c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800db80:	2100      	movs	r1, #0
 800db82:	4618      	mov	r0, r3
 800db84:	f7fd fc45 	bl	800b412 <osThreadCreate>
 800db88:	4603      	mov	r3, r0
 800db8a:	4a1e      	ldr	r2, [pc, #120]	; (800dc04 <task_init+0xc0>)
 800db8c:	6013      	str	r3, [r2, #0]

  osThreadDef(PROTOCOL_TASK, mb_protocol_task, osPriorityNormal, 0, 4096);
 800db8e:	4b1e      	ldr	r3, [pc, #120]	; (800dc08 <task_init+0xc4>)
 800db90:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 800db94:	461d      	mov	r5, r3
 800db96:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800db98:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800db9a:	682b      	ldr	r3, [r5, #0]
 800db9c:	6023      	str	r3, [r4, #0]
  usbComm_task_t = osThreadCreate(osThread(PROTOCOL_TASK), NULL);
 800db9e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800dba2:	2100      	movs	r1, #0
 800dba4:	4618      	mov	r0, r3
 800dba6:	f7fd fc34 	bl	800b412 <osThreadCreate>
 800dbaa:	4603      	mov	r3, r0
 800dbac:	4a17      	ldr	r2, [pc, #92]	; (800dc0c <task_init+0xc8>)
 800dbae:	6013      	str	r3, [r2, #0]

  osThreadDef(IMU_TASK, imu_task, osPriorityHigh, 0, 1024);
 800dbb0:	4b17      	ldr	r3, [pc, #92]	; (800dc10 <task_init+0xcc>)
 800dbb2:	f107 0418 	add.w	r4, r7, #24
 800dbb6:	461d      	mov	r5, r3
 800dbb8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dbba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dbbc:	682b      	ldr	r3, [r5, #0]
 800dbbe:	6023      	str	r3, [r4, #0]
  imu_task_t = osThreadCreate(osThread(IMU_TASK), NULL);
 800dbc0:	f107 0318 	add.w	r3, r7, #24
 800dbc4:	2100      	movs	r1, #0
 800dbc6:	4618      	mov	r0, r3
 800dbc8:	f7fd fc23 	bl	800b412 <osThreadCreate>
 800dbcc:	4603      	mov	r3, r0
 800dbce:	4a11      	ldr	r2, [pc, #68]	; (800dc14 <task_init+0xd0>)
 800dbd0:	6013      	str	r3, [r2, #0]

  osThreadDef(CHASSIS_TASK, chassis_task, osPriorityRealtime, 0, 4096);
 800dbd2:	4b11      	ldr	r3, [pc, #68]	; (800dc18 <task_init+0xd4>)
 800dbd4:	1d3c      	adds	r4, r7, #4
 800dbd6:	461d      	mov	r5, r3
 800dbd8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dbda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dbdc:	682b      	ldr	r3, [r5, #0]
 800dbde:	6023      	str	r3, [r4, #0]
  chassis_task_t = osThreadCreate(osThread(CHASSIS_TASK), NULL);
 800dbe0:	1d3b      	adds	r3, r7, #4
 800dbe2:	2100      	movs	r1, #0
 800dbe4:	4618      	mov	r0, r3
 800dbe6:	f7fd fc14 	bl	800b412 <osThreadCreate>
 800dbea:	4603      	mov	r3, r0
 800dbec:	4a0b      	ldr	r2, [pc, #44]	; (800dc1c <task_init+0xd8>)
 800dbee:	6013      	str	r3, [r2, #0]
}
 800dbf0:	bf00      	nop
 800dbf2:	3768      	adds	r7, #104	; 0x68
 800dbf4:	46bd      	mov	sp, r7
 800dbf6:	bdb0      	pop	{r4, r5, r7, pc}
 800dbf8:	080137a4 	.word	0x080137a4
 800dbfc:	200116a4 	.word	0x200116a4
 800dc00:	080137c4 	.word	0x080137c4
 800dc04:	200116a8 	.word	0x200116a8
 800dc08:	080137e8 	.word	0x080137e8
 800dc0c:	200116ac 	.word	0x200116ac
 800dc10:	08013808 	.word	0x08013808
 800dc14:	200116b0 	.word	0x200116b0
 800dc18:	0801382c 	.word	0x0801382c
 800dc1c:	200116b4 	.word	0x200116b4

0800dc20 <usb_send>:
struct odom_msg robot_odom;
struct imu_msg robot_imu;

uint8_t waiting4master = 1;

void usb_send(int32_t data) {
 800dc20:	b580      	push	{r7, lr}
 800dc22:	b084      	sub	sp, #16
 800dc24:	af00      	add	r7, sp, #0
 800dc26:	6078      	str	r0, [r7, #4]
  uint8_t buf[4];
  int32_to_bytes(data, buf, 0);
 800dc28:	f107 030c 	add.w	r3, r7, #12
 800dc2c:	2200      	movs	r2, #0
 800dc2e:	4619      	mov	r1, r3
 800dc30:	6878      	ldr	r0, [r7, #4]
 800dc32:	f000 fbcb 	bl	800e3cc <int32_to_bytes>
  force_send(buf, 4);
 800dc36:	f107 030c 	add.w	r3, r7, #12
 800dc3a:	2104      	movs	r1, #4
 800dc3c:	4618      	mov	r0, r3
 800dc3e:	f003 fe05 	bl	801184c <force_send>
  // usb_vcp_tx_write_fifo(buf, sizeof(buf));
}
 800dc42:	bf00      	nop
 800dc44:	3710      	adds	r7, #16
 800dc46:	46bd      	mov	sp, r7
 800dc48:	bd80      	pop	{r7, pc}
	...

0800dc4c <usb_rcv_callback>:

static int32_t usb_rcv_callback(uint8_t *buf, uint32_t len) {
 800dc4c:	b580      	push	{r7, lr}
 800dc4e:	b082      	sub	sp, #8
 800dc50:	af00      	add	r7, sp, #0
 800dc52:	6078      	str	r0, [r7, #4]
 800dc54:	6039      	str	r1, [r7, #0]
  if (waiting4master == 1) {
 800dc56:	4b07      	ldr	r3, [pc, #28]	; (800dc74 <usb_rcv_callback+0x28>)
 800dc58:	781b      	ldrb	r3, [r3, #0]
 800dc5a:	2b01      	cmp	r3, #1
 800dc5c:	d105      	bne.n	800dc6a <usb_rcv_callback+0x1e>
    waiting4master = 0;
 800dc5e:	4b05      	ldr	r3, [pc, #20]	; (800dc74 <usb_rcv_callback+0x28>)
 800dc60:	2200      	movs	r2, #0
 800dc62:	701a      	strb	r2, [r3, #0]
    process_request(buf);
 800dc64:	6878      	ldr	r0, [r7, #4]
 800dc66:	f000 f8c5 	bl	800ddf4 <process_request>
//    usb_send(get_response(&cmd_twist, &robot_odom, &robot_imu));
//    waiting4master = 1;
  }
  return 0;
 800dc6a:	2300      	movs	r3, #0
}
 800dc6c:	4618      	mov	r0, r3
 800dc6e:	3708      	adds	r7, #8
 800dc70:	46bd      	mov	sp, r7
 800dc72:	bd80      	pop	{r7, pc}
 800dc74:	200000fe 	.word	0x200000fe

0800dc78 <mb_protocol_task>:

void mb_protocol_task(void const *argument) {
 800dc78:	b580      	push	{r7, lr}
 800dc7a:	b082      	sub	sp, #8
 800dc7c:	af00      	add	r7, sp, #0
 800dc7e:	6078      	str	r0, [r7, #4]
  usb_vcp_init(true);
 800dc80:	2001      	movs	r0, #1
 800dc82:	f003 fd57 	bl	8011734 <usb_vcp_init>
  usb_vcp_rx_callback_register(usb_rcv_callback);
 800dc86:	480c      	ldr	r0, [pc, #48]	; (800dcb8 <mb_protocol_task+0x40>)
 800dc88:	f003 fdbc 	bl	8011804 <usb_vcp_rx_callback_register>
  // soft_timer_register(usb_tx_flush_run, NULL, 1);

  for (;;) {
//    osDelay(1);
     if (waiting4master == 0) {
 800dc8c:	4b0b      	ldr	r3, [pc, #44]	; (800dcbc <mb_protocol_task+0x44>)
 800dc8e:	781b      	ldrb	r3, [r3, #0]
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	d10c      	bne.n	800dcae <mb_protocol_task+0x36>
       usb_send(get_response(&cmd_twist, &robot_odom, &robot_imu));
 800dc94:	4a0a      	ldr	r2, [pc, #40]	; (800dcc0 <mb_protocol_task+0x48>)
 800dc96:	490b      	ldr	r1, [pc, #44]	; (800dcc4 <mb_protocol_task+0x4c>)
 800dc98:	480b      	ldr	r0, [pc, #44]	; (800dcc8 <mb_protocol_task+0x50>)
 800dc9a:	f000 f901 	bl	800dea0 <get_response>
 800dc9e:	4603      	mov	r3, r0
 800dca0:	4618      	mov	r0, r3
 800dca2:	f7ff ffbd 	bl	800dc20 <usb_send>
       waiting4master = 1;
 800dca6:	4b05      	ldr	r3, [pc, #20]	; (800dcbc <mb_protocol_task+0x44>)
 800dca8:	2201      	movs	r2, #1
 800dcaa:	701a      	strb	r2, [r3, #0]
 800dcac:	e7ee      	b.n	800dc8c <mb_protocol_task+0x14>
     } else {
       osDelay(1);
 800dcae:	2001      	movs	r0, #1
 800dcb0:	f7fd fbd6 	bl	800b460 <osDelay>
     if (waiting4master == 0) {
 800dcb4:	e7ea      	b.n	800dc8c <mb_protocol_task+0x14>
 800dcb6:	bf00      	nop
 800dcb8:	0800dc4d 	.word	0x0800dc4d
 800dcbc:	200000fe 	.word	0x200000fe
 800dcc0:	20011704 	.word	0x20011704
 800dcc4:	200116d0 	.word	0x200116d0
 800dcc8:	200116b8 	.word	0x200116b8

0800dccc <timer_task>:
 * The function runs in an infinite loop and delays for a specified period.
 * 
 * @param argument Pointer to the task argument (not used in this function).
 */
void timer_task(void const *argument)
{
 800dccc:	b580      	push	{r7, lr}
 800dcce:	b084      	sub	sp, #16
 800dcd0:	af00      	add	r7, sp, #0
 800dcd2:	6078      	str	r0, [r7, #4]
  uint32_t period = osKernelSysTick();
 800dcd4:	f7fd fb8d 	bl	800b3f2 <osKernelSysTick>
 800dcd8:	4603      	mov	r3, r0
 800dcda:	60bb      	str	r3, [r7, #8]

  while (1)
  {
    TimerISR_Hook();
 800dcdc:	f003 fc3e 	bl	801155c <TimerISR_Hook>

    for (int i = 0; i < TIMER_ELEMENT_NUM_MAX - 1; i++)
 800dce0:	2300      	movs	r3, #0
 800dce2:	60fb      	str	r3, [r7, #12]
 800dce4:	e03a      	b.n	800dd5c <timer_task+0x90>
    {
      if ((soft_timer[i].id != 0) && (soft_timer[i].soft_timer_callback != NULL))
 800dce6:	4a22      	ldr	r2, [pc, #136]	; (800dd70 <timer_task+0xa4>)
 800dce8:	68fb      	ldr	r3, [r7, #12]
 800dcea:	011b      	lsls	r3, r3, #4
 800dcec:	4413      	add	r3, r2
 800dcee:	781b      	ldrb	r3, [r3, #0]
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d030      	beq.n	800dd56 <timer_task+0x8a>
 800dcf4:	4a1e      	ldr	r2, [pc, #120]	; (800dd70 <timer_task+0xa4>)
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	011b      	lsls	r3, r3, #4
 800dcfa:	4413      	add	r3, r2
 800dcfc:	330c      	adds	r3, #12
 800dcfe:	681b      	ldr	r3, [r3, #0]
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d028      	beq.n	800dd56 <timer_task+0x8a>
      {
        if (soft_timer_check(soft_timer[i].id) == SOFT_TIMER_TIMEOUT)
 800dd04:	4a1a      	ldr	r2, [pc, #104]	; (800dd70 <timer_task+0xa4>)
 800dd06:	68fb      	ldr	r3, [r7, #12]
 800dd08:	011b      	lsls	r3, r3, #4
 800dd0a:	4413      	add	r3, r2
 800dd0c:	781b      	ldrb	r3, [r3, #0]
 800dd0e:	b29b      	uxth	r3, r3
 800dd10:	4618      	mov	r0, r3
 800dd12:	f003 fcdf 	bl	80116d4 <soft_timer_check>
 800dd16:	4603      	mov	r3, r0
 800dd18:	2b02      	cmp	r3, #2
 800dd1a:	d11c      	bne.n	800dd56 <timer_task+0x8a>
        {
          soft_timer[i].soft_timer_callback(soft_timer[i].argc);
 800dd1c:	4a14      	ldr	r2, [pc, #80]	; (800dd70 <timer_task+0xa4>)
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	011b      	lsls	r3, r3, #4
 800dd22:	4413      	add	r3, r2
 800dd24:	330c      	adds	r3, #12
 800dd26:	681b      	ldr	r3, [r3, #0]
 800dd28:	4911      	ldr	r1, [pc, #68]	; (800dd70 <timer_task+0xa4>)
 800dd2a:	68fa      	ldr	r2, [r7, #12]
 800dd2c:	0112      	lsls	r2, r2, #4
 800dd2e:	440a      	add	r2, r1
 800dd30:	3208      	adds	r2, #8
 800dd32:	6812      	ldr	r2, [r2, #0]
 800dd34:	4610      	mov	r0, r2
 800dd36:	4798      	blx	r3

          soft_timer_update(soft_timer[i].id, soft_timer[i].ticks);
 800dd38:	4a0d      	ldr	r2, [pc, #52]	; (800dd70 <timer_task+0xa4>)
 800dd3a:	68fb      	ldr	r3, [r7, #12]
 800dd3c:	011b      	lsls	r3, r3, #4
 800dd3e:	4413      	add	r3, r2
 800dd40:	781b      	ldrb	r3, [r3, #0]
 800dd42:	4618      	mov	r0, r3
 800dd44:	4a0a      	ldr	r2, [pc, #40]	; (800dd70 <timer_task+0xa4>)
 800dd46:	68fb      	ldr	r3, [r7, #12]
 800dd48:	011b      	lsls	r3, r3, #4
 800dd4a:	4413      	add	r3, r2
 800dd4c:	3304      	adds	r3, #4
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	4619      	mov	r1, r3
 800dd52:	f003 fc8b 	bl	801166c <soft_timer_update>
    for (int i = 0; i < TIMER_ELEMENT_NUM_MAX - 1; i++)
 800dd56:	68fb      	ldr	r3, [r7, #12]
 800dd58:	3301      	adds	r3, #1
 800dd5a:	60fb      	str	r3, [r7, #12]
 800dd5c:	68fb      	ldr	r3, [r7, #12]
 800dd5e:	2b12      	cmp	r3, #18
 800dd60:	ddc1      	ble.n	800dce6 <timer_task+0x1a>
        }
      }
    }

    osDelayUntil(&period, 1);
 800dd62:	f107 0308 	add.w	r3, r7, #8
 800dd66:	2101      	movs	r1, #1
 800dd68:	4618      	mov	r0, r3
 800dd6a:	f7fd fb8d 	bl	800b488 <osDelayUntil>
    TimerISR_Hook();
 800dd6e:	e7b5      	b.n	800dcdc <timer_task+0x10>
 800dd70:	2001172c 	.word	0x2001172c

0800dd74 <soft_timer_register>:
 *
 * @return                    The index of the registered timer element if successful,
 *                            or -1 if the registration fails (e.g., no available timer element).
 */
int32_t soft_timer_register(int32_t (*soft_timer_callback)(void *argc), void *argc, uint32_t ticks)
{
 800dd74:	b580      	push	{r7, lr}
 800dd76:	b086      	sub	sp, #24
 800dd78:	af00      	add	r7, sp, #0
 800dd7a:	60f8      	str	r0, [r7, #12]
 800dd7c:	60b9      	str	r1, [r7, #8]
 800dd7e:	607a      	str	r2, [r7, #4]
  for (int i = 0; i < TIMER_ELEMENT_NUM_MAX - 1; i++)
 800dd80:	2300      	movs	r3, #0
 800dd82:	617b      	str	r3, [r7, #20]
 800dd84:	e02b      	b.n	800ddde <soft_timer_register+0x6a>
  {
    if (soft_timer[i].id == 0)
 800dd86:	4a1a      	ldr	r2, [pc, #104]	; (800ddf0 <soft_timer_register+0x7c>)
 800dd88:	697b      	ldr	r3, [r7, #20]
 800dd8a:	011b      	lsls	r3, r3, #4
 800dd8c:	4413      	add	r3, r2
 800dd8e:	781b      	ldrb	r3, [r3, #0]
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	d121      	bne.n	800ddd8 <soft_timer_register+0x64>
    {
      soft_timer[i].id = soft_timer_req(ticks);
 800dd94:	6878      	ldr	r0, [r7, #4]
 800dd96:	f003 fc2f 	bl	80115f8 <soft_timer_req>
 800dd9a:	4603      	mov	r3, r0
 800dd9c:	b2d9      	uxtb	r1, r3
 800dd9e:	4a14      	ldr	r2, [pc, #80]	; (800ddf0 <soft_timer_register+0x7c>)
 800dda0:	697b      	ldr	r3, [r7, #20]
 800dda2:	011b      	lsls	r3, r3, #4
 800dda4:	4413      	add	r3, r2
 800dda6:	460a      	mov	r2, r1
 800dda8:	701a      	strb	r2, [r3, #0]
      soft_timer[i].ticks = ticks;
 800ddaa:	4a11      	ldr	r2, [pc, #68]	; (800ddf0 <soft_timer_register+0x7c>)
 800ddac:	697b      	ldr	r3, [r7, #20]
 800ddae:	011b      	lsls	r3, r3, #4
 800ddb0:	4413      	add	r3, r2
 800ddb2:	3304      	adds	r3, #4
 800ddb4:	687a      	ldr	r2, [r7, #4]
 800ddb6:	601a      	str	r2, [r3, #0]
      soft_timer[i].argc = argc;
 800ddb8:	4a0d      	ldr	r2, [pc, #52]	; (800ddf0 <soft_timer_register+0x7c>)
 800ddba:	697b      	ldr	r3, [r7, #20]
 800ddbc:	011b      	lsls	r3, r3, #4
 800ddbe:	4413      	add	r3, r2
 800ddc0:	3308      	adds	r3, #8
 800ddc2:	68ba      	ldr	r2, [r7, #8]
 800ddc4:	601a      	str	r2, [r3, #0]
      soft_timer[i].soft_timer_callback = soft_timer_callback;
 800ddc6:	4a0a      	ldr	r2, [pc, #40]	; (800ddf0 <soft_timer_register+0x7c>)
 800ddc8:	697b      	ldr	r3, [r7, #20]
 800ddca:	011b      	lsls	r3, r3, #4
 800ddcc:	4413      	add	r3, r2
 800ddce:	330c      	adds	r3, #12
 800ddd0:	68fa      	ldr	r2, [r7, #12]
 800ddd2:	601a      	str	r2, [r3, #0]
      return i;
 800ddd4:	697b      	ldr	r3, [r7, #20]
 800ddd6:	e007      	b.n	800dde8 <soft_timer_register+0x74>
  for (int i = 0; i < TIMER_ELEMENT_NUM_MAX - 1; i++)
 800ddd8:	697b      	ldr	r3, [r7, #20]
 800ddda:	3301      	adds	r3, #1
 800dddc:	617b      	str	r3, [r7, #20]
 800ddde:	697b      	ldr	r3, [r7, #20]
 800dde0:	2b12      	cmp	r3, #18
 800dde2:	ddd0      	ble.n	800dd86 <soft_timer_register+0x12>
    }
  }
  return -1;
 800dde4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800dde8:	4618      	mov	r0, r3
 800ddea:	3718      	adds	r7, #24
 800ddec:	46bd      	mov	sp, r7
 800ddee:	bd80      	pop	{r7, pc}
 800ddf0:	2001172c 	.word	0x2001172c

0800ddf4 <process_request>:
int32_t get_cmd_vel_response(struct twist_msg *twist_msg, int32_t cmd_type,
                             int32_t cmd_data);
int32_t get_odom_response(struct odom_msg *odom_msg, int32_t odom_type);
int32_t get_imu_response(struct imu_msg *imu_msg, int32_t imu_type);

int32_t process_request(uint8_t *buf) {
 800ddf4:	b580      	push	{r7, lr}
 800ddf6:	b084      	sub	sp, #16
 800ddf8:	af00      	add	r7, sp, #0
 800ddfa:	6078      	str	r0, [r7, #4]
  int32_t rcv_value = bytes_to_int32(buf, LITTLE_ENDIAN);
 800ddfc:	2100      	movs	r1, #0
 800ddfe:	6878      	ldr	r0, [r7, #4]
 800de00:	f000 fb23 	bl	800e44a <bytes_to_int32>
 800de04:	60f8      	str	r0, [r7, #12]
  if (receving_data == 1) {
 800de06:	4b0e      	ldr	r3, [pc, #56]	; (800de40 <process_request+0x4c>)
 800de08:	681b      	ldr	r3, [r3, #0]
 800de0a:	2b01      	cmp	r3, #1
 800de0c:	d106      	bne.n	800de1c <process_request+0x28>
    receving_data = 0;
 800de0e:	4b0c      	ldr	r3, [pc, #48]	; (800de40 <process_request+0x4c>)
 800de10:	2200      	movs	r2, #0
 800de12:	601a      	str	r2, [r3, #0]
    data_received = rcv_value;
 800de14:	4a0b      	ldr	r2, [pc, #44]	; (800de44 <process_request+0x50>)
 800de16:	68fb      	ldr	r3, [r7, #12]
 800de18:	6013      	str	r3, [r2, #0]
 800de1a:	e00b      	b.n	800de34 <process_request+0x40>
  } else {
    request_type = rcv_value;
 800de1c:	4a0a      	ldr	r2, [pc, #40]	; (800de48 <process_request+0x54>)
 800de1e:	68fb      	ldr	r3, [r7, #12]
 800de20:	6013      	str	r3, [r2, #0]
    receving_data = determine_receiving_data(request_type);
 800de22:	4b09      	ldr	r3, [pc, #36]	; (800de48 <process_request+0x54>)
 800de24:	681b      	ldr	r3, [r3, #0]
 800de26:	4618      	mov	r0, r3
 800de28:	f000 f810 	bl	800de4c <determine_receiving_data>
 800de2c:	4603      	mov	r3, r0
 800de2e:	461a      	mov	r2, r3
 800de30:	4b03      	ldr	r3, [pc, #12]	; (800de40 <process_request+0x4c>)
 800de32:	601a      	str	r2, [r3, #0]
  }
  return rcv_value;
 800de34:	68fb      	ldr	r3, [r7, #12]
}
 800de36:	4618      	mov	r0, r3
 800de38:	3710      	adds	r7, #16
 800de3a:	46bd      	mov	sp, r7
 800de3c:	bd80      	pop	{r7, pc}
 800de3e:	bf00      	nop
 800de40:	20011860 	.word	0x20011860
 800de44:	20011864 	.word	0x20011864
 800de48:	2001185c 	.word	0x2001185c

0800de4c <determine_receiving_data>:

uint8_t determine_receiving_data(int32_t cmd) {
 800de4c:	b480      	push	{r7}
 800de4e:	b083      	sub	sp, #12
 800de50:	af00      	add	r7, sp, #0
 800de52:	6078      	str	r0, [r7, #4]
  if (cmd == CMD_VEL_LINEAR_X || cmd == CMD_VEL_LINEAR_Y ||
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	f240 2201 	movw	r2, #513	; 0x201
 800de5a:	4293      	cmp	r3, r2
 800de5c:	d017      	beq.n	800de8e <determine_receiving_data+0x42>
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	f240 2202 	movw	r2, #514	; 0x202
 800de64:	4293      	cmp	r3, r2
 800de66:	d012      	beq.n	800de8e <determine_receiving_data+0x42>
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	f240 2203 	movw	r2, #515	; 0x203
 800de6e:	4293      	cmp	r3, r2
 800de70:	d00d      	beq.n	800de8e <determine_receiving_data+0x42>
      cmd == CMD_VEL_LINEAR_Z || cmd == CMD_VEL_ANGULAR_X ||
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	f5b3 7f01 	cmp.w	r3, #516	; 0x204
 800de78:	d009      	beq.n	800de8e <determine_receiving_data+0x42>
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	f240 2205 	movw	r2, #517	; 0x205
 800de80:	4293      	cmp	r3, r2
 800de82:	d004      	beq.n	800de8e <determine_receiving_data+0x42>
      cmd == CMD_VEL_ANGULAR_Y || cmd == CMD_VEL_ANGULAR_Z) {
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	f240 2206 	movw	r2, #518	; 0x206
 800de8a:	4293      	cmp	r3, r2
 800de8c:	d101      	bne.n	800de92 <determine_receiving_data+0x46>
    return 1;
 800de8e:	2301      	movs	r3, #1
 800de90:	e000      	b.n	800de94 <determine_receiving_data+0x48>
  } else {
    return 0;
 800de92:	2300      	movs	r3, #0
  }
}
 800de94:	4618      	mov	r0, r3
 800de96:	370c      	adds	r7, #12
 800de98:	46bd      	mov	sp, r7
 800de9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de9e:	4770      	bx	lr

0800dea0 <get_response>:

int32_t get_response(struct twist_msg *twist_msg, struct odom_msg *odom_msg,
                     struct imu_msg *imu_msg) {
 800dea0:	b580      	push	{r7, lr}
 800dea2:	b084      	sub	sp, #16
 800dea4:	af00      	add	r7, sp, #0
 800dea6:	60f8      	str	r0, [r7, #12]
 800dea8:	60b9      	str	r1, [r7, #8]
 800deaa:	607a      	str	r2, [r7, #4]
  if (request_type == CMD_VEL_LINEAR_X || request_type == CMD_VEL_LINEAR_Y ||
 800deac:	4b63      	ldr	r3, [pc, #396]	; (800e03c <get_response+0x19c>)
 800deae:	681b      	ldr	r3, [r3, #0]
 800deb0:	f240 2201 	movw	r2, #513	; 0x201
 800deb4:	4293      	cmp	r3, r2
 800deb6:	d01c      	beq.n	800def2 <get_response+0x52>
 800deb8:	4b60      	ldr	r3, [pc, #384]	; (800e03c <get_response+0x19c>)
 800deba:	681b      	ldr	r3, [r3, #0]
 800debc:	f240 2202 	movw	r2, #514	; 0x202
 800dec0:	4293      	cmp	r3, r2
 800dec2:	d016      	beq.n	800def2 <get_response+0x52>
      request_type == CMD_VEL_LINEAR_Z || request_type == CMD_VEL_ANGULAR_X ||
 800dec4:	4b5d      	ldr	r3, [pc, #372]	; (800e03c <get_response+0x19c>)
 800dec6:	681b      	ldr	r3, [r3, #0]
  if (request_type == CMD_VEL_LINEAR_X || request_type == CMD_VEL_LINEAR_Y ||
 800dec8:	f240 2203 	movw	r2, #515	; 0x203
 800decc:	4293      	cmp	r3, r2
 800dece:	d010      	beq.n	800def2 <get_response+0x52>
      request_type == CMD_VEL_LINEAR_Z || request_type == CMD_VEL_ANGULAR_X ||
 800ded0:	4b5a      	ldr	r3, [pc, #360]	; (800e03c <get_response+0x19c>)
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	f5b3 7f01 	cmp.w	r3, #516	; 0x204
 800ded8:	d00b      	beq.n	800def2 <get_response+0x52>
      request_type == CMD_VEL_ANGULAR_Y || request_type == CMD_VEL_ANGULAR_Z) {
 800deda:	4b58      	ldr	r3, [pc, #352]	; (800e03c <get_response+0x19c>)
 800dedc:	681b      	ldr	r3, [r3, #0]
      request_type == CMD_VEL_LINEAR_Z || request_type == CMD_VEL_ANGULAR_X ||
 800dede:	f240 2205 	movw	r2, #517	; 0x205
 800dee2:	4293      	cmp	r3, r2
 800dee4:	d005      	beq.n	800def2 <get_response+0x52>
      request_type == CMD_VEL_ANGULAR_Y || request_type == CMD_VEL_ANGULAR_Z) {
 800dee6:	4b55      	ldr	r3, [pc, #340]	; (800e03c <get_response+0x19c>)
 800dee8:	681b      	ldr	r3, [r3, #0]
 800deea:	f240 2206 	movw	r2, #518	; 0x206
 800deee:	4293      	cmp	r3, r2
 800def0:	d109      	bne.n	800df06 <get_response+0x66>
    return get_cmd_vel_response(twist_msg, request_type, data_received);
 800def2:	4b52      	ldr	r3, [pc, #328]	; (800e03c <get_response+0x19c>)
 800def4:	681b      	ldr	r3, [r3, #0]
 800def6:	4a52      	ldr	r2, [pc, #328]	; (800e040 <get_response+0x1a0>)
 800def8:	6812      	ldr	r2, [r2, #0]
 800defa:	4619      	mov	r1, r3
 800defc:	68f8      	ldr	r0, [r7, #12]
 800defe:	f000 f8a1 	bl	800e044 <get_cmd_vel_response>
 800df02:	4603      	mov	r3, r0
 800df04:	e096      	b.n	800e034 <get_response+0x194>
  } else if (request_type == ODOM_POINT_X || request_type == ODOM_POINT_Y ||
 800df06:	4b4d      	ldr	r3, [pc, #308]	; (800e03c <get_response+0x19c>)
 800df08:	681b      	ldr	r3, [r3, #0]
 800df0a:	f240 3201 	movw	r2, #769	; 0x301
 800df0e:	4293      	cmp	r3, r2
 800df10:	d044      	beq.n	800df9c <get_response+0xfc>
 800df12:	4b4a      	ldr	r3, [pc, #296]	; (800e03c <get_response+0x19c>)
 800df14:	681b      	ldr	r3, [r3, #0]
 800df16:	f240 3202 	movw	r2, #770	; 0x302
 800df1a:	4293      	cmp	r3, r2
 800df1c:	d03e      	beq.n	800df9c <get_response+0xfc>
             request_type == ODOM_POINT_Z || request_type == ODOM_LINEAR_X ||
 800df1e:	4b47      	ldr	r3, [pc, #284]	; (800e03c <get_response+0x19c>)
 800df20:	681b      	ldr	r3, [r3, #0]
  } else if (request_type == ODOM_POINT_X || request_type == ODOM_POINT_Y ||
 800df22:	f240 3203 	movw	r2, #771	; 0x303
 800df26:	4293      	cmp	r3, r2
 800df28:	d038      	beq.n	800df9c <get_response+0xfc>
             request_type == ODOM_POINT_Z || request_type == ODOM_LINEAR_X ||
 800df2a:	4b44      	ldr	r3, [pc, #272]	; (800e03c <get_response+0x19c>)
 800df2c:	681b      	ldr	r3, [r3, #0]
 800df2e:	f5b3 7f42 	cmp.w	r3, #776	; 0x308
 800df32:	d033      	beq.n	800df9c <get_response+0xfc>
             request_type == ODOM_LINEAR_Y || request_type == ODOM_LINEAR_Z ||
 800df34:	4b41      	ldr	r3, [pc, #260]	; (800e03c <get_response+0x19c>)
 800df36:	681b      	ldr	r3, [r3, #0]
             request_type == ODOM_POINT_Z || request_type == ODOM_LINEAR_X ||
 800df38:	f240 3209 	movw	r2, #777	; 0x309
 800df3c:	4293      	cmp	r3, r2
 800df3e:	d02d      	beq.n	800df9c <get_response+0xfc>
             request_type == ODOM_LINEAR_Y || request_type == ODOM_LINEAR_Z ||
 800df40:	4b3e      	ldr	r3, [pc, #248]	; (800e03c <get_response+0x19c>)
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	f5b3 7f44 	cmp.w	r3, #784	; 0x310
 800df48:	d028      	beq.n	800df9c <get_response+0xfc>
             request_type == ODOM_ANGULAR_X || request_type == ODOM_ANGULAR_Y ||
 800df4a:	4b3c      	ldr	r3, [pc, #240]	; (800e03c <get_response+0x19c>)
 800df4c:	681b      	ldr	r3, [r3, #0]
             request_type == ODOM_LINEAR_Y || request_type == ODOM_LINEAR_Z ||
 800df4e:	f240 3211 	movw	r2, #785	; 0x311
 800df52:	4293      	cmp	r3, r2
 800df54:	d022      	beq.n	800df9c <get_response+0xfc>
             request_type == ODOM_ANGULAR_X || request_type == ODOM_ANGULAR_Y ||
 800df56:	4b39      	ldr	r3, [pc, #228]	; (800e03c <get_response+0x19c>)
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	f240 3212 	movw	r2, #786	; 0x312
 800df5e:	4293      	cmp	r3, r2
 800df60:	d01c      	beq.n	800df9c <get_response+0xfc>
             request_type == ODOM_ANGULAR_Z ||
 800df62:	4b36      	ldr	r3, [pc, #216]	; (800e03c <get_response+0x19c>)
 800df64:	681b      	ldr	r3, [r3, #0]
             request_type == ODOM_ANGULAR_X || request_type == ODOM_ANGULAR_Y ||
 800df66:	f240 3213 	movw	r2, #787	; 0x313
 800df6a:	4293      	cmp	r3, r2
 800df6c:	d016      	beq.n	800df9c <get_response+0xfc>
             request_type == ODOM_QUATERNION_X ||
 800df6e:	4b33      	ldr	r3, [pc, #204]	; (800e03c <get_response+0x19c>)
 800df70:	681b      	ldr	r3, [r3, #0]
             request_type == ODOM_ANGULAR_Z ||
 800df72:	f5b3 7f41 	cmp.w	r3, #772	; 0x304
 800df76:	d011      	beq.n	800df9c <get_response+0xfc>
             request_type == ODOM_QUATERNION_Y ||
 800df78:	4b30      	ldr	r3, [pc, #192]	; (800e03c <get_response+0x19c>)
 800df7a:	681b      	ldr	r3, [r3, #0]
             request_type == ODOM_QUATERNION_X ||
 800df7c:	f240 3205 	movw	r2, #773	; 0x305
 800df80:	4293      	cmp	r3, r2
 800df82:	d00b      	beq.n	800df9c <get_response+0xfc>
             request_type == ODOM_QUATERNION_Z ||
 800df84:	4b2d      	ldr	r3, [pc, #180]	; (800e03c <get_response+0x19c>)
 800df86:	681b      	ldr	r3, [r3, #0]
             request_type == ODOM_QUATERNION_Y ||
 800df88:	f240 3206 	movw	r2, #774	; 0x306
 800df8c:	4293      	cmp	r3, r2
 800df8e:	d005      	beq.n	800df9c <get_response+0xfc>
             request_type == ODOM_QUATERNION_W) {
 800df90:	4b2a      	ldr	r3, [pc, #168]	; (800e03c <get_response+0x19c>)
 800df92:	681b      	ldr	r3, [r3, #0]
             request_type == ODOM_QUATERNION_Z ||
 800df94:	f240 3207 	movw	r2, #775	; 0x307
 800df98:	4293      	cmp	r3, r2
 800df9a:	d107      	bne.n	800dfac <get_response+0x10c>
    return get_odom_response(odom_msg, request_type);
 800df9c:	4b27      	ldr	r3, [pc, #156]	; (800e03c <get_response+0x19c>)
 800df9e:	681b      	ldr	r3, [r3, #0]
 800dfa0:	4619      	mov	r1, r3
 800dfa2:	68b8      	ldr	r0, [r7, #8]
 800dfa4:	f000 f8a4 	bl	800e0f0 <get_odom_response>
 800dfa8:	4603      	mov	r3, r0
 800dfaa:	e043      	b.n	800e034 <get_response+0x194>
  } else if (request_type == IMU_ACCEL_X || request_type == IMU_ACCEL_Y ||
 800dfac:	4b23      	ldr	r3, [pc, #140]	; (800e03c <get_response+0x19c>)
 800dfae:	681b      	ldr	r3, [r3, #0]
 800dfb0:	f5b3 6f81 	cmp.w	r3, #1032	; 0x408
 800dfb4:	d034      	beq.n	800e020 <get_response+0x180>
 800dfb6:	4b21      	ldr	r3, [pc, #132]	; (800e03c <get_response+0x19c>)
 800dfb8:	681b      	ldr	r3, [r3, #0]
 800dfba:	f240 4209 	movw	r2, #1033	; 0x409
 800dfbe:	4293      	cmp	r3, r2
 800dfc0:	d02e      	beq.n	800e020 <get_response+0x180>
             request_type == IMU_ACCEL_Z || request_type == IMU_ANGULAR_X ||
 800dfc2:	4b1e      	ldr	r3, [pc, #120]	; (800e03c <get_response+0x19c>)
 800dfc4:	681b      	ldr	r3, [r3, #0]
  } else if (request_type == IMU_ACCEL_X || request_type == IMU_ACCEL_Y ||
 800dfc6:	f5b3 6f82 	cmp.w	r3, #1040	; 0x410
 800dfca:	d029      	beq.n	800e020 <get_response+0x180>
             request_type == IMU_ACCEL_Z || request_type == IMU_ANGULAR_X ||
 800dfcc:	4b1b      	ldr	r3, [pc, #108]	; (800e03c <get_response+0x19c>)
 800dfce:	681b      	ldr	r3, [r3, #0]
 800dfd0:	f240 4205 	movw	r2, #1029	; 0x405
 800dfd4:	4293      	cmp	r3, r2
 800dfd6:	d023      	beq.n	800e020 <get_response+0x180>
             request_type == IMU_ANGULAR_Y || request_type == IMU_ANGULAR_Z ||
 800dfd8:	4b18      	ldr	r3, [pc, #96]	; (800e03c <get_response+0x19c>)
 800dfda:	681b      	ldr	r3, [r3, #0]
             request_type == IMU_ACCEL_Z || request_type == IMU_ANGULAR_X ||
 800dfdc:	f240 4206 	movw	r2, #1030	; 0x406
 800dfe0:	4293      	cmp	r3, r2
 800dfe2:	d01d      	beq.n	800e020 <get_response+0x180>
             request_type == IMU_ANGULAR_Y || request_type == IMU_ANGULAR_Z ||
 800dfe4:	4b15      	ldr	r3, [pc, #84]	; (800e03c <get_response+0x19c>)
 800dfe6:	681b      	ldr	r3, [r3, #0]
 800dfe8:	f240 4207 	movw	r2, #1031	; 0x407
 800dfec:	4293      	cmp	r3, r2
 800dfee:	d017      	beq.n	800e020 <get_response+0x180>
             request_type == IMU_QUATERNION_X ||
 800dff0:	4b12      	ldr	r3, [pc, #72]	; (800e03c <get_response+0x19c>)
 800dff2:	681b      	ldr	r3, [r3, #0]
             request_type == IMU_ANGULAR_Y || request_type == IMU_ANGULAR_Z ||
 800dff4:	f240 4201 	movw	r2, #1025	; 0x401
 800dff8:	4293      	cmp	r3, r2
 800dffa:	d011      	beq.n	800e020 <get_response+0x180>
             request_type == IMU_QUATERNION_Y ||
 800dffc:	4b0f      	ldr	r3, [pc, #60]	; (800e03c <get_response+0x19c>)
 800dffe:	681b      	ldr	r3, [r3, #0]
             request_type == IMU_QUATERNION_X ||
 800e000:	f240 4202 	movw	r2, #1026	; 0x402
 800e004:	4293      	cmp	r3, r2
 800e006:	d00b      	beq.n	800e020 <get_response+0x180>
             request_type == IMU_QUATERNION_Z ||
 800e008:	4b0c      	ldr	r3, [pc, #48]	; (800e03c <get_response+0x19c>)
 800e00a:	681b      	ldr	r3, [r3, #0]
             request_type == IMU_QUATERNION_Y ||
 800e00c:	f240 4203 	movw	r2, #1027	; 0x403
 800e010:	4293      	cmp	r3, r2
 800e012:	d005      	beq.n	800e020 <get_response+0x180>
             request_type == IMU_QUATERNION_W) {
 800e014:	4b09      	ldr	r3, [pc, #36]	; (800e03c <get_response+0x19c>)
 800e016:	681b      	ldr	r3, [r3, #0]
             request_type == IMU_QUATERNION_Z ||
 800e018:	f240 4204 	movw	r2, #1028	; 0x404
 800e01c:	4293      	cmp	r3, r2
 800e01e:	d107      	bne.n	800e030 <get_response+0x190>
    return get_imu_response(imu_msg, request_type);
 800e020:	4b06      	ldr	r3, [pc, #24]	; (800e03c <get_response+0x19c>)
 800e022:	681b      	ldr	r3, [r3, #0]
 800e024:	4619      	mov	r1, r3
 800e026:	6878      	ldr	r0, [r7, #4]
 800e028:	f000 f912 	bl	800e250 <get_imu_response>
 800e02c:	4603      	mov	r3, r0
 800e02e:	e001      	b.n	800e034 <get_response+0x194>
  } else {
    return ACK;
 800e030:	f240 1301 	movw	r3, #257	; 0x101
  }
}
 800e034:	4618      	mov	r0, r3
 800e036:	3710      	adds	r7, #16
 800e038:	46bd      	mov	sp, r7
 800e03a:	bd80      	pop	{r7, pc}
 800e03c:	2001185c 	.word	0x2001185c
 800e040:	20011864 	.word	0x20011864

0800e044 <get_cmd_vel_response>:

int32_t get_cmd_vel_response(struct twist_msg *twist_msg, int32_t cmd_type,
                             int32_t cmd_data) {
 800e044:	b580      	push	{r7, lr}
 800e046:	b086      	sub	sp, #24
 800e048:	af00      	add	r7, sp, #0
 800e04a:	60f8      	str	r0, [r7, #12]
 800e04c:	60b9      	str	r1, [r7, #8]
 800e04e:	607a      	str	r2, [r7, #4]
  float cmd_vel_data = int32_to_float_scaled(cmd_data);
 800e050:	6878      	ldr	r0, [r7, #4]
 800e052:	f000 f9a3 	bl	800e39c <int32_to_float_scaled>
 800e056:	ed87 0a05 	vstr	s0, [r7, #20]
  switch (cmd_type) {
 800e05a:	68bb      	ldr	r3, [r7, #8]
 800e05c:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 800e060:	2b05      	cmp	r3, #5
 800e062:	d827      	bhi.n	800e0b4 <get_cmd_vel_response+0x70>
 800e064:	a201      	add	r2, pc, #4	; (adr r2, 800e06c <get_cmd_vel_response+0x28>)
 800e066:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e06a:	bf00      	nop
 800e06c:	0800e085 	.word	0x0800e085
 800e070:	0800e08d 	.word	0x0800e08d
 800e074:	0800e095 	.word	0x0800e095
 800e078:	0800e09d 	.word	0x0800e09d
 800e07c:	0800e0a5 	.word	0x0800e0a5
 800e080:	0800e0ad 	.word	0x0800e0ad
  case CMD_VEL_LINEAR_X:
    twist_msg->linear.x = cmd_vel_data;
 800e084:	68fb      	ldr	r3, [r7, #12]
 800e086:	697a      	ldr	r2, [r7, #20]
 800e088:	601a      	str	r2, [r3, #0]
    break;
 800e08a:	e02b      	b.n	800e0e4 <get_cmd_vel_response+0xa0>
  case CMD_VEL_LINEAR_Y:
    twist_msg->linear.y = cmd_vel_data;
 800e08c:	68fb      	ldr	r3, [r7, #12]
 800e08e:	697a      	ldr	r2, [r7, #20]
 800e090:	605a      	str	r2, [r3, #4]
    break;
 800e092:	e027      	b.n	800e0e4 <get_cmd_vel_response+0xa0>
  case CMD_VEL_LINEAR_Z:
    twist_msg->linear.z = cmd_vel_data;
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	697a      	ldr	r2, [r7, #20]
 800e098:	609a      	str	r2, [r3, #8]
    break;
 800e09a:	e023      	b.n	800e0e4 <get_cmd_vel_response+0xa0>
  case CMD_VEL_ANGULAR_X:
    twist_msg->angular.x = cmd_vel_data;
 800e09c:	68fb      	ldr	r3, [r7, #12]
 800e09e:	697a      	ldr	r2, [r7, #20]
 800e0a0:	60da      	str	r2, [r3, #12]
    break;
 800e0a2:	e01f      	b.n	800e0e4 <get_cmd_vel_response+0xa0>
  case CMD_VEL_ANGULAR_Y:
    twist_msg->angular.y = cmd_vel_data;
 800e0a4:	68fb      	ldr	r3, [r7, #12]
 800e0a6:	697a      	ldr	r2, [r7, #20]
 800e0a8:	611a      	str	r2, [r3, #16]
    break;
 800e0aa:	e01b      	b.n	800e0e4 <get_cmd_vel_response+0xa0>
  case CMD_VEL_ANGULAR_Z:
    twist_msg->angular.z = cmd_vel_data;
 800e0ac:	68fb      	ldr	r3, [r7, #12]
 800e0ae:	697a      	ldr	r2, [r7, #20]
 800e0b0:	615a      	str	r2, [r3, #20]
    break;
 800e0b2:	e017      	b.n	800e0e4 <get_cmd_vel_response+0xa0>
  default:
    twist_msg->linear.x = 0;
 800e0b4:	68fb      	ldr	r3, [r7, #12]
 800e0b6:	f04f 0200 	mov.w	r2, #0
 800e0ba:	601a      	str	r2, [r3, #0]
    twist_msg->linear.y = 0;
 800e0bc:	68fb      	ldr	r3, [r7, #12]
 800e0be:	f04f 0200 	mov.w	r2, #0
 800e0c2:	605a      	str	r2, [r3, #4]
    twist_msg->linear.z = 0;
 800e0c4:	68fb      	ldr	r3, [r7, #12]
 800e0c6:	f04f 0200 	mov.w	r2, #0
 800e0ca:	609a      	str	r2, [r3, #8]
    twist_msg->angular.x = 0;
 800e0cc:	68fb      	ldr	r3, [r7, #12]
 800e0ce:	f04f 0200 	mov.w	r2, #0
 800e0d2:	60da      	str	r2, [r3, #12]
    twist_msg->angular.y = 0;
 800e0d4:	68fb      	ldr	r3, [r7, #12]
 800e0d6:	f04f 0200 	mov.w	r2, #0
 800e0da:	611a      	str	r2, [r3, #16]
    twist_msg->angular.z = 0;
 800e0dc:	68fb      	ldr	r3, [r7, #12]
 800e0de:	f04f 0200 	mov.w	r2, #0
 800e0e2:	615a      	str	r2, [r3, #20]
  }
  return ACK;
 800e0e4:	f240 1301 	movw	r3, #257	; 0x101
}
 800e0e8:	4618      	mov	r0, r3
 800e0ea:	3718      	adds	r7, #24
 800e0ec:	46bd      	mov	sp, r7
 800e0ee:	bd80      	pop	{r7, pc}

0800e0f0 <get_odom_response>:

int32_t get_odom_response(struct odom_msg *odom_msg, int32_t odom_type) {
 800e0f0:	b580      	push	{r7, lr}
 800e0f2:	b082      	sub	sp, #8
 800e0f4:	af00      	add	r7, sp, #0
 800e0f6:	6078      	str	r0, [r7, #4]
 800e0f8:	6039      	str	r1, [r7, #0]
  switch (odom_type) {
 800e0fa:	683b      	ldr	r3, [r7, #0]
 800e0fc:	f2a3 3301 	subw	r3, r3, #769	; 0x301
 800e100:	2b12      	cmp	r3, #18
 800e102:	f200 809e 	bhi.w	800e242 <get_odom_response+0x152>
 800e106:	a201      	add	r2, pc, #4	; (adr r2, 800e10c <get_odom_response+0x1c>)
 800e108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e10c:	0800e159 	.word	0x0800e159
 800e110:	0800e16b 	.word	0x0800e16b
 800e114:	0800e17d 	.word	0x0800e17d
 800e118:	0800e18f 	.word	0x0800e18f
 800e11c:	0800e1a1 	.word	0x0800e1a1
 800e120:	0800e1b3 	.word	0x0800e1b3
 800e124:	0800e1c5 	.word	0x0800e1c5
 800e128:	0800e1d7 	.word	0x0800e1d7
 800e12c:	0800e1e9 	.word	0x0800e1e9
 800e130:	0800e243 	.word	0x0800e243
 800e134:	0800e243 	.word	0x0800e243
 800e138:	0800e243 	.word	0x0800e243
 800e13c:	0800e243 	.word	0x0800e243
 800e140:	0800e243 	.word	0x0800e243
 800e144:	0800e243 	.word	0x0800e243
 800e148:	0800e1fb 	.word	0x0800e1fb
 800e14c:	0800e20d 	.word	0x0800e20d
 800e150:	0800e21f 	.word	0x0800e21f
 800e154:	0800e231 	.word	0x0800e231
  case ODOM_POINT_X:
    return float_to_int32_scaled(odom_msg->point.x);
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	edd3 7a00 	vldr	s15, [r3]
 800e15e:	eeb0 0a67 	vmov.f32	s0, s15
 800e162:	f000 f903 	bl	800e36c <float_to_int32_scaled>
 800e166:	4603      	mov	r3, r0
 800e168:	e06d      	b.n	800e246 <get_odom_response+0x156>
  case ODOM_POINT_Y:
    return float_to_int32_scaled(odom_msg->point.y);
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	edd3 7a01 	vldr	s15, [r3, #4]
 800e170:	eeb0 0a67 	vmov.f32	s0, s15
 800e174:	f000 f8fa 	bl	800e36c <float_to_int32_scaled>
 800e178:	4603      	mov	r3, r0
 800e17a:	e064      	b.n	800e246 <get_odom_response+0x156>
  case ODOM_POINT_Z:
    return float_to_int32_scaled(odom_msg->point.z);
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	edd3 7a02 	vldr	s15, [r3, #8]
 800e182:	eeb0 0a67 	vmov.f32	s0, s15
 800e186:	f000 f8f1 	bl	800e36c <float_to_int32_scaled>
 800e18a:	4603      	mov	r3, r0
 800e18c:	e05b      	b.n	800e246 <get_odom_response+0x156>
  case ODOM_QUATERNION_X:
    return float_to_int32_scaled(odom_msg->quaternion.x);
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	edd3 7a03 	vldr	s15, [r3, #12]
 800e194:	eeb0 0a67 	vmov.f32	s0, s15
 800e198:	f000 f8e8 	bl	800e36c <float_to_int32_scaled>
 800e19c:	4603      	mov	r3, r0
 800e19e:	e052      	b.n	800e246 <get_odom_response+0x156>
  case ODOM_QUATERNION_Y:
    return float_to_int32_scaled(odom_msg->quaternion.y);
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	edd3 7a04 	vldr	s15, [r3, #16]
 800e1a6:	eeb0 0a67 	vmov.f32	s0, s15
 800e1aa:	f000 f8df 	bl	800e36c <float_to_int32_scaled>
 800e1ae:	4603      	mov	r3, r0
 800e1b0:	e049      	b.n	800e246 <get_odom_response+0x156>
  case ODOM_QUATERNION_Z:
    return float_to_int32_scaled(odom_msg->quaternion.z);
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	edd3 7a05 	vldr	s15, [r3, #20]
 800e1b8:	eeb0 0a67 	vmov.f32	s0, s15
 800e1bc:	f000 f8d6 	bl	800e36c <float_to_int32_scaled>
 800e1c0:	4603      	mov	r3, r0
 800e1c2:	e040      	b.n	800e246 <get_odom_response+0x156>
  case ODOM_QUATERNION_W:
    return float_to_int32_scaled(odom_msg->quaternion.w);
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	edd3 7a06 	vldr	s15, [r3, #24]
 800e1ca:	eeb0 0a67 	vmov.f32	s0, s15
 800e1ce:	f000 f8cd 	bl	800e36c <float_to_int32_scaled>
 800e1d2:	4603      	mov	r3, r0
 800e1d4:	e037      	b.n	800e246 <get_odom_response+0x156>
  case ODOM_LINEAR_X:
    return float_to_int32_scaled(odom_msg->linear.x);
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	edd3 7a07 	vldr	s15, [r3, #28]
 800e1dc:	eeb0 0a67 	vmov.f32	s0, s15
 800e1e0:	f000 f8c4 	bl	800e36c <float_to_int32_scaled>
 800e1e4:	4603      	mov	r3, r0
 800e1e6:	e02e      	b.n	800e246 <get_odom_response+0x156>
  case ODOM_LINEAR_Y:
    return float_to_int32_scaled(odom_msg->linear.y);
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	edd3 7a08 	vldr	s15, [r3, #32]
 800e1ee:	eeb0 0a67 	vmov.f32	s0, s15
 800e1f2:	f000 f8bb 	bl	800e36c <float_to_int32_scaled>
 800e1f6:	4603      	mov	r3, r0
 800e1f8:	e025      	b.n	800e246 <get_odom_response+0x156>
  case ODOM_LINEAR_Z:
    return float_to_int32_scaled(odom_msg->linear.z);
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800e200:	eeb0 0a67 	vmov.f32	s0, s15
 800e204:	f000 f8b2 	bl	800e36c <float_to_int32_scaled>
 800e208:	4603      	mov	r3, r0
 800e20a:	e01c      	b.n	800e246 <get_odom_response+0x156>
  case ODOM_ANGULAR_X:
    return float_to_int32_scaled(odom_msg->angular.x);
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800e212:	eeb0 0a67 	vmov.f32	s0, s15
 800e216:	f000 f8a9 	bl	800e36c <float_to_int32_scaled>
 800e21a:	4603      	mov	r3, r0
 800e21c:	e013      	b.n	800e246 <get_odom_response+0x156>
  case ODOM_ANGULAR_Y:
    return float_to_int32_scaled(odom_msg->angular.y);
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800e224:	eeb0 0a67 	vmov.f32	s0, s15
 800e228:	f000 f8a0 	bl	800e36c <float_to_int32_scaled>
 800e22c:	4603      	mov	r3, r0
 800e22e:	e00a      	b.n	800e246 <get_odom_response+0x156>
  case ODOM_ANGULAR_Z:
    return float_to_int32_scaled(odom_msg->angular.z);
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800e236:	eeb0 0a67 	vmov.f32	s0, s15
 800e23a:	f000 f897 	bl	800e36c <float_to_int32_scaled>
 800e23e:	4603      	mov	r3, r0
 800e240:	e001      	b.n	800e246 <get_odom_response+0x156>
  default:
    return ACK;
 800e242:	f240 1301 	movw	r3, #257	; 0x101
  }
  return ACK;
}
 800e246:	4618      	mov	r0, r3
 800e248:	3708      	adds	r7, #8
 800e24a:	46bd      	mov	sp, r7
 800e24c:	bd80      	pop	{r7, pc}
 800e24e:	bf00      	nop

0800e250 <get_imu_response>:

int32_t get_imu_response(struct imu_msg *imu_msg, int32_t imu_type) {
 800e250:	b580      	push	{r7, lr}
 800e252:	b082      	sub	sp, #8
 800e254:	af00      	add	r7, sp, #0
 800e256:	6078      	str	r0, [r7, #4]
 800e258:	6039      	str	r1, [r7, #0]
  switch (imu_type) {
 800e25a:	683b      	ldr	r3, [r7, #0]
 800e25c:	f2a3 4301 	subw	r3, r3, #1025	; 0x401
 800e260:	2b0f      	cmp	r3, #15
 800e262:	d87d      	bhi.n	800e360 <get_imu_response+0x110>
 800e264:	a201      	add	r2, pc, #4	; (adr r2, 800e26c <get_imu_response+0x1c>)
 800e266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e26a:	bf00      	nop
 800e26c:	0800e2ad 	.word	0x0800e2ad
 800e270:	0800e2bf 	.word	0x0800e2bf
 800e274:	0800e2d1 	.word	0x0800e2d1
 800e278:	0800e2e3 	.word	0x0800e2e3
 800e27c:	0800e2f5 	.word	0x0800e2f5
 800e280:	0800e307 	.word	0x0800e307
 800e284:	0800e319 	.word	0x0800e319
 800e288:	0800e32b 	.word	0x0800e32b
 800e28c:	0800e33d 	.word	0x0800e33d
 800e290:	0800e361 	.word	0x0800e361
 800e294:	0800e361 	.word	0x0800e361
 800e298:	0800e361 	.word	0x0800e361
 800e29c:	0800e361 	.word	0x0800e361
 800e2a0:	0800e361 	.word	0x0800e361
 800e2a4:	0800e361 	.word	0x0800e361
 800e2a8:	0800e34f 	.word	0x0800e34f
  case IMU_QUATERNION_X:
    return float_to_int32_scaled(imu_msg->quaternion.x);
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	edd3 7a00 	vldr	s15, [r3]
 800e2b2:	eeb0 0a67 	vmov.f32	s0, s15
 800e2b6:	f000 f859 	bl	800e36c <float_to_int32_scaled>
 800e2ba:	4603      	mov	r3, r0
 800e2bc:	e052      	b.n	800e364 <get_imu_response+0x114>
  case IMU_QUATERNION_Y:
    return float_to_int32_scaled(imu_msg->quaternion.y);
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	edd3 7a01 	vldr	s15, [r3, #4]
 800e2c4:	eeb0 0a67 	vmov.f32	s0, s15
 800e2c8:	f000 f850 	bl	800e36c <float_to_int32_scaled>
 800e2cc:	4603      	mov	r3, r0
 800e2ce:	e049      	b.n	800e364 <get_imu_response+0x114>
  case IMU_QUATERNION_Z:
    return float_to_int32_scaled(imu_msg->quaternion.z);
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	edd3 7a02 	vldr	s15, [r3, #8]
 800e2d6:	eeb0 0a67 	vmov.f32	s0, s15
 800e2da:	f000 f847 	bl	800e36c <float_to_int32_scaled>
 800e2de:	4603      	mov	r3, r0
 800e2e0:	e040      	b.n	800e364 <get_imu_response+0x114>
  case IMU_QUATERNION_W:
    return float_to_int32_scaled(imu_msg->quaternion.w);
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	edd3 7a03 	vldr	s15, [r3, #12]
 800e2e8:	eeb0 0a67 	vmov.f32	s0, s15
 800e2ec:	f000 f83e 	bl	800e36c <float_to_int32_scaled>
 800e2f0:	4603      	mov	r3, r0
 800e2f2:	e037      	b.n	800e364 <get_imu_response+0x114>
  case IMU_ANGULAR_X:
    return float_to_int32_scaled(imu_msg->angular.x);
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	edd3 7a04 	vldr	s15, [r3, #16]
 800e2fa:	eeb0 0a67 	vmov.f32	s0, s15
 800e2fe:	f000 f835 	bl	800e36c <float_to_int32_scaled>
 800e302:	4603      	mov	r3, r0
 800e304:	e02e      	b.n	800e364 <get_imu_response+0x114>
  case IMU_ANGULAR_Y:
    return float_to_int32_scaled(imu_msg->angular.y);
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	edd3 7a05 	vldr	s15, [r3, #20]
 800e30c:	eeb0 0a67 	vmov.f32	s0, s15
 800e310:	f000 f82c 	bl	800e36c <float_to_int32_scaled>
 800e314:	4603      	mov	r3, r0
 800e316:	e025      	b.n	800e364 <get_imu_response+0x114>
  case IMU_ANGULAR_Z:
    return float_to_int32_scaled(imu_msg->angular.z);
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	edd3 7a06 	vldr	s15, [r3, #24]
 800e31e:	eeb0 0a67 	vmov.f32	s0, s15
 800e322:	f000 f823 	bl	800e36c <float_to_int32_scaled>
 800e326:	4603      	mov	r3, r0
 800e328:	e01c      	b.n	800e364 <get_imu_response+0x114>
  case IMU_ACCEL_X:
    return float_to_int32_scaled(imu_msg->accel.x);
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	edd3 7a07 	vldr	s15, [r3, #28]
 800e330:	eeb0 0a67 	vmov.f32	s0, s15
 800e334:	f000 f81a 	bl	800e36c <float_to_int32_scaled>
 800e338:	4603      	mov	r3, r0
 800e33a:	e013      	b.n	800e364 <get_imu_response+0x114>
  case IMU_ACCEL_Y:
    return float_to_int32_scaled(imu_msg->accel.y);
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	edd3 7a08 	vldr	s15, [r3, #32]
 800e342:	eeb0 0a67 	vmov.f32	s0, s15
 800e346:	f000 f811 	bl	800e36c <float_to_int32_scaled>
 800e34a:	4603      	mov	r3, r0
 800e34c:	e00a      	b.n	800e364 <get_imu_response+0x114>
  case IMU_ACCEL_Z:
    return float_to_int32_scaled(imu_msg->accel.z);
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800e354:	eeb0 0a67 	vmov.f32	s0, s15
 800e358:	f000 f808 	bl	800e36c <float_to_int32_scaled>
 800e35c:	4603      	mov	r3, r0
 800e35e:	e001      	b.n	800e364 <get_imu_response+0x114>
  default:
    return ACK;
 800e360:	f240 1301 	movw	r3, #257	; 0x101
  }
  return ACK;
}
 800e364:	4618      	mov	r0, r3
 800e366:	3708      	adds	r7, #8
 800e368:	46bd      	mov	sp, r7
 800e36a:	bd80      	pop	{r7, pc}

0800e36c <float_to_int32_scaled>:

int32_t float_to_int32_scaled(float num) {
 800e36c:	b480      	push	{r7}
 800e36e:	b083      	sub	sp, #12
 800e370:	af00      	add	r7, sp, #0
 800e372:	ed87 0a01 	vstr	s0, [r7, #4]
  return (int32_t)(num * SIGNIFICANT_FIGURE);
 800e376:	edd7 7a01 	vldr	s15, [r7, #4]
 800e37a:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800e398 <float_to_int32_scaled+0x2c>
 800e37e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e382:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e386:	ee17 3a90 	vmov	r3, s15
}
 800e38a:	4618      	mov	r0, r3
 800e38c:	370c      	adds	r7, #12
 800e38e:	46bd      	mov	sp, r7
 800e390:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e394:	4770      	bx	lr
 800e396:	bf00      	nop
 800e398:	47c35000 	.word	0x47c35000

0800e39c <int32_to_float_scaled>:
float int32_to_float_scaled(int32_t num) {
 800e39c:	b480      	push	{r7}
 800e39e:	b083      	sub	sp, #12
 800e3a0:	af00      	add	r7, sp, #0
 800e3a2:	6078      	str	r0, [r7, #4]
  return (float)num / SIGNIFICANT_FIGURE;
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	ee07 3a90 	vmov	s15, r3
 800e3aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e3ae:	ed9f 7a06 	vldr	s14, [pc, #24]	; 800e3c8 <int32_to_float_scaled+0x2c>
 800e3b2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800e3b6:	eef0 7a66 	vmov.f32	s15, s13
}
 800e3ba:	eeb0 0a67 	vmov.f32	s0, s15
 800e3be:	370c      	adds	r7, #12
 800e3c0:	46bd      	mov	sp, r7
 800e3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3c6:	4770      	bx	lr
 800e3c8:	47c35000 	.word	0x47c35000

0800e3cc <int32_to_bytes>:

uint8_t int32_to_bytes(int32_t value, uint8_t *bytes, int8_t is_big_endian) {
 800e3cc:	b480      	push	{r7}
 800e3ce:	b085      	sub	sp, #20
 800e3d0:	af00      	add	r7, sp, #0
 800e3d2:	60f8      	str	r0, [r7, #12]
 800e3d4:	60b9      	str	r1, [r7, #8]
 800e3d6:	4613      	mov	r3, r2
 800e3d8:	71fb      	strb	r3, [r7, #7]
  // Converts an int32_t value to a byte array.
  if (is_big_endian) {
 800e3da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	d016      	beq.n	800e410 <int32_to_bytes+0x44>
    bytes[0] = (value >> 24) & 0xFF;
 800e3e2:	68fb      	ldr	r3, [r7, #12]
 800e3e4:	0e1b      	lsrs	r3, r3, #24
 800e3e6:	b2da      	uxtb	r2, r3
 800e3e8:	68bb      	ldr	r3, [r7, #8]
 800e3ea:	701a      	strb	r2, [r3, #0]
    bytes[1] = (value >> 16) & 0xFF;
 800e3ec:	68fb      	ldr	r3, [r7, #12]
 800e3ee:	141a      	asrs	r2, r3, #16
 800e3f0:	68bb      	ldr	r3, [r7, #8]
 800e3f2:	3301      	adds	r3, #1
 800e3f4:	b2d2      	uxtb	r2, r2
 800e3f6:	701a      	strb	r2, [r3, #0]
    bytes[2] = (value >> 8) & 0xFF;
 800e3f8:	68fb      	ldr	r3, [r7, #12]
 800e3fa:	121a      	asrs	r2, r3, #8
 800e3fc:	68bb      	ldr	r3, [r7, #8]
 800e3fe:	3302      	adds	r3, #2
 800e400:	b2d2      	uxtb	r2, r2
 800e402:	701a      	strb	r2, [r3, #0]
    bytes[3] = value & 0xFF;
 800e404:	68bb      	ldr	r3, [r7, #8]
 800e406:	3303      	adds	r3, #3
 800e408:	68fa      	ldr	r2, [r7, #12]
 800e40a:	b2d2      	uxtb	r2, r2
 800e40c:	701a      	strb	r2, [r3, #0]
 800e40e:	e015      	b.n	800e43c <int32_to_bytes+0x70>
  } else {
    bytes[0] = value & 0xFF;
 800e410:	68fb      	ldr	r3, [r7, #12]
 800e412:	b2da      	uxtb	r2, r3
 800e414:	68bb      	ldr	r3, [r7, #8]
 800e416:	701a      	strb	r2, [r3, #0]
    bytes[1] = (value >> 8) & 0xFF;
 800e418:	68fb      	ldr	r3, [r7, #12]
 800e41a:	121a      	asrs	r2, r3, #8
 800e41c:	68bb      	ldr	r3, [r7, #8]
 800e41e:	3301      	adds	r3, #1
 800e420:	b2d2      	uxtb	r2, r2
 800e422:	701a      	strb	r2, [r3, #0]
    bytes[2] = (value >> 16) & 0xFF;
 800e424:	68fb      	ldr	r3, [r7, #12]
 800e426:	141a      	asrs	r2, r3, #16
 800e428:	68bb      	ldr	r3, [r7, #8]
 800e42a:	3302      	adds	r3, #2
 800e42c:	b2d2      	uxtb	r2, r2
 800e42e:	701a      	strb	r2, [r3, #0]
    bytes[3] = (value >> 24) & 0xFF;
 800e430:	68fb      	ldr	r3, [r7, #12]
 800e432:	0e1a      	lsrs	r2, r3, #24
 800e434:	68bb      	ldr	r3, [r7, #8]
 800e436:	3303      	adds	r3, #3
 800e438:	b2d2      	uxtb	r2, r2
 800e43a:	701a      	strb	r2, [r3, #0]
  }
  return 0;
 800e43c:	2300      	movs	r3, #0
}
 800e43e:	4618      	mov	r0, r3
 800e440:	3714      	adds	r7, #20
 800e442:	46bd      	mov	sp, r7
 800e444:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e448:	4770      	bx	lr

0800e44a <bytes_to_int32>:

int32_t bytes_to_int32(uint8_t *bytes, int8_t is_big_endian) {
 800e44a:	b480      	push	{r7}
 800e44c:	b085      	sub	sp, #20
 800e44e:	af00      	add	r7, sp, #0
 800e450:	6078      	str	r0, [r7, #4]
 800e452:	460b      	mov	r3, r1
 800e454:	70fb      	strb	r3, [r7, #3]
  //  Converts a byte array to an int32_t value.

  int32_t value = 0;
 800e456:	2300      	movs	r3, #0
 800e458:	60fb      	str	r3, [r7, #12]
  if (is_big_endian) {
 800e45a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d012      	beq.n	800e488 <bytes_to_int32+0x3e>
    // Big-endian: most significant byte first
    value = (bytes[0] << 24) | (bytes[1] << 16) | (bytes[2] << 8) | bytes[3];
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	781b      	ldrb	r3, [r3, #0]
 800e466:	061a      	lsls	r2, r3, #24
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	3301      	adds	r3, #1
 800e46c:	781b      	ldrb	r3, [r3, #0]
 800e46e:	041b      	lsls	r3, r3, #16
 800e470:	431a      	orrs	r2, r3
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	3302      	adds	r3, #2
 800e476:	781b      	ldrb	r3, [r3, #0]
 800e478:	021b      	lsls	r3, r3, #8
 800e47a:	4313      	orrs	r3, r2
 800e47c:	687a      	ldr	r2, [r7, #4]
 800e47e:	3203      	adds	r2, #3
 800e480:	7812      	ldrb	r2, [r2, #0]
 800e482:	4313      	orrs	r3, r2
 800e484:	60fb      	str	r3, [r7, #12]
 800e486:	e011      	b.n	800e4ac <bytes_to_int32+0x62>
  } else {
    // Little-endian: least significant byte first
    value = (bytes[3] << 24) | (bytes[2] << 16) | (bytes[1] << 8) | bytes[0];
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	3303      	adds	r3, #3
 800e48c:	781b      	ldrb	r3, [r3, #0]
 800e48e:	061a      	lsls	r2, r3, #24
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	3302      	adds	r3, #2
 800e494:	781b      	ldrb	r3, [r3, #0]
 800e496:	041b      	lsls	r3, r3, #16
 800e498:	431a      	orrs	r2, r3
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	3301      	adds	r3, #1
 800e49e:	781b      	ldrb	r3, [r3, #0]
 800e4a0:	021b      	lsls	r3, r3, #8
 800e4a2:	4313      	orrs	r3, r2
 800e4a4:	687a      	ldr	r2, [r7, #4]
 800e4a6:	7812      	ldrb	r2, [r2, #0]
 800e4a8:	4313      	orrs	r3, r2
 800e4aa:	60fb      	str	r3, [r7, #12]
  }
  return value;
 800e4ac:	68fb      	ldr	r3, [r7, #12]
}
 800e4ae:	4618      	mov	r0, r3
 800e4b0:	3714      	adds	r7, #20
 800e4b2:	46bd      	mov	sp, r7
 800e4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4b8:	4770      	bx	lr
	...

0800e4bc <can_manage_init>:
struct can_manage_obj can1_manage;

static uint8_t can1_tx_fifo_buff[CAN1_TX_FIFO_SIZE];

void can_manage_init(void)
{
 800e4bc:	b580      	push	{r7, lr}
 800e4be:	b08c      	sub	sp, #48	; 0x30
 800e4c0:	af00      	add	r7, sp, #0
  can1_manage.is_sending = 0;
 800e4c2:	4b2d      	ldr	r3, [pc, #180]	; (800e578 <can_manage_init+0xbc>)
 800e4c4:	2200      	movs	r2, #0
 800e4c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  can1_manage.hcan = &hcan1;
 800e4ca:	4b2b      	ldr	r3, [pc, #172]	; (800e578 <can_manage_init+0xbc>)
 800e4cc:	4a2b      	ldr	r2, [pc, #172]	; (800e57c <can_manage_init+0xc0>)
 800e4ce:	601a      	str	r2, [r3, #0]

  for (int i = 0; i < MAX_CAN_REGISTER_NUM; i++)
 800e4d0:	2300      	movs	r3, #0
 800e4d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e4d4:	e008      	b.n	800e4e8 <can_manage_init+0x2c>
  {
    can1_manage.can_rec_callback[i] = NULL;
 800e4d6:	4a28      	ldr	r2, [pc, #160]	; (800e578 <can_manage_init+0xbc>)
 800e4d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4da:	330a      	adds	r3, #10
 800e4dc:	2100      	movs	r1, #0
 800e4de:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (int i = 0; i < MAX_CAN_REGISTER_NUM; i++)
 800e4e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4e4:	3301      	adds	r3, #1
 800e4e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e4e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4ea:	2b04      	cmp	r3, #4
 800e4ec:	ddf3      	ble.n	800e4d6 <can_manage_init+0x1a>
  }

  fifo_init(&(can1_manage.tx_fifo),
 800e4ee:	2340      	movs	r3, #64	; 0x40
 800e4f0:	2210      	movs	r2, #16
 800e4f2:	4923      	ldr	r1, [pc, #140]	; (800e580 <can_manage_init+0xc4>)
 800e4f4:	4823      	ldr	r0, [pc, #140]	; (800e584 <can_manage_init+0xc8>)
 800e4f6:	f002 ff25 	bl	8011344 <fifo_init>
            can1_tx_fifo_buff,
            sizeof(struct can_std_msg),
            CAN1_TX_FIFO_UNIT_NUM);

  CAN_FilterTypeDef can_filter_st;
  can_filter_st.FilterActivation = ENABLE;
 800e4fa:	2301      	movs	r3, #1
 800e4fc:	627b      	str	r3, [r7, #36]	; 0x24
  can_filter_st.FilterMode = CAN_FILTERMODE_IDMASK;
 800e4fe:	2300      	movs	r3, #0
 800e500:	61fb      	str	r3, [r7, #28]
  can_filter_st.FilterScale = CAN_FILTERSCALE_32BIT;
 800e502:	2301      	movs	r3, #1
 800e504:	623b      	str	r3, [r7, #32]
  can_filter_st.FilterIdHigh = 0x0000;
 800e506:	2300      	movs	r3, #0
 800e508:	607b      	str	r3, [r7, #4]
  can_filter_st.FilterIdLow = 0x0000;
 800e50a:	2300      	movs	r3, #0
 800e50c:	60bb      	str	r3, [r7, #8]
  can_filter_st.FilterMaskIdHigh = 0x0000;
 800e50e:	2300      	movs	r3, #0
 800e510:	60fb      	str	r3, [r7, #12]
  can_filter_st.FilterMaskIdLow = 0x0000;
 800e512:	2300      	movs	r3, #0
 800e514:	613b      	str	r3, [r7, #16]
  can_filter_st.FilterBank = 0;
 800e516:	2300      	movs	r3, #0
 800e518:	61bb      	str	r3, [r7, #24]
  can_filter_st.FilterFIFOAssignment = CAN_RX_FIFO0;
 800e51a:	2300      	movs	r3, #0
 800e51c:	617b      	str	r3, [r7, #20]
  HAL_CAN_ConfigFilter(&hcan1, &can_filter_st);
 800e51e:	1d3b      	adds	r3, r7, #4
 800e520:	4619      	mov	r1, r3
 800e522:	4816      	ldr	r0, [pc, #88]	; (800e57c <can_manage_init+0xc0>)
 800e524:	f7f3 ffb8 	bl	8002498 <HAL_CAN_ConfigFilter>
  HAL_CAN_Start(&hcan1);
 800e528:	4814      	ldr	r0, [pc, #80]	; (800e57c <can_manage_init+0xc0>)
 800e52a:	f7f4 f895 	bl	8002658 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 800e52e:	2102      	movs	r1, #2
 800e530:	4812      	ldr	r0, [pc, #72]	; (800e57c <can_manage_init+0xc0>)
 800e532:	f7f4 fafc 	bl	8002b2e <HAL_CAN_ActivateNotification>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_TX_MAILBOX_EMPTY);
 800e536:	2101      	movs	r1, #1
 800e538:	4810      	ldr	r0, [pc, #64]	; (800e57c <can_manage_init+0xc0>)
 800e53a:	f7f4 faf8 	bl	8002b2e <HAL_CAN_ActivateNotification>

  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_ERROR);
 800e53e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800e542:	480e      	ldr	r0, [pc, #56]	; (800e57c <can_manage_init+0xc0>)
 800e544:	f7f4 faf3 	bl	8002b2e <HAL_CAN_ActivateNotification>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_ERROR_WARNING);
 800e548:	f44f 7180 	mov.w	r1, #256	; 0x100
 800e54c:	480b      	ldr	r0, [pc, #44]	; (800e57c <can_manage_init+0xc0>)
 800e54e:	f7f4 faee 	bl	8002b2e <HAL_CAN_ActivateNotification>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_BUSOFF);
 800e552:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800e556:	4809      	ldr	r0, [pc, #36]	; (800e57c <can_manage_init+0xc0>)
 800e558:	f7f4 fae9 	bl	8002b2e <HAL_CAN_ActivateNotification>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_ERROR_PASSIVE);
 800e55c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e560:	4806      	ldr	r0, [pc, #24]	; (800e57c <can_manage_init+0xc0>)
 800e562:	f7f4 fae4 	bl	8002b2e <HAL_CAN_ActivateNotification>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_LAST_ERROR_CODE);
 800e566:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800e56a:	4804      	ldr	r0, [pc, #16]	; (800e57c <can_manage_init+0xc0>)
 800e56c:	f7f4 fadf 	bl	8002b2e <HAL_CAN_ActivateNotification>

  return;
 800e570:	bf00      	nop
}
 800e572:	3730      	adds	r7, #48	; 0x30
 800e574:	46bd      	mov	sp, r7
 800e576:	bd80      	pop	{r7, pc}
 800e578:	20011868 	.word	0x20011868
 800e57c:	200001c4 	.word	0x200001c4
 800e580:	200118a4 	.word	0x200118a4
 800e584:	2001186c 	.word	0x2001186c

0800e588 <can_msg_bytes_send>:

uint32_t can_msg_bytes_send(CAN_HandleTypeDef *hcan,
                            uint8_t *data, uint16_t len, uint16_t std_id)
{
 800e588:	b590      	push	{r4, r7, lr}
 800e58a:	b093      	sub	sp, #76	; 0x4c
 800e58c:	af00      	add	r7, sp, #0
 800e58e:	60f8      	str	r0, [r7, #12]
 800e590:	60b9      	str	r1, [r7, #8]
 800e592:	4611      	mov	r1, r2
 800e594:	461a      	mov	r2, r3
 800e596:	460b      	mov	r3, r1
 800e598:	80fb      	strh	r3, [r7, #6]
 800e59a:	4613      	mov	r3, r2
 800e59c:	80bb      	strh	r3, [r7, #4]
  uint8_t *send_ptr;
  uint16_t send_num;
  can_manage_obj_t m_obj;
  struct can_std_msg msg;

  send_ptr = data;
 800e59e:	68bb      	ldr	r3, [r7, #8]
 800e5a0:	647b      	str	r3, [r7, #68]	; 0x44
  msg.std_id = std_id;
 800e5a2:	88bb      	ldrh	r3, [r7, #4]
 800e5a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  send_num = 0;
 800e5a6:	2300      	movs	r3, #0
 800e5a8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  if (hcan == &hcan1)
 800e5ac:	68fb      	ldr	r3, [r7, #12]
 800e5ae:	4a4a      	ldr	r2, [pc, #296]	; (800e6d8 <can_msg_bytes_send+0x150>)
 800e5b0:	4293      	cmp	r3, r2
 800e5b2:	d102      	bne.n	800e5ba <can_msg_bytes_send+0x32>
  {
    m_obj = &can1_manage;
 800e5b4:	4b49      	ldr	r3, [pc, #292]	; (800e6dc <can_msg_bytes_send+0x154>)
 800e5b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  else
  {
    return 0;
  }

  while (send_num < len)
 800e5b8:	e044      	b.n	800e644 <can_msg_bytes_send+0xbc>
    return 0;
 800e5ba:	2300      	movs	r3, #0
 800e5bc:	e088      	b.n	800e6d0 <can_msg_bytes_send+0x148>
  {
    if (fifo_is_full(&(m_obj->tx_fifo)))
 800e5be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e5c0:	3304      	adds	r3, #4
 800e5c2:	4618      	mov	r0, r3
 800e5c4:	f002 ffb9 	bl	801153a <fifo_is_full>
 800e5c8:	4603      	mov	r3, r0
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	d004      	beq.n	800e5d8 <can_msg_bytes_send+0x50>
    {
      //can is error
      m_obj->is_sending = 0;
 800e5ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e5d0:	2200      	movs	r2, #0
 800e5d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      break;
 800e5d6:	e03a      	b.n	800e64e <can_msg_bytes_send+0xc6>
    }

    if (len - send_num >= 8)
 800e5d8:	88fa      	ldrh	r2, [r7, #6]
 800e5da:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e5de:	1ad3      	subs	r3, r2, r3
 800e5e0:	2b07      	cmp	r3, #7
 800e5e2:	dd03      	ble.n	800e5ec <can_msg_bytes_send+0x64>
    {
      msg.dlc = 8;
 800e5e4:	2308      	movs	r3, #8
 800e5e6:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 800e5ea:	e008      	b.n	800e5fe <can_msg_bytes_send+0x76>
    }
    else
    {
      msg.dlc = len - send_num;
 800e5ec:	88fb      	ldrh	r3, [r7, #6]
 800e5ee:	b2da      	uxtb	r2, r3
 800e5f0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e5f4:	b2db      	uxtb	r3, r3
 800e5f6:	1ad3      	subs	r3, r2, r3
 800e5f8:	b2db      	uxtb	r3, r3
 800e5fa:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    }

    //memcpy(msg.data, data, msg.dlc);
    *((uint32_t *)(msg.data)) = *((uint32_t *)(send_ptr));
 800e5fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e602:	3305      	adds	r3, #5
 800e604:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e606:	6812      	ldr	r2, [r2, #0]
 800e608:	601a      	str	r2, [r3, #0]
    *((uint32_t *)(msg.data + 4)) = *((uint32_t *)(send_ptr + 4));
 800e60a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e60e:	3305      	adds	r3, #5
 800e610:	3304      	adds	r3, #4
 800e612:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e614:	6852      	ldr	r2, [r2, #4]
 800e616:	601a      	str	r2, [r3, #0]

    send_ptr += msg.dlc;
 800e618:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800e61c:	461a      	mov	r2, r3
 800e61e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e620:	4413      	add	r3, r2
 800e622:	647b      	str	r3, [r7, #68]	; 0x44
    send_num += msg.dlc;
 800e624:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800e628:	b29a      	uxth	r2, r3
 800e62a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e62e:	4413      	add	r3, r2
 800e630:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

    fifo_put(&(m_obj->tx_fifo), &msg);
 800e634:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e636:	3304      	adds	r3, #4
 800e638:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800e63c:	4611      	mov	r1, r2
 800e63e:	4618      	mov	r0, r3
 800e640:	f002 feaa 	bl	8011398 <fifo_put>
  while (send_num < len)
 800e644:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e648:	88fb      	ldrh	r3, [r7, #6]
 800e64a:	429a      	cmp	r2, r3
 800e64c:	d3b7      	bcc.n	800e5be <can_msg_bytes_send+0x36>
  }

  if ((m_obj->is_sending) == 0 && (!(fifo_is_empty(&(m_obj->tx_fifo)))))
 800e64e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e650:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e654:	2b00      	cmp	r3, #0
 800e656:	d139      	bne.n	800e6cc <can_msg_bytes_send+0x144>
 800e658:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e65a:	3304      	adds	r3, #4
 800e65c:	4618      	mov	r0, r3
 800e65e:	f002 ff5b 	bl	8011518 <fifo_is_empty>
 800e662:	4603      	mov	r3, r0
 800e664:	2b00      	cmp	r3, #0
 800e666:	d131      	bne.n	800e6cc <can_msg_bytes_send+0x144>
  {
    CAN_TxHeaderTypeDef header;
    uint32_t send_mail_box;

    header.StdId = std_id;
 800e668:	88bb      	ldrh	r3, [r7, #4]
 800e66a:	617b      	str	r3, [r7, #20]
    header.IDE = CAN_ID_STD;
 800e66c:	2300      	movs	r3, #0
 800e66e:	61fb      	str	r3, [r7, #28]
    header.RTR = CAN_RTR_DATA;
 800e670:	2300      	movs	r3, #0
 800e672:	623b      	str	r3, [r7, #32]

    while (HAL_CAN_GetTxMailboxesFreeLevel(m_obj->hcan) && (!(fifo_is_empty(&(m_obj->tx_fifo)))))
 800e674:	e01a      	b.n	800e6ac <can_msg_bytes_send+0x124>
    {
      fifo_get(&(m_obj->tx_fifo), &msg);
 800e676:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e678:	3304      	adds	r3, #4
 800e67a:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800e67e:	4611      	mov	r1, r2
 800e680:	4618      	mov	r0, r3
 800e682:	f002 fecf 	bl	8011424 <fifo_get>
      header.DLC = msg.dlc;
 800e686:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800e68a:	627b      	str	r3, [r7, #36]	; 0x24
      HAL_CAN_AddTxMessage(m_obj->hcan, &header, msg.data, &send_mail_box);
 800e68c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e68e:	6818      	ldr	r0, [r3, #0]
 800e690:	f107 0410 	add.w	r4, r7, #16
 800e694:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e698:	1d5a      	adds	r2, r3, #5
 800e69a:	f107 0114 	add.w	r1, r7, #20
 800e69e:	4623      	mov	r3, r4
 800e6a0:	f7f4 f81e 	bl	80026e0 <HAL_CAN_AddTxMessage>

      m_obj->is_sending = 1;
 800e6a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e6a6:	2201      	movs	r2, #1
 800e6a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    while (HAL_CAN_GetTxMailboxesFreeLevel(m_obj->hcan) && (!(fifo_is_empty(&(m_obj->tx_fifo)))))
 800e6ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e6ae:	681b      	ldr	r3, [r3, #0]
 800e6b0:	4618      	mov	r0, r3
 800e6b2:	f7f4 f8e5 	bl	8002880 <HAL_CAN_GetTxMailboxesFreeLevel>
 800e6b6:	4603      	mov	r3, r0
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	d007      	beq.n	800e6cc <can_msg_bytes_send+0x144>
 800e6bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e6be:	3304      	adds	r3, #4
 800e6c0:	4618      	mov	r0, r3
 800e6c2:	f002 ff29 	bl	8011518 <fifo_is_empty>
 800e6c6:	4603      	mov	r3, r0
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d0d4      	beq.n	800e676 <can_msg_bytes_send+0xee>
    }
  }

  return send_num;
 800e6cc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
}
 800e6d0:	4618      	mov	r0, r3
 800e6d2:	374c      	adds	r7, #76	; 0x4c
 800e6d4:	46bd      	mov	sp, r7
 800e6d6:	bd90      	pop	{r4, r7, pc}
 800e6d8:	200001c4 	.word	0x200001c4
 800e6dc:	20011868 	.word	0x20011868

0800e6e0 <can_fifo0_rx_callback_register>:

int32_t can_fifo0_rx_callback_register(can_manage_obj_t m_obj, can_stdmsg_rx_callback_t fun)
{
 800e6e0:	b480      	push	{r7}
 800e6e2:	b085      	sub	sp, #20
 800e6e4:	af00      	add	r7, sp, #0
 800e6e6:	6078      	str	r0, [r7, #4]
 800e6e8:	6039      	str	r1, [r7, #0]
  for (int i = 0; i < MAX_CAN_REGISTER_NUM; i++)
 800e6ea:	2300      	movs	r3, #0
 800e6ec:	60fb      	str	r3, [r7, #12]
 800e6ee:	e011      	b.n	800e714 <can_fifo0_rx_callback_register+0x34>
  {
    if (m_obj->can_rec_callback[i] == NULL)
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	68fa      	ldr	r2, [r7, #12]
 800e6f4:	320a      	adds	r2, #10
 800e6f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	d107      	bne.n	800e70e <can_fifo0_rx_callback_register+0x2e>
    {
      m_obj->can_rec_callback[i] = fun;
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	68fa      	ldr	r2, [r7, #12]
 800e702:	320a      	adds	r2, #10
 800e704:	6839      	ldr	r1, [r7, #0]
 800e706:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      return i;
 800e70a:	68fb      	ldr	r3, [r7, #12]
 800e70c:	e007      	b.n	800e71e <can_fifo0_rx_callback_register+0x3e>
  for (int i = 0; i < MAX_CAN_REGISTER_NUM; i++)
 800e70e:	68fb      	ldr	r3, [r7, #12]
 800e710:	3301      	adds	r3, #1
 800e712:	60fb      	str	r3, [r7, #12]
 800e714:	68fb      	ldr	r3, [r7, #12]
 800e716:	2b04      	cmp	r3, #4
 800e718:	ddea      	ble.n	800e6f0 <can_fifo0_rx_callback_register+0x10>
    }
  }
  return -1;
 800e71a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800e71e:	4618      	mov	r0, r3
 800e720:	3714      	adds	r7, #20
 800e722:	46bd      	mov	sp, r7
 800e724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e728:	4770      	bx	lr

0800e72a <can_tx_mailbox_complete_hanle>:
static void can_tx_mailbox_complete_hanle(can_manage_obj_t m_obj)
{
 800e72a:	b5b0      	push	{r4, r5, r7, lr}
 800e72c:	b090      	sub	sp, #64	; 0x40
 800e72e:	af00      	add	r7, sp, #0
 800e730:	6078      	str	r0, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800e732:	f3ef 8310 	mrs	r3, PRIMASK
 800e736:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800e738:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  struct can_std_msg msg;
  CAN_TxHeaderTypeDef header;
  uint32_t send_mail_box;

  FIFO_CPU_SR_TYPE cpu_sr;
  cpu_sr = FIFO_GET_CPU_SR();
 800e73a:	461d      	mov	r5, r3
  __ASM volatile ("cpsid i" : : : "memory");
 800e73c:	b672      	cpsid	i
}
 800e73e:	bf00      	nop
  FIFO_ENTER_CRITICAL();

  if (!fifo_is_empty(&(m_obj->tx_fifo)))
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	3304      	adds	r3, #4
 800e744:	4618      	mov	r0, r3
 800e746:	f002 fee7 	bl	8011518 <fifo_is_empty>
 800e74a:	4603      	mov	r3, r0
 800e74c:	2b00      	cmp	r3, #0
 800e74e:	d133      	bne.n	800e7b8 <can_tx_mailbox_complete_hanle+0x8e>
  {
    while (!fifo_is_empty(&(m_obj->tx_fifo)))
 800e750:	e029      	b.n	800e7a6 <can_tx_mailbox_complete_hanle+0x7c>
    {
      if (HAL_CAN_GetTxMailboxesFreeLevel(m_obj->hcan))
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	681b      	ldr	r3, [r3, #0]
 800e756:	4618      	mov	r0, r3
 800e758:	f7f4 f892 	bl	8002880 <HAL_CAN_GetTxMailboxesFreeLevel>
 800e75c:	4603      	mov	r3, r0
 800e75e:	2b00      	cmp	r3, #0
 800e760:	d01d      	beq.n	800e79e <can_tx_mailbox_complete_hanle+0x74>
      {

        fifo_get_noprotect(&(m_obj->tx_fifo), &msg);
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	3304      	adds	r3, #4
 800e766:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800e76a:	4611      	mov	r1, r2
 800e76c:	4618      	mov	r0, r3
 800e76e:	f002 fe9f 	bl	80114b0 <fifo_get_noprotect>

        header.StdId = msg.std_id;
 800e772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e774:	613b      	str	r3, [r7, #16]
        header.DLC = msg.dlc;
 800e776:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800e77a:	623b      	str	r3, [r7, #32]
        header.IDE = CAN_ID_STD;
 800e77c:	2300      	movs	r3, #0
 800e77e:	61bb      	str	r3, [r7, #24]
        header.RTR = CAN_RTR_DATA;
 800e780:	2300      	movs	r3, #0
 800e782:	61fb      	str	r3, [r7, #28]

        HAL_CAN_AddTxMessage(m_obj->hcan, &header, msg.data, &send_mail_box);
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	6818      	ldr	r0, [r3, #0]
 800e788:	f107 040c 	add.w	r4, r7, #12
 800e78c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e790:	1d5a      	adds	r2, r3, #5
 800e792:	f107 0110 	add.w	r1, r7, #16
 800e796:	4623      	mov	r3, r4
 800e798:	f7f3 ffa2 	bl	80026e0 <HAL_CAN_AddTxMessage>
 800e79c:	e003      	b.n	800e7a6 <can_tx_mailbox_complete_hanle+0x7c>
      }
      else
      {
        m_obj->is_sending = 0;
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	2200      	movs	r2, #0
 800e7a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    while (!fifo_is_empty(&(m_obj->tx_fifo)))
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	3304      	adds	r3, #4
 800e7aa:	4618      	mov	r0, r3
 800e7ac:	f002 feb4 	bl	8011518 <fifo_is_empty>
 800e7b0:	4603      	mov	r3, r0
 800e7b2:	2b00      	cmp	r3, #0
 800e7b4:	d0cd      	beq.n	800e752 <can_tx_mailbox_complete_hanle+0x28>
 800e7b6:	e003      	b.n	800e7c0 <can_tx_mailbox_complete_hanle+0x96>
      }
    }
  }
  else
  {
    m_obj->is_sending = 0;
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	2200      	movs	r2, #0
 800e7bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800e7c0:	63bd      	str	r5, [r7, #56]	; 0x38
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e7c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7c4:	f383 8810 	msr	PRIMASK, r3
}
 800e7c8:	bf00      	nop
  }

  FIFO_RESTORE_CPU_SR(cpu_sr);

  return;
 800e7ca:	bf00      	nop
}
 800e7cc:	3740      	adds	r7, #64	; 0x40
 800e7ce:	46bd      	mov	sp, r7
 800e7d0:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800e7d4 <HAL_CAN_TxMailbox0CompleteCallback>:

void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800e7d4:	b580      	push	{r7, lr}
 800e7d6:	b082      	sub	sp, #8
 800e7d8:	af00      	add	r7, sp, #0
 800e7da:	6078      	str	r0, [r7, #4]
  if (hcan == &hcan1)
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	4a05      	ldr	r2, [pc, #20]	; (800e7f4 <HAL_CAN_TxMailbox0CompleteCallback+0x20>)
 800e7e0:	4293      	cmp	r3, r2
 800e7e2:	d102      	bne.n	800e7ea <HAL_CAN_TxMailbox0CompleteCallback+0x16>
  {
    can_tx_mailbox_complete_hanle(&can1_manage);
 800e7e4:	4804      	ldr	r0, [pc, #16]	; (800e7f8 <HAL_CAN_TxMailbox0CompleteCallback+0x24>)
 800e7e6:	f7ff ffa0 	bl	800e72a <can_tx_mailbox_complete_hanle>
  }
}
 800e7ea:	bf00      	nop
 800e7ec:	3708      	adds	r7, #8
 800e7ee:	46bd      	mov	sp, r7
 800e7f0:	bd80      	pop	{r7, pc}
 800e7f2:	bf00      	nop
 800e7f4:	200001c4 	.word	0x200001c4
 800e7f8:	20011868 	.word	0x20011868

0800e7fc <HAL_CAN_TxMailbox1CompleteCallback>:

void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800e7fc:	b580      	push	{r7, lr}
 800e7fe:	b082      	sub	sp, #8
 800e800:	af00      	add	r7, sp, #0
 800e802:	6078      	str	r0, [r7, #4]
  if (hcan == &hcan1)
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	4a05      	ldr	r2, [pc, #20]	; (800e81c <HAL_CAN_TxMailbox1CompleteCallback+0x20>)
 800e808:	4293      	cmp	r3, r2
 800e80a:	d102      	bne.n	800e812 <HAL_CAN_TxMailbox1CompleteCallback+0x16>
  {
    can_tx_mailbox_complete_hanle(&can1_manage);
 800e80c:	4804      	ldr	r0, [pc, #16]	; (800e820 <HAL_CAN_TxMailbox1CompleteCallback+0x24>)
 800e80e:	f7ff ff8c 	bl	800e72a <can_tx_mailbox_complete_hanle>
  }
}
 800e812:	bf00      	nop
 800e814:	3708      	adds	r7, #8
 800e816:	46bd      	mov	sp, r7
 800e818:	bd80      	pop	{r7, pc}
 800e81a:	bf00      	nop
 800e81c:	200001c4 	.word	0x200001c4
 800e820:	20011868 	.word	0x20011868

0800e824 <HAL_CAN_TxMailbox2CompleteCallback>:
void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800e824:	b580      	push	{r7, lr}
 800e826:	b082      	sub	sp, #8
 800e828:	af00      	add	r7, sp, #0
 800e82a:	6078      	str	r0, [r7, #4]
  if (hcan == &hcan1)
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	4a05      	ldr	r2, [pc, #20]	; (800e844 <HAL_CAN_TxMailbox2CompleteCallback+0x20>)
 800e830:	4293      	cmp	r3, r2
 800e832:	d102      	bne.n	800e83a <HAL_CAN_TxMailbox2CompleteCallback+0x16>
  {
    can_tx_mailbox_complete_hanle(&can1_manage);
 800e834:	4804      	ldr	r0, [pc, #16]	; (800e848 <HAL_CAN_TxMailbox2CompleteCallback+0x24>)
 800e836:	f7ff ff78 	bl	800e72a <can_tx_mailbox_complete_hanle>
  }
}
 800e83a:	bf00      	nop
 800e83c:	3708      	adds	r7, #8
 800e83e:	46bd      	mov	sp, r7
 800e840:	bd80      	pop	{r7, pc}
 800e842:	bf00      	nop
 800e844:	200001c4 	.word	0x200001c4
 800e848:	20011868 	.word	0x20011868

0800e84c <HAL_CAN_ErrorCallback>:

void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800e84c:	b580      	push	{r7, lr}
 800e84e:	b082      	sub	sp, #8
 800e850:	af00      	add	r7, sp, #0
 800e852:	6078      	str	r0, [r7, #4]
  if (hcan == &hcan1)
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	4a06      	ldr	r2, [pc, #24]	; (800e870 <HAL_CAN_ErrorCallback+0x24>)
 800e858:	4293      	cmp	r3, r2
 800e85a:	d102      	bne.n	800e862 <HAL_CAN_ErrorCallback+0x16>
  {
    can_tx_mailbox_complete_hanle(&can1_manage);
 800e85c:	4805      	ldr	r0, [pc, #20]	; (800e874 <HAL_CAN_ErrorCallback+0x28>)
 800e85e:	f7ff ff64 	bl	800e72a <can_tx_mailbox_complete_hanle>
  }
  HAL_CAN_ResetError(hcan);
 800e862:	6878      	ldr	r0, [r7, #4]
 800e864:	f7f4 fb90 	bl	8002f88 <HAL_CAN_ResetError>
}
 800e868:	bf00      	nop
 800e86a:	3708      	adds	r7, #8
 800e86c:	46bd      	mov	sp, r7
 800e86e:	bd80      	pop	{r7, pc}
 800e870:	200001c4 	.word	0x200001c4
 800e874:	20011868 	.word	0x20011868

0800e878 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800e878:	b580      	push	{r7, lr}
 800e87a:	b08c      	sub	sp, #48	; 0x30
 800e87c:	af00      	add	r7, sp, #0
 800e87e:	6078      	str	r0, [r7, #4]
  CAN_RxHeaderTypeDef rx_header;
  uint8_t rx_data[8];

  HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rx_header, rx_data);
 800e880:	f107 0308 	add.w	r3, r7, #8
 800e884:	f107 0210 	add.w	r2, r7, #16
 800e888:	2100      	movs	r1, #0
 800e88a:	6878      	ldr	r0, [r7, #4]
 800e88c:	f7f4 f82d 	bl	80028ea <HAL_CAN_GetRxMessage>

  if (hcan == &hcan1)
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	4a11      	ldr	r2, [pc, #68]	; (800e8d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 800e894:	4293      	cmp	r3, r2
 800e896:	d11a      	bne.n	800e8ce <HAL_CAN_RxFifo0MsgPendingCallback+0x56>
  {
    for (int i = 0; i < MAX_CAN_REGISTER_NUM; i++)
 800e898:	2300      	movs	r3, #0
 800e89a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e89c:	e014      	b.n	800e8c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>
    {
      if (can1_manage.can_rec_callback[i] != NULL)
 800e89e:	4a0f      	ldr	r2, [pc, #60]	; (800e8dc <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 800e8a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8a2:	330a      	adds	r3, #10
 800e8a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	d00a      	beq.n	800e8c2 <HAL_CAN_RxFifo0MsgPendingCallback+0x4a>
      {
        (*(can1_manage.can_rec_callback[i]))(&rx_header, rx_data);
 800e8ac:	4a0b      	ldr	r2, [pc, #44]	; (800e8dc <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 800e8ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8b0:	330a      	adds	r3, #10
 800e8b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e8b6:	f107 0108 	add.w	r1, r7, #8
 800e8ba:	f107 0210 	add.w	r2, r7, #16
 800e8be:	4610      	mov	r0, r2
 800e8c0:	4798      	blx	r3
    for (int i = 0; i < MAX_CAN_REGISTER_NUM; i++)
 800e8c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8c4:	3301      	adds	r3, #1
 800e8c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e8c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8ca:	2b04      	cmp	r3, #4
 800e8cc:	dde7      	ble.n	800e89e <HAL_CAN_RxFifo0MsgPendingCallback+0x26>
      }
    }
  }
}
 800e8ce:	bf00      	nop
 800e8d0:	3730      	adds	r7, #48	; 0x30
 800e8d2:	46bd      	mov	sp, r7
 800e8d4:	bd80      	pop	{r7, pc}
 800e8d6:	bf00      	nop
 800e8d8:	200001c4 	.word	0x200001c4
 800e8dc:	20011868 	.word	0x20011868

0800e8e0 <mpu_write_reg>:
static void get_mpu_gyro_offset(void);
static void get_mpu_acc_offset(void);
static void get_ist_mag_offset(void);

uint8_t mpu_write_reg(uint8_t const reg, uint8_t const data)
{
 800e8e0:	b580      	push	{r7, lr}
 800e8e2:	b084      	sub	sp, #16
 800e8e4:	af02      	add	r7, sp, #8
 800e8e6:	4603      	mov	r3, r0
 800e8e8:	460a      	mov	r2, r1
 800e8ea:	71fb      	strb	r3, [r7, #7]
 800e8ec:	4613      	mov	r3, r2
 800e8ee:	71bb      	strb	r3, [r7, #6]
  MPU_NSS_LOW();
 800e8f0:	2200      	movs	r2, #0
 800e8f2:	2140      	movs	r1, #64	; 0x40
 800e8f4:	4812      	ldr	r0, [pc, #72]	; (800e940 <mpu_write_reg+0x60>)
 800e8f6:	f7f5 f975 	bl	8003be4 <HAL_GPIO_WritePin>
  tx = reg & 0x7F;
 800e8fa:	79fb      	ldrb	r3, [r7, #7]
 800e8fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e900:	b2da      	uxtb	r2, r3
 800e902:	4b10      	ldr	r3, [pc, #64]	; (800e944 <mpu_write_reg+0x64>)
 800e904:	701a      	strb	r2, [r3, #0]
  HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 800e906:	2337      	movs	r3, #55	; 0x37
 800e908:	9300      	str	r3, [sp, #0]
 800e90a:	2301      	movs	r3, #1
 800e90c:	4a0e      	ldr	r2, [pc, #56]	; (800e948 <mpu_write_reg+0x68>)
 800e90e:	490d      	ldr	r1, [pc, #52]	; (800e944 <mpu_write_reg+0x64>)
 800e910:	480e      	ldr	r0, [pc, #56]	; (800e94c <mpu_write_reg+0x6c>)
 800e912:	f7f7 f8fe 	bl	8005b12 <HAL_SPI_TransmitReceive>
  tx = data;
 800e916:	4a0b      	ldr	r2, [pc, #44]	; (800e944 <mpu_write_reg+0x64>)
 800e918:	79bb      	ldrb	r3, [r7, #6]
 800e91a:	7013      	strb	r3, [r2, #0]
  HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 800e91c:	2337      	movs	r3, #55	; 0x37
 800e91e:	9300      	str	r3, [sp, #0]
 800e920:	2301      	movs	r3, #1
 800e922:	4a09      	ldr	r2, [pc, #36]	; (800e948 <mpu_write_reg+0x68>)
 800e924:	4907      	ldr	r1, [pc, #28]	; (800e944 <mpu_write_reg+0x64>)
 800e926:	4809      	ldr	r0, [pc, #36]	; (800e94c <mpu_write_reg+0x6c>)
 800e928:	f7f7 f8f3 	bl	8005b12 <HAL_SPI_TransmitReceive>
  MPU_NSS_HIGH();
 800e92c:	2201      	movs	r2, #1
 800e92e:	2140      	movs	r1, #64	; 0x40
 800e930:	4803      	ldr	r0, [pc, #12]	; (800e940 <mpu_write_reg+0x60>)
 800e932:	f7f5 f957 	bl	8003be4 <HAL_GPIO_WritePin>
  return 0;
 800e936:	2300      	movs	r3, #0
}
 800e938:	4618      	mov	r0, r3
 800e93a:	3708      	adds	r7, #8
 800e93c:	46bd      	mov	sp, r7
 800e93e:	bd80      	pop	{r7, pc}
 800e940:	40021400 	.word	0x40021400
 800e944:	20011ca4 	.word	0x20011ca4
 800e948:	20011ca5 	.word	0x20011ca5
 800e94c:	2000021c 	.word	0x2000021c

0800e950 <mpu_read_reg>:

uint8_t mpu_read_reg(uint8_t const reg)
{
 800e950:	b580      	push	{r7, lr}
 800e952:	b084      	sub	sp, #16
 800e954:	af02      	add	r7, sp, #8
 800e956:	4603      	mov	r3, r0
 800e958:	71fb      	strb	r3, [r7, #7]
  MPU_NSS_LOW();
 800e95a:	2200      	movs	r2, #0
 800e95c:	2140      	movs	r1, #64	; 0x40
 800e95e:	4812      	ldr	r0, [pc, #72]	; (800e9a8 <mpu_read_reg+0x58>)
 800e960:	f7f5 f940 	bl	8003be4 <HAL_GPIO_WritePin>
  tx = reg | 0x80;
 800e964:	79fb      	ldrb	r3, [r7, #7]
 800e966:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e96a:	b2da      	uxtb	r2, r3
 800e96c:	4b0f      	ldr	r3, [pc, #60]	; (800e9ac <mpu_read_reg+0x5c>)
 800e96e:	701a      	strb	r2, [r3, #0]
  HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 800e970:	2337      	movs	r3, #55	; 0x37
 800e972:	9300      	str	r3, [sp, #0]
 800e974:	2301      	movs	r3, #1
 800e976:	4a0e      	ldr	r2, [pc, #56]	; (800e9b0 <mpu_read_reg+0x60>)
 800e978:	490c      	ldr	r1, [pc, #48]	; (800e9ac <mpu_read_reg+0x5c>)
 800e97a:	480e      	ldr	r0, [pc, #56]	; (800e9b4 <mpu_read_reg+0x64>)
 800e97c:	f7f7 f8c9 	bl	8005b12 <HAL_SPI_TransmitReceive>
  HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 800e980:	2337      	movs	r3, #55	; 0x37
 800e982:	9300      	str	r3, [sp, #0]
 800e984:	2301      	movs	r3, #1
 800e986:	4a0a      	ldr	r2, [pc, #40]	; (800e9b0 <mpu_read_reg+0x60>)
 800e988:	4908      	ldr	r1, [pc, #32]	; (800e9ac <mpu_read_reg+0x5c>)
 800e98a:	480a      	ldr	r0, [pc, #40]	; (800e9b4 <mpu_read_reg+0x64>)
 800e98c:	f7f7 f8c1 	bl	8005b12 <HAL_SPI_TransmitReceive>
  MPU_NSS_HIGH();
 800e990:	2201      	movs	r2, #1
 800e992:	2140      	movs	r1, #64	; 0x40
 800e994:	4804      	ldr	r0, [pc, #16]	; (800e9a8 <mpu_read_reg+0x58>)
 800e996:	f7f5 f925 	bl	8003be4 <HAL_GPIO_WritePin>
  return rx;
 800e99a:	4b05      	ldr	r3, [pc, #20]	; (800e9b0 <mpu_read_reg+0x60>)
 800e99c:	781b      	ldrb	r3, [r3, #0]
}
 800e99e:	4618      	mov	r0, r3
 800e9a0:	3708      	adds	r7, #8
 800e9a2:	46bd      	mov	sp, r7
 800e9a4:	bd80      	pop	{r7, pc}
 800e9a6:	bf00      	nop
 800e9a8:	40021400 	.word	0x40021400
 800e9ac:	20011ca4 	.word	0x20011ca4
 800e9b0:	20011ca5 	.word	0x20011ca5
 800e9b4:	2000021c 	.word	0x2000021c

0800e9b8 <mpu_read_regs>:

uint8_t mpu_read_regs(uint8_t const regAddr, uint8_t *pData, uint8_t len)
{
 800e9b8:	b580      	push	{r7, lr}
 800e9ba:	b084      	sub	sp, #16
 800e9bc:	af02      	add	r7, sp, #8
 800e9be:	4603      	mov	r3, r0
 800e9c0:	6039      	str	r1, [r7, #0]
 800e9c2:	71fb      	strb	r3, [r7, #7]
 800e9c4:	4613      	mov	r3, r2
 800e9c6:	71bb      	strb	r3, [r7, #6]
  MPU_NSS_LOW();
 800e9c8:	2200      	movs	r2, #0
 800e9ca:	2140      	movs	r1, #64	; 0x40
 800e9cc:	4813      	ldr	r0, [pc, #76]	; (800ea1c <mpu_read_regs+0x64>)
 800e9ce:	f7f5 f909 	bl	8003be4 <HAL_GPIO_WritePin>
  tx = regAddr | 0x80;
 800e9d2:	79fb      	ldrb	r3, [r7, #7]
 800e9d4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e9d8:	b2da      	uxtb	r2, r3
 800e9da:	4b11      	ldr	r3, [pc, #68]	; (800ea20 <mpu_read_regs+0x68>)
 800e9dc:	701a      	strb	r2, [r3, #0]
  tx_buff[0] = tx;
 800e9de:	4b10      	ldr	r3, [pc, #64]	; (800ea20 <mpu_read_regs+0x68>)
 800e9e0:	781a      	ldrb	r2, [r3, #0]
 800e9e2:	4b10      	ldr	r3, [pc, #64]	; (800ea24 <mpu_read_regs+0x6c>)
 800e9e4:	701a      	strb	r2, [r3, #0]
  HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 800e9e6:	2337      	movs	r3, #55	; 0x37
 800e9e8:	9300      	str	r3, [sp, #0]
 800e9ea:	2301      	movs	r3, #1
 800e9ec:	4a0e      	ldr	r2, [pc, #56]	; (800ea28 <mpu_read_regs+0x70>)
 800e9ee:	490c      	ldr	r1, [pc, #48]	; (800ea20 <mpu_read_regs+0x68>)
 800e9f0:	480e      	ldr	r0, [pc, #56]	; (800ea2c <mpu_read_regs+0x74>)
 800e9f2:	f7f7 f88e 	bl	8005b12 <HAL_SPI_TransmitReceive>
  HAL_SPI_TransmitReceive(&MPU_HSPI, tx_buff, pData, len, 55);
 800e9f6:	79bb      	ldrb	r3, [r7, #6]
 800e9f8:	b29b      	uxth	r3, r3
 800e9fa:	2237      	movs	r2, #55	; 0x37
 800e9fc:	9200      	str	r2, [sp, #0]
 800e9fe:	683a      	ldr	r2, [r7, #0]
 800ea00:	4908      	ldr	r1, [pc, #32]	; (800ea24 <mpu_read_regs+0x6c>)
 800ea02:	480a      	ldr	r0, [pc, #40]	; (800ea2c <mpu_read_regs+0x74>)
 800ea04:	f7f7 f885 	bl	8005b12 <HAL_SPI_TransmitReceive>
  MPU_NSS_HIGH();
 800ea08:	2201      	movs	r2, #1
 800ea0a:	2140      	movs	r1, #64	; 0x40
 800ea0c:	4803      	ldr	r0, [pc, #12]	; (800ea1c <mpu_read_regs+0x64>)
 800ea0e:	f7f5 f8e9 	bl	8003be4 <HAL_GPIO_WritePin>
  return 0;
 800ea12:	2300      	movs	r3, #0
}
 800ea14:	4618      	mov	r0, r3
 800ea16:	3708      	adds	r7, #8
 800ea18:	46bd      	mov	sp, r7
 800ea1a:	bd80      	pop	{r7, pc}
 800ea1c:	40021400 	.word	0x40021400
 800ea20:	20011ca4 	.word	0x20011ca4
 800ea24:	20011ca8 	.word	0x20011ca8
 800ea28:	20011ca5 	.word	0x20011ca5
 800ea2c:	2000021c 	.word	0x2000021c

0800ea30 <ist_reg_write_by_mpu>:

static void ist_reg_write_by_mpu(uint8_t addr, uint8_t data)
{
 800ea30:	b580      	push	{r7, lr}
 800ea32:	b082      	sub	sp, #8
 800ea34:	af00      	add	r7, sp, #0
 800ea36:	4603      	mov	r3, r0
 800ea38:	460a      	mov	r2, r1
 800ea3a:	71fb      	strb	r3, [r7, #7]
 800ea3c:	4613      	mov	r3, r2
 800ea3e:	71bb      	strb	r3, [r7, #6]
  //turn off slave 1 at first
  mpu_write_reg(MPU6500_I2C_SLV1_CTRL, 0x00);
 800ea40:	2100      	movs	r1, #0
 800ea42:	202a      	movs	r0, #42	; 0x2a
 800ea44:	f7ff ff4c 	bl	800e8e0 <mpu_write_reg>
  MPU_DELAY(2);
 800ea48:	2002      	movs	r0, #2
 800ea4a:	f7f3 fc05 	bl	8002258 <HAL_Delay>
  mpu_write_reg(MPU6500_I2C_SLV1_REG, addr);
 800ea4e:	79fb      	ldrb	r3, [r7, #7]
 800ea50:	4619      	mov	r1, r3
 800ea52:	2029      	movs	r0, #41	; 0x29
 800ea54:	f7ff ff44 	bl	800e8e0 <mpu_write_reg>
  MPU_DELAY(2);
 800ea58:	2002      	movs	r0, #2
 800ea5a:	f7f3 fbfd 	bl	8002258 <HAL_Delay>
  mpu_write_reg(MPU6500_I2C_SLV1_DO, data);
 800ea5e:	79bb      	ldrb	r3, [r7, #6]
 800ea60:	4619      	mov	r1, r3
 800ea62:	2064      	movs	r0, #100	; 0x64
 800ea64:	f7ff ff3c 	bl	800e8e0 <mpu_write_reg>
  MPU_DELAY(2);
 800ea68:	2002      	movs	r0, #2
 800ea6a:	f7f3 fbf5 	bl	8002258 <HAL_Delay>
  //turn on slave 1 with one byte transmitting
  mpu_write_reg(MPU6500_I2C_SLV1_CTRL, 0x80 | 0x01);
 800ea6e:	2181      	movs	r1, #129	; 0x81
 800ea70:	202a      	movs	r0, #42	; 0x2a
 800ea72:	f7ff ff35 	bl	800e8e0 <mpu_write_reg>
  MPU_DELAY(10);
 800ea76:	200a      	movs	r0, #10
 800ea78:	f7f3 fbee 	bl	8002258 <HAL_Delay>
}
 800ea7c:	bf00      	nop
 800ea7e:	3708      	adds	r7, #8
 800ea80:	46bd      	mov	sp, r7
 800ea82:	bd80      	pop	{r7, pc}

0800ea84 <ist_reg_read_by_mpu>:

static uint8_t ist_reg_read_by_mpu(uint8_t addr)
{
 800ea84:	b580      	push	{r7, lr}
 800ea86:	b084      	sub	sp, #16
 800ea88:	af00      	add	r7, sp, #0
 800ea8a:	4603      	mov	r3, r0
 800ea8c:	71fb      	strb	r3, [r7, #7]
  uint8_t retval;
  mpu_write_reg(MPU6500_I2C_SLV4_REG, addr);
 800ea8e:	79fb      	ldrb	r3, [r7, #7]
 800ea90:	4619      	mov	r1, r3
 800ea92:	2032      	movs	r0, #50	; 0x32
 800ea94:	f7ff ff24 	bl	800e8e0 <mpu_write_reg>
  MPU_DELAY(10);
 800ea98:	200a      	movs	r0, #10
 800ea9a:	f7f3 fbdd 	bl	8002258 <HAL_Delay>
  mpu_write_reg(MPU6500_I2C_SLV4_CTRL, 0x80);
 800ea9e:	2180      	movs	r1, #128	; 0x80
 800eaa0:	2034      	movs	r0, #52	; 0x34
 800eaa2:	f7ff ff1d 	bl	800e8e0 <mpu_write_reg>
  MPU_DELAY(10);
 800eaa6:	200a      	movs	r0, #10
 800eaa8:	f7f3 fbd6 	bl	8002258 <HAL_Delay>
  retval = mpu_read_reg(MPU6500_I2C_SLV4_DI);
 800eaac:	2035      	movs	r0, #53	; 0x35
 800eaae:	f7ff ff4f 	bl	800e950 <mpu_read_reg>
 800eab2:	4603      	mov	r3, r0
 800eab4:	73fb      	strb	r3, [r7, #15]
  //turn off slave4 after read
  mpu_write_reg(MPU6500_I2C_SLV4_CTRL, 0x00);
 800eab6:	2100      	movs	r1, #0
 800eab8:	2034      	movs	r0, #52	; 0x34
 800eaba:	f7ff ff11 	bl	800e8e0 <mpu_write_reg>
  MPU_DELAY(10);
 800eabe:	200a      	movs	r0, #10
 800eac0:	f7f3 fbca 	bl	8002258 <HAL_Delay>
  return retval;
 800eac4:	7bfb      	ldrb	r3, [r7, #15]
}
 800eac6:	4618      	mov	r0, r3
 800eac8:	3710      	adds	r7, #16
 800eaca:	46bd      	mov	sp, r7
 800eacc:	bd80      	pop	{r7, pc}

0800eace <mpu_mst_i2c_auto_read_config>:

static void mpu_mst_i2c_auto_read_config(uint8_t device_address, uint8_t reg_base_addr, uint8_t data_num)
{
 800eace:	b580      	push	{r7, lr}
 800ead0:	b082      	sub	sp, #8
 800ead2:	af00      	add	r7, sp, #0
 800ead4:	4603      	mov	r3, r0
 800ead6:	71fb      	strb	r3, [r7, #7]
 800ead8:	460b      	mov	r3, r1
 800eada:	71bb      	strb	r3, [r7, #6]
 800eadc:	4613      	mov	r3, r2
 800eade:	717b      	strb	r3, [r7, #5]
  //configure the device address of the IST8310
  //use slave1,auto transmit single measure mode.
  mpu_write_reg(MPU6500_I2C_SLV1_ADDR, device_address);
 800eae0:	79fb      	ldrb	r3, [r7, #7]
 800eae2:	4619      	mov	r1, r3
 800eae4:	2028      	movs	r0, #40	; 0x28
 800eae6:	f7ff fefb 	bl	800e8e0 <mpu_write_reg>
  MPU_DELAY(2);
 800eaea:	2002      	movs	r0, #2
 800eaec:	f7f3 fbb4 	bl	8002258 <HAL_Delay>
  mpu_write_reg(MPU6500_I2C_SLV1_REG, IST8310_R_CONFA);
 800eaf0:	210a      	movs	r1, #10
 800eaf2:	2029      	movs	r0, #41	; 0x29
 800eaf4:	f7ff fef4 	bl	800e8e0 <mpu_write_reg>
  MPU_DELAY(2);
 800eaf8:	2002      	movs	r0, #2
 800eafa:	f7f3 fbad 	bl	8002258 <HAL_Delay>
  mpu_write_reg(MPU6500_I2C_SLV1_DO, IST8310_ODR_MODE);
 800eafe:	2101      	movs	r1, #1
 800eb00:	2064      	movs	r0, #100	; 0x64
 800eb02:	f7ff feed 	bl	800e8e0 <mpu_write_reg>
  MPU_DELAY(2);
 800eb06:	2002      	movs	r0, #2
 800eb08:	f7f3 fba6 	bl	8002258 <HAL_Delay>

  //use slave0,auto read data
  mpu_write_reg(MPU6500_I2C_SLV0_ADDR, 0x80 | device_address);
 800eb0c:	79fb      	ldrb	r3, [r7, #7]
 800eb0e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800eb12:	b2db      	uxtb	r3, r3
 800eb14:	4619      	mov	r1, r3
 800eb16:	2025      	movs	r0, #37	; 0x25
 800eb18:	f7ff fee2 	bl	800e8e0 <mpu_write_reg>
  MPU_DELAY(2);
 800eb1c:	2002      	movs	r0, #2
 800eb1e:	f7f3 fb9b 	bl	8002258 <HAL_Delay>
  mpu_write_reg(MPU6500_I2C_SLV0_REG, reg_base_addr);
 800eb22:	79bb      	ldrb	r3, [r7, #6]
 800eb24:	4619      	mov	r1, r3
 800eb26:	2026      	movs	r0, #38	; 0x26
 800eb28:	f7ff feda 	bl	800e8e0 <mpu_write_reg>
  MPU_DELAY(2);
 800eb2c:	2002      	movs	r0, #2
 800eb2e:	f7f3 fb93 	bl	8002258 <HAL_Delay>

  //every eight mpu6500 internal samples one i2c master read
  mpu_write_reg(MPU6500_I2C_SLV4_CTRL, 0x03);
 800eb32:	2103      	movs	r1, #3
 800eb34:	2034      	movs	r0, #52	; 0x34
 800eb36:	f7ff fed3 	bl	800e8e0 <mpu_write_reg>
  MPU_DELAY(2);
 800eb3a:	2002      	movs	r0, #2
 800eb3c:	f7f3 fb8c 	bl	8002258 <HAL_Delay>
  //enable slave 0 and 1 access delay
  mpu_write_reg(MPU6500_I2C_MST_DELAY_CTRL, 0x01 | 0x02);
 800eb40:	2103      	movs	r1, #3
 800eb42:	2067      	movs	r0, #103	; 0x67
 800eb44:	f7ff fecc 	bl	800e8e0 <mpu_write_reg>
  MPU_DELAY(2);
 800eb48:	2002      	movs	r0, #2
 800eb4a:	f7f3 fb85 	bl	8002258 <HAL_Delay>
  //enable slave 1 auto transmit
  mpu_write_reg(MPU6500_I2C_SLV1_CTRL, 0x80 | 0x01);
 800eb4e:	2181      	movs	r1, #129	; 0x81
 800eb50:	202a      	movs	r0, #42	; 0x2a
 800eb52:	f7ff fec5 	bl	800e8e0 <mpu_write_reg>
  MPU_DELAY(6); //Wait 6ms (minimum waiting time for 16 times internal average setup)
 800eb56:	2006      	movs	r0, #6
 800eb58:	f7f3 fb7e 	bl	8002258 <HAL_Delay>
  //enable slave 0 with data_num bytes reading
  mpu_write_reg(MPU6500_I2C_SLV0_CTRL, 0x80 | data_num);
 800eb5c:	797b      	ldrb	r3, [r7, #5]
 800eb5e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800eb62:	b2db      	uxtb	r3, r3
 800eb64:	4619      	mov	r1, r3
 800eb66:	2027      	movs	r0, #39	; 0x27
 800eb68:	f7ff feba 	bl	800e8e0 <mpu_write_reg>
  MPU_DELAY(2);
 800eb6c:	2002      	movs	r0, #2
 800eb6e:	f7f3 fb73 	bl	8002258 <HAL_Delay>
}
 800eb72:	bf00      	nop
 800eb74:	3708      	adds	r7, #8
 800eb76:	46bd      	mov	sp, r7
 800eb78:	bd80      	pop	{r7, pc}

0800eb7a <ist8310_init>:

uint8_t ist8310_init(void)
{
 800eb7a:	b580      	push	{r7, lr}
 800eb7c:	af00      	add	r7, sp, #0
  //Enable I2C master mode, Reset I2C Slave module
  mpu_write_reg(MPU6500_USER_CTRL, 0x30);
 800eb7e:	2130      	movs	r1, #48	; 0x30
 800eb80:	206a      	movs	r0, #106	; 0x6a
 800eb82:	f7ff fead 	bl	800e8e0 <mpu_write_reg>
  MPU_DELAY(10);
 800eb86:	200a      	movs	r0, #10
 800eb88:	f7f3 fb66 	bl	8002258 <HAL_Delay>
  //I2C master clock 400kHz
  mpu_write_reg(MPU6500_I2C_MST_CTRL, 0x0d);
 800eb8c:	210d      	movs	r1, #13
 800eb8e:	2024      	movs	r0, #36	; 0x24
 800eb90:	f7ff fea6 	bl	800e8e0 <mpu_write_reg>
  MPU_DELAY(10);
 800eb94:	200a      	movs	r0, #10
 800eb96:	f7f3 fb5f 	bl	8002258 <HAL_Delay>

  //turn on slave 1 for ist write and slave 4 for ist read
  mpu_write_reg(MPU6500_I2C_SLV1_ADDR, IST8310_ADDRESS); //write ist
 800eb9a:	210e      	movs	r1, #14
 800eb9c:	2028      	movs	r0, #40	; 0x28
 800eb9e:	f7ff fe9f 	bl	800e8e0 <mpu_write_reg>
  MPU_DELAY(10);
 800eba2:	200a      	movs	r0, #10
 800eba4:	f7f3 fb58 	bl	8002258 <HAL_Delay>
  mpu_write_reg(MPU6500_I2C_SLV4_ADDR, 0x80 | IST8310_ADDRESS); //read ist
 800eba8:	218e      	movs	r1, #142	; 0x8e
 800ebaa:	2031      	movs	r0, #49	; 0x31
 800ebac:	f7ff fe98 	bl	800e8e0 <mpu_write_reg>
  MPU_DELAY(10);
 800ebb0:	200a      	movs	r0, #10
 800ebb2:	f7f3 fb51 	bl	8002258 <HAL_Delay>

  //reset ist8310
  ist_reg_write_by_mpu(IST8310_R_CONFB, 0x01);
 800ebb6:	2101      	movs	r1, #1
 800ebb8:	200b      	movs	r0, #11
 800ebba:	f7ff ff39 	bl	800ea30 <ist_reg_write_by_mpu>
  MPU_DELAY(10);
 800ebbe:	200a      	movs	r0, #10
 800ebc0:	f7f3 fb4a 	bl	8002258 <HAL_Delay>

  if (IST8310_DEVICE_ID_A != ist_reg_read_by_mpu(IST8310_WHO_AM_I))
 800ebc4:	2000      	movs	r0, #0
 800ebc6:	f7ff ff5d 	bl	800ea84 <ist_reg_read_by_mpu>
 800ebca:	4603      	mov	r3, r0
 800ebcc:	2b10      	cmp	r3, #16
 800ebce:	d001      	beq.n	800ebd4 <ist8310_init+0x5a>
    return 1;
 800ebd0:	2301      	movs	r3, #1
 800ebd2:	e059      	b.n	800ec88 <ist8310_init+0x10e>

  ist_reg_write_by_mpu(IST8310_R_CONFB, 0x01);
 800ebd4:	2101      	movs	r1, #1
 800ebd6:	200b      	movs	r0, #11
 800ebd8:	f7ff ff2a 	bl	800ea30 <ist_reg_write_by_mpu>
  MPU_DELAY(10);
 800ebdc:	200a      	movs	r0, #10
 800ebde:	f7f3 fb3b 	bl	8002258 <HAL_Delay>

  //config as ready mode to access reg
  ist_reg_write_by_mpu(IST8310_R_CONFA, 0x00);
 800ebe2:	2100      	movs	r1, #0
 800ebe4:	200a      	movs	r0, #10
 800ebe6:	f7ff ff23 	bl	800ea30 <ist_reg_write_by_mpu>
  if (ist_reg_read_by_mpu(IST8310_R_CONFA) != 0x00)
 800ebea:	200a      	movs	r0, #10
 800ebec:	f7ff ff4a 	bl	800ea84 <ist_reg_read_by_mpu>
 800ebf0:	4603      	mov	r3, r0
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	d001      	beq.n	800ebfa <ist8310_init+0x80>
    return 2;
 800ebf6:	2302      	movs	r3, #2
 800ebf8:	e046      	b.n	800ec88 <ist8310_init+0x10e>
  MPU_DELAY(10);
 800ebfa:	200a      	movs	r0, #10
 800ebfc:	f7f3 fb2c 	bl	8002258 <HAL_Delay>

  //normal state, no int
  ist_reg_write_by_mpu(IST8310_R_CONFB, 0x00);
 800ec00:	2100      	movs	r1, #0
 800ec02:	200b      	movs	r0, #11
 800ec04:	f7ff ff14 	bl	800ea30 <ist_reg_write_by_mpu>
  if (ist_reg_read_by_mpu(IST8310_R_CONFB) != 0x00)
 800ec08:	200b      	movs	r0, #11
 800ec0a:	f7ff ff3b 	bl	800ea84 <ist_reg_read_by_mpu>
 800ec0e:	4603      	mov	r3, r0
 800ec10:	2b00      	cmp	r3, #0
 800ec12:	d001      	beq.n	800ec18 <ist8310_init+0x9e>
    return 3;
 800ec14:	2303      	movs	r3, #3
 800ec16:	e037      	b.n	800ec88 <ist8310_init+0x10e>
  MPU_DELAY(10);
 800ec18:	200a      	movs	r0, #10
 800ec1a:	f7f3 fb1d 	bl	8002258 <HAL_Delay>

  //config  low noise mode, x,y,z axis 16 time 1 avg,
  ist_reg_write_by_mpu(IST8310_AVGCNTL, 0x24); //100100
 800ec1e:	2124      	movs	r1, #36	; 0x24
 800ec20:	2041      	movs	r0, #65	; 0x41
 800ec22:	f7ff ff05 	bl	800ea30 <ist_reg_write_by_mpu>
  if (ist_reg_read_by_mpu(IST8310_AVGCNTL) != 0x24)
 800ec26:	2041      	movs	r0, #65	; 0x41
 800ec28:	f7ff ff2c 	bl	800ea84 <ist_reg_read_by_mpu>
 800ec2c:	4603      	mov	r3, r0
 800ec2e:	2b24      	cmp	r3, #36	; 0x24
 800ec30:	d001      	beq.n	800ec36 <ist8310_init+0xbc>
    return 4;
 800ec32:	2304      	movs	r3, #4
 800ec34:	e028      	b.n	800ec88 <ist8310_init+0x10e>
  MPU_DELAY(10);
 800ec36:	200a      	movs	r0, #10
 800ec38:	f7f3 fb0e 	bl	8002258 <HAL_Delay>

  //Set/Reset pulse duration setup, normal mode
  ist_reg_write_by_mpu(IST8310_PDCNTL, 0xc0);
 800ec3c:	21c0      	movs	r1, #192	; 0xc0
 800ec3e:	2042      	movs	r0, #66	; 0x42
 800ec40:	f7ff fef6 	bl	800ea30 <ist_reg_write_by_mpu>
  if (ist_reg_read_by_mpu(IST8310_PDCNTL) != 0xc0)
 800ec44:	2042      	movs	r0, #66	; 0x42
 800ec46:	f7ff ff1d 	bl	800ea84 <ist_reg_read_by_mpu>
 800ec4a:	4603      	mov	r3, r0
 800ec4c:	2bc0      	cmp	r3, #192	; 0xc0
 800ec4e:	d001      	beq.n	800ec54 <ist8310_init+0xda>
    return 5;
 800ec50:	2305      	movs	r3, #5
 800ec52:	e019      	b.n	800ec88 <ist8310_init+0x10e>
  MPU_DELAY(10);
 800ec54:	200a      	movs	r0, #10
 800ec56:	f7f3 faff 	bl	8002258 <HAL_Delay>

  //turn off slave1 & slave 4
  mpu_write_reg(MPU6500_I2C_SLV1_CTRL, 0x00);
 800ec5a:	2100      	movs	r1, #0
 800ec5c:	202a      	movs	r0, #42	; 0x2a
 800ec5e:	f7ff fe3f 	bl	800e8e0 <mpu_write_reg>
  MPU_DELAY(10);
 800ec62:	200a      	movs	r0, #10
 800ec64:	f7f3 faf8 	bl	8002258 <HAL_Delay>
  mpu_write_reg(MPU6500_I2C_SLV4_CTRL, 0x00);
 800ec68:	2100      	movs	r1, #0
 800ec6a:	2034      	movs	r0, #52	; 0x34
 800ec6c:	f7ff fe38 	bl	800e8e0 <mpu_write_reg>
  MPU_DELAY(10);
 800ec70:	200a      	movs	r0, #10
 800ec72:	f7f3 faf1 	bl	8002258 <HAL_Delay>

  //configure and turn on slave 0
  mpu_mst_i2c_auto_read_config(IST8310_ADDRESS, IST8310_R_XL, 0x06);
 800ec76:	2206      	movs	r2, #6
 800ec78:	2103      	movs	r1, #3
 800ec7a:	200e      	movs	r0, #14
 800ec7c:	f7ff ff27 	bl	800eace <mpu_mst_i2c_auto_read_config>
  MPU_DELAY(100);
 800ec80:	2064      	movs	r0, #100	; 0x64
 800ec82:	f7f3 fae9 	bl	8002258 <HAL_Delay>
  return 0;
 800ec86:	2300      	movs	r3, #0
}
 800ec88:	4618      	mov	r0, r3
 800ec8a:	bd80      	pop	{r7, pc}

0800ec8c <ist8310_get_data>:

void ist8310_get_data(uint8_t *buff)
{
 800ec8c:	b580      	push	{r7, lr}
 800ec8e:	b082      	sub	sp, #8
 800ec90:	af00      	add	r7, sp, #0
 800ec92:	6078      	str	r0, [r7, #4]
  mpu_read_regs(MPU6500_EXT_SENS_DATA_00, buff, 6);
 800ec94:	2206      	movs	r2, #6
 800ec96:	6879      	ldr	r1, [r7, #4]
 800ec98:	2049      	movs	r0, #73	; 0x49
 800ec9a:	f7ff fe8d 	bl	800e9b8 <mpu_read_regs>
}
 800ec9e:	bf00      	nop
 800eca0:	3708      	adds	r7, #8
 800eca2:	46bd      	mov	sp, r7
 800eca4:	bd80      	pop	{r7, pc}
	...

0800eca8 <mpu_get_data>:

//this function takes 24.6us.(42M spi)
void mpu_get_data(struct ahrs_sensor *sensor)
{
 800eca8:	b580      	push	{r7, lr}
 800ecaa:	b082      	sub	sp, #8
 800ecac:	af00      	add	r7, sp, #0
 800ecae:	6078      	str	r0, [r7, #4]
  MPU_IO_PROBE();

  mpu_read_regs(MPU6500_ACCEL_XOUT_H, mpu_buff, 14);
 800ecb0:	220e      	movs	r2, #14
 800ecb2:	498a      	ldr	r1, [pc, #552]	; (800eedc <mpu_get_data+0x234>)
 800ecb4:	203b      	movs	r0, #59	; 0x3b
 800ecb6:	f7ff fe7f 	bl	800e9b8 <mpu_read_regs>

  mpu_data.ax = (mpu_buff[0] << 8 | mpu_buff[1]) - mpu_data.ax_offset;
 800ecba:	4b88      	ldr	r3, [pc, #544]	; (800eedc <mpu_get_data+0x234>)
 800ecbc:	781b      	ldrb	r3, [r3, #0]
 800ecbe:	021b      	lsls	r3, r3, #8
 800ecc0:	b21a      	sxth	r2, r3
 800ecc2:	4b86      	ldr	r3, [pc, #536]	; (800eedc <mpu_get_data+0x234>)
 800ecc4:	785b      	ldrb	r3, [r3, #1]
 800ecc6:	b21b      	sxth	r3, r3
 800ecc8:	4313      	orrs	r3, r2
 800ecca:	b21b      	sxth	r3, r3
 800eccc:	b29a      	uxth	r2, r3
 800ecce:	4b84      	ldr	r3, [pc, #528]	; (800eee0 <mpu_get_data+0x238>)
 800ecd0:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800ecd4:	b29b      	uxth	r3, r3
 800ecd6:	1ad3      	subs	r3, r2, r3
 800ecd8:	b29b      	uxth	r3, r3
 800ecda:	b21a      	sxth	r2, r3
 800ecdc:	4b80      	ldr	r3, [pc, #512]	; (800eee0 <mpu_get_data+0x238>)
 800ecde:	801a      	strh	r2, [r3, #0]
  mpu_data.ay = (mpu_buff[2] << 8 | mpu_buff[3]) - mpu_data.ay_offset;
 800ece0:	4b7e      	ldr	r3, [pc, #504]	; (800eedc <mpu_get_data+0x234>)
 800ece2:	789b      	ldrb	r3, [r3, #2]
 800ece4:	021b      	lsls	r3, r3, #8
 800ece6:	b21a      	sxth	r2, r3
 800ece8:	4b7c      	ldr	r3, [pc, #496]	; (800eedc <mpu_get_data+0x234>)
 800ecea:	78db      	ldrb	r3, [r3, #3]
 800ecec:	b21b      	sxth	r3, r3
 800ecee:	4313      	orrs	r3, r2
 800ecf0:	b21b      	sxth	r3, r3
 800ecf2:	b29a      	uxth	r2, r3
 800ecf4:	4b7a      	ldr	r3, [pc, #488]	; (800eee0 <mpu_get_data+0x238>)
 800ecf6:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800ecfa:	b29b      	uxth	r3, r3
 800ecfc:	1ad3      	subs	r3, r2, r3
 800ecfe:	b29b      	uxth	r3, r3
 800ed00:	b21a      	sxth	r2, r3
 800ed02:	4b77      	ldr	r3, [pc, #476]	; (800eee0 <mpu_get_data+0x238>)
 800ed04:	805a      	strh	r2, [r3, #2]
  mpu_data.az = (mpu_buff[4] << 8 | mpu_buff[5]) - mpu_data.az_offset;
 800ed06:	4b75      	ldr	r3, [pc, #468]	; (800eedc <mpu_get_data+0x234>)
 800ed08:	791b      	ldrb	r3, [r3, #4]
 800ed0a:	021b      	lsls	r3, r3, #8
 800ed0c:	b21a      	sxth	r2, r3
 800ed0e:	4b73      	ldr	r3, [pc, #460]	; (800eedc <mpu_get_data+0x234>)
 800ed10:	795b      	ldrb	r3, [r3, #5]
 800ed12:	b21b      	sxth	r3, r3
 800ed14:	4313      	orrs	r3, r2
 800ed16:	b21b      	sxth	r3, r3
 800ed18:	b29a      	uxth	r2, r3
 800ed1a:	4b71      	ldr	r3, [pc, #452]	; (800eee0 <mpu_get_data+0x238>)
 800ed1c:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800ed20:	b29b      	uxth	r3, r3
 800ed22:	1ad3      	subs	r3, r2, r3
 800ed24:	b29b      	uxth	r3, r3
 800ed26:	b21a      	sxth	r2, r3
 800ed28:	4b6d      	ldr	r3, [pc, #436]	; (800eee0 <mpu_get_data+0x238>)
 800ed2a:	809a      	strh	r2, [r3, #4]
  mpu_data.temp = mpu_buff[6] << 8 | mpu_buff[7];
 800ed2c:	4b6b      	ldr	r3, [pc, #428]	; (800eedc <mpu_get_data+0x234>)
 800ed2e:	799b      	ldrb	r3, [r3, #6]
 800ed30:	021b      	lsls	r3, r3, #8
 800ed32:	b21a      	sxth	r2, r3
 800ed34:	4b69      	ldr	r3, [pc, #420]	; (800eedc <mpu_get_data+0x234>)
 800ed36:	79db      	ldrb	r3, [r3, #7]
 800ed38:	b21b      	sxth	r3, r3
 800ed3a:	4313      	orrs	r3, r2
 800ed3c:	b21a      	sxth	r2, r3
 800ed3e:	4b68      	ldr	r3, [pc, #416]	; (800eee0 <mpu_get_data+0x238>)
 800ed40:	825a      	strh	r2, [r3, #18]

  mpu_data.gx = ((mpu_buff[8] << 8 | mpu_buff[9]) - mpu_data.gx_offset);
 800ed42:	4b66      	ldr	r3, [pc, #408]	; (800eedc <mpu_get_data+0x234>)
 800ed44:	7a1b      	ldrb	r3, [r3, #8]
 800ed46:	021b      	lsls	r3, r3, #8
 800ed48:	b21a      	sxth	r2, r3
 800ed4a:	4b64      	ldr	r3, [pc, #400]	; (800eedc <mpu_get_data+0x234>)
 800ed4c:	7a5b      	ldrb	r3, [r3, #9]
 800ed4e:	b21b      	sxth	r3, r3
 800ed50:	4313      	orrs	r3, r2
 800ed52:	b21b      	sxth	r3, r3
 800ed54:	b29a      	uxth	r2, r3
 800ed56:	4b62      	ldr	r3, [pc, #392]	; (800eee0 <mpu_get_data+0x238>)
 800ed58:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 800ed5c:	b29b      	uxth	r3, r3
 800ed5e:	1ad3      	subs	r3, r2, r3
 800ed60:	b29b      	uxth	r3, r3
 800ed62:	b21a      	sxth	r2, r3
 800ed64:	4b5e      	ldr	r3, [pc, #376]	; (800eee0 <mpu_get_data+0x238>)
 800ed66:	80da      	strh	r2, [r3, #6]
  mpu_data.gy = ((mpu_buff[10] << 8 | mpu_buff[11]) - mpu_data.gy_offset);
 800ed68:	4b5c      	ldr	r3, [pc, #368]	; (800eedc <mpu_get_data+0x234>)
 800ed6a:	7a9b      	ldrb	r3, [r3, #10]
 800ed6c:	021b      	lsls	r3, r3, #8
 800ed6e:	b21a      	sxth	r2, r3
 800ed70:	4b5a      	ldr	r3, [pc, #360]	; (800eedc <mpu_get_data+0x234>)
 800ed72:	7adb      	ldrb	r3, [r3, #11]
 800ed74:	b21b      	sxth	r3, r3
 800ed76:	4313      	orrs	r3, r2
 800ed78:	b21b      	sxth	r3, r3
 800ed7a:	b29a      	uxth	r2, r3
 800ed7c:	4b58      	ldr	r3, [pc, #352]	; (800eee0 <mpu_get_data+0x238>)
 800ed7e:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 800ed82:	b29b      	uxth	r3, r3
 800ed84:	1ad3      	subs	r3, r2, r3
 800ed86:	b29b      	uxth	r3, r3
 800ed88:	b21a      	sxth	r2, r3
 800ed8a:	4b55      	ldr	r3, [pc, #340]	; (800eee0 <mpu_get_data+0x238>)
 800ed8c:	811a      	strh	r2, [r3, #8]
  mpu_data.gz = ((mpu_buff[12] << 8 | mpu_buff[13]) - mpu_data.gz_offset);
 800ed8e:	4b53      	ldr	r3, [pc, #332]	; (800eedc <mpu_get_data+0x234>)
 800ed90:	7b1b      	ldrb	r3, [r3, #12]
 800ed92:	021b      	lsls	r3, r3, #8
 800ed94:	b21a      	sxth	r2, r3
 800ed96:	4b51      	ldr	r3, [pc, #324]	; (800eedc <mpu_get_data+0x234>)
 800ed98:	7b5b      	ldrb	r3, [r3, #13]
 800ed9a:	b21b      	sxth	r3, r3
 800ed9c:	4313      	orrs	r3, r2
 800ed9e:	b21b      	sxth	r3, r3
 800eda0:	b29a      	uxth	r2, r3
 800eda2:	4b4f      	ldr	r3, [pc, #316]	; (800eee0 <mpu_get_data+0x238>)
 800eda4:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 800eda8:	b29b      	uxth	r3, r3
 800edaa:	1ad3      	subs	r3, r2, r3
 800edac:	b29b      	uxth	r3, r3
 800edae:	b21a      	sxth	r2, r3
 800edb0:	4b4b      	ldr	r3, [pc, #300]	; (800eee0 <mpu_get_data+0x238>)
 800edb2:	815a      	strh	r2, [r3, #10]

  ist8310_get_data((uint8_t *)&mpu_data.mx);
 800edb4:	484b      	ldr	r0, [pc, #300]	; (800eee4 <mpu_get_data+0x23c>)
 800edb6:	f7ff ff69 	bl	800ec8c <ist8310_get_data>

  sensor->ax = mpu_data.ax / (4096.0f / 9.80665f); //8g -> m/s^2
 800edba:	4b49      	ldr	r3, [pc, #292]	; (800eee0 <mpu_get_data+0x238>)
 800edbc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800edc0:	ee07 3a90 	vmov	s15, r3
 800edc4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800edc8:	eddf 6a47 	vldr	s13, [pc, #284]	; 800eee8 <mpu_get_data+0x240>
 800edcc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	edc3 7a00 	vstr	s15, [r3]
  sensor->ay = mpu_data.ay / (4096.0f / 9.80665f); //8g -> m/s^2
 800edd6:	4b42      	ldr	r3, [pc, #264]	; (800eee0 <mpu_get_data+0x238>)
 800edd8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800eddc:	ee07 3a90 	vmov	s15, r3
 800ede0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ede4:	eddf 6a40 	vldr	s13, [pc, #256]	; 800eee8 <mpu_get_data+0x240>
 800ede8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	edc3 7a01 	vstr	s15, [r3, #4]
  sensor->az = mpu_data.az / (4096.0f / 9.80665f); //8g -> m/s^2
 800edf2:	4b3b      	ldr	r3, [pc, #236]	; (800eee0 <mpu_get_data+0x238>)
 800edf4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800edf8:	ee07 3a90 	vmov	s15, r3
 800edfc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ee00:	eddf 6a39 	vldr	s13, [pc, #228]	; 800eee8 <mpu_get_data+0x240>
 800ee04:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	edc3 7a02 	vstr	s15, [r3, #8]

  sensor->wx = mpu_data.gx / 16.384f / 57.3f; //2000dps -> rad/s
 800ee0e:	4b34      	ldr	r3, [pc, #208]	; (800eee0 <mpu_get_data+0x238>)
 800ee10:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800ee14:	ee07 3a90 	vmov	s15, r3
 800ee18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ee1c:	eddf 6a33 	vldr	s13, [pc, #204]	; 800eeec <mpu_get_data+0x244>
 800ee20:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800ee24:	eddf 6a32 	vldr	s13, [pc, #200]	; 800eef0 <mpu_get_data+0x248>
 800ee28:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	edc3 7a03 	vstr	s15, [r3, #12]
  sensor->wy = mpu_data.gy / 16.384f / 57.3f; //2000dps -> rad/s
 800ee32:	4b2b      	ldr	r3, [pc, #172]	; (800eee0 <mpu_get_data+0x238>)
 800ee34:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800ee38:	ee07 3a90 	vmov	s15, r3
 800ee3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ee40:	eddf 6a2a 	vldr	s13, [pc, #168]	; 800eeec <mpu_get_data+0x244>
 800ee44:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800ee48:	eddf 6a29 	vldr	s13, [pc, #164]	; 800eef0 <mpu_get_data+0x248>
 800ee4c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	edc3 7a04 	vstr	s15, [r3, #16]
  sensor->wz = mpu_data.gz / 16.384f / 57.3f; //2000dps -> rad/s
 800ee56:	4b22      	ldr	r3, [pc, #136]	; (800eee0 <mpu_get_data+0x238>)
 800ee58:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800ee5c:	ee07 3a90 	vmov	s15, r3
 800ee60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ee64:	eddf 6a21 	vldr	s13, [pc, #132]	; 800eeec <mpu_get_data+0x244>
 800ee68:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800ee6c:	eddf 6a20 	vldr	s13, [pc, #128]	; 800eef0 <mpu_get_data+0x248>
 800ee70:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	edc3 7a05 	vstr	s15, [r3, #20]

  sensor->mx = (mpu_data.my - mpu_data.my_offset);
 800ee7a:	4b19      	ldr	r3, [pc, #100]	; (800eee0 <mpu_get_data+0x238>)
 800ee7c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800ee80:	461a      	mov	r2, r3
 800ee82:	4b17      	ldr	r3, [pc, #92]	; (800eee0 <mpu_get_data+0x238>)
 800ee84:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 800ee88:	1ad3      	subs	r3, r2, r3
 800ee8a:	ee07 3a90 	vmov	s15, r3
 800ee8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	edc3 7a06 	vstr	s15, [r3, #24]
  sensor->my = -(mpu_data.mx - mpu_data.mx_offset);
 800ee98:	4b11      	ldr	r3, [pc, #68]	; (800eee0 <mpu_get_data+0x238>)
 800ee9a:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800ee9e:	461a      	mov	r2, r3
 800eea0:	4b0f      	ldr	r3, [pc, #60]	; (800eee0 <mpu_get_data+0x238>)
 800eea2:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800eea6:	1ad3      	subs	r3, r2, r3
 800eea8:	ee07 3a90 	vmov	s15, r3
 800eeac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	edc3 7a07 	vstr	s15, [r3, #28]
  sensor->mz = -(mpu_data.mz - mpu_data.mz_offset);
 800eeb6:	4b0a      	ldr	r3, [pc, #40]	; (800eee0 <mpu_get_data+0x238>)
 800eeb8:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 800eebc:	461a      	mov	r2, r3
 800eebe:	4b08      	ldr	r3, [pc, #32]	; (800eee0 <mpu_get_data+0x238>)
 800eec0:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800eec4:	1ad3      	subs	r3, r2, r3
 800eec6:	ee07 3a90 	vmov	s15, r3
 800eeca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	edc3 7a08 	vstr	s15, [r3, #32]

  MPU_IO_PROBE();
}
 800eed4:	bf00      	nop
 800eed6:	3708      	adds	r7, #8
 800eed8:	46bd      	mov	sp, r7
 800eeda:	bd80      	pop	{r7, pc}
 800eedc:	20011cb8 	.word	0x20011cb8
 800eee0:	20011cc8 	.word	0x20011cc8
 800eee4:	20011cd4 	.word	0x20011cd4
 800eee8:	43d0d67f 	.word	0x43d0d67f
 800eeec:	4183126f 	.word	0x4183126f
 800eef0:	42653333 	.word	0x42653333

0800eef4 <mpu_device_init>:
{
  *tmp = 21 + mpu_data.temp / 333.87f;;
}

uint8_t mpu_device_init(void)
{
 800eef4:	b590      	push	{r4, r7, lr}
 800eef6:	b087      	sub	sp, #28
 800eef8:	af00      	add	r7, sp, #0
  // Reset the internal registers
  IST_ENABLE();
 800eefa:	2201      	movs	r2, #1
 800eefc:	2104      	movs	r1, #4
 800eefe:	4829      	ldr	r0, [pc, #164]	; (800efa4 <mpu_device_init+0xb0>)
 800ef00:	f7f4 fe70 	bl	8003be4 <HAL_GPIO_WritePin>

  mpu_write_reg(MPU6500_PWR_MGMT_1, 0x80);
 800ef04:	2180      	movs	r1, #128	; 0x80
 800ef06:	206b      	movs	r0, #107	; 0x6b
 800ef08:	f7ff fcea 	bl	800e8e0 <mpu_write_reg>
  MPU_DELAY(100);
 800ef0c:	2064      	movs	r0, #100	; 0x64
 800ef0e:	f7f3 f9a3 	bl	8002258 <HAL_Delay>
  // Reset gyro/accel/temp digital signal path
  mpu_write_reg(MPU6500_SIGNAL_PATH_RESET, 0x07);
 800ef12:	2107      	movs	r1, #7
 800ef14:	2068      	movs	r0, #104	; 0x68
 800ef16:	f7ff fce3 	bl	800e8e0 <mpu_write_reg>
  MPU_DELAY(100);
 800ef1a:	2064      	movs	r0, #100	; 0x64
 800ef1c:	f7f3 f99c 	bl	8002258 <HAL_Delay>

  if (MPU6500_ID != mpu_read_reg(MPU6500_WHO_AM_I))
 800ef20:	2075      	movs	r0, #117	; 0x75
 800ef22:	f7ff fd15 	bl	800e950 <mpu_read_reg>
 800ef26:	4603      	mov	r3, r0
 800ef28:	2b70      	cmp	r3, #112	; 0x70
 800ef2a:	d001      	beq.n	800ef30 <mpu_device_init+0x3c>
    return 1;
 800ef2c:	2301      	movs	r3, #1
 800ef2e:	e035      	b.n	800ef9c <mpu_device_init+0xa8>
  //0: 250hz; 1: 184hz; 2: 92hz; 3: 41hz; 4: 20hz; 5: 10hz; 6: 5hz; 7: 3600hz
  uint8_t MPU6500_Init_Data[7][2] = {
 800ef30:	4b1d      	ldr	r3, [pc, #116]	; (800efa8 <mpu_device_init+0xb4>)
 800ef32:	1d3c      	adds	r4, r7, #4
 800ef34:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ef36:	c407      	stmia	r4!, {r0, r1, r2}
 800ef38:	8023      	strh	r3, [r4, #0]
      {MPU6500_USER_CTRL, 0x20},      // Enable the I2C Master I/F module
                                      // pins ES_DA and ES_SCL are isolated from
                                      // pins SDA/SDI and SCL/SCLK.
  };

  for (int i = 0; i < 7; i++)
 800ef3a:	2300      	movs	r3, #0
 800ef3c:	617b      	str	r3, [r7, #20]
 800ef3e:	e015      	b.n	800ef6c <mpu_device_init+0x78>
  {
    mpu_write_reg(MPU6500_Init_Data[i][0], MPU6500_Init_Data[i][1]);
 800ef40:	697b      	ldr	r3, [r7, #20]
 800ef42:	005b      	lsls	r3, r3, #1
 800ef44:	3318      	adds	r3, #24
 800ef46:	443b      	add	r3, r7
 800ef48:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 800ef4c:	697b      	ldr	r3, [r7, #20]
 800ef4e:	005b      	lsls	r3, r3, #1
 800ef50:	3318      	adds	r3, #24
 800ef52:	443b      	add	r3, r7
 800ef54:	f813 3c13 	ldrb.w	r3, [r3, #-19]
 800ef58:	4619      	mov	r1, r3
 800ef5a:	4610      	mov	r0, r2
 800ef5c:	f7ff fcc0 	bl	800e8e0 <mpu_write_reg>
    MPU_DELAY(1);
 800ef60:	2001      	movs	r0, #1
 800ef62:	f7f3 f979 	bl	8002258 <HAL_Delay>
  for (int i = 0; i < 7; i++)
 800ef66:	697b      	ldr	r3, [r7, #20]
 800ef68:	3301      	adds	r3, #1
 800ef6a:	617b      	str	r3, [r7, #20]
 800ef6c:	697b      	ldr	r3, [r7, #20]
 800ef6e:	2b06      	cmp	r3, #6
 800ef70:	dde6      	ble.n	800ef40 <mpu_device_init+0x4c>
  }

  ist8310_init();
 800ef72:	f7ff fe02 	bl	800eb7a <ist8310_init>

  if (imu_cali.gyro_flag == 1)
 800ef76:	4b0d      	ldr	r3, [pc, #52]	; (800efac <mpu_device_init+0xb8>)
 800ef78:	781b      	ldrb	r3, [r3, #0]
 800ef7a:	2b01      	cmp	r3, #1
 800ef7c:	d101      	bne.n	800ef82 <mpu_device_init+0x8e>
  {
    get_mpu_gyro_offset();
 800ef7e:	f000 f817 	bl	800efb0 <get_mpu_gyro_offset>
  }

  if (imu_cali.acc_flag == 1)
 800ef82:	4b0a      	ldr	r3, [pc, #40]	; (800efac <mpu_device_init+0xb8>)
 800ef84:	785b      	ldrb	r3, [r3, #1]
 800ef86:	2b01      	cmp	r3, #1
 800ef88:	d101      	bne.n	800ef8e <mpu_device_init+0x9a>
  {
    get_mpu_acc_offset();
 800ef8a:	f000 f893 	bl	800f0b4 <get_mpu_acc_offset>
  }

  if (imu_cali.mag_flag == 1)
 800ef8e:	4b07      	ldr	r3, [pc, #28]	; (800efac <mpu_device_init+0xb8>)
 800ef90:	789b      	ldrb	r3, [r3, #2]
 800ef92:	2b01      	cmp	r3, #1
 800ef94:	d101      	bne.n	800ef9a <mpu_device_init+0xa6>
  {
    get_ist_mag_offset();
 800ef96:	f000 f913 	bl	800f1c0 <get_ist_mag_offset>
  }

  return 0;
 800ef9a:	2300      	movs	r3, #0
}
 800ef9c:	4618      	mov	r0, r3
 800ef9e:	371c      	adds	r7, #28
 800efa0:	46bd      	mov	sp, r7
 800efa2:	bd90      	pop	{r4, r7, pc}
 800efa4:	40021000 	.word	0x40021000
 800efa8:	08013840 	.word	0x08013840
 800efac:	20000100 	.word	0x20000100

0800efb0 <get_mpu_gyro_offset>:

static void get_mpu_gyro_offset(void)
{
 800efb0:	b580      	push	{r7, lr}
 800efb2:	b082      	sub	sp, #8
 800efb4:	af00      	add	r7, sp, #0
  int i;
  for (i = 0; i < 300; i++)
 800efb6:	2300      	movs	r3, #0
 800efb8:	607b      	str	r3, [r7, #4]
 800efba:	e043      	b.n	800f044 <get_mpu_gyro_offset+0x94>
  {
    mpu_read_regs(MPU6500_ACCEL_XOUT_H, mpu_buff, 14);
 800efbc:	220e      	movs	r2, #14
 800efbe:	4939      	ldr	r1, [pc, #228]	; (800f0a4 <get_mpu_gyro_offset+0xf4>)
 800efc0:	203b      	movs	r0, #59	; 0x3b
 800efc2:	f7ff fcf9 	bl	800e9b8 <mpu_read_regs>

    mpu_data.gx_offset += mpu_buff[8] << 8 | mpu_buff[9];
 800efc6:	4b38      	ldr	r3, [pc, #224]	; (800f0a8 <get_mpu_gyro_offset+0xf8>)
 800efc8:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 800efcc:	b29a      	uxth	r2, r3
 800efce:	4b35      	ldr	r3, [pc, #212]	; (800f0a4 <get_mpu_gyro_offset+0xf4>)
 800efd0:	7a1b      	ldrb	r3, [r3, #8]
 800efd2:	021b      	lsls	r3, r3, #8
 800efd4:	b219      	sxth	r1, r3
 800efd6:	4b33      	ldr	r3, [pc, #204]	; (800f0a4 <get_mpu_gyro_offset+0xf4>)
 800efd8:	7a5b      	ldrb	r3, [r3, #9]
 800efda:	b21b      	sxth	r3, r3
 800efdc:	430b      	orrs	r3, r1
 800efde:	b21b      	sxth	r3, r3
 800efe0:	b29b      	uxth	r3, r3
 800efe2:	4413      	add	r3, r2
 800efe4:	b29b      	uxth	r3, r3
 800efe6:	b21a      	sxth	r2, r3
 800efe8:	4b2f      	ldr	r3, [pc, #188]	; (800f0a8 <get_mpu_gyro_offset+0xf8>)
 800efea:	835a      	strh	r2, [r3, #26]
    mpu_data.gy_offset += mpu_buff[10] << 8 | mpu_buff[11];
 800efec:	4b2e      	ldr	r3, [pc, #184]	; (800f0a8 <get_mpu_gyro_offset+0xf8>)
 800efee:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 800eff2:	b29a      	uxth	r2, r3
 800eff4:	4b2b      	ldr	r3, [pc, #172]	; (800f0a4 <get_mpu_gyro_offset+0xf4>)
 800eff6:	7a9b      	ldrb	r3, [r3, #10]
 800eff8:	021b      	lsls	r3, r3, #8
 800effa:	b219      	sxth	r1, r3
 800effc:	4b29      	ldr	r3, [pc, #164]	; (800f0a4 <get_mpu_gyro_offset+0xf4>)
 800effe:	7adb      	ldrb	r3, [r3, #11]
 800f000:	b21b      	sxth	r3, r3
 800f002:	430b      	orrs	r3, r1
 800f004:	b21b      	sxth	r3, r3
 800f006:	b29b      	uxth	r3, r3
 800f008:	4413      	add	r3, r2
 800f00a:	b29b      	uxth	r3, r3
 800f00c:	b21a      	sxth	r2, r3
 800f00e:	4b26      	ldr	r3, [pc, #152]	; (800f0a8 <get_mpu_gyro_offset+0xf8>)
 800f010:	839a      	strh	r2, [r3, #28]
    mpu_data.gz_offset += mpu_buff[12] << 8 | mpu_buff[13];
 800f012:	4b25      	ldr	r3, [pc, #148]	; (800f0a8 <get_mpu_gyro_offset+0xf8>)
 800f014:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 800f018:	b29a      	uxth	r2, r3
 800f01a:	4b22      	ldr	r3, [pc, #136]	; (800f0a4 <get_mpu_gyro_offset+0xf4>)
 800f01c:	7b1b      	ldrb	r3, [r3, #12]
 800f01e:	021b      	lsls	r3, r3, #8
 800f020:	b219      	sxth	r1, r3
 800f022:	4b20      	ldr	r3, [pc, #128]	; (800f0a4 <get_mpu_gyro_offset+0xf4>)
 800f024:	7b5b      	ldrb	r3, [r3, #13]
 800f026:	b21b      	sxth	r3, r3
 800f028:	430b      	orrs	r3, r1
 800f02a:	b21b      	sxth	r3, r3
 800f02c:	b29b      	uxth	r3, r3
 800f02e:	4413      	add	r3, r2
 800f030:	b29b      	uxth	r3, r3
 800f032:	b21a      	sxth	r2, r3
 800f034:	4b1c      	ldr	r3, [pc, #112]	; (800f0a8 <get_mpu_gyro_offset+0xf8>)
 800f036:	83da      	strh	r2, [r3, #30]

    MPU_DELAY(2);
 800f038:	2002      	movs	r0, #2
 800f03a:	f7f3 f90d 	bl	8002258 <HAL_Delay>
  for (i = 0; i < 300; i++)
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	3301      	adds	r3, #1
 800f042:	607b      	str	r3, [r7, #4]
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800f04a:	dbb7      	blt.n	800efbc <get_mpu_gyro_offset+0xc>
  }

  mpu_data.gx_offset = mpu_data.gx_offset / 300;
 800f04c:	4b16      	ldr	r3, [pc, #88]	; (800f0a8 <get_mpu_gyro_offset+0xf8>)
 800f04e:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 800f052:	4a16      	ldr	r2, [pc, #88]	; (800f0ac <get_mpu_gyro_offset+0xfc>)
 800f054:	fb82 1203 	smull	r1, r2, r2, r3
 800f058:	1152      	asrs	r2, r2, #5
 800f05a:	17db      	asrs	r3, r3, #31
 800f05c:	1ad3      	subs	r3, r2, r3
 800f05e:	b21a      	sxth	r2, r3
 800f060:	4b11      	ldr	r3, [pc, #68]	; (800f0a8 <get_mpu_gyro_offset+0xf8>)
 800f062:	835a      	strh	r2, [r3, #26]
  mpu_data.gy_offset = mpu_data.gy_offset / 300;
 800f064:	4b10      	ldr	r3, [pc, #64]	; (800f0a8 <get_mpu_gyro_offset+0xf8>)
 800f066:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 800f06a:	4a10      	ldr	r2, [pc, #64]	; (800f0ac <get_mpu_gyro_offset+0xfc>)
 800f06c:	fb82 1203 	smull	r1, r2, r2, r3
 800f070:	1152      	asrs	r2, r2, #5
 800f072:	17db      	asrs	r3, r3, #31
 800f074:	1ad3      	subs	r3, r2, r3
 800f076:	b21a      	sxth	r2, r3
 800f078:	4b0b      	ldr	r3, [pc, #44]	; (800f0a8 <get_mpu_gyro_offset+0xf8>)
 800f07a:	839a      	strh	r2, [r3, #28]
  mpu_data.gz_offset = mpu_data.gz_offset / 300;
 800f07c:	4b0a      	ldr	r3, [pc, #40]	; (800f0a8 <get_mpu_gyro_offset+0xf8>)
 800f07e:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 800f082:	4a0a      	ldr	r2, [pc, #40]	; (800f0ac <get_mpu_gyro_offset+0xfc>)
 800f084:	fb82 1203 	smull	r1, r2, r2, r3
 800f088:	1152      	asrs	r2, r2, #5
 800f08a:	17db      	asrs	r3, r3, #31
 800f08c:	1ad3      	subs	r3, r2, r3
 800f08e:	b21a      	sxth	r2, r3
 800f090:	4b05      	ldr	r3, [pc, #20]	; (800f0a8 <get_mpu_gyro_offset+0xf8>)
 800f092:	83da      	strh	r2, [r3, #30]
  imu_cali.gyro_flag = 0;
 800f094:	4b06      	ldr	r3, [pc, #24]	; (800f0b0 <get_mpu_gyro_offset+0x100>)
 800f096:	2200      	movs	r2, #0
 800f098:	701a      	strb	r2, [r3, #0]
}
 800f09a:	bf00      	nop
 800f09c:	3708      	adds	r7, #8
 800f09e:	46bd      	mov	sp, r7
 800f0a0:	bd80      	pop	{r7, pc}
 800f0a2:	bf00      	nop
 800f0a4:	20011cb8 	.word	0x20011cb8
 800f0a8:	20011cc8 	.word	0x20011cc8
 800f0ac:	1b4e81b5 	.word	0x1b4e81b5
 800f0b0:	20000100 	.word	0x20000100

0800f0b4 <get_mpu_acc_offset>:

static void get_mpu_acc_offset(void)
{
 800f0b4:	b580      	push	{r7, lr}
 800f0b6:	b082      	sub	sp, #8
 800f0b8:	af00      	add	r7, sp, #0
  int i;
  for (i = 0; i < 300; i++)
 800f0ba:	2300      	movs	r3, #0
 800f0bc:	607b      	str	r3, [r7, #4]
 800f0be:	e047      	b.n	800f150 <get_mpu_acc_offset+0x9c>
  {
    mpu_read_regs(MPU6500_ACCEL_XOUT_H, mpu_buff, 14);
 800f0c0:	220e      	movs	r2, #14
 800f0c2:	493b      	ldr	r1, [pc, #236]	; (800f1b0 <get_mpu_acc_offset+0xfc>)
 800f0c4:	203b      	movs	r0, #59	; 0x3b
 800f0c6:	f7ff fc77 	bl	800e9b8 <mpu_read_regs>

    mpu_data.ax_offset += mpu_buff[0] << 8 | mpu_buff[1];
 800f0ca:	4b3a      	ldr	r3, [pc, #232]	; (800f1b4 <get_mpu_acc_offset+0x100>)
 800f0cc:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800f0d0:	b29a      	uxth	r2, r3
 800f0d2:	4b37      	ldr	r3, [pc, #220]	; (800f1b0 <get_mpu_acc_offset+0xfc>)
 800f0d4:	781b      	ldrb	r3, [r3, #0]
 800f0d6:	021b      	lsls	r3, r3, #8
 800f0d8:	b219      	sxth	r1, r3
 800f0da:	4b35      	ldr	r3, [pc, #212]	; (800f1b0 <get_mpu_acc_offset+0xfc>)
 800f0dc:	785b      	ldrb	r3, [r3, #1]
 800f0de:	b21b      	sxth	r3, r3
 800f0e0:	430b      	orrs	r3, r1
 800f0e2:	b21b      	sxth	r3, r3
 800f0e4:	b29b      	uxth	r3, r3
 800f0e6:	4413      	add	r3, r2
 800f0e8:	b29b      	uxth	r3, r3
 800f0ea:	b21a      	sxth	r2, r3
 800f0ec:	4b31      	ldr	r3, [pc, #196]	; (800f1b4 <get_mpu_acc_offset+0x100>)
 800f0ee:	829a      	strh	r2, [r3, #20]
    mpu_data.ay_offset += mpu_buff[2] << 8 | mpu_buff[3];
 800f0f0:	4b30      	ldr	r3, [pc, #192]	; (800f1b4 <get_mpu_acc_offset+0x100>)
 800f0f2:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800f0f6:	b29a      	uxth	r2, r3
 800f0f8:	4b2d      	ldr	r3, [pc, #180]	; (800f1b0 <get_mpu_acc_offset+0xfc>)
 800f0fa:	789b      	ldrb	r3, [r3, #2]
 800f0fc:	021b      	lsls	r3, r3, #8
 800f0fe:	b219      	sxth	r1, r3
 800f100:	4b2b      	ldr	r3, [pc, #172]	; (800f1b0 <get_mpu_acc_offset+0xfc>)
 800f102:	78db      	ldrb	r3, [r3, #3]
 800f104:	b21b      	sxth	r3, r3
 800f106:	430b      	orrs	r3, r1
 800f108:	b21b      	sxth	r3, r3
 800f10a:	b29b      	uxth	r3, r3
 800f10c:	4413      	add	r3, r2
 800f10e:	b29b      	uxth	r3, r3
 800f110:	b21a      	sxth	r2, r3
 800f112:	4b28      	ldr	r3, [pc, #160]	; (800f1b4 <get_mpu_acc_offset+0x100>)
 800f114:	82da      	strh	r2, [r3, #22]
    mpu_data.az_offset += mpu_buff[4] << 8 | mpu_buff[5] - 4096;
 800f116:	4b27      	ldr	r3, [pc, #156]	; (800f1b4 <get_mpu_acc_offset+0x100>)
 800f118:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800f11c:	b29a      	uxth	r2, r3
 800f11e:	4b24      	ldr	r3, [pc, #144]	; (800f1b0 <get_mpu_acc_offset+0xfc>)
 800f120:	791b      	ldrb	r3, [r3, #4]
 800f122:	021b      	lsls	r3, r3, #8
 800f124:	b219      	sxth	r1, r3
 800f126:	4b22      	ldr	r3, [pc, #136]	; (800f1b0 <get_mpu_acc_offset+0xfc>)
 800f128:	795b      	ldrb	r3, [r3, #5]
 800f12a:	b29b      	uxth	r3, r3
 800f12c:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
 800f130:	b29b      	uxth	r3, r3
 800f132:	b21b      	sxth	r3, r3
 800f134:	430b      	orrs	r3, r1
 800f136:	b21b      	sxth	r3, r3
 800f138:	b29b      	uxth	r3, r3
 800f13a:	4413      	add	r3, r2
 800f13c:	b29b      	uxth	r3, r3
 800f13e:	b21a      	sxth	r2, r3
 800f140:	4b1c      	ldr	r3, [pc, #112]	; (800f1b4 <get_mpu_acc_offset+0x100>)
 800f142:	831a      	strh	r2, [r3, #24]

    MPU_DELAY(2);
 800f144:	2002      	movs	r0, #2
 800f146:	f7f3 f887 	bl	8002258 <HAL_Delay>
  for (i = 0; i < 300; i++)
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	3301      	adds	r3, #1
 800f14e:	607b      	str	r3, [r7, #4]
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800f156:	dbb3      	blt.n	800f0c0 <get_mpu_acc_offset+0xc>
  }

  mpu_data.ax_offset = mpu_data.ax_offset / 300;
 800f158:	4b16      	ldr	r3, [pc, #88]	; (800f1b4 <get_mpu_acc_offset+0x100>)
 800f15a:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800f15e:	4a16      	ldr	r2, [pc, #88]	; (800f1b8 <get_mpu_acc_offset+0x104>)
 800f160:	fb82 1203 	smull	r1, r2, r2, r3
 800f164:	1152      	asrs	r2, r2, #5
 800f166:	17db      	asrs	r3, r3, #31
 800f168:	1ad3      	subs	r3, r2, r3
 800f16a:	b21a      	sxth	r2, r3
 800f16c:	4b11      	ldr	r3, [pc, #68]	; (800f1b4 <get_mpu_acc_offset+0x100>)
 800f16e:	829a      	strh	r2, [r3, #20]
  mpu_data.ay_offset = mpu_data.ay_offset / 300;
 800f170:	4b10      	ldr	r3, [pc, #64]	; (800f1b4 <get_mpu_acc_offset+0x100>)
 800f172:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800f176:	4a10      	ldr	r2, [pc, #64]	; (800f1b8 <get_mpu_acc_offset+0x104>)
 800f178:	fb82 1203 	smull	r1, r2, r2, r3
 800f17c:	1152      	asrs	r2, r2, #5
 800f17e:	17db      	asrs	r3, r3, #31
 800f180:	1ad3      	subs	r3, r2, r3
 800f182:	b21a      	sxth	r2, r3
 800f184:	4b0b      	ldr	r3, [pc, #44]	; (800f1b4 <get_mpu_acc_offset+0x100>)
 800f186:	82da      	strh	r2, [r3, #22]
  mpu_data.az_offset = mpu_data.az_offset / 300;
 800f188:	4b0a      	ldr	r3, [pc, #40]	; (800f1b4 <get_mpu_acc_offset+0x100>)
 800f18a:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800f18e:	4a0a      	ldr	r2, [pc, #40]	; (800f1b8 <get_mpu_acc_offset+0x104>)
 800f190:	fb82 1203 	smull	r1, r2, r2, r3
 800f194:	1152      	asrs	r2, r2, #5
 800f196:	17db      	asrs	r3, r3, #31
 800f198:	1ad3      	subs	r3, r2, r3
 800f19a:	b21a      	sxth	r2, r3
 800f19c:	4b05      	ldr	r3, [pc, #20]	; (800f1b4 <get_mpu_acc_offset+0x100>)
 800f19e:	831a      	strh	r2, [r3, #24]

  imu_cali.acc_flag = 0;
 800f1a0:	4b06      	ldr	r3, [pc, #24]	; (800f1bc <get_mpu_acc_offset+0x108>)
 800f1a2:	2200      	movs	r2, #0
 800f1a4:	705a      	strb	r2, [r3, #1]
}
 800f1a6:	bf00      	nop
 800f1a8:	3708      	adds	r7, #8
 800f1aa:	46bd      	mov	sp, r7
 800f1ac:	bd80      	pop	{r7, pc}
 800f1ae:	bf00      	nop
 800f1b0:	20011cb8 	.word	0x20011cb8
 800f1b4:	20011cc8 	.word	0x20011cc8
 800f1b8:	1b4e81b5 	.word	0x1b4e81b5
 800f1bc:	20000100 	.word	0x20000100

0800f1c0 <get_ist_mag_offset>:

static void get_ist_mag_offset(void)
{
 800f1c0:	b580      	push	{r7, lr}
 800f1c2:	b086      	sub	sp, #24
 800f1c4:	af00      	add	r7, sp, #0
  int16_t mag_max[3], mag_min[3];
  int i;
  for (i = 0; i < 5000; i++)
 800f1c6:	2300      	movs	r3, #0
 800f1c8:	617b      	str	r3, [r7, #20]
 800f1ca:	e062      	b.n	800f292 <get_ist_mag_offset+0xd2>
  {
    ist8310_get_data((uint8_t *)&mpu_data.mx);
 800f1cc:	4856      	ldr	r0, [pc, #344]	; (800f328 <get_ist_mag_offset+0x168>)
 800f1ce:	f7ff fd5d 	bl	800ec8c <ist8310_get_data>
    if ((abs(mpu_data.mx) < 400) && (abs(mpu_data.my) < 400) && (abs(mpu_data.mz) < 400))
 800f1d2:	4b56      	ldr	r3, [pc, #344]	; (800f32c <get_ist_mag_offset+0x16c>)
 800f1d4:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800f1d8:	2b00      	cmp	r3, #0
 800f1da:	bfb8      	it	lt
 800f1dc:	425b      	neglt	r3, r3
 800f1de:	b29b      	uxth	r3, r3
 800f1e0:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800f1e4:	d24f      	bcs.n	800f286 <get_ist_mag_offset+0xc6>
 800f1e6:	4b51      	ldr	r3, [pc, #324]	; (800f32c <get_ist_mag_offset+0x16c>)
 800f1e8:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800f1ec:	2b00      	cmp	r3, #0
 800f1ee:	bfb8      	it	lt
 800f1f0:	425b      	neglt	r3, r3
 800f1f2:	b29b      	uxth	r3, r3
 800f1f4:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800f1f8:	d245      	bcs.n	800f286 <get_ist_mag_offset+0xc6>
 800f1fa:	4b4c      	ldr	r3, [pc, #304]	; (800f32c <get_ist_mag_offset+0x16c>)
 800f1fc:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800f200:	2b00      	cmp	r3, #0
 800f202:	bfb8      	it	lt
 800f204:	425b      	neglt	r3, r3
 800f206:	b29b      	uxth	r3, r3
 800f208:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800f20c:	d23b      	bcs.n	800f286 <get_ist_mag_offset+0xc6>
    {
      mag_max[0] = VAL_MAX(mag_max[0], mpu_data.mx);
 800f20e:	4b47      	ldr	r3, [pc, #284]	; (800f32c <get_ist_mag_offset+0x16c>)
 800f210:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 800f214:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800f218:	4293      	cmp	r3, r2
 800f21a:	bfb8      	it	lt
 800f21c:	4613      	movlt	r3, r2
 800f21e:	b21b      	sxth	r3, r3
 800f220:	81bb      	strh	r3, [r7, #12]
      mag_min[0] = VAL_MIN(mag_min[0], mpu_data.mx);
 800f222:	4b42      	ldr	r3, [pc, #264]	; (800f32c <get_ist_mag_offset+0x16c>)
 800f224:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 800f228:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800f22c:	4293      	cmp	r3, r2
 800f22e:	bfa8      	it	ge
 800f230:	4613      	movge	r3, r2
 800f232:	b21b      	sxth	r3, r3
 800f234:	80bb      	strh	r3, [r7, #4]

      mag_max[1] = VAL_MAX(mag_max[1], mpu_data.my);
 800f236:	4b3d      	ldr	r3, [pc, #244]	; (800f32c <get_ist_mag_offset+0x16c>)
 800f238:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 800f23c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800f240:	4293      	cmp	r3, r2
 800f242:	bfb8      	it	lt
 800f244:	4613      	movlt	r3, r2
 800f246:	b21b      	sxth	r3, r3
 800f248:	81fb      	strh	r3, [r7, #14]
      mag_min[1] = VAL_MIN(mag_min[1], mpu_data.my);
 800f24a:	4b38      	ldr	r3, [pc, #224]	; (800f32c <get_ist_mag_offset+0x16c>)
 800f24c:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 800f250:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f254:	4293      	cmp	r3, r2
 800f256:	bfa8      	it	ge
 800f258:	4613      	movge	r3, r2
 800f25a:	b21b      	sxth	r3, r3
 800f25c:	80fb      	strh	r3, [r7, #6]

      mag_max[2] = VAL_MAX(mag_max[2], mpu_data.mz);
 800f25e:	4b33      	ldr	r3, [pc, #204]	; (800f32c <get_ist_mag_offset+0x16c>)
 800f260:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 800f264:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800f268:	4293      	cmp	r3, r2
 800f26a:	bfb8      	it	lt
 800f26c:	4613      	movlt	r3, r2
 800f26e:	b21b      	sxth	r3, r3
 800f270:	823b      	strh	r3, [r7, #16]
      mag_min[2] = VAL_MIN(mag_min[2], mpu_data.mz);
 800f272:	4b2e      	ldr	r3, [pc, #184]	; (800f32c <get_ist_mag_offset+0x16c>)
 800f274:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 800f278:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800f27c:	4293      	cmp	r3, r2
 800f27e:	bfa8      	it	ge
 800f280:	4613      	movge	r3, r2
 800f282:	b21b      	sxth	r3, r3
 800f284:	813b      	strh	r3, [r7, #8]
    }
    MPU_DELAY(2);
 800f286:	2002      	movs	r0, #2
 800f288:	f7f2 ffe6 	bl	8002258 <HAL_Delay>
  for (i = 0; i < 5000; i++)
 800f28c:	697b      	ldr	r3, [r7, #20]
 800f28e:	3301      	adds	r3, #1
 800f290:	617b      	str	r3, [r7, #20]
 800f292:	697b      	ldr	r3, [r7, #20]
 800f294:	f241 3287 	movw	r2, #4999	; 0x1387
 800f298:	4293      	cmp	r3, r2
 800f29a:	dd97      	ble.n	800f1cc <get_ist_mag_offset+0xc>
  }
  mpu_data.mx_offset = (int16_t)((mag_max[0] + mag_min[0]) * 0.5f);
 800f29c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800f2a0:	461a      	mov	r2, r3
 800f2a2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800f2a6:	4413      	add	r3, r2
 800f2a8:	ee07 3a90 	vmov	s15, r3
 800f2ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f2b0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800f2b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f2b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f2bc:	ee17 3a90 	vmov	r3, s15
 800f2c0:	b21a      	sxth	r2, r3
 800f2c2:	4b1a      	ldr	r3, [pc, #104]	; (800f32c <get_ist_mag_offset+0x16c>)
 800f2c4:	841a      	strh	r2, [r3, #32]
  mpu_data.my_offset = (int16_t)((mag_max[1] + mag_min[1]) * 0.5f);
 800f2c6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800f2ca:	461a      	mov	r2, r3
 800f2cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f2d0:	4413      	add	r3, r2
 800f2d2:	ee07 3a90 	vmov	s15, r3
 800f2d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f2da:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800f2de:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f2e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f2e6:	ee17 3a90 	vmov	r3, s15
 800f2ea:	b21a      	sxth	r2, r3
 800f2ec:	4b0f      	ldr	r3, [pc, #60]	; (800f32c <get_ist_mag_offset+0x16c>)
 800f2ee:	845a      	strh	r2, [r3, #34]	; 0x22
  mpu_data.mz_offset = (int16_t)((mag_max[2] + mag_min[2]) * 0.5f);
 800f2f0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800f2f4:	461a      	mov	r2, r3
 800f2f6:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800f2fa:	4413      	add	r3, r2
 800f2fc:	ee07 3a90 	vmov	s15, r3
 800f300:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f304:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800f308:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f30c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f310:	ee17 3a90 	vmov	r3, s15
 800f314:	b21a      	sxth	r2, r3
 800f316:	4b05      	ldr	r3, [pc, #20]	; (800f32c <get_ist_mag_offset+0x16c>)
 800f318:	849a      	strh	r2, [r3, #36]	; 0x24

  imu_cali.mag_flag = 0;
 800f31a:	4b05      	ldr	r3, [pc, #20]	; (800f330 <get_ist_mag_offset+0x170>)
 800f31c:	2200      	movs	r2, #0
 800f31e:	709a      	strb	r2, [r3, #2]
}
 800f320:	bf00      	nop
 800f322:	3718      	adds	r7, #24
 800f324:	46bd      	mov	sp, r7
 800f326:	bd80      	pop	{r7, pc}
 800f328:	20011cd4 	.word	0x20011cd4
 800f32c:	20011cc8 	.word	0x20011cc8
 800f330:	20000100 	.word	0x20000100

0800f334 <invSqrt>:
               sizeof(long) must be 4 bytes.
  * @param[in] input:x
  * @retval    1/Sqrt(x)
  */
float invSqrt(float x)
{
 800f334:	b480      	push	{r7}
 800f336:	b087      	sub	sp, #28
 800f338:	af00      	add	r7, sp, #0
 800f33a:	ed87 0a01 	vstr	s0, [r7, #4]
  float halfx = 0.5f * x;
 800f33e:	edd7 7a01 	vldr	s15, [r7, #4]
 800f342:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800f346:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f34a:	edc7 7a05 	vstr	s15, [r7, #20]
  float y = x;
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	613b      	str	r3, [r7, #16]
  long i = *(long *)&y;
 800f352:	f107 0310 	add.w	r3, r7, #16
 800f356:	681b      	ldr	r3, [r3, #0]
 800f358:	60fb      	str	r3, [r7, #12]
  i = 0x5f3759df - (i >> 1);
 800f35a:	68fb      	ldr	r3, [r7, #12]
 800f35c:	105a      	asrs	r2, r3, #1
 800f35e:	4b12      	ldr	r3, [pc, #72]	; (800f3a8 <invSqrt+0x74>)
 800f360:	1a9b      	subs	r3, r3, r2
 800f362:	60fb      	str	r3, [r7, #12]
  y = *(float *)&i;
 800f364:	f107 030c 	add.w	r3, r7, #12
 800f368:	681b      	ldr	r3, [r3, #0]
 800f36a:	613b      	str	r3, [r7, #16]
  y = y * (1.5f - (halfx * y * y));
 800f36c:	ed97 7a04 	vldr	s14, [r7, #16]
 800f370:	edd7 7a05 	vldr	s15, [r7, #20]
 800f374:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f378:	edd7 7a04 	vldr	s15, [r7, #16]
 800f37c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f380:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 800f384:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f388:	edd7 7a04 	vldr	s15, [r7, #16]
 800f38c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f390:	edc7 7a04 	vstr	s15, [r7, #16]
  return y;
 800f394:	693b      	ldr	r3, [r7, #16]
 800f396:	ee07 3a90 	vmov	s15, r3
}
 800f39a:	eeb0 0a67 	vmov.f32	s0, s15
 800f39e:	371c      	adds	r7, #28
 800f3a0:	46bd      	mov	sp, r7
 800f3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3a6:	4770      	bx	lr
 800f3a8:	5f3759df 	.word	0x5f3759df
 800f3ac:	00000000 	.word	0x00000000

0800f3b0 <mahony_ahrs_updateIMU>:
  atti->pitch = asin(-2 * q1 * q3 + 2 * q0 * q2) * 57.3;                                // pitch    -pi/2----pi/2
  atti->yaw = atan2(2 * q1 * q2 + 2 * q0 * q3, -2 * q2 * q2 - 2 * q3 * q3 + 1) * 57.3;  // yaw      -pi----pi
}

void mahony_ahrs_updateIMU(struct ahrs_sensor *sensor, struct attitude *atti)
{
 800f3b0:	b5b0      	push	{r4, r5, r7, lr}
 800f3b2:	b08c      	sub	sp, #48	; 0x30
 800f3b4:	af00      	add	r7, sp, #0
 800f3b6:	6078      	str	r0, [r7, #4]
 800f3b8:	6039      	str	r1, [r7, #0]
  float recipNorm;
  float halfvx, halfvy, halfvz;
  float halfex, halfey, halfez;
  float qa, qb, qc;

  gx = sensor->wx;
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	68db      	ldr	r3, [r3, #12]
 800f3be:	4aaa      	ldr	r2, [pc, #680]	; (800f668 <mahony_ahrs_updateIMU+0x2b8>)
 800f3c0:	6013      	str	r3, [r2, #0]
  gy = sensor->wy;
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	691b      	ldr	r3, [r3, #16]
 800f3c6:	4aa9      	ldr	r2, [pc, #676]	; (800f66c <mahony_ahrs_updateIMU+0x2bc>)
 800f3c8:	6013      	str	r3, [r2, #0]
  gz = sensor->wz;
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	695b      	ldr	r3, [r3, #20]
 800f3ce:	4aa8      	ldr	r2, [pc, #672]	; (800f670 <mahony_ahrs_updateIMU+0x2c0>)
 800f3d0:	6013      	str	r3, [r2, #0]
  ax = sensor->ax;
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	681b      	ldr	r3, [r3, #0]
 800f3d6:	4aa7      	ldr	r2, [pc, #668]	; (800f674 <mahony_ahrs_updateIMU+0x2c4>)
 800f3d8:	6013      	str	r3, [r2, #0]
  ay = sensor->ay;
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	685b      	ldr	r3, [r3, #4]
 800f3de:	4aa6      	ldr	r2, [pc, #664]	; (800f678 <mahony_ahrs_updateIMU+0x2c8>)
 800f3e0:	6013      	str	r3, [r2, #0]
  az = sensor->az;
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	689b      	ldr	r3, [r3, #8]
 800f3e6:	4aa5      	ldr	r2, [pc, #660]	; (800f67c <mahony_ahrs_updateIMU+0x2cc>)
 800f3e8:	6013      	str	r3, [r2, #0]
  mx = sensor->mx;
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	699b      	ldr	r3, [r3, #24]
 800f3ee:	4aa4      	ldr	r2, [pc, #656]	; (800f680 <mahony_ahrs_updateIMU+0x2d0>)
 800f3f0:	6013      	str	r3, [r2, #0]
  my = sensor->my;
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	69db      	ldr	r3, [r3, #28]
 800f3f6:	4aa3      	ldr	r2, [pc, #652]	; (800f684 <mahony_ahrs_updateIMU+0x2d4>)
 800f3f8:	6013      	str	r3, [r2, #0]
  mz = sensor->mz;
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	6a1b      	ldr	r3, [r3, #32]
 800f3fe:	4aa2      	ldr	r2, [pc, #648]	; (800f688 <mahony_ahrs_updateIMU+0x2d8>)
 800f400:	6013      	str	r3, [r2, #0]
  // Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
  if (!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f)))
 800f402:	4b9c      	ldr	r3, [pc, #624]	; (800f674 <mahony_ahrs_updateIMU+0x2c4>)
 800f404:	edd3 7a00 	vldr	s15, [r3]
 800f408:	eef5 7a40 	vcmp.f32	s15, #0.0
 800f40c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f410:	d110      	bne.n	800f434 <mahony_ahrs_updateIMU+0x84>
 800f412:	4b99      	ldr	r3, [pc, #612]	; (800f678 <mahony_ahrs_updateIMU+0x2c8>)
 800f414:	edd3 7a00 	vldr	s15, [r3]
 800f418:	eef5 7a40 	vcmp.f32	s15, #0.0
 800f41c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f420:	d108      	bne.n	800f434 <mahony_ahrs_updateIMU+0x84>
 800f422:	4b96      	ldr	r3, [pc, #600]	; (800f67c <mahony_ahrs_updateIMU+0x2cc>)
 800f424:	edd3 7a00 	vldr	s15, [r3]
 800f428:	eef5 7a40 	vcmp.f32	s15, #0.0
 800f42c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f430:	f000 8177 	beq.w	800f722 <mahony_ahrs_updateIMU+0x372>
  {

    // Normalise accelerometer measurement
    recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 800f434:	4b8f      	ldr	r3, [pc, #572]	; (800f674 <mahony_ahrs_updateIMU+0x2c4>)
 800f436:	ed93 7a00 	vldr	s14, [r3]
 800f43a:	4b8e      	ldr	r3, [pc, #568]	; (800f674 <mahony_ahrs_updateIMU+0x2c4>)
 800f43c:	edd3 7a00 	vldr	s15, [r3]
 800f440:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f444:	4b8c      	ldr	r3, [pc, #560]	; (800f678 <mahony_ahrs_updateIMU+0x2c8>)
 800f446:	edd3 6a00 	vldr	s13, [r3]
 800f44a:	4b8b      	ldr	r3, [pc, #556]	; (800f678 <mahony_ahrs_updateIMU+0x2c8>)
 800f44c:	edd3 7a00 	vldr	s15, [r3]
 800f450:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f454:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f458:	4b88      	ldr	r3, [pc, #544]	; (800f67c <mahony_ahrs_updateIMU+0x2cc>)
 800f45a:	edd3 6a00 	vldr	s13, [r3]
 800f45e:	4b87      	ldr	r3, [pc, #540]	; (800f67c <mahony_ahrs_updateIMU+0x2cc>)
 800f460:	edd3 7a00 	vldr	s15, [r3]
 800f464:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f468:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f46c:	eeb0 0a67 	vmov.f32	s0, s15
 800f470:	f7ff ff60 	bl	800f334 <invSqrt>
 800f474:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
    ax *= recipNorm;
 800f478:	4b7e      	ldr	r3, [pc, #504]	; (800f674 <mahony_ahrs_updateIMU+0x2c4>)
 800f47a:	ed93 7a00 	vldr	s14, [r3]
 800f47e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800f482:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f486:	4b7b      	ldr	r3, [pc, #492]	; (800f674 <mahony_ahrs_updateIMU+0x2c4>)
 800f488:	edc3 7a00 	vstr	s15, [r3]
    ay *= recipNorm;
 800f48c:	4b7a      	ldr	r3, [pc, #488]	; (800f678 <mahony_ahrs_updateIMU+0x2c8>)
 800f48e:	ed93 7a00 	vldr	s14, [r3]
 800f492:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800f496:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f49a:	4b77      	ldr	r3, [pc, #476]	; (800f678 <mahony_ahrs_updateIMU+0x2c8>)
 800f49c:	edc3 7a00 	vstr	s15, [r3]
    az *= recipNorm;
 800f4a0:	4b76      	ldr	r3, [pc, #472]	; (800f67c <mahony_ahrs_updateIMU+0x2cc>)
 800f4a2:	ed93 7a00 	vldr	s14, [r3]
 800f4a6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800f4aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f4ae:	4b73      	ldr	r3, [pc, #460]	; (800f67c <mahony_ahrs_updateIMU+0x2cc>)
 800f4b0:	edc3 7a00 	vstr	s15, [r3]

    // Estimated direction of gravity and vector perpendicular to magnetic flux
    halfvx = q1 * q3 - q0 * q2;
 800f4b4:	4b75      	ldr	r3, [pc, #468]	; (800f68c <mahony_ahrs_updateIMU+0x2dc>)
 800f4b6:	ed93 7a00 	vldr	s14, [r3]
 800f4ba:	4b75      	ldr	r3, [pc, #468]	; (800f690 <mahony_ahrs_updateIMU+0x2e0>)
 800f4bc:	edd3 7a00 	vldr	s15, [r3]
 800f4c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f4c4:	4b73      	ldr	r3, [pc, #460]	; (800f694 <mahony_ahrs_updateIMU+0x2e4>)
 800f4c6:	edd3 6a00 	vldr	s13, [r3]
 800f4ca:	4b73      	ldr	r3, [pc, #460]	; (800f698 <mahony_ahrs_updateIMU+0x2e8>)
 800f4cc:	edd3 7a00 	vldr	s15, [r3]
 800f4d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f4d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f4d8:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    halfvy = q0 * q1 + q2 * q3;
 800f4dc:	4b6d      	ldr	r3, [pc, #436]	; (800f694 <mahony_ahrs_updateIMU+0x2e4>)
 800f4de:	ed93 7a00 	vldr	s14, [r3]
 800f4e2:	4b6a      	ldr	r3, [pc, #424]	; (800f68c <mahony_ahrs_updateIMU+0x2dc>)
 800f4e4:	edd3 7a00 	vldr	s15, [r3]
 800f4e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f4ec:	4b6a      	ldr	r3, [pc, #424]	; (800f698 <mahony_ahrs_updateIMU+0x2e8>)
 800f4ee:	edd3 6a00 	vldr	s13, [r3]
 800f4f2:	4b67      	ldr	r3, [pc, #412]	; (800f690 <mahony_ahrs_updateIMU+0x2e0>)
 800f4f4:	edd3 7a00 	vldr	s15, [r3]
 800f4f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f4fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f500:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    halfvz = q0 * q0 - 0.5f + q3 * q3;
 800f504:	4b63      	ldr	r3, [pc, #396]	; (800f694 <mahony_ahrs_updateIMU+0x2e4>)
 800f506:	ed93 7a00 	vldr	s14, [r3]
 800f50a:	4b62      	ldr	r3, [pc, #392]	; (800f694 <mahony_ahrs_updateIMU+0x2e4>)
 800f50c:	edd3 7a00 	vldr	s15, [r3]
 800f510:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f514:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800f518:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800f51c:	4b5c      	ldr	r3, [pc, #368]	; (800f690 <mahony_ahrs_updateIMU+0x2e0>)
 800f51e:	edd3 6a00 	vldr	s13, [r3]
 800f522:	4b5b      	ldr	r3, [pc, #364]	; (800f690 <mahony_ahrs_updateIMU+0x2e0>)
 800f524:	edd3 7a00 	vldr	s15, [r3]
 800f528:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f52c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f530:	edc7 7a08 	vstr	s15, [r7, #32]

    // Error is sum of cross product between estimated and measured direction of gravity
    halfex = (ay * halfvz - az * halfvy);
 800f534:	4b50      	ldr	r3, [pc, #320]	; (800f678 <mahony_ahrs_updateIMU+0x2c8>)
 800f536:	ed93 7a00 	vldr	s14, [r3]
 800f53a:	edd7 7a08 	vldr	s15, [r7, #32]
 800f53e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f542:	4b4e      	ldr	r3, [pc, #312]	; (800f67c <mahony_ahrs_updateIMU+0x2cc>)
 800f544:	edd3 6a00 	vldr	s13, [r3]
 800f548:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800f54c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f550:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f554:	edc7 7a07 	vstr	s15, [r7, #28]
    halfey = (az * halfvx - ax * halfvz);
 800f558:	4b48      	ldr	r3, [pc, #288]	; (800f67c <mahony_ahrs_updateIMU+0x2cc>)
 800f55a:	ed93 7a00 	vldr	s14, [r3]
 800f55e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800f562:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f566:	4b43      	ldr	r3, [pc, #268]	; (800f674 <mahony_ahrs_updateIMU+0x2c4>)
 800f568:	edd3 6a00 	vldr	s13, [r3]
 800f56c:	edd7 7a08 	vldr	s15, [r7, #32]
 800f570:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f574:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f578:	edc7 7a06 	vstr	s15, [r7, #24]
    halfez = (ax * halfvy - ay * halfvx);
 800f57c:	4b3d      	ldr	r3, [pc, #244]	; (800f674 <mahony_ahrs_updateIMU+0x2c4>)
 800f57e:	ed93 7a00 	vldr	s14, [r3]
 800f582:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800f586:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f58a:	4b3b      	ldr	r3, [pc, #236]	; (800f678 <mahony_ahrs_updateIMU+0x2c8>)
 800f58c:	edd3 6a00 	vldr	s13, [r3]
 800f590:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800f594:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f598:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f59c:	edc7 7a05 	vstr	s15, [r7, #20]

    // Compute and apply integral feedback if enabled
    if (twoKi > 0.0f)
 800f5a0:	4b3e      	ldr	r3, [pc, #248]	; (800f69c <mahony_ahrs_updateIMU+0x2ec>)
 800f5a2:	edd3 7a00 	vldr	s15, [r3]
 800f5a6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800f5aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5ae:	dd7f      	ble.n	800f6b0 <mahony_ahrs_updateIMU+0x300>
    {
      integralFBx += twoKi * halfex * (1.0f / sampleFreq); // integral error scaled by Ki
 800f5b0:	4b3a      	ldr	r3, [pc, #232]	; (800f69c <mahony_ahrs_updateIMU+0x2ec>)
 800f5b2:	ed93 7a00 	vldr	s14, [r3]
 800f5b6:	edd7 7a07 	vldr	s15, [r7, #28]
 800f5ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f5be:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800f6a0 <mahony_ahrs_updateIMU+0x2f0>
 800f5c2:	ee27 7a87 	vmul.f32	s14, s15, s14
 800f5c6:	4b37      	ldr	r3, [pc, #220]	; (800f6a4 <mahony_ahrs_updateIMU+0x2f4>)
 800f5c8:	edd3 7a00 	vldr	s15, [r3]
 800f5cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f5d0:	4b34      	ldr	r3, [pc, #208]	; (800f6a4 <mahony_ahrs_updateIMU+0x2f4>)
 800f5d2:	edc3 7a00 	vstr	s15, [r3]
      integralFBy += twoKi * halfey * (1.0f / sampleFreq);
 800f5d6:	4b31      	ldr	r3, [pc, #196]	; (800f69c <mahony_ahrs_updateIMU+0x2ec>)
 800f5d8:	ed93 7a00 	vldr	s14, [r3]
 800f5dc:	edd7 7a06 	vldr	s15, [r7, #24]
 800f5e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f5e4:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 800f6a0 <mahony_ahrs_updateIMU+0x2f0>
 800f5e8:	ee27 7a87 	vmul.f32	s14, s15, s14
 800f5ec:	4b2e      	ldr	r3, [pc, #184]	; (800f6a8 <mahony_ahrs_updateIMU+0x2f8>)
 800f5ee:	edd3 7a00 	vldr	s15, [r3]
 800f5f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f5f6:	4b2c      	ldr	r3, [pc, #176]	; (800f6a8 <mahony_ahrs_updateIMU+0x2f8>)
 800f5f8:	edc3 7a00 	vstr	s15, [r3]
      integralFBz += twoKi * halfez * (1.0f / sampleFreq);
 800f5fc:	4b27      	ldr	r3, [pc, #156]	; (800f69c <mahony_ahrs_updateIMU+0x2ec>)
 800f5fe:	ed93 7a00 	vldr	s14, [r3]
 800f602:	edd7 7a05 	vldr	s15, [r7, #20]
 800f606:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f60a:	ed9f 7a25 	vldr	s14, [pc, #148]	; 800f6a0 <mahony_ahrs_updateIMU+0x2f0>
 800f60e:	ee27 7a87 	vmul.f32	s14, s15, s14
 800f612:	4b26      	ldr	r3, [pc, #152]	; (800f6ac <mahony_ahrs_updateIMU+0x2fc>)
 800f614:	edd3 7a00 	vldr	s15, [r3]
 800f618:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f61c:	4b23      	ldr	r3, [pc, #140]	; (800f6ac <mahony_ahrs_updateIMU+0x2fc>)
 800f61e:	edc3 7a00 	vstr	s15, [r3]
      gx += integralFBx; // apply integral feedback
 800f622:	4b20      	ldr	r3, [pc, #128]	; (800f6a4 <mahony_ahrs_updateIMU+0x2f4>)
 800f624:	ed93 7a00 	vldr	s14, [r3]
 800f628:	4b0f      	ldr	r3, [pc, #60]	; (800f668 <mahony_ahrs_updateIMU+0x2b8>)
 800f62a:	edd3 7a00 	vldr	s15, [r3]
 800f62e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f632:	4b0d      	ldr	r3, [pc, #52]	; (800f668 <mahony_ahrs_updateIMU+0x2b8>)
 800f634:	edc3 7a00 	vstr	s15, [r3]
      gy += integralFBy;
 800f638:	4b1b      	ldr	r3, [pc, #108]	; (800f6a8 <mahony_ahrs_updateIMU+0x2f8>)
 800f63a:	ed93 7a00 	vldr	s14, [r3]
 800f63e:	4b0b      	ldr	r3, [pc, #44]	; (800f66c <mahony_ahrs_updateIMU+0x2bc>)
 800f640:	edd3 7a00 	vldr	s15, [r3]
 800f644:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f648:	4b08      	ldr	r3, [pc, #32]	; (800f66c <mahony_ahrs_updateIMU+0x2bc>)
 800f64a:	edc3 7a00 	vstr	s15, [r3]
      gz += integralFBz;
 800f64e:	4b17      	ldr	r3, [pc, #92]	; (800f6ac <mahony_ahrs_updateIMU+0x2fc>)
 800f650:	ed93 7a00 	vldr	s14, [r3]
 800f654:	4b06      	ldr	r3, [pc, #24]	; (800f670 <mahony_ahrs_updateIMU+0x2c0>)
 800f656:	edd3 7a00 	vldr	s15, [r3]
 800f65a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f65e:	4b04      	ldr	r3, [pc, #16]	; (800f670 <mahony_ahrs_updateIMU+0x2c0>)
 800f660:	edc3 7a00 	vstr	s15, [r3]
 800f664:	e030      	b.n	800f6c8 <mahony_ahrs_updateIMU+0x318>
 800f666:	bf00      	nop
 800f668:	20011d08 	.word	0x20011d08
 800f66c:	20011d0c 	.word	0x20011d0c
 800f670:	20011d10 	.word	0x20011d10
 800f674:	20011d14 	.word	0x20011d14
 800f678:	20011d18 	.word	0x20011d18
 800f67c:	20011d1c 	.word	0x20011d1c
 800f680:	20011d20 	.word	0x20011d20
 800f684:	20011d24 	.word	0x20011d24
 800f688:	20011d28 	.word	0x20011d28
 800f68c:	20011cf0 	.word	0x20011cf0
 800f690:	20011cf8 	.word	0x20011cf8
 800f694:	2000010c 	.word	0x2000010c
 800f698:	20011cf4 	.word	0x20011cf4
 800f69c:	20000108 	.word	0x20000108
 800f6a0:	3b03126f 	.word	0x3b03126f
 800f6a4:	20011cfc 	.word	0x20011cfc
 800f6a8:	20011d00 	.word	0x20011d00
 800f6ac:	20011d04 	.word	0x20011d04
    }
    else
    {
      integralFBx = 0.0f; // prevent integral windup
 800f6b0:	4bd3      	ldr	r3, [pc, #844]	; (800fa00 <mahony_ahrs_updateIMU+0x650>)
 800f6b2:	f04f 0200 	mov.w	r2, #0
 800f6b6:	601a      	str	r2, [r3, #0]
      integralFBy = 0.0f;
 800f6b8:	4bd2      	ldr	r3, [pc, #840]	; (800fa04 <mahony_ahrs_updateIMU+0x654>)
 800f6ba:	f04f 0200 	mov.w	r2, #0
 800f6be:	601a      	str	r2, [r3, #0]
      integralFBz = 0.0f;
 800f6c0:	4bd1      	ldr	r3, [pc, #836]	; (800fa08 <mahony_ahrs_updateIMU+0x658>)
 800f6c2:	f04f 0200 	mov.w	r2, #0
 800f6c6:	601a      	str	r2, [r3, #0]
    }

    // Apply proportional feedback
    gx += twoKp * halfex;
 800f6c8:	4bd0      	ldr	r3, [pc, #832]	; (800fa0c <mahony_ahrs_updateIMU+0x65c>)
 800f6ca:	ed93 7a00 	vldr	s14, [r3]
 800f6ce:	edd7 7a07 	vldr	s15, [r7, #28]
 800f6d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f6d6:	4bce      	ldr	r3, [pc, #824]	; (800fa10 <mahony_ahrs_updateIMU+0x660>)
 800f6d8:	edd3 7a00 	vldr	s15, [r3]
 800f6dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f6e0:	4bcb      	ldr	r3, [pc, #812]	; (800fa10 <mahony_ahrs_updateIMU+0x660>)
 800f6e2:	edc3 7a00 	vstr	s15, [r3]
    gy += twoKp * halfey;
 800f6e6:	4bc9      	ldr	r3, [pc, #804]	; (800fa0c <mahony_ahrs_updateIMU+0x65c>)
 800f6e8:	ed93 7a00 	vldr	s14, [r3]
 800f6ec:	edd7 7a06 	vldr	s15, [r7, #24]
 800f6f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f6f4:	4bc7      	ldr	r3, [pc, #796]	; (800fa14 <mahony_ahrs_updateIMU+0x664>)
 800f6f6:	edd3 7a00 	vldr	s15, [r3]
 800f6fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f6fe:	4bc5      	ldr	r3, [pc, #788]	; (800fa14 <mahony_ahrs_updateIMU+0x664>)
 800f700:	edc3 7a00 	vstr	s15, [r3]
    gz += twoKp * halfez;
 800f704:	4bc1      	ldr	r3, [pc, #772]	; (800fa0c <mahony_ahrs_updateIMU+0x65c>)
 800f706:	ed93 7a00 	vldr	s14, [r3]
 800f70a:	edd7 7a05 	vldr	s15, [r7, #20]
 800f70e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f712:	4bc1      	ldr	r3, [pc, #772]	; (800fa18 <mahony_ahrs_updateIMU+0x668>)
 800f714:	edd3 7a00 	vldr	s15, [r3]
 800f718:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f71c:	4bbe      	ldr	r3, [pc, #760]	; (800fa18 <mahony_ahrs_updateIMU+0x668>)
 800f71e:	edc3 7a00 	vstr	s15, [r3]
  }

  // Integrate rate of change of quaternion
  gx *= (0.5f * (1.0f / sampleFreq)); // pre-multiply common factors
 800f722:	4bbb      	ldr	r3, [pc, #748]	; (800fa10 <mahony_ahrs_updateIMU+0x660>)
 800f724:	edd3 7a00 	vldr	s15, [r3]
 800f728:	ed9f 7abc 	vldr	s14, [pc, #752]	; 800fa1c <mahony_ahrs_updateIMU+0x66c>
 800f72c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f730:	4bb7      	ldr	r3, [pc, #732]	; (800fa10 <mahony_ahrs_updateIMU+0x660>)
 800f732:	edc3 7a00 	vstr	s15, [r3]
  gy *= (0.5f * (1.0f / sampleFreq));
 800f736:	4bb7      	ldr	r3, [pc, #732]	; (800fa14 <mahony_ahrs_updateIMU+0x664>)
 800f738:	edd3 7a00 	vldr	s15, [r3]
 800f73c:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 800fa1c <mahony_ahrs_updateIMU+0x66c>
 800f740:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f744:	4bb3      	ldr	r3, [pc, #716]	; (800fa14 <mahony_ahrs_updateIMU+0x664>)
 800f746:	edc3 7a00 	vstr	s15, [r3]
  gz *= (0.5f * (1.0f / sampleFreq));
 800f74a:	4bb3      	ldr	r3, [pc, #716]	; (800fa18 <mahony_ahrs_updateIMU+0x668>)
 800f74c:	edd3 7a00 	vldr	s15, [r3]
 800f750:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 800fa1c <mahony_ahrs_updateIMU+0x66c>
 800f754:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f758:	4baf      	ldr	r3, [pc, #700]	; (800fa18 <mahony_ahrs_updateIMU+0x668>)
 800f75a:	edc3 7a00 	vstr	s15, [r3]
  qa = q0;
 800f75e:	4bb0      	ldr	r3, [pc, #704]	; (800fa20 <mahony_ahrs_updateIMU+0x670>)
 800f760:	681b      	ldr	r3, [r3, #0]
 800f762:	613b      	str	r3, [r7, #16]
  qb = q1;
 800f764:	4baf      	ldr	r3, [pc, #700]	; (800fa24 <mahony_ahrs_updateIMU+0x674>)
 800f766:	681b      	ldr	r3, [r3, #0]
 800f768:	60fb      	str	r3, [r7, #12]
  qc = q2;
 800f76a:	4baf      	ldr	r3, [pc, #700]	; (800fa28 <mahony_ahrs_updateIMU+0x678>)
 800f76c:	681b      	ldr	r3, [r3, #0]
 800f76e:	60bb      	str	r3, [r7, #8]
  q0 += (-qb * gx - qc * gy - q3 * gz);
 800f770:	edd7 7a03 	vldr	s15, [r7, #12]
 800f774:	eeb1 7a67 	vneg.f32	s14, s15
 800f778:	4ba5      	ldr	r3, [pc, #660]	; (800fa10 <mahony_ahrs_updateIMU+0x660>)
 800f77a:	edd3 7a00 	vldr	s15, [r3]
 800f77e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f782:	4ba4      	ldr	r3, [pc, #656]	; (800fa14 <mahony_ahrs_updateIMU+0x664>)
 800f784:	edd3 6a00 	vldr	s13, [r3]
 800f788:	edd7 7a02 	vldr	s15, [r7, #8]
 800f78c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f790:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f794:	4ba5      	ldr	r3, [pc, #660]	; (800fa2c <mahony_ahrs_updateIMU+0x67c>)
 800f796:	edd3 6a00 	vldr	s13, [r3]
 800f79a:	4b9f      	ldr	r3, [pc, #636]	; (800fa18 <mahony_ahrs_updateIMU+0x668>)
 800f79c:	edd3 7a00 	vldr	s15, [r3]
 800f7a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f7a4:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f7a8:	4b9d      	ldr	r3, [pc, #628]	; (800fa20 <mahony_ahrs_updateIMU+0x670>)
 800f7aa:	edd3 7a00 	vldr	s15, [r3]
 800f7ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f7b2:	4b9b      	ldr	r3, [pc, #620]	; (800fa20 <mahony_ahrs_updateIMU+0x670>)
 800f7b4:	edc3 7a00 	vstr	s15, [r3]
  q1 += (qa * gx + qc * gz - q3 * gy);
 800f7b8:	4b95      	ldr	r3, [pc, #596]	; (800fa10 <mahony_ahrs_updateIMU+0x660>)
 800f7ba:	ed93 7a00 	vldr	s14, [r3]
 800f7be:	edd7 7a04 	vldr	s15, [r7, #16]
 800f7c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f7c6:	4b94      	ldr	r3, [pc, #592]	; (800fa18 <mahony_ahrs_updateIMU+0x668>)
 800f7c8:	edd3 6a00 	vldr	s13, [r3]
 800f7cc:	edd7 7a02 	vldr	s15, [r7, #8]
 800f7d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f7d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f7d8:	4b94      	ldr	r3, [pc, #592]	; (800fa2c <mahony_ahrs_updateIMU+0x67c>)
 800f7da:	edd3 6a00 	vldr	s13, [r3]
 800f7de:	4b8d      	ldr	r3, [pc, #564]	; (800fa14 <mahony_ahrs_updateIMU+0x664>)
 800f7e0:	edd3 7a00 	vldr	s15, [r3]
 800f7e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f7e8:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f7ec:	4b8d      	ldr	r3, [pc, #564]	; (800fa24 <mahony_ahrs_updateIMU+0x674>)
 800f7ee:	edd3 7a00 	vldr	s15, [r3]
 800f7f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f7f6:	4b8b      	ldr	r3, [pc, #556]	; (800fa24 <mahony_ahrs_updateIMU+0x674>)
 800f7f8:	edc3 7a00 	vstr	s15, [r3]
  q2 += (qa * gy - qb * gz + q3 * gx);
 800f7fc:	4b85      	ldr	r3, [pc, #532]	; (800fa14 <mahony_ahrs_updateIMU+0x664>)
 800f7fe:	ed93 7a00 	vldr	s14, [r3]
 800f802:	edd7 7a04 	vldr	s15, [r7, #16]
 800f806:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f80a:	4b83      	ldr	r3, [pc, #524]	; (800fa18 <mahony_ahrs_updateIMU+0x668>)
 800f80c:	edd3 6a00 	vldr	s13, [r3]
 800f810:	edd7 7a03 	vldr	s15, [r7, #12]
 800f814:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f818:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f81c:	4b83      	ldr	r3, [pc, #524]	; (800fa2c <mahony_ahrs_updateIMU+0x67c>)
 800f81e:	edd3 6a00 	vldr	s13, [r3]
 800f822:	4b7b      	ldr	r3, [pc, #492]	; (800fa10 <mahony_ahrs_updateIMU+0x660>)
 800f824:	edd3 7a00 	vldr	s15, [r3]
 800f828:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f82c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f830:	4b7d      	ldr	r3, [pc, #500]	; (800fa28 <mahony_ahrs_updateIMU+0x678>)
 800f832:	edd3 7a00 	vldr	s15, [r3]
 800f836:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f83a:	4b7b      	ldr	r3, [pc, #492]	; (800fa28 <mahony_ahrs_updateIMU+0x678>)
 800f83c:	edc3 7a00 	vstr	s15, [r3]
  q3 += (qa * gz + qb * gy - qc * gx);
 800f840:	4b75      	ldr	r3, [pc, #468]	; (800fa18 <mahony_ahrs_updateIMU+0x668>)
 800f842:	ed93 7a00 	vldr	s14, [r3]
 800f846:	edd7 7a04 	vldr	s15, [r7, #16]
 800f84a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f84e:	4b71      	ldr	r3, [pc, #452]	; (800fa14 <mahony_ahrs_updateIMU+0x664>)
 800f850:	edd3 6a00 	vldr	s13, [r3]
 800f854:	edd7 7a03 	vldr	s15, [r7, #12]
 800f858:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f85c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f860:	4b6b      	ldr	r3, [pc, #428]	; (800fa10 <mahony_ahrs_updateIMU+0x660>)
 800f862:	edd3 6a00 	vldr	s13, [r3]
 800f866:	edd7 7a02 	vldr	s15, [r7, #8]
 800f86a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f86e:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f872:	4b6e      	ldr	r3, [pc, #440]	; (800fa2c <mahony_ahrs_updateIMU+0x67c>)
 800f874:	edd3 7a00 	vldr	s15, [r3]
 800f878:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f87c:	4b6b      	ldr	r3, [pc, #428]	; (800fa2c <mahony_ahrs_updateIMU+0x67c>)
 800f87e:	edc3 7a00 	vstr	s15, [r3]

  // Normalise quaternion
  recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 800f882:	4b67      	ldr	r3, [pc, #412]	; (800fa20 <mahony_ahrs_updateIMU+0x670>)
 800f884:	ed93 7a00 	vldr	s14, [r3]
 800f888:	4b65      	ldr	r3, [pc, #404]	; (800fa20 <mahony_ahrs_updateIMU+0x670>)
 800f88a:	edd3 7a00 	vldr	s15, [r3]
 800f88e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f892:	4b64      	ldr	r3, [pc, #400]	; (800fa24 <mahony_ahrs_updateIMU+0x674>)
 800f894:	edd3 6a00 	vldr	s13, [r3]
 800f898:	4b62      	ldr	r3, [pc, #392]	; (800fa24 <mahony_ahrs_updateIMU+0x674>)
 800f89a:	edd3 7a00 	vldr	s15, [r3]
 800f89e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f8a2:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f8a6:	4b60      	ldr	r3, [pc, #384]	; (800fa28 <mahony_ahrs_updateIMU+0x678>)
 800f8a8:	edd3 6a00 	vldr	s13, [r3]
 800f8ac:	4b5e      	ldr	r3, [pc, #376]	; (800fa28 <mahony_ahrs_updateIMU+0x678>)
 800f8ae:	edd3 7a00 	vldr	s15, [r3]
 800f8b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f8b6:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f8ba:	4b5c      	ldr	r3, [pc, #368]	; (800fa2c <mahony_ahrs_updateIMU+0x67c>)
 800f8bc:	edd3 6a00 	vldr	s13, [r3]
 800f8c0:	4b5a      	ldr	r3, [pc, #360]	; (800fa2c <mahony_ahrs_updateIMU+0x67c>)
 800f8c2:	edd3 7a00 	vldr	s15, [r3]
 800f8c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f8ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f8ce:	eeb0 0a67 	vmov.f32	s0, s15
 800f8d2:	f7ff fd2f 	bl	800f334 <invSqrt>
 800f8d6:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
  q0 *= recipNorm;
 800f8da:	4b51      	ldr	r3, [pc, #324]	; (800fa20 <mahony_ahrs_updateIMU+0x670>)
 800f8dc:	ed93 7a00 	vldr	s14, [r3]
 800f8e0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800f8e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f8e8:	4b4d      	ldr	r3, [pc, #308]	; (800fa20 <mahony_ahrs_updateIMU+0x670>)
 800f8ea:	edc3 7a00 	vstr	s15, [r3]
  q1 *= recipNorm;
 800f8ee:	4b4d      	ldr	r3, [pc, #308]	; (800fa24 <mahony_ahrs_updateIMU+0x674>)
 800f8f0:	ed93 7a00 	vldr	s14, [r3]
 800f8f4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800f8f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f8fc:	4b49      	ldr	r3, [pc, #292]	; (800fa24 <mahony_ahrs_updateIMU+0x674>)
 800f8fe:	edc3 7a00 	vstr	s15, [r3]
  q2 *= recipNorm;
 800f902:	4b49      	ldr	r3, [pc, #292]	; (800fa28 <mahony_ahrs_updateIMU+0x678>)
 800f904:	ed93 7a00 	vldr	s14, [r3]
 800f908:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800f90c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f910:	4b45      	ldr	r3, [pc, #276]	; (800fa28 <mahony_ahrs_updateIMU+0x678>)
 800f912:	edc3 7a00 	vstr	s15, [r3]
  q3 *= recipNorm;
 800f916:	4b45      	ldr	r3, [pc, #276]	; (800fa2c <mahony_ahrs_updateIMU+0x67c>)
 800f918:	ed93 7a00 	vldr	s14, [r3]
 800f91c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800f920:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f924:	4b41      	ldr	r3, [pc, #260]	; (800fa2c <mahony_ahrs_updateIMU+0x67c>)
 800f926:	edc3 7a00 	vstr	s15, [r3]
  atti->roll = atan2(2 * q2 * q3 + 2 * q0 * q1, -2 * q1 * q1 - 2 * q2 * q2 + 1) * 57.3; // roll     -pi----pi
 800f92a:	4b3f      	ldr	r3, [pc, #252]	; (800fa28 <mahony_ahrs_updateIMU+0x678>)
 800f92c:	edd3 7a00 	vldr	s15, [r3]
 800f930:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800f934:	4b3d      	ldr	r3, [pc, #244]	; (800fa2c <mahony_ahrs_updateIMU+0x67c>)
 800f936:	edd3 7a00 	vldr	s15, [r3]
 800f93a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f93e:	4b38      	ldr	r3, [pc, #224]	; (800fa20 <mahony_ahrs_updateIMU+0x670>)
 800f940:	edd3 7a00 	vldr	s15, [r3]
 800f944:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800f948:	4b36      	ldr	r3, [pc, #216]	; (800fa24 <mahony_ahrs_updateIMU+0x674>)
 800f94a:	edd3 7a00 	vldr	s15, [r3]
 800f94e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f952:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f956:	ee17 0a90 	vmov	r0, s15
 800f95a:	f7f0 fdb5 	bl	80004c8 <__aeabi_f2d>
 800f95e:	4604      	mov	r4, r0
 800f960:	460d      	mov	r5, r1
 800f962:	4b30      	ldr	r3, [pc, #192]	; (800fa24 <mahony_ahrs_updateIMU+0x674>)
 800f964:	edd3 7a00 	vldr	s15, [r3]
 800f968:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 800f96c:	ee27 7a87 	vmul.f32	s14, s15, s14
 800f970:	4b2c      	ldr	r3, [pc, #176]	; (800fa24 <mahony_ahrs_updateIMU+0x674>)
 800f972:	edd3 7a00 	vldr	s15, [r3]
 800f976:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f97a:	4b2b      	ldr	r3, [pc, #172]	; (800fa28 <mahony_ahrs_updateIMU+0x678>)
 800f97c:	edd3 7a00 	vldr	s15, [r3]
 800f980:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800f984:	4b28      	ldr	r3, [pc, #160]	; (800fa28 <mahony_ahrs_updateIMU+0x678>)
 800f986:	edd3 7a00 	vldr	s15, [r3]
 800f98a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f98e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f992:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f996:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f99a:	ee17 0a90 	vmov	r0, s15
 800f99e:	f7f0 fd93 	bl	80004c8 <__aeabi_f2d>
 800f9a2:	4602      	mov	r2, r0
 800f9a4:	460b      	mov	r3, r1
 800f9a6:	ec43 2b11 	vmov	d1, r2, r3
 800f9aa:	ec45 4b10 	vmov	d0, r4, r5
 800f9ae:	f002 f8b1 	bl	8011b14 <atan2>
 800f9b2:	ec51 0b10 	vmov	r0, r1, d0
 800f9b6:	a310      	add	r3, pc, #64	; (adr r3, 800f9f8 <mahony_ahrs_updateIMU+0x648>)
 800f9b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9bc:	f7f0 fddc 	bl	8000578 <__aeabi_dmul>
 800f9c0:	4602      	mov	r2, r0
 800f9c2:	460b      	mov	r3, r1
 800f9c4:	4610      	mov	r0, r2
 800f9c6:	4619      	mov	r1, r3
 800f9c8:	f7f1 f8ae 	bl	8000b28 <__aeabi_d2f>
 800f9cc:	4602      	mov	r2, r0
 800f9ce:	683b      	ldr	r3, [r7, #0]
 800f9d0:	601a      	str	r2, [r3, #0]
  atti->pitch = asin(-2 * q1 * q3 + 2 * q0 * q2) * 57.3;                                // pitch    -pi/2----pi/2
 800f9d2:	4b14      	ldr	r3, [pc, #80]	; (800fa24 <mahony_ahrs_updateIMU+0x674>)
 800f9d4:	edd3 7a00 	vldr	s15, [r3]
 800f9d8:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 800f9dc:	ee27 7a87 	vmul.f32	s14, s15, s14
 800f9e0:	4b12      	ldr	r3, [pc, #72]	; (800fa2c <mahony_ahrs_updateIMU+0x67c>)
 800f9e2:	edd3 7a00 	vldr	s15, [r3]
 800f9e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f9ea:	4b0d      	ldr	r3, [pc, #52]	; (800fa20 <mahony_ahrs_updateIMU+0x670>)
 800f9ec:	edd3 7a00 	vldr	s15, [r3]
 800f9f0:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800f9f4:	e01c      	b.n	800fa30 <mahony_ahrs_updateIMU+0x680>
 800f9f6:	bf00      	nop
 800f9f8:	66666666 	.word	0x66666666
 800f9fc:	404ca666 	.word	0x404ca666
 800fa00:	20011cfc 	.word	0x20011cfc
 800fa04:	20011d00 	.word	0x20011d00
 800fa08:	20011d04 	.word	0x20011d04
 800fa0c:	20000104 	.word	0x20000104
 800fa10:	20011d08 	.word	0x20011d08
 800fa14:	20011d0c 	.word	0x20011d0c
 800fa18:	20011d10 	.word	0x20011d10
 800fa1c:	3a83126f 	.word	0x3a83126f
 800fa20:	2000010c 	.word	0x2000010c
 800fa24:	20011cf0 	.word	0x20011cf0
 800fa28:	20011cf4 	.word	0x20011cf4
 800fa2c:	20011cf8 	.word	0x20011cf8
 800fa30:	4b3f      	ldr	r3, [pc, #252]	; (800fb30 <mahony_ahrs_updateIMU+0x780>)
 800fa32:	edd3 7a00 	vldr	s15, [r3]
 800fa36:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800fa3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fa3e:	ee17 0a90 	vmov	r0, s15
 800fa42:	f7f0 fd41 	bl	80004c8 <__aeabi_f2d>
 800fa46:	4602      	mov	r2, r0
 800fa48:	460b      	mov	r3, r1
 800fa4a:	ec43 2b10 	vmov	d0, r2, r3
 800fa4e:	f002 f82d 	bl	8011aac <asin>
 800fa52:	ec51 0b10 	vmov	r0, r1, d0
 800fa56:	a334      	add	r3, pc, #208	; (adr r3, 800fb28 <mahony_ahrs_updateIMU+0x778>)
 800fa58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa5c:	f7f0 fd8c 	bl	8000578 <__aeabi_dmul>
 800fa60:	4602      	mov	r2, r0
 800fa62:	460b      	mov	r3, r1
 800fa64:	4610      	mov	r0, r2
 800fa66:	4619      	mov	r1, r3
 800fa68:	f7f1 f85e 	bl	8000b28 <__aeabi_d2f>
 800fa6c:	4602      	mov	r2, r0
 800fa6e:	683b      	ldr	r3, [r7, #0]
 800fa70:	605a      	str	r2, [r3, #4]
  atti->yaw = atan2(2 * q1 * q2 + 2 * q0 * q3, -2 * q2 * q2 - 2 * q3 * q3 + 1) * 57.3;  // yaw      -pi----pi
 800fa72:	4b30      	ldr	r3, [pc, #192]	; (800fb34 <mahony_ahrs_updateIMU+0x784>)
 800fa74:	edd3 7a00 	vldr	s15, [r3]
 800fa78:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800fa7c:	4b2c      	ldr	r3, [pc, #176]	; (800fb30 <mahony_ahrs_updateIMU+0x780>)
 800fa7e:	edd3 7a00 	vldr	s15, [r3]
 800fa82:	ee27 7a27 	vmul.f32	s14, s14, s15
 800fa86:	4b2c      	ldr	r3, [pc, #176]	; (800fb38 <mahony_ahrs_updateIMU+0x788>)
 800fa88:	edd3 7a00 	vldr	s15, [r3]
 800fa8c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800fa90:	4b2a      	ldr	r3, [pc, #168]	; (800fb3c <mahony_ahrs_updateIMU+0x78c>)
 800fa92:	edd3 7a00 	vldr	s15, [r3]
 800fa96:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800fa9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fa9e:	ee17 0a90 	vmov	r0, s15
 800faa2:	f7f0 fd11 	bl	80004c8 <__aeabi_f2d>
 800faa6:	4604      	mov	r4, r0
 800faa8:	460d      	mov	r5, r1
 800faaa:	4b21      	ldr	r3, [pc, #132]	; (800fb30 <mahony_ahrs_updateIMU+0x780>)
 800faac:	edd3 7a00 	vldr	s15, [r3]
 800fab0:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 800fab4:	ee27 7a87 	vmul.f32	s14, s15, s14
 800fab8:	4b1d      	ldr	r3, [pc, #116]	; (800fb30 <mahony_ahrs_updateIMU+0x780>)
 800faba:	edd3 7a00 	vldr	s15, [r3]
 800fabe:	ee27 7a27 	vmul.f32	s14, s14, s15
 800fac2:	4b1e      	ldr	r3, [pc, #120]	; (800fb3c <mahony_ahrs_updateIMU+0x78c>)
 800fac4:	edd3 7a00 	vldr	s15, [r3]
 800fac8:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800facc:	4b1b      	ldr	r3, [pc, #108]	; (800fb3c <mahony_ahrs_updateIMU+0x78c>)
 800face:	edd3 7a00 	vldr	s15, [r3]
 800fad2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800fad6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fada:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800fade:	ee77 7a87 	vadd.f32	s15, s15, s14
 800fae2:	ee17 0a90 	vmov	r0, s15
 800fae6:	f7f0 fcef 	bl	80004c8 <__aeabi_f2d>
 800faea:	4602      	mov	r2, r0
 800faec:	460b      	mov	r3, r1
 800faee:	ec43 2b11 	vmov	d1, r2, r3
 800faf2:	ec45 4b10 	vmov	d0, r4, r5
 800faf6:	f002 f80d 	bl	8011b14 <atan2>
 800fafa:	ec51 0b10 	vmov	r0, r1, d0
 800fafe:	a30a      	add	r3, pc, #40	; (adr r3, 800fb28 <mahony_ahrs_updateIMU+0x778>)
 800fb00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb04:	f7f0 fd38 	bl	8000578 <__aeabi_dmul>
 800fb08:	4602      	mov	r2, r0
 800fb0a:	460b      	mov	r3, r1
 800fb0c:	4610      	mov	r0, r2
 800fb0e:	4619      	mov	r1, r3
 800fb10:	f7f1 f80a 	bl	8000b28 <__aeabi_d2f>
 800fb14:	4602      	mov	r2, r0
 800fb16:	683b      	ldr	r3, [r7, #0]
 800fb18:	609a      	str	r2, [r3, #8]
}
 800fb1a:	bf00      	nop
 800fb1c:	3730      	adds	r7, #48	; 0x30
 800fb1e:	46bd      	mov	sp, r7
 800fb20:	bdb0      	pop	{r4, r5, r7, pc}
 800fb22:	bf00      	nop
 800fb24:	f3af 8000 	nop.w
 800fb28:	66666666 	.word	0x66666666
 800fb2c:	404ca666 	.word	0x404ca666
 800fb30:	20011cf4 	.word	0x20011cf4
 800fb34:	20011cf0 	.word	0x20011cf0
 800fb38:	2000010c 	.word	0x2000010c
 800fb3c:	20011cf8 	.word	0x20011cf8

0800fb40 <abs_limit>:

#include "sys.h"
#include "pid.h"

void abs_limit(float *a, float ABS_MAX)
{
 800fb40:	b480      	push	{r7}
 800fb42:	b083      	sub	sp, #12
 800fb44:	af00      	add	r7, sp, #0
 800fb46:	6078      	str	r0, [r7, #4]
 800fb48:	ed87 0a00 	vstr	s0, [r7]
  if (*a > ABS_MAX)
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	edd3 7a00 	vldr	s15, [r3]
 800fb52:	ed97 7a00 	vldr	s14, [r7]
 800fb56:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800fb5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb5e:	d502      	bpl.n	800fb66 <abs_limit+0x26>
    *a = ABS_MAX;
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	683a      	ldr	r2, [r7, #0]
 800fb64:	601a      	str	r2, [r3, #0]
  if (*a < -ABS_MAX)
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	ed93 7a00 	vldr	s14, [r3]
 800fb6c:	edd7 7a00 	vldr	s15, [r7]
 800fb70:	eef1 7a67 	vneg.f32	s15, s15
 800fb74:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800fb78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb7c:	d400      	bmi.n	800fb80 <abs_limit+0x40>
    *a = -ABS_MAX;
}
 800fb7e:	e006      	b.n	800fb8e <abs_limit+0x4e>
    *a = -ABS_MAX;
 800fb80:	edd7 7a00 	vldr	s15, [r7]
 800fb84:	eef1 7a67 	vneg.f32	s15, s15
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	edc3 7a00 	vstr	s15, [r3]
}
 800fb8e:	bf00      	nop
 800fb90:	370c      	adds	r7, #12
 800fb92:	46bd      	mov	sp, r7
 800fb94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb98:	4770      	bx	lr

0800fb9a <pid_param_init>:
    float maxout,
    float inte_limit,
    float kp,
    float ki,
    float kd)
{
 800fb9a:	b480      	push	{r7}
 800fb9c:	b087      	sub	sp, #28
 800fb9e:	af00      	add	r7, sp, #0
 800fba0:	6178      	str	r0, [r7, #20]
 800fba2:	ed87 0a04 	vstr	s0, [r7, #16]
 800fba6:	edc7 0a03 	vstr	s1, [r7, #12]
 800fbaa:	ed87 1a02 	vstr	s2, [r7, #8]
 800fbae:	edc7 1a01 	vstr	s3, [r7, #4]
 800fbb2:	ed87 2a00 	vstr	s4, [r7]

  pid->param.inte_limit = inte_limit;
 800fbb6:	697b      	ldr	r3, [r7, #20]
 800fbb8:	68fa      	ldr	r2, [r7, #12]
 800fbba:	615a      	str	r2, [r3, #20]
  pid->param.max_out = maxout;
 800fbbc:	697b      	ldr	r3, [r7, #20]
 800fbbe:	693a      	ldr	r2, [r7, #16]
 800fbc0:	611a      	str	r2, [r3, #16]

  pid->param.p = kp;
 800fbc2:	697b      	ldr	r3, [r7, #20]
 800fbc4:	68ba      	ldr	r2, [r7, #8]
 800fbc6:	601a      	str	r2, [r3, #0]
  pid->param.i = ki;
 800fbc8:	697b      	ldr	r3, [r7, #20]
 800fbca:	687a      	ldr	r2, [r7, #4]
 800fbcc:	605a      	str	r2, [r3, #4]
  pid->param.d = kd;
 800fbce:	697b      	ldr	r3, [r7, #20]
 800fbd0:	683a      	ldr	r2, [r7, #0]
 800fbd2:	609a      	str	r2, [r3, #8]
}
 800fbd4:	bf00      	nop
 800fbd6:	371c      	adds	r7, #28
 800fbd8:	46bd      	mov	sp, r7
 800fbda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbde:	4770      	bx	lr

0800fbe0 <pid_reset>:
  * @param[in] pid: control pid struct
  * @param[in] p/i/d: pid parameter
  * @retval    none
  */
static void pid_reset(struct pid *pid, float kp, float ki, float kd)
{
 800fbe0:	b480      	push	{r7}
 800fbe2:	b085      	sub	sp, #20
 800fbe4:	af00      	add	r7, sp, #0
 800fbe6:	60f8      	str	r0, [r7, #12]
 800fbe8:	ed87 0a02 	vstr	s0, [r7, #8]
 800fbec:	edc7 0a01 	vstr	s1, [r7, #4]
 800fbf0:	ed87 1a00 	vstr	s2, [r7]
  pid->param.p = kp;
 800fbf4:	68fb      	ldr	r3, [r7, #12]
 800fbf6:	68ba      	ldr	r2, [r7, #8]
 800fbf8:	601a      	str	r2, [r3, #0]
  pid->param.i = ki;
 800fbfa:	68fb      	ldr	r3, [r7, #12]
 800fbfc:	687a      	ldr	r2, [r7, #4]
 800fbfe:	605a      	str	r2, [r3, #4]
  pid->param.d = kd;
 800fc00:	68fb      	ldr	r3, [r7, #12]
 800fc02:	683a      	ldr	r2, [r7, #0]
 800fc04:	609a      	str	r2, [r3, #8]

  pid->pout = 0;
 800fc06:	68fb      	ldr	r3, [r7, #12]
 800fc08:	f04f 0200 	mov.w	r2, #0
 800fc0c:	629a      	str	r2, [r3, #40]	; 0x28
  pid->iout = 0;
 800fc0e:	68fb      	ldr	r3, [r7, #12]
 800fc10:	f04f 0200 	mov.w	r2, #0
 800fc14:	62da      	str	r2, [r3, #44]	; 0x2c
  pid->dout = 0;
 800fc16:	68fb      	ldr	r3, [r7, #12]
 800fc18:	f04f 0200 	mov.w	r2, #0
 800fc1c:	631a      	str	r2, [r3, #48]	; 0x30
  pid->out = 0;
 800fc1e:	68fb      	ldr	r3, [r7, #12]
 800fc20:	f04f 0200 	mov.w	r2, #0
 800fc24:	635a      	str	r2, [r3, #52]	; 0x34
}
 800fc26:	bf00      	nop
 800fc28:	3714      	adds	r7, #20
 800fc2a:	46bd      	mov	sp, r7
 800fc2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc30:	4770      	bx	lr

0800fc32 <pid_calculate>:
  * @param[in] get: measure feedback value
  * @param[in] set: target value
  * @retval    pid calculate output 
  */
float pid_calculate(struct pid *pid, float get, float set)
{
 800fc32:	b580      	push	{r7, lr}
 800fc34:	b084      	sub	sp, #16
 800fc36:	af00      	add	r7, sp, #0
 800fc38:	60f8      	str	r0, [r7, #12]
 800fc3a:	ed87 0a02 	vstr	s0, [r7, #8]
 800fc3e:	edc7 0a01 	vstr	s1, [r7, #4]
  pid->get = get;
 800fc42:	68fb      	ldr	r3, [r7, #12]
 800fc44:	68ba      	ldr	r2, [r7, #8]
 800fc46:	61da      	str	r2, [r3, #28]
  pid->set = set;
 800fc48:	68fb      	ldr	r3, [r7, #12]
 800fc4a:	687a      	ldr	r2, [r7, #4]
 800fc4c:	619a      	str	r2, [r3, #24]
  pid->err = set - get;
 800fc4e:	ed97 7a01 	vldr	s14, [r7, #4]
 800fc52:	edd7 7a02 	vldr	s15, [r7, #8]
 800fc56:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fc5a:	68fb      	ldr	r3, [r7, #12]
 800fc5c:	edc3 7a08 	vstr	s15, [r3, #32]
  if ((pid->param.input_max_err != 0) && (fabs(pid->err) > pid->param.input_max_err))
 800fc60:	68fb      	ldr	r3, [r7, #12]
 800fc62:	edd3 7a03 	vldr	s15, [r3, #12]
 800fc66:	eef5 7a40 	vcmp.f32	s15, #0.0
 800fc6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc6e:	d00f      	beq.n	800fc90 <pid_calculate+0x5e>
 800fc70:	68fb      	ldr	r3, [r7, #12]
 800fc72:	edd3 7a08 	vldr	s15, [r3, #32]
 800fc76:	eeb0 7ae7 	vabs.f32	s14, s15
 800fc7a:	68fb      	ldr	r3, [r7, #12]
 800fc7c:	edd3 7a03 	vldr	s15, [r3, #12]
 800fc80:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800fc84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc88:	dd02      	ble.n	800fc90 <pid_calculate+0x5e>
    return 0;
 800fc8a:	f04f 0300 	mov.w	r3, #0
 800fc8e:	e052      	b.n	800fd36 <pid_calculate+0x104>

  pid->pout = pid->param.p * pid->err;
 800fc90:	68fb      	ldr	r3, [r7, #12]
 800fc92:	ed93 7a00 	vldr	s14, [r3]
 800fc96:	68fb      	ldr	r3, [r7, #12]
 800fc98:	edd3 7a08 	vldr	s15, [r3, #32]
 800fc9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fca0:	68fb      	ldr	r3, [r7, #12]
 800fca2:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
  pid->iout += pid->param.i * pid->err;
 800fca6:	68fb      	ldr	r3, [r7, #12]
 800fca8:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800fcac:	68fb      	ldr	r3, [r7, #12]
 800fcae:	edd3 6a01 	vldr	s13, [r3, #4]
 800fcb2:	68fb      	ldr	r3, [r7, #12]
 800fcb4:	edd3 7a08 	vldr	s15, [r3, #32]
 800fcb8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800fcbc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fcc0:	68fb      	ldr	r3, [r7, #12]
 800fcc2:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
  pid->dout = pid->param.d * (pid->err - pid->last_err);
 800fcc6:	68fb      	ldr	r3, [r7, #12]
 800fcc8:	ed93 7a02 	vldr	s14, [r3, #8]
 800fccc:	68fb      	ldr	r3, [r7, #12]
 800fcce:	edd3 6a08 	vldr	s13, [r3, #32]
 800fcd2:	68fb      	ldr	r3, [r7, #12]
 800fcd4:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800fcd8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800fcdc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fce0:	68fb      	ldr	r3, [r7, #12]
 800fce2:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30

  abs_limit(&(pid->iout), pid->param.inte_limit);
 800fce6:	68fb      	ldr	r3, [r7, #12]
 800fce8:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 800fcec:	68fb      	ldr	r3, [r7, #12]
 800fcee:	edd3 7a05 	vldr	s15, [r3, #20]
 800fcf2:	eeb0 0a67 	vmov.f32	s0, s15
 800fcf6:	4610      	mov	r0, r2
 800fcf8:	f7ff ff22 	bl	800fb40 <abs_limit>
  pid->out = pid->pout + pid->iout + pid->dout;
 800fcfc:	68fb      	ldr	r3, [r7, #12]
 800fcfe:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800fd02:	68fb      	ldr	r3, [r7, #12]
 800fd04:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800fd08:	ee37 7a27 	vadd.f32	s14, s14, s15
 800fd0c:	68fb      	ldr	r3, [r7, #12]
 800fd0e:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800fd12:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fd16:	68fb      	ldr	r3, [r7, #12]
 800fd18:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
  abs_limit(&(pid->out), pid->param.max_out);
 800fd1c:	68fb      	ldr	r3, [r7, #12]
 800fd1e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800fd22:	68fb      	ldr	r3, [r7, #12]
 800fd24:	edd3 7a04 	vldr	s15, [r3, #16]
 800fd28:	eeb0 0a67 	vmov.f32	s0, s15
 800fd2c:	4610      	mov	r0, r2
 800fd2e:	f7ff ff07 	bl	800fb40 <abs_limit>

  return pid->out;
 800fd32:	68fb      	ldr	r3, [r7, #12]
 800fd34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
}
 800fd36:	ee07 3a90 	vmov	s15, r3
 800fd3a:	eeb0 0a67 	vmov.f32	s0, s15
 800fd3e:	3710      	adds	r7, #16
 800fd40:	46bd      	mov	sp, r7
 800fd42:	bd80      	pop	{r7, pc}

0800fd44 <pid_struct_init>:
    float inte_limit,

    float kp,
    float ki,
    float kd)
{
 800fd44:	b580      	push	{r7, lr}
 800fd46:	b086      	sub	sp, #24
 800fd48:	af00      	add	r7, sp, #0
 800fd4a:	6178      	str	r0, [r7, #20]
 800fd4c:	ed87 0a04 	vstr	s0, [r7, #16]
 800fd50:	edc7 0a03 	vstr	s1, [r7, #12]
 800fd54:	ed87 1a02 	vstr	s2, [r7, #8]
 800fd58:	edc7 1a01 	vstr	s3, [r7, #4]
 800fd5c:	ed87 2a00 	vstr	s4, [r7]
  pid->f_param_init = pid_param_init;
 800fd60:	697b      	ldr	r3, [r7, #20]
 800fd62:	4a10      	ldr	r2, [pc, #64]	; (800fda4 <pid_struct_init+0x60>)
 800fd64:	639a      	str	r2, [r3, #56]	; 0x38
  pid->f_pid_reset = pid_reset;
 800fd66:	697b      	ldr	r3, [r7, #20]
 800fd68:	4a0f      	ldr	r2, [pc, #60]	; (800fda8 <pid_struct_init+0x64>)
 800fd6a:	63da      	str	r2, [r3, #60]	; 0x3c

  pid->f_param_init(pid, maxout, inte_limit, kp, ki, kd);
 800fd6c:	697b      	ldr	r3, [r7, #20]
 800fd6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fd70:	ed97 2a00 	vldr	s4, [r7]
 800fd74:	edd7 1a01 	vldr	s3, [r7, #4]
 800fd78:	ed97 1a02 	vldr	s2, [r7, #8]
 800fd7c:	edd7 0a03 	vldr	s1, [r7, #12]
 800fd80:	ed97 0a04 	vldr	s0, [r7, #16]
 800fd84:	6978      	ldr	r0, [r7, #20]
 800fd86:	4798      	blx	r3
  pid->f_pid_reset(pid, kp, ki, kd);
 800fd88:	697b      	ldr	r3, [r7, #20]
 800fd8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fd8c:	ed97 1a00 	vldr	s2, [r7]
 800fd90:	edd7 0a01 	vldr	s1, [r7, #4]
 800fd94:	ed97 0a02 	vldr	s0, [r7, #8]
 800fd98:	6978      	ldr	r0, [r7, #20]
 800fd9a:	4798      	blx	r3
}
 800fd9c:	bf00      	nop
 800fd9e:	3718      	adds	r7, #24
 800fda0:	46bd      	mov	sp, r7
 800fda2:	bd80      	pop	{r7, pc}
 800fda4:	0800fb9b 	.word	0x0800fb9b
 800fda8:	0800fbe1 	.word	0x0800fbe1
 800fdac:	00000000 	.word	0x00000000

0800fdb0 <skid_steer_calculate>:
 * L:left; R:right
 * @param input : ccx=+vx(mm/s)  ccw=+vw(deg/s)
 * @param output: every wheel speed(rpm)
 * @note  1=FR 2=FL 3=BL 4=BR
 */
void skid_steer_calculate(struct skid_steer *ss) {
 800fdb0:	b580      	push	{r7, lr}
 800fdb2:	b08a      	sub	sp, #40	; 0x28
 800fdb4:	af00      	add	r7, sp, #0
 800fdb6:	6078      	str	r0, [r7, #4]

  MEC_VAL_LIMIT(ss->speed.vx, -MAX_CHASSIS_VX_SPEED,
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	edd3 7a03 	vldr	s15, [r3, #12]
 800fdbe:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 800ffb8 <skid_steer_calculate+0x208>
 800fdc2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800fdc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fdca:	d803      	bhi.n	800fdd4 <skid_steer_calculate+0x24>
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	4a7b      	ldr	r2, [pc, #492]	; (800ffbc <skid_steer_calculate+0x20c>)
 800fdd0:	60da      	str	r2, [r3, #12]
 800fdd2:	e00c      	b.n	800fdee <skid_steer_calculate+0x3e>
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	edd3 7a03 	vldr	s15, [r3, #12]
 800fdda:	ed9f 7a79 	vldr	s14, [pc, #484]	; 800ffc0 <skid_steer_calculate+0x210>
 800fdde:	eef4 7ac7 	vcmpe.f32	s15, s14
 800fde2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fde6:	db02      	blt.n	800fdee <skid_steer_calculate+0x3e>
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	4a76      	ldr	r2, [pc, #472]	; (800ffc4 <skid_steer_calculate+0x214>)
 800fdec:	60da      	str	r2, [r3, #12]
                MAX_CHASSIS_VX_SPEED); // mm/s
  MEC_VAL_LIMIT(ss->speed.vw, -MAX_CHASSIS_VW_SPEED,
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	edd3 7a04 	vldr	s15, [r3, #16]
 800fdf4:	ed9f 7a74 	vldr	s14, [pc, #464]	; 800ffc8 <skid_steer_calculate+0x218>
 800fdf8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800fdfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe00:	d803      	bhi.n	800fe0a <skid_steer_calculate+0x5a>
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	4a71      	ldr	r2, [pc, #452]	; (800ffcc <skid_steer_calculate+0x21c>)
 800fe06:	611a      	str	r2, [r3, #16]
 800fe08:	e00c      	b.n	800fe24 <skid_steer_calculate+0x74>
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	edd3 7a04 	vldr	s15, [r3, #16]
 800fe10:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 800ffd0 <skid_steer_calculate+0x220>
 800fe14:	eef4 7ac7 	vcmpe.f32	s15, s14
 800fe18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe1c:	db02      	blt.n	800fe24 <skid_steer_calculate+0x74>
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	4a6c      	ldr	r2, [pc, #432]	; (800ffd4 <skid_steer_calculate+0x224>)
 800fe22:	611a      	str	r2, [r3, #16]
                MAX_CHASSIS_VW_SPEED); // deg/s

  float wheel_rpm[4];
  float max = 0;
 800fe24:	f04f 0300 	mov.w	r3, #0
 800fe28:	627b      	str	r3, [r7, #36]	; 0x24

  // RIGHT
  wheel_rpm[0] = -1.0f * ((ss->speed.vx / RADIUS) +
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	edd3 7a03 	vldr	s15, [r3, #12]
 800fe30:	eddf 6a69 	vldr	s13, [pc, #420]	; 800ffd8 <skid_steer_calculate+0x228>
 800fe34:	ee87 7aa6 	vdiv.f32	s14, s15, s13
                  (WHEELTRACK * (ss->speed.vw / RADIAN_COEF) / RADIUS)) *
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	edd3 6a04 	vldr	s13, [r3, #16]
 800fe3e:	ed9f 6a67 	vldr	s12, [pc, #412]	; 800ffdc <skid_steer_calculate+0x22c>
 800fe42:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800fe46:	eddf 6a66 	vldr	s13, [pc, #408]	; 800ffe0 <skid_steer_calculate+0x230>
 800fe4a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800fe4e:	ed9f 6a62 	vldr	s12, [pc, #392]	; 800ffd8 <skid_steer_calculate+0x228>
 800fe52:	eec6 7a86 	vdiv.f32	s15, s13, s12
  wheel_rpm[0] = -1.0f * ((ss->speed.vx / RADIUS) +
 800fe56:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fe5a:	eef1 7a67 	vneg.f32	s15, s15
 800fe5e:	ee17 3a90 	vmov	r3, s15
 800fe62:	4618      	mov	r0, r3
 800fe64:	f7f0 fb30 	bl	80004c8 <__aeabi_f2d>
                  (WHEELTRACK * (ss->speed.vw / RADIAN_COEF) / RADIUS)) *
 800fe68:	a351      	add	r3, pc, #324	; (adr r3, 800ffb0 <skid_steer_calculate+0x200>)
 800fe6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe6e:	f7f0 fb83 	bl	8000578 <__aeabi_dmul>
 800fe72:	4602      	mov	r2, r0
 800fe74:	460b      	mov	r3, r1
 800fe76:	4610      	mov	r0, r2
 800fe78:	4619      	mov	r1, r3
 800fe7a:	f7f0 fe55 	bl	8000b28 <__aeabi_d2f>
 800fe7e:	4603      	mov	r3, r0
  wheel_rpm[0] = -1.0f * ((ss->speed.vx / RADIUS) +
 800fe80:	60fb      	str	r3, [r7, #12]
                 (M_PI * 60);
  wheel_rpm[3] = wheel_rpm[0];
 800fe82:	68fb      	ldr	r3, [r7, #12]
 800fe84:	61bb      	str	r3, [r7, #24]
  // LEFT
  wheel_rpm[1] = ((ss->speed.vx / RADIUS) -
 800fe86:	687b      	ldr	r3, [r7, #4]
 800fe88:	edd3 7a03 	vldr	s15, [r3, #12]
 800fe8c:	eddf 6a52 	vldr	s13, [pc, #328]	; 800ffd8 <skid_steer_calculate+0x228>
 800fe90:	ee87 7aa6 	vdiv.f32	s14, s15, s13
                  (WHEELTRACK * (ss->speed.vw / RADIAN_COEF) / RADIUS)) *
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	edd3 6a04 	vldr	s13, [r3, #16]
 800fe9a:	ed9f 6a50 	vldr	s12, [pc, #320]	; 800ffdc <skid_steer_calculate+0x22c>
 800fe9e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800fea2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800ffe0 <skid_steer_calculate+0x230>
 800fea6:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800feaa:	ed9f 6a4b 	vldr	s12, [pc, #300]	; 800ffd8 <skid_steer_calculate+0x228>
 800feae:	eec6 7a86 	vdiv.f32	s15, s13, s12
  wheel_rpm[1] = ((ss->speed.vx / RADIUS) -
 800feb2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800feb6:	ee17 0a90 	vmov	r0, s15
 800feba:	f7f0 fb05 	bl	80004c8 <__aeabi_f2d>
                  (WHEELTRACK * (ss->speed.vw / RADIAN_COEF) / RADIUS)) *
 800febe:	a33c      	add	r3, pc, #240	; (adr r3, 800ffb0 <skid_steer_calculate+0x200>)
 800fec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fec4:	f7f0 fb58 	bl	8000578 <__aeabi_dmul>
 800fec8:	4602      	mov	r2, r0
 800feca:	460b      	mov	r3, r1
 800fecc:	4610      	mov	r0, r2
 800fece:	4619      	mov	r1, r3
 800fed0:	f7f0 fe2a 	bl	8000b28 <__aeabi_d2f>
 800fed4:	4603      	mov	r3, r0
  wheel_rpm[1] = ((ss->speed.vx / RADIUS) -
 800fed6:	613b      	str	r3, [r7, #16]
                 (M_PI * 60);
  wheel_rpm[2] = wheel_rpm[1];
 800fed8:	693b      	ldr	r3, [r7, #16]
 800feda:	617b      	str	r3, [r7, #20]

  // find max item
  for (uint8_t i = 0; i < 4; i++) {
 800fedc:	2300      	movs	r3, #0
 800fede:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800fee2:	e021      	b.n	800ff28 <skid_steer_calculate+0x178>
    if (fabs(wheel_rpm[i]) > max)
 800fee4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800fee8:	009b      	lsls	r3, r3, #2
 800feea:	3328      	adds	r3, #40	; 0x28
 800feec:	443b      	add	r3, r7
 800feee:	3b1c      	subs	r3, #28
 800fef0:	edd3 7a00 	vldr	s15, [r3]
 800fef4:	eef0 7ae7 	vabs.f32	s15, s15
 800fef8:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800fefc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ff00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff04:	d50b      	bpl.n	800ff1e <skid_steer_calculate+0x16e>
      max = fabs(wheel_rpm[i]);
 800ff06:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ff0a:	009b      	lsls	r3, r3, #2
 800ff0c:	3328      	adds	r3, #40	; 0x28
 800ff0e:	443b      	add	r3, r7
 800ff10:	3b1c      	subs	r3, #28
 800ff12:	edd3 7a00 	vldr	s15, [r3]
 800ff16:	eef0 7ae7 	vabs.f32	s15, s15
 800ff1a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
  for (uint8_t i = 0; i < 4; i++) {
 800ff1e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ff22:	3301      	adds	r3, #1
 800ff24:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ff28:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ff2c:	2b03      	cmp	r3, #3
 800ff2e:	d9d9      	bls.n	800fee4 <skid_steer_calculate+0x134>
  }

  // equal proportion
  if (max > MAX_WHEEL_RPM) {
 800ff30:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800ff34:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 800ffe4 <skid_steer_calculate+0x234>
 800ff38:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ff3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff40:	dd28      	ble.n	800ff94 <skid_steer_calculate+0x1e4>
    float rate = MAX_WHEEL_RPM / max;
 800ff42:	eddf 6a28 	vldr	s13, [pc, #160]	; 800ffe4 <skid_steer_calculate+0x234>
 800ff46:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800ff4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ff4e:	edc7 7a07 	vstr	s15, [r7, #28]
    for (uint8_t i = 0; i < 4; i++)
 800ff52:	2300      	movs	r3, #0
 800ff54:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800ff58:	e018      	b.n	800ff8c <skid_steer_calculate+0x1dc>
      wheel_rpm[i] *= rate;
 800ff5a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800ff5e:	009b      	lsls	r3, r3, #2
 800ff60:	3328      	adds	r3, #40	; 0x28
 800ff62:	443b      	add	r3, r7
 800ff64:	3b1c      	subs	r3, #28
 800ff66:	ed93 7a00 	vldr	s14, [r3]
 800ff6a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800ff6e:	edd7 7a07 	vldr	s15, [r7, #28]
 800ff72:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ff76:	009b      	lsls	r3, r3, #2
 800ff78:	3328      	adds	r3, #40	; 0x28
 800ff7a:	443b      	add	r3, r7
 800ff7c:	3b1c      	subs	r3, #28
 800ff7e:	edc3 7a00 	vstr	s15, [r3]
    for (uint8_t i = 0; i < 4; i++)
 800ff82:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800ff86:	3301      	adds	r3, #1
 800ff88:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800ff8c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800ff90:	2b03      	cmp	r3, #3
 800ff92:	d9e2      	bls.n	800ff5a <skid_steer_calculate+0x1aa>
  }

  memcpy(ss->wheel_rpm, wheel_rpm, 4 * sizeof(float));
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	3334      	adds	r3, #52	; 0x34
 800ff98:	f107 010c 	add.w	r1, r7, #12
 800ff9c:	2210      	movs	r2, #16
 800ff9e:	4618      	mov	r0, r3
 800ffa0:	f001 fd2a 	bl	80119f8 <memcpy>
}
 800ffa4:	bf00      	nop
 800ffa6:	3728      	adds	r7, #40	; 0x28
 800ffa8:	46bd      	mov	sp, r7
 800ffaa:	bd80      	pop	{r7, pc}
 800ffac:	f3af 8000 	nop.w
 800ffb0:	9effea46 	.word	0x9effea46
 800ffb4:	40678fdb 	.word	0x40678fdb
 800ffb8:	c54e4000 	.word	0xc54e4000
 800ffbc:	c54e4000 	.word	0xc54e4000
 800ffc0:	454e4000 	.word	0x454e4000
 800ffc4:	454e4000 	.word	0x454e4000
 800ffc8:	c3960000 	.word	0xc3960000
 800ffcc:	c3960000 	.word	0xc3960000
 800ffd0:	43960000 	.word	0x43960000
 800ffd4:	43960000 	.word	0x43960000
 800ffd8:	42980000 	.word	0x42980000
 800ffdc:	42653333 	.word	0x42653333
 800ffe0:	438c0000 	.word	0x438c0000
 800ffe4:	4604d000 	.word	0x4604d000

0800ffe8 <skid_steer_position_measure>:

void skid_steer_position_measure(struct skid_steer *ss,
                                 struct skid_steer_motor_fdb wheel_fdb[]) {
 800ffe8:	b580      	push	{r7, lr}
 800ffea:	b086      	sub	sp, #24
 800ffec:	af00      	add	r7, sp, #0
 800ffee:	6078      	str	r0, [r7, #4]
 800fff0:	6039      	str	r1, [r7, #0]
  static double d_x, last_d_x, diff_d_x;         // [mm]
  static double d_w, last_d_w, diff_d_w;         // [radian]
  static double position_x, position_y, angle_w; // [mm] [mm] [radian]
  static double v_x, v_w;                        // [mm/s] [rad/s]

  rpm_ratio = PERIMETER * MOTOR_DECELE_RATIO / 60.0f;
 800fff2:	4baf      	ldr	r3, [pc, #700]	; (80102b0 <skid_steer_position_measure+0x2c8>)
 800fff4:	4aaf      	ldr	r2, [pc, #700]	; (80102b4 <skid_steer_position_measure+0x2cc>)
 800fff6:	601a      	str	r2, [r3, #0]
  ecd_ratio = PERIMETER * MOTOR_DECELE_RATIO / MOTOR_ENCODER_ACCURACY;
 800fff8:	4baf      	ldr	r3, [pc, #700]	; (80102b8 <skid_steer_position_measure+0x2d0>)
 800fffa:	4ab0      	ldr	r2, [pc, #704]	; (80102bc <skid_steer_position_measure+0x2d4>)
 800fffc:	601a      	str	r2, [r3, #0]

  last_d_x = d_x;
 800fffe:	4bb0      	ldr	r3, [pc, #704]	; (80102c0 <skid_steer_position_measure+0x2d8>)
 8010000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010004:	49af      	ldr	r1, [pc, #700]	; (80102c4 <skid_steer_position_measure+0x2dc>)
 8010006:	e9c1 2300 	strd	r2, r3, [r1]
  last_d_w = d_w;
 801000a:	4baf      	ldr	r3, [pc, #700]	; (80102c8 <skid_steer_position_measure+0x2e0>)
 801000c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010010:	49ae      	ldr	r1, [pc, #696]	; (80102cc <skid_steer_position_measure+0x2e4>)
 8010012:	e9c1 2300 	strd	r2, r3, [r1]

  float ecd_r = -1.0f * (wheel_fdb[0].total_ecd + wheel_fdb[3].total_ecd) / 2.0;
 8010016:	683b      	ldr	r3, [r7, #0]
 8010018:	ed93 7a00 	vldr	s14, [r3]
 801001c:	683b      	ldr	r3, [r7, #0]
 801001e:	3318      	adds	r3, #24
 8010020:	edd3 7a00 	vldr	s15, [r3]
 8010024:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010028:	eeb1 7a67 	vneg.f32	s14, s15
 801002c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8010030:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8010034:	edc7 7a05 	vstr	s15, [r7, #20]
  float ecd_l = (wheel_fdb[1].total_ecd + wheel_fdb[2].total_ecd) / 2.0;
 8010038:	683b      	ldr	r3, [r7, #0]
 801003a:	3308      	adds	r3, #8
 801003c:	ed93 7a00 	vldr	s14, [r3]
 8010040:	683b      	ldr	r3, [r7, #0]
 8010042:	3310      	adds	r3, #16
 8010044:	edd3 7a00 	vldr	s15, [r3]
 8010048:	ee37 7a27 	vadd.f32	s14, s14, s15
 801004c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8010050:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8010054:	edc7 7a04 	vstr	s15, [r7, #16]

  d_x = ecd_ratio * (ecd_r + ecd_l) / 2.0f;
 8010058:	ed97 7a05 	vldr	s14, [r7, #20]
 801005c:	edd7 7a04 	vldr	s15, [r7, #16]
 8010060:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010064:	4b94      	ldr	r3, [pc, #592]	; (80102b8 <skid_steer_position_measure+0x2d0>)
 8010066:	edd3 7a00 	vldr	s15, [r3]
 801006a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801006e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8010072:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8010076:	ee16 0a90 	vmov	r0, s13
 801007a:	f7f0 fa25 	bl	80004c8 <__aeabi_f2d>
 801007e:	4602      	mov	r2, r0
 8010080:	460b      	mov	r3, r1
 8010082:	498f      	ldr	r1, [pc, #572]	; (80102c0 <skid_steer_position_measure+0x2d8>)
 8010084:	e9c1 2300 	strd	r2, r3, [r1]
  d_w = ecd_ratio * (ecd_r - ecd_l) / WHEELTRACK;
 8010088:	ed97 7a05 	vldr	s14, [r7, #20]
 801008c:	edd7 7a04 	vldr	s15, [r7, #16]
 8010090:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010094:	4b88      	ldr	r3, [pc, #544]	; (80102b8 <skid_steer_position_measure+0x2d0>)
 8010096:	edd3 7a00 	vldr	s15, [r3]
 801009a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801009e:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 80102d0 <skid_steer_position_measure+0x2e8>
 80100a2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80100a6:	ee16 0a90 	vmov	r0, s13
 80100aa:	f7f0 fa0d 	bl	80004c8 <__aeabi_f2d>
 80100ae:	4602      	mov	r2, r0
 80100b0:	460b      	mov	r3, r1
 80100b2:	4985      	ldr	r1, [pc, #532]	; (80102c8 <skid_steer_position_measure+0x2e0>)
 80100b4:	e9c1 2300 	strd	r2, r3, [r1]

  diff_d_x = d_x - last_d_x;
 80100b8:	4b81      	ldr	r3, [pc, #516]	; (80102c0 <skid_steer_position_measure+0x2d8>)
 80100ba:	e9d3 0100 	ldrd	r0, r1, [r3]
 80100be:	4b81      	ldr	r3, [pc, #516]	; (80102c4 <skid_steer_position_measure+0x2dc>)
 80100c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100c4:	f7f0 f8a0 	bl	8000208 <__aeabi_dsub>
 80100c8:	4602      	mov	r2, r0
 80100ca:	460b      	mov	r3, r1
 80100cc:	4981      	ldr	r1, [pc, #516]	; (80102d4 <skid_steer_position_measure+0x2ec>)
 80100ce:	e9c1 2300 	strd	r2, r3, [r1]
  diff_d_w = d_w - last_d_w;
 80100d2:	4b7d      	ldr	r3, [pc, #500]	; (80102c8 <skid_steer_position_measure+0x2e0>)
 80100d4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80100d8:	4b7c      	ldr	r3, [pc, #496]	; (80102cc <skid_steer_position_measure+0x2e4>)
 80100da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100de:	f7f0 f893 	bl	8000208 <__aeabi_dsub>
 80100e2:	4602      	mov	r2, r0
 80100e4:	460b      	mov	r3, r1
 80100e6:	497c      	ldr	r1, [pc, #496]	; (80102d8 <skid_steer_position_measure+0x2f0>)
 80100e8:	e9c1 2300 	strd	r2, r3, [r1]

  position_x += diff_d_x * cos(angle_w);
 80100ec:	4b7b      	ldr	r3, [pc, #492]	; (80102dc <skid_steer_position_measure+0x2f4>)
 80100ee:	ed93 7b00 	vldr	d7, [r3]
 80100f2:	eeb0 0a47 	vmov.f32	s0, s14
 80100f6:	eef0 0a67 	vmov.f32	s1, s15
 80100fa:	f002 f989 	bl	8012410 <cos>
 80100fe:	ec51 0b10 	vmov	r0, r1, d0
 8010102:	4b74      	ldr	r3, [pc, #464]	; (80102d4 <skid_steer_position_measure+0x2ec>)
 8010104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010108:	f7f0 fa36 	bl	8000578 <__aeabi_dmul>
 801010c:	4602      	mov	r2, r0
 801010e:	460b      	mov	r3, r1
 8010110:	4610      	mov	r0, r2
 8010112:	4619      	mov	r1, r3
 8010114:	4b72      	ldr	r3, [pc, #456]	; (80102e0 <skid_steer_position_measure+0x2f8>)
 8010116:	e9d3 2300 	ldrd	r2, r3, [r3]
 801011a:	f7f0 f877 	bl	800020c <__adddf3>
 801011e:	4602      	mov	r2, r0
 8010120:	460b      	mov	r3, r1
 8010122:	496f      	ldr	r1, [pc, #444]	; (80102e0 <skid_steer_position_measure+0x2f8>)
 8010124:	e9c1 2300 	strd	r2, r3, [r1]
  position_y += diff_d_x * sin(angle_w);
 8010128:	4b6c      	ldr	r3, [pc, #432]	; (80102dc <skid_steer_position_measure+0x2f4>)
 801012a:	ed93 7b00 	vldr	d7, [r3]
 801012e:	eeb0 0a47 	vmov.f32	s0, s14
 8010132:	eef0 0a67 	vmov.f32	s1, s15
 8010136:	f002 f9cb 	bl	80124d0 <sin>
 801013a:	ec51 0b10 	vmov	r0, r1, d0
 801013e:	4b65      	ldr	r3, [pc, #404]	; (80102d4 <skid_steer_position_measure+0x2ec>)
 8010140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010144:	f7f0 fa18 	bl	8000578 <__aeabi_dmul>
 8010148:	4602      	mov	r2, r0
 801014a:	460b      	mov	r3, r1
 801014c:	4610      	mov	r0, r2
 801014e:	4619      	mov	r1, r3
 8010150:	4b64      	ldr	r3, [pc, #400]	; (80102e4 <skid_steer_position_measure+0x2fc>)
 8010152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010156:	f7f0 f859 	bl	800020c <__adddf3>
 801015a:	4602      	mov	r2, r0
 801015c:	460b      	mov	r3, r1
 801015e:	4961      	ldr	r1, [pc, #388]	; (80102e4 <skid_steer_position_measure+0x2fc>)
 8010160:	e9c1 2300 	strd	r2, r3, [r1]

  angle_w += diff_d_w;
 8010164:	4b5d      	ldr	r3, [pc, #372]	; (80102dc <skid_steer_position_measure+0x2f4>)
 8010166:	e9d3 0100 	ldrd	r0, r1, [r3]
 801016a:	4b5b      	ldr	r3, [pc, #364]	; (80102d8 <skid_steer_position_measure+0x2f0>)
 801016c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010170:	f7f0 f84c 	bl	800020c <__adddf3>
 8010174:	4602      	mov	r2, r0
 8010176:	460b      	mov	r3, r1
 8010178:	4958      	ldr	r1, [pc, #352]	; (80102dc <skid_steer_position_measure+0x2f4>)
 801017a:	e9c1 2300 	strd	r2, r3, [r1]

  ss->position.position_x_mm = position_x;        // mm
 801017e:	4b58      	ldr	r3, [pc, #352]	; (80102e0 <skid_steer_position_measure+0x2f8>)
 8010180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010184:	4610      	mov	r0, r2
 8010186:	4619      	mov	r1, r3
 8010188:	f7f0 fcce 	bl	8000b28 <__aeabi_d2f>
 801018c:	4602      	mov	r2, r0
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	621a      	str	r2, [r3, #32]
  ss->position.position_y_mm = position_y;        // mm
 8010192:	4b54      	ldr	r3, [pc, #336]	; (80102e4 <skid_steer_position_measure+0x2fc>)
 8010194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010198:	4610      	mov	r0, r2
 801019a:	4619      	mov	r1, r3
 801019c:	f7f0 fcc4 	bl	8000b28 <__aeabi_d2f>
 80101a0:	4602      	mov	r2, r0
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	625a      	str	r2, [r3, #36]	; 0x24
  ss->position.angle_deg = angle_w * RADIAN_COEF; // degree
 80101a6:	4b4d      	ldr	r3, [pc, #308]	; (80102dc <skid_steer_position_measure+0x2f4>)
 80101a8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80101ac:	a33e      	add	r3, pc, #248	; (adr r3, 80102a8 <skid_steer_position_measure+0x2c0>)
 80101ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101b2:	f7f0 f9e1 	bl	8000578 <__aeabi_dmul>
 80101b6:	4602      	mov	r2, r0
 80101b8:	460b      	mov	r3, r1
 80101ba:	4610      	mov	r0, r2
 80101bc:	4619      	mov	r1, r3
 80101be:	f7f0 fcb3 	bl	8000b28 <__aeabi_d2f>
 80101c2:	4602      	mov	r2, r0
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	629a      	str	r2, [r3, #40]	; 0x28

  float rpmR = -1.0f * (wheel_fdb[0].speed_rpm + wheel_fdb[3].speed_rpm) / 2.0f;
 80101c8:	683b      	ldr	r3, [r7, #0]
 80101ca:	ed93 7a01 	vldr	s14, [r3, #4]
 80101ce:	683b      	ldr	r3, [r7, #0]
 80101d0:	3318      	adds	r3, #24
 80101d2:	edd3 7a01 	vldr	s15, [r3, #4]
 80101d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80101da:	eeb1 7a67 	vneg.f32	s14, s15
 80101de:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80101e2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80101e6:	edc7 7a03 	vstr	s15, [r7, #12]
  float rpmL = (wheel_fdb[1].speed_rpm + wheel_fdb[2].speed_rpm) / 2.0f;
 80101ea:	683b      	ldr	r3, [r7, #0]
 80101ec:	3308      	adds	r3, #8
 80101ee:	ed93 7a01 	vldr	s14, [r3, #4]
 80101f2:	683b      	ldr	r3, [r7, #0]
 80101f4:	3310      	adds	r3, #16
 80101f6:	edd3 7a01 	vldr	s15, [r3, #4]
 80101fa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80101fe:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8010202:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8010206:	edc7 7a02 	vstr	s15, [r7, #8]
  v_x = rpm_ratio * (rpmR + rpmL) / 2.0f;
 801020a:	ed97 7a03 	vldr	s14, [r7, #12]
 801020e:	edd7 7a02 	vldr	s15, [r7, #8]
 8010212:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010216:	4b26      	ldr	r3, [pc, #152]	; (80102b0 <skid_steer_position_measure+0x2c8>)
 8010218:	edd3 7a00 	vldr	s15, [r3]
 801021c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010220:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8010224:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8010228:	ee16 0a90 	vmov	r0, s13
 801022c:	f7f0 f94c 	bl	80004c8 <__aeabi_f2d>
 8010230:	4602      	mov	r2, r0
 8010232:	460b      	mov	r3, r1
 8010234:	492c      	ldr	r1, [pc, #176]	; (80102e8 <skid_steer_position_measure+0x300>)
 8010236:	e9c1 2300 	strd	r2, r3, [r1]
  v_w = rpm_ratio * (rpmR - rpmL) / WHEELTRACK;
 801023a:	ed97 7a03 	vldr	s14, [r7, #12]
 801023e:	edd7 7a02 	vldr	s15, [r7, #8]
 8010242:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010246:	4b1a      	ldr	r3, [pc, #104]	; (80102b0 <skid_steer_position_measure+0x2c8>)
 8010248:	edd3 7a00 	vldr	s15, [r3]
 801024c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010250:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80102d0 <skid_steer_position_measure+0x2e8>
 8010254:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8010258:	ee16 0a90 	vmov	r0, s13
 801025c:	f7f0 f934 	bl	80004c8 <__aeabi_f2d>
 8010260:	4602      	mov	r2, r0
 8010262:	460b      	mov	r3, r1
 8010264:	4921      	ldr	r1, [pc, #132]	; (80102ec <skid_steer_position_measure+0x304>)
 8010266:	e9c1 2300 	strd	r2, r3, [r1]

  ss->position.v_x_mm = v_x;                 // mm/s
 801026a:	4b1f      	ldr	r3, [pc, #124]	; (80102e8 <skid_steer_position_measure+0x300>)
 801026c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010270:	4610      	mov	r0, r2
 8010272:	4619      	mov	r1, r3
 8010274:	f7f0 fc58 	bl	8000b28 <__aeabi_d2f>
 8010278:	4602      	mov	r2, r0
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	615a      	str	r2, [r3, #20]
  ss->position.rate_deg = v_w * RADIAN_COEF; // degree/s
 801027e:	4b1b      	ldr	r3, [pc, #108]	; (80102ec <skid_steer_position_measure+0x304>)
 8010280:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010284:	a308      	add	r3, pc, #32	; (adr r3, 80102a8 <skid_steer_position_measure+0x2c0>)
 8010286:	e9d3 2300 	ldrd	r2, r3, [r3]
 801028a:	f7f0 f975 	bl	8000578 <__aeabi_dmul>
 801028e:	4602      	mov	r2, r0
 8010290:	460b      	mov	r3, r1
 8010292:	4610      	mov	r0, r2
 8010294:	4619      	mov	r1, r3
 8010296:	f7f0 fc47 	bl	8000b28 <__aeabi_d2f>
 801029a:	4602      	mov	r2, r0
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	61da      	str	r2, [r3, #28]
}
 80102a0:	bf00      	nop
 80102a2:	3718      	adds	r7, #24
 80102a4:	46bd      	mov	sp, r7
 80102a6:	bd80      	pop	{r7, pc}
 80102a8:	60000000 	.word	0x60000000
 80102ac:	404ca666 	.word	0x404ca666
 80102b0:	20011d2c 	.word	0x20011d2c
 80102b4:	3ed468b0 	.word	0x3ed468b0
 80102b8:	20011d30 	.word	0x20011d30
 80102bc:	3b472225 	.word	0x3b472225
 80102c0:	20011d38 	.word	0x20011d38
 80102c4:	20011d40 	.word	0x20011d40
 80102c8:	20011d48 	.word	0x20011d48
 80102cc:	20011d50 	.word	0x20011d50
 80102d0:	438c0000 	.word	0x438c0000
 80102d4:	20011d58 	.word	0x20011d58
 80102d8:	20011d60 	.word	0x20011d60
 80102dc:	20011d68 	.word	0x20011d68
 80102e0:	20011d70 	.word	0x20011d70
 80102e4:	20011d78 	.word	0x20011d78
 80102e8:	20011d80 	.word	0x20011d80
 80102ec:	20011d88 	.word	0x20011d88

080102f0 <controller_register>:
                            const char *name,
                            enum controller_type type,
                            void *param,
                            void *feedback,
                            uint8_t enable)
{
 80102f0:	b580      	push	{r7, lr}
 80102f2:	b084      	sub	sp, #16
 80102f4:	af00      	add	r7, sp, #0
 80102f6:	60f8      	str	r0, [r7, #12]
 80102f8:	60b9      	str	r1, [r7, #8]
 80102fa:	603b      	str	r3, [r7, #0]
 80102fc:	4613      	mov	r3, r2
 80102fe:	71fb      	strb	r3, [r7, #7]
  if (ctrl == NULL)
 8010300:	68fb      	ldr	r3, [r7, #12]
 8010302:	2b00      	cmp	r3, #0
 8010304:	d102      	bne.n	801030c <controller_register+0x1c>
    return -RM_INVAL;
 8010306:	f06f 0301 	mvn.w	r3, #1
 801030a:	e01d      	b.n	8010348 <controller_register+0x58>
  if (controller_find(name) != NULL)
 801030c:	68b8      	ldr	r0, [r7, #8]
 801030e:	f000 f81f 	bl	8010350 <controller_find>
 8010312:	4603      	mov	r3, r0
 8010314:	2b00      	cmp	r3, #0
 8010316:	d002      	beq.n	801031e <controller_register+0x2e>
    return -RM_EXISTED;
 8010318:	f06f 0302 	mvn.w	r3, #2
 801031c:	e014      	b.n	8010348 <controller_register+0x58>

  object_init(&(ctrl->parent), Object_Class_Controller, name);
 801031e:	68fb      	ldr	r3, [r7, #12]
 8010320:	68ba      	ldr	r2, [r7, #8]
 8010322:	2102      	movs	r1, #2
 8010324:	4618      	mov	r0, r3
 8010326:	f000 ff13 	bl	8011150 <object_init>

  ctrl->type = type;
 801032a:	68fb      	ldr	r3, [r7, #12]
 801032c:	79fa      	ldrb	r2, [r7, #7]
 801032e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  ctrl->enable = enable;
 8010332:	68fb      	ldr	r3, [r7, #12]
 8010334:	7f3a      	ldrb	r2, [r7, #28]
 8010336:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  ctrl->param = param;
 801033a:	68fb      	ldr	r3, [r7, #12]
 801033c:	683a      	ldr	r2, [r7, #0]
 801033e:	631a      	str	r2, [r3, #48]	; 0x30
  ctrl->feedback = feedback;
 8010340:	68fb      	ldr	r3, [r7, #12]
 8010342:	69ba      	ldr	r2, [r7, #24]
 8010344:	635a      	str	r2, [r3, #52]	; 0x34

  return RM_OK;
 8010346:	2300      	movs	r3, #0
}
 8010348:	4618      	mov	r0, r3
 801034a:	3710      	adds	r7, #16
 801034c:	46bd      	mov	sp, r7
 801034e:	bd80      	pop	{r7, pc}

08010350 <controller_find>:

  return RM_OK;
}

controller_t controller_find(const char *name)
{
 8010350:	b580      	push	{r7, lr}
 8010352:	b084      	sub	sp, #16
 8010354:	af00      	add	r7, sp, #0
 8010356:	6078      	str	r0, [r7, #4]
  struct object *object;

  object = object_find(name, Object_Class_Controller);
 8010358:	2102      	movs	r1, #2
 801035a:	6878      	ldr	r0, [r7, #4]
 801035c:	f000 ff34 	bl	80111c8 <object_find>
 8010360:	60f8      	str	r0, [r7, #12]

  return (controller_t)object;
 8010362:	68fb      	ldr	r3, [r7, #12]
}
 8010364:	4618      	mov	r0, r3
 8010366:	3710      	adds	r7, #16
 8010368:	46bd      	mov	sp, r7
 801036a:	bd80      	pop	{r7, pc}

0801036c <controller_execute>:

  return RM_OK;
}

int32_t controller_execute(struct controller *ctrl, void *feedback)
{
 801036c:	b580      	push	{r7, lr}
 801036e:	b082      	sub	sp, #8
 8010370:	af00      	add	r7, sp, #0
 8010372:	6078      	str	r0, [r7, #4]
 8010374:	6039      	str	r1, [r7, #0]
  if (ctrl == NULL)
 8010376:	687b      	ldr	r3, [r7, #4]
 8010378:	2b00      	cmp	r3, #0
 801037a:	d102      	bne.n	8010382 <controller_execute+0x16>
    return -RM_INVAL;
 801037c:	f06f 0301 	mvn.w	r3, #1
 8010380:	e029      	b.n	80103d6 <controller_execute+0x6a>

  if (feedback == NULL)
 8010382:	683b      	ldr	r3, [r7, #0]
 8010384:	2b00      	cmp	r3, #0
 8010386:	d102      	bne.n	801038e <controller_execute+0x22>
    return -RM_INVAL;
 8010388:	f06f 0301 	mvn.w	r3, #1
 801038c:	e023      	b.n	80103d6 <controller_execute+0x6a>

  if (ctrl->convert_feedback == NULL)
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010392:	2b00      	cmp	r3, #0
 8010394:	d102      	bne.n	801039c <controller_execute+0x30>
  {
    return -RM_INVAL;
 8010396:	f06f 0301 	mvn.w	r3, #1
 801039a:	e01c      	b.n	80103d6 <controller_execute+0x6a>
  }
  else
  {
    ctrl->convert_feedback(ctrl, feedback);
 801039c:	687b      	ldr	r3, [r7, #4]
 801039e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80103a0:	6839      	ldr	r1, [r7, #0]
 80103a2:	6878      	ldr	r0, [r7, #4]
 80103a4:	4798      	blx	r3
  }

  if ((ctrl->control != NULL) && (ctrl->enable == 1))
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80103aa:	2b00      	cmp	r3, #0
 80103ac:	d012      	beq.n	80103d4 <controller_execute+0x68>
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80103b4:	2b01      	cmp	r3, #1
 80103b6:	d10d      	bne.n	80103d4 <controller_execute+0x68>
  {
    ctrl->control(ctrl, ctrl->param, ctrl->feedback, ctrl->input);
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80103bc:	687a      	ldr	r2, [r7, #4]
 80103be:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80103c0:	687a      	ldr	r2, [r7, #4]
 80103c2:	6b50      	ldr	r0, [r2, #52]	; 0x34
 80103c4:	687a      	ldr	r2, [r7, #4]
 80103c6:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 80103ca:	eeb0 0a67 	vmov.f32	s0, s15
 80103ce:	4602      	mov	r2, r0
 80103d0:	6878      	ldr	r0, [r7, #4]
 80103d2:	4798      	blx	r3
  }

  return RM_OK;
 80103d4:	2300      	movs	r3, #0
}
 80103d6:	4618      	mov	r0, r3
 80103d8:	3708      	adds	r7, #8
 80103da:	46bd      	mov	sp, r7
 80103dc:	bd80      	pop	{r7, pc}

080103de <controller_set_input>:

int32_t controller_set_input(struct controller *ctrl, float input)
{
 80103de:	b480      	push	{r7}
 80103e0:	b083      	sub	sp, #12
 80103e2:	af00      	add	r7, sp, #0
 80103e4:	6078      	str	r0, [r7, #4]
 80103e6:	ed87 0a00 	vstr	s0, [r7]
  if (ctrl == NULL)
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	2b00      	cmp	r3, #0
 80103ee:	d101      	bne.n	80103f4 <controller_set_input+0x16>
    return 0;
 80103f0:	2300      	movs	r3, #0
 80103f2:	e003      	b.n	80103fc <controller_set_input+0x1e>
  ctrl->input = input;
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	683a      	ldr	r2, [r7, #0]
 80103f8:	639a      	str	r2, [r3, #56]	; 0x38
  return RM_OK;
 80103fa:	2300      	movs	r3, #0
}
 80103fc:	4618      	mov	r0, r3
 80103fe:	370c      	adds	r7, #12
 8010400:	46bd      	mov	sp, r7
 8010402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010406:	4770      	bx	lr

08010408 <controller_get_output>:

float controller_get_output(struct controller *ctrl, float *out)
{
 8010408:	b480      	push	{r7}
 801040a:	b083      	sub	sp, #12
 801040c:	af00      	add	r7, sp, #0
 801040e:	6078      	str	r0, [r7, #4]
 8010410:	6039      	str	r1, [r7, #0]
  if (ctrl == NULL)
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	2b00      	cmp	r3, #0
 8010416:	d102      	bne.n	801041e <controller_get_output+0x16>
    return 0;
 8010418:	f04f 0300 	mov.w	r3, #0
 801041c:	e005      	b.n	801042a <controller_get_output+0x22>
  *out = ctrl->output;
 801041e:	687b      	ldr	r3, [r7, #4]
 8010420:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8010422:	683b      	ldr	r3, [r7, #0]
 8010424:	601a      	str	r2, [r3, #0]
  return ctrl->output;
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 801042a:	ee07 3a90 	vmov	s15, r3
 801042e:	eeb0 0a67 	vmov.f32	s0, s15
 8010432:	370c      	adds	r7, #12
 8010434:	46bd      	mov	sp, r7
 8010436:	f85d 7b04 	ldr.w	r7, [sp], #4
 801043a:	4770      	bx	lr

0801043c <controller_enable>:

  return ctrl->type;
}

int32_t controller_enable(struct controller *ctrl)
{
 801043c:	b480      	push	{r7}
 801043e:	b083      	sub	sp, #12
 8010440:	af00      	add	r7, sp, #0
 8010442:	6078      	str	r0, [r7, #4]
  if (ctrl == NULL)
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	2b00      	cmp	r3, #0
 8010448:	d101      	bne.n	801044e <controller_enable+0x12>
    return RM_INVAL;
 801044a:	2302      	movs	r3, #2
 801044c:	e004      	b.n	8010458 <controller_enable+0x1c>
  ctrl->enable = 1;
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	2201      	movs	r2, #1
 8010452:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  return RM_OK;
 8010456:	2300      	movs	r3, #0
}
 8010458:	4618      	mov	r0, r3
 801045a:	370c      	adds	r7, #12
 801045c:	46bd      	mov	sp, r7
 801045e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010462:	4770      	bx	lr

08010464 <controller_disable>:

int32_t controller_disable(struct controller *ctrl)
{
 8010464:	b480      	push	{r7}
 8010466:	b083      	sub	sp, #12
 8010468:	af00      	add	r7, sp, #0
 801046a:	6078      	str	r0, [r7, #4]
  if (ctrl == NULL)
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	2b00      	cmp	r3, #0
 8010470:	d101      	bne.n	8010476 <controller_disable+0x12>
    return RM_INVAL;
 8010472:	2302      	movs	r3, #2
 8010474:	e00c      	b.n	8010490 <controller_disable+0x2c>
  ctrl->enable = 0;
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	2200      	movs	r2, #0
 801047a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  ctrl->output = 0;
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	f04f 0200 	mov.w	r2, #0
 8010484:	63da      	str	r2, [r3, #60]	; 0x3c
  ctrl->input = 0;
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	f04f 0200 	mov.w	r2, #0
 801048c:	639a      	str	r2, [r3, #56]	; 0x38
  return RM_OK;
 801048e:	2300      	movs	r3, #0
}
 8010490:	4618      	mov	r0, r3
 8010492:	370c      	adds	r7, #12
 8010494:	46bd      	mov	sp, r7
 8010496:	f85d 7b04 	ldr.w	r7, [sp], #4
 801049a:	4770      	bx	lr

0801049c <pid_controller_register>:
int32_t pid_controller_register(struct controller *ctrl,
                                const char *name,
                                struct pid *param,
                                struct pid_feedback *feedback,
                                uint8_t enable)
{
 801049c:	b580      	push	{r7, lr}
 801049e:	b086      	sub	sp, #24
 80104a0:	af02      	add	r7, sp, #8
 80104a2:	60f8      	str	r0, [r7, #12]
 80104a4:	60b9      	str	r1, [r7, #8]
 80104a6:	607a      	str	r2, [r7, #4]
 80104a8:	603b      	str	r3, [r7, #0]
  if (ctrl == NULL)
 80104aa:	68fb      	ldr	r3, [r7, #12]
 80104ac:	2b00      	cmp	r3, #0
 80104ae:	d102      	bne.n	80104b6 <pid_controller_register+0x1a>
    return -RM_INVAL;
 80104b0:	f06f 0301 	mvn.w	r3, #1
 80104b4:	e00d      	b.n	80104d2 <pid_controller_register+0x36>
  
  ctrl->control = pid_control;
 80104b6:	68fb      	ldr	r3, [r7, #12]
 80104b8:	4a08      	ldr	r2, [pc, #32]	; (80104dc <pid_controller_register+0x40>)
 80104ba:	645a      	str	r2, [r3, #68]	; 0x44
  controller_register(ctrl, name, Controller_Class_PID, (void *)param, (void *)feedback, enable);
 80104bc:	7e3b      	ldrb	r3, [r7, #24]
 80104be:	9301      	str	r3, [sp, #4]
 80104c0:	683b      	ldr	r3, [r7, #0]
 80104c2:	9300      	str	r3, [sp, #0]
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	2200      	movs	r2, #0
 80104c8:	68b9      	ldr	r1, [r7, #8]
 80104ca:	68f8      	ldr	r0, [r7, #12]
 80104cc:	f7ff ff10 	bl	80102f0 <controller_register>

  return RM_OK;
 80104d0:	2300      	movs	r3, #0
}              
 80104d2:	4618      	mov	r0, r3
 80104d4:	3710      	adds	r7, #16
 80104d6:	46bd      	mov	sp, r7
 80104d8:	bd80      	pop	{r7, pc}
 80104da:	bf00      	nop
 80104dc:	080104e1 	.word	0x080104e1

080104e0 <pid_control>:

int32_t pid_control(struct controller *ctrl, void *param, void *feedback, float input)
{
 80104e0:	b580      	push	{r7, lr}
 80104e2:	b086      	sub	sp, #24
 80104e4:	af00      	add	r7, sp, #0
 80104e6:	60f8      	str	r0, [r7, #12]
 80104e8:	60b9      	str	r1, [r7, #8]
 80104ea:	607a      	str	r2, [r7, #4]
 80104ec:	ed87 0a00 	vstr	s0, [r7]
  pid_t pid_param = (pid_t)param;
 80104f0:	68bb      	ldr	r3, [r7, #8]
 80104f2:	617b      	str	r3, [r7, #20]
  pid_feedback_t pid_feedback = (pid_feedback_t)feedback;
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	613b      	str	r3, [r7, #16]
  
  pid_calculate(pid_param, pid_feedback->feedback, input);
 80104f8:	693b      	ldr	r3, [r7, #16]
 80104fa:	edd3 7a00 	vldr	s15, [r3]
 80104fe:	edd7 0a00 	vldr	s1, [r7]
 8010502:	eeb0 0a67 	vmov.f32	s0, s15
 8010506:	6978      	ldr	r0, [r7, #20]
 8010508:	f7ff fb93 	bl	800fc32 <pid_calculate>
  
  ctrl->output = pid_param->out;
 801050c:	697b      	ldr	r3, [r7, #20]
 801050e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010510:	68fb      	ldr	r3, [r7, #12]
 8010512:	63da      	str	r2, [r3, #60]	; 0x3c

  return RM_OK; 
 8010514:	2300      	movs	r3, #0
}
 8010516:	4618      	mov	r0, r3
 8010518:	3718      	adds	r7, #24
 801051a:	46bd      	mov	sp, r7
 801051c:	bd80      	pop	{r7, pc}

0801051e <device_register>:
#include "device.h"

int32_t device_register(struct device *dev,
                        const char *name,
                        uint16_t flags)
{
 801051e:	b580      	push	{r7, lr}
 8010520:	b084      	sub	sp, #16
 8010522:	af00      	add	r7, sp, #0
 8010524:	60f8      	str	r0, [r7, #12]
 8010526:	60b9      	str	r1, [r7, #8]
 8010528:	4613      	mov	r3, r2
 801052a:	80fb      	strh	r3, [r7, #6]
  if (dev == NULL)
 801052c:	68fb      	ldr	r3, [r7, #12]
 801052e:	2b00      	cmp	r3, #0
 8010530:	d102      	bne.n	8010538 <device_register+0x1a>
    return -RM_INVAL;
 8010532:	f06f 0301 	mvn.w	r3, #1
 8010536:	e019      	b.n	801056c <device_register+0x4e>
  if (device_find(name) != NULL)
 8010538:	68b8      	ldr	r0, [r7, #8]
 801053a:	f000 f81b 	bl	8010574 <device_find>
 801053e:	4603      	mov	r3, r0
 8010540:	2b00      	cmp	r3, #0
 8010542:	d002      	beq.n	801054a <device_register+0x2c>
    return -RM_EXISTED;
 8010544:	f06f 0302 	mvn.w	r3, #2
 8010548:	e010      	b.n	801056c <device_register+0x4e>

  object_init(&(dev->parent), Object_Class_Device, name);
 801054a:	68fb      	ldr	r3, [r7, #12]
 801054c:	68ba      	ldr	r2, [r7, #8]
 801054e:	2100      	movs	r1, #0
 8010550:	4618      	mov	r0, r3
 8010552:	f000 fdfd 	bl	8011150 <object_init>

  dev->flag = flags;
 8010556:	68fb      	ldr	r3, [r7, #12]
 8010558:	88fa      	ldrh	r2, [r7, #6]
 801055a:	85da      	strh	r2, [r3, #46]	; 0x2e
  dev->ref_count = 0;
 801055c:	68fb      	ldr	r3, [r7, #12]
 801055e:	2200      	movs	r2, #0
 8010560:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  dev->open_flag = 0;
 8010564:	68fb      	ldr	r3, [r7, #12]
 8010566:	2200      	movs	r2, #0
 8010568:	861a      	strh	r2, [r3, #48]	; 0x30

  return RM_OK;
 801056a:	2300      	movs	r3, #0
}
 801056c:	4618      	mov	r0, r3
 801056e:	3710      	adds	r7, #16
 8010570:	46bd      	mov	sp, r7
 8010572:	bd80      	pop	{r7, pc}

08010574 <device_find>:

  return RM_OK;
}

device_t device_find(const char *name)
{
 8010574:	b580      	push	{r7, lr}
 8010576:	b084      	sub	sp, #16
 8010578:	af00      	add	r7, sp, #0
 801057a:	6078      	str	r0, [r7, #4]
  struct object *object;

  object = object_find(name, Object_Class_Device);
 801057c:	2100      	movs	r1, #0
 801057e:	6878      	ldr	r0, [r7, #4]
 8010580:	f000 fe22 	bl	80111c8 <object_find>
 8010584:	60f8      	str	r0, [r7, #12]

  return (device_t)object;
 8010586:	68fb      	ldr	r3, [r7, #12]
}
 8010588:	4618      	mov	r0, r3
 801058a:	3710      	adds	r7, #16
 801058c:	46bd      	mov	sp, r7
 801058e:	bd80      	pop	{r7, pc}

08010590 <motor_device_register>:
static void get_motor_offset(motor_data_t ptr, uint8_t can_rx_data[]);

static fn_can_send motor_can_send = NULL;

int32_t motor_device_register(motor_device_t motor_dev, const char *name,
                              uint16_t flags) {
 8010590:	b580      	push	{r7, lr}
 8010592:	b084      	sub	sp, #16
 8010594:	af00      	add	r7, sp, #0
 8010596:	60f8      	str	r0, [r7, #12]
 8010598:	60b9      	str	r1, [r7, #8]
 801059a:	4613      	mov	r3, r2
 801059c:	80fb      	strh	r3, [r7, #6]
  if (motor_dev == NULL)
 801059e:	68fb      	ldr	r3, [r7, #12]
 80105a0:	2b00      	cmp	r3, #0
 80105a2:	d102      	bne.n	80105aa <motor_device_register+0x1a>
    return -RM_INVAL;
 80105a4:	f06f 0301 	mvn.w	r3, #1
 80105a8:	e035      	b.n	8010616 <motor_device_register+0x86>

  if (device_find(name) != NULL)
 80105aa:	68b8      	ldr	r0, [r7, #8]
 80105ac:	f7ff ffe2 	bl	8010574 <device_find>
 80105b0:	4603      	mov	r3, r0
 80105b2:	2b00      	cmp	r3, #0
 80105b4:	d002      	beq.n	80105bc <motor_device_register+0x2c>
    return -RM_EXISTED;
 80105b6:	f06f 0302 	mvn.w	r3, #2
 80105ba:	e02c      	b.n	8010616 <motor_device_register+0x86>

  if (motor_device_find_by_canid(motor_dev->can_periph, motor_dev->can_id) !=
 80105bc:	68fb      	ldr	r3, [r7, #12]
 80105be:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 80105c2:	68fb      	ldr	r3, [r7, #12]
 80105c4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80105c8:	4619      	mov	r1, r3
 80105ca:	4610      	mov	r0, r2
 80105cc:	f000 f864 	bl	8010698 <motor_device_find_by_canid>
 80105d0:	4603      	mov	r3, r0
 80105d2:	2b00      	cmp	r3, #0
 80105d4:	d002      	beq.n	80105dc <motor_device_register+0x4c>
      NULL)
    return -RM_EXISTED;
 80105d6:	f06f 0302 	mvn.w	r3, #2
 80105da:	e01c      	b.n	8010616 <motor_device_register+0x86>

  if ((motor_dev->can_id < 0x201) && (motor_dev->can_id > 0x208))
 80105dc:	68fb      	ldr	r3, [r7, #12]
 80105de:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80105e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80105e6:	d808      	bhi.n	80105fa <motor_device_register+0x6a>
 80105e8:	68fb      	ldr	r3, [r7, #12]
 80105ea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80105ee:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 80105f2:	d902      	bls.n	80105fa <motor_device_register+0x6a>
    return -RM_ERROR;
 80105f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80105f8:	e00d      	b.n	8010616 <motor_device_register+0x86>

  motor_dev->parent.type = Device_Class_Motor;
 80105fa:	68fb      	ldr	r3, [r7, #12]
 80105fc:	2200      	movs	r2, #0
 80105fe:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  motor_dev->get_data = get_encoder_data;
 8010602:	68fb      	ldr	r3, [r7, #12]
 8010604:	4a06      	ldr	r2, [pc, #24]	; (8010620 <motor_device_register+0x90>)
 8010606:	661a      	str	r2, [r3, #96]	; 0x60

  device_register(&(motor_dev->parent), name, flags);
 8010608:	68fb      	ldr	r3, [r7, #12]
 801060a:	88fa      	ldrh	r2, [r7, #6]
 801060c:	68b9      	ldr	r1, [r7, #8]
 801060e:	4618      	mov	r0, r3
 8010610:	f7ff ff85 	bl	801051e <device_register>

  return RM_OK;
 8010614:	2300      	movs	r3, #0
}
 8010616:	4618      	mov	r0, r3
 8010618:	3710      	adds	r7, #16
 801061a:	46bd      	mov	sp, r7
 801061c:	bd80      	pop	{r7, pc}
 801061e:	bf00      	nop
 8010620:	08010959 	.word	0x08010959

08010624 <motor_device_can_send_register>:

void motor_device_can_send_register(fn_can_send fn) {
 8010624:	b480      	push	{r7}
 8010626:	b083      	sub	sp, #12
 8010628:	af00      	add	r7, sp, #0
 801062a:	6078      	str	r0, [r7, #4]
  if (fn != NULL)
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	2b00      	cmp	r3, #0
 8010630:	d002      	beq.n	8010638 <motor_device_can_send_register+0x14>
    motor_can_send = fn;
 8010632:	4a04      	ldr	r2, [pc, #16]	; (8010644 <motor_device_can_send_register+0x20>)
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	6013      	str	r3, [r2, #0]
}
 8010638:	bf00      	nop
 801063a:	370c      	adds	r7, #12
 801063c:	46bd      	mov	sp, r7
 801063e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010642:	4770      	bx	lr
 8010644:	20011d90 	.word	0x20011d90

08010648 <motor_device_get_data>:
  } else {
    return NULL;
  }
}

motor_data_t motor_device_get_data(motor_device_t motor_dev) {
 8010648:	b480      	push	{r7}
 801064a:	b083      	sub	sp, #12
 801064c:	af00      	add	r7, sp, #0
 801064e:	6078      	str	r0, [r7, #4]
  if (motor_dev != NULL) {
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	2b00      	cmp	r3, #0
 8010654:	d002      	beq.n	801065c <motor_device_get_data+0x14>
    return &(motor_dev->data);
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	3338      	adds	r3, #56	; 0x38
 801065a:	e000      	b.n	801065e <motor_device_get_data+0x16>
  }
  return NULL;
 801065c:	2300      	movs	r3, #0
}
 801065e:	4618      	mov	r0, r3
 8010660:	370c      	adds	r7, #12
 8010662:	46bd      	mov	sp, r7
 8010664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010668:	4770      	bx	lr

0801066a <motor_device_set_current>:

int32_t motor_device_set_current(motor_device_t motor_dev, int16_t current) {
 801066a:	b480      	push	{r7}
 801066c:	b083      	sub	sp, #12
 801066e:	af00      	add	r7, sp, #0
 8010670:	6078      	str	r0, [r7, #4]
 8010672:	460b      	mov	r3, r1
 8010674:	807b      	strh	r3, [r7, #2]

  if (motor_dev != NULL) {
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	2b00      	cmp	r3, #0
 801067a:	d005      	beq.n	8010688 <motor_device_set_current+0x1e>
    motor_dev->current = current;
 801067c:	687b      	ldr	r3, [r7, #4]
 801067e:	887a      	ldrh	r2, [r7, #2]
 8010680:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    return RM_OK;
 8010684:	2300      	movs	r3, #0
 8010686:	e001      	b.n	801068c <motor_device_set_current+0x22>
  }
  return -RM_ERROR;
 8010688:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801068c:	4618      	mov	r0, r3
 801068e:	370c      	adds	r7, #12
 8010690:	46bd      	mov	sp, r7
 8010692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010696:	4770      	bx	lr

08010698 <motor_device_find_by_canid>:

motor_device_t motor_device_find_by_canid(enum device_can can,
                                          uint16_t can_id) {
 8010698:	b590      	push	{r4, r7, lr}
 801069a:	b08b      	sub	sp, #44	; 0x2c
 801069c:	af00      	add	r7, sp, #0
 801069e:	4603      	mov	r3, r0
 80106a0:	460a      	mov	r2, r1
 80106a2:	71fb      	strb	r3, [r7, #7]
 80106a4:	4613      	mov	r3, r2
 80106a6:	80bb      	strh	r3, [r7, #4]
  struct object *object;
  list_t *node = NULL;
 80106a8:	2300      	movs	r3, #0
 80106aa:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80106ac:	f3ef 8310 	mrs	r3, PRIMASK
 80106b0:	617b      	str	r3, [r7, #20]
  return(result);
 80106b2:	697b      	ldr	r3, [r7, #20]
  enum device_type type;

  var_cpu_sr();

  /* enter critical */
  enter_critical();
 80106b4:	461c      	mov	r4, r3
  __ASM volatile ("cpsid i" : : : "memory");
 80106b6:	b672      	cpsid	i
}
 80106b8:	bf00      	nop

  /* try to find device object */
  information = object_get_information(Object_Class_Device);
 80106ba:	2000      	movs	r0, #0
 80106bc:	f000 fd1e 	bl	80110fc <object_get_information>
 80106c0:	6238      	str	r0, [r7, #32]

  for (node = information->object_list.next;
 80106c2:	6a3b      	ldr	r3, [r7, #32]
 80106c4:	685b      	ldr	r3, [r3, #4]
 80106c6:	627b      	str	r3, [r7, #36]	; 0x24
 80106c8:	e020      	b.n	801070c <motor_device_find_by_canid+0x74>
       node != &(information->object_list); node = node->next) {
    object = list_entry(node, struct object, list);
 80106ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106cc:	3b24      	subs	r3, #36	; 0x24
 80106ce:	61fb      	str	r3, [r7, #28]

    type = (enum device_type)(((device_t)object)->type);
 80106d0:	69fb      	ldr	r3, [r7, #28]
 80106d2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80106d6:	76fb      	strb	r3, [r7, #27]

    if (type != Device_Class_Motor) {
 80106d8:	7efb      	ldrb	r3, [r7, #27]
 80106da:	2b00      	cmp	r3, #0
 80106dc:	d112      	bne.n	8010704 <motor_device_find_by_canid+0x6c>
      continue;
    } else if ((((motor_device_t)object)->can_id == can_id) &&
 80106de:	69fb      	ldr	r3, [r7, #28]
 80106e0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80106e4:	88ba      	ldrh	r2, [r7, #4]
 80106e6:	429a      	cmp	r2, r3
 80106e8:	d10d      	bne.n	8010706 <motor_device_find_by_canid+0x6e>
               (((motor_device_t)object)->can_periph == can)) {
 80106ea:	69fb      	ldr	r3, [r7, #28]
 80106ec:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
    } else if ((((motor_device_t)object)->can_id == can_id) &&
 80106f0:	79fa      	ldrb	r2, [r7, #7]
 80106f2:	429a      	cmp	r2, r3
 80106f4:	d107      	bne.n	8010706 <motor_device_find_by_canid+0x6e>
 80106f6:	613c      	str	r4, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80106f8:	693b      	ldr	r3, [r7, #16]
 80106fa:	f383 8810 	msr	PRIMASK, r3
}
 80106fe:	bf00      	nop
      /* leave critical */
      exit_critical();
      return (motor_device_t)object;
 8010700:	69fb      	ldr	r3, [r7, #28]
 8010702:	e00e      	b.n	8010722 <motor_device_find_by_canid+0x8a>
      continue;
 8010704:	bf00      	nop
       node != &(information->object_list); node = node->next) {
 8010706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010708:	681b      	ldr	r3, [r3, #0]
 801070a:	627b      	str	r3, [r7, #36]	; 0x24
 801070c:	6a3b      	ldr	r3, [r7, #32]
 801070e:	3304      	adds	r3, #4
 8010710:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010712:	429a      	cmp	r2, r3
 8010714:	d1d9      	bne.n	80106ca <motor_device_find_by_canid+0x32>
 8010716:	60fc      	str	r4, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010718:	68fb      	ldr	r3, [r7, #12]
 801071a:	f383 8810 	msr	PRIMASK, r3
}
 801071e:	bf00      	nop

  /* leave critical */
  exit_critical();

  /* not found */
  return NULL;
 8010720:	2300      	movs	r3, #0
}
 8010722:	4618      	mov	r0, r3
 8010724:	372c      	adds	r7, #44	; 0x2c
 8010726:	46bd      	mov	sp, r7
 8010728:	bd90      	pop	{r4, r7, pc}
	...

0801072c <motor_device_can_output>:

static uint8_t motor_send_flag[DEVICE_CAN_NUM][2];
static struct can_msg motor_msg[DEVICE_CAN_NUM][2];

int32_t motor_device_can_output(enum device_can m_can) {
 801072c:	b590      	push	{r4, r7, lr}
 801072e:	b08d      	sub	sp, #52	; 0x34
 8010730:	af02      	add	r7, sp, #8
 8010732:	4603      	mov	r3, r0
 8010734:	71fb      	strb	r3, [r7, #7]
  struct object *object;
  list_t *node = NULL;
 8010736:	2300      	movs	r3, #0
 8010738:	627b      	str	r3, [r7, #36]	; 0x24
  struct object_information *information;
  motor_device_t motor_dev;

  memset(motor_msg, 0, sizeof(motor_msg));
 801073a:	2240      	movs	r2, #64	; 0x40
 801073c:	2100      	movs	r1, #0
 801073e:	4873      	ldr	r0, [pc, #460]	; (801090c <motor_device_can_output+0x1e0>)
 8010740:	f001 f8cf 	bl	80118e2 <memset>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8010744:	f3ef 8310 	mrs	r3, PRIMASK
 8010748:	613b      	str	r3, [r7, #16]
  return(result);
 801074a:	693b      	ldr	r3, [r7, #16]

  var_cpu_sr();

  /* enter critical */
  enter_critical();
 801074c:	461c      	mov	r4, r3
  __ASM volatile ("cpsid i" : : : "memory");
 801074e:	b672      	cpsid	i
}
 8010750:	bf00      	nop

  /* try to find device object */
  information = object_get_information(Object_Class_Device);
 8010752:	2000      	movs	r0, #0
 8010754:	f000 fcd2 	bl	80110fc <object_get_information>
 8010758:	61f8      	str	r0, [r7, #28]

  for (node = information->object_list.next;
 801075a:	69fb      	ldr	r3, [r7, #28]
 801075c:	685b      	ldr	r3, [r3, #4]
 801075e:	627b      	str	r3, [r7, #36]	; 0x24
 8010760:	e098      	b.n	8010894 <motor_device_can_output+0x168>
       node != &(information->object_list); node = node->next) {
    object = list_entry(node, struct object, list);
 8010762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010764:	3b24      	subs	r3, #36	; 0x24
 8010766:	61bb      	str	r3, [r7, #24]
    motor_dev = (motor_device_t)object;
 8010768:	69bb      	ldr	r3, [r7, #24]
 801076a:	617b      	str	r3, [r7, #20]
    if (motor_dev->parent.type == Device_Class_Motor) {
 801076c:	697b      	ldr	r3, [r7, #20]
 801076e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8010772:	2b00      	cmp	r3, #0
 8010774:	f040 808b 	bne.w	801088e <motor_device_can_output+0x162>
      if (((motor_device_t)object)->can_id < 0x205) {
 8010778:	69bb      	ldr	r3, [r7, #24]
 801077a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 801077e:	f5b3 7f01 	cmp.w	r3, #516	; 0x204
 8010782:	d841      	bhi.n	8010808 <motor_device_can_output+0xdc>
        motor_msg[motor_dev->can_periph][0].id = 0x200;
 8010784:	697b      	ldr	r3, [r7, #20]
 8010786:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 801078a:	4a60      	ldr	r2, [pc, #384]	; (801090c <motor_device_can_output+0x1e0>)
 801078c:	015b      	lsls	r3, r3, #5
 801078e:	441a      	add	r2, r3
 8010790:	6813      	ldr	r3, [r2, #0]
 8010792:	f44f 7100 	mov.w	r1, #512	; 0x200
 8010796:	f361 031c 	bfi	r3, r1, #0, #29
 801079a:	6013      	str	r3, [r2, #0]
        motor_msg[motor_dev->can_periph][0]
            .data[(motor_dev->can_id - 0x201) * 2] = motor_dev->current >> 8;
 801079c:	697b      	ldr	r3, [r7, #20]
 801079e:	f9b3 305e 	ldrsh.w	r3, [r3, #94]	; 0x5e
 80107a2:	121b      	asrs	r3, r3, #8
 80107a4:	b219      	sxth	r1, r3
        motor_msg[motor_dev->can_periph][0]
 80107a6:	697b      	ldr	r3, [r7, #20]
 80107a8:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80107ac:	461a      	mov	r2, r3
            .data[(motor_dev->can_id - 0x201) * 2] = motor_dev->current >> 8;
 80107ae:	697b      	ldr	r3, [r7, #20]
 80107b0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80107b4:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 80107b8:	005b      	lsls	r3, r3, #1
 80107ba:	b2c8      	uxtb	r0, r1
 80107bc:	4953      	ldr	r1, [pc, #332]	; (801090c <motor_device_can_output+0x1e0>)
 80107be:	0152      	lsls	r2, r2, #5
 80107c0:	440a      	add	r2, r1
 80107c2:	4413      	add	r3, r2
 80107c4:	3308      	adds	r3, #8
 80107c6:	4602      	mov	r2, r0
 80107c8:	701a      	strb	r2, [r3, #0]
        motor_msg[motor_dev->can_periph][0]
            .data[(motor_dev->can_id - 0x201) * 2 + 1] = motor_dev->current;
 80107ca:	697b      	ldr	r3, [r7, #20]
 80107cc:	f9b3 105e 	ldrsh.w	r1, [r3, #94]	; 0x5e
        motor_msg[motor_dev->can_periph][0]
 80107d0:	697b      	ldr	r3, [r7, #20]
 80107d2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80107d6:	461a      	mov	r2, r3
            .data[(motor_dev->can_id - 0x201) * 2 + 1] = motor_dev->current;
 80107d8:	697b      	ldr	r3, [r7, #20]
 80107da:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80107de:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 80107e2:	005b      	lsls	r3, r3, #1
 80107e4:	3301      	adds	r3, #1
 80107e6:	b2c8      	uxtb	r0, r1
 80107e8:	4948      	ldr	r1, [pc, #288]	; (801090c <motor_device_can_output+0x1e0>)
 80107ea:	0152      	lsls	r2, r2, #5
 80107ec:	440a      	add	r2, r1
 80107ee:	4413      	add	r3, r2
 80107f0:	3308      	adds	r3, #8
 80107f2:	4602      	mov	r2, r0
 80107f4:	701a      	strb	r2, [r3, #0]
        motor_send_flag[motor_dev->can_periph][0] = 1;
 80107f6:	697b      	ldr	r3, [r7, #20]
 80107f8:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80107fc:	461a      	mov	r2, r3
 80107fe:	4b44      	ldr	r3, [pc, #272]	; (8010910 <motor_device_can_output+0x1e4>)
 8010800:	2101      	movs	r1, #1
 8010802:	f803 1012 	strb.w	r1, [r3, r2, lsl #1]
 8010806:	e042      	b.n	801088e <motor_device_can_output+0x162>
      } else {
        motor_msg[motor_dev->can_periph][1].id = 0x1FF;
 8010808:	697b      	ldr	r3, [r7, #20]
 801080a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 801080e:	4a3f      	ldr	r2, [pc, #252]	; (801090c <motor_device_can_output+0x1e0>)
 8010810:	015b      	lsls	r3, r3, #5
 8010812:	4413      	add	r3, r2
 8010814:	f103 0210 	add.w	r2, r3, #16
 8010818:	6813      	ldr	r3, [r2, #0]
 801081a:	f240 11ff 	movw	r1, #511	; 0x1ff
 801081e:	f361 031c 	bfi	r3, r1, #0, #29
 8010822:	6013      	str	r3, [r2, #0]
        motor_msg[motor_dev->can_periph][1]
            .data[(motor_dev->can_id - 0x205) * 2] = motor_dev->current >> 8;
 8010824:	697b      	ldr	r3, [r7, #20]
 8010826:	f9b3 305e 	ldrsh.w	r3, [r3, #94]	; 0x5e
 801082a:	121b      	asrs	r3, r3, #8
 801082c:	b219      	sxth	r1, r3
        motor_msg[motor_dev->can_periph][1]
 801082e:	697b      	ldr	r3, [r7, #20]
 8010830:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8010834:	461a      	mov	r2, r3
            .data[(motor_dev->can_id - 0x205) * 2] = motor_dev->current >> 8;
 8010836:	697b      	ldr	r3, [r7, #20]
 8010838:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 801083c:	f2a3 2305 	subw	r3, r3, #517	; 0x205
 8010840:	005b      	lsls	r3, r3, #1
 8010842:	b2c8      	uxtb	r0, r1
 8010844:	4931      	ldr	r1, [pc, #196]	; (801090c <motor_device_can_output+0x1e0>)
 8010846:	0152      	lsls	r2, r2, #5
 8010848:	440a      	add	r2, r1
 801084a:	4413      	add	r3, r2
 801084c:	3318      	adds	r3, #24
 801084e:	4602      	mov	r2, r0
 8010850:	701a      	strb	r2, [r3, #0]
        motor_msg[motor_dev->can_periph][1]
            .data[(motor_dev->can_id - 0x205) * 2 + 1] = motor_dev->current;
 8010852:	697b      	ldr	r3, [r7, #20]
 8010854:	f9b3 105e 	ldrsh.w	r1, [r3, #94]	; 0x5e
        motor_msg[motor_dev->can_periph][1]
 8010858:	697b      	ldr	r3, [r7, #20]
 801085a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 801085e:	461a      	mov	r2, r3
            .data[(motor_dev->can_id - 0x205) * 2 + 1] = motor_dev->current;
 8010860:	697b      	ldr	r3, [r7, #20]
 8010862:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8010866:	f2a3 2305 	subw	r3, r3, #517	; 0x205
 801086a:	005b      	lsls	r3, r3, #1
 801086c:	3301      	adds	r3, #1
 801086e:	b2c8      	uxtb	r0, r1
 8010870:	4926      	ldr	r1, [pc, #152]	; (801090c <motor_device_can_output+0x1e0>)
 8010872:	0152      	lsls	r2, r2, #5
 8010874:	440a      	add	r2, r1
 8010876:	4413      	add	r3, r2
 8010878:	3318      	adds	r3, #24
 801087a:	4602      	mov	r2, r0
 801087c:	701a      	strb	r2, [r3, #0]
        motor_send_flag[motor_dev->can_periph][1] = 1;
 801087e:	697b      	ldr	r3, [r7, #20]
 8010880:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8010884:	4a22      	ldr	r2, [pc, #136]	; (8010910 <motor_device_can_output+0x1e4>)
 8010886:	005b      	lsls	r3, r3, #1
 8010888:	4413      	add	r3, r2
 801088a:	2201      	movs	r2, #1
 801088c:	705a      	strb	r2, [r3, #1]
       node != &(information->object_list); node = node->next) {
 801088e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010890:	681b      	ldr	r3, [r3, #0]
 8010892:	627b      	str	r3, [r7, #36]	; 0x24
 8010894:	69fb      	ldr	r3, [r7, #28]
 8010896:	3304      	adds	r3, #4
 8010898:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801089a:	429a      	cmp	r2, r3
 801089c:	f47f af61 	bne.w	8010762 <motor_device_can_output+0x36>
 80108a0:	60fc      	str	r4, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80108a2:	68fb      	ldr	r3, [r7, #12]
 80108a4:	f383 8810 	msr	PRIMASK, r3
}
 80108a8:	bf00      	nop
  }

  /* leave critical */
  exit_critical();

  for (int j = 0; j < 2; j++) {
 80108aa:	2300      	movs	r3, #0
 80108ac:	623b      	str	r3, [r7, #32]
 80108ae:	e025      	b.n	80108fc <motor_device_can_output+0x1d0>
    if (motor_send_flag[m_can][j] == 1) {
 80108b0:	79fb      	ldrb	r3, [r7, #7]
 80108b2:	4a17      	ldr	r2, [pc, #92]	; (8010910 <motor_device_can_output+0x1e4>)
 80108b4:	005b      	lsls	r3, r3, #1
 80108b6:	441a      	add	r2, r3
 80108b8:	6a3b      	ldr	r3, [r7, #32]
 80108ba:	4413      	add	r3, r2
 80108bc:	781b      	ldrb	r3, [r3, #0]
 80108be:	2b01      	cmp	r3, #1
 80108c0:	d119      	bne.n	80108f6 <motor_device_can_output+0x1ca>
      if (motor_can_send != NULL)
 80108c2:	4b14      	ldr	r3, [pc, #80]	; (8010914 <motor_device_can_output+0x1e8>)
 80108c4:	681b      	ldr	r3, [r3, #0]
 80108c6:	2b00      	cmp	r3, #0
 80108c8:	d00d      	beq.n	80108e6 <motor_device_can_output+0x1ba>
        motor_can_send(m_can, motor_msg[m_can][j]);
 80108ca:	4b12      	ldr	r3, [pc, #72]	; (8010914 <motor_device_can_output+0x1e8>)
 80108cc:	681c      	ldr	r4, [r3, #0]
 80108ce:	79fb      	ldrb	r3, [r7, #7]
 80108d0:	490e      	ldr	r1, [pc, #56]	; (801090c <motor_device_can_output+0x1e0>)
 80108d2:	005a      	lsls	r2, r3, #1
 80108d4:	6a3b      	ldr	r3, [r7, #32]
 80108d6:	4413      	add	r3, r2
 80108d8:	011b      	lsls	r3, r3, #4
 80108da:	440b      	add	r3, r1
 80108dc:	79f8      	ldrb	r0, [r7, #7]
 80108de:	68da      	ldr	r2, [r3, #12]
 80108e0:	9200      	str	r2, [sp, #0]
 80108e2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80108e4:	47a0      	blx	r4
      motor_send_flag[m_can][j] = 0;
 80108e6:	79fb      	ldrb	r3, [r7, #7]
 80108e8:	4a09      	ldr	r2, [pc, #36]	; (8010910 <motor_device_can_output+0x1e4>)
 80108ea:	005b      	lsls	r3, r3, #1
 80108ec:	441a      	add	r2, r3
 80108ee:	6a3b      	ldr	r3, [r7, #32]
 80108f0:	4413      	add	r3, r2
 80108f2:	2200      	movs	r2, #0
 80108f4:	701a      	strb	r2, [r3, #0]
  for (int j = 0; j < 2; j++) {
 80108f6:	6a3b      	ldr	r3, [r7, #32]
 80108f8:	3301      	adds	r3, #1
 80108fa:	623b      	str	r3, [r7, #32]
 80108fc:	6a3b      	ldr	r3, [r7, #32]
 80108fe:	2b01      	cmp	r3, #1
 8010900:	ddd6      	ble.n	80108b0 <motor_device_can_output+0x184>
    }
  }
  /* not found */
  return RM_OK;
 8010902:	2300      	movs	r3, #0
}
 8010904:	4618      	mov	r0, r3
 8010906:	372c      	adds	r7, #44	; 0x2c
 8010908:	46bd      	mov	sp, r7
 801090a:	bd90      	pop	{r4, r7, pc}
 801090c:	20011d98 	.word	0x20011d98
 8010910:	20011d94 	.word	0x20011d94
 8010914:	20011d90 	.word	0x20011d90

08010918 <motor_device_data_update>:

int32_t motor_device_data_update(enum device_can can, uint16_t can_id,
                                 uint8_t can_rx_data[]) {
 8010918:	b580      	push	{r7, lr}
 801091a:	b084      	sub	sp, #16
 801091c:	af00      	add	r7, sp, #0
 801091e:	4603      	mov	r3, r0
 8010920:	603a      	str	r2, [r7, #0]
 8010922:	71fb      	strb	r3, [r7, #7]
 8010924:	460b      	mov	r3, r1
 8010926:	80bb      	strh	r3, [r7, #4]
  motor_device_t motor_dev;
  motor_dev = motor_device_find_by_canid(can, can_id);
 8010928:	88ba      	ldrh	r2, [r7, #4]
 801092a:	79fb      	ldrb	r3, [r7, #7]
 801092c:	4611      	mov	r1, r2
 801092e:	4618      	mov	r0, r3
 8010930:	f7ff feb2 	bl	8010698 <motor_device_find_by_canid>
 8010934:	60f8      	str	r0, [r7, #12]
  if (motor_dev != NULL) {
 8010936:	68fb      	ldr	r3, [r7, #12]
 8010938:	2b00      	cmp	r3, #0
 801093a:	d006      	beq.n	801094a <motor_device_data_update+0x32>
    motor_dev->get_data(motor_dev, can_rx_data);
 801093c:	68fb      	ldr	r3, [r7, #12]
 801093e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010940:	6839      	ldr	r1, [r7, #0]
 8010942:	68f8      	ldr	r0, [r7, #12]
 8010944:	4798      	blx	r3
    return RM_OK;
 8010946:	2300      	movs	r3, #0
 8010948:	e001      	b.n	801094e <motor_device_data_update+0x36>
  }
  return -RM_UNREGISTERED;
 801094a:	f06f 0303 	mvn.w	r3, #3
}
 801094e:	4618      	mov	r0, r3
 8010950:	3710      	adds	r7, #16
 8010952:	46bd      	mov	sp, r7
 8010954:	bd80      	pop	{r7, pc}
	...

08010958 <get_encoder_data>:

static void get_encoder_data(motor_device_t motor, uint8_t can_rx_data[]) {
 8010958:	b580      	push	{r7, lr}
 801095a:	b084      	sub	sp, #16
 801095c:	af00      	add	r7, sp, #0
 801095e:	6078      	str	r0, [r7, #4]
 8010960:	6039      	str	r1, [r7, #0]
  motor_data_t ptr = &(motor->data);
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	3338      	adds	r3, #56	; 0x38
 8010966:	60fb      	str	r3, [r7, #12]
  ptr->msg_cnt++;
 8010968:	68fb      	ldr	r3, [r7, #12]
 801096a:	699b      	ldr	r3, [r3, #24]
 801096c:	1c5a      	adds	r2, r3, #1
 801096e:	68fb      	ldr	r3, [r7, #12]
 8010970:	619a      	str	r2, [r3, #24]

  if (ptr->msg_cnt > 50) {
 8010972:	68fb      	ldr	r3, [r7, #12]
 8010974:	699b      	ldr	r3, [r3, #24]
 8010976:	2b32      	cmp	r3, #50	; 0x32
 8010978:	d903      	bls.n	8010982 <get_encoder_data+0x2a>
    motor->init_offset_f = 0;
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	2200      	movs	r2, #0
 801097e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  }

  if (motor->init_offset_f == 1) {
 8010982:	687b      	ldr	r3, [r7, #4]
 8010984:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010988:	2b01      	cmp	r3, #1
 801098a:	d104      	bne.n	8010996 <get_encoder_data+0x3e>
    get_motor_offset(ptr, can_rx_data);
 801098c:	6839      	ldr	r1, [r7, #0]
 801098e:	68f8      	ldr	r0, [r7, #12]
 8010990:	f000 f886 	bl	8010aa0 <get_motor_offset>
    return;
 8010994:	e07f      	b.n	8010a96 <get_encoder_data+0x13e>
  }

  ptr->last_ecd = ptr->ecd;
 8010996:	68fb      	ldr	r3, [r7, #12]
 8010998:	881a      	ldrh	r2, [r3, #0]
 801099a:	68fb      	ldr	r3, [r7, #12]
 801099c:	805a      	strh	r2, [r3, #2]
  ptr->ecd = (uint16_t)(can_rx_data[0] << 8 | can_rx_data[1]);
 801099e:	683b      	ldr	r3, [r7, #0]
 80109a0:	781b      	ldrb	r3, [r3, #0]
 80109a2:	021b      	lsls	r3, r3, #8
 80109a4:	b21a      	sxth	r2, r3
 80109a6:	683b      	ldr	r3, [r7, #0]
 80109a8:	3301      	adds	r3, #1
 80109aa:	781b      	ldrb	r3, [r3, #0]
 80109ac:	b21b      	sxth	r3, r3
 80109ae:	4313      	orrs	r3, r2
 80109b0:	b21b      	sxth	r3, r3
 80109b2:	b29a      	uxth	r2, r3
 80109b4:	68fb      	ldr	r3, [r7, #12]
 80109b6:	801a      	strh	r2, [r3, #0]

  if (ptr->ecd - ptr->last_ecd > 4096) {
 80109b8:	68fb      	ldr	r3, [r7, #12]
 80109ba:	881b      	ldrh	r3, [r3, #0]
 80109bc:	461a      	mov	r2, r3
 80109be:	68fb      	ldr	r3, [r7, #12]
 80109c0:	885b      	ldrh	r3, [r3, #2]
 80109c2:	1ad3      	subs	r3, r2, r3
 80109c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80109c8:	dd0f      	ble.n	80109ea <get_encoder_data+0x92>
    ptr->round_cnt--;
 80109ca:	68fb      	ldr	r3, [r7, #12]
 80109cc:	689b      	ldr	r3, [r3, #8]
 80109ce:	1e5a      	subs	r2, r3, #1
 80109d0:	68fb      	ldr	r3, [r7, #12]
 80109d2:	609a      	str	r2, [r3, #8]
    ptr->ecd_raw_rate = ptr->ecd - ptr->last_ecd - 8192;
 80109d4:	68fb      	ldr	r3, [r7, #12]
 80109d6:	881b      	ldrh	r3, [r3, #0]
 80109d8:	461a      	mov	r2, r3
 80109da:	68fb      	ldr	r3, [r7, #12]
 80109dc:	885b      	ldrh	r3, [r3, #2]
 80109de:	1ad3      	subs	r3, r2, r3
 80109e0:	f5a3 5200 	sub.w	r2, r3, #8192	; 0x2000
 80109e4:	68fb      	ldr	r3, [r7, #12]
 80109e6:	615a      	str	r2, [r3, #20]
 80109e8:	e020      	b.n	8010a2c <get_encoder_data+0xd4>
  } else if (ptr->ecd - ptr->last_ecd < -4096) {
 80109ea:	68fb      	ldr	r3, [r7, #12]
 80109ec:	881b      	ldrh	r3, [r3, #0]
 80109ee:	461a      	mov	r2, r3
 80109f0:	68fb      	ldr	r3, [r7, #12]
 80109f2:	885b      	ldrh	r3, [r3, #2]
 80109f4:	1ad3      	subs	r3, r2, r3
 80109f6:	f513 5f80 	cmn.w	r3, #4096	; 0x1000
 80109fa:	da0f      	bge.n	8010a1c <get_encoder_data+0xc4>
    ptr->round_cnt++;
 80109fc:	68fb      	ldr	r3, [r7, #12]
 80109fe:	689b      	ldr	r3, [r3, #8]
 8010a00:	1c5a      	adds	r2, r3, #1
 8010a02:	68fb      	ldr	r3, [r7, #12]
 8010a04:	609a      	str	r2, [r3, #8]
    ptr->ecd_raw_rate = ptr->ecd - ptr->last_ecd + 8192;
 8010a06:	68fb      	ldr	r3, [r7, #12]
 8010a08:	881b      	ldrh	r3, [r3, #0]
 8010a0a:	461a      	mov	r2, r3
 8010a0c:	68fb      	ldr	r3, [r7, #12]
 8010a0e:	885b      	ldrh	r3, [r3, #2]
 8010a10:	1ad3      	subs	r3, r2, r3
 8010a12:	f503 5200 	add.w	r2, r3, #8192	; 0x2000
 8010a16:	68fb      	ldr	r3, [r7, #12]
 8010a18:	615a      	str	r2, [r3, #20]
 8010a1a:	e007      	b.n	8010a2c <get_encoder_data+0xd4>
  } else {
    ptr->ecd_raw_rate = ptr->ecd - ptr->last_ecd;
 8010a1c:	68fb      	ldr	r3, [r7, #12]
 8010a1e:	881b      	ldrh	r3, [r3, #0]
 8010a20:	461a      	mov	r2, r3
 8010a22:	68fb      	ldr	r3, [r7, #12]
 8010a24:	885b      	ldrh	r3, [r3, #2]
 8010a26:	1ad2      	subs	r2, r2, r3
 8010a28:	68fb      	ldr	r3, [r7, #12]
 8010a2a:	615a      	str	r2, [r3, #20]
  }

  ptr->total_ecd = ptr->round_cnt * 8192 + ptr->ecd - ptr->offset_ecd;
 8010a2c:	68fb      	ldr	r3, [r7, #12]
 8010a2e:	689b      	ldr	r3, [r3, #8]
 8010a30:	035b      	lsls	r3, r3, #13
 8010a32:	68fa      	ldr	r2, [r7, #12]
 8010a34:	8812      	ldrh	r2, [r2, #0]
 8010a36:	4413      	add	r3, r2
 8010a38:	68fa      	ldr	r2, [r7, #12]
 8010a3a:	8b92      	ldrh	r2, [r2, #28]
 8010a3c:	1a9a      	subs	r2, r3, r2
 8010a3e:	68fb      	ldr	r3, [r7, #12]
 8010a40:	60da      	str	r2, [r3, #12]
  /* total angle, unit is degree */
  ptr->total_angle = ptr->total_ecd / ENCODER_ANGLE_RATIO;
 8010a42:	68fb      	ldr	r3, [r7, #12]
 8010a44:	68db      	ldr	r3, [r3, #12]
 8010a46:	ee07 3a90 	vmov	s15, r3
 8010a4a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8010a4e:	eddf 6a13 	vldr	s13, [pc, #76]	; 8010a9c <get_encoder_data+0x144>
 8010a52:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8010a56:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010a5a:	ee17 2a90 	vmov	r2, s15
 8010a5e:	68fb      	ldr	r3, [r7, #12]
 8010a60:	611a      	str	r2, [r3, #16]

  ptr->speed_rpm = (int16_t)(can_rx_data[2] << 8 | can_rx_data[3]);
 8010a62:	683b      	ldr	r3, [r7, #0]
 8010a64:	3302      	adds	r3, #2
 8010a66:	781b      	ldrb	r3, [r3, #0]
 8010a68:	021b      	lsls	r3, r3, #8
 8010a6a:	b21a      	sxth	r2, r3
 8010a6c:	683b      	ldr	r3, [r7, #0]
 8010a6e:	3303      	adds	r3, #3
 8010a70:	781b      	ldrb	r3, [r3, #0]
 8010a72:	b21b      	sxth	r3, r3
 8010a74:	4313      	orrs	r3, r2
 8010a76:	b21a      	sxth	r2, r3
 8010a78:	68fb      	ldr	r3, [r7, #12]
 8010a7a:	809a      	strh	r2, [r3, #4]
  ptr->given_current = (int16_t)(can_rx_data[4] << 8 | can_rx_data[5]);
 8010a7c:	683b      	ldr	r3, [r7, #0]
 8010a7e:	3304      	adds	r3, #4
 8010a80:	781b      	ldrb	r3, [r3, #0]
 8010a82:	021b      	lsls	r3, r3, #8
 8010a84:	b21a      	sxth	r2, r3
 8010a86:	683b      	ldr	r3, [r7, #0]
 8010a88:	3305      	adds	r3, #5
 8010a8a:	781b      	ldrb	r3, [r3, #0]
 8010a8c:	b21b      	sxth	r3, r3
 8010a8e:	4313      	orrs	r3, r2
 8010a90:	b21a      	sxth	r2, r3
 8010a92:	68fb      	ldr	r3, [r7, #12]
 8010a94:	80da      	strh	r2, [r3, #6]
}
 8010a96:	3710      	adds	r7, #16
 8010a98:	46bd      	mov	sp, r7
 8010a9a:	bd80      	pop	{r7, pc}
 8010a9c:	41b60b61 	.word	0x41b60b61

08010aa0 <get_motor_offset>:

static void get_motor_offset(motor_data_t ptr, uint8_t can_rx_data[]) {
 8010aa0:	b480      	push	{r7}
 8010aa2:	b083      	sub	sp, #12
 8010aa4:	af00      	add	r7, sp, #0
 8010aa6:	6078      	str	r0, [r7, #4]
 8010aa8:	6039      	str	r1, [r7, #0]
  ptr->ecd = (uint16_t)(can_rx_data[0] << 8 | can_rx_data[1]);
 8010aaa:	683b      	ldr	r3, [r7, #0]
 8010aac:	781b      	ldrb	r3, [r3, #0]
 8010aae:	021b      	lsls	r3, r3, #8
 8010ab0:	b21a      	sxth	r2, r3
 8010ab2:	683b      	ldr	r3, [r7, #0]
 8010ab4:	3301      	adds	r3, #1
 8010ab6:	781b      	ldrb	r3, [r3, #0]
 8010ab8:	b21b      	sxth	r3, r3
 8010aba:	4313      	orrs	r3, r2
 8010abc:	b21b      	sxth	r3, r3
 8010abe:	b29a      	uxth	r2, r3
 8010ac0:	687b      	ldr	r3, [r7, #4]
 8010ac2:	801a      	strh	r2, [r3, #0]
  ptr->offset_ecd = ptr->ecd;
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	881a      	ldrh	r2, [r3, #0]
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	839a      	strh	r2, [r3, #28]
}
 8010acc:	bf00      	nop
 8010ace:	370c      	adds	r7, #12
 8010ad0:	46bd      	mov	sp, r7
 8010ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ad6:	4770      	bx	lr

08010ad8 <chassis_pid_register>:
#include "chassis.h"

static int32_t motor_pid_input_convert(struct controller *ctrl, void *input);

int32_t chassis_pid_register(struct chassis *chassis, const char *name,
                             enum device_can can) {
 8010ad8:	b590      	push	{r4, r7, lr}
 8010ada:	b0ad      	sub	sp, #180	; 0xb4
 8010adc:	af02      	add	r7, sp, #8
 8010ade:	60f8      	str	r0, [r7, #12]
 8010ae0:	60b9      	str	r1, [r7, #8]
 8010ae2:	4613      	mov	r3, r2
 8010ae4:	71fb      	strb	r3, [r7, #7]
  char motor_name[4][OBJECT_NAME_MAX_LEN] = {0};
 8010ae6:	f107 0314 	add.w	r3, r7, #20
 8010aea:	2280      	movs	r2, #128	; 0x80
 8010aec:	2100      	movs	r1, #0
 8010aee:	4618      	mov	r0, r3
 8010af0:	f000 fef7 	bl	80118e2 <memset>
  uint8_t name_len;

  int32_t err;

  if (chassis == NULL)
 8010af4:	68fb      	ldr	r3, [r7, #12]
 8010af6:	2b00      	cmp	r3, #0
 8010af8:	d102      	bne.n	8010b00 <chassis_pid_register+0x28>
    return -RM_INVAL;
 8010afa:	f06f 0301 	mvn.w	r3, #1
 8010afe:	e141      	b.n	8010d84 <chassis_pid_register+0x2ac>
  if (chassis_find(name) != NULL)
 8010b00:	68b8      	ldr	r0, [r7, #8]
 8010b02:	f000 fa3e 	bl	8010f82 <chassis_find>
 8010b06:	4603      	mov	r3, r0
 8010b08:	2b00      	cmp	r3, #0
 8010b0a:	d002      	beq.n	8010b12 <chassis_pid_register+0x3a>
    return -RM_EXISTED;
 8010b0c:	f06f 0302 	mvn.w	r3, #2
 8010b10:	e138      	b.n	8010d84 <chassis_pid_register+0x2ac>

  object_init(&(chassis->parent), Object_Class_Chassis, name);
 8010b12:	68fb      	ldr	r3, [r7, #12]
 8010b14:	68ba      	ldr	r2, [r7, #8]
 8010b16:	2103      	movs	r1, #3
 8010b18:	4618      	mov	r0, r3
 8010b1a:	f000 fb19 	bl	8011150 <object_init>

  name_len = strlen(name);
 8010b1e:	68b8      	ldr	r0, [r7, #8]
 8010b20:	f7ef fb66 	bl	80001f0 <strlen>
 8010b24:	4603      	mov	r3, r0
 8010b26:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7

  if (name_len > OBJECT_NAME_MAX_LEN / 2) {
 8010b2a:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8010b2e:	2b10      	cmp	r3, #16
 8010b30:	d902      	bls.n	8010b38 <chassis_pid_register+0x60>
    name_len = OBJECT_NAME_MAX_LEN / 2;
 8010b32:	2310      	movs	r3, #16
 8010b34:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
  }

  for (int i = 0; i < 4; i++) {
 8010b38:	2300      	movs	r3, #0
 8010b3a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8010b3e:	e055      	b.n	8010bec <chassis_pid_register+0x114>
    memcpy(&motor_name[i], name, name_len);
 8010b40:	f107 0214 	add.w	r2, r7, #20
 8010b44:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010b48:	015b      	lsls	r3, r3, #5
 8010b4a:	4413      	add	r3, r2
 8010b4c:	f897 20a7 	ldrb.w	r2, [r7, #167]	; 0xa7
 8010b50:	68b9      	ldr	r1, [r7, #8]
 8010b52:	4618      	mov	r0, r3
 8010b54:	f000 ff50 	bl	80119f8 <memcpy>
    chassis->motor[i].can_periph = can;
 8010b58:	68fa      	ldr	r2, [r7, #12]
 8010b5a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010b5e:	2164      	movs	r1, #100	; 0x64
 8010b60:	fb01 f303 	mul.w	r3, r1, r3
 8010b64:	4413      	add	r3, r2
 8010b66:	33d4      	adds	r3, #212	; 0xd4
 8010b68:	79fa      	ldrb	r2, [r7, #7]
 8010b6a:	701a      	strb	r2, [r3, #0]
    chassis->motor[i].can_id = 0x201 + i;
 8010b6c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010b70:	b29b      	uxth	r3, r3
 8010b72:	f203 2301 	addw	r3, r3, #513	; 0x201
 8010b76:	b298      	uxth	r0, r3
 8010b78:	68fa      	ldr	r2, [r7, #12]
 8010b7a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010b7e:	2164      	movs	r1, #100	; 0x64
 8010b80:	fb01 f303 	mul.w	r3, r1, r3
 8010b84:	4413      	add	r3, r2
 8010b86:	33d6      	adds	r3, #214	; 0xd6
 8010b88:	4602      	mov	r2, r0
 8010b8a:	801a      	strh	r2, [r3, #0]
    chassis->motor[i].init_offset_f = 1;
 8010b8c:	68fa      	ldr	r2, [r7, #12]
 8010b8e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010b92:	2164      	movs	r1, #100	; 0x64
 8010b94:	fb01 f303 	mul.w	r3, r1, r3
 8010b98:	4413      	add	r3, r2
 8010b9a:	33d8      	adds	r3, #216	; 0xd8
 8010b9c:	2201      	movs	r2, #1
 8010b9e:	801a      	strh	r2, [r3, #0]

    chassis->ctrl[i].convert_feedback = motor_pid_input_convert;
 8010ba0:	68f9      	ldr	r1, [r7, #12]
 8010ba2:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8010ba6:	4613      	mov	r3, r2
 8010ba8:	00db      	lsls	r3, r3, #3
 8010baa:	4413      	add	r3, r2
 8010bac:	00db      	lsls	r3, r3, #3
 8010bae:	440b      	add	r3, r1
 8010bb0:	f503 7357 	add.w	r3, r3, #860	; 0x35c
 8010bb4:	4a75      	ldr	r2, [pc, #468]	; (8010d8c <chassis_pid_register+0x2b4>)
 8010bb6:	601a      	str	r2, [r3, #0]
    pid_struct_init(&chassis->motor_pid[i], 15000, 500, 6.5f, 0.1, 0);
 8010bb8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010bbc:	019b      	lsls	r3, r3, #6
 8010bbe:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8010bc2:	68fa      	ldr	r2, [r7, #12]
 8010bc4:	4413      	add	r3, r2
 8010bc6:	3304      	adds	r3, #4
 8010bc8:	ed9f 2a71 	vldr	s4, [pc, #452]	; 8010d90 <chassis_pid_register+0x2b8>
 8010bcc:	eddf 1a71 	vldr	s3, [pc, #452]	; 8010d94 <chassis_pid_register+0x2bc>
 8010bd0:	eeb1 1a0a 	vmov.f32	s2, #26	; 0x40d00000  6.5
 8010bd4:	eddf 0a70 	vldr	s1, [pc, #448]	; 8010d98 <chassis_pid_register+0x2c0>
 8010bd8:	ed9f 0a70 	vldr	s0, [pc, #448]	; 8010d9c <chassis_pid_register+0x2c4>
 8010bdc:	4618      	mov	r0, r3
 8010bde:	f7ff f8b1 	bl	800fd44 <pid_struct_init>
  for (int i = 0; i < 4; i++) {
 8010be2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010be6:	3301      	adds	r3, #1
 8010be8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8010bec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010bf0:	2b03      	cmp	r3, #3
 8010bf2:	dda5      	ble.n	8010b40 <chassis_pid_register+0x68>
  }

  chassis->skid_steer.param.wheel_perimeter = PERIMETER;
 8010bf4:	68fb      	ldr	r3, [r7, #12]
 8010bf6:	4a6a      	ldr	r2, [pc, #424]	; (8010da0 <chassis_pid_register+0x2c8>)
 8010bf8:	62da      	str	r2, [r3, #44]	; 0x2c
  chassis->skid_steer.param.wheeltrack = WHEELTRACK;
 8010bfa:	68fb      	ldr	r3, [r7, #12]
 8010bfc:	4a69      	ldr	r2, [pc, #420]	; (8010da4 <chassis_pid_register+0x2cc>)
 8010bfe:	631a      	str	r2, [r3, #48]	; 0x30
  chassis->skid_steer.param.wheelbase = WHEELBASE;
 8010c00:	68fb      	ldr	r3, [r7, #12]
 8010c02:	4a69      	ldr	r2, [pc, #420]	; (8010da8 <chassis_pid_register+0x2d0>)
 8010c04:	635a      	str	r2, [r3, #52]	; 0x34

  memcpy(&motor_name[0][name_len], "_FR\0", 4);
 8010c06:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8010c0a:	f107 0214 	add.w	r2, r7, #20
 8010c0e:	4413      	add	r3, r2
 8010c10:	2204      	movs	r2, #4
 8010c12:	4966      	ldr	r1, [pc, #408]	; (8010dac <chassis_pid_register+0x2d4>)
 8010c14:	4618      	mov	r0, r3
 8010c16:	f000 feef 	bl	80119f8 <memcpy>
  memcpy(&motor_name[1][name_len], "_FL\0", 4);
 8010c1a:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8010c1e:	f107 0214 	add.w	r2, r7, #20
 8010c22:	3320      	adds	r3, #32
 8010c24:	4413      	add	r3, r2
 8010c26:	2204      	movs	r2, #4
 8010c28:	4961      	ldr	r1, [pc, #388]	; (8010db0 <chassis_pid_register+0x2d8>)
 8010c2a:	4618      	mov	r0, r3
 8010c2c:	f000 fee4 	bl	80119f8 <memcpy>
  memcpy(&motor_name[2][name_len], "_BL\0", 4);
 8010c30:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8010c34:	f107 0214 	add.w	r2, r7, #20
 8010c38:	3340      	adds	r3, #64	; 0x40
 8010c3a:	4413      	add	r3, r2
 8010c3c:	2204      	movs	r2, #4
 8010c3e:	495d      	ldr	r1, [pc, #372]	; (8010db4 <chassis_pid_register+0x2dc>)
 8010c40:	4618      	mov	r0, r3
 8010c42:	f000 fed9 	bl	80119f8 <memcpy>
  memcpy(&motor_name[3][name_len], "_BR\0", 4);
 8010c46:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8010c4a:	f107 0214 	add.w	r2, r7, #20
 8010c4e:	3360      	adds	r3, #96	; 0x60
 8010c50:	4413      	add	r3, r2
 8010c52:	2204      	movs	r2, #4
 8010c54:	4958      	ldr	r1, [pc, #352]	; (8010db8 <chassis_pid_register+0x2e0>)
 8010c56:	4618      	mov	r0, r3
 8010c58:	f000 fece 	bl	80119f8 <memcpy>

  for (int i = 0; i < 4; i++) {
 8010c5c:	2300      	movs	r3, #0
 8010c5e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8010c62:	e01d      	b.n	8010ca0 <chassis_pid_register+0x1c8>
    err = motor_device_register(&(chassis->motor[i]), motor_name[i], 0);
 8010c64:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010c68:	2264      	movs	r2, #100	; 0x64
 8010c6a:	fb02 f303 	mul.w	r3, r2, r3
 8010c6e:	3378      	adds	r3, #120	; 0x78
 8010c70:	68fa      	ldr	r2, [r7, #12]
 8010c72:	4413      	add	r3, r2
 8010c74:	1d18      	adds	r0, r3, #4
 8010c76:	f107 0214 	add.w	r2, r7, #20
 8010c7a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010c7e:	015b      	lsls	r3, r3, #5
 8010c80:	4413      	add	r3, r2
 8010c82:	2200      	movs	r2, #0
 8010c84:	4619      	mov	r1, r3
 8010c86:	f7ff fc83 	bl	8010590 <motor_device_register>
 8010c8a:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
    if (err != RM_OK)
 8010c8e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8010c92:	2b00      	cmp	r3, #0
 8010c94:	d16d      	bne.n	8010d72 <chassis_pid_register+0x29a>
  for (int i = 0; i < 4; i++) {
 8010c96:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010c9a:	3301      	adds	r3, #1
 8010c9c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8010ca0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010ca4:	2b03      	cmp	r3, #3
 8010ca6:	dddd      	ble.n	8010c64 <chassis_pid_register+0x18c>
      goto end;
  }

  memcpy(&motor_name[0][name_len], "_CTLFR\0", 7);
 8010ca8:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8010cac:	f107 0214 	add.w	r2, r7, #20
 8010cb0:	4413      	add	r3, r2
 8010cb2:	2207      	movs	r2, #7
 8010cb4:	4941      	ldr	r1, [pc, #260]	; (8010dbc <chassis_pid_register+0x2e4>)
 8010cb6:	4618      	mov	r0, r3
 8010cb8:	f000 fe9e 	bl	80119f8 <memcpy>
  memcpy(&motor_name[1][name_len], "_CTLFL\0", 7);
 8010cbc:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8010cc0:	f107 0214 	add.w	r2, r7, #20
 8010cc4:	3320      	adds	r3, #32
 8010cc6:	4413      	add	r3, r2
 8010cc8:	2207      	movs	r2, #7
 8010cca:	493d      	ldr	r1, [pc, #244]	; (8010dc0 <chassis_pid_register+0x2e8>)
 8010ccc:	4618      	mov	r0, r3
 8010cce:	f000 fe93 	bl	80119f8 <memcpy>
  memcpy(&motor_name[2][name_len], "_CTLBL\0", 7);
 8010cd2:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8010cd6:	f107 0214 	add.w	r2, r7, #20
 8010cda:	3340      	adds	r3, #64	; 0x40
 8010cdc:	4413      	add	r3, r2
 8010cde:	2207      	movs	r2, #7
 8010ce0:	4938      	ldr	r1, [pc, #224]	; (8010dc4 <chassis_pid_register+0x2ec>)
 8010ce2:	4618      	mov	r0, r3
 8010ce4:	f000 fe88 	bl	80119f8 <memcpy>
  memcpy(&motor_name[3][name_len], "_CTLBR\0", 7);
 8010ce8:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8010cec:	f107 0214 	add.w	r2, r7, #20
 8010cf0:	3360      	adds	r3, #96	; 0x60
 8010cf2:	4413      	add	r3, r2
 8010cf4:	2207      	movs	r2, #7
 8010cf6:	4934      	ldr	r1, [pc, #208]	; (8010dc8 <chassis_pid_register+0x2f0>)
 8010cf8:	4618      	mov	r0, r3
 8010cfa:	f000 fe7d 	bl	80119f8 <memcpy>

  for (int i = 0; i < 4; i++) {
 8010cfe:	2300      	movs	r3, #0
 8010d00:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8010d04:	e02f      	b.n	8010d66 <chassis_pid_register+0x28e>
    err = pid_controller_register(&(chassis->ctrl[i]), motor_name[i],
 8010d06:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8010d0a:	4613      	mov	r3, r2
 8010d0c:	00db      	lsls	r3, r3, #3
 8010d0e:	4413      	add	r3, r2
 8010d10:	00db      	lsls	r3, r3, #3
 8010d12:	f503 7346 	add.w	r3, r3, #792	; 0x318
 8010d16:	68fa      	ldr	r2, [r7, #12]
 8010d18:	4413      	add	r3, r2
 8010d1a:	1d18      	adds	r0, r3, #4
 8010d1c:	f107 0214 	add.w	r2, r7, #20
 8010d20:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010d24:	015b      	lsls	r3, r3, #5
 8010d26:	18d1      	adds	r1, r2, r3
 8010d28:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010d2c:	019b      	lsls	r3, r3, #6
 8010d2e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8010d32:	68fa      	ldr	r2, [r7, #12]
 8010d34:	4413      	add	r3, r2
 8010d36:	1d1c      	adds	r4, r3, #4
 8010d38:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010d3c:	33c2      	adds	r3, #194	; 0xc2
 8010d3e:	009b      	lsls	r3, r3, #2
 8010d40:	68fa      	ldr	r2, [r7, #12]
 8010d42:	4413      	add	r3, r2
 8010d44:	3304      	adds	r3, #4
 8010d46:	2201      	movs	r2, #1
 8010d48:	9200      	str	r2, [sp, #0]
 8010d4a:	4622      	mov	r2, r4
 8010d4c:	f7ff fba6 	bl	801049c <pid_controller_register>
 8010d50:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
                                  &(chassis->motor_pid[i]),
                                  &(chassis->motor_feedback[i]), 1);
    if (err != RM_OK)
 8010d54:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8010d58:	2b00      	cmp	r3, #0
 8010d5a:	d10c      	bne.n	8010d76 <chassis_pid_register+0x29e>
  for (int i = 0; i < 4; i++) {
 8010d5c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010d60:	3301      	adds	r3, #1
 8010d62:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8010d66:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010d6a:	2b03      	cmp	r3, #3
 8010d6c:	ddcb      	ble.n	8010d06 <chassis_pid_register+0x22e>
      goto end;
  }

  return RM_OK;
 8010d6e:	2300      	movs	r3, #0
 8010d70:	e008      	b.n	8010d84 <chassis_pid_register+0x2ac>
      goto end;
 8010d72:	bf00      	nop
 8010d74:	e000      	b.n	8010d78 <chassis_pid_register+0x2a0>
      goto end;
 8010d76:	bf00      	nop
end:
  object_detach(&(chassis->parent));
 8010d78:	68fb      	ldr	r3, [r7, #12]
 8010d7a:	4618      	mov	r0, r3
 8010d7c:	f000 fa70 	bl	8011260 <object_detach>

  return err;
 8010d80:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
}
 8010d84:	4618      	mov	r0, r3
 8010d86:	37ac      	adds	r7, #172	; 0xac
 8010d88:	46bd      	mov	sp, r7
 8010d8a:	bd90      	pop	{r4, r7, pc}
 8010d8c:	08011033 	.word	0x08011033
 8010d90:	00000000 	.word	0x00000000
 8010d94:	3dcccccd 	.word	0x3dcccccd
 8010d98:	43fa0000 	.word	0x43fa0000
 8010d9c:	466a6000 	.word	0x466a6000
 8010da0:	43ef0000 	.word	0x43ef0000
 8010da4:	438c0000 	.word	0x438c0000
 8010da8:	43660000 	.word	0x43660000
 8010dac:	08013850 	.word	0x08013850
 8010db0:	08013858 	.word	0x08013858
 8010db4:	08013860 	.word	0x08013860
 8010db8:	08013868 	.word	0x08013868
 8010dbc:	08013870 	.word	0x08013870
 8010dc0:	08013878 	.word	0x08013878
 8010dc4:	08013880 	.word	0x08013880
 8010dc8:	08013888 	.word	0x08013888

08010dcc <chassis_execute>:

int32_t chassis_execute(struct chassis *chassis) {
 8010dcc:	b580      	push	{r7, lr}
 8010dce:	b08e      	sub	sp, #56	; 0x38
 8010dd0:	af00      	add	r7, sp, #0
 8010dd2:	6078      	str	r0, [r7, #4]
  struct skid_steer_motor_fdb wheel_fdb[4];

  static uint8_t init_f = 0;
  static float last_time, period;

  if (chassis == NULL)
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	2b00      	cmp	r3, #0
 8010dd8:	d102      	bne.n	8010de0 <chassis_execute+0x14>
    return -RM_INVAL;
 8010dda:	f06f 0301 	mvn.w	r3, #1
 8010dde:	e0ab      	b.n	8010f38 <chassis_execute+0x16c>

  period = get_time_ms_us() - last_time;
 8010de0:	f000 fa70 	bl	80112c4 <get_time_ms_us>
 8010de4:	eeb0 7a40 	vmov.f32	s14, s0
 8010de8:	4b55      	ldr	r3, [pc, #340]	; (8010f40 <chassis_execute+0x174>)
 8010dea:	edd3 7a00 	vldr	s15, [r3]
 8010dee:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010df2:	4b54      	ldr	r3, [pc, #336]	; (8010f44 <chassis_execute+0x178>)
 8010df4:	edc3 7a00 	vstr	s15, [r3]

  if (!init_f) {
 8010df8:	4b53      	ldr	r3, [pc, #332]	; (8010f48 <chassis_execute+0x17c>)
 8010dfa:	781b      	ldrb	r3, [r3, #0]
 8010dfc:	2b00      	cmp	r3, #0
 8010dfe:	d10e      	bne.n	8010e1e <chassis_execute+0x52>
    period = 0;
 8010e00:	4b50      	ldr	r3, [pc, #320]	; (8010f44 <chassis_execute+0x178>)
 8010e02:	f04f 0200 	mov.w	r2, #0
 8010e06:	601a      	str	r2, [r3, #0]
    last_time = get_time_ms_us();
 8010e08:	f000 fa5c 	bl	80112c4 <get_time_ms_us>
 8010e0c:	eef0 7a40 	vmov.f32	s15, s0
 8010e10:	4b4b      	ldr	r3, [pc, #300]	; (8010f40 <chassis_execute+0x174>)
 8010e12:	edc3 7a00 	vstr	s15, [r3]
    init_f = 1;
 8010e16:	4b4c      	ldr	r3, [pc, #304]	; (8010f48 <chassis_execute+0x17c>)
 8010e18:	2201      	movs	r2, #1
 8010e1a:	701a      	strb	r2, [r3, #0]
 8010e1c:	e006      	b.n	8010e2c <chassis_execute+0x60>
  } else {
    last_time = get_time_ms_us();
 8010e1e:	f000 fa51 	bl	80112c4 <get_time_ms_us>
 8010e22:	eef0 7a40 	vmov.f32	s15, s0
 8010e26:	4b46      	ldr	r3, [pc, #280]	; (8010f40 <chassis_execute+0x174>)
 8010e28:	edc3 7a00 	vstr	s15, [r3]
  }

  skid_steer_calculate(&(chassis->skid_steer));
 8010e2c:	687b      	ldr	r3, [r7, #4]
 8010e2e:	332c      	adds	r3, #44	; 0x2c
 8010e30:	4618      	mov	r0, r3
 8010e32:	f7fe ffbd 	bl	800fdb0 <skid_steer_calculate>

  for (int i = 0; i < 4; i++) {
 8010e36:	2300      	movs	r3, #0
 8010e38:	637b      	str	r3, [r7, #52]	; 0x34
 8010e3a:	e071      	b.n	8010f20 <chassis_execute+0x154>
    pdata = motor_device_get_data(&(chassis->motor[i]));
 8010e3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e3e:	2264      	movs	r2, #100	; 0x64
 8010e40:	fb02 f303 	mul.w	r3, r2, r3
 8010e44:	3378      	adds	r3, #120	; 0x78
 8010e46:	687a      	ldr	r2, [r7, #4]
 8010e48:	4413      	add	r3, r2
 8010e4a:	3304      	adds	r3, #4
 8010e4c:	4618      	mov	r0, r3
 8010e4e:	f7ff fbfb 	bl	8010648 <motor_device_get_data>
 8010e52:	6338      	str	r0, [r7, #48]	; 0x30

    wheel_fdb[i].total_ecd = pdata->total_ecd;
 8010e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e56:	68db      	ldr	r3, [r3, #12]
 8010e58:	ee07 3a90 	vmov	s15, r3
 8010e5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010e60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e62:	00db      	lsls	r3, r3, #3
 8010e64:	3338      	adds	r3, #56	; 0x38
 8010e66:	443b      	add	r3, r7
 8010e68:	3b2c      	subs	r3, #44	; 0x2c
 8010e6a:	edc3 7a00 	vstr	s15, [r3]
    wheel_fdb[i].speed_rpm = pdata->speed_rpm;
 8010e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e70:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8010e74:	ee07 3a90 	vmov	s15, r3
 8010e78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010e7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e7e:	00db      	lsls	r3, r3, #3
 8010e80:	3338      	adds	r3, #56	; 0x38
 8010e82:	443b      	add	r3, r7
 8010e84:	3b28      	subs	r3, #40	; 0x28
 8010e86:	edc3 7a00 	vstr	s15, [r3]

    controller_set_input(&chassis->ctrl[i], chassis->skid_steer.wheel_rpm[i]);
 8010e8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010e8c:	4613      	mov	r3, r2
 8010e8e:	00db      	lsls	r3, r3, #3
 8010e90:	4413      	add	r3, r2
 8010e92:	00db      	lsls	r3, r3, #3
 8010e94:	f503 7346 	add.w	r3, r3, #792	; 0x318
 8010e98:	687a      	ldr	r2, [r7, #4]
 8010e9a:	4413      	add	r3, r2
 8010e9c:	1d19      	adds	r1, r3, #4
 8010e9e:	687a      	ldr	r2, [r7, #4]
 8010ea0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010ea2:	3316      	adds	r3, #22
 8010ea4:	009b      	lsls	r3, r3, #2
 8010ea6:	4413      	add	r3, r2
 8010ea8:	3308      	adds	r3, #8
 8010eaa:	edd3 7a00 	vldr	s15, [r3]
 8010eae:	eeb0 0a67 	vmov.f32	s0, s15
 8010eb2:	4608      	mov	r0, r1
 8010eb4:	f7ff fa93 	bl	80103de <controller_set_input>
    controller_execute(&chassis->ctrl[i], (void *)pdata);
 8010eb8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010eba:	4613      	mov	r3, r2
 8010ebc:	00db      	lsls	r3, r3, #3
 8010ebe:	4413      	add	r3, r2
 8010ec0:	00db      	lsls	r3, r3, #3
 8010ec2:	f503 7346 	add.w	r3, r3, #792	; 0x318
 8010ec6:	687a      	ldr	r2, [r7, #4]
 8010ec8:	4413      	add	r3, r2
 8010eca:	3304      	adds	r3, #4
 8010ecc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010ece:	4618      	mov	r0, r3
 8010ed0:	f7ff fa4c 	bl	801036c <controller_execute>
    controller_get_output(&chassis->ctrl[i], &motor_out);
 8010ed4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010ed6:	4613      	mov	r3, r2
 8010ed8:	00db      	lsls	r3, r3, #3
 8010eda:	4413      	add	r3, r2
 8010edc:	00db      	lsls	r3, r3, #3
 8010ede:	f503 7346 	add.w	r3, r3, #792	; 0x318
 8010ee2:	687a      	ldr	r2, [r7, #4]
 8010ee4:	4413      	add	r3, r2
 8010ee6:	3304      	adds	r3, #4
 8010ee8:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8010eec:	4611      	mov	r1, r2
 8010eee:	4618      	mov	r0, r3
 8010ef0:	f7ff fa8a 	bl	8010408 <controller_get_output>

    motor_device_set_current(&chassis->motor[i], (int16_t)motor_out);
 8010ef4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010ef6:	2264      	movs	r2, #100	; 0x64
 8010ef8:	fb02 f303 	mul.w	r3, r2, r3
 8010efc:	3378      	adds	r3, #120	; 0x78
 8010efe:	687a      	ldr	r2, [r7, #4]
 8010f00:	4413      	add	r3, r2
 8010f02:	3304      	adds	r3, #4
 8010f04:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8010f08:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010f0c:	ee17 2a90 	vmov	r2, s15
 8010f10:	b212      	sxth	r2, r2
 8010f12:	4611      	mov	r1, r2
 8010f14:	4618      	mov	r0, r3
 8010f16:	f7ff fba8 	bl	801066a <motor_device_set_current>
  for (int i = 0; i < 4; i++) {
 8010f1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010f1c:	3301      	adds	r3, #1
 8010f1e:	637b      	str	r3, [r7, #52]	; 0x34
 8010f20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010f22:	2b03      	cmp	r3, #3
 8010f24:	dd8a      	ble.n	8010e3c <chassis_execute+0x70>
  }

  skid_steer_position_measure(&(chassis->skid_steer), wheel_fdb);
 8010f26:	687b      	ldr	r3, [r7, #4]
 8010f28:	332c      	adds	r3, #44	; 0x2c
 8010f2a:	f107 020c 	add.w	r2, r7, #12
 8010f2e:	4611      	mov	r1, r2
 8010f30:	4618      	mov	r0, r3
 8010f32:	f7ff f859 	bl	800ffe8 <skid_steer_position_measure>

  return RM_OK;
 8010f36:	2300      	movs	r3, #0
}
 8010f38:	4618      	mov	r0, r3
 8010f3a:	3738      	adds	r7, #56	; 0x38
 8010f3c:	46bd      	mov	sp, r7
 8010f3e:	bd80      	pop	{r7, pc}
 8010f40:	20011dd8 	.word	0x20011dd8
 8010f44:	20011ddc 	.word	0x20011ddc
 8010f48:	20011de0 	.word	0x20011de0

08010f4c <chassis_set_speed>:

int32_t chassis_set_speed(struct chassis *chassis, float vx, float vw) {
 8010f4c:	b480      	push	{r7}
 8010f4e:	b085      	sub	sp, #20
 8010f50:	af00      	add	r7, sp, #0
 8010f52:	60f8      	str	r0, [r7, #12]
 8010f54:	ed87 0a02 	vstr	s0, [r7, #8]
 8010f58:	edc7 0a01 	vstr	s1, [r7, #4]
  if (chassis == NULL)
 8010f5c:	68fb      	ldr	r3, [r7, #12]
 8010f5e:	2b00      	cmp	r3, #0
 8010f60:	d102      	bne.n	8010f68 <chassis_set_speed+0x1c>
    return -RM_INVAL;
 8010f62:	f06f 0301 	mvn.w	r3, #1
 8010f66:	e006      	b.n	8010f76 <chassis_set_speed+0x2a>
  chassis->skid_steer.speed.vx = vx;
 8010f68:	68fb      	ldr	r3, [r7, #12]
 8010f6a:	68ba      	ldr	r2, [r7, #8]
 8010f6c:	639a      	str	r2, [r3, #56]	; 0x38
  chassis->skid_steer.speed.vw = vw;
 8010f6e:	68fb      	ldr	r3, [r7, #12]
 8010f70:	687a      	ldr	r2, [r7, #4]
 8010f72:	63da      	str	r2, [r3, #60]	; 0x3c
  return RM_OK;
 8010f74:	2300      	movs	r3, #0
}
 8010f76:	4618      	mov	r0, r3
 8010f78:	3714      	adds	r7, #20
 8010f7a:	46bd      	mov	sp, r7
 8010f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f80:	4770      	bx	lr

08010f82 <chassis_find>:
  }

  return RM_OK;
}

chassis_t chassis_find(const char *name) {
 8010f82:	b580      	push	{r7, lr}
 8010f84:	b084      	sub	sp, #16
 8010f86:	af00      	add	r7, sp, #0
 8010f88:	6078      	str	r0, [r7, #4]
  struct object *object;

  object = object_find(name, Object_Class_Chassis);
 8010f8a:	2103      	movs	r1, #3
 8010f8c:	6878      	ldr	r0, [r7, #4]
 8010f8e:	f000 f91b 	bl	80111c8 <object_find>
 8010f92:	60f8      	str	r0, [r7, #12]

  return (chassis_t)object;
 8010f94:	68fb      	ldr	r3, [r7, #12]
}
 8010f96:	4618      	mov	r0, r3
 8010f98:	3710      	adds	r7, #16
 8010f9a:	46bd      	mov	sp, r7
 8010f9c:	bd80      	pop	{r7, pc}

08010f9e <chassis_enable>:

int32_t chassis_enable(struct chassis *chassis) {
 8010f9e:	b580      	push	{r7, lr}
 8010fa0:	b084      	sub	sp, #16
 8010fa2:	af00      	add	r7, sp, #0
 8010fa4:	6078      	str	r0, [r7, #4]
  if (chassis == NULL)
 8010fa6:	687b      	ldr	r3, [r7, #4]
 8010fa8:	2b00      	cmp	r3, #0
 8010faa:	d102      	bne.n	8010fb2 <chassis_enable+0x14>
    return -RM_INVAL;
 8010fac:	f06f 0301 	mvn.w	r3, #1
 8010fb0:	e016      	b.n	8010fe0 <chassis_enable+0x42>

  for (int i = 0; i < 4; i++) {
 8010fb2:	2300      	movs	r3, #0
 8010fb4:	60fb      	str	r3, [r7, #12]
 8010fb6:	e00f      	b.n	8010fd8 <chassis_enable+0x3a>
    controller_enable(&(chassis->ctrl[i]));
 8010fb8:	68fa      	ldr	r2, [r7, #12]
 8010fba:	4613      	mov	r3, r2
 8010fbc:	00db      	lsls	r3, r3, #3
 8010fbe:	4413      	add	r3, r2
 8010fc0:	00db      	lsls	r3, r3, #3
 8010fc2:	f503 7346 	add.w	r3, r3, #792	; 0x318
 8010fc6:	687a      	ldr	r2, [r7, #4]
 8010fc8:	4413      	add	r3, r2
 8010fca:	3304      	adds	r3, #4
 8010fcc:	4618      	mov	r0, r3
 8010fce:	f7ff fa35 	bl	801043c <controller_enable>
  for (int i = 0; i < 4; i++) {
 8010fd2:	68fb      	ldr	r3, [r7, #12]
 8010fd4:	3301      	adds	r3, #1
 8010fd6:	60fb      	str	r3, [r7, #12]
 8010fd8:	68fb      	ldr	r3, [r7, #12]
 8010fda:	2b03      	cmp	r3, #3
 8010fdc:	ddec      	ble.n	8010fb8 <chassis_enable+0x1a>
  }

  return RM_OK;
 8010fde:	2300      	movs	r3, #0
}
 8010fe0:	4618      	mov	r0, r3
 8010fe2:	3710      	adds	r7, #16
 8010fe4:	46bd      	mov	sp, r7
 8010fe6:	bd80      	pop	{r7, pc}

08010fe8 <chassis_disable>:

int32_t chassis_disable(struct chassis *chassis) {
 8010fe8:	b580      	push	{r7, lr}
 8010fea:	b084      	sub	sp, #16
 8010fec:	af00      	add	r7, sp, #0
 8010fee:	6078      	str	r0, [r7, #4]
  if (chassis == NULL)
 8010ff0:	687b      	ldr	r3, [r7, #4]
 8010ff2:	2b00      	cmp	r3, #0
 8010ff4:	d102      	bne.n	8010ffc <chassis_disable+0x14>
    return -RM_INVAL;
 8010ff6:	f06f 0301 	mvn.w	r3, #1
 8010ffa:	e016      	b.n	801102a <chassis_disable+0x42>

  for (int i = 0; i < 4; i++) {
 8010ffc:	2300      	movs	r3, #0
 8010ffe:	60fb      	str	r3, [r7, #12]
 8011000:	e00f      	b.n	8011022 <chassis_disable+0x3a>
    controller_disable(&(chassis->ctrl[i]));
 8011002:	68fa      	ldr	r2, [r7, #12]
 8011004:	4613      	mov	r3, r2
 8011006:	00db      	lsls	r3, r3, #3
 8011008:	4413      	add	r3, r2
 801100a:	00db      	lsls	r3, r3, #3
 801100c:	f503 7346 	add.w	r3, r3, #792	; 0x318
 8011010:	687a      	ldr	r2, [r7, #4]
 8011012:	4413      	add	r3, r2
 8011014:	3304      	adds	r3, #4
 8011016:	4618      	mov	r0, r3
 8011018:	f7ff fa24 	bl	8010464 <controller_disable>
  for (int i = 0; i < 4; i++) {
 801101c:	68fb      	ldr	r3, [r7, #12]
 801101e:	3301      	adds	r3, #1
 8011020:	60fb      	str	r3, [r7, #12]
 8011022:	68fb      	ldr	r3, [r7, #12]
 8011024:	2b03      	cmp	r3, #3
 8011026:	ddec      	ble.n	8011002 <chassis_disable+0x1a>
  }

  return RM_OK;
 8011028:	2300      	movs	r3, #0
}
 801102a:	4618      	mov	r0, r3
 801102c:	3710      	adds	r7, #16
 801102e:	46bd      	mov	sp, r7
 8011030:	bd80      	pop	{r7, pc}

08011032 <motor_pid_input_convert>:

static int32_t motor_pid_input_convert(struct controller *ctrl, void *input) {
 8011032:	b480      	push	{r7}
 8011034:	b085      	sub	sp, #20
 8011036:	af00      	add	r7, sp, #0
 8011038:	6078      	str	r0, [r7, #4]
 801103a:	6039      	str	r1, [r7, #0]
  pid_feedback_t pid_fdb = (pid_feedback_t)(ctrl->feedback);
 801103c:	687b      	ldr	r3, [r7, #4]
 801103e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011040:	60fb      	str	r3, [r7, #12]
  motor_data_t data = (motor_data_t)input;
 8011042:	683b      	ldr	r3, [r7, #0]
 8011044:	60bb      	str	r3, [r7, #8]
  pid_fdb->feedback = data->speed_rpm;
 8011046:	68bb      	ldr	r3, [r7, #8]
 8011048:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801104c:	ee07 3a90 	vmov	s15, r3
 8011050:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011054:	68fb      	ldr	r3, [r7, #12]
 8011056:	edc3 7a00 	vstr	s15, [r3]

  return RM_OK;
 801105a:	2300      	movs	r3, #0
}
 801105c:	4618      	mov	r0, r3
 801105e:	3714      	adds	r7, #20
 8011060:	46bd      	mov	sp, r7
 8011062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011066:	4770      	bx	lr

08011068 <__list_add>:
 * the prev/next entries already!
 */
static __inline void __list_add(list_t *new,
                                list_t *prev,
                                list_t *next)
{
 8011068:	b480      	push	{r7}
 801106a:	b085      	sub	sp, #20
 801106c:	af00      	add	r7, sp, #0
 801106e:	60f8      	str	r0, [r7, #12]
 8011070:	60b9      	str	r1, [r7, #8]
 8011072:	607a      	str	r2, [r7, #4]
  next->prev = new;
 8011074:	687b      	ldr	r3, [r7, #4]
 8011076:	68fa      	ldr	r2, [r7, #12]
 8011078:	605a      	str	r2, [r3, #4]
  new->next = next;
 801107a:	68fb      	ldr	r3, [r7, #12]
 801107c:	687a      	ldr	r2, [r7, #4]
 801107e:	601a      	str	r2, [r3, #0]
  new->prev = prev;
 8011080:	68fb      	ldr	r3, [r7, #12]
 8011082:	68ba      	ldr	r2, [r7, #8]
 8011084:	605a      	str	r2, [r3, #4]
  prev->next = new;
 8011086:	68bb      	ldr	r3, [r7, #8]
 8011088:	68fa      	ldr	r2, [r7, #12]
 801108a:	601a      	str	r2, [r3, #0]
}
 801108c:	bf00      	nop
 801108e:	3714      	adds	r7, #20
 8011090:	46bd      	mov	sp, r7
 8011092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011096:	4770      	bx	lr

08011098 <list_add>:
 *
 * Insert a new entry after the specified head.
 * This is good for implementing stacks.
 */
static __inline void list_add(list_t *new, list_t *head)
{
 8011098:	b580      	push	{r7, lr}
 801109a:	b082      	sub	sp, #8
 801109c:	af00      	add	r7, sp, #0
 801109e:	6078      	str	r0, [r7, #4]
 80110a0:	6039      	str	r1, [r7, #0]
  __list_add(new, head, head->next);
 80110a2:	683b      	ldr	r3, [r7, #0]
 80110a4:	681b      	ldr	r3, [r3, #0]
 80110a6:	461a      	mov	r2, r3
 80110a8:	6839      	ldr	r1, [r7, #0]
 80110aa:	6878      	ldr	r0, [r7, #4]
 80110ac:	f7ff ffdc 	bl	8011068 <__list_add>
}
 80110b0:	bf00      	nop
 80110b2:	3708      	adds	r7, #8
 80110b4:	46bd      	mov	sp, r7
 80110b6:	bd80      	pop	{r7, pc}

080110b8 <__list_del>:
 *
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 */
static __inline void __list_del(list_t *prev, list_t *next)
{
 80110b8:	b480      	push	{r7}
 80110ba:	b083      	sub	sp, #12
 80110bc:	af00      	add	r7, sp, #0
 80110be:	6078      	str	r0, [r7, #4]
 80110c0:	6039      	str	r1, [r7, #0]
  next->prev = prev;
 80110c2:	683b      	ldr	r3, [r7, #0]
 80110c4:	687a      	ldr	r2, [r7, #4]
 80110c6:	605a      	str	r2, [r3, #4]
  prev->next = next;
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	683a      	ldr	r2, [r7, #0]
 80110cc:	601a      	str	r2, [r3, #0]
}
 80110ce:	bf00      	nop
 80110d0:	370c      	adds	r7, #12
 80110d2:	46bd      	mov	sp, r7
 80110d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110d8:	4770      	bx	lr

080110da <list_del>:
 * @entry: the element to delete from the list.
 * Note: list_empty() on entry does not return true after this, the entry is
 * in an undefined state.
 */
static __inline void list_del(list_t *entry)
{
 80110da:	b580      	push	{r7, lr}
 80110dc:	b082      	sub	sp, #8
 80110de:	af00      	add	r7, sp, #0
 80110e0:	6078      	str	r0, [r7, #4]
  __list_del(entry->prev, entry->next);
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	685a      	ldr	r2, [r3, #4]
 80110e6:	687b      	ldr	r3, [r7, #4]
 80110e8:	681b      	ldr	r3, [r3, #0]
 80110ea:	4619      	mov	r1, r3
 80110ec:	4610      	mov	r0, r2
 80110ee:	f7ff ffe3 	bl	80110b8 <__list_del>
}
 80110f2:	bf00      	nop
 80110f4:	3708      	adds	r7, #8
 80110f6:	46bd      	mov	sp, r7
 80110f8:	bd80      	pop	{r7, pc}
	...

080110fc <object_get_information>:
    // {Object_Class_Gimbal, _OBJ_CONTAINER_LIST_INIT(Object_Info_Gimbal)},
    // /* initialize object container - Controller */
    // {Object_Class_Shoot, _OBJ_CONTAINER_LIST_INIT(Object_Info_Shoot)},
};

struct object_information *object_get_information(enum object_class_type type) {
 80110fc:	b480      	push	{r7}
 80110fe:	b085      	sub	sp, #20
 8011100:	af00      	add	r7, sp, #0
 8011102:	4603      	mov	r3, r0
 8011104:	71fb      	strb	r3, [r7, #7]
  int index;

  for (index = 0; index < Object_Info_Unknown; index++)
 8011106:	2300      	movs	r3, #0
 8011108:	60fb      	str	r3, [r7, #12]
 801110a:	e015      	b.n	8011138 <object_get_information+0x3c>
    if (object_container[index].type == type)
 801110c:	490f      	ldr	r1, [pc, #60]	; (801114c <object_get_information+0x50>)
 801110e:	68fa      	ldr	r2, [r7, #12]
 8011110:	4613      	mov	r3, r2
 8011112:	005b      	lsls	r3, r3, #1
 8011114:	4413      	add	r3, r2
 8011116:	009b      	lsls	r3, r3, #2
 8011118:	440b      	add	r3, r1
 801111a:	781b      	ldrb	r3, [r3, #0]
 801111c:	79fa      	ldrb	r2, [r7, #7]
 801111e:	429a      	cmp	r2, r3
 8011120:	d107      	bne.n	8011132 <object_get_information+0x36>
      return &object_container[index];
 8011122:	68fa      	ldr	r2, [r7, #12]
 8011124:	4613      	mov	r3, r2
 8011126:	005b      	lsls	r3, r3, #1
 8011128:	4413      	add	r3, r2
 801112a:	009b      	lsls	r3, r3, #2
 801112c:	4a07      	ldr	r2, [pc, #28]	; (801114c <object_get_information+0x50>)
 801112e:	4413      	add	r3, r2
 8011130:	e006      	b.n	8011140 <object_get_information+0x44>
  for (index = 0; index < Object_Info_Unknown; index++)
 8011132:	68fb      	ldr	r3, [r7, #12]
 8011134:	3301      	adds	r3, #1
 8011136:	60fb      	str	r3, [r7, #12]
 8011138:	68fb      	ldr	r3, [r7, #12]
 801113a:	2b03      	cmp	r3, #3
 801113c:	dde6      	ble.n	801110c <object_get_information+0x10>

  return NULL;
 801113e:	2300      	movs	r3, #0
}
 8011140:	4618      	mov	r0, r3
 8011142:	3714      	adds	r7, #20
 8011144:	46bd      	mov	sp, r7
 8011146:	f85d 7b04 	ldr.w	r7, [sp], #4
 801114a:	4770      	bx	lr
 801114c:	20000110 	.word	0x20000110

08011150 <object_init>:

int32_t object_init(struct object *object, enum object_class_type type,
                    const char *name) {
 8011150:	b590      	push	{r4, r7, lr}
 8011152:	b089      	sub	sp, #36	; 0x24
 8011154:	af00      	add	r7, sp, #0
 8011156:	60f8      	str	r0, [r7, #12]
 8011158:	460b      	mov	r3, r1
 801115a:	607a      	str	r2, [r7, #4]
 801115c:	72fb      	strb	r3, [r7, #11]
  struct object_information *information;

  var_cpu_sr();

  /* get object information */
  information = object_get_information(type);
 801115e:	7afb      	ldrb	r3, [r7, #11]
 8011160:	4618      	mov	r0, r3
 8011162:	f7ff ffcb 	bl	80110fc <object_get_information>
 8011166:	61f8      	str	r0, [r7, #28]
  assert_param_obj(information != NULL);

  /* initialize object's parameters */
  object->type = type;
 8011168:	68fb      	ldr	r3, [r7, #12]
 801116a:	7afa      	ldrb	r2, [r7, #11]
 801116c:	f883 2020 	strb.w	r2, [r3, #32]

  /* copy name */
  if (strlen(name) > OBJECT_NAME_MAX_LEN - 1) {
 8011170:	6878      	ldr	r0, [r7, #4]
 8011172:	f7ef f83d 	bl	80001f0 <strlen>
 8011176:	4603      	mov	r3, r0
 8011178:	2b1f      	cmp	r3, #31
 801117a:	d902      	bls.n	8011182 <object_init+0x32>
    return -1;
 801117c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011180:	e01e      	b.n	80111c0 <object_init+0x70>
  }

  strncpy(object->name, name, OBJECT_NAME_MAX_LEN);
 8011182:	68fb      	ldr	r3, [r7, #12]
 8011184:	2220      	movs	r2, #32
 8011186:	6879      	ldr	r1, [r7, #4]
 8011188:	4618      	mov	r0, r3
 801118a:	f000 fb97 	bl	80118bc <strncpy>
  object->name[OBJECT_NAME_MAX_LEN - 1] = '\0';
 801118e:	68fb      	ldr	r3, [r7, #12]
 8011190:	2200      	movs	r2, #0
 8011192:	77da      	strb	r2, [r3, #31]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8011194:	f3ef 8310 	mrs	r3, PRIMASK
 8011198:	617b      	str	r3, [r7, #20]
  return(result);
 801119a:	697b      	ldr	r3, [r7, #20]

  /* lock interrupt */
  enter_critical();
 801119c:	461c      	mov	r4, r3
  __ASM volatile ("cpsid i" : : : "memory");
 801119e:	b672      	cpsid	i
}
 80111a0:	bf00      	nop

  {
    /* insert object into information object list */
    list_add(&(object->list), &(information->object_list));
 80111a2:	68fb      	ldr	r3, [r7, #12]
 80111a4:	f103 0224 	add.w	r2, r3, #36	; 0x24
 80111a8:	69fb      	ldr	r3, [r7, #28]
 80111aa:	3304      	adds	r3, #4
 80111ac:	4619      	mov	r1, r3
 80111ae:	4610      	mov	r0, r2
 80111b0:	f7ff ff72 	bl	8011098 <list_add>
 80111b4:	61bc      	str	r4, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80111b6:	69bb      	ldr	r3, [r7, #24]
 80111b8:	f383 8810 	msr	PRIMASK, r3
}
 80111bc:	bf00      	nop
  }

  /* unlock interrupt */
  exit_critical();
  return 0;
 80111be:	2300      	movs	r3, #0
}
 80111c0:	4618      	mov	r0, r3
 80111c2:	3724      	adds	r7, #36	; 0x24
 80111c4:	46bd      	mov	sp, r7
 80111c6:	bd90      	pop	{r4, r7, pc}

080111c8 <object_find>:

object_t object_find(const char *name, enum object_class_type type) {
 80111c8:	b590      	push	{r4, r7, lr}
 80111ca:	b089      	sub	sp, #36	; 0x24
 80111cc:	af00      	add	r7, sp, #0
 80111ce:	6078      	str	r0, [r7, #4]
 80111d0:	460b      	mov	r3, r1
 80111d2:	70fb      	strb	r3, [r7, #3]
  struct object *object = NULL;
 80111d4:	2300      	movs	r3, #0
 80111d6:	617b      	str	r3, [r7, #20]
  struct object_information *information = NULL;
 80111d8:	2300      	movs	r3, #0
 80111da:	61fb      	str	r3, [r7, #28]
  list_t *node = NULL;
 80111dc:	2300      	movs	r3, #0
 80111de:	61bb      	str	r3, [r7, #24]

  var_cpu_sr();

  /* parameter check */
  if ((name == NULL) || (type >= Object_Class_Unknown))
 80111e0:	687b      	ldr	r3, [r7, #4]
 80111e2:	2b00      	cmp	r3, #0
 80111e4:	d002      	beq.n	80111ec <object_find+0x24>
 80111e6:	78fb      	ldrb	r3, [r7, #3]
 80111e8:	2b05      	cmp	r3, #5
 80111ea:	d901      	bls.n	80111f0 <object_find+0x28>
    return NULL;
 80111ec:	2300      	movs	r3, #0
 80111ee:	e033      	b.n	8011258 <object_find+0x90>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80111f0:	f3ef 8310 	mrs	r3, PRIMASK
 80111f4:	613b      	str	r3, [r7, #16]
  return(result);
 80111f6:	693b      	ldr	r3, [r7, #16]

  /* enter critical */
  enter_critical();
 80111f8:	461c      	mov	r4, r3
  __ASM volatile ("cpsid i" : : : "memory");
 80111fa:	b672      	cpsid	i
}
 80111fc:	bf00      	nop

  /* try to find object */
  if (information == NULL) {
 80111fe:	69fb      	ldr	r3, [r7, #28]
 8011200:	2b00      	cmp	r3, #0
 8011202:	d104      	bne.n	801120e <object_find+0x46>
    information = object_get_information(type);
 8011204:	78fb      	ldrb	r3, [r7, #3]
 8011206:	4618      	mov	r0, r3
 8011208:	f7ff ff78 	bl	80110fc <object_get_information>
 801120c:	61f8      	str	r0, [r7, #28]
    assert_param_obj(information != NULL);
  }
  for (node = information->object_list.next;
 801120e:	69fb      	ldr	r3, [r7, #28]
 8011210:	685b      	ldr	r3, [r3, #4]
 8011212:	61bb      	str	r3, [r7, #24]
 8011214:	e015      	b.n	8011242 <object_find+0x7a>
       node != &(information->object_list); node = node->next) {
    object = list_entry(node, struct object, list);
 8011216:	69bb      	ldr	r3, [r7, #24]
 8011218:	3b24      	subs	r3, #36	; 0x24
 801121a:	617b      	str	r3, [r7, #20]
    if (strncmp(object->name, name, OBJECT_NAME_MAX_LEN) == 0) {
 801121c:	697b      	ldr	r3, [r7, #20]
 801121e:	2220      	movs	r2, #32
 8011220:	6879      	ldr	r1, [r7, #4]
 8011222:	4618      	mov	r0, r3
 8011224:	f000 fb38 	bl	8011898 <strncmp>
 8011228:	4603      	mov	r3, r0
 801122a:	2b00      	cmp	r3, #0
 801122c:	d106      	bne.n	801123c <object_find+0x74>
 801122e:	60fc      	str	r4, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011230:	68fb      	ldr	r3, [r7, #12]
 8011232:	f383 8810 	msr	PRIMASK, r3
}
 8011236:	bf00      	nop
      /* leave critical */
      exit_critical();

      return object;
 8011238:	697b      	ldr	r3, [r7, #20]
 801123a:	e00d      	b.n	8011258 <object_find+0x90>
       node != &(information->object_list); node = node->next) {
 801123c:	69bb      	ldr	r3, [r7, #24]
 801123e:	681b      	ldr	r3, [r3, #0]
 8011240:	61bb      	str	r3, [r7, #24]
 8011242:	69fb      	ldr	r3, [r7, #28]
 8011244:	3304      	adds	r3, #4
 8011246:	69ba      	ldr	r2, [r7, #24]
 8011248:	429a      	cmp	r2, r3
 801124a:	d1e4      	bne.n	8011216 <object_find+0x4e>
 801124c:	60bc      	str	r4, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801124e:	68bb      	ldr	r3, [r7, #8]
 8011250:	f383 8810 	msr	PRIMASK, r3
}
 8011254:	bf00      	nop
  }

  /* leave critical */
  exit_critical();

  return NULL;
 8011256:	2300      	movs	r3, #0
}
 8011258:	4618      	mov	r0, r3
 801125a:	3724      	adds	r7, #36	; 0x24
 801125c:	46bd      	mov	sp, r7
 801125e:	bd90      	pop	{r4, r7, pc}

08011260 <object_detach>:

void object_detach(object_t object) {
 8011260:	b590      	push	{r4, r7, lr}
 8011262:	b085      	sub	sp, #20
 8011264:	af00      	add	r7, sp, #0
 8011266:	6078      	str	r0, [r7, #4]

  /* object check */
  assert_param_obj(object != NULL);

  /* reset object type */
  object->type = Object_Class_Unknown;
 8011268:	687b      	ldr	r3, [r7, #4]
 801126a:	2206      	movs	r2, #6
 801126c:	f883 2020 	strb.w	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8011270:	f3ef 8310 	mrs	r3, PRIMASK
 8011274:	60bb      	str	r3, [r7, #8]
  return(result);
 8011276:	68bb      	ldr	r3, [r7, #8]

  /* lock interrupt */
  enter_critical();
 8011278:	461c      	mov	r4, r3
  __ASM volatile ("cpsid i" : : : "memory");
 801127a:	b672      	cpsid	i
}
 801127c:	bf00      	nop

  /* remove from old list */
  list_del(&(object->list));
 801127e:	687b      	ldr	r3, [r7, #4]
 8011280:	3324      	adds	r3, #36	; 0x24
 8011282:	4618      	mov	r0, r3
 8011284:	f7ff ff29 	bl	80110da <list_del>
 8011288:	60fc      	str	r4, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801128a:	68fb      	ldr	r3, [r7, #12]
 801128c:	f383 8810 	msr	PRIMASK, r3
}
 8011290:	bf00      	nop

  /* unlock interrupt */
  exit_critical();
}
 8011292:	bf00      	nop
 8011294:	3714      	adds	r7, #20
 8011296:	46bd      	mov	sp, r7
 8011298:	bd90      	pop	{r4, r7, pc}
	...

0801129c <get_time_us>:
#include "sys.h"

uint32_t get_time_us(void) { return TIM5->CNT; }
 801129c:	b480      	push	{r7}
 801129e:	af00      	add	r7, sp, #0
 80112a0:	4b03      	ldr	r3, [pc, #12]	; (80112b0 <get_time_us+0x14>)
 80112a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80112a4:	4618      	mov	r0, r3
 80112a6:	46bd      	mov	sp, r7
 80112a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112ac:	4770      	bx	lr
 80112ae:	bf00      	nop
 80112b0:	40000c00 	.word	0x40000c00

080112b4 <get_time_ms>:

uint32_t get_time_ms(void) { return HAL_GetTick(); }
 80112b4:	b580      	push	{r7, lr}
 80112b6:	af00      	add	r7, sp, #0
 80112b8:	f7f0 ffc2 	bl	8002240 <HAL_GetTick>
 80112bc:	4603      	mov	r3, r0
 80112be:	4618      	mov	r0, r3
 80112c0:	bd80      	pop	{r7, pc}
	...

080112c4 <get_time_ms_us>:

 80112c4:	b580      	push	{r7, lr}
 80112c6:	ed2d 8b02 	vpush	{d8}
 80112ca:	af00      	add	r7, sp, #0
 80112cc:	f7ff fff2 	bl	80112b4 <get_time_ms>
 80112d0:	ee07 0a90 	vmov	s15, r0
 80112d4:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 80112d8:	f7ff ffe0 	bl	801129c <get_time_us>
 80112dc:	ee07 0a90 	vmov	s15, r0
 80112e0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80112e4:	eddf 6a05 	vldr	s13, [pc, #20]	; 80112fc <get_time_ms_us+0x38>
 80112e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80112ec:	ee78 7a27 	vadd.f32	s15, s16, s15
 80112f0:	eeb0 0a67 	vmov.f32	s0, s15
 80112f4:	46bd      	mov	sp, r7
 80112f6:	ecbd 8b02 	vpop	{d8}
 80112fa:	bd80      	pop	{r7, pc}
 80112fc:	447a0000 	.word	0x447a0000

08011300 <fifo_s_init>:
//! \param  [in] uint_cnt is count of fifo elements.
//! \retval 0 if initialize successfully, otherwise return -1.
//
//******************************************************************************************
int fifo_s_init(fifo_s_t *p_fifo, void *p_base_addr, int uint_cnt)
{
 8011300:	b480      	push	{r7}
 8011302:	b085      	sub	sp, #20
 8011304:	af00      	add	r7, sp, #0
 8011306:	60f8      	str	r0, [r7, #12]
 8011308:	60b9      	str	r1, [r7, #8]
 801130a:	607a      	str	r2, [r7, #4]
  ASSERT(p_fifo);
  ASSERT(p_base_addr);
  ASSERT(uint_cnt);

  //! Initialize FIFO Control Block.
  p_fifo->p_start_addr = (char *)p_base_addr;
 801130c:	68fb      	ldr	r3, [r7, #12]
 801130e:	68ba      	ldr	r2, [r7, #8]
 8011310:	601a      	str	r2, [r3, #0]
  p_fifo->p_end_addr = (char *)p_base_addr + uint_cnt - 1;
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	3b01      	subs	r3, #1
 8011316:	68ba      	ldr	r2, [r7, #8]
 8011318:	441a      	add	r2, r3
 801131a:	68fb      	ldr	r3, [r7, #12]
 801131c:	605a      	str	r2, [r3, #4]
  p_fifo->free_num = uint_cnt;
 801131e:	68fb      	ldr	r3, [r7, #12]
 8011320:	687a      	ldr	r2, [r7, #4]
 8011322:	609a      	str	r2, [r3, #8]
  p_fifo->used_num = 0;
 8011324:	68fb      	ldr	r3, [r7, #12]
 8011326:	2200      	movs	r2, #0
 8011328:	60da      	str	r2, [r3, #12]
  p_fifo->p_read_addr = (char *)p_base_addr;
 801132a:	68fb      	ldr	r3, [r7, #12]
 801132c:	68ba      	ldr	r2, [r7, #8]
 801132e:	611a      	str	r2, [r3, #16]
  p_fifo->p_write_addr = (char *)p_base_addr;
 8011330:	68fb      	ldr	r3, [r7, #12]
 8011332:	68ba      	ldr	r2, [r7, #8]
 8011334:	615a      	str	r2, [r3, #20]

  return (0);
 8011336:	2300      	movs	r3, #0
}
 8011338:	4618      	mov	r0, r3
 801133a:	3714      	adds	r7, #20
 801133c:	46bd      	mov	sp, r7
 801133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011342:	4770      	bx	lr

08011344 <fifo_init>:
//! \param  [in] UnitCnt is count of fifo elements.
//! \retval 0 if initialize successfully, otherwise return -1.
//
//******************************************************************************************
int fifo_init(fifo_t *p_fifo, void *p_base_addr, char unit_size, int unit_cnt)
{
 8011344:	b480      	push	{r7}
 8011346:	b085      	sub	sp, #20
 8011348:	af00      	add	r7, sp, #0
 801134a:	60f8      	str	r0, [r7, #12]
 801134c:	60b9      	str	r1, [r7, #8]
 801134e:	603b      	str	r3, [r7, #0]
 8011350:	4613      	mov	r3, r2
 8011352:	71fb      	strb	r3, [r7, #7]
  ASSERT(p_base_addr);
  ASSERT(unit_size);
  ASSERT(unit_cnt);

  //! Initialize FIFO Control Block.
  p_fifo->p_start_addr = (char *)p_base_addr;
 8011354:	68fb      	ldr	r3, [r7, #12]
 8011356:	68ba      	ldr	r2, [r7, #8]
 8011358:	601a      	str	r2, [r3, #0]
  p_fifo->p_end_addr = (char *)p_base_addr + unit_size * unit_cnt - 1;
 801135a:	79fb      	ldrb	r3, [r7, #7]
 801135c:	683a      	ldr	r2, [r7, #0]
 801135e:	fb02 f303 	mul.w	r3, r2, r3
 8011362:	3b01      	subs	r3, #1
 8011364:	68ba      	ldr	r2, [r7, #8]
 8011366:	441a      	add	r2, r3
 8011368:	68fb      	ldr	r3, [r7, #12]
 801136a:	605a      	str	r2, [r3, #4]
  p_fifo->free_num = unit_cnt;
 801136c:	68fb      	ldr	r3, [r7, #12]
 801136e:	683a      	ldr	r2, [r7, #0]
 8011370:	609a      	str	r2, [r3, #8]
  p_fifo->used_num = 0;
 8011372:	68fb      	ldr	r3, [r7, #12]
 8011374:	2200      	movs	r2, #0
 8011376:	60da      	str	r2, [r3, #12]
  p_fifo->unit_size = unit_size;
 8011378:	79fa      	ldrb	r2, [r7, #7]
 801137a:	68fb      	ldr	r3, [r7, #12]
 801137c:	611a      	str	r2, [r3, #16]
  p_fifo->p_read_addr = (char *)p_base_addr;
 801137e:	68fb      	ldr	r3, [r7, #12]
 8011380:	68ba      	ldr	r2, [r7, #8]
 8011382:	615a      	str	r2, [r3, #20]
  p_fifo->p_write_addr = (char *)p_base_addr;
 8011384:	68fb      	ldr	r3, [r7, #12]
 8011386:	68ba      	ldr	r2, [r7, #8]
 8011388:	619a      	str	r2, [r3, #24]

  return (0);
 801138a:	2300      	movs	r3, #0
}
 801138c:	4618      	mov	r0, r3
 801138e:	3714      	adds	r7, #20
 8011390:	46bd      	mov	sp, r7
 8011392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011396:	4770      	bx	lr

08011398 <fifo_put>:
//!
//! \retval 0 if operate successfully, otherwise return -1.
//
//******************************************************************************************
int fifo_put(fifo_t *p_fifo, void *p_element)
{
 8011398:	b590      	push	{r4, r7, lr}
 801139a:	b087      	sub	sp, #28
 801139c:	af00      	add	r7, sp, #0
 801139e:	6078      	str	r0, [r7, #4]
 80113a0:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80113a2:	f3ef 8310 	mrs	r3, PRIMASK
 80113a6:	617b      	str	r3, [r7, #20]
  return(result);
 80113a8:	697b      	ldr	r3, [r7, #20]
  FIFO_CPU_SR_TYPE cpu_sr;
  ASSERT(p_fifo);
  ASSERT(p_element);

    //Interrupt Off;
  cpu_sr = FIFO_GET_CPU_SR();
 80113aa:	461c      	mov	r4, r3
  __ASM volatile ("cpsid i" : : : "memory");
 80113ac:	b672      	cpsid	i
}
 80113ae:	bf00      	nop
  FIFO_ENTER_CRITICAL();

  // Full ?
  if (0 == p_fifo->free_num)
 80113b0:	687b      	ldr	r3, [r7, #4]
 80113b2:	689b      	ldr	r3, [r3, #8]
 80113b4:	2b00      	cmp	r3, #0
 80113b6:	d029      	beq.n	801140c <fifo_put+0x74>
    goto end;
  }

  //! Copy Data

  if (p_fifo->p_write_addr > p_fifo->p_end_addr)
 80113b8:	687b      	ldr	r3, [r7, #4]
 80113ba:	699a      	ldr	r2, [r3, #24]
 80113bc:	687b      	ldr	r3, [r7, #4]
 80113be:	685b      	ldr	r3, [r3, #4]
 80113c0:	429a      	cmp	r2, r3
 80113c2:	d903      	bls.n	80113cc <fifo_put+0x34>
    p_fifo->p_write_addr = p_fifo->p_start_addr;
 80113c4:	687b      	ldr	r3, [r7, #4]
 80113c6:	681a      	ldr	r2, [r3, #0]
 80113c8:	687b      	ldr	r3, [r7, #4]
 80113ca:	619a      	str	r2, [r3, #24]

  memcpy(p_fifo->p_write_addr, p_element, p_fifo->unit_size);
 80113cc:	687b      	ldr	r3, [r7, #4]
 80113ce:	6998      	ldr	r0, [r3, #24]
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	691b      	ldr	r3, [r3, #16]
 80113d4:	461a      	mov	r2, r3
 80113d6:	6839      	ldr	r1, [r7, #0]
 80113d8:	f000 fb0e 	bl	80119f8 <memcpy>
  p_fifo->p_write_addr += p_fifo->unit_size;
 80113dc:	687b      	ldr	r3, [r7, #4]
 80113de:	699b      	ldr	r3, [r3, #24]
 80113e0:	687a      	ldr	r2, [r7, #4]
 80113e2:	6912      	ldr	r2, [r2, #16]
 80113e4:	441a      	add	r2, r3
 80113e6:	687b      	ldr	r3, [r7, #4]
 80113e8:	619a      	str	r2, [r3, #24]
  p_fifo->free_num--;
 80113ea:	687b      	ldr	r3, [r7, #4]
 80113ec:	689b      	ldr	r3, [r3, #8]
 80113ee:	1e5a      	subs	r2, r3, #1
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	609a      	str	r2, [r3, #8]
  p_fifo->used_num++;
 80113f4:	687b      	ldr	r3, [r7, #4]
 80113f6:	68db      	ldr	r3, [r3, #12]
 80113f8:	1c5a      	adds	r2, r3, #1
 80113fa:	687b      	ldr	r3, [r7, #4]
 80113fc:	60da      	str	r2, [r3, #12]
 80113fe:	613c      	str	r4, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011400:	693b      	ldr	r3, [r7, #16]
 8011402:	f383 8810 	msr	PRIMASK, r3
}
 8011406:	bf00      	nop
  //Interrupt On
  FIFO_RESTORE_CPU_SR(cpu_sr);
  return (0);
 8011408:	2300      	movs	r3, #0
 801140a:	e007      	b.n	801141c <fifo_put+0x84>
    goto end;
 801140c:	bf00      	nop
 801140e:	60fc      	str	r4, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011410:	68fb      	ldr	r3, [r7, #12]
 8011412:	f383 8810 	msr	PRIMASK, r3
}
 8011416:	bf00      	nop
end:
  //Interrupt On
  FIFO_RESTORE_CPU_SR(cpu_sr);
  return (-1);
 8011418:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801141c:	4618      	mov	r0, r3
 801141e:	371c      	adds	r7, #28
 8011420:	46bd      	mov	sp, r7
 8011422:	bd90      	pop	{r4, r7, pc}

08011424 <fifo_get>:
//!
//! \retval 0 if operate successfully, otherwise return -1.
//
//******************************************************************************************
int fifo_get(fifo_t *p_fifo, void *p_element)
{
 8011424:	b590      	push	{r4, r7, lr}
 8011426:	b087      	sub	sp, #28
 8011428:	af00      	add	r7, sp, #0
 801142a:	6078      	str	r0, [r7, #4]
 801142c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801142e:	f3ef 8310 	mrs	r3, PRIMASK
 8011432:	617b      	str	r3, [r7, #20]
  return(result);
 8011434:	697b      	ldr	r3, [r7, #20]
  //! Check input parameters.
  ASSERT(p_fifo);
  ASSERT(p_element);
  
      //Interrupt Off;
  cpu_sr = FIFO_GET_CPU_SR();
 8011436:	461c      	mov	r4, r3
  __ASM volatile ("cpsid i" : : : "memory");
 8011438:	b672      	cpsid	i
}
 801143a:	bf00      	nop
  FIFO_ENTER_CRITICAL();

  // Empty ?
  if (0 == p_fifo->used_num)
 801143c:	687b      	ldr	r3, [r7, #4]
 801143e:	68db      	ldr	r3, [r3, #12]
 8011440:	2b00      	cmp	r3, #0
 8011442:	d029      	beq.n	8011498 <fifo_get+0x74>
    goto end;
  }

  //! Copy Data

  if (p_fifo->p_read_addr > p_fifo->p_end_addr)
 8011444:	687b      	ldr	r3, [r7, #4]
 8011446:	695a      	ldr	r2, [r3, #20]
 8011448:	687b      	ldr	r3, [r7, #4]
 801144a:	685b      	ldr	r3, [r3, #4]
 801144c:	429a      	cmp	r2, r3
 801144e:	d903      	bls.n	8011458 <fifo_get+0x34>
  {
    p_fifo->p_read_addr = p_fifo->p_start_addr;
 8011450:	687b      	ldr	r3, [r7, #4]
 8011452:	681a      	ldr	r2, [r3, #0]
 8011454:	687b      	ldr	r3, [r7, #4]
 8011456:	615a      	str	r2, [r3, #20]
  }
  memcpy(p_element, p_fifo->p_read_addr, p_fifo->unit_size);
 8011458:	687b      	ldr	r3, [r7, #4]
 801145a:	6959      	ldr	r1, [r3, #20]
 801145c:	687b      	ldr	r3, [r7, #4]
 801145e:	691b      	ldr	r3, [r3, #16]
 8011460:	461a      	mov	r2, r3
 8011462:	6838      	ldr	r0, [r7, #0]
 8011464:	f000 fac8 	bl	80119f8 <memcpy>
  p_fifo->p_read_addr += p_fifo->unit_size;
 8011468:	687b      	ldr	r3, [r7, #4]
 801146a:	695b      	ldr	r3, [r3, #20]
 801146c:	687a      	ldr	r2, [r7, #4]
 801146e:	6912      	ldr	r2, [r2, #16]
 8011470:	441a      	add	r2, r3
 8011472:	687b      	ldr	r3, [r7, #4]
 8011474:	615a      	str	r2, [r3, #20]
  p_fifo->free_num++;
 8011476:	687b      	ldr	r3, [r7, #4]
 8011478:	689b      	ldr	r3, [r3, #8]
 801147a:	1c5a      	adds	r2, r3, #1
 801147c:	687b      	ldr	r3, [r7, #4]
 801147e:	609a      	str	r2, [r3, #8]
  p_fifo->used_num--;
 8011480:	687b      	ldr	r3, [r7, #4]
 8011482:	68db      	ldr	r3, [r3, #12]
 8011484:	1e5a      	subs	r2, r3, #1
 8011486:	687b      	ldr	r3, [r7, #4]
 8011488:	60da      	str	r2, [r3, #12]
 801148a:	613c      	str	r4, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801148c:	693b      	ldr	r3, [r7, #16]
 801148e:	f383 8810 	msr	PRIMASK, r3
}
 8011492:	bf00      	nop
  //Interrupt On
  FIFO_RESTORE_CPU_SR(cpu_sr);
  return (0);
 8011494:	2300      	movs	r3, #0
 8011496:	e007      	b.n	80114a8 <fifo_get+0x84>
    goto end;
 8011498:	bf00      	nop
 801149a:	60fc      	str	r4, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801149c:	68fb      	ldr	r3, [r7, #12]
 801149e:	f383 8810 	msr	PRIMASK, r3
}
 80114a2:	bf00      	nop
end:
  //Interrupt On
  FIFO_RESTORE_CPU_SR(cpu_sr);
  return (-1);
 80114a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80114a8:	4618      	mov	r0, r3
 80114aa:	371c      	adds	r7, #28
 80114ac:	46bd      	mov	sp, r7
 80114ae:	bd90      	pop	{r4, r7, pc}

080114b0 <fifo_get_noprotect>:
//!
//! \retval 0 if operate successfully, otherwise return -1.
//
//******************************************************************************************
int fifo_get_noprotect(fifo_t *p_fifo, void *p_element)
{
 80114b0:	b580      	push	{r7, lr}
 80114b2:	b082      	sub	sp, #8
 80114b4:	af00      	add	r7, sp, #0
 80114b6:	6078      	str	r0, [r7, #4]
 80114b8:	6039      	str	r1, [r7, #0]
  //! Check input parameters.
  ASSERT(p_fifo);
  ASSERT(p_element);

  // Empty ?
  if (0 == p_fifo->used_num)
 80114ba:	687b      	ldr	r3, [r7, #4]
 80114bc:	68db      	ldr	r3, [r3, #12]
 80114be:	2b00      	cmp	r3, #0
 80114c0:	d102      	bne.n	80114c8 <fifo_get_noprotect+0x18>
  {
    //! Error, FIFO is Empty!
    return (-1);
 80114c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80114c6:	e023      	b.n	8011510 <fifo_get_noprotect+0x60>
  }

  //! Copy Data
  if (p_fifo->p_read_addr > p_fifo->p_end_addr)
 80114c8:	687b      	ldr	r3, [r7, #4]
 80114ca:	695a      	ldr	r2, [r3, #20]
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	685b      	ldr	r3, [r3, #4]
 80114d0:	429a      	cmp	r2, r3
 80114d2:	d903      	bls.n	80114dc <fifo_get_noprotect+0x2c>
  {
    p_fifo->p_read_addr = p_fifo->p_start_addr;
 80114d4:	687b      	ldr	r3, [r7, #4]
 80114d6:	681a      	ldr	r2, [r3, #0]
 80114d8:	687b      	ldr	r3, [r7, #4]
 80114da:	615a      	str	r2, [r3, #20]
  }
  memcpy(p_element, p_fifo->p_read_addr, p_fifo->unit_size);
 80114dc:	687b      	ldr	r3, [r7, #4]
 80114de:	6959      	ldr	r1, [r3, #20]
 80114e0:	687b      	ldr	r3, [r7, #4]
 80114e2:	691b      	ldr	r3, [r3, #16]
 80114e4:	461a      	mov	r2, r3
 80114e6:	6838      	ldr	r0, [r7, #0]
 80114e8:	f000 fa86 	bl	80119f8 <memcpy>
  p_fifo->p_read_addr += p_fifo->unit_size;
 80114ec:	687b      	ldr	r3, [r7, #4]
 80114ee:	695b      	ldr	r3, [r3, #20]
 80114f0:	687a      	ldr	r2, [r7, #4]
 80114f2:	6912      	ldr	r2, [r2, #16]
 80114f4:	441a      	add	r2, r3
 80114f6:	687b      	ldr	r3, [r7, #4]
 80114f8:	615a      	str	r2, [r3, #20]
  p_fifo->free_num++;
 80114fa:	687b      	ldr	r3, [r7, #4]
 80114fc:	689b      	ldr	r3, [r3, #8]
 80114fe:	1c5a      	adds	r2, r3, #1
 8011500:	687b      	ldr	r3, [r7, #4]
 8011502:	609a      	str	r2, [r3, #8]
  p_fifo->used_num--;
 8011504:	687b      	ldr	r3, [r7, #4]
 8011506:	68db      	ldr	r3, [r3, #12]
 8011508:	1e5a      	subs	r2, r3, #1
 801150a:	687b      	ldr	r3, [r7, #4]
 801150c:	60da      	str	r2, [r3, #12]

  return (0);
 801150e:	2300      	movs	r3, #0
}
 8011510:	4618      	mov	r0, r3
 8011512:	3708      	adds	r7, #8
 8011514:	46bd      	mov	sp, r7
 8011516:	bd80      	pop	{r7, pc}

08011518 <fifo_is_empty>:
//! \retval - None-zero(true) if empty.
//!         - Zero(false) if not empty.
//
//******************************************************************************************
int fifo_is_empty(fifo_t *p_fifo)
{
 8011518:	b480      	push	{r7}
 801151a:	b083      	sub	sp, #12
 801151c:	af00      	add	r7, sp, #0
 801151e:	6078      	str	r0, [r7, #4]
  //! Check input parameter.
  ASSERT(p_fifo);

  return (0 == p_fifo->used_num);
 8011520:	687b      	ldr	r3, [r7, #4]
 8011522:	68db      	ldr	r3, [r3, #12]
 8011524:	2b00      	cmp	r3, #0
 8011526:	bf0c      	ite	eq
 8011528:	2301      	moveq	r3, #1
 801152a:	2300      	movne	r3, #0
 801152c:	b2db      	uxtb	r3, r3
}
 801152e:	4618      	mov	r0, r3
 8011530:	370c      	adds	r7, #12
 8011532:	46bd      	mov	sp, r7
 8011534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011538:	4770      	bx	lr

0801153a <fifo_is_full>:
//! \retval - None-zero(true) if full.
//!         - Zero(false) if not full.
//
//******************************************************************************************
int fifo_is_full(fifo_t *p_fifo)
{
 801153a:	b480      	push	{r7}
 801153c:	b083      	sub	sp, #12
 801153e:	af00      	add	r7, sp, #0
 8011540:	6078      	str	r0, [r7, #4]
  //! Check input parameter.
  ASSERT(p_fifo);

  return (0 == p_fifo->free_num);
 8011542:	687b      	ldr	r3, [r7, #4]
 8011544:	689b      	ldr	r3, [r3, #8]
 8011546:	2b00      	cmp	r3, #0
 8011548:	bf0c      	ite	eq
 801154a:	2301      	moveq	r3, #1
 801154c:	2300      	movne	r3, #0
 801154e:	b2db      	uxtb	r3, r3
}
 8011550:	4618      	mov	r0, r3
 8011552:	370c      	adds	r7, #12
 8011554:	46bd      	mov	sp, r7
 8011556:	f85d 7b04 	ldr.w	r7, [sp], #4
 801155a:	4770      	bx	lr

0801155c <TimerISR_Hook>:
//!         This callback function must be called interval
//!
//! \note   Typical 1ms interval
//
//******************************************************************************************
void TimerISR_Hook(void) {
 801155c:	b480      	push	{r7}
 801155e:	b083      	sub	sp, #12
 8011560:	af00      	add	r7, sp, #0
  for (uint8_t i = 1; i < TIMER_ELEMENT_NUM_MAX; i++) {
 8011562:	2301      	movs	r3, #1
 8011564:	71fb      	strb	r3, [r7, #7]
 8011566:	e019      	b.n	801159c <TimerISR_Hook+0x40>
    if (SoftTimer[i].handle != 0) {
 8011568:	79fb      	ldrb	r3, [r7, #7]
 801156a:	4a11      	ldr	r2, [pc, #68]	; (80115b0 <TimerISR_Hook+0x54>)
 801156c:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
 8011570:	2b00      	cmp	r3, #0
 8011572:	d010      	beq.n	8011596 <TimerISR_Hook+0x3a>
      if (SoftTimer[i].delay) {
 8011574:	79fb      	ldrb	r3, [r7, #7]
 8011576:	4a0e      	ldr	r2, [pc, #56]	; (80115b0 <TimerISR_Hook+0x54>)
 8011578:	00db      	lsls	r3, r3, #3
 801157a:	4413      	add	r3, r2
 801157c:	685b      	ldr	r3, [r3, #4]
 801157e:	2b00      	cmp	r3, #0
 8011580:	d009      	beq.n	8011596 <TimerISR_Hook+0x3a>
        SoftTimer[i].delay--;
 8011582:	79fa      	ldrb	r2, [r7, #7]
 8011584:	490a      	ldr	r1, [pc, #40]	; (80115b0 <TimerISR_Hook+0x54>)
 8011586:	00d3      	lsls	r3, r2, #3
 8011588:	440b      	add	r3, r1
 801158a:	685b      	ldr	r3, [r3, #4]
 801158c:	1e59      	subs	r1, r3, #1
 801158e:	4808      	ldr	r0, [pc, #32]	; (80115b0 <TimerISR_Hook+0x54>)
 8011590:	00d3      	lsls	r3, r2, #3
 8011592:	4403      	add	r3, r0
 8011594:	6059      	str	r1, [r3, #4]
  for (uint8_t i = 1; i < TIMER_ELEMENT_NUM_MAX; i++) {
 8011596:	79fb      	ldrb	r3, [r7, #7]
 8011598:	3301      	adds	r3, #1
 801159a:	71fb      	strb	r3, [r7, #7]
 801159c:	79fb      	ldrb	r3, [r7, #7]
 801159e:	2b13      	cmp	r3, #19
 80115a0:	d9e2      	bls.n	8011568 <TimerISR_Hook+0xc>
      }
    }
  }
}
 80115a2:	bf00      	nop
 80115a4:	bf00      	nop
 80115a6:	370c      	adds	r7, #12
 80115a8:	46bd      	mov	sp, r7
 80115aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115ae:	4770      	bx	lr
 80115b0:	20011de4 	.word	0x20011de4

080115b4 <soft_timer_init>:
//! \note
//!         - This function must be called first !.
//!
//
//******************************************************************************************
uint16_t soft_timer_init(void) {
 80115b4:	b480      	push	{r7}
 80115b6:	b083      	sub	sp, #12
 80115b8:	af00      	add	r7, sp, #0
  uint8_t i = 0;
 80115ba:	2300      	movs	r3, #0
 80115bc:	71fb      	strb	r3, [r7, #7]

  // Clear All Elements
  for (i = 1; i < TIMER_ELEMENT_NUM_MAX; i++) {
 80115be:	2301      	movs	r3, #1
 80115c0:	71fb      	strb	r3, [r7, #7]
 80115c2:	e00d      	b.n	80115e0 <soft_timer_init+0x2c>
    SoftTimer[i].handle = 0;
 80115c4:	79fb      	ldrb	r3, [r7, #7]
 80115c6:	4a0b      	ldr	r2, [pc, #44]	; (80115f4 <soft_timer_init+0x40>)
 80115c8:	2100      	movs	r1, #0
 80115ca:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
    SoftTimer[i].delay = 0;
 80115ce:	79fb      	ldrb	r3, [r7, #7]
 80115d0:	4a08      	ldr	r2, [pc, #32]	; (80115f4 <soft_timer_init+0x40>)
 80115d2:	00db      	lsls	r3, r3, #3
 80115d4:	4413      	add	r3, r2
 80115d6:	2200      	movs	r2, #0
 80115d8:	605a      	str	r2, [r3, #4]
  for (i = 1; i < TIMER_ELEMENT_NUM_MAX; i++) {
 80115da:	79fb      	ldrb	r3, [r7, #7]
 80115dc:	3301      	adds	r3, #1
 80115de:	71fb      	strb	r3, [r7, #7]
 80115e0:	79fb      	ldrb	r3, [r7, #7]
 80115e2:	2b13      	cmp	r3, #19
 80115e4:	d9ee      	bls.n	80115c4 <soft_timer_init+0x10>
  }

  return (SOFT_TIMER_SUCCESS);
 80115e6:	2300      	movs	r3, #0
}
 80115e8:	4618      	mov	r0, r3
 80115ea:	370c      	adds	r7, #12
 80115ec:	46bd      	mov	sp, r7
 80115ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115f2:	4770      	bx	lr
 80115f4:	20011de4 	.word	0x20011de4

080115f8 <soft_timer_req>:
//! \note
//!         - Timer handle only can be used once.
//!
//
//******************************************************************************************
uint16_t soft_timer_req(uint32_t Tick) {
 80115f8:	b480      	push	{r7}
 80115fa:	b087      	sub	sp, #28
 80115fc:	af00      	add	r7, sp, #0
 80115fe:	6078      	str	r0, [r7, #4]
  uint8_t i = 0;
 8011600:	2300      	movs	r3, #0
 8011602:	75fb      	strb	r3, [r7, #23]

  for (i = 1; i < TIMER_ELEMENT_NUM_MAX; i++) {
 8011604:	2301      	movs	r3, #1
 8011606:	75fb      	strb	r3, [r7, #23]
 8011608:	e024      	b.n	8011654 <soft_timer_req+0x5c>
    if (SoftTimer[i].handle == 0) {
 801160a:	7dfb      	ldrb	r3, [r7, #23]
 801160c:	4a16      	ldr	r2, [pc, #88]	; (8011668 <soft_timer_req+0x70>)
 801160e:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
 8011612:	2b00      	cmp	r3, #0
 8011614:	d11b      	bne.n	801164e <soft_timer_req+0x56>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8011616:	f3ef 8310 	mrs	r3, PRIMASK
 801161a:	60bb      	str	r3, [r7, #8]
  return(result);
 801161c:	68bb      	ldr	r3, [r7, #8]
      CRITICAL_SETCION_ENTER();
 801161e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8011620:	b672      	cpsid	i
}
 8011622:	bf00      	nop

      SoftTimer[i].handle = i;
 8011624:	7dfb      	ldrb	r3, [r7, #23]
 8011626:	7dfa      	ldrb	r2, [r7, #23]
 8011628:	b291      	uxth	r1, r2
 801162a:	4a0f      	ldr	r2, [pc, #60]	; (8011668 <soft_timer_req+0x70>)
 801162c:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
      SoftTimer[i].delay = Tick;
 8011630:	7dfb      	ldrb	r3, [r7, #23]
 8011632:	4a0d      	ldr	r2, [pc, #52]	; (8011668 <soft_timer_req+0x70>)
 8011634:	00db      	lsls	r3, r3, #3
 8011636:	4413      	add	r3, r2
 8011638:	687a      	ldr	r2, [r7, #4]
 801163a:	605a      	str	r2, [r3, #4]
 801163c:	693b      	ldr	r3, [r7, #16]
 801163e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011640:	68fb      	ldr	r3, [r7, #12]
 8011642:	f383 8810 	msr	PRIMASK, r3
}
 8011646:	bf00      	nop

      CRITICAL_SETCION_EXIT();

      return (i);
 8011648:	7dfb      	ldrb	r3, [r7, #23]
 801164a:	b29b      	uxth	r3, r3
 801164c:	e006      	b.n	801165c <soft_timer_req+0x64>
  for (i = 1; i < TIMER_ELEMENT_NUM_MAX; i++) {
 801164e:	7dfb      	ldrb	r3, [r7, #23]
 8011650:	3301      	adds	r3, #1
 8011652:	75fb      	strb	r3, [r7, #23]
 8011654:	7dfb      	ldrb	r3, [r7, #23]
 8011656:	2b13      	cmp	r3, #19
 8011658:	d9d7      	bls.n	801160a <soft_timer_req+0x12>
    }
  }

  return (0);
 801165a:	2300      	movs	r3, #0
}
 801165c:	4618      	mov	r0, r3
 801165e:	371c      	adds	r7, #28
 8011660:	46bd      	mov	sp, r7
 8011662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011666:	4770      	bx	lr
 8011668:	20011de4 	.word	0x20011de4

0801166c <soft_timer_update>:
//!         - Zero                     success
//!         - Non-Zero                 failure
//!
//
//******************************************************************************************
uint16_t soft_timer_update(uint32_t Id, uint32_t Tick) {
 801166c:	b480      	push	{r7}
 801166e:	b087      	sub	sp, #28
 8011670:	af00      	add	r7, sp, #0
 8011672:	6078      	str	r0, [r7, #4]
 8011674:	6039      	str	r1, [r7, #0]
  for (uint8_t i = 1; i < TIMER_ELEMENT_NUM_MAX; i++) {
 8011676:	2301      	movs	r3, #1
 8011678:	75fb      	strb	r3, [r7, #23]
 801167a:	e01f      	b.n	80116bc <soft_timer_update+0x50>
    if (SoftTimer[i].handle == Id) {
 801167c:	7dfb      	ldrb	r3, [r7, #23]
 801167e:	4a14      	ldr	r2, [pc, #80]	; (80116d0 <soft_timer_update+0x64>)
 8011680:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
 8011684:	461a      	mov	r2, r3
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	4293      	cmp	r3, r2
 801168a:	d114      	bne.n	80116b6 <soft_timer_update+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801168c:	f3ef 8310 	mrs	r3, PRIMASK
 8011690:	60bb      	str	r3, [r7, #8]
  return(result);
 8011692:	68bb      	ldr	r3, [r7, #8]
      CRITICAL_SETCION_ENTER();
 8011694:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8011696:	b672      	cpsid	i
}
 8011698:	bf00      	nop

      SoftTimer[i].delay = Tick;
 801169a:	7dfb      	ldrb	r3, [r7, #23]
 801169c:	4a0c      	ldr	r2, [pc, #48]	; (80116d0 <soft_timer_update+0x64>)
 801169e:	00db      	lsls	r3, r3, #3
 80116a0:	4413      	add	r3, r2
 80116a2:	683a      	ldr	r2, [r7, #0]
 80116a4:	605a      	str	r2, [r3, #4]
 80116a6:	693b      	ldr	r3, [r7, #16]
 80116a8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80116aa:	68fb      	ldr	r3, [r7, #12]
 80116ac:	f383 8810 	msr	PRIMASK, r3
}
 80116b0:	bf00      	nop

      CRITICAL_SETCION_EXIT();

      // Success
      return (0);
 80116b2:	2300      	movs	r3, #0
 80116b4:	e006      	b.n	80116c4 <soft_timer_update+0x58>
  for (uint8_t i = 1; i < TIMER_ELEMENT_NUM_MAX; i++) {
 80116b6:	7dfb      	ldrb	r3, [r7, #23]
 80116b8:	3301      	adds	r3, #1
 80116ba:	75fb      	strb	r3, [r7, #23]
 80116bc:	7dfb      	ldrb	r3, [r7, #23]
 80116be:	2b13      	cmp	r3, #19
 80116c0:	d9dc      	bls.n	801167c <soft_timer_update+0x10>
    }
  }

  // Failure
  return (1);
 80116c2:	2301      	movs	r3, #1
}
 80116c4:	4618      	mov	r0, r3
 80116c6:	371c      	adds	r7, #28
 80116c8:	46bd      	mov	sp, r7
 80116ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116ce:	4770      	bx	lr
 80116d0:	20011de4 	.word	0x20011de4

080116d4 <soft_timer_check>:
//!         handle.
//!         - Timer handle only can be used once.
//!
//
//******************************************************************************************
uint16_t soft_timer_check(uint16_t Handle) {
 80116d4:	b480      	push	{r7}
 80116d6:	b087      	sub	sp, #28
 80116d8:	af00      	add	r7, sp, #0
 80116da:	4603      	mov	r3, r0
 80116dc:	80fb      	strh	r3, [r7, #6]
  uint16_t retval = SOFT_TIMER_ERR;
 80116de:	2303      	movs	r3, #3
 80116e0:	82fb      	strh	r3, [r7, #22]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80116e2:	f3ef 8310 	mrs	r3, PRIMASK
 80116e6:	60fb      	str	r3, [r7, #12]
  return(result);
 80116e8:	68fb      	ldr	r3, [r7, #12]

  CRITICAL_SETCION_ENTER();
 80116ea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80116ec:	b672      	cpsid	i
}
 80116ee:	bf00      	nop
  if (SoftTimer[Handle].handle == Handle) {
 80116f0:	88fb      	ldrh	r3, [r7, #6]
 80116f2:	4a0f      	ldr	r2, [pc, #60]	; (8011730 <soft_timer_check+0x5c>)
 80116f4:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
 80116f8:	88fa      	ldrh	r2, [r7, #6]
 80116fa:	429a      	cmp	r2, r3
 80116fc:	d10b      	bne.n	8011716 <soft_timer_check+0x42>
    if (SoftTimer[Handle].delay) {
 80116fe:	88fb      	ldrh	r3, [r7, #6]
 8011700:	4a0b      	ldr	r2, [pc, #44]	; (8011730 <soft_timer_check+0x5c>)
 8011702:	00db      	lsls	r3, r3, #3
 8011704:	4413      	add	r3, r2
 8011706:	685b      	ldr	r3, [r3, #4]
 8011708:	2b00      	cmp	r3, #0
 801170a:	d002      	beq.n	8011712 <soft_timer_check+0x3e>
      retval = SOFT_TIMER_ING;
 801170c:	2301      	movs	r3, #1
 801170e:	82fb      	strh	r3, [r7, #22]
 8011710:	e001      	b.n	8011716 <soft_timer_check+0x42>
    } else {
      retval = SOFT_TIMER_TIMEOUT;
 8011712:	2302      	movs	r3, #2
 8011714:	82fb      	strh	r3, [r7, #22]
 8011716:	693b      	ldr	r3, [r7, #16]
 8011718:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801171a:	68bb      	ldr	r3, [r7, #8]
 801171c:	f383 8810 	msr	PRIMASK, r3
}
 8011720:	bf00      	nop
    }
  }
  CRITICAL_SETCION_EXIT();

  return (retval);
 8011722:	8afb      	ldrh	r3, [r7, #22]
}
 8011724:	4618      	mov	r0, r3
 8011726:	371c      	adds	r7, #28
 8011728:	46bd      	mov	sp, r7
 801172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801172e:	4770      	bx	lr
 8011730:	20011de4 	.word	0x20011de4

08011734 <usb_vcp_init>:
uint8_t usb_tx_fifo_buff[APP_TX_DATA_SIZE];
static usb_vcp_call_back_f usb_vcp_call_back[USB_REC_MAX_NUM];

static bool _fifo_flush_running = false;

void usb_vcp_init(bool use_fifo) {
 8011734:	b580      	push	{r7, lr}
 8011736:	b082      	sub	sp, #8
 8011738:	af00      	add	r7, sp, #0
 801173a:	4603      	mov	r3, r0
 801173c:	71fb      	strb	r3, [r7, #7]
  if (use_fifo) {
 801173e:	79fb      	ldrb	r3, [r7, #7]
 8011740:	2b00      	cmp	r3, #0
 8011742:	d003      	beq.n	801174c <usb_vcp_init+0x18>
    _usb_vcp_use_fifo = true;
 8011744:	4b0f      	ldr	r3, [pc, #60]	; (8011784 <usb_vcp_init+0x50>)
 8011746:	2201      	movs	r2, #1
 8011748:	701a      	strb	r2, [r3, #0]
 801174a:	e002      	b.n	8011752 <usb_vcp_init+0x1e>
  } else {
    _usb_vcp_use_fifo = false;
 801174c:	4b0d      	ldr	r3, [pc, #52]	; (8011784 <usb_vcp_init+0x50>)
 801174e:	2200      	movs	r2, #0
 8011750:	701a      	strb	r2, [r3, #0]
  }
  if (_usb_vcp_use_fifo) {
 8011752:	4b0c      	ldr	r3, [pc, #48]	; (8011784 <usb_vcp_init+0x50>)
 8011754:	781b      	ldrb	r3, [r3, #0]
 8011756:	2b00      	cmp	r3, #0
 8011758:	d00f      	beq.n	801177a <usb_vcp_init+0x46>
    fifo_s_init(&usb_tx_fifo, usb_tx_fifo_buff, 4096);
 801175a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801175e:	490a      	ldr	r1, [pc, #40]	; (8011788 <usb_vcp_init+0x54>)
 8011760:	480a      	ldr	r0, [pc, #40]	; (801178c <usb_vcp_init+0x58>)
 8011762:	f7ff fdcd 	bl	8011300 <fifo_s_init>
    if (!_fifo_flush_running) {
 8011766:	4b0a      	ldr	r3, [pc, #40]	; (8011790 <usb_vcp_init+0x5c>)
 8011768:	781b      	ldrb	r3, [r3, #0]
 801176a:	f083 0301 	eor.w	r3, r3, #1
 801176e:	b2db      	uxtb	r3, r3
 8011770:	2b00      	cmp	r3, #0
 8011772:	d002      	beq.n	801177a <usb_vcp_init+0x46>
      // tx_flush_init(); // Run Fifo thread here.
      _fifo_flush_running = true;
 8011774:	4b06      	ldr	r3, [pc, #24]	; (8011790 <usb_vcp_init+0x5c>)
 8011776:	2201      	movs	r2, #1
 8011778:	701a      	strb	r2, [r3, #0]
    }
  }
}
 801177a:	bf00      	nop
 801177c:	3708      	adds	r7, #8
 801177e:	46bd      	mov	sp, r7
 8011780:	bd80      	pop	{r7, pc}
 8011782:	bf00      	nop
 8011784:	20000140 	.word	0x20000140
 8011788:	20011e9c 	.word	0x20011e9c
 801178c:	20011e84 	.word	0x20011e84
 8011790:	20012eb0 	.word	0x20012eb0

08011794 <usb_vcp_receive_processing>:

void usb_vcp_receive_processing(uint8_t *Buf, uint32_t *Len) {
 8011794:	b580      	push	{r7, lr}
 8011796:	b084      	sub	sp, #16
 8011798:	af00      	add	r7, sp, #0
 801179a:	6078      	str	r0, [r7, #4]
 801179c:	6039      	str	r1, [r7, #0]
  for (int i = 0; i < USB_REC_MAX_NUM; i++) {
 801179e:	2300      	movs	r3, #0
 80117a0:	60fb      	str	r3, [r7, #12]
 80117a2:	e011      	b.n	80117c8 <usb_vcp_receive_processing+0x34>
    if (usb_vcp_call_back[i] != NULL) {
 80117a4:	4a0f      	ldr	r2, [pc, #60]	; (80117e4 <usb_vcp_receive_processing+0x50>)
 80117a6:	68fb      	ldr	r3, [r7, #12]
 80117a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80117ac:	2b00      	cmp	r3, #0
 80117ae:	d008      	beq.n	80117c2 <usb_vcp_receive_processing+0x2e>
      (*usb_vcp_call_back[i])(Buf, *Len);
 80117b0:	4a0c      	ldr	r2, [pc, #48]	; (80117e4 <usb_vcp_receive_processing+0x50>)
 80117b2:	68fb      	ldr	r3, [r7, #12]
 80117b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80117b8:	683a      	ldr	r2, [r7, #0]
 80117ba:	6812      	ldr	r2, [r2, #0]
 80117bc:	4611      	mov	r1, r2
 80117be:	6878      	ldr	r0, [r7, #4]
 80117c0:	4798      	blx	r3
  for (int i = 0; i < USB_REC_MAX_NUM; i++) {
 80117c2:	68fb      	ldr	r3, [r7, #12]
 80117c4:	3301      	adds	r3, #1
 80117c6:	60fb      	str	r3, [r7, #12]
 80117c8:	68fb      	ldr	r3, [r7, #12]
 80117ca:	2b04      	cmp	r3, #4
 80117cc:	ddea      	ble.n	80117a4 <usb_vcp_receive_processing+0x10>
    }
  }
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80117ce:	6879      	ldr	r1, [r7, #4]
 80117d0:	4805      	ldr	r0, [pc, #20]	; (80117e8 <usb_vcp_receive_processing+0x54>)
 80117d2:	f7f8 fa51 	bl	8009c78 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80117d6:	4804      	ldr	r0, [pc, #16]	; (80117e8 <usb_vcp_receive_processing+0x54>)
 80117d8:	f7f8 faac 	bl	8009d34 <USBD_CDC_ReceivePacket>
  return;
 80117dc:	bf00      	nop
}
 80117de:	3710      	adds	r7, #16
 80117e0:	46bd      	mov	sp, r7
 80117e2:	bd80      	pop	{r7, pc}
 80117e4:	20012e9c 	.word	0x20012e9c
 80117e8:	2000f688 	.word	0x2000f688

080117ec <usb_vcp_transmit_callback_processing>:

int8_t usb_vcp_transmit_callback_processing(
    uint8_t *Buf, uint32_t *Len) { // This function may not really work
 80117ec:	b480      	push	{r7}
 80117ee:	b083      	sub	sp, #12
 80117f0:	af00      	add	r7, sp, #0
 80117f2:	6078      	str	r0, [r7, #4]
 80117f4:	6039      	str	r1, [r7, #0]
  //  //Untested so commented out to prevent issue.
  //  if (_usb_tx_need_flushing) {
  //	usb_tx_flush(NULL);
  //  }
  return USBD_OK;
 80117f6:	2300      	movs	r3, #0
}
 80117f8:	4618      	mov	r0, r3
 80117fa:	370c      	adds	r7, #12
 80117fc:	46bd      	mov	sp, r7
 80117fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011802:	4770      	bx	lr

08011804 <usb_vcp_rx_callback_register>:
  fifo_s_puts(&usb_tx_fifo, (char *)Buf, Len);
  usb_tx_flush(NULL);
  return USBD_OK;
}

int32_t usb_vcp_rx_callback_register(usb_vcp_call_back_f fun) {
 8011804:	b480      	push	{r7}
 8011806:	b085      	sub	sp, #20
 8011808:	af00      	add	r7, sp, #0
 801180a:	6078      	str	r0, [r7, #4]
  for (int i = 0; i < USB_REC_MAX_NUM; i++) {
 801180c:	2300      	movs	r3, #0
 801180e:	60fb      	str	r3, [r7, #12]
 8011810:	e00f      	b.n	8011832 <usb_vcp_rx_callback_register+0x2e>
    if (usb_vcp_call_back[i] == NULL) {
 8011812:	4a0d      	ldr	r2, [pc, #52]	; (8011848 <usb_vcp_rx_callback_register+0x44>)
 8011814:	68fb      	ldr	r3, [r7, #12]
 8011816:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801181a:	2b00      	cmp	r3, #0
 801181c:	d106      	bne.n	801182c <usb_vcp_rx_callback_register+0x28>
      usb_vcp_call_back[i] = fun;
 801181e:	490a      	ldr	r1, [pc, #40]	; (8011848 <usb_vcp_rx_callback_register+0x44>)
 8011820:	68fb      	ldr	r3, [r7, #12]
 8011822:	687a      	ldr	r2, [r7, #4]
 8011824:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      return USBD_OK;
 8011828:	2300      	movs	r3, #0
 801182a:	e006      	b.n	801183a <usb_vcp_rx_callback_register+0x36>
  for (int i = 0; i < USB_REC_MAX_NUM; i++) {
 801182c:	68fb      	ldr	r3, [r7, #12]
 801182e:	3301      	adds	r3, #1
 8011830:	60fb      	str	r3, [r7, #12]
 8011832:	68fb      	ldr	r3, [r7, #12]
 8011834:	2b04      	cmp	r3, #4
 8011836:	ddec      	ble.n	8011812 <usb_vcp_rx_callback_register+0xe>
    }
  }
  return USBD_FAIL;
 8011838:	2303      	movs	r3, #3
}
 801183a:	4618      	mov	r0, r3
 801183c:	3714      	adds	r7, #20
 801183e:	46bd      	mov	sp, r7
 8011840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011844:	4770      	bx	lr
 8011846:	bf00      	nop
 8011848:	20012e9c 	.word	0x20012e9c

0801184c <force_send>:
    usb_tx_flush(NULL);
  }
  return 0;
}

void force_send(uint8_t *Buf, uint16_t Len) {
 801184c:	b580      	push	{r7, lr}
 801184e:	b084      	sub	sp, #16
 8011850:	af00      	add	r7, sp, #0
 8011852:	6078      	str	r0, [r7, #4]
 8011854:	460b      	mov	r3, r1
 8011856:	807b      	strh	r3, [r7, #2]
  USBD_CDC_HandleTypeDef *hcdc =
 8011858:	4b08      	ldr	r3, [pc, #32]	; (801187c <force_send+0x30>)
 801185a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801185e:	60fb      	str	r3, [r7, #12]
      (USBD_CDC_HandleTypeDef *)hUsbDeviceFS.pClassData;
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8011860:	887b      	ldrh	r3, [r7, #2]
 8011862:	461a      	mov	r2, r3
 8011864:	6879      	ldr	r1, [r7, #4]
 8011866:	4805      	ldr	r0, [pc, #20]	; (801187c <force_send+0x30>)
 8011868:	f7f8 f9e4 	bl	8009c34 <USBD_CDC_SetTxBuffer>
  USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 801186c:	4803      	ldr	r0, [pc, #12]	; (801187c <force_send+0x30>)
 801186e:	f7f8 fa21 	bl	8009cb4 <USBD_CDC_TransmitPacket>
}
 8011872:	bf00      	nop
 8011874:	3710      	adds	r7, #16
 8011876:	46bd      	mov	sp, r7
 8011878:	bd80      	pop	{r7, pc}
 801187a:	bf00      	nop
 801187c:	2000f688 	.word	0x2000f688

08011880 <__malloc_lock>:
 8011880:	4801      	ldr	r0, [pc, #4]	; (8011888 <__malloc_lock+0x8>)
 8011882:	f000 b8b7 	b.w	80119f4 <__retarget_lock_acquire_recursive>
 8011886:	bf00      	nop
 8011888:	20012ff0 	.word	0x20012ff0

0801188c <__malloc_unlock>:
 801188c:	4801      	ldr	r0, [pc, #4]	; (8011894 <__malloc_unlock+0x8>)
 801188e:	f000 b8b2 	b.w	80119f6 <__retarget_lock_release_recursive>
 8011892:	bf00      	nop
 8011894:	20012ff0 	.word	0x20012ff0

08011898 <strncmp>:
 8011898:	b510      	push	{r4, lr}
 801189a:	b16a      	cbz	r2, 80118b8 <strncmp+0x20>
 801189c:	3901      	subs	r1, #1
 801189e:	1884      	adds	r4, r0, r2
 80118a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80118a4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80118a8:	429a      	cmp	r2, r3
 80118aa:	d103      	bne.n	80118b4 <strncmp+0x1c>
 80118ac:	42a0      	cmp	r0, r4
 80118ae:	d001      	beq.n	80118b4 <strncmp+0x1c>
 80118b0:	2a00      	cmp	r2, #0
 80118b2:	d1f5      	bne.n	80118a0 <strncmp+0x8>
 80118b4:	1ad0      	subs	r0, r2, r3
 80118b6:	bd10      	pop	{r4, pc}
 80118b8:	4610      	mov	r0, r2
 80118ba:	e7fc      	b.n	80118b6 <strncmp+0x1e>

080118bc <strncpy>:
 80118bc:	b510      	push	{r4, lr}
 80118be:	3901      	subs	r1, #1
 80118c0:	4603      	mov	r3, r0
 80118c2:	b132      	cbz	r2, 80118d2 <strncpy+0x16>
 80118c4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80118c8:	f803 4b01 	strb.w	r4, [r3], #1
 80118cc:	3a01      	subs	r2, #1
 80118ce:	2c00      	cmp	r4, #0
 80118d0:	d1f7      	bne.n	80118c2 <strncpy+0x6>
 80118d2:	441a      	add	r2, r3
 80118d4:	2100      	movs	r1, #0
 80118d6:	4293      	cmp	r3, r2
 80118d8:	d100      	bne.n	80118dc <strncpy+0x20>
 80118da:	bd10      	pop	{r4, pc}
 80118dc:	f803 1b01 	strb.w	r1, [r3], #1
 80118e0:	e7f9      	b.n	80118d6 <strncpy+0x1a>

080118e2 <memset>:
 80118e2:	4402      	add	r2, r0
 80118e4:	4603      	mov	r3, r0
 80118e6:	4293      	cmp	r3, r2
 80118e8:	d100      	bne.n	80118ec <memset+0xa>
 80118ea:	4770      	bx	lr
 80118ec:	f803 1b01 	strb.w	r1, [r3], #1
 80118f0:	e7f9      	b.n	80118e6 <memset+0x4>
	...

080118f4 <_reclaim_reent>:
 80118f4:	4b29      	ldr	r3, [pc, #164]	; (801199c <_reclaim_reent+0xa8>)
 80118f6:	681b      	ldr	r3, [r3, #0]
 80118f8:	4283      	cmp	r3, r0
 80118fa:	b570      	push	{r4, r5, r6, lr}
 80118fc:	4604      	mov	r4, r0
 80118fe:	d04b      	beq.n	8011998 <_reclaim_reent+0xa4>
 8011900:	69c3      	ldr	r3, [r0, #28]
 8011902:	b143      	cbz	r3, 8011916 <_reclaim_reent+0x22>
 8011904:	68db      	ldr	r3, [r3, #12]
 8011906:	2b00      	cmp	r3, #0
 8011908:	d144      	bne.n	8011994 <_reclaim_reent+0xa0>
 801190a:	69e3      	ldr	r3, [r4, #28]
 801190c:	6819      	ldr	r1, [r3, #0]
 801190e:	b111      	cbz	r1, 8011916 <_reclaim_reent+0x22>
 8011910:	4620      	mov	r0, r4
 8011912:	f000 f87f 	bl	8011a14 <_free_r>
 8011916:	6961      	ldr	r1, [r4, #20]
 8011918:	b111      	cbz	r1, 8011920 <_reclaim_reent+0x2c>
 801191a:	4620      	mov	r0, r4
 801191c:	f000 f87a 	bl	8011a14 <_free_r>
 8011920:	69e1      	ldr	r1, [r4, #28]
 8011922:	b111      	cbz	r1, 801192a <_reclaim_reent+0x36>
 8011924:	4620      	mov	r0, r4
 8011926:	f000 f875 	bl	8011a14 <_free_r>
 801192a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801192c:	b111      	cbz	r1, 8011934 <_reclaim_reent+0x40>
 801192e:	4620      	mov	r0, r4
 8011930:	f000 f870 	bl	8011a14 <_free_r>
 8011934:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011936:	b111      	cbz	r1, 801193e <_reclaim_reent+0x4a>
 8011938:	4620      	mov	r0, r4
 801193a:	f000 f86b 	bl	8011a14 <_free_r>
 801193e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8011940:	b111      	cbz	r1, 8011948 <_reclaim_reent+0x54>
 8011942:	4620      	mov	r0, r4
 8011944:	f000 f866 	bl	8011a14 <_free_r>
 8011948:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801194a:	b111      	cbz	r1, 8011952 <_reclaim_reent+0x5e>
 801194c:	4620      	mov	r0, r4
 801194e:	f000 f861 	bl	8011a14 <_free_r>
 8011952:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8011954:	b111      	cbz	r1, 801195c <_reclaim_reent+0x68>
 8011956:	4620      	mov	r0, r4
 8011958:	f000 f85c 	bl	8011a14 <_free_r>
 801195c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 801195e:	b111      	cbz	r1, 8011966 <_reclaim_reent+0x72>
 8011960:	4620      	mov	r0, r4
 8011962:	f000 f857 	bl	8011a14 <_free_r>
 8011966:	6a23      	ldr	r3, [r4, #32]
 8011968:	b1b3      	cbz	r3, 8011998 <_reclaim_reent+0xa4>
 801196a:	4620      	mov	r0, r4
 801196c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011970:	4718      	bx	r3
 8011972:	5949      	ldr	r1, [r1, r5]
 8011974:	b941      	cbnz	r1, 8011988 <_reclaim_reent+0x94>
 8011976:	3504      	adds	r5, #4
 8011978:	69e3      	ldr	r3, [r4, #28]
 801197a:	2d80      	cmp	r5, #128	; 0x80
 801197c:	68d9      	ldr	r1, [r3, #12]
 801197e:	d1f8      	bne.n	8011972 <_reclaim_reent+0x7e>
 8011980:	4620      	mov	r0, r4
 8011982:	f000 f847 	bl	8011a14 <_free_r>
 8011986:	e7c0      	b.n	801190a <_reclaim_reent+0x16>
 8011988:	680e      	ldr	r6, [r1, #0]
 801198a:	4620      	mov	r0, r4
 801198c:	f000 f842 	bl	8011a14 <_free_r>
 8011990:	4631      	mov	r1, r6
 8011992:	e7ef      	b.n	8011974 <_reclaim_reent+0x80>
 8011994:	2500      	movs	r5, #0
 8011996:	e7ef      	b.n	8011978 <_reclaim_reent+0x84>
 8011998:	bd70      	pop	{r4, r5, r6, pc}
 801199a:	bf00      	nop
 801199c:	20000190 	.word	0x20000190

080119a0 <__errno>:
 80119a0:	4b01      	ldr	r3, [pc, #4]	; (80119a8 <__errno+0x8>)
 80119a2:	6818      	ldr	r0, [r3, #0]
 80119a4:	4770      	bx	lr
 80119a6:	bf00      	nop
 80119a8:	20000190 	.word	0x20000190

080119ac <__libc_init_array>:
 80119ac:	b570      	push	{r4, r5, r6, lr}
 80119ae:	4d0d      	ldr	r5, [pc, #52]	; (80119e4 <__libc_init_array+0x38>)
 80119b0:	4c0d      	ldr	r4, [pc, #52]	; (80119e8 <__libc_init_array+0x3c>)
 80119b2:	1b64      	subs	r4, r4, r5
 80119b4:	10a4      	asrs	r4, r4, #2
 80119b6:	2600      	movs	r6, #0
 80119b8:	42a6      	cmp	r6, r4
 80119ba:	d109      	bne.n	80119d0 <__libc_init_array+0x24>
 80119bc:	4d0b      	ldr	r5, [pc, #44]	; (80119ec <__libc_init_array+0x40>)
 80119be:	4c0c      	ldr	r4, [pc, #48]	; (80119f0 <__libc_init_array+0x44>)
 80119c0:	f001 fea2 	bl	8013708 <_init>
 80119c4:	1b64      	subs	r4, r4, r5
 80119c6:	10a4      	asrs	r4, r4, #2
 80119c8:	2600      	movs	r6, #0
 80119ca:	42a6      	cmp	r6, r4
 80119cc:	d105      	bne.n	80119da <__libc_init_array+0x2e>
 80119ce:	bd70      	pop	{r4, r5, r6, pc}
 80119d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80119d4:	4798      	blx	r3
 80119d6:	3601      	adds	r6, #1
 80119d8:	e7ee      	b.n	80119b8 <__libc_init_array+0xc>
 80119da:	f855 3b04 	ldr.w	r3, [r5], #4
 80119de:	4798      	blx	r3
 80119e0:	3601      	adds	r6, #1
 80119e2:	e7f2      	b.n	80119ca <__libc_init_array+0x1e>
 80119e4:	08013b08 	.word	0x08013b08
 80119e8:	08013b08 	.word	0x08013b08
 80119ec:	08013b08 	.word	0x08013b08
 80119f0:	08013b0c 	.word	0x08013b0c

080119f4 <__retarget_lock_acquire_recursive>:
 80119f4:	4770      	bx	lr

080119f6 <__retarget_lock_release_recursive>:
 80119f6:	4770      	bx	lr

080119f8 <memcpy>:
 80119f8:	440a      	add	r2, r1
 80119fa:	4291      	cmp	r1, r2
 80119fc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8011a00:	d100      	bne.n	8011a04 <memcpy+0xc>
 8011a02:	4770      	bx	lr
 8011a04:	b510      	push	{r4, lr}
 8011a06:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011a0a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011a0e:	4291      	cmp	r1, r2
 8011a10:	d1f9      	bne.n	8011a06 <memcpy+0xe>
 8011a12:	bd10      	pop	{r4, pc}

08011a14 <_free_r>:
 8011a14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011a16:	2900      	cmp	r1, #0
 8011a18:	d044      	beq.n	8011aa4 <_free_r+0x90>
 8011a1a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011a1e:	9001      	str	r0, [sp, #4]
 8011a20:	2b00      	cmp	r3, #0
 8011a22:	f1a1 0404 	sub.w	r4, r1, #4
 8011a26:	bfb8      	it	lt
 8011a28:	18e4      	addlt	r4, r4, r3
 8011a2a:	f7ff ff29 	bl	8011880 <__malloc_lock>
 8011a2e:	4a1e      	ldr	r2, [pc, #120]	; (8011aa8 <_free_r+0x94>)
 8011a30:	9801      	ldr	r0, [sp, #4]
 8011a32:	6813      	ldr	r3, [r2, #0]
 8011a34:	b933      	cbnz	r3, 8011a44 <_free_r+0x30>
 8011a36:	6063      	str	r3, [r4, #4]
 8011a38:	6014      	str	r4, [r2, #0]
 8011a3a:	b003      	add	sp, #12
 8011a3c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011a40:	f7ff bf24 	b.w	801188c <__malloc_unlock>
 8011a44:	42a3      	cmp	r3, r4
 8011a46:	d908      	bls.n	8011a5a <_free_r+0x46>
 8011a48:	6825      	ldr	r5, [r4, #0]
 8011a4a:	1961      	adds	r1, r4, r5
 8011a4c:	428b      	cmp	r3, r1
 8011a4e:	bf01      	itttt	eq
 8011a50:	6819      	ldreq	r1, [r3, #0]
 8011a52:	685b      	ldreq	r3, [r3, #4]
 8011a54:	1949      	addeq	r1, r1, r5
 8011a56:	6021      	streq	r1, [r4, #0]
 8011a58:	e7ed      	b.n	8011a36 <_free_r+0x22>
 8011a5a:	461a      	mov	r2, r3
 8011a5c:	685b      	ldr	r3, [r3, #4]
 8011a5e:	b10b      	cbz	r3, 8011a64 <_free_r+0x50>
 8011a60:	42a3      	cmp	r3, r4
 8011a62:	d9fa      	bls.n	8011a5a <_free_r+0x46>
 8011a64:	6811      	ldr	r1, [r2, #0]
 8011a66:	1855      	adds	r5, r2, r1
 8011a68:	42a5      	cmp	r5, r4
 8011a6a:	d10b      	bne.n	8011a84 <_free_r+0x70>
 8011a6c:	6824      	ldr	r4, [r4, #0]
 8011a6e:	4421      	add	r1, r4
 8011a70:	1854      	adds	r4, r2, r1
 8011a72:	42a3      	cmp	r3, r4
 8011a74:	6011      	str	r1, [r2, #0]
 8011a76:	d1e0      	bne.n	8011a3a <_free_r+0x26>
 8011a78:	681c      	ldr	r4, [r3, #0]
 8011a7a:	685b      	ldr	r3, [r3, #4]
 8011a7c:	6053      	str	r3, [r2, #4]
 8011a7e:	440c      	add	r4, r1
 8011a80:	6014      	str	r4, [r2, #0]
 8011a82:	e7da      	b.n	8011a3a <_free_r+0x26>
 8011a84:	d902      	bls.n	8011a8c <_free_r+0x78>
 8011a86:	230c      	movs	r3, #12
 8011a88:	6003      	str	r3, [r0, #0]
 8011a8a:	e7d6      	b.n	8011a3a <_free_r+0x26>
 8011a8c:	6825      	ldr	r5, [r4, #0]
 8011a8e:	1961      	adds	r1, r4, r5
 8011a90:	428b      	cmp	r3, r1
 8011a92:	bf04      	itt	eq
 8011a94:	6819      	ldreq	r1, [r3, #0]
 8011a96:	685b      	ldreq	r3, [r3, #4]
 8011a98:	6063      	str	r3, [r4, #4]
 8011a9a:	bf04      	itt	eq
 8011a9c:	1949      	addeq	r1, r1, r5
 8011a9e:	6021      	streq	r1, [r4, #0]
 8011aa0:	6054      	str	r4, [r2, #4]
 8011aa2:	e7ca      	b.n	8011a3a <_free_r+0x26>
 8011aa4:	b003      	add	sp, #12
 8011aa6:	bd30      	pop	{r4, r5, pc}
 8011aa8:	20012eb4 	.word	0x20012eb4

08011aac <asin>:
 8011aac:	b538      	push	{r3, r4, r5, lr}
 8011aae:	ed2d 8b02 	vpush	{d8}
 8011ab2:	ec55 4b10 	vmov	r4, r5, d0
 8011ab6:	f000 f82f 	bl	8011b18 <__ieee754_asin>
 8011aba:	4622      	mov	r2, r4
 8011abc:	462b      	mov	r3, r5
 8011abe:	4620      	mov	r0, r4
 8011ac0:	4629      	mov	r1, r5
 8011ac2:	eeb0 8a40 	vmov.f32	s16, s0
 8011ac6:	eef0 8a60 	vmov.f32	s17, s1
 8011aca:	f7ee ffef 	bl	8000aac <__aeabi_dcmpun>
 8011ace:	b9a8      	cbnz	r0, 8011afc <asin+0x50>
 8011ad0:	ec45 4b10 	vmov	d0, r4, r5
 8011ad4:	f000 fcf0 	bl	80124b8 <fabs>
 8011ad8:	4b0c      	ldr	r3, [pc, #48]	; (8011b0c <asin+0x60>)
 8011ada:	ec51 0b10 	vmov	r0, r1, d0
 8011ade:	2200      	movs	r2, #0
 8011ae0:	f7ee ffda 	bl	8000a98 <__aeabi_dcmpgt>
 8011ae4:	b150      	cbz	r0, 8011afc <asin+0x50>
 8011ae6:	f7ff ff5b 	bl	80119a0 <__errno>
 8011aea:	ecbd 8b02 	vpop	{d8}
 8011aee:	2321      	movs	r3, #33	; 0x21
 8011af0:	6003      	str	r3, [r0, #0]
 8011af2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011af6:	4806      	ldr	r0, [pc, #24]	; (8011b10 <asin+0x64>)
 8011af8:	f000 be1e 	b.w	8012738 <nan>
 8011afc:	eeb0 0a48 	vmov.f32	s0, s16
 8011b00:	eef0 0a68 	vmov.f32	s1, s17
 8011b04:	ecbd 8b02 	vpop	{d8}
 8011b08:	bd38      	pop	{r3, r4, r5, pc}
 8011b0a:	bf00      	nop
 8011b0c:	3ff00000 	.word	0x3ff00000
 8011b10:	080138b0 	.word	0x080138b0

08011b14 <atan2>:
 8011b14:	f000 ba14 	b.w	8011f40 <__ieee754_atan2>

08011b18 <__ieee754_asin>:
 8011b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b1c:	ed2d 8b04 	vpush	{d8-d9}
 8011b20:	ec55 4b10 	vmov	r4, r5, d0
 8011b24:	4bcc      	ldr	r3, [pc, #816]	; (8011e58 <__ieee754_asin+0x340>)
 8011b26:	b083      	sub	sp, #12
 8011b28:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8011b2c:	4598      	cmp	r8, r3
 8011b2e:	9501      	str	r5, [sp, #4]
 8011b30:	dd33      	ble.n	8011b9a <__ieee754_asin+0x82>
 8011b32:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 8011b36:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 8011b3a:	ea58 0804 	orrs.w	r8, r8, r4
 8011b3e:	d117      	bne.n	8011b70 <__ieee754_asin+0x58>
 8011b40:	a3ab      	add	r3, pc, #684	; (adr r3, 8011df0 <__ieee754_asin+0x2d8>)
 8011b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b46:	ee10 0a10 	vmov	r0, s0
 8011b4a:	4629      	mov	r1, r5
 8011b4c:	f7ee fd14 	bl	8000578 <__aeabi_dmul>
 8011b50:	a3a9      	add	r3, pc, #676	; (adr r3, 8011df8 <__ieee754_asin+0x2e0>)
 8011b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b56:	4606      	mov	r6, r0
 8011b58:	460f      	mov	r7, r1
 8011b5a:	4620      	mov	r0, r4
 8011b5c:	4629      	mov	r1, r5
 8011b5e:	f7ee fd0b 	bl	8000578 <__aeabi_dmul>
 8011b62:	4602      	mov	r2, r0
 8011b64:	460b      	mov	r3, r1
 8011b66:	4630      	mov	r0, r6
 8011b68:	4639      	mov	r1, r7
 8011b6a:	f7ee fb4f 	bl	800020c <__adddf3>
 8011b6e:	e00b      	b.n	8011b88 <__ieee754_asin+0x70>
 8011b70:	ee10 2a10 	vmov	r2, s0
 8011b74:	462b      	mov	r3, r5
 8011b76:	ee10 0a10 	vmov	r0, s0
 8011b7a:	4629      	mov	r1, r5
 8011b7c:	f7ee fb44 	bl	8000208 <__aeabi_dsub>
 8011b80:	4602      	mov	r2, r0
 8011b82:	460b      	mov	r3, r1
 8011b84:	f7ee fe22 	bl	80007cc <__aeabi_ddiv>
 8011b88:	4604      	mov	r4, r0
 8011b8a:	460d      	mov	r5, r1
 8011b8c:	ec45 4b10 	vmov	d0, r4, r5
 8011b90:	b003      	add	sp, #12
 8011b92:	ecbd 8b04 	vpop	{d8-d9}
 8011b96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b9a:	4bb0      	ldr	r3, [pc, #704]	; (8011e5c <__ieee754_asin+0x344>)
 8011b9c:	4598      	cmp	r8, r3
 8011b9e:	dc11      	bgt.n	8011bc4 <__ieee754_asin+0xac>
 8011ba0:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8011ba4:	f280 80ae 	bge.w	8011d04 <__ieee754_asin+0x1ec>
 8011ba8:	a395      	add	r3, pc, #596	; (adr r3, 8011e00 <__ieee754_asin+0x2e8>)
 8011baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bae:	ee10 0a10 	vmov	r0, s0
 8011bb2:	4629      	mov	r1, r5
 8011bb4:	f7ee fb2a 	bl	800020c <__adddf3>
 8011bb8:	4ba9      	ldr	r3, [pc, #676]	; (8011e60 <__ieee754_asin+0x348>)
 8011bba:	2200      	movs	r2, #0
 8011bbc:	f7ee ff6c 	bl	8000a98 <__aeabi_dcmpgt>
 8011bc0:	2800      	cmp	r0, #0
 8011bc2:	d1e3      	bne.n	8011b8c <__ieee754_asin+0x74>
 8011bc4:	ec45 4b10 	vmov	d0, r4, r5
 8011bc8:	f000 fc76 	bl	80124b8 <fabs>
 8011bcc:	49a4      	ldr	r1, [pc, #656]	; (8011e60 <__ieee754_asin+0x348>)
 8011bce:	ec53 2b10 	vmov	r2, r3, d0
 8011bd2:	2000      	movs	r0, #0
 8011bd4:	f7ee fb18 	bl	8000208 <__aeabi_dsub>
 8011bd8:	4ba2      	ldr	r3, [pc, #648]	; (8011e64 <__ieee754_asin+0x34c>)
 8011bda:	2200      	movs	r2, #0
 8011bdc:	f7ee fccc 	bl	8000578 <__aeabi_dmul>
 8011be0:	a389      	add	r3, pc, #548	; (adr r3, 8011e08 <__ieee754_asin+0x2f0>)
 8011be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011be6:	4604      	mov	r4, r0
 8011be8:	460d      	mov	r5, r1
 8011bea:	f7ee fcc5 	bl	8000578 <__aeabi_dmul>
 8011bee:	a388      	add	r3, pc, #544	; (adr r3, 8011e10 <__ieee754_asin+0x2f8>)
 8011bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bf4:	f7ee fb0a 	bl	800020c <__adddf3>
 8011bf8:	4622      	mov	r2, r4
 8011bfa:	462b      	mov	r3, r5
 8011bfc:	f7ee fcbc 	bl	8000578 <__aeabi_dmul>
 8011c00:	a385      	add	r3, pc, #532	; (adr r3, 8011e18 <__ieee754_asin+0x300>)
 8011c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c06:	f7ee faff 	bl	8000208 <__aeabi_dsub>
 8011c0a:	4622      	mov	r2, r4
 8011c0c:	462b      	mov	r3, r5
 8011c0e:	f7ee fcb3 	bl	8000578 <__aeabi_dmul>
 8011c12:	a383      	add	r3, pc, #524	; (adr r3, 8011e20 <__ieee754_asin+0x308>)
 8011c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c18:	f7ee faf8 	bl	800020c <__adddf3>
 8011c1c:	4622      	mov	r2, r4
 8011c1e:	462b      	mov	r3, r5
 8011c20:	f7ee fcaa 	bl	8000578 <__aeabi_dmul>
 8011c24:	a380      	add	r3, pc, #512	; (adr r3, 8011e28 <__ieee754_asin+0x310>)
 8011c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c2a:	f7ee faed 	bl	8000208 <__aeabi_dsub>
 8011c2e:	4622      	mov	r2, r4
 8011c30:	462b      	mov	r3, r5
 8011c32:	f7ee fca1 	bl	8000578 <__aeabi_dmul>
 8011c36:	a37e      	add	r3, pc, #504	; (adr r3, 8011e30 <__ieee754_asin+0x318>)
 8011c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c3c:	f7ee fae6 	bl	800020c <__adddf3>
 8011c40:	4622      	mov	r2, r4
 8011c42:	462b      	mov	r3, r5
 8011c44:	f7ee fc98 	bl	8000578 <__aeabi_dmul>
 8011c48:	a37b      	add	r3, pc, #492	; (adr r3, 8011e38 <__ieee754_asin+0x320>)
 8011c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c4e:	ec41 0b18 	vmov	d8, r0, r1
 8011c52:	4620      	mov	r0, r4
 8011c54:	4629      	mov	r1, r5
 8011c56:	f7ee fc8f 	bl	8000578 <__aeabi_dmul>
 8011c5a:	a379      	add	r3, pc, #484	; (adr r3, 8011e40 <__ieee754_asin+0x328>)
 8011c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c60:	f7ee fad2 	bl	8000208 <__aeabi_dsub>
 8011c64:	4622      	mov	r2, r4
 8011c66:	462b      	mov	r3, r5
 8011c68:	f7ee fc86 	bl	8000578 <__aeabi_dmul>
 8011c6c:	a376      	add	r3, pc, #472	; (adr r3, 8011e48 <__ieee754_asin+0x330>)
 8011c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c72:	f7ee facb 	bl	800020c <__adddf3>
 8011c76:	4622      	mov	r2, r4
 8011c78:	462b      	mov	r3, r5
 8011c7a:	f7ee fc7d 	bl	8000578 <__aeabi_dmul>
 8011c7e:	a374      	add	r3, pc, #464	; (adr r3, 8011e50 <__ieee754_asin+0x338>)
 8011c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c84:	f7ee fac0 	bl	8000208 <__aeabi_dsub>
 8011c88:	4622      	mov	r2, r4
 8011c8a:	462b      	mov	r3, r5
 8011c8c:	f7ee fc74 	bl	8000578 <__aeabi_dmul>
 8011c90:	4b73      	ldr	r3, [pc, #460]	; (8011e60 <__ieee754_asin+0x348>)
 8011c92:	2200      	movs	r2, #0
 8011c94:	f7ee faba 	bl	800020c <__adddf3>
 8011c98:	ec45 4b10 	vmov	d0, r4, r5
 8011c9c:	4606      	mov	r6, r0
 8011c9e:	460f      	mov	r7, r1
 8011ca0:	f000 fc6e 	bl	8012580 <__ieee754_sqrt>
 8011ca4:	4b70      	ldr	r3, [pc, #448]	; (8011e68 <__ieee754_asin+0x350>)
 8011ca6:	4598      	cmp	r8, r3
 8011ca8:	ec5b ab10 	vmov	sl, fp, d0
 8011cac:	f340 80de 	ble.w	8011e6c <__ieee754_asin+0x354>
 8011cb0:	4632      	mov	r2, r6
 8011cb2:	463b      	mov	r3, r7
 8011cb4:	ec51 0b18 	vmov	r0, r1, d8
 8011cb8:	f7ee fd88 	bl	80007cc <__aeabi_ddiv>
 8011cbc:	4652      	mov	r2, sl
 8011cbe:	465b      	mov	r3, fp
 8011cc0:	f7ee fc5a 	bl	8000578 <__aeabi_dmul>
 8011cc4:	4652      	mov	r2, sl
 8011cc6:	465b      	mov	r3, fp
 8011cc8:	f7ee faa0 	bl	800020c <__adddf3>
 8011ccc:	4602      	mov	r2, r0
 8011cce:	460b      	mov	r3, r1
 8011cd0:	f7ee fa9c 	bl	800020c <__adddf3>
 8011cd4:	a348      	add	r3, pc, #288	; (adr r3, 8011df8 <__ieee754_asin+0x2e0>)
 8011cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cda:	f7ee fa95 	bl	8000208 <__aeabi_dsub>
 8011cde:	4602      	mov	r2, r0
 8011ce0:	460b      	mov	r3, r1
 8011ce2:	a143      	add	r1, pc, #268	; (adr r1, 8011df0 <__ieee754_asin+0x2d8>)
 8011ce4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011ce8:	f7ee fa8e 	bl	8000208 <__aeabi_dsub>
 8011cec:	9b01      	ldr	r3, [sp, #4]
 8011cee:	2b00      	cmp	r3, #0
 8011cf0:	bfdc      	itt	le
 8011cf2:	4602      	movle	r2, r0
 8011cf4:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 8011cf8:	4604      	mov	r4, r0
 8011cfa:	460d      	mov	r5, r1
 8011cfc:	bfdc      	itt	le
 8011cfe:	4614      	movle	r4, r2
 8011d00:	461d      	movle	r5, r3
 8011d02:	e743      	b.n	8011b8c <__ieee754_asin+0x74>
 8011d04:	ee10 2a10 	vmov	r2, s0
 8011d08:	ee10 0a10 	vmov	r0, s0
 8011d0c:	462b      	mov	r3, r5
 8011d0e:	4629      	mov	r1, r5
 8011d10:	f7ee fc32 	bl	8000578 <__aeabi_dmul>
 8011d14:	a33c      	add	r3, pc, #240	; (adr r3, 8011e08 <__ieee754_asin+0x2f0>)
 8011d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d1a:	4606      	mov	r6, r0
 8011d1c:	460f      	mov	r7, r1
 8011d1e:	f7ee fc2b 	bl	8000578 <__aeabi_dmul>
 8011d22:	a33b      	add	r3, pc, #236	; (adr r3, 8011e10 <__ieee754_asin+0x2f8>)
 8011d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d28:	f7ee fa70 	bl	800020c <__adddf3>
 8011d2c:	4632      	mov	r2, r6
 8011d2e:	463b      	mov	r3, r7
 8011d30:	f7ee fc22 	bl	8000578 <__aeabi_dmul>
 8011d34:	a338      	add	r3, pc, #224	; (adr r3, 8011e18 <__ieee754_asin+0x300>)
 8011d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d3a:	f7ee fa65 	bl	8000208 <__aeabi_dsub>
 8011d3e:	4632      	mov	r2, r6
 8011d40:	463b      	mov	r3, r7
 8011d42:	f7ee fc19 	bl	8000578 <__aeabi_dmul>
 8011d46:	a336      	add	r3, pc, #216	; (adr r3, 8011e20 <__ieee754_asin+0x308>)
 8011d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d4c:	f7ee fa5e 	bl	800020c <__adddf3>
 8011d50:	4632      	mov	r2, r6
 8011d52:	463b      	mov	r3, r7
 8011d54:	f7ee fc10 	bl	8000578 <__aeabi_dmul>
 8011d58:	a333      	add	r3, pc, #204	; (adr r3, 8011e28 <__ieee754_asin+0x310>)
 8011d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d5e:	f7ee fa53 	bl	8000208 <__aeabi_dsub>
 8011d62:	4632      	mov	r2, r6
 8011d64:	463b      	mov	r3, r7
 8011d66:	f7ee fc07 	bl	8000578 <__aeabi_dmul>
 8011d6a:	a331      	add	r3, pc, #196	; (adr r3, 8011e30 <__ieee754_asin+0x318>)
 8011d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d70:	f7ee fa4c 	bl	800020c <__adddf3>
 8011d74:	4632      	mov	r2, r6
 8011d76:	463b      	mov	r3, r7
 8011d78:	f7ee fbfe 	bl	8000578 <__aeabi_dmul>
 8011d7c:	a32e      	add	r3, pc, #184	; (adr r3, 8011e38 <__ieee754_asin+0x320>)
 8011d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d82:	4680      	mov	r8, r0
 8011d84:	4689      	mov	r9, r1
 8011d86:	4630      	mov	r0, r6
 8011d88:	4639      	mov	r1, r7
 8011d8a:	f7ee fbf5 	bl	8000578 <__aeabi_dmul>
 8011d8e:	a32c      	add	r3, pc, #176	; (adr r3, 8011e40 <__ieee754_asin+0x328>)
 8011d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d94:	f7ee fa38 	bl	8000208 <__aeabi_dsub>
 8011d98:	4632      	mov	r2, r6
 8011d9a:	463b      	mov	r3, r7
 8011d9c:	f7ee fbec 	bl	8000578 <__aeabi_dmul>
 8011da0:	a329      	add	r3, pc, #164	; (adr r3, 8011e48 <__ieee754_asin+0x330>)
 8011da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011da6:	f7ee fa31 	bl	800020c <__adddf3>
 8011daa:	4632      	mov	r2, r6
 8011dac:	463b      	mov	r3, r7
 8011dae:	f7ee fbe3 	bl	8000578 <__aeabi_dmul>
 8011db2:	a327      	add	r3, pc, #156	; (adr r3, 8011e50 <__ieee754_asin+0x338>)
 8011db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011db8:	f7ee fa26 	bl	8000208 <__aeabi_dsub>
 8011dbc:	4632      	mov	r2, r6
 8011dbe:	463b      	mov	r3, r7
 8011dc0:	f7ee fbda 	bl	8000578 <__aeabi_dmul>
 8011dc4:	4b26      	ldr	r3, [pc, #152]	; (8011e60 <__ieee754_asin+0x348>)
 8011dc6:	2200      	movs	r2, #0
 8011dc8:	f7ee fa20 	bl	800020c <__adddf3>
 8011dcc:	4602      	mov	r2, r0
 8011dce:	460b      	mov	r3, r1
 8011dd0:	4640      	mov	r0, r8
 8011dd2:	4649      	mov	r1, r9
 8011dd4:	f7ee fcfa 	bl	80007cc <__aeabi_ddiv>
 8011dd8:	4622      	mov	r2, r4
 8011dda:	462b      	mov	r3, r5
 8011ddc:	f7ee fbcc 	bl	8000578 <__aeabi_dmul>
 8011de0:	4602      	mov	r2, r0
 8011de2:	460b      	mov	r3, r1
 8011de4:	4620      	mov	r0, r4
 8011de6:	4629      	mov	r1, r5
 8011de8:	e6bf      	b.n	8011b6a <__ieee754_asin+0x52>
 8011dea:	bf00      	nop
 8011dec:	f3af 8000 	nop.w
 8011df0:	54442d18 	.word	0x54442d18
 8011df4:	3ff921fb 	.word	0x3ff921fb
 8011df8:	33145c07 	.word	0x33145c07
 8011dfc:	3c91a626 	.word	0x3c91a626
 8011e00:	8800759c 	.word	0x8800759c
 8011e04:	7e37e43c 	.word	0x7e37e43c
 8011e08:	0dfdf709 	.word	0x0dfdf709
 8011e0c:	3f023de1 	.word	0x3f023de1
 8011e10:	7501b288 	.word	0x7501b288
 8011e14:	3f49efe0 	.word	0x3f49efe0
 8011e18:	b5688f3b 	.word	0xb5688f3b
 8011e1c:	3fa48228 	.word	0x3fa48228
 8011e20:	0e884455 	.word	0x0e884455
 8011e24:	3fc9c155 	.word	0x3fc9c155
 8011e28:	03eb6f7d 	.word	0x03eb6f7d
 8011e2c:	3fd4d612 	.word	0x3fd4d612
 8011e30:	55555555 	.word	0x55555555
 8011e34:	3fc55555 	.word	0x3fc55555
 8011e38:	b12e9282 	.word	0xb12e9282
 8011e3c:	3fb3b8c5 	.word	0x3fb3b8c5
 8011e40:	1b8d0159 	.word	0x1b8d0159
 8011e44:	3fe6066c 	.word	0x3fe6066c
 8011e48:	9c598ac8 	.word	0x9c598ac8
 8011e4c:	40002ae5 	.word	0x40002ae5
 8011e50:	1c8a2d4b 	.word	0x1c8a2d4b
 8011e54:	40033a27 	.word	0x40033a27
 8011e58:	3fefffff 	.word	0x3fefffff
 8011e5c:	3fdfffff 	.word	0x3fdfffff
 8011e60:	3ff00000 	.word	0x3ff00000
 8011e64:	3fe00000 	.word	0x3fe00000
 8011e68:	3fef3332 	.word	0x3fef3332
 8011e6c:	ee10 2a10 	vmov	r2, s0
 8011e70:	ee10 0a10 	vmov	r0, s0
 8011e74:	465b      	mov	r3, fp
 8011e76:	4659      	mov	r1, fp
 8011e78:	f7ee f9c8 	bl	800020c <__adddf3>
 8011e7c:	4632      	mov	r2, r6
 8011e7e:	463b      	mov	r3, r7
 8011e80:	ec41 0b19 	vmov	d9, r0, r1
 8011e84:	ec51 0b18 	vmov	r0, r1, d8
 8011e88:	f7ee fca0 	bl	80007cc <__aeabi_ddiv>
 8011e8c:	4602      	mov	r2, r0
 8011e8e:	460b      	mov	r3, r1
 8011e90:	ec51 0b19 	vmov	r0, r1, d9
 8011e94:	f7ee fb70 	bl	8000578 <__aeabi_dmul>
 8011e98:	f04f 0800 	mov.w	r8, #0
 8011e9c:	4606      	mov	r6, r0
 8011e9e:	460f      	mov	r7, r1
 8011ea0:	4642      	mov	r2, r8
 8011ea2:	465b      	mov	r3, fp
 8011ea4:	4640      	mov	r0, r8
 8011ea6:	4659      	mov	r1, fp
 8011ea8:	f7ee fb66 	bl	8000578 <__aeabi_dmul>
 8011eac:	4602      	mov	r2, r0
 8011eae:	460b      	mov	r3, r1
 8011eb0:	4620      	mov	r0, r4
 8011eb2:	4629      	mov	r1, r5
 8011eb4:	f7ee f9a8 	bl	8000208 <__aeabi_dsub>
 8011eb8:	4642      	mov	r2, r8
 8011eba:	4604      	mov	r4, r0
 8011ebc:	460d      	mov	r5, r1
 8011ebe:	465b      	mov	r3, fp
 8011ec0:	4650      	mov	r0, sl
 8011ec2:	4659      	mov	r1, fp
 8011ec4:	f7ee f9a2 	bl	800020c <__adddf3>
 8011ec8:	4602      	mov	r2, r0
 8011eca:	460b      	mov	r3, r1
 8011ecc:	4620      	mov	r0, r4
 8011ece:	4629      	mov	r1, r5
 8011ed0:	f7ee fc7c 	bl	80007cc <__aeabi_ddiv>
 8011ed4:	4602      	mov	r2, r0
 8011ed6:	460b      	mov	r3, r1
 8011ed8:	f7ee f998 	bl	800020c <__adddf3>
 8011edc:	4602      	mov	r2, r0
 8011ede:	460b      	mov	r3, r1
 8011ee0:	a113      	add	r1, pc, #76	; (adr r1, 8011f30 <__ieee754_asin+0x418>)
 8011ee2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011ee6:	f7ee f98f 	bl	8000208 <__aeabi_dsub>
 8011eea:	4602      	mov	r2, r0
 8011eec:	460b      	mov	r3, r1
 8011eee:	4630      	mov	r0, r6
 8011ef0:	4639      	mov	r1, r7
 8011ef2:	f7ee f989 	bl	8000208 <__aeabi_dsub>
 8011ef6:	4642      	mov	r2, r8
 8011ef8:	4604      	mov	r4, r0
 8011efa:	460d      	mov	r5, r1
 8011efc:	465b      	mov	r3, fp
 8011efe:	4640      	mov	r0, r8
 8011f00:	4659      	mov	r1, fp
 8011f02:	f7ee f983 	bl	800020c <__adddf3>
 8011f06:	4602      	mov	r2, r0
 8011f08:	460b      	mov	r3, r1
 8011f0a:	a10b      	add	r1, pc, #44	; (adr r1, 8011f38 <__ieee754_asin+0x420>)
 8011f0c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011f10:	f7ee f97a 	bl	8000208 <__aeabi_dsub>
 8011f14:	4602      	mov	r2, r0
 8011f16:	460b      	mov	r3, r1
 8011f18:	4620      	mov	r0, r4
 8011f1a:	4629      	mov	r1, r5
 8011f1c:	f7ee f974 	bl	8000208 <__aeabi_dsub>
 8011f20:	4602      	mov	r2, r0
 8011f22:	460b      	mov	r3, r1
 8011f24:	a104      	add	r1, pc, #16	; (adr r1, 8011f38 <__ieee754_asin+0x420>)
 8011f26:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011f2a:	e6dd      	b.n	8011ce8 <__ieee754_asin+0x1d0>
 8011f2c:	f3af 8000 	nop.w
 8011f30:	33145c07 	.word	0x33145c07
 8011f34:	3c91a626 	.word	0x3c91a626
 8011f38:	54442d18 	.word	0x54442d18
 8011f3c:	3fe921fb 	.word	0x3fe921fb

08011f40 <__ieee754_atan2>:
 8011f40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011f44:	ec57 6b11 	vmov	r6, r7, d1
 8011f48:	4273      	negs	r3, r6
 8011f4a:	f8df 817c 	ldr.w	r8, [pc, #380]	; 80120c8 <__ieee754_atan2+0x188>
 8011f4e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8011f52:	4333      	orrs	r3, r6
 8011f54:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8011f58:	4543      	cmp	r3, r8
 8011f5a:	ec51 0b10 	vmov	r0, r1, d0
 8011f5e:	ee11 5a10 	vmov	r5, s2
 8011f62:	d80a      	bhi.n	8011f7a <__ieee754_atan2+0x3a>
 8011f64:	4244      	negs	r4, r0
 8011f66:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011f6a:	4304      	orrs	r4, r0
 8011f6c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8011f70:	4544      	cmp	r4, r8
 8011f72:	ee10 9a10 	vmov	r9, s0
 8011f76:	468e      	mov	lr, r1
 8011f78:	d907      	bls.n	8011f8a <__ieee754_atan2+0x4a>
 8011f7a:	4632      	mov	r2, r6
 8011f7c:	463b      	mov	r3, r7
 8011f7e:	f7ee f945 	bl	800020c <__adddf3>
 8011f82:	ec41 0b10 	vmov	d0, r0, r1
 8011f86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011f8a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8011f8e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8011f92:	4334      	orrs	r4, r6
 8011f94:	d103      	bne.n	8011f9e <__ieee754_atan2+0x5e>
 8011f96:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011f9a:	f000 b899 	b.w	80120d0 <atan>
 8011f9e:	17bc      	asrs	r4, r7, #30
 8011fa0:	f004 0402 	and.w	r4, r4, #2
 8011fa4:	ea53 0909 	orrs.w	r9, r3, r9
 8011fa8:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8011fac:	d107      	bne.n	8011fbe <__ieee754_atan2+0x7e>
 8011fae:	2c02      	cmp	r4, #2
 8011fb0:	d05f      	beq.n	8012072 <__ieee754_atan2+0x132>
 8011fb2:	2c03      	cmp	r4, #3
 8011fb4:	d1e5      	bne.n	8011f82 <__ieee754_atan2+0x42>
 8011fb6:	a140      	add	r1, pc, #256	; (adr r1, 80120b8 <__ieee754_atan2+0x178>)
 8011fb8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011fbc:	e7e1      	b.n	8011f82 <__ieee754_atan2+0x42>
 8011fbe:	4315      	orrs	r5, r2
 8011fc0:	d106      	bne.n	8011fd0 <__ieee754_atan2+0x90>
 8011fc2:	f1be 0f00 	cmp.w	lr, #0
 8011fc6:	da5f      	bge.n	8012088 <__ieee754_atan2+0x148>
 8011fc8:	a13d      	add	r1, pc, #244	; (adr r1, 80120c0 <__ieee754_atan2+0x180>)
 8011fca:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011fce:	e7d8      	b.n	8011f82 <__ieee754_atan2+0x42>
 8011fd0:	4542      	cmp	r2, r8
 8011fd2:	d10f      	bne.n	8011ff4 <__ieee754_atan2+0xb4>
 8011fd4:	4293      	cmp	r3, r2
 8011fd6:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8011fda:	d107      	bne.n	8011fec <__ieee754_atan2+0xac>
 8011fdc:	2c02      	cmp	r4, #2
 8011fde:	d84c      	bhi.n	801207a <__ieee754_atan2+0x13a>
 8011fe0:	4b33      	ldr	r3, [pc, #204]	; (80120b0 <__ieee754_atan2+0x170>)
 8011fe2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8011fe6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8011fea:	e7ca      	b.n	8011f82 <__ieee754_atan2+0x42>
 8011fec:	2c02      	cmp	r4, #2
 8011fee:	d848      	bhi.n	8012082 <__ieee754_atan2+0x142>
 8011ff0:	4b30      	ldr	r3, [pc, #192]	; (80120b4 <__ieee754_atan2+0x174>)
 8011ff2:	e7f6      	b.n	8011fe2 <__ieee754_atan2+0xa2>
 8011ff4:	4543      	cmp	r3, r8
 8011ff6:	d0e4      	beq.n	8011fc2 <__ieee754_atan2+0x82>
 8011ff8:	1a9b      	subs	r3, r3, r2
 8011ffa:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8011ffe:	ea4f 5223 	mov.w	r2, r3, asr #20
 8012002:	da1e      	bge.n	8012042 <__ieee754_atan2+0x102>
 8012004:	2f00      	cmp	r7, #0
 8012006:	da01      	bge.n	801200c <__ieee754_atan2+0xcc>
 8012008:	323c      	adds	r2, #60	; 0x3c
 801200a:	db1e      	blt.n	801204a <__ieee754_atan2+0x10a>
 801200c:	4632      	mov	r2, r6
 801200e:	463b      	mov	r3, r7
 8012010:	f7ee fbdc 	bl	80007cc <__aeabi_ddiv>
 8012014:	ec41 0b10 	vmov	d0, r0, r1
 8012018:	f000 fa4e 	bl	80124b8 <fabs>
 801201c:	f000 f858 	bl	80120d0 <atan>
 8012020:	ec51 0b10 	vmov	r0, r1, d0
 8012024:	2c01      	cmp	r4, #1
 8012026:	d013      	beq.n	8012050 <__ieee754_atan2+0x110>
 8012028:	2c02      	cmp	r4, #2
 801202a:	d015      	beq.n	8012058 <__ieee754_atan2+0x118>
 801202c:	2c00      	cmp	r4, #0
 801202e:	d0a8      	beq.n	8011f82 <__ieee754_atan2+0x42>
 8012030:	a317      	add	r3, pc, #92	; (adr r3, 8012090 <__ieee754_atan2+0x150>)
 8012032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012036:	f7ee f8e7 	bl	8000208 <__aeabi_dsub>
 801203a:	a317      	add	r3, pc, #92	; (adr r3, 8012098 <__ieee754_atan2+0x158>)
 801203c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012040:	e014      	b.n	801206c <__ieee754_atan2+0x12c>
 8012042:	a117      	add	r1, pc, #92	; (adr r1, 80120a0 <__ieee754_atan2+0x160>)
 8012044:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012048:	e7ec      	b.n	8012024 <__ieee754_atan2+0xe4>
 801204a:	2000      	movs	r0, #0
 801204c:	2100      	movs	r1, #0
 801204e:	e7e9      	b.n	8012024 <__ieee754_atan2+0xe4>
 8012050:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012054:	4619      	mov	r1, r3
 8012056:	e794      	b.n	8011f82 <__ieee754_atan2+0x42>
 8012058:	a30d      	add	r3, pc, #52	; (adr r3, 8012090 <__ieee754_atan2+0x150>)
 801205a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801205e:	f7ee f8d3 	bl	8000208 <__aeabi_dsub>
 8012062:	4602      	mov	r2, r0
 8012064:	460b      	mov	r3, r1
 8012066:	a10c      	add	r1, pc, #48	; (adr r1, 8012098 <__ieee754_atan2+0x158>)
 8012068:	e9d1 0100 	ldrd	r0, r1, [r1]
 801206c:	f7ee f8cc 	bl	8000208 <__aeabi_dsub>
 8012070:	e787      	b.n	8011f82 <__ieee754_atan2+0x42>
 8012072:	a109      	add	r1, pc, #36	; (adr r1, 8012098 <__ieee754_atan2+0x158>)
 8012074:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012078:	e783      	b.n	8011f82 <__ieee754_atan2+0x42>
 801207a:	a10b      	add	r1, pc, #44	; (adr r1, 80120a8 <__ieee754_atan2+0x168>)
 801207c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012080:	e77f      	b.n	8011f82 <__ieee754_atan2+0x42>
 8012082:	2000      	movs	r0, #0
 8012084:	2100      	movs	r1, #0
 8012086:	e77c      	b.n	8011f82 <__ieee754_atan2+0x42>
 8012088:	a105      	add	r1, pc, #20	; (adr r1, 80120a0 <__ieee754_atan2+0x160>)
 801208a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801208e:	e778      	b.n	8011f82 <__ieee754_atan2+0x42>
 8012090:	33145c07 	.word	0x33145c07
 8012094:	3ca1a626 	.word	0x3ca1a626
 8012098:	54442d18 	.word	0x54442d18
 801209c:	400921fb 	.word	0x400921fb
 80120a0:	54442d18 	.word	0x54442d18
 80120a4:	3ff921fb 	.word	0x3ff921fb
 80120a8:	54442d18 	.word	0x54442d18
 80120ac:	3fe921fb 	.word	0x3fe921fb
 80120b0:	080138b8 	.word	0x080138b8
 80120b4:	080138d0 	.word	0x080138d0
 80120b8:	54442d18 	.word	0x54442d18
 80120bc:	c00921fb 	.word	0xc00921fb
 80120c0:	54442d18 	.word	0x54442d18
 80120c4:	bff921fb 	.word	0xbff921fb
 80120c8:	7ff00000 	.word	0x7ff00000
 80120cc:	00000000 	.word	0x00000000

080120d0 <atan>:
 80120d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80120d4:	ec55 4b10 	vmov	r4, r5, d0
 80120d8:	4bc3      	ldr	r3, [pc, #780]	; (80123e8 <atan+0x318>)
 80120da:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80120de:	429e      	cmp	r6, r3
 80120e0:	46ab      	mov	fp, r5
 80120e2:	dd18      	ble.n	8012116 <atan+0x46>
 80120e4:	4bc1      	ldr	r3, [pc, #772]	; (80123ec <atan+0x31c>)
 80120e6:	429e      	cmp	r6, r3
 80120e8:	dc01      	bgt.n	80120ee <atan+0x1e>
 80120ea:	d109      	bne.n	8012100 <atan+0x30>
 80120ec:	b144      	cbz	r4, 8012100 <atan+0x30>
 80120ee:	4622      	mov	r2, r4
 80120f0:	462b      	mov	r3, r5
 80120f2:	4620      	mov	r0, r4
 80120f4:	4629      	mov	r1, r5
 80120f6:	f7ee f889 	bl	800020c <__adddf3>
 80120fa:	4604      	mov	r4, r0
 80120fc:	460d      	mov	r5, r1
 80120fe:	e006      	b.n	801210e <atan+0x3e>
 8012100:	f1bb 0f00 	cmp.w	fp, #0
 8012104:	f300 8131 	bgt.w	801236a <atan+0x29a>
 8012108:	a59b      	add	r5, pc, #620	; (adr r5, 8012378 <atan+0x2a8>)
 801210a:	e9d5 4500 	ldrd	r4, r5, [r5]
 801210e:	ec45 4b10 	vmov	d0, r4, r5
 8012112:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012116:	4bb6      	ldr	r3, [pc, #728]	; (80123f0 <atan+0x320>)
 8012118:	429e      	cmp	r6, r3
 801211a:	dc14      	bgt.n	8012146 <atan+0x76>
 801211c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8012120:	429e      	cmp	r6, r3
 8012122:	dc0d      	bgt.n	8012140 <atan+0x70>
 8012124:	a396      	add	r3, pc, #600	; (adr r3, 8012380 <atan+0x2b0>)
 8012126:	e9d3 2300 	ldrd	r2, r3, [r3]
 801212a:	ee10 0a10 	vmov	r0, s0
 801212e:	4629      	mov	r1, r5
 8012130:	f7ee f86c 	bl	800020c <__adddf3>
 8012134:	4baf      	ldr	r3, [pc, #700]	; (80123f4 <atan+0x324>)
 8012136:	2200      	movs	r2, #0
 8012138:	f7ee fcae 	bl	8000a98 <__aeabi_dcmpgt>
 801213c:	2800      	cmp	r0, #0
 801213e:	d1e6      	bne.n	801210e <atan+0x3e>
 8012140:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8012144:	e02b      	b.n	801219e <atan+0xce>
 8012146:	f000 f9b7 	bl	80124b8 <fabs>
 801214a:	4bab      	ldr	r3, [pc, #684]	; (80123f8 <atan+0x328>)
 801214c:	429e      	cmp	r6, r3
 801214e:	ec55 4b10 	vmov	r4, r5, d0
 8012152:	f300 80bf 	bgt.w	80122d4 <atan+0x204>
 8012156:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 801215a:	429e      	cmp	r6, r3
 801215c:	f300 80a0 	bgt.w	80122a0 <atan+0x1d0>
 8012160:	ee10 2a10 	vmov	r2, s0
 8012164:	ee10 0a10 	vmov	r0, s0
 8012168:	462b      	mov	r3, r5
 801216a:	4629      	mov	r1, r5
 801216c:	f7ee f84e 	bl	800020c <__adddf3>
 8012170:	4ba0      	ldr	r3, [pc, #640]	; (80123f4 <atan+0x324>)
 8012172:	2200      	movs	r2, #0
 8012174:	f7ee f848 	bl	8000208 <__aeabi_dsub>
 8012178:	2200      	movs	r2, #0
 801217a:	4606      	mov	r6, r0
 801217c:	460f      	mov	r7, r1
 801217e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8012182:	4620      	mov	r0, r4
 8012184:	4629      	mov	r1, r5
 8012186:	f7ee f841 	bl	800020c <__adddf3>
 801218a:	4602      	mov	r2, r0
 801218c:	460b      	mov	r3, r1
 801218e:	4630      	mov	r0, r6
 8012190:	4639      	mov	r1, r7
 8012192:	f7ee fb1b 	bl	80007cc <__aeabi_ddiv>
 8012196:	f04f 0a00 	mov.w	sl, #0
 801219a:	4604      	mov	r4, r0
 801219c:	460d      	mov	r5, r1
 801219e:	4622      	mov	r2, r4
 80121a0:	462b      	mov	r3, r5
 80121a2:	4620      	mov	r0, r4
 80121a4:	4629      	mov	r1, r5
 80121a6:	f7ee f9e7 	bl	8000578 <__aeabi_dmul>
 80121aa:	4602      	mov	r2, r0
 80121ac:	460b      	mov	r3, r1
 80121ae:	4680      	mov	r8, r0
 80121b0:	4689      	mov	r9, r1
 80121b2:	f7ee f9e1 	bl	8000578 <__aeabi_dmul>
 80121b6:	a374      	add	r3, pc, #464	; (adr r3, 8012388 <atan+0x2b8>)
 80121b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121bc:	4606      	mov	r6, r0
 80121be:	460f      	mov	r7, r1
 80121c0:	f7ee f9da 	bl	8000578 <__aeabi_dmul>
 80121c4:	a372      	add	r3, pc, #456	; (adr r3, 8012390 <atan+0x2c0>)
 80121c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121ca:	f7ee f81f 	bl	800020c <__adddf3>
 80121ce:	4632      	mov	r2, r6
 80121d0:	463b      	mov	r3, r7
 80121d2:	f7ee f9d1 	bl	8000578 <__aeabi_dmul>
 80121d6:	a370      	add	r3, pc, #448	; (adr r3, 8012398 <atan+0x2c8>)
 80121d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121dc:	f7ee f816 	bl	800020c <__adddf3>
 80121e0:	4632      	mov	r2, r6
 80121e2:	463b      	mov	r3, r7
 80121e4:	f7ee f9c8 	bl	8000578 <__aeabi_dmul>
 80121e8:	a36d      	add	r3, pc, #436	; (adr r3, 80123a0 <atan+0x2d0>)
 80121ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121ee:	f7ee f80d 	bl	800020c <__adddf3>
 80121f2:	4632      	mov	r2, r6
 80121f4:	463b      	mov	r3, r7
 80121f6:	f7ee f9bf 	bl	8000578 <__aeabi_dmul>
 80121fa:	a36b      	add	r3, pc, #428	; (adr r3, 80123a8 <atan+0x2d8>)
 80121fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012200:	f7ee f804 	bl	800020c <__adddf3>
 8012204:	4632      	mov	r2, r6
 8012206:	463b      	mov	r3, r7
 8012208:	f7ee f9b6 	bl	8000578 <__aeabi_dmul>
 801220c:	a368      	add	r3, pc, #416	; (adr r3, 80123b0 <atan+0x2e0>)
 801220e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012212:	f7ed fffb 	bl	800020c <__adddf3>
 8012216:	4642      	mov	r2, r8
 8012218:	464b      	mov	r3, r9
 801221a:	f7ee f9ad 	bl	8000578 <__aeabi_dmul>
 801221e:	a366      	add	r3, pc, #408	; (adr r3, 80123b8 <atan+0x2e8>)
 8012220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012224:	4680      	mov	r8, r0
 8012226:	4689      	mov	r9, r1
 8012228:	4630      	mov	r0, r6
 801222a:	4639      	mov	r1, r7
 801222c:	f7ee f9a4 	bl	8000578 <__aeabi_dmul>
 8012230:	a363      	add	r3, pc, #396	; (adr r3, 80123c0 <atan+0x2f0>)
 8012232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012236:	f7ed ffe7 	bl	8000208 <__aeabi_dsub>
 801223a:	4632      	mov	r2, r6
 801223c:	463b      	mov	r3, r7
 801223e:	f7ee f99b 	bl	8000578 <__aeabi_dmul>
 8012242:	a361      	add	r3, pc, #388	; (adr r3, 80123c8 <atan+0x2f8>)
 8012244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012248:	f7ed ffde 	bl	8000208 <__aeabi_dsub>
 801224c:	4632      	mov	r2, r6
 801224e:	463b      	mov	r3, r7
 8012250:	f7ee f992 	bl	8000578 <__aeabi_dmul>
 8012254:	a35e      	add	r3, pc, #376	; (adr r3, 80123d0 <atan+0x300>)
 8012256:	e9d3 2300 	ldrd	r2, r3, [r3]
 801225a:	f7ed ffd5 	bl	8000208 <__aeabi_dsub>
 801225e:	4632      	mov	r2, r6
 8012260:	463b      	mov	r3, r7
 8012262:	f7ee f989 	bl	8000578 <__aeabi_dmul>
 8012266:	a35c      	add	r3, pc, #368	; (adr r3, 80123d8 <atan+0x308>)
 8012268:	e9d3 2300 	ldrd	r2, r3, [r3]
 801226c:	f7ed ffcc 	bl	8000208 <__aeabi_dsub>
 8012270:	4632      	mov	r2, r6
 8012272:	463b      	mov	r3, r7
 8012274:	f7ee f980 	bl	8000578 <__aeabi_dmul>
 8012278:	4602      	mov	r2, r0
 801227a:	460b      	mov	r3, r1
 801227c:	4640      	mov	r0, r8
 801227e:	4649      	mov	r1, r9
 8012280:	f7ed ffc4 	bl	800020c <__adddf3>
 8012284:	4622      	mov	r2, r4
 8012286:	462b      	mov	r3, r5
 8012288:	f7ee f976 	bl	8000578 <__aeabi_dmul>
 801228c:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 8012290:	4602      	mov	r2, r0
 8012292:	460b      	mov	r3, r1
 8012294:	d14b      	bne.n	801232e <atan+0x25e>
 8012296:	4620      	mov	r0, r4
 8012298:	4629      	mov	r1, r5
 801229a:	f7ed ffb5 	bl	8000208 <__aeabi_dsub>
 801229e:	e72c      	b.n	80120fa <atan+0x2a>
 80122a0:	ee10 0a10 	vmov	r0, s0
 80122a4:	4b53      	ldr	r3, [pc, #332]	; (80123f4 <atan+0x324>)
 80122a6:	2200      	movs	r2, #0
 80122a8:	4629      	mov	r1, r5
 80122aa:	f7ed ffad 	bl	8000208 <__aeabi_dsub>
 80122ae:	4b51      	ldr	r3, [pc, #324]	; (80123f4 <atan+0x324>)
 80122b0:	4606      	mov	r6, r0
 80122b2:	460f      	mov	r7, r1
 80122b4:	2200      	movs	r2, #0
 80122b6:	4620      	mov	r0, r4
 80122b8:	4629      	mov	r1, r5
 80122ba:	f7ed ffa7 	bl	800020c <__adddf3>
 80122be:	4602      	mov	r2, r0
 80122c0:	460b      	mov	r3, r1
 80122c2:	4630      	mov	r0, r6
 80122c4:	4639      	mov	r1, r7
 80122c6:	f7ee fa81 	bl	80007cc <__aeabi_ddiv>
 80122ca:	f04f 0a01 	mov.w	sl, #1
 80122ce:	4604      	mov	r4, r0
 80122d0:	460d      	mov	r5, r1
 80122d2:	e764      	b.n	801219e <atan+0xce>
 80122d4:	4b49      	ldr	r3, [pc, #292]	; (80123fc <atan+0x32c>)
 80122d6:	429e      	cmp	r6, r3
 80122d8:	da1d      	bge.n	8012316 <atan+0x246>
 80122da:	ee10 0a10 	vmov	r0, s0
 80122de:	4b48      	ldr	r3, [pc, #288]	; (8012400 <atan+0x330>)
 80122e0:	2200      	movs	r2, #0
 80122e2:	4629      	mov	r1, r5
 80122e4:	f7ed ff90 	bl	8000208 <__aeabi_dsub>
 80122e8:	4b45      	ldr	r3, [pc, #276]	; (8012400 <atan+0x330>)
 80122ea:	4606      	mov	r6, r0
 80122ec:	460f      	mov	r7, r1
 80122ee:	2200      	movs	r2, #0
 80122f0:	4620      	mov	r0, r4
 80122f2:	4629      	mov	r1, r5
 80122f4:	f7ee f940 	bl	8000578 <__aeabi_dmul>
 80122f8:	4b3e      	ldr	r3, [pc, #248]	; (80123f4 <atan+0x324>)
 80122fa:	2200      	movs	r2, #0
 80122fc:	f7ed ff86 	bl	800020c <__adddf3>
 8012300:	4602      	mov	r2, r0
 8012302:	460b      	mov	r3, r1
 8012304:	4630      	mov	r0, r6
 8012306:	4639      	mov	r1, r7
 8012308:	f7ee fa60 	bl	80007cc <__aeabi_ddiv>
 801230c:	f04f 0a02 	mov.w	sl, #2
 8012310:	4604      	mov	r4, r0
 8012312:	460d      	mov	r5, r1
 8012314:	e743      	b.n	801219e <atan+0xce>
 8012316:	462b      	mov	r3, r5
 8012318:	ee10 2a10 	vmov	r2, s0
 801231c:	4939      	ldr	r1, [pc, #228]	; (8012404 <atan+0x334>)
 801231e:	2000      	movs	r0, #0
 8012320:	f7ee fa54 	bl	80007cc <__aeabi_ddiv>
 8012324:	f04f 0a03 	mov.w	sl, #3
 8012328:	4604      	mov	r4, r0
 801232a:	460d      	mov	r5, r1
 801232c:	e737      	b.n	801219e <atan+0xce>
 801232e:	4b36      	ldr	r3, [pc, #216]	; (8012408 <atan+0x338>)
 8012330:	4e36      	ldr	r6, [pc, #216]	; (801240c <atan+0x33c>)
 8012332:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8012336:	e9d3 2300 	ldrd	r2, r3, [r3]
 801233a:	f7ed ff65 	bl	8000208 <__aeabi_dsub>
 801233e:	4622      	mov	r2, r4
 8012340:	462b      	mov	r3, r5
 8012342:	f7ed ff61 	bl	8000208 <__aeabi_dsub>
 8012346:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 801234a:	4602      	mov	r2, r0
 801234c:	460b      	mov	r3, r1
 801234e:	e9d6 0100 	ldrd	r0, r1, [r6]
 8012352:	f7ed ff59 	bl	8000208 <__aeabi_dsub>
 8012356:	f1bb 0f00 	cmp.w	fp, #0
 801235a:	4604      	mov	r4, r0
 801235c:	460d      	mov	r5, r1
 801235e:	f6bf aed6 	bge.w	801210e <atan+0x3e>
 8012362:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012366:	461d      	mov	r5, r3
 8012368:	e6d1      	b.n	801210e <atan+0x3e>
 801236a:	a51d      	add	r5, pc, #116	; (adr r5, 80123e0 <atan+0x310>)
 801236c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8012370:	e6cd      	b.n	801210e <atan+0x3e>
 8012372:	bf00      	nop
 8012374:	f3af 8000 	nop.w
 8012378:	54442d18 	.word	0x54442d18
 801237c:	bff921fb 	.word	0xbff921fb
 8012380:	8800759c 	.word	0x8800759c
 8012384:	7e37e43c 	.word	0x7e37e43c
 8012388:	e322da11 	.word	0xe322da11
 801238c:	3f90ad3a 	.word	0x3f90ad3a
 8012390:	24760deb 	.word	0x24760deb
 8012394:	3fa97b4b 	.word	0x3fa97b4b
 8012398:	a0d03d51 	.word	0xa0d03d51
 801239c:	3fb10d66 	.word	0x3fb10d66
 80123a0:	c54c206e 	.word	0xc54c206e
 80123a4:	3fb745cd 	.word	0x3fb745cd
 80123a8:	920083ff 	.word	0x920083ff
 80123ac:	3fc24924 	.word	0x3fc24924
 80123b0:	5555550d 	.word	0x5555550d
 80123b4:	3fd55555 	.word	0x3fd55555
 80123b8:	2c6a6c2f 	.word	0x2c6a6c2f
 80123bc:	bfa2b444 	.word	0xbfa2b444
 80123c0:	52defd9a 	.word	0x52defd9a
 80123c4:	3fadde2d 	.word	0x3fadde2d
 80123c8:	af749a6d 	.word	0xaf749a6d
 80123cc:	3fb3b0f2 	.word	0x3fb3b0f2
 80123d0:	fe231671 	.word	0xfe231671
 80123d4:	3fbc71c6 	.word	0x3fbc71c6
 80123d8:	9998ebc4 	.word	0x9998ebc4
 80123dc:	3fc99999 	.word	0x3fc99999
 80123e0:	54442d18 	.word	0x54442d18
 80123e4:	3ff921fb 	.word	0x3ff921fb
 80123e8:	440fffff 	.word	0x440fffff
 80123ec:	7ff00000 	.word	0x7ff00000
 80123f0:	3fdbffff 	.word	0x3fdbffff
 80123f4:	3ff00000 	.word	0x3ff00000
 80123f8:	3ff2ffff 	.word	0x3ff2ffff
 80123fc:	40038000 	.word	0x40038000
 8012400:	3ff80000 	.word	0x3ff80000
 8012404:	bff00000 	.word	0xbff00000
 8012408:	08013908 	.word	0x08013908
 801240c:	080138e8 	.word	0x080138e8

08012410 <cos>:
 8012410:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012412:	ec53 2b10 	vmov	r2, r3, d0
 8012416:	4826      	ldr	r0, [pc, #152]	; (80124b0 <cos+0xa0>)
 8012418:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801241c:	4281      	cmp	r1, r0
 801241e:	dc06      	bgt.n	801242e <cos+0x1e>
 8012420:	ed9f 1b21 	vldr	d1, [pc, #132]	; 80124a8 <cos+0x98>
 8012424:	b005      	add	sp, #20
 8012426:	f85d eb04 	ldr.w	lr, [sp], #4
 801242a:	f000 bee5 	b.w	80131f8 <__kernel_cos>
 801242e:	4821      	ldr	r0, [pc, #132]	; (80124b4 <cos+0xa4>)
 8012430:	4281      	cmp	r1, r0
 8012432:	dd09      	ble.n	8012448 <cos+0x38>
 8012434:	ee10 0a10 	vmov	r0, s0
 8012438:	4619      	mov	r1, r3
 801243a:	f7ed fee5 	bl	8000208 <__aeabi_dsub>
 801243e:	ec41 0b10 	vmov	d0, r0, r1
 8012442:	b005      	add	sp, #20
 8012444:	f85d fb04 	ldr.w	pc, [sp], #4
 8012448:	4668      	mov	r0, sp
 801244a:	f000 f97d 	bl	8012748 <__ieee754_rem_pio2>
 801244e:	f000 0003 	and.w	r0, r0, #3
 8012452:	2801      	cmp	r0, #1
 8012454:	d00b      	beq.n	801246e <cos+0x5e>
 8012456:	2802      	cmp	r0, #2
 8012458:	d016      	beq.n	8012488 <cos+0x78>
 801245a:	b9e0      	cbnz	r0, 8012496 <cos+0x86>
 801245c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012460:	ed9d 0b00 	vldr	d0, [sp]
 8012464:	f000 fec8 	bl	80131f8 <__kernel_cos>
 8012468:	ec51 0b10 	vmov	r0, r1, d0
 801246c:	e7e7      	b.n	801243e <cos+0x2e>
 801246e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012472:	ed9d 0b00 	vldr	d0, [sp]
 8012476:	f000 ff87 	bl	8013388 <__kernel_sin>
 801247a:	ec53 2b10 	vmov	r2, r3, d0
 801247e:	ee10 0a10 	vmov	r0, s0
 8012482:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8012486:	e7da      	b.n	801243e <cos+0x2e>
 8012488:	ed9d 1b02 	vldr	d1, [sp, #8]
 801248c:	ed9d 0b00 	vldr	d0, [sp]
 8012490:	f000 feb2 	bl	80131f8 <__kernel_cos>
 8012494:	e7f1      	b.n	801247a <cos+0x6a>
 8012496:	ed9d 1b02 	vldr	d1, [sp, #8]
 801249a:	ed9d 0b00 	vldr	d0, [sp]
 801249e:	2001      	movs	r0, #1
 80124a0:	f000 ff72 	bl	8013388 <__kernel_sin>
 80124a4:	e7e0      	b.n	8012468 <cos+0x58>
 80124a6:	bf00      	nop
	...
 80124b0:	3fe921fb 	.word	0x3fe921fb
 80124b4:	7fefffff 	.word	0x7fefffff

080124b8 <fabs>:
 80124b8:	ec51 0b10 	vmov	r0, r1, d0
 80124bc:	ee10 2a10 	vmov	r2, s0
 80124c0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80124c4:	ec43 2b10 	vmov	d0, r2, r3
 80124c8:	4770      	bx	lr
 80124ca:	0000      	movs	r0, r0
 80124cc:	0000      	movs	r0, r0
	...

080124d0 <sin>:
 80124d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80124d2:	ec53 2b10 	vmov	r2, r3, d0
 80124d6:	4828      	ldr	r0, [pc, #160]	; (8012578 <sin+0xa8>)
 80124d8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80124dc:	4281      	cmp	r1, r0
 80124de:	dc07      	bgt.n	80124f0 <sin+0x20>
 80124e0:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8012570 <sin+0xa0>
 80124e4:	2000      	movs	r0, #0
 80124e6:	b005      	add	sp, #20
 80124e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80124ec:	f000 bf4c 	b.w	8013388 <__kernel_sin>
 80124f0:	4822      	ldr	r0, [pc, #136]	; (801257c <sin+0xac>)
 80124f2:	4281      	cmp	r1, r0
 80124f4:	dd09      	ble.n	801250a <sin+0x3a>
 80124f6:	ee10 0a10 	vmov	r0, s0
 80124fa:	4619      	mov	r1, r3
 80124fc:	f7ed fe84 	bl	8000208 <__aeabi_dsub>
 8012500:	ec41 0b10 	vmov	d0, r0, r1
 8012504:	b005      	add	sp, #20
 8012506:	f85d fb04 	ldr.w	pc, [sp], #4
 801250a:	4668      	mov	r0, sp
 801250c:	f000 f91c 	bl	8012748 <__ieee754_rem_pio2>
 8012510:	f000 0003 	and.w	r0, r0, #3
 8012514:	2801      	cmp	r0, #1
 8012516:	d00c      	beq.n	8012532 <sin+0x62>
 8012518:	2802      	cmp	r0, #2
 801251a:	d011      	beq.n	8012540 <sin+0x70>
 801251c:	b9f0      	cbnz	r0, 801255c <sin+0x8c>
 801251e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012522:	ed9d 0b00 	vldr	d0, [sp]
 8012526:	2001      	movs	r0, #1
 8012528:	f000 ff2e 	bl	8013388 <__kernel_sin>
 801252c:	ec51 0b10 	vmov	r0, r1, d0
 8012530:	e7e6      	b.n	8012500 <sin+0x30>
 8012532:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012536:	ed9d 0b00 	vldr	d0, [sp]
 801253a:	f000 fe5d 	bl	80131f8 <__kernel_cos>
 801253e:	e7f5      	b.n	801252c <sin+0x5c>
 8012540:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012544:	ed9d 0b00 	vldr	d0, [sp]
 8012548:	2001      	movs	r0, #1
 801254a:	f000 ff1d 	bl	8013388 <__kernel_sin>
 801254e:	ec53 2b10 	vmov	r2, r3, d0
 8012552:	ee10 0a10 	vmov	r0, s0
 8012556:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801255a:	e7d1      	b.n	8012500 <sin+0x30>
 801255c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012560:	ed9d 0b00 	vldr	d0, [sp]
 8012564:	f000 fe48 	bl	80131f8 <__kernel_cos>
 8012568:	e7f1      	b.n	801254e <sin+0x7e>
 801256a:	bf00      	nop
 801256c:	f3af 8000 	nop.w
	...
 8012578:	3fe921fb 	.word	0x3fe921fb
 801257c:	7fefffff 	.word	0x7fefffff

08012580 <__ieee754_sqrt>:
 8012580:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012584:	ec55 4b10 	vmov	r4, r5, d0
 8012588:	4e67      	ldr	r6, [pc, #412]	; (8012728 <__ieee754_sqrt+0x1a8>)
 801258a:	43ae      	bics	r6, r5
 801258c:	ee10 0a10 	vmov	r0, s0
 8012590:	ee10 2a10 	vmov	r2, s0
 8012594:	4629      	mov	r1, r5
 8012596:	462b      	mov	r3, r5
 8012598:	d10d      	bne.n	80125b6 <__ieee754_sqrt+0x36>
 801259a:	f7ed ffed 	bl	8000578 <__aeabi_dmul>
 801259e:	4602      	mov	r2, r0
 80125a0:	460b      	mov	r3, r1
 80125a2:	4620      	mov	r0, r4
 80125a4:	4629      	mov	r1, r5
 80125a6:	f7ed fe31 	bl	800020c <__adddf3>
 80125aa:	4604      	mov	r4, r0
 80125ac:	460d      	mov	r5, r1
 80125ae:	ec45 4b10 	vmov	d0, r4, r5
 80125b2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80125b6:	2d00      	cmp	r5, #0
 80125b8:	dc0b      	bgt.n	80125d2 <__ieee754_sqrt+0x52>
 80125ba:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80125be:	4326      	orrs	r6, r4
 80125c0:	d0f5      	beq.n	80125ae <__ieee754_sqrt+0x2e>
 80125c2:	b135      	cbz	r5, 80125d2 <__ieee754_sqrt+0x52>
 80125c4:	f7ed fe20 	bl	8000208 <__aeabi_dsub>
 80125c8:	4602      	mov	r2, r0
 80125ca:	460b      	mov	r3, r1
 80125cc:	f7ee f8fe 	bl	80007cc <__aeabi_ddiv>
 80125d0:	e7eb      	b.n	80125aa <__ieee754_sqrt+0x2a>
 80125d2:	1509      	asrs	r1, r1, #20
 80125d4:	f000 808d 	beq.w	80126f2 <__ieee754_sqrt+0x172>
 80125d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80125dc:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 80125e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80125e4:	07c9      	lsls	r1, r1, #31
 80125e6:	bf5c      	itt	pl
 80125e8:	005b      	lslpl	r3, r3, #1
 80125ea:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 80125ee:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80125f2:	bf58      	it	pl
 80125f4:	0052      	lslpl	r2, r2, #1
 80125f6:	2500      	movs	r5, #0
 80125f8:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80125fc:	1076      	asrs	r6, r6, #1
 80125fe:	0052      	lsls	r2, r2, #1
 8012600:	f04f 0e16 	mov.w	lr, #22
 8012604:	46ac      	mov	ip, r5
 8012606:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801260a:	eb0c 0001 	add.w	r0, ip, r1
 801260e:	4298      	cmp	r0, r3
 8012610:	bfde      	ittt	le
 8012612:	1a1b      	suble	r3, r3, r0
 8012614:	eb00 0c01 	addle.w	ip, r0, r1
 8012618:	186d      	addle	r5, r5, r1
 801261a:	005b      	lsls	r3, r3, #1
 801261c:	f1be 0e01 	subs.w	lr, lr, #1
 8012620:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8012624:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8012628:	ea4f 0242 	mov.w	r2, r2, lsl #1
 801262c:	d1ed      	bne.n	801260a <__ieee754_sqrt+0x8a>
 801262e:	4674      	mov	r4, lr
 8012630:	2720      	movs	r7, #32
 8012632:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8012636:	4563      	cmp	r3, ip
 8012638:	eb01 000e 	add.w	r0, r1, lr
 801263c:	dc02      	bgt.n	8012644 <__ieee754_sqrt+0xc4>
 801263e:	d113      	bne.n	8012668 <__ieee754_sqrt+0xe8>
 8012640:	4290      	cmp	r0, r2
 8012642:	d811      	bhi.n	8012668 <__ieee754_sqrt+0xe8>
 8012644:	2800      	cmp	r0, #0
 8012646:	eb00 0e01 	add.w	lr, r0, r1
 801264a:	da57      	bge.n	80126fc <__ieee754_sqrt+0x17c>
 801264c:	f1be 0f00 	cmp.w	lr, #0
 8012650:	db54      	blt.n	80126fc <__ieee754_sqrt+0x17c>
 8012652:	f10c 0801 	add.w	r8, ip, #1
 8012656:	eba3 030c 	sub.w	r3, r3, ip
 801265a:	4290      	cmp	r0, r2
 801265c:	bf88      	it	hi
 801265e:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 8012662:	1a12      	subs	r2, r2, r0
 8012664:	440c      	add	r4, r1
 8012666:	46c4      	mov	ip, r8
 8012668:	005b      	lsls	r3, r3, #1
 801266a:	3f01      	subs	r7, #1
 801266c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8012670:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8012674:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8012678:	d1dd      	bne.n	8012636 <__ieee754_sqrt+0xb6>
 801267a:	4313      	orrs	r3, r2
 801267c:	d01b      	beq.n	80126b6 <__ieee754_sqrt+0x136>
 801267e:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 801272c <__ieee754_sqrt+0x1ac>
 8012682:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8012730 <__ieee754_sqrt+0x1b0>
 8012686:	e9da 0100 	ldrd	r0, r1, [sl]
 801268a:	e9db 2300 	ldrd	r2, r3, [fp]
 801268e:	f7ed fdbb 	bl	8000208 <__aeabi_dsub>
 8012692:	e9da 8900 	ldrd	r8, r9, [sl]
 8012696:	4602      	mov	r2, r0
 8012698:	460b      	mov	r3, r1
 801269a:	4640      	mov	r0, r8
 801269c:	4649      	mov	r1, r9
 801269e:	f7ee f9e7 	bl	8000a70 <__aeabi_dcmple>
 80126a2:	b140      	cbz	r0, 80126b6 <__ieee754_sqrt+0x136>
 80126a4:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 80126a8:	e9da 0100 	ldrd	r0, r1, [sl]
 80126ac:	e9db 2300 	ldrd	r2, r3, [fp]
 80126b0:	d126      	bne.n	8012700 <__ieee754_sqrt+0x180>
 80126b2:	3501      	adds	r5, #1
 80126b4:	463c      	mov	r4, r7
 80126b6:	106a      	asrs	r2, r5, #1
 80126b8:	0863      	lsrs	r3, r4, #1
 80126ba:	07e9      	lsls	r1, r5, #31
 80126bc:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80126c0:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80126c4:	bf48      	it	mi
 80126c6:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80126ca:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 80126ce:	461c      	mov	r4, r3
 80126d0:	e76d      	b.n	80125ae <__ieee754_sqrt+0x2e>
 80126d2:	0ad3      	lsrs	r3, r2, #11
 80126d4:	3815      	subs	r0, #21
 80126d6:	0552      	lsls	r2, r2, #21
 80126d8:	2b00      	cmp	r3, #0
 80126da:	d0fa      	beq.n	80126d2 <__ieee754_sqrt+0x152>
 80126dc:	02dc      	lsls	r4, r3, #11
 80126de:	d50a      	bpl.n	80126f6 <__ieee754_sqrt+0x176>
 80126e0:	f1c1 0420 	rsb	r4, r1, #32
 80126e4:	fa22 f404 	lsr.w	r4, r2, r4
 80126e8:	1e4d      	subs	r5, r1, #1
 80126ea:	408a      	lsls	r2, r1
 80126ec:	4323      	orrs	r3, r4
 80126ee:	1b41      	subs	r1, r0, r5
 80126f0:	e772      	b.n	80125d8 <__ieee754_sqrt+0x58>
 80126f2:	4608      	mov	r0, r1
 80126f4:	e7f0      	b.n	80126d8 <__ieee754_sqrt+0x158>
 80126f6:	005b      	lsls	r3, r3, #1
 80126f8:	3101      	adds	r1, #1
 80126fa:	e7ef      	b.n	80126dc <__ieee754_sqrt+0x15c>
 80126fc:	46e0      	mov	r8, ip
 80126fe:	e7aa      	b.n	8012656 <__ieee754_sqrt+0xd6>
 8012700:	f7ed fd84 	bl	800020c <__adddf3>
 8012704:	e9da 8900 	ldrd	r8, r9, [sl]
 8012708:	4602      	mov	r2, r0
 801270a:	460b      	mov	r3, r1
 801270c:	4640      	mov	r0, r8
 801270e:	4649      	mov	r1, r9
 8012710:	f7ee f9a4 	bl	8000a5c <__aeabi_dcmplt>
 8012714:	b120      	cbz	r0, 8012720 <__ieee754_sqrt+0x1a0>
 8012716:	1ca0      	adds	r0, r4, #2
 8012718:	bf08      	it	eq
 801271a:	3501      	addeq	r5, #1
 801271c:	3402      	adds	r4, #2
 801271e:	e7ca      	b.n	80126b6 <__ieee754_sqrt+0x136>
 8012720:	3401      	adds	r4, #1
 8012722:	f024 0401 	bic.w	r4, r4, #1
 8012726:	e7c6      	b.n	80126b6 <__ieee754_sqrt+0x136>
 8012728:	7ff00000 	.word	0x7ff00000
 801272c:	20000198 	.word	0x20000198
 8012730:	200001a0 	.word	0x200001a0
 8012734:	00000000 	.word	0x00000000

08012738 <nan>:
 8012738:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8012740 <nan+0x8>
 801273c:	4770      	bx	lr
 801273e:	bf00      	nop
 8012740:	00000000 	.word	0x00000000
 8012744:	7ff80000 	.word	0x7ff80000

08012748 <__ieee754_rem_pio2>:
 8012748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801274c:	ed2d 8b02 	vpush	{d8}
 8012750:	ec55 4b10 	vmov	r4, r5, d0
 8012754:	4bca      	ldr	r3, [pc, #808]	; (8012a80 <__ieee754_rem_pio2+0x338>)
 8012756:	b08b      	sub	sp, #44	; 0x2c
 8012758:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 801275c:	4598      	cmp	r8, r3
 801275e:	4682      	mov	sl, r0
 8012760:	9502      	str	r5, [sp, #8]
 8012762:	dc08      	bgt.n	8012776 <__ieee754_rem_pio2+0x2e>
 8012764:	2200      	movs	r2, #0
 8012766:	2300      	movs	r3, #0
 8012768:	ed80 0b00 	vstr	d0, [r0]
 801276c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8012770:	f04f 0b00 	mov.w	fp, #0
 8012774:	e028      	b.n	80127c8 <__ieee754_rem_pio2+0x80>
 8012776:	4bc3      	ldr	r3, [pc, #780]	; (8012a84 <__ieee754_rem_pio2+0x33c>)
 8012778:	4598      	cmp	r8, r3
 801277a:	dc78      	bgt.n	801286e <__ieee754_rem_pio2+0x126>
 801277c:	9b02      	ldr	r3, [sp, #8]
 801277e:	4ec2      	ldr	r6, [pc, #776]	; (8012a88 <__ieee754_rem_pio2+0x340>)
 8012780:	2b00      	cmp	r3, #0
 8012782:	ee10 0a10 	vmov	r0, s0
 8012786:	a3b0      	add	r3, pc, #704	; (adr r3, 8012a48 <__ieee754_rem_pio2+0x300>)
 8012788:	e9d3 2300 	ldrd	r2, r3, [r3]
 801278c:	4629      	mov	r1, r5
 801278e:	dd39      	ble.n	8012804 <__ieee754_rem_pio2+0xbc>
 8012790:	f7ed fd3a 	bl	8000208 <__aeabi_dsub>
 8012794:	45b0      	cmp	r8, r6
 8012796:	4604      	mov	r4, r0
 8012798:	460d      	mov	r5, r1
 801279a:	d01b      	beq.n	80127d4 <__ieee754_rem_pio2+0x8c>
 801279c:	a3ac      	add	r3, pc, #688	; (adr r3, 8012a50 <__ieee754_rem_pio2+0x308>)
 801279e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127a2:	f7ed fd31 	bl	8000208 <__aeabi_dsub>
 80127a6:	4602      	mov	r2, r0
 80127a8:	460b      	mov	r3, r1
 80127aa:	e9ca 2300 	strd	r2, r3, [sl]
 80127ae:	4620      	mov	r0, r4
 80127b0:	4629      	mov	r1, r5
 80127b2:	f7ed fd29 	bl	8000208 <__aeabi_dsub>
 80127b6:	a3a6      	add	r3, pc, #664	; (adr r3, 8012a50 <__ieee754_rem_pio2+0x308>)
 80127b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127bc:	f7ed fd24 	bl	8000208 <__aeabi_dsub>
 80127c0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80127c4:	f04f 0b01 	mov.w	fp, #1
 80127c8:	4658      	mov	r0, fp
 80127ca:	b00b      	add	sp, #44	; 0x2c
 80127cc:	ecbd 8b02 	vpop	{d8}
 80127d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80127d4:	a3a0      	add	r3, pc, #640	; (adr r3, 8012a58 <__ieee754_rem_pio2+0x310>)
 80127d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127da:	f7ed fd15 	bl	8000208 <__aeabi_dsub>
 80127de:	a3a0      	add	r3, pc, #640	; (adr r3, 8012a60 <__ieee754_rem_pio2+0x318>)
 80127e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127e4:	4604      	mov	r4, r0
 80127e6:	460d      	mov	r5, r1
 80127e8:	f7ed fd0e 	bl	8000208 <__aeabi_dsub>
 80127ec:	4602      	mov	r2, r0
 80127ee:	460b      	mov	r3, r1
 80127f0:	e9ca 2300 	strd	r2, r3, [sl]
 80127f4:	4620      	mov	r0, r4
 80127f6:	4629      	mov	r1, r5
 80127f8:	f7ed fd06 	bl	8000208 <__aeabi_dsub>
 80127fc:	a398      	add	r3, pc, #608	; (adr r3, 8012a60 <__ieee754_rem_pio2+0x318>)
 80127fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012802:	e7db      	b.n	80127bc <__ieee754_rem_pio2+0x74>
 8012804:	f7ed fd02 	bl	800020c <__adddf3>
 8012808:	45b0      	cmp	r8, r6
 801280a:	4604      	mov	r4, r0
 801280c:	460d      	mov	r5, r1
 801280e:	d016      	beq.n	801283e <__ieee754_rem_pio2+0xf6>
 8012810:	a38f      	add	r3, pc, #572	; (adr r3, 8012a50 <__ieee754_rem_pio2+0x308>)
 8012812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012816:	f7ed fcf9 	bl	800020c <__adddf3>
 801281a:	4602      	mov	r2, r0
 801281c:	460b      	mov	r3, r1
 801281e:	e9ca 2300 	strd	r2, r3, [sl]
 8012822:	4620      	mov	r0, r4
 8012824:	4629      	mov	r1, r5
 8012826:	f7ed fcef 	bl	8000208 <__aeabi_dsub>
 801282a:	a389      	add	r3, pc, #548	; (adr r3, 8012a50 <__ieee754_rem_pio2+0x308>)
 801282c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012830:	f7ed fcec 	bl	800020c <__adddf3>
 8012834:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8012838:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801283c:	e7c4      	b.n	80127c8 <__ieee754_rem_pio2+0x80>
 801283e:	a386      	add	r3, pc, #536	; (adr r3, 8012a58 <__ieee754_rem_pio2+0x310>)
 8012840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012844:	f7ed fce2 	bl	800020c <__adddf3>
 8012848:	a385      	add	r3, pc, #532	; (adr r3, 8012a60 <__ieee754_rem_pio2+0x318>)
 801284a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801284e:	4604      	mov	r4, r0
 8012850:	460d      	mov	r5, r1
 8012852:	f7ed fcdb 	bl	800020c <__adddf3>
 8012856:	4602      	mov	r2, r0
 8012858:	460b      	mov	r3, r1
 801285a:	e9ca 2300 	strd	r2, r3, [sl]
 801285e:	4620      	mov	r0, r4
 8012860:	4629      	mov	r1, r5
 8012862:	f7ed fcd1 	bl	8000208 <__aeabi_dsub>
 8012866:	a37e      	add	r3, pc, #504	; (adr r3, 8012a60 <__ieee754_rem_pio2+0x318>)
 8012868:	e9d3 2300 	ldrd	r2, r3, [r3]
 801286c:	e7e0      	b.n	8012830 <__ieee754_rem_pio2+0xe8>
 801286e:	4b87      	ldr	r3, [pc, #540]	; (8012a8c <__ieee754_rem_pio2+0x344>)
 8012870:	4598      	cmp	r8, r3
 8012872:	f300 80d8 	bgt.w	8012a26 <__ieee754_rem_pio2+0x2de>
 8012876:	f7ff fe1f 	bl	80124b8 <fabs>
 801287a:	ec55 4b10 	vmov	r4, r5, d0
 801287e:	ee10 0a10 	vmov	r0, s0
 8012882:	a379      	add	r3, pc, #484	; (adr r3, 8012a68 <__ieee754_rem_pio2+0x320>)
 8012884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012888:	4629      	mov	r1, r5
 801288a:	f7ed fe75 	bl	8000578 <__aeabi_dmul>
 801288e:	4b80      	ldr	r3, [pc, #512]	; (8012a90 <__ieee754_rem_pio2+0x348>)
 8012890:	2200      	movs	r2, #0
 8012892:	f7ed fcbb 	bl	800020c <__adddf3>
 8012896:	f7ee f91f 	bl	8000ad8 <__aeabi_d2iz>
 801289a:	4683      	mov	fp, r0
 801289c:	f7ed fe02 	bl	80004a4 <__aeabi_i2d>
 80128a0:	4602      	mov	r2, r0
 80128a2:	460b      	mov	r3, r1
 80128a4:	ec43 2b18 	vmov	d8, r2, r3
 80128a8:	a367      	add	r3, pc, #412	; (adr r3, 8012a48 <__ieee754_rem_pio2+0x300>)
 80128aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128ae:	f7ed fe63 	bl	8000578 <__aeabi_dmul>
 80128b2:	4602      	mov	r2, r0
 80128b4:	460b      	mov	r3, r1
 80128b6:	4620      	mov	r0, r4
 80128b8:	4629      	mov	r1, r5
 80128ba:	f7ed fca5 	bl	8000208 <__aeabi_dsub>
 80128be:	a364      	add	r3, pc, #400	; (adr r3, 8012a50 <__ieee754_rem_pio2+0x308>)
 80128c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128c4:	4606      	mov	r6, r0
 80128c6:	460f      	mov	r7, r1
 80128c8:	ec51 0b18 	vmov	r0, r1, d8
 80128cc:	f7ed fe54 	bl	8000578 <__aeabi_dmul>
 80128d0:	f1bb 0f1f 	cmp.w	fp, #31
 80128d4:	4604      	mov	r4, r0
 80128d6:	460d      	mov	r5, r1
 80128d8:	dc0d      	bgt.n	80128f6 <__ieee754_rem_pio2+0x1ae>
 80128da:	4b6e      	ldr	r3, [pc, #440]	; (8012a94 <__ieee754_rem_pio2+0x34c>)
 80128dc:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 80128e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80128e4:	4543      	cmp	r3, r8
 80128e6:	d006      	beq.n	80128f6 <__ieee754_rem_pio2+0x1ae>
 80128e8:	4622      	mov	r2, r4
 80128ea:	462b      	mov	r3, r5
 80128ec:	4630      	mov	r0, r6
 80128ee:	4639      	mov	r1, r7
 80128f0:	f7ed fc8a 	bl	8000208 <__aeabi_dsub>
 80128f4:	e00e      	b.n	8012914 <__ieee754_rem_pio2+0x1cc>
 80128f6:	462b      	mov	r3, r5
 80128f8:	4622      	mov	r2, r4
 80128fa:	4630      	mov	r0, r6
 80128fc:	4639      	mov	r1, r7
 80128fe:	f7ed fc83 	bl	8000208 <__aeabi_dsub>
 8012902:	ea4f 5328 	mov.w	r3, r8, asr #20
 8012906:	9303      	str	r3, [sp, #12]
 8012908:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801290c:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8012910:	2b10      	cmp	r3, #16
 8012912:	dc02      	bgt.n	801291a <__ieee754_rem_pio2+0x1d2>
 8012914:	e9ca 0100 	strd	r0, r1, [sl]
 8012918:	e039      	b.n	801298e <__ieee754_rem_pio2+0x246>
 801291a:	a34f      	add	r3, pc, #316	; (adr r3, 8012a58 <__ieee754_rem_pio2+0x310>)
 801291c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012920:	ec51 0b18 	vmov	r0, r1, d8
 8012924:	f7ed fe28 	bl	8000578 <__aeabi_dmul>
 8012928:	4604      	mov	r4, r0
 801292a:	460d      	mov	r5, r1
 801292c:	4602      	mov	r2, r0
 801292e:	460b      	mov	r3, r1
 8012930:	4630      	mov	r0, r6
 8012932:	4639      	mov	r1, r7
 8012934:	f7ed fc68 	bl	8000208 <__aeabi_dsub>
 8012938:	4602      	mov	r2, r0
 801293a:	460b      	mov	r3, r1
 801293c:	4680      	mov	r8, r0
 801293e:	4689      	mov	r9, r1
 8012940:	4630      	mov	r0, r6
 8012942:	4639      	mov	r1, r7
 8012944:	f7ed fc60 	bl	8000208 <__aeabi_dsub>
 8012948:	4622      	mov	r2, r4
 801294a:	462b      	mov	r3, r5
 801294c:	f7ed fc5c 	bl	8000208 <__aeabi_dsub>
 8012950:	a343      	add	r3, pc, #268	; (adr r3, 8012a60 <__ieee754_rem_pio2+0x318>)
 8012952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012956:	4604      	mov	r4, r0
 8012958:	460d      	mov	r5, r1
 801295a:	ec51 0b18 	vmov	r0, r1, d8
 801295e:	f7ed fe0b 	bl	8000578 <__aeabi_dmul>
 8012962:	4622      	mov	r2, r4
 8012964:	462b      	mov	r3, r5
 8012966:	f7ed fc4f 	bl	8000208 <__aeabi_dsub>
 801296a:	4602      	mov	r2, r0
 801296c:	460b      	mov	r3, r1
 801296e:	4604      	mov	r4, r0
 8012970:	460d      	mov	r5, r1
 8012972:	4640      	mov	r0, r8
 8012974:	4649      	mov	r1, r9
 8012976:	f7ed fc47 	bl	8000208 <__aeabi_dsub>
 801297a:	9a03      	ldr	r2, [sp, #12]
 801297c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8012980:	1ad3      	subs	r3, r2, r3
 8012982:	2b31      	cmp	r3, #49	; 0x31
 8012984:	dc24      	bgt.n	80129d0 <__ieee754_rem_pio2+0x288>
 8012986:	e9ca 0100 	strd	r0, r1, [sl]
 801298a:	4646      	mov	r6, r8
 801298c:	464f      	mov	r7, r9
 801298e:	e9da 8900 	ldrd	r8, r9, [sl]
 8012992:	4630      	mov	r0, r6
 8012994:	4642      	mov	r2, r8
 8012996:	464b      	mov	r3, r9
 8012998:	4639      	mov	r1, r7
 801299a:	f7ed fc35 	bl	8000208 <__aeabi_dsub>
 801299e:	462b      	mov	r3, r5
 80129a0:	4622      	mov	r2, r4
 80129a2:	f7ed fc31 	bl	8000208 <__aeabi_dsub>
 80129a6:	9b02      	ldr	r3, [sp, #8]
 80129a8:	2b00      	cmp	r3, #0
 80129aa:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80129ae:	f6bf af0b 	bge.w	80127c8 <__ieee754_rem_pio2+0x80>
 80129b2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80129b6:	f8ca 3004 	str.w	r3, [sl, #4]
 80129ba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80129be:	f8ca 8000 	str.w	r8, [sl]
 80129c2:	f8ca 0008 	str.w	r0, [sl, #8]
 80129c6:	f8ca 300c 	str.w	r3, [sl, #12]
 80129ca:	f1cb 0b00 	rsb	fp, fp, #0
 80129ce:	e6fb      	b.n	80127c8 <__ieee754_rem_pio2+0x80>
 80129d0:	a327      	add	r3, pc, #156	; (adr r3, 8012a70 <__ieee754_rem_pio2+0x328>)
 80129d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129d6:	ec51 0b18 	vmov	r0, r1, d8
 80129da:	f7ed fdcd 	bl	8000578 <__aeabi_dmul>
 80129de:	4604      	mov	r4, r0
 80129e0:	460d      	mov	r5, r1
 80129e2:	4602      	mov	r2, r0
 80129e4:	460b      	mov	r3, r1
 80129e6:	4640      	mov	r0, r8
 80129e8:	4649      	mov	r1, r9
 80129ea:	f7ed fc0d 	bl	8000208 <__aeabi_dsub>
 80129ee:	4602      	mov	r2, r0
 80129f0:	460b      	mov	r3, r1
 80129f2:	4606      	mov	r6, r0
 80129f4:	460f      	mov	r7, r1
 80129f6:	4640      	mov	r0, r8
 80129f8:	4649      	mov	r1, r9
 80129fa:	f7ed fc05 	bl	8000208 <__aeabi_dsub>
 80129fe:	4622      	mov	r2, r4
 8012a00:	462b      	mov	r3, r5
 8012a02:	f7ed fc01 	bl	8000208 <__aeabi_dsub>
 8012a06:	a31c      	add	r3, pc, #112	; (adr r3, 8012a78 <__ieee754_rem_pio2+0x330>)
 8012a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a0c:	4604      	mov	r4, r0
 8012a0e:	460d      	mov	r5, r1
 8012a10:	ec51 0b18 	vmov	r0, r1, d8
 8012a14:	f7ed fdb0 	bl	8000578 <__aeabi_dmul>
 8012a18:	4622      	mov	r2, r4
 8012a1a:	462b      	mov	r3, r5
 8012a1c:	f7ed fbf4 	bl	8000208 <__aeabi_dsub>
 8012a20:	4604      	mov	r4, r0
 8012a22:	460d      	mov	r5, r1
 8012a24:	e760      	b.n	80128e8 <__ieee754_rem_pio2+0x1a0>
 8012a26:	4b1c      	ldr	r3, [pc, #112]	; (8012a98 <__ieee754_rem_pio2+0x350>)
 8012a28:	4598      	cmp	r8, r3
 8012a2a:	dd37      	ble.n	8012a9c <__ieee754_rem_pio2+0x354>
 8012a2c:	ee10 2a10 	vmov	r2, s0
 8012a30:	462b      	mov	r3, r5
 8012a32:	4620      	mov	r0, r4
 8012a34:	4629      	mov	r1, r5
 8012a36:	f7ed fbe7 	bl	8000208 <__aeabi_dsub>
 8012a3a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8012a3e:	e9ca 0100 	strd	r0, r1, [sl]
 8012a42:	e695      	b.n	8012770 <__ieee754_rem_pio2+0x28>
 8012a44:	f3af 8000 	nop.w
 8012a48:	54400000 	.word	0x54400000
 8012a4c:	3ff921fb 	.word	0x3ff921fb
 8012a50:	1a626331 	.word	0x1a626331
 8012a54:	3dd0b461 	.word	0x3dd0b461
 8012a58:	1a600000 	.word	0x1a600000
 8012a5c:	3dd0b461 	.word	0x3dd0b461
 8012a60:	2e037073 	.word	0x2e037073
 8012a64:	3ba3198a 	.word	0x3ba3198a
 8012a68:	6dc9c883 	.word	0x6dc9c883
 8012a6c:	3fe45f30 	.word	0x3fe45f30
 8012a70:	2e000000 	.word	0x2e000000
 8012a74:	3ba3198a 	.word	0x3ba3198a
 8012a78:	252049c1 	.word	0x252049c1
 8012a7c:	397b839a 	.word	0x397b839a
 8012a80:	3fe921fb 	.word	0x3fe921fb
 8012a84:	4002d97b 	.word	0x4002d97b
 8012a88:	3ff921fb 	.word	0x3ff921fb
 8012a8c:	413921fb 	.word	0x413921fb
 8012a90:	3fe00000 	.word	0x3fe00000
 8012a94:	08013928 	.word	0x08013928
 8012a98:	7fefffff 	.word	0x7fefffff
 8012a9c:	ea4f 5628 	mov.w	r6, r8, asr #20
 8012aa0:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 8012aa4:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 8012aa8:	4620      	mov	r0, r4
 8012aaa:	460d      	mov	r5, r1
 8012aac:	f7ee f814 	bl	8000ad8 <__aeabi_d2iz>
 8012ab0:	f7ed fcf8 	bl	80004a4 <__aeabi_i2d>
 8012ab4:	4602      	mov	r2, r0
 8012ab6:	460b      	mov	r3, r1
 8012ab8:	4620      	mov	r0, r4
 8012aba:	4629      	mov	r1, r5
 8012abc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8012ac0:	f7ed fba2 	bl	8000208 <__aeabi_dsub>
 8012ac4:	4b21      	ldr	r3, [pc, #132]	; (8012b4c <__ieee754_rem_pio2+0x404>)
 8012ac6:	2200      	movs	r2, #0
 8012ac8:	f7ed fd56 	bl	8000578 <__aeabi_dmul>
 8012acc:	460d      	mov	r5, r1
 8012ace:	4604      	mov	r4, r0
 8012ad0:	f7ee f802 	bl	8000ad8 <__aeabi_d2iz>
 8012ad4:	f7ed fce6 	bl	80004a4 <__aeabi_i2d>
 8012ad8:	4602      	mov	r2, r0
 8012ada:	460b      	mov	r3, r1
 8012adc:	4620      	mov	r0, r4
 8012ade:	4629      	mov	r1, r5
 8012ae0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8012ae4:	f7ed fb90 	bl	8000208 <__aeabi_dsub>
 8012ae8:	4b18      	ldr	r3, [pc, #96]	; (8012b4c <__ieee754_rem_pio2+0x404>)
 8012aea:	2200      	movs	r2, #0
 8012aec:	f7ed fd44 	bl	8000578 <__aeabi_dmul>
 8012af0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8012af4:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8012af8:	2703      	movs	r7, #3
 8012afa:	2400      	movs	r4, #0
 8012afc:	2500      	movs	r5, #0
 8012afe:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 8012b02:	4622      	mov	r2, r4
 8012b04:	462b      	mov	r3, r5
 8012b06:	46b9      	mov	r9, r7
 8012b08:	3f01      	subs	r7, #1
 8012b0a:	f7ed ff9d 	bl	8000a48 <__aeabi_dcmpeq>
 8012b0e:	2800      	cmp	r0, #0
 8012b10:	d1f5      	bne.n	8012afe <__ieee754_rem_pio2+0x3b6>
 8012b12:	4b0f      	ldr	r3, [pc, #60]	; (8012b50 <__ieee754_rem_pio2+0x408>)
 8012b14:	9301      	str	r3, [sp, #4]
 8012b16:	2302      	movs	r3, #2
 8012b18:	9300      	str	r3, [sp, #0]
 8012b1a:	4632      	mov	r2, r6
 8012b1c:	464b      	mov	r3, r9
 8012b1e:	4651      	mov	r1, sl
 8012b20:	a804      	add	r0, sp, #16
 8012b22:	f000 f819 	bl	8012b58 <__kernel_rem_pio2>
 8012b26:	9b02      	ldr	r3, [sp, #8]
 8012b28:	2b00      	cmp	r3, #0
 8012b2a:	4683      	mov	fp, r0
 8012b2c:	f6bf ae4c 	bge.w	80127c8 <__ieee754_rem_pio2+0x80>
 8012b30:	e9da 2100 	ldrd	r2, r1, [sl]
 8012b34:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012b38:	e9ca 2300 	strd	r2, r3, [sl]
 8012b3c:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8012b40:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012b44:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8012b48:	e73f      	b.n	80129ca <__ieee754_rem_pio2+0x282>
 8012b4a:	bf00      	nop
 8012b4c:	41700000 	.word	0x41700000
 8012b50:	080139a8 	.word	0x080139a8
 8012b54:	00000000 	.word	0x00000000

08012b58 <__kernel_rem_pio2>:
 8012b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b5c:	ed2d 8b02 	vpush	{d8}
 8012b60:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8012b64:	f112 0f14 	cmn.w	r2, #20
 8012b68:	9306      	str	r3, [sp, #24]
 8012b6a:	9104      	str	r1, [sp, #16]
 8012b6c:	4bc2      	ldr	r3, [pc, #776]	; (8012e78 <__kernel_rem_pio2+0x320>)
 8012b6e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8012b70:	9009      	str	r0, [sp, #36]	; 0x24
 8012b72:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012b76:	9300      	str	r3, [sp, #0]
 8012b78:	9b06      	ldr	r3, [sp, #24]
 8012b7a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8012b7e:	bfa8      	it	ge
 8012b80:	1ed4      	subge	r4, r2, #3
 8012b82:	9305      	str	r3, [sp, #20]
 8012b84:	bfb2      	itee	lt
 8012b86:	2400      	movlt	r4, #0
 8012b88:	2318      	movge	r3, #24
 8012b8a:	fb94 f4f3 	sdivge	r4, r4, r3
 8012b8e:	f06f 0317 	mvn.w	r3, #23
 8012b92:	fb04 3303 	mla	r3, r4, r3, r3
 8012b96:	eb03 0a02 	add.w	sl, r3, r2
 8012b9a:	9b00      	ldr	r3, [sp, #0]
 8012b9c:	9a05      	ldr	r2, [sp, #20]
 8012b9e:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 8012e68 <__kernel_rem_pio2+0x310>
 8012ba2:	eb03 0802 	add.w	r8, r3, r2
 8012ba6:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8012ba8:	1aa7      	subs	r7, r4, r2
 8012baa:	ae20      	add	r6, sp, #128	; 0x80
 8012bac:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8012bb0:	2500      	movs	r5, #0
 8012bb2:	4545      	cmp	r5, r8
 8012bb4:	dd13      	ble.n	8012bde <__kernel_rem_pio2+0x86>
 8012bb6:	9b06      	ldr	r3, [sp, #24]
 8012bb8:	aa20      	add	r2, sp, #128	; 0x80
 8012bba:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8012bbe:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8012bc2:	f04f 0800 	mov.w	r8, #0
 8012bc6:	9b00      	ldr	r3, [sp, #0]
 8012bc8:	4598      	cmp	r8, r3
 8012bca:	dc31      	bgt.n	8012c30 <__kernel_rem_pio2+0xd8>
 8012bcc:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 8012e68 <__kernel_rem_pio2+0x310>
 8012bd0:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8012bd4:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012bd8:	462f      	mov	r7, r5
 8012bda:	2600      	movs	r6, #0
 8012bdc:	e01b      	b.n	8012c16 <__kernel_rem_pio2+0xbe>
 8012bde:	42ef      	cmn	r7, r5
 8012be0:	d407      	bmi.n	8012bf2 <__kernel_rem_pio2+0x9a>
 8012be2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8012be6:	f7ed fc5d 	bl	80004a4 <__aeabi_i2d>
 8012bea:	e8e6 0102 	strd	r0, r1, [r6], #8
 8012bee:	3501      	adds	r5, #1
 8012bf0:	e7df      	b.n	8012bb2 <__kernel_rem_pio2+0x5a>
 8012bf2:	ec51 0b18 	vmov	r0, r1, d8
 8012bf6:	e7f8      	b.n	8012bea <__kernel_rem_pio2+0x92>
 8012bf8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012bfc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8012c00:	f7ed fcba 	bl	8000578 <__aeabi_dmul>
 8012c04:	4602      	mov	r2, r0
 8012c06:	460b      	mov	r3, r1
 8012c08:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012c0c:	f7ed fafe 	bl	800020c <__adddf3>
 8012c10:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012c14:	3601      	adds	r6, #1
 8012c16:	9b05      	ldr	r3, [sp, #20]
 8012c18:	429e      	cmp	r6, r3
 8012c1a:	f1a7 0708 	sub.w	r7, r7, #8
 8012c1e:	ddeb      	ble.n	8012bf8 <__kernel_rem_pio2+0xa0>
 8012c20:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012c24:	f108 0801 	add.w	r8, r8, #1
 8012c28:	ecab 7b02 	vstmia	fp!, {d7}
 8012c2c:	3508      	adds	r5, #8
 8012c2e:	e7ca      	b.n	8012bc6 <__kernel_rem_pio2+0x6e>
 8012c30:	9b00      	ldr	r3, [sp, #0]
 8012c32:	aa0c      	add	r2, sp, #48	; 0x30
 8012c34:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012c38:	930b      	str	r3, [sp, #44]	; 0x2c
 8012c3a:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8012c3c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8012c40:	9c00      	ldr	r4, [sp, #0]
 8012c42:	930a      	str	r3, [sp, #40]	; 0x28
 8012c44:	00e3      	lsls	r3, r4, #3
 8012c46:	9308      	str	r3, [sp, #32]
 8012c48:	ab98      	add	r3, sp, #608	; 0x260
 8012c4a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8012c4e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8012c52:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 8012c56:	ab70      	add	r3, sp, #448	; 0x1c0
 8012c58:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8012c5c:	46c3      	mov	fp, r8
 8012c5e:	46a1      	mov	r9, r4
 8012c60:	f1b9 0f00 	cmp.w	r9, #0
 8012c64:	f1a5 0508 	sub.w	r5, r5, #8
 8012c68:	dc77      	bgt.n	8012d5a <__kernel_rem_pio2+0x202>
 8012c6a:	ec47 6b10 	vmov	d0, r6, r7
 8012c6e:	4650      	mov	r0, sl
 8012c70:	f000 fc4a 	bl	8013508 <scalbn>
 8012c74:	ec57 6b10 	vmov	r6, r7, d0
 8012c78:	2200      	movs	r2, #0
 8012c7a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8012c7e:	ee10 0a10 	vmov	r0, s0
 8012c82:	4639      	mov	r1, r7
 8012c84:	f7ed fc78 	bl	8000578 <__aeabi_dmul>
 8012c88:	ec41 0b10 	vmov	d0, r0, r1
 8012c8c:	f000 fcbc 	bl	8013608 <floor>
 8012c90:	4b7a      	ldr	r3, [pc, #488]	; (8012e7c <__kernel_rem_pio2+0x324>)
 8012c92:	ec51 0b10 	vmov	r0, r1, d0
 8012c96:	2200      	movs	r2, #0
 8012c98:	f7ed fc6e 	bl	8000578 <__aeabi_dmul>
 8012c9c:	4602      	mov	r2, r0
 8012c9e:	460b      	mov	r3, r1
 8012ca0:	4630      	mov	r0, r6
 8012ca2:	4639      	mov	r1, r7
 8012ca4:	f7ed fab0 	bl	8000208 <__aeabi_dsub>
 8012ca8:	460f      	mov	r7, r1
 8012caa:	4606      	mov	r6, r0
 8012cac:	f7ed ff14 	bl	8000ad8 <__aeabi_d2iz>
 8012cb0:	9002      	str	r0, [sp, #8]
 8012cb2:	f7ed fbf7 	bl	80004a4 <__aeabi_i2d>
 8012cb6:	4602      	mov	r2, r0
 8012cb8:	460b      	mov	r3, r1
 8012cba:	4630      	mov	r0, r6
 8012cbc:	4639      	mov	r1, r7
 8012cbe:	f7ed faa3 	bl	8000208 <__aeabi_dsub>
 8012cc2:	f1ba 0f00 	cmp.w	sl, #0
 8012cc6:	4606      	mov	r6, r0
 8012cc8:	460f      	mov	r7, r1
 8012cca:	dd6d      	ble.n	8012da8 <__kernel_rem_pio2+0x250>
 8012ccc:	1e61      	subs	r1, r4, #1
 8012cce:	ab0c      	add	r3, sp, #48	; 0x30
 8012cd0:	9d02      	ldr	r5, [sp, #8]
 8012cd2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012cd6:	f1ca 0018 	rsb	r0, sl, #24
 8012cda:	fa43 f200 	asr.w	r2, r3, r0
 8012cde:	4415      	add	r5, r2
 8012ce0:	4082      	lsls	r2, r0
 8012ce2:	1a9b      	subs	r3, r3, r2
 8012ce4:	aa0c      	add	r2, sp, #48	; 0x30
 8012ce6:	9502      	str	r5, [sp, #8]
 8012ce8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8012cec:	f1ca 0217 	rsb	r2, sl, #23
 8012cf0:	fa43 fb02 	asr.w	fp, r3, r2
 8012cf4:	f1bb 0f00 	cmp.w	fp, #0
 8012cf8:	dd65      	ble.n	8012dc6 <__kernel_rem_pio2+0x26e>
 8012cfa:	9b02      	ldr	r3, [sp, #8]
 8012cfc:	2200      	movs	r2, #0
 8012cfe:	3301      	adds	r3, #1
 8012d00:	9302      	str	r3, [sp, #8]
 8012d02:	4615      	mov	r5, r2
 8012d04:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8012d08:	4294      	cmp	r4, r2
 8012d0a:	f300 809f 	bgt.w	8012e4c <__kernel_rem_pio2+0x2f4>
 8012d0e:	f1ba 0f00 	cmp.w	sl, #0
 8012d12:	dd07      	ble.n	8012d24 <__kernel_rem_pio2+0x1cc>
 8012d14:	f1ba 0f01 	cmp.w	sl, #1
 8012d18:	f000 80c1 	beq.w	8012e9e <__kernel_rem_pio2+0x346>
 8012d1c:	f1ba 0f02 	cmp.w	sl, #2
 8012d20:	f000 80c7 	beq.w	8012eb2 <__kernel_rem_pio2+0x35a>
 8012d24:	f1bb 0f02 	cmp.w	fp, #2
 8012d28:	d14d      	bne.n	8012dc6 <__kernel_rem_pio2+0x26e>
 8012d2a:	4632      	mov	r2, r6
 8012d2c:	463b      	mov	r3, r7
 8012d2e:	4954      	ldr	r1, [pc, #336]	; (8012e80 <__kernel_rem_pio2+0x328>)
 8012d30:	2000      	movs	r0, #0
 8012d32:	f7ed fa69 	bl	8000208 <__aeabi_dsub>
 8012d36:	4606      	mov	r6, r0
 8012d38:	460f      	mov	r7, r1
 8012d3a:	2d00      	cmp	r5, #0
 8012d3c:	d043      	beq.n	8012dc6 <__kernel_rem_pio2+0x26e>
 8012d3e:	4650      	mov	r0, sl
 8012d40:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 8012e70 <__kernel_rem_pio2+0x318>
 8012d44:	f000 fbe0 	bl	8013508 <scalbn>
 8012d48:	4630      	mov	r0, r6
 8012d4a:	4639      	mov	r1, r7
 8012d4c:	ec53 2b10 	vmov	r2, r3, d0
 8012d50:	f7ed fa5a 	bl	8000208 <__aeabi_dsub>
 8012d54:	4606      	mov	r6, r0
 8012d56:	460f      	mov	r7, r1
 8012d58:	e035      	b.n	8012dc6 <__kernel_rem_pio2+0x26e>
 8012d5a:	4b4a      	ldr	r3, [pc, #296]	; (8012e84 <__kernel_rem_pio2+0x32c>)
 8012d5c:	2200      	movs	r2, #0
 8012d5e:	4630      	mov	r0, r6
 8012d60:	4639      	mov	r1, r7
 8012d62:	f7ed fc09 	bl	8000578 <__aeabi_dmul>
 8012d66:	f7ed feb7 	bl	8000ad8 <__aeabi_d2iz>
 8012d6a:	f7ed fb9b 	bl	80004a4 <__aeabi_i2d>
 8012d6e:	4602      	mov	r2, r0
 8012d70:	460b      	mov	r3, r1
 8012d72:	ec43 2b18 	vmov	d8, r2, r3
 8012d76:	4b44      	ldr	r3, [pc, #272]	; (8012e88 <__kernel_rem_pio2+0x330>)
 8012d78:	2200      	movs	r2, #0
 8012d7a:	f7ed fbfd 	bl	8000578 <__aeabi_dmul>
 8012d7e:	4602      	mov	r2, r0
 8012d80:	460b      	mov	r3, r1
 8012d82:	4630      	mov	r0, r6
 8012d84:	4639      	mov	r1, r7
 8012d86:	f7ed fa3f 	bl	8000208 <__aeabi_dsub>
 8012d8a:	f7ed fea5 	bl	8000ad8 <__aeabi_d2iz>
 8012d8e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8012d92:	f84b 0b04 	str.w	r0, [fp], #4
 8012d96:	ec51 0b18 	vmov	r0, r1, d8
 8012d9a:	f7ed fa37 	bl	800020c <__adddf3>
 8012d9e:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8012da2:	4606      	mov	r6, r0
 8012da4:	460f      	mov	r7, r1
 8012da6:	e75b      	b.n	8012c60 <__kernel_rem_pio2+0x108>
 8012da8:	d106      	bne.n	8012db8 <__kernel_rem_pio2+0x260>
 8012daa:	1e63      	subs	r3, r4, #1
 8012dac:	aa0c      	add	r2, sp, #48	; 0x30
 8012dae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012db2:	ea4f 5be3 	mov.w	fp, r3, asr #23
 8012db6:	e79d      	b.n	8012cf4 <__kernel_rem_pio2+0x19c>
 8012db8:	4b34      	ldr	r3, [pc, #208]	; (8012e8c <__kernel_rem_pio2+0x334>)
 8012dba:	2200      	movs	r2, #0
 8012dbc:	f7ed fe62 	bl	8000a84 <__aeabi_dcmpge>
 8012dc0:	2800      	cmp	r0, #0
 8012dc2:	d140      	bne.n	8012e46 <__kernel_rem_pio2+0x2ee>
 8012dc4:	4683      	mov	fp, r0
 8012dc6:	2200      	movs	r2, #0
 8012dc8:	2300      	movs	r3, #0
 8012dca:	4630      	mov	r0, r6
 8012dcc:	4639      	mov	r1, r7
 8012dce:	f7ed fe3b 	bl	8000a48 <__aeabi_dcmpeq>
 8012dd2:	2800      	cmp	r0, #0
 8012dd4:	f000 80c1 	beq.w	8012f5a <__kernel_rem_pio2+0x402>
 8012dd8:	1e65      	subs	r5, r4, #1
 8012dda:	462b      	mov	r3, r5
 8012ddc:	2200      	movs	r2, #0
 8012dde:	9900      	ldr	r1, [sp, #0]
 8012de0:	428b      	cmp	r3, r1
 8012de2:	da6d      	bge.n	8012ec0 <__kernel_rem_pio2+0x368>
 8012de4:	2a00      	cmp	r2, #0
 8012de6:	f000 808a 	beq.w	8012efe <__kernel_rem_pio2+0x3a6>
 8012dea:	ab0c      	add	r3, sp, #48	; 0x30
 8012dec:	f1aa 0a18 	sub.w	sl, sl, #24
 8012df0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8012df4:	2b00      	cmp	r3, #0
 8012df6:	f000 80ae 	beq.w	8012f56 <__kernel_rem_pio2+0x3fe>
 8012dfa:	4650      	mov	r0, sl
 8012dfc:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8012e70 <__kernel_rem_pio2+0x318>
 8012e00:	f000 fb82 	bl	8013508 <scalbn>
 8012e04:	1c6b      	adds	r3, r5, #1
 8012e06:	00da      	lsls	r2, r3, #3
 8012e08:	9205      	str	r2, [sp, #20]
 8012e0a:	ec57 6b10 	vmov	r6, r7, d0
 8012e0e:	aa70      	add	r2, sp, #448	; 0x1c0
 8012e10:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8012e84 <__kernel_rem_pio2+0x32c>
 8012e14:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 8012e18:	462c      	mov	r4, r5
 8012e1a:	f04f 0800 	mov.w	r8, #0
 8012e1e:	2c00      	cmp	r4, #0
 8012e20:	f280 80d4 	bge.w	8012fcc <__kernel_rem_pio2+0x474>
 8012e24:	462c      	mov	r4, r5
 8012e26:	2c00      	cmp	r4, #0
 8012e28:	f2c0 8102 	blt.w	8013030 <__kernel_rem_pio2+0x4d8>
 8012e2c:	4b18      	ldr	r3, [pc, #96]	; (8012e90 <__kernel_rem_pio2+0x338>)
 8012e2e:	461e      	mov	r6, r3
 8012e30:	ab70      	add	r3, sp, #448	; 0x1c0
 8012e32:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 8012e36:	1b2b      	subs	r3, r5, r4
 8012e38:	f04f 0900 	mov.w	r9, #0
 8012e3c:	f04f 0a00 	mov.w	sl, #0
 8012e40:	2700      	movs	r7, #0
 8012e42:	9306      	str	r3, [sp, #24]
 8012e44:	e0e6      	b.n	8013014 <__kernel_rem_pio2+0x4bc>
 8012e46:	f04f 0b02 	mov.w	fp, #2
 8012e4a:	e756      	b.n	8012cfa <__kernel_rem_pio2+0x1a2>
 8012e4c:	f8d8 3000 	ldr.w	r3, [r8]
 8012e50:	bb05      	cbnz	r5, 8012e94 <__kernel_rem_pio2+0x33c>
 8012e52:	b123      	cbz	r3, 8012e5e <__kernel_rem_pio2+0x306>
 8012e54:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8012e58:	f8c8 3000 	str.w	r3, [r8]
 8012e5c:	2301      	movs	r3, #1
 8012e5e:	3201      	adds	r2, #1
 8012e60:	f108 0804 	add.w	r8, r8, #4
 8012e64:	461d      	mov	r5, r3
 8012e66:	e74f      	b.n	8012d08 <__kernel_rem_pio2+0x1b0>
	...
 8012e74:	3ff00000 	.word	0x3ff00000
 8012e78:	08013af0 	.word	0x08013af0
 8012e7c:	40200000 	.word	0x40200000
 8012e80:	3ff00000 	.word	0x3ff00000
 8012e84:	3e700000 	.word	0x3e700000
 8012e88:	41700000 	.word	0x41700000
 8012e8c:	3fe00000 	.word	0x3fe00000
 8012e90:	08013ab0 	.word	0x08013ab0
 8012e94:	1acb      	subs	r3, r1, r3
 8012e96:	f8c8 3000 	str.w	r3, [r8]
 8012e9a:	462b      	mov	r3, r5
 8012e9c:	e7df      	b.n	8012e5e <__kernel_rem_pio2+0x306>
 8012e9e:	1e62      	subs	r2, r4, #1
 8012ea0:	ab0c      	add	r3, sp, #48	; 0x30
 8012ea2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012ea6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8012eaa:	a90c      	add	r1, sp, #48	; 0x30
 8012eac:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8012eb0:	e738      	b.n	8012d24 <__kernel_rem_pio2+0x1cc>
 8012eb2:	1e62      	subs	r2, r4, #1
 8012eb4:	ab0c      	add	r3, sp, #48	; 0x30
 8012eb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012eba:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8012ebe:	e7f4      	b.n	8012eaa <__kernel_rem_pio2+0x352>
 8012ec0:	a90c      	add	r1, sp, #48	; 0x30
 8012ec2:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8012ec6:	3b01      	subs	r3, #1
 8012ec8:	430a      	orrs	r2, r1
 8012eca:	e788      	b.n	8012dde <__kernel_rem_pio2+0x286>
 8012ecc:	3301      	adds	r3, #1
 8012ece:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8012ed2:	2900      	cmp	r1, #0
 8012ed4:	d0fa      	beq.n	8012ecc <__kernel_rem_pio2+0x374>
 8012ed6:	9a08      	ldr	r2, [sp, #32]
 8012ed8:	f502 7218 	add.w	r2, r2, #608	; 0x260
 8012edc:	446a      	add	r2, sp
 8012ede:	3a98      	subs	r2, #152	; 0x98
 8012ee0:	9208      	str	r2, [sp, #32]
 8012ee2:	9a06      	ldr	r2, [sp, #24]
 8012ee4:	a920      	add	r1, sp, #128	; 0x80
 8012ee6:	18a2      	adds	r2, r4, r2
 8012ee8:	18e3      	adds	r3, r4, r3
 8012eea:	f104 0801 	add.w	r8, r4, #1
 8012eee:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 8012ef2:	9302      	str	r3, [sp, #8]
 8012ef4:	9b02      	ldr	r3, [sp, #8]
 8012ef6:	4543      	cmp	r3, r8
 8012ef8:	da04      	bge.n	8012f04 <__kernel_rem_pio2+0x3ac>
 8012efa:	461c      	mov	r4, r3
 8012efc:	e6a2      	b.n	8012c44 <__kernel_rem_pio2+0xec>
 8012efe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012f00:	2301      	movs	r3, #1
 8012f02:	e7e4      	b.n	8012ece <__kernel_rem_pio2+0x376>
 8012f04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012f06:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8012f0a:	f7ed facb 	bl	80004a4 <__aeabi_i2d>
 8012f0e:	e8e5 0102 	strd	r0, r1, [r5], #8
 8012f12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012f14:	46ab      	mov	fp, r5
 8012f16:	461c      	mov	r4, r3
 8012f18:	f04f 0900 	mov.w	r9, #0
 8012f1c:	2600      	movs	r6, #0
 8012f1e:	2700      	movs	r7, #0
 8012f20:	9b05      	ldr	r3, [sp, #20]
 8012f22:	4599      	cmp	r9, r3
 8012f24:	dd06      	ble.n	8012f34 <__kernel_rem_pio2+0x3dc>
 8012f26:	9b08      	ldr	r3, [sp, #32]
 8012f28:	e8e3 6702 	strd	r6, r7, [r3], #8
 8012f2c:	f108 0801 	add.w	r8, r8, #1
 8012f30:	9308      	str	r3, [sp, #32]
 8012f32:	e7df      	b.n	8012ef4 <__kernel_rem_pio2+0x39c>
 8012f34:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8012f38:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8012f3c:	f7ed fb1c 	bl	8000578 <__aeabi_dmul>
 8012f40:	4602      	mov	r2, r0
 8012f42:	460b      	mov	r3, r1
 8012f44:	4630      	mov	r0, r6
 8012f46:	4639      	mov	r1, r7
 8012f48:	f7ed f960 	bl	800020c <__adddf3>
 8012f4c:	f109 0901 	add.w	r9, r9, #1
 8012f50:	4606      	mov	r6, r0
 8012f52:	460f      	mov	r7, r1
 8012f54:	e7e4      	b.n	8012f20 <__kernel_rem_pio2+0x3c8>
 8012f56:	3d01      	subs	r5, #1
 8012f58:	e747      	b.n	8012dea <__kernel_rem_pio2+0x292>
 8012f5a:	ec47 6b10 	vmov	d0, r6, r7
 8012f5e:	f1ca 0000 	rsb	r0, sl, #0
 8012f62:	f000 fad1 	bl	8013508 <scalbn>
 8012f66:	ec57 6b10 	vmov	r6, r7, d0
 8012f6a:	4ba0      	ldr	r3, [pc, #640]	; (80131ec <__kernel_rem_pio2+0x694>)
 8012f6c:	ee10 0a10 	vmov	r0, s0
 8012f70:	2200      	movs	r2, #0
 8012f72:	4639      	mov	r1, r7
 8012f74:	f7ed fd86 	bl	8000a84 <__aeabi_dcmpge>
 8012f78:	b1f8      	cbz	r0, 8012fba <__kernel_rem_pio2+0x462>
 8012f7a:	4b9d      	ldr	r3, [pc, #628]	; (80131f0 <__kernel_rem_pio2+0x698>)
 8012f7c:	2200      	movs	r2, #0
 8012f7e:	4630      	mov	r0, r6
 8012f80:	4639      	mov	r1, r7
 8012f82:	f7ed faf9 	bl	8000578 <__aeabi_dmul>
 8012f86:	f7ed fda7 	bl	8000ad8 <__aeabi_d2iz>
 8012f8a:	4680      	mov	r8, r0
 8012f8c:	f7ed fa8a 	bl	80004a4 <__aeabi_i2d>
 8012f90:	4b96      	ldr	r3, [pc, #600]	; (80131ec <__kernel_rem_pio2+0x694>)
 8012f92:	2200      	movs	r2, #0
 8012f94:	f7ed faf0 	bl	8000578 <__aeabi_dmul>
 8012f98:	460b      	mov	r3, r1
 8012f9a:	4602      	mov	r2, r0
 8012f9c:	4639      	mov	r1, r7
 8012f9e:	4630      	mov	r0, r6
 8012fa0:	f7ed f932 	bl	8000208 <__aeabi_dsub>
 8012fa4:	f7ed fd98 	bl	8000ad8 <__aeabi_d2iz>
 8012fa8:	1c65      	adds	r5, r4, #1
 8012faa:	ab0c      	add	r3, sp, #48	; 0x30
 8012fac:	f10a 0a18 	add.w	sl, sl, #24
 8012fb0:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8012fb4:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8012fb8:	e71f      	b.n	8012dfa <__kernel_rem_pio2+0x2a2>
 8012fba:	4630      	mov	r0, r6
 8012fbc:	4639      	mov	r1, r7
 8012fbe:	f7ed fd8b 	bl	8000ad8 <__aeabi_d2iz>
 8012fc2:	ab0c      	add	r3, sp, #48	; 0x30
 8012fc4:	4625      	mov	r5, r4
 8012fc6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8012fca:	e716      	b.n	8012dfa <__kernel_rem_pio2+0x2a2>
 8012fcc:	ab0c      	add	r3, sp, #48	; 0x30
 8012fce:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8012fd2:	f7ed fa67 	bl	80004a4 <__aeabi_i2d>
 8012fd6:	4632      	mov	r2, r6
 8012fd8:	463b      	mov	r3, r7
 8012fda:	f7ed facd 	bl	8000578 <__aeabi_dmul>
 8012fde:	4642      	mov	r2, r8
 8012fe0:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8012fe4:	464b      	mov	r3, r9
 8012fe6:	4630      	mov	r0, r6
 8012fe8:	4639      	mov	r1, r7
 8012fea:	f7ed fac5 	bl	8000578 <__aeabi_dmul>
 8012fee:	3c01      	subs	r4, #1
 8012ff0:	4606      	mov	r6, r0
 8012ff2:	460f      	mov	r7, r1
 8012ff4:	e713      	b.n	8012e1e <__kernel_rem_pio2+0x2c6>
 8012ff6:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 8012ffa:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 8012ffe:	f7ed fabb 	bl	8000578 <__aeabi_dmul>
 8013002:	4602      	mov	r2, r0
 8013004:	460b      	mov	r3, r1
 8013006:	4648      	mov	r0, r9
 8013008:	4651      	mov	r1, sl
 801300a:	f7ed f8ff 	bl	800020c <__adddf3>
 801300e:	3701      	adds	r7, #1
 8013010:	4681      	mov	r9, r0
 8013012:	468a      	mov	sl, r1
 8013014:	9b00      	ldr	r3, [sp, #0]
 8013016:	429f      	cmp	r7, r3
 8013018:	dc02      	bgt.n	8013020 <__kernel_rem_pio2+0x4c8>
 801301a:	9b06      	ldr	r3, [sp, #24]
 801301c:	429f      	cmp	r7, r3
 801301e:	ddea      	ble.n	8012ff6 <__kernel_rem_pio2+0x49e>
 8013020:	9a06      	ldr	r2, [sp, #24]
 8013022:	ab48      	add	r3, sp, #288	; 0x120
 8013024:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 8013028:	e9c6 9a00 	strd	r9, sl, [r6]
 801302c:	3c01      	subs	r4, #1
 801302e:	e6fa      	b.n	8012e26 <__kernel_rem_pio2+0x2ce>
 8013030:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8013032:	2b02      	cmp	r3, #2
 8013034:	dc0b      	bgt.n	801304e <__kernel_rem_pio2+0x4f6>
 8013036:	2b00      	cmp	r3, #0
 8013038:	dc39      	bgt.n	80130ae <__kernel_rem_pio2+0x556>
 801303a:	d05d      	beq.n	80130f8 <__kernel_rem_pio2+0x5a0>
 801303c:	9b02      	ldr	r3, [sp, #8]
 801303e:	f003 0007 	and.w	r0, r3, #7
 8013042:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8013046:	ecbd 8b02 	vpop	{d8}
 801304a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801304e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8013050:	2b03      	cmp	r3, #3
 8013052:	d1f3      	bne.n	801303c <__kernel_rem_pio2+0x4e4>
 8013054:	9b05      	ldr	r3, [sp, #20]
 8013056:	9500      	str	r5, [sp, #0]
 8013058:	f503 7318 	add.w	r3, r3, #608	; 0x260
 801305c:	eb0d 0403 	add.w	r4, sp, r3
 8013060:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 8013064:	46a2      	mov	sl, r4
 8013066:	9b00      	ldr	r3, [sp, #0]
 8013068:	2b00      	cmp	r3, #0
 801306a:	f1aa 0a08 	sub.w	sl, sl, #8
 801306e:	dc69      	bgt.n	8013144 <__kernel_rem_pio2+0x5ec>
 8013070:	46aa      	mov	sl, r5
 8013072:	f1ba 0f01 	cmp.w	sl, #1
 8013076:	f1a4 0408 	sub.w	r4, r4, #8
 801307a:	f300 8083 	bgt.w	8013184 <__kernel_rem_pio2+0x62c>
 801307e:	9c05      	ldr	r4, [sp, #20]
 8013080:	ab48      	add	r3, sp, #288	; 0x120
 8013082:	441c      	add	r4, r3
 8013084:	2000      	movs	r0, #0
 8013086:	2100      	movs	r1, #0
 8013088:	2d01      	cmp	r5, #1
 801308a:	f300 809a 	bgt.w	80131c2 <__kernel_rem_pio2+0x66a>
 801308e:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 8013092:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8013096:	f1bb 0f00 	cmp.w	fp, #0
 801309a:	f040 8098 	bne.w	80131ce <__kernel_rem_pio2+0x676>
 801309e:	9b04      	ldr	r3, [sp, #16]
 80130a0:	e9c3 7800 	strd	r7, r8, [r3]
 80130a4:	e9c3 5602 	strd	r5, r6, [r3, #8]
 80130a8:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80130ac:	e7c6      	b.n	801303c <__kernel_rem_pio2+0x4e4>
 80130ae:	9e05      	ldr	r6, [sp, #20]
 80130b0:	ab48      	add	r3, sp, #288	; 0x120
 80130b2:	441e      	add	r6, r3
 80130b4:	462c      	mov	r4, r5
 80130b6:	2000      	movs	r0, #0
 80130b8:	2100      	movs	r1, #0
 80130ba:	2c00      	cmp	r4, #0
 80130bc:	da33      	bge.n	8013126 <__kernel_rem_pio2+0x5ce>
 80130be:	f1bb 0f00 	cmp.w	fp, #0
 80130c2:	d036      	beq.n	8013132 <__kernel_rem_pio2+0x5da>
 80130c4:	4602      	mov	r2, r0
 80130c6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80130ca:	9c04      	ldr	r4, [sp, #16]
 80130cc:	e9c4 2300 	strd	r2, r3, [r4]
 80130d0:	4602      	mov	r2, r0
 80130d2:	460b      	mov	r3, r1
 80130d4:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 80130d8:	f7ed f896 	bl	8000208 <__aeabi_dsub>
 80130dc:	ae4a      	add	r6, sp, #296	; 0x128
 80130de:	2401      	movs	r4, #1
 80130e0:	42a5      	cmp	r5, r4
 80130e2:	da29      	bge.n	8013138 <__kernel_rem_pio2+0x5e0>
 80130e4:	f1bb 0f00 	cmp.w	fp, #0
 80130e8:	d002      	beq.n	80130f0 <__kernel_rem_pio2+0x598>
 80130ea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80130ee:	4619      	mov	r1, r3
 80130f0:	9b04      	ldr	r3, [sp, #16]
 80130f2:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80130f6:	e7a1      	b.n	801303c <__kernel_rem_pio2+0x4e4>
 80130f8:	9c05      	ldr	r4, [sp, #20]
 80130fa:	ab48      	add	r3, sp, #288	; 0x120
 80130fc:	441c      	add	r4, r3
 80130fe:	2000      	movs	r0, #0
 8013100:	2100      	movs	r1, #0
 8013102:	2d00      	cmp	r5, #0
 8013104:	da09      	bge.n	801311a <__kernel_rem_pio2+0x5c2>
 8013106:	f1bb 0f00 	cmp.w	fp, #0
 801310a:	d002      	beq.n	8013112 <__kernel_rem_pio2+0x5ba>
 801310c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013110:	4619      	mov	r1, r3
 8013112:	9b04      	ldr	r3, [sp, #16]
 8013114:	e9c3 0100 	strd	r0, r1, [r3]
 8013118:	e790      	b.n	801303c <__kernel_rem_pio2+0x4e4>
 801311a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801311e:	f7ed f875 	bl	800020c <__adddf3>
 8013122:	3d01      	subs	r5, #1
 8013124:	e7ed      	b.n	8013102 <__kernel_rem_pio2+0x5aa>
 8013126:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 801312a:	f7ed f86f 	bl	800020c <__adddf3>
 801312e:	3c01      	subs	r4, #1
 8013130:	e7c3      	b.n	80130ba <__kernel_rem_pio2+0x562>
 8013132:	4602      	mov	r2, r0
 8013134:	460b      	mov	r3, r1
 8013136:	e7c8      	b.n	80130ca <__kernel_rem_pio2+0x572>
 8013138:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 801313c:	f7ed f866 	bl	800020c <__adddf3>
 8013140:	3401      	adds	r4, #1
 8013142:	e7cd      	b.n	80130e0 <__kernel_rem_pio2+0x588>
 8013144:	e9da 8900 	ldrd	r8, r9, [sl]
 8013148:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 801314c:	9b00      	ldr	r3, [sp, #0]
 801314e:	3b01      	subs	r3, #1
 8013150:	9300      	str	r3, [sp, #0]
 8013152:	4632      	mov	r2, r6
 8013154:	463b      	mov	r3, r7
 8013156:	4640      	mov	r0, r8
 8013158:	4649      	mov	r1, r9
 801315a:	f7ed f857 	bl	800020c <__adddf3>
 801315e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8013162:	4602      	mov	r2, r0
 8013164:	460b      	mov	r3, r1
 8013166:	4640      	mov	r0, r8
 8013168:	4649      	mov	r1, r9
 801316a:	f7ed f84d 	bl	8000208 <__aeabi_dsub>
 801316e:	4632      	mov	r2, r6
 8013170:	463b      	mov	r3, r7
 8013172:	f7ed f84b 	bl	800020c <__adddf3>
 8013176:	ed9d 7b06 	vldr	d7, [sp, #24]
 801317a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801317e:	ed8a 7b00 	vstr	d7, [sl]
 8013182:	e770      	b.n	8013066 <__kernel_rem_pio2+0x50e>
 8013184:	e9d4 8900 	ldrd	r8, r9, [r4]
 8013188:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 801318c:	4640      	mov	r0, r8
 801318e:	4632      	mov	r2, r6
 8013190:	463b      	mov	r3, r7
 8013192:	4649      	mov	r1, r9
 8013194:	f7ed f83a 	bl	800020c <__adddf3>
 8013198:	e9cd 0100 	strd	r0, r1, [sp]
 801319c:	4602      	mov	r2, r0
 801319e:	460b      	mov	r3, r1
 80131a0:	4640      	mov	r0, r8
 80131a2:	4649      	mov	r1, r9
 80131a4:	f7ed f830 	bl	8000208 <__aeabi_dsub>
 80131a8:	4632      	mov	r2, r6
 80131aa:	463b      	mov	r3, r7
 80131ac:	f7ed f82e 	bl	800020c <__adddf3>
 80131b0:	ed9d 7b00 	vldr	d7, [sp]
 80131b4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80131b8:	ed84 7b00 	vstr	d7, [r4]
 80131bc:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80131c0:	e757      	b.n	8013072 <__kernel_rem_pio2+0x51a>
 80131c2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80131c6:	f7ed f821 	bl	800020c <__adddf3>
 80131ca:	3d01      	subs	r5, #1
 80131cc:	e75c      	b.n	8013088 <__kernel_rem_pio2+0x530>
 80131ce:	9b04      	ldr	r3, [sp, #16]
 80131d0:	9a04      	ldr	r2, [sp, #16]
 80131d2:	601f      	str	r7, [r3, #0]
 80131d4:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 80131d8:	605c      	str	r4, [r3, #4]
 80131da:	609d      	str	r5, [r3, #8]
 80131dc:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80131e0:	60d3      	str	r3, [r2, #12]
 80131e2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80131e6:	6110      	str	r0, [r2, #16]
 80131e8:	6153      	str	r3, [r2, #20]
 80131ea:	e727      	b.n	801303c <__kernel_rem_pio2+0x4e4>
 80131ec:	41700000 	.word	0x41700000
 80131f0:	3e700000 	.word	0x3e700000
 80131f4:	00000000 	.word	0x00000000

080131f8 <__kernel_cos>:
 80131f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80131fc:	ec57 6b10 	vmov	r6, r7, d0
 8013200:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8013204:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8013208:	ed8d 1b00 	vstr	d1, [sp]
 801320c:	da07      	bge.n	801321e <__kernel_cos+0x26>
 801320e:	ee10 0a10 	vmov	r0, s0
 8013212:	4639      	mov	r1, r7
 8013214:	f7ed fc60 	bl	8000ad8 <__aeabi_d2iz>
 8013218:	2800      	cmp	r0, #0
 801321a:	f000 8088 	beq.w	801332e <__kernel_cos+0x136>
 801321e:	4632      	mov	r2, r6
 8013220:	463b      	mov	r3, r7
 8013222:	4630      	mov	r0, r6
 8013224:	4639      	mov	r1, r7
 8013226:	f7ed f9a7 	bl	8000578 <__aeabi_dmul>
 801322a:	4b51      	ldr	r3, [pc, #324]	; (8013370 <__kernel_cos+0x178>)
 801322c:	2200      	movs	r2, #0
 801322e:	4604      	mov	r4, r0
 8013230:	460d      	mov	r5, r1
 8013232:	f7ed f9a1 	bl	8000578 <__aeabi_dmul>
 8013236:	a340      	add	r3, pc, #256	; (adr r3, 8013338 <__kernel_cos+0x140>)
 8013238:	e9d3 2300 	ldrd	r2, r3, [r3]
 801323c:	4682      	mov	sl, r0
 801323e:	468b      	mov	fp, r1
 8013240:	4620      	mov	r0, r4
 8013242:	4629      	mov	r1, r5
 8013244:	f7ed f998 	bl	8000578 <__aeabi_dmul>
 8013248:	a33d      	add	r3, pc, #244	; (adr r3, 8013340 <__kernel_cos+0x148>)
 801324a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801324e:	f7ec ffdd 	bl	800020c <__adddf3>
 8013252:	4622      	mov	r2, r4
 8013254:	462b      	mov	r3, r5
 8013256:	f7ed f98f 	bl	8000578 <__aeabi_dmul>
 801325a:	a33b      	add	r3, pc, #236	; (adr r3, 8013348 <__kernel_cos+0x150>)
 801325c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013260:	f7ec ffd2 	bl	8000208 <__aeabi_dsub>
 8013264:	4622      	mov	r2, r4
 8013266:	462b      	mov	r3, r5
 8013268:	f7ed f986 	bl	8000578 <__aeabi_dmul>
 801326c:	a338      	add	r3, pc, #224	; (adr r3, 8013350 <__kernel_cos+0x158>)
 801326e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013272:	f7ec ffcb 	bl	800020c <__adddf3>
 8013276:	4622      	mov	r2, r4
 8013278:	462b      	mov	r3, r5
 801327a:	f7ed f97d 	bl	8000578 <__aeabi_dmul>
 801327e:	a336      	add	r3, pc, #216	; (adr r3, 8013358 <__kernel_cos+0x160>)
 8013280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013284:	f7ec ffc0 	bl	8000208 <__aeabi_dsub>
 8013288:	4622      	mov	r2, r4
 801328a:	462b      	mov	r3, r5
 801328c:	f7ed f974 	bl	8000578 <__aeabi_dmul>
 8013290:	a333      	add	r3, pc, #204	; (adr r3, 8013360 <__kernel_cos+0x168>)
 8013292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013296:	f7ec ffb9 	bl	800020c <__adddf3>
 801329a:	4622      	mov	r2, r4
 801329c:	462b      	mov	r3, r5
 801329e:	f7ed f96b 	bl	8000578 <__aeabi_dmul>
 80132a2:	4622      	mov	r2, r4
 80132a4:	462b      	mov	r3, r5
 80132a6:	f7ed f967 	bl	8000578 <__aeabi_dmul>
 80132aa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80132ae:	4604      	mov	r4, r0
 80132b0:	460d      	mov	r5, r1
 80132b2:	4630      	mov	r0, r6
 80132b4:	4639      	mov	r1, r7
 80132b6:	f7ed f95f 	bl	8000578 <__aeabi_dmul>
 80132ba:	460b      	mov	r3, r1
 80132bc:	4602      	mov	r2, r0
 80132be:	4629      	mov	r1, r5
 80132c0:	4620      	mov	r0, r4
 80132c2:	f7ec ffa1 	bl	8000208 <__aeabi_dsub>
 80132c6:	4b2b      	ldr	r3, [pc, #172]	; (8013374 <__kernel_cos+0x17c>)
 80132c8:	4598      	cmp	r8, r3
 80132ca:	4606      	mov	r6, r0
 80132cc:	460f      	mov	r7, r1
 80132ce:	dc10      	bgt.n	80132f2 <__kernel_cos+0xfa>
 80132d0:	4602      	mov	r2, r0
 80132d2:	460b      	mov	r3, r1
 80132d4:	4650      	mov	r0, sl
 80132d6:	4659      	mov	r1, fp
 80132d8:	f7ec ff96 	bl	8000208 <__aeabi_dsub>
 80132dc:	460b      	mov	r3, r1
 80132de:	4926      	ldr	r1, [pc, #152]	; (8013378 <__kernel_cos+0x180>)
 80132e0:	4602      	mov	r2, r0
 80132e2:	2000      	movs	r0, #0
 80132e4:	f7ec ff90 	bl	8000208 <__aeabi_dsub>
 80132e8:	ec41 0b10 	vmov	d0, r0, r1
 80132ec:	b003      	add	sp, #12
 80132ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80132f2:	4b22      	ldr	r3, [pc, #136]	; (801337c <__kernel_cos+0x184>)
 80132f4:	4920      	ldr	r1, [pc, #128]	; (8013378 <__kernel_cos+0x180>)
 80132f6:	4598      	cmp	r8, r3
 80132f8:	bfcc      	ite	gt
 80132fa:	4d21      	ldrgt	r5, [pc, #132]	; (8013380 <__kernel_cos+0x188>)
 80132fc:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8013300:	2400      	movs	r4, #0
 8013302:	4622      	mov	r2, r4
 8013304:	462b      	mov	r3, r5
 8013306:	2000      	movs	r0, #0
 8013308:	f7ec ff7e 	bl	8000208 <__aeabi_dsub>
 801330c:	4622      	mov	r2, r4
 801330e:	4680      	mov	r8, r0
 8013310:	4689      	mov	r9, r1
 8013312:	462b      	mov	r3, r5
 8013314:	4650      	mov	r0, sl
 8013316:	4659      	mov	r1, fp
 8013318:	f7ec ff76 	bl	8000208 <__aeabi_dsub>
 801331c:	4632      	mov	r2, r6
 801331e:	463b      	mov	r3, r7
 8013320:	f7ec ff72 	bl	8000208 <__aeabi_dsub>
 8013324:	4602      	mov	r2, r0
 8013326:	460b      	mov	r3, r1
 8013328:	4640      	mov	r0, r8
 801332a:	4649      	mov	r1, r9
 801332c:	e7da      	b.n	80132e4 <__kernel_cos+0xec>
 801332e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8013368 <__kernel_cos+0x170>
 8013332:	e7db      	b.n	80132ec <__kernel_cos+0xf4>
 8013334:	f3af 8000 	nop.w
 8013338:	be8838d4 	.word	0xbe8838d4
 801333c:	bda8fae9 	.word	0xbda8fae9
 8013340:	bdb4b1c4 	.word	0xbdb4b1c4
 8013344:	3e21ee9e 	.word	0x3e21ee9e
 8013348:	809c52ad 	.word	0x809c52ad
 801334c:	3e927e4f 	.word	0x3e927e4f
 8013350:	19cb1590 	.word	0x19cb1590
 8013354:	3efa01a0 	.word	0x3efa01a0
 8013358:	16c15177 	.word	0x16c15177
 801335c:	3f56c16c 	.word	0x3f56c16c
 8013360:	5555554c 	.word	0x5555554c
 8013364:	3fa55555 	.word	0x3fa55555
 8013368:	00000000 	.word	0x00000000
 801336c:	3ff00000 	.word	0x3ff00000
 8013370:	3fe00000 	.word	0x3fe00000
 8013374:	3fd33332 	.word	0x3fd33332
 8013378:	3ff00000 	.word	0x3ff00000
 801337c:	3fe90000 	.word	0x3fe90000
 8013380:	3fd20000 	.word	0x3fd20000
 8013384:	00000000 	.word	0x00000000

08013388 <__kernel_sin>:
 8013388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801338c:	ed2d 8b04 	vpush	{d8-d9}
 8013390:	eeb0 8a41 	vmov.f32	s16, s2
 8013394:	eef0 8a61 	vmov.f32	s17, s3
 8013398:	ec55 4b10 	vmov	r4, r5, d0
 801339c:	b083      	sub	sp, #12
 801339e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80133a2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80133a6:	9001      	str	r0, [sp, #4]
 80133a8:	da06      	bge.n	80133b8 <__kernel_sin+0x30>
 80133aa:	ee10 0a10 	vmov	r0, s0
 80133ae:	4629      	mov	r1, r5
 80133b0:	f7ed fb92 	bl	8000ad8 <__aeabi_d2iz>
 80133b4:	2800      	cmp	r0, #0
 80133b6:	d051      	beq.n	801345c <__kernel_sin+0xd4>
 80133b8:	4622      	mov	r2, r4
 80133ba:	462b      	mov	r3, r5
 80133bc:	4620      	mov	r0, r4
 80133be:	4629      	mov	r1, r5
 80133c0:	f7ed f8da 	bl	8000578 <__aeabi_dmul>
 80133c4:	4682      	mov	sl, r0
 80133c6:	468b      	mov	fp, r1
 80133c8:	4602      	mov	r2, r0
 80133ca:	460b      	mov	r3, r1
 80133cc:	4620      	mov	r0, r4
 80133ce:	4629      	mov	r1, r5
 80133d0:	f7ed f8d2 	bl	8000578 <__aeabi_dmul>
 80133d4:	a341      	add	r3, pc, #260	; (adr r3, 80134dc <__kernel_sin+0x154>)
 80133d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133da:	4680      	mov	r8, r0
 80133dc:	4689      	mov	r9, r1
 80133de:	4650      	mov	r0, sl
 80133e0:	4659      	mov	r1, fp
 80133e2:	f7ed f8c9 	bl	8000578 <__aeabi_dmul>
 80133e6:	a33f      	add	r3, pc, #252	; (adr r3, 80134e4 <__kernel_sin+0x15c>)
 80133e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133ec:	f7ec ff0c 	bl	8000208 <__aeabi_dsub>
 80133f0:	4652      	mov	r2, sl
 80133f2:	465b      	mov	r3, fp
 80133f4:	f7ed f8c0 	bl	8000578 <__aeabi_dmul>
 80133f8:	a33c      	add	r3, pc, #240	; (adr r3, 80134ec <__kernel_sin+0x164>)
 80133fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133fe:	f7ec ff05 	bl	800020c <__adddf3>
 8013402:	4652      	mov	r2, sl
 8013404:	465b      	mov	r3, fp
 8013406:	f7ed f8b7 	bl	8000578 <__aeabi_dmul>
 801340a:	a33a      	add	r3, pc, #232	; (adr r3, 80134f4 <__kernel_sin+0x16c>)
 801340c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013410:	f7ec fefa 	bl	8000208 <__aeabi_dsub>
 8013414:	4652      	mov	r2, sl
 8013416:	465b      	mov	r3, fp
 8013418:	f7ed f8ae 	bl	8000578 <__aeabi_dmul>
 801341c:	a337      	add	r3, pc, #220	; (adr r3, 80134fc <__kernel_sin+0x174>)
 801341e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013422:	f7ec fef3 	bl	800020c <__adddf3>
 8013426:	9b01      	ldr	r3, [sp, #4]
 8013428:	4606      	mov	r6, r0
 801342a:	460f      	mov	r7, r1
 801342c:	b9eb      	cbnz	r3, 801346a <__kernel_sin+0xe2>
 801342e:	4602      	mov	r2, r0
 8013430:	460b      	mov	r3, r1
 8013432:	4650      	mov	r0, sl
 8013434:	4659      	mov	r1, fp
 8013436:	f7ed f89f 	bl	8000578 <__aeabi_dmul>
 801343a:	a325      	add	r3, pc, #148	; (adr r3, 80134d0 <__kernel_sin+0x148>)
 801343c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013440:	f7ec fee2 	bl	8000208 <__aeabi_dsub>
 8013444:	4642      	mov	r2, r8
 8013446:	464b      	mov	r3, r9
 8013448:	f7ed f896 	bl	8000578 <__aeabi_dmul>
 801344c:	4602      	mov	r2, r0
 801344e:	460b      	mov	r3, r1
 8013450:	4620      	mov	r0, r4
 8013452:	4629      	mov	r1, r5
 8013454:	f7ec feda 	bl	800020c <__adddf3>
 8013458:	4604      	mov	r4, r0
 801345a:	460d      	mov	r5, r1
 801345c:	ec45 4b10 	vmov	d0, r4, r5
 8013460:	b003      	add	sp, #12
 8013462:	ecbd 8b04 	vpop	{d8-d9}
 8013466:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801346a:	4b1b      	ldr	r3, [pc, #108]	; (80134d8 <__kernel_sin+0x150>)
 801346c:	ec51 0b18 	vmov	r0, r1, d8
 8013470:	2200      	movs	r2, #0
 8013472:	f7ed f881 	bl	8000578 <__aeabi_dmul>
 8013476:	4632      	mov	r2, r6
 8013478:	ec41 0b19 	vmov	d9, r0, r1
 801347c:	463b      	mov	r3, r7
 801347e:	4640      	mov	r0, r8
 8013480:	4649      	mov	r1, r9
 8013482:	f7ed f879 	bl	8000578 <__aeabi_dmul>
 8013486:	4602      	mov	r2, r0
 8013488:	460b      	mov	r3, r1
 801348a:	ec51 0b19 	vmov	r0, r1, d9
 801348e:	f7ec febb 	bl	8000208 <__aeabi_dsub>
 8013492:	4652      	mov	r2, sl
 8013494:	465b      	mov	r3, fp
 8013496:	f7ed f86f 	bl	8000578 <__aeabi_dmul>
 801349a:	ec53 2b18 	vmov	r2, r3, d8
 801349e:	f7ec feb3 	bl	8000208 <__aeabi_dsub>
 80134a2:	a30b      	add	r3, pc, #44	; (adr r3, 80134d0 <__kernel_sin+0x148>)
 80134a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134a8:	4606      	mov	r6, r0
 80134aa:	460f      	mov	r7, r1
 80134ac:	4640      	mov	r0, r8
 80134ae:	4649      	mov	r1, r9
 80134b0:	f7ed f862 	bl	8000578 <__aeabi_dmul>
 80134b4:	4602      	mov	r2, r0
 80134b6:	460b      	mov	r3, r1
 80134b8:	4630      	mov	r0, r6
 80134ba:	4639      	mov	r1, r7
 80134bc:	f7ec fea6 	bl	800020c <__adddf3>
 80134c0:	4602      	mov	r2, r0
 80134c2:	460b      	mov	r3, r1
 80134c4:	4620      	mov	r0, r4
 80134c6:	4629      	mov	r1, r5
 80134c8:	f7ec fe9e 	bl	8000208 <__aeabi_dsub>
 80134cc:	e7c4      	b.n	8013458 <__kernel_sin+0xd0>
 80134ce:	bf00      	nop
 80134d0:	55555549 	.word	0x55555549
 80134d4:	3fc55555 	.word	0x3fc55555
 80134d8:	3fe00000 	.word	0x3fe00000
 80134dc:	5acfd57c 	.word	0x5acfd57c
 80134e0:	3de5d93a 	.word	0x3de5d93a
 80134e4:	8a2b9ceb 	.word	0x8a2b9ceb
 80134e8:	3e5ae5e6 	.word	0x3e5ae5e6
 80134ec:	57b1fe7d 	.word	0x57b1fe7d
 80134f0:	3ec71de3 	.word	0x3ec71de3
 80134f4:	19c161d5 	.word	0x19c161d5
 80134f8:	3f2a01a0 	.word	0x3f2a01a0
 80134fc:	1110f8a6 	.word	0x1110f8a6
 8013500:	3f811111 	.word	0x3f811111
 8013504:	00000000 	.word	0x00000000

08013508 <scalbn>:
 8013508:	b570      	push	{r4, r5, r6, lr}
 801350a:	ec55 4b10 	vmov	r4, r5, d0
 801350e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8013512:	4606      	mov	r6, r0
 8013514:	462b      	mov	r3, r5
 8013516:	b999      	cbnz	r1, 8013540 <scalbn+0x38>
 8013518:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801351c:	4323      	orrs	r3, r4
 801351e:	d03f      	beq.n	80135a0 <scalbn+0x98>
 8013520:	4b35      	ldr	r3, [pc, #212]	; (80135f8 <scalbn+0xf0>)
 8013522:	4629      	mov	r1, r5
 8013524:	ee10 0a10 	vmov	r0, s0
 8013528:	2200      	movs	r2, #0
 801352a:	f7ed f825 	bl	8000578 <__aeabi_dmul>
 801352e:	4b33      	ldr	r3, [pc, #204]	; (80135fc <scalbn+0xf4>)
 8013530:	429e      	cmp	r6, r3
 8013532:	4604      	mov	r4, r0
 8013534:	460d      	mov	r5, r1
 8013536:	da10      	bge.n	801355a <scalbn+0x52>
 8013538:	a327      	add	r3, pc, #156	; (adr r3, 80135d8 <scalbn+0xd0>)
 801353a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801353e:	e01f      	b.n	8013580 <scalbn+0x78>
 8013540:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8013544:	4291      	cmp	r1, r2
 8013546:	d10c      	bne.n	8013562 <scalbn+0x5a>
 8013548:	ee10 2a10 	vmov	r2, s0
 801354c:	4620      	mov	r0, r4
 801354e:	4629      	mov	r1, r5
 8013550:	f7ec fe5c 	bl	800020c <__adddf3>
 8013554:	4604      	mov	r4, r0
 8013556:	460d      	mov	r5, r1
 8013558:	e022      	b.n	80135a0 <scalbn+0x98>
 801355a:	460b      	mov	r3, r1
 801355c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8013560:	3936      	subs	r1, #54	; 0x36
 8013562:	f24c 3250 	movw	r2, #50000	; 0xc350
 8013566:	4296      	cmp	r6, r2
 8013568:	dd0d      	ble.n	8013586 <scalbn+0x7e>
 801356a:	2d00      	cmp	r5, #0
 801356c:	a11c      	add	r1, pc, #112	; (adr r1, 80135e0 <scalbn+0xd8>)
 801356e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013572:	da02      	bge.n	801357a <scalbn+0x72>
 8013574:	a11c      	add	r1, pc, #112	; (adr r1, 80135e8 <scalbn+0xe0>)
 8013576:	e9d1 0100 	ldrd	r0, r1, [r1]
 801357a:	a319      	add	r3, pc, #100	; (adr r3, 80135e0 <scalbn+0xd8>)
 801357c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013580:	f7ec fffa 	bl	8000578 <__aeabi_dmul>
 8013584:	e7e6      	b.n	8013554 <scalbn+0x4c>
 8013586:	1872      	adds	r2, r6, r1
 8013588:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801358c:	428a      	cmp	r2, r1
 801358e:	dcec      	bgt.n	801356a <scalbn+0x62>
 8013590:	2a00      	cmp	r2, #0
 8013592:	dd08      	ble.n	80135a6 <scalbn+0x9e>
 8013594:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8013598:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801359c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80135a0:	ec45 4b10 	vmov	d0, r4, r5
 80135a4:	bd70      	pop	{r4, r5, r6, pc}
 80135a6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80135aa:	da08      	bge.n	80135be <scalbn+0xb6>
 80135ac:	2d00      	cmp	r5, #0
 80135ae:	a10a      	add	r1, pc, #40	; (adr r1, 80135d8 <scalbn+0xd0>)
 80135b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80135b4:	dac0      	bge.n	8013538 <scalbn+0x30>
 80135b6:	a10e      	add	r1, pc, #56	; (adr r1, 80135f0 <scalbn+0xe8>)
 80135b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80135bc:	e7bc      	b.n	8013538 <scalbn+0x30>
 80135be:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80135c2:	3236      	adds	r2, #54	; 0x36
 80135c4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80135c8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80135cc:	4620      	mov	r0, r4
 80135ce:	4b0c      	ldr	r3, [pc, #48]	; (8013600 <scalbn+0xf8>)
 80135d0:	2200      	movs	r2, #0
 80135d2:	e7d5      	b.n	8013580 <scalbn+0x78>
 80135d4:	f3af 8000 	nop.w
 80135d8:	c2f8f359 	.word	0xc2f8f359
 80135dc:	01a56e1f 	.word	0x01a56e1f
 80135e0:	8800759c 	.word	0x8800759c
 80135e4:	7e37e43c 	.word	0x7e37e43c
 80135e8:	8800759c 	.word	0x8800759c
 80135ec:	fe37e43c 	.word	0xfe37e43c
 80135f0:	c2f8f359 	.word	0xc2f8f359
 80135f4:	81a56e1f 	.word	0x81a56e1f
 80135f8:	43500000 	.word	0x43500000
 80135fc:	ffff3cb0 	.word	0xffff3cb0
 8013600:	3c900000 	.word	0x3c900000
 8013604:	00000000 	.word	0x00000000

08013608 <floor>:
 8013608:	ec51 0b10 	vmov	r0, r1, d0
 801360c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8013610:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013614:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8013618:	2e13      	cmp	r6, #19
 801361a:	ee10 5a10 	vmov	r5, s0
 801361e:	ee10 8a10 	vmov	r8, s0
 8013622:	460c      	mov	r4, r1
 8013624:	dc31      	bgt.n	801368a <floor+0x82>
 8013626:	2e00      	cmp	r6, #0
 8013628:	da14      	bge.n	8013654 <floor+0x4c>
 801362a:	a333      	add	r3, pc, #204	; (adr r3, 80136f8 <floor+0xf0>)
 801362c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013630:	f7ec fdec 	bl	800020c <__adddf3>
 8013634:	2200      	movs	r2, #0
 8013636:	2300      	movs	r3, #0
 8013638:	f7ed fa2e 	bl	8000a98 <__aeabi_dcmpgt>
 801363c:	b138      	cbz	r0, 801364e <floor+0x46>
 801363e:	2c00      	cmp	r4, #0
 8013640:	da53      	bge.n	80136ea <floor+0xe2>
 8013642:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8013646:	4325      	orrs	r5, r4
 8013648:	d052      	beq.n	80136f0 <floor+0xe8>
 801364a:	4c2d      	ldr	r4, [pc, #180]	; (8013700 <floor+0xf8>)
 801364c:	2500      	movs	r5, #0
 801364e:	4621      	mov	r1, r4
 8013650:	4628      	mov	r0, r5
 8013652:	e024      	b.n	801369e <floor+0x96>
 8013654:	4f2b      	ldr	r7, [pc, #172]	; (8013704 <floor+0xfc>)
 8013656:	4137      	asrs	r7, r6
 8013658:	ea01 0307 	and.w	r3, r1, r7
 801365c:	4303      	orrs	r3, r0
 801365e:	d01e      	beq.n	801369e <floor+0x96>
 8013660:	a325      	add	r3, pc, #148	; (adr r3, 80136f8 <floor+0xf0>)
 8013662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013666:	f7ec fdd1 	bl	800020c <__adddf3>
 801366a:	2200      	movs	r2, #0
 801366c:	2300      	movs	r3, #0
 801366e:	f7ed fa13 	bl	8000a98 <__aeabi_dcmpgt>
 8013672:	2800      	cmp	r0, #0
 8013674:	d0eb      	beq.n	801364e <floor+0x46>
 8013676:	2c00      	cmp	r4, #0
 8013678:	bfbe      	ittt	lt
 801367a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801367e:	4133      	asrlt	r3, r6
 8013680:	18e4      	addlt	r4, r4, r3
 8013682:	ea24 0407 	bic.w	r4, r4, r7
 8013686:	2500      	movs	r5, #0
 8013688:	e7e1      	b.n	801364e <floor+0x46>
 801368a:	2e33      	cmp	r6, #51	; 0x33
 801368c:	dd0b      	ble.n	80136a6 <floor+0x9e>
 801368e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8013692:	d104      	bne.n	801369e <floor+0x96>
 8013694:	ee10 2a10 	vmov	r2, s0
 8013698:	460b      	mov	r3, r1
 801369a:	f7ec fdb7 	bl	800020c <__adddf3>
 801369e:	ec41 0b10 	vmov	d0, r0, r1
 80136a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80136a6:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 80136aa:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80136ae:	40df      	lsrs	r7, r3
 80136b0:	4238      	tst	r0, r7
 80136b2:	d0f4      	beq.n	801369e <floor+0x96>
 80136b4:	a310      	add	r3, pc, #64	; (adr r3, 80136f8 <floor+0xf0>)
 80136b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136ba:	f7ec fda7 	bl	800020c <__adddf3>
 80136be:	2200      	movs	r2, #0
 80136c0:	2300      	movs	r3, #0
 80136c2:	f7ed f9e9 	bl	8000a98 <__aeabi_dcmpgt>
 80136c6:	2800      	cmp	r0, #0
 80136c8:	d0c1      	beq.n	801364e <floor+0x46>
 80136ca:	2c00      	cmp	r4, #0
 80136cc:	da0a      	bge.n	80136e4 <floor+0xdc>
 80136ce:	2e14      	cmp	r6, #20
 80136d0:	d101      	bne.n	80136d6 <floor+0xce>
 80136d2:	3401      	adds	r4, #1
 80136d4:	e006      	b.n	80136e4 <floor+0xdc>
 80136d6:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80136da:	2301      	movs	r3, #1
 80136dc:	40b3      	lsls	r3, r6
 80136de:	441d      	add	r5, r3
 80136e0:	45a8      	cmp	r8, r5
 80136e2:	d8f6      	bhi.n	80136d2 <floor+0xca>
 80136e4:	ea25 0507 	bic.w	r5, r5, r7
 80136e8:	e7b1      	b.n	801364e <floor+0x46>
 80136ea:	2500      	movs	r5, #0
 80136ec:	462c      	mov	r4, r5
 80136ee:	e7ae      	b.n	801364e <floor+0x46>
 80136f0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80136f4:	e7ab      	b.n	801364e <floor+0x46>
 80136f6:	bf00      	nop
 80136f8:	8800759c 	.word	0x8800759c
 80136fc:	7e37e43c 	.word	0x7e37e43c
 8013700:	bff00000 	.word	0xbff00000
 8013704:	000fffff 	.word	0x000fffff

08013708 <_init>:
 8013708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801370a:	bf00      	nop
 801370c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801370e:	bc08      	pop	{r3}
 8013710:	469e      	mov	lr, r3
 8013712:	4770      	bx	lr

08013714 <_fini>:
 8013714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013716:	bf00      	nop
 8013718:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801371a:	bc08      	pop	{r3}
 801371c:	469e      	mov	lr, r3
 801371e:	4770      	bx	lr
