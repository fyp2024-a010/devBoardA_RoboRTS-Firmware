
ROBOT_DEV.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a8e0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  0800aa90  0800aa90  0001aa90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ab68  0800ab68  00020150  2**0
                  CONTENTS
  4 .ARM          00000008  0800ab68  0800ab68  0001ab68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ab70  0800ab70  00020150  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ab70  0800ab70  0001ab70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ab74  0800ab74  0001ab74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000150  20000000  0800ab78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020150  2**0
                  CONTENTS
 10 .bss          000067fc  20000150  20000150  00020150  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000694c  2000694c  00020150  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020150  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 14 .debug_info   0002260f  00000000  00000000  000201c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000549e  00000000  00000000  000427d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001cb8  00000000  00000000  00047c70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000015d9  00000000  00000000  00049928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00029807  00000000  00000000  0004af01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00023183  00000000  00000000  00074708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e88a4  00000000  00000000  0009788b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00007a08  00000000  00000000  00180130  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007a  00000000  00000000  00187b38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000150 	.word	0x20000150
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800aa78 	.word	0x0800aa78

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000154 	.word	0x20000154
 80001ec:	0800aa78 	.word	0x0800aa78

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000200:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000204:	f000 b970 	b.w	80004e8 <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9e08      	ldr	r6, [sp, #32]
 8000226:	460d      	mov	r5, r1
 8000228:	4604      	mov	r4, r0
 800022a:	460f      	mov	r7, r1
 800022c:	2b00      	cmp	r3, #0
 800022e:	d14a      	bne.n	80002c6 <__udivmoddi4+0xa6>
 8000230:	428a      	cmp	r2, r1
 8000232:	4694      	mov	ip, r2
 8000234:	d965      	bls.n	8000302 <__udivmoddi4+0xe2>
 8000236:	fab2 f382 	clz	r3, r2
 800023a:	b143      	cbz	r3, 800024e <__udivmoddi4+0x2e>
 800023c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000240:	f1c3 0220 	rsb	r2, r3, #32
 8000244:	409f      	lsls	r7, r3
 8000246:	fa20 f202 	lsr.w	r2, r0, r2
 800024a:	4317      	orrs	r7, r2
 800024c:	409c      	lsls	r4, r3
 800024e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000252:	fa1f f58c 	uxth.w	r5, ip
 8000256:	fbb7 f1fe 	udiv	r1, r7, lr
 800025a:	0c22      	lsrs	r2, r4, #16
 800025c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000260:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000264:	fb01 f005 	mul.w	r0, r1, r5
 8000268:	4290      	cmp	r0, r2
 800026a:	d90a      	bls.n	8000282 <__udivmoddi4+0x62>
 800026c:	eb1c 0202 	adds.w	r2, ip, r2
 8000270:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000274:	f080 811c 	bcs.w	80004b0 <__udivmoddi4+0x290>
 8000278:	4290      	cmp	r0, r2
 800027a:	f240 8119 	bls.w	80004b0 <__udivmoddi4+0x290>
 800027e:	3902      	subs	r1, #2
 8000280:	4462      	add	r2, ip
 8000282:	1a12      	subs	r2, r2, r0
 8000284:	b2a4      	uxth	r4, r4
 8000286:	fbb2 f0fe 	udiv	r0, r2, lr
 800028a:	fb0e 2210 	mls	r2, lr, r0, r2
 800028e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000292:	fb00 f505 	mul.w	r5, r0, r5
 8000296:	42a5      	cmp	r5, r4
 8000298:	d90a      	bls.n	80002b0 <__udivmoddi4+0x90>
 800029a:	eb1c 0404 	adds.w	r4, ip, r4
 800029e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002a2:	f080 8107 	bcs.w	80004b4 <__udivmoddi4+0x294>
 80002a6:	42a5      	cmp	r5, r4
 80002a8:	f240 8104 	bls.w	80004b4 <__udivmoddi4+0x294>
 80002ac:	4464      	add	r4, ip
 80002ae:	3802      	subs	r0, #2
 80002b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002b4:	1b64      	subs	r4, r4, r5
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11e      	cbz	r6, 80002c2 <__udivmoddi4+0xa2>
 80002ba:	40dc      	lsrs	r4, r3
 80002bc:	2300      	movs	r3, #0
 80002be:	e9c6 4300 	strd	r4, r3, [r6]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d908      	bls.n	80002dc <__udivmoddi4+0xbc>
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	f000 80ed 	beq.w	80004aa <__udivmoddi4+0x28a>
 80002d0:	2100      	movs	r1, #0
 80002d2:	e9c6 0500 	strd	r0, r5, [r6]
 80002d6:	4608      	mov	r0, r1
 80002d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002dc:	fab3 f183 	clz	r1, r3
 80002e0:	2900      	cmp	r1, #0
 80002e2:	d149      	bne.n	8000378 <__udivmoddi4+0x158>
 80002e4:	42ab      	cmp	r3, r5
 80002e6:	d302      	bcc.n	80002ee <__udivmoddi4+0xce>
 80002e8:	4282      	cmp	r2, r0
 80002ea:	f200 80f8 	bhi.w	80004de <__udivmoddi4+0x2be>
 80002ee:	1a84      	subs	r4, r0, r2
 80002f0:	eb65 0203 	sbc.w	r2, r5, r3
 80002f4:	2001      	movs	r0, #1
 80002f6:	4617      	mov	r7, r2
 80002f8:	2e00      	cmp	r6, #0
 80002fa:	d0e2      	beq.n	80002c2 <__udivmoddi4+0xa2>
 80002fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000300:	e7df      	b.n	80002c2 <__udivmoddi4+0xa2>
 8000302:	b902      	cbnz	r2, 8000306 <__udivmoddi4+0xe6>
 8000304:	deff      	udf	#255	; 0xff
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	2b00      	cmp	r3, #0
 800030c:	f040 8090 	bne.w	8000430 <__udivmoddi4+0x210>
 8000310:	1a8a      	subs	r2, r1, r2
 8000312:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000316:	fa1f fe8c 	uxth.w	lr, ip
 800031a:	2101      	movs	r1, #1
 800031c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000320:	fb07 2015 	mls	r0, r7, r5, r2
 8000324:	0c22      	lsrs	r2, r4, #16
 8000326:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800032a:	fb0e f005 	mul.w	r0, lr, r5
 800032e:	4290      	cmp	r0, r2
 8000330:	d908      	bls.n	8000344 <__udivmoddi4+0x124>
 8000332:	eb1c 0202 	adds.w	r2, ip, r2
 8000336:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x122>
 800033c:	4290      	cmp	r0, r2
 800033e:	f200 80cb 	bhi.w	80004d8 <__udivmoddi4+0x2b8>
 8000342:	4645      	mov	r5, r8
 8000344:	1a12      	subs	r2, r2, r0
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb2 f0f7 	udiv	r0, r2, r7
 800034c:	fb07 2210 	mls	r2, r7, r0, r2
 8000350:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000354:	fb0e fe00 	mul.w	lr, lr, r0
 8000358:	45a6      	cmp	lr, r4
 800035a:	d908      	bls.n	800036e <__udivmoddi4+0x14e>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000364:	d202      	bcs.n	800036c <__udivmoddi4+0x14c>
 8000366:	45a6      	cmp	lr, r4
 8000368:	f200 80bb 	bhi.w	80004e2 <__udivmoddi4+0x2c2>
 800036c:	4610      	mov	r0, r2
 800036e:	eba4 040e 	sub.w	r4, r4, lr
 8000372:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000376:	e79f      	b.n	80002b8 <__udivmoddi4+0x98>
 8000378:	f1c1 0720 	rsb	r7, r1, #32
 800037c:	408b      	lsls	r3, r1
 800037e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000382:	ea4c 0c03 	orr.w	ip, ip, r3
 8000386:	fa05 f401 	lsl.w	r4, r5, r1
 800038a:	fa20 f307 	lsr.w	r3, r0, r7
 800038e:	40fd      	lsrs	r5, r7
 8000390:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000394:	4323      	orrs	r3, r4
 8000396:	fbb5 f8f9 	udiv	r8, r5, r9
 800039a:	fa1f fe8c 	uxth.w	lr, ip
 800039e:	fb09 5518 	mls	r5, r9, r8, r5
 80003a2:	0c1c      	lsrs	r4, r3, #16
 80003a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003a8:	fb08 f50e 	mul.w	r5, r8, lr
 80003ac:	42a5      	cmp	r5, r4
 80003ae:	fa02 f201 	lsl.w	r2, r2, r1
 80003b2:	fa00 f001 	lsl.w	r0, r0, r1
 80003b6:	d90b      	bls.n	80003d0 <__udivmoddi4+0x1b0>
 80003b8:	eb1c 0404 	adds.w	r4, ip, r4
 80003bc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003c0:	f080 8088 	bcs.w	80004d4 <__udivmoddi4+0x2b4>
 80003c4:	42a5      	cmp	r5, r4
 80003c6:	f240 8085 	bls.w	80004d4 <__udivmoddi4+0x2b4>
 80003ca:	f1a8 0802 	sub.w	r8, r8, #2
 80003ce:	4464      	add	r4, ip
 80003d0:	1b64      	subs	r4, r4, r5
 80003d2:	b29d      	uxth	r5, r3
 80003d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003d8:	fb09 4413 	mls	r4, r9, r3, r4
 80003dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003e4:	45a6      	cmp	lr, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x1da>
 80003e8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ec:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003f0:	d26c      	bcs.n	80004cc <__udivmoddi4+0x2ac>
 80003f2:	45a6      	cmp	lr, r4
 80003f4:	d96a      	bls.n	80004cc <__udivmoddi4+0x2ac>
 80003f6:	3b02      	subs	r3, #2
 80003f8:	4464      	add	r4, ip
 80003fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000402:	eba4 040e 	sub.w	r4, r4, lr
 8000406:	42ac      	cmp	r4, r5
 8000408:	46c8      	mov	r8, r9
 800040a:	46ae      	mov	lr, r5
 800040c:	d356      	bcc.n	80004bc <__udivmoddi4+0x29c>
 800040e:	d053      	beq.n	80004b8 <__udivmoddi4+0x298>
 8000410:	b156      	cbz	r6, 8000428 <__udivmoddi4+0x208>
 8000412:	ebb0 0208 	subs.w	r2, r0, r8
 8000416:	eb64 040e 	sbc.w	r4, r4, lr
 800041a:	fa04 f707 	lsl.w	r7, r4, r7
 800041e:	40ca      	lsrs	r2, r1
 8000420:	40cc      	lsrs	r4, r1
 8000422:	4317      	orrs	r7, r2
 8000424:	e9c6 7400 	strd	r7, r4, [r6]
 8000428:	4618      	mov	r0, r3
 800042a:	2100      	movs	r1, #0
 800042c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000430:	f1c3 0120 	rsb	r1, r3, #32
 8000434:	fa02 fc03 	lsl.w	ip, r2, r3
 8000438:	fa20 f201 	lsr.w	r2, r0, r1
 800043c:	fa25 f101 	lsr.w	r1, r5, r1
 8000440:	409d      	lsls	r5, r3
 8000442:	432a      	orrs	r2, r5
 8000444:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000450:	fb07 1510 	mls	r5, r7, r0, r1
 8000454:	0c11      	lsrs	r1, r2, #16
 8000456:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800045a:	fb00 f50e 	mul.w	r5, r0, lr
 800045e:	428d      	cmp	r5, r1
 8000460:	fa04 f403 	lsl.w	r4, r4, r3
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x258>
 8000466:	eb1c 0101 	adds.w	r1, ip, r1
 800046a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800046e:	d22f      	bcs.n	80004d0 <__udivmoddi4+0x2b0>
 8000470:	428d      	cmp	r5, r1
 8000472:	d92d      	bls.n	80004d0 <__udivmoddi4+0x2b0>
 8000474:	3802      	subs	r0, #2
 8000476:	4461      	add	r1, ip
 8000478:	1b49      	subs	r1, r1, r5
 800047a:	b292      	uxth	r2, r2
 800047c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000480:	fb07 1115 	mls	r1, r7, r5, r1
 8000484:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000488:	fb05 f10e 	mul.w	r1, r5, lr
 800048c:	4291      	cmp	r1, r2
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x282>
 8000490:	eb1c 0202 	adds.w	r2, ip, r2
 8000494:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000498:	d216      	bcs.n	80004c8 <__udivmoddi4+0x2a8>
 800049a:	4291      	cmp	r1, r2
 800049c:	d914      	bls.n	80004c8 <__udivmoddi4+0x2a8>
 800049e:	3d02      	subs	r5, #2
 80004a0:	4462      	add	r2, ip
 80004a2:	1a52      	subs	r2, r2, r1
 80004a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004a8:	e738      	b.n	800031c <__udivmoddi4+0xfc>
 80004aa:	4631      	mov	r1, r6
 80004ac:	4630      	mov	r0, r6
 80004ae:	e708      	b.n	80002c2 <__udivmoddi4+0xa2>
 80004b0:	4639      	mov	r1, r7
 80004b2:	e6e6      	b.n	8000282 <__udivmoddi4+0x62>
 80004b4:	4610      	mov	r0, r2
 80004b6:	e6fb      	b.n	80002b0 <__udivmoddi4+0x90>
 80004b8:	4548      	cmp	r0, r9
 80004ba:	d2a9      	bcs.n	8000410 <__udivmoddi4+0x1f0>
 80004bc:	ebb9 0802 	subs.w	r8, r9, r2
 80004c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004c4:	3b01      	subs	r3, #1
 80004c6:	e7a3      	b.n	8000410 <__udivmoddi4+0x1f0>
 80004c8:	4645      	mov	r5, r8
 80004ca:	e7ea      	b.n	80004a2 <__udivmoddi4+0x282>
 80004cc:	462b      	mov	r3, r5
 80004ce:	e794      	b.n	80003fa <__udivmoddi4+0x1da>
 80004d0:	4640      	mov	r0, r8
 80004d2:	e7d1      	b.n	8000478 <__udivmoddi4+0x258>
 80004d4:	46d0      	mov	r8, sl
 80004d6:	e77b      	b.n	80003d0 <__udivmoddi4+0x1b0>
 80004d8:	3d02      	subs	r5, #2
 80004da:	4462      	add	r2, ip
 80004dc:	e732      	b.n	8000344 <__udivmoddi4+0x124>
 80004de:	4608      	mov	r0, r1
 80004e0:	e70a      	b.n	80002f8 <__udivmoddi4+0xd8>
 80004e2:	4464      	add	r4, ip
 80004e4:	3802      	subs	r0, #2
 80004e6:	e742      	b.n	800036e <__udivmoddi4+0x14e>

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80004f0:	4b17      	ldr	r3, [pc, #92]	; (8000550 <MX_CAN1_Init+0x64>)
 80004f2:	4a18      	ldr	r2, [pc, #96]	; (8000554 <MX_CAN1_Init+0x68>)
 80004f4:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 7;
 80004f6:	4b16      	ldr	r3, [pc, #88]	; (8000550 <MX_CAN1_Init+0x64>)
 80004f8:	2207      	movs	r2, #7
 80004fa:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80004fc:	4b14      	ldr	r3, [pc, #80]	; (8000550 <MX_CAN1_Init+0x64>)
 80004fe:	2200      	movs	r2, #0
 8000500:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000502:	4b13      	ldr	r3, [pc, #76]	; (8000550 <MX_CAN1_Init+0x64>)
 8000504:	2200      	movs	r2, #0
 8000506:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000508:	4b11      	ldr	r3, [pc, #68]	; (8000550 <MX_CAN1_Init+0x64>)
 800050a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800050e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000510:	4b0f      	ldr	r3, [pc, #60]	; (8000550 <MX_CAN1_Init+0x64>)
 8000512:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000516:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000518:	4b0d      	ldr	r3, [pc, #52]	; (8000550 <MX_CAN1_Init+0x64>)
 800051a:	2200      	movs	r2, #0
 800051c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800051e:	4b0c      	ldr	r3, [pc, #48]	; (8000550 <MX_CAN1_Init+0x64>)
 8000520:	2200      	movs	r2, #0
 8000522:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000524:	4b0a      	ldr	r3, [pc, #40]	; (8000550 <MX_CAN1_Init+0x64>)
 8000526:	2200      	movs	r2, #0
 8000528:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800052a:	4b09      	ldr	r3, [pc, #36]	; (8000550 <MX_CAN1_Init+0x64>)
 800052c:	2200      	movs	r2, #0
 800052e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000530:	4b07      	ldr	r3, [pc, #28]	; (8000550 <MX_CAN1_Init+0x64>)
 8000532:	2200      	movs	r2, #0
 8000534:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = ENABLE;
 8000536:	4b06      	ldr	r3, [pc, #24]	; (8000550 <MX_CAN1_Init+0x64>)
 8000538:	2201      	movs	r2, #1
 800053a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800053c:	4804      	ldr	r0, [pc, #16]	; (8000550 <MX_CAN1_Init+0x64>)
 800053e:	f000 fbc5 	bl	8000ccc <HAL_CAN_Init>
 8000542:	4603      	mov	r3, r0
 8000544:	2b00      	cmp	r3, #0
 8000546:	d001      	beq.n	800054c <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000548:	f000 f9be 	bl	80008c8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800054c:	bf00      	nop
 800054e:	bd80      	pop	{r7, pc}
 8000550:	2000016c 	.word	0x2000016c
 8000554:	40006400 	.word	0x40006400

08000558 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b08a      	sub	sp, #40	; 0x28
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000560:	f107 0314 	add.w	r3, r7, #20
 8000564:	2200      	movs	r2, #0
 8000566:	601a      	str	r2, [r3, #0]
 8000568:	605a      	str	r2, [r3, #4]
 800056a:	609a      	str	r2, [r3, #8]
 800056c:	60da      	str	r2, [r3, #12]
 800056e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	4a19      	ldr	r2, [pc, #100]	; (80005dc <HAL_CAN_MspInit+0x84>)
 8000576:	4293      	cmp	r3, r2
 8000578:	d12b      	bne.n	80005d2 <HAL_CAN_MspInit+0x7a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800057a:	2300      	movs	r3, #0
 800057c:	613b      	str	r3, [r7, #16]
 800057e:	4b18      	ldr	r3, [pc, #96]	; (80005e0 <HAL_CAN_MspInit+0x88>)
 8000580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000582:	4a17      	ldr	r2, [pc, #92]	; (80005e0 <HAL_CAN_MspInit+0x88>)
 8000584:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000588:	6413      	str	r3, [r2, #64]	; 0x40
 800058a:	4b15      	ldr	r3, [pc, #84]	; (80005e0 <HAL_CAN_MspInit+0x88>)
 800058c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800058e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000592:	613b      	str	r3, [r7, #16]
 8000594:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000596:	2300      	movs	r3, #0
 8000598:	60fb      	str	r3, [r7, #12]
 800059a:	4b11      	ldr	r3, [pc, #68]	; (80005e0 <HAL_CAN_MspInit+0x88>)
 800059c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059e:	4a10      	ldr	r2, [pc, #64]	; (80005e0 <HAL_CAN_MspInit+0x88>)
 80005a0:	f043 0308 	orr.w	r3, r3, #8
 80005a4:	6313      	str	r3, [r2, #48]	; 0x30
 80005a6:	4b0e      	ldr	r3, [pc, #56]	; (80005e0 <HAL_CAN_MspInit+0x88>)
 80005a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005aa:	f003 0308 	and.w	r3, r3, #8
 80005ae:	60fb      	str	r3, [r7, #12]
 80005b0:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80005b2:	2303      	movs	r3, #3
 80005b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005b6:	2302      	movs	r3, #2
 80005b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ba:	2300      	movs	r3, #0
 80005bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005be:	2303      	movs	r3, #3
 80005c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80005c2:	2309      	movs	r3, #9
 80005c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80005c6:	f107 0314 	add.w	r3, r7, #20
 80005ca:	4619      	mov	r1, r3
 80005cc:	4805      	ldr	r0, [pc, #20]	; (80005e4 <HAL_CAN_MspInit+0x8c>)
 80005ce:	f000 ff75 	bl	80014bc <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80005d2:	bf00      	nop
 80005d4:	3728      	adds	r7, #40	; 0x28
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	40006400 	.word	0x40006400
 80005e0:	40023800 	.word	0x40023800
 80005e4:	40020c00 	.word	0x40020c00

080005e8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005ec:	4a04      	ldr	r2, [pc, #16]	; (8000600 <MX_FREERTOS_Init+0x18>)
 80005ee:	2100      	movs	r1, #0
 80005f0:	4804      	ldr	r0, [pc, #16]	; (8000604 <MX_FREERTOS_Init+0x1c>)
 80005f2:	f006 fe8b 	bl	800730c <osThreadNew>
 80005f6:	4603      	mov	r3, r0
 80005f8:	4a03      	ldr	r2, [pc, #12]	; (8000608 <MX_FREERTOS_Init+0x20>)
 80005fa:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80005fc:	bf00      	nop
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	0800ab08 	.word	0x0800ab08
 8000604:	0800060d 	.word	0x0800060d
 8000608:	20000194 	.word	0x20000194

0800060c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000614:	f009 fbaa 	bl	8009d6c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000618:	2001      	movs	r0, #1
 800061a:	f006 ff09 	bl	8007430 <osDelay>
 800061e:	e7fb      	b.n	8000618 <StartDefaultTask+0xc>

08000620 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b08c      	sub	sp, #48	; 0x30
 8000624:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000626:	f107 031c 	add.w	r3, r7, #28
 800062a:	2200      	movs	r2, #0
 800062c:	601a      	str	r2, [r3, #0]
 800062e:	605a      	str	r2, [r3, #4]
 8000630:	609a      	str	r2, [r3, #8]
 8000632:	60da      	str	r2, [r3, #12]
 8000634:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000636:	2300      	movs	r3, #0
 8000638:	61bb      	str	r3, [r7, #24]
 800063a:	4b54      	ldr	r3, [pc, #336]	; (800078c <MX_GPIO_Init+0x16c>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063e:	4a53      	ldr	r2, [pc, #332]	; (800078c <MX_GPIO_Init+0x16c>)
 8000640:	f043 0301 	orr.w	r3, r3, #1
 8000644:	6313      	str	r3, [r2, #48]	; 0x30
 8000646:	4b51      	ldr	r3, [pc, #324]	; (800078c <MX_GPIO_Init+0x16c>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064a:	f003 0301 	and.w	r3, r3, #1
 800064e:	61bb      	str	r3, [r7, #24]
 8000650:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000652:	2300      	movs	r3, #0
 8000654:	617b      	str	r3, [r7, #20]
 8000656:	4b4d      	ldr	r3, [pc, #308]	; (800078c <MX_GPIO_Init+0x16c>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065a:	4a4c      	ldr	r2, [pc, #304]	; (800078c <MX_GPIO_Init+0x16c>)
 800065c:	f043 0308 	orr.w	r3, r3, #8
 8000660:	6313      	str	r3, [r2, #48]	; 0x30
 8000662:	4b4a      	ldr	r3, [pc, #296]	; (800078c <MX_GPIO_Init+0x16c>)
 8000664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000666:	f003 0308 	and.w	r3, r3, #8
 800066a:	617b      	str	r3, [r7, #20]
 800066c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800066e:	2300      	movs	r3, #0
 8000670:	613b      	str	r3, [r7, #16]
 8000672:	4b46      	ldr	r3, [pc, #280]	; (800078c <MX_GPIO_Init+0x16c>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000676:	4a45      	ldr	r2, [pc, #276]	; (800078c <MX_GPIO_Init+0x16c>)
 8000678:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800067c:	6313      	str	r3, [r2, #48]	; 0x30
 800067e:	4b43      	ldr	r3, [pc, #268]	; (800078c <MX_GPIO_Init+0x16c>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000682:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000686:	613b      	str	r3, [r7, #16]
 8000688:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800068a:	2300      	movs	r3, #0
 800068c:	60fb      	str	r3, [r7, #12]
 800068e:	4b3f      	ldr	r3, [pc, #252]	; (800078c <MX_GPIO_Init+0x16c>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000692:	4a3e      	ldr	r2, [pc, #248]	; (800078c <MX_GPIO_Init+0x16c>)
 8000694:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000698:	6313      	str	r3, [r2, #48]	; 0x30
 800069a:	4b3c      	ldr	r3, [pc, #240]	; (800078c <MX_GPIO_Init+0x16c>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006a2:	60fb      	str	r3, [r7, #12]
 80006a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80006a6:	2300      	movs	r3, #0
 80006a8:	60bb      	str	r3, [r7, #8]
 80006aa:	4b38      	ldr	r3, [pc, #224]	; (800078c <MX_GPIO_Init+0x16c>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ae:	4a37      	ldr	r2, [pc, #220]	; (800078c <MX_GPIO_Init+0x16c>)
 80006b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006b4:	6313      	str	r3, [r2, #48]	; 0x30
 80006b6:	4b35      	ldr	r3, [pc, #212]	; (800078c <MX_GPIO_Init+0x16c>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006be:	60bb      	str	r3, [r7, #8]
 80006c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006c2:	2300      	movs	r3, #0
 80006c4:	607b      	str	r3, [r7, #4]
 80006c6:	4b31      	ldr	r3, [pc, #196]	; (800078c <MX_GPIO_Init+0x16c>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ca:	4a30      	ldr	r2, [pc, #192]	; (800078c <MX_GPIO_Init+0x16c>)
 80006cc:	f043 0320 	orr.w	r3, r3, #32
 80006d0:	6313      	str	r3, [r2, #48]	; 0x30
 80006d2:	4b2e      	ldr	r3, [pc, #184]	; (800078c <MX_GPIO_Init+0x16c>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d6:	f003 0320 	and.w	r3, r3, #32
 80006da:	607b      	str	r3, [r7, #4]
 80006dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, POWER_OUT1_Pin|POWER_OUT2_Pin|POWER_OUT3_Pin|POWER_OUT4_Pin, GPIO_PIN_RESET);
 80006de:	2200      	movs	r2, #0
 80006e0:	213c      	movs	r1, #60	; 0x3c
 80006e2:	482b      	ldr	r0, [pc, #172]	; (8000790 <MX_GPIO_Init+0x170>)
 80006e4:	f001 f896 	bl	8001814 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LED_A_Pin|LED_B_Pin|LED_C_Pin|LED_D_Pin
 80006e8:	2200      	movs	r2, #0
 80006ea:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
 80006ee:	4829      	ldr	r0, [pc, #164]	; (8000794 <MX_GPIO_Init+0x174>)
 80006f0:	f001 f890 	bl	8001814 <HAL_GPIO_WritePin>
                          |LED_E_Pin|LED_F_Pin|LED_G_Pin|LED_H_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI5_NSS_GPIO_Port, SPI5_NSS_Pin, GPIO_PIN_RESET);
 80006f4:	2200      	movs	r2, #0
 80006f6:	2140      	movs	r1, #64	; 0x40
 80006f8:	4827      	ldr	r0, [pc, #156]	; (8000798 <MX_GPIO_Init+0x178>)
 80006fa:	f001 f88b 	bl	8001814 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PIPin PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = PIN_Y_Pin|PIN_X_Pin|PIN_V_Pin|PIN_Z_Pin;
 80006fe:	23e4      	movs	r3, #228	; 0xe4
 8000700:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000702:	2300      	movs	r3, #0
 8000704:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000706:	2300      	movs	r3, #0
 8000708:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800070a:	f107 031c 	add.w	r3, r7, #28
 800070e:	4619      	mov	r1, r3
 8000710:	4822      	ldr	r0, [pc, #136]	; (800079c <MX_GPIO_Init+0x17c>)
 8000712:	f000 fed3 	bl	80014bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin PHPin */
  GPIO_InitStruct.Pin = POWER_OUT1_Pin|POWER_OUT2_Pin|POWER_OUT3_Pin|POWER_OUT4_Pin;
 8000716:	233c      	movs	r3, #60	; 0x3c
 8000718:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800071a:	2301      	movs	r3, #1
 800071c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071e:	2300      	movs	r3, #0
 8000720:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000722:	2300      	movs	r3, #0
 8000724:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000726:	f107 031c 	add.w	r3, r7, #28
 800072a:	4619      	mov	r1, r3
 800072c:	4818      	ldr	r0, [pc, #96]	; (8000790 <MX_GPIO_Init+0x170>)
 800072e:	f000 fec5 	bl	80014bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = LED_A_Pin|LED_B_Pin|LED_C_Pin|LED_D_Pin
 8000732:	f44f 73ff 	mov.w	r3, #510	; 0x1fe
 8000736:	61fb      	str	r3, [r7, #28]
                          |LED_E_Pin|LED_F_Pin|LED_G_Pin|LED_H_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000738:	2301      	movs	r3, #1
 800073a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073c:	2300      	movs	r3, #0
 800073e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000740:	2300      	movs	r3, #0
 8000742:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000744:	f107 031c 	add.w	r3, r7, #28
 8000748:	4619      	mov	r1, r3
 800074a:	4812      	ldr	r0, [pc, #72]	; (8000794 <MX_GPIO_Init+0x174>)
 800074c:	f000 feb6 	bl	80014bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI5_NSS_Pin;
 8000750:	2340      	movs	r3, #64	; 0x40
 8000752:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000754:	2301      	movs	r3, #1
 8000756:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000758:	2300      	movs	r3, #0
 800075a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800075c:	2300      	movs	r3, #0
 800075e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI5_NSS_GPIO_Port, &GPIO_InitStruct);
 8000760:	f107 031c 	add.w	r3, r7, #28
 8000764:	4619      	mov	r1, r3
 8000766:	480c      	ldr	r0, [pc, #48]	; (8000798 <MX_GPIO_Init+0x178>)
 8000768:	f000 fea8 	bl	80014bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = PIN_YA1_Pin|PIN_ZA0_Pin|PIN_XA2_Pin|PIN_W_Pin;
 800076c:	230f      	movs	r3, #15
 800076e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000770:	2300      	movs	r3, #0
 8000772:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000774:	2300      	movs	r3, #0
 8000776:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000778:	f107 031c 	add.w	r3, r7, #28
 800077c:	4619      	mov	r1, r3
 800077e:	4808      	ldr	r0, [pc, #32]	; (80007a0 <MX_GPIO_Init+0x180>)
 8000780:	f000 fe9c 	bl	80014bc <HAL_GPIO_Init>

}
 8000784:	bf00      	nop
 8000786:	3730      	adds	r7, #48	; 0x30
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	40023800 	.word	0x40023800
 8000790:	40021c00 	.word	0x40021c00
 8000794:	40021800 	.word	0x40021800
 8000798:	40021400 	.word	0x40021400
 800079c:	40022000 	.word	0x40022000
 80007a0:	40020000 	.word	0x40020000

080007a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007a8:	f000 fa2a 	bl	8000c00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007ac:	f000 f810 	bl	80007d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007b0:	f7ff ff36 	bl	8000620 <MX_GPIO_Init>
  MX_SPI5_Init();
 80007b4:	f000 f898 	bl	80008e8 <MX_SPI5_Init>
  MX_CAN1_Init();
 80007b8:	f7ff fe98 	bl	80004ec <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */
  init();
 80007bc:	f009 ffca 	bl	800a754 <init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80007c0:	f006 fd5a 	bl	8007278 <osKernelInitialize>

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80007c4:	f7ff ff10 	bl	80005e8 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80007c8:	f006 fd7a 	bl	80072c0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007cc:	e7fe      	b.n	80007cc <main+0x28>
	...

080007d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b094      	sub	sp, #80	; 0x50
 80007d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007d6:	f107 0320 	add.w	r3, r7, #32
 80007da:	2230      	movs	r2, #48	; 0x30
 80007dc:	2100      	movs	r1, #0
 80007de:	4618      	mov	r0, r3
 80007e0:	f00a f860 	bl	800a8a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007e4:	f107 030c 	add.w	r3, r7, #12
 80007e8:	2200      	movs	r2, #0
 80007ea:	601a      	str	r2, [r3, #0]
 80007ec:	605a      	str	r2, [r3, #4]
 80007ee:	609a      	str	r2, [r3, #8]
 80007f0:	60da      	str	r2, [r3, #12]
 80007f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007f4:	2300      	movs	r3, #0
 80007f6:	60bb      	str	r3, [r7, #8]
 80007f8:	4b28      	ldr	r3, [pc, #160]	; (800089c <SystemClock_Config+0xcc>)
 80007fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007fc:	4a27      	ldr	r2, [pc, #156]	; (800089c <SystemClock_Config+0xcc>)
 80007fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000802:	6413      	str	r3, [r2, #64]	; 0x40
 8000804:	4b25      	ldr	r3, [pc, #148]	; (800089c <SystemClock_Config+0xcc>)
 8000806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000808:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800080c:	60bb      	str	r3, [r7, #8]
 800080e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000810:	2300      	movs	r3, #0
 8000812:	607b      	str	r3, [r7, #4]
 8000814:	4b22      	ldr	r3, [pc, #136]	; (80008a0 <SystemClock_Config+0xd0>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	4a21      	ldr	r2, [pc, #132]	; (80008a0 <SystemClock_Config+0xd0>)
 800081a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800081e:	6013      	str	r3, [r2, #0]
 8000820:	4b1f      	ldr	r3, [pc, #124]	; (80008a0 <SystemClock_Config+0xd0>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000828:	607b      	str	r3, [r7, #4]
 800082a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800082c:	2301      	movs	r3, #1
 800082e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000830:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000834:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000836:	2302      	movs	r3, #2
 8000838:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800083a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800083e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8000840:	2306      	movs	r3, #6
 8000842:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000844:	23a8      	movs	r3, #168	; 0xa8
 8000846:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000848:	2302      	movs	r3, #2
 800084a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800084c:	2307      	movs	r3, #7
 800084e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000850:	f107 0320 	add.w	r3, r7, #32
 8000854:	4618      	mov	r0, r3
 8000856:	f002 fa61 	bl	8002d1c <HAL_RCC_OscConfig>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000860:	f000 f832 	bl	80008c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000864:	230f      	movs	r3, #15
 8000866:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000868:	2302      	movs	r3, #2
 800086a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800086c:	2300      	movs	r3, #0
 800086e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000870:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000874:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000876:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800087a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800087c:	f107 030c 	add.w	r3, r7, #12
 8000880:	2105      	movs	r1, #5
 8000882:	4618      	mov	r0, r3
 8000884:	f002 fcc2 	bl	800320c <HAL_RCC_ClockConfig>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800088e:	f000 f81b 	bl	80008c8 <Error_Handler>
  }
}
 8000892:	bf00      	nop
 8000894:	3750      	adds	r7, #80	; 0x50
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	40023800 	.word	0x40023800
 80008a0:	40007000 	.word	0x40007000

080008a4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	4a04      	ldr	r2, [pc, #16]	; (80008c4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008b2:	4293      	cmp	r3, r2
 80008b4:	d101      	bne.n	80008ba <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008b6:	f000 f9c5 	bl	8000c44 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008ba:	bf00      	nop
 80008bc:	3708      	adds	r7, #8
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	40000c00 	.word	0x40000c00

080008c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	HAL_GPIO_TogglePin(LED_A_GPIO_Port, LED_A_Pin);
 80008cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008d0:	4804      	ldr	r0, [pc, #16]	; (80008e4 <Error_Handler+0x1c>)
 80008d2:	f000 ffb8 	bl	8001846 <HAL_GPIO_TogglePin>
	osDelay(500);
 80008d6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008da:	f006 fda9 	bl	8007430 <osDelay>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008de:	b672      	cpsid	i
}
 80008e0:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008e2:	e7fe      	b.n	80008e2 <Error_Handler+0x1a>
 80008e4:	40021800 	.word	0x40021800

080008e8 <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 80008ec:	4b17      	ldr	r3, [pc, #92]	; (800094c <MX_SPI5_Init+0x64>)
 80008ee:	4a18      	ldr	r2, [pc, #96]	; (8000950 <MX_SPI5_Init+0x68>)
 80008f0:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80008f2:	4b16      	ldr	r3, [pc, #88]	; (800094c <MX_SPI5_Init+0x64>)
 80008f4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008f8:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80008fa:	4b14      	ldr	r3, [pc, #80]	; (800094c <MX_SPI5_Init+0x64>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8000900:	4b12      	ldr	r3, [pc, #72]	; (800094c <MX_SPI5_Init+0x64>)
 8000902:	2200      	movs	r2, #0
 8000904:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000906:	4b11      	ldr	r3, [pc, #68]	; (800094c <MX_SPI5_Init+0x64>)
 8000908:	2200      	movs	r2, #0
 800090a:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 800090c:	4b0f      	ldr	r3, [pc, #60]	; (800094c <MX_SPI5_Init+0x64>)
 800090e:	2200      	movs	r2, #0
 8000910:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8000912:	4b0e      	ldr	r3, [pc, #56]	; (800094c <MX_SPI5_Init+0x64>)
 8000914:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000918:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800091a:	4b0c      	ldr	r3, [pc, #48]	; (800094c <MX_SPI5_Init+0x64>)
 800091c:	2230      	movs	r2, #48	; 0x30
 800091e:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000920:	4b0a      	ldr	r3, [pc, #40]	; (800094c <MX_SPI5_Init+0x64>)
 8000922:	2200      	movs	r2, #0
 8000924:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8000926:	4b09      	ldr	r3, [pc, #36]	; (800094c <MX_SPI5_Init+0x64>)
 8000928:	2200      	movs	r2, #0
 800092a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800092c:	4b07      	ldr	r3, [pc, #28]	; (800094c <MX_SPI5_Init+0x64>)
 800092e:	2200      	movs	r2, #0
 8000930:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8000932:	4b06      	ldr	r3, [pc, #24]	; (800094c <MX_SPI5_Init+0x64>)
 8000934:	220a      	movs	r2, #10
 8000936:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000938:	4804      	ldr	r0, [pc, #16]	; (800094c <MX_SPI5_Init+0x64>)
 800093a:	f002 fe65 	bl	8003608 <HAL_SPI_Init>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8000944:	f7ff ffc0 	bl	80008c8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8000948:	bf00      	nop
 800094a:	bd80      	pop	{r7, pc}
 800094c:	20000198 	.word	0x20000198
 8000950:	40015000 	.word	0x40015000

08000954 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b08a      	sub	sp, #40	; 0x28
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800095c:	f107 0314 	add.w	r3, r7, #20
 8000960:	2200      	movs	r2, #0
 8000962:	601a      	str	r2, [r3, #0]
 8000964:	605a      	str	r2, [r3, #4]
 8000966:	609a      	str	r2, [r3, #8]
 8000968:	60da      	str	r2, [r3, #12]
 800096a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a19      	ldr	r2, [pc, #100]	; (80009d8 <HAL_SPI_MspInit+0x84>)
 8000972:	4293      	cmp	r3, r2
 8000974:	d12c      	bne.n	80009d0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8000976:	2300      	movs	r3, #0
 8000978:	613b      	str	r3, [r7, #16]
 800097a:	4b18      	ldr	r3, [pc, #96]	; (80009dc <HAL_SPI_MspInit+0x88>)
 800097c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800097e:	4a17      	ldr	r2, [pc, #92]	; (80009dc <HAL_SPI_MspInit+0x88>)
 8000980:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000984:	6453      	str	r3, [r2, #68]	; 0x44
 8000986:	4b15      	ldr	r3, [pc, #84]	; (80009dc <HAL_SPI_MspInit+0x88>)
 8000988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800098a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800098e:	613b      	str	r3, [r7, #16]
 8000990:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000992:	2300      	movs	r3, #0
 8000994:	60fb      	str	r3, [r7, #12]
 8000996:	4b11      	ldr	r3, [pc, #68]	; (80009dc <HAL_SPI_MspInit+0x88>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	4a10      	ldr	r2, [pc, #64]	; (80009dc <HAL_SPI_MspInit+0x88>)
 800099c:	f043 0320 	orr.w	r3, r3, #32
 80009a0:	6313      	str	r3, [r2, #48]	; 0x30
 80009a2:	4b0e      	ldr	r3, [pc, #56]	; (80009dc <HAL_SPI_MspInit+0x88>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a6:	f003 0320 	and.w	r3, r3, #32
 80009aa:	60fb      	str	r3, [r7, #12]
 80009ac:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF9     ------> SPI5_MOSI
    PF8     ------> SPI5_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_8;
 80009ae:	f44f 7360 	mov.w	r3, #896	; 0x380
 80009b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b4:	2302      	movs	r3, #2
 80009b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b8:	2300      	movs	r3, #0
 80009ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009bc:	2303      	movs	r3, #3
 80009be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80009c0:	2305      	movs	r3, #5
 80009c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80009c4:	f107 0314 	add.w	r3, r7, #20
 80009c8:	4619      	mov	r1, r3
 80009ca:	4805      	ldr	r0, [pc, #20]	; (80009e0 <HAL_SPI_MspInit+0x8c>)
 80009cc:	f000 fd76 	bl	80014bc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 80009d0:	bf00      	nop
 80009d2:	3728      	adds	r7, #40	; 0x28
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	40015000 	.word	0x40015000
 80009dc:	40023800 	.word	0x40023800
 80009e0:	40021400 	.word	0x40021400

080009e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ea:	2300      	movs	r3, #0
 80009ec:	607b      	str	r3, [r7, #4]
 80009ee:	4b12      	ldr	r3, [pc, #72]	; (8000a38 <HAL_MspInit+0x54>)
 80009f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009f2:	4a11      	ldr	r2, [pc, #68]	; (8000a38 <HAL_MspInit+0x54>)
 80009f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009f8:	6453      	str	r3, [r2, #68]	; 0x44
 80009fa:	4b0f      	ldr	r3, [pc, #60]	; (8000a38 <HAL_MspInit+0x54>)
 80009fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a02:	607b      	str	r3, [r7, #4]
 8000a04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a06:	2300      	movs	r3, #0
 8000a08:	603b      	str	r3, [r7, #0]
 8000a0a:	4b0b      	ldr	r3, [pc, #44]	; (8000a38 <HAL_MspInit+0x54>)
 8000a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a0e:	4a0a      	ldr	r2, [pc, #40]	; (8000a38 <HAL_MspInit+0x54>)
 8000a10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a14:	6413      	str	r3, [r2, #64]	; 0x40
 8000a16:	4b08      	ldr	r3, [pc, #32]	; (8000a38 <HAL_MspInit+0x54>)
 8000a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a1e:	603b      	str	r3, [r7, #0]
 8000a20:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a22:	2200      	movs	r2, #0
 8000a24:	210f      	movs	r1, #15
 8000a26:	f06f 0001 	mvn.w	r0, #1
 8000a2a:	f000 fd1d 	bl	8001468 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a2e:	bf00      	nop
 8000a30:	3708      	adds	r7, #8
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	40023800 	.word	0x40023800

08000a3c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b08e      	sub	sp, #56	; 0x38
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000a44:	2300      	movs	r3, #0
 8000a46:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	60fb      	str	r3, [r7, #12]
 8000a50:	4b33      	ldr	r3, [pc, #204]	; (8000b20 <HAL_InitTick+0xe4>)
 8000a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a54:	4a32      	ldr	r2, [pc, #200]	; (8000b20 <HAL_InitTick+0xe4>)
 8000a56:	f043 0308 	orr.w	r3, r3, #8
 8000a5a:	6413      	str	r3, [r2, #64]	; 0x40
 8000a5c:	4b30      	ldr	r3, [pc, #192]	; (8000b20 <HAL_InitTick+0xe4>)
 8000a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a60:	f003 0308 	and.w	r3, r3, #8
 8000a64:	60fb      	str	r3, [r7, #12]
 8000a66:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a68:	f107 0210 	add.w	r2, r7, #16
 8000a6c:	f107 0314 	add.w	r3, r7, #20
 8000a70:	4611      	mov	r1, r2
 8000a72:	4618      	mov	r0, r3
 8000a74:	f002 fd96 	bl	80035a4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000a78:	6a3b      	ldr	r3, [r7, #32]
 8000a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000a7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d103      	bne.n	8000a8a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000a82:	f002 fd7b 	bl	800357c <HAL_RCC_GetPCLK1Freq>
 8000a86:	6378      	str	r0, [r7, #52]	; 0x34
 8000a88:	e004      	b.n	8000a94 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000a8a:	f002 fd77 	bl	800357c <HAL_RCC_GetPCLK1Freq>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	005b      	lsls	r3, r3, #1
 8000a92:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a96:	4a23      	ldr	r2, [pc, #140]	; (8000b24 <HAL_InitTick+0xe8>)
 8000a98:	fba2 2303 	umull	r2, r3, r2, r3
 8000a9c:	0c9b      	lsrs	r3, r3, #18
 8000a9e:	3b01      	subs	r3, #1
 8000aa0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8000aa2:	4b21      	ldr	r3, [pc, #132]	; (8000b28 <HAL_InitTick+0xec>)
 8000aa4:	4a21      	ldr	r2, [pc, #132]	; (8000b2c <HAL_InitTick+0xf0>)
 8000aa6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8000aa8:	4b1f      	ldr	r3, [pc, #124]	; (8000b28 <HAL_InitTick+0xec>)
 8000aaa:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000aae:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8000ab0:	4a1d      	ldr	r2, [pc, #116]	; (8000b28 <HAL_InitTick+0xec>)
 8000ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ab4:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8000ab6:	4b1c      	ldr	r3, [pc, #112]	; (8000b28 <HAL_InitTick+0xec>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000abc:	4b1a      	ldr	r3, [pc, #104]	; (8000b28 <HAL_InitTick+0xec>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ac2:	4b19      	ldr	r3, [pc, #100]	; (8000b28 <HAL_InitTick+0xec>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 8000ac8:	4817      	ldr	r0, [pc, #92]	; (8000b28 <HAL_InitTick+0xec>)
 8000aca:	f002 fe26 	bl	800371a <HAL_TIM_Base_Init>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000ad4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d11b      	bne.n	8000b14 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 8000adc:	4812      	ldr	r0, [pc, #72]	; (8000b28 <HAL_InitTick+0xec>)
 8000ade:	f002 fe75 	bl	80037cc <HAL_TIM_Base_Start_IT>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000ae8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d111      	bne.n	8000b14 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8000af0:	2032      	movs	r0, #50	; 0x32
 8000af2:	f000 fcd5 	bl	80014a0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	2b0f      	cmp	r3, #15
 8000afa:	d808      	bhi.n	8000b0e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 8000afc:	2200      	movs	r2, #0
 8000afe:	6879      	ldr	r1, [r7, #4]
 8000b00:	2032      	movs	r0, #50	; 0x32
 8000b02:	f000 fcb1 	bl	8001468 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b06:	4a0a      	ldr	r2, [pc, #40]	; (8000b30 <HAL_InitTick+0xf4>)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	6013      	str	r3, [r2, #0]
 8000b0c:	e002      	b.n	8000b14 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000b0e:	2301      	movs	r3, #1
 8000b10:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000b14:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000b18:	4618      	mov	r0, r3
 8000b1a:	3738      	adds	r7, #56	; 0x38
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	40023800 	.word	0x40023800
 8000b24:	431bde83 	.word	0x431bde83
 8000b28:	200001f0 	.word	0x200001f0
 8000b2c:	40000c00 	.word	0x40000c00
 8000b30:	20000004 	.word	0x20000004

08000b34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b38:	e7fe      	b.n	8000b38 <NMI_Handler+0x4>

08000b3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b3a:	b480      	push	{r7}
 8000b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b3e:	e7fe      	b.n	8000b3e <HardFault_Handler+0x4>

08000b40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b44:	e7fe      	b.n	8000b44 <MemManage_Handler+0x4>

08000b46 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b46:	b480      	push	{r7}
 8000b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b4a:	e7fe      	b.n	8000b4a <BusFault_Handler+0x4>

08000b4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b50:	e7fe      	b.n	8000b50 <UsageFault_Handler+0x4>

08000b52 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b52:	b480      	push	{r7}
 8000b54:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b56:	bf00      	nop
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr

08000b60 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000b64:	4802      	ldr	r0, [pc, #8]	; (8000b70 <TIM5_IRQHandler+0x10>)
 8000b66:	f002 fea1 	bl	80038ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000b6a:	bf00      	nop
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	200001f0 	.word	0x200001f0

08000b74 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000b78:	4802      	ldr	r0, [pc, #8]	; (8000b84 <OTG_FS_IRQHandler+0x10>)
 8000b7a:	f000 ffc2 	bl	8001b02 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000b7e:	bf00      	nop
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	20006104 	.word	0x20006104

08000b88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b8c:	4b06      	ldr	r3, [pc, #24]	; (8000ba8 <SystemInit+0x20>)
 8000b8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b92:	4a05      	ldr	r2, [pc, #20]	; (8000ba8 <SystemInit+0x20>)
 8000b94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b9c:	bf00      	nop
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	e000ed00 	.word	0xe000ed00

08000bac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000bac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000be4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000bb0:	f7ff ffea 	bl	8000b88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bb4:	480c      	ldr	r0, [pc, #48]	; (8000be8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000bb6:	490d      	ldr	r1, [pc, #52]	; (8000bec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000bb8:	4a0d      	ldr	r2, [pc, #52]	; (8000bf0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000bba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bbc:	e002      	b.n	8000bc4 <LoopCopyDataInit>

08000bbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bc2:	3304      	adds	r3, #4

08000bc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bc8:	d3f9      	bcc.n	8000bbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bca:	4a0a      	ldr	r2, [pc, #40]	; (8000bf4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000bcc:	4c0a      	ldr	r4, [pc, #40]	; (8000bf8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000bce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bd0:	e001      	b.n	8000bd6 <LoopFillZerobss>

08000bd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bd4:	3204      	adds	r2, #4

08000bd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bd8:	d3fb      	bcc.n	8000bd2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000bda:	f009 fec1 	bl	800a960 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bde:	f7ff fde1 	bl	80007a4 <main>
  bx  lr    
 8000be2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000be4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000be8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bec:	20000150 	.word	0x20000150
  ldr r2, =_sidata
 8000bf0:	0800ab78 	.word	0x0800ab78
  ldr r2, =_sbss
 8000bf4:	20000150 	.word	0x20000150
  ldr r4, =_ebss
 8000bf8:	2000694c 	.word	0x2000694c

08000bfc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bfc:	e7fe      	b.n	8000bfc <ADC_IRQHandler>
	...

08000c00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c04:	4b0e      	ldr	r3, [pc, #56]	; (8000c40 <HAL_Init+0x40>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4a0d      	ldr	r2, [pc, #52]	; (8000c40 <HAL_Init+0x40>)
 8000c0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c0e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c10:	4b0b      	ldr	r3, [pc, #44]	; (8000c40 <HAL_Init+0x40>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a0a      	ldr	r2, [pc, #40]	; (8000c40 <HAL_Init+0x40>)
 8000c16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c1a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c1c:	4b08      	ldr	r3, [pc, #32]	; (8000c40 <HAL_Init+0x40>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a07      	ldr	r2, [pc, #28]	; (8000c40 <HAL_Init+0x40>)
 8000c22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c28:	2003      	movs	r0, #3
 8000c2a:	f000 fc12 	bl	8001452 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c2e:	200f      	movs	r0, #15
 8000c30:	f7ff ff04 	bl	8000a3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c34:	f7ff fed6 	bl	80009e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c38:	2300      	movs	r3, #0
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	40023c00 	.word	0x40023c00

08000c44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c48:	4b06      	ldr	r3, [pc, #24]	; (8000c64 <HAL_IncTick+0x20>)
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	461a      	mov	r2, r3
 8000c4e:	4b06      	ldr	r3, [pc, #24]	; (8000c68 <HAL_IncTick+0x24>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	4413      	add	r3, r2
 8000c54:	4a04      	ldr	r2, [pc, #16]	; (8000c68 <HAL_IncTick+0x24>)
 8000c56:	6013      	str	r3, [r2, #0]
}
 8000c58:	bf00      	nop
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	20000008 	.word	0x20000008
 8000c68:	20000238 	.word	0x20000238

08000c6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c70:	4b03      	ldr	r3, [pc, #12]	; (8000c80 <HAL_GetTick+0x14>)
 8000c72:	681b      	ldr	r3, [r3, #0]
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	20000238 	.word	0x20000238

08000c84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b084      	sub	sp, #16
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c8c:	f7ff ffee 	bl	8000c6c <HAL_GetTick>
 8000c90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000c9c:	d005      	beq.n	8000caa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c9e:	4b0a      	ldr	r3, [pc, #40]	; (8000cc8 <HAL_Delay+0x44>)
 8000ca0:	781b      	ldrb	r3, [r3, #0]
 8000ca2:	461a      	mov	r2, r3
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	4413      	add	r3, r2
 8000ca8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000caa:	bf00      	nop
 8000cac:	f7ff ffde 	bl	8000c6c <HAL_GetTick>
 8000cb0:	4602      	mov	r2, r0
 8000cb2:	68bb      	ldr	r3, [r7, #8]
 8000cb4:	1ad3      	subs	r3, r2, r3
 8000cb6:	68fa      	ldr	r2, [r7, #12]
 8000cb8:	429a      	cmp	r2, r3
 8000cba:	d8f7      	bhi.n	8000cac <HAL_Delay+0x28>
  {
  }
}
 8000cbc:	bf00      	nop
 8000cbe:	bf00      	nop
 8000cc0:	3710      	adds	r7, #16
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	20000008 	.word	0x20000008

08000ccc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b084      	sub	sp, #16
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d101      	bne.n	8000cde <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	e0ed      	b.n	8000eba <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ce4:	b2db      	uxtb	r3, r3
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d102      	bne.n	8000cf0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000cea:	6878      	ldr	r0, [r7, #4]
 8000cec:	f7ff fc34 	bl	8000558 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	681a      	ldr	r2, [r3, #0]
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	f042 0201 	orr.w	r2, r2, #1
 8000cfe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000d00:	f7ff ffb4 	bl	8000c6c <HAL_GetTick>
 8000d04:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000d06:	e012      	b.n	8000d2e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000d08:	f7ff ffb0 	bl	8000c6c <HAL_GetTick>
 8000d0c:	4602      	mov	r2, r0
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	1ad3      	subs	r3, r2, r3
 8000d12:	2b0a      	cmp	r3, #10
 8000d14:	d90b      	bls.n	8000d2e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d1a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	2205      	movs	r2, #5
 8000d26:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	e0c5      	b.n	8000eba <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	685b      	ldr	r3, [r3, #4]
 8000d34:	f003 0301 	and.w	r3, r3, #1
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d0e5      	beq.n	8000d08 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	681a      	ldr	r2, [r3, #0]
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	f022 0202 	bic.w	r2, r2, #2
 8000d4a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000d4c:	f7ff ff8e 	bl	8000c6c <HAL_GetTick>
 8000d50:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000d52:	e012      	b.n	8000d7a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000d54:	f7ff ff8a 	bl	8000c6c <HAL_GetTick>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	1ad3      	subs	r3, r2, r3
 8000d5e:	2b0a      	cmp	r3, #10
 8000d60:	d90b      	bls.n	8000d7a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d66:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	2205      	movs	r2, #5
 8000d72:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000d76:	2301      	movs	r3, #1
 8000d78:	e09f      	b.n	8000eba <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	685b      	ldr	r3, [r3, #4]
 8000d80:	f003 0302 	and.w	r3, r3, #2
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d1e5      	bne.n	8000d54 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	7e1b      	ldrb	r3, [r3, #24]
 8000d8c:	2b01      	cmp	r3, #1
 8000d8e:	d108      	bne.n	8000da2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	681a      	ldr	r2, [r3, #0]
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000d9e:	601a      	str	r2, [r3, #0]
 8000da0:	e007      	b.n	8000db2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	681a      	ldr	r2, [r3, #0]
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000db0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	7e5b      	ldrb	r3, [r3, #25]
 8000db6:	2b01      	cmp	r3, #1
 8000db8:	d108      	bne.n	8000dcc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	681a      	ldr	r2, [r3, #0]
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000dc8:	601a      	str	r2, [r3, #0]
 8000dca:	e007      	b.n	8000ddc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	681a      	ldr	r2, [r3, #0]
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000dda:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	7e9b      	ldrb	r3, [r3, #26]
 8000de0:	2b01      	cmp	r3, #1
 8000de2:	d108      	bne.n	8000df6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	681a      	ldr	r2, [r3, #0]
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	f042 0220 	orr.w	r2, r2, #32
 8000df2:	601a      	str	r2, [r3, #0]
 8000df4:	e007      	b.n	8000e06 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	681a      	ldr	r2, [r3, #0]
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	f022 0220 	bic.w	r2, r2, #32
 8000e04:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	7edb      	ldrb	r3, [r3, #27]
 8000e0a:	2b01      	cmp	r3, #1
 8000e0c:	d108      	bne.n	8000e20 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	681a      	ldr	r2, [r3, #0]
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	f022 0210 	bic.w	r2, r2, #16
 8000e1c:	601a      	str	r2, [r3, #0]
 8000e1e:	e007      	b.n	8000e30 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	681a      	ldr	r2, [r3, #0]
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	f042 0210 	orr.w	r2, r2, #16
 8000e2e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	7f1b      	ldrb	r3, [r3, #28]
 8000e34:	2b01      	cmp	r3, #1
 8000e36:	d108      	bne.n	8000e4a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	681a      	ldr	r2, [r3, #0]
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f042 0208 	orr.w	r2, r2, #8
 8000e46:	601a      	str	r2, [r3, #0]
 8000e48:	e007      	b.n	8000e5a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	681a      	ldr	r2, [r3, #0]
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f022 0208 	bic.w	r2, r2, #8
 8000e58:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	7f5b      	ldrb	r3, [r3, #29]
 8000e5e:	2b01      	cmp	r3, #1
 8000e60:	d108      	bne.n	8000e74 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	681a      	ldr	r2, [r3, #0]
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	f042 0204 	orr.w	r2, r2, #4
 8000e70:	601a      	str	r2, [r3, #0]
 8000e72:	e007      	b.n	8000e84 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	681a      	ldr	r2, [r3, #0]
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	f022 0204 	bic.w	r2, r2, #4
 8000e82:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	689a      	ldr	r2, [r3, #8]
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	68db      	ldr	r3, [r3, #12]
 8000e8c:	431a      	orrs	r2, r3
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	691b      	ldr	r3, [r3, #16]
 8000e92:	431a      	orrs	r2, r3
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	695b      	ldr	r3, [r3, #20]
 8000e98:	ea42 0103 	orr.w	r1, r2, r3
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	1e5a      	subs	r2, r3, #1
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	430a      	orrs	r2, r1
 8000ea8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	2200      	movs	r2, #0
 8000eae:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000eb8:	2300      	movs	r3, #0
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	3710      	adds	r7, #16
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
	...

08000ec4 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b087      	sub	sp, #28
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
 8000ecc:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000eda:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000edc:	7cfb      	ldrb	r3, [r7, #19]
 8000ede:	2b01      	cmp	r3, #1
 8000ee0:	d003      	beq.n	8000eea <HAL_CAN_ConfigFilter+0x26>
 8000ee2:	7cfb      	ldrb	r3, [r7, #19]
 8000ee4:	2b02      	cmp	r3, #2
 8000ee6:	f040 80be 	bne.w	8001066 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8000eea:	4b65      	ldr	r3, [pc, #404]	; (8001080 <HAL_CAN_ConfigFilter+0x1bc>)
 8000eec:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000ef4:	f043 0201 	orr.w	r2, r3, #1
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8000efe:	697b      	ldr	r3, [r7, #20]
 8000f00:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000f04:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f18:	021b      	lsls	r3, r3, #8
 8000f1a:	431a      	orrs	r2, r3
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	695b      	ldr	r3, [r3, #20]
 8000f26:	f003 031f 	and.w	r3, r3, #31
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f30:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	43db      	mvns	r3, r3
 8000f3c:	401a      	ands	r2, r3
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	69db      	ldr	r3, [r3, #28]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d123      	bne.n	8000f94 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	43db      	mvns	r3, r3
 8000f56:	401a      	ands	r2, r3
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	68db      	ldr	r3, [r3, #12]
 8000f62:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000f6a:	683a      	ldr	r2, [r7, #0]
 8000f6c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000f6e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	3248      	adds	r2, #72	; 0x48
 8000f74:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	689b      	ldr	r3, [r3, #8]
 8000f7c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000f88:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000f8a:	6979      	ldr	r1, [r7, #20]
 8000f8c:	3348      	adds	r3, #72	; 0x48
 8000f8e:	00db      	lsls	r3, r3, #3
 8000f90:	440b      	add	r3, r1
 8000f92:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	69db      	ldr	r3, [r3, #28]
 8000f98:	2b01      	cmp	r3, #1
 8000f9a:	d122      	bne.n	8000fe2 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	431a      	orrs	r2, r3
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000fb8:	683a      	ldr	r2, [r7, #0]
 8000fba:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000fbc:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000fbe:	697b      	ldr	r3, [r7, #20]
 8000fc0:	3248      	adds	r2, #72	; 0x48
 8000fc2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	689b      	ldr	r3, [r3, #8]
 8000fca:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	68db      	ldr	r3, [r3, #12]
 8000fd0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000fd6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000fd8:	6979      	ldr	r1, [r7, #20]
 8000fda:	3348      	adds	r3, #72	; 0x48
 8000fdc:	00db      	lsls	r3, r3, #3
 8000fde:	440b      	add	r3, r1
 8000fe0:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	699b      	ldr	r3, [r3, #24]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d109      	bne.n	8000ffe <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000fea:	697b      	ldr	r3, [r7, #20]
 8000fec:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	43db      	mvns	r3, r3
 8000ff4:	401a      	ands	r2, r3
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8000ffc:	e007      	b.n	800100e <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	431a      	orrs	r2, r3
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	691b      	ldr	r3, [r3, #16]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d109      	bne.n	800102a <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	43db      	mvns	r3, r3
 8001020:	401a      	ands	r2, r3
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001028:	e007      	b.n	800103a <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	431a      	orrs	r2, r3
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	6a1b      	ldr	r3, [r3, #32]
 800103e:	2b01      	cmp	r3, #1
 8001040:	d107      	bne.n	8001052 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	431a      	orrs	r2, r3
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001058:	f023 0201 	bic.w	r2, r3, #1
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001062:	2300      	movs	r3, #0
 8001064:	e006      	b.n	8001074 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800106a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001072:	2301      	movs	r3, #1
  }
}
 8001074:	4618      	mov	r0, r3
 8001076:	371c      	adds	r7, #28
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr
 8001080:	40006400 	.word	0x40006400

08001084 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b084      	sub	sp, #16
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001092:	b2db      	uxtb	r3, r3
 8001094:	2b01      	cmp	r3, #1
 8001096:	d12e      	bne.n	80010f6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2202      	movs	r2, #2
 800109c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	681a      	ldr	r2, [r3, #0]
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f022 0201 	bic.w	r2, r2, #1
 80010ae:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80010b0:	f7ff fddc 	bl	8000c6c <HAL_GetTick>
 80010b4:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80010b6:	e012      	b.n	80010de <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80010b8:	f7ff fdd8 	bl	8000c6c <HAL_GetTick>
 80010bc:	4602      	mov	r2, r0
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	1ad3      	subs	r3, r2, r3
 80010c2:	2b0a      	cmp	r3, #10
 80010c4:	d90b      	bls.n	80010de <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ca:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2205      	movs	r2, #5
 80010d6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80010da:	2301      	movs	r3, #1
 80010dc:	e012      	b.n	8001104 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	f003 0301 	and.w	r3, r3, #1
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d1e5      	bne.n	80010b8 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2200      	movs	r2, #0
 80010f0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80010f2:	2300      	movs	r3, #0
 80010f4:	e006      	b.n	8001104 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010fa:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001102:	2301      	movs	r3, #1
  }
}
 8001104:	4618      	mov	r0, r3
 8001106:	3710      	adds	r7, #16
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}

0800110c <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800110c:	b480      	push	{r7}
 800110e:	b089      	sub	sp, #36	; 0x24
 8001110:	af00      	add	r7, sp, #0
 8001112:	60f8      	str	r0, [r7, #12]
 8001114:	60b9      	str	r1, [r7, #8]
 8001116:	607a      	str	r2, [r7, #4]
 8001118:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001120:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	689b      	ldr	r3, [r3, #8]
 8001128:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800112a:	7ffb      	ldrb	r3, [r7, #31]
 800112c:	2b01      	cmp	r3, #1
 800112e:	d003      	beq.n	8001138 <HAL_CAN_AddTxMessage+0x2c>
 8001130:	7ffb      	ldrb	r3, [r7, #31]
 8001132:	2b02      	cmp	r3, #2
 8001134:	f040 80ad 	bne.w	8001292 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001138:	69bb      	ldr	r3, [r7, #24]
 800113a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800113e:	2b00      	cmp	r3, #0
 8001140:	d10a      	bne.n	8001158 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001142:	69bb      	ldr	r3, [r7, #24]
 8001144:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001148:	2b00      	cmp	r3, #0
 800114a:	d105      	bne.n	8001158 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800114c:	69bb      	ldr	r3, [r7, #24]
 800114e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001152:	2b00      	cmp	r3, #0
 8001154:	f000 8095 	beq.w	8001282 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001158:	69bb      	ldr	r3, [r7, #24]
 800115a:	0e1b      	lsrs	r3, r3, #24
 800115c:	f003 0303 	and.w	r3, r3, #3
 8001160:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001162:	2201      	movs	r2, #1
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	409a      	lsls	r2, r3
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800116c:	68bb      	ldr	r3, [r7, #8]
 800116e:	689b      	ldr	r3, [r3, #8]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d10d      	bne.n	8001190 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001174:	68bb      	ldr	r3, [r7, #8]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800117a:	68bb      	ldr	r3, [r7, #8]
 800117c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800117e:	68f9      	ldr	r1, [r7, #12]
 8001180:	6809      	ldr	r1, [r1, #0]
 8001182:	431a      	orrs	r2, r3
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	3318      	adds	r3, #24
 8001188:	011b      	lsls	r3, r3, #4
 800118a:	440b      	add	r3, r1
 800118c:	601a      	str	r2, [r3, #0]
 800118e:	e00f      	b.n	80011b0 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001190:	68bb      	ldr	r3, [r7, #8]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001196:	68bb      	ldr	r3, [r7, #8]
 8001198:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800119a:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80011a0:	68f9      	ldr	r1, [r7, #12]
 80011a2:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80011a4:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	3318      	adds	r3, #24
 80011aa:	011b      	lsls	r3, r3, #4
 80011ac:	440b      	add	r3, r1
 80011ae:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	6819      	ldr	r1, [r3, #0]
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	691a      	ldr	r2, [r3, #16]
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	3318      	adds	r3, #24
 80011bc:	011b      	lsls	r3, r3, #4
 80011be:	440b      	add	r3, r1
 80011c0:	3304      	adds	r3, #4
 80011c2:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	7d1b      	ldrb	r3, [r3, #20]
 80011c8:	2b01      	cmp	r3, #1
 80011ca:	d111      	bne.n	80011f0 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	3318      	adds	r3, #24
 80011d4:	011b      	lsls	r3, r3, #4
 80011d6:	4413      	add	r3, r2
 80011d8:	3304      	adds	r3, #4
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	68fa      	ldr	r2, [r7, #12]
 80011de:	6811      	ldr	r1, [r2, #0]
 80011e0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	3318      	adds	r3, #24
 80011e8:	011b      	lsls	r3, r3, #4
 80011ea:	440b      	add	r3, r1
 80011ec:	3304      	adds	r3, #4
 80011ee:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	3307      	adds	r3, #7
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	061a      	lsls	r2, r3, #24
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	3306      	adds	r3, #6
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	041b      	lsls	r3, r3, #16
 8001200:	431a      	orrs	r2, r3
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	3305      	adds	r3, #5
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	021b      	lsls	r3, r3, #8
 800120a:	4313      	orrs	r3, r2
 800120c:	687a      	ldr	r2, [r7, #4]
 800120e:	3204      	adds	r2, #4
 8001210:	7812      	ldrb	r2, [r2, #0]
 8001212:	4610      	mov	r0, r2
 8001214:	68fa      	ldr	r2, [r7, #12]
 8001216:	6811      	ldr	r1, [r2, #0]
 8001218:	ea43 0200 	orr.w	r2, r3, r0
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	011b      	lsls	r3, r3, #4
 8001220:	440b      	add	r3, r1
 8001222:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001226:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	3303      	adds	r3, #3
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	061a      	lsls	r2, r3, #24
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	3302      	adds	r3, #2
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	041b      	lsls	r3, r3, #16
 8001238:	431a      	orrs	r2, r3
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	3301      	adds	r3, #1
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	021b      	lsls	r3, r3, #8
 8001242:	4313      	orrs	r3, r2
 8001244:	687a      	ldr	r2, [r7, #4]
 8001246:	7812      	ldrb	r2, [r2, #0]
 8001248:	4610      	mov	r0, r2
 800124a:	68fa      	ldr	r2, [r7, #12]
 800124c:	6811      	ldr	r1, [r2, #0]
 800124e:	ea43 0200 	orr.w	r2, r3, r0
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	011b      	lsls	r3, r3, #4
 8001256:	440b      	add	r3, r1
 8001258:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800125c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	681a      	ldr	r2, [r3, #0]
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	3318      	adds	r3, #24
 8001266:	011b      	lsls	r3, r3, #4
 8001268:	4413      	add	r3, r2
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	68fa      	ldr	r2, [r7, #12]
 800126e:	6811      	ldr	r1, [r2, #0]
 8001270:	f043 0201 	orr.w	r2, r3, #1
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	3318      	adds	r3, #24
 8001278:	011b      	lsls	r3, r3, #4
 800127a:	440b      	add	r3, r1
 800127c:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800127e:	2300      	movs	r3, #0
 8001280:	e00e      	b.n	80012a0 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001286:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800128e:	2301      	movs	r3, #1
 8001290:	e006      	b.n	80012a0 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001296:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800129e:	2301      	movs	r3, #1
  }
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	3724      	adds	r7, #36	; 0x24
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr

080012ac <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b085      	sub	sp, #20
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
 80012b4:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012bc:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80012be:	7bfb      	ldrb	r3, [r7, #15]
 80012c0:	2b01      	cmp	r3, #1
 80012c2:	d002      	beq.n	80012ca <HAL_CAN_ActivateNotification+0x1e>
 80012c4:	7bfb      	ldrb	r3, [r7, #15]
 80012c6:	2b02      	cmp	r3, #2
 80012c8:	d109      	bne.n	80012de <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	6959      	ldr	r1, [r3, #20]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	683a      	ldr	r2, [r7, #0]
 80012d6:	430a      	orrs	r2, r1
 80012d8:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80012da:	2300      	movs	r3, #0
 80012dc:	e006      	b.n	80012ec <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012e2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
  }
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	3714      	adds	r7, #20
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr

080012f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b085      	sub	sp, #20
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	f003 0307 	and.w	r3, r3, #7
 8001306:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001308:	4b0c      	ldr	r3, [pc, #48]	; (800133c <__NVIC_SetPriorityGrouping+0x44>)
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800130e:	68ba      	ldr	r2, [r7, #8]
 8001310:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001314:	4013      	ands	r3, r2
 8001316:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001320:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001324:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001328:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800132a:	4a04      	ldr	r2, [pc, #16]	; (800133c <__NVIC_SetPriorityGrouping+0x44>)
 800132c:	68bb      	ldr	r3, [r7, #8]
 800132e:	60d3      	str	r3, [r2, #12]
}
 8001330:	bf00      	nop
 8001332:	3714      	adds	r7, #20
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr
 800133c:	e000ed00 	.word	0xe000ed00

08001340 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001344:	4b04      	ldr	r3, [pc, #16]	; (8001358 <__NVIC_GetPriorityGrouping+0x18>)
 8001346:	68db      	ldr	r3, [r3, #12]
 8001348:	0a1b      	lsrs	r3, r3, #8
 800134a:	f003 0307 	and.w	r3, r3, #7
}
 800134e:	4618      	mov	r0, r3
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr
 8001358:	e000ed00 	.word	0xe000ed00

0800135c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800135c:	b480      	push	{r7}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0
 8001362:	4603      	mov	r3, r0
 8001364:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001366:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800136a:	2b00      	cmp	r3, #0
 800136c:	db0b      	blt.n	8001386 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800136e:	79fb      	ldrb	r3, [r7, #7]
 8001370:	f003 021f 	and.w	r2, r3, #31
 8001374:	4907      	ldr	r1, [pc, #28]	; (8001394 <__NVIC_EnableIRQ+0x38>)
 8001376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800137a:	095b      	lsrs	r3, r3, #5
 800137c:	2001      	movs	r0, #1
 800137e:	fa00 f202 	lsl.w	r2, r0, r2
 8001382:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001386:	bf00      	nop
 8001388:	370c      	adds	r7, #12
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	e000e100 	.word	0xe000e100

08001398 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
 800139e:	4603      	mov	r3, r0
 80013a0:	6039      	str	r1, [r7, #0]
 80013a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	db0a      	blt.n	80013c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	b2da      	uxtb	r2, r3
 80013b0:	490c      	ldr	r1, [pc, #48]	; (80013e4 <__NVIC_SetPriority+0x4c>)
 80013b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b6:	0112      	lsls	r2, r2, #4
 80013b8:	b2d2      	uxtb	r2, r2
 80013ba:	440b      	add	r3, r1
 80013bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013c0:	e00a      	b.n	80013d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	b2da      	uxtb	r2, r3
 80013c6:	4908      	ldr	r1, [pc, #32]	; (80013e8 <__NVIC_SetPriority+0x50>)
 80013c8:	79fb      	ldrb	r3, [r7, #7]
 80013ca:	f003 030f 	and.w	r3, r3, #15
 80013ce:	3b04      	subs	r3, #4
 80013d0:	0112      	lsls	r2, r2, #4
 80013d2:	b2d2      	uxtb	r2, r2
 80013d4:	440b      	add	r3, r1
 80013d6:	761a      	strb	r2, [r3, #24]
}
 80013d8:	bf00      	nop
 80013da:	370c      	adds	r7, #12
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr
 80013e4:	e000e100 	.word	0xe000e100
 80013e8:	e000ed00 	.word	0xe000ed00

080013ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b089      	sub	sp, #36	; 0x24
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	60f8      	str	r0, [r7, #12]
 80013f4:	60b9      	str	r1, [r7, #8]
 80013f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	f003 0307 	and.w	r3, r3, #7
 80013fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001400:	69fb      	ldr	r3, [r7, #28]
 8001402:	f1c3 0307 	rsb	r3, r3, #7
 8001406:	2b04      	cmp	r3, #4
 8001408:	bf28      	it	cs
 800140a:	2304      	movcs	r3, #4
 800140c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	3304      	adds	r3, #4
 8001412:	2b06      	cmp	r3, #6
 8001414:	d902      	bls.n	800141c <NVIC_EncodePriority+0x30>
 8001416:	69fb      	ldr	r3, [r7, #28]
 8001418:	3b03      	subs	r3, #3
 800141a:	e000      	b.n	800141e <NVIC_EncodePriority+0x32>
 800141c:	2300      	movs	r3, #0
 800141e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001420:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001424:	69bb      	ldr	r3, [r7, #24]
 8001426:	fa02 f303 	lsl.w	r3, r2, r3
 800142a:	43da      	mvns	r2, r3
 800142c:	68bb      	ldr	r3, [r7, #8]
 800142e:	401a      	ands	r2, r3
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001434:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	fa01 f303 	lsl.w	r3, r1, r3
 800143e:	43d9      	mvns	r1, r3
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001444:	4313      	orrs	r3, r2
         );
}
 8001446:	4618      	mov	r0, r3
 8001448:	3724      	adds	r7, #36	; 0x24
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr

08001452 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001452:	b580      	push	{r7, lr}
 8001454:	b082      	sub	sp, #8
 8001456:	af00      	add	r7, sp, #0
 8001458:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800145a:	6878      	ldr	r0, [r7, #4]
 800145c:	f7ff ff4c 	bl	80012f8 <__NVIC_SetPriorityGrouping>
}
 8001460:	bf00      	nop
 8001462:	3708      	adds	r7, #8
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}

08001468 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001468:	b580      	push	{r7, lr}
 800146a:	b086      	sub	sp, #24
 800146c:	af00      	add	r7, sp, #0
 800146e:	4603      	mov	r3, r0
 8001470:	60b9      	str	r1, [r7, #8]
 8001472:	607a      	str	r2, [r7, #4]
 8001474:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001476:	2300      	movs	r3, #0
 8001478:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800147a:	f7ff ff61 	bl	8001340 <__NVIC_GetPriorityGrouping>
 800147e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001480:	687a      	ldr	r2, [r7, #4]
 8001482:	68b9      	ldr	r1, [r7, #8]
 8001484:	6978      	ldr	r0, [r7, #20]
 8001486:	f7ff ffb1 	bl	80013ec <NVIC_EncodePriority>
 800148a:	4602      	mov	r2, r0
 800148c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001490:	4611      	mov	r1, r2
 8001492:	4618      	mov	r0, r3
 8001494:	f7ff ff80 	bl	8001398 <__NVIC_SetPriority>
}
 8001498:	bf00      	nop
 800149a:	3718      	adds	r7, #24
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}

080014a0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	4603      	mov	r3, r0
 80014a8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ae:	4618      	mov	r0, r3
 80014b0:	f7ff ff54 	bl	800135c <__NVIC_EnableIRQ>
}
 80014b4:	bf00      	nop
 80014b6:	3708      	adds	r7, #8
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}

080014bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014bc:	b480      	push	{r7}
 80014be:	b089      	sub	sp, #36	; 0x24
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
 80014c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80014c6:	2300      	movs	r3, #0
 80014c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80014ca:	2300      	movs	r3, #0
 80014cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80014ce:	2300      	movs	r3, #0
 80014d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014d2:	2300      	movs	r3, #0
 80014d4:	61fb      	str	r3, [r7, #28]
 80014d6:	e177      	b.n	80017c8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80014d8:	2201      	movs	r2, #1
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	fa02 f303 	lsl.w	r3, r2, r3
 80014e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	697a      	ldr	r2, [r7, #20]
 80014e8:	4013      	ands	r3, r2
 80014ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80014ec:	693a      	ldr	r2, [r7, #16]
 80014ee:	697b      	ldr	r3, [r7, #20]
 80014f0:	429a      	cmp	r2, r3
 80014f2:	f040 8166 	bne.w	80017c2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	f003 0303 	and.w	r3, r3, #3
 80014fe:	2b01      	cmp	r3, #1
 8001500:	d005      	beq.n	800150e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800150a:	2b02      	cmp	r3, #2
 800150c:	d130      	bne.n	8001570 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	689b      	ldr	r3, [r3, #8]
 8001512:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001514:	69fb      	ldr	r3, [r7, #28]
 8001516:	005b      	lsls	r3, r3, #1
 8001518:	2203      	movs	r2, #3
 800151a:	fa02 f303 	lsl.w	r3, r2, r3
 800151e:	43db      	mvns	r3, r3
 8001520:	69ba      	ldr	r2, [r7, #24]
 8001522:	4013      	ands	r3, r2
 8001524:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	68da      	ldr	r2, [r3, #12]
 800152a:	69fb      	ldr	r3, [r7, #28]
 800152c:	005b      	lsls	r3, r3, #1
 800152e:	fa02 f303 	lsl.w	r3, r2, r3
 8001532:	69ba      	ldr	r2, [r7, #24]
 8001534:	4313      	orrs	r3, r2
 8001536:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	69ba      	ldr	r2, [r7, #24]
 800153c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001544:	2201      	movs	r2, #1
 8001546:	69fb      	ldr	r3, [r7, #28]
 8001548:	fa02 f303 	lsl.w	r3, r2, r3
 800154c:	43db      	mvns	r3, r3
 800154e:	69ba      	ldr	r2, [r7, #24]
 8001550:	4013      	ands	r3, r2
 8001552:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	091b      	lsrs	r3, r3, #4
 800155a:	f003 0201 	and.w	r2, r3, #1
 800155e:	69fb      	ldr	r3, [r7, #28]
 8001560:	fa02 f303 	lsl.w	r3, r2, r3
 8001564:	69ba      	ldr	r2, [r7, #24]
 8001566:	4313      	orrs	r3, r2
 8001568:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	69ba      	ldr	r2, [r7, #24]
 800156e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f003 0303 	and.w	r3, r3, #3
 8001578:	2b03      	cmp	r3, #3
 800157a:	d017      	beq.n	80015ac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	68db      	ldr	r3, [r3, #12]
 8001580:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001582:	69fb      	ldr	r3, [r7, #28]
 8001584:	005b      	lsls	r3, r3, #1
 8001586:	2203      	movs	r2, #3
 8001588:	fa02 f303 	lsl.w	r3, r2, r3
 800158c:	43db      	mvns	r3, r3
 800158e:	69ba      	ldr	r2, [r7, #24]
 8001590:	4013      	ands	r3, r2
 8001592:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	689a      	ldr	r2, [r3, #8]
 8001598:	69fb      	ldr	r3, [r7, #28]
 800159a:	005b      	lsls	r3, r3, #1
 800159c:	fa02 f303 	lsl.w	r3, r2, r3
 80015a0:	69ba      	ldr	r2, [r7, #24]
 80015a2:	4313      	orrs	r3, r2
 80015a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	69ba      	ldr	r2, [r7, #24]
 80015aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	f003 0303 	and.w	r3, r3, #3
 80015b4:	2b02      	cmp	r3, #2
 80015b6:	d123      	bne.n	8001600 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015b8:	69fb      	ldr	r3, [r7, #28]
 80015ba:	08da      	lsrs	r2, r3, #3
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	3208      	adds	r2, #8
 80015c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80015c6:	69fb      	ldr	r3, [r7, #28]
 80015c8:	f003 0307 	and.w	r3, r3, #7
 80015cc:	009b      	lsls	r3, r3, #2
 80015ce:	220f      	movs	r2, #15
 80015d0:	fa02 f303 	lsl.w	r3, r2, r3
 80015d4:	43db      	mvns	r3, r3
 80015d6:	69ba      	ldr	r2, [r7, #24]
 80015d8:	4013      	ands	r3, r2
 80015da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	691a      	ldr	r2, [r3, #16]
 80015e0:	69fb      	ldr	r3, [r7, #28]
 80015e2:	f003 0307 	and.w	r3, r3, #7
 80015e6:	009b      	lsls	r3, r3, #2
 80015e8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ec:	69ba      	ldr	r2, [r7, #24]
 80015ee:	4313      	orrs	r3, r2
 80015f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80015f2:	69fb      	ldr	r3, [r7, #28]
 80015f4:	08da      	lsrs	r2, r3, #3
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	3208      	adds	r2, #8
 80015fa:	69b9      	ldr	r1, [r7, #24]
 80015fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001606:	69fb      	ldr	r3, [r7, #28]
 8001608:	005b      	lsls	r3, r3, #1
 800160a:	2203      	movs	r2, #3
 800160c:	fa02 f303 	lsl.w	r3, r2, r3
 8001610:	43db      	mvns	r3, r3
 8001612:	69ba      	ldr	r2, [r7, #24]
 8001614:	4013      	ands	r3, r2
 8001616:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	f003 0203 	and.w	r2, r3, #3
 8001620:	69fb      	ldr	r3, [r7, #28]
 8001622:	005b      	lsls	r3, r3, #1
 8001624:	fa02 f303 	lsl.w	r3, r2, r3
 8001628:	69ba      	ldr	r2, [r7, #24]
 800162a:	4313      	orrs	r3, r2
 800162c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	69ba      	ldr	r2, [r7, #24]
 8001632:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800163c:	2b00      	cmp	r3, #0
 800163e:	f000 80c0 	beq.w	80017c2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001642:	2300      	movs	r3, #0
 8001644:	60fb      	str	r3, [r7, #12]
 8001646:	4b66      	ldr	r3, [pc, #408]	; (80017e0 <HAL_GPIO_Init+0x324>)
 8001648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800164a:	4a65      	ldr	r2, [pc, #404]	; (80017e0 <HAL_GPIO_Init+0x324>)
 800164c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001650:	6453      	str	r3, [r2, #68]	; 0x44
 8001652:	4b63      	ldr	r3, [pc, #396]	; (80017e0 <HAL_GPIO_Init+0x324>)
 8001654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001656:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800165a:	60fb      	str	r3, [r7, #12]
 800165c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800165e:	4a61      	ldr	r2, [pc, #388]	; (80017e4 <HAL_GPIO_Init+0x328>)
 8001660:	69fb      	ldr	r3, [r7, #28]
 8001662:	089b      	lsrs	r3, r3, #2
 8001664:	3302      	adds	r3, #2
 8001666:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800166a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800166c:	69fb      	ldr	r3, [r7, #28]
 800166e:	f003 0303 	and.w	r3, r3, #3
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	220f      	movs	r2, #15
 8001676:	fa02 f303 	lsl.w	r3, r2, r3
 800167a:	43db      	mvns	r3, r3
 800167c:	69ba      	ldr	r2, [r7, #24]
 800167e:	4013      	ands	r3, r2
 8001680:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	4a58      	ldr	r2, [pc, #352]	; (80017e8 <HAL_GPIO_Init+0x32c>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d037      	beq.n	80016fa <HAL_GPIO_Init+0x23e>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	4a57      	ldr	r2, [pc, #348]	; (80017ec <HAL_GPIO_Init+0x330>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d031      	beq.n	80016f6 <HAL_GPIO_Init+0x23a>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	4a56      	ldr	r2, [pc, #344]	; (80017f0 <HAL_GPIO_Init+0x334>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d02b      	beq.n	80016f2 <HAL_GPIO_Init+0x236>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	4a55      	ldr	r2, [pc, #340]	; (80017f4 <HAL_GPIO_Init+0x338>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d025      	beq.n	80016ee <HAL_GPIO_Init+0x232>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	4a54      	ldr	r2, [pc, #336]	; (80017f8 <HAL_GPIO_Init+0x33c>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d01f      	beq.n	80016ea <HAL_GPIO_Init+0x22e>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	4a53      	ldr	r2, [pc, #332]	; (80017fc <HAL_GPIO_Init+0x340>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d019      	beq.n	80016e6 <HAL_GPIO_Init+0x22a>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	4a52      	ldr	r2, [pc, #328]	; (8001800 <HAL_GPIO_Init+0x344>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d013      	beq.n	80016e2 <HAL_GPIO_Init+0x226>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	4a51      	ldr	r2, [pc, #324]	; (8001804 <HAL_GPIO_Init+0x348>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d00d      	beq.n	80016de <HAL_GPIO_Init+0x222>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	4a50      	ldr	r2, [pc, #320]	; (8001808 <HAL_GPIO_Init+0x34c>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d007      	beq.n	80016da <HAL_GPIO_Init+0x21e>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	4a4f      	ldr	r2, [pc, #316]	; (800180c <HAL_GPIO_Init+0x350>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d101      	bne.n	80016d6 <HAL_GPIO_Init+0x21a>
 80016d2:	2309      	movs	r3, #9
 80016d4:	e012      	b.n	80016fc <HAL_GPIO_Init+0x240>
 80016d6:	230a      	movs	r3, #10
 80016d8:	e010      	b.n	80016fc <HAL_GPIO_Init+0x240>
 80016da:	2308      	movs	r3, #8
 80016dc:	e00e      	b.n	80016fc <HAL_GPIO_Init+0x240>
 80016de:	2307      	movs	r3, #7
 80016e0:	e00c      	b.n	80016fc <HAL_GPIO_Init+0x240>
 80016e2:	2306      	movs	r3, #6
 80016e4:	e00a      	b.n	80016fc <HAL_GPIO_Init+0x240>
 80016e6:	2305      	movs	r3, #5
 80016e8:	e008      	b.n	80016fc <HAL_GPIO_Init+0x240>
 80016ea:	2304      	movs	r3, #4
 80016ec:	e006      	b.n	80016fc <HAL_GPIO_Init+0x240>
 80016ee:	2303      	movs	r3, #3
 80016f0:	e004      	b.n	80016fc <HAL_GPIO_Init+0x240>
 80016f2:	2302      	movs	r3, #2
 80016f4:	e002      	b.n	80016fc <HAL_GPIO_Init+0x240>
 80016f6:	2301      	movs	r3, #1
 80016f8:	e000      	b.n	80016fc <HAL_GPIO_Init+0x240>
 80016fa:	2300      	movs	r3, #0
 80016fc:	69fa      	ldr	r2, [r7, #28]
 80016fe:	f002 0203 	and.w	r2, r2, #3
 8001702:	0092      	lsls	r2, r2, #2
 8001704:	4093      	lsls	r3, r2
 8001706:	69ba      	ldr	r2, [r7, #24]
 8001708:	4313      	orrs	r3, r2
 800170a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800170c:	4935      	ldr	r1, [pc, #212]	; (80017e4 <HAL_GPIO_Init+0x328>)
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	089b      	lsrs	r3, r3, #2
 8001712:	3302      	adds	r3, #2
 8001714:	69ba      	ldr	r2, [r7, #24]
 8001716:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800171a:	4b3d      	ldr	r3, [pc, #244]	; (8001810 <HAL_GPIO_Init+0x354>)
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	43db      	mvns	r3, r3
 8001724:	69ba      	ldr	r2, [r7, #24]
 8001726:	4013      	ands	r3, r2
 8001728:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001732:	2b00      	cmp	r3, #0
 8001734:	d003      	beq.n	800173e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001736:	69ba      	ldr	r2, [r7, #24]
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	4313      	orrs	r3, r2
 800173c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800173e:	4a34      	ldr	r2, [pc, #208]	; (8001810 <HAL_GPIO_Init+0x354>)
 8001740:	69bb      	ldr	r3, [r7, #24]
 8001742:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001744:	4b32      	ldr	r3, [pc, #200]	; (8001810 <HAL_GPIO_Init+0x354>)
 8001746:	68db      	ldr	r3, [r3, #12]
 8001748:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	43db      	mvns	r3, r3
 800174e:	69ba      	ldr	r2, [r7, #24]
 8001750:	4013      	ands	r3, r2
 8001752:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800175c:	2b00      	cmp	r3, #0
 800175e:	d003      	beq.n	8001768 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001760:	69ba      	ldr	r2, [r7, #24]
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	4313      	orrs	r3, r2
 8001766:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001768:	4a29      	ldr	r2, [pc, #164]	; (8001810 <HAL_GPIO_Init+0x354>)
 800176a:	69bb      	ldr	r3, [r7, #24]
 800176c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800176e:	4b28      	ldr	r3, [pc, #160]	; (8001810 <HAL_GPIO_Init+0x354>)
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	43db      	mvns	r3, r3
 8001778:	69ba      	ldr	r2, [r7, #24]
 800177a:	4013      	ands	r3, r2
 800177c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001786:	2b00      	cmp	r3, #0
 8001788:	d003      	beq.n	8001792 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800178a:	69ba      	ldr	r2, [r7, #24]
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	4313      	orrs	r3, r2
 8001790:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001792:	4a1f      	ldr	r2, [pc, #124]	; (8001810 <HAL_GPIO_Init+0x354>)
 8001794:	69bb      	ldr	r3, [r7, #24]
 8001796:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001798:	4b1d      	ldr	r3, [pc, #116]	; (8001810 <HAL_GPIO_Init+0x354>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	43db      	mvns	r3, r3
 80017a2:	69ba      	ldr	r2, [r7, #24]
 80017a4:	4013      	ands	r3, r2
 80017a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d003      	beq.n	80017bc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80017b4:	69ba      	ldr	r2, [r7, #24]
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	4313      	orrs	r3, r2
 80017ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80017bc:	4a14      	ldr	r2, [pc, #80]	; (8001810 <HAL_GPIO_Init+0x354>)
 80017be:	69bb      	ldr	r3, [r7, #24]
 80017c0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	3301      	adds	r3, #1
 80017c6:	61fb      	str	r3, [r7, #28]
 80017c8:	69fb      	ldr	r3, [r7, #28]
 80017ca:	2b0f      	cmp	r3, #15
 80017cc:	f67f ae84 	bls.w	80014d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80017d0:	bf00      	nop
 80017d2:	bf00      	nop
 80017d4:	3724      	adds	r7, #36	; 0x24
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	40023800 	.word	0x40023800
 80017e4:	40013800 	.word	0x40013800
 80017e8:	40020000 	.word	0x40020000
 80017ec:	40020400 	.word	0x40020400
 80017f0:	40020800 	.word	0x40020800
 80017f4:	40020c00 	.word	0x40020c00
 80017f8:	40021000 	.word	0x40021000
 80017fc:	40021400 	.word	0x40021400
 8001800:	40021800 	.word	0x40021800
 8001804:	40021c00 	.word	0x40021c00
 8001808:	40022000 	.word	0x40022000
 800180c:	40022400 	.word	0x40022400
 8001810:	40013c00 	.word	0x40013c00

08001814 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001814:	b480      	push	{r7}
 8001816:	b083      	sub	sp, #12
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
 800181c:	460b      	mov	r3, r1
 800181e:	807b      	strh	r3, [r7, #2]
 8001820:	4613      	mov	r3, r2
 8001822:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001824:	787b      	ldrb	r3, [r7, #1]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d003      	beq.n	8001832 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800182a:	887a      	ldrh	r2, [r7, #2]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001830:	e003      	b.n	800183a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001832:	887b      	ldrh	r3, [r7, #2]
 8001834:	041a      	lsls	r2, r3, #16
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	619a      	str	r2, [r3, #24]
}
 800183a:	bf00      	nop
 800183c:	370c      	adds	r7, #12
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr

08001846 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001846:	b480      	push	{r7}
 8001848:	b085      	sub	sp, #20
 800184a:	af00      	add	r7, sp, #0
 800184c:	6078      	str	r0, [r7, #4]
 800184e:	460b      	mov	r3, r1
 8001850:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	695b      	ldr	r3, [r3, #20]
 8001856:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001858:	887a      	ldrh	r2, [r7, #2]
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	4013      	ands	r3, r2
 800185e:	041a      	lsls	r2, r3, #16
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	43d9      	mvns	r1, r3
 8001864:	887b      	ldrh	r3, [r7, #2]
 8001866:	400b      	ands	r3, r1
 8001868:	431a      	orrs	r2, r3
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	619a      	str	r2, [r3, #24]
}
 800186e:	bf00      	nop
 8001870:	3714      	adds	r7, #20
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr

0800187a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800187a:	b580      	push	{r7, lr}
 800187c:	b086      	sub	sp, #24
 800187e:	af02      	add	r7, sp, #8
 8001880:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d101      	bne.n	800188c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001888:	2301      	movs	r3, #1
 800188a:	e101      	b.n	8001a90 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8001898:	b2db      	uxtb	r3, r3
 800189a:	2b00      	cmp	r3, #0
 800189c:	d106      	bne.n	80018ac <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2200      	movs	r2, #0
 80018a2:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80018a6:	6878      	ldr	r0, [r7, #4]
 80018a8:	f008 fc40 	bl	800a12c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2203      	movs	r2, #3
 80018b0:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80018ba:	d102      	bne.n	80018c2 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2200      	movs	r2, #0
 80018c0:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4618      	mov	r0, r3
 80018c8:	f002 fadf 	bl	8003e8a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6818      	ldr	r0, [r3, #0]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	7c1a      	ldrb	r2, [r3, #16]
 80018d4:	f88d 2000 	strb.w	r2, [sp]
 80018d8:	3304      	adds	r3, #4
 80018da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80018dc:	f002 f9be 	bl	8003c5c <USB_CoreInit>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d005      	beq.n	80018f2 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2202      	movs	r2, #2
 80018ea:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	e0ce      	b.n	8001a90 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	2100      	movs	r1, #0
 80018f8:	4618      	mov	r0, r3
 80018fa:	f002 fad7 	bl	8003eac <USB_SetCurrentMode>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d005      	beq.n	8001910 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2202      	movs	r2, #2
 8001908:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 800190c:	2301      	movs	r3, #1
 800190e:	e0bf      	b.n	8001a90 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001910:	2300      	movs	r3, #0
 8001912:	73fb      	strb	r3, [r7, #15]
 8001914:	e04a      	b.n	80019ac <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001916:	7bfa      	ldrb	r2, [r7, #15]
 8001918:	6879      	ldr	r1, [r7, #4]
 800191a:	4613      	mov	r3, r2
 800191c:	00db      	lsls	r3, r3, #3
 800191e:	4413      	add	r3, r2
 8001920:	009b      	lsls	r3, r3, #2
 8001922:	440b      	add	r3, r1
 8001924:	3315      	adds	r3, #21
 8001926:	2201      	movs	r2, #1
 8001928:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800192a:	7bfa      	ldrb	r2, [r7, #15]
 800192c:	6879      	ldr	r1, [r7, #4]
 800192e:	4613      	mov	r3, r2
 8001930:	00db      	lsls	r3, r3, #3
 8001932:	4413      	add	r3, r2
 8001934:	009b      	lsls	r3, r3, #2
 8001936:	440b      	add	r3, r1
 8001938:	3314      	adds	r3, #20
 800193a:	7bfa      	ldrb	r2, [r7, #15]
 800193c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800193e:	7bfa      	ldrb	r2, [r7, #15]
 8001940:	7bfb      	ldrb	r3, [r7, #15]
 8001942:	b298      	uxth	r0, r3
 8001944:	6879      	ldr	r1, [r7, #4]
 8001946:	4613      	mov	r3, r2
 8001948:	00db      	lsls	r3, r3, #3
 800194a:	4413      	add	r3, r2
 800194c:	009b      	lsls	r3, r3, #2
 800194e:	440b      	add	r3, r1
 8001950:	332e      	adds	r3, #46	; 0x2e
 8001952:	4602      	mov	r2, r0
 8001954:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001956:	7bfa      	ldrb	r2, [r7, #15]
 8001958:	6879      	ldr	r1, [r7, #4]
 800195a:	4613      	mov	r3, r2
 800195c:	00db      	lsls	r3, r3, #3
 800195e:	4413      	add	r3, r2
 8001960:	009b      	lsls	r3, r3, #2
 8001962:	440b      	add	r3, r1
 8001964:	3318      	adds	r3, #24
 8001966:	2200      	movs	r2, #0
 8001968:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800196a:	7bfa      	ldrb	r2, [r7, #15]
 800196c:	6879      	ldr	r1, [r7, #4]
 800196e:	4613      	mov	r3, r2
 8001970:	00db      	lsls	r3, r3, #3
 8001972:	4413      	add	r3, r2
 8001974:	009b      	lsls	r3, r3, #2
 8001976:	440b      	add	r3, r1
 8001978:	331c      	adds	r3, #28
 800197a:	2200      	movs	r2, #0
 800197c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800197e:	7bfa      	ldrb	r2, [r7, #15]
 8001980:	6879      	ldr	r1, [r7, #4]
 8001982:	4613      	mov	r3, r2
 8001984:	00db      	lsls	r3, r3, #3
 8001986:	4413      	add	r3, r2
 8001988:	009b      	lsls	r3, r3, #2
 800198a:	440b      	add	r3, r1
 800198c:	3320      	adds	r3, #32
 800198e:	2200      	movs	r2, #0
 8001990:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001992:	7bfa      	ldrb	r2, [r7, #15]
 8001994:	6879      	ldr	r1, [r7, #4]
 8001996:	4613      	mov	r3, r2
 8001998:	00db      	lsls	r3, r3, #3
 800199a:	4413      	add	r3, r2
 800199c:	009b      	lsls	r3, r3, #2
 800199e:	440b      	add	r3, r1
 80019a0:	3324      	adds	r3, #36	; 0x24
 80019a2:	2200      	movs	r2, #0
 80019a4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019a6:	7bfb      	ldrb	r3, [r7, #15]
 80019a8:	3301      	adds	r3, #1
 80019aa:	73fb      	strb	r3, [r7, #15]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	791b      	ldrb	r3, [r3, #4]
 80019b0:	7bfa      	ldrb	r2, [r7, #15]
 80019b2:	429a      	cmp	r2, r3
 80019b4:	d3af      	bcc.n	8001916 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019b6:	2300      	movs	r3, #0
 80019b8:	73fb      	strb	r3, [r7, #15]
 80019ba:	e044      	b.n	8001a46 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80019bc:	7bfa      	ldrb	r2, [r7, #15]
 80019be:	6879      	ldr	r1, [r7, #4]
 80019c0:	4613      	mov	r3, r2
 80019c2:	00db      	lsls	r3, r3, #3
 80019c4:	4413      	add	r3, r2
 80019c6:	009b      	lsls	r3, r3, #2
 80019c8:	440b      	add	r3, r1
 80019ca:	f203 2355 	addw	r3, r3, #597	; 0x255
 80019ce:	2200      	movs	r2, #0
 80019d0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80019d2:	7bfa      	ldrb	r2, [r7, #15]
 80019d4:	6879      	ldr	r1, [r7, #4]
 80019d6:	4613      	mov	r3, r2
 80019d8:	00db      	lsls	r3, r3, #3
 80019da:	4413      	add	r3, r2
 80019dc:	009b      	lsls	r3, r3, #2
 80019de:	440b      	add	r3, r1
 80019e0:	f503 7315 	add.w	r3, r3, #596	; 0x254
 80019e4:	7bfa      	ldrb	r2, [r7, #15]
 80019e6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80019e8:	7bfa      	ldrb	r2, [r7, #15]
 80019ea:	6879      	ldr	r1, [r7, #4]
 80019ec:	4613      	mov	r3, r2
 80019ee:	00db      	lsls	r3, r3, #3
 80019f0:	4413      	add	r3, r2
 80019f2:	009b      	lsls	r3, r3, #2
 80019f4:	440b      	add	r3, r1
 80019f6:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80019fa:	2200      	movs	r2, #0
 80019fc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80019fe:	7bfa      	ldrb	r2, [r7, #15]
 8001a00:	6879      	ldr	r1, [r7, #4]
 8001a02:	4613      	mov	r3, r2
 8001a04:	00db      	lsls	r3, r3, #3
 8001a06:	4413      	add	r3, r2
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	440b      	add	r3, r1
 8001a0c:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8001a10:	2200      	movs	r2, #0
 8001a12:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001a14:	7bfa      	ldrb	r2, [r7, #15]
 8001a16:	6879      	ldr	r1, [r7, #4]
 8001a18:	4613      	mov	r3, r2
 8001a1a:	00db      	lsls	r3, r3, #3
 8001a1c:	4413      	add	r3, r2
 8001a1e:	009b      	lsls	r3, r3, #2
 8001a20:	440b      	add	r3, r1
 8001a22:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8001a26:	2200      	movs	r2, #0
 8001a28:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001a2a:	7bfa      	ldrb	r2, [r7, #15]
 8001a2c:	6879      	ldr	r1, [r7, #4]
 8001a2e:	4613      	mov	r3, r2
 8001a30:	00db      	lsls	r3, r3, #3
 8001a32:	4413      	add	r3, r2
 8001a34:	009b      	lsls	r3, r3, #2
 8001a36:	440b      	add	r3, r1
 8001a38:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a40:	7bfb      	ldrb	r3, [r7, #15]
 8001a42:	3301      	adds	r3, #1
 8001a44:	73fb      	strb	r3, [r7, #15]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	791b      	ldrb	r3, [r3, #4]
 8001a4a:	7bfa      	ldrb	r2, [r7, #15]
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d3b5      	bcc.n	80019bc <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6818      	ldr	r0, [r3, #0]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	7c1a      	ldrb	r2, [r3, #16]
 8001a58:	f88d 2000 	strb.w	r2, [sp]
 8001a5c:	3304      	adds	r3, #4
 8001a5e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a60:	f002 fa70 	bl	8003f44 <USB_DevInit>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d005      	beq.n	8001a76 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2202      	movs	r2, #2
 8001a6e:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e00c      	b.n	8001a90 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2200      	movs	r2, #0
 8001a7a:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2201      	movs	r2, #1
 8001a80:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f003 fab4 	bl	8004ff6 <USB_DevDisconnect>

  return HAL_OK;
 8001a8e:	2300      	movs	r3, #0
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	3710      	adds	r7, #16
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}

08001a98 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b084      	sub	sp, #16
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8001aac:	2b01      	cmp	r3, #1
 8001aae:	d101      	bne.n	8001ab4 <HAL_PCD_Start+0x1c>
 8001ab0:	2302      	movs	r3, #2
 8001ab2:	e022      	b.n	8001afa <HAL_PCD_Start+0x62>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	68db      	ldr	r3, [r3, #12]
 8001ac0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d009      	beq.n	8001adc <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	d105      	bne.n	8001adc <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ad4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f002 f9c1 	bl	8003e68 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4618      	mov	r0, r3
 8001aec:	f003 fa62 	bl	8004fb4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2200      	movs	r2, #0
 8001af4:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8001af8:	2300      	movs	r3, #0
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3710      	adds	r7, #16
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}

08001b02 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001b02:	b590      	push	{r4, r7, lr}
 8001b04:	b08d      	sub	sp, #52	; 0x34
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001b10:	6a3b      	ldr	r3, [r7, #32]
 8001b12:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f003 fb20 	bl	800515e <USB_GetMode>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	f040 848c 	bne.w	800243e <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f003 fa84 	bl	8005038 <USB_ReadInterrupts>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	f000 8482 	beq.w	800243c <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001b38:	69fb      	ldr	r3, [r7, #28]
 8001b3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	0a1b      	lsrs	r3, r3, #8
 8001b42:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4618      	mov	r0, r3
 8001b52:	f003 fa71 	bl	8005038 <USB_ReadInterrupts>
 8001b56:	4603      	mov	r3, r0
 8001b58:	f003 0302 	and.w	r3, r3, #2
 8001b5c:	2b02      	cmp	r3, #2
 8001b5e:	d107      	bne.n	8001b70 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	695a      	ldr	r2, [r3, #20]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f002 0202 	and.w	r2, r2, #2
 8001b6e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4618      	mov	r0, r3
 8001b76:	f003 fa5f 	bl	8005038 <USB_ReadInterrupts>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	f003 0310 	and.w	r3, r3, #16
 8001b80:	2b10      	cmp	r3, #16
 8001b82:	d161      	bne.n	8001c48 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	699a      	ldr	r2, [r3, #24]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f022 0210 	bic.w	r2, r2, #16
 8001b92:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001b94:	6a3b      	ldr	r3, [r7, #32]
 8001b96:	6a1b      	ldr	r3, [r3, #32]
 8001b98:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001b9a:	69bb      	ldr	r3, [r7, #24]
 8001b9c:	f003 020f 	and.w	r2, r3, #15
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	00db      	lsls	r3, r3, #3
 8001ba4:	4413      	add	r3, r2
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8001bac:	687a      	ldr	r2, [r7, #4]
 8001bae:	4413      	add	r3, r2
 8001bb0:	3304      	adds	r3, #4
 8001bb2:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001bb4:	69bb      	ldr	r3, [r7, #24]
 8001bb6:	0c5b      	lsrs	r3, r3, #17
 8001bb8:	f003 030f 	and.w	r3, r3, #15
 8001bbc:	2b02      	cmp	r3, #2
 8001bbe:	d124      	bne.n	8001c0a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001bc0:	69ba      	ldr	r2, [r7, #24]
 8001bc2:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d035      	beq.n	8001c38 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001bd0:	69bb      	ldr	r3, [r7, #24]
 8001bd2:	091b      	lsrs	r3, r3, #4
 8001bd4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001bd6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001bda:	b29b      	uxth	r3, r3
 8001bdc:	461a      	mov	r2, r3
 8001bde:	6a38      	ldr	r0, [r7, #32]
 8001be0:	f003 f896 	bl	8004d10 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	68da      	ldr	r2, [r3, #12]
 8001be8:	69bb      	ldr	r3, [r7, #24]
 8001bea:	091b      	lsrs	r3, r3, #4
 8001bec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001bf0:	441a      	add	r2, r3
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	695a      	ldr	r2, [r3, #20]
 8001bfa:	69bb      	ldr	r3, [r7, #24]
 8001bfc:	091b      	lsrs	r3, r3, #4
 8001bfe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001c02:	441a      	add	r2, r3
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	615a      	str	r2, [r3, #20]
 8001c08:	e016      	b.n	8001c38 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001c0a:	69bb      	ldr	r3, [r7, #24]
 8001c0c:	0c5b      	lsrs	r3, r3, #17
 8001c0e:	f003 030f 	and.w	r3, r3, #15
 8001c12:	2b06      	cmp	r3, #6
 8001c14:	d110      	bne.n	8001c38 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8001c1c:	2208      	movs	r2, #8
 8001c1e:	4619      	mov	r1, r3
 8001c20:	6a38      	ldr	r0, [r7, #32]
 8001c22:	f003 f875 	bl	8004d10 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	695a      	ldr	r2, [r3, #20]
 8001c2a:	69bb      	ldr	r3, [r7, #24]
 8001c2c:	091b      	lsrs	r3, r3, #4
 8001c2e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001c32:	441a      	add	r2, r3
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	699a      	ldr	r2, [r3, #24]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f042 0210 	orr.w	r2, r2, #16
 8001c46:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f003 f9f3 	bl	8005038 <USB_ReadInterrupts>
 8001c52:	4603      	mov	r3, r0
 8001c54:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c58:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001c5c:	f040 80a7 	bne.w	8001dae <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001c60:	2300      	movs	r3, #0
 8001c62:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f003 f9f8 	bl	800505e <USB_ReadDevAllOutEpInterrupt>
 8001c6e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001c70:	e099      	b.n	8001da6 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c74:	f003 0301 	and.w	r3, r3, #1
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	f000 808e 	beq.w	8001d9a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c84:	b2d2      	uxtb	r2, r2
 8001c86:	4611      	mov	r1, r2
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f003 fa1c 	bl	80050c6 <USB_ReadDevOutEPInterrupt>
 8001c8e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	f003 0301 	and.w	r3, r3, #1
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d00c      	beq.n	8001cb4 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c9c:	015a      	lsls	r2, r3, #5
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	4413      	add	r3, r2
 8001ca2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ca6:	461a      	mov	r2, r3
 8001ca8:	2301      	movs	r3, #1
 8001caa:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001cac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f000 fea2 	bl	80029f8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	f003 0308 	and.w	r3, r3, #8
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d00c      	beq.n	8001cd8 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc0:	015a      	lsls	r2, r3, #5
 8001cc2:	69fb      	ldr	r3, [r7, #28]
 8001cc4:	4413      	add	r3, r2
 8001cc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001cca:	461a      	mov	r2, r3
 8001ccc:	2308      	movs	r3, #8
 8001cce:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001cd0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	f000 ff78 	bl	8002bc8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	f003 0310 	and.w	r3, r3, #16
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d008      	beq.n	8001cf4 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce4:	015a      	lsls	r2, r3, #5
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	4413      	add	r3, r2
 8001cea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001cee:	461a      	mov	r2, r3
 8001cf0:	2310      	movs	r3, #16
 8001cf2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	f003 0302 	and.w	r3, r3, #2
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d030      	beq.n	8001d60 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001cfe:	6a3b      	ldr	r3, [r7, #32]
 8001d00:	695b      	ldr	r3, [r3, #20]
 8001d02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d06:	2b80      	cmp	r3, #128	; 0x80
 8001d08:	d109      	bne.n	8001d1e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	69fa      	ldr	r2, [r7, #28]
 8001d14:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001d18:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d1c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001d1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d20:	4613      	mov	r3, r2
 8001d22:	00db      	lsls	r3, r3, #3
 8001d24:	4413      	add	r3, r2
 8001d26:	009b      	lsls	r3, r3, #2
 8001d28:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8001d2c:	687a      	ldr	r2, [r7, #4]
 8001d2e:	4413      	add	r3, r2
 8001d30:	3304      	adds	r3, #4
 8001d32:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	78db      	ldrb	r3, [r3, #3]
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d108      	bne.n	8001d4e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	4619      	mov	r1, r3
 8001d48:	6878      	ldr	r0, [r7, #4]
 8001d4a:	f008 faf5 	bl	800a338 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d50:	015a      	lsls	r2, r3, #5
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	4413      	add	r3, r2
 8001d56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	2302      	movs	r3, #2
 8001d5e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	f003 0320 	and.w	r3, r3, #32
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d008      	beq.n	8001d7c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d6c:	015a      	lsls	r2, r3, #5
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	4413      	add	r3, r2
 8001d72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d76:	461a      	mov	r2, r3
 8001d78:	2320      	movs	r3, #32
 8001d7a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d009      	beq.n	8001d9a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d88:	015a      	lsls	r2, r3, #5
 8001d8a:	69fb      	ldr	r3, [r7, #28]
 8001d8c:	4413      	add	r3, r2
 8001d8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d92:	461a      	mov	r2, r3
 8001d94:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d98:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d9c:	3301      	adds	r3, #1
 8001d9e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001da2:	085b      	lsrs	r3, r3, #1
 8001da4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	f47f af62 	bne.w	8001c72 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4618      	mov	r0, r3
 8001db4:	f003 f940 	bl	8005038 <USB_ReadInterrupts>
 8001db8:	4603      	mov	r3, r0
 8001dba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001dbe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001dc2:	f040 80db 	bne.w	8001f7c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f003 f961 	bl	8005092 <USB_ReadDevAllInEpInterrupt>
 8001dd0:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001dd6:	e0cd      	b.n	8001f74 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dda:	f003 0301 	and.w	r3, r3, #1
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	f000 80c2 	beq.w	8001f68 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dea:	b2d2      	uxtb	r2, r2
 8001dec:	4611      	mov	r1, r2
 8001dee:	4618      	mov	r0, r3
 8001df0:	f003 f987 	bl	8005102 <USB_ReadDevInEPInterrupt>
 8001df4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	f003 0301 	and.w	r3, r3, #1
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d057      	beq.n	8001eb0 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e02:	f003 030f 	and.w	r3, r3, #15
 8001e06:	2201      	movs	r2, #1
 8001e08:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001e0e:	69fb      	ldr	r3, [r7, #28]
 8001e10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	43db      	mvns	r3, r3
 8001e1a:	69f9      	ldr	r1, [r7, #28]
 8001e1c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001e20:	4013      	ands	r3, r2
 8001e22:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e26:	015a      	lsls	r2, r3, #5
 8001e28:	69fb      	ldr	r3, [r7, #28]
 8001e2a:	4413      	add	r3, r2
 8001e2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001e30:	461a      	mov	r2, r3
 8001e32:	2301      	movs	r3, #1
 8001e34:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	799b      	ldrb	r3, [r3, #6]
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d132      	bne.n	8001ea4 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001e3e:	6879      	ldr	r1, [r7, #4]
 8001e40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e42:	4613      	mov	r3, r2
 8001e44:	00db      	lsls	r3, r3, #3
 8001e46:	4413      	add	r3, r2
 8001e48:	009b      	lsls	r3, r3, #2
 8001e4a:	440b      	add	r3, r1
 8001e4c:	3320      	adds	r3, #32
 8001e4e:	6819      	ldr	r1, [r3, #0]
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e54:	4613      	mov	r3, r2
 8001e56:	00db      	lsls	r3, r3, #3
 8001e58:	4413      	add	r3, r2
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	4403      	add	r3, r0
 8001e5e:	331c      	adds	r3, #28
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4419      	add	r1, r3
 8001e64:	6878      	ldr	r0, [r7, #4]
 8001e66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e68:	4613      	mov	r3, r2
 8001e6a:	00db      	lsls	r3, r3, #3
 8001e6c:	4413      	add	r3, r2
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	4403      	add	r3, r0
 8001e72:	3320      	adds	r3, #32
 8001e74:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d113      	bne.n	8001ea4 <HAL_PCD_IRQHandler+0x3a2>
 8001e7c:	6879      	ldr	r1, [r7, #4]
 8001e7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e80:	4613      	mov	r3, r2
 8001e82:	00db      	lsls	r3, r3, #3
 8001e84:	4413      	add	r3, r2
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	440b      	add	r3, r1
 8001e8a:	3324      	adds	r3, #36	; 0x24
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d108      	bne.n	8001ea4 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6818      	ldr	r0, [r3, #0]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8001e9c:	461a      	mov	r2, r3
 8001e9e:	2101      	movs	r1, #1
 8001ea0:	f003 f98e 	bl	80051c0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f008 f9bf 	bl	800a22e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	f003 0308 	and.w	r3, r3, #8
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d008      	beq.n	8001ecc <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ebc:	015a      	lsls	r2, r3, #5
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	4413      	add	r3, r2
 8001ec2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ec6:	461a      	mov	r2, r3
 8001ec8:	2308      	movs	r3, #8
 8001eca:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	f003 0310 	and.w	r3, r3, #16
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d008      	beq.n	8001ee8 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed8:	015a      	lsls	r2, r3, #5
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	4413      	add	r3, r2
 8001ede:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ee2:	461a      	mov	r2, r3
 8001ee4:	2310      	movs	r3, #16
 8001ee6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d008      	beq.n	8001f04 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef4:	015a      	lsls	r2, r3, #5
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	4413      	add	r3, r2
 8001efa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001efe:	461a      	mov	r2, r3
 8001f00:	2340      	movs	r3, #64	; 0x40
 8001f02:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	f003 0302 	and.w	r3, r3, #2
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d023      	beq.n	8001f56 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001f0e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f10:	6a38      	ldr	r0, [r7, #32]
 8001f12:	f002 f97b 	bl	800420c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001f16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f18:	4613      	mov	r3, r2
 8001f1a:	00db      	lsls	r3, r3, #3
 8001f1c:	4413      	add	r3, r2
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	3310      	adds	r3, #16
 8001f22:	687a      	ldr	r2, [r7, #4]
 8001f24:	4413      	add	r3, r2
 8001f26:	3304      	adds	r3, #4
 8001f28:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	78db      	ldrb	r3, [r3, #3]
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d108      	bne.n	8001f44 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	2200      	movs	r2, #0
 8001f36:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f3a:	b2db      	uxtb	r3, r3
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	f008 fa0c 	bl	800a35c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f46:	015a      	lsls	r2, r3, #5
 8001f48:	69fb      	ldr	r3, [r7, #28]
 8001f4a:	4413      	add	r3, r2
 8001f4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f50:	461a      	mov	r2, r3
 8001f52:	2302      	movs	r3, #2
 8001f54:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d003      	beq.n	8001f68 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001f60:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f000 fcbb 	bl	80028de <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f6a:	3301      	adds	r3, #1
 8001f6c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f70:	085b      	lsrs	r3, r3, #1
 8001f72:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	f47f af2e 	bne.w	8001dd8 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4618      	mov	r0, r3
 8001f82:	f003 f859 	bl	8005038 <USB_ReadInterrupts>
 8001f86:	4603      	mov	r3, r0
 8001f88:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001f8c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001f90:	d122      	bne.n	8001fd8 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001f92:	69fb      	ldr	r3, [r7, #28]
 8001f94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	69fa      	ldr	r2, [r7, #28]
 8001f9c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001fa0:	f023 0301 	bic.w	r3, r3, #1
 8001fa4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	d108      	bne.n	8001fc2 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001fb8:	2100      	movs	r1, #0
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f000 fea2 	bl	8002d04 <HAL_PCDEx_LPM_Callback>
 8001fc0:	e002      	b.n	8001fc8 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	f008 f9aa 	bl	800a31c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	695a      	ldr	r2, [r3, #20]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001fd6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f003 f82b 	bl	8005038 <USB_ReadInterrupts>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001fe8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001fec:	d112      	bne.n	8002014 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	f003 0301 	and.w	r3, r3, #1
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	d102      	bne.n	8002004 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	f008 f966 	bl	800a2d0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	695a      	ldr	r2, [r3, #20]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002012:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4618      	mov	r0, r3
 800201a:	f003 f80d 	bl	8005038 <USB_ReadInterrupts>
 800201e:	4603      	mov	r3, r0
 8002020:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002024:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002028:	f040 80b7 	bne.w	800219a <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800202c:	69fb      	ldr	r3, [r7, #28]
 800202e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	69fa      	ldr	r2, [r7, #28]
 8002036:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800203a:	f023 0301 	bic.w	r3, r3, #1
 800203e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	2110      	movs	r1, #16
 8002046:	4618      	mov	r0, r3
 8002048:	f002 f8e0 	bl	800420c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800204c:	2300      	movs	r3, #0
 800204e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002050:	e046      	b.n	80020e0 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002054:	015a      	lsls	r2, r3, #5
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	4413      	add	r3, r2
 800205a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800205e:	461a      	mov	r2, r3
 8002060:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002064:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002068:	015a      	lsls	r2, r3, #5
 800206a:	69fb      	ldr	r3, [r7, #28]
 800206c:	4413      	add	r3, r2
 800206e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002076:	0151      	lsls	r1, r2, #5
 8002078:	69fa      	ldr	r2, [r7, #28]
 800207a:	440a      	add	r2, r1
 800207c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002080:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002084:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002088:	015a      	lsls	r2, r3, #5
 800208a:	69fb      	ldr	r3, [r7, #28]
 800208c:	4413      	add	r3, r2
 800208e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002092:	461a      	mov	r2, r3
 8002094:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002098:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800209a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800209c:	015a      	lsls	r2, r3, #5
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	4413      	add	r3, r2
 80020a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80020aa:	0151      	lsls	r1, r2, #5
 80020ac:	69fa      	ldr	r2, [r7, #28]
 80020ae:	440a      	add	r2, r1
 80020b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80020b4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80020b8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80020ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020bc:	015a      	lsls	r2, r3, #5
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	4413      	add	r3, r2
 80020c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80020ca:	0151      	lsls	r1, r2, #5
 80020cc:	69fa      	ldr	r2, [r7, #28]
 80020ce:	440a      	add	r2, r1
 80020d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80020d4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80020d8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020dc:	3301      	adds	r3, #1
 80020de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	791b      	ldrb	r3, [r3, #4]
 80020e4:	461a      	mov	r2, r3
 80020e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d3b2      	bcc.n	8002052 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020f2:	69db      	ldr	r3, [r3, #28]
 80020f4:	69fa      	ldr	r2, [r7, #28]
 80020f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80020fa:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80020fe:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	7bdb      	ldrb	r3, [r3, #15]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d016      	beq.n	8002136 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800210e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002112:	69fa      	ldr	r2, [r7, #28]
 8002114:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002118:	f043 030b 	orr.w	r3, r3, #11
 800211c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002126:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002128:	69fa      	ldr	r2, [r7, #28]
 800212a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800212e:	f043 030b 	orr.w	r3, r3, #11
 8002132:	6453      	str	r3, [r2, #68]	; 0x44
 8002134:	e015      	b.n	8002162 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800213c:	695b      	ldr	r3, [r3, #20]
 800213e:	69fa      	ldr	r2, [r7, #28]
 8002140:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002144:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002148:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800214c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800214e:	69fb      	ldr	r3, [r7, #28]
 8002150:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002154:	691b      	ldr	r3, [r3, #16]
 8002156:	69fa      	ldr	r2, [r7, #28]
 8002158:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800215c:	f043 030b 	orr.w	r3, r3, #11
 8002160:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	69fa      	ldr	r2, [r7, #28]
 800216c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002170:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002174:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6818      	ldr	r0, [r3, #0]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	f203 439c 	addw	r3, r3, #1180	; 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002184:	461a      	mov	r2, r3
 8002186:	f003 f81b 	bl	80051c0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	695a      	ldr	r2, [r3, #20]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002198:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4618      	mov	r0, r3
 80021a0:	f002 ff4a 	bl	8005038 <USB_ReadInterrupts>
 80021a4:	4603      	mov	r3, r0
 80021a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80021aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021ae:	d123      	bne.n	80021f8 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4618      	mov	r0, r3
 80021b6:	f002 ffe0 	bl	800517a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4618      	mov	r0, r3
 80021c0:	f002 f89d 	bl	80042fe <USB_GetDevSpeed>
 80021c4:	4603      	mov	r3, r0
 80021c6:	461a      	mov	r2, r3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681c      	ldr	r4, [r3, #0]
 80021d0:	f001 f9c8 	bl	8003564 <HAL_RCC_GetHCLKFreq>
 80021d4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80021da:	461a      	mov	r2, r3
 80021dc:	4620      	mov	r0, r4
 80021de:	f001 fda1 	bl	8003d24 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	f008 f84b 	bl	800a27e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	695a      	ldr	r2, [r3, #20]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80021f6:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4618      	mov	r0, r3
 80021fe:	f002 ff1b 	bl	8005038 <USB_ReadInterrupts>
 8002202:	4603      	mov	r3, r0
 8002204:	f003 0308 	and.w	r3, r3, #8
 8002208:	2b08      	cmp	r3, #8
 800220a:	d10a      	bne.n	8002222 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800220c:	6878      	ldr	r0, [r7, #4]
 800220e:	f008 f828 	bl	800a262 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	695a      	ldr	r2, [r3, #20]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f002 0208 	and.w	r2, r2, #8
 8002220:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4618      	mov	r0, r3
 8002228:	f002 ff06 	bl	8005038 <USB_ReadInterrupts>
 800222c:	4603      	mov	r3, r0
 800222e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002232:	2b80      	cmp	r3, #128	; 0x80
 8002234:	d123      	bne.n	800227e <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002236:	6a3b      	ldr	r3, [r7, #32]
 8002238:	699b      	ldr	r3, [r3, #24]
 800223a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800223e:	6a3b      	ldr	r3, [r7, #32]
 8002240:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002242:	2301      	movs	r3, #1
 8002244:	627b      	str	r3, [r7, #36]	; 0x24
 8002246:	e014      	b.n	8002272 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002248:	6879      	ldr	r1, [r7, #4]
 800224a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800224c:	4613      	mov	r3, r2
 800224e:	00db      	lsls	r3, r3, #3
 8002250:	4413      	add	r3, r2
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	440b      	add	r3, r1
 8002256:	f203 2357 	addw	r3, r3, #599	; 0x257
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	2b01      	cmp	r3, #1
 800225e:	d105      	bne.n	800226c <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002262:	b2db      	uxtb	r3, r3
 8002264:	4619      	mov	r1, r3
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	f000 fb08 	bl	800287c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800226c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800226e:	3301      	adds	r3, #1
 8002270:	627b      	str	r3, [r7, #36]	; 0x24
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	791b      	ldrb	r3, [r3, #4]
 8002276:	461a      	mov	r2, r3
 8002278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800227a:	4293      	cmp	r3, r2
 800227c:	d3e4      	bcc.n	8002248 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4618      	mov	r0, r3
 8002284:	f002 fed8 	bl	8005038 <USB_ReadInterrupts>
 8002288:	4603      	mov	r3, r0
 800228a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800228e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002292:	d13c      	bne.n	800230e <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002294:	2301      	movs	r3, #1
 8002296:	627b      	str	r3, [r7, #36]	; 0x24
 8002298:	e02b      	b.n	80022f2 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800229a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800229c:	015a      	lsls	r2, r3, #5
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	4413      	add	r3, r2
 80022a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80022aa:	6879      	ldr	r1, [r7, #4]
 80022ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022ae:	4613      	mov	r3, r2
 80022b0:	00db      	lsls	r3, r3, #3
 80022b2:	4413      	add	r3, r2
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	440b      	add	r3, r1
 80022b8:	3318      	adds	r3, #24
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	2b01      	cmp	r3, #1
 80022be:	d115      	bne.n	80022ec <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80022c0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	da12      	bge.n	80022ec <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80022c6:	6879      	ldr	r1, [r7, #4]
 80022c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022ca:	4613      	mov	r3, r2
 80022cc:	00db      	lsls	r3, r3, #3
 80022ce:	4413      	add	r3, r2
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	440b      	add	r3, r1
 80022d4:	3317      	adds	r3, #23
 80022d6:	2201      	movs	r2, #1
 80022d8:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80022da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80022e2:	b2db      	uxtb	r3, r3
 80022e4:	4619      	mov	r1, r3
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f000 fac8 	bl	800287c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80022ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ee:	3301      	adds	r3, #1
 80022f0:	627b      	str	r3, [r7, #36]	; 0x24
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	791b      	ldrb	r3, [r3, #4]
 80022f6:	461a      	mov	r2, r3
 80022f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d3cd      	bcc.n	800229a <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	695a      	ldr	r2, [r3, #20]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800230c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4618      	mov	r0, r3
 8002314:	f002 fe90 	bl	8005038 <USB_ReadInterrupts>
 8002318:	4603      	mov	r3, r0
 800231a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800231e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002322:	d156      	bne.n	80023d2 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002324:	2301      	movs	r3, #1
 8002326:	627b      	str	r3, [r7, #36]	; 0x24
 8002328:	e045      	b.n	80023b6 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800232a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232c:	015a      	lsls	r2, r3, #5
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	4413      	add	r3, r2
 8002332:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800233a:	6879      	ldr	r1, [r7, #4]
 800233c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800233e:	4613      	mov	r3, r2
 8002340:	00db      	lsls	r3, r3, #3
 8002342:	4413      	add	r3, r2
 8002344:	009b      	lsls	r3, r3, #2
 8002346:	440b      	add	r3, r1
 8002348:	f503 7316 	add.w	r3, r3, #600	; 0x258
 800234c:	781b      	ldrb	r3, [r3, #0]
 800234e:	2b01      	cmp	r3, #1
 8002350:	d12e      	bne.n	80023b0 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002352:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002354:	2b00      	cmp	r3, #0
 8002356:	da2b      	bge.n	80023b0 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002358:	69bb      	ldr	r3, [r7, #24]
 800235a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 8002364:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002368:	429a      	cmp	r2, r3
 800236a:	d121      	bne.n	80023b0 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800236c:	6879      	ldr	r1, [r7, #4]
 800236e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002370:	4613      	mov	r3, r2
 8002372:	00db      	lsls	r3, r3, #3
 8002374:	4413      	add	r3, r2
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	440b      	add	r3, r1
 800237a:	f203 2357 	addw	r3, r3, #599	; 0x257
 800237e:	2201      	movs	r2, #1
 8002380:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002382:	6a3b      	ldr	r3, [r7, #32]
 8002384:	699b      	ldr	r3, [r3, #24]
 8002386:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800238a:	6a3b      	ldr	r3, [r7, #32]
 800238c:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800238e:	6a3b      	ldr	r3, [r7, #32]
 8002390:	695b      	ldr	r3, [r3, #20]
 8002392:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002396:	2b00      	cmp	r3, #0
 8002398:	d10a      	bne.n	80023b0 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	69fa      	ldr	r2, [r7, #28]
 80023a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80023a8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023ac:	6053      	str	r3, [r2, #4]
            break;
 80023ae:	e008      	b.n	80023c2 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80023b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b2:	3301      	adds	r3, #1
 80023b4:	627b      	str	r3, [r7, #36]	; 0x24
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	791b      	ldrb	r3, [r3, #4]
 80023ba:	461a      	mov	r2, r3
 80023bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023be:	4293      	cmp	r3, r2
 80023c0:	d3b3      	bcc.n	800232a <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	695a      	ldr	r2, [r3, #20]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80023d0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4618      	mov	r0, r3
 80023d8:	f002 fe2e 	bl	8005038 <USB_ReadInterrupts>
 80023dc:	4603      	mov	r3, r0
 80023de:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80023e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023e6:	d10a      	bne.n	80023fe <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80023e8:	6878      	ldr	r0, [r7, #4]
 80023ea:	f007 ffc9 	bl	800a380 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	695a      	ldr	r2, [r3, #20]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80023fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4618      	mov	r0, r3
 8002404:	f002 fe18 	bl	8005038 <USB_ReadInterrupts>
 8002408:	4603      	mov	r3, r0
 800240a:	f003 0304 	and.w	r3, r3, #4
 800240e:	2b04      	cmp	r3, #4
 8002410:	d115      	bne.n	800243e <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800241a:	69bb      	ldr	r3, [r7, #24]
 800241c:	f003 0304 	and.w	r3, r3, #4
 8002420:	2b00      	cmp	r3, #0
 8002422:	d002      	beq.n	800242a <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002424:	6878      	ldr	r0, [r7, #4]
 8002426:	f007 ffb9 	bl	800a39c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	6859      	ldr	r1, [r3, #4]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	69ba      	ldr	r2, [r7, #24]
 8002436:	430a      	orrs	r2, r1
 8002438:	605a      	str	r2, [r3, #4]
 800243a:	e000      	b.n	800243e <HAL_PCD_IRQHandler+0x93c>
      return;
 800243c:	bf00      	nop
    }
  }
}
 800243e:	3734      	adds	r7, #52	; 0x34
 8002440:	46bd      	mov	sp, r7
 8002442:	bd90      	pop	{r4, r7, pc}

08002444 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b082      	sub	sp, #8
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
 800244c:	460b      	mov	r3, r1
 800244e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8002456:	2b01      	cmp	r3, #1
 8002458:	d101      	bne.n	800245e <HAL_PCD_SetAddress+0x1a>
 800245a:	2302      	movs	r3, #2
 800245c:	e012      	b.n	8002484 <HAL_PCD_SetAddress+0x40>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2201      	movs	r2, #1
 8002462:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  hpcd->USB_Address = address;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	78fa      	ldrb	r2, [r7, #3]
 800246a:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	78fa      	ldrb	r2, [r7, #3]
 8002472:	4611      	mov	r1, r2
 8002474:	4618      	mov	r0, r3
 8002476:	f002 fd77 	bl	8004f68 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2200      	movs	r2, #0
 800247e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8002482:	2300      	movs	r3, #0
}
 8002484:	4618      	mov	r0, r3
 8002486:	3708      	adds	r7, #8
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}

0800248c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b084      	sub	sp, #16
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
 8002494:	4608      	mov	r0, r1
 8002496:	4611      	mov	r1, r2
 8002498:	461a      	mov	r2, r3
 800249a:	4603      	mov	r3, r0
 800249c:	70fb      	strb	r3, [r7, #3]
 800249e:	460b      	mov	r3, r1
 80024a0:	803b      	strh	r3, [r7, #0]
 80024a2:	4613      	mov	r3, r2
 80024a4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80024a6:	2300      	movs	r3, #0
 80024a8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80024aa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	da0f      	bge.n	80024d2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80024b2:	78fb      	ldrb	r3, [r7, #3]
 80024b4:	f003 020f 	and.w	r2, r3, #15
 80024b8:	4613      	mov	r3, r2
 80024ba:	00db      	lsls	r3, r3, #3
 80024bc:	4413      	add	r3, r2
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	3310      	adds	r3, #16
 80024c2:	687a      	ldr	r2, [r7, #4]
 80024c4:	4413      	add	r3, r2
 80024c6:	3304      	adds	r3, #4
 80024c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	2201      	movs	r2, #1
 80024ce:	705a      	strb	r2, [r3, #1]
 80024d0:	e00f      	b.n	80024f2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80024d2:	78fb      	ldrb	r3, [r7, #3]
 80024d4:	f003 020f 	and.w	r2, r3, #15
 80024d8:	4613      	mov	r3, r2
 80024da:	00db      	lsls	r3, r3, #3
 80024dc:	4413      	add	r3, r2
 80024de:	009b      	lsls	r3, r3, #2
 80024e0:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80024e4:	687a      	ldr	r2, [r7, #4]
 80024e6:	4413      	add	r3, r2
 80024e8:	3304      	adds	r3, #4
 80024ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	2200      	movs	r2, #0
 80024f0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80024f2:	78fb      	ldrb	r3, [r7, #3]
 80024f4:	f003 030f 	and.w	r3, r3, #15
 80024f8:	b2da      	uxtb	r2, r3
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80024fe:	883a      	ldrh	r2, [r7, #0]
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	78ba      	ldrb	r2, [r7, #2]
 8002508:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	785b      	ldrb	r3, [r3, #1]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d004      	beq.n	800251c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	781b      	ldrb	r3, [r3, #0]
 8002516:	b29a      	uxth	r2, r3
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800251c:	78bb      	ldrb	r3, [r7, #2]
 800251e:	2b02      	cmp	r3, #2
 8002520:	d102      	bne.n	8002528 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	2200      	movs	r2, #0
 8002526:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800252e:	2b01      	cmp	r3, #1
 8002530:	d101      	bne.n	8002536 <HAL_PCD_EP_Open+0xaa>
 8002532:	2302      	movs	r3, #2
 8002534:	e00e      	b.n	8002554 <HAL_PCD_EP_Open+0xc8>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2201      	movs	r2, #1
 800253a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	68f9      	ldr	r1, [r7, #12]
 8002544:	4618      	mov	r0, r3
 8002546:	f001 feff 	bl	8004348 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2200      	movs	r2, #0
 800254e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return ret;
 8002552:	7afb      	ldrb	r3, [r7, #11]
}
 8002554:	4618      	mov	r0, r3
 8002556:	3710      	adds	r7, #16
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}

0800255c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b084      	sub	sp, #16
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
 8002564:	460b      	mov	r3, r1
 8002566:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002568:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800256c:	2b00      	cmp	r3, #0
 800256e:	da0f      	bge.n	8002590 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002570:	78fb      	ldrb	r3, [r7, #3]
 8002572:	f003 020f 	and.w	r2, r3, #15
 8002576:	4613      	mov	r3, r2
 8002578:	00db      	lsls	r3, r3, #3
 800257a:	4413      	add	r3, r2
 800257c:	009b      	lsls	r3, r3, #2
 800257e:	3310      	adds	r3, #16
 8002580:	687a      	ldr	r2, [r7, #4]
 8002582:	4413      	add	r3, r2
 8002584:	3304      	adds	r3, #4
 8002586:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	2201      	movs	r2, #1
 800258c:	705a      	strb	r2, [r3, #1]
 800258e:	e00f      	b.n	80025b0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002590:	78fb      	ldrb	r3, [r7, #3]
 8002592:	f003 020f 	and.w	r2, r3, #15
 8002596:	4613      	mov	r3, r2
 8002598:	00db      	lsls	r3, r3, #3
 800259a:	4413      	add	r3, r2
 800259c:	009b      	lsls	r3, r3, #2
 800259e:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80025a2:	687a      	ldr	r2, [r7, #4]
 80025a4:	4413      	add	r3, r2
 80025a6:	3304      	adds	r3, #4
 80025a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	2200      	movs	r2, #0
 80025ae:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80025b0:	78fb      	ldrb	r3, [r7, #3]
 80025b2:	f003 030f 	and.w	r3, r3, #15
 80025b6:	b2da      	uxtb	r2, r3
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d101      	bne.n	80025ca <HAL_PCD_EP_Close+0x6e>
 80025c6:	2302      	movs	r3, #2
 80025c8:	e00e      	b.n	80025e8 <HAL_PCD_EP_Close+0x8c>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2201      	movs	r2, #1
 80025ce:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	68f9      	ldr	r1, [r7, #12]
 80025d8:	4618      	mov	r0, r3
 80025da:	f001 ff3d 	bl	8004458 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2200      	movs	r2, #0
 80025e2:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  return HAL_OK;
 80025e6:	2300      	movs	r3, #0
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	3710      	adds	r7, #16
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}

080025f0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b086      	sub	sp, #24
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	60f8      	str	r0, [r7, #12]
 80025f8:	607a      	str	r2, [r7, #4]
 80025fa:	603b      	str	r3, [r7, #0]
 80025fc:	460b      	mov	r3, r1
 80025fe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002600:	7afb      	ldrb	r3, [r7, #11]
 8002602:	f003 020f 	and.w	r2, r3, #15
 8002606:	4613      	mov	r3, r2
 8002608:	00db      	lsls	r3, r3, #3
 800260a:	4413      	add	r3, r2
 800260c:	009b      	lsls	r3, r3, #2
 800260e:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002612:	68fa      	ldr	r2, [r7, #12]
 8002614:	4413      	add	r3, r2
 8002616:	3304      	adds	r3, #4
 8002618:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	687a      	ldr	r2, [r7, #4]
 800261e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	683a      	ldr	r2, [r7, #0]
 8002624:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	2200      	movs	r2, #0
 800262a:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	2200      	movs	r2, #0
 8002630:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002632:	7afb      	ldrb	r3, [r7, #11]
 8002634:	f003 030f 	and.w	r3, r3, #15
 8002638:	b2da      	uxtb	r2, r3
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	799b      	ldrb	r3, [r3, #6]
 8002642:	2b01      	cmp	r3, #1
 8002644:	d102      	bne.n	800264c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002646:	687a      	ldr	r2, [r7, #4]
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	6818      	ldr	r0, [r3, #0]
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	799b      	ldrb	r3, [r3, #6]
 8002654:	461a      	mov	r2, r3
 8002656:	6979      	ldr	r1, [r7, #20]
 8002658:	f001 ffda 	bl	8004610 <USB_EPStartXfer>

  return HAL_OK;
 800265c:	2300      	movs	r3, #0
}
 800265e:	4618      	mov	r0, r3
 8002660:	3718      	adds	r7, #24
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}

08002666 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002666:	b480      	push	{r7}
 8002668:	b083      	sub	sp, #12
 800266a:	af00      	add	r7, sp, #0
 800266c:	6078      	str	r0, [r7, #4]
 800266e:	460b      	mov	r3, r1
 8002670:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002672:	78fb      	ldrb	r3, [r7, #3]
 8002674:	f003 020f 	and.w	r2, r3, #15
 8002678:	6879      	ldr	r1, [r7, #4]
 800267a:	4613      	mov	r3, r2
 800267c:	00db      	lsls	r3, r3, #3
 800267e:	4413      	add	r3, r2
 8002680:	009b      	lsls	r3, r3, #2
 8002682:	440b      	add	r3, r1
 8002684:	f503 731a 	add.w	r3, r3, #616	; 0x268
 8002688:	681b      	ldr	r3, [r3, #0]
}
 800268a:	4618      	mov	r0, r3
 800268c:	370c      	adds	r7, #12
 800268e:	46bd      	mov	sp, r7
 8002690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002694:	4770      	bx	lr

08002696 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002696:	b580      	push	{r7, lr}
 8002698:	b086      	sub	sp, #24
 800269a:	af00      	add	r7, sp, #0
 800269c:	60f8      	str	r0, [r7, #12]
 800269e:	607a      	str	r2, [r7, #4]
 80026a0:	603b      	str	r3, [r7, #0]
 80026a2:	460b      	mov	r3, r1
 80026a4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80026a6:	7afb      	ldrb	r3, [r7, #11]
 80026a8:	f003 020f 	and.w	r2, r3, #15
 80026ac:	4613      	mov	r3, r2
 80026ae:	00db      	lsls	r3, r3, #3
 80026b0:	4413      	add	r3, r2
 80026b2:	009b      	lsls	r3, r3, #2
 80026b4:	3310      	adds	r3, #16
 80026b6:	68fa      	ldr	r2, [r7, #12]
 80026b8:	4413      	add	r3, r2
 80026ba:	3304      	adds	r3, #4
 80026bc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	687a      	ldr	r2, [r7, #4]
 80026c2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	683a      	ldr	r2, [r7, #0]
 80026c8:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	2200      	movs	r2, #0
 80026ce:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	2201      	movs	r2, #1
 80026d4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80026d6:	7afb      	ldrb	r3, [r7, #11]
 80026d8:	f003 030f 	and.w	r3, r3, #15
 80026dc:	b2da      	uxtb	r2, r3
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	799b      	ldrb	r3, [r3, #6]
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	d102      	bne.n	80026f0 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80026ea:	687a      	ldr	r2, [r7, #4]
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	6818      	ldr	r0, [r3, #0]
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	799b      	ldrb	r3, [r3, #6]
 80026f8:	461a      	mov	r2, r3
 80026fa:	6979      	ldr	r1, [r7, #20]
 80026fc:	f001 ff88 	bl	8004610 <USB_EPStartXfer>

  return HAL_OK;
 8002700:	2300      	movs	r3, #0
}
 8002702:	4618      	mov	r0, r3
 8002704:	3718      	adds	r7, #24
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}

0800270a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800270a:	b580      	push	{r7, lr}
 800270c:	b084      	sub	sp, #16
 800270e:	af00      	add	r7, sp, #0
 8002710:	6078      	str	r0, [r7, #4]
 8002712:	460b      	mov	r3, r1
 8002714:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002716:	78fb      	ldrb	r3, [r7, #3]
 8002718:	f003 030f 	and.w	r3, r3, #15
 800271c:	687a      	ldr	r2, [r7, #4]
 800271e:	7912      	ldrb	r2, [r2, #4]
 8002720:	4293      	cmp	r3, r2
 8002722:	d901      	bls.n	8002728 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	e04f      	b.n	80027c8 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002728:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800272c:	2b00      	cmp	r3, #0
 800272e:	da0f      	bge.n	8002750 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002730:	78fb      	ldrb	r3, [r7, #3]
 8002732:	f003 020f 	and.w	r2, r3, #15
 8002736:	4613      	mov	r3, r2
 8002738:	00db      	lsls	r3, r3, #3
 800273a:	4413      	add	r3, r2
 800273c:	009b      	lsls	r3, r3, #2
 800273e:	3310      	adds	r3, #16
 8002740:	687a      	ldr	r2, [r7, #4]
 8002742:	4413      	add	r3, r2
 8002744:	3304      	adds	r3, #4
 8002746:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	2201      	movs	r2, #1
 800274c:	705a      	strb	r2, [r3, #1]
 800274e:	e00d      	b.n	800276c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002750:	78fa      	ldrb	r2, [r7, #3]
 8002752:	4613      	mov	r3, r2
 8002754:	00db      	lsls	r3, r3, #3
 8002756:	4413      	add	r3, r2
 8002758:	009b      	lsls	r3, r3, #2
 800275a:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800275e:	687a      	ldr	r2, [r7, #4]
 8002760:	4413      	add	r3, r2
 8002762:	3304      	adds	r3, #4
 8002764:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2200      	movs	r2, #0
 800276a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2201      	movs	r2, #1
 8002770:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002772:	78fb      	ldrb	r3, [r7, #3]
 8002774:	f003 030f 	and.w	r3, r3, #15
 8002778:	b2da      	uxtb	r2, r3
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8002784:	2b01      	cmp	r3, #1
 8002786:	d101      	bne.n	800278c <HAL_PCD_EP_SetStall+0x82>
 8002788:	2302      	movs	r3, #2
 800278a:	e01d      	b.n	80027c8 <HAL_PCD_EP_SetStall+0xbe>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2201      	movs	r2, #1
 8002790:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	68f9      	ldr	r1, [r7, #12]
 800279a:	4618      	mov	r0, r3
 800279c:	f002 fb10 	bl	8004dc0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80027a0:	78fb      	ldrb	r3, [r7, #3]
 80027a2:	f003 030f 	and.w	r3, r3, #15
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d109      	bne.n	80027be <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6818      	ldr	r0, [r3, #0]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	7999      	ldrb	r1, [r3, #6]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80027b8:	461a      	mov	r2, r3
 80027ba:	f002 fd01 	bl	80051c0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2200      	movs	r2, #0
 80027c2:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 80027c6:	2300      	movs	r3, #0
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	3710      	adds	r7, #16
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}

080027d0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b084      	sub	sp, #16
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
 80027d8:	460b      	mov	r3, r1
 80027da:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80027dc:	78fb      	ldrb	r3, [r7, #3]
 80027de:	f003 030f 	and.w	r3, r3, #15
 80027e2:	687a      	ldr	r2, [r7, #4]
 80027e4:	7912      	ldrb	r2, [r2, #4]
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d901      	bls.n	80027ee <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e042      	b.n	8002874 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80027ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	da0f      	bge.n	8002816 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027f6:	78fb      	ldrb	r3, [r7, #3]
 80027f8:	f003 020f 	and.w	r2, r3, #15
 80027fc:	4613      	mov	r3, r2
 80027fe:	00db      	lsls	r3, r3, #3
 8002800:	4413      	add	r3, r2
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	3310      	adds	r3, #16
 8002806:	687a      	ldr	r2, [r7, #4]
 8002808:	4413      	add	r3, r2
 800280a:	3304      	adds	r3, #4
 800280c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	2201      	movs	r2, #1
 8002812:	705a      	strb	r2, [r3, #1]
 8002814:	e00f      	b.n	8002836 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002816:	78fb      	ldrb	r3, [r7, #3]
 8002818:	f003 020f 	and.w	r2, r3, #15
 800281c:	4613      	mov	r3, r2
 800281e:	00db      	lsls	r3, r3, #3
 8002820:	4413      	add	r3, r2
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002828:	687a      	ldr	r2, [r7, #4]
 800282a:	4413      	add	r3, r2
 800282c:	3304      	adds	r3, #4
 800282e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	2200      	movs	r2, #0
 8002834:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	2200      	movs	r2, #0
 800283a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800283c:	78fb      	ldrb	r3, [r7, #3]
 800283e:	f003 030f 	and.w	r3, r3, #15
 8002842:	b2da      	uxtb	r2, r3
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800284e:	2b01      	cmp	r3, #1
 8002850:	d101      	bne.n	8002856 <HAL_PCD_EP_ClrStall+0x86>
 8002852:	2302      	movs	r3, #2
 8002854:	e00e      	b.n	8002874 <HAL_PCD_EP_ClrStall+0xa4>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2201      	movs	r2, #1
 800285a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	68f9      	ldr	r1, [r7, #12]
 8002864:	4618      	mov	r0, r3
 8002866:	f002 fb19 	bl	8004e9c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2200      	movs	r2, #0
 800286e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8002872:	2300      	movs	r3, #0
}
 8002874:	4618      	mov	r0, r3
 8002876:	3710      	adds	r7, #16
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}

0800287c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b084      	sub	sp, #16
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
 8002884:	460b      	mov	r3, r1
 8002886:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002888:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800288c:	2b00      	cmp	r3, #0
 800288e:	da0c      	bge.n	80028aa <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002890:	78fb      	ldrb	r3, [r7, #3]
 8002892:	f003 020f 	and.w	r2, r3, #15
 8002896:	4613      	mov	r3, r2
 8002898:	00db      	lsls	r3, r3, #3
 800289a:	4413      	add	r3, r2
 800289c:	009b      	lsls	r3, r3, #2
 800289e:	3310      	adds	r3, #16
 80028a0:	687a      	ldr	r2, [r7, #4]
 80028a2:	4413      	add	r3, r2
 80028a4:	3304      	adds	r3, #4
 80028a6:	60fb      	str	r3, [r7, #12]
 80028a8:	e00c      	b.n	80028c4 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80028aa:	78fb      	ldrb	r3, [r7, #3]
 80028ac:	f003 020f 	and.w	r2, r3, #15
 80028b0:	4613      	mov	r3, r2
 80028b2:	00db      	lsls	r3, r3, #3
 80028b4:	4413      	add	r3, r2
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80028bc:	687a      	ldr	r2, [r7, #4]
 80028be:	4413      	add	r3, r2
 80028c0:	3304      	adds	r3, #4
 80028c2:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	68f9      	ldr	r1, [r7, #12]
 80028ca:	4618      	mov	r0, r3
 80028cc:	f002 f938 	bl	8004b40 <USB_EPStopXfer>
 80028d0:	4603      	mov	r3, r0
 80028d2:	72fb      	strb	r3, [r7, #11]

  return ret;
 80028d4:	7afb      	ldrb	r3, [r7, #11]
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3710      	adds	r7, #16
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}

080028de <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80028de:	b580      	push	{r7, lr}
 80028e0:	b08a      	sub	sp, #40	; 0x28
 80028e2:	af02      	add	r7, sp, #8
 80028e4:	6078      	str	r0, [r7, #4]
 80028e6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80028f2:	683a      	ldr	r2, [r7, #0]
 80028f4:	4613      	mov	r3, r2
 80028f6:	00db      	lsls	r3, r3, #3
 80028f8:	4413      	add	r3, r2
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	3310      	adds	r3, #16
 80028fe:	687a      	ldr	r2, [r7, #4]
 8002900:	4413      	add	r3, r2
 8002902:	3304      	adds	r3, #4
 8002904:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	695a      	ldr	r2, [r3, #20]
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	691b      	ldr	r3, [r3, #16]
 800290e:	429a      	cmp	r2, r3
 8002910:	d901      	bls.n	8002916 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	e06b      	b.n	80029ee <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	691a      	ldr	r2, [r3, #16]
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	695b      	ldr	r3, [r3, #20]
 800291e:	1ad3      	subs	r3, r2, r3
 8002920:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	69fa      	ldr	r2, [r7, #28]
 8002928:	429a      	cmp	r2, r3
 800292a:	d902      	bls.n	8002932 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002932:	69fb      	ldr	r3, [r7, #28]
 8002934:	3303      	adds	r3, #3
 8002936:	089b      	lsrs	r3, r3, #2
 8002938:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800293a:	e02a      	b.n	8002992 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	691a      	ldr	r2, [r3, #16]
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	695b      	ldr	r3, [r3, #20]
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	69fa      	ldr	r2, [r7, #28]
 800294e:	429a      	cmp	r2, r3
 8002950:	d902      	bls.n	8002958 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002958:	69fb      	ldr	r3, [r7, #28]
 800295a:	3303      	adds	r3, #3
 800295c:	089b      	lsrs	r3, r3, #2
 800295e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	68d9      	ldr	r1, [r3, #12]
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	b2da      	uxtb	r2, r3
 8002968:	69fb      	ldr	r3, [r7, #28]
 800296a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002970:	9300      	str	r3, [sp, #0]
 8002972:	4603      	mov	r3, r0
 8002974:	6978      	ldr	r0, [r7, #20]
 8002976:	f002 f98d 	bl	8004c94 <USB_WritePacket>

    ep->xfer_buff  += len;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	68da      	ldr	r2, [r3, #12]
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	441a      	add	r2, r3
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	695a      	ldr	r2, [r3, #20]
 800298a:	69fb      	ldr	r3, [r7, #28]
 800298c:	441a      	add	r2, r3
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	015a      	lsls	r2, r3, #5
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	4413      	add	r3, r2
 800299a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800299e:	699b      	ldr	r3, [r3, #24]
 80029a0:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80029a2:	69ba      	ldr	r2, [r7, #24]
 80029a4:	429a      	cmp	r2, r3
 80029a6:	d809      	bhi.n	80029bc <PCD_WriteEmptyTxFifo+0xde>
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	695a      	ldr	r2, [r3, #20]
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80029b0:	429a      	cmp	r2, r3
 80029b2:	d203      	bcs.n	80029bc <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	691b      	ldr	r3, [r3, #16]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d1bf      	bne.n	800293c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	691a      	ldr	r2, [r3, #16]
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	695b      	ldr	r3, [r3, #20]
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d811      	bhi.n	80029ec <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	f003 030f 	and.w	r3, r3, #15
 80029ce:	2201      	movs	r2, #1
 80029d0:	fa02 f303 	lsl.w	r3, r2, r3
 80029d4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	43db      	mvns	r3, r3
 80029e2:	6939      	ldr	r1, [r7, #16]
 80029e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80029e8:	4013      	ands	r3, r2
 80029ea:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80029ec:	2300      	movs	r3, #0
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3720      	adds	r7, #32
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
	...

080029f8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b088      	sub	sp, #32
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
 8002a00:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a08:	69fb      	ldr	r3, [r7, #28]
 8002a0a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002a0c:	69fb      	ldr	r3, [r7, #28]
 8002a0e:	333c      	adds	r3, #60	; 0x3c
 8002a10:	3304      	adds	r3, #4
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	015a      	lsls	r2, r3, #5
 8002a1a:	69bb      	ldr	r3, [r7, #24]
 8002a1c:	4413      	add	r3, r2
 8002a1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	799b      	ldrb	r3, [r3, #6]
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d17b      	bne.n	8002b26 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	f003 0308 	and.w	r3, r3, #8
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d015      	beq.n	8002a64 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	4a61      	ldr	r2, [pc, #388]	; (8002bc0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	f240 80b9 	bls.w	8002bb4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	f000 80b3 	beq.w	8002bb4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	015a      	lsls	r2, r3, #5
 8002a52:	69bb      	ldr	r3, [r7, #24]
 8002a54:	4413      	add	r3, r2
 8002a56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a5a:	461a      	mov	r2, r3
 8002a5c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a60:	6093      	str	r3, [r2, #8]
 8002a62:	e0a7      	b.n	8002bb4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	f003 0320 	and.w	r3, r3, #32
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d009      	beq.n	8002a82 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	015a      	lsls	r2, r3, #5
 8002a72:	69bb      	ldr	r3, [r7, #24]
 8002a74:	4413      	add	r3, r2
 8002a76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a7a:	461a      	mov	r2, r3
 8002a7c:	2320      	movs	r3, #32
 8002a7e:	6093      	str	r3, [r2, #8]
 8002a80:	e098      	b.n	8002bb4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	f040 8093 	bne.w	8002bb4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	4a4b      	ldr	r2, [pc, #300]	; (8002bc0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d90f      	bls.n	8002ab6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d00a      	beq.n	8002ab6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	015a      	lsls	r2, r3, #5
 8002aa4:	69bb      	ldr	r3, [r7, #24]
 8002aa6:	4413      	add	r3, r2
 8002aa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002aac:	461a      	mov	r2, r3
 8002aae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ab2:	6093      	str	r3, [r2, #8]
 8002ab4:	e07e      	b.n	8002bb4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002ab6:	683a      	ldr	r2, [r7, #0]
 8002ab8:	4613      	mov	r3, r2
 8002aba:	00db      	lsls	r3, r3, #3
 8002abc:	4413      	add	r3, r2
 8002abe:	009b      	lsls	r3, r3, #2
 8002ac0:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002ac4:	687a      	ldr	r2, [r7, #4]
 8002ac6:	4413      	add	r3, r2
 8002ac8:	3304      	adds	r3, #4
 8002aca:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	6a1a      	ldr	r2, [r3, #32]
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	0159      	lsls	r1, r3, #5
 8002ad4:	69bb      	ldr	r3, [r7, #24]
 8002ad6:	440b      	add	r3, r1
 8002ad8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002adc:	691b      	ldr	r3, [r3, #16]
 8002ade:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ae2:	1ad2      	subs	r2, r2, r3
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d114      	bne.n	8002b18 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	691b      	ldr	r3, [r3, #16]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d109      	bne.n	8002b0a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6818      	ldr	r0, [r3, #0]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8002b00:	461a      	mov	r2, r3
 8002b02:	2101      	movs	r1, #1
 8002b04:	f002 fb5c 	bl	80051c0 <USB_EP0_OutStart>
 8002b08:	e006      	b.n	8002b18 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	68da      	ldr	r2, [r3, #12]
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	695b      	ldr	r3, [r3, #20]
 8002b12:	441a      	add	r2, r3
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	4619      	mov	r1, r3
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f007 fb6a 	bl	800a1f8 <HAL_PCD_DataOutStageCallback>
 8002b24:	e046      	b.n	8002bb4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	4a26      	ldr	r2, [pc, #152]	; (8002bc4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d124      	bne.n	8002b78 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d00a      	beq.n	8002b4e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	015a      	lsls	r2, r3, #5
 8002b3c:	69bb      	ldr	r3, [r7, #24]
 8002b3e:	4413      	add	r3, r2
 8002b40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b44:	461a      	mov	r2, r3
 8002b46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b4a:	6093      	str	r3, [r2, #8]
 8002b4c:	e032      	b.n	8002bb4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	f003 0320 	and.w	r3, r3, #32
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d008      	beq.n	8002b6a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	015a      	lsls	r2, r3, #5
 8002b5c:	69bb      	ldr	r3, [r7, #24]
 8002b5e:	4413      	add	r3, r2
 8002b60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b64:	461a      	mov	r2, r3
 8002b66:	2320      	movs	r3, #32
 8002b68:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	4619      	mov	r1, r3
 8002b70:	6878      	ldr	r0, [r7, #4]
 8002b72:	f007 fb41 	bl	800a1f8 <HAL_PCD_DataOutStageCallback>
 8002b76:	e01d      	b.n	8002bb4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d114      	bne.n	8002ba8 <PCD_EP_OutXfrComplete_int+0x1b0>
 8002b7e:	6879      	ldr	r1, [r7, #4]
 8002b80:	683a      	ldr	r2, [r7, #0]
 8002b82:	4613      	mov	r3, r2
 8002b84:	00db      	lsls	r3, r3, #3
 8002b86:	4413      	add	r3, r2
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	440b      	add	r3, r1
 8002b8c:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d108      	bne.n	8002ba8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6818      	ldr	r0, [r3, #0]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8002ba0:	461a      	mov	r2, r3
 8002ba2:	2100      	movs	r1, #0
 8002ba4:	f002 fb0c 	bl	80051c0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	b2db      	uxtb	r3, r3
 8002bac:	4619      	mov	r1, r3
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	f007 fb22 	bl	800a1f8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002bb4:	2300      	movs	r3, #0
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3720      	adds	r7, #32
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	4f54300a 	.word	0x4f54300a
 8002bc4:	4f54310a 	.word	0x4f54310a

08002bc8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b086      	sub	sp, #24
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
 8002bd0:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	333c      	adds	r3, #60	; 0x3c
 8002be0:	3304      	adds	r3, #4
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	015a      	lsls	r2, r3, #5
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	4413      	add	r3, r2
 8002bee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	4a15      	ldr	r2, [pc, #84]	; (8002c50 <PCD_EP_OutSetupPacket_int+0x88>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d90e      	bls.n	8002c1c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d009      	beq.n	8002c1c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	015a      	lsls	r2, r3, #5
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	4413      	add	r3, r2
 8002c10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c14:	461a      	mov	r2, r3
 8002c16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c1a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002c1c:	6878      	ldr	r0, [r7, #4]
 8002c1e:	f007 fad9 	bl	800a1d4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	4a0a      	ldr	r2, [pc, #40]	; (8002c50 <PCD_EP_OutSetupPacket_int+0x88>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d90c      	bls.n	8002c44 <PCD_EP_OutSetupPacket_int+0x7c>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	799b      	ldrb	r3, [r3, #6]
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d108      	bne.n	8002c44 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6818      	ldr	r0, [r3, #0]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8002c3c:	461a      	mov	r2, r3
 8002c3e:	2101      	movs	r1, #1
 8002c40:	f002 fabe 	bl	80051c0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002c44:	2300      	movs	r3, #0
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3718      	adds	r7, #24
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	bf00      	nop
 8002c50:	4f54300a 	.word	0x4f54300a

08002c54 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b085      	sub	sp, #20
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
 8002c5c:	460b      	mov	r3, r1
 8002c5e:	70fb      	strb	r3, [r7, #3]
 8002c60:	4613      	mov	r3, r2
 8002c62:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c6a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002c6c:	78fb      	ldrb	r3, [r7, #3]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d107      	bne.n	8002c82 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002c72:	883b      	ldrh	r3, [r7, #0]
 8002c74:	0419      	lsls	r1, r3, #16
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	68ba      	ldr	r2, [r7, #8]
 8002c7c:	430a      	orrs	r2, r1
 8002c7e:	629a      	str	r2, [r3, #40]	; 0x28
 8002c80:	e028      	b.n	8002cd4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c88:	0c1b      	lsrs	r3, r3, #16
 8002c8a:	68ba      	ldr	r2, [r7, #8]
 8002c8c:	4413      	add	r3, r2
 8002c8e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002c90:	2300      	movs	r3, #0
 8002c92:	73fb      	strb	r3, [r7, #15]
 8002c94:	e00d      	b.n	8002cb2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	7bfb      	ldrb	r3, [r7, #15]
 8002c9c:	3340      	adds	r3, #64	; 0x40
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	4413      	add	r3, r2
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	0c1b      	lsrs	r3, r3, #16
 8002ca6:	68ba      	ldr	r2, [r7, #8]
 8002ca8:	4413      	add	r3, r2
 8002caa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002cac:	7bfb      	ldrb	r3, [r7, #15]
 8002cae:	3301      	adds	r3, #1
 8002cb0:	73fb      	strb	r3, [r7, #15]
 8002cb2:	7bfa      	ldrb	r2, [r7, #15]
 8002cb4:	78fb      	ldrb	r3, [r7, #3]
 8002cb6:	3b01      	subs	r3, #1
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d3ec      	bcc.n	8002c96 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002cbc:	883b      	ldrh	r3, [r7, #0]
 8002cbe:	0418      	lsls	r0, r3, #16
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6819      	ldr	r1, [r3, #0]
 8002cc4:	78fb      	ldrb	r3, [r7, #3]
 8002cc6:	3b01      	subs	r3, #1
 8002cc8:	68ba      	ldr	r2, [r7, #8]
 8002cca:	4302      	orrs	r2, r0
 8002ccc:	3340      	adds	r3, #64	; 0x40
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	440b      	add	r3, r1
 8002cd2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002cd4:	2300      	movs	r3, #0
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3714      	adds	r7, #20
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr

08002ce2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002ce2:	b480      	push	{r7}
 8002ce4:	b083      	sub	sp, #12
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	6078      	str	r0, [r7, #4]
 8002cea:	460b      	mov	r3, r1
 8002cec:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	887a      	ldrh	r2, [r7, #2]
 8002cf4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002cf6:	2300      	movs	r3, #0
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	370c      	adds	r7, #12
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d02:	4770      	bx	lr

08002d04 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b083      	sub	sp, #12
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
 8002d0c:	460b      	mov	r3, r1
 8002d0e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002d10:	bf00      	nop
 8002d12:	370c      	adds	r7, #12
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr

08002d1c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b086      	sub	sp, #24
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d101      	bne.n	8002d2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e267      	b.n	80031fe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0301 	and.w	r3, r3, #1
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d075      	beq.n	8002e26 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d3a:	4b88      	ldr	r3, [pc, #544]	; (8002f5c <HAL_RCC_OscConfig+0x240>)
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	f003 030c 	and.w	r3, r3, #12
 8002d42:	2b04      	cmp	r3, #4
 8002d44:	d00c      	beq.n	8002d60 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d46:	4b85      	ldr	r3, [pc, #532]	; (8002f5c <HAL_RCC_OscConfig+0x240>)
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d4e:	2b08      	cmp	r3, #8
 8002d50:	d112      	bne.n	8002d78 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d52:	4b82      	ldr	r3, [pc, #520]	; (8002f5c <HAL_RCC_OscConfig+0x240>)
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d5a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d5e:	d10b      	bne.n	8002d78 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d60:	4b7e      	ldr	r3, [pc, #504]	; (8002f5c <HAL_RCC_OscConfig+0x240>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d05b      	beq.n	8002e24 <HAL_RCC_OscConfig+0x108>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d157      	bne.n	8002e24 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e242      	b.n	80031fe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d80:	d106      	bne.n	8002d90 <HAL_RCC_OscConfig+0x74>
 8002d82:	4b76      	ldr	r3, [pc, #472]	; (8002f5c <HAL_RCC_OscConfig+0x240>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a75      	ldr	r2, [pc, #468]	; (8002f5c <HAL_RCC_OscConfig+0x240>)
 8002d88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d8c:	6013      	str	r3, [r2, #0]
 8002d8e:	e01d      	b.n	8002dcc <HAL_RCC_OscConfig+0xb0>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d98:	d10c      	bne.n	8002db4 <HAL_RCC_OscConfig+0x98>
 8002d9a:	4b70      	ldr	r3, [pc, #448]	; (8002f5c <HAL_RCC_OscConfig+0x240>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a6f      	ldr	r2, [pc, #444]	; (8002f5c <HAL_RCC_OscConfig+0x240>)
 8002da0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002da4:	6013      	str	r3, [r2, #0]
 8002da6:	4b6d      	ldr	r3, [pc, #436]	; (8002f5c <HAL_RCC_OscConfig+0x240>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a6c      	ldr	r2, [pc, #432]	; (8002f5c <HAL_RCC_OscConfig+0x240>)
 8002dac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002db0:	6013      	str	r3, [r2, #0]
 8002db2:	e00b      	b.n	8002dcc <HAL_RCC_OscConfig+0xb0>
 8002db4:	4b69      	ldr	r3, [pc, #420]	; (8002f5c <HAL_RCC_OscConfig+0x240>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a68      	ldr	r2, [pc, #416]	; (8002f5c <HAL_RCC_OscConfig+0x240>)
 8002dba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dbe:	6013      	str	r3, [r2, #0]
 8002dc0:	4b66      	ldr	r3, [pc, #408]	; (8002f5c <HAL_RCC_OscConfig+0x240>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a65      	ldr	r2, [pc, #404]	; (8002f5c <HAL_RCC_OscConfig+0x240>)
 8002dc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d013      	beq.n	8002dfc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dd4:	f7fd ff4a 	bl	8000c6c <HAL_GetTick>
 8002dd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dda:	e008      	b.n	8002dee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ddc:	f7fd ff46 	bl	8000c6c <HAL_GetTick>
 8002de0:	4602      	mov	r2, r0
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	2b64      	cmp	r3, #100	; 0x64
 8002de8:	d901      	bls.n	8002dee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002dea:	2303      	movs	r3, #3
 8002dec:	e207      	b.n	80031fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dee:	4b5b      	ldr	r3, [pc, #364]	; (8002f5c <HAL_RCC_OscConfig+0x240>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d0f0      	beq.n	8002ddc <HAL_RCC_OscConfig+0xc0>
 8002dfa:	e014      	b.n	8002e26 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dfc:	f7fd ff36 	bl	8000c6c <HAL_GetTick>
 8002e00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e02:	e008      	b.n	8002e16 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e04:	f7fd ff32 	bl	8000c6c <HAL_GetTick>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	2b64      	cmp	r3, #100	; 0x64
 8002e10:	d901      	bls.n	8002e16 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e12:	2303      	movs	r3, #3
 8002e14:	e1f3      	b.n	80031fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e16:	4b51      	ldr	r3, [pc, #324]	; (8002f5c <HAL_RCC_OscConfig+0x240>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d1f0      	bne.n	8002e04 <HAL_RCC_OscConfig+0xe8>
 8002e22:	e000      	b.n	8002e26 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 0302 	and.w	r3, r3, #2
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d063      	beq.n	8002efa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e32:	4b4a      	ldr	r3, [pc, #296]	; (8002f5c <HAL_RCC_OscConfig+0x240>)
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	f003 030c 	and.w	r3, r3, #12
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d00b      	beq.n	8002e56 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e3e:	4b47      	ldr	r3, [pc, #284]	; (8002f5c <HAL_RCC_OscConfig+0x240>)
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e46:	2b08      	cmp	r3, #8
 8002e48:	d11c      	bne.n	8002e84 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e4a:	4b44      	ldr	r3, [pc, #272]	; (8002f5c <HAL_RCC_OscConfig+0x240>)
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d116      	bne.n	8002e84 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e56:	4b41      	ldr	r3, [pc, #260]	; (8002f5c <HAL_RCC_OscConfig+0x240>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 0302 	and.w	r3, r3, #2
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d005      	beq.n	8002e6e <HAL_RCC_OscConfig+0x152>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	68db      	ldr	r3, [r3, #12]
 8002e66:	2b01      	cmp	r3, #1
 8002e68:	d001      	beq.n	8002e6e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e1c7      	b.n	80031fe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e6e:	4b3b      	ldr	r3, [pc, #236]	; (8002f5c <HAL_RCC_OscConfig+0x240>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	691b      	ldr	r3, [r3, #16]
 8002e7a:	00db      	lsls	r3, r3, #3
 8002e7c:	4937      	ldr	r1, [pc, #220]	; (8002f5c <HAL_RCC_OscConfig+0x240>)
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e82:	e03a      	b.n	8002efa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	68db      	ldr	r3, [r3, #12]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d020      	beq.n	8002ece <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e8c:	4b34      	ldr	r3, [pc, #208]	; (8002f60 <HAL_RCC_OscConfig+0x244>)
 8002e8e:	2201      	movs	r2, #1
 8002e90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e92:	f7fd feeb 	bl	8000c6c <HAL_GetTick>
 8002e96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e98:	e008      	b.n	8002eac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e9a:	f7fd fee7 	bl	8000c6c <HAL_GetTick>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	1ad3      	subs	r3, r2, r3
 8002ea4:	2b02      	cmp	r3, #2
 8002ea6:	d901      	bls.n	8002eac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002ea8:	2303      	movs	r3, #3
 8002eaa:	e1a8      	b.n	80031fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002eac:	4b2b      	ldr	r3, [pc, #172]	; (8002f5c <HAL_RCC_OscConfig+0x240>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 0302 	and.w	r3, r3, #2
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d0f0      	beq.n	8002e9a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eb8:	4b28      	ldr	r3, [pc, #160]	; (8002f5c <HAL_RCC_OscConfig+0x240>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	691b      	ldr	r3, [r3, #16]
 8002ec4:	00db      	lsls	r3, r3, #3
 8002ec6:	4925      	ldr	r1, [pc, #148]	; (8002f5c <HAL_RCC_OscConfig+0x240>)
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	600b      	str	r3, [r1, #0]
 8002ecc:	e015      	b.n	8002efa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ece:	4b24      	ldr	r3, [pc, #144]	; (8002f60 <HAL_RCC_OscConfig+0x244>)
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ed4:	f7fd feca 	bl	8000c6c <HAL_GetTick>
 8002ed8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002eda:	e008      	b.n	8002eee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002edc:	f7fd fec6 	bl	8000c6c <HAL_GetTick>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	2b02      	cmp	r3, #2
 8002ee8:	d901      	bls.n	8002eee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002eea:	2303      	movs	r3, #3
 8002eec:	e187      	b.n	80031fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002eee:	4b1b      	ldr	r3, [pc, #108]	; (8002f5c <HAL_RCC_OscConfig+0x240>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0302 	and.w	r3, r3, #2
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d1f0      	bne.n	8002edc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 0308 	and.w	r3, r3, #8
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d036      	beq.n	8002f74 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	695b      	ldr	r3, [r3, #20]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d016      	beq.n	8002f3c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f0e:	4b15      	ldr	r3, [pc, #84]	; (8002f64 <HAL_RCC_OscConfig+0x248>)
 8002f10:	2201      	movs	r2, #1
 8002f12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f14:	f7fd feaa 	bl	8000c6c <HAL_GetTick>
 8002f18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f1a:	e008      	b.n	8002f2e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f1c:	f7fd fea6 	bl	8000c6c <HAL_GetTick>
 8002f20:	4602      	mov	r2, r0
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	2b02      	cmp	r3, #2
 8002f28:	d901      	bls.n	8002f2e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	e167      	b.n	80031fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f2e:	4b0b      	ldr	r3, [pc, #44]	; (8002f5c <HAL_RCC_OscConfig+0x240>)
 8002f30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f32:	f003 0302 	and.w	r3, r3, #2
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d0f0      	beq.n	8002f1c <HAL_RCC_OscConfig+0x200>
 8002f3a:	e01b      	b.n	8002f74 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f3c:	4b09      	ldr	r3, [pc, #36]	; (8002f64 <HAL_RCC_OscConfig+0x248>)
 8002f3e:	2200      	movs	r2, #0
 8002f40:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f42:	f7fd fe93 	bl	8000c6c <HAL_GetTick>
 8002f46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f48:	e00e      	b.n	8002f68 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f4a:	f7fd fe8f 	bl	8000c6c <HAL_GetTick>
 8002f4e:	4602      	mov	r2, r0
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	1ad3      	subs	r3, r2, r3
 8002f54:	2b02      	cmp	r3, #2
 8002f56:	d907      	bls.n	8002f68 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002f58:	2303      	movs	r3, #3
 8002f5a:	e150      	b.n	80031fe <HAL_RCC_OscConfig+0x4e2>
 8002f5c:	40023800 	.word	0x40023800
 8002f60:	42470000 	.word	0x42470000
 8002f64:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f68:	4b88      	ldr	r3, [pc, #544]	; (800318c <HAL_RCC_OscConfig+0x470>)
 8002f6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f6c:	f003 0302 	and.w	r3, r3, #2
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d1ea      	bne.n	8002f4a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f003 0304 	and.w	r3, r3, #4
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	f000 8097 	beq.w	80030b0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f82:	2300      	movs	r3, #0
 8002f84:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f86:	4b81      	ldr	r3, [pc, #516]	; (800318c <HAL_RCC_OscConfig+0x470>)
 8002f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d10f      	bne.n	8002fb2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f92:	2300      	movs	r3, #0
 8002f94:	60bb      	str	r3, [r7, #8]
 8002f96:	4b7d      	ldr	r3, [pc, #500]	; (800318c <HAL_RCC_OscConfig+0x470>)
 8002f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9a:	4a7c      	ldr	r2, [pc, #496]	; (800318c <HAL_RCC_OscConfig+0x470>)
 8002f9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fa0:	6413      	str	r3, [r2, #64]	; 0x40
 8002fa2:	4b7a      	ldr	r3, [pc, #488]	; (800318c <HAL_RCC_OscConfig+0x470>)
 8002fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002faa:	60bb      	str	r3, [r7, #8]
 8002fac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fb2:	4b77      	ldr	r3, [pc, #476]	; (8003190 <HAL_RCC_OscConfig+0x474>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d118      	bne.n	8002ff0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fbe:	4b74      	ldr	r3, [pc, #464]	; (8003190 <HAL_RCC_OscConfig+0x474>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a73      	ldr	r2, [pc, #460]	; (8003190 <HAL_RCC_OscConfig+0x474>)
 8002fc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fc8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fca:	f7fd fe4f 	bl	8000c6c <HAL_GetTick>
 8002fce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fd0:	e008      	b.n	8002fe4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fd2:	f7fd fe4b 	bl	8000c6c <HAL_GetTick>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	1ad3      	subs	r3, r2, r3
 8002fdc:	2b02      	cmp	r3, #2
 8002fde:	d901      	bls.n	8002fe4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002fe0:	2303      	movs	r3, #3
 8002fe2:	e10c      	b.n	80031fe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fe4:	4b6a      	ldr	r3, [pc, #424]	; (8003190 <HAL_RCC_OscConfig+0x474>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d0f0      	beq.n	8002fd2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d106      	bne.n	8003006 <HAL_RCC_OscConfig+0x2ea>
 8002ff8:	4b64      	ldr	r3, [pc, #400]	; (800318c <HAL_RCC_OscConfig+0x470>)
 8002ffa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ffc:	4a63      	ldr	r2, [pc, #396]	; (800318c <HAL_RCC_OscConfig+0x470>)
 8002ffe:	f043 0301 	orr.w	r3, r3, #1
 8003002:	6713      	str	r3, [r2, #112]	; 0x70
 8003004:	e01c      	b.n	8003040 <HAL_RCC_OscConfig+0x324>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	2b05      	cmp	r3, #5
 800300c:	d10c      	bne.n	8003028 <HAL_RCC_OscConfig+0x30c>
 800300e:	4b5f      	ldr	r3, [pc, #380]	; (800318c <HAL_RCC_OscConfig+0x470>)
 8003010:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003012:	4a5e      	ldr	r2, [pc, #376]	; (800318c <HAL_RCC_OscConfig+0x470>)
 8003014:	f043 0304 	orr.w	r3, r3, #4
 8003018:	6713      	str	r3, [r2, #112]	; 0x70
 800301a:	4b5c      	ldr	r3, [pc, #368]	; (800318c <HAL_RCC_OscConfig+0x470>)
 800301c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800301e:	4a5b      	ldr	r2, [pc, #364]	; (800318c <HAL_RCC_OscConfig+0x470>)
 8003020:	f043 0301 	orr.w	r3, r3, #1
 8003024:	6713      	str	r3, [r2, #112]	; 0x70
 8003026:	e00b      	b.n	8003040 <HAL_RCC_OscConfig+0x324>
 8003028:	4b58      	ldr	r3, [pc, #352]	; (800318c <HAL_RCC_OscConfig+0x470>)
 800302a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800302c:	4a57      	ldr	r2, [pc, #348]	; (800318c <HAL_RCC_OscConfig+0x470>)
 800302e:	f023 0301 	bic.w	r3, r3, #1
 8003032:	6713      	str	r3, [r2, #112]	; 0x70
 8003034:	4b55      	ldr	r3, [pc, #340]	; (800318c <HAL_RCC_OscConfig+0x470>)
 8003036:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003038:	4a54      	ldr	r2, [pc, #336]	; (800318c <HAL_RCC_OscConfig+0x470>)
 800303a:	f023 0304 	bic.w	r3, r3, #4
 800303e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d015      	beq.n	8003074 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003048:	f7fd fe10 	bl	8000c6c <HAL_GetTick>
 800304c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800304e:	e00a      	b.n	8003066 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003050:	f7fd fe0c 	bl	8000c6c <HAL_GetTick>
 8003054:	4602      	mov	r2, r0
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	1ad3      	subs	r3, r2, r3
 800305a:	f241 3288 	movw	r2, #5000	; 0x1388
 800305e:	4293      	cmp	r3, r2
 8003060:	d901      	bls.n	8003066 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003062:	2303      	movs	r3, #3
 8003064:	e0cb      	b.n	80031fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003066:	4b49      	ldr	r3, [pc, #292]	; (800318c <HAL_RCC_OscConfig+0x470>)
 8003068:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800306a:	f003 0302 	and.w	r3, r3, #2
 800306e:	2b00      	cmp	r3, #0
 8003070:	d0ee      	beq.n	8003050 <HAL_RCC_OscConfig+0x334>
 8003072:	e014      	b.n	800309e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003074:	f7fd fdfa 	bl	8000c6c <HAL_GetTick>
 8003078:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800307a:	e00a      	b.n	8003092 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800307c:	f7fd fdf6 	bl	8000c6c <HAL_GetTick>
 8003080:	4602      	mov	r2, r0
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	f241 3288 	movw	r2, #5000	; 0x1388
 800308a:	4293      	cmp	r3, r2
 800308c:	d901      	bls.n	8003092 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800308e:	2303      	movs	r3, #3
 8003090:	e0b5      	b.n	80031fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003092:	4b3e      	ldr	r3, [pc, #248]	; (800318c <HAL_RCC_OscConfig+0x470>)
 8003094:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003096:	f003 0302 	and.w	r3, r3, #2
 800309a:	2b00      	cmp	r3, #0
 800309c:	d1ee      	bne.n	800307c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800309e:	7dfb      	ldrb	r3, [r7, #23]
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	d105      	bne.n	80030b0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030a4:	4b39      	ldr	r3, [pc, #228]	; (800318c <HAL_RCC_OscConfig+0x470>)
 80030a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a8:	4a38      	ldr	r2, [pc, #224]	; (800318c <HAL_RCC_OscConfig+0x470>)
 80030aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030ae:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	699b      	ldr	r3, [r3, #24]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	f000 80a1 	beq.w	80031fc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80030ba:	4b34      	ldr	r3, [pc, #208]	; (800318c <HAL_RCC_OscConfig+0x470>)
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	f003 030c 	and.w	r3, r3, #12
 80030c2:	2b08      	cmp	r3, #8
 80030c4:	d05c      	beq.n	8003180 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	699b      	ldr	r3, [r3, #24]
 80030ca:	2b02      	cmp	r3, #2
 80030cc:	d141      	bne.n	8003152 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030ce:	4b31      	ldr	r3, [pc, #196]	; (8003194 <HAL_RCC_OscConfig+0x478>)
 80030d0:	2200      	movs	r2, #0
 80030d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030d4:	f7fd fdca 	bl	8000c6c <HAL_GetTick>
 80030d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030da:	e008      	b.n	80030ee <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030dc:	f7fd fdc6 	bl	8000c6c <HAL_GetTick>
 80030e0:	4602      	mov	r2, r0
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	1ad3      	subs	r3, r2, r3
 80030e6:	2b02      	cmp	r3, #2
 80030e8:	d901      	bls.n	80030ee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80030ea:	2303      	movs	r3, #3
 80030ec:	e087      	b.n	80031fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030ee:	4b27      	ldr	r3, [pc, #156]	; (800318c <HAL_RCC_OscConfig+0x470>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d1f0      	bne.n	80030dc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	69da      	ldr	r2, [r3, #28]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6a1b      	ldr	r3, [r3, #32]
 8003102:	431a      	orrs	r2, r3
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003108:	019b      	lsls	r3, r3, #6
 800310a:	431a      	orrs	r2, r3
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003110:	085b      	lsrs	r3, r3, #1
 8003112:	3b01      	subs	r3, #1
 8003114:	041b      	lsls	r3, r3, #16
 8003116:	431a      	orrs	r2, r3
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800311c:	061b      	lsls	r3, r3, #24
 800311e:	491b      	ldr	r1, [pc, #108]	; (800318c <HAL_RCC_OscConfig+0x470>)
 8003120:	4313      	orrs	r3, r2
 8003122:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003124:	4b1b      	ldr	r3, [pc, #108]	; (8003194 <HAL_RCC_OscConfig+0x478>)
 8003126:	2201      	movs	r2, #1
 8003128:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800312a:	f7fd fd9f 	bl	8000c6c <HAL_GetTick>
 800312e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003130:	e008      	b.n	8003144 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003132:	f7fd fd9b 	bl	8000c6c <HAL_GetTick>
 8003136:	4602      	mov	r2, r0
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	1ad3      	subs	r3, r2, r3
 800313c:	2b02      	cmp	r3, #2
 800313e:	d901      	bls.n	8003144 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003140:	2303      	movs	r3, #3
 8003142:	e05c      	b.n	80031fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003144:	4b11      	ldr	r3, [pc, #68]	; (800318c <HAL_RCC_OscConfig+0x470>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800314c:	2b00      	cmp	r3, #0
 800314e:	d0f0      	beq.n	8003132 <HAL_RCC_OscConfig+0x416>
 8003150:	e054      	b.n	80031fc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003152:	4b10      	ldr	r3, [pc, #64]	; (8003194 <HAL_RCC_OscConfig+0x478>)
 8003154:	2200      	movs	r2, #0
 8003156:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003158:	f7fd fd88 	bl	8000c6c <HAL_GetTick>
 800315c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800315e:	e008      	b.n	8003172 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003160:	f7fd fd84 	bl	8000c6c <HAL_GetTick>
 8003164:	4602      	mov	r2, r0
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	1ad3      	subs	r3, r2, r3
 800316a:	2b02      	cmp	r3, #2
 800316c:	d901      	bls.n	8003172 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800316e:	2303      	movs	r3, #3
 8003170:	e045      	b.n	80031fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003172:	4b06      	ldr	r3, [pc, #24]	; (800318c <HAL_RCC_OscConfig+0x470>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d1f0      	bne.n	8003160 <HAL_RCC_OscConfig+0x444>
 800317e:	e03d      	b.n	80031fc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	699b      	ldr	r3, [r3, #24]
 8003184:	2b01      	cmp	r3, #1
 8003186:	d107      	bne.n	8003198 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	e038      	b.n	80031fe <HAL_RCC_OscConfig+0x4e2>
 800318c:	40023800 	.word	0x40023800
 8003190:	40007000 	.word	0x40007000
 8003194:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003198:	4b1b      	ldr	r3, [pc, #108]	; (8003208 <HAL_RCC_OscConfig+0x4ec>)
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	699b      	ldr	r3, [r3, #24]
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d028      	beq.n	80031f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d121      	bne.n	80031f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031be:	429a      	cmp	r2, r3
 80031c0:	d11a      	bne.n	80031f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031c2:	68fa      	ldr	r2, [r7, #12]
 80031c4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80031c8:	4013      	ands	r3, r2
 80031ca:	687a      	ldr	r2, [r7, #4]
 80031cc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80031ce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d111      	bne.n	80031f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031de:	085b      	lsrs	r3, r3, #1
 80031e0:	3b01      	subs	r3, #1
 80031e2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d107      	bne.n	80031f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031f2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d001      	beq.n	80031fc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	e000      	b.n	80031fe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80031fc:	2300      	movs	r3, #0
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3718      	adds	r7, #24
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
 8003206:	bf00      	nop
 8003208:	40023800 	.word	0x40023800

0800320c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b084      	sub	sp, #16
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
 8003214:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d101      	bne.n	8003220 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	e0cc      	b.n	80033ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003220:	4b68      	ldr	r3, [pc, #416]	; (80033c4 <HAL_RCC_ClockConfig+0x1b8>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 030f 	and.w	r3, r3, #15
 8003228:	683a      	ldr	r2, [r7, #0]
 800322a:	429a      	cmp	r2, r3
 800322c:	d90c      	bls.n	8003248 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800322e:	4b65      	ldr	r3, [pc, #404]	; (80033c4 <HAL_RCC_ClockConfig+0x1b8>)
 8003230:	683a      	ldr	r2, [r7, #0]
 8003232:	b2d2      	uxtb	r2, r2
 8003234:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003236:	4b63      	ldr	r3, [pc, #396]	; (80033c4 <HAL_RCC_ClockConfig+0x1b8>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 030f 	and.w	r3, r3, #15
 800323e:	683a      	ldr	r2, [r7, #0]
 8003240:	429a      	cmp	r2, r3
 8003242:	d001      	beq.n	8003248 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	e0b8      	b.n	80033ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 0302 	and.w	r3, r3, #2
 8003250:	2b00      	cmp	r3, #0
 8003252:	d020      	beq.n	8003296 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 0304 	and.w	r3, r3, #4
 800325c:	2b00      	cmp	r3, #0
 800325e:	d005      	beq.n	800326c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003260:	4b59      	ldr	r3, [pc, #356]	; (80033c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	4a58      	ldr	r2, [pc, #352]	; (80033c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003266:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800326a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 0308 	and.w	r3, r3, #8
 8003274:	2b00      	cmp	r3, #0
 8003276:	d005      	beq.n	8003284 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003278:	4b53      	ldr	r3, [pc, #332]	; (80033c8 <HAL_RCC_ClockConfig+0x1bc>)
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	4a52      	ldr	r2, [pc, #328]	; (80033c8 <HAL_RCC_ClockConfig+0x1bc>)
 800327e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003282:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003284:	4b50      	ldr	r3, [pc, #320]	; (80033c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	494d      	ldr	r1, [pc, #308]	; (80033c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003292:	4313      	orrs	r3, r2
 8003294:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 0301 	and.w	r3, r3, #1
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d044      	beq.n	800332c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	2b01      	cmp	r3, #1
 80032a8:	d107      	bne.n	80032ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032aa:	4b47      	ldr	r3, [pc, #284]	; (80033c8 <HAL_RCC_ClockConfig+0x1bc>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d119      	bne.n	80032ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e07f      	b.n	80033ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	2b02      	cmp	r3, #2
 80032c0:	d003      	beq.n	80032ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032c6:	2b03      	cmp	r3, #3
 80032c8:	d107      	bne.n	80032da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032ca:	4b3f      	ldr	r3, [pc, #252]	; (80033c8 <HAL_RCC_ClockConfig+0x1bc>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d109      	bne.n	80032ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e06f      	b.n	80033ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032da:	4b3b      	ldr	r3, [pc, #236]	; (80033c8 <HAL_RCC_ClockConfig+0x1bc>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 0302 	and.w	r3, r3, #2
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d101      	bne.n	80032ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	e067      	b.n	80033ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032ea:	4b37      	ldr	r3, [pc, #220]	; (80033c8 <HAL_RCC_ClockConfig+0x1bc>)
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	f023 0203 	bic.w	r2, r3, #3
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	4934      	ldr	r1, [pc, #208]	; (80033c8 <HAL_RCC_ClockConfig+0x1bc>)
 80032f8:	4313      	orrs	r3, r2
 80032fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032fc:	f7fd fcb6 	bl	8000c6c <HAL_GetTick>
 8003300:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003302:	e00a      	b.n	800331a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003304:	f7fd fcb2 	bl	8000c6c <HAL_GetTick>
 8003308:	4602      	mov	r2, r0
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	1ad3      	subs	r3, r2, r3
 800330e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003312:	4293      	cmp	r3, r2
 8003314:	d901      	bls.n	800331a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003316:	2303      	movs	r3, #3
 8003318:	e04f      	b.n	80033ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800331a:	4b2b      	ldr	r3, [pc, #172]	; (80033c8 <HAL_RCC_ClockConfig+0x1bc>)
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	f003 020c 	and.w	r2, r3, #12
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	009b      	lsls	r3, r3, #2
 8003328:	429a      	cmp	r2, r3
 800332a:	d1eb      	bne.n	8003304 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800332c:	4b25      	ldr	r3, [pc, #148]	; (80033c4 <HAL_RCC_ClockConfig+0x1b8>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f003 030f 	and.w	r3, r3, #15
 8003334:	683a      	ldr	r2, [r7, #0]
 8003336:	429a      	cmp	r2, r3
 8003338:	d20c      	bcs.n	8003354 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800333a:	4b22      	ldr	r3, [pc, #136]	; (80033c4 <HAL_RCC_ClockConfig+0x1b8>)
 800333c:	683a      	ldr	r2, [r7, #0]
 800333e:	b2d2      	uxtb	r2, r2
 8003340:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003342:	4b20      	ldr	r3, [pc, #128]	; (80033c4 <HAL_RCC_ClockConfig+0x1b8>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 030f 	and.w	r3, r3, #15
 800334a:	683a      	ldr	r2, [r7, #0]
 800334c:	429a      	cmp	r2, r3
 800334e:	d001      	beq.n	8003354 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	e032      	b.n	80033ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 0304 	and.w	r3, r3, #4
 800335c:	2b00      	cmp	r3, #0
 800335e:	d008      	beq.n	8003372 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003360:	4b19      	ldr	r3, [pc, #100]	; (80033c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	4916      	ldr	r1, [pc, #88]	; (80033c8 <HAL_RCC_ClockConfig+0x1bc>)
 800336e:	4313      	orrs	r3, r2
 8003370:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f003 0308 	and.w	r3, r3, #8
 800337a:	2b00      	cmp	r3, #0
 800337c:	d009      	beq.n	8003392 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800337e:	4b12      	ldr	r3, [pc, #72]	; (80033c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	691b      	ldr	r3, [r3, #16]
 800338a:	00db      	lsls	r3, r3, #3
 800338c:	490e      	ldr	r1, [pc, #56]	; (80033c8 <HAL_RCC_ClockConfig+0x1bc>)
 800338e:	4313      	orrs	r3, r2
 8003390:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003392:	f000 f821 	bl	80033d8 <HAL_RCC_GetSysClockFreq>
 8003396:	4602      	mov	r2, r0
 8003398:	4b0b      	ldr	r3, [pc, #44]	; (80033c8 <HAL_RCC_ClockConfig+0x1bc>)
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	091b      	lsrs	r3, r3, #4
 800339e:	f003 030f 	and.w	r3, r3, #15
 80033a2:	490a      	ldr	r1, [pc, #40]	; (80033cc <HAL_RCC_ClockConfig+0x1c0>)
 80033a4:	5ccb      	ldrb	r3, [r1, r3]
 80033a6:	fa22 f303 	lsr.w	r3, r2, r3
 80033aa:	4a09      	ldr	r2, [pc, #36]	; (80033d0 <HAL_RCC_ClockConfig+0x1c4>)
 80033ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80033ae:	4b09      	ldr	r3, [pc, #36]	; (80033d4 <HAL_RCC_ClockConfig+0x1c8>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4618      	mov	r0, r3
 80033b4:	f7fd fb42 	bl	8000a3c <HAL_InitTick>

  return HAL_OK;
 80033b8:	2300      	movs	r3, #0
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	3710      	adds	r7, #16
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}
 80033c2:	bf00      	nop
 80033c4:	40023c00 	.word	0x40023c00
 80033c8:	40023800 	.word	0x40023800
 80033cc:	0800ab2c 	.word	0x0800ab2c
 80033d0:	20000000 	.word	0x20000000
 80033d4:	20000004 	.word	0x20000004

080033d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033dc:	b090      	sub	sp, #64	; 0x40
 80033de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80033e0:	2300      	movs	r3, #0
 80033e2:	637b      	str	r3, [r7, #52]	; 0x34
 80033e4:	2300      	movs	r3, #0
 80033e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80033e8:	2300      	movs	r3, #0
 80033ea:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80033ec:	2300      	movs	r3, #0
 80033ee:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80033f0:	4b59      	ldr	r3, [pc, #356]	; (8003558 <HAL_RCC_GetSysClockFreq+0x180>)
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	f003 030c 	and.w	r3, r3, #12
 80033f8:	2b08      	cmp	r3, #8
 80033fa:	d00d      	beq.n	8003418 <HAL_RCC_GetSysClockFreq+0x40>
 80033fc:	2b08      	cmp	r3, #8
 80033fe:	f200 80a1 	bhi.w	8003544 <HAL_RCC_GetSysClockFreq+0x16c>
 8003402:	2b00      	cmp	r3, #0
 8003404:	d002      	beq.n	800340c <HAL_RCC_GetSysClockFreq+0x34>
 8003406:	2b04      	cmp	r3, #4
 8003408:	d003      	beq.n	8003412 <HAL_RCC_GetSysClockFreq+0x3a>
 800340a:	e09b      	b.n	8003544 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800340c:	4b53      	ldr	r3, [pc, #332]	; (800355c <HAL_RCC_GetSysClockFreq+0x184>)
 800340e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003410:	e09b      	b.n	800354a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003412:	4b53      	ldr	r3, [pc, #332]	; (8003560 <HAL_RCC_GetSysClockFreq+0x188>)
 8003414:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003416:	e098      	b.n	800354a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003418:	4b4f      	ldr	r3, [pc, #316]	; (8003558 <HAL_RCC_GetSysClockFreq+0x180>)
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003420:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003422:	4b4d      	ldr	r3, [pc, #308]	; (8003558 <HAL_RCC_GetSysClockFreq+0x180>)
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800342a:	2b00      	cmp	r3, #0
 800342c:	d028      	beq.n	8003480 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800342e:	4b4a      	ldr	r3, [pc, #296]	; (8003558 <HAL_RCC_GetSysClockFreq+0x180>)
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	099b      	lsrs	r3, r3, #6
 8003434:	2200      	movs	r2, #0
 8003436:	623b      	str	r3, [r7, #32]
 8003438:	627a      	str	r2, [r7, #36]	; 0x24
 800343a:	6a3b      	ldr	r3, [r7, #32]
 800343c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003440:	2100      	movs	r1, #0
 8003442:	4b47      	ldr	r3, [pc, #284]	; (8003560 <HAL_RCC_GetSysClockFreq+0x188>)
 8003444:	fb03 f201 	mul.w	r2, r3, r1
 8003448:	2300      	movs	r3, #0
 800344a:	fb00 f303 	mul.w	r3, r0, r3
 800344e:	4413      	add	r3, r2
 8003450:	4a43      	ldr	r2, [pc, #268]	; (8003560 <HAL_RCC_GetSysClockFreq+0x188>)
 8003452:	fba0 1202 	umull	r1, r2, r0, r2
 8003456:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003458:	460a      	mov	r2, r1
 800345a:	62ba      	str	r2, [r7, #40]	; 0x28
 800345c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800345e:	4413      	add	r3, r2
 8003460:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003462:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003464:	2200      	movs	r2, #0
 8003466:	61bb      	str	r3, [r7, #24]
 8003468:	61fa      	str	r2, [r7, #28]
 800346a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800346e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003472:	f7fc febd 	bl	80001f0 <__aeabi_uldivmod>
 8003476:	4602      	mov	r2, r0
 8003478:	460b      	mov	r3, r1
 800347a:	4613      	mov	r3, r2
 800347c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800347e:	e053      	b.n	8003528 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003480:	4b35      	ldr	r3, [pc, #212]	; (8003558 <HAL_RCC_GetSysClockFreq+0x180>)
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	099b      	lsrs	r3, r3, #6
 8003486:	2200      	movs	r2, #0
 8003488:	613b      	str	r3, [r7, #16]
 800348a:	617a      	str	r2, [r7, #20]
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003492:	f04f 0b00 	mov.w	fp, #0
 8003496:	4652      	mov	r2, sl
 8003498:	465b      	mov	r3, fp
 800349a:	f04f 0000 	mov.w	r0, #0
 800349e:	f04f 0100 	mov.w	r1, #0
 80034a2:	0159      	lsls	r1, r3, #5
 80034a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034a8:	0150      	lsls	r0, r2, #5
 80034aa:	4602      	mov	r2, r0
 80034ac:	460b      	mov	r3, r1
 80034ae:	ebb2 080a 	subs.w	r8, r2, sl
 80034b2:	eb63 090b 	sbc.w	r9, r3, fp
 80034b6:	f04f 0200 	mov.w	r2, #0
 80034ba:	f04f 0300 	mov.w	r3, #0
 80034be:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80034c2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80034c6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80034ca:	ebb2 0408 	subs.w	r4, r2, r8
 80034ce:	eb63 0509 	sbc.w	r5, r3, r9
 80034d2:	f04f 0200 	mov.w	r2, #0
 80034d6:	f04f 0300 	mov.w	r3, #0
 80034da:	00eb      	lsls	r3, r5, #3
 80034dc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80034e0:	00e2      	lsls	r2, r4, #3
 80034e2:	4614      	mov	r4, r2
 80034e4:	461d      	mov	r5, r3
 80034e6:	eb14 030a 	adds.w	r3, r4, sl
 80034ea:	603b      	str	r3, [r7, #0]
 80034ec:	eb45 030b 	adc.w	r3, r5, fp
 80034f0:	607b      	str	r3, [r7, #4]
 80034f2:	f04f 0200 	mov.w	r2, #0
 80034f6:	f04f 0300 	mov.w	r3, #0
 80034fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80034fe:	4629      	mov	r1, r5
 8003500:	028b      	lsls	r3, r1, #10
 8003502:	4621      	mov	r1, r4
 8003504:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003508:	4621      	mov	r1, r4
 800350a:	028a      	lsls	r2, r1, #10
 800350c:	4610      	mov	r0, r2
 800350e:	4619      	mov	r1, r3
 8003510:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003512:	2200      	movs	r2, #0
 8003514:	60bb      	str	r3, [r7, #8]
 8003516:	60fa      	str	r2, [r7, #12]
 8003518:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800351c:	f7fc fe68 	bl	80001f0 <__aeabi_uldivmod>
 8003520:	4602      	mov	r2, r0
 8003522:	460b      	mov	r3, r1
 8003524:	4613      	mov	r3, r2
 8003526:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003528:	4b0b      	ldr	r3, [pc, #44]	; (8003558 <HAL_RCC_GetSysClockFreq+0x180>)
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	0c1b      	lsrs	r3, r3, #16
 800352e:	f003 0303 	and.w	r3, r3, #3
 8003532:	3301      	adds	r3, #1
 8003534:	005b      	lsls	r3, r3, #1
 8003536:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003538:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800353a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800353c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003540:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003542:	e002      	b.n	800354a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003544:	4b05      	ldr	r3, [pc, #20]	; (800355c <HAL_RCC_GetSysClockFreq+0x184>)
 8003546:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003548:	bf00      	nop
    }
  }
  return sysclockfreq;
 800354a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800354c:	4618      	mov	r0, r3
 800354e:	3740      	adds	r7, #64	; 0x40
 8003550:	46bd      	mov	sp, r7
 8003552:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003556:	bf00      	nop
 8003558:	40023800 	.word	0x40023800
 800355c:	00f42400 	.word	0x00f42400
 8003560:	00b71b00 	.word	0x00b71b00

08003564 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003564:	b480      	push	{r7}
 8003566:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003568:	4b03      	ldr	r3, [pc, #12]	; (8003578 <HAL_RCC_GetHCLKFreq+0x14>)
 800356a:	681b      	ldr	r3, [r3, #0]
}
 800356c:	4618      	mov	r0, r3
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr
 8003576:	bf00      	nop
 8003578:	20000000 	.word	0x20000000

0800357c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003580:	f7ff fff0 	bl	8003564 <HAL_RCC_GetHCLKFreq>
 8003584:	4602      	mov	r2, r0
 8003586:	4b05      	ldr	r3, [pc, #20]	; (800359c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	0a9b      	lsrs	r3, r3, #10
 800358c:	f003 0307 	and.w	r3, r3, #7
 8003590:	4903      	ldr	r1, [pc, #12]	; (80035a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003592:	5ccb      	ldrb	r3, [r1, r3]
 8003594:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003598:	4618      	mov	r0, r3
 800359a:	bd80      	pop	{r7, pc}
 800359c:	40023800 	.word	0x40023800
 80035a0:	0800ab3c 	.word	0x0800ab3c

080035a4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80035a4:	b480      	push	{r7}
 80035a6:	b083      	sub	sp, #12
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
 80035ac:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	220f      	movs	r2, #15
 80035b2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80035b4:	4b12      	ldr	r3, [pc, #72]	; (8003600 <HAL_RCC_GetClockConfig+0x5c>)
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	f003 0203 	and.w	r2, r3, #3
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80035c0:	4b0f      	ldr	r3, [pc, #60]	; (8003600 <HAL_RCC_GetClockConfig+0x5c>)
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80035cc:	4b0c      	ldr	r3, [pc, #48]	; (8003600 <HAL_RCC_GetClockConfig+0x5c>)
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80035d8:	4b09      	ldr	r3, [pc, #36]	; (8003600 <HAL_RCC_GetClockConfig+0x5c>)
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	08db      	lsrs	r3, r3, #3
 80035de:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80035e6:	4b07      	ldr	r3, [pc, #28]	; (8003604 <HAL_RCC_GetClockConfig+0x60>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f003 020f 	and.w	r2, r3, #15
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	601a      	str	r2, [r3, #0]
}
 80035f2:	bf00      	nop
 80035f4:	370c      	adds	r7, #12
 80035f6:	46bd      	mov	sp, r7
 80035f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fc:	4770      	bx	lr
 80035fe:	bf00      	nop
 8003600:	40023800 	.word	0x40023800
 8003604:	40023c00 	.word	0x40023c00

08003608 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b082      	sub	sp, #8
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d101      	bne.n	800361a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	e07b      	b.n	8003712 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800361e:	2b00      	cmp	r3, #0
 8003620:	d108      	bne.n	8003634 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800362a:	d009      	beq.n	8003640 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2200      	movs	r2, #0
 8003630:	61da      	str	r2, [r3, #28]
 8003632:	e005      	b.n	8003640 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2200      	movs	r2, #0
 8003638:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2200      	movs	r2, #0
 800363e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2200      	movs	r2, #0
 8003644:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800364c:	b2db      	uxtb	r3, r3
 800364e:	2b00      	cmp	r3, #0
 8003650:	d106      	bne.n	8003660 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2200      	movs	r2, #0
 8003656:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f7fd f97a 	bl	8000954 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2202      	movs	r2, #2
 8003664:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003676:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003688:	431a      	orrs	r2, r3
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	68db      	ldr	r3, [r3, #12]
 800368e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003692:	431a      	orrs	r2, r3
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	691b      	ldr	r3, [r3, #16]
 8003698:	f003 0302 	and.w	r3, r3, #2
 800369c:	431a      	orrs	r2, r3
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	695b      	ldr	r3, [r3, #20]
 80036a2:	f003 0301 	and.w	r3, r3, #1
 80036a6:	431a      	orrs	r2, r3
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	699b      	ldr	r3, [r3, #24]
 80036ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036b0:	431a      	orrs	r2, r3
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	69db      	ldr	r3, [r3, #28]
 80036b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80036ba:	431a      	orrs	r2, r3
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6a1b      	ldr	r3, [r3, #32]
 80036c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036c4:	ea42 0103 	orr.w	r1, r2, r3
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036cc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	430a      	orrs	r2, r1
 80036d6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	699b      	ldr	r3, [r3, #24]
 80036dc:	0c1b      	lsrs	r3, r3, #16
 80036de:	f003 0104 	and.w	r1, r3, #4
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e6:	f003 0210 	and.w	r2, r3, #16
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	430a      	orrs	r2, r1
 80036f0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	69da      	ldr	r2, [r3, #28]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003700:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2200      	movs	r2, #0
 8003706:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2201      	movs	r2, #1
 800370c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003710:	2300      	movs	r3, #0
}
 8003712:	4618      	mov	r0, r3
 8003714:	3708      	adds	r7, #8
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}

0800371a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800371a:	b580      	push	{r7, lr}
 800371c:	b082      	sub	sp, #8
 800371e:	af00      	add	r7, sp, #0
 8003720:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d101      	bne.n	800372c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	e041      	b.n	80037b0 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003732:	b2db      	uxtb	r3, r3
 8003734:	2b00      	cmp	r3, #0
 8003736:	d106      	bne.n	8003746 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2200      	movs	r2, #0
 800373c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	f000 f839 	bl	80037b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2202      	movs	r2, #2
 800374a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	3304      	adds	r3, #4
 8003756:	4619      	mov	r1, r3
 8003758:	4610      	mov	r0, r2
 800375a:	f000 f9bf 	bl	8003adc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2201      	movs	r2, #1
 8003762:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2201      	movs	r2, #1
 800376a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2201      	movs	r2, #1
 8003772:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2201      	movs	r2, #1
 800377a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2201      	movs	r2, #1
 8003782:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2201      	movs	r2, #1
 800378a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2201      	movs	r2, #1
 8003792:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2201      	movs	r2, #1
 800379a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2201      	movs	r2, #1
 80037a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2201      	movs	r2, #1
 80037aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80037ae:	2300      	movs	r3, #0
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	3708      	adds	r7, #8
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}

080037b8 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b083      	sub	sp, #12
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80037c0:	bf00      	nop
 80037c2:	370c      	adds	r7, #12
 80037c4:	46bd      	mov	sp, r7
 80037c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ca:	4770      	bx	lr

080037cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b085      	sub	sp, #20
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037da:	b2db      	uxtb	r3, r3
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d001      	beq.n	80037e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	e04e      	b.n	8003882 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2202      	movs	r2, #2
 80037e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	68da      	ldr	r2, [r3, #12]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f042 0201 	orr.w	r2, r2, #1
 80037fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a23      	ldr	r2, [pc, #140]	; (8003890 <HAL_TIM_Base_Start_IT+0xc4>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d022      	beq.n	800384c <HAL_TIM_Base_Start_IT+0x80>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800380e:	d01d      	beq.n	800384c <HAL_TIM_Base_Start_IT+0x80>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a1f      	ldr	r2, [pc, #124]	; (8003894 <HAL_TIM_Base_Start_IT+0xc8>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d018      	beq.n	800384c <HAL_TIM_Base_Start_IT+0x80>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a1e      	ldr	r2, [pc, #120]	; (8003898 <HAL_TIM_Base_Start_IT+0xcc>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d013      	beq.n	800384c <HAL_TIM_Base_Start_IT+0x80>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a1c      	ldr	r2, [pc, #112]	; (800389c <HAL_TIM_Base_Start_IT+0xd0>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d00e      	beq.n	800384c <HAL_TIM_Base_Start_IT+0x80>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a1b      	ldr	r2, [pc, #108]	; (80038a0 <HAL_TIM_Base_Start_IT+0xd4>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d009      	beq.n	800384c <HAL_TIM_Base_Start_IT+0x80>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a19      	ldr	r2, [pc, #100]	; (80038a4 <HAL_TIM_Base_Start_IT+0xd8>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d004      	beq.n	800384c <HAL_TIM_Base_Start_IT+0x80>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a18      	ldr	r2, [pc, #96]	; (80038a8 <HAL_TIM_Base_Start_IT+0xdc>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d111      	bne.n	8003870 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	f003 0307 	and.w	r3, r3, #7
 8003856:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2b06      	cmp	r3, #6
 800385c:	d010      	beq.n	8003880 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f042 0201 	orr.w	r2, r2, #1
 800386c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800386e:	e007      	b.n	8003880 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f042 0201 	orr.w	r2, r2, #1
 800387e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003880:	2300      	movs	r3, #0
}
 8003882:	4618      	mov	r0, r3
 8003884:	3714      	adds	r7, #20
 8003886:	46bd      	mov	sp, r7
 8003888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388c:	4770      	bx	lr
 800388e:	bf00      	nop
 8003890:	40010000 	.word	0x40010000
 8003894:	40000400 	.word	0x40000400
 8003898:	40000800 	.word	0x40000800
 800389c:	40000c00 	.word	0x40000c00
 80038a0:	40010400 	.word	0x40010400
 80038a4:	40014000 	.word	0x40014000
 80038a8:	40001800 	.word	0x40001800

080038ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b084      	sub	sp, #16
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	68db      	ldr	r3, [r3, #12]
 80038ba:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	691b      	ldr	r3, [r3, #16]
 80038c2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	f003 0302 	and.w	r3, r3, #2
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d020      	beq.n	8003910 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	f003 0302 	and.w	r3, r3, #2
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d01b      	beq.n	8003910 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f06f 0202 	mvn.w	r2, #2
 80038e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2201      	movs	r2, #1
 80038e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	699b      	ldr	r3, [r3, #24]
 80038ee:	f003 0303 	and.w	r3, r3, #3
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d003      	beq.n	80038fe <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f000 f8d2 	bl	8003aa0 <HAL_TIM_IC_CaptureCallback>
 80038fc:	e005      	b.n	800390a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f000 f8c4 	bl	8003a8c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	f000 f8d5 	bl	8003ab4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2200      	movs	r2, #0
 800390e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	f003 0304 	and.w	r3, r3, #4
 8003916:	2b00      	cmp	r3, #0
 8003918:	d020      	beq.n	800395c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	f003 0304 	and.w	r3, r3, #4
 8003920:	2b00      	cmp	r3, #0
 8003922:	d01b      	beq.n	800395c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f06f 0204 	mvn.w	r2, #4
 800392c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2202      	movs	r2, #2
 8003932:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	699b      	ldr	r3, [r3, #24]
 800393a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800393e:	2b00      	cmp	r3, #0
 8003940:	d003      	beq.n	800394a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f000 f8ac 	bl	8003aa0 <HAL_TIM_IC_CaptureCallback>
 8003948:	e005      	b.n	8003956 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f000 f89e 	bl	8003a8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003950:	6878      	ldr	r0, [r7, #4]
 8003952:	f000 f8af 	bl	8003ab4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2200      	movs	r2, #0
 800395a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	f003 0308 	and.w	r3, r3, #8
 8003962:	2b00      	cmp	r3, #0
 8003964:	d020      	beq.n	80039a8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	f003 0308 	and.w	r3, r3, #8
 800396c:	2b00      	cmp	r3, #0
 800396e:	d01b      	beq.n	80039a8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f06f 0208 	mvn.w	r2, #8
 8003978:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2204      	movs	r2, #4
 800397e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	69db      	ldr	r3, [r3, #28]
 8003986:	f003 0303 	and.w	r3, r3, #3
 800398a:	2b00      	cmp	r3, #0
 800398c:	d003      	beq.n	8003996 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f000 f886 	bl	8003aa0 <HAL_TIM_IC_CaptureCallback>
 8003994:	e005      	b.n	80039a2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f000 f878 	bl	8003a8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800399c:	6878      	ldr	r0, [r7, #4]
 800399e:	f000 f889 	bl	8003ab4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2200      	movs	r2, #0
 80039a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	f003 0310 	and.w	r3, r3, #16
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d020      	beq.n	80039f4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	f003 0310 	and.w	r3, r3, #16
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d01b      	beq.n	80039f4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f06f 0210 	mvn.w	r2, #16
 80039c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2208      	movs	r2, #8
 80039ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	69db      	ldr	r3, [r3, #28]
 80039d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d003      	beq.n	80039e2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f000 f860 	bl	8003aa0 <HAL_TIM_IC_CaptureCallback>
 80039e0:	e005      	b.n	80039ee <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	f000 f852 	bl	8003a8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039e8:	6878      	ldr	r0, [r7, #4]
 80039ea:	f000 f863 	bl	8003ab4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2200      	movs	r2, #0
 80039f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	f003 0301 	and.w	r3, r3, #1
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d00c      	beq.n	8003a18 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	f003 0301 	and.w	r3, r3, #1
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d007      	beq.n	8003a18 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f06f 0201 	mvn.w	r2, #1
 8003a10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f7fc ff46 	bl	80008a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d00c      	beq.n	8003a3c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d007      	beq.n	8003a3c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003a34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f000 f906 	bl	8003c48 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d00c      	beq.n	8003a60 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d007      	beq.n	8003a60 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003a58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f000 f834 	bl	8003ac8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	f003 0320 	and.w	r3, r3, #32
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d00c      	beq.n	8003a84 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	f003 0320 	and.w	r3, r3, #32
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d007      	beq.n	8003a84 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f06f 0220 	mvn.w	r2, #32
 8003a7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f000 f8d8 	bl	8003c34 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a84:	bf00      	nop
 8003a86:	3710      	adds	r7, #16
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}

08003a8c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b083      	sub	sp, #12
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a94:	bf00      	nop
 8003a96:	370c      	adds	r7, #12
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9e:	4770      	bx	lr

08003aa0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b083      	sub	sp, #12
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003aa8:	bf00      	nop
 8003aaa:	370c      	adds	r7, #12
 8003aac:	46bd      	mov	sp, r7
 8003aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab2:	4770      	bx	lr

08003ab4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b083      	sub	sp, #12
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003abc:	bf00      	nop
 8003abe:	370c      	adds	r7, #12
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac6:	4770      	bx	lr

08003ac8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b083      	sub	sp, #12
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003ad0:	bf00      	nop
 8003ad2:	370c      	adds	r7, #12
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ada:	4770      	bx	lr

08003adc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b085      	sub	sp, #20
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
 8003ae4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	4a46      	ldr	r2, [pc, #280]	; (8003c08 <TIM_Base_SetConfig+0x12c>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d013      	beq.n	8003b1c <TIM_Base_SetConfig+0x40>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003afa:	d00f      	beq.n	8003b1c <TIM_Base_SetConfig+0x40>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	4a43      	ldr	r2, [pc, #268]	; (8003c0c <TIM_Base_SetConfig+0x130>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d00b      	beq.n	8003b1c <TIM_Base_SetConfig+0x40>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	4a42      	ldr	r2, [pc, #264]	; (8003c10 <TIM_Base_SetConfig+0x134>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d007      	beq.n	8003b1c <TIM_Base_SetConfig+0x40>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	4a41      	ldr	r2, [pc, #260]	; (8003c14 <TIM_Base_SetConfig+0x138>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d003      	beq.n	8003b1c <TIM_Base_SetConfig+0x40>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	4a40      	ldr	r2, [pc, #256]	; (8003c18 <TIM_Base_SetConfig+0x13c>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d108      	bne.n	8003b2e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	68fa      	ldr	r2, [r7, #12]
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	4a35      	ldr	r2, [pc, #212]	; (8003c08 <TIM_Base_SetConfig+0x12c>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d02b      	beq.n	8003b8e <TIM_Base_SetConfig+0xb2>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b3c:	d027      	beq.n	8003b8e <TIM_Base_SetConfig+0xb2>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	4a32      	ldr	r2, [pc, #200]	; (8003c0c <TIM_Base_SetConfig+0x130>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d023      	beq.n	8003b8e <TIM_Base_SetConfig+0xb2>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	4a31      	ldr	r2, [pc, #196]	; (8003c10 <TIM_Base_SetConfig+0x134>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d01f      	beq.n	8003b8e <TIM_Base_SetConfig+0xb2>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	4a30      	ldr	r2, [pc, #192]	; (8003c14 <TIM_Base_SetConfig+0x138>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d01b      	beq.n	8003b8e <TIM_Base_SetConfig+0xb2>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	4a2f      	ldr	r2, [pc, #188]	; (8003c18 <TIM_Base_SetConfig+0x13c>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d017      	beq.n	8003b8e <TIM_Base_SetConfig+0xb2>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	4a2e      	ldr	r2, [pc, #184]	; (8003c1c <TIM_Base_SetConfig+0x140>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d013      	beq.n	8003b8e <TIM_Base_SetConfig+0xb2>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	4a2d      	ldr	r2, [pc, #180]	; (8003c20 <TIM_Base_SetConfig+0x144>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d00f      	beq.n	8003b8e <TIM_Base_SetConfig+0xb2>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	4a2c      	ldr	r2, [pc, #176]	; (8003c24 <TIM_Base_SetConfig+0x148>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d00b      	beq.n	8003b8e <TIM_Base_SetConfig+0xb2>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	4a2b      	ldr	r2, [pc, #172]	; (8003c28 <TIM_Base_SetConfig+0x14c>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d007      	beq.n	8003b8e <TIM_Base_SetConfig+0xb2>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	4a2a      	ldr	r2, [pc, #168]	; (8003c2c <TIM_Base_SetConfig+0x150>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d003      	beq.n	8003b8e <TIM_Base_SetConfig+0xb2>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	4a29      	ldr	r2, [pc, #164]	; (8003c30 <TIM_Base_SetConfig+0x154>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d108      	bne.n	8003ba0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	68db      	ldr	r3, [r3, #12]
 8003b9a:	68fa      	ldr	r2, [r7, #12]
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	695b      	ldr	r3, [r3, #20]
 8003baa:	4313      	orrs	r3, r2
 8003bac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	68fa      	ldr	r2, [r7, #12]
 8003bb2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	689a      	ldr	r2, [r3, #8]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	4a10      	ldr	r2, [pc, #64]	; (8003c08 <TIM_Base_SetConfig+0x12c>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d003      	beq.n	8003bd4 <TIM_Base_SetConfig+0xf8>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	4a12      	ldr	r2, [pc, #72]	; (8003c18 <TIM_Base_SetConfig+0x13c>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d103      	bne.n	8003bdc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	691a      	ldr	r2, [r3, #16]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2201      	movs	r2, #1
 8003be0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	691b      	ldr	r3, [r3, #16]
 8003be6:	f003 0301 	and.w	r3, r3, #1
 8003bea:	2b01      	cmp	r3, #1
 8003bec:	d105      	bne.n	8003bfa <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	691b      	ldr	r3, [r3, #16]
 8003bf2:	f023 0201 	bic.w	r2, r3, #1
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	611a      	str	r2, [r3, #16]
  }
}
 8003bfa:	bf00      	nop
 8003bfc:	3714      	adds	r7, #20
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c04:	4770      	bx	lr
 8003c06:	bf00      	nop
 8003c08:	40010000 	.word	0x40010000
 8003c0c:	40000400 	.word	0x40000400
 8003c10:	40000800 	.word	0x40000800
 8003c14:	40000c00 	.word	0x40000c00
 8003c18:	40010400 	.word	0x40010400
 8003c1c:	40014000 	.word	0x40014000
 8003c20:	40014400 	.word	0x40014400
 8003c24:	40014800 	.word	0x40014800
 8003c28:	40001800 	.word	0x40001800
 8003c2c:	40001c00 	.word	0x40001c00
 8003c30:	40002000 	.word	0x40002000

08003c34 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b083      	sub	sp, #12
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003c3c:	bf00      	nop
 8003c3e:	370c      	adds	r7, #12
 8003c40:	46bd      	mov	sp, r7
 8003c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c46:	4770      	bx	lr

08003c48 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b083      	sub	sp, #12
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003c50:	bf00      	nop
 8003c52:	370c      	adds	r7, #12
 8003c54:	46bd      	mov	sp, r7
 8003c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5a:	4770      	bx	lr

08003c5c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003c5c:	b084      	sub	sp, #16
 8003c5e:	b580      	push	{r7, lr}
 8003c60:	b084      	sub	sp, #16
 8003c62:	af00      	add	r7, sp, #0
 8003c64:	6078      	str	r0, [r7, #4]
 8003c66:	f107 001c 	add.w	r0, r7, #28
 8003c6a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003c6e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8003c72:	2b01      	cmp	r3, #1
 8003c74:	d123      	bne.n	8003cbe <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c7a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	68db      	ldr	r3, [r3, #12]
 8003c86:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003c8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c8e:	687a      	ldr	r2, [r7, #4]
 8003c90:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	68db      	ldr	r3, [r3, #12]
 8003c96:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003c9e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d105      	bne.n	8003cb2 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	68db      	ldr	r3, [r3, #12]
 8003caa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	f001 fae2 	bl	800527c <USB_CoreReset>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	73fb      	strb	r3, [r7, #15]
 8003cbc:	e01b      	b.n	8003cf6 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	68db      	ldr	r3, [r3, #12]
 8003cc2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	f001 fad6 	bl	800527c <USB_CoreReset>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003cd4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d106      	bne.n	8003cea <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ce0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	639a      	str	r2, [r3, #56]	; 0x38
 8003ce8:	e005      	b.n	8003cf6 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cee:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003cf6:	7fbb      	ldrb	r3, [r7, #30]
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d10b      	bne.n	8003d14 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	f043 0206 	orr.w	r2, r3, #6
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	f043 0220 	orr.w	r2, r3, #32
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003d14:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	3710      	adds	r7, #16
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003d20:	b004      	add	sp, #16
 8003d22:	4770      	bx	lr

08003d24 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b087      	sub	sp, #28
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	60f8      	str	r0, [r7, #12]
 8003d2c:	60b9      	str	r1, [r7, #8]
 8003d2e:	4613      	mov	r3, r2
 8003d30:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003d32:	79fb      	ldrb	r3, [r7, #7]
 8003d34:	2b02      	cmp	r3, #2
 8003d36:	d165      	bne.n	8003e04 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	4a41      	ldr	r2, [pc, #260]	; (8003e40 <USB_SetTurnaroundTime+0x11c>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d906      	bls.n	8003d4e <USB_SetTurnaroundTime+0x2a>
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	4a40      	ldr	r2, [pc, #256]	; (8003e44 <USB_SetTurnaroundTime+0x120>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d202      	bcs.n	8003d4e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003d48:	230f      	movs	r3, #15
 8003d4a:	617b      	str	r3, [r7, #20]
 8003d4c:	e062      	b.n	8003e14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	4a3c      	ldr	r2, [pc, #240]	; (8003e44 <USB_SetTurnaroundTime+0x120>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d306      	bcc.n	8003d64 <USB_SetTurnaroundTime+0x40>
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	4a3b      	ldr	r2, [pc, #236]	; (8003e48 <USB_SetTurnaroundTime+0x124>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d202      	bcs.n	8003d64 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003d5e:	230e      	movs	r3, #14
 8003d60:	617b      	str	r3, [r7, #20]
 8003d62:	e057      	b.n	8003e14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	4a38      	ldr	r2, [pc, #224]	; (8003e48 <USB_SetTurnaroundTime+0x124>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d306      	bcc.n	8003d7a <USB_SetTurnaroundTime+0x56>
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	4a37      	ldr	r2, [pc, #220]	; (8003e4c <USB_SetTurnaroundTime+0x128>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d202      	bcs.n	8003d7a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003d74:	230d      	movs	r3, #13
 8003d76:	617b      	str	r3, [r7, #20]
 8003d78:	e04c      	b.n	8003e14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	4a33      	ldr	r2, [pc, #204]	; (8003e4c <USB_SetTurnaroundTime+0x128>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d306      	bcc.n	8003d90 <USB_SetTurnaroundTime+0x6c>
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	4a32      	ldr	r2, [pc, #200]	; (8003e50 <USB_SetTurnaroundTime+0x12c>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d802      	bhi.n	8003d90 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003d8a:	230c      	movs	r3, #12
 8003d8c:	617b      	str	r3, [r7, #20]
 8003d8e:	e041      	b.n	8003e14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	4a2f      	ldr	r2, [pc, #188]	; (8003e50 <USB_SetTurnaroundTime+0x12c>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d906      	bls.n	8003da6 <USB_SetTurnaroundTime+0x82>
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	4a2e      	ldr	r2, [pc, #184]	; (8003e54 <USB_SetTurnaroundTime+0x130>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d802      	bhi.n	8003da6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003da0:	230b      	movs	r3, #11
 8003da2:	617b      	str	r3, [r7, #20]
 8003da4:	e036      	b.n	8003e14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	4a2a      	ldr	r2, [pc, #168]	; (8003e54 <USB_SetTurnaroundTime+0x130>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d906      	bls.n	8003dbc <USB_SetTurnaroundTime+0x98>
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	4a29      	ldr	r2, [pc, #164]	; (8003e58 <USB_SetTurnaroundTime+0x134>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d802      	bhi.n	8003dbc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003db6:	230a      	movs	r3, #10
 8003db8:	617b      	str	r3, [r7, #20]
 8003dba:	e02b      	b.n	8003e14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	4a26      	ldr	r2, [pc, #152]	; (8003e58 <USB_SetTurnaroundTime+0x134>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d906      	bls.n	8003dd2 <USB_SetTurnaroundTime+0xae>
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	4a25      	ldr	r2, [pc, #148]	; (8003e5c <USB_SetTurnaroundTime+0x138>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d202      	bcs.n	8003dd2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003dcc:	2309      	movs	r3, #9
 8003dce:	617b      	str	r3, [r7, #20]
 8003dd0:	e020      	b.n	8003e14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	4a21      	ldr	r2, [pc, #132]	; (8003e5c <USB_SetTurnaroundTime+0x138>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d306      	bcc.n	8003de8 <USB_SetTurnaroundTime+0xc4>
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	4a20      	ldr	r2, [pc, #128]	; (8003e60 <USB_SetTurnaroundTime+0x13c>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d802      	bhi.n	8003de8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003de2:	2308      	movs	r3, #8
 8003de4:	617b      	str	r3, [r7, #20]
 8003de6:	e015      	b.n	8003e14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	4a1d      	ldr	r2, [pc, #116]	; (8003e60 <USB_SetTurnaroundTime+0x13c>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d906      	bls.n	8003dfe <USB_SetTurnaroundTime+0xda>
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	4a1c      	ldr	r2, [pc, #112]	; (8003e64 <USB_SetTurnaroundTime+0x140>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d202      	bcs.n	8003dfe <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003df8:	2307      	movs	r3, #7
 8003dfa:	617b      	str	r3, [r7, #20]
 8003dfc:	e00a      	b.n	8003e14 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003dfe:	2306      	movs	r3, #6
 8003e00:	617b      	str	r3, [r7, #20]
 8003e02:	e007      	b.n	8003e14 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003e04:	79fb      	ldrb	r3, [r7, #7]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d102      	bne.n	8003e10 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003e0a:	2309      	movs	r3, #9
 8003e0c:	617b      	str	r3, [r7, #20]
 8003e0e:	e001      	b.n	8003e14 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003e10:	2309      	movs	r3, #9
 8003e12:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	68db      	ldr	r3, [r3, #12]
 8003e18:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	68da      	ldr	r2, [r3, #12]
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	029b      	lsls	r3, r3, #10
 8003e28:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003e2c:	431a      	orrs	r2, r3
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003e32:	2300      	movs	r3, #0
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	371c      	adds	r7, #28
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3e:	4770      	bx	lr
 8003e40:	00d8acbf 	.word	0x00d8acbf
 8003e44:	00e4e1c0 	.word	0x00e4e1c0
 8003e48:	00f42400 	.word	0x00f42400
 8003e4c:	01067380 	.word	0x01067380
 8003e50:	011a499f 	.word	0x011a499f
 8003e54:	01312cff 	.word	0x01312cff
 8003e58:	014ca43f 	.word	0x014ca43f
 8003e5c:	016e3600 	.word	0x016e3600
 8003e60:	01a6ab1f 	.word	0x01a6ab1f
 8003e64:	01e84800 	.word	0x01e84800

08003e68 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b083      	sub	sp, #12
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	689b      	ldr	r3, [r3, #8]
 8003e74:	f043 0201 	orr.w	r2, r3, #1
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003e7c:	2300      	movs	r3, #0
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	370c      	adds	r7, #12
 8003e82:	46bd      	mov	sp, r7
 8003e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e88:	4770      	bx	lr

08003e8a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003e8a:	b480      	push	{r7}
 8003e8c:	b083      	sub	sp, #12
 8003e8e:	af00      	add	r7, sp, #0
 8003e90:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	f023 0201 	bic.w	r2, r3, #1
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003e9e:	2300      	movs	r3, #0
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	370c      	adds	r7, #12
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eaa:	4770      	bx	lr

08003eac <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b084      	sub	sp, #16
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
 8003eb4:	460b      	mov	r3, r1
 8003eb6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	68db      	ldr	r3, [r3, #12]
 8003ec0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003ec8:	78fb      	ldrb	r3, [r7, #3]
 8003eca:	2b01      	cmp	r3, #1
 8003ecc:	d115      	bne.n	8003efa <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	68db      	ldr	r3, [r3, #12]
 8003ed2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003eda:	200a      	movs	r0, #10
 8003edc:	f7fc fed2 	bl	8000c84 <HAL_Delay>
      ms += 10U;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	330a      	adds	r3, #10
 8003ee4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	f001 f939 	bl	800515e <USB_GetMode>
 8003eec:	4603      	mov	r3, r0
 8003eee:	2b01      	cmp	r3, #1
 8003ef0:	d01e      	beq.n	8003f30 <USB_SetCurrentMode+0x84>
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2bc7      	cmp	r3, #199	; 0xc7
 8003ef6:	d9f0      	bls.n	8003eda <USB_SetCurrentMode+0x2e>
 8003ef8:	e01a      	b.n	8003f30 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003efa:	78fb      	ldrb	r3, [r7, #3]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d115      	bne.n	8003f2c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	68db      	ldr	r3, [r3, #12]
 8003f04:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003f0c:	200a      	movs	r0, #10
 8003f0e:	f7fc feb9 	bl	8000c84 <HAL_Delay>
      ms += 10U;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	330a      	adds	r3, #10
 8003f16:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003f18:	6878      	ldr	r0, [r7, #4]
 8003f1a:	f001 f920 	bl	800515e <USB_GetMode>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d005      	beq.n	8003f30 <USB_SetCurrentMode+0x84>
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2bc7      	cmp	r3, #199	; 0xc7
 8003f28:	d9f0      	bls.n	8003f0c <USB_SetCurrentMode+0x60>
 8003f2a:	e001      	b.n	8003f30 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	e005      	b.n	8003f3c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2bc8      	cmp	r3, #200	; 0xc8
 8003f34:	d101      	bne.n	8003f3a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e000      	b.n	8003f3c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003f3a:	2300      	movs	r3, #0
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	3710      	adds	r7, #16
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd80      	pop	{r7, pc}

08003f44 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003f44:	b084      	sub	sp, #16
 8003f46:	b580      	push	{r7, lr}
 8003f48:	b086      	sub	sp, #24
 8003f4a:	af00      	add	r7, sp, #0
 8003f4c:	6078      	str	r0, [r7, #4]
 8003f4e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003f52:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003f56:	2300      	movs	r3, #0
 8003f58:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003f5e:	2300      	movs	r3, #0
 8003f60:	613b      	str	r3, [r7, #16]
 8003f62:	e009      	b.n	8003f78 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003f64:	687a      	ldr	r2, [r7, #4]
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	3340      	adds	r3, #64	; 0x40
 8003f6a:	009b      	lsls	r3, r3, #2
 8003f6c:	4413      	add	r3, r2
 8003f6e:	2200      	movs	r2, #0
 8003f70:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	3301      	adds	r3, #1
 8003f76:	613b      	str	r3, [r7, #16]
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	2b0e      	cmp	r3, #14
 8003f7c:	d9f2      	bls.n	8003f64 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003f7e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d11c      	bne.n	8003fc0 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	68fa      	ldr	r2, [r7, #12]
 8003f90:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f94:	f043 0302 	orr.w	r3, r3, #2
 8003f98:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f9e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003faa:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fb6:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	639a      	str	r2, [r3, #56]	; 0x38
 8003fbe:	e00b      	b.n	8003fd8 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fc4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fd0:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003fde:	461a      	mov	r2, r3
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003fe4:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	d10d      	bne.n	8004008 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003fec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d104      	bne.n	8003ffe <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003ff4:	2100      	movs	r1, #0
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f000 f968 	bl	80042cc <USB_SetDevSpeed>
 8003ffc:	e008      	b.n	8004010 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003ffe:	2101      	movs	r1, #1
 8004000:	6878      	ldr	r0, [r7, #4]
 8004002:	f000 f963 	bl	80042cc <USB_SetDevSpeed>
 8004006:	e003      	b.n	8004010 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004008:	2103      	movs	r1, #3
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f000 f95e 	bl	80042cc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004010:	2110      	movs	r1, #16
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f000 f8fa 	bl	800420c <USB_FlushTxFifo>
 8004018:	4603      	mov	r3, r0
 800401a:	2b00      	cmp	r3, #0
 800401c:	d001      	beq.n	8004022 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f000 f924 	bl	8004270 <USB_FlushRxFifo>
 8004028:	4603      	mov	r3, r0
 800402a:	2b00      	cmp	r3, #0
 800402c:	d001      	beq.n	8004032 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004038:	461a      	mov	r2, r3
 800403a:	2300      	movs	r3, #0
 800403c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004044:	461a      	mov	r2, r3
 8004046:	2300      	movs	r3, #0
 8004048:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004050:	461a      	mov	r2, r3
 8004052:	2300      	movs	r3, #0
 8004054:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004056:	2300      	movs	r3, #0
 8004058:	613b      	str	r3, [r7, #16]
 800405a:	e043      	b.n	80040e4 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	015a      	lsls	r2, r3, #5
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	4413      	add	r3, r2
 8004064:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800406e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004072:	d118      	bne.n	80040a6 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d10a      	bne.n	8004090 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	015a      	lsls	r2, r3, #5
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	4413      	add	r3, r2
 8004082:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004086:	461a      	mov	r2, r3
 8004088:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800408c:	6013      	str	r3, [r2, #0]
 800408e:	e013      	b.n	80040b8 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	015a      	lsls	r2, r3, #5
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	4413      	add	r3, r2
 8004098:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800409c:	461a      	mov	r2, r3
 800409e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80040a2:	6013      	str	r3, [r2, #0]
 80040a4:	e008      	b.n	80040b8 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	015a      	lsls	r2, r3, #5
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	4413      	add	r3, r2
 80040ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040b2:	461a      	mov	r2, r3
 80040b4:	2300      	movs	r3, #0
 80040b6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	015a      	lsls	r2, r3, #5
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	4413      	add	r3, r2
 80040c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040c4:	461a      	mov	r2, r3
 80040c6:	2300      	movs	r3, #0
 80040c8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	015a      	lsls	r2, r3, #5
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	4413      	add	r3, r2
 80040d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040d6:	461a      	mov	r2, r3
 80040d8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80040dc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	3301      	adds	r3, #1
 80040e2:	613b      	str	r3, [r7, #16]
 80040e4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80040e8:	461a      	mov	r2, r3
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d3b5      	bcc.n	800405c <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80040f0:	2300      	movs	r3, #0
 80040f2:	613b      	str	r3, [r7, #16]
 80040f4:	e043      	b.n	800417e <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	015a      	lsls	r2, r3, #5
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	4413      	add	r3, r2
 80040fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004108:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800410c:	d118      	bne.n	8004140 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d10a      	bne.n	800412a <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	015a      	lsls	r2, r3, #5
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	4413      	add	r3, r2
 800411c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004120:	461a      	mov	r2, r3
 8004122:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004126:	6013      	str	r3, [r2, #0]
 8004128:	e013      	b.n	8004152 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	015a      	lsls	r2, r3, #5
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	4413      	add	r3, r2
 8004132:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004136:	461a      	mov	r2, r3
 8004138:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800413c:	6013      	str	r3, [r2, #0]
 800413e:	e008      	b.n	8004152 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	015a      	lsls	r2, r3, #5
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	4413      	add	r3, r2
 8004148:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800414c:	461a      	mov	r2, r3
 800414e:	2300      	movs	r3, #0
 8004150:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	015a      	lsls	r2, r3, #5
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	4413      	add	r3, r2
 800415a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800415e:	461a      	mov	r2, r3
 8004160:	2300      	movs	r3, #0
 8004162:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	015a      	lsls	r2, r3, #5
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	4413      	add	r3, r2
 800416c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004170:	461a      	mov	r2, r3
 8004172:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004176:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	3301      	adds	r3, #1
 800417c:	613b      	str	r3, [r7, #16]
 800417e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004182:	461a      	mov	r2, r3
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	4293      	cmp	r3, r2
 8004188:	d3b5      	bcc.n	80040f6 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004190:	691b      	ldr	r3, [r3, #16]
 8004192:	68fa      	ldr	r2, [r7, #12]
 8004194:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004198:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800419c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2200      	movs	r2, #0
 80041a2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80041aa:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80041ac:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d105      	bne.n	80041c0 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	699b      	ldr	r3, [r3, #24]
 80041b8:	f043 0210 	orr.w	r2, r3, #16
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	699a      	ldr	r2, [r3, #24]
 80041c4:	4b10      	ldr	r3, [pc, #64]	; (8004208 <USB_DevInit+0x2c4>)
 80041c6:	4313      	orrs	r3, r2
 80041c8:	687a      	ldr	r2, [r7, #4]
 80041ca:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80041cc:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d005      	beq.n	80041e0 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	699b      	ldr	r3, [r3, #24]
 80041d8:	f043 0208 	orr.w	r2, r3, #8
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80041e0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80041e4:	2b01      	cmp	r3, #1
 80041e6:	d107      	bne.n	80041f8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	699b      	ldr	r3, [r3, #24]
 80041ec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80041f0:	f043 0304 	orr.w	r3, r3, #4
 80041f4:	687a      	ldr	r2, [r7, #4]
 80041f6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80041f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	3718      	adds	r7, #24
 80041fe:	46bd      	mov	sp, r7
 8004200:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004204:	b004      	add	sp, #16
 8004206:	4770      	bx	lr
 8004208:	803c3800 	.word	0x803c3800

0800420c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800420c:	b480      	push	{r7}
 800420e:	b085      	sub	sp, #20
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
 8004214:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004216:	2300      	movs	r3, #0
 8004218:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	3301      	adds	r3, #1
 800421e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004226:	d901      	bls.n	800422c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004228:	2303      	movs	r3, #3
 800422a:	e01b      	b.n	8004264 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	691b      	ldr	r3, [r3, #16]
 8004230:	2b00      	cmp	r3, #0
 8004232:	daf2      	bge.n	800421a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004234:	2300      	movs	r3, #0
 8004236:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	019b      	lsls	r3, r3, #6
 800423c:	f043 0220 	orr.w	r2, r3, #32
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	3301      	adds	r3, #1
 8004248:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004250:	d901      	bls.n	8004256 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004252:	2303      	movs	r3, #3
 8004254:	e006      	b.n	8004264 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	691b      	ldr	r3, [r3, #16]
 800425a:	f003 0320 	and.w	r3, r3, #32
 800425e:	2b20      	cmp	r3, #32
 8004260:	d0f0      	beq.n	8004244 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004262:	2300      	movs	r3, #0
}
 8004264:	4618      	mov	r0, r3
 8004266:	3714      	adds	r7, #20
 8004268:	46bd      	mov	sp, r7
 800426a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426e:	4770      	bx	lr

08004270 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004270:	b480      	push	{r7}
 8004272:	b085      	sub	sp, #20
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004278:	2300      	movs	r3, #0
 800427a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	3301      	adds	r3, #1
 8004280:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004288:	d901      	bls.n	800428e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800428a:	2303      	movs	r3, #3
 800428c:	e018      	b.n	80042c0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	691b      	ldr	r3, [r3, #16]
 8004292:	2b00      	cmp	r3, #0
 8004294:	daf2      	bge.n	800427c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004296:	2300      	movs	r3, #0
 8004298:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2210      	movs	r2, #16
 800429e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	3301      	adds	r3, #1
 80042a4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80042ac:	d901      	bls.n	80042b2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80042ae:	2303      	movs	r3, #3
 80042b0:	e006      	b.n	80042c0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	691b      	ldr	r3, [r3, #16]
 80042b6:	f003 0310 	and.w	r3, r3, #16
 80042ba:	2b10      	cmp	r3, #16
 80042bc:	d0f0      	beq.n	80042a0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80042be:	2300      	movs	r3, #0
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	3714      	adds	r7, #20
 80042c4:	46bd      	mov	sp, r7
 80042c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ca:	4770      	bx	lr

080042cc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b085      	sub	sp, #20
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
 80042d4:	460b      	mov	r3, r1
 80042d6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042e2:	681a      	ldr	r2, [r3, #0]
 80042e4:	78fb      	ldrb	r3, [r7, #3]
 80042e6:	68f9      	ldr	r1, [r7, #12]
 80042e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80042ec:	4313      	orrs	r3, r2
 80042ee:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80042f0:	2300      	movs	r3, #0
}
 80042f2:	4618      	mov	r0, r3
 80042f4:	3714      	adds	r7, #20
 80042f6:	46bd      	mov	sp, r7
 80042f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fc:	4770      	bx	lr

080042fe <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80042fe:	b480      	push	{r7}
 8004300:	b087      	sub	sp, #28
 8004302:	af00      	add	r7, sp, #0
 8004304:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004310:	689b      	ldr	r3, [r3, #8]
 8004312:	f003 0306 	and.w	r3, r3, #6
 8004316:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d102      	bne.n	8004324 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800431e:	2300      	movs	r3, #0
 8004320:	75fb      	strb	r3, [r7, #23]
 8004322:	e00a      	b.n	800433a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2b02      	cmp	r3, #2
 8004328:	d002      	beq.n	8004330 <USB_GetDevSpeed+0x32>
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	2b06      	cmp	r3, #6
 800432e:	d102      	bne.n	8004336 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004330:	2302      	movs	r3, #2
 8004332:	75fb      	strb	r3, [r7, #23]
 8004334:	e001      	b.n	800433a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004336:	230f      	movs	r3, #15
 8004338:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800433a:	7dfb      	ldrb	r3, [r7, #23]
}
 800433c:	4618      	mov	r0, r3
 800433e:	371c      	adds	r7, #28
 8004340:	46bd      	mov	sp, r7
 8004342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004346:	4770      	bx	lr

08004348 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004348:	b480      	push	{r7}
 800434a:	b085      	sub	sp, #20
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
 8004350:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	781b      	ldrb	r3, [r3, #0]
 800435a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	785b      	ldrb	r3, [r3, #1]
 8004360:	2b01      	cmp	r3, #1
 8004362:	d13a      	bne.n	80043da <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800436a:	69da      	ldr	r2, [r3, #28]
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	781b      	ldrb	r3, [r3, #0]
 8004370:	f003 030f 	and.w	r3, r3, #15
 8004374:	2101      	movs	r1, #1
 8004376:	fa01 f303 	lsl.w	r3, r1, r3
 800437a:	b29b      	uxth	r3, r3
 800437c:	68f9      	ldr	r1, [r7, #12]
 800437e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004382:	4313      	orrs	r3, r2
 8004384:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	015a      	lsls	r2, r3, #5
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	4413      	add	r3, r2
 800438e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004398:	2b00      	cmp	r3, #0
 800439a:	d155      	bne.n	8004448 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	015a      	lsls	r2, r3, #5
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	4413      	add	r3, r2
 80043a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043a8:	681a      	ldr	r2, [r3, #0]
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	791b      	ldrb	r3, [r3, #4]
 80043b6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80043b8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	059b      	lsls	r3, r3, #22
 80043be:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80043c0:	4313      	orrs	r3, r2
 80043c2:	68ba      	ldr	r2, [r7, #8]
 80043c4:	0151      	lsls	r1, r2, #5
 80043c6:	68fa      	ldr	r2, [r7, #12]
 80043c8:	440a      	add	r2, r1
 80043ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043d6:	6013      	str	r3, [r2, #0]
 80043d8:	e036      	b.n	8004448 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043e0:	69da      	ldr	r2, [r3, #28]
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	781b      	ldrb	r3, [r3, #0]
 80043e6:	f003 030f 	and.w	r3, r3, #15
 80043ea:	2101      	movs	r1, #1
 80043ec:	fa01 f303 	lsl.w	r3, r1, r3
 80043f0:	041b      	lsls	r3, r3, #16
 80043f2:	68f9      	ldr	r1, [r7, #12]
 80043f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80043f8:	4313      	orrs	r3, r2
 80043fa:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	015a      	lsls	r2, r3, #5
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	4413      	add	r3, r2
 8004404:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800440e:	2b00      	cmp	r3, #0
 8004410:	d11a      	bne.n	8004448 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	015a      	lsls	r2, r3, #5
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	4413      	add	r3, r2
 800441a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800441e:	681a      	ldr	r2, [r3, #0]
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	689b      	ldr	r3, [r3, #8]
 8004424:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	791b      	ldrb	r3, [r3, #4]
 800442c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800442e:	430b      	orrs	r3, r1
 8004430:	4313      	orrs	r3, r2
 8004432:	68ba      	ldr	r2, [r7, #8]
 8004434:	0151      	lsls	r1, r2, #5
 8004436:	68fa      	ldr	r2, [r7, #12]
 8004438:	440a      	add	r2, r1
 800443a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800443e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004442:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004446:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004448:	2300      	movs	r3, #0
}
 800444a:	4618      	mov	r0, r3
 800444c:	3714      	adds	r7, #20
 800444e:	46bd      	mov	sp, r7
 8004450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004454:	4770      	bx	lr
	...

08004458 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004458:	b480      	push	{r7}
 800445a:	b085      	sub	sp, #20
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
 8004460:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	781b      	ldrb	r3, [r3, #0]
 800446a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	785b      	ldrb	r3, [r3, #1]
 8004470:	2b01      	cmp	r3, #1
 8004472:	d161      	bne.n	8004538 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	015a      	lsls	r2, r3, #5
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	4413      	add	r3, r2
 800447c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004486:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800448a:	d11f      	bne.n	80044cc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	015a      	lsls	r2, r3, #5
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	4413      	add	r3, r2
 8004494:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	68ba      	ldr	r2, [r7, #8]
 800449c:	0151      	lsls	r1, r2, #5
 800449e:	68fa      	ldr	r2, [r7, #12]
 80044a0:	440a      	add	r2, r1
 80044a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044a6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80044aa:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	015a      	lsls	r2, r3, #5
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	4413      	add	r3, r2
 80044b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	68ba      	ldr	r2, [r7, #8]
 80044bc:	0151      	lsls	r1, r2, #5
 80044be:	68fa      	ldr	r2, [r7, #12]
 80044c0:	440a      	add	r2, r1
 80044c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044c6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80044ca:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	781b      	ldrb	r3, [r3, #0]
 80044d8:	f003 030f 	and.w	r3, r3, #15
 80044dc:	2101      	movs	r1, #1
 80044de:	fa01 f303 	lsl.w	r3, r1, r3
 80044e2:	b29b      	uxth	r3, r3
 80044e4:	43db      	mvns	r3, r3
 80044e6:	68f9      	ldr	r1, [r7, #12]
 80044e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80044ec:	4013      	ands	r3, r2
 80044ee:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044f6:	69da      	ldr	r2, [r3, #28]
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	781b      	ldrb	r3, [r3, #0]
 80044fc:	f003 030f 	and.w	r3, r3, #15
 8004500:	2101      	movs	r1, #1
 8004502:	fa01 f303 	lsl.w	r3, r1, r3
 8004506:	b29b      	uxth	r3, r3
 8004508:	43db      	mvns	r3, r3
 800450a:	68f9      	ldr	r1, [r7, #12]
 800450c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004510:	4013      	ands	r3, r2
 8004512:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	015a      	lsls	r2, r3, #5
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	4413      	add	r3, r2
 800451c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004520:	681a      	ldr	r2, [r3, #0]
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	0159      	lsls	r1, r3, #5
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	440b      	add	r3, r1
 800452a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800452e:	4619      	mov	r1, r3
 8004530:	4b35      	ldr	r3, [pc, #212]	; (8004608 <USB_DeactivateEndpoint+0x1b0>)
 8004532:	4013      	ands	r3, r2
 8004534:	600b      	str	r3, [r1, #0]
 8004536:	e060      	b.n	80045fa <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	015a      	lsls	r2, r3, #5
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	4413      	add	r3, r2
 8004540:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800454a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800454e:	d11f      	bne.n	8004590 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	015a      	lsls	r2, r3, #5
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	4413      	add	r3, r2
 8004558:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	68ba      	ldr	r2, [r7, #8]
 8004560:	0151      	lsls	r1, r2, #5
 8004562:	68fa      	ldr	r2, [r7, #12]
 8004564:	440a      	add	r2, r1
 8004566:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800456a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800456e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	015a      	lsls	r2, r3, #5
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	4413      	add	r3, r2
 8004578:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	68ba      	ldr	r2, [r7, #8]
 8004580:	0151      	lsls	r1, r2, #5
 8004582:	68fa      	ldr	r2, [r7, #12]
 8004584:	440a      	add	r2, r1
 8004586:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800458a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800458e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004596:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	781b      	ldrb	r3, [r3, #0]
 800459c:	f003 030f 	and.w	r3, r3, #15
 80045a0:	2101      	movs	r1, #1
 80045a2:	fa01 f303 	lsl.w	r3, r1, r3
 80045a6:	041b      	lsls	r3, r3, #16
 80045a8:	43db      	mvns	r3, r3
 80045aa:	68f9      	ldr	r1, [r7, #12]
 80045ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80045b0:	4013      	ands	r3, r2
 80045b2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045ba:	69da      	ldr	r2, [r3, #28]
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	781b      	ldrb	r3, [r3, #0]
 80045c0:	f003 030f 	and.w	r3, r3, #15
 80045c4:	2101      	movs	r1, #1
 80045c6:	fa01 f303 	lsl.w	r3, r1, r3
 80045ca:	041b      	lsls	r3, r3, #16
 80045cc:	43db      	mvns	r3, r3
 80045ce:	68f9      	ldr	r1, [r7, #12]
 80045d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80045d4:	4013      	ands	r3, r2
 80045d6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	015a      	lsls	r2, r3, #5
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	4413      	add	r3, r2
 80045e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045e4:	681a      	ldr	r2, [r3, #0]
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	0159      	lsls	r1, r3, #5
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	440b      	add	r3, r1
 80045ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045f2:	4619      	mov	r1, r3
 80045f4:	4b05      	ldr	r3, [pc, #20]	; (800460c <USB_DeactivateEndpoint+0x1b4>)
 80045f6:	4013      	ands	r3, r2
 80045f8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80045fa:	2300      	movs	r3, #0
}
 80045fc:	4618      	mov	r0, r3
 80045fe:	3714      	adds	r7, #20
 8004600:	46bd      	mov	sp, r7
 8004602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004606:	4770      	bx	lr
 8004608:	ec337800 	.word	0xec337800
 800460c:	eff37800 	.word	0xeff37800

08004610 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b08a      	sub	sp, #40	; 0x28
 8004614:	af02      	add	r7, sp, #8
 8004616:	60f8      	str	r0, [r7, #12]
 8004618:	60b9      	str	r1, [r7, #8]
 800461a:	4613      	mov	r3, r2
 800461c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	781b      	ldrb	r3, [r3, #0]
 8004626:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	785b      	ldrb	r3, [r3, #1]
 800462c:	2b01      	cmp	r3, #1
 800462e:	f040 817a 	bne.w	8004926 <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	691b      	ldr	r3, [r3, #16]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d132      	bne.n	80046a0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800463a:	69bb      	ldr	r3, [r7, #24]
 800463c:	015a      	lsls	r2, r3, #5
 800463e:	69fb      	ldr	r3, [r7, #28]
 8004640:	4413      	add	r3, r2
 8004642:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004646:	691b      	ldr	r3, [r3, #16]
 8004648:	69ba      	ldr	r2, [r7, #24]
 800464a:	0151      	lsls	r1, r2, #5
 800464c:	69fa      	ldr	r2, [r7, #28]
 800464e:	440a      	add	r2, r1
 8004650:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004654:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004658:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800465c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800465e:	69bb      	ldr	r3, [r7, #24]
 8004660:	015a      	lsls	r2, r3, #5
 8004662:	69fb      	ldr	r3, [r7, #28]
 8004664:	4413      	add	r3, r2
 8004666:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800466a:	691b      	ldr	r3, [r3, #16]
 800466c:	69ba      	ldr	r2, [r7, #24]
 800466e:	0151      	lsls	r1, r2, #5
 8004670:	69fa      	ldr	r2, [r7, #28]
 8004672:	440a      	add	r2, r1
 8004674:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004678:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800467c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800467e:	69bb      	ldr	r3, [r7, #24]
 8004680:	015a      	lsls	r2, r3, #5
 8004682:	69fb      	ldr	r3, [r7, #28]
 8004684:	4413      	add	r3, r2
 8004686:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800468a:	691b      	ldr	r3, [r3, #16]
 800468c:	69ba      	ldr	r2, [r7, #24]
 800468e:	0151      	lsls	r1, r2, #5
 8004690:	69fa      	ldr	r2, [r7, #28]
 8004692:	440a      	add	r2, r1
 8004694:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004698:	0cdb      	lsrs	r3, r3, #19
 800469a:	04db      	lsls	r3, r3, #19
 800469c:	6113      	str	r3, [r2, #16]
 800469e:	e092      	b.n	80047c6 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80046a0:	69bb      	ldr	r3, [r7, #24]
 80046a2:	015a      	lsls	r2, r3, #5
 80046a4:	69fb      	ldr	r3, [r7, #28]
 80046a6:	4413      	add	r3, r2
 80046a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046ac:	691b      	ldr	r3, [r3, #16]
 80046ae:	69ba      	ldr	r2, [r7, #24]
 80046b0:	0151      	lsls	r1, r2, #5
 80046b2:	69fa      	ldr	r2, [r7, #28]
 80046b4:	440a      	add	r2, r1
 80046b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046ba:	0cdb      	lsrs	r3, r3, #19
 80046bc:	04db      	lsls	r3, r3, #19
 80046be:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80046c0:	69bb      	ldr	r3, [r7, #24]
 80046c2:	015a      	lsls	r2, r3, #5
 80046c4:	69fb      	ldr	r3, [r7, #28]
 80046c6:	4413      	add	r3, r2
 80046c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046cc:	691b      	ldr	r3, [r3, #16]
 80046ce:	69ba      	ldr	r2, [r7, #24]
 80046d0:	0151      	lsls	r1, r2, #5
 80046d2:	69fa      	ldr	r2, [r7, #28]
 80046d4:	440a      	add	r2, r1
 80046d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046da:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80046de:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80046e2:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80046e4:	69bb      	ldr	r3, [r7, #24]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d11a      	bne.n	8004720 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	691a      	ldr	r2, [r3, #16]
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	429a      	cmp	r2, r3
 80046f4:	d903      	bls.n	80046fe <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	689a      	ldr	r2, [r3, #8]
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80046fe:	69bb      	ldr	r3, [r7, #24]
 8004700:	015a      	lsls	r2, r3, #5
 8004702:	69fb      	ldr	r3, [r7, #28]
 8004704:	4413      	add	r3, r2
 8004706:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800470a:	691b      	ldr	r3, [r3, #16]
 800470c:	69ba      	ldr	r2, [r7, #24]
 800470e:	0151      	lsls	r1, r2, #5
 8004710:	69fa      	ldr	r2, [r7, #28]
 8004712:	440a      	add	r2, r1
 8004714:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004718:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800471c:	6113      	str	r3, [r2, #16]
 800471e:	e01b      	b.n	8004758 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004720:	69bb      	ldr	r3, [r7, #24]
 8004722:	015a      	lsls	r2, r3, #5
 8004724:	69fb      	ldr	r3, [r7, #28]
 8004726:	4413      	add	r3, r2
 8004728:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800472c:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	6919      	ldr	r1, [r3, #16]
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	440b      	add	r3, r1
 8004738:	1e59      	subs	r1, r3, #1
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004742:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004744:	4ba2      	ldr	r3, [pc, #648]	; (80049d0 <USB_EPStartXfer+0x3c0>)
 8004746:	400b      	ands	r3, r1
 8004748:	69b9      	ldr	r1, [r7, #24]
 800474a:	0148      	lsls	r0, r1, #5
 800474c:	69f9      	ldr	r1, [r7, #28]
 800474e:	4401      	add	r1, r0
 8004750:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004754:	4313      	orrs	r3, r2
 8004756:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004758:	69bb      	ldr	r3, [r7, #24]
 800475a:	015a      	lsls	r2, r3, #5
 800475c:	69fb      	ldr	r3, [r7, #28]
 800475e:	4413      	add	r3, r2
 8004760:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004764:	691a      	ldr	r2, [r3, #16]
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	691b      	ldr	r3, [r3, #16]
 800476a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800476e:	69b9      	ldr	r1, [r7, #24]
 8004770:	0148      	lsls	r0, r1, #5
 8004772:	69f9      	ldr	r1, [r7, #28]
 8004774:	4401      	add	r1, r0
 8004776:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800477a:	4313      	orrs	r3, r2
 800477c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	791b      	ldrb	r3, [r3, #4]
 8004782:	2b01      	cmp	r3, #1
 8004784:	d11f      	bne.n	80047c6 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004786:	69bb      	ldr	r3, [r7, #24]
 8004788:	015a      	lsls	r2, r3, #5
 800478a:	69fb      	ldr	r3, [r7, #28]
 800478c:	4413      	add	r3, r2
 800478e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004792:	691b      	ldr	r3, [r3, #16]
 8004794:	69ba      	ldr	r2, [r7, #24]
 8004796:	0151      	lsls	r1, r2, #5
 8004798:	69fa      	ldr	r2, [r7, #28]
 800479a:	440a      	add	r2, r1
 800479c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047a0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80047a4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80047a6:	69bb      	ldr	r3, [r7, #24]
 80047a8:	015a      	lsls	r2, r3, #5
 80047aa:	69fb      	ldr	r3, [r7, #28]
 80047ac:	4413      	add	r3, r2
 80047ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047b2:	691b      	ldr	r3, [r3, #16]
 80047b4:	69ba      	ldr	r2, [r7, #24]
 80047b6:	0151      	lsls	r1, r2, #5
 80047b8:	69fa      	ldr	r2, [r7, #28]
 80047ba:	440a      	add	r2, r1
 80047bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047c0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80047c4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80047c6:	79fb      	ldrb	r3, [r7, #7]
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	d14b      	bne.n	8004864 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	69db      	ldr	r3, [r3, #28]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d009      	beq.n	80047e8 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80047d4:	69bb      	ldr	r3, [r7, #24]
 80047d6:	015a      	lsls	r2, r3, #5
 80047d8:	69fb      	ldr	r3, [r7, #28]
 80047da:	4413      	add	r3, r2
 80047dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047e0:	461a      	mov	r2, r3
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	69db      	ldr	r3, [r3, #28]
 80047e6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	791b      	ldrb	r3, [r3, #4]
 80047ec:	2b01      	cmp	r3, #1
 80047ee:	d128      	bne.n	8004842 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80047f0:	69fb      	ldr	r3, [r7, #28]
 80047f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d110      	bne.n	8004822 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004800:	69bb      	ldr	r3, [r7, #24]
 8004802:	015a      	lsls	r2, r3, #5
 8004804:	69fb      	ldr	r3, [r7, #28]
 8004806:	4413      	add	r3, r2
 8004808:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	69ba      	ldr	r2, [r7, #24]
 8004810:	0151      	lsls	r1, r2, #5
 8004812:	69fa      	ldr	r2, [r7, #28]
 8004814:	440a      	add	r2, r1
 8004816:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800481a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800481e:	6013      	str	r3, [r2, #0]
 8004820:	e00f      	b.n	8004842 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004822:	69bb      	ldr	r3, [r7, #24]
 8004824:	015a      	lsls	r2, r3, #5
 8004826:	69fb      	ldr	r3, [r7, #28]
 8004828:	4413      	add	r3, r2
 800482a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	69ba      	ldr	r2, [r7, #24]
 8004832:	0151      	lsls	r1, r2, #5
 8004834:	69fa      	ldr	r2, [r7, #28]
 8004836:	440a      	add	r2, r1
 8004838:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800483c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004840:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004842:	69bb      	ldr	r3, [r7, #24]
 8004844:	015a      	lsls	r2, r3, #5
 8004846:	69fb      	ldr	r3, [r7, #28]
 8004848:	4413      	add	r3, r2
 800484a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	69ba      	ldr	r2, [r7, #24]
 8004852:	0151      	lsls	r1, r2, #5
 8004854:	69fa      	ldr	r2, [r7, #28]
 8004856:	440a      	add	r2, r1
 8004858:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800485c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004860:	6013      	str	r3, [r2, #0]
 8004862:	e165      	b.n	8004b30 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004864:	69bb      	ldr	r3, [r7, #24]
 8004866:	015a      	lsls	r2, r3, #5
 8004868:	69fb      	ldr	r3, [r7, #28]
 800486a:	4413      	add	r3, r2
 800486c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	69ba      	ldr	r2, [r7, #24]
 8004874:	0151      	lsls	r1, r2, #5
 8004876:	69fa      	ldr	r2, [r7, #28]
 8004878:	440a      	add	r2, r1
 800487a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800487e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004882:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	791b      	ldrb	r3, [r3, #4]
 8004888:	2b01      	cmp	r3, #1
 800488a:	d015      	beq.n	80048b8 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	691b      	ldr	r3, [r3, #16]
 8004890:	2b00      	cmp	r3, #0
 8004892:	f000 814d 	beq.w	8004b30 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004896:	69fb      	ldr	r3, [r7, #28]
 8004898:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800489c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	781b      	ldrb	r3, [r3, #0]
 80048a2:	f003 030f 	and.w	r3, r3, #15
 80048a6:	2101      	movs	r1, #1
 80048a8:	fa01 f303 	lsl.w	r3, r1, r3
 80048ac:	69f9      	ldr	r1, [r7, #28]
 80048ae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80048b2:	4313      	orrs	r3, r2
 80048b4:	634b      	str	r3, [r1, #52]	; 0x34
 80048b6:	e13b      	b.n	8004b30 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80048b8:	69fb      	ldr	r3, [r7, #28]
 80048ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048be:	689b      	ldr	r3, [r3, #8]
 80048c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d110      	bne.n	80048ea <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80048c8:	69bb      	ldr	r3, [r7, #24]
 80048ca:	015a      	lsls	r2, r3, #5
 80048cc:	69fb      	ldr	r3, [r7, #28]
 80048ce:	4413      	add	r3, r2
 80048d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	69ba      	ldr	r2, [r7, #24]
 80048d8:	0151      	lsls	r1, r2, #5
 80048da:	69fa      	ldr	r2, [r7, #28]
 80048dc:	440a      	add	r2, r1
 80048de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048e2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80048e6:	6013      	str	r3, [r2, #0]
 80048e8:	e00f      	b.n	800490a <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80048ea:	69bb      	ldr	r3, [r7, #24]
 80048ec:	015a      	lsls	r2, r3, #5
 80048ee:	69fb      	ldr	r3, [r7, #28]
 80048f0:	4413      	add	r3, r2
 80048f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	69ba      	ldr	r2, [r7, #24]
 80048fa:	0151      	lsls	r1, r2, #5
 80048fc:	69fa      	ldr	r2, [r7, #28]
 80048fe:	440a      	add	r2, r1
 8004900:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004904:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004908:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	68d9      	ldr	r1, [r3, #12]
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	781a      	ldrb	r2, [r3, #0]
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	691b      	ldr	r3, [r3, #16]
 8004916:	b298      	uxth	r0, r3
 8004918:	79fb      	ldrb	r3, [r7, #7]
 800491a:	9300      	str	r3, [sp, #0]
 800491c:	4603      	mov	r3, r0
 800491e:	68f8      	ldr	r0, [r7, #12]
 8004920:	f000 f9b8 	bl	8004c94 <USB_WritePacket>
 8004924:	e104      	b.n	8004b30 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004926:	69bb      	ldr	r3, [r7, #24]
 8004928:	015a      	lsls	r2, r3, #5
 800492a:	69fb      	ldr	r3, [r7, #28]
 800492c:	4413      	add	r3, r2
 800492e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004932:	691b      	ldr	r3, [r3, #16]
 8004934:	69ba      	ldr	r2, [r7, #24]
 8004936:	0151      	lsls	r1, r2, #5
 8004938:	69fa      	ldr	r2, [r7, #28]
 800493a:	440a      	add	r2, r1
 800493c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004940:	0cdb      	lsrs	r3, r3, #19
 8004942:	04db      	lsls	r3, r3, #19
 8004944:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004946:	69bb      	ldr	r3, [r7, #24]
 8004948:	015a      	lsls	r2, r3, #5
 800494a:	69fb      	ldr	r3, [r7, #28]
 800494c:	4413      	add	r3, r2
 800494e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004952:	691b      	ldr	r3, [r3, #16]
 8004954:	69ba      	ldr	r2, [r7, #24]
 8004956:	0151      	lsls	r1, r2, #5
 8004958:	69fa      	ldr	r2, [r7, #28]
 800495a:	440a      	add	r2, r1
 800495c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004960:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004964:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004968:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800496a:	69bb      	ldr	r3, [r7, #24]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d131      	bne.n	80049d4 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	691b      	ldr	r3, [r3, #16]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d003      	beq.n	8004980 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	689a      	ldr	r2, [r3, #8]
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	689a      	ldr	r2, [r3, #8]
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004988:	69bb      	ldr	r3, [r7, #24]
 800498a:	015a      	lsls	r2, r3, #5
 800498c:	69fb      	ldr	r3, [r7, #28]
 800498e:	4413      	add	r3, r2
 8004990:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004994:	691a      	ldr	r2, [r3, #16]
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	6a1b      	ldr	r3, [r3, #32]
 800499a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800499e:	69b9      	ldr	r1, [r7, #24]
 80049a0:	0148      	lsls	r0, r1, #5
 80049a2:	69f9      	ldr	r1, [r7, #28]
 80049a4:	4401      	add	r1, r0
 80049a6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80049aa:	4313      	orrs	r3, r2
 80049ac:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80049ae:	69bb      	ldr	r3, [r7, #24]
 80049b0:	015a      	lsls	r2, r3, #5
 80049b2:	69fb      	ldr	r3, [r7, #28]
 80049b4:	4413      	add	r3, r2
 80049b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049ba:	691b      	ldr	r3, [r3, #16]
 80049bc:	69ba      	ldr	r2, [r7, #24]
 80049be:	0151      	lsls	r1, r2, #5
 80049c0:	69fa      	ldr	r2, [r7, #28]
 80049c2:	440a      	add	r2, r1
 80049c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049c8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80049cc:	6113      	str	r3, [r2, #16]
 80049ce:	e061      	b.n	8004a94 <USB_EPStartXfer+0x484>
 80049d0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	691b      	ldr	r3, [r3, #16]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d123      	bne.n	8004a24 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80049dc:	69bb      	ldr	r3, [r7, #24]
 80049de:	015a      	lsls	r2, r3, #5
 80049e0:	69fb      	ldr	r3, [r7, #28]
 80049e2:	4413      	add	r3, r2
 80049e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049e8:	691a      	ldr	r2, [r3, #16]
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049f2:	69b9      	ldr	r1, [r7, #24]
 80049f4:	0148      	lsls	r0, r1, #5
 80049f6:	69f9      	ldr	r1, [r7, #28]
 80049f8:	4401      	add	r1, r0
 80049fa:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80049fe:	4313      	orrs	r3, r2
 8004a00:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004a02:	69bb      	ldr	r3, [r7, #24]
 8004a04:	015a      	lsls	r2, r3, #5
 8004a06:	69fb      	ldr	r3, [r7, #28]
 8004a08:	4413      	add	r3, r2
 8004a0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a0e:	691b      	ldr	r3, [r3, #16]
 8004a10:	69ba      	ldr	r2, [r7, #24]
 8004a12:	0151      	lsls	r1, r2, #5
 8004a14:	69fa      	ldr	r2, [r7, #28]
 8004a16:	440a      	add	r2, r1
 8004a18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a1c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004a20:	6113      	str	r3, [r2, #16]
 8004a22:	e037      	b.n	8004a94 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	691a      	ldr	r2, [r3, #16]
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	689b      	ldr	r3, [r3, #8]
 8004a2c:	4413      	add	r3, r2
 8004a2e:	1e5a      	subs	r2, r3, #1
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	689b      	ldr	r3, [r3, #8]
 8004a34:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a38:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	8afa      	ldrh	r2, [r7, #22]
 8004a40:	fb03 f202 	mul.w	r2, r3, r2
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004a48:	69bb      	ldr	r3, [r7, #24]
 8004a4a:	015a      	lsls	r2, r3, #5
 8004a4c:	69fb      	ldr	r3, [r7, #28]
 8004a4e:	4413      	add	r3, r2
 8004a50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a54:	691a      	ldr	r2, [r3, #16]
 8004a56:	8afb      	ldrh	r3, [r7, #22]
 8004a58:	04d9      	lsls	r1, r3, #19
 8004a5a:	4b38      	ldr	r3, [pc, #224]	; (8004b3c <USB_EPStartXfer+0x52c>)
 8004a5c:	400b      	ands	r3, r1
 8004a5e:	69b9      	ldr	r1, [r7, #24]
 8004a60:	0148      	lsls	r0, r1, #5
 8004a62:	69f9      	ldr	r1, [r7, #28]
 8004a64:	4401      	add	r1, r0
 8004a66:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004a6e:	69bb      	ldr	r3, [r7, #24]
 8004a70:	015a      	lsls	r2, r3, #5
 8004a72:	69fb      	ldr	r3, [r7, #28]
 8004a74:	4413      	add	r3, r2
 8004a76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a7a:	691a      	ldr	r2, [r3, #16]
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	6a1b      	ldr	r3, [r3, #32]
 8004a80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a84:	69b9      	ldr	r1, [r7, #24]
 8004a86:	0148      	lsls	r0, r1, #5
 8004a88:	69f9      	ldr	r1, [r7, #28]
 8004a8a:	4401      	add	r1, r0
 8004a8c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004a90:	4313      	orrs	r3, r2
 8004a92:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8004a94:	79fb      	ldrb	r3, [r7, #7]
 8004a96:	2b01      	cmp	r3, #1
 8004a98:	d10d      	bne.n	8004ab6 <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	68db      	ldr	r3, [r3, #12]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d009      	beq.n	8004ab6 <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	68d9      	ldr	r1, [r3, #12]
 8004aa6:	69bb      	ldr	r3, [r7, #24]
 8004aa8:	015a      	lsls	r2, r3, #5
 8004aaa:	69fb      	ldr	r3, [r7, #28]
 8004aac:	4413      	add	r3, r2
 8004aae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ab2:	460a      	mov	r2, r1
 8004ab4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	791b      	ldrb	r3, [r3, #4]
 8004aba:	2b01      	cmp	r3, #1
 8004abc:	d128      	bne.n	8004b10 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004abe:	69fb      	ldr	r3, [r7, #28]
 8004ac0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ac4:	689b      	ldr	r3, [r3, #8]
 8004ac6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d110      	bne.n	8004af0 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004ace:	69bb      	ldr	r3, [r7, #24]
 8004ad0:	015a      	lsls	r2, r3, #5
 8004ad2:	69fb      	ldr	r3, [r7, #28]
 8004ad4:	4413      	add	r3, r2
 8004ad6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	69ba      	ldr	r2, [r7, #24]
 8004ade:	0151      	lsls	r1, r2, #5
 8004ae0:	69fa      	ldr	r2, [r7, #28]
 8004ae2:	440a      	add	r2, r1
 8004ae4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ae8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004aec:	6013      	str	r3, [r2, #0]
 8004aee:	e00f      	b.n	8004b10 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004af0:	69bb      	ldr	r3, [r7, #24]
 8004af2:	015a      	lsls	r2, r3, #5
 8004af4:	69fb      	ldr	r3, [r7, #28]
 8004af6:	4413      	add	r3, r2
 8004af8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	69ba      	ldr	r2, [r7, #24]
 8004b00:	0151      	lsls	r1, r2, #5
 8004b02:	69fa      	ldr	r2, [r7, #28]
 8004b04:	440a      	add	r2, r1
 8004b06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b0e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004b10:	69bb      	ldr	r3, [r7, #24]
 8004b12:	015a      	lsls	r2, r3, #5
 8004b14:	69fb      	ldr	r3, [r7, #28]
 8004b16:	4413      	add	r3, r2
 8004b18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	69ba      	ldr	r2, [r7, #24]
 8004b20:	0151      	lsls	r1, r2, #5
 8004b22:	69fa      	ldr	r2, [r7, #28]
 8004b24:	440a      	add	r2, r1
 8004b26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b2a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004b2e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004b30:	2300      	movs	r3, #0
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	3720      	adds	r7, #32
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}
 8004b3a:	bf00      	nop
 8004b3c:	1ff80000 	.word	0x1ff80000

08004b40 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b087      	sub	sp, #28
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
 8004b48:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	785b      	ldrb	r3, [r3, #1]
 8004b5a:	2b01      	cmp	r3, #1
 8004b5c:	d14a      	bne.n	8004bf4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	781b      	ldrb	r3, [r3, #0]
 8004b62:	015a      	lsls	r2, r3, #5
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	4413      	add	r3, r2
 8004b68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b72:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b76:	f040 8086 	bne.w	8004c86 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	781b      	ldrb	r3, [r3, #0]
 8004b7e:	015a      	lsls	r2, r3, #5
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	4413      	add	r3, r2
 8004b84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	683a      	ldr	r2, [r7, #0]
 8004b8c:	7812      	ldrb	r2, [r2, #0]
 8004b8e:	0151      	lsls	r1, r2, #5
 8004b90:	693a      	ldr	r2, [r7, #16]
 8004b92:	440a      	add	r2, r1
 8004b94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b98:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004b9c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	781b      	ldrb	r3, [r3, #0]
 8004ba2:	015a      	lsls	r2, r3, #5
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	4413      	add	r3, r2
 8004ba8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	683a      	ldr	r2, [r7, #0]
 8004bb0:	7812      	ldrb	r2, [r2, #0]
 8004bb2:	0151      	lsls	r1, r2, #5
 8004bb4:	693a      	ldr	r2, [r7, #16]
 8004bb6:	440a      	add	r2, r1
 8004bb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bbc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004bc0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	3301      	adds	r3, #1
 8004bc6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	f242 7210 	movw	r2, #10000	; 0x2710
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d902      	bls.n	8004bd8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	75fb      	strb	r3, [r7, #23]
          break;
 8004bd6:	e056      	b.n	8004c86 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	781b      	ldrb	r3, [r3, #0]
 8004bdc:	015a      	lsls	r2, r3, #5
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	4413      	add	r3, r2
 8004be2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004bec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004bf0:	d0e7      	beq.n	8004bc2 <USB_EPStopXfer+0x82>
 8004bf2:	e048      	b.n	8004c86 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	781b      	ldrb	r3, [r3, #0]
 8004bf8:	015a      	lsls	r2, r3, #5
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	4413      	add	r3, r2
 8004bfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c08:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c0c:	d13b      	bne.n	8004c86 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	781b      	ldrb	r3, [r3, #0]
 8004c12:	015a      	lsls	r2, r3, #5
 8004c14:	693b      	ldr	r3, [r7, #16]
 8004c16:	4413      	add	r3, r2
 8004c18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	683a      	ldr	r2, [r7, #0]
 8004c20:	7812      	ldrb	r2, [r2, #0]
 8004c22:	0151      	lsls	r1, r2, #5
 8004c24:	693a      	ldr	r2, [r7, #16]
 8004c26:	440a      	add	r2, r1
 8004c28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c2c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004c30:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	781b      	ldrb	r3, [r3, #0]
 8004c36:	015a      	lsls	r2, r3, #5
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	4413      	add	r3, r2
 8004c3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	683a      	ldr	r2, [r7, #0]
 8004c44:	7812      	ldrb	r2, [r2, #0]
 8004c46:	0151      	lsls	r1, r2, #5
 8004c48:	693a      	ldr	r2, [r7, #16]
 8004c4a:	440a      	add	r2, r1
 8004c4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c50:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004c54:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	3301      	adds	r3, #1
 8004c5a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	f242 7210 	movw	r2, #10000	; 0x2710
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d902      	bls.n	8004c6c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8004c66:	2301      	movs	r3, #1
 8004c68:	75fb      	strb	r3, [r7, #23]
          break;
 8004c6a:	e00c      	b.n	8004c86 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	781b      	ldrb	r3, [r3, #0]
 8004c70:	015a      	lsls	r2, r3, #5
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	4413      	add	r3, r2
 8004c76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c80:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c84:	d0e7      	beq.n	8004c56 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8004c86:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	371c      	adds	r7, #28
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c92:	4770      	bx	lr

08004c94 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004c94:	b480      	push	{r7}
 8004c96:	b089      	sub	sp, #36	; 0x24
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	60f8      	str	r0, [r7, #12]
 8004c9c:	60b9      	str	r1, [r7, #8]
 8004c9e:	4611      	mov	r1, r2
 8004ca0:	461a      	mov	r2, r3
 8004ca2:	460b      	mov	r3, r1
 8004ca4:	71fb      	strb	r3, [r7, #7]
 8004ca6:	4613      	mov	r3, r2
 8004ca8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004cb2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d123      	bne.n	8004d02 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004cba:	88bb      	ldrh	r3, [r7, #4]
 8004cbc:	3303      	adds	r3, #3
 8004cbe:	089b      	lsrs	r3, r3, #2
 8004cc0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	61bb      	str	r3, [r7, #24]
 8004cc6:	e018      	b.n	8004cfa <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004cc8:	79fb      	ldrb	r3, [r7, #7]
 8004cca:	031a      	lsls	r2, r3, #12
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	4413      	add	r3, r2
 8004cd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cd4:	461a      	mov	r2, r3
 8004cd6:	69fb      	ldr	r3, [r7, #28]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004cdc:	69fb      	ldr	r3, [r7, #28]
 8004cde:	3301      	adds	r3, #1
 8004ce0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004ce2:	69fb      	ldr	r3, [r7, #28]
 8004ce4:	3301      	adds	r3, #1
 8004ce6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004ce8:	69fb      	ldr	r3, [r7, #28]
 8004cea:	3301      	adds	r3, #1
 8004cec:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004cee:	69fb      	ldr	r3, [r7, #28]
 8004cf0:	3301      	adds	r3, #1
 8004cf2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004cf4:	69bb      	ldr	r3, [r7, #24]
 8004cf6:	3301      	adds	r3, #1
 8004cf8:	61bb      	str	r3, [r7, #24]
 8004cfa:	69ba      	ldr	r2, [r7, #24]
 8004cfc:	693b      	ldr	r3, [r7, #16]
 8004cfe:	429a      	cmp	r2, r3
 8004d00:	d3e2      	bcc.n	8004cc8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004d02:	2300      	movs	r3, #0
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	3724      	adds	r7, #36	; 0x24
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0e:	4770      	bx	lr

08004d10 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004d10:	b480      	push	{r7}
 8004d12:	b08b      	sub	sp, #44	; 0x2c
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	60f8      	str	r0, [r7, #12]
 8004d18:	60b9      	str	r1, [r7, #8]
 8004d1a:	4613      	mov	r3, r2
 8004d1c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004d26:	88fb      	ldrh	r3, [r7, #6]
 8004d28:	089b      	lsrs	r3, r3, #2
 8004d2a:	b29b      	uxth	r3, r3
 8004d2c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004d2e:	88fb      	ldrh	r3, [r7, #6]
 8004d30:	f003 0303 	and.w	r3, r3, #3
 8004d34:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004d36:	2300      	movs	r3, #0
 8004d38:	623b      	str	r3, [r7, #32]
 8004d3a:	e014      	b.n	8004d66 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004d3c:	69bb      	ldr	r3, [r7, #24]
 8004d3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d42:	681a      	ldr	r2, [r3, #0]
 8004d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d46:	601a      	str	r2, [r3, #0]
    pDest++;
 8004d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d4a:	3301      	adds	r3, #1
 8004d4c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d50:	3301      	adds	r3, #1
 8004d52:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d56:	3301      	adds	r3, #1
 8004d58:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d5c:	3301      	adds	r3, #1
 8004d5e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004d60:	6a3b      	ldr	r3, [r7, #32]
 8004d62:	3301      	adds	r3, #1
 8004d64:	623b      	str	r3, [r7, #32]
 8004d66:	6a3a      	ldr	r2, [r7, #32]
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	429a      	cmp	r2, r3
 8004d6c:	d3e6      	bcc.n	8004d3c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004d6e:	8bfb      	ldrh	r3, [r7, #30]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d01e      	beq.n	8004db2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004d74:	2300      	movs	r3, #0
 8004d76:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004d78:	69bb      	ldr	r3, [r7, #24]
 8004d7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d7e:	461a      	mov	r2, r3
 8004d80:	f107 0310 	add.w	r3, r7, #16
 8004d84:	6812      	ldr	r2, [r2, #0]
 8004d86:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004d88:	693a      	ldr	r2, [r7, #16]
 8004d8a:	6a3b      	ldr	r3, [r7, #32]
 8004d8c:	b2db      	uxtb	r3, r3
 8004d8e:	00db      	lsls	r3, r3, #3
 8004d90:	fa22 f303 	lsr.w	r3, r2, r3
 8004d94:	b2da      	uxtb	r2, r3
 8004d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d98:	701a      	strb	r2, [r3, #0]
      i++;
 8004d9a:	6a3b      	ldr	r3, [r7, #32]
 8004d9c:	3301      	adds	r3, #1
 8004d9e:	623b      	str	r3, [r7, #32]
      pDest++;
 8004da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da2:	3301      	adds	r3, #1
 8004da4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004da6:	8bfb      	ldrh	r3, [r7, #30]
 8004da8:	3b01      	subs	r3, #1
 8004daa:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004dac:	8bfb      	ldrh	r3, [r7, #30]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d1ea      	bne.n	8004d88 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004db4:	4618      	mov	r0, r3
 8004db6:	372c      	adds	r7, #44	; 0x2c
 8004db8:	46bd      	mov	sp, r7
 8004dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbe:	4770      	bx	lr

08004dc0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b085      	sub	sp, #20
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
 8004dc8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	781b      	ldrb	r3, [r3, #0]
 8004dd2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	785b      	ldrb	r3, [r3, #1]
 8004dd8:	2b01      	cmp	r3, #1
 8004dda:	d12c      	bne.n	8004e36 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	015a      	lsls	r2, r3, #5
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	4413      	add	r3, r2
 8004de4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	db12      	blt.n	8004e14 <USB_EPSetStall+0x54>
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d00f      	beq.n	8004e14 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	015a      	lsls	r2, r3, #5
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	4413      	add	r3, r2
 8004dfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	68ba      	ldr	r2, [r7, #8]
 8004e04:	0151      	lsls	r1, r2, #5
 8004e06:	68fa      	ldr	r2, [r7, #12]
 8004e08:	440a      	add	r2, r1
 8004e0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e0e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004e12:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	015a      	lsls	r2, r3, #5
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	4413      	add	r3, r2
 8004e1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	68ba      	ldr	r2, [r7, #8]
 8004e24:	0151      	lsls	r1, r2, #5
 8004e26:	68fa      	ldr	r2, [r7, #12]
 8004e28:	440a      	add	r2, r1
 8004e2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e2e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004e32:	6013      	str	r3, [r2, #0]
 8004e34:	e02b      	b.n	8004e8e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	015a      	lsls	r2, r3, #5
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	4413      	add	r3, r2
 8004e3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	db12      	blt.n	8004e6e <USB_EPSetStall+0xae>
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d00f      	beq.n	8004e6e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	015a      	lsls	r2, r3, #5
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	4413      	add	r3, r2
 8004e56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	68ba      	ldr	r2, [r7, #8]
 8004e5e:	0151      	lsls	r1, r2, #5
 8004e60:	68fa      	ldr	r2, [r7, #12]
 8004e62:	440a      	add	r2, r1
 8004e64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e68:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004e6c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	015a      	lsls	r2, r3, #5
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	4413      	add	r3, r2
 8004e76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	68ba      	ldr	r2, [r7, #8]
 8004e7e:	0151      	lsls	r1, r2, #5
 8004e80:	68fa      	ldr	r2, [r7, #12]
 8004e82:	440a      	add	r2, r1
 8004e84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e88:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004e8c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004e8e:	2300      	movs	r3, #0
}
 8004e90:	4618      	mov	r0, r3
 8004e92:	3714      	adds	r7, #20
 8004e94:	46bd      	mov	sp, r7
 8004e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9a:	4770      	bx	lr

08004e9c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b085      	sub	sp, #20
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
 8004ea4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	781b      	ldrb	r3, [r3, #0]
 8004eae:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	785b      	ldrb	r3, [r3, #1]
 8004eb4:	2b01      	cmp	r3, #1
 8004eb6:	d128      	bne.n	8004f0a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	015a      	lsls	r2, r3, #5
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	4413      	add	r3, r2
 8004ec0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	68ba      	ldr	r2, [r7, #8]
 8004ec8:	0151      	lsls	r1, r2, #5
 8004eca:	68fa      	ldr	r2, [r7, #12]
 8004ecc:	440a      	add	r2, r1
 8004ece:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ed2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004ed6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	791b      	ldrb	r3, [r3, #4]
 8004edc:	2b03      	cmp	r3, #3
 8004ede:	d003      	beq.n	8004ee8 <USB_EPClearStall+0x4c>
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	791b      	ldrb	r3, [r3, #4]
 8004ee4:	2b02      	cmp	r3, #2
 8004ee6:	d138      	bne.n	8004f5a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	015a      	lsls	r2, r3, #5
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	4413      	add	r3, r2
 8004ef0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	68ba      	ldr	r2, [r7, #8]
 8004ef8:	0151      	lsls	r1, r2, #5
 8004efa:	68fa      	ldr	r2, [r7, #12]
 8004efc:	440a      	add	r2, r1
 8004efe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f06:	6013      	str	r3, [r2, #0]
 8004f08:	e027      	b.n	8004f5a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	015a      	lsls	r2, r3, #5
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	4413      	add	r3, r2
 8004f12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	68ba      	ldr	r2, [r7, #8]
 8004f1a:	0151      	lsls	r1, r2, #5
 8004f1c:	68fa      	ldr	r2, [r7, #12]
 8004f1e:	440a      	add	r2, r1
 8004f20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f24:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004f28:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	791b      	ldrb	r3, [r3, #4]
 8004f2e:	2b03      	cmp	r3, #3
 8004f30:	d003      	beq.n	8004f3a <USB_EPClearStall+0x9e>
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	791b      	ldrb	r3, [r3, #4]
 8004f36:	2b02      	cmp	r3, #2
 8004f38:	d10f      	bne.n	8004f5a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	015a      	lsls	r2, r3, #5
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	4413      	add	r3, r2
 8004f42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	68ba      	ldr	r2, [r7, #8]
 8004f4a:	0151      	lsls	r1, r2, #5
 8004f4c:	68fa      	ldr	r2, [r7, #12]
 8004f4e:	440a      	add	r2, r1
 8004f50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f58:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004f5a:	2300      	movs	r3, #0
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	3714      	adds	r7, #20
 8004f60:	46bd      	mov	sp, r7
 8004f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f66:	4770      	bx	lr

08004f68 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b085      	sub	sp, #20
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
 8004f70:	460b      	mov	r3, r1
 8004f72:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	68fa      	ldr	r2, [r7, #12]
 8004f82:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f86:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004f8a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f92:	681a      	ldr	r2, [r3, #0]
 8004f94:	78fb      	ldrb	r3, [r7, #3]
 8004f96:	011b      	lsls	r3, r3, #4
 8004f98:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004f9c:	68f9      	ldr	r1, [r7, #12]
 8004f9e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004fa6:	2300      	movs	r3, #0
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	3714      	adds	r7, #20
 8004fac:	46bd      	mov	sp, r7
 8004fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb2:	4770      	bx	lr

08004fb4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b085      	sub	sp, #20
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	68fa      	ldr	r2, [r7, #12]
 8004fca:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004fce:	f023 0303 	bic.w	r3, r3, #3
 8004fd2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	68fa      	ldr	r2, [r7, #12]
 8004fde:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004fe2:	f023 0302 	bic.w	r3, r3, #2
 8004fe6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004fe8:	2300      	movs	r3, #0
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	3714      	adds	r7, #20
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff4:	4770      	bx	lr

08004ff6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004ff6:	b480      	push	{r7}
 8004ff8:	b085      	sub	sp, #20
 8004ffa:	af00      	add	r7, sp, #0
 8004ffc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	68fa      	ldr	r2, [r7, #12]
 800500c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005010:	f023 0303 	bic.w	r3, r3, #3
 8005014:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	68fa      	ldr	r2, [r7, #12]
 8005020:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005024:	f043 0302 	orr.w	r3, r3, #2
 8005028:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800502a:	2300      	movs	r3, #0
}
 800502c:	4618      	mov	r0, r3
 800502e:	3714      	adds	r7, #20
 8005030:	46bd      	mov	sp, r7
 8005032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005036:	4770      	bx	lr

08005038 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005038:	b480      	push	{r7}
 800503a:	b085      	sub	sp, #20
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	695b      	ldr	r3, [r3, #20]
 8005044:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	699b      	ldr	r3, [r3, #24]
 800504a:	68fa      	ldr	r2, [r7, #12]
 800504c:	4013      	ands	r3, r2
 800504e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005050:	68fb      	ldr	r3, [r7, #12]
}
 8005052:	4618      	mov	r0, r3
 8005054:	3714      	adds	r7, #20
 8005056:	46bd      	mov	sp, r7
 8005058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505c:	4770      	bx	lr

0800505e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800505e:	b480      	push	{r7}
 8005060:	b085      	sub	sp, #20
 8005062:	af00      	add	r7, sp, #0
 8005064:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005070:	699b      	ldr	r3, [r3, #24]
 8005072:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800507a:	69db      	ldr	r3, [r3, #28]
 800507c:	68ba      	ldr	r2, [r7, #8]
 800507e:	4013      	ands	r3, r2
 8005080:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	0c1b      	lsrs	r3, r3, #16
}
 8005086:	4618      	mov	r0, r3
 8005088:	3714      	adds	r7, #20
 800508a:	46bd      	mov	sp, r7
 800508c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005090:	4770      	bx	lr

08005092 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005092:	b480      	push	{r7}
 8005094:	b085      	sub	sp, #20
 8005096:	af00      	add	r7, sp, #0
 8005098:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050a4:	699b      	ldr	r3, [r3, #24]
 80050a6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050ae:	69db      	ldr	r3, [r3, #28]
 80050b0:	68ba      	ldr	r2, [r7, #8]
 80050b2:	4013      	ands	r3, r2
 80050b4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	b29b      	uxth	r3, r3
}
 80050ba:	4618      	mov	r0, r3
 80050bc:	3714      	adds	r7, #20
 80050be:	46bd      	mov	sp, r7
 80050c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c4:	4770      	bx	lr

080050c6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80050c6:	b480      	push	{r7}
 80050c8:	b085      	sub	sp, #20
 80050ca:	af00      	add	r7, sp, #0
 80050cc:	6078      	str	r0, [r7, #4]
 80050ce:	460b      	mov	r3, r1
 80050d0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80050d6:	78fb      	ldrb	r3, [r7, #3]
 80050d8:	015a      	lsls	r2, r3, #5
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	4413      	add	r3, r2
 80050de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050e2:	689b      	ldr	r3, [r3, #8]
 80050e4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050ec:	695b      	ldr	r3, [r3, #20]
 80050ee:	68ba      	ldr	r2, [r7, #8]
 80050f0:	4013      	ands	r3, r2
 80050f2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80050f4:	68bb      	ldr	r3, [r7, #8]
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	3714      	adds	r7, #20
 80050fa:	46bd      	mov	sp, r7
 80050fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005100:	4770      	bx	lr

08005102 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005102:	b480      	push	{r7}
 8005104:	b087      	sub	sp, #28
 8005106:	af00      	add	r7, sp, #0
 8005108:	6078      	str	r0, [r7, #4]
 800510a:	460b      	mov	r3, r1
 800510c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005118:	691b      	ldr	r3, [r3, #16]
 800511a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005122:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005124:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005126:	78fb      	ldrb	r3, [r7, #3]
 8005128:	f003 030f 	and.w	r3, r3, #15
 800512c:	68fa      	ldr	r2, [r7, #12]
 800512e:	fa22 f303 	lsr.w	r3, r2, r3
 8005132:	01db      	lsls	r3, r3, #7
 8005134:	b2db      	uxtb	r3, r3
 8005136:	693a      	ldr	r2, [r7, #16]
 8005138:	4313      	orrs	r3, r2
 800513a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800513c:	78fb      	ldrb	r3, [r7, #3]
 800513e:	015a      	lsls	r2, r3, #5
 8005140:	697b      	ldr	r3, [r7, #20]
 8005142:	4413      	add	r3, r2
 8005144:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005148:	689b      	ldr	r3, [r3, #8]
 800514a:	693a      	ldr	r2, [r7, #16]
 800514c:	4013      	ands	r3, r2
 800514e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005150:	68bb      	ldr	r3, [r7, #8]
}
 8005152:	4618      	mov	r0, r3
 8005154:	371c      	adds	r7, #28
 8005156:	46bd      	mov	sp, r7
 8005158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515c:	4770      	bx	lr

0800515e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800515e:	b480      	push	{r7}
 8005160:	b083      	sub	sp, #12
 8005162:	af00      	add	r7, sp, #0
 8005164:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	695b      	ldr	r3, [r3, #20]
 800516a:	f003 0301 	and.w	r3, r3, #1
}
 800516e:	4618      	mov	r0, r3
 8005170:	370c      	adds	r7, #12
 8005172:	46bd      	mov	sp, r7
 8005174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005178:	4770      	bx	lr

0800517a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800517a:	b480      	push	{r7}
 800517c:	b085      	sub	sp, #20
 800517e:	af00      	add	r7, sp, #0
 8005180:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	68fa      	ldr	r2, [r7, #12]
 8005190:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005194:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005198:	f023 0307 	bic.w	r3, r3, #7
 800519c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	68fa      	ldr	r2, [r7, #12]
 80051a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80051ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051b0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80051b2:	2300      	movs	r3, #0
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	3714      	adds	r7, #20
 80051b8:	46bd      	mov	sp, r7
 80051ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051be:	4770      	bx	lr

080051c0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80051c0:	b480      	push	{r7}
 80051c2:	b087      	sub	sp, #28
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	60f8      	str	r0, [r7, #12]
 80051c8:	460b      	mov	r3, r1
 80051ca:	607a      	str	r2, [r7, #4]
 80051cc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	333c      	adds	r3, #60	; 0x3c
 80051d6:	3304      	adds	r3, #4
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80051dc:	693b      	ldr	r3, [r7, #16]
 80051de:	4a26      	ldr	r2, [pc, #152]	; (8005278 <USB_EP0_OutStart+0xb8>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d90a      	bls.n	80051fa <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80051f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80051f4:	d101      	bne.n	80051fa <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80051f6:	2300      	movs	r3, #0
 80051f8:	e037      	b.n	800526a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005200:	461a      	mov	r2, r3
 8005202:	2300      	movs	r3, #0
 8005204:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800520c:	691b      	ldr	r3, [r3, #16]
 800520e:	697a      	ldr	r2, [r7, #20]
 8005210:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005214:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005218:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005220:	691b      	ldr	r3, [r3, #16]
 8005222:	697a      	ldr	r2, [r7, #20]
 8005224:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005228:	f043 0318 	orr.w	r3, r3, #24
 800522c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005234:	691b      	ldr	r3, [r3, #16]
 8005236:	697a      	ldr	r2, [r7, #20]
 8005238:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800523c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005240:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005242:	7afb      	ldrb	r3, [r7, #11]
 8005244:	2b01      	cmp	r3, #1
 8005246:	d10f      	bne.n	8005268 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800524e:	461a      	mov	r2, r3
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	697a      	ldr	r2, [r7, #20]
 800525e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005262:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005266:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005268:	2300      	movs	r3, #0
}
 800526a:	4618      	mov	r0, r3
 800526c:	371c      	adds	r7, #28
 800526e:	46bd      	mov	sp, r7
 8005270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005274:	4770      	bx	lr
 8005276:	bf00      	nop
 8005278:	4f54300a 	.word	0x4f54300a

0800527c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800527c:	b480      	push	{r7}
 800527e:	b085      	sub	sp, #20
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005284:	2300      	movs	r3, #0
 8005286:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	3301      	adds	r3, #1
 800528c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005294:	d901      	bls.n	800529a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005296:	2303      	movs	r3, #3
 8005298:	e01b      	b.n	80052d2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	691b      	ldr	r3, [r3, #16]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	daf2      	bge.n	8005288 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80052a2:	2300      	movs	r3, #0
 80052a4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	691b      	ldr	r3, [r3, #16]
 80052aa:	f043 0201 	orr.w	r2, r3, #1
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	3301      	adds	r3, #1
 80052b6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80052be:	d901      	bls.n	80052c4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80052c0:	2303      	movs	r3, #3
 80052c2:	e006      	b.n	80052d2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	691b      	ldr	r3, [r3, #16]
 80052c8:	f003 0301 	and.w	r3, r3, #1
 80052cc:	2b01      	cmp	r3, #1
 80052ce:	d0f0      	beq.n	80052b2 <USB_CoreReset+0x36>

  return HAL_OK;
 80052d0:	2300      	movs	r3, #0
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	3714      	adds	r7, #20
 80052d6:	46bd      	mov	sp, r7
 80052d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052dc:	4770      	bx	lr
	...

080052e0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b084      	sub	sp, #16
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
 80052e8:	460b      	mov	r3, r1
 80052ea:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80052ec:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80052f0:	f005 f9ec 	bl	800a6cc <USBD_static_malloc>
 80052f4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d109      	bne.n	8005310 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	32b0      	adds	r2, #176	; 0xb0
 8005306:	2100      	movs	r1, #0
 8005308:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800530c:	2302      	movs	r3, #2
 800530e:	e0d4      	b.n	80054ba <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8005310:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8005314:	2100      	movs	r1, #0
 8005316:	68f8      	ldr	r0, [r7, #12]
 8005318:	f005 fac4 	bl	800a8a4 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	32b0      	adds	r2, #176	; 0xb0
 8005326:	68f9      	ldr	r1, [r7, #12]
 8005328:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	32b0      	adds	r2, #176	; 0xb0
 8005336:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	7c1b      	ldrb	r3, [r3, #16]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d138      	bne.n	80053ba <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005348:	4b5e      	ldr	r3, [pc, #376]	; (80054c4 <USBD_CDC_Init+0x1e4>)
 800534a:	7819      	ldrb	r1, [r3, #0]
 800534c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005350:	2202      	movs	r2, #2
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	f005 f897 	bl	800a486 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005358:	4b5a      	ldr	r3, [pc, #360]	; (80054c4 <USBD_CDC_Init+0x1e4>)
 800535a:	781b      	ldrb	r3, [r3, #0]
 800535c:	f003 020f 	and.w	r2, r3, #15
 8005360:	6879      	ldr	r1, [r7, #4]
 8005362:	4613      	mov	r3, r2
 8005364:	009b      	lsls	r3, r3, #2
 8005366:	4413      	add	r3, r2
 8005368:	009b      	lsls	r3, r3, #2
 800536a:	440b      	add	r3, r1
 800536c:	3324      	adds	r3, #36	; 0x24
 800536e:	2201      	movs	r2, #1
 8005370:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005372:	4b55      	ldr	r3, [pc, #340]	; (80054c8 <USBD_CDC_Init+0x1e8>)
 8005374:	7819      	ldrb	r1, [r3, #0]
 8005376:	f44f 7300 	mov.w	r3, #512	; 0x200
 800537a:	2202      	movs	r2, #2
 800537c:	6878      	ldr	r0, [r7, #4]
 800537e:	f005 f882 	bl	800a486 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005382:	4b51      	ldr	r3, [pc, #324]	; (80054c8 <USBD_CDC_Init+0x1e8>)
 8005384:	781b      	ldrb	r3, [r3, #0]
 8005386:	f003 020f 	and.w	r2, r3, #15
 800538a:	6879      	ldr	r1, [r7, #4]
 800538c:	4613      	mov	r3, r2
 800538e:	009b      	lsls	r3, r3, #2
 8005390:	4413      	add	r3, r2
 8005392:	009b      	lsls	r3, r3, #2
 8005394:	440b      	add	r3, r1
 8005396:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800539a:	2201      	movs	r2, #1
 800539c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800539e:	4b4b      	ldr	r3, [pc, #300]	; (80054cc <USBD_CDC_Init+0x1ec>)
 80053a0:	781b      	ldrb	r3, [r3, #0]
 80053a2:	f003 020f 	and.w	r2, r3, #15
 80053a6:	6879      	ldr	r1, [r7, #4]
 80053a8:	4613      	mov	r3, r2
 80053aa:	009b      	lsls	r3, r3, #2
 80053ac:	4413      	add	r3, r2
 80053ae:	009b      	lsls	r3, r3, #2
 80053b0:	440b      	add	r3, r1
 80053b2:	3326      	adds	r3, #38	; 0x26
 80053b4:	2210      	movs	r2, #16
 80053b6:	801a      	strh	r2, [r3, #0]
 80053b8:	e035      	b.n	8005426 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80053ba:	4b42      	ldr	r3, [pc, #264]	; (80054c4 <USBD_CDC_Init+0x1e4>)
 80053bc:	7819      	ldrb	r1, [r3, #0]
 80053be:	2340      	movs	r3, #64	; 0x40
 80053c0:	2202      	movs	r2, #2
 80053c2:	6878      	ldr	r0, [r7, #4]
 80053c4:	f005 f85f 	bl	800a486 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80053c8:	4b3e      	ldr	r3, [pc, #248]	; (80054c4 <USBD_CDC_Init+0x1e4>)
 80053ca:	781b      	ldrb	r3, [r3, #0]
 80053cc:	f003 020f 	and.w	r2, r3, #15
 80053d0:	6879      	ldr	r1, [r7, #4]
 80053d2:	4613      	mov	r3, r2
 80053d4:	009b      	lsls	r3, r3, #2
 80053d6:	4413      	add	r3, r2
 80053d8:	009b      	lsls	r3, r3, #2
 80053da:	440b      	add	r3, r1
 80053dc:	3324      	adds	r3, #36	; 0x24
 80053de:	2201      	movs	r2, #1
 80053e0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80053e2:	4b39      	ldr	r3, [pc, #228]	; (80054c8 <USBD_CDC_Init+0x1e8>)
 80053e4:	7819      	ldrb	r1, [r3, #0]
 80053e6:	2340      	movs	r3, #64	; 0x40
 80053e8:	2202      	movs	r2, #2
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f005 f84b 	bl	800a486 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80053f0:	4b35      	ldr	r3, [pc, #212]	; (80054c8 <USBD_CDC_Init+0x1e8>)
 80053f2:	781b      	ldrb	r3, [r3, #0]
 80053f4:	f003 020f 	and.w	r2, r3, #15
 80053f8:	6879      	ldr	r1, [r7, #4]
 80053fa:	4613      	mov	r3, r2
 80053fc:	009b      	lsls	r3, r3, #2
 80053fe:	4413      	add	r3, r2
 8005400:	009b      	lsls	r3, r3, #2
 8005402:	440b      	add	r3, r1
 8005404:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005408:	2201      	movs	r2, #1
 800540a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800540c:	4b2f      	ldr	r3, [pc, #188]	; (80054cc <USBD_CDC_Init+0x1ec>)
 800540e:	781b      	ldrb	r3, [r3, #0]
 8005410:	f003 020f 	and.w	r2, r3, #15
 8005414:	6879      	ldr	r1, [r7, #4]
 8005416:	4613      	mov	r3, r2
 8005418:	009b      	lsls	r3, r3, #2
 800541a:	4413      	add	r3, r2
 800541c:	009b      	lsls	r3, r3, #2
 800541e:	440b      	add	r3, r1
 8005420:	3326      	adds	r3, #38	; 0x26
 8005422:	2210      	movs	r2, #16
 8005424:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005426:	4b29      	ldr	r3, [pc, #164]	; (80054cc <USBD_CDC_Init+0x1ec>)
 8005428:	7819      	ldrb	r1, [r3, #0]
 800542a:	2308      	movs	r3, #8
 800542c:	2203      	movs	r2, #3
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	f005 f829 	bl	800a486 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8005434:	4b25      	ldr	r3, [pc, #148]	; (80054cc <USBD_CDC_Init+0x1ec>)
 8005436:	781b      	ldrb	r3, [r3, #0]
 8005438:	f003 020f 	and.w	r2, r3, #15
 800543c:	6879      	ldr	r1, [r7, #4]
 800543e:	4613      	mov	r3, r2
 8005440:	009b      	lsls	r3, r3, #2
 8005442:	4413      	add	r3, r2
 8005444:	009b      	lsls	r3, r3, #2
 8005446:	440b      	add	r3, r1
 8005448:	3324      	adds	r3, #36	; 0x24
 800544a:	2201      	movs	r2, #1
 800544c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	2200      	movs	r2, #0
 8005452:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800545c:	687a      	ldr	r2, [r7, #4]
 800545e:	33b0      	adds	r3, #176	; 0xb0
 8005460:	009b      	lsls	r3, r3, #2
 8005462:	4413      	add	r3, r2
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	2200      	movs	r2, #0
 800546e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	2200      	movs	r2, #0
 8005476:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8005480:	2b00      	cmp	r3, #0
 8005482:	d101      	bne.n	8005488 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8005484:	2302      	movs	r3, #2
 8005486:	e018      	b.n	80054ba <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	7c1b      	ldrb	r3, [r3, #16]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d10a      	bne.n	80054a6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005490:	4b0d      	ldr	r3, [pc, #52]	; (80054c8 <USBD_CDC_Init+0x1e8>)
 8005492:	7819      	ldrb	r1, [r3, #0]
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800549a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	f005 f8e0 	bl	800a664 <USBD_LL_PrepareReceive>
 80054a4:	e008      	b.n	80054b8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80054a6:	4b08      	ldr	r3, [pc, #32]	; (80054c8 <USBD_CDC_Init+0x1e8>)
 80054a8:	7819      	ldrb	r1, [r3, #0]
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80054b0:	2340      	movs	r3, #64	; 0x40
 80054b2:	6878      	ldr	r0, [r7, #4]
 80054b4:	f005 f8d6 	bl	800a664 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80054b8:	2300      	movs	r3, #0
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	3710      	adds	r7, #16
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}
 80054c2:	bf00      	nop
 80054c4:	20000093 	.word	0x20000093
 80054c8:	20000094 	.word	0x20000094
 80054cc:	20000095 	.word	0x20000095

080054d0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b082      	sub	sp, #8
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
 80054d8:	460b      	mov	r3, r1
 80054da:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80054dc:	4b3a      	ldr	r3, [pc, #232]	; (80055c8 <USBD_CDC_DeInit+0xf8>)
 80054de:	781b      	ldrb	r3, [r3, #0]
 80054e0:	4619      	mov	r1, r3
 80054e2:	6878      	ldr	r0, [r7, #4]
 80054e4:	f004 fff5 	bl	800a4d2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80054e8:	4b37      	ldr	r3, [pc, #220]	; (80055c8 <USBD_CDC_DeInit+0xf8>)
 80054ea:	781b      	ldrb	r3, [r3, #0]
 80054ec:	f003 020f 	and.w	r2, r3, #15
 80054f0:	6879      	ldr	r1, [r7, #4]
 80054f2:	4613      	mov	r3, r2
 80054f4:	009b      	lsls	r3, r3, #2
 80054f6:	4413      	add	r3, r2
 80054f8:	009b      	lsls	r3, r3, #2
 80054fa:	440b      	add	r3, r1
 80054fc:	3324      	adds	r3, #36	; 0x24
 80054fe:	2200      	movs	r2, #0
 8005500:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8005502:	4b32      	ldr	r3, [pc, #200]	; (80055cc <USBD_CDC_DeInit+0xfc>)
 8005504:	781b      	ldrb	r3, [r3, #0]
 8005506:	4619      	mov	r1, r3
 8005508:	6878      	ldr	r0, [r7, #4]
 800550a:	f004 ffe2 	bl	800a4d2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800550e:	4b2f      	ldr	r3, [pc, #188]	; (80055cc <USBD_CDC_DeInit+0xfc>)
 8005510:	781b      	ldrb	r3, [r3, #0]
 8005512:	f003 020f 	and.w	r2, r3, #15
 8005516:	6879      	ldr	r1, [r7, #4]
 8005518:	4613      	mov	r3, r2
 800551a:	009b      	lsls	r3, r3, #2
 800551c:	4413      	add	r3, r2
 800551e:	009b      	lsls	r3, r3, #2
 8005520:	440b      	add	r3, r1
 8005522:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005526:	2200      	movs	r2, #0
 8005528:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800552a:	4b29      	ldr	r3, [pc, #164]	; (80055d0 <USBD_CDC_DeInit+0x100>)
 800552c:	781b      	ldrb	r3, [r3, #0]
 800552e:	4619      	mov	r1, r3
 8005530:	6878      	ldr	r0, [r7, #4]
 8005532:	f004 ffce 	bl	800a4d2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8005536:	4b26      	ldr	r3, [pc, #152]	; (80055d0 <USBD_CDC_DeInit+0x100>)
 8005538:	781b      	ldrb	r3, [r3, #0]
 800553a:	f003 020f 	and.w	r2, r3, #15
 800553e:	6879      	ldr	r1, [r7, #4]
 8005540:	4613      	mov	r3, r2
 8005542:	009b      	lsls	r3, r3, #2
 8005544:	4413      	add	r3, r2
 8005546:	009b      	lsls	r3, r3, #2
 8005548:	440b      	add	r3, r1
 800554a:	3324      	adds	r3, #36	; 0x24
 800554c:	2200      	movs	r2, #0
 800554e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8005550:	4b1f      	ldr	r3, [pc, #124]	; (80055d0 <USBD_CDC_DeInit+0x100>)
 8005552:	781b      	ldrb	r3, [r3, #0]
 8005554:	f003 020f 	and.w	r2, r3, #15
 8005558:	6879      	ldr	r1, [r7, #4]
 800555a:	4613      	mov	r3, r2
 800555c:	009b      	lsls	r3, r3, #2
 800555e:	4413      	add	r3, r2
 8005560:	009b      	lsls	r3, r3, #2
 8005562:	440b      	add	r3, r1
 8005564:	3326      	adds	r3, #38	; 0x26
 8005566:	2200      	movs	r2, #0
 8005568:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	32b0      	adds	r2, #176	; 0xb0
 8005574:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d01f      	beq.n	80055bc <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005582:	687a      	ldr	r2, [r7, #4]
 8005584:	33b0      	adds	r3, #176	; 0xb0
 8005586:	009b      	lsls	r3, r3, #2
 8005588:	4413      	add	r3, r2
 800558a:	685b      	ldr	r3, [r3, #4]
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	32b0      	adds	r2, #176	; 0xb0
 800559a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800559e:	4618      	mov	r0, r3
 80055a0:	f005 f8a2 	bl	800a6e8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	32b0      	adds	r2, #176	; 0xb0
 80055ae:	2100      	movs	r1, #0
 80055b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2200      	movs	r2, #0
 80055b8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80055bc:	2300      	movs	r3, #0
}
 80055be:	4618      	mov	r0, r3
 80055c0:	3708      	adds	r7, #8
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd80      	pop	{r7, pc}
 80055c6:	bf00      	nop
 80055c8:	20000093 	.word	0x20000093
 80055cc:	20000094 	.word	0x20000094
 80055d0:	20000095 	.word	0x20000095

080055d4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b086      	sub	sp, #24
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
 80055dc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	32b0      	adds	r2, #176	; 0xb0
 80055e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055ec:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80055ee:	2300      	movs	r3, #0
 80055f0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80055f2:	2300      	movs	r3, #0
 80055f4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80055f6:	2300      	movs	r3, #0
 80055f8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80055fa:	693b      	ldr	r3, [r7, #16]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d101      	bne.n	8005604 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8005600:	2303      	movs	r3, #3
 8005602:	e0bf      	b.n	8005784 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	781b      	ldrb	r3, [r3, #0]
 8005608:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800560c:	2b00      	cmp	r3, #0
 800560e:	d050      	beq.n	80056b2 <USBD_CDC_Setup+0xde>
 8005610:	2b20      	cmp	r3, #32
 8005612:	f040 80af 	bne.w	8005774 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	88db      	ldrh	r3, [r3, #6]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d03a      	beq.n	8005694 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	781b      	ldrb	r3, [r3, #0]
 8005622:	b25b      	sxtb	r3, r3
 8005624:	2b00      	cmp	r3, #0
 8005626:	da1b      	bge.n	8005660 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800562e:	687a      	ldr	r2, [r7, #4]
 8005630:	33b0      	adds	r3, #176	; 0xb0
 8005632:	009b      	lsls	r3, r3, #2
 8005634:	4413      	add	r3, r2
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	689b      	ldr	r3, [r3, #8]
 800563a:	683a      	ldr	r2, [r7, #0]
 800563c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800563e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005640:	683a      	ldr	r2, [r7, #0]
 8005642:	88d2      	ldrh	r2, [r2, #6]
 8005644:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	88db      	ldrh	r3, [r3, #6]
 800564a:	2b07      	cmp	r3, #7
 800564c:	bf28      	it	cs
 800564e:	2307      	movcs	r3, #7
 8005650:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005652:	693b      	ldr	r3, [r7, #16]
 8005654:	89fa      	ldrh	r2, [r7, #14]
 8005656:	4619      	mov	r1, r3
 8005658:	6878      	ldr	r0, [r7, #4]
 800565a:	f001 fd49 	bl	80070f0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800565e:	e090      	b.n	8005782 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	785a      	ldrb	r2, [r3, #1]
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	88db      	ldrh	r3, [r3, #6]
 800566e:	2b3f      	cmp	r3, #63	; 0x3f
 8005670:	d803      	bhi.n	800567a <USBD_CDC_Setup+0xa6>
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	88db      	ldrh	r3, [r3, #6]
 8005676:	b2da      	uxtb	r2, r3
 8005678:	e000      	b.n	800567c <USBD_CDC_Setup+0xa8>
 800567a:	2240      	movs	r2, #64	; 0x40
 800567c:	693b      	ldr	r3, [r7, #16]
 800567e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8005682:	6939      	ldr	r1, [r7, #16]
 8005684:	693b      	ldr	r3, [r7, #16]
 8005686:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800568a:	461a      	mov	r2, r3
 800568c:	6878      	ldr	r0, [r7, #4]
 800568e:	f001 fd5b 	bl	8007148 <USBD_CtlPrepareRx>
      break;
 8005692:	e076      	b.n	8005782 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800569a:	687a      	ldr	r2, [r7, #4]
 800569c:	33b0      	adds	r3, #176	; 0xb0
 800569e:	009b      	lsls	r3, r3, #2
 80056a0:	4413      	add	r3, r2
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	689b      	ldr	r3, [r3, #8]
 80056a6:	683a      	ldr	r2, [r7, #0]
 80056a8:	7850      	ldrb	r0, [r2, #1]
 80056aa:	2200      	movs	r2, #0
 80056ac:	6839      	ldr	r1, [r7, #0]
 80056ae:	4798      	blx	r3
      break;
 80056b0:	e067      	b.n	8005782 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	785b      	ldrb	r3, [r3, #1]
 80056b6:	2b0b      	cmp	r3, #11
 80056b8:	d851      	bhi.n	800575e <USBD_CDC_Setup+0x18a>
 80056ba:	a201      	add	r2, pc, #4	; (adr r2, 80056c0 <USBD_CDC_Setup+0xec>)
 80056bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056c0:	080056f1 	.word	0x080056f1
 80056c4:	0800576d 	.word	0x0800576d
 80056c8:	0800575f 	.word	0x0800575f
 80056cc:	0800575f 	.word	0x0800575f
 80056d0:	0800575f 	.word	0x0800575f
 80056d4:	0800575f 	.word	0x0800575f
 80056d8:	0800575f 	.word	0x0800575f
 80056dc:	0800575f 	.word	0x0800575f
 80056e0:	0800575f 	.word	0x0800575f
 80056e4:	0800575f 	.word	0x0800575f
 80056e8:	0800571b 	.word	0x0800571b
 80056ec:	08005745 	.word	0x08005745
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80056f6:	b2db      	uxtb	r3, r3
 80056f8:	2b03      	cmp	r3, #3
 80056fa:	d107      	bne.n	800570c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80056fc:	f107 030a 	add.w	r3, r7, #10
 8005700:	2202      	movs	r2, #2
 8005702:	4619      	mov	r1, r3
 8005704:	6878      	ldr	r0, [r7, #4]
 8005706:	f001 fcf3 	bl	80070f0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800570a:	e032      	b.n	8005772 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800570c:	6839      	ldr	r1, [r7, #0]
 800570e:	6878      	ldr	r0, [r7, #4]
 8005710:	f001 fc7d 	bl	800700e <USBD_CtlError>
            ret = USBD_FAIL;
 8005714:	2303      	movs	r3, #3
 8005716:	75fb      	strb	r3, [r7, #23]
          break;
 8005718:	e02b      	b.n	8005772 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005720:	b2db      	uxtb	r3, r3
 8005722:	2b03      	cmp	r3, #3
 8005724:	d107      	bne.n	8005736 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005726:	f107 030d 	add.w	r3, r7, #13
 800572a:	2201      	movs	r2, #1
 800572c:	4619      	mov	r1, r3
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	f001 fcde 	bl	80070f0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005734:	e01d      	b.n	8005772 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005736:	6839      	ldr	r1, [r7, #0]
 8005738:	6878      	ldr	r0, [r7, #4]
 800573a:	f001 fc68 	bl	800700e <USBD_CtlError>
            ret = USBD_FAIL;
 800573e:	2303      	movs	r3, #3
 8005740:	75fb      	strb	r3, [r7, #23]
          break;
 8005742:	e016      	b.n	8005772 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800574a:	b2db      	uxtb	r3, r3
 800574c:	2b03      	cmp	r3, #3
 800574e:	d00f      	beq.n	8005770 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8005750:	6839      	ldr	r1, [r7, #0]
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	f001 fc5b 	bl	800700e <USBD_CtlError>
            ret = USBD_FAIL;
 8005758:	2303      	movs	r3, #3
 800575a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800575c:	e008      	b.n	8005770 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800575e:	6839      	ldr	r1, [r7, #0]
 8005760:	6878      	ldr	r0, [r7, #4]
 8005762:	f001 fc54 	bl	800700e <USBD_CtlError>
          ret = USBD_FAIL;
 8005766:	2303      	movs	r3, #3
 8005768:	75fb      	strb	r3, [r7, #23]
          break;
 800576a:	e002      	b.n	8005772 <USBD_CDC_Setup+0x19e>
          break;
 800576c:	bf00      	nop
 800576e:	e008      	b.n	8005782 <USBD_CDC_Setup+0x1ae>
          break;
 8005770:	bf00      	nop
      }
      break;
 8005772:	e006      	b.n	8005782 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8005774:	6839      	ldr	r1, [r7, #0]
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	f001 fc49 	bl	800700e <USBD_CtlError>
      ret = USBD_FAIL;
 800577c:	2303      	movs	r3, #3
 800577e:	75fb      	strb	r3, [r7, #23]
      break;
 8005780:	bf00      	nop
  }

  return (uint8_t)ret;
 8005782:	7dfb      	ldrb	r3, [r7, #23]
}
 8005784:	4618      	mov	r0, r3
 8005786:	3718      	adds	r7, #24
 8005788:	46bd      	mov	sp, r7
 800578a:	bd80      	pop	{r7, pc}

0800578c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b084      	sub	sp, #16
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
 8005794:	460b      	mov	r3, r1
 8005796:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800579e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	32b0      	adds	r2, #176	; 0xb0
 80057aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d101      	bne.n	80057b6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80057b2:	2303      	movs	r3, #3
 80057b4:	e065      	b.n	8005882 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	32b0      	adds	r2, #176	; 0xb0
 80057c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057c4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80057c6:	78fb      	ldrb	r3, [r7, #3]
 80057c8:	f003 020f 	and.w	r2, r3, #15
 80057cc:	6879      	ldr	r1, [r7, #4]
 80057ce:	4613      	mov	r3, r2
 80057d0:	009b      	lsls	r3, r3, #2
 80057d2:	4413      	add	r3, r2
 80057d4:	009b      	lsls	r3, r3, #2
 80057d6:	440b      	add	r3, r1
 80057d8:	3318      	adds	r3, #24
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d02f      	beq.n	8005840 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80057e0:	78fb      	ldrb	r3, [r7, #3]
 80057e2:	f003 020f 	and.w	r2, r3, #15
 80057e6:	6879      	ldr	r1, [r7, #4]
 80057e8:	4613      	mov	r3, r2
 80057ea:	009b      	lsls	r3, r3, #2
 80057ec:	4413      	add	r3, r2
 80057ee:	009b      	lsls	r3, r3, #2
 80057f0:	440b      	add	r3, r1
 80057f2:	3318      	adds	r3, #24
 80057f4:	681a      	ldr	r2, [r3, #0]
 80057f6:	78fb      	ldrb	r3, [r7, #3]
 80057f8:	f003 010f 	and.w	r1, r3, #15
 80057fc:	68f8      	ldr	r0, [r7, #12]
 80057fe:	460b      	mov	r3, r1
 8005800:	00db      	lsls	r3, r3, #3
 8005802:	440b      	add	r3, r1
 8005804:	009b      	lsls	r3, r3, #2
 8005806:	4403      	add	r3, r0
 8005808:	331c      	adds	r3, #28
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	fbb2 f1f3 	udiv	r1, r2, r3
 8005810:	fb01 f303 	mul.w	r3, r1, r3
 8005814:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005816:	2b00      	cmp	r3, #0
 8005818:	d112      	bne.n	8005840 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800581a:	78fb      	ldrb	r3, [r7, #3]
 800581c:	f003 020f 	and.w	r2, r3, #15
 8005820:	6879      	ldr	r1, [r7, #4]
 8005822:	4613      	mov	r3, r2
 8005824:	009b      	lsls	r3, r3, #2
 8005826:	4413      	add	r3, r2
 8005828:	009b      	lsls	r3, r3, #2
 800582a:	440b      	add	r3, r1
 800582c:	3318      	adds	r3, #24
 800582e:	2200      	movs	r2, #0
 8005830:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005832:	78f9      	ldrb	r1, [r7, #3]
 8005834:	2300      	movs	r3, #0
 8005836:	2200      	movs	r2, #0
 8005838:	6878      	ldr	r0, [r7, #4]
 800583a:	f004 fef2 	bl	800a622 <USBD_LL_Transmit>
 800583e:	e01f      	b.n	8005880 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	2200      	movs	r2, #0
 8005844:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800584e:	687a      	ldr	r2, [r7, #4]
 8005850:	33b0      	adds	r3, #176	; 0xb0
 8005852:	009b      	lsls	r3, r3, #2
 8005854:	4413      	add	r3, r2
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	691b      	ldr	r3, [r3, #16]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d010      	beq.n	8005880 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005864:	687a      	ldr	r2, [r7, #4]
 8005866:	33b0      	adds	r3, #176	; 0xb0
 8005868:	009b      	lsls	r3, r3, #2
 800586a:	4413      	add	r3, r2
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	691b      	ldr	r3, [r3, #16]
 8005870:	68ba      	ldr	r2, [r7, #8]
 8005872:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005876:	68ba      	ldr	r2, [r7, #8]
 8005878:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800587c:	78fa      	ldrb	r2, [r7, #3]
 800587e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005880:	2300      	movs	r3, #0
}
 8005882:	4618      	mov	r0, r3
 8005884:	3710      	adds	r7, #16
 8005886:	46bd      	mov	sp, r7
 8005888:	bd80      	pop	{r7, pc}

0800588a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800588a:	b580      	push	{r7, lr}
 800588c:	b084      	sub	sp, #16
 800588e:	af00      	add	r7, sp, #0
 8005890:	6078      	str	r0, [r7, #4]
 8005892:	460b      	mov	r3, r1
 8005894:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	32b0      	adds	r2, #176	; 0xb0
 80058a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058a4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	32b0      	adds	r2, #176	; 0xb0
 80058b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d101      	bne.n	80058bc <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80058b8:	2303      	movs	r3, #3
 80058ba:	e01a      	b.n	80058f2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80058bc:	78fb      	ldrb	r3, [r7, #3]
 80058be:	4619      	mov	r1, r3
 80058c0:	6878      	ldr	r0, [r7, #4]
 80058c2:	f004 fef0 	bl	800a6a6 <USBD_LL_GetRxDataSize>
 80058c6:	4602      	mov	r2, r0
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80058d4:	687a      	ldr	r2, [r7, #4]
 80058d6:	33b0      	adds	r3, #176	; 0xb0
 80058d8:	009b      	lsls	r3, r3, #2
 80058da:	4413      	add	r3, r2
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	68db      	ldr	r3, [r3, #12]
 80058e0:	68fa      	ldr	r2, [r7, #12]
 80058e2:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80058e6:	68fa      	ldr	r2, [r7, #12]
 80058e8:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80058ec:	4611      	mov	r1, r2
 80058ee:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80058f0:	2300      	movs	r3, #0
}
 80058f2:	4618      	mov	r0, r3
 80058f4:	3710      	adds	r7, #16
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}

080058fa <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80058fa:	b580      	push	{r7, lr}
 80058fc:	b084      	sub	sp, #16
 80058fe:	af00      	add	r7, sp, #0
 8005900:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	32b0      	adds	r2, #176	; 0xb0
 800590c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005910:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d101      	bne.n	800591c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005918:	2303      	movs	r3, #3
 800591a:	e025      	b.n	8005968 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005922:	687a      	ldr	r2, [r7, #4]
 8005924:	33b0      	adds	r3, #176	; 0xb0
 8005926:	009b      	lsls	r3, r3, #2
 8005928:	4413      	add	r3, r2
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d01a      	beq.n	8005966 <USBD_CDC_EP0_RxReady+0x6c>
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005936:	2bff      	cmp	r3, #255	; 0xff
 8005938:	d015      	beq.n	8005966 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005940:	687a      	ldr	r2, [r7, #4]
 8005942:	33b0      	adds	r3, #176	; 0xb0
 8005944:	009b      	lsls	r3, r3, #2
 8005946:	4413      	add	r3, r2
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	689b      	ldr	r3, [r3, #8]
 800594c:	68fa      	ldr	r2, [r7, #12]
 800594e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8005952:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8005954:	68fa      	ldr	r2, [r7, #12]
 8005956:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800595a:	b292      	uxth	r2, r2
 800595c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	22ff      	movs	r2, #255	; 0xff
 8005962:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8005966:	2300      	movs	r3, #0
}
 8005968:	4618      	mov	r0, r3
 800596a:	3710      	adds	r7, #16
 800596c:	46bd      	mov	sp, r7
 800596e:	bd80      	pop	{r7, pc}

08005970 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b086      	sub	sp, #24
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005978:	2182      	movs	r1, #130	; 0x82
 800597a:	4818      	ldr	r0, [pc, #96]	; (80059dc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800597c:	f000 fd0f 	bl	800639e <USBD_GetEpDesc>
 8005980:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005982:	2101      	movs	r1, #1
 8005984:	4815      	ldr	r0, [pc, #84]	; (80059dc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005986:	f000 fd0a 	bl	800639e <USBD_GetEpDesc>
 800598a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800598c:	2181      	movs	r1, #129	; 0x81
 800598e:	4813      	ldr	r0, [pc, #76]	; (80059dc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005990:	f000 fd05 	bl	800639e <USBD_GetEpDesc>
 8005994:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d002      	beq.n	80059a2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800599c:	697b      	ldr	r3, [r7, #20]
 800599e:	2210      	movs	r2, #16
 80059a0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80059a2:	693b      	ldr	r3, [r7, #16]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d006      	beq.n	80059b6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80059a8:	693b      	ldr	r3, [r7, #16]
 80059aa:	2200      	movs	r2, #0
 80059ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80059b0:	711a      	strb	r2, [r3, #4]
 80059b2:	2200      	movs	r2, #0
 80059b4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d006      	beq.n	80059ca <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	2200      	movs	r2, #0
 80059c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80059c4:	711a      	strb	r2, [r3, #4]
 80059c6:	2200      	movs	r2, #0
 80059c8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2243      	movs	r2, #67	; 0x43
 80059ce:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80059d0:	4b02      	ldr	r3, [pc, #8]	; (80059dc <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	3718      	adds	r7, #24
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd80      	pop	{r7, pc}
 80059da:	bf00      	nop
 80059dc:	20000050 	.word	0x20000050

080059e0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b086      	sub	sp, #24
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80059e8:	2182      	movs	r1, #130	; 0x82
 80059ea:	4818      	ldr	r0, [pc, #96]	; (8005a4c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80059ec:	f000 fcd7 	bl	800639e <USBD_GetEpDesc>
 80059f0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80059f2:	2101      	movs	r1, #1
 80059f4:	4815      	ldr	r0, [pc, #84]	; (8005a4c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80059f6:	f000 fcd2 	bl	800639e <USBD_GetEpDesc>
 80059fa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80059fc:	2181      	movs	r1, #129	; 0x81
 80059fe:	4813      	ldr	r0, [pc, #76]	; (8005a4c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005a00:	f000 fccd 	bl	800639e <USBD_GetEpDesc>
 8005a04:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005a06:	697b      	ldr	r3, [r7, #20]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d002      	beq.n	8005a12 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8005a0c:	697b      	ldr	r3, [r7, #20]
 8005a0e:	2210      	movs	r2, #16
 8005a10:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005a12:	693b      	ldr	r3, [r7, #16]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d006      	beq.n	8005a26 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005a18:	693b      	ldr	r3, [r7, #16]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	711a      	strb	r2, [r3, #4]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	f042 0202 	orr.w	r2, r2, #2
 8005a24:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d006      	beq.n	8005a3a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	711a      	strb	r2, [r3, #4]
 8005a32:	2200      	movs	r2, #0
 8005a34:	f042 0202 	orr.w	r2, r2, #2
 8005a38:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2243      	movs	r2, #67	; 0x43
 8005a3e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005a40:	4b02      	ldr	r3, [pc, #8]	; (8005a4c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8005a42:	4618      	mov	r0, r3
 8005a44:	3718      	adds	r7, #24
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bd80      	pop	{r7, pc}
 8005a4a:	bf00      	nop
 8005a4c:	20000050 	.word	0x20000050

08005a50 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b086      	sub	sp, #24
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005a58:	2182      	movs	r1, #130	; 0x82
 8005a5a:	4818      	ldr	r0, [pc, #96]	; (8005abc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005a5c:	f000 fc9f 	bl	800639e <USBD_GetEpDesc>
 8005a60:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005a62:	2101      	movs	r1, #1
 8005a64:	4815      	ldr	r0, [pc, #84]	; (8005abc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005a66:	f000 fc9a 	bl	800639e <USBD_GetEpDesc>
 8005a6a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005a6c:	2181      	movs	r1, #129	; 0x81
 8005a6e:	4813      	ldr	r0, [pc, #76]	; (8005abc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005a70:	f000 fc95 	bl	800639e <USBD_GetEpDesc>
 8005a74:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d002      	beq.n	8005a82 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005a7c:	697b      	ldr	r3, [r7, #20]
 8005a7e:	2210      	movs	r2, #16
 8005a80:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005a82:	693b      	ldr	r3, [r7, #16]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d006      	beq.n	8005a96 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005a88:	693b      	ldr	r3, [r7, #16]
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a90:	711a      	strb	r2, [r3, #4]
 8005a92:	2200      	movs	r2, #0
 8005a94:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d006      	beq.n	8005aaa <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005aa4:	711a      	strb	r2, [r3, #4]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2243      	movs	r2, #67	; 0x43
 8005aae:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005ab0:	4b02      	ldr	r3, [pc, #8]	; (8005abc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	3718      	adds	r7, #24
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	bd80      	pop	{r7, pc}
 8005aba:	bf00      	nop
 8005abc:	20000050 	.word	0x20000050

08005ac0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	b083      	sub	sp, #12
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	220a      	movs	r2, #10
 8005acc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005ace:	4b03      	ldr	r3, [pc, #12]	; (8005adc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	370c      	adds	r7, #12
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ada:	4770      	bx	lr
 8005adc:	2000000c 	.word	0x2000000c

08005ae0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b083      	sub	sp, #12
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
 8005ae8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d101      	bne.n	8005af4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005af0:	2303      	movs	r3, #3
 8005af2:	e009      	b.n	8005b08 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005afa:	687a      	ldr	r2, [r7, #4]
 8005afc:	33b0      	adds	r3, #176	; 0xb0
 8005afe:	009b      	lsls	r3, r3, #2
 8005b00:	4413      	add	r3, r2
 8005b02:	683a      	ldr	r2, [r7, #0]
 8005b04:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8005b06:	2300      	movs	r3, #0
}
 8005b08:	4618      	mov	r0, r3
 8005b0a:	370c      	adds	r7, #12
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b12:	4770      	bx	lr

08005b14 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005b14:	b480      	push	{r7}
 8005b16:	b087      	sub	sp, #28
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	60f8      	str	r0, [r7, #12]
 8005b1c:	60b9      	str	r1, [r7, #8]
 8005b1e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	32b0      	adds	r2, #176	; 0xb0
 8005b2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b2e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8005b30:	697b      	ldr	r3, [r7, #20]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d101      	bne.n	8005b3a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8005b36:	2303      	movs	r3, #3
 8005b38:	e008      	b.n	8005b4c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8005b3a:	697b      	ldr	r3, [r7, #20]
 8005b3c:	68ba      	ldr	r2, [r7, #8]
 8005b3e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	687a      	ldr	r2, [r7, #4]
 8005b46:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005b4a:	2300      	movs	r3, #0
}
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	371c      	adds	r7, #28
 8005b50:	46bd      	mov	sp, r7
 8005b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b56:	4770      	bx	lr

08005b58 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b085      	sub	sp, #20
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
 8005b60:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	32b0      	adds	r2, #176	; 0xb0
 8005b6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b70:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d101      	bne.n	8005b7c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8005b78:	2303      	movs	r3, #3
 8005b7a:	e004      	b.n	8005b86 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	683a      	ldr	r2, [r7, #0]
 8005b80:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005b84:	2300      	movs	r3, #0
}
 8005b86:	4618      	mov	r0, r3
 8005b88:	3714      	adds	r7, #20
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b90:	4770      	bx	lr
	...

08005b94 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b084      	sub	sp, #16
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	32b0      	adds	r2, #176	; 0xb0
 8005ba6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005baa:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	32b0      	adds	r2, #176	; 0xb0
 8005bb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d101      	bne.n	8005bc2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8005bbe:	2303      	movs	r3, #3
 8005bc0:	e018      	b.n	8005bf4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	7c1b      	ldrb	r3, [r3, #16]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d10a      	bne.n	8005be0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005bca:	4b0c      	ldr	r3, [pc, #48]	; (8005bfc <USBD_CDC_ReceivePacket+0x68>)
 8005bcc:	7819      	ldrb	r1, [r3, #0]
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005bd4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005bd8:	6878      	ldr	r0, [r7, #4]
 8005bda:	f004 fd43 	bl	800a664 <USBD_LL_PrepareReceive>
 8005bde:	e008      	b.n	8005bf2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005be0:	4b06      	ldr	r3, [pc, #24]	; (8005bfc <USBD_CDC_ReceivePacket+0x68>)
 8005be2:	7819      	ldrb	r1, [r3, #0]
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005bea:	2340      	movs	r3, #64	; 0x40
 8005bec:	6878      	ldr	r0, [r7, #4]
 8005bee:	f004 fd39 	bl	800a664 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005bf2:	2300      	movs	r3, #0
}
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	3710      	adds	r7, #16
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	bd80      	pop	{r7, pc}
 8005bfc:	20000094 	.word	0x20000094

08005c00 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b086      	sub	sp, #24
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	60f8      	str	r0, [r7, #12]
 8005c08:	60b9      	str	r1, [r7, #8]
 8005c0a:	4613      	mov	r3, r2
 8005c0c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d101      	bne.n	8005c18 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005c14:	2303      	movs	r3, #3
 8005c16:	e01f      	b.n	8005c58 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	2200      	movs	r2, #0
 8005c24:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d003      	beq.n	8005c3e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	68ba      	ldr	r2, [r7, #8]
 8005c3a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	2201      	movs	r2, #1
 8005c42:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	79fa      	ldrb	r2, [r7, #7]
 8005c4a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005c4c:	68f8      	ldr	r0, [r7, #12]
 8005c4e:	f004 fbb3 	bl	800a3b8 <USBD_LL_Init>
 8005c52:	4603      	mov	r3, r0
 8005c54:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005c56:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c58:	4618      	mov	r0, r3
 8005c5a:	3718      	adds	r7, #24
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	bd80      	pop	{r7, pc}

08005c60 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b084      	sub	sp, #16
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
 8005c68:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d101      	bne.n	8005c78 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005c74:	2303      	movs	r3, #3
 8005c76:	e025      	b.n	8005cc4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	683a      	ldr	r2, [r7, #0]
 8005c7c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	32ae      	adds	r2, #174	; 0xae
 8005c8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d00f      	beq.n	8005cb4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	32ae      	adds	r2, #174	; 0xae
 8005c9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ca4:	f107 020e 	add.w	r2, r7, #14
 8005ca8:	4610      	mov	r0, r2
 8005caa:	4798      	blx	r3
 8005cac:	4602      	mov	r2, r0
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8005cba:	1c5a      	adds	r2, r3, #1
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8005cc2:	2300      	movs	r3, #0
}
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	3710      	adds	r7, #16
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	bd80      	pop	{r7, pc}

08005ccc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b082      	sub	sp, #8
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005cd4:	6878      	ldr	r0, [r7, #4]
 8005cd6:	f004 fbbb 	bl	800a450 <USBD_LL_Start>
 8005cda:	4603      	mov	r3, r0
}
 8005cdc:	4618      	mov	r0, r3
 8005cde:	3708      	adds	r7, #8
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	bd80      	pop	{r7, pc}

08005ce4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b083      	sub	sp, #12
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005cec:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8005cee:	4618      	mov	r0, r3
 8005cf0:	370c      	adds	r7, #12
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf8:	4770      	bx	lr

08005cfa <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005cfa:	b580      	push	{r7, lr}
 8005cfc:	b084      	sub	sp, #16
 8005cfe:	af00      	add	r7, sp, #0
 8005d00:	6078      	str	r0, [r7, #4]
 8005d02:	460b      	mov	r3, r1
 8005d04:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005d06:	2300      	movs	r3, #0
 8005d08:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d009      	beq.n	8005d28 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	78fa      	ldrb	r2, [r7, #3]
 8005d1e:	4611      	mov	r1, r2
 8005d20:	6878      	ldr	r0, [r7, #4]
 8005d22:	4798      	blx	r3
 8005d24:	4603      	mov	r3, r0
 8005d26:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005d28:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	3710      	adds	r7, #16
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bd80      	pop	{r7, pc}

08005d32 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005d32:	b580      	push	{r7, lr}
 8005d34:	b084      	sub	sp, #16
 8005d36:	af00      	add	r7, sp, #0
 8005d38:	6078      	str	r0, [r7, #4]
 8005d3a:	460b      	mov	r3, r1
 8005d3c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005d3e:	2300      	movs	r3, #0
 8005d40:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d48:	685b      	ldr	r3, [r3, #4]
 8005d4a:	78fa      	ldrb	r2, [r7, #3]
 8005d4c:	4611      	mov	r1, r2
 8005d4e:	6878      	ldr	r0, [r7, #4]
 8005d50:	4798      	blx	r3
 8005d52:	4603      	mov	r3, r0
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d001      	beq.n	8005d5c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005d58:	2303      	movs	r3, #3
 8005d5a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005d5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d5e:	4618      	mov	r0, r3
 8005d60:	3710      	adds	r7, #16
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bd80      	pop	{r7, pc}

08005d66 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005d66:	b580      	push	{r7, lr}
 8005d68:	b084      	sub	sp, #16
 8005d6a:	af00      	add	r7, sp, #0
 8005d6c:	6078      	str	r0, [r7, #4]
 8005d6e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005d76:	6839      	ldr	r1, [r7, #0]
 8005d78:	4618      	mov	r0, r3
 8005d7a:	f001 f90e 	bl	8006f9a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2201      	movs	r2, #1
 8005d82:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005d8c:	461a      	mov	r2, r3
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005d9a:	f003 031f 	and.w	r3, r3, #31
 8005d9e:	2b02      	cmp	r3, #2
 8005da0:	d01a      	beq.n	8005dd8 <USBD_LL_SetupStage+0x72>
 8005da2:	2b02      	cmp	r3, #2
 8005da4:	d822      	bhi.n	8005dec <USBD_LL_SetupStage+0x86>
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d002      	beq.n	8005db0 <USBD_LL_SetupStage+0x4a>
 8005daa:	2b01      	cmp	r3, #1
 8005dac:	d00a      	beq.n	8005dc4 <USBD_LL_SetupStage+0x5e>
 8005dae:	e01d      	b.n	8005dec <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005db6:	4619      	mov	r1, r3
 8005db8:	6878      	ldr	r0, [r7, #4]
 8005dba:	f000 fb65 	bl	8006488 <USBD_StdDevReq>
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	73fb      	strb	r3, [r7, #15]
      break;
 8005dc2:	e020      	b.n	8005e06 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005dca:	4619      	mov	r1, r3
 8005dcc:	6878      	ldr	r0, [r7, #4]
 8005dce:	f000 fbcd 	bl	800656c <USBD_StdItfReq>
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	73fb      	strb	r3, [r7, #15]
      break;
 8005dd6:	e016      	b.n	8005e06 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005dde:	4619      	mov	r1, r3
 8005de0:	6878      	ldr	r0, [r7, #4]
 8005de2:	f000 fc2f 	bl	8006644 <USBD_StdEPReq>
 8005de6:	4603      	mov	r3, r0
 8005de8:	73fb      	strb	r3, [r7, #15]
      break;
 8005dea:	e00c      	b.n	8005e06 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005df2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005df6:	b2db      	uxtb	r3, r3
 8005df8:	4619      	mov	r1, r3
 8005dfa:	6878      	ldr	r0, [r7, #4]
 8005dfc:	f004 fb88 	bl	800a510 <USBD_LL_StallEP>
 8005e00:	4603      	mov	r3, r0
 8005e02:	73fb      	strb	r3, [r7, #15]
      break;
 8005e04:	bf00      	nop
  }

  return ret;
 8005e06:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e08:	4618      	mov	r0, r3
 8005e0a:	3710      	adds	r7, #16
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	bd80      	pop	{r7, pc}

08005e10 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b086      	sub	sp, #24
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	60f8      	str	r0, [r7, #12]
 8005e18:	460b      	mov	r3, r1
 8005e1a:	607a      	str	r2, [r7, #4]
 8005e1c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8005e1e:	2300      	movs	r3, #0
 8005e20:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8005e22:	7afb      	ldrb	r3, [r7, #11]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d16e      	bne.n	8005f06 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005e2e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005e36:	2b03      	cmp	r3, #3
 8005e38:	f040 8098 	bne.w	8005f6c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8005e3c:	693b      	ldr	r3, [r7, #16]
 8005e3e:	689a      	ldr	r2, [r3, #8]
 8005e40:	693b      	ldr	r3, [r7, #16]
 8005e42:	68db      	ldr	r3, [r3, #12]
 8005e44:	429a      	cmp	r2, r3
 8005e46:	d913      	bls.n	8005e70 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8005e48:	693b      	ldr	r3, [r7, #16]
 8005e4a:	689a      	ldr	r2, [r3, #8]
 8005e4c:	693b      	ldr	r3, [r7, #16]
 8005e4e:	68db      	ldr	r3, [r3, #12]
 8005e50:	1ad2      	subs	r2, r2, r3
 8005e52:	693b      	ldr	r3, [r7, #16]
 8005e54:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005e56:	693b      	ldr	r3, [r7, #16]
 8005e58:	68da      	ldr	r2, [r3, #12]
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	689b      	ldr	r3, [r3, #8]
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	bf28      	it	cs
 8005e62:	4613      	movcs	r3, r2
 8005e64:	461a      	mov	r2, r3
 8005e66:	6879      	ldr	r1, [r7, #4]
 8005e68:	68f8      	ldr	r0, [r7, #12]
 8005e6a:	f001 f98a 	bl	8007182 <USBD_CtlContinueRx>
 8005e6e:	e07d      	b.n	8005f6c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005e76:	f003 031f 	and.w	r3, r3, #31
 8005e7a:	2b02      	cmp	r3, #2
 8005e7c:	d014      	beq.n	8005ea8 <USBD_LL_DataOutStage+0x98>
 8005e7e:	2b02      	cmp	r3, #2
 8005e80:	d81d      	bhi.n	8005ebe <USBD_LL_DataOutStage+0xae>
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d002      	beq.n	8005e8c <USBD_LL_DataOutStage+0x7c>
 8005e86:	2b01      	cmp	r3, #1
 8005e88:	d003      	beq.n	8005e92 <USBD_LL_DataOutStage+0x82>
 8005e8a:	e018      	b.n	8005ebe <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	75bb      	strb	r3, [r7, #22]
            break;
 8005e90:	e018      	b.n	8005ec4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005e98:	b2db      	uxtb	r3, r3
 8005e9a:	4619      	mov	r1, r3
 8005e9c:	68f8      	ldr	r0, [r7, #12]
 8005e9e:	f000 fa64 	bl	800636a <USBD_CoreFindIF>
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	75bb      	strb	r3, [r7, #22]
            break;
 8005ea6:	e00d      	b.n	8005ec4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005eae:	b2db      	uxtb	r3, r3
 8005eb0:	4619      	mov	r1, r3
 8005eb2:	68f8      	ldr	r0, [r7, #12]
 8005eb4:	f000 fa66 	bl	8006384 <USBD_CoreFindEP>
 8005eb8:	4603      	mov	r3, r0
 8005eba:	75bb      	strb	r3, [r7, #22]
            break;
 8005ebc:	e002      	b.n	8005ec4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	75bb      	strb	r3, [r7, #22]
            break;
 8005ec2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8005ec4:	7dbb      	ldrb	r3, [r7, #22]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d119      	bne.n	8005efe <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ed0:	b2db      	uxtb	r3, r3
 8005ed2:	2b03      	cmp	r3, #3
 8005ed4:	d113      	bne.n	8005efe <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8005ed6:	7dba      	ldrb	r2, [r7, #22]
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	32ae      	adds	r2, #174	; 0xae
 8005edc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ee0:	691b      	ldr	r3, [r3, #16]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d00b      	beq.n	8005efe <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8005ee6:	7dba      	ldrb	r2, [r7, #22]
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8005eee:	7dba      	ldrb	r2, [r7, #22]
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	32ae      	adds	r2, #174	; 0xae
 8005ef4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ef8:	691b      	ldr	r3, [r3, #16]
 8005efa:	68f8      	ldr	r0, [r7, #12]
 8005efc:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005efe:	68f8      	ldr	r0, [r7, #12]
 8005f00:	f001 f950 	bl	80071a4 <USBD_CtlSendStatus>
 8005f04:	e032      	b.n	8005f6c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8005f06:	7afb      	ldrb	r3, [r7, #11]
 8005f08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f0c:	b2db      	uxtb	r3, r3
 8005f0e:	4619      	mov	r1, r3
 8005f10:	68f8      	ldr	r0, [r7, #12]
 8005f12:	f000 fa37 	bl	8006384 <USBD_CoreFindEP>
 8005f16:	4603      	mov	r3, r0
 8005f18:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005f1a:	7dbb      	ldrb	r3, [r7, #22]
 8005f1c:	2bff      	cmp	r3, #255	; 0xff
 8005f1e:	d025      	beq.n	8005f6c <USBD_LL_DataOutStage+0x15c>
 8005f20:	7dbb      	ldrb	r3, [r7, #22]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d122      	bne.n	8005f6c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f2c:	b2db      	uxtb	r3, r3
 8005f2e:	2b03      	cmp	r3, #3
 8005f30:	d117      	bne.n	8005f62 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8005f32:	7dba      	ldrb	r2, [r7, #22]
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	32ae      	adds	r2, #174	; 0xae
 8005f38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f3c:	699b      	ldr	r3, [r3, #24]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d00f      	beq.n	8005f62 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8005f42:	7dba      	ldrb	r2, [r7, #22]
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8005f4a:	7dba      	ldrb	r2, [r7, #22]
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	32ae      	adds	r2, #174	; 0xae
 8005f50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f54:	699b      	ldr	r3, [r3, #24]
 8005f56:	7afa      	ldrb	r2, [r7, #11]
 8005f58:	4611      	mov	r1, r2
 8005f5a:	68f8      	ldr	r0, [r7, #12]
 8005f5c:	4798      	blx	r3
 8005f5e:	4603      	mov	r3, r0
 8005f60:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8005f62:	7dfb      	ldrb	r3, [r7, #23]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d001      	beq.n	8005f6c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8005f68:	7dfb      	ldrb	r3, [r7, #23]
 8005f6a:	e000      	b.n	8005f6e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8005f6c:	2300      	movs	r3, #0
}
 8005f6e:	4618      	mov	r0, r3
 8005f70:	3718      	adds	r7, #24
 8005f72:	46bd      	mov	sp, r7
 8005f74:	bd80      	pop	{r7, pc}

08005f76 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005f76:	b580      	push	{r7, lr}
 8005f78:	b086      	sub	sp, #24
 8005f7a:	af00      	add	r7, sp, #0
 8005f7c:	60f8      	str	r0, [r7, #12]
 8005f7e:	460b      	mov	r3, r1
 8005f80:	607a      	str	r2, [r7, #4]
 8005f82:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8005f84:	7afb      	ldrb	r3, [r7, #11]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d16f      	bne.n	800606a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	3314      	adds	r3, #20
 8005f8e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005f96:	2b02      	cmp	r3, #2
 8005f98:	d15a      	bne.n	8006050 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8005f9a:	693b      	ldr	r3, [r7, #16]
 8005f9c:	689a      	ldr	r2, [r3, #8]
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	68db      	ldr	r3, [r3, #12]
 8005fa2:	429a      	cmp	r2, r3
 8005fa4:	d914      	bls.n	8005fd0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005fa6:	693b      	ldr	r3, [r7, #16]
 8005fa8:	689a      	ldr	r2, [r3, #8]
 8005faa:	693b      	ldr	r3, [r7, #16]
 8005fac:	68db      	ldr	r3, [r3, #12]
 8005fae:	1ad2      	subs	r2, r2, r3
 8005fb0:	693b      	ldr	r3, [r7, #16]
 8005fb2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005fb4:	693b      	ldr	r3, [r7, #16]
 8005fb6:	689b      	ldr	r3, [r3, #8]
 8005fb8:	461a      	mov	r2, r3
 8005fba:	6879      	ldr	r1, [r7, #4]
 8005fbc:	68f8      	ldr	r0, [r7, #12]
 8005fbe:	f001 f8b2 	bl	8007126 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	2100      	movs	r1, #0
 8005fc8:	68f8      	ldr	r0, [r7, #12]
 8005fca:	f004 fb4b 	bl	800a664 <USBD_LL_PrepareReceive>
 8005fce:	e03f      	b.n	8006050 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005fd0:	693b      	ldr	r3, [r7, #16]
 8005fd2:	68da      	ldr	r2, [r3, #12]
 8005fd4:	693b      	ldr	r3, [r7, #16]
 8005fd6:	689b      	ldr	r3, [r3, #8]
 8005fd8:	429a      	cmp	r2, r3
 8005fda:	d11c      	bne.n	8006016 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005fdc:	693b      	ldr	r3, [r7, #16]
 8005fde:	685a      	ldr	r2, [r3, #4]
 8005fe0:	693b      	ldr	r3, [r7, #16]
 8005fe2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005fe4:	429a      	cmp	r2, r3
 8005fe6:	d316      	bcc.n	8006016 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005fe8:	693b      	ldr	r3, [r7, #16]
 8005fea:	685a      	ldr	r2, [r3, #4]
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005ff2:	429a      	cmp	r2, r3
 8005ff4:	d20f      	bcs.n	8006016 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	2100      	movs	r1, #0
 8005ffa:	68f8      	ldr	r0, [r7, #12]
 8005ffc:	f001 f893 	bl	8007126 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	2200      	movs	r2, #0
 8006004:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006008:	2300      	movs	r3, #0
 800600a:	2200      	movs	r2, #0
 800600c:	2100      	movs	r1, #0
 800600e:	68f8      	ldr	r0, [r7, #12]
 8006010:	f004 fb28 	bl	800a664 <USBD_LL_PrepareReceive>
 8006014:	e01c      	b.n	8006050 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800601c:	b2db      	uxtb	r3, r3
 800601e:	2b03      	cmp	r3, #3
 8006020:	d10f      	bne.n	8006042 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006028:	68db      	ldr	r3, [r3, #12]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d009      	beq.n	8006042 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	2200      	movs	r2, #0
 8006032:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800603c:	68db      	ldr	r3, [r3, #12]
 800603e:	68f8      	ldr	r0, [r7, #12]
 8006040:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006042:	2180      	movs	r1, #128	; 0x80
 8006044:	68f8      	ldr	r0, [r7, #12]
 8006046:	f004 fa63 	bl	800a510 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800604a:	68f8      	ldr	r0, [r7, #12]
 800604c:	f001 f8bd 	bl	80071ca <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006056:	2b00      	cmp	r3, #0
 8006058:	d03a      	beq.n	80060d0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800605a:	68f8      	ldr	r0, [r7, #12]
 800605c:	f7ff fe42 	bl	8005ce4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	2200      	movs	r2, #0
 8006064:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006068:	e032      	b.n	80060d0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800606a:	7afb      	ldrb	r3, [r7, #11]
 800606c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006070:	b2db      	uxtb	r3, r3
 8006072:	4619      	mov	r1, r3
 8006074:	68f8      	ldr	r0, [r7, #12]
 8006076:	f000 f985 	bl	8006384 <USBD_CoreFindEP>
 800607a:	4603      	mov	r3, r0
 800607c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800607e:	7dfb      	ldrb	r3, [r7, #23]
 8006080:	2bff      	cmp	r3, #255	; 0xff
 8006082:	d025      	beq.n	80060d0 <USBD_LL_DataInStage+0x15a>
 8006084:	7dfb      	ldrb	r3, [r7, #23]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d122      	bne.n	80060d0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006090:	b2db      	uxtb	r3, r3
 8006092:	2b03      	cmp	r3, #3
 8006094:	d11c      	bne.n	80060d0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006096:	7dfa      	ldrb	r2, [r7, #23]
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	32ae      	adds	r2, #174	; 0xae
 800609c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060a0:	695b      	ldr	r3, [r3, #20]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d014      	beq.n	80060d0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80060a6:	7dfa      	ldrb	r2, [r7, #23]
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80060ae:	7dfa      	ldrb	r2, [r7, #23]
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	32ae      	adds	r2, #174	; 0xae
 80060b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060b8:	695b      	ldr	r3, [r3, #20]
 80060ba:	7afa      	ldrb	r2, [r7, #11]
 80060bc:	4611      	mov	r1, r2
 80060be:	68f8      	ldr	r0, [r7, #12]
 80060c0:	4798      	blx	r3
 80060c2:	4603      	mov	r3, r0
 80060c4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80060c6:	7dbb      	ldrb	r3, [r7, #22]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d001      	beq.n	80060d0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80060cc:	7dbb      	ldrb	r3, [r7, #22]
 80060ce:	e000      	b.n	80060d2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80060d0:	2300      	movs	r3, #0
}
 80060d2:	4618      	mov	r0, r3
 80060d4:	3718      	adds	r7, #24
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bd80      	pop	{r7, pc}

080060da <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80060da:	b580      	push	{r7, lr}
 80060dc:	b084      	sub	sp, #16
 80060de:	af00      	add	r7, sp, #0
 80060e0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80060e2:	2300      	movs	r3, #0
 80060e4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2201      	movs	r2, #1
 80060ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2200      	movs	r2, #0
 80060f2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2200      	movs	r2, #0
 80060fa:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2200      	movs	r2, #0
 8006100:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2200      	movs	r2, #0
 8006108:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006112:	2b00      	cmp	r3, #0
 8006114:	d014      	beq.n	8006140 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800611c:	685b      	ldr	r3, [r3, #4]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d00e      	beq.n	8006140 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006128:	685b      	ldr	r3, [r3, #4]
 800612a:	687a      	ldr	r2, [r7, #4]
 800612c:	6852      	ldr	r2, [r2, #4]
 800612e:	b2d2      	uxtb	r2, r2
 8006130:	4611      	mov	r1, r2
 8006132:	6878      	ldr	r0, [r7, #4]
 8006134:	4798      	blx	r3
 8006136:	4603      	mov	r3, r0
 8006138:	2b00      	cmp	r3, #0
 800613a:	d001      	beq.n	8006140 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800613c:	2303      	movs	r3, #3
 800613e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006140:	2340      	movs	r3, #64	; 0x40
 8006142:	2200      	movs	r2, #0
 8006144:	2100      	movs	r1, #0
 8006146:	6878      	ldr	r0, [r7, #4]
 8006148:	f004 f99d 	bl	800a486 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2201      	movs	r2, #1
 8006150:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2240      	movs	r2, #64	; 0x40
 8006158:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800615c:	2340      	movs	r3, #64	; 0x40
 800615e:	2200      	movs	r2, #0
 8006160:	2180      	movs	r1, #128	; 0x80
 8006162:	6878      	ldr	r0, [r7, #4]
 8006164:	f004 f98f 	bl	800a486 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2201      	movs	r2, #1
 800616c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2240      	movs	r2, #64	; 0x40
 8006172:	621a      	str	r2, [r3, #32]

  return ret;
 8006174:	7bfb      	ldrb	r3, [r7, #15]
}
 8006176:	4618      	mov	r0, r3
 8006178:	3710      	adds	r7, #16
 800617a:	46bd      	mov	sp, r7
 800617c:	bd80      	pop	{r7, pc}

0800617e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800617e:	b480      	push	{r7}
 8006180:	b083      	sub	sp, #12
 8006182:	af00      	add	r7, sp, #0
 8006184:	6078      	str	r0, [r7, #4]
 8006186:	460b      	mov	r3, r1
 8006188:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	78fa      	ldrb	r2, [r7, #3]
 800618e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006190:	2300      	movs	r3, #0
}
 8006192:	4618      	mov	r0, r3
 8006194:	370c      	adds	r7, #12
 8006196:	46bd      	mov	sp, r7
 8006198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619c:	4770      	bx	lr

0800619e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800619e:	b480      	push	{r7}
 80061a0:	b083      	sub	sp, #12
 80061a2:	af00      	add	r7, sp, #0
 80061a4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061ac:	b2db      	uxtb	r3, r3
 80061ae:	2b04      	cmp	r3, #4
 80061b0:	d006      	beq.n	80061c0 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061b8:	b2da      	uxtb	r2, r3
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2204      	movs	r2, #4
 80061c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80061c8:	2300      	movs	r3, #0
}
 80061ca:	4618      	mov	r0, r3
 80061cc:	370c      	adds	r7, #12
 80061ce:	46bd      	mov	sp, r7
 80061d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d4:	4770      	bx	lr

080061d6 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80061d6:	b480      	push	{r7}
 80061d8:	b083      	sub	sp, #12
 80061da:	af00      	add	r7, sp, #0
 80061dc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061e4:	b2db      	uxtb	r3, r3
 80061e6:	2b04      	cmp	r3, #4
 80061e8:	d106      	bne.n	80061f8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80061f0:	b2da      	uxtb	r2, r3
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80061f8:	2300      	movs	r3, #0
}
 80061fa:	4618      	mov	r0, r3
 80061fc:	370c      	adds	r7, #12
 80061fe:	46bd      	mov	sp, r7
 8006200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006204:	4770      	bx	lr

08006206 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006206:	b580      	push	{r7, lr}
 8006208:	b082      	sub	sp, #8
 800620a:	af00      	add	r7, sp, #0
 800620c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006214:	b2db      	uxtb	r3, r3
 8006216:	2b03      	cmp	r3, #3
 8006218:	d110      	bne.n	800623c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006220:	2b00      	cmp	r3, #0
 8006222:	d00b      	beq.n	800623c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800622a:	69db      	ldr	r3, [r3, #28]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d005      	beq.n	800623c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006236:	69db      	ldr	r3, [r3, #28]
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800623c:	2300      	movs	r3, #0
}
 800623e:	4618      	mov	r0, r3
 8006240:	3708      	adds	r7, #8
 8006242:	46bd      	mov	sp, r7
 8006244:	bd80      	pop	{r7, pc}

08006246 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006246:	b580      	push	{r7, lr}
 8006248:	b082      	sub	sp, #8
 800624a:	af00      	add	r7, sp, #0
 800624c:	6078      	str	r0, [r7, #4]
 800624e:	460b      	mov	r3, r1
 8006250:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	32ae      	adds	r2, #174	; 0xae
 800625c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d101      	bne.n	8006268 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006264:	2303      	movs	r3, #3
 8006266:	e01c      	b.n	80062a2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800626e:	b2db      	uxtb	r3, r3
 8006270:	2b03      	cmp	r3, #3
 8006272:	d115      	bne.n	80062a0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	32ae      	adds	r2, #174	; 0xae
 800627e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006282:	6a1b      	ldr	r3, [r3, #32]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d00b      	beq.n	80062a0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	32ae      	adds	r2, #174	; 0xae
 8006292:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006296:	6a1b      	ldr	r3, [r3, #32]
 8006298:	78fa      	ldrb	r2, [r7, #3]
 800629a:	4611      	mov	r1, r2
 800629c:	6878      	ldr	r0, [r7, #4]
 800629e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80062a0:	2300      	movs	r3, #0
}
 80062a2:	4618      	mov	r0, r3
 80062a4:	3708      	adds	r7, #8
 80062a6:	46bd      	mov	sp, r7
 80062a8:	bd80      	pop	{r7, pc}

080062aa <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80062aa:	b580      	push	{r7, lr}
 80062ac:	b082      	sub	sp, #8
 80062ae:	af00      	add	r7, sp, #0
 80062b0:	6078      	str	r0, [r7, #4]
 80062b2:	460b      	mov	r3, r1
 80062b4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	32ae      	adds	r2, #174	; 0xae
 80062c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d101      	bne.n	80062cc <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80062c8:	2303      	movs	r3, #3
 80062ca:	e01c      	b.n	8006306 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062d2:	b2db      	uxtb	r3, r3
 80062d4:	2b03      	cmp	r3, #3
 80062d6:	d115      	bne.n	8006304 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	32ae      	adds	r2, #174	; 0xae
 80062e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d00b      	beq.n	8006304 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	32ae      	adds	r2, #174	; 0xae
 80062f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062fc:	78fa      	ldrb	r2, [r7, #3]
 80062fe:	4611      	mov	r1, r2
 8006300:	6878      	ldr	r0, [r7, #4]
 8006302:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006304:	2300      	movs	r3, #0
}
 8006306:	4618      	mov	r0, r3
 8006308:	3708      	adds	r7, #8
 800630a:	46bd      	mov	sp, r7
 800630c:	bd80      	pop	{r7, pc}

0800630e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800630e:	b480      	push	{r7}
 8006310:	b083      	sub	sp, #12
 8006312:	af00      	add	r7, sp, #0
 8006314:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006316:	2300      	movs	r3, #0
}
 8006318:	4618      	mov	r0, r3
 800631a:	370c      	adds	r7, #12
 800631c:	46bd      	mov	sp, r7
 800631e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006322:	4770      	bx	lr

08006324 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b084      	sub	sp, #16
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800632c:	2300      	movs	r3, #0
 800632e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2201      	movs	r2, #1
 8006334:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800633e:	2b00      	cmp	r3, #0
 8006340:	d00e      	beq.n	8006360 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006348:	685b      	ldr	r3, [r3, #4]
 800634a:	687a      	ldr	r2, [r7, #4]
 800634c:	6852      	ldr	r2, [r2, #4]
 800634e:	b2d2      	uxtb	r2, r2
 8006350:	4611      	mov	r1, r2
 8006352:	6878      	ldr	r0, [r7, #4]
 8006354:	4798      	blx	r3
 8006356:	4603      	mov	r3, r0
 8006358:	2b00      	cmp	r3, #0
 800635a:	d001      	beq.n	8006360 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800635c:	2303      	movs	r3, #3
 800635e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006360:	7bfb      	ldrb	r3, [r7, #15]
}
 8006362:	4618      	mov	r0, r3
 8006364:	3710      	adds	r7, #16
 8006366:	46bd      	mov	sp, r7
 8006368:	bd80      	pop	{r7, pc}

0800636a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800636a:	b480      	push	{r7}
 800636c:	b083      	sub	sp, #12
 800636e:	af00      	add	r7, sp, #0
 8006370:	6078      	str	r0, [r7, #4]
 8006372:	460b      	mov	r3, r1
 8006374:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006376:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006378:	4618      	mov	r0, r3
 800637a:	370c      	adds	r7, #12
 800637c:	46bd      	mov	sp, r7
 800637e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006382:	4770      	bx	lr

08006384 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006384:	b480      	push	{r7}
 8006386:	b083      	sub	sp, #12
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
 800638c:	460b      	mov	r3, r1
 800638e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006390:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006392:	4618      	mov	r0, r3
 8006394:	370c      	adds	r7, #12
 8006396:	46bd      	mov	sp, r7
 8006398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639c:	4770      	bx	lr

0800639e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800639e:	b580      	push	{r7, lr}
 80063a0:	b086      	sub	sp, #24
 80063a2:	af00      	add	r7, sp, #0
 80063a4:	6078      	str	r0, [r7, #4]
 80063a6:	460b      	mov	r3, r1
 80063a8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80063b2:	2300      	movs	r3, #0
 80063b4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	885b      	ldrh	r3, [r3, #2]
 80063ba:	b29a      	uxth	r2, r3
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	781b      	ldrb	r3, [r3, #0]
 80063c0:	b29b      	uxth	r3, r3
 80063c2:	429a      	cmp	r2, r3
 80063c4:	d920      	bls.n	8006408 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	781b      	ldrb	r3, [r3, #0]
 80063ca:	b29b      	uxth	r3, r3
 80063cc:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80063ce:	e013      	b.n	80063f8 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80063d0:	f107 030a 	add.w	r3, r7, #10
 80063d4:	4619      	mov	r1, r3
 80063d6:	6978      	ldr	r0, [r7, #20]
 80063d8:	f000 f81b 	bl	8006412 <USBD_GetNextDesc>
 80063dc:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80063de:	697b      	ldr	r3, [r7, #20]
 80063e0:	785b      	ldrb	r3, [r3, #1]
 80063e2:	2b05      	cmp	r3, #5
 80063e4:	d108      	bne.n	80063f8 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80063e6:	697b      	ldr	r3, [r7, #20]
 80063e8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80063ea:	693b      	ldr	r3, [r7, #16]
 80063ec:	789b      	ldrb	r3, [r3, #2]
 80063ee:	78fa      	ldrb	r2, [r7, #3]
 80063f0:	429a      	cmp	r2, r3
 80063f2:	d008      	beq.n	8006406 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80063f4:	2300      	movs	r3, #0
 80063f6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	885b      	ldrh	r3, [r3, #2]
 80063fc:	b29a      	uxth	r2, r3
 80063fe:	897b      	ldrh	r3, [r7, #10]
 8006400:	429a      	cmp	r2, r3
 8006402:	d8e5      	bhi.n	80063d0 <USBD_GetEpDesc+0x32>
 8006404:	e000      	b.n	8006408 <USBD_GetEpDesc+0x6a>
          break;
 8006406:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006408:	693b      	ldr	r3, [r7, #16]
}
 800640a:	4618      	mov	r0, r3
 800640c:	3718      	adds	r7, #24
 800640e:	46bd      	mov	sp, r7
 8006410:	bd80      	pop	{r7, pc}

08006412 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006412:	b480      	push	{r7}
 8006414:	b085      	sub	sp, #20
 8006416:	af00      	add	r7, sp, #0
 8006418:	6078      	str	r0, [r7, #4]
 800641a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	881a      	ldrh	r2, [r3, #0]
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	781b      	ldrb	r3, [r3, #0]
 8006428:	b29b      	uxth	r3, r3
 800642a:	4413      	add	r3, r2
 800642c:	b29a      	uxth	r2, r3
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	781b      	ldrb	r3, [r3, #0]
 8006436:	461a      	mov	r2, r3
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	4413      	add	r3, r2
 800643c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800643e:	68fb      	ldr	r3, [r7, #12]
}
 8006440:	4618      	mov	r0, r3
 8006442:	3714      	adds	r7, #20
 8006444:	46bd      	mov	sp, r7
 8006446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644a:	4770      	bx	lr

0800644c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800644c:	b480      	push	{r7}
 800644e:	b087      	sub	sp, #28
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006458:	697b      	ldr	r3, [r7, #20]
 800645a:	781b      	ldrb	r3, [r3, #0]
 800645c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800645e:	697b      	ldr	r3, [r7, #20]
 8006460:	3301      	adds	r3, #1
 8006462:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006464:	697b      	ldr	r3, [r7, #20]
 8006466:	781b      	ldrb	r3, [r3, #0]
 8006468:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800646a:	8a3b      	ldrh	r3, [r7, #16]
 800646c:	021b      	lsls	r3, r3, #8
 800646e:	b21a      	sxth	r2, r3
 8006470:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006474:	4313      	orrs	r3, r2
 8006476:	b21b      	sxth	r3, r3
 8006478:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800647a:	89fb      	ldrh	r3, [r7, #14]
}
 800647c:	4618      	mov	r0, r3
 800647e:	371c      	adds	r7, #28
 8006480:	46bd      	mov	sp, r7
 8006482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006486:	4770      	bx	lr

08006488 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b084      	sub	sp, #16
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
 8006490:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006492:	2300      	movs	r3, #0
 8006494:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	781b      	ldrb	r3, [r3, #0]
 800649a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800649e:	2b40      	cmp	r3, #64	; 0x40
 80064a0:	d005      	beq.n	80064ae <USBD_StdDevReq+0x26>
 80064a2:	2b40      	cmp	r3, #64	; 0x40
 80064a4:	d857      	bhi.n	8006556 <USBD_StdDevReq+0xce>
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d00f      	beq.n	80064ca <USBD_StdDevReq+0x42>
 80064aa:	2b20      	cmp	r3, #32
 80064ac:	d153      	bne.n	8006556 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	32ae      	adds	r2, #174	; 0xae
 80064b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064bc:	689b      	ldr	r3, [r3, #8]
 80064be:	6839      	ldr	r1, [r7, #0]
 80064c0:	6878      	ldr	r0, [r7, #4]
 80064c2:	4798      	blx	r3
 80064c4:	4603      	mov	r3, r0
 80064c6:	73fb      	strb	r3, [r7, #15]
      break;
 80064c8:	e04a      	b.n	8006560 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	785b      	ldrb	r3, [r3, #1]
 80064ce:	2b09      	cmp	r3, #9
 80064d0:	d83b      	bhi.n	800654a <USBD_StdDevReq+0xc2>
 80064d2:	a201      	add	r2, pc, #4	; (adr r2, 80064d8 <USBD_StdDevReq+0x50>)
 80064d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064d8:	0800652d 	.word	0x0800652d
 80064dc:	08006541 	.word	0x08006541
 80064e0:	0800654b 	.word	0x0800654b
 80064e4:	08006537 	.word	0x08006537
 80064e8:	0800654b 	.word	0x0800654b
 80064ec:	0800650b 	.word	0x0800650b
 80064f0:	08006501 	.word	0x08006501
 80064f4:	0800654b 	.word	0x0800654b
 80064f8:	08006523 	.word	0x08006523
 80064fc:	08006515 	.word	0x08006515
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006500:	6839      	ldr	r1, [r7, #0]
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f000 fa3c 	bl	8006980 <USBD_GetDescriptor>
          break;
 8006508:	e024      	b.n	8006554 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800650a:	6839      	ldr	r1, [r7, #0]
 800650c:	6878      	ldr	r0, [r7, #4]
 800650e:	f000 fba1 	bl	8006c54 <USBD_SetAddress>
          break;
 8006512:	e01f      	b.n	8006554 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006514:	6839      	ldr	r1, [r7, #0]
 8006516:	6878      	ldr	r0, [r7, #4]
 8006518:	f000 fbe0 	bl	8006cdc <USBD_SetConfig>
 800651c:	4603      	mov	r3, r0
 800651e:	73fb      	strb	r3, [r7, #15]
          break;
 8006520:	e018      	b.n	8006554 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006522:	6839      	ldr	r1, [r7, #0]
 8006524:	6878      	ldr	r0, [r7, #4]
 8006526:	f000 fc83 	bl	8006e30 <USBD_GetConfig>
          break;
 800652a:	e013      	b.n	8006554 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800652c:	6839      	ldr	r1, [r7, #0]
 800652e:	6878      	ldr	r0, [r7, #4]
 8006530:	f000 fcb4 	bl	8006e9c <USBD_GetStatus>
          break;
 8006534:	e00e      	b.n	8006554 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006536:	6839      	ldr	r1, [r7, #0]
 8006538:	6878      	ldr	r0, [r7, #4]
 800653a:	f000 fce3 	bl	8006f04 <USBD_SetFeature>
          break;
 800653e:	e009      	b.n	8006554 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006540:	6839      	ldr	r1, [r7, #0]
 8006542:	6878      	ldr	r0, [r7, #4]
 8006544:	f000 fd07 	bl	8006f56 <USBD_ClrFeature>
          break;
 8006548:	e004      	b.n	8006554 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800654a:	6839      	ldr	r1, [r7, #0]
 800654c:	6878      	ldr	r0, [r7, #4]
 800654e:	f000 fd5e 	bl	800700e <USBD_CtlError>
          break;
 8006552:	bf00      	nop
      }
      break;
 8006554:	e004      	b.n	8006560 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8006556:	6839      	ldr	r1, [r7, #0]
 8006558:	6878      	ldr	r0, [r7, #4]
 800655a:	f000 fd58 	bl	800700e <USBD_CtlError>
      break;
 800655e:	bf00      	nop
  }

  return ret;
 8006560:	7bfb      	ldrb	r3, [r7, #15]
}
 8006562:	4618      	mov	r0, r3
 8006564:	3710      	adds	r7, #16
 8006566:	46bd      	mov	sp, r7
 8006568:	bd80      	pop	{r7, pc}
 800656a:	bf00      	nop

0800656c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b084      	sub	sp, #16
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
 8006574:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006576:	2300      	movs	r3, #0
 8006578:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	781b      	ldrb	r3, [r3, #0]
 800657e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006582:	2b40      	cmp	r3, #64	; 0x40
 8006584:	d005      	beq.n	8006592 <USBD_StdItfReq+0x26>
 8006586:	2b40      	cmp	r3, #64	; 0x40
 8006588:	d852      	bhi.n	8006630 <USBD_StdItfReq+0xc4>
 800658a:	2b00      	cmp	r3, #0
 800658c:	d001      	beq.n	8006592 <USBD_StdItfReq+0x26>
 800658e:	2b20      	cmp	r3, #32
 8006590:	d14e      	bne.n	8006630 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006598:	b2db      	uxtb	r3, r3
 800659a:	3b01      	subs	r3, #1
 800659c:	2b02      	cmp	r3, #2
 800659e:	d840      	bhi.n	8006622 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	889b      	ldrh	r3, [r3, #4]
 80065a4:	b2db      	uxtb	r3, r3
 80065a6:	2b01      	cmp	r3, #1
 80065a8:	d836      	bhi.n	8006618 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	889b      	ldrh	r3, [r3, #4]
 80065ae:	b2db      	uxtb	r3, r3
 80065b0:	4619      	mov	r1, r3
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	f7ff fed9 	bl	800636a <USBD_CoreFindIF>
 80065b8:	4603      	mov	r3, r0
 80065ba:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80065bc:	7bbb      	ldrb	r3, [r7, #14]
 80065be:	2bff      	cmp	r3, #255	; 0xff
 80065c0:	d01d      	beq.n	80065fe <USBD_StdItfReq+0x92>
 80065c2:	7bbb      	ldrb	r3, [r7, #14]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d11a      	bne.n	80065fe <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80065c8:	7bba      	ldrb	r2, [r7, #14]
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	32ae      	adds	r2, #174	; 0xae
 80065ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065d2:	689b      	ldr	r3, [r3, #8]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d00f      	beq.n	80065f8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80065d8:	7bba      	ldrb	r2, [r7, #14]
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80065e0:	7bba      	ldrb	r2, [r7, #14]
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	32ae      	adds	r2, #174	; 0xae
 80065e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065ea:	689b      	ldr	r3, [r3, #8]
 80065ec:	6839      	ldr	r1, [r7, #0]
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	4798      	blx	r3
 80065f2:	4603      	mov	r3, r0
 80065f4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80065f6:	e004      	b.n	8006602 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80065f8:	2303      	movs	r3, #3
 80065fa:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80065fc:	e001      	b.n	8006602 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80065fe:	2303      	movs	r3, #3
 8006600:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	88db      	ldrh	r3, [r3, #6]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d110      	bne.n	800662c <USBD_StdItfReq+0xc0>
 800660a:	7bfb      	ldrb	r3, [r7, #15]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d10d      	bne.n	800662c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006610:	6878      	ldr	r0, [r7, #4]
 8006612:	f000 fdc7 	bl	80071a4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006616:	e009      	b.n	800662c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006618:	6839      	ldr	r1, [r7, #0]
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	f000 fcf7 	bl	800700e <USBD_CtlError>
          break;
 8006620:	e004      	b.n	800662c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006622:	6839      	ldr	r1, [r7, #0]
 8006624:	6878      	ldr	r0, [r7, #4]
 8006626:	f000 fcf2 	bl	800700e <USBD_CtlError>
          break;
 800662a:	e000      	b.n	800662e <USBD_StdItfReq+0xc2>
          break;
 800662c:	bf00      	nop
      }
      break;
 800662e:	e004      	b.n	800663a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006630:	6839      	ldr	r1, [r7, #0]
 8006632:	6878      	ldr	r0, [r7, #4]
 8006634:	f000 fceb 	bl	800700e <USBD_CtlError>
      break;
 8006638:	bf00      	nop
  }

  return ret;
 800663a:	7bfb      	ldrb	r3, [r7, #15]
}
 800663c:	4618      	mov	r0, r3
 800663e:	3710      	adds	r7, #16
 8006640:	46bd      	mov	sp, r7
 8006642:	bd80      	pop	{r7, pc}

08006644 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b084      	sub	sp, #16
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
 800664c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800664e:	2300      	movs	r3, #0
 8006650:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	889b      	ldrh	r3, [r3, #4]
 8006656:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	781b      	ldrb	r3, [r3, #0]
 800665c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006660:	2b40      	cmp	r3, #64	; 0x40
 8006662:	d007      	beq.n	8006674 <USBD_StdEPReq+0x30>
 8006664:	2b40      	cmp	r3, #64	; 0x40
 8006666:	f200 817f 	bhi.w	8006968 <USBD_StdEPReq+0x324>
 800666a:	2b00      	cmp	r3, #0
 800666c:	d02a      	beq.n	80066c4 <USBD_StdEPReq+0x80>
 800666e:	2b20      	cmp	r3, #32
 8006670:	f040 817a 	bne.w	8006968 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006674:	7bbb      	ldrb	r3, [r7, #14]
 8006676:	4619      	mov	r1, r3
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	f7ff fe83 	bl	8006384 <USBD_CoreFindEP>
 800667e:	4603      	mov	r3, r0
 8006680:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006682:	7b7b      	ldrb	r3, [r7, #13]
 8006684:	2bff      	cmp	r3, #255	; 0xff
 8006686:	f000 8174 	beq.w	8006972 <USBD_StdEPReq+0x32e>
 800668a:	7b7b      	ldrb	r3, [r7, #13]
 800668c:	2b00      	cmp	r3, #0
 800668e:	f040 8170 	bne.w	8006972 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8006692:	7b7a      	ldrb	r2, [r7, #13]
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800669a:	7b7a      	ldrb	r2, [r7, #13]
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	32ae      	adds	r2, #174	; 0xae
 80066a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066a4:	689b      	ldr	r3, [r3, #8]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	f000 8163 	beq.w	8006972 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80066ac:	7b7a      	ldrb	r2, [r7, #13]
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	32ae      	adds	r2, #174	; 0xae
 80066b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066b6:	689b      	ldr	r3, [r3, #8]
 80066b8:	6839      	ldr	r1, [r7, #0]
 80066ba:	6878      	ldr	r0, [r7, #4]
 80066bc:	4798      	blx	r3
 80066be:	4603      	mov	r3, r0
 80066c0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80066c2:	e156      	b.n	8006972 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	785b      	ldrb	r3, [r3, #1]
 80066c8:	2b03      	cmp	r3, #3
 80066ca:	d008      	beq.n	80066de <USBD_StdEPReq+0x9a>
 80066cc:	2b03      	cmp	r3, #3
 80066ce:	f300 8145 	bgt.w	800695c <USBD_StdEPReq+0x318>
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	f000 809b 	beq.w	800680e <USBD_StdEPReq+0x1ca>
 80066d8:	2b01      	cmp	r3, #1
 80066da:	d03c      	beq.n	8006756 <USBD_StdEPReq+0x112>
 80066dc:	e13e      	b.n	800695c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066e4:	b2db      	uxtb	r3, r3
 80066e6:	2b02      	cmp	r3, #2
 80066e8:	d002      	beq.n	80066f0 <USBD_StdEPReq+0xac>
 80066ea:	2b03      	cmp	r3, #3
 80066ec:	d016      	beq.n	800671c <USBD_StdEPReq+0xd8>
 80066ee:	e02c      	b.n	800674a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80066f0:	7bbb      	ldrb	r3, [r7, #14]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d00d      	beq.n	8006712 <USBD_StdEPReq+0xce>
 80066f6:	7bbb      	ldrb	r3, [r7, #14]
 80066f8:	2b80      	cmp	r3, #128	; 0x80
 80066fa:	d00a      	beq.n	8006712 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80066fc:	7bbb      	ldrb	r3, [r7, #14]
 80066fe:	4619      	mov	r1, r3
 8006700:	6878      	ldr	r0, [r7, #4]
 8006702:	f003 ff05 	bl	800a510 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006706:	2180      	movs	r1, #128	; 0x80
 8006708:	6878      	ldr	r0, [r7, #4]
 800670a:	f003 ff01 	bl	800a510 <USBD_LL_StallEP>
 800670e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006710:	e020      	b.n	8006754 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8006712:	6839      	ldr	r1, [r7, #0]
 8006714:	6878      	ldr	r0, [r7, #4]
 8006716:	f000 fc7a 	bl	800700e <USBD_CtlError>
              break;
 800671a:	e01b      	b.n	8006754 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	885b      	ldrh	r3, [r3, #2]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d10e      	bne.n	8006742 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006724:	7bbb      	ldrb	r3, [r7, #14]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d00b      	beq.n	8006742 <USBD_StdEPReq+0xfe>
 800672a:	7bbb      	ldrb	r3, [r7, #14]
 800672c:	2b80      	cmp	r3, #128	; 0x80
 800672e:	d008      	beq.n	8006742 <USBD_StdEPReq+0xfe>
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	88db      	ldrh	r3, [r3, #6]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d104      	bne.n	8006742 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006738:	7bbb      	ldrb	r3, [r7, #14]
 800673a:	4619      	mov	r1, r3
 800673c:	6878      	ldr	r0, [r7, #4]
 800673e:	f003 fee7 	bl	800a510 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006742:	6878      	ldr	r0, [r7, #4]
 8006744:	f000 fd2e 	bl	80071a4 <USBD_CtlSendStatus>

              break;
 8006748:	e004      	b.n	8006754 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800674a:	6839      	ldr	r1, [r7, #0]
 800674c:	6878      	ldr	r0, [r7, #4]
 800674e:	f000 fc5e 	bl	800700e <USBD_CtlError>
              break;
 8006752:	bf00      	nop
          }
          break;
 8006754:	e107      	b.n	8006966 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800675c:	b2db      	uxtb	r3, r3
 800675e:	2b02      	cmp	r3, #2
 8006760:	d002      	beq.n	8006768 <USBD_StdEPReq+0x124>
 8006762:	2b03      	cmp	r3, #3
 8006764:	d016      	beq.n	8006794 <USBD_StdEPReq+0x150>
 8006766:	e04b      	b.n	8006800 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006768:	7bbb      	ldrb	r3, [r7, #14]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d00d      	beq.n	800678a <USBD_StdEPReq+0x146>
 800676e:	7bbb      	ldrb	r3, [r7, #14]
 8006770:	2b80      	cmp	r3, #128	; 0x80
 8006772:	d00a      	beq.n	800678a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006774:	7bbb      	ldrb	r3, [r7, #14]
 8006776:	4619      	mov	r1, r3
 8006778:	6878      	ldr	r0, [r7, #4]
 800677a:	f003 fec9 	bl	800a510 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800677e:	2180      	movs	r1, #128	; 0x80
 8006780:	6878      	ldr	r0, [r7, #4]
 8006782:	f003 fec5 	bl	800a510 <USBD_LL_StallEP>
 8006786:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006788:	e040      	b.n	800680c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800678a:	6839      	ldr	r1, [r7, #0]
 800678c:	6878      	ldr	r0, [r7, #4]
 800678e:	f000 fc3e 	bl	800700e <USBD_CtlError>
              break;
 8006792:	e03b      	b.n	800680c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	885b      	ldrh	r3, [r3, #2]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d136      	bne.n	800680a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800679c:	7bbb      	ldrb	r3, [r7, #14]
 800679e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d004      	beq.n	80067b0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80067a6:	7bbb      	ldrb	r3, [r7, #14]
 80067a8:	4619      	mov	r1, r3
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	f003 fecf 	bl	800a54e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80067b0:	6878      	ldr	r0, [r7, #4]
 80067b2:	f000 fcf7 	bl	80071a4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80067b6:	7bbb      	ldrb	r3, [r7, #14]
 80067b8:	4619      	mov	r1, r3
 80067ba:	6878      	ldr	r0, [r7, #4]
 80067bc:	f7ff fde2 	bl	8006384 <USBD_CoreFindEP>
 80067c0:	4603      	mov	r3, r0
 80067c2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80067c4:	7b7b      	ldrb	r3, [r7, #13]
 80067c6:	2bff      	cmp	r3, #255	; 0xff
 80067c8:	d01f      	beq.n	800680a <USBD_StdEPReq+0x1c6>
 80067ca:	7b7b      	ldrb	r3, [r7, #13]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d11c      	bne.n	800680a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80067d0:	7b7a      	ldrb	r2, [r7, #13]
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80067d8:	7b7a      	ldrb	r2, [r7, #13]
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	32ae      	adds	r2, #174	; 0xae
 80067de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067e2:	689b      	ldr	r3, [r3, #8]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d010      	beq.n	800680a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80067e8:	7b7a      	ldrb	r2, [r7, #13]
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	32ae      	adds	r2, #174	; 0xae
 80067ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067f2:	689b      	ldr	r3, [r3, #8]
 80067f4:	6839      	ldr	r1, [r7, #0]
 80067f6:	6878      	ldr	r0, [r7, #4]
 80067f8:	4798      	blx	r3
 80067fa:	4603      	mov	r3, r0
 80067fc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80067fe:	e004      	b.n	800680a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006800:	6839      	ldr	r1, [r7, #0]
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f000 fc03 	bl	800700e <USBD_CtlError>
              break;
 8006808:	e000      	b.n	800680c <USBD_StdEPReq+0x1c8>
              break;
 800680a:	bf00      	nop
          }
          break;
 800680c:	e0ab      	b.n	8006966 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006814:	b2db      	uxtb	r3, r3
 8006816:	2b02      	cmp	r3, #2
 8006818:	d002      	beq.n	8006820 <USBD_StdEPReq+0x1dc>
 800681a:	2b03      	cmp	r3, #3
 800681c:	d032      	beq.n	8006884 <USBD_StdEPReq+0x240>
 800681e:	e097      	b.n	8006950 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006820:	7bbb      	ldrb	r3, [r7, #14]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d007      	beq.n	8006836 <USBD_StdEPReq+0x1f2>
 8006826:	7bbb      	ldrb	r3, [r7, #14]
 8006828:	2b80      	cmp	r3, #128	; 0x80
 800682a:	d004      	beq.n	8006836 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800682c:	6839      	ldr	r1, [r7, #0]
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	f000 fbed 	bl	800700e <USBD_CtlError>
                break;
 8006834:	e091      	b.n	800695a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006836:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800683a:	2b00      	cmp	r3, #0
 800683c:	da0b      	bge.n	8006856 <USBD_StdEPReq+0x212>
 800683e:	7bbb      	ldrb	r3, [r7, #14]
 8006840:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006844:	4613      	mov	r3, r2
 8006846:	009b      	lsls	r3, r3, #2
 8006848:	4413      	add	r3, r2
 800684a:	009b      	lsls	r3, r3, #2
 800684c:	3310      	adds	r3, #16
 800684e:	687a      	ldr	r2, [r7, #4]
 8006850:	4413      	add	r3, r2
 8006852:	3304      	adds	r3, #4
 8006854:	e00b      	b.n	800686e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006856:	7bbb      	ldrb	r3, [r7, #14]
 8006858:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800685c:	4613      	mov	r3, r2
 800685e:	009b      	lsls	r3, r3, #2
 8006860:	4413      	add	r3, r2
 8006862:	009b      	lsls	r3, r3, #2
 8006864:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006868:	687a      	ldr	r2, [r7, #4]
 800686a:	4413      	add	r3, r2
 800686c:	3304      	adds	r3, #4
 800686e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	2200      	movs	r2, #0
 8006874:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006876:	68bb      	ldr	r3, [r7, #8]
 8006878:	2202      	movs	r2, #2
 800687a:	4619      	mov	r1, r3
 800687c:	6878      	ldr	r0, [r7, #4]
 800687e:	f000 fc37 	bl	80070f0 <USBD_CtlSendData>
              break;
 8006882:	e06a      	b.n	800695a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006884:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006888:	2b00      	cmp	r3, #0
 800688a:	da11      	bge.n	80068b0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800688c:	7bbb      	ldrb	r3, [r7, #14]
 800688e:	f003 020f 	and.w	r2, r3, #15
 8006892:	6879      	ldr	r1, [r7, #4]
 8006894:	4613      	mov	r3, r2
 8006896:	009b      	lsls	r3, r3, #2
 8006898:	4413      	add	r3, r2
 800689a:	009b      	lsls	r3, r3, #2
 800689c:	440b      	add	r3, r1
 800689e:	3324      	adds	r3, #36	; 0x24
 80068a0:	881b      	ldrh	r3, [r3, #0]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d117      	bne.n	80068d6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80068a6:	6839      	ldr	r1, [r7, #0]
 80068a8:	6878      	ldr	r0, [r7, #4]
 80068aa:	f000 fbb0 	bl	800700e <USBD_CtlError>
                  break;
 80068ae:	e054      	b.n	800695a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80068b0:	7bbb      	ldrb	r3, [r7, #14]
 80068b2:	f003 020f 	and.w	r2, r3, #15
 80068b6:	6879      	ldr	r1, [r7, #4]
 80068b8:	4613      	mov	r3, r2
 80068ba:	009b      	lsls	r3, r3, #2
 80068bc:	4413      	add	r3, r2
 80068be:	009b      	lsls	r3, r3, #2
 80068c0:	440b      	add	r3, r1
 80068c2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80068c6:	881b      	ldrh	r3, [r3, #0]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d104      	bne.n	80068d6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80068cc:	6839      	ldr	r1, [r7, #0]
 80068ce:	6878      	ldr	r0, [r7, #4]
 80068d0:	f000 fb9d 	bl	800700e <USBD_CtlError>
                  break;
 80068d4:	e041      	b.n	800695a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80068d6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	da0b      	bge.n	80068f6 <USBD_StdEPReq+0x2b2>
 80068de:	7bbb      	ldrb	r3, [r7, #14]
 80068e0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80068e4:	4613      	mov	r3, r2
 80068e6:	009b      	lsls	r3, r3, #2
 80068e8:	4413      	add	r3, r2
 80068ea:	009b      	lsls	r3, r3, #2
 80068ec:	3310      	adds	r3, #16
 80068ee:	687a      	ldr	r2, [r7, #4]
 80068f0:	4413      	add	r3, r2
 80068f2:	3304      	adds	r3, #4
 80068f4:	e00b      	b.n	800690e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80068f6:	7bbb      	ldrb	r3, [r7, #14]
 80068f8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80068fc:	4613      	mov	r3, r2
 80068fe:	009b      	lsls	r3, r3, #2
 8006900:	4413      	add	r3, r2
 8006902:	009b      	lsls	r3, r3, #2
 8006904:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006908:	687a      	ldr	r2, [r7, #4]
 800690a:	4413      	add	r3, r2
 800690c:	3304      	adds	r3, #4
 800690e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006910:	7bbb      	ldrb	r3, [r7, #14]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d002      	beq.n	800691c <USBD_StdEPReq+0x2d8>
 8006916:	7bbb      	ldrb	r3, [r7, #14]
 8006918:	2b80      	cmp	r3, #128	; 0x80
 800691a:	d103      	bne.n	8006924 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	2200      	movs	r2, #0
 8006920:	601a      	str	r2, [r3, #0]
 8006922:	e00e      	b.n	8006942 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006924:	7bbb      	ldrb	r3, [r7, #14]
 8006926:	4619      	mov	r1, r3
 8006928:	6878      	ldr	r0, [r7, #4]
 800692a:	f003 fe2f 	bl	800a58c <USBD_LL_IsStallEP>
 800692e:	4603      	mov	r3, r0
 8006930:	2b00      	cmp	r3, #0
 8006932:	d003      	beq.n	800693c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	2201      	movs	r2, #1
 8006938:	601a      	str	r2, [r3, #0]
 800693a:	e002      	b.n	8006942 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	2200      	movs	r2, #0
 8006940:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006942:	68bb      	ldr	r3, [r7, #8]
 8006944:	2202      	movs	r2, #2
 8006946:	4619      	mov	r1, r3
 8006948:	6878      	ldr	r0, [r7, #4]
 800694a:	f000 fbd1 	bl	80070f0 <USBD_CtlSendData>
              break;
 800694e:	e004      	b.n	800695a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006950:	6839      	ldr	r1, [r7, #0]
 8006952:	6878      	ldr	r0, [r7, #4]
 8006954:	f000 fb5b 	bl	800700e <USBD_CtlError>
              break;
 8006958:	bf00      	nop
          }
          break;
 800695a:	e004      	b.n	8006966 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800695c:	6839      	ldr	r1, [r7, #0]
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	f000 fb55 	bl	800700e <USBD_CtlError>
          break;
 8006964:	bf00      	nop
      }
      break;
 8006966:	e005      	b.n	8006974 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006968:	6839      	ldr	r1, [r7, #0]
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f000 fb4f 	bl	800700e <USBD_CtlError>
      break;
 8006970:	e000      	b.n	8006974 <USBD_StdEPReq+0x330>
      break;
 8006972:	bf00      	nop
  }

  return ret;
 8006974:	7bfb      	ldrb	r3, [r7, #15]
}
 8006976:	4618      	mov	r0, r3
 8006978:	3710      	adds	r7, #16
 800697a:	46bd      	mov	sp, r7
 800697c:	bd80      	pop	{r7, pc}
	...

08006980 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b084      	sub	sp, #16
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
 8006988:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800698a:	2300      	movs	r3, #0
 800698c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800698e:	2300      	movs	r3, #0
 8006990:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006992:	2300      	movs	r3, #0
 8006994:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	885b      	ldrh	r3, [r3, #2]
 800699a:	0a1b      	lsrs	r3, r3, #8
 800699c:	b29b      	uxth	r3, r3
 800699e:	3b01      	subs	r3, #1
 80069a0:	2b06      	cmp	r3, #6
 80069a2:	f200 8128 	bhi.w	8006bf6 <USBD_GetDescriptor+0x276>
 80069a6:	a201      	add	r2, pc, #4	; (adr r2, 80069ac <USBD_GetDescriptor+0x2c>)
 80069a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069ac:	080069c9 	.word	0x080069c9
 80069b0:	080069e1 	.word	0x080069e1
 80069b4:	08006a21 	.word	0x08006a21
 80069b8:	08006bf7 	.word	0x08006bf7
 80069bc:	08006bf7 	.word	0x08006bf7
 80069c0:	08006b97 	.word	0x08006b97
 80069c4:	08006bc3 	.word	0x08006bc3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	687a      	ldr	r2, [r7, #4]
 80069d2:	7c12      	ldrb	r2, [r2, #16]
 80069d4:	f107 0108 	add.w	r1, r7, #8
 80069d8:	4610      	mov	r0, r2
 80069da:	4798      	blx	r3
 80069dc:	60f8      	str	r0, [r7, #12]
      break;
 80069de:	e112      	b.n	8006c06 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	7c1b      	ldrb	r3, [r3, #16]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d10d      	bne.n	8006a04 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069f0:	f107 0208 	add.w	r2, r7, #8
 80069f4:	4610      	mov	r0, r2
 80069f6:	4798      	blx	r3
 80069f8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	3301      	adds	r3, #1
 80069fe:	2202      	movs	r2, #2
 8006a00:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006a02:	e100      	b.n	8006c06 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a0c:	f107 0208 	add.w	r2, r7, #8
 8006a10:	4610      	mov	r0, r2
 8006a12:	4798      	blx	r3
 8006a14:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	3301      	adds	r3, #1
 8006a1a:	2202      	movs	r2, #2
 8006a1c:	701a      	strb	r2, [r3, #0]
      break;
 8006a1e:	e0f2      	b.n	8006c06 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	885b      	ldrh	r3, [r3, #2]
 8006a24:	b2db      	uxtb	r3, r3
 8006a26:	2b05      	cmp	r3, #5
 8006a28:	f200 80ac 	bhi.w	8006b84 <USBD_GetDescriptor+0x204>
 8006a2c:	a201      	add	r2, pc, #4	; (adr r2, 8006a34 <USBD_GetDescriptor+0xb4>)
 8006a2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a32:	bf00      	nop
 8006a34:	08006a4d 	.word	0x08006a4d
 8006a38:	08006a81 	.word	0x08006a81
 8006a3c:	08006ab5 	.word	0x08006ab5
 8006a40:	08006ae9 	.word	0x08006ae9
 8006a44:	08006b1d 	.word	0x08006b1d
 8006a48:	08006b51 	.word	0x08006b51
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a52:	685b      	ldr	r3, [r3, #4]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d00b      	beq.n	8006a70 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a5e:	685b      	ldr	r3, [r3, #4]
 8006a60:	687a      	ldr	r2, [r7, #4]
 8006a62:	7c12      	ldrb	r2, [r2, #16]
 8006a64:	f107 0108 	add.w	r1, r7, #8
 8006a68:	4610      	mov	r0, r2
 8006a6a:	4798      	blx	r3
 8006a6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006a6e:	e091      	b.n	8006b94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006a70:	6839      	ldr	r1, [r7, #0]
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	f000 facb 	bl	800700e <USBD_CtlError>
            err++;
 8006a78:	7afb      	ldrb	r3, [r7, #11]
 8006a7a:	3301      	adds	r3, #1
 8006a7c:	72fb      	strb	r3, [r7, #11]
          break;
 8006a7e:	e089      	b.n	8006b94 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a86:	689b      	ldr	r3, [r3, #8]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d00b      	beq.n	8006aa4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a92:	689b      	ldr	r3, [r3, #8]
 8006a94:	687a      	ldr	r2, [r7, #4]
 8006a96:	7c12      	ldrb	r2, [r2, #16]
 8006a98:	f107 0108 	add.w	r1, r7, #8
 8006a9c:	4610      	mov	r0, r2
 8006a9e:	4798      	blx	r3
 8006aa0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006aa2:	e077      	b.n	8006b94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006aa4:	6839      	ldr	r1, [r7, #0]
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	f000 fab1 	bl	800700e <USBD_CtlError>
            err++;
 8006aac:	7afb      	ldrb	r3, [r7, #11]
 8006aae:	3301      	adds	r3, #1
 8006ab0:	72fb      	strb	r3, [r7, #11]
          break;
 8006ab2:	e06f      	b.n	8006b94 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006aba:	68db      	ldr	r3, [r3, #12]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d00b      	beq.n	8006ad8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ac6:	68db      	ldr	r3, [r3, #12]
 8006ac8:	687a      	ldr	r2, [r7, #4]
 8006aca:	7c12      	ldrb	r2, [r2, #16]
 8006acc:	f107 0108 	add.w	r1, r7, #8
 8006ad0:	4610      	mov	r0, r2
 8006ad2:	4798      	blx	r3
 8006ad4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006ad6:	e05d      	b.n	8006b94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006ad8:	6839      	ldr	r1, [r7, #0]
 8006ada:	6878      	ldr	r0, [r7, #4]
 8006adc:	f000 fa97 	bl	800700e <USBD_CtlError>
            err++;
 8006ae0:	7afb      	ldrb	r3, [r7, #11]
 8006ae2:	3301      	adds	r3, #1
 8006ae4:	72fb      	strb	r3, [r7, #11]
          break;
 8006ae6:	e055      	b.n	8006b94 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006aee:	691b      	ldr	r3, [r3, #16]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d00b      	beq.n	8006b0c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006afa:	691b      	ldr	r3, [r3, #16]
 8006afc:	687a      	ldr	r2, [r7, #4]
 8006afe:	7c12      	ldrb	r2, [r2, #16]
 8006b00:	f107 0108 	add.w	r1, r7, #8
 8006b04:	4610      	mov	r0, r2
 8006b06:	4798      	blx	r3
 8006b08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006b0a:	e043      	b.n	8006b94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006b0c:	6839      	ldr	r1, [r7, #0]
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	f000 fa7d 	bl	800700e <USBD_CtlError>
            err++;
 8006b14:	7afb      	ldrb	r3, [r7, #11]
 8006b16:	3301      	adds	r3, #1
 8006b18:	72fb      	strb	r3, [r7, #11]
          break;
 8006b1a:	e03b      	b.n	8006b94 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b22:	695b      	ldr	r3, [r3, #20]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d00b      	beq.n	8006b40 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b2e:	695b      	ldr	r3, [r3, #20]
 8006b30:	687a      	ldr	r2, [r7, #4]
 8006b32:	7c12      	ldrb	r2, [r2, #16]
 8006b34:	f107 0108 	add.w	r1, r7, #8
 8006b38:	4610      	mov	r0, r2
 8006b3a:	4798      	blx	r3
 8006b3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006b3e:	e029      	b.n	8006b94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006b40:	6839      	ldr	r1, [r7, #0]
 8006b42:	6878      	ldr	r0, [r7, #4]
 8006b44:	f000 fa63 	bl	800700e <USBD_CtlError>
            err++;
 8006b48:	7afb      	ldrb	r3, [r7, #11]
 8006b4a:	3301      	adds	r3, #1
 8006b4c:	72fb      	strb	r3, [r7, #11]
          break;
 8006b4e:	e021      	b.n	8006b94 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b56:	699b      	ldr	r3, [r3, #24]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d00b      	beq.n	8006b74 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b62:	699b      	ldr	r3, [r3, #24]
 8006b64:	687a      	ldr	r2, [r7, #4]
 8006b66:	7c12      	ldrb	r2, [r2, #16]
 8006b68:	f107 0108 	add.w	r1, r7, #8
 8006b6c:	4610      	mov	r0, r2
 8006b6e:	4798      	blx	r3
 8006b70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006b72:	e00f      	b.n	8006b94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006b74:	6839      	ldr	r1, [r7, #0]
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	f000 fa49 	bl	800700e <USBD_CtlError>
            err++;
 8006b7c:	7afb      	ldrb	r3, [r7, #11]
 8006b7e:	3301      	adds	r3, #1
 8006b80:	72fb      	strb	r3, [r7, #11]
          break;
 8006b82:	e007      	b.n	8006b94 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006b84:	6839      	ldr	r1, [r7, #0]
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f000 fa41 	bl	800700e <USBD_CtlError>
          err++;
 8006b8c:	7afb      	ldrb	r3, [r7, #11]
 8006b8e:	3301      	adds	r3, #1
 8006b90:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8006b92:	bf00      	nop
      }
      break;
 8006b94:	e037      	b.n	8006c06 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	7c1b      	ldrb	r3, [r3, #16]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d109      	bne.n	8006bb2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ba4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ba6:	f107 0208 	add.w	r2, r7, #8
 8006baa:	4610      	mov	r0, r2
 8006bac:	4798      	blx	r3
 8006bae:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006bb0:	e029      	b.n	8006c06 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006bb2:	6839      	ldr	r1, [r7, #0]
 8006bb4:	6878      	ldr	r0, [r7, #4]
 8006bb6:	f000 fa2a 	bl	800700e <USBD_CtlError>
        err++;
 8006bba:	7afb      	ldrb	r3, [r7, #11]
 8006bbc:	3301      	adds	r3, #1
 8006bbe:	72fb      	strb	r3, [r7, #11]
      break;
 8006bc0:	e021      	b.n	8006c06 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	7c1b      	ldrb	r3, [r3, #16]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d10d      	bne.n	8006be6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bd2:	f107 0208 	add.w	r2, r7, #8
 8006bd6:	4610      	mov	r0, r2
 8006bd8:	4798      	blx	r3
 8006bda:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	3301      	adds	r3, #1
 8006be0:	2207      	movs	r2, #7
 8006be2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006be4:	e00f      	b.n	8006c06 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006be6:	6839      	ldr	r1, [r7, #0]
 8006be8:	6878      	ldr	r0, [r7, #4]
 8006bea:	f000 fa10 	bl	800700e <USBD_CtlError>
        err++;
 8006bee:	7afb      	ldrb	r3, [r7, #11]
 8006bf0:	3301      	adds	r3, #1
 8006bf2:	72fb      	strb	r3, [r7, #11]
      break;
 8006bf4:	e007      	b.n	8006c06 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006bf6:	6839      	ldr	r1, [r7, #0]
 8006bf8:	6878      	ldr	r0, [r7, #4]
 8006bfa:	f000 fa08 	bl	800700e <USBD_CtlError>
      err++;
 8006bfe:	7afb      	ldrb	r3, [r7, #11]
 8006c00:	3301      	adds	r3, #1
 8006c02:	72fb      	strb	r3, [r7, #11]
      break;
 8006c04:	bf00      	nop
  }

  if (err != 0U)
 8006c06:	7afb      	ldrb	r3, [r7, #11]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d11e      	bne.n	8006c4a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	88db      	ldrh	r3, [r3, #6]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d016      	beq.n	8006c42 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006c14:	893b      	ldrh	r3, [r7, #8]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d00e      	beq.n	8006c38 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	88da      	ldrh	r2, [r3, #6]
 8006c1e:	893b      	ldrh	r3, [r7, #8]
 8006c20:	4293      	cmp	r3, r2
 8006c22:	bf28      	it	cs
 8006c24:	4613      	movcs	r3, r2
 8006c26:	b29b      	uxth	r3, r3
 8006c28:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006c2a:	893b      	ldrh	r3, [r7, #8]
 8006c2c:	461a      	mov	r2, r3
 8006c2e:	68f9      	ldr	r1, [r7, #12]
 8006c30:	6878      	ldr	r0, [r7, #4]
 8006c32:	f000 fa5d 	bl	80070f0 <USBD_CtlSendData>
 8006c36:	e009      	b.n	8006c4c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006c38:	6839      	ldr	r1, [r7, #0]
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f000 f9e7 	bl	800700e <USBD_CtlError>
 8006c40:	e004      	b.n	8006c4c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f000 faae 	bl	80071a4 <USBD_CtlSendStatus>
 8006c48:	e000      	b.n	8006c4c <USBD_GetDescriptor+0x2cc>
    return;
 8006c4a:	bf00      	nop
  }
}
 8006c4c:	3710      	adds	r7, #16
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	bd80      	pop	{r7, pc}
 8006c52:	bf00      	nop

08006c54 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b084      	sub	sp, #16
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
 8006c5c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	889b      	ldrh	r3, [r3, #4]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d131      	bne.n	8006cca <USBD_SetAddress+0x76>
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	88db      	ldrh	r3, [r3, #6]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d12d      	bne.n	8006cca <USBD_SetAddress+0x76>
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	885b      	ldrh	r3, [r3, #2]
 8006c72:	2b7f      	cmp	r3, #127	; 0x7f
 8006c74:	d829      	bhi.n	8006cca <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	885b      	ldrh	r3, [r3, #2]
 8006c7a:	b2db      	uxtb	r3, r3
 8006c7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c80:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c88:	b2db      	uxtb	r3, r3
 8006c8a:	2b03      	cmp	r3, #3
 8006c8c:	d104      	bne.n	8006c98 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006c8e:	6839      	ldr	r1, [r7, #0]
 8006c90:	6878      	ldr	r0, [r7, #4]
 8006c92:	f000 f9bc 	bl	800700e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c96:	e01d      	b.n	8006cd4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	7bfa      	ldrb	r2, [r7, #15]
 8006c9c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006ca0:	7bfb      	ldrb	r3, [r7, #15]
 8006ca2:	4619      	mov	r1, r3
 8006ca4:	6878      	ldr	r0, [r7, #4]
 8006ca6:	f003 fc9d 	bl	800a5e4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006caa:	6878      	ldr	r0, [r7, #4]
 8006cac:	f000 fa7a 	bl	80071a4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006cb0:	7bfb      	ldrb	r3, [r7, #15]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d004      	beq.n	8006cc0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2202      	movs	r2, #2
 8006cba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006cbe:	e009      	b.n	8006cd4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2201      	movs	r2, #1
 8006cc4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006cc8:	e004      	b.n	8006cd4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006cca:	6839      	ldr	r1, [r7, #0]
 8006ccc:	6878      	ldr	r0, [r7, #4]
 8006cce:	f000 f99e 	bl	800700e <USBD_CtlError>
  }
}
 8006cd2:	bf00      	nop
 8006cd4:	bf00      	nop
 8006cd6:	3710      	adds	r7, #16
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	bd80      	pop	{r7, pc}

08006cdc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b084      	sub	sp, #16
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
 8006ce4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	885b      	ldrh	r3, [r3, #2]
 8006cee:	b2da      	uxtb	r2, r3
 8006cf0:	4b4e      	ldr	r3, [pc, #312]	; (8006e2c <USBD_SetConfig+0x150>)
 8006cf2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006cf4:	4b4d      	ldr	r3, [pc, #308]	; (8006e2c <USBD_SetConfig+0x150>)
 8006cf6:	781b      	ldrb	r3, [r3, #0]
 8006cf8:	2b01      	cmp	r3, #1
 8006cfa:	d905      	bls.n	8006d08 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006cfc:	6839      	ldr	r1, [r7, #0]
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	f000 f985 	bl	800700e <USBD_CtlError>
    return USBD_FAIL;
 8006d04:	2303      	movs	r3, #3
 8006d06:	e08c      	b.n	8006e22 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d0e:	b2db      	uxtb	r3, r3
 8006d10:	2b02      	cmp	r3, #2
 8006d12:	d002      	beq.n	8006d1a <USBD_SetConfig+0x3e>
 8006d14:	2b03      	cmp	r3, #3
 8006d16:	d029      	beq.n	8006d6c <USBD_SetConfig+0x90>
 8006d18:	e075      	b.n	8006e06 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006d1a:	4b44      	ldr	r3, [pc, #272]	; (8006e2c <USBD_SetConfig+0x150>)
 8006d1c:	781b      	ldrb	r3, [r3, #0]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d020      	beq.n	8006d64 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8006d22:	4b42      	ldr	r3, [pc, #264]	; (8006e2c <USBD_SetConfig+0x150>)
 8006d24:	781b      	ldrb	r3, [r3, #0]
 8006d26:	461a      	mov	r2, r3
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006d2c:	4b3f      	ldr	r3, [pc, #252]	; (8006e2c <USBD_SetConfig+0x150>)
 8006d2e:	781b      	ldrb	r3, [r3, #0]
 8006d30:	4619      	mov	r1, r3
 8006d32:	6878      	ldr	r0, [r7, #4]
 8006d34:	f7fe ffe1 	bl	8005cfa <USBD_SetClassConfig>
 8006d38:	4603      	mov	r3, r0
 8006d3a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006d3c:	7bfb      	ldrb	r3, [r7, #15]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d008      	beq.n	8006d54 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8006d42:	6839      	ldr	r1, [r7, #0]
 8006d44:	6878      	ldr	r0, [r7, #4]
 8006d46:	f000 f962 	bl	800700e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2202      	movs	r2, #2
 8006d4e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006d52:	e065      	b.n	8006e20 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006d54:	6878      	ldr	r0, [r7, #4]
 8006d56:	f000 fa25 	bl	80071a4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2203      	movs	r2, #3
 8006d5e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006d62:	e05d      	b.n	8006e20 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006d64:	6878      	ldr	r0, [r7, #4]
 8006d66:	f000 fa1d 	bl	80071a4 <USBD_CtlSendStatus>
      break;
 8006d6a:	e059      	b.n	8006e20 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006d6c:	4b2f      	ldr	r3, [pc, #188]	; (8006e2c <USBD_SetConfig+0x150>)
 8006d6e:	781b      	ldrb	r3, [r3, #0]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d112      	bne.n	8006d9a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2202      	movs	r2, #2
 8006d78:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006d7c:	4b2b      	ldr	r3, [pc, #172]	; (8006e2c <USBD_SetConfig+0x150>)
 8006d7e:	781b      	ldrb	r3, [r3, #0]
 8006d80:	461a      	mov	r2, r3
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006d86:	4b29      	ldr	r3, [pc, #164]	; (8006e2c <USBD_SetConfig+0x150>)
 8006d88:	781b      	ldrb	r3, [r3, #0]
 8006d8a:	4619      	mov	r1, r3
 8006d8c:	6878      	ldr	r0, [r7, #4]
 8006d8e:	f7fe ffd0 	bl	8005d32 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006d92:	6878      	ldr	r0, [r7, #4]
 8006d94:	f000 fa06 	bl	80071a4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006d98:	e042      	b.n	8006e20 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8006d9a:	4b24      	ldr	r3, [pc, #144]	; (8006e2c <USBD_SetConfig+0x150>)
 8006d9c:	781b      	ldrb	r3, [r3, #0]
 8006d9e:	461a      	mov	r2, r3
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	685b      	ldr	r3, [r3, #4]
 8006da4:	429a      	cmp	r2, r3
 8006da6:	d02a      	beq.n	8006dfe <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	685b      	ldr	r3, [r3, #4]
 8006dac:	b2db      	uxtb	r3, r3
 8006dae:	4619      	mov	r1, r3
 8006db0:	6878      	ldr	r0, [r7, #4]
 8006db2:	f7fe ffbe 	bl	8005d32 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006db6:	4b1d      	ldr	r3, [pc, #116]	; (8006e2c <USBD_SetConfig+0x150>)
 8006db8:	781b      	ldrb	r3, [r3, #0]
 8006dba:	461a      	mov	r2, r3
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006dc0:	4b1a      	ldr	r3, [pc, #104]	; (8006e2c <USBD_SetConfig+0x150>)
 8006dc2:	781b      	ldrb	r3, [r3, #0]
 8006dc4:	4619      	mov	r1, r3
 8006dc6:	6878      	ldr	r0, [r7, #4]
 8006dc8:	f7fe ff97 	bl	8005cfa <USBD_SetClassConfig>
 8006dcc:	4603      	mov	r3, r0
 8006dce:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006dd0:	7bfb      	ldrb	r3, [r7, #15]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d00f      	beq.n	8006df6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8006dd6:	6839      	ldr	r1, [r7, #0]
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	f000 f918 	bl	800700e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	685b      	ldr	r3, [r3, #4]
 8006de2:	b2db      	uxtb	r3, r3
 8006de4:	4619      	mov	r1, r3
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	f7fe ffa3 	bl	8005d32 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2202      	movs	r2, #2
 8006df0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006df4:	e014      	b.n	8006e20 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006df6:	6878      	ldr	r0, [r7, #4]
 8006df8:	f000 f9d4 	bl	80071a4 <USBD_CtlSendStatus>
      break;
 8006dfc:	e010      	b.n	8006e20 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006dfe:	6878      	ldr	r0, [r7, #4]
 8006e00:	f000 f9d0 	bl	80071a4 <USBD_CtlSendStatus>
      break;
 8006e04:	e00c      	b.n	8006e20 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8006e06:	6839      	ldr	r1, [r7, #0]
 8006e08:	6878      	ldr	r0, [r7, #4]
 8006e0a:	f000 f900 	bl	800700e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006e0e:	4b07      	ldr	r3, [pc, #28]	; (8006e2c <USBD_SetConfig+0x150>)
 8006e10:	781b      	ldrb	r3, [r3, #0]
 8006e12:	4619      	mov	r1, r3
 8006e14:	6878      	ldr	r0, [r7, #4]
 8006e16:	f7fe ff8c 	bl	8005d32 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006e1a:	2303      	movs	r3, #3
 8006e1c:	73fb      	strb	r3, [r7, #15]
      break;
 8006e1e:	bf00      	nop
  }

  return ret;
 8006e20:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e22:	4618      	mov	r0, r3
 8006e24:	3710      	adds	r7, #16
 8006e26:	46bd      	mov	sp, r7
 8006e28:	bd80      	pop	{r7, pc}
 8006e2a:	bf00      	nop
 8006e2c:	2000023c 	.word	0x2000023c

08006e30 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b082      	sub	sp, #8
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
 8006e38:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	88db      	ldrh	r3, [r3, #6]
 8006e3e:	2b01      	cmp	r3, #1
 8006e40:	d004      	beq.n	8006e4c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006e42:	6839      	ldr	r1, [r7, #0]
 8006e44:	6878      	ldr	r0, [r7, #4]
 8006e46:	f000 f8e2 	bl	800700e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006e4a:	e023      	b.n	8006e94 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e52:	b2db      	uxtb	r3, r3
 8006e54:	2b02      	cmp	r3, #2
 8006e56:	dc02      	bgt.n	8006e5e <USBD_GetConfig+0x2e>
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	dc03      	bgt.n	8006e64 <USBD_GetConfig+0x34>
 8006e5c:	e015      	b.n	8006e8a <USBD_GetConfig+0x5a>
 8006e5e:	2b03      	cmp	r3, #3
 8006e60:	d00b      	beq.n	8006e7a <USBD_GetConfig+0x4a>
 8006e62:	e012      	b.n	8006e8a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2200      	movs	r2, #0
 8006e68:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	3308      	adds	r3, #8
 8006e6e:	2201      	movs	r2, #1
 8006e70:	4619      	mov	r1, r3
 8006e72:	6878      	ldr	r0, [r7, #4]
 8006e74:	f000 f93c 	bl	80070f0 <USBD_CtlSendData>
        break;
 8006e78:	e00c      	b.n	8006e94 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	3304      	adds	r3, #4
 8006e7e:	2201      	movs	r2, #1
 8006e80:	4619      	mov	r1, r3
 8006e82:	6878      	ldr	r0, [r7, #4]
 8006e84:	f000 f934 	bl	80070f0 <USBD_CtlSendData>
        break;
 8006e88:	e004      	b.n	8006e94 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006e8a:	6839      	ldr	r1, [r7, #0]
 8006e8c:	6878      	ldr	r0, [r7, #4]
 8006e8e:	f000 f8be 	bl	800700e <USBD_CtlError>
        break;
 8006e92:	bf00      	nop
}
 8006e94:	bf00      	nop
 8006e96:	3708      	adds	r7, #8
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	bd80      	pop	{r7, pc}

08006e9c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b082      	sub	sp, #8
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
 8006ea4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006eac:	b2db      	uxtb	r3, r3
 8006eae:	3b01      	subs	r3, #1
 8006eb0:	2b02      	cmp	r3, #2
 8006eb2:	d81e      	bhi.n	8006ef2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	88db      	ldrh	r3, [r3, #6]
 8006eb8:	2b02      	cmp	r3, #2
 8006eba:	d004      	beq.n	8006ec6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006ebc:	6839      	ldr	r1, [r7, #0]
 8006ebe:	6878      	ldr	r0, [r7, #4]
 8006ec0:	f000 f8a5 	bl	800700e <USBD_CtlError>
        break;
 8006ec4:	e01a      	b.n	8006efc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2201      	movs	r2, #1
 8006eca:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d005      	beq.n	8006ee2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	68db      	ldr	r3, [r3, #12]
 8006eda:	f043 0202 	orr.w	r2, r3, #2
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	330c      	adds	r3, #12
 8006ee6:	2202      	movs	r2, #2
 8006ee8:	4619      	mov	r1, r3
 8006eea:	6878      	ldr	r0, [r7, #4]
 8006eec:	f000 f900 	bl	80070f0 <USBD_CtlSendData>
      break;
 8006ef0:	e004      	b.n	8006efc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006ef2:	6839      	ldr	r1, [r7, #0]
 8006ef4:	6878      	ldr	r0, [r7, #4]
 8006ef6:	f000 f88a 	bl	800700e <USBD_CtlError>
      break;
 8006efa:	bf00      	nop
  }
}
 8006efc:	bf00      	nop
 8006efe:	3708      	adds	r7, #8
 8006f00:	46bd      	mov	sp, r7
 8006f02:	bd80      	pop	{r7, pc}

08006f04 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b082      	sub	sp, #8
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
 8006f0c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	885b      	ldrh	r3, [r3, #2]
 8006f12:	2b01      	cmp	r3, #1
 8006f14:	d107      	bne.n	8006f26 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2201      	movs	r2, #1
 8006f1a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	f000 f940 	bl	80071a4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8006f24:	e013      	b.n	8006f4e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	885b      	ldrh	r3, [r3, #2]
 8006f2a:	2b02      	cmp	r3, #2
 8006f2c:	d10b      	bne.n	8006f46 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	889b      	ldrh	r3, [r3, #4]
 8006f32:	0a1b      	lsrs	r3, r3, #8
 8006f34:	b29b      	uxth	r3, r3
 8006f36:	b2da      	uxtb	r2, r3
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8006f3e:	6878      	ldr	r0, [r7, #4]
 8006f40:	f000 f930 	bl	80071a4 <USBD_CtlSendStatus>
}
 8006f44:	e003      	b.n	8006f4e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8006f46:	6839      	ldr	r1, [r7, #0]
 8006f48:	6878      	ldr	r0, [r7, #4]
 8006f4a:	f000 f860 	bl	800700e <USBD_CtlError>
}
 8006f4e:	bf00      	nop
 8006f50:	3708      	adds	r7, #8
 8006f52:	46bd      	mov	sp, r7
 8006f54:	bd80      	pop	{r7, pc}

08006f56 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f56:	b580      	push	{r7, lr}
 8006f58:	b082      	sub	sp, #8
 8006f5a:	af00      	add	r7, sp, #0
 8006f5c:	6078      	str	r0, [r7, #4]
 8006f5e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f66:	b2db      	uxtb	r3, r3
 8006f68:	3b01      	subs	r3, #1
 8006f6a:	2b02      	cmp	r3, #2
 8006f6c:	d80b      	bhi.n	8006f86 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	885b      	ldrh	r3, [r3, #2]
 8006f72:	2b01      	cmp	r3, #1
 8006f74:	d10c      	bne.n	8006f90 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	2200      	movs	r2, #0
 8006f7a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	f000 f910 	bl	80071a4 <USBD_CtlSendStatus>
      }
      break;
 8006f84:	e004      	b.n	8006f90 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006f86:	6839      	ldr	r1, [r7, #0]
 8006f88:	6878      	ldr	r0, [r7, #4]
 8006f8a:	f000 f840 	bl	800700e <USBD_CtlError>
      break;
 8006f8e:	e000      	b.n	8006f92 <USBD_ClrFeature+0x3c>
      break;
 8006f90:	bf00      	nop
  }
}
 8006f92:	bf00      	nop
 8006f94:	3708      	adds	r7, #8
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bd80      	pop	{r7, pc}

08006f9a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006f9a:	b580      	push	{r7, lr}
 8006f9c:	b084      	sub	sp, #16
 8006f9e:	af00      	add	r7, sp, #0
 8006fa0:	6078      	str	r0, [r7, #4]
 8006fa2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	781a      	ldrb	r2, [r3, #0]
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	3301      	adds	r3, #1
 8006fb4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	781a      	ldrb	r2, [r3, #0]
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	3301      	adds	r3, #1
 8006fc2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006fc4:	68f8      	ldr	r0, [r7, #12]
 8006fc6:	f7ff fa41 	bl	800644c <SWAPBYTE>
 8006fca:	4603      	mov	r3, r0
 8006fcc:	461a      	mov	r2, r3
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	3301      	adds	r3, #1
 8006fd6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	3301      	adds	r3, #1
 8006fdc:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006fde:	68f8      	ldr	r0, [r7, #12]
 8006fe0:	f7ff fa34 	bl	800644c <SWAPBYTE>
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	461a      	mov	r2, r3
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	3301      	adds	r3, #1
 8006ff0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	3301      	adds	r3, #1
 8006ff6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006ff8:	68f8      	ldr	r0, [r7, #12]
 8006ffa:	f7ff fa27 	bl	800644c <SWAPBYTE>
 8006ffe:	4603      	mov	r3, r0
 8007000:	461a      	mov	r2, r3
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	80da      	strh	r2, [r3, #6]
}
 8007006:	bf00      	nop
 8007008:	3710      	adds	r7, #16
 800700a:	46bd      	mov	sp, r7
 800700c:	bd80      	pop	{r7, pc}

0800700e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800700e:	b580      	push	{r7, lr}
 8007010:	b082      	sub	sp, #8
 8007012:	af00      	add	r7, sp, #0
 8007014:	6078      	str	r0, [r7, #4]
 8007016:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007018:	2180      	movs	r1, #128	; 0x80
 800701a:	6878      	ldr	r0, [r7, #4]
 800701c:	f003 fa78 	bl	800a510 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007020:	2100      	movs	r1, #0
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	f003 fa74 	bl	800a510 <USBD_LL_StallEP>
}
 8007028:	bf00      	nop
 800702a:	3708      	adds	r7, #8
 800702c:	46bd      	mov	sp, r7
 800702e:	bd80      	pop	{r7, pc}

08007030 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007030:	b580      	push	{r7, lr}
 8007032:	b086      	sub	sp, #24
 8007034:	af00      	add	r7, sp, #0
 8007036:	60f8      	str	r0, [r7, #12]
 8007038:	60b9      	str	r1, [r7, #8]
 800703a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800703c:	2300      	movs	r3, #0
 800703e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d036      	beq.n	80070b4 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800704a:	6938      	ldr	r0, [r7, #16]
 800704c:	f000 f836 	bl	80070bc <USBD_GetLen>
 8007050:	4603      	mov	r3, r0
 8007052:	3301      	adds	r3, #1
 8007054:	b29b      	uxth	r3, r3
 8007056:	005b      	lsls	r3, r3, #1
 8007058:	b29a      	uxth	r2, r3
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800705e:	7dfb      	ldrb	r3, [r7, #23]
 8007060:	68ba      	ldr	r2, [r7, #8]
 8007062:	4413      	add	r3, r2
 8007064:	687a      	ldr	r2, [r7, #4]
 8007066:	7812      	ldrb	r2, [r2, #0]
 8007068:	701a      	strb	r2, [r3, #0]
  idx++;
 800706a:	7dfb      	ldrb	r3, [r7, #23]
 800706c:	3301      	adds	r3, #1
 800706e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007070:	7dfb      	ldrb	r3, [r7, #23]
 8007072:	68ba      	ldr	r2, [r7, #8]
 8007074:	4413      	add	r3, r2
 8007076:	2203      	movs	r2, #3
 8007078:	701a      	strb	r2, [r3, #0]
  idx++;
 800707a:	7dfb      	ldrb	r3, [r7, #23]
 800707c:	3301      	adds	r3, #1
 800707e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007080:	e013      	b.n	80070aa <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007082:	7dfb      	ldrb	r3, [r7, #23]
 8007084:	68ba      	ldr	r2, [r7, #8]
 8007086:	4413      	add	r3, r2
 8007088:	693a      	ldr	r2, [r7, #16]
 800708a:	7812      	ldrb	r2, [r2, #0]
 800708c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800708e:	693b      	ldr	r3, [r7, #16]
 8007090:	3301      	adds	r3, #1
 8007092:	613b      	str	r3, [r7, #16]
    idx++;
 8007094:	7dfb      	ldrb	r3, [r7, #23]
 8007096:	3301      	adds	r3, #1
 8007098:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800709a:	7dfb      	ldrb	r3, [r7, #23]
 800709c:	68ba      	ldr	r2, [r7, #8]
 800709e:	4413      	add	r3, r2
 80070a0:	2200      	movs	r2, #0
 80070a2:	701a      	strb	r2, [r3, #0]
    idx++;
 80070a4:	7dfb      	ldrb	r3, [r7, #23]
 80070a6:	3301      	adds	r3, #1
 80070a8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80070aa:	693b      	ldr	r3, [r7, #16]
 80070ac:	781b      	ldrb	r3, [r3, #0]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d1e7      	bne.n	8007082 <USBD_GetString+0x52>
 80070b2:	e000      	b.n	80070b6 <USBD_GetString+0x86>
    return;
 80070b4:	bf00      	nop
  }
}
 80070b6:	3718      	adds	r7, #24
 80070b8:	46bd      	mov	sp, r7
 80070ba:	bd80      	pop	{r7, pc}

080070bc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80070bc:	b480      	push	{r7}
 80070be:	b085      	sub	sp, #20
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80070c4:	2300      	movs	r3, #0
 80070c6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80070cc:	e005      	b.n	80070da <USBD_GetLen+0x1e>
  {
    len++;
 80070ce:	7bfb      	ldrb	r3, [r7, #15]
 80070d0:	3301      	adds	r3, #1
 80070d2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80070d4:	68bb      	ldr	r3, [r7, #8]
 80070d6:	3301      	adds	r3, #1
 80070d8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80070da:	68bb      	ldr	r3, [r7, #8]
 80070dc:	781b      	ldrb	r3, [r3, #0]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d1f5      	bne.n	80070ce <USBD_GetLen+0x12>
  }

  return len;
 80070e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80070e4:	4618      	mov	r0, r3
 80070e6:	3714      	adds	r7, #20
 80070e8:	46bd      	mov	sp, r7
 80070ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ee:	4770      	bx	lr

080070f0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b084      	sub	sp, #16
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	60f8      	str	r0, [r7, #12]
 80070f8:	60b9      	str	r1, [r7, #8]
 80070fa:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	2202      	movs	r2, #2
 8007100:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	687a      	ldr	r2, [r7, #4]
 8007108:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	687a      	ldr	r2, [r7, #4]
 800710e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	68ba      	ldr	r2, [r7, #8]
 8007114:	2100      	movs	r1, #0
 8007116:	68f8      	ldr	r0, [r7, #12]
 8007118:	f003 fa83 	bl	800a622 <USBD_LL_Transmit>

  return USBD_OK;
 800711c:	2300      	movs	r3, #0
}
 800711e:	4618      	mov	r0, r3
 8007120:	3710      	adds	r7, #16
 8007122:	46bd      	mov	sp, r7
 8007124:	bd80      	pop	{r7, pc}

08007126 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007126:	b580      	push	{r7, lr}
 8007128:	b084      	sub	sp, #16
 800712a:	af00      	add	r7, sp, #0
 800712c:	60f8      	str	r0, [r7, #12]
 800712e:	60b9      	str	r1, [r7, #8]
 8007130:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	68ba      	ldr	r2, [r7, #8]
 8007136:	2100      	movs	r1, #0
 8007138:	68f8      	ldr	r0, [r7, #12]
 800713a:	f003 fa72 	bl	800a622 <USBD_LL_Transmit>

  return USBD_OK;
 800713e:	2300      	movs	r3, #0
}
 8007140:	4618      	mov	r0, r3
 8007142:	3710      	adds	r7, #16
 8007144:	46bd      	mov	sp, r7
 8007146:	bd80      	pop	{r7, pc}

08007148 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b084      	sub	sp, #16
 800714c:	af00      	add	r7, sp, #0
 800714e:	60f8      	str	r0, [r7, #12]
 8007150:	60b9      	str	r1, [r7, #8]
 8007152:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	2203      	movs	r2, #3
 8007158:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	687a      	ldr	r2, [r7, #4]
 8007160:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	687a      	ldr	r2, [r7, #4]
 8007168:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	68ba      	ldr	r2, [r7, #8]
 8007170:	2100      	movs	r1, #0
 8007172:	68f8      	ldr	r0, [r7, #12]
 8007174:	f003 fa76 	bl	800a664 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007178:	2300      	movs	r3, #0
}
 800717a:	4618      	mov	r0, r3
 800717c:	3710      	adds	r7, #16
 800717e:	46bd      	mov	sp, r7
 8007180:	bd80      	pop	{r7, pc}

08007182 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007182:	b580      	push	{r7, lr}
 8007184:	b084      	sub	sp, #16
 8007186:	af00      	add	r7, sp, #0
 8007188:	60f8      	str	r0, [r7, #12]
 800718a:	60b9      	str	r1, [r7, #8]
 800718c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	68ba      	ldr	r2, [r7, #8]
 8007192:	2100      	movs	r1, #0
 8007194:	68f8      	ldr	r0, [r7, #12]
 8007196:	f003 fa65 	bl	800a664 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800719a:	2300      	movs	r3, #0
}
 800719c:	4618      	mov	r0, r3
 800719e:	3710      	adds	r7, #16
 80071a0:	46bd      	mov	sp, r7
 80071a2:	bd80      	pop	{r7, pc}

080071a4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b082      	sub	sp, #8
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2204      	movs	r2, #4
 80071b0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80071b4:	2300      	movs	r3, #0
 80071b6:	2200      	movs	r2, #0
 80071b8:	2100      	movs	r1, #0
 80071ba:	6878      	ldr	r0, [r7, #4]
 80071bc:	f003 fa31 	bl	800a622 <USBD_LL_Transmit>

  return USBD_OK;
 80071c0:	2300      	movs	r3, #0
}
 80071c2:	4618      	mov	r0, r3
 80071c4:	3708      	adds	r7, #8
 80071c6:	46bd      	mov	sp, r7
 80071c8:	bd80      	pop	{r7, pc}

080071ca <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80071ca:	b580      	push	{r7, lr}
 80071cc:	b082      	sub	sp, #8
 80071ce:	af00      	add	r7, sp, #0
 80071d0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2205      	movs	r2, #5
 80071d6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80071da:	2300      	movs	r3, #0
 80071dc:	2200      	movs	r2, #0
 80071de:	2100      	movs	r1, #0
 80071e0:	6878      	ldr	r0, [r7, #4]
 80071e2:	f003 fa3f 	bl	800a664 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80071e6:	2300      	movs	r3, #0
}
 80071e8:	4618      	mov	r0, r3
 80071ea:	3708      	adds	r7, #8
 80071ec:	46bd      	mov	sp, r7
 80071ee:	bd80      	pop	{r7, pc}

080071f0 <__NVIC_SetPriority>:
{
 80071f0:	b480      	push	{r7}
 80071f2:	b083      	sub	sp, #12
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	4603      	mov	r3, r0
 80071f8:	6039      	str	r1, [r7, #0]
 80071fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80071fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007200:	2b00      	cmp	r3, #0
 8007202:	db0a      	blt.n	800721a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	b2da      	uxtb	r2, r3
 8007208:	490c      	ldr	r1, [pc, #48]	; (800723c <__NVIC_SetPriority+0x4c>)
 800720a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800720e:	0112      	lsls	r2, r2, #4
 8007210:	b2d2      	uxtb	r2, r2
 8007212:	440b      	add	r3, r1
 8007214:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007218:	e00a      	b.n	8007230 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	b2da      	uxtb	r2, r3
 800721e:	4908      	ldr	r1, [pc, #32]	; (8007240 <__NVIC_SetPriority+0x50>)
 8007220:	79fb      	ldrb	r3, [r7, #7]
 8007222:	f003 030f 	and.w	r3, r3, #15
 8007226:	3b04      	subs	r3, #4
 8007228:	0112      	lsls	r2, r2, #4
 800722a:	b2d2      	uxtb	r2, r2
 800722c:	440b      	add	r3, r1
 800722e:	761a      	strb	r2, [r3, #24]
}
 8007230:	bf00      	nop
 8007232:	370c      	adds	r7, #12
 8007234:	46bd      	mov	sp, r7
 8007236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723a:	4770      	bx	lr
 800723c:	e000e100 	.word	0xe000e100
 8007240:	e000ed00 	.word	0xe000ed00

08007244 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007244:	b580      	push	{r7, lr}
 8007246:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007248:	4b05      	ldr	r3, [pc, #20]	; (8007260 <SysTick_Handler+0x1c>)
 800724a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800724c:	f001 fd28 	bl	8008ca0 <xTaskGetSchedulerState>
 8007250:	4603      	mov	r3, r0
 8007252:	2b01      	cmp	r3, #1
 8007254:	d001      	beq.n	800725a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007256:	f002 fb0f 	bl	8009878 <xPortSysTickHandler>
  }
}
 800725a:	bf00      	nop
 800725c:	bd80      	pop	{r7, pc}
 800725e:	bf00      	nop
 8007260:	e000e010 	.word	0xe000e010

08007264 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007264:	b580      	push	{r7, lr}
 8007266:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007268:	2100      	movs	r1, #0
 800726a:	f06f 0004 	mvn.w	r0, #4
 800726e:	f7ff ffbf 	bl	80071f0 <__NVIC_SetPriority>
#endif
}
 8007272:	bf00      	nop
 8007274:	bd80      	pop	{r7, pc}
	...

08007278 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007278:	b480      	push	{r7}
 800727a:	b083      	sub	sp, #12
 800727c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800727e:	f3ef 8305 	mrs	r3, IPSR
 8007282:	603b      	str	r3, [r7, #0]
  return(result);
 8007284:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007286:	2b00      	cmp	r3, #0
 8007288:	d003      	beq.n	8007292 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800728a:	f06f 0305 	mvn.w	r3, #5
 800728e:	607b      	str	r3, [r7, #4]
 8007290:	e00c      	b.n	80072ac <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007292:	4b0a      	ldr	r3, [pc, #40]	; (80072bc <osKernelInitialize+0x44>)
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d105      	bne.n	80072a6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800729a:	4b08      	ldr	r3, [pc, #32]	; (80072bc <osKernelInitialize+0x44>)
 800729c:	2201      	movs	r2, #1
 800729e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80072a0:	2300      	movs	r3, #0
 80072a2:	607b      	str	r3, [r7, #4]
 80072a4:	e002      	b.n	80072ac <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80072a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80072aa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80072ac:	687b      	ldr	r3, [r7, #4]
}
 80072ae:	4618      	mov	r0, r3
 80072b0:	370c      	adds	r7, #12
 80072b2:	46bd      	mov	sp, r7
 80072b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b8:	4770      	bx	lr
 80072ba:	bf00      	nop
 80072bc:	20000240 	.word	0x20000240

080072c0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b082      	sub	sp, #8
 80072c4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80072c6:	f3ef 8305 	mrs	r3, IPSR
 80072ca:	603b      	str	r3, [r7, #0]
  return(result);
 80072cc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d003      	beq.n	80072da <osKernelStart+0x1a>
    stat = osErrorISR;
 80072d2:	f06f 0305 	mvn.w	r3, #5
 80072d6:	607b      	str	r3, [r7, #4]
 80072d8:	e010      	b.n	80072fc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80072da:	4b0b      	ldr	r3, [pc, #44]	; (8007308 <osKernelStart+0x48>)
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	2b01      	cmp	r3, #1
 80072e0:	d109      	bne.n	80072f6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80072e2:	f7ff ffbf 	bl	8007264 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80072e6:	4b08      	ldr	r3, [pc, #32]	; (8007308 <osKernelStart+0x48>)
 80072e8:	2202      	movs	r2, #2
 80072ea:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80072ec:	f001 f87c 	bl	80083e8 <vTaskStartScheduler>
      stat = osOK;
 80072f0:	2300      	movs	r3, #0
 80072f2:	607b      	str	r3, [r7, #4]
 80072f4:	e002      	b.n	80072fc <osKernelStart+0x3c>
    } else {
      stat = osError;
 80072f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80072fa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80072fc:	687b      	ldr	r3, [r7, #4]
}
 80072fe:	4618      	mov	r0, r3
 8007300:	3708      	adds	r7, #8
 8007302:	46bd      	mov	sp, r7
 8007304:	bd80      	pop	{r7, pc}
 8007306:	bf00      	nop
 8007308:	20000240 	.word	0x20000240

0800730c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800730c:	b580      	push	{r7, lr}
 800730e:	b08e      	sub	sp, #56	; 0x38
 8007310:	af04      	add	r7, sp, #16
 8007312:	60f8      	str	r0, [r7, #12]
 8007314:	60b9      	str	r1, [r7, #8]
 8007316:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007318:	2300      	movs	r3, #0
 800731a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800731c:	f3ef 8305 	mrs	r3, IPSR
 8007320:	617b      	str	r3, [r7, #20]
  return(result);
 8007322:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007324:	2b00      	cmp	r3, #0
 8007326:	d17e      	bne.n	8007426 <osThreadNew+0x11a>
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d07b      	beq.n	8007426 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800732e:	2380      	movs	r3, #128	; 0x80
 8007330:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007332:	2318      	movs	r3, #24
 8007334:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007336:	2300      	movs	r3, #0
 8007338:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800733a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800733e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d045      	beq.n	80073d2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d002      	beq.n	8007354 <osThreadNew+0x48>
        name = attr->name;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	699b      	ldr	r3, [r3, #24]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d002      	beq.n	8007362 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	699b      	ldr	r3, [r3, #24]
 8007360:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007362:	69fb      	ldr	r3, [r7, #28]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d008      	beq.n	800737a <osThreadNew+0x6e>
 8007368:	69fb      	ldr	r3, [r7, #28]
 800736a:	2b38      	cmp	r3, #56	; 0x38
 800736c:	d805      	bhi.n	800737a <osThreadNew+0x6e>
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	685b      	ldr	r3, [r3, #4]
 8007372:	f003 0301 	and.w	r3, r3, #1
 8007376:	2b00      	cmp	r3, #0
 8007378:	d001      	beq.n	800737e <osThreadNew+0x72>
        return (NULL);
 800737a:	2300      	movs	r3, #0
 800737c:	e054      	b.n	8007428 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	695b      	ldr	r3, [r3, #20]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d003      	beq.n	800738e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	695b      	ldr	r3, [r3, #20]
 800738a:	089b      	lsrs	r3, r3, #2
 800738c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	689b      	ldr	r3, [r3, #8]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d00e      	beq.n	80073b4 <osThreadNew+0xa8>
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	68db      	ldr	r3, [r3, #12]
 800739a:	2ba7      	cmp	r3, #167	; 0xa7
 800739c:	d90a      	bls.n	80073b4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d006      	beq.n	80073b4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	695b      	ldr	r3, [r3, #20]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d002      	beq.n	80073b4 <osThreadNew+0xa8>
        mem = 1;
 80073ae:	2301      	movs	r3, #1
 80073b0:	61bb      	str	r3, [r7, #24]
 80073b2:	e010      	b.n	80073d6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	689b      	ldr	r3, [r3, #8]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d10c      	bne.n	80073d6 <osThreadNew+0xca>
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	68db      	ldr	r3, [r3, #12]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d108      	bne.n	80073d6 <osThreadNew+0xca>
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	691b      	ldr	r3, [r3, #16]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d104      	bne.n	80073d6 <osThreadNew+0xca>
          mem = 0;
 80073cc:	2300      	movs	r3, #0
 80073ce:	61bb      	str	r3, [r7, #24]
 80073d0:	e001      	b.n	80073d6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80073d2:	2300      	movs	r3, #0
 80073d4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80073d6:	69bb      	ldr	r3, [r7, #24]
 80073d8:	2b01      	cmp	r3, #1
 80073da:	d110      	bne.n	80073fe <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80073e0:	687a      	ldr	r2, [r7, #4]
 80073e2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80073e4:	9202      	str	r2, [sp, #8]
 80073e6:	9301      	str	r3, [sp, #4]
 80073e8:	69fb      	ldr	r3, [r7, #28]
 80073ea:	9300      	str	r3, [sp, #0]
 80073ec:	68bb      	ldr	r3, [r7, #8]
 80073ee:	6a3a      	ldr	r2, [r7, #32]
 80073f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80073f2:	68f8      	ldr	r0, [r7, #12]
 80073f4:	f000 fe0c 	bl	8008010 <xTaskCreateStatic>
 80073f8:	4603      	mov	r3, r0
 80073fa:	613b      	str	r3, [r7, #16]
 80073fc:	e013      	b.n	8007426 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80073fe:	69bb      	ldr	r3, [r7, #24]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d110      	bne.n	8007426 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007404:	6a3b      	ldr	r3, [r7, #32]
 8007406:	b29a      	uxth	r2, r3
 8007408:	f107 0310 	add.w	r3, r7, #16
 800740c:	9301      	str	r3, [sp, #4]
 800740e:	69fb      	ldr	r3, [r7, #28]
 8007410:	9300      	str	r3, [sp, #0]
 8007412:	68bb      	ldr	r3, [r7, #8]
 8007414:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007416:	68f8      	ldr	r0, [r7, #12]
 8007418:	f000 fe57 	bl	80080ca <xTaskCreate>
 800741c:	4603      	mov	r3, r0
 800741e:	2b01      	cmp	r3, #1
 8007420:	d001      	beq.n	8007426 <osThreadNew+0x11a>
            hTask = NULL;
 8007422:	2300      	movs	r3, #0
 8007424:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007426:	693b      	ldr	r3, [r7, #16]
}
 8007428:	4618      	mov	r0, r3
 800742a:	3728      	adds	r7, #40	; 0x28
 800742c:	46bd      	mov	sp, r7
 800742e:	bd80      	pop	{r7, pc}

08007430 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007430:	b580      	push	{r7, lr}
 8007432:	b084      	sub	sp, #16
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007438:	f3ef 8305 	mrs	r3, IPSR
 800743c:	60bb      	str	r3, [r7, #8]
  return(result);
 800743e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007440:	2b00      	cmp	r3, #0
 8007442:	d003      	beq.n	800744c <osDelay+0x1c>
    stat = osErrorISR;
 8007444:	f06f 0305 	mvn.w	r3, #5
 8007448:	60fb      	str	r3, [r7, #12]
 800744a:	e007      	b.n	800745c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800744c:	2300      	movs	r3, #0
 800744e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d002      	beq.n	800745c <osDelay+0x2c>
      vTaskDelay(ticks);
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	f000 ff92 	bl	8008380 <vTaskDelay>
    }
  }

  return (stat);
 800745c:	68fb      	ldr	r3, [r7, #12]
}
 800745e:	4618      	mov	r0, r3
 8007460:	3710      	adds	r7, #16
 8007462:	46bd      	mov	sp, r7
 8007464:	bd80      	pop	{r7, pc}
	...

08007468 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007468:	b480      	push	{r7}
 800746a:	b085      	sub	sp, #20
 800746c:	af00      	add	r7, sp, #0
 800746e:	60f8      	str	r0, [r7, #12]
 8007470:	60b9      	str	r1, [r7, #8]
 8007472:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	4a07      	ldr	r2, [pc, #28]	; (8007494 <vApplicationGetIdleTaskMemory+0x2c>)
 8007478:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800747a:	68bb      	ldr	r3, [r7, #8]
 800747c:	4a06      	ldr	r2, [pc, #24]	; (8007498 <vApplicationGetIdleTaskMemory+0x30>)
 800747e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2280      	movs	r2, #128	; 0x80
 8007484:	601a      	str	r2, [r3, #0]
}
 8007486:	bf00      	nop
 8007488:	3714      	adds	r7, #20
 800748a:	46bd      	mov	sp, r7
 800748c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007490:	4770      	bx	lr
 8007492:	bf00      	nop
 8007494:	20000244 	.word	0x20000244
 8007498:	200002ec 	.word	0x200002ec

0800749c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800749c:	b480      	push	{r7}
 800749e:	b085      	sub	sp, #20
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	60f8      	str	r0, [r7, #12]
 80074a4:	60b9      	str	r1, [r7, #8]
 80074a6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	4a07      	ldr	r2, [pc, #28]	; (80074c8 <vApplicationGetTimerTaskMemory+0x2c>)
 80074ac:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80074ae:	68bb      	ldr	r3, [r7, #8]
 80074b0:	4a06      	ldr	r2, [pc, #24]	; (80074cc <vApplicationGetTimerTaskMemory+0x30>)
 80074b2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80074ba:	601a      	str	r2, [r3, #0]
}
 80074bc:	bf00      	nop
 80074be:	3714      	adds	r7, #20
 80074c0:	46bd      	mov	sp, r7
 80074c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c6:	4770      	bx	lr
 80074c8:	200004ec 	.word	0x200004ec
 80074cc:	20000594 	.word	0x20000594

080074d0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80074d0:	b480      	push	{r7}
 80074d2:	b083      	sub	sp, #12
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	f103 0208 	add.w	r2, r3, #8
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80074e8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	f103 0208 	add.w	r2, r3, #8
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	f103 0208 	add.w	r2, r3, #8
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2200      	movs	r2, #0
 8007502:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007504:	bf00      	nop
 8007506:	370c      	adds	r7, #12
 8007508:	46bd      	mov	sp, r7
 800750a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750e:	4770      	bx	lr

08007510 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007510:	b480      	push	{r7}
 8007512:	b083      	sub	sp, #12
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2200      	movs	r2, #0
 800751c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800751e:	bf00      	nop
 8007520:	370c      	adds	r7, #12
 8007522:	46bd      	mov	sp, r7
 8007524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007528:	4770      	bx	lr

0800752a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800752a:	b480      	push	{r7}
 800752c:	b085      	sub	sp, #20
 800752e:	af00      	add	r7, sp, #0
 8007530:	6078      	str	r0, [r7, #4]
 8007532:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	685b      	ldr	r3, [r3, #4]
 8007538:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	68fa      	ldr	r2, [r7, #12]
 800753e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	689a      	ldr	r2, [r3, #8]
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	689b      	ldr	r3, [r3, #8]
 800754c:	683a      	ldr	r2, [r7, #0]
 800754e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	683a      	ldr	r2, [r7, #0]
 8007554:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	687a      	ldr	r2, [r7, #4]
 800755a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	1c5a      	adds	r2, r3, #1
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	601a      	str	r2, [r3, #0]
}
 8007566:	bf00      	nop
 8007568:	3714      	adds	r7, #20
 800756a:	46bd      	mov	sp, r7
 800756c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007570:	4770      	bx	lr

08007572 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007572:	b480      	push	{r7}
 8007574:	b085      	sub	sp, #20
 8007576:	af00      	add	r7, sp, #0
 8007578:	6078      	str	r0, [r7, #4]
 800757a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007582:	68bb      	ldr	r3, [r7, #8]
 8007584:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007588:	d103      	bne.n	8007592 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	691b      	ldr	r3, [r3, #16]
 800758e:	60fb      	str	r3, [r7, #12]
 8007590:	e00c      	b.n	80075ac <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	3308      	adds	r3, #8
 8007596:	60fb      	str	r3, [r7, #12]
 8007598:	e002      	b.n	80075a0 <vListInsert+0x2e>
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	685b      	ldr	r3, [r3, #4]
 800759e:	60fb      	str	r3, [r7, #12]
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	685b      	ldr	r3, [r3, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	68ba      	ldr	r2, [r7, #8]
 80075a8:	429a      	cmp	r2, r3
 80075aa:	d2f6      	bcs.n	800759a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	685a      	ldr	r2, [r3, #4]
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80075b4:	683b      	ldr	r3, [r7, #0]
 80075b6:	685b      	ldr	r3, [r3, #4]
 80075b8:	683a      	ldr	r2, [r7, #0]
 80075ba:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	68fa      	ldr	r2, [r7, #12]
 80075c0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	683a      	ldr	r2, [r7, #0]
 80075c6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	687a      	ldr	r2, [r7, #4]
 80075cc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	1c5a      	adds	r2, r3, #1
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	601a      	str	r2, [r3, #0]
}
 80075d8:	bf00      	nop
 80075da:	3714      	adds	r7, #20
 80075dc:	46bd      	mov	sp, r7
 80075de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e2:	4770      	bx	lr

080075e4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80075e4:	b480      	push	{r7}
 80075e6:	b085      	sub	sp, #20
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	691b      	ldr	r3, [r3, #16]
 80075f0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	685b      	ldr	r3, [r3, #4]
 80075f6:	687a      	ldr	r2, [r7, #4]
 80075f8:	6892      	ldr	r2, [r2, #8]
 80075fa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	689b      	ldr	r3, [r3, #8]
 8007600:	687a      	ldr	r2, [r7, #4]
 8007602:	6852      	ldr	r2, [r2, #4]
 8007604:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	685b      	ldr	r3, [r3, #4]
 800760a:	687a      	ldr	r2, [r7, #4]
 800760c:	429a      	cmp	r2, r3
 800760e:	d103      	bne.n	8007618 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	689a      	ldr	r2, [r3, #8]
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2200      	movs	r2, #0
 800761c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	1e5a      	subs	r2, r3, #1
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	681b      	ldr	r3, [r3, #0]
}
 800762c:	4618      	mov	r0, r3
 800762e:	3714      	adds	r7, #20
 8007630:	46bd      	mov	sp, r7
 8007632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007636:	4770      	bx	lr

08007638 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b084      	sub	sp, #16
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
 8007640:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d10a      	bne.n	8007662 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800764c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007650:	f383 8811 	msr	BASEPRI, r3
 8007654:	f3bf 8f6f 	isb	sy
 8007658:	f3bf 8f4f 	dsb	sy
 800765c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800765e:	bf00      	nop
 8007660:	e7fe      	b.n	8007660 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007662:	f002 f877 	bl	8009754 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	681a      	ldr	r2, [r3, #0]
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800766e:	68f9      	ldr	r1, [r7, #12]
 8007670:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007672:	fb01 f303 	mul.w	r3, r1, r3
 8007676:	441a      	add	r2, r3
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	2200      	movs	r2, #0
 8007680:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	681a      	ldr	r2, [r3, #0]
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	681a      	ldr	r2, [r3, #0]
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007692:	3b01      	subs	r3, #1
 8007694:	68f9      	ldr	r1, [r7, #12]
 8007696:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007698:	fb01 f303 	mul.w	r3, r1, r3
 800769c:	441a      	add	r2, r3
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	22ff      	movs	r2, #255	; 0xff
 80076a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	22ff      	movs	r2, #255	; 0xff
 80076ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d114      	bne.n	80076e2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	691b      	ldr	r3, [r3, #16]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d01a      	beq.n	80076f6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	3310      	adds	r3, #16
 80076c4:	4618      	mov	r0, r3
 80076c6:	f001 f929 	bl	800891c <xTaskRemoveFromEventList>
 80076ca:	4603      	mov	r3, r0
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d012      	beq.n	80076f6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80076d0:	4b0c      	ldr	r3, [pc, #48]	; (8007704 <xQueueGenericReset+0xcc>)
 80076d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076d6:	601a      	str	r2, [r3, #0]
 80076d8:	f3bf 8f4f 	dsb	sy
 80076dc:	f3bf 8f6f 	isb	sy
 80076e0:	e009      	b.n	80076f6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	3310      	adds	r3, #16
 80076e6:	4618      	mov	r0, r3
 80076e8:	f7ff fef2 	bl	80074d0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	3324      	adds	r3, #36	; 0x24
 80076f0:	4618      	mov	r0, r3
 80076f2:	f7ff feed 	bl	80074d0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80076f6:	f002 f85d 	bl	80097b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80076fa:	2301      	movs	r3, #1
}
 80076fc:	4618      	mov	r0, r3
 80076fe:	3710      	adds	r7, #16
 8007700:	46bd      	mov	sp, r7
 8007702:	bd80      	pop	{r7, pc}
 8007704:	e000ed04 	.word	0xe000ed04

08007708 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007708:	b580      	push	{r7, lr}
 800770a:	b08e      	sub	sp, #56	; 0x38
 800770c:	af02      	add	r7, sp, #8
 800770e:	60f8      	str	r0, [r7, #12]
 8007710:	60b9      	str	r1, [r7, #8]
 8007712:	607a      	str	r2, [r7, #4]
 8007714:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d10a      	bne.n	8007732 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800771c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007720:	f383 8811 	msr	BASEPRI, r3
 8007724:	f3bf 8f6f 	isb	sy
 8007728:	f3bf 8f4f 	dsb	sy
 800772c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800772e:	bf00      	nop
 8007730:	e7fe      	b.n	8007730 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d10a      	bne.n	800774e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800773c:	f383 8811 	msr	BASEPRI, r3
 8007740:	f3bf 8f6f 	isb	sy
 8007744:	f3bf 8f4f 	dsb	sy
 8007748:	627b      	str	r3, [r7, #36]	; 0x24
}
 800774a:	bf00      	nop
 800774c:	e7fe      	b.n	800774c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d002      	beq.n	800775a <xQueueGenericCreateStatic+0x52>
 8007754:	68bb      	ldr	r3, [r7, #8]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d001      	beq.n	800775e <xQueueGenericCreateStatic+0x56>
 800775a:	2301      	movs	r3, #1
 800775c:	e000      	b.n	8007760 <xQueueGenericCreateStatic+0x58>
 800775e:	2300      	movs	r3, #0
 8007760:	2b00      	cmp	r3, #0
 8007762:	d10a      	bne.n	800777a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007768:	f383 8811 	msr	BASEPRI, r3
 800776c:	f3bf 8f6f 	isb	sy
 8007770:	f3bf 8f4f 	dsb	sy
 8007774:	623b      	str	r3, [r7, #32]
}
 8007776:	bf00      	nop
 8007778:	e7fe      	b.n	8007778 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d102      	bne.n	8007786 <xQueueGenericCreateStatic+0x7e>
 8007780:	68bb      	ldr	r3, [r7, #8]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d101      	bne.n	800778a <xQueueGenericCreateStatic+0x82>
 8007786:	2301      	movs	r3, #1
 8007788:	e000      	b.n	800778c <xQueueGenericCreateStatic+0x84>
 800778a:	2300      	movs	r3, #0
 800778c:	2b00      	cmp	r3, #0
 800778e:	d10a      	bne.n	80077a6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007794:	f383 8811 	msr	BASEPRI, r3
 8007798:	f3bf 8f6f 	isb	sy
 800779c:	f3bf 8f4f 	dsb	sy
 80077a0:	61fb      	str	r3, [r7, #28]
}
 80077a2:	bf00      	nop
 80077a4:	e7fe      	b.n	80077a4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80077a6:	2350      	movs	r3, #80	; 0x50
 80077a8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80077aa:	697b      	ldr	r3, [r7, #20]
 80077ac:	2b50      	cmp	r3, #80	; 0x50
 80077ae:	d00a      	beq.n	80077c6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80077b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077b4:	f383 8811 	msr	BASEPRI, r3
 80077b8:	f3bf 8f6f 	isb	sy
 80077bc:	f3bf 8f4f 	dsb	sy
 80077c0:	61bb      	str	r3, [r7, #24]
}
 80077c2:	bf00      	nop
 80077c4:	e7fe      	b.n	80077c4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80077c6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80077cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d00d      	beq.n	80077ee <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80077d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077d4:	2201      	movs	r2, #1
 80077d6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80077da:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80077de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077e0:	9300      	str	r3, [sp, #0]
 80077e2:	4613      	mov	r3, r2
 80077e4:	687a      	ldr	r2, [r7, #4]
 80077e6:	68b9      	ldr	r1, [r7, #8]
 80077e8:	68f8      	ldr	r0, [r7, #12]
 80077ea:	f000 f805 	bl	80077f8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80077ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80077f0:	4618      	mov	r0, r3
 80077f2:	3730      	adds	r7, #48	; 0x30
 80077f4:	46bd      	mov	sp, r7
 80077f6:	bd80      	pop	{r7, pc}

080077f8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b084      	sub	sp, #16
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	60f8      	str	r0, [r7, #12]
 8007800:	60b9      	str	r1, [r7, #8]
 8007802:	607a      	str	r2, [r7, #4]
 8007804:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007806:	68bb      	ldr	r3, [r7, #8]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d103      	bne.n	8007814 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800780c:	69bb      	ldr	r3, [r7, #24]
 800780e:	69ba      	ldr	r2, [r7, #24]
 8007810:	601a      	str	r2, [r3, #0]
 8007812:	e002      	b.n	800781a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007814:	69bb      	ldr	r3, [r7, #24]
 8007816:	687a      	ldr	r2, [r7, #4]
 8007818:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800781a:	69bb      	ldr	r3, [r7, #24]
 800781c:	68fa      	ldr	r2, [r7, #12]
 800781e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007820:	69bb      	ldr	r3, [r7, #24]
 8007822:	68ba      	ldr	r2, [r7, #8]
 8007824:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007826:	2101      	movs	r1, #1
 8007828:	69b8      	ldr	r0, [r7, #24]
 800782a:	f7ff ff05 	bl	8007638 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800782e:	69bb      	ldr	r3, [r7, #24]
 8007830:	78fa      	ldrb	r2, [r7, #3]
 8007832:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007836:	bf00      	nop
 8007838:	3710      	adds	r7, #16
 800783a:	46bd      	mov	sp, r7
 800783c:	bd80      	pop	{r7, pc}
	...

08007840 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b08e      	sub	sp, #56	; 0x38
 8007844:	af00      	add	r7, sp, #0
 8007846:	60f8      	str	r0, [r7, #12]
 8007848:	60b9      	str	r1, [r7, #8]
 800784a:	607a      	str	r2, [r7, #4]
 800784c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800784e:	2300      	movs	r3, #0
 8007850:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007858:	2b00      	cmp	r3, #0
 800785a:	d10a      	bne.n	8007872 <xQueueGenericSend+0x32>
	__asm volatile
 800785c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007860:	f383 8811 	msr	BASEPRI, r3
 8007864:	f3bf 8f6f 	isb	sy
 8007868:	f3bf 8f4f 	dsb	sy
 800786c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800786e:	bf00      	nop
 8007870:	e7fe      	b.n	8007870 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007872:	68bb      	ldr	r3, [r7, #8]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d103      	bne.n	8007880 <xQueueGenericSend+0x40>
 8007878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800787a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800787c:	2b00      	cmp	r3, #0
 800787e:	d101      	bne.n	8007884 <xQueueGenericSend+0x44>
 8007880:	2301      	movs	r3, #1
 8007882:	e000      	b.n	8007886 <xQueueGenericSend+0x46>
 8007884:	2300      	movs	r3, #0
 8007886:	2b00      	cmp	r3, #0
 8007888:	d10a      	bne.n	80078a0 <xQueueGenericSend+0x60>
	__asm volatile
 800788a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800788e:	f383 8811 	msr	BASEPRI, r3
 8007892:	f3bf 8f6f 	isb	sy
 8007896:	f3bf 8f4f 	dsb	sy
 800789a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800789c:	bf00      	nop
 800789e:	e7fe      	b.n	800789e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	2b02      	cmp	r3, #2
 80078a4:	d103      	bne.n	80078ae <xQueueGenericSend+0x6e>
 80078a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078aa:	2b01      	cmp	r3, #1
 80078ac:	d101      	bne.n	80078b2 <xQueueGenericSend+0x72>
 80078ae:	2301      	movs	r3, #1
 80078b0:	e000      	b.n	80078b4 <xQueueGenericSend+0x74>
 80078b2:	2300      	movs	r3, #0
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d10a      	bne.n	80078ce <xQueueGenericSend+0x8e>
	__asm volatile
 80078b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078bc:	f383 8811 	msr	BASEPRI, r3
 80078c0:	f3bf 8f6f 	isb	sy
 80078c4:	f3bf 8f4f 	dsb	sy
 80078c8:	623b      	str	r3, [r7, #32]
}
 80078ca:	bf00      	nop
 80078cc:	e7fe      	b.n	80078cc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80078ce:	f001 f9e7 	bl	8008ca0 <xTaskGetSchedulerState>
 80078d2:	4603      	mov	r3, r0
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d102      	bne.n	80078de <xQueueGenericSend+0x9e>
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d101      	bne.n	80078e2 <xQueueGenericSend+0xa2>
 80078de:	2301      	movs	r3, #1
 80078e0:	e000      	b.n	80078e4 <xQueueGenericSend+0xa4>
 80078e2:	2300      	movs	r3, #0
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d10a      	bne.n	80078fe <xQueueGenericSend+0xbe>
	__asm volatile
 80078e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078ec:	f383 8811 	msr	BASEPRI, r3
 80078f0:	f3bf 8f6f 	isb	sy
 80078f4:	f3bf 8f4f 	dsb	sy
 80078f8:	61fb      	str	r3, [r7, #28]
}
 80078fa:	bf00      	nop
 80078fc:	e7fe      	b.n	80078fc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80078fe:	f001 ff29 	bl	8009754 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007904:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007908:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800790a:	429a      	cmp	r2, r3
 800790c:	d302      	bcc.n	8007914 <xQueueGenericSend+0xd4>
 800790e:	683b      	ldr	r3, [r7, #0]
 8007910:	2b02      	cmp	r3, #2
 8007912:	d129      	bne.n	8007968 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007914:	683a      	ldr	r2, [r7, #0]
 8007916:	68b9      	ldr	r1, [r7, #8]
 8007918:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800791a:	f000 fa0b 	bl	8007d34 <prvCopyDataToQueue>
 800791e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007924:	2b00      	cmp	r3, #0
 8007926:	d010      	beq.n	800794a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800792a:	3324      	adds	r3, #36	; 0x24
 800792c:	4618      	mov	r0, r3
 800792e:	f000 fff5 	bl	800891c <xTaskRemoveFromEventList>
 8007932:	4603      	mov	r3, r0
 8007934:	2b00      	cmp	r3, #0
 8007936:	d013      	beq.n	8007960 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007938:	4b3f      	ldr	r3, [pc, #252]	; (8007a38 <xQueueGenericSend+0x1f8>)
 800793a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800793e:	601a      	str	r2, [r3, #0]
 8007940:	f3bf 8f4f 	dsb	sy
 8007944:	f3bf 8f6f 	isb	sy
 8007948:	e00a      	b.n	8007960 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800794a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800794c:	2b00      	cmp	r3, #0
 800794e:	d007      	beq.n	8007960 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007950:	4b39      	ldr	r3, [pc, #228]	; (8007a38 <xQueueGenericSend+0x1f8>)
 8007952:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007956:	601a      	str	r2, [r3, #0]
 8007958:	f3bf 8f4f 	dsb	sy
 800795c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007960:	f001 ff28 	bl	80097b4 <vPortExitCritical>
				return pdPASS;
 8007964:	2301      	movs	r3, #1
 8007966:	e063      	b.n	8007a30 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d103      	bne.n	8007976 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800796e:	f001 ff21 	bl	80097b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007972:	2300      	movs	r3, #0
 8007974:	e05c      	b.n	8007a30 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007976:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007978:	2b00      	cmp	r3, #0
 800797a:	d106      	bne.n	800798a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800797c:	f107 0314 	add.w	r3, r7, #20
 8007980:	4618      	mov	r0, r3
 8007982:	f001 f82f 	bl	80089e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007986:	2301      	movs	r3, #1
 8007988:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800798a:	f001 ff13 	bl	80097b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800798e:	f000 fd9b 	bl	80084c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007992:	f001 fedf 	bl	8009754 <vPortEnterCritical>
 8007996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007998:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800799c:	b25b      	sxtb	r3, r3
 800799e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80079a2:	d103      	bne.n	80079ac <xQueueGenericSend+0x16c>
 80079a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079a6:	2200      	movs	r2, #0
 80079a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80079ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80079b2:	b25b      	sxtb	r3, r3
 80079b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80079b8:	d103      	bne.n	80079c2 <xQueueGenericSend+0x182>
 80079ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079bc:	2200      	movs	r2, #0
 80079be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80079c2:	f001 fef7 	bl	80097b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80079c6:	1d3a      	adds	r2, r7, #4
 80079c8:	f107 0314 	add.w	r3, r7, #20
 80079cc:	4611      	mov	r1, r2
 80079ce:	4618      	mov	r0, r3
 80079d0:	f001 f81e 	bl	8008a10 <xTaskCheckForTimeOut>
 80079d4:	4603      	mov	r3, r0
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d124      	bne.n	8007a24 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80079da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80079dc:	f000 faa2 	bl	8007f24 <prvIsQueueFull>
 80079e0:	4603      	mov	r3, r0
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d018      	beq.n	8007a18 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80079e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079e8:	3310      	adds	r3, #16
 80079ea:	687a      	ldr	r2, [r7, #4]
 80079ec:	4611      	mov	r1, r2
 80079ee:	4618      	mov	r0, r3
 80079f0:	f000 ff44 	bl	800887c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80079f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80079f6:	f000 fa2d 	bl	8007e54 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80079fa:	f000 fd73 	bl	80084e4 <xTaskResumeAll>
 80079fe:	4603      	mov	r3, r0
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	f47f af7c 	bne.w	80078fe <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007a06:	4b0c      	ldr	r3, [pc, #48]	; (8007a38 <xQueueGenericSend+0x1f8>)
 8007a08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a0c:	601a      	str	r2, [r3, #0]
 8007a0e:	f3bf 8f4f 	dsb	sy
 8007a12:	f3bf 8f6f 	isb	sy
 8007a16:	e772      	b.n	80078fe <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007a18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007a1a:	f000 fa1b 	bl	8007e54 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007a1e:	f000 fd61 	bl	80084e4 <xTaskResumeAll>
 8007a22:	e76c      	b.n	80078fe <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007a24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007a26:	f000 fa15 	bl	8007e54 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007a2a:	f000 fd5b 	bl	80084e4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007a2e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007a30:	4618      	mov	r0, r3
 8007a32:	3738      	adds	r7, #56	; 0x38
 8007a34:	46bd      	mov	sp, r7
 8007a36:	bd80      	pop	{r7, pc}
 8007a38:	e000ed04 	.word	0xe000ed04

08007a3c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b090      	sub	sp, #64	; 0x40
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	60f8      	str	r0, [r7, #12]
 8007a44:	60b9      	str	r1, [r7, #8]
 8007a46:	607a      	str	r2, [r7, #4]
 8007a48:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8007a4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d10a      	bne.n	8007a6a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a58:	f383 8811 	msr	BASEPRI, r3
 8007a5c:	f3bf 8f6f 	isb	sy
 8007a60:	f3bf 8f4f 	dsb	sy
 8007a64:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007a66:	bf00      	nop
 8007a68:	e7fe      	b.n	8007a68 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007a6a:	68bb      	ldr	r3, [r7, #8]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d103      	bne.n	8007a78 <xQueueGenericSendFromISR+0x3c>
 8007a70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d101      	bne.n	8007a7c <xQueueGenericSendFromISR+0x40>
 8007a78:	2301      	movs	r3, #1
 8007a7a:	e000      	b.n	8007a7e <xQueueGenericSendFromISR+0x42>
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d10a      	bne.n	8007a98 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a86:	f383 8811 	msr	BASEPRI, r3
 8007a8a:	f3bf 8f6f 	isb	sy
 8007a8e:	f3bf 8f4f 	dsb	sy
 8007a92:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007a94:	bf00      	nop
 8007a96:	e7fe      	b.n	8007a96 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	2b02      	cmp	r3, #2
 8007a9c:	d103      	bne.n	8007aa6 <xQueueGenericSendFromISR+0x6a>
 8007a9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007aa2:	2b01      	cmp	r3, #1
 8007aa4:	d101      	bne.n	8007aaa <xQueueGenericSendFromISR+0x6e>
 8007aa6:	2301      	movs	r3, #1
 8007aa8:	e000      	b.n	8007aac <xQueueGenericSendFromISR+0x70>
 8007aaa:	2300      	movs	r3, #0
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d10a      	bne.n	8007ac6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ab4:	f383 8811 	msr	BASEPRI, r3
 8007ab8:	f3bf 8f6f 	isb	sy
 8007abc:	f3bf 8f4f 	dsb	sy
 8007ac0:	623b      	str	r3, [r7, #32]
}
 8007ac2:	bf00      	nop
 8007ac4:	e7fe      	b.n	8007ac4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007ac6:	f001 ff27 	bl	8009918 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007aca:	f3ef 8211 	mrs	r2, BASEPRI
 8007ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ad2:	f383 8811 	msr	BASEPRI, r3
 8007ad6:	f3bf 8f6f 	isb	sy
 8007ada:	f3bf 8f4f 	dsb	sy
 8007ade:	61fa      	str	r2, [r7, #28]
 8007ae0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007ae2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007ae4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ae8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007aea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007aee:	429a      	cmp	r2, r3
 8007af0:	d302      	bcc.n	8007af8 <xQueueGenericSendFromISR+0xbc>
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	2b02      	cmp	r3, #2
 8007af6:	d12f      	bne.n	8007b58 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007af8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007afa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007afe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007b02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b06:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007b08:	683a      	ldr	r2, [r7, #0]
 8007b0a:	68b9      	ldr	r1, [r7, #8]
 8007b0c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007b0e:	f000 f911 	bl	8007d34 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007b12:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8007b16:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007b1a:	d112      	bne.n	8007b42 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007b1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d016      	beq.n	8007b52 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007b24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b26:	3324      	adds	r3, #36	; 0x24
 8007b28:	4618      	mov	r0, r3
 8007b2a:	f000 fef7 	bl	800891c <xTaskRemoveFromEventList>
 8007b2e:	4603      	mov	r3, r0
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d00e      	beq.n	8007b52 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d00b      	beq.n	8007b52 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	2201      	movs	r2, #1
 8007b3e:	601a      	str	r2, [r3, #0]
 8007b40:	e007      	b.n	8007b52 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007b42:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007b46:	3301      	adds	r3, #1
 8007b48:	b2db      	uxtb	r3, r3
 8007b4a:	b25a      	sxtb	r2, r3
 8007b4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007b52:	2301      	movs	r3, #1
 8007b54:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8007b56:	e001      	b.n	8007b5c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007b58:	2300      	movs	r3, #0
 8007b5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b5e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007b60:	697b      	ldr	r3, [r7, #20]
 8007b62:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007b66:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007b68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	3740      	adds	r7, #64	; 0x40
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	bd80      	pop	{r7, pc}
	...

08007b74 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b08c      	sub	sp, #48	; 0x30
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	60f8      	str	r0, [r7, #12]
 8007b7c:	60b9      	str	r1, [r7, #8]
 8007b7e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007b80:	2300      	movs	r3, #0
 8007b82:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d10a      	bne.n	8007ba4 <xQueueReceive+0x30>
	__asm volatile
 8007b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b92:	f383 8811 	msr	BASEPRI, r3
 8007b96:	f3bf 8f6f 	isb	sy
 8007b9a:	f3bf 8f4f 	dsb	sy
 8007b9e:	623b      	str	r3, [r7, #32]
}
 8007ba0:	bf00      	nop
 8007ba2:	e7fe      	b.n	8007ba2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007ba4:	68bb      	ldr	r3, [r7, #8]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d103      	bne.n	8007bb2 <xQueueReceive+0x3e>
 8007baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d101      	bne.n	8007bb6 <xQueueReceive+0x42>
 8007bb2:	2301      	movs	r3, #1
 8007bb4:	e000      	b.n	8007bb8 <xQueueReceive+0x44>
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d10a      	bne.n	8007bd2 <xQueueReceive+0x5e>
	__asm volatile
 8007bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bc0:	f383 8811 	msr	BASEPRI, r3
 8007bc4:	f3bf 8f6f 	isb	sy
 8007bc8:	f3bf 8f4f 	dsb	sy
 8007bcc:	61fb      	str	r3, [r7, #28]
}
 8007bce:	bf00      	nop
 8007bd0:	e7fe      	b.n	8007bd0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007bd2:	f001 f865 	bl	8008ca0 <xTaskGetSchedulerState>
 8007bd6:	4603      	mov	r3, r0
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d102      	bne.n	8007be2 <xQueueReceive+0x6e>
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d101      	bne.n	8007be6 <xQueueReceive+0x72>
 8007be2:	2301      	movs	r3, #1
 8007be4:	e000      	b.n	8007be8 <xQueueReceive+0x74>
 8007be6:	2300      	movs	r3, #0
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d10a      	bne.n	8007c02 <xQueueReceive+0x8e>
	__asm volatile
 8007bec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bf0:	f383 8811 	msr	BASEPRI, r3
 8007bf4:	f3bf 8f6f 	isb	sy
 8007bf8:	f3bf 8f4f 	dsb	sy
 8007bfc:	61bb      	str	r3, [r7, #24]
}
 8007bfe:	bf00      	nop
 8007c00:	e7fe      	b.n	8007c00 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007c02:	f001 fda7 	bl	8009754 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c0a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d01f      	beq.n	8007c52 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007c12:	68b9      	ldr	r1, [r7, #8]
 8007c14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c16:	f000 f8f7 	bl	8007e08 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c1c:	1e5a      	subs	r2, r3, #1
 8007c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c20:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c24:	691b      	ldr	r3, [r3, #16]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d00f      	beq.n	8007c4a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007c2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c2c:	3310      	adds	r3, #16
 8007c2e:	4618      	mov	r0, r3
 8007c30:	f000 fe74 	bl	800891c <xTaskRemoveFromEventList>
 8007c34:	4603      	mov	r3, r0
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d007      	beq.n	8007c4a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007c3a:	4b3d      	ldr	r3, [pc, #244]	; (8007d30 <xQueueReceive+0x1bc>)
 8007c3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c40:	601a      	str	r2, [r3, #0]
 8007c42:	f3bf 8f4f 	dsb	sy
 8007c46:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007c4a:	f001 fdb3 	bl	80097b4 <vPortExitCritical>
				return pdPASS;
 8007c4e:	2301      	movs	r3, #1
 8007c50:	e069      	b.n	8007d26 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d103      	bne.n	8007c60 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007c58:	f001 fdac 	bl	80097b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	e062      	b.n	8007d26 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d106      	bne.n	8007c74 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007c66:	f107 0310 	add.w	r3, r7, #16
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	f000 feba 	bl	80089e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007c70:	2301      	movs	r3, #1
 8007c72:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007c74:	f001 fd9e 	bl	80097b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007c78:	f000 fc26 	bl	80084c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007c7c:	f001 fd6a 	bl	8009754 <vPortEnterCritical>
 8007c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c82:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007c86:	b25b      	sxtb	r3, r3
 8007c88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007c8c:	d103      	bne.n	8007c96 <xQueueReceive+0x122>
 8007c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c90:	2200      	movs	r2, #0
 8007c92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c98:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007c9c:	b25b      	sxtb	r3, r3
 8007c9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007ca2:	d103      	bne.n	8007cac <xQueueReceive+0x138>
 8007ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007cac:	f001 fd82 	bl	80097b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007cb0:	1d3a      	adds	r2, r7, #4
 8007cb2:	f107 0310 	add.w	r3, r7, #16
 8007cb6:	4611      	mov	r1, r2
 8007cb8:	4618      	mov	r0, r3
 8007cba:	f000 fea9 	bl	8008a10 <xTaskCheckForTimeOut>
 8007cbe:	4603      	mov	r3, r0
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d123      	bne.n	8007d0c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007cc4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007cc6:	f000 f917 	bl	8007ef8 <prvIsQueueEmpty>
 8007cca:	4603      	mov	r3, r0
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d017      	beq.n	8007d00 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cd2:	3324      	adds	r3, #36	; 0x24
 8007cd4:	687a      	ldr	r2, [r7, #4]
 8007cd6:	4611      	mov	r1, r2
 8007cd8:	4618      	mov	r0, r3
 8007cda:	f000 fdcf 	bl	800887c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007cde:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ce0:	f000 f8b8 	bl	8007e54 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007ce4:	f000 fbfe 	bl	80084e4 <xTaskResumeAll>
 8007ce8:	4603      	mov	r3, r0
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d189      	bne.n	8007c02 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8007cee:	4b10      	ldr	r3, [pc, #64]	; (8007d30 <xQueueReceive+0x1bc>)
 8007cf0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007cf4:	601a      	str	r2, [r3, #0]
 8007cf6:	f3bf 8f4f 	dsb	sy
 8007cfa:	f3bf 8f6f 	isb	sy
 8007cfe:	e780      	b.n	8007c02 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007d00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d02:	f000 f8a7 	bl	8007e54 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007d06:	f000 fbed 	bl	80084e4 <xTaskResumeAll>
 8007d0a:	e77a      	b.n	8007c02 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007d0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d0e:	f000 f8a1 	bl	8007e54 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007d12:	f000 fbe7 	bl	80084e4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007d16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d18:	f000 f8ee 	bl	8007ef8 <prvIsQueueEmpty>
 8007d1c:	4603      	mov	r3, r0
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	f43f af6f 	beq.w	8007c02 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007d24:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007d26:	4618      	mov	r0, r3
 8007d28:	3730      	adds	r7, #48	; 0x30
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	bd80      	pop	{r7, pc}
 8007d2e:	bf00      	nop
 8007d30:	e000ed04 	.word	0xe000ed04

08007d34 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b086      	sub	sp, #24
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	60f8      	str	r0, [r7, #12]
 8007d3c:	60b9      	str	r1, [r7, #8]
 8007d3e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007d40:	2300      	movs	r3, #0
 8007d42:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d48:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d10d      	bne.n	8007d6e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d14d      	bne.n	8007df6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	689b      	ldr	r3, [r3, #8]
 8007d5e:	4618      	mov	r0, r3
 8007d60:	f000 ffbc 	bl	8008cdc <xTaskPriorityDisinherit>
 8007d64:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	2200      	movs	r2, #0
 8007d6a:	609a      	str	r2, [r3, #8]
 8007d6c:	e043      	b.n	8007df6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d119      	bne.n	8007da8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	6858      	ldr	r0, [r3, #4]
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d7c:	461a      	mov	r2, r3
 8007d7e:	68b9      	ldr	r1, [r7, #8]
 8007d80:	f002 fe14 	bl	800a9ac <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	685a      	ldr	r2, [r3, #4]
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d8c:	441a      	add	r2, r3
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	685a      	ldr	r2, [r3, #4]
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	689b      	ldr	r3, [r3, #8]
 8007d9a:	429a      	cmp	r2, r3
 8007d9c:	d32b      	bcc.n	8007df6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	681a      	ldr	r2, [r3, #0]
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	605a      	str	r2, [r3, #4]
 8007da6:	e026      	b.n	8007df6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	68d8      	ldr	r0, [r3, #12]
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007db0:	461a      	mov	r2, r3
 8007db2:	68b9      	ldr	r1, [r7, #8]
 8007db4:	f002 fdfa 	bl	800a9ac <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	68da      	ldr	r2, [r3, #12]
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dc0:	425b      	negs	r3, r3
 8007dc2:	441a      	add	r2, r3
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	68da      	ldr	r2, [r3, #12]
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	429a      	cmp	r2, r3
 8007dd2:	d207      	bcs.n	8007de4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	689a      	ldr	r2, [r3, #8]
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ddc:	425b      	negs	r3, r3
 8007dde:	441a      	add	r2, r3
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2b02      	cmp	r3, #2
 8007de8:	d105      	bne.n	8007df6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007dea:	693b      	ldr	r3, [r7, #16]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d002      	beq.n	8007df6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007df0:	693b      	ldr	r3, [r7, #16]
 8007df2:	3b01      	subs	r3, #1
 8007df4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007df6:	693b      	ldr	r3, [r7, #16]
 8007df8:	1c5a      	adds	r2, r3, #1
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007dfe:	697b      	ldr	r3, [r7, #20]
}
 8007e00:	4618      	mov	r0, r3
 8007e02:	3718      	adds	r7, #24
 8007e04:	46bd      	mov	sp, r7
 8007e06:	bd80      	pop	{r7, pc}

08007e08 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b082      	sub	sp, #8
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
 8007e10:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d018      	beq.n	8007e4c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	68da      	ldr	r2, [r3, #12]
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e22:	441a      	add	r2, r3
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	68da      	ldr	r2, [r3, #12]
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	689b      	ldr	r3, [r3, #8]
 8007e30:	429a      	cmp	r2, r3
 8007e32:	d303      	bcc.n	8007e3c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681a      	ldr	r2, [r3, #0]
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	68d9      	ldr	r1, [r3, #12]
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e44:	461a      	mov	r2, r3
 8007e46:	6838      	ldr	r0, [r7, #0]
 8007e48:	f002 fdb0 	bl	800a9ac <memcpy>
	}
}
 8007e4c:	bf00      	nop
 8007e4e:	3708      	adds	r7, #8
 8007e50:	46bd      	mov	sp, r7
 8007e52:	bd80      	pop	{r7, pc}

08007e54 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b084      	sub	sp, #16
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007e5c:	f001 fc7a 	bl	8009754 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007e66:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007e68:	e011      	b.n	8007e8e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d012      	beq.n	8007e98 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	3324      	adds	r3, #36	; 0x24
 8007e76:	4618      	mov	r0, r3
 8007e78:	f000 fd50 	bl	800891c <xTaskRemoveFromEventList>
 8007e7c:	4603      	mov	r3, r0
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d001      	beq.n	8007e86 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007e82:	f000 fe27 	bl	8008ad4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007e86:	7bfb      	ldrb	r3, [r7, #15]
 8007e88:	3b01      	subs	r3, #1
 8007e8a:	b2db      	uxtb	r3, r3
 8007e8c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007e8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	dce9      	bgt.n	8007e6a <prvUnlockQueue+0x16>
 8007e96:	e000      	b.n	8007e9a <prvUnlockQueue+0x46>
					break;
 8007e98:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	22ff      	movs	r2, #255	; 0xff
 8007e9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007ea2:	f001 fc87 	bl	80097b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007ea6:	f001 fc55 	bl	8009754 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007eb0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007eb2:	e011      	b.n	8007ed8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	691b      	ldr	r3, [r3, #16]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d012      	beq.n	8007ee2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	3310      	adds	r3, #16
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	f000 fd2b 	bl	800891c <xTaskRemoveFromEventList>
 8007ec6:	4603      	mov	r3, r0
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d001      	beq.n	8007ed0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007ecc:	f000 fe02 	bl	8008ad4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007ed0:	7bbb      	ldrb	r3, [r7, #14]
 8007ed2:	3b01      	subs	r3, #1
 8007ed4:	b2db      	uxtb	r3, r3
 8007ed6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007ed8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	dce9      	bgt.n	8007eb4 <prvUnlockQueue+0x60>
 8007ee0:	e000      	b.n	8007ee4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007ee2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	22ff      	movs	r2, #255	; 0xff
 8007ee8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007eec:	f001 fc62 	bl	80097b4 <vPortExitCritical>
}
 8007ef0:	bf00      	nop
 8007ef2:	3710      	adds	r7, #16
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	bd80      	pop	{r7, pc}

08007ef8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b084      	sub	sp, #16
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007f00:	f001 fc28 	bl	8009754 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d102      	bne.n	8007f12 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007f0c:	2301      	movs	r3, #1
 8007f0e:	60fb      	str	r3, [r7, #12]
 8007f10:	e001      	b.n	8007f16 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007f12:	2300      	movs	r3, #0
 8007f14:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007f16:	f001 fc4d 	bl	80097b4 <vPortExitCritical>

	return xReturn;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
}
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	3710      	adds	r7, #16
 8007f20:	46bd      	mov	sp, r7
 8007f22:	bd80      	pop	{r7, pc}

08007f24 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b084      	sub	sp, #16
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007f2c:	f001 fc12 	bl	8009754 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f38:	429a      	cmp	r2, r3
 8007f3a:	d102      	bne.n	8007f42 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007f3c:	2301      	movs	r3, #1
 8007f3e:	60fb      	str	r3, [r7, #12]
 8007f40:	e001      	b.n	8007f46 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007f42:	2300      	movs	r3, #0
 8007f44:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007f46:	f001 fc35 	bl	80097b4 <vPortExitCritical>

	return xReturn;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
}
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	3710      	adds	r7, #16
 8007f50:	46bd      	mov	sp, r7
 8007f52:	bd80      	pop	{r7, pc}

08007f54 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007f54:	b480      	push	{r7}
 8007f56:	b085      	sub	sp, #20
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
 8007f5c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007f5e:	2300      	movs	r3, #0
 8007f60:	60fb      	str	r3, [r7, #12]
 8007f62:	e014      	b.n	8007f8e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007f64:	4a0f      	ldr	r2, [pc, #60]	; (8007fa4 <vQueueAddToRegistry+0x50>)
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d10b      	bne.n	8007f88 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007f70:	490c      	ldr	r1, [pc, #48]	; (8007fa4 <vQueueAddToRegistry+0x50>)
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	683a      	ldr	r2, [r7, #0]
 8007f76:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007f7a:	4a0a      	ldr	r2, [pc, #40]	; (8007fa4 <vQueueAddToRegistry+0x50>)
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	00db      	lsls	r3, r3, #3
 8007f80:	4413      	add	r3, r2
 8007f82:	687a      	ldr	r2, [r7, #4]
 8007f84:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007f86:	e006      	b.n	8007f96 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	3301      	adds	r3, #1
 8007f8c:	60fb      	str	r3, [r7, #12]
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	2b07      	cmp	r3, #7
 8007f92:	d9e7      	bls.n	8007f64 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007f94:	bf00      	nop
 8007f96:	bf00      	nop
 8007f98:	3714      	adds	r7, #20
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa0:	4770      	bx	lr
 8007fa2:	bf00      	nop
 8007fa4:	20000994 	.word	0x20000994

08007fa8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b086      	sub	sp, #24
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	60f8      	str	r0, [r7, #12]
 8007fb0:	60b9      	str	r1, [r7, #8]
 8007fb2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007fb8:	f001 fbcc 	bl	8009754 <vPortEnterCritical>
 8007fbc:	697b      	ldr	r3, [r7, #20]
 8007fbe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007fc2:	b25b      	sxtb	r3, r3
 8007fc4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007fc8:	d103      	bne.n	8007fd2 <vQueueWaitForMessageRestricted+0x2a>
 8007fca:	697b      	ldr	r3, [r7, #20]
 8007fcc:	2200      	movs	r2, #0
 8007fce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007fd2:	697b      	ldr	r3, [r7, #20]
 8007fd4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007fd8:	b25b      	sxtb	r3, r3
 8007fda:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007fde:	d103      	bne.n	8007fe8 <vQueueWaitForMessageRestricted+0x40>
 8007fe0:	697b      	ldr	r3, [r7, #20]
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007fe8:	f001 fbe4 	bl	80097b4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007fec:	697b      	ldr	r3, [r7, #20]
 8007fee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d106      	bne.n	8008002 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007ff4:	697b      	ldr	r3, [r7, #20]
 8007ff6:	3324      	adds	r3, #36	; 0x24
 8007ff8:	687a      	ldr	r2, [r7, #4]
 8007ffa:	68b9      	ldr	r1, [r7, #8]
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	f000 fc61 	bl	80088c4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008002:	6978      	ldr	r0, [r7, #20]
 8008004:	f7ff ff26 	bl	8007e54 <prvUnlockQueue>
	}
 8008008:	bf00      	nop
 800800a:	3718      	adds	r7, #24
 800800c:	46bd      	mov	sp, r7
 800800e:	bd80      	pop	{r7, pc}

08008010 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008010:	b580      	push	{r7, lr}
 8008012:	b08e      	sub	sp, #56	; 0x38
 8008014:	af04      	add	r7, sp, #16
 8008016:	60f8      	str	r0, [r7, #12]
 8008018:	60b9      	str	r1, [r7, #8]
 800801a:	607a      	str	r2, [r7, #4]
 800801c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800801e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008020:	2b00      	cmp	r3, #0
 8008022:	d10a      	bne.n	800803a <xTaskCreateStatic+0x2a>
	__asm volatile
 8008024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008028:	f383 8811 	msr	BASEPRI, r3
 800802c:	f3bf 8f6f 	isb	sy
 8008030:	f3bf 8f4f 	dsb	sy
 8008034:	623b      	str	r3, [r7, #32]
}
 8008036:	bf00      	nop
 8008038:	e7fe      	b.n	8008038 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800803a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800803c:	2b00      	cmp	r3, #0
 800803e:	d10a      	bne.n	8008056 <xTaskCreateStatic+0x46>
	__asm volatile
 8008040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008044:	f383 8811 	msr	BASEPRI, r3
 8008048:	f3bf 8f6f 	isb	sy
 800804c:	f3bf 8f4f 	dsb	sy
 8008050:	61fb      	str	r3, [r7, #28]
}
 8008052:	bf00      	nop
 8008054:	e7fe      	b.n	8008054 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008056:	23a8      	movs	r3, #168	; 0xa8
 8008058:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800805a:	693b      	ldr	r3, [r7, #16]
 800805c:	2ba8      	cmp	r3, #168	; 0xa8
 800805e:	d00a      	beq.n	8008076 <xTaskCreateStatic+0x66>
	__asm volatile
 8008060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008064:	f383 8811 	msr	BASEPRI, r3
 8008068:	f3bf 8f6f 	isb	sy
 800806c:	f3bf 8f4f 	dsb	sy
 8008070:	61bb      	str	r3, [r7, #24]
}
 8008072:	bf00      	nop
 8008074:	e7fe      	b.n	8008074 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008076:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800807a:	2b00      	cmp	r3, #0
 800807c:	d01e      	beq.n	80080bc <xTaskCreateStatic+0xac>
 800807e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008080:	2b00      	cmp	r3, #0
 8008082:	d01b      	beq.n	80080bc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008086:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800808a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800808c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800808e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008090:	2202      	movs	r2, #2
 8008092:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008096:	2300      	movs	r3, #0
 8008098:	9303      	str	r3, [sp, #12]
 800809a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800809c:	9302      	str	r3, [sp, #8]
 800809e:	f107 0314 	add.w	r3, r7, #20
 80080a2:	9301      	str	r3, [sp, #4]
 80080a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080a6:	9300      	str	r3, [sp, #0]
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	687a      	ldr	r2, [r7, #4]
 80080ac:	68b9      	ldr	r1, [r7, #8]
 80080ae:	68f8      	ldr	r0, [r7, #12]
 80080b0:	f000 f850 	bl	8008154 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80080b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80080b6:	f000 f8f3 	bl	80082a0 <prvAddNewTaskToReadyList>
 80080ba:	e001      	b.n	80080c0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80080bc:	2300      	movs	r3, #0
 80080be:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80080c0:	697b      	ldr	r3, [r7, #20]
	}
 80080c2:	4618      	mov	r0, r3
 80080c4:	3728      	adds	r7, #40	; 0x28
 80080c6:	46bd      	mov	sp, r7
 80080c8:	bd80      	pop	{r7, pc}

080080ca <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80080ca:	b580      	push	{r7, lr}
 80080cc:	b08c      	sub	sp, #48	; 0x30
 80080ce:	af04      	add	r7, sp, #16
 80080d0:	60f8      	str	r0, [r7, #12]
 80080d2:	60b9      	str	r1, [r7, #8]
 80080d4:	603b      	str	r3, [r7, #0]
 80080d6:	4613      	mov	r3, r2
 80080d8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80080da:	88fb      	ldrh	r3, [r7, #6]
 80080dc:	009b      	lsls	r3, r3, #2
 80080de:	4618      	mov	r0, r3
 80080e0:	f001 fc5a 	bl	8009998 <pvPortMalloc>
 80080e4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80080e6:	697b      	ldr	r3, [r7, #20]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d00e      	beq.n	800810a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80080ec:	20a8      	movs	r0, #168	; 0xa8
 80080ee:	f001 fc53 	bl	8009998 <pvPortMalloc>
 80080f2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80080f4:	69fb      	ldr	r3, [r7, #28]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d003      	beq.n	8008102 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80080fa:	69fb      	ldr	r3, [r7, #28]
 80080fc:	697a      	ldr	r2, [r7, #20]
 80080fe:	631a      	str	r2, [r3, #48]	; 0x30
 8008100:	e005      	b.n	800810e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008102:	6978      	ldr	r0, [r7, #20]
 8008104:	f001 fd14 	bl	8009b30 <vPortFree>
 8008108:	e001      	b.n	800810e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800810a:	2300      	movs	r3, #0
 800810c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800810e:	69fb      	ldr	r3, [r7, #28]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d017      	beq.n	8008144 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008114:	69fb      	ldr	r3, [r7, #28]
 8008116:	2200      	movs	r2, #0
 8008118:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800811c:	88fa      	ldrh	r2, [r7, #6]
 800811e:	2300      	movs	r3, #0
 8008120:	9303      	str	r3, [sp, #12]
 8008122:	69fb      	ldr	r3, [r7, #28]
 8008124:	9302      	str	r3, [sp, #8]
 8008126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008128:	9301      	str	r3, [sp, #4]
 800812a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800812c:	9300      	str	r3, [sp, #0]
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	68b9      	ldr	r1, [r7, #8]
 8008132:	68f8      	ldr	r0, [r7, #12]
 8008134:	f000 f80e 	bl	8008154 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008138:	69f8      	ldr	r0, [r7, #28]
 800813a:	f000 f8b1 	bl	80082a0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800813e:	2301      	movs	r3, #1
 8008140:	61bb      	str	r3, [r7, #24]
 8008142:	e002      	b.n	800814a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008144:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008148:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800814a:	69bb      	ldr	r3, [r7, #24]
	}
 800814c:	4618      	mov	r0, r3
 800814e:	3720      	adds	r7, #32
 8008150:	46bd      	mov	sp, r7
 8008152:	bd80      	pop	{r7, pc}

08008154 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008154:	b580      	push	{r7, lr}
 8008156:	b088      	sub	sp, #32
 8008158:	af00      	add	r7, sp, #0
 800815a:	60f8      	str	r0, [r7, #12]
 800815c:	60b9      	str	r1, [r7, #8]
 800815e:	607a      	str	r2, [r7, #4]
 8008160:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008164:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	009b      	lsls	r3, r3, #2
 800816a:	461a      	mov	r2, r3
 800816c:	21a5      	movs	r1, #165	; 0xa5
 800816e:	f002 fb99 	bl	800a8a4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008174:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800817c:	3b01      	subs	r3, #1
 800817e:	009b      	lsls	r3, r3, #2
 8008180:	4413      	add	r3, r2
 8008182:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008184:	69bb      	ldr	r3, [r7, #24]
 8008186:	f023 0307 	bic.w	r3, r3, #7
 800818a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800818c:	69bb      	ldr	r3, [r7, #24]
 800818e:	f003 0307 	and.w	r3, r3, #7
 8008192:	2b00      	cmp	r3, #0
 8008194:	d00a      	beq.n	80081ac <prvInitialiseNewTask+0x58>
	__asm volatile
 8008196:	f04f 0350 	mov.w	r3, #80	; 0x50
 800819a:	f383 8811 	msr	BASEPRI, r3
 800819e:	f3bf 8f6f 	isb	sy
 80081a2:	f3bf 8f4f 	dsb	sy
 80081a6:	617b      	str	r3, [r7, #20]
}
 80081a8:	bf00      	nop
 80081aa:	e7fe      	b.n	80081aa <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80081ac:	68bb      	ldr	r3, [r7, #8]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d01f      	beq.n	80081f2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80081b2:	2300      	movs	r3, #0
 80081b4:	61fb      	str	r3, [r7, #28]
 80081b6:	e012      	b.n	80081de <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80081b8:	68ba      	ldr	r2, [r7, #8]
 80081ba:	69fb      	ldr	r3, [r7, #28]
 80081bc:	4413      	add	r3, r2
 80081be:	7819      	ldrb	r1, [r3, #0]
 80081c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80081c2:	69fb      	ldr	r3, [r7, #28]
 80081c4:	4413      	add	r3, r2
 80081c6:	3334      	adds	r3, #52	; 0x34
 80081c8:	460a      	mov	r2, r1
 80081ca:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80081cc:	68ba      	ldr	r2, [r7, #8]
 80081ce:	69fb      	ldr	r3, [r7, #28]
 80081d0:	4413      	add	r3, r2
 80081d2:	781b      	ldrb	r3, [r3, #0]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d006      	beq.n	80081e6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80081d8:	69fb      	ldr	r3, [r7, #28]
 80081da:	3301      	adds	r3, #1
 80081dc:	61fb      	str	r3, [r7, #28]
 80081de:	69fb      	ldr	r3, [r7, #28]
 80081e0:	2b0f      	cmp	r3, #15
 80081e2:	d9e9      	bls.n	80081b8 <prvInitialiseNewTask+0x64>
 80081e4:	e000      	b.n	80081e8 <prvInitialiseNewTask+0x94>
			{
				break;
 80081e6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80081e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081ea:	2200      	movs	r2, #0
 80081ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80081f0:	e003      	b.n	80081fa <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80081f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081f4:	2200      	movs	r2, #0
 80081f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80081fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081fc:	2b37      	cmp	r3, #55	; 0x37
 80081fe:	d901      	bls.n	8008204 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008200:	2337      	movs	r3, #55	; 0x37
 8008202:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008206:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008208:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800820a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800820c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800820e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008212:	2200      	movs	r2, #0
 8008214:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008218:	3304      	adds	r3, #4
 800821a:	4618      	mov	r0, r3
 800821c:	f7ff f978 	bl	8007510 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008222:	3318      	adds	r3, #24
 8008224:	4618      	mov	r0, r3
 8008226:	f7ff f973 	bl	8007510 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800822a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800822c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800822e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008232:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008238:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800823a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800823c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800823e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008242:	2200      	movs	r2, #0
 8008244:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800824a:	2200      	movs	r2, #0
 800824c:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008252:	3354      	adds	r3, #84	; 0x54
 8008254:	224c      	movs	r2, #76	; 0x4c
 8008256:	2100      	movs	r1, #0
 8008258:	4618      	mov	r0, r3
 800825a:	f002 fb23 	bl	800a8a4 <memset>
 800825e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008260:	4a0c      	ldr	r2, [pc, #48]	; (8008294 <prvInitialiseNewTask+0x140>)
 8008262:	659a      	str	r2, [r3, #88]	; 0x58
 8008264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008266:	4a0c      	ldr	r2, [pc, #48]	; (8008298 <prvInitialiseNewTask+0x144>)
 8008268:	65da      	str	r2, [r3, #92]	; 0x5c
 800826a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800826c:	4a0b      	ldr	r2, [pc, #44]	; (800829c <prvInitialiseNewTask+0x148>)
 800826e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008270:	683a      	ldr	r2, [r7, #0]
 8008272:	68f9      	ldr	r1, [r7, #12]
 8008274:	69b8      	ldr	r0, [r7, #24]
 8008276:	f001 f941 	bl	80094fc <pxPortInitialiseStack>
 800827a:	4602      	mov	r2, r0
 800827c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800827e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008282:	2b00      	cmp	r3, #0
 8008284:	d002      	beq.n	800828c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008288:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800828a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800828c:	bf00      	nop
 800828e:	3720      	adds	r7, #32
 8008290:	46bd      	mov	sp, r7
 8008292:	bd80      	pop	{r7, pc}
 8008294:	2000680c 	.word	0x2000680c
 8008298:	20006874 	.word	0x20006874
 800829c:	200068dc 	.word	0x200068dc

080082a0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b082      	sub	sp, #8
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80082a8:	f001 fa54 	bl	8009754 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80082ac:	4b2d      	ldr	r3, [pc, #180]	; (8008364 <prvAddNewTaskToReadyList+0xc4>)
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	3301      	adds	r3, #1
 80082b2:	4a2c      	ldr	r2, [pc, #176]	; (8008364 <prvAddNewTaskToReadyList+0xc4>)
 80082b4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80082b6:	4b2c      	ldr	r3, [pc, #176]	; (8008368 <prvAddNewTaskToReadyList+0xc8>)
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d109      	bne.n	80082d2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80082be:	4a2a      	ldr	r2, [pc, #168]	; (8008368 <prvAddNewTaskToReadyList+0xc8>)
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80082c4:	4b27      	ldr	r3, [pc, #156]	; (8008364 <prvAddNewTaskToReadyList+0xc4>)
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	2b01      	cmp	r3, #1
 80082ca:	d110      	bne.n	80082ee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80082cc:	f000 fc26 	bl	8008b1c <prvInitialiseTaskLists>
 80082d0:	e00d      	b.n	80082ee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80082d2:	4b26      	ldr	r3, [pc, #152]	; (800836c <prvAddNewTaskToReadyList+0xcc>)
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d109      	bne.n	80082ee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80082da:	4b23      	ldr	r3, [pc, #140]	; (8008368 <prvAddNewTaskToReadyList+0xc8>)
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082e4:	429a      	cmp	r2, r3
 80082e6:	d802      	bhi.n	80082ee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80082e8:	4a1f      	ldr	r2, [pc, #124]	; (8008368 <prvAddNewTaskToReadyList+0xc8>)
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80082ee:	4b20      	ldr	r3, [pc, #128]	; (8008370 <prvAddNewTaskToReadyList+0xd0>)
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	3301      	adds	r3, #1
 80082f4:	4a1e      	ldr	r2, [pc, #120]	; (8008370 <prvAddNewTaskToReadyList+0xd0>)
 80082f6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80082f8:	4b1d      	ldr	r3, [pc, #116]	; (8008370 <prvAddNewTaskToReadyList+0xd0>)
 80082fa:	681a      	ldr	r2, [r3, #0]
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008304:	4b1b      	ldr	r3, [pc, #108]	; (8008374 <prvAddNewTaskToReadyList+0xd4>)
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	429a      	cmp	r2, r3
 800830a:	d903      	bls.n	8008314 <prvAddNewTaskToReadyList+0x74>
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008310:	4a18      	ldr	r2, [pc, #96]	; (8008374 <prvAddNewTaskToReadyList+0xd4>)
 8008312:	6013      	str	r3, [r2, #0]
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008318:	4613      	mov	r3, r2
 800831a:	009b      	lsls	r3, r3, #2
 800831c:	4413      	add	r3, r2
 800831e:	009b      	lsls	r3, r3, #2
 8008320:	4a15      	ldr	r2, [pc, #84]	; (8008378 <prvAddNewTaskToReadyList+0xd8>)
 8008322:	441a      	add	r2, r3
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	3304      	adds	r3, #4
 8008328:	4619      	mov	r1, r3
 800832a:	4610      	mov	r0, r2
 800832c:	f7ff f8fd 	bl	800752a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008330:	f001 fa40 	bl	80097b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008334:	4b0d      	ldr	r3, [pc, #52]	; (800836c <prvAddNewTaskToReadyList+0xcc>)
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d00e      	beq.n	800835a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800833c:	4b0a      	ldr	r3, [pc, #40]	; (8008368 <prvAddNewTaskToReadyList+0xc8>)
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008346:	429a      	cmp	r2, r3
 8008348:	d207      	bcs.n	800835a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800834a:	4b0c      	ldr	r3, [pc, #48]	; (800837c <prvAddNewTaskToReadyList+0xdc>)
 800834c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008350:	601a      	str	r2, [r3, #0]
 8008352:	f3bf 8f4f 	dsb	sy
 8008356:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800835a:	bf00      	nop
 800835c:	3708      	adds	r7, #8
 800835e:	46bd      	mov	sp, r7
 8008360:	bd80      	pop	{r7, pc}
 8008362:	bf00      	nop
 8008364:	20000ea8 	.word	0x20000ea8
 8008368:	200009d4 	.word	0x200009d4
 800836c:	20000eb4 	.word	0x20000eb4
 8008370:	20000ec4 	.word	0x20000ec4
 8008374:	20000eb0 	.word	0x20000eb0
 8008378:	200009d8 	.word	0x200009d8
 800837c:	e000ed04 	.word	0xe000ed04

08008380 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008380:	b580      	push	{r7, lr}
 8008382:	b084      	sub	sp, #16
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008388:	2300      	movs	r3, #0
 800838a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d017      	beq.n	80083c2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008392:	4b13      	ldr	r3, [pc, #76]	; (80083e0 <vTaskDelay+0x60>)
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d00a      	beq.n	80083b0 <vTaskDelay+0x30>
	__asm volatile
 800839a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800839e:	f383 8811 	msr	BASEPRI, r3
 80083a2:	f3bf 8f6f 	isb	sy
 80083a6:	f3bf 8f4f 	dsb	sy
 80083aa:	60bb      	str	r3, [r7, #8]
}
 80083ac:	bf00      	nop
 80083ae:	e7fe      	b.n	80083ae <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80083b0:	f000 f88a 	bl	80084c8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80083b4:	2100      	movs	r1, #0
 80083b6:	6878      	ldr	r0, [r7, #4]
 80083b8:	f000 fcfe 	bl	8008db8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80083bc:	f000 f892 	bl	80084e4 <xTaskResumeAll>
 80083c0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d107      	bne.n	80083d8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80083c8:	4b06      	ldr	r3, [pc, #24]	; (80083e4 <vTaskDelay+0x64>)
 80083ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083ce:	601a      	str	r2, [r3, #0]
 80083d0:	f3bf 8f4f 	dsb	sy
 80083d4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80083d8:	bf00      	nop
 80083da:	3710      	adds	r7, #16
 80083dc:	46bd      	mov	sp, r7
 80083de:	bd80      	pop	{r7, pc}
 80083e0:	20000ed0 	.word	0x20000ed0
 80083e4:	e000ed04 	.word	0xe000ed04

080083e8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b08a      	sub	sp, #40	; 0x28
 80083ec:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80083ee:	2300      	movs	r3, #0
 80083f0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80083f2:	2300      	movs	r3, #0
 80083f4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80083f6:	463a      	mov	r2, r7
 80083f8:	1d39      	adds	r1, r7, #4
 80083fa:	f107 0308 	add.w	r3, r7, #8
 80083fe:	4618      	mov	r0, r3
 8008400:	f7ff f832 	bl	8007468 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008404:	6839      	ldr	r1, [r7, #0]
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	68ba      	ldr	r2, [r7, #8]
 800840a:	9202      	str	r2, [sp, #8]
 800840c:	9301      	str	r3, [sp, #4]
 800840e:	2300      	movs	r3, #0
 8008410:	9300      	str	r3, [sp, #0]
 8008412:	2300      	movs	r3, #0
 8008414:	460a      	mov	r2, r1
 8008416:	4924      	ldr	r1, [pc, #144]	; (80084a8 <vTaskStartScheduler+0xc0>)
 8008418:	4824      	ldr	r0, [pc, #144]	; (80084ac <vTaskStartScheduler+0xc4>)
 800841a:	f7ff fdf9 	bl	8008010 <xTaskCreateStatic>
 800841e:	4603      	mov	r3, r0
 8008420:	4a23      	ldr	r2, [pc, #140]	; (80084b0 <vTaskStartScheduler+0xc8>)
 8008422:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008424:	4b22      	ldr	r3, [pc, #136]	; (80084b0 <vTaskStartScheduler+0xc8>)
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	2b00      	cmp	r3, #0
 800842a:	d002      	beq.n	8008432 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800842c:	2301      	movs	r3, #1
 800842e:	617b      	str	r3, [r7, #20]
 8008430:	e001      	b.n	8008436 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008432:	2300      	movs	r3, #0
 8008434:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008436:	697b      	ldr	r3, [r7, #20]
 8008438:	2b01      	cmp	r3, #1
 800843a:	d102      	bne.n	8008442 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800843c:	f000 fd10 	bl	8008e60 <xTimerCreateTimerTask>
 8008440:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008442:	697b      	ldr	r3, [r7, #20]
 8008444:	2b01      	cmp	r3, #1
 8008446:	d11b      	bne.n	8008480 <vTaskStartScheduler+0x98>
	__asm volatile
 8008448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800844c:	f383 8811 	msr	BASEPRI, r3
 8008450:	f3bf 8f6f 	isb	sy
 8008454:	f3bf 8f4f 	dsb	sy
 8008458:	613b      	str	r3, [r7, #16]
}
 800845a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800845c:	4b15      	ldr	r3, [pc, #84]	; (80084b4 <vTaskStartScheduler+0xcc>)
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	3354      	adds	r3, #84	; 0x54
 8008462:	4a15      	ldr	r2, [pc, #84]	; (80084b8 <vTaskStartScheduler+0xd0>)
 8008464:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008466:	4b15      	ldr	r3, [pc, #84]	; (80084bc <vTaskStartScheduler+0xd4>)
 8008468:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800846c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800846e:	4b14      	ldr	r3, [pc, #80]	; (80084c0 <vTaskStartScheduler+0xd8>)
 8008470:	2201      	movs	r2, #1
 8008472:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008474:	4b13      	ldr	r3, [pc, #76]	; (80084c4 <vTaskStartScheduler+0xdc>)
 8008476:	2200      	movs	r2, #0
 8008478:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800847a:	f001 f8c9 	bl	8009610 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800847e:	e00e      	b.n	800849e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008480:	697b      	ldr	r3, [r7, #20]
 8008482:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008486:	d10a      	bne.n	800849e <vTaskStartScheduler+0xb6>
	__asm volatile
 8008488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800848c:	f383 8811 	msr	BASEPRI, r3
 8008490:	f3bf 8f6f 	isb	sy
 8008494:	f3bf 8f4f 	dsb	sy
 8008498:	60fb      	str	r3, [r7, #12]
}
 800849a:	bf00      	nop
 800849c:	e7fe      	b.n	800849c <vTaskStartScheduler+0xb4>
}
 800849e:	bf00      	nop
 80084a0:	3718      	adds	r7, #24
 80084a2:	46bd      	mov	sp, r7
 80084a4:	bd80      	pop	{r7, pc}
 80084a6:	bf00      	nop
 80084a8:	0800aa9c 	.word	0x0800aa9c
 80084ac:	08008aed 	.word	0x08008aed
 80084b0:	20000ecc 	.word	0x20000ecc
 80084b4:	200009d4 	.word	0x200009d4
 80084b8:	2000014c 	.word	0x2000014c
 80084bc:	20000ec8 	.word	0x20000ec8
 80084c0:	20000eb4 	.word	0x20000eb4
 80084c4:	20000eac 	.word	0x20000eac

080084c8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80084c8:	b480      	push	{r7}
 80084ca:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80084cc:	4b04      	ldr	r3, [pc, #16]	; (80084e0 <vTaskSuspendAll+0x18>)
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	3301      	adds	r3, #1
 80084d2:	4a03      	ldr	r2, [pc, #12]	; (80084e0 <vTaskSuspendAll+0x18>)
 80084d4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80084d6:	bf00      	nop
 80084d8:	46bd      	mov	sp, r7
 80084da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084de:	4770      	bx	lr
 80084e0:	20000ed0 	.word	0x20000ed0

080084e4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b084      	sub	sp, #16
 80084e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80084ea:	2300      	movs	r3, #0
 80084ec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80084ee:	2300      	movs	r3, #0
 80084f0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80084f2:	4b42      	ldr	r3, [pc, #264]	; (80085fc <xTaskResumeAll+0x118>)
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d10a      	bne.n	8008510 <xTaskResumeAll+0x2c>
	__asm volatile
 80084fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084fe:	f383 8811 	msr	BASEPRI, r3
 8008502:	f3bf 8f6f 	isb	sy
 8008506:	f3bf 8f4f 	dsb	sy
 800850a:	603b      	str	r3, [r7, #0]
}
 800850c:	bf00      	nop
 800850e:	e7fe      	b.n	800850e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008510:	f001 f920 	bl	8009754 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008514:	4b39      	ldr	r3, [pc, #228]	; (80085fc <xTaskResumeAll+0x118>)
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	3b01      	subs	r3, #1
 800851a:	4a38      	ldr	r2, [pc, #224]	; (80085fc <xTaskResumeAll+0x118>)
 800851c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800851e:	4b37      	ldr	r3, [pc, #220]	; (80085fc <xTaskResumeAll+0x118>)
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d162      	bne.n	80085ec <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008526:	4b36      	ldr	r3, [pc, #216]	; (8008600 <xTaskResumeAll+0x11c>)
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d05e      	beq.n	80085ec <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800852e:	e02f      	b.n	8008590 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008530:	4b34      	ldr	r3, [pc, #208]	; (8008604 <xTaskResumeAll+0x120>)
 8008532:	68db      	ldr	r3, [r3, #12]
 8008534:	68db      	ldr	r3, [r3, #12]
 8008536:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	3318      	adds	r3, #24
 800853c:	4618      	mov	r0, r3
 800853e:	f7ff f851 	bl	80075e4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	3304      	adds	r3, #4
 8008546:	4618      	mov	r0, r3
 8008548:	f7ff f84c 	bl	80075e4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008550:	4b2d      	ldr	r3, [pc, #180]	; (8008608 <xTaskResumeAll+0x124>)
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	429a      	cmp	r2, r3
 8008556:	d903      	bls.n	8008560 <xTaskResumeAll+0x7c>
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800855c:	4a2a      	ldr	r2, [pc, #168]	; (8008608 <xTaskResumeAll+0x124>)
 800855e:	6013      	str	r3, [r2, #0]
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008564:	4613      	mov	r3, r2
 8008566:	009b      	lsls	r3, r3, #2
 8008568:	4413      	add	r3, r2
 800856a:	009b      	lsls	r3, r3, #2
 800856c:	4a27      	ldr	r2, [pc, #156]	; (800860c <xTaskResumeAll+0x128>)
 800856e:	441a      	add	r2, r3
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	3304      	adds	r3, #4
 8008574:	4619      	mov	r1, r3
 8008576:	4610      	mov	r0, r2
 8008578:	f7fe ffd7 	bl	800752a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008580:	4b23      	ldr	r3, [pc, #140]	; (8008610 <xTaskResumeAll+0x12c>)
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008586:	429a      	cmp	r2, r3
 8008588:	d302      	bcc.n	8008590 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800858a:	4b22      	ldr	r3, [pc, #136]	; (8008614 <xTaskResumeAll+0x130>)
 800858c:	2201      	movs	r2, #1
 800858e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008590:	4b1c      	ldr	r3, [pc, #112]	; (8008604 <xTaskResumeAll+0x120>)
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	2b00      	cmp	r3, #0
 8008596:	d1cb      	bne.n	8008530 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	2b00      	cmp	r3, #0
 800859c:	d001      	beq.n	80085a2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800859e:	f000 fb5f 	bl	8008c60 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80085a2:	4b1d      	ldr	r3, [pc, #116]	; (8008618 <xTaskResumeAll+0x134>)
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d010      	beq.n	80085d0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80085ae:	f000 f847 	bl	8008640 <xTaskIncrementTick>
 80085b2:	4603      	mov	r3, r0
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d002      	beq.n	80085be <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80085b8:	4b16      	ldr	r3, [pc, #88]	; (8008614 <xTaskResumeAll+0x130>)
 80085ba:	2201      	movs	r2, #1
 80085bc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	3b01      	subs	r3, #1
 80085c2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d1f1      	bne.n	80085ae <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80085ca:	4b13      	ldr	r3, [pc, #76]	; (8008618 <xTaskResumeAll+0x134>)
 80085cc:	2200      	movs	r2, #0
 80085ce:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80085d0:	4b10      	ldr	r3, [pc, #64]	; (8008614 <xTaskResumeAll+0x130>)
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d009      	beq.n	80085ec <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80085d8:	2301      	movs	r3, #1
 80085da:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80085dc:	4b0f      	ldr	r3, [pc, #60]	; (800861c <xTaskResumeAll+0x138>)
 80085de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085e2:	601a      	str	r2, [r3, #0]
 80085e4:	f3bf 8f4f 	dsb	sy
 80085e8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80085ec:	f001 f8e2 	bl	80097b4 <vPortExitCritical>

	return xAlreadyYielded;
 80085f0:	68bb      	ldr	r3, [r7, #8]
}
 80085f2:	4618      	mov	r0, r3
 80085f4:	3710      	adds	r7, #16
 80085f6:	46bd      	mov	sp, r7
 80085f8:	bd80      	pop	{r7, pc}
 80085fa:	bf00      	nop
 80085fc:	20000ed0 	.word	0x20000ed0
 8008600:	20000ea8 	.word	0x20000ea8
 8008604:	20000e68 	.word	0x20000e68
 8008608:	20000eb0 	.word	0x20000eb0
 800860c:	200009d8 	.word	0x200009d8
 8008610:	200009d4 	.word	0x200009d4
 8008614:	20000ebc 	.word	0x20000ebc
 8008618:	20000eb8 	.word	0x20000eb8
 800861c:	e000ed04 	.word	0xe000ed04

08008620 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008620:	b480      	push	{r7}
 8008622:	b083      	sub	sp, #12
 8008624:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008626:	4b05      	ldr	r3, [pc, #20]	; (800863c <xTaskGetTickCount+0x1c>)
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800862c:	687b      	ldr	r3, [r7, #4]
}
 800862e:	4618      	mov	r0, r3
 8008630:	370c      	adds	r7, #12
 8008632:	46bd      	mov	sp, r7
 8008634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008638:	4770      	bx	lr
 800863a:	bf00      	nop
 800863c:	20000eac 	.word	0x20000eac

08008640 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008640:	b580      	push	{r7, lr}
 8008642:	b086      	sub	sp, #24
 8008644:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008646:	2300      	movs	r3, #0
 8008648:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800864a:	4b4f      	ldr	r3, [pc, #316]	; (8008788 <xTaskIncrementTick+0x148>)
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	2b00      	cmp	r3, #0
 8008650:	f040 808f 	bne.w	8008772 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008654:	4b4d      	ldr	r3, [pc, #308]	; (800878c <xTaskIncrementTick+0x14c>)
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	3301      	adds	r3, #1
 800865a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800865c:	4a4b      	ldr	r2, [pc, #300]	; (800878c <xTaskIncrementTick+0x14c>)
 800865e:	693b      	ldr	r3, [r7, #16]
 8008660:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008662:	693b      	ldr	r3, [r7, #16]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d120      	bne.n	80086aa <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008668:	4b49      	ldr	r3, [pc, #292]	; (8008790 <xTaskIncrementTick+0x150>)
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d00a      	beq.n	8008688 <xTaskIncrementTick+0x48>
	__asm volatile
 8008672:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008676:	f383 8811 	msr	BASEPRI, r3
 800867a:	f3bf 8f6f 	isb	sy
 800867e:	f3bf 8f4f 	dsb	sy
 8008682:	603b      	str	r3, [r7, #0]
}
 8008684:	bf00      	nop
 8008686:	e7fe      	b.n	8008686 <xTaskIncrementTick+0x46>
 8008688:	4b41      	ldr	r3, [pc, #260]	; (8008790 <xTaskIncrementTick+0x150>)
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	60fb      	str	r3, [r7, #12]
 800868e:	4b41      	ldr	r3, [pc, #260]	; (8008794 <xTaskIncrementTick+0x154>)
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	4a3f      	ldr	r2, [pc, #252]	; (8008790 <xTaskIncrementTick+0x150>)
 8008694:	6013      	str	r3, [r2, #0]
 8008696:	4a3f      	ldr	r2, [pc, #252]	; (8008794 <xTaskIncrementTick+0x154>)
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	6013      	str	r3, [r2, #0]
 800869c:	4b3e      	ldr	r3, [pc, #248]	; (8008798 <xTaskIncrementTick+0x158>)
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	3301      	adds	r3, #1
 80086a2:	4a3d      	ldr	r2, [pc, #244]	; (8008798 <xTaskIncrementTick+0x158>)
 80086a4:	6013      	str	r3, [r2, #0]
 80086a6:	f000 fadb 	bl	8008c60 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80086aa:	4b3c      	ldr	r3, [pc, #240]	; (800879c <xTaskIncrementTick+0x15c>)
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	693a      	ldr	r2, [r7, #16]
 80086b0:	429a      	cmp	r2, r3
 80086b2:	d349      	bcc.n	8008748 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80086b4:	4b36      	ldr	r3, [pc, #216]	; (8008790 <xTaskIncrementTick+0x150>)
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d104      	bne.n	80086c8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80086be:	4b37      	ldr	r3, [pc, #220]	; (800879c <xTaskIncrementTick+0x15c>)
 80086c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80086c4:	601a      	str	r2, [r3, #0]
					break;
 80086c6:	e03f      	b.n	8008748 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80086c8:	4b31      	ldr	r3, [pc, #196]	; (8008790 <xTaskIncrementTick+0x150>)
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	68db      	ldr	r3, [r3, #12]
 80086ce:	68db      	ldr	r3, [r3, #12]
 80086d0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80086d2:	68bb      	ldr	r3, [r7, #8]
 80086d4:	685b      	ldr	r3, [r3, #4]
 80086d6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80086d8:	693a      	ldr	r2, [r7, #16]
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	429a      	cmp	r2, r3
 80086de:	d203      	bcs.n	80086e8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80086e0:	4a2e      	ldr	r2, [pc, #184]	; (800879c <xTaskIncrementTick+0x15c>)
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80086e6:	e02f      	b.n	8008748 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80086e8:	68bb      	ldr	r3, [r7, #8]
 80086ea:	3304      	adds	r3, #4
 80086ec:	4618      	mov	r0, r3
 80086ee:	f7fe ff79 	bl	80075e4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80086f2:	68bb      	ldr	r3, [r7, #8]
 80086f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d004      	beq.n	8008704 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80086fa:	68bb      	ldr	r3, [r7, #8]
 80086fc:	3318      	adds	r3, #24
 80086fe:	4618      	mov	r0, r3
 8008700:	f7fe ff70 	bl	80075e4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008704:	68bb      	ldr	r3, [r7, #8]
 8008706:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008708:	4b25      	ldr	r3, [pc, #148]	; (80087a0 <xTaskIncrementTick+0x160>)
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	429a      	cmp	r2, r3
 800870e:	d903      	bls.n	8008718 <xTaskIncrementTick+0xd8>
 8008710:	68bb      	ldr	r3, [r7, #8]
 8008712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008714:	4a22      	ldr	r2, [pc, #136]	; (80087a0 <xTaskIncrementTick+0x160>)
 8008716:	6013      	str	r3, [r2, #0]
 8008718:	68bb      	ldr	r3, [r7, #8]
 800871a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800871c:	4613      	mov	r3, r2
 800871e:	009b      	lsls	r3, r3, #2
 8008720:	4413      	add	r3, r2
 8008722:	009b      	lsls	r3, r3, #2
 8008724:	4a1f      	ldr	r2, [pc, #124]	; (80087a4 <xTaskIncrementTick+0x164>)
 8008726:	441a      	add	r2, r3
 8008728:	68bb      	ldr	r3, [r7, #8]
 800872a:	3304      	adds	r3, #4
 800872c:	4619      	mov	r1, r3
 800872e:	4610      	mov	r0, r2
 8008730:	f7fe fefb 	bl	800752a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008734:	68bb      	ldr	r3, [r7, #8]
 8008736:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008738:	4b1b      	ldr	r3, [pc, #108]	; (80087a8 <xTaskIncrementTick+0x168>)
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800873e:	429a      	cmp	r2, r3
 8008740:	d3b8      	bcc.n	80086b4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008742:	2301      	movs	r3, #1
 8008744:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008746:	e7b5      	b.n	80086b4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008748:	4b17      	ldr	r3, [pc, #92]	; (80087a8 <xTaskIncrementTick+0x168>)
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800874e:	4915      	ldr	r1, [pc, #84]	; (80087a4 <xTaskIncrementTick+0x164>)
 8008750:	4613      	mov	r3, r2
 8008752:	009b      	lsls	r3, r3, #2
 8008754:	4413      	add	r3, r2
 8008756:	009b      	lsls	r3, r3, #2
 8008758:	440b      	add	r3, r1
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	2b01      	cmp	r3, #1
 800875e:	d901      	bls.n	8008764 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008760:	2301      	movs	r3, #1
 8008762:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008764:	4b11      	ldr	r3, [pc, #68]	; (80087ac <xTaskIncrementTick+0x16c>)
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d007      	beq.n	800877c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800876c:	2301      	movs	r3, #1
 800876e:	617b      	str	r3, [r7, #20]
 8008770:	e004      	b.n	800877c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008772:	4b0f      	ldr	r3, [pc, #60]	; (80087b0 <xTaskIncrementTick+0x170>)
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	3301      	adds	r3, #1
 8008778:	4a0d      	ldr	r2, [pc, #52]	; (80087b0 <xTaskIncrementTick+0x170>)
 800877a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800877c:	697b      	ldr	r3, [r7, #20]
}
 800877e:	4618      	mov	r0, r3
 8008780:	3718      	adds	r7, #24
 8008782:	46bd      	mov	sp, r7
 8008784:	bd80      	pop	{r7, pc}
 8008786:	bf00      	nop
 8008788:	20000ed0 	.word	0x20000ed0
 800878c:	20000eac 	.word	0x20000eac
 8008790:	20000e60 	.word	0x20000e60
 8008794:	20000e64 	.word	0x20000e64
 8008798:	20000ec0 	.word	0x20000ec0
 800879c:	20000ec8 	.word	0x20000ec8
 80087a0:	20000eb0 	.word	0x20000eb0
 80087a4:	200009d8 	.word	0x200009d8
 80087a8:	200009d4 	.word	0x200009d4
 80087ac:	20000ebc 	.word	0x20000ebc
 80087b0:	20000eb8 	.word	0x20000eb8

080087b4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80087b4:	b480      	push	{r7}
 80087b6:	b085      	sub	sp, #20
 80087b8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80087ba:	4b2a      	ldr	r3, [pc, #168]	; (8008864 <vTaskSwitchContext+0xb0>)
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d003      	beq.n	80087ca <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80087c2:	4b29      	ldr	r3, [pc, #164]	; (8008868 <vTaskSwitchContext+0xb4>)
 80087c4:	2201      	movs	r2, #1
 80087c6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80087c8:	e046      	b.n	8008858 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80087ca:	4b27      	ldr	r3, [pc, #156]	; (8008868 <vTaskSwitchContext+0xb4>)
 80087cc:	2200      	movs	r2, #0
 80087ce:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80087d0:	4b26      	ldr	r3, [pc, #152]	; (800886c <vTaskSwitchContext+0xb8>)
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	60fb      	str	r3, [r7, #12]
 80087d6:	e010      	b.n	80087fa <vTaskSwitchContext+0x46>
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d10a      	bne.n	80087f4 <vTaskSwitchContext+0x40>
	__asm volatile
 80087de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087e2:	f383 8811 	msr	BASEPRI, r3
 80087e6:	f3bf 8f6f 	isb	sy
 80087ea:	f3bf 8f4f 	dsb	sy
 80087ee:	607b      	str	r3, [r7, #4]
}
 80087f0:	bf00      	nop
 80087f2:	e7fe      	b.n	80087f2 <vTaskSwitchContext+0x3e>
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	3b01      	subs	r3, #1
 80087f8:	60fb      	str	r3, [r7, #12]
 80087fa:	491d      	ldr	r1, [pc, #116]	; (8008870 <vTaskSwitchContext+0xbc>)
 80087fc:	68fa      	ldr	r2, [r7, #12]
 80087fe:	4613      	mov	r3, r2
 8008800:	009b      	lsls	r3, r3, #2
 8008802:	4413      	add	r3, r2
 8008804:	009b      	lsls	r3, r3, #2
 8008806:	440b      	add	r3, r1
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d0e4      	beq.n	80087d8 <vTaskSwitchContext+0x24>
 800880e:	68fa      	ldr	r2, [r7, #12]
 8008810:	4613      	mov	r3, r2
 8008812:	009b      	lsls	r3, r3, #2
 8008814:	4413      	add	r3, r2
 8008816:	009b      	lsls	r3, r3, #2
 8008818:	4a15      	ldr	r2, [pc, #84]	; (8008870 <vTaskSwitchContext+0xbc>)
 800881a:	4413      	add	r3, r2
 800881c:	60bb      	str	r3, [r7, #8]
 800881e:	68bb      	ldr	r3, [r7, #8]
 8008820:	685b      	ldr	r3, [r3, #4]
 8008822:	685a      	ldr	r2, [r3, #4]
 8008824:	68bb      	ldr	r3, [r7, #8]
 8008826:	605a      	str	r2, [r3, #4]
 8008828:	68bb      	ldr	r3, [r7, #8]
 800882a:	685a      	ldr	r2, [r3, #4]
 800882c:	68bb      	ldr	r3, [r7, #8]
 800882e:	3308      	adds	r3, #8
 8008830:	429a      	cmp	r2, r3
 8008832:	d104      	bne.n	800883e <vTaskSwitchContext+0x8a>
 8008834:	68bb      	ldr	r3, [r7, #8]
 8008836:	685b      	ldr	r3, [r3, #4]
 8008838:	685a      	ldr	r2, [r3, #4]
 800883a:	68bb      	ldr	r3, [r7, #8]
 800883c:	605a      	str	r2, [r3, #4]
 800883e:	68bb      	ldr	r3, [r7, #8]
 8008840:	685b      	ldr	r3, [r3, #4]
 8008842:	68db      	ldr	r3, [r3, #12]
 8008844:	4a0b      	ldr	r2, [pc, #44]	; (8008874 <vTaskSwitchContext+0xc0>)
 8008846:	6013      	str	r3, [r2, #0]
 8008848:	4a08      	ldr	r2, [pc, #32]	; (800886c <vTaskSwitchContext+0xb8>)
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800884e:	4b09      	ldr	r3, [pc, #36]	; (8008874 <vTaskSwitchContext+0xc0>)
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	3354      	adds	r3, #84	; 0x54
 8008854:	4a08      	ldr	r2, [pc, #32]	; (8008878 <vTaskSwitchContext+0xc4>)
 8008856:	6013      	str	r3, [r2, #0]
}
 8008858:	bf00      	nop
 800885a:	3714      	adds	r7, #20
 800885c:	46bd      	mov	sp, r7
 800885e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008862:	4770      	bx	lr
 8008864:	20000ed0 	.word	0x20000ed0
 8008868:	20000ebc 	.word	0x20000ebc
 800886c:	20000eb0 	.word	0x20000eb0
 8008870:	200009d8 	.word	0x200009d8
 8008874:	200009d4 	.word	0x200009d4
 8008878:	2000014c 	.word	0x2000014c

0800887c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800887c:	b580      	push	{r7, lr}
 800887e:	b084      	sub	sp, #16
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]
 8008884:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	2b00      	cmp	r3, #0
 800888a:	d10a      	bne.n	80088a2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800888c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008890:	f383 8811 	msr	BASEPRI, r3
 8008894:	f3bf 8f6f 	isb	sy
 8008898:	f3bf 8f4f 	dsb	sy
 800889c:	60fb      	str	r3, [r7, #12]
}
 800889e:	bf00      	nop
 80088a0:	e7fe      	b.n	80088a0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80088a2:	4b07      	ldr	r3, [pc, #28]	; (80088c0 <vTaskPlaceOnEventList+0x44>)
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	3318      	adds	r3, #24
 80088a8:	4619      	mov	r1, r3
 80088aa:	6878      	ldr	r0, [r7, #4]
 80088ac:	f7fe fe61 	bl	8007572 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80088b0:	2101      	movs	r1, #1
 80088b2:	6838      	ldr	r0, [r7, #0]
 80088b4:	f000 fa80 	bl	8008db8 <prvAddCurrentTaskToDelayedList>
}
 80088b8:	bf00      	nop
 80088ba:	3710      	adds	r7, #16
 80088bc:	46bd      	mov	sp, r7
 80088be:	bd80      	pop	{r7, pc}
 80088c0:	200009d4 	.word	0x200009d4

080088c4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b086      	sub	sp, #24
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	60f8      	str	r0, [r7, #12]
 80088cc:	60b9      	str	r1, [r7, #8]
 80088ce:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d10a      	bne.n	80088ec <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80088d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088da:	f383 8811 	msr	BASEPRI, r3
 80088de:	f3bf 8f6f 	isb	sy
 80088e2:	f3bf 8f4f 	dsb	sy
 80088e6:	617b      	str	r3, [r7, #20]
}
 80088e8:	bf00      	nop
 80088ea:	e7fe      	b.n	80088ea <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80088ec:	4b0a      	ldr	r3, [pc, #40]	; (8008918 <vTaskPlaceOnEventListRestricted+0x54>)
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	3318      	adds	r3, #24
 80088f2:	4619      	mov	r1, r3
 80088f4:	68f8      	ldr	r0, [r7, #12]
 80088f6:	f7fe fe18 	bl	800752a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d002      	beq.n	8008906 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008900:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008904:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008906:	6879      	ldr	r1, [r7, #4]
 8008908:	68b8      	ldr	r0, [r7, #8]
 800890a:	f000 fa55 	bl	8008db8 <prvAddCurrentTaskToDelayedList>
	}
 800890e:	bf00      	nop
 8008910:	3718      	adds	r7, #24
 8008912:	46bd      	mov	sp, r7
 8008914:	bd80      	pop	{r7, pc}
 8008916:	bf00      	nop
 8008918:	200009d4 	.word	0x200009d4

0800891c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800891c:	b580      	push	{r7, lr}
 800891e:	b086      	sub	sp, #24
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	68db      	ldr	r3, [r3, #12]
 8008928:	68db      	ldr	r3, [r3, #12]
 800892a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800892c:	693b      	ldr	r3, [r7, #16]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d10a      	bne.n	8008948 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008936:	f383 8811 	msr	BASEPRI, r3
 800893a:	f3bf 8f6f 	isb	sy
 800893e:	f3bf 8f4f 	dsb	sy
 8008942:	60fb      	str	r3, [r7, #12]
}
 8008944:	bf00      	nop
 8008946:	e7fe      	b.n	8008946 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008948:	693b      	ldr	r3, [r7, #16]
 800894a:	3318      	adds	r3, #24
 800894c:	4618      	mov	r0, r3
 800894e:	f7fe fe49 	bl	80075e4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008952:	4b1e      	ldr	r3, [pc, #120]	; (80089cc <xTaskRemoveFromEventList+0xb0>)
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d11d      	bne.n	8008996 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800895a:	693b      	ldr	r3, [r7, #16]
 800895c:	3304      	adds	r3, #4
 800895e:	4618      	mov	r0, r3
 8008960:	f7fe fe40 	bl	80075e4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008964:	693b      	ldr	r3, [r7, #16]
 8008966:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008968:	4b19      	ldr	r3, [pc, #100]	; (80089d0 <xTaskRemoveFromEventList+0xb4>)
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	429a      	cmp	r2, r3
 800896e:	d903      	bls.n	8008978 <xTaskRemoveFromEventList+0x5c>
 8008970:	693b      	ldr	r3, [r7, #16]
 8008972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008974:	4a16      	ldr	r2, [pc, #88]	; (80089d0 <xTaskRemoveFromEventList+0xb4>)
 8008976:	6013      	str	r3, [r2, #0]
 8008978:	693b      	ldr	r3, [r7, #16]
 800897a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800897c:	4613      	mov	r3, r2
 800897e:	009b      	lsls	r3, r3, #2
 8008980:	4413      	add	r3, r2
 8008982:	009b      	lsls	r3, r3, #2
 8008984:	4a13      	ldr	r2, [pc, #76]	; (80089d4 <xTaskRemoveFromEventList+0xb8>)
 8008986:	441a      	add	r2, r3
 8008988:	693b      	ldr	r3, [r7, #16]
 800898a:	3304      	adds	r3, #4
 800898c:	4619      	mov	r1, r3
 800898e:	4610      	mov	r0, r2
 8008990:	f7fe fdcb 	bl	800752a <vListInsertEnd>
 8008994:	e005      	b.n	80089a2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008996:	693b      	ldr	r3, [r7, #16]
 8008998:	3318      	adds	r3, #24
 800899a:	4619      	mov	r1, r3
 800899c:	480e      	ldr	r0, [pc, #56]	; (80089d8 <xTaskRemoveFromEventList+0xbc>)
 800899e:	f7fe fdc4 	bl	800752a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80089a2:	693b      	ldr	r3, [r7, #16]
 80089a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089a6:	4b0d      	ldr	r3, [pc, #52]	; (80089dc <xTaskRemoveFromEventList+0xc0>)
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089ac:	429a      	cmp	r2, r3
 80089ae:	d905      	bls.n	80089bc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80089b0:	2301      	movs	r3, #1
 80089b2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80089b4:	4b0a      	ldr	r3, [pc, #40]	; (80089e0 <xTaskRemoveFromEventList+0xc4>)
 80089b6:	2201      	movs	r2, #1
 80089b8:	601a      	str	r2, [r3, #0]
 80089ba:	e001      	b.n	80089c0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80089bc:	2300      	movs	r3, #0
 80089be:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80089c0:	697b      	ldr	r3, [r7, #20]
}
 80089c2:	4618      	mov	r0, r3
 80089c4:	3718      	adds	r7, #24
 80089c6:	46bd      	mov	sp, r7
 80089c8:	bd80      	pop	{r7, pc}
 80089ca:	bf00      	nop
 80089cc:	20000ed0 	.word	0x20000ed0
 80089d0:	20000eb0 	.word	0x20000eb0
 80089d4:	200009d8 	.word	0x200009d8
 80089d8:	20000e68 	.word	0x20000e68
 80089dc:	200009d4 	.word	0x200009d4
 80089e0:	20000ebc 	.word	0x20000ebc

080089e4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80089e4:	b480      	push	{r7}
 80089e6:	b083      	sub	sp, #12
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80089ec:	4b06      	ldr	r3, [pc, #24]	; (8008a08 <vTaskInternalSetTimeOutState+0x24>)
 80089ee:	681a      	ldr	r2, [r3, #0]
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80089f4:	4b05      	ldr	r3, [pc, #20]	; (8008a0c <vTaskInternalSetTimeOutState+0x28>)
 80089f6:	681a      	ldr	r2, [r3, #0]
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	605a      	str	r2, [r3, #4]
}
 80089fc:	bf00      	nop
 80089fe:	370c      	adds	r7, #12
 8008a00:	46bd      	mov	sp, r7
 8008a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a06:	4770      	bx	lr
 8008a08:	20000ec0 	.word	0x20000ec0
 8008a0c:	20000eac 	.word	0x20000eac

08008a10 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b088      	sub	sp, #32
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
 8008a18:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d10a      	bne.n	8008a36 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a24:	f383 8811 	msr	BASEPRI, r3
 8008a28:	f3bf 8f6f 	isb	sy
 8008a2c:	f3bf 8f4f 	dsb	sy
 8008a30:	613b      	str	r3, [r7, #16]
}
 8008a32:	bf00      	nop
 8008a34:	e7fe      	b.n	8008a34 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008a36:	683b      	ldr	r3, [r7, #0]
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d10a      	bne.n	8008a52 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a40:	f383 8811 	msr	BASEPRI, r3
 8008a44:	f3bf 8f6f 	isb	sy
 8008a48:	f3bf 8f4f 	dsb	sy
 8008a4c:	60fb      	str	r3, [r7, #12]
}
 8008a4e:	bf00      	nop
 8008a50:	e7fe      	b.n	8008a50 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008a52:	f000 fe7f 	bl	8009754 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008a56:	4b1d      	ldr	r3, [pc, #116]	; (8008acc <xTaskCheckForTimeOut+0xbc>)
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	685b      	ldr	r3, [r3, #4]
 8008a60:	69ba      	ldr	r2, [r7, #24]
 8008a62:	1ad3      	subs	r3, r2, r3
 8008a64:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008a66:	683b      	ldr	r3, [r7, #0]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008a6e:	d102      	bne.n	8008a76 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008a70:	2300      	movs	r3, #0
 8008a72:	61fb      	str	r3, [r7, #28]
 8008a74:	e023      	b.n	8008abe <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681a      	ldr	r2, [r3, #0]
 8008a7a:	4b15      	ldr	r3, [pc, #84]	; (8008ad0 <xTaskCheckForTimeOut+0xc0>)
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	429a      	cmp	r2, r3
 8008a80:	d007      	beq.n	8008a92 <xTaskCheckForTimeOut+0x82>
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	685b      	ldr	r3, [r3, #4]
 8008a86:	69ba      	ldr	r2, [r7, #24]
 8008a88:	429a      	cmp	r2, r3
 8008a8a:	d302      	bcc.n	8008a92 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008a8c:	2301      	movs	r3, #1
 8008a8e:	61fb      	str	r3, [r7, #28]
 8008a90:	e015      	b.n	8008abe <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008a92:	683b      	ldr	r3, [r7, #0]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	697a      	ldr	r2, [r7, #20]
 8008a98:	429a      	cmp	r2, r3
 8008a9a:	d20b      	bcs.n	8008ab4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008a9c:	683b      	ldr	r3, [r7, #0]
 8008a9e:	681a      	ldr	r2, [r3, #0]
 8008aa0:	697b      	ldr	r3, [r7, #20]
 8008aa2:	1ad2      	subs	r2, r2, r3
 8008aa4:	683b      	ldr	r3, [r7, #0]
 8008aa6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008aa8:	6878      	ldr	r0, [r7, #4]
 8008aaa:	f7ff ff9b 	bl	80089e4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008aae:	2300      	movs	r3, #0
 8008ab0:	61fb      	str	r3, [r7, #28]
 8008ab2:	e004      	b.n	8008abe <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008ab4:	683b      	ldr	r3, [r7, #0]
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008aba:	2301      	movs	r3, #1
 8008abc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008abe:	f000 fe79 	bl	80097b4 <vPortExitCritical>

	return xReturn;
 8008ac2:	69fb      	ldr	r3, [r7, #28]
}
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	3720      	adds	r7, #32
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	bd80      	pop	{r7, pc}
 8008acc:	20000eac 	.word	0x20000eac
 8008ad0:	20000ec0 	.word	0x20000ec0

08008ad4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008ad4:	b480      	push	{r7}
 8008ad6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008ad8:	4b03      	ldr	r3, [pc, #12]	; (8008ae8 <vTaskMissedYield+0x14>)
 8008ada:	2201      	movs	r2, #1
 8008adc:	601a      	str	r2, [r3, #0]
}
 8008ade:	bf00      	nop
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae6:	4770      	bx	lr
 8008ae8:	20000ebc 	.word	0x20000ebc

08008aec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	b082      	sub	sp, #8
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008af4:	f000 f852 	bl	8008b9c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008af8:	4b06      	ldr	r3, [pc, #24]	; (8008b14 <prvIdleTask+0x28>)
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	2b01      	cmp	r3, #1
 8008afe:	d9f9      	bls.n	8008af4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008b00:	4b05      	ldr	r3, [pc, #20]	; (8008b18 <prvIdleTask+0x2c>)
 8008b02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b06:	601a      	str	r2, [r3, #0]
 8008b08:	f3bf 8f4f 	dsb	sy
 8008b0c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008b10:	e7f0      	b.n	8008af4 <prvIdleTask+0x8>
 8008b12:	bf00      	nop
 8008b14:	200009d8 	.word	0x200009d8
 8008b18:	e000ed04 	.word	0xe000ed04

08008b1c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008b1c:	b580      	push	{r7, lr}
 8008b1e:	b082      	sub	sp, #8
 8008b20:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008b22:	2300      	movs	r3, #0
 8008b24:	607b      	str	r3, [r7, #4]
 8008b26:	e00c      	b.n	8008b42 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008b28:	687a      	ldr	r2, [r7, #4]
 8008b2a:	4613      	mov	r3, r2
 8008b2c:	009b      	lsls	r3, r3, #2
 8008b2e:	4413      	add	r3, r2
 8008b30:	009b      	lsls	r3, r3, #2
 8008b32:	4a12      	ldr	r2, [pc, #72]	; (8008b7c <prvInitialiseTaskLists+0x60>)
 8008b34:	4413      	add	r3, r2
 8008b36:	4618      	mov	r0, r3
 8008b38:	f7fe fcca 	bl	80074d0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	3301      	adds	r3, #1
 8008b40:	607b      	str	r3, [r7, #4]
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	2b37      	cmp	r3, #55	; 0x37
 8008b46:	d9ef      	bls.n	8008b28 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008b48:	480d      	ldr	r0, [pc, #52]	; (8008b80 <prvInitialiseTaskLists+0x64>)
 8008b4a:	f7fe fcc1 	bl	80074d0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008b4e:	480d      	ldr	r0, [pc, #52]	; (8008b84 <prvInitialiseTaskLists+0x68>)
 8008b50:	f7fe fcbe 	bl	80074d0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008b54:	480c      	ldr	r0, [pc, #48]	; (8008b88 <prvInitialiseTaskLists+0x6c>)
 8008b56:	f7fe fcbb 	bl	80074d0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008b5a:	480c      	ldr	r0, [pc, #48]	; (8008b8c <prvInitialiseTaskLists+0x70>)
 8008b5c:	f7fe fcb8 	bl	80074d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008b60:	480b      	ldr	r0, [pc, #44]	; (8008b90 <prvInitialiseTaskLists+0x74>)
 8008b62:	f7fe fcb5 	bl	80074d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008b66:	4b0b      	ldr	r3, [pc, #44]	; (8008b94 <prvInitialiseTaskLists+0x78>)
 8008b68:	4a05      	ldr	r2, [pc, #20]	; (8008b80 <prvInitialiseTaskLists+0x64>)
 8008b6a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008b6c:	4b0a      	ldr	r3, [pc, #40]	; (8008b98 <prvInitialiseTaskLists+0x7c>)
 8008b6e:	4a05      	ldr	r2, [pc, #20]	; (8008b84 <prvInitialiseTaskLists+0x68>)
 8008b70:	601a      	str	r2, [r3, #0]
}
 8008b72:	bf00      	nop
 8008b74:	3708      	adds	r7, #8
 8008b76:	46bd      	mov	sp, r7
 8008b78:	bd80      	pop	{r7, pc}
 8008b7a:	bf00      	nop
 8008b7c:	200009d8 	.word	0x200009d8
 8008b80:	20000e38 	.word	0x20000e38
 8008b84:	20000e4c 	.word	0x20000e4c
 8008b88:	20000e68 	.word	0x20000e68
 8008b8c:	20000e7c 	.word	0x20000e7c
 8008b90:	20000e94 	.word	0x20000e94
 8008b94:	20000e60 	.word	0x20000e60
 8008b98:	20000e64 	.word	0x20000e64

08008b9c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	b082      	sub	sp, #8
 8008ba0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008ba2:	e019      	b.n	8008bd8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008ba4:	f000 fdd6 	bl	8009754 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ba8:	4b10      	ldr	r3, [pc, #64]	; (8008bec <prvCheckTasksWaitingTermination+0x50>)
 8008baa:	68db      	ldr	r3, [r3, #12]
 8008bac:	68db      	ldr	r3, [r3, #12]
 8008bae:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	3304      	adds	r3, #4
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	f7fe fd15 	bl	80075e4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008bba:	4b0d      	ldr	r3, [pc, #52]	; (8008bf0 <prvCheckTasksWaitingTermination+0x54>)
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	3b01      	subs	r3, #1
 8008bc0:	4a0b      	ldr	r2, [pc, #44]	; (8008bf0 <prvCheckTasksWaitingTermination+0x54>)
 8008bc2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008bc4:	4b0b      	ldr	r3, [pc, #44]	; (8008bf4 <prvCheckTasksWaitingTermination+0x58>)
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	3b01      	subs	r3, #1
 8008bca:	4a0a      	ldr	r2, [pc, #40]	; (8008bf4 <prvCheckTasksWaitingTermination+0x58>)
 8008bcc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008bce:	f000 fdf1 	bl	80097b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008bd2:	6878      	ldr	r0, [r7, #4]
 8008bd4:	f000 f810 	bl	8008bf8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008bd8:	4b06      	ldr	r3, [pc, #24]	; (8008bf4 <prvCheckTasksWaitingTermination+0x58>)
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d1e1      	bne.n	8008ba4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008be0:	bf00      	nop
 8008be2:	bf00      	nop
 8008be4:	3708      	adds	r7, #8
 8008be6:	46bd      	mov	sp, r7
 8008be8:	bd80      	pop	{r7, pc}
 8008bea:	bf00      	nop
 8008bec:	20000e7c 	.word	0x20000e7c
 8008bf0:	20000ea8 	.word	0x20000ea8
 8008bf4:	20000e90 	.word	0x20000e90

08008bf8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b084      	sub	sp, #16
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	3354      	adds	r3, #84	; 0x54
 8008c04:	4618      	mov	r0, r3
 8008c06:	f001 fe55 	bl	800a8b4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d108      	bne.n	8008c26 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c18:	4618      	mov	r0, r3
 8008c1a:	f000 ff89 	bl	8009b30 <vPortFree>
				vPortFree( pxTCB );
 8008c1e:	6878      	ldr	r0, [r7, #4]
 8008c20:	f000 ff86 	bl	8009b30 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008c24:	e018      	b.n	8008c58 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8008c2c:	2b01      	cmp	r3, #1
 8008c2e:	d103      	bne.n	8008c38 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008c30:	6878      	ldr	r0, [r7, #4]
 8008c32:	f000 ff7d 	bl	8009b30 <vPortFree>
	}
 8008c36:	e00f      	b.n	8008c58 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8008c3e:	2b02      	cmp	r3, #2
 8008c40:	d00a      	beq.n	8008c58 <prvDeleteTCB+0x60>
	__asm volatile
 8008c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c46:	f383 8811 	msr	BASEPRI, r3
 8008c4a:	f3bf 8f6f 	isb	sy
 8008c4e:	f3bf 8f4f 	dsb	sy
 8008c52:	60fb      	str	r3, [r7, #12]
}
 8008c54:	bf00      	nop
 8008c56:	e7fe      	b.n	8008c56 <prvDeleteTCB+0x5e>
	}
 8008c58:	bf00      	nop
 8008c5a:	3710      	adds	r7, #16
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	bd80      	pop	{r7, pc}

08008c60 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008c60:	b480      	push	{r7}
 8008c62:	b083      	sub	sp, #12
 8008c64:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008c66:	4b0c      	ldr	r3, [pc, #48]	; (8008c98 <prvResetNextTaskUnblockTime+0x38>)
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d104      	bne.n	8008c7a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008c70:	4b0a      	ldr	r3, [pc, #40]	; (8008c9c <prvResetNextTaskUnblockTime+0x3c>)
 8008c72:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008c76:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008c78:	e008      	b.n	8008c8c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c7a:	4b07      	ldr	r3, [pc, #28]	; (8008c98 <prvResetNextTaskUnblockTime+0x38>)
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	68db      	ldr	r3, [r3, #12]
 8008c80:	68db      	ldr	r3, [r3, #12]
 8008c82:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	685b      	ldr	r3, [r3, #4]
 8008c88:	4a04      	ldr	r2, [pc, #16]	; (8008c9c <prvResetNextTaskUnblockTime+0x3c>)
 8008c8a:	6013      	str	r3, [r2, #0]
}
 8008c8c:	bf00      	nop
 8008c8e:	370c      	adds	r7, #12
 8008c90:	46bd      	mov	sp, r7
 8008c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c96:	4770      	bx	lr
 8008c98:	20000e60 	.word	0x20000e60
 8008c9c:	20000ec8 	.word	0x20000ec8

08008ca0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008ca0:	b480      	push	{r7}
 8008ca2:	b083      	sub	sp, #12
 8008ca4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008ca6:	4b0b      	ldr	r3, [pc, #44]	; (8008cd4 <xTaskGetSchedulerState+0x34>)
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d102      	bne.n	8008cb4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008cae:	2301      	movs	r3, #1
 8008cb0:	607b      	str	r3, [r7, #4]
 8008cb2:	e008      	b.n	8008cc6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008cb4:	4b08      	ldr	r3, [pc, #32]	; (8008cd8 <xTaskGetSchedulerState+0x38>)
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d102      	bne.n	8008cc2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008cbc:	2302      	movs	r3, #2
 8008cbe:	607b      	str	r3, [r7, #4]
 8008cc0:	e001      	b.n	8008cc6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008cc6:	687b      	ldr	r3, [r7, #4]
	}
 8008cc8:	4618      	mov	r0, r3
 8008cca:	370c      	adds	r7, #12
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd2:	4770      	bx	lr
 8008cd4:	20000eb4 	.word	0x20000eb4
 8008cd8:	20000ed0 	.word	0x20000ed0

08008cdc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	b086      	sub	sp, #24
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008ce8:	2300      	movs	r3, #0
 8008cea:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d056      	beq.n	8008da0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008cf2:	4b2e      	ldr	r3, [pc, #184]	; (8008dac <xTaskPriorityDisinherit+0xd0>)
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	693a      	ldr	r2, [r7, #16]
 8008cf8:	429a      	cmp	r2, r3
 8008cfa:	d00a      	beq.n	8008d12 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d00:	f383 8811 	msr	BASEPRI, r3
 8008d04:	f3bf 8f6f 	isb	sy
 8008d08:	f3bf 8f4f 	dsb	sy
 8008d0c:	60fb      	str	r3, [r7, #12]
}
 8008d0e:	bf00      	nop
 8008d10:	e7fe      	b.n	8008d10 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008d12:	693b      	ldr	r3, [r7, #16]
 8008d14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d10a      	bne.n	8008d30 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d1e:	f383 8811 	msr	BASEPRI, r3
 8008d22:	f3bf 8f6f 	isb	sy
 8008d26:	f3bf 8f4f 	dsb	sy
 8008d2a:	60bb      	str	r3, [r7, #8]
}
 8008d2c:	bf00      	nop
 8008d2e:	e7fe      	b.n	8008d2e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008d30:	693b      	ldr	r3, [r7, #16]
 8008d32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d34:	1e5a      	subs	r2, r3, #1
 8008d36:	693b      	ldr	r3, [r7, #16]
 8008d38:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008d3a:	693b      	ldr	r3, [r7, #16]
 8008d3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d3e:	693b      	ldr	r3, [r7, #16]
 8008d40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d42:	429a      	cmp	r2, r3
 8008d44:	d02c      	beq.n	8008da0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008d46:	693b      	ldr	r3, [r7, #16]
 8008d48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d128      	bne.n	8008da0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008d4e:	693b      	ldr	r3, [r7, #16]
 8008d50:	3304      	adds	r3, #4
 8008d52:	4618      	mov	r0, r3
 8008d54:	f7fe fc46 	bl	80075e4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008d58:	693b      	ldr	r3, [r7, #16]
 8008d5a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008d5c:	693b      	ldr	r3, [r7, #16]
 8008d5e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008d60:	693b      	ldr	r3, [r7, #16]
 8008d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d64:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008d68:	693b      	ldr	r3, [r7, #16]
 8008d6a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008d6c:	693b      	ldr	r3, [r7, #16]
 8008d6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d70:	4b0f      	ldr	r3, [pc, #60]	; (8008db0 <xTaskPriorityDisinherit+0xd4>)
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	429a      	cmp	r2, r3
 8008d76:	d903      	bls.n	8008d80 <xTaskPriorityDisinherit+0xa4>
 8008d78:	693b      	ldr	r3, [r7, #16]
 8008d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d7c:	4a0c      	ldr	r2, [pc, #48]	; (8008db0 <xTaskPriorityDisinherit+0xd4>)
 8008d7e:	6013      	str	r3, [r2, #0]
 8008d80:	693b      	ldr	r3, [r7, #16]
 8008d82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d84:	4613      	mov	r3, r2
 8008d86:	009b      	lsls	r3, r3, #2
 8008d88:	4413      	add	r3, r2
 8008d8a:	009b      	lsls	r3, r3, #2
 8008d8c:	4a09      	ldr	r2, [pc, #36]	; (8008db4 <xTaskPriorityDisinherit+0xd8>)
 8008d8e:	441a      	add	r2, r3
 8008d90:	693b      	ldr	r3, [r7, #16]
 8008d92:	3304      	adds	r3, #4
 8008d94:	4619      	mov	r1, r3
 8008d96:	4610      	mov	r0, r2
 8008d98:	f7fe fbc7 	bl	800752a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008d9c:	2301      	movs	r3, #1
 8008d9e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008da0:	697b      	ldr	r3, [r7, #20]
	}
 8008da2:	4618      	mov	r0, r3
 8008da4:	3718      	adds	r7, #24
 8008da6:	46bd      	mov	sp, r7
 8008da8:	bd80      	pop	{r7, pc}
 8008daa:	bf00      	nop
 8008dac:	200009d4 	.word	0x200009d4
 8008db0:	20000eb0 	.word	0x20000eb0
 8008db4:	200009d8 	.word	0x200009d8

08008db8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b084      	sub	sp, #16
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
 8008dc0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008dc2:	4b21      	ldr	r3, [pc, #132]	; (8008e48 <prvAddCurrentTaskToDelayedList+0x90>)
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008dc8:	4b20      	ldr	r3, [pc, #128]	; (8008e4c <prvAddCurrentTaskToDelayedList+0x94>)
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	3304      	adds	r3, #4
 8008dce:	4618      	mov	r0, r3
 8008dd0:	f7fe fc08 	bl	80075e4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008dda:	d10a      	bne.n	8008df2 <prvAddCurrentTaskToDelayedList+0x3a>
 8008ddc:	683b      	ldr	r3, [r7, #0]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d007      	beq.n	8008df2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008de2:	4b1a      	ldr	r3, [pc, #104]	; (8008e4c <prvAddCurrentTaskToDelayedList+0x94>)
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	3304      	adds	r3, #4
 8008de8:	4619      	mov	r1, r3
 8008dea:	4819      	ldr	r0, [pc, #100]	; (8008e50 <prvAddCurrentTaskToDelayedList+0x98>)
 8008dec:	f7fe fb9d 	bl	800752a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008df0:	e026      	b.n	8008e40 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008df2:	68fa      	ldr	r2, [r7, #12]
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	4413      	add	r3, r2
 8008df8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008dfa:	4b14      	ldr	r3, [pc, #80]	; (8008e4c <prvAddCurrentTaskToDelayedList+0x94>)
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	68ba      	ldr	r2, [r7, #8]
 8008e00:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008e02:	68ba      	ldr	r2, [r7, #8]
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	429a      	cmp	r2, r3
 8008e08:	d209      	bcs.n	8008e1e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008e0a:	4b12      	ldr	r3, [pc, #72]	; (8008e54 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008e0c:	681a      	ldr	r2, [r3, #0]
 8008e0e:	4b0f      	ldr	r3, [pc, #60]	; (8008e4c <prvAddCurrentTaskToDelayedList+0x94>)
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	3304      	adds	r3, #4
 8008e14:	4619      	mov	r1, r3
 8008e16:	4610      	mov	r0, r2
 8008e18:	f7fe fbab 	bl	8007572 <vListInsert>
}
 8008e1c:	e010      	b.n	8008e40 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008e1e:	4b0e      	ldr	r3, [pc, #56]	; (8008e58 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008e20:	681a      	ldr	r2, [r3, #0]
 8008e22:	4b0a      	ldr	r3, [pc, #40]	; (8008e4c <prvAddCurrentTaskToDelayedList+0x94>)
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	3304      	adds	r3, #4
 8008e28:	4619      	mov	r1, r3
 8008e2a:	4610      	mov	r0, r2
 8008e2c:	f7fe fba1 	bl	8007572 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008e30:	4b0a      	ldr	r3, [pc, #40]	; (8008e5c <prvAddCurrentTaskToDelayedList+0xa4>)
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	68ba      	ldr	r2, [r7, #8]
 8008e36:	429a      	cmp	r2, r3
 8008e38:	d202      	bcs.n	8008e40 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008e3a:	4a08      	ldr	r2, [pc, #32]	; (8008e5c <prvAddCurrentTaskToDelayedList+0xa4>)
 8008e3c:	68bb      	ldr	r3, [r7, #8]
 8008e3e:	6013      	str	r3, [r2, #0]
}
 8008e40:	bf00      	nop
 8008e42:	3710      	adds	r7, #16
 8008e44:	46bd      	mov	sp, r7
 8008e46:	bd80      	pop	{r7, pc}
 8008e48:	20000eac 	.word	0x20000eac
 8008e4c:	200009d4 	.word	0x200009d4
 8008e50:	20000e94 	.word	0x20000e94
 8008e54:	20000e64 	.word	0x20000e64
 8008e58:	20000e60 	.word	0x20000e60
 8008e5c:	20000ec8 	.word	0x20000ec8

08008e60 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008e60:	b580      	push	{r7, lr}
 8008e62:	b08a      	sub	sp, #40	; 0x28
 8008e64:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008e66:	2300      	movs	r3, #0
 8008e68:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008e6a:	f000 fb07 	bl	800947c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008e6e:	4b1c      	ldr	r3, [pc, #112]	; (8008ee0 <xTimerCreateTimerTask+0x80>)
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d021      	beq.n	8008eba <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008e76:	2300      	movs	r3, #0
 8008e78:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008e7e:	1d3a      	adds	r2, r7, #4
 8008e80:	f107 0108 	add.w	r1, r7, #8
 8008e84:	f107 030c 	add.w	r3, r7, #12
 8008e88:	4618      	mov	r0, r3
 8008e8a:	f7fe fb07 	bl	800749c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008e8e:	6879      	ldr	r1, [r7, #4]
 8008e90:	68bb      	ldr	r3, [r7, #8]
 8008e92:	68fa      	ldr	r2, [r7, #12]
 8008e94:	9202      	str	r2, [sp, #8]
 8008e96:	9301      	str	r3, [sp, #4]
 8008e98:	2302      	movs	r3, #2
 8008e9a:	9300      	str	r3, [sp, #0]
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	460a      	mov	r2, r1
 8008ea0:	4910      	ldr	r1, [pc, #64]	; (8008ee4 <xTimerCreateTimerTask+0x84>)
 8008ea2:	4811      	ldr	r0, [pc, #68]	; (8008ee8 <xTimerCreateTimerTask+0x88>)
 8008ea4:	f7ff f8b4 	bl	8008010 <xTaskCreateStatic>
 8008ea8:	4603      	mov	r3, r0
 8008eaa:	4a10      	ldr	r2, [pc, #64]	; (8008eec <xTimerCreateTimerTask+0x8c>)
 8008eac:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008eae:	4b0f      	ldr	r3, [pc, #60]	; (8008eec <xTimerCreateTimerTask+0x8c>)
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d001      	beq.n	8008eba <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008eb6:	2301      	movs	r3, #1
 8008eb8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008eba:	697b      	ldr	r3, [r7, #20]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d10a      	bne.n	8008ed6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ec4:	f383 8811 	msr	BASEPRI, r3
 8008ec8:	f3bf 8f6f 	isb	sy
 8008ecc:	f3bf 8f4f 	dsb	sy
 8008ed0:	613b      	str	r3, [r7, #16]
}
 8008ed2:	bf00      	nop
 8008ed4:	e7fe      	b.n	8008ed4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008ed6:	697b      	ldr	r3, [r7, #20]
}
 8008ed8:	4618      	mov	r0, r3
 8008eda:	3718      	adds	r7, #24
 8008edc:	46bd      	mov	sp, r7
 8008ede:	bd80      	pop	{r7, pc}
 8008ee0:	20000f04 	.word	0x20000f04
 8008ee4:	0800aaa4 	.word	0x0800aaa4
 8008ee8:	08009025 	.word	0x08009025
 8008eec:	20000f08 	.word	0x20000f08

08008ef0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	b08a      	sub	sp, #40	; 0x28
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	60f8      	str	r0, [r7, #12]
 8008ef8:	60b9      	str	r1, [r7, #8]
 8008efa:	607a      	str	r2, [r7, #4]
 8008efc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008efe:	2300      	movs	r3, #0
 8008f00:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d10a      	bne.n	8008f1e <xTimerGenericCommand+0x2e>
	__asm volatile
 8008f08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f0c:	f383 8811 	msr	BASEPRI, r3
 8008f10:	f3bf 8f6f 	isb	sy
 8008f14:	f3bf 8f4f 	dsb	sy
 8008f18:	623b      	str	r3, [r7, #32]
}
 8008f1a:	bf00      	nop
 8008f1c:	e7fe      	b.n	8008f1c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008f1e:	4b1a      	ldr	r3, [pc, #104]	; (8008f88 <xTimerGenericCommand+0x98>)
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d02a      	beq.n	8008f7c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008f26:	68bb      	ldr	r3, [r7, #8]
 8008f28:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008f32:	68bb      	ldr	r3, [r7, #8]
 8008f34:	2b05      	cmp	r3, #5
 8008f36:	dc18      	bgt.n	8008f6a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008f38:	f7ff feb2 	bl	8008ca0 <xTaskGetSchedulerState>
 8008f3c:	4603      	mov	r3, r0
 8008f3e:	2b02      	cmp	r3, #2
 8008f40:	d109      	bne.n	8008f56 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008f42:	4b11      	ldr	r3, [pc, #68]	; (8008f88 <xTimerGenericCommand+0x98>)
 8008f44:	6818      	ldr	r0, [r3, #0]
 8008f46:	f107 0110 	add.w	r1, r7, #16
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f4e:	f7fe fc77 	bl	8007840 <xQueueGenericSend>
 8008f52:	6278      	str	r0, [r7, #36]	; 0x24
 8008f54:	e012      	b.n	8008f7c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008f56:	4b0c      	ldr	r3, [pc, #48]	; (8008f88 <xTimerGenericCommand+0x98>)
 8008f58:	6818      	ldr	r0, [r3, #0]
 8008f5a:	f107 0110 	add.w	r1, r7, #16
 8008f5e:	2300      	movs	r3, #0
 8008f60:	2200      	movs	r2, #0
 8008f62:	f7fe fc6d 	bl	8007840 <xQueueGenericSend>
 8008f66:	6278      	str	r0, [r7, #36]	; 0x24
 8008f68:	e008      	b.n	8008f7c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008f6a:	4b07      	ldr	r3, [pc, #28]	; (8008f88 <xTimerGenericCommand+0x98>)
 8008f6c:	6818      	ldr	r0, [r3, #0]
 8008f6e:	f107 0110 	add.w	r1, r7, #16
 8008f72:	2300      	movs	r3, #0
 8008f74:	683a      	ldr	r2, [r7, #0]
 8008f76:	f7fe fd61 	bl	8007a3c <xQueueGenericSendFromISR>
 8008f7a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008f7e:	4618      	mov	r0, r3
 8008f80:	3728      	adds	r7, #40	; 0x28
 8008f82:	46bd      	mov	sp, r7
 8008f84:	bd80      	pop	{r7, pc}
 8008f86:	bf00      	nop
 8008f88:	20000f04 	.word	0x20000f04

08008f8c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008f8c:	b580      	push	{r7, lr}
 8008f8e:	b088      	sub	sp, #32
 8008f90:	af02      	add	r7, sp, #8
 8008f92:	6078      	str	r0, [r7, #4]
 8008f94:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f96:	4b22      	ldr	r3, [pc, #136]	; (8009020 <prvProcessExpiredTimer+0x94>)
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	68db      	ldr	r3, [r3, #12]
 8008f9c:	68db      	ldr	r3, [r3, #12]
 8008f9e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008fa0:	697b      	ldr	r3, [r7, #20]
 8008fa2:	3304      	adds	r3, #4
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	f7fe fb1d 	bl	80075e4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008faa:	697b      	ldr	r3, [r7, #20]
 8008fac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008fb0:	f003 0304 	and.w	r3, r3, #4
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d022      	beq.n	8008ffe <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008fb8:	697b      	ldr	r3, [r7, #20]
 8008fba:	699a      	ldr	r2, [r3, #24]
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	18d1      	adds	r1, r2, r3
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	683a      	ldr	r2, [r7, #0]
 8008fc4:	6978      	ldr	r0, [r7, #20]
 8008fc6:	f000 f8d1 	bl	800916c <prvInsertTimerInActiveList>
 8008fca:	4603      	mov	r3, r0
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d01f      	beq.n	8009010 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	9300      	str	r3, [sp, #0]
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	687a      	ldr	r2, [r7, #4]
 8008fd8:	2100      	movs	r1, #0
 8008fda:	6978      	ldr	r0, [r7, #20]
 8008fdc:	f7ff ff88 	bl	8008ef0 <xTimerGenericCommand>
 8008fe0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008fe2:	693b      	ldr	r3, [r7, #16]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d113      	bne.n	8009010 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8008fe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fec:	f383 8811 	msr	BASEPRI, r3
 8008ff0:	f3bf 8f6f 	isb	sy
 8008ff4:	f3bf 8f4f 	dsb	sy
 8008ff8:	60fb      	str	r3, [r7, #12]
}
 8008ffa:	bf00      	nop
 8008ffc:	e7fe      	b.n	8008ffc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008ffe:	697b      	ldr	r3, [r7, #20]
 8009000:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009004:	f023 0301 	bic.w	r3, r3, #1
 8009008:	b2da      	uxtb	r2, r3
 800900a:	697b      	ldr	r3, [r7, #20]
 800900c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009010:	697b      	ldr	r3, [r7, #20]
 8009012:	6a1b      	ldr	r3, [r3, #32]
 8009014:	6978      	ldr	r0, [r7, #20]
 8009016:	4798      	blx	r3
}
 8009018:	bf00      	nop
 800901a:	3718      	adds	r7, #24
 800901c:	46bd      	mov	sp, r7
 800901e:	bd80      	pop	{r7, pc}
 8009020:	20000efc 	.word	0x20000efc

08009024 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009024:	b580      	push	{r7, lr}
 8009026:	b084      	sub	sp, #16
 8009028:	af00      	add	r7, sp, #0
 800902a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800902c:	f107 0308 	add.w	r3, r7, #8
 8009030:	4618      	mov	r0, r3
 8009032:	f000 f857 	bl	80090e4 <prvGetNextExpireTime>
 8009036:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009038:	68bb      	ldr	r3, [r7, #8]
 800903a:	4619      	mov	r1, r3
 800903c:	68f8      	ldr	r0, [r7, #12]
 800903e:	f000 f803 	bl	8009048 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009042:	f000 f8d5 	bl	80091f0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009046:	e7f1      	b.n	800902c <prvTimerTask+0x8>

08009048 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b084      	sub	sp, #16
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
 8009050:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009052:	f7ff fa39 	bl	80084c8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009056:	f107 0308 	add.w	r3, r7, #8
 800905a:	4618      	mov	r0, r3
 800905c:	f000 f866 	bl	800912c <prvSampleTimeNow>
 8009060:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009062:	68bb      	ldr	r3, [r7, #8]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d130      	bne.n	80090ca <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009068:	683b      	ldr	r3, [r7, #0]
 800906a:	2b00      	cmp	r3, #0
 800906c:	d10a      	bne.n	8009084 <prvProcessTimerOrBlockTask+0x3c>
 800906e:	687a      	ldr	r2, [r7, #4]
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	429a      	cmp	r2, r3
 8009074:	d806      	bhi.n	8009084 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009076:	f7ff fa35 	bl	80084e4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800907a:	68f9      	ldr	r1, [r7, #12]
 800907c:	6878      	ldr	r0, [r7, #4]
 800907e:	f7ff ff85 	bl	8008f8c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009082:	e024      	b.n	80090ce <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009084:	683b      	ldr	r3, [r7, #0]
 8009086:	2b00      	cmp	r3, #0
 8009088:	d008      	beq.n	800909c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800908a:	4b13      	ldr	r3, [pc, #76]	; (80090d8 <prvProcessTimerOrBlockTask+0x90>)
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	2b00      	cmp	r3, #0
 8009092:	d101      	bne.n	8009098 <prvProcessTimerOrBlockTask+0x50>
 8009094:	2301      	movs	r3, #1
 8009096:	e000      	b.n	800909a <prvProcessTimerOrBlockTask+0x52>
 8009098:	2300      	movs	r3, #0
 800909a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800909c:	4b0f      	ldr	r3, [pc, #60]	; (80090dc <prvProcessTimerOrBlockTask+0x94>)
 800909e:	6818      	ldr	r0, [r3, #0]
 80090a0:	687a      	ldr	r2, [r7, #4]
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	1ad3      	subs	r3, r2, r3
 80090a6:	683a      	ldr	r2, [r7, #0]
 80090a8:	4619      	mov	r1, r3
 80090aa:	f7fe ff7d 	bl	8007fa8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80090ae:	f7ff fa19 	bl	80084e4 <xTaskResumeAll>
 80090b2:	4603      	mov	r3, r0
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d10a      	bne.n	80090ce <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80090b8:	4b09      	ldr	r3, [pc, #36]	; (80090e0 <prvProcessTimerOrBlockTask+0x98>)
 80090ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090be:	601a      	str	r2, [r3, #0]
 80090c0:	f3bf 8f4f 	dsb	sy
 80090c4:	f3bf 8f6f 	isb	sy
}
 80090c8:	e001      	b.n	80090ce <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80090ca:	f7ff fa0b 	bl	80084e4 <xTaskResumeAll>
}
 80090ce:	bf00      	nop
 80090d0:	3710      	adds	r7, #16
 80090d2:	46bd      	mov	sp, r7
 80090d4:	bd80      	pop	{r7, pc}
 80090d6:	bf00      	nop
 80090d8:	20000f00 	.word	0x20000f00
 80090dc:	20000f04 	.word	0x20000f04
 80090e0:	e000ed04 	.word	0xe000ed04

080090e4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80090e4:	b480      	push	{r7}
 80090e6:	b085      	sub	sp, #20
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80090ec:	4b0e      	ldr	r3, [pc, #56]	; (8009128 <prvGetNextExpireTime+0x44>)
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d101      	bne.n	80090fa <prvGetNextExpireTime+0x16>
 80090f6:	2201      	movs	r2, #1
 80090f8:	e000      	b.n	80090fc <prvGetNextExpireTime+0x18>
 80090fa:	2200      	movs	r2, #0
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	2b00      	cmp	r3, #0
 8009106:	d105      	bne.n	8009114 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009108:	4b07      	ldr	r3, [pc, #28]	; (8009128 <prvGetNextExpireTime+0x44>)
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	68db      	ldr	r3, [r3, #12]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	60fb      	str	r3, [r7, #12]
 8009112:	e001      	b.n	8009118 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009114:	2300      	movs	r3, #0
 8009116:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009118:	68fb      	ldr	r3, [r7, #12]
}
 800911a:	4618      	mov	r0, r3
 800911c:	3714      	adds	r7, #20
 800911e:	46bd      	mov	sp, r7
 8009120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009124:	4770      	bx	lr
 8009126:	bf00      	nop
 8009128:	20000efc 	.word	0x20000efc

0800912c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800912c:	b580      	push	{r7, lr}
 800912e:	b084      	sub	sp, #16
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009134:	f7ff fa74 	bl	8008620 <xTaskGetTickCount>
 8009138:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800913a:	4b0b      	ldr	r3, [pc, #44]	; (8009168 <prvSampleTimeNow+0x3c>)
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	68fa      	ldr	r2, [r7, #12]
 8009140:	429a      	cmp	r2, r3
 8009142:	d205      	bcs.n	8009150 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009144:	f000 f936 	bl	80093b4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	2201      	movs	r2, #1
 800914c:	601a      	str	r2, [r3, #0]
 800914e:	e002      	b.n	8009156 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	2200      	movs	r2, #0
 8009154:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009156:	4a04      	ldr	r2, [pc, #16]	; (8009168 <prvSampleTimeNow+0x3c>)
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800915c:	68fb      	ldr	r3, [r7, #12]
}
 800915e:	4618      	mov	r0, r3
 8009160:	3710      	adds	r7, #16
 8009162:	46bd      	mov	sp, r7
 8009164:	bd80      	pop	{r7, pc}
 8009166:	bf00      	nop
 8009168:	20000f0c 	.word	0x20000f0c

0800916c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800916c:	b580      	push	{r7, lr}
 800916e:	b086      	sub	sp, #24
 8009170:	af00      	add	r7, sp, #0
 8009172:	60f8      	str	r0, [r7, #12]
 8009174:	60b9      	str	r1, [r7, #8]
 8009176:	607a      	str	r2, [r7, #4]
 8009178:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800917a:	2300      	movs	r3, #0
 800917c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	68ba      	ldr	r2, [r7, #8]
 8009182:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	68fa      	ldr	r2, [r7, #12]
 8009188:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800918a:	68ba      	ldr	r2, [r7, #8]
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	429a      	cmp	r2, r3
 8009190:	d812      	bhi.n	80091b8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009192:	687a      	ldr	r2, [r7, #4]
 8009194:	683b      	ldr	r3, [r7, #0]
 8009196:	1ad2      	subs	r2, r2, r3
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	699b      	ldr	r3, [r3, #24]
 800919c:	429a      	cmp	r2, r3
 800919e:	d302      	bcc.n	80091a6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80091a0:	2301      	movs	r3, #1
 80091a2:	617b      	str	r3, [r7, #20]
 80091a4:	e01b      	b.n	80091de <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80091a6:	4b10      	ldr	r3, [pc, #64]	; (80091e8 <prvInsertTimerInActiveList+0x7c>)
 80091a8:	681a      	ldr	r2, [r3, #0]
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	3304      	adds	r3, #4
 80091ae:	4619      	mov	r1, r3
 80091b0:	4610      	mov	r0, r2
 80091b2:	f7fe f9de 	bl	8007572 <vListInsert>
 80091b6:	e012      	b.n	80091de <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80091b8:	687a      	ldr	r2, [r7, #4]
 80091ba:	683b      	ldr	r3, [r7, #0]
 80091bc:	429a      	cmp	r2, r3
 80091be:	d206      	bcs.n	80091ce <prvInsertTimerInActiveList+0x62>
 80091c0:	68ba      	ldr	r2, [r7, #8]
 80091c2:	683b      	ldr	r3, [r7, #0]
 80091c4:	429a      	cmp	r2, r3
 80091c6:	d302      	bcc.n	80091ce <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80091c8:	2301      	movs	r3, #1
 80091ca:	617b      	str	r3, [r7, #20]
 80091cc:	e007      	b.n	80091de <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80091ce:	4b07      	ldr	r3, [pc, #28]	; (80091ec <prvInsertTimerInActiveList+0x80>)
 80091d0:	681a      	ldr	r2, [r3, #0]
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	3304      	adds	r3, #4
 80091d6:	4619      	mov	r1, r3
 80091d8:	4610      	mov	r0, r2
 80091da:	f7fe f9ca 	bl	8007572 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80091de:	697b      	ldr	r3, [r7, #20]
}
 80091e0:	4618      	mov	r0, r3
 80091e2:	3718      	adds	r7, #24
 80091e4:	46bd      	mov	sp, r7
 80091e6:	bd80      	pop	{r7, pc}
 80091e8:	20000f00 	.word	0x20000f00
 80091ec:	20000efc 	.word	0x20000efc

080091f0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80091f0:	b580      	push	{r7, lr}
 80091f2:	b08e      	sub	sp, #56	; 0x38
 80091f4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80091f6:	e0ca      	b.n	800938e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	da18      	bge.n	8009230 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80091fe:	1d3b      	adds	r3, r7, #4
 8009200:	3304      	adds	r3, #4
 8009202:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009206:	2b00      	cmp	r3, #0
 8009208:	d10a      	bne.n	8009220 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800920a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800920e:	f383 8811 	msr	BASEPRI, r3
 8009212:	f3bf 8f6f 	isb	sy
 8009216:	f3bf 8f4f 	dsb	sy
 800921a:	61fb      	str	r3, [r7, #28]
}
 800921c:	bf00      	nop
 800921e:	e7fe      	b.n	800921e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009226:	6850      	ldr	r0, [r2, #4]
 8009228:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800922a:	6892      	ldr	r2, [r2, #8]
 800922c:	4611      	mov	r1, r2
 800922e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	2b00      	cmp	r3, #0
 8009234:	f2c0 80ab 	blt.w	800938e <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800923c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800923e:	695b      	ldr	r3, [r3, #20]
 8009240:	2b00      	cmp	r3, #0
 8009242:	d004      	beq.n	800924e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009246:	3304      	adds	r3, #4
 8009248:	4618      	mov	r0, r3
 800924a:	f7fe f9cb 	bl	80075e4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800924e:	463b      	mov	r3, r7
 8009250:	4618      	mov	r0, r3
 8009252:	f7ff ff6b 	bl	800912c <prvSampleTimeNow>
 8009256:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	2b09      	cmp	r3, #9
 800925c:	f200 8096 	bhi.w	800938c <prvProcessReceivedCommands+0x19c>
 8009260:	a201      	add	r2, pc, #4	; (adr r2, 8009268 <prvProcessReceivedCommands+0x78>)
 8009262:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009266:	bf00      	nop
 8009268:	08009291 	.word	0x08009291
 800926c:	08009291 	.word	0x08009291
 8009270:	08009291 	.word	0x08009291
 8009274:	08009305 	.word	0x08009305
 8009278:	08009319 	.word	0x08009319
 800927c:	08009363 	.word	0x08009363
 8009280:	08009291 	.word	0x08009291
 8009284:	08009291 	.word	0x08009291
 8009288:	08009305 	.word	0x08009305
 800928c:	08009319 	.word	0x08009319
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009292:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009296:	f043 0301 	orr.w	r3, r3, #1
 800929a:	b2da      	uxtb	r2, r3
 800929c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800929e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80092a2:	68ba      	ldr	r2, [r7, #8]
 80092a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092a6:	699b      	ldr	r3, [r3, #24]
 80092a8:	18d1      	adds	r1, r2, r3
 80092aa:	68bb      	ldr	r3, [r7, #8]
 80092ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80092ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80092b0:	f7ff ff5c 	bl	800916c <prvInsertTimerInActiveList>
 80092b4:	4603      	mov	r3, r0
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d069      	beq.n	800938e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80092ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092bc:	6a1b      	ldr	r3, [r3, #32]
 80092be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80092c0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80092c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80092c8:	f003 0304 	and.w	r3, r3, #4
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d05e      	beq.n	800938e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80092d0:	68ba      	ldr	r2, [r7, #8]
 80092d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092d4:	699b      	ldr	r3, [r3, #24]
 80092d6:	441a      	add	r2, r3
 80092d8:	2300      	movs	r3, #0
 80092da:	9300      	str	r3, [sp, #0]
 80092dc:	2300      	movs	r3, #0
 80092de:	2100      	movs	r1, #0
 80092e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80092e2:	f7ff fe05 	bl	8008ef0 <xTimerGenericCommand>
 80092e6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80092e8:	6a3b      	ldr	r3, [r7, #32]
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d14f      	bne.n	800938e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80092ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092f2:	f383 8811 	msr	BASEPRI, r3
 80092f6:	f3bf 8f6f 	isb	sy
 80092fa:	f3bf 8f4f 	dsb	sy
 80092fe:	61bb      	str	r3, [r7, #24]
}
 8009300:	bf00      	nop
 8009302:	e7fe      	b.n	8009302 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009306:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800930a:	f023 0301 	bic.w	r3, r3, #1
 800930e:	b2da      	uxtb	r2, r3
 8009310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009312:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009316:	e03a      	b.n	800938e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800931a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800931e:	f043 0301 	orr.w	r3, r3, #1
 8009322:	b2da      	uxtb	r2, r3
 8009324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009326:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800932a:	68ba      	ldr	r2, [r7, #8]
 800932c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800932e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009332:	699b      	ldr	r3, [r3, #24]
 8009334:	2b00      	cmp	r3, #0
 8009336:	d10a      	bne.n	800934e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8009338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800933c:	f383 8811 	msr	BASEPRI, r3
 8009340:	f3bf 8f6f 	isb	sy
 8009344:	f3bf 8f4f 	dsb	sy
 8009348:	617b      	str	r3, [r7, #20]
}
 800934a:	bf00      	nop
 800934c:	e7fe      	b.n	800934c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800934e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009350:	699a      	ldr	r2, [r3, #24]
 8009352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009354:	18d1      	adds	r1, r2, r3
 8009356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009358:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800935a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800935c:	f7ff ff06 	bl	800916c <prvInsertTimerInActiveList>
					break;
 8009360:	e015      	b.n	800938e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009364:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009368:	f003 0302 	and.w	r3, r3, #2
 800936c:	2b00      	cmp	r3, #0
 800936e:	d103      	bne.n	8009378 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8009370:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009372:	f000 fbdd 	bl	8009b30 <vPortFree>
 8009376:	e00a      	b.n	800938e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800937a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800937e:	f023 0301 	bic.w	r3, r3, #1
 8009382:	b2da      	uxtb	r2, r3
 8009384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009386:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800938a:	e000      	b.n	800938e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800938c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800938e:	4b08      	ldr	r3, [pc, #32]	; (80093b0 <prvProcessReceivedCommands+0x1c0>)
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	1d39      	adds	r1, r7, #4
 8009394:	2200      	movs	r2, #0
 8009396:	4618      	mov	r0, r3
 8009398:	f7fe fbec 	bl	8007b74 <xQueueReceive>
 800939c:	4603      	mov	r3, r0
 800939e:	2b00      	cmp	r3, #0
 80093a0:	f47f af2a 	bne.w	80091f8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80093a4:	bf00      	nop
 80093a6:	bf00      	nop
 80093a8:	3730      	adds	r7, #48	; 0x30
 80093aa:	46bd      	mov	sp, r7
 80093ac:	bd80      	pop	{r7, pc}
 80093ae:	bf00      	nop
 80093b0:	20000f04 	.word	0x20000f04

080093b4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b088      	sub	sp, #32
 80093b8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80093ba:	e048      	b.n	800944e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80093bc:	4b2d      	ldr	r3, [pc, #180]	; (8009474 <prvSwitchTimerLists+0xc0>)
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	68db      	ldr	r3, [r3, #12]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80093c6:	4b2b      	ldr	r3, [pc, #172]	; (8009474 <prvSwitchTimerLists+0xc0>)
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	68db      	ldr	r3, [r3, #12]
 80093cc:	68db      	ldr	r3, [r3, #12]
 80093ce:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	3304      	adds	r3, #4
 80093d4:	4618      	mov	r0, r3
 80093d6:	f7fe f905 	bl	80075e4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	6a1b      	ldr	r3, [r3, #32]
 80093de:	68f8      	ldr	r0, [r7, #12]
 80093e0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80093e8:	f003 0304 	and.w	r3, r3, #4
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d02e      	beq.n	800944e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	699b      	ldr	r3, [r3, #24]
 80093f4:	693a      	ldr	r2, [r7, #16]
 80093f6:	4413      	add	r3, r2
 80093f8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80093fa:	68ba      	ldr	r2, [r7, #8]
 80093fc:	693b      	ldr	r3, [r7, #16]
 80093fe:	429a      	cmp	r2, r3
 8009400:	d90e      	bls.n	8009420 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	68ba      	ldr	r2, [r7, #8]
 8009406:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	68fa      	ldr	r2, [r7, #12]
 800940c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800940e:	4b19      	ldr	r3, [pc, #100]	; (8009474 <prvSwitchTimerLists+0xc0>)
 8009410:	681a      	ldr	r2, [r3, #0]
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	3304      	adds	r3, #4
 8009416:	4619      	mov	r1, r3
 8009418:	4610      	mov	r0, r2
 800941a:	f7fe f8aa 	bl	8007572 <vListInsert>
 800941e:	e016      	b.n	800944e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009420:	2300      	movs	r3, #0
 8009422:	9300      	str	r3, [sp, #0]
 8009424:	2300      	movs	r3, #0
 8009426:	693a      	ldr	r2, [r7, #16]
 8009428:	2100      	movs	r1, #0
 800942a:	68f8      	ldr	r0, [r7, #12]
 800942c:	f7ff fd60 	bl	8008ef0 <xTimerGenericCommand>
 8009430:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	2b00      	cmp	r3, #0
 8009436:	d10a      	bne.n	800944e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8009438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800943c:	f383 8811 	msr	BASEPRI, r3
 8009440:	f3bf 8f6f 	isb	sy
 8009444:	f3bf 8f4f 	dsb	sy
 8009448:	603b      	str	r3, [r7, #0]
}
 800944a:	bf00      	nop
 800944c:	e7fe      	b.n	800944c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800944e:	4b09      	ldr	r3, [pc, #36]	; (8009474 <prvSwitchTimerLists+0xc0>)
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	2b00      	cmp	r3, #0
 8009456:	d1b1      	bne.n	80093bc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009458:	4b06      	ldr	r3, [pc, #24]	; (8009474 <prvSwitchTimerLists+0xc0>)
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800945e:	4b06      	ldr	r3, [pc, #24]	; (8009478 <prvSwitchTimerLists+0xc4>)
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	4a04      	ldr	r2, [pc, #16]	; (8009474 <prvSwitchTimerLists+0xc0>)
 8009464:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009466:	4a04      	ldr	r2, [pc, #16]	; (8009478 <prvSwitchTimerLists+0xc4>)
 8009468:	697b      	ldr	r3, [r7, #20]
 800946a:	6013      	str	r3, [r2, #0]
}
 800946c:	bf00      	nop
 800946e:	3718      	adds	r7, #24
 8009470:	46bd      	mov	sp, r7
 8009472:	bd80      	pop	{r7, pc}
 8009474:	20000efc 	.word	0x20000efc
 8009478:	20000f00 	.word	0x20000f00

0800947c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800947c:	b580      	push	{r7, lr}
 800947e:	b082      	sub	sp, #8
 8009480:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009482:	f000 f967 	bl	8009754 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009486:	4b15      	ldr	r3, [pc, #84]	; (80094dc <prvCheckForValidListAndQueue+0x60>)
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	2b00      	cmp	r3, #0
 800948c:	d120      	bne.n	80094d0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800948e:	4814      	ldr	r0, [pc, #80]	; (80094e0 <prvCheckForValidListAndQueue+0x64>)
 8009490:	f7fe f81e 	bl	80074d0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009494:	4813      	ldr	r0, [pc, #76]	; (80094e4 <prvCheckForValidListAndQueue+0x68>)
 8009496:	f7fe f81b 	bl	80074d0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800949a:	4b13      	ldr	r3, [pc, #76]	; (80094e8 <prvCheckForValidListAndQueue+0x6c>)
 800949c:	4a10      	ldr	r2, [pc, #64]	; (80094e0 <prvCheckForValidListAndQueue+0x64>)
 800949e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80094a0:	4b12      	ldr	r3, [pc, #72]	; (80094ec <prvCheckForValidListAndQueue+0x70>)
 80094a2:	4a10      	ldr	r2, [pc, #64]	; (80094e4 <prvCheckForValidListAndQueue+0x68>)
 80094a4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80094a6:	2300      	movs	r3, #0
 80094a8:	9300      	str	r3, [sp, #0]
 80094aa:	4b11      	ldr	r3, [pc, #68]	; (80094f0 <prvCheckForValidListAndQueue+0x74>)
 80094ac:	4a11      	ldr	r2, [pc, #68]	; (80094f4 <prvCheckForValidListAndQueue+0x78>)
 80094ae:	2110      	movs	r1, #16
 80094b0:	200a      	movs	r0, #10
 80094b2:	f7fe f929 	bl	8007708 <xQueueGenericCreateStatic>
 80094b6:	4603      	mov	r3, r0
 80094b8:	4a08      	ldr	r2, [pc, #32]	; (80094dc <prvCheckForValidListAndQueue+0x60>)
 80094ba:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80094bc:	4b07      	ldr	r3, [pc, #28]	; (80094dc <prvCheckForValidListAndQueue+0x60>)
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d005      	beq.n	80094d0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80094c4:	4b05      	ldr	r3, [pc, #20]	; (80094dc <prvCheckForValidListAndQueue+0x60>)
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	490b      	ldr	r1, [pc, #44]	; (80094f8 <prvCheckForValidListAndQueue+0x7c>)
 80094ca:	4618      	mov	r0, r3
 80094cc:	f7fe fd42 	bl	8007f54 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80094d0:	f000 f970 	bl	80097b4 <vPortExitCritical>
}
 80094d4:	bf00      	nop
 80094d6:	46bd      	mov	sp, r7
 80094d8:	bd80      	pop	{r7, pc}
 80094da:	bf00      	nop
 80094dc:	20000f04 	.word	0x20000f04
 80094e0:	20000ed4 	.word	0x20000ed4
 80094e4:	20000ee8 	.word	0x20000ee8
 80094e8:	20000efc 	.word	0x20000efc
 80094ec:	20000f00 	.word	0x20000f00
 80094f0:	20000fb0 	.word	0x20000fb0
 80094f4:	20000f10 	.word	0x20000f10
 80094f8:	0800aaac 	.word	0x0800aaac

080094fc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80094fc:	b480      	push	{r7}
 80094fe:	b085      	sub	sp, #20
 8009500:	af00      	add	r7, sp, #0
 8009502:	60f8      	str	r0, [r7, #12]
 8009504:	60b9      	str	r1, [r7, #8]
 8009506:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	3b04      	subs	r3, #4
 800950c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009514:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	3b04      	subs	r3, #4
 800951a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800951c:	68bb      	ldr	r3, [r7, #8]
 800951e:	f023 0201 	bic.w	r2, r3, #1
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	3b04      	subs	r3, #4
 800952a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800952c:	4a0c      	ldr	r2, [pc, #48]	; (8009560 <pxPortInitialiseStack+0x64>)
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	3b14      	subs	r3, #20
 8009536:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009538:	687a      	ldr	r2, [r7, #4]
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	3b04      	subs	r3, #4
 8009542:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	f06f 0202 	mvn.w	r2, #2
 800954a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	3b20      	subs	r3, #32
 8009550:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009552:	68fb      	ldr	r3, [r7, #12]
}
 8009554:	4618      	mov	r0, r3
 8009556:	3714      	adds	r7, #20
 8009558:	46bd      	mov	sp, r7
 800955a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800955e:	4770      	bx	lr
 8009560:	08009565 	.word	0x08009565

08009564 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009564:	b480      	push	{r7}
 8009566:	b085      	sub	sp, #20
 8009568:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800956a:	2300      	movs	r3, #0
 800956c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800956e:	4b12      	ldr	r3, [pc, #72]	; (80095b8 <prvTaskExitError+0x54>)
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009576:	d00a      	beq.n	800958e <prvTaskExitError+0x2a>
	__asm volatile
 8009578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800957c:	f383 8811 	msr	BASEPRI, r3
 8009580:	f3bf 8f6f 	isb	sy
 8009584:	f3bf 8f4f 	dsb	sy
 8009588:	60fb      	str	r3, [r7, #12]
}
 800958a:	bf00      	nop
 800958c:	e7fe      	b.n	800958c <prvTaskExitError+0x28>
	__asm volatile
 800958e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009592:	f383 8811 	msr	BASEPRI, r3
 8009596:	f3bf 8f6f 	isb	sy
 800959a:	f3bf 8f4f 	dsb	sy
 800959e:	60bb      	str	r3, [r7, #8]
}
 80095a0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80095a2:	bf00      	nop
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d0fc      	beq.n	80095a4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80095aa:	bf00      	nop
 80095ac:	bf00      	nop
 80095ae:	3714      	adds	r7, #20
 80095b0:	46bd      	mov	sp, r7
 80095b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b6:	4770      	bx	lr
 80095b8:	20000098 	.word	0x20000098
 80095bc:	00000000 	.word	0x00000000

080095c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80095c0:	4b07      	ldr	r3, [pc, #28]	; (80095e0 <pxCurrentTCBConst2>)
 80095c2:	6819      	ldr	r1, [r3, #0]
 80095c4:	6808      	ldr	r0, [r1, #0]
 80095c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095ca:	f380 8809 	msr	PSP, r0
 80095ce:	f3bf 8f6f 	isb	sy
 80095d2:	f04f 0000 	mov.w	r0, #0
 80095d6:	f380 8811 	msr	BASEPRI, r0
 80095da:	4770      	bx	lr
 80095dc:	f3af 8000 	nop.w

080095e0 <pxCurrentTCBConst2>:
 80095e0:	200009d4 	.word	0x200009d4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80095e4:	bf00      	nop
 80095e6:	bf00      	nop

080095e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80095e8:	4808      	ldr	r0, [pc, #32]	; (800960c <prvPortStartFirstTask+0x24>)
 80095ea:	6800      	ldr	r0, [r0, #0]
 80095ec:	6800      	ldr	r0, [r0, #0]
 80095ee:	f380 8808 	msr	MSP, r0
 80095f2:	f04f 0000 	mov.w	r0, #0
 80095f6:	f380 8814 	msr	CONTROL, r0
 80095fa:	b662      	cpsie	i
 80095fc:	b661      	cpsie	f
 80095fe:	f3bf 8f4f 	dsb	sy
 8009602:	f3bf 8f6f 	isb	sy
 8009606:	df00      	svc	0
 8009608:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800960a:	bf00      	nop
 800960c:	e000ed08 	.word	0xe000ed08

08009610 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009610:	b580      	push	{r7, lr}
 8009612:	b086      	sub	sp, #24
 8009614:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009616:	4b46      	ldr	r3, [pc, #280]	; (8009730 <xPortStartScheduler+0x120>)
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	4a46      	ldr	r2, [pc, #280]	; (8009734 <xPortStartScheduler+0x124>)
 800961c:	4293      	cmp	r3, r2
 800961e:	d10a      	bne.n	8009636 <xPortStartScheduler+0x26>
	__asm volatile
 8009620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009624:	f383 8811 	msr	BASEPRI, r3
 8009628:	f3bf 8f6f 	isb	sy
 800962c:	f3bf 8f4f 	dsb	sy
 8009630:	613b      	str	r3, [r7, #16]
}
 8009632:	bf00      	nop
 8009634:	e7fe      	b.n	8009634 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009636:	4b3e      	ldr	r3, [pc, #248]	; (8009730 <xPortStartScheduler+0x120>)
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	4a3f      	ldr	r2, [pc, #252]	; (8009738 <xPortStartScheduler+0x128>)
 800963c:	4293      	cmp	r3, r2
 800963e:	d10a      	bne.n	8009656 <xPortStartScheduler+0x46>
	__asm volatile
 8009640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009644:	f383 8811 	msr	BASEPRI, r3
 8009648:	f3bf 8f6f 	isb	sy
 800964c:	f3bf 8f4f 	dsb	sy
 8009650:	60fb      	str	r3, [r7, #12]
}
 8009652:	bf00      	nop
 8009654:	e7fe      	b.n	8009654 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009656:	4b39      	ldr	r3, [pc, #228]	; (800973c <xPortStartScheduler+0x12c>)
 8009658:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800965a:	697b      	ldr	r3, [r7, #20]
 800965c:	781b      	ldrb	r3, [r3, #0]
 800965e:	b2db      	uxtb	r3, r3
 8009660:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009662:	697b      	ldr	r3, [r7, #20]
 8009664:	22ff      	movs	r2, #255	; 0xff
 8009666:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009668:	697b      	ldr	r3, [r7, #20]
 800966a:	781b      	ldrb	r3, [r3, #0]
 800966c:	b2db      	uxtb	r3, r3
 800966e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009670:	78fb      	ldrb	r3, [r7, #3]
 8009672:	b2db      	uxtb	r3, r3
 8009674:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009678:	b2da      	uxtb	r2, r3
 800967a:	4b31      	ldr	r3, [pc, #196]	; (8009740 <xPortStartScheduler+0x130>)
 800967c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800967e:	4b31      	ldr	r3, [pc, #196]	; (8009744 <xPortStartScheduler+0x134>)
 8009680:	2207      	movs	r2, #7
 8009682:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009684:	e009      	b.n	800969a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009686:	4b2f      	ldr	r3, [pc, #188]	; (8009744 <xPortStartScheduler+0x134>)
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	3b01      	subs	r3, #1
 800968c:	4a2d      	ldr	r2, [pc, #180]	; (8009744 <xPortStartScheduler+0x134>)
 800968e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009690:	78fb      	ldrb	r3, [r7, #3]
 8009692:	b2db      	uxtb	r3, r3
 8009694:	005b      	lsls	r3, r3, #1
 8009696:	b2db      	uxtb	r3, r3
 8009698:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800969a:	78fb      	ldrb	r3, [r7, #3]
 800969c:	b2db      	uxtb	r3, r3
 800969e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80096a2:	2b80      	cmp	r3, #128	; 0x80
 80096a4:	d0ef      	beq.n	8009686 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80096a6:	4b27      	ldr	r3, [pc, #156]	; (8009744 <xPortStartScheduler+0x134>)
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	f1c3 0307 	rsb	r3, r3, #7
 80096ae:	2b04      	cmp	r3, #4
 80096b0:	d00a      	beq.n	80096c8 <xPortStartScheduler+0xb8>
	__asm volatile
 80096b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096b6:	f383 8811 	msr	BASEPRI, r3
 80096ba:	f3bf 8f6f 	isb	sy
 80096be:	f3bf 8f4f 	dsb	sy
 80096c2:	60bb      	str	r3, [r7, #8]
}
 80096c4:	bf00      	nop
 80096c6:	e7fe      	b.n	80096c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80096c8:	4b1e      	ldr	r3, [pc, #120]	; (8009744 <xPortStartScheduler+0x134>)
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	021b      	lsls	r3, r3, #8
 80096ce:	4a1d      	ldr	r2, [pc, #116]	; (8009744 <xPortStartScheduler+0x134>)
 80096d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80096d2:	4b1c      	ldr	r3, [pc, #112]	; (8009744 <xPortStartScheduler+0x134>)
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80096da:	4a1a      	ldr	r2, [pc, #104]	; (8009744 <xPortStartScheduler+0x134>)
 80096dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	b2da      	uxtb	r2, r3
 80096e2:	697b      	ldr	r3, [r7, #20]
 80096e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80096e6:	4b18      	ldr	r3, [pc, #96]	; (8009748 <xPortStartScheduler+0x138>)
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	4a17      	ldr	r2, [pc, #92]	; (8009748 <xPortStartScheduler+0x138>)
 80096ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80096f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80096f2:	4b15      	ldr	r3, [pc, #84]	; (8009748 <xPortStartScheduler+0x138>)
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	4a14      	ldr	r2, [pc, #80]	; (8009748 <xPortStartScheduler+0x138>)
 80096f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80096fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80096fe:	f000 f8dd 	bl	80098bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009702:	4b12      	ldr	r3, [pc, #72]	; (800974c <xPortStartScheduler+0x13c>)
 8009704:	2200      	movs	r2, #0
 8009706:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009708:	f000 f8fc 	bl	8009904 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800970c:	4b10      	ldr	r3, [pc, #64]	; (8009750 <xPortStartScheduler+0x140>)
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	4a0f      	ldr	r2, [pc, #60]	; (8009750 <xPortStartScheduler+0x140>)
 8009712:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009716:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009718:	f7ff ff66 	bl	80095e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800971c:	f7ff f84a 	bl	80087b4 <vTaskSwitchContext>
	prvTaskExitError();
 8009720:	f7ff ff20 	bl	8009564 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009724:	2300      	movs	r3, #0
}
 8009726:	4618      	mov	r0, r3
 8009728:	3718      	adds	r7, #24
 800972a:	46bd      	mov	sp, r7
 800972c:	bd80      	pop	{r7, pc}
 800972e:	bf00      	nop
 8009730:	e000ed00 	.word	0xe000ed00
 8009734:	410fc271 	.word	0x410fc271
 8009738:	410fc270 	.word	0x410fc270
 800973c:	e000e400 	.word	0xe000e400
 8009740:	20001000 	.word	0x20001000
 8009744:	20001004 	.word	0x20001004
 8009748:	e000ed20 	.word	0xe000ed20
 800974c:	20000098 	.word	0x20000098
 8009750:	e000ef34 	.word	0xe000ef34

08009754 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009754:	b480      	push	{r7}
 8009756:	b083      	sub	sp, #12
 8009758:	af00      	add	r7, sp, #0
	__asm volatile
 800975a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800975e:	f383 8811 	msr	BASEPRI, r3
 8009762:	f3bf 8f6f 	isb	sy
 8009766:	f3bf 8f4f 	dsb	sy
 800976a:	607b      	str	r3, [r7, #4]
}
 800976c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800976e:	4b0f      	ldr	r3, [pc, #60]	; (80097ac <vPortEnterCritical+0x58>)
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	3301      	adds	r3, #1
 8009774:	4a0d      	ldr	r2, [pc, #52]	; (80097ac <vPortEnterCritical+0x58>)
 8009776:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009778:	4b0c      	ldr	r3, [pc, #48]	; (80097ac <vPortEnterCritical+0x58>)
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	2b01      	cmp	r3, #1
 800977e:	d10f      	bne.n	80097a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009780:	4b0b      	ldr	r3, [pc, #44]	; (80097b0 <vPortEnterCritical+0x5c>)
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	b2db      	uxtb	r3, r3
 8009786:	2b00      	cmp	r3, #0
 8009788:	d00a      	beq.n	80097a0 <vPortEnterCritical+0x4c>
	__asm volatile
 800978a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800978e:	f383 8811 	msr	BASEPRI, r3
 8009792:	f3bf 8f6f 	isb	sy
 8009796:	f3bf 8f4f 	dsb	sy
 800979a:	603b      	str	r3, [r7, #0]
}
 800979c:	bf00      	nop
 800979e:	e7fe      	b.n	800979e <vPortEnterCritical+0x4a>
	}
}
 80097a0:	bf00      	nop
 80097a2:	370c      	adds	r7, #12
 80097a4:	46bd      	mov	sp, r7
 80097a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097aa:	4770      	bx	lr
 80097ac:	20000098 	.word	0x20000098
 80097b0:	e000ed04 	.word	0xe000ed04

080097b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80097b4:	b480      	push	{r7}
 80097b6:	b083      	sub	sp, #12
 80097b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80097ba:	4b12      	ldr	r3, [pc, #72]	; (8009804 <vPortExitCritical+0x50>)
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d10a      	bne.n	80097d8 <vPortExitCritical+0x24>
	__asm volatile
 80097c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097c6:	f383 8811 	msr	BASEPRI, r3
 80097ca:	f3bf 8f6f 	isb	sy
 80097ce:	f3bf 8f4f 	dsb	sy
 80097d2:	607b      	str	r3, [r7, #4]
}
 80097d4:	bf00      	nop
 80097d6:	e7fe      	b.n	80097d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80097d8:	4b0a      	ldr	r3, [pc, #40]	; (8009804 <vPortExitCritical+0x50>)
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	3b01      	subs	r3, #1
 80097de:	4a09      	ldr	r2, [pc, #36]	; (8009804 <vPortExitCritical+0x50>)
 80097e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80097e2:	4b08      	ldr	r3, [pc, #32]	; (8009804 <vPortExitCritical+0x50>)
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d105      	bne.n	80097f6 <vPortExitCritical+0x42>
 80097ea:	2300      	movs	r3, #0
 80097ec:	603b      	str	r3, [r7, #0]
	__asm volatile
 80097ee:	683b      	ldr	r3, [r7, #0]
 80097f0:	f383 8811 	msr	BASEPRI, r3
}
 80097f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80097f6:	bf00      	nop
 80097f8:	370c      	adds	r7, #12
 80097fa:	46bd      	mov	sp, r7
 80097fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009800:	4770      	bx	lr
 8009802:	bf00      	nop
 8009804:	20000098 	.word	0x20000098
	...

08009810 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009810:	f3ef 8009 	mrs	r0, PSP
 8009814:	f3bf 8f6f 	isb	sy
 8009818:	4b15      	ldr	r3, [pc, #84]	; (8009870 <pxCurrentTCBConst>)
 800981a:	681a      	ldr	r2, [r3, #0]
 800981c:	f01e 0f10 	tst.w	lr, #16
 8009820:	bf08      	it	eq
 8009822:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009826:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800982a:	6010      	str	r0, [r2, #0]
 800982c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009830:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009834:	f380 8811 	msr	BASEPRI, r0
 8009838:	f3bf 8f4f 	dsb	sy
 800983c:	f3bf 8f6f 	isb	sy
 8009840:	f7fe ffb8 	bl	80087b4 <vTaskSwitchContext>
 8009844:	f04f 0000 	mov.w	r0, #0
 8009848:	f380 8811 	msr	BASEPRI, r0
 800984c:	bc09      	pop	{r0, r3}
 800984e:	6819      	ldr	r1, [r3, #0]
 8009850:	6808      	ldr	r0, [r1, #0]
 8009852:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009856:	f01e 0f10 	tst.w	lr, #16
 800985a:	bf08      	it	eq
 800985c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009860:	f380 8809 	msr	PSP, r0
 8009864:	f3bf 8f6f 	isb	sy
 8009868:	4770      	bx	lr
 800986a:	bf00      	nop
 800986c:	f3af 8000 	nop.w

08009870 <pxCurrentTCBConst>:
 8009870:	200009d4 	.word	0x200009d4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009874:	bf00      	nop
 8009876:	bf00      	nop

08009878 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009878:	b580      	push	{r7, lr}
 800987a:	b082      	sub	sp, #8
 800987c:	af00      	add	r7, sp, #0
	__asm volatile
 800987e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009882:	f383 8811 	msr	BASEPRI, r3
 8009886:	f3bf 8f6f 	isb	sy
 800988a:	f3bf 8f4f 	dsb	sy
 800988e:	607b      	str	r3, [r7, #4]
}
 8009890:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009892:	f7fe fed5 	bl	8008640 <xTaskIncrementTick>
 8009896:	4603      	mov	r3, r0
 8009898:	2b00      	cmp	r3, #0
 800989a:	d003      	beq.n	80098a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800989c:	4b06      	ldr	r3, [pc, #24]	; (80098b8 <xPortSysTickHandler+0x40>)
 800989e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80098a2:	601a      	str	r2, [r3, #0]
 80098a4:	2300      	movs	r3, #0
 80098a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80098a8:	683b      	ldr	r3, [r7, #0]
 80098aa:	f383 8811 	msr	BASEPRI, r3
}
 80098ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80098b0:	bf00      	nop
 80098b2:	3708      	adds	r7, #8
 80098b4:	46bd      	mov	sp, r7
 80098b6:	bd80      	pop	{r7, pc}
 80098b8:	e000ed04 	.word	0xe000ed04

080098bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80098bc:	b480      	push	{r7}
 80098be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80098c0:	4b0b      	ldr	r3, [pc, #44]	; (80098f0 <vPortSetupTimerInterrupt+0x34>)
 80098c2:	2200      	movs	r2, #0
 80098c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80098c6:	4b0b      	ldr	r3, [pc, #44]	; (80098f4 <vPortSetupTimerInterrupt+0x38>)
 80098c8:	2200      	movs	r2, #0
 80098ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80098cc:	4b0a      	ldr	r3, [pc, #40]	; (80098f8 <vPortSetupTimerInterrupt+0x3c>)
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	4a0a      	ldr	r2, [pc, #40]	; (80098fc <vPortSetupTimerInterrupt+0x40>)
 80098d2:	fba2 2303 	umull	r2, r3, r2, r3
 80098d6:	099b      	lsrs	r3, r3, #6
 80098d8:	4a09      	ldr	r2, [pc, #36]	; (8009900 <vPortSetupTimerInterrupt+0x44>)
 80098da:	3b01      	subs	r3, #1
 80098dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80098de:	4b04      	ldr	r3, [pc, #16]	; (80098f0 <vPortSetupTimerInterrupt+0x34>)
 80098e0:	2207      	movs	r2, #7
 80098e2:	601a      	str	r2, [r3, #0]
}
 80098e4:	bf00      	nop
 80098e6:	46bd      	mov	sp, r7
 80098e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ec:	4770      	bx	lr
 80098ee:	bf00      	nop
 80098f0:	e000e010 	.word	0xe000e010
 80098f4:	e000e018 	.word	0xe000e018
 80098f8:	20000000 	.word	0x20000000
 80098fc:	10624dd3 	.word	0x10624dd3
 8009900:	e000e014 	.word	0xe000e014

08009904 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009904:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009914 <vPortEnableVFP+0x10>
 8009908:	6801      	ldr	r1, [r0, #0]
 800990a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800990e:	6001      	str	r1, [r0, #0]
 8009910:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009912:	bf00      	nop
 8009914:	e000ed88 	.word	0xe000ed88

08009918 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009918:	b480      	push	{r7}
 800991a:	b085      	sub	sp, #20
 800991c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800991e:	f3ef 8305 	mrs	r3, IPSR
 8009922:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	2b0f      	cmp	r3, #15
 8009928:	d914      	bls.n	8009954 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800992a:	4a17      	ldr	r2, [pc, #92]	; (8009988 <vPortValidateInterruptPriority+0x70>)
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	4413      	add	r3, r2
 8009930:	781b      	ldrb	r3, [r3, #0]
 8009932:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009934:	4b15      	ldr	r3, [pc, #84]	; (800998c <vPortValidateInterruptPriority+0x74>)
 8009936:	781b      	ldrb	r3, [r3, #0]
 8009938:	7afa      	ldrb	r2, [r7, #11]
 800993a:	429a      	cmp	r2, r3
 800993c:	d20a      	bcs.n	8009954 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800993e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009942:	f383 8811 	msr	BASEPRI, r3
 8009946:	f3bf 8f6f 	isb	sy
 800994a:	f3bf 8f4f 	dsb	sy
 800994e:	607b      	str	r3, [r7, #4]
}
 8009950:	bf00      	nop
 8009952:	e7fe      	b.n	8009952 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009954:	4b0e      	ldr	r3, [pc, #56]	; (8009990 <vPortValidateInterruptPriority+0x78>)
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800995c:	4b0d      	ldr	r3, [pc, #52]	; (8009994 <vPortValidateInterruptPriority+0x7c>)
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	429a      	cmp	r2, r3
 8009962:	d90a      	bls.n	800997a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009964:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009968:	f383 8811 	msr	BASEPRI, r3
 800996c:	f3bf 8f6f 	isb	sy
 8009970:	f3bf 8f4f 	dsb	sy
 8009974:	603b      	str	r3, [r7, #0]
}
 8009976:	bf00      	nop
 8009978:	e7fe      	b.n	8009978 <vPortValidateInterruptPriority+0x60>
	}
 800997a:	bf00      	nop
 800997c:	3714      	adds	r7, #20
 800997e:	46bd      	mov	sp, r7
 8009980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009984:	4770      	bx	lr
 8009986:	bf00      	nop
 8009988:	e000e3f0 	.word	0xe000e3f0
 800998c:	20001000 	.word	0x20001000
 8009990:	e000ed0c 	.word	0xe000ed0c
 8009994:	20001004 	.word	0x20001004

08009998 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009998:	b580      	push	{r7, lr}
 800999a:	b08a      	sub	sp, #40	; 0x28
 800999c:	af00      	add	r7, sp, #0
 800999e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80099a0:	2300      	movs	r3, #0
 80099a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80099a4:	f7fe fd90 	bl	80084c8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80099a8:	4b5b      	ldr	r3, [pc, #364]	; (8009b18 <pvPortMalloc+0x180>)
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d101      	bne.n	80099b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80099b0:	f000 f920 	bl	8009bf4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80099b4:	4b59      	ldr	r3, [pc, #356]	; (8009b1c <pvPortMalloc+0x184>)
 80099b6:	681a      	ldr	r2, [r3, #0]
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	4013      	ands	r3, r2
 80099bc:	2b00      	cmp	r3, #0
 80099be:	f040 8093 	bne.w	8009ae8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d01d      	beq.n	8009a04 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80099c8:	2208      	movs	r2, #8
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	4413      	add	r3, r2
 80099ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	f003 0307 	and.w	r3, r3, #7
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d014      	beq.n	8009a04 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	f023 0307 	bic.w	r3, r3, #7
 80099e0:	3308      	adds	r3, #8
 80099e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	f003 0307 	and.w	r3, r3, #7
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d00a      	beq.n	8009a04 <pvPortMalloc+0x6c>
	__asm volatile
 80099ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099f2:	f383 8811 	msr	BASEPRI, r3
 80099f6:	f3bf 8f6f 	isb	sy
 80099fa:	f3bf 8f4f 	dsb	sy
 80099fe:	617b      	str	r3, [r7, #20]
}
 8009a00:	bf00      	nop
 8009a02:	e7fe      	b.n	8009a02 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d06e      	beq.n	8009ae8 <pvPortMalloc+0x150>
 8009a0a:	4b45      	ldr	r3, [pc, #276]	; (8009b20 <pvPortMalloc+0x188>)
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	687a      	ldr	r2, [r7, #4]
 8009a10:	429a      	cmp	r2, r3
 8009a12:	d869      	bhi.n	8009ae8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009a14:	4b43      	ldr	r3, [pc, #268]	; (8009b24 <pvPortMalloc+0x18c>)
 8009a16:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009a18:	4b42      	ldr	r3, [pc, #264]	; (8009b24 <pvPortMalloc+0x18c>)
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009a1e:	e004      	b.n	8009a2a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a22:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a2c:	685b      	ldr	r3, [r3, #4]
 8009a2e:	687a      	ldr	r2, [r7, #4]
 8009a30:	429a      	cmp	r2, r3
 8009a32:	d903      	bls.n	8009a3c <pvPortMalloc+0xa4>
 8009a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d1f1      	bne.n	8009a20 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009a3c:	4b36      	ldr	r3, [pc, #216]	; (8009b18 <pvPortMalloc+0x180>)
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a42:	429a      	cmp	r2, r3
 8009a44:	d050      	beq.n	8009ae8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009a46:	6a3b      	ldr	r3, [r7, #32]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	2208      	movs	r2, #8
 8009a4c:	4413      	add	r3, r2
 8009a4e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a52:	681a      	ldr	r2, [r3, #0]
 8009a54:	6a3b      	ldr	r3, [r7, #32]
 8009a56:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a5a:	685a      	ldr	r2, [r3, #4]
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	1ad2      	subs	r2, r2, r3
 8009a60:	2308      	movs	r3, #8
 8009a62:	005b      	lsls	r3, r3, #1
 8009a64:	429a      	cmp	r2, r3
 8009a66:	d91f      	bls.n	8009aa8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009a68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	4413      	add	r3, r2
 8009a6e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009a70:	69bb      	ldr	r3, [r7, #24]
 8009a72:	f003 0307 	and.w	r3, r3, #7
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d00a      	beq.n	8009a90 <pvPortMalloc+0xf8>
	__asm volatile
 8009a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a7e:	f383 8811 	msr	BASEPRI, r3
 8009a82:	f3bf 8f6f 	isb	sy
 8009a86:	f3bf 8f4f 	dsb	sy
 8009a8a:	613b      	str	r3, [r7, #16]
}
 8009a8c:	bf00      	nop
 8009a8e:	e7fe      	b.n	8009a8e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a92:	685a      	ldr	r2, [r3, #4]
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	1ad2      	subs	r2, r2, r3
 8009a98:	69bb      	ldr	r3, [r7, #24]
 8009a9a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a9e:	687a      	ldr	r2, [r7, #4]
 8009aa0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009aa2:	69b8      	ldr	r0, [r7, #24]
 8009aa4:	f000 f908 	bl	8009cb8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009aa8:	4b1d      	ldr	r3, [pc, #116]	; (8009b20 <pvPortMalloc+0x188>)
 8009aaa:	681a      	ldr	r2, [r3, #0]
 8009aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aae:	685b      	ldr	r3, [r3, #4]
 8009ab0:	1ad3      	subs	r3, r2, r3
 8009ab2:	4a1b      	ldr	r2, [pc, #108]	; (8009b20 <pvPortMalloc+0x188>)
 8009ab4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009ab6:	4b1a      	ldr	r3, [pc, #104]	; (8009b20 <pvPortMalloc+0x188>)
 8009ab8:	681a      	ldr	r2, [r3, #0]
 8009aba:	4b1b      	ldr	r3, [pc, #108]	; (8009b28 <pvPortMalloc+0x190>)
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	429a      	cmp	r2, r3
 8009ac0:	d203      	bcs.n	8009aca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009ac2:	4b17      	ldr	r3, [pc, #92]	; (8009b20 <pvPortMalloc+0x188>)
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	4a18      	ldr	r2, [pc, #96]	; (8009b28 <pvPortMalloc+0x190>)
 8009ac8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009acc:	685a      	ldr	r2, [r3, #4]
 8009ace:	4b13      	ldr	r3, [pc, #76]	; (8009b1c <pvPortMalloc+0x184>)
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	431a      	orrs	r2, r3
 8009ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ad6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ada:	2200      	movs	r2, #0
 8009adc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009ade:	4b13      	ldr	r3, [pc, #76]	; (8009b2c <pvPortMalloc+0x194>)
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	3301      	adds	r3, #1
 8009ae4:	4a11      	ldr	r2, [pc, #68]	; (8009b2c <pvPortMalloc+0x194>)
 8009ae6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009ae8:	f7fe fcfc 	bl	80084e4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009aec:	69fb      	ldr	r3, [r7, #28]
 8009aee:	f003 0307 	and.w	r3, r3, #7
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d00a      	beq.n	8009b0c <pvPortMalloc+0x174>
	__asm volatile
 8009af6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009afa:	f383 8811 	msr	BASEPRI, r3
 8009afe:	f3bf 8f6f 	isb	sy
 8009b02:	f3bf 8f4f 	dsb	sy
 8009b06:	60fb      	str	r3, [r7, #12]
}
 8009b08:	bf00      	nop
 8009b0a:	e7fe      	b.n	8009b0a <pvPortMalloc+0x172>
	return pvReturn;
 8009b0c:	69fb      	ldr	r3, [r7, #28]
}
 8009b0e:	4618      	mov	r0, r3
 8009b10:	3728      	adds	r7, #40	; 0x28
 8009b12:	46bd      	mov	sp, r7
 8009b14:	bd80      	pop	{r7, pc}
 8009b16:	bf00      	nop
 8009b18:	20004c10 	.word	0x20004c10
 8009b1c:	20004c24 	.word	0x20004c24
 8009b20:	20004c14 	.word	0x20004c14
 8009b24:	20004c08 	.word	0x20004c08
 8009b28:	20004c18 	.word	0x20004c18
 8009b2c:	20004c1c 	.word	0x20004c1c

08009b30 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009b30:	b580      	push	{r7, lr}
 8009b32:	b086      	sub	sp, #24
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d04d      	beq.n	8009bde <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009b42:	2308      	movs	r3, #8
 8009b44:	425b      	negs	r3, r3
 8009b46:	697a      	ldr	r2, [r7, #20]
 8009b48:	4413      	add	r3, r2
 8009b4a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009b4c:	697b      	ldr	r3, [r7, #20]
 8009b4e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009b50:	693b      	ldr	r3, [r7, #16]
 8009b52:	685a      	ldr	r2, [r3, #4]
 8009b54:	4b24      	ldr	r3, [pc, #144]	; (8009be8 <vPortFree+0xb8>)
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	4013      	ands	r3, r2
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d10a      	bne.n	8009b74 <vPortFree+0x44>
	__asm volatile
 8009b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b62:	f383 8811 	msr	BASEPRI, r3
 8009b66:	f3bf 8f6f 	isb	sy
 8009b6a:	f3bf 8f4f 	dsb	sy
 8009b6e:	60fb      	str	r3, [r7, #12]
}
 8009b70:	bf00      	nop
 8009b72:	e7fe      	b.n	8009b72 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009b74:	693b      	ldr	r3, [r7, #16]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d00a      	beq.n	8009b92 <vPortFree+0x62>
	__asm volatile
 8009b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b80:	f383 8811 	msr	BASEPRI, r3
 8009b84:	f3bf 8f6f 	isb	sy
 8009b88:	f3bf 8f4f 	dsb	sy
 8009b8c:	60bb      	str	r3, [r7, #8]
}
 8009b8e:	bf00      	nop
 8009b90:	e7fe      	b.n	8009b90 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009b92:	693b      	ldr	r3, [r7, #16]
 8009b94:	685a      	ldr	r2, [r3, #4]
 8009b96:	4b14      	ldr	r3, [pc, #80]	; (8009be8 <vPortFree+0xb8>)
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	4013      	ands	r3, r2
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d01e      	beq.n	8009bde <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009ba0:	693b      	ldr	r3, [r7, #16]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d11a      	bne.n	8009bde <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009ba8:	693b      	ldr	r3, [r7, #16]
 8009baa:	685a      	ldr	r2, [r3, #4]
 8009bac:	4b0e      	ldr	r3, [pc, #56]	; (8009be8 <vPortFree+0xb8>)
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	43db      	mvns	r3, r3
 8009bb2:	401a      	ands	r2, r3
 8009bb4:	693b      	ldr	r3, [r7, #16]
 8009bb6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009bb8:	f7fe fc86 	bl	80084c8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009bbc:	693b      	ldr	r3, [r7, #16]
 8009bbe:	685a      	ldr	r2, [r3, #4]
 8009bc0:	4b0a      	ldr	r3, [pc, #40]	; (8009bec <vPortFree+0xbc>)
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	4413      	add	r3, r2
 8009bc6:	4a09      	ldr	r2, [pc, #36]	; (8009bec <vPortFree+0xbc>)
 8009bc8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009bca:	6938      	ldr	r0, [r7, #16]
 8009bcc:	f000 f874 	bl	8009cb8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009bd0:	4b07      	ldr	r3, [pc, #28]	; (8009bf0 <vPortFree+0xc0>)
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	3301      	adds	r3, #1
 8009bd6:	4a06      	ldr	r2, [pc, #24]	; (8009bf0 <vPortFree+0xc0>)
 8009bd8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009bda:	f7fe fc83 	bl	80084e4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009bde:	bf00      	nop
 8009be0:	3718      	adds	r7, #24
 8009be2:	46bd      	mov	sp, r7
 8009be4:	bd80      	pop	{r7, pc}
 8009be6:	bf00      	nop
 8009be8:	20004c24 	.word	0x20004c24
 8009bec:	20004c14 	.word	0x20004c14
 8009bf0:	20004c20 	.word	0x20004c20

08009bf4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009bf4:	b480      	push	{r7}
 8009bf6:	b085      	sub	sp, #20
 8009bf8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009bfa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8009bfe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009c00:	4b27      	ldr	r3, [pc, #156]	; (8009ca0 <prvHeapInit+0xac>)
 8009c02:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	f003 0307 	and.w	r3, r3, #7
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d00c      	beq.n	8009c28 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	3307      	adds	r3, #7
 8009c12:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	f023 0307 	bic.w	r3, r3, #7
 8009c1a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009c1c:	68ba      	ldr	r2, [r7, #8]
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	1ad3      	subs	r3, r2, r3
 8009c22:	4a1f      	ldr	r2, [pc, #124]	; (8009ca0 <prvHeapInit+0xac>)
 8009c24:	4413      	add	r3, r2
 8009c26:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009c2c:	4a1d      	ldr	r2, [pc, #116]	; (8009ca4 <prvHeapInit+0xb0>)
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009c32:	4b1c      	ldr	r3, [pc, #112]	; (8009ca4 <prvHeapInit+0xb0>)
 8009c34:	2200      	movs	r2, #0
 8009c36:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	68ba      	ldr	r2, [r7, #8]
 8009c3c:	4413      	add	r3, r2
 8009c3e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009c40:	2208      	movs	r2, #8
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	1a9b      	subs	r3, r3, r2
 8009c46:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	f023 0307 	bic.w	r3, r3, #7
 8009c4e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	4a15      	ldr	r2, [pc, #84]	; (8009ca8 <prvHeapInit+0xb4>)
 8009c54:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009c56:	4b14      	ldr	r3, [pc, #80]	; (8009ca8 <prvHeapInit+0xb4>)
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	2200      	movs	r2, #0
 8009c5c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009c5e:	4b12      	ldr	r3, [pc, #72]	; (8009ca8 <prvHeapInit+0xb4>)
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	2200      	movs	r2, #0
 8009c64:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009c6a:	683b      	ldr	r3, [r7, #0]
 8009c6c:	68fa      	ldr	r2, [r7, #12]
 8009c6e:	1ad2      	subs	r2, r2, r3
 8009c70:	683b      	ldr	r3, [r7, #0]
 8009c72:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009c74:	4b0c      	ldr	r3, [pc, #48]	; (8009ca8 <prvHeapInit+0xb4>)
 8009c76:	681a      	ldr	r2, [r3, #0]
 8009c78:	683b      	ldr	r3, [r7, #0]
 8009c7a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009c7c:	683b      	ldr	r3, [r7, #0]
 8009c7e:	685b      	ldr	r3, [r3, #4]
 8009c80:	4a0a      	ldr	r2, [pc, #40]	; (8009cac <prvHeapInit+0xb8>)
 8009c82:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009c84:	683b      	ldr	r3, [r7, #0]
 8009c86:	685b      	ldr	r3, [r3, #4]
 8009c88:	4a09      	ldr	r2, [pc, #36]	; (8009cb0 <prvHeapInit+0xbc>)
 8009c8a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009c8c:	4b09      	ldr	r3, [pc, #36]	; (8009cb4 <prvHeapInit+0xc0>)
 8009c8e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009c92:	601a      	str	r2, [r3, #0]
}
 8009c94:	bf00      	nop
 8009c96:	3714      	adds	r7, #20
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9e:	4770      	bx	lr
 8009ca0:	20001008 	.word	0x20001008
 8009ca4:	20004c08 	.word	0x20004c08
 8009ca8:	20004c10 	.word	0x20004c10
 8009cac:	20004c18 	.word	0x20004c18
 8009cb0:	20004c14 	.word	0x20004c14
 8009cb4:	20004c24 	.word	0x20004c24

08009cb8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009cb8:	b480      	push	{r7}
 8009cba:	b085      	sub	sp, #20
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009cc0:	4b28      	ldr	r3, [pc, #160]	; (8009d64 <prvInsertBlockIntoFreeList+0xac>)
 8009cc2:	60fb      	str	r3, [r7, #12]
 8009cc4:	e002      	b.n	8009ccc <prvInsertBlockIntoFreeList+0x14>
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	60fb      	str	r3, [r7, #12]
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	687a      	ldr	r2, [r7, #4]
 8009cd2:	429a      	cmp	r2, r3
 8009cd4:	d8f7      	bhi.n	8009cc6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	685b      	ldr	r3, [r3, #4]
 8009cde:	68ba      	ldr	r2, [r7, #8]
 8009ce0:	4413      	add	r3, r2
 8009ce2:	687a      	ldr	r2, [r7, #4]
 8009ce4:	429a      	cmp	r2, r3
 8009ce6:	d108      	bne.n	8009cfa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	685a      	ldr	r2, [r3, #4]
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	685b      	ldr	r3, [r3, #4]
 8009cf0:	441a      	add	r2, r3
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	685b      	ldr	r3, [r3, #4]
 8009d02:	68ba      	ldr	r2, [r7, #8]
 8009d04:	441a      	add	r2, r3
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	429a      	cmp	r2, r3
 8009d0c:	d118      	bne.n	8009d40 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	681a      	ldr	r2, [r3, #0]
 8009d12:	4b15      	ldr	r3, [pc, #84]	; (8009d68 <prvInsertBlockIntoFreeList+0xb0>)
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	429a      	cmp	r2, r3
 8009d18:	d00d      	beq.n	8009d36 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	685a      	ldr	r2, [r3, #4]
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	685b      	ldr	r3, [r3, #4]
 8009d24:	441a      	add	r2, r3
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	681a      	ldr	r2, [r3, #0]
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	601a      	str	r2, [r3, #0]
 8009d34:	e008      	b.n	8009d48 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009d36:	4b0c      	ldr	r3, [pc, #48]	; (8009d68 <prvInsertBlockIntoFreeList+0xb0>)
 8009d38:	681a      	ldr	r2, [r3, #0]
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	601a      	str	r2, [r3, #0]
 8009d3e:	e003      	b.n	8009d48 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	681a      	ldr	r2, [r3, #0]
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009d48:	68fa      	ldr	r2, [r7, #12]
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	429a      	cmp	r2, r3
 8009d4e:	d002      	beq.n	8009d56 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	687a      	ldr	r2, [r7, #4]
 8009d54:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009d56:	bf00      	nop
 8009d58:	3714      	adds	r7, #20
 8009d5a:	46bd      	mov	sp, r7
 8009d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d60:	4770      	bx	lr
 8009d62:	bf00      	nop
 8009d64:	20004c08 	.word	0x20004c08
 8009d68:	20004c10 	.word	0x20004c10

08009d6c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009d6c:	b580      	push	{r7, lr}
 8009d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009d70:	2200      	movs	r2, #0
 8009d72:	4912      	ldr	r1, [pc, #72]	; (8009dbc <MX_USB_DEVICE_Init+0x50>)
 8009d74:	4812      	ldr	r0, [pc, #72]	; (8009dc0 <MX_USB_DEVICE_Init+0x54>)
 8009d76:	f7fb ff43 	bl	8005c00 <USBD_Init>
 8009d7a:	4603      	mov	r3, r0
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d001      	beq.n	8009d84 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009d80:	f7f6 fda2 	bl	80008c8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009d84:	490f      	ldr	r1, [pc, #60]	; (8009dc4 <MX_USB_DEVICE_Init+0x58>)
 8009d86:	480e      	ldr	r0, [pc, #56]	; (8009dc0 <MX_USB_DEVICE_Init+0x54>)
 8009d88:	f7fb ff6a 	bl	8005c60 <USBD_RegisterClass>
 8009d8c:	4603      	mov	r3, r0
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d001      	beq.n	8009d96 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009d92:	f7f6 fd99 	bl	80008c8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009d96:	490c      	ldr	r1, [pc, #48]	; (8009dc8 <MX_USB_DEVICE_Init+0x5c>)
 8009d98:	4809      	ldr	r0, [pc, #36]	; (8009dc0 <MX_USB_DEVICE_Init+0x54>)
 8009d9a:	f7fb fea1 	bl	8005ae0 <USBD_CDC_RegisterInterface>
 8009d9e:	4603      	mov	r3, r0
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d001      	beq.n	8009da8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009da4:	f7f6 fd90 	bl	80008c8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009da8:	4805      	ldr	r0, [pc, #20]	; (8009dc0 <MX_USB_DEVICE_Init+0x54>)
 8009daa:	f7fb ff8f 	bl	8005ccc <USBD_Start>
 8009dae:	4603      	mov	r3, r0
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d001      	beq.n	8009db8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009db4:	f7f6 fd88 	bl	80008c8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009db8:	bf00      	nop
 8009dba:	bd80      	pop	{r7, pc}
 8009dbc:	200000b0 	.word	0x200000b0
 8009dc0:	20004c28 	.word	0x20004c28
 8009dc4:	20000018 	.word	0x20000018
 8009dc8:	2000009c 	.word	0x2000009c

08009dcc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009dcc:	b580      	push	{r7, lr}
 8009dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009dd0:	2200      	movs	r2, #0
 8009dd2:	4905      	ldr	r1, [pc, #20]	; (8009de8 <CDC_Init_FS+0x1c>)
 8009dd4:	4805      	ldr	r0, [pc, #20]	; (8009dec <CDC_Init_FS+0x20>)
 8009dd6:	f7fb fe9d 	bl	8005b14 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009dda:	4905      	ldr	r1, [pc, #20]	; (8009df0 <CDC_Init_FS+0x24>)
 8009ddc:	4803      	ldr	r0, [pc, #12]	; (8009dec <CDC_Init_FS+0x20>)
 8009dde:	f7fb febb 	bl	8005b58 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009de2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009de4:	4618      	mov	r0, r3
 8009de6:	bd80      	pop	{r7, pc}
 8009de8:	20005704 	.word	0x20005704
 8009dec:	20004c28 	.word	0x20004c28
 8009df0:	20004f04 	.word	0x20004f04

08009df4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009df4:	b480      	push	{r7}
 8009df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009df8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e02:	4770      	bx	lr

08009e04 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009e04:	b480      	push	{r7}
 8009e06:	b083      	sub	sp, #12
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	4603      	mov	r3, r0
 8009e0c:	6039      	str	r1, [r7, #0]
 8009e0e:	71fb      	strb	r3, [r7, #7]
 8009e10:	4613      	mov	r3, r2
 8009e12:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009e14:	79fb      	ldrb	r3, [r7, #7]
 8009e16:	2b23      	cmp	r3, #35	; 0x23
 8009e18:	d84a      	bhi.n	8009eb0 <CDC_Control_FS+0xac>
 8009e1a:	a201      	add	r2, pc, #4	; (adr r2, 8009e20 <CDC_Control_FS+0x1c>)
 8009e1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e20:	08009eb1 	.word	0x08009eb1
 8009e24:	08009eb1 	.word	0x08009eb1
 8009e28:	08009eb1 	.word	0x08009eb1
 8009e2c:	08009eb1 	.word	0x08009eb1
 8009e30:	08009eb1 	.word	0x08009eb1
 8009e34:	08009eb1 	.word	0x08009eb1
 8009e38:	08009eb1 	.word	0x08009eb1
 8009e3c:	08009eb1 	.word	0x08009eb1
 8009e40:	08009eb1 	.word	0x08009eb1
 8009e44:	08009eb1 	.word	0x08009eb1
 8009e48:	08009eb1 	.word	0x08009eb1
 8009e4c:	08009eb1 	.word	0x08009eb1
 8009e50:	08009eb1 	.word	0x08009eb1
 8009e54:	08009eb1 	.word	0x08009eb1
 8009e58:	08009eb1 	.word	0x08009eb1
 8009e5c:	08009eb1 	.word	0x08009eb1
 8009e60:	08009eb1 	.word	0x08009eb1
 8009e64:	08009eb1 	.word	0x08009eb1
 8009e68:	08009eb1 	.word	0x08009eb1
 8009e6c:	08009eb1 	.word	0x08009eb1
 8009e70:	08009eb1 	.word	0x08009eb1
 8009e74:	08009eb1 	.word	0x08009eb1
 8009e78:	08009eb1 	.word	0x08009eb1
 8009e7c:	08009eb1 	.word	0x08009eb1
 8009e80:	08009eb1 	.word	0x08009eb1
 8009e84:	08009eb1 	.word	0x08009eb1
 8009e88:	08009eb1 	.word	0x08009eb1
 8009e8c:	08009eb1 	.word	0x08009eb1
 8009e90:	08009eb1 	.word	0x08009eb1
 8009e94:	08009eb1 	.word	0x08009eb1
 8009e98:	08009eb1 	.word	0x08009eb1
 8009e9c:	08009eb1 	.word	0x08009eb1
 8009ea0:	08009eb1 	.word	0x08009eb1
 8009ea4:	08009eb1 	.word	0x08009eb1
 8009ea8:	08009eb1 	.word	0x08009eb1
 8009eac:	08009eb1 	.word	0x08009eb1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009eb0:	bf00      	nop
  }

  return (USBD_OK);
 8009eb2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009eb4:	4618      	mov	r0, r3
 8009eb6:	370c      	adds	r7, #12
 8009eb8:	46bd      	mov	sp, r7
 8009eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ebe:	4770      	bx	lr

08009ec0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009ec0:	b580      	push	{r7, lr}
 8009ec2:	b082      	sub	sp, #8
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	6078      	str	r0, [r7, #4]
 8009ec8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009eca:	6879      	ldr	r1, [r7, #4]
 8009ecc:	4805      	ldr	r0, [pc, #20]	; (8009ee4 <CDC_Receive_FS+0x24>)
 8009ece:	f7fb fe43 	bl	8005b58 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009ed2:	4804      	ldr	r0, [pc, #16]	; (8009ee4 <CDC_Receive_FS+0x24>)
 8009ed4:	f7fb fe5e 	bl	8005b94 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009ed8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009eda:	4618      	mov	r0, r3
 8009edc:	3708      	adds	r7, #8
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	bd80      	pop	{r7, pc}
 8009ee2:	bf00      	nop
 8009ee4:	20004c28 	.word	0x20004c28

08009ee8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009ee8:	b480      	push	{r7}
 8009eea:	b087      	sub	sp, #28
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	60f8      	str	r0, [r7, #12]
 8009ef0:	60b9      	str	r1, [r7, #8]
 8009ef2:	4613      	mov	r3, r2
 8009ef4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009efa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009efe:	4618      	mov	r0, r3
 8009f00:	371c      	adds	r7, #28
 8009f02:	46bd      	mov	sp, r7
 8009f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f08:	4770      	bx	lr
	...

08009f0c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009f0c:	b480      	push	{r7}
 8009f0e:	b083      	sub	sp, #12
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	4603      	mov	r3, r0
 8009f14:	6039      	str	r1, [r7, #0]
 8009f16:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009f18:	683b      	ldr	r3, [r7, #0]
 8009f1a:	2212      	movs	r2, #18
 8009f1c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009f1e:	4b03      	ldr	r3, [pc, #12]	; (8009f2c <USBD_FS_DeviceDescriptor+0x20>)
}
 8009f20:	4618      	mov	r0, r3
 8009f22:	370c      	adds	r7, #12
 8009f24:	46bd      	mov	sp, r7
 8009f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2a:	4770      	bx	lr
 8009f2c:	200000cc 	.word	0x200000cc

08009f30 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009f30:	b480      	push	{r7}
 8009f32:	b083      	sub	sp, #12
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	4603      	mov	r3, r0
 8009f38:	6039      	str	r1, [r7, #0]
 8009f3a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009f3c:	683b      	ldr	r3, [r7, #0]
 8009f3e:	2204      	movs	r2, #4
 8009f40:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009f42:	4b03      	ldr	r3, [pc, #12]	; (8009f50 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009f44:	4618      	mov	r0, r3
 8009f46:	370c      	adds	r7, #12
 8009f48:	46bd      	mov	sp, r7
 8009f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f4e:	4770      	bx	lr
 8009f50:	200000e0 	.word	0x200000e0

08009f54 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009f54:	b580      	push	{r7, lr}
 8009f56:	b082      	sub	sp, #8
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	4603      	mov	r3, r0
 8009f5c:	6039      	str	r1, [r7, #0]
 8009f5e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009f60:	79fb      	ldrb	r3, [r7, #7]
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d105      	bne.n	8009f72 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009f66:	683a      	ldr	r2, [r7, #0]
 8009f68:	4907      	ldr	r1, [pc, #28]	; (8009f88 <USBD_FS_ProductStrDescriptor+0x34>)
 8009f6a:	4808      	ldr	r0, [pc, #32]	; (8009f8c <USBD_FS_ProductStrDescriptor+0x38>)
 8009f6c:	f7fd f860 	bl	8007030 <USBD_GetString>
 8009f70:	e004      	b.n	8009f7c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009f72:	683a      	ldr	r2, [r7, #0]
 8009f74:	4904      	ldr	r1, [pc, #16]	; (8009f88 <USBD_FS_ProductStrDescriptor+0x34>)
 8009f76:	4805      	ldr	r0, [pc, #20]	; (8009f8c <USBD_FS_ProductStrDescriptor+0x38>)
 8009f78:	f7fd f85a 	bl	8007030 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009f7c:	4b02      	ldr	r3, [pc, #8]	; (8009f88 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009f7e:	4618      	mov	r0, r3
 8009f80:	3708      	adds	r7, #8
 8009f82:	46bd      	mov	sp, r7
 8009f84:	bd80      	pop	{r7, pc}
 8009f86:	bf00      	nop
 8009f88:	20005f04 	.word	0x20005f04
 8009f8c:	0800aab4 	.word	0x0800aab4

08009f90 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009f90:	b580      	push	{r7, lr}
 8009f92:	b082      	sub	sp, #8
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	4603      	mov	r3, r0
 8009f98:	6039      	str	r1, [r7, #0]
 8009f9a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009f9c:	683a      	ldr	r2, [r7, #0]
 8009f9e:	4904      	ldr	r1, [pc, #16]	; (8009fb0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009fa0:	4804      	ldr	r0, [pc, #16]	; (8009fb4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009fa2:	f7fd f845 	bl	8007030 <USBD_GetString>
  return USBD_StrDesc;
 8009fa6:	4b02      	ldr	r3, [pc, #8]	; (8009fb0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009fa8:	4618      	mov	r0, r3
 8009faa:	3708      	adds	r7, #8
 8009fac:	46bd      	mov	sp, r7
 8009fae:	bd80      	pop	{r7, pc}
 8009fb0:	20005f04 	.word	0x20005f04
 8009fb4:	0800aacc 	.word	0x0800aacc

08009fb8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	b082      	sub	sp, #8
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	4603      	mov	r3, r0
 8009fc0:	6039      	str	r1, [r7, #0]
 8009fc2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009fc4:	683b      	ldr	r3, [r7, #0]
 8009fc6:	221a      	movs	r2, #26
 8009fc8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009fca:	f000 f843 	bl	800a054 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009fce:	4b02      	ldr	r3, [pc, #8]	; (8009fd8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009fd0:	4618      	mov	r0, r3
 8009fd2:	3708      	adds	r7, #8
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	bd80      	pop	{r7, pc}
 8009fd8:	200000e4 	.word	0x200000e4

08009fdc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009fdc:	b580      	push	{r7, lr}
 8009fde:	b082      	sub	sp, #8
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	4603      	mov	r3, r0
 8009fe4:	6039      	str	r1, [r7, #0]
 8009fe6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009fe8:	79fb      	ldrb	r3, [r7, #7]
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d105      	bne.n	8009ffa <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009fee:	683a      	ldr	r2, [r7, #0]
 8009ff0:	4907      	ldr	r1, [pc, #28]	; (800a010 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009ff2:	4808      	ldr	r0, [pc, #32]	; (800a014 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009ff4:	f7fd f81c 	bl	8007030 <USBD_GetString>
 8009ff8:	e004      	b.n	800a004 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009ffa:	683a      	ldr	r2, [r7, #0]
 8009ffc:	4904      	ldr	r1, [pc, #16]	; (800a010 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009ffe:	4805      	ldr	r0, [pc, #20]	; (800a014 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a000:	f7fd f816 	bl	8007030 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a004:	4b02      	ldr	r3, [pc, #8]	; (800a010 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a006:	4618      	mov	r0, r3
 800a008:	3708      	adds	r7, #8
 800a00a:	46bd      	mov	sp, r7
 800a00c:	bd80      	pop	{r7, pc}
 800a00e:	bf00      	nop
 800a010:	20005f04 	.word	0x20005f04
 800a014:	0800aae0 	.word	0x0800aae0

0800a018 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a018:	b580      	push	{r7, lr}
 800a01a:	b082      	sub	sp, #8
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	4603      	mov	r3, r0
 800a020:	6039      	str	r1, [r7, #0]
 800a022:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a024:	79fb      	ldrb	r3, [r7, #7]
 800a026:	2b00      	cmp	r3, #0
 800a028:	d105      	bne.n	800a036 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a02a:	683a      	ldr	r2, [r7, #0]
 800a02c:	4907      	ldr	r1, [pc, #28]	; (800a04c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a02e:	4808      	ldr	r0, [pc, #32]	; (800a050 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a030:	f7fc fffe 	bl	8007030 <USBD_GetString>
 800a034:	e004      	b.n	800a040 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a036:	683a      	ldr	r2, [r7, #0]
 800a038:	4904      	ldr	r1, [pc, #16]	; (800a04c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a03a:	4805      	ldr	r0, [pc, #20]	; (800a050 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a03c:	f7fc fff8 	bl	8007030 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a040:	4b02      	ldr	r3, [pc, #8]	; (800a04c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a042:	4618      	mov	r0, r3
 800a044:	3708      	adds	r7, #8
 800a046:	46bd      	mov	sp, r7
 800a048:	bd80      	pop	{r7, pc}
 800a04a:	bf00      	nop
 800a04c:	20005f04 	.word	0x20005f04
 800a050:	0800aaec 	.word	0x0800aaec

0800a054 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a054:	b580      	push	{r7, lr}
 800a056:	b084      	sub	sp, #16
 800a058:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a05a:	4b0f      	ldr	r3, [pc, #60]	; (800a098 <Get_SerialNum+0x44>)
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a060:	4b0e      	ldr	r3, [pc, #56]	; (800a09c <Get_SerialNum+0x48>)
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a066:	4b0e      	ldr	r3, [pc, #56]	; (800a0a0 <Get_SerialNum+0x4c>)
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a06c:	68fa      	ldr	r2, [r7, #12]
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	4413      	add	r3, r2
 800a072:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	2b00      	cmp	r3, #0
 800a078:	d009      	beq.n	800a08e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a07a:	2208      	movs	r2, #8
 800a07c:	4909      	ldr	r1, [pc, #36]	; (800a0a4 <Get_SerialNum+0x50>)
 800a07e:	68f8      	ldr	r0, [r7, #12]
 800a080:	f000 f814 	bl	800a0ac <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a084:	2204      	movs	r2, #4
 800a086:	4908      	ldr	r1, [pc, #32]	; (800a0a8 <Get_SerialNum+0x54>)
 800a088:	68b8      	ldr	r0, [r7, #8]
 800a08a:	f000 f80f 	bl	800a0ac <IntToUnicode>
  }
}
 800a08e:	bf00      	nop
 800a090:	3710      	adds	r7, #16
 800a092:	46bd      	mov	sp, r7
 800a094:	bd80      	pop	{r7, pc}
 800a096:	bf00      	nop
 800a098:	1fff7a10 	.word	0x1fff7a10
 800a09c:	1fff7a14 	.word	0x1fff7a14
 800a0a0:	1fff7a18 	.word	0x1fff7a18
 800a0a4:	200000e6 	.word	0x200000e6
 800a0a8:	200000f6 	.word	0x200000f6

0800a0ac <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a0ac:	b480      	push	{r7}
 800a0ae:	b087      	sub	sp, #28
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	60f8      	str	r0, [r7, #12]
 800a0b4:	60b9      	str	r1, [r7, #8]
 800a0b6:	4613      	mov	r3, r2
 800a0b8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a0be:	2300      	movs	r3, #0
 800a0c0:	75fb      	strb	r3, [r7, #23]
 800a0c2:	e027      	b.n	800a114 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	0f1b      	lsrs	r3, r3, #28
 800a0c8:	2b09      	cmp	r3, #9
 800a0ca:	d80b      	bhi.n	800a0e4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	0f1b      	lsrs	r3, r3, #28
 800a0d0:	b2da      	uxtb	r2, r3
 800a0d2:	7dfb      	ldrb	r3, [r7, #23]
 800a0d4:	005b      	lsls	r3, r3, #1
 800a0d6:	4619      	mov	r1, r3
 800a0d8:	68bb      	ldr	r3, [r7, #8]
 800a0da:	440b      	add	r3, r1
 800a0dc:	3230      	adds	r2, #48	; 0x30
 800a0de:	b2d2      	uxtb	r2, r2
 800a0e0:	701a      	strb	r2, [r3, #0]
 800a0e2:	e00a      	b.n	800a0fa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	0f1b      	lsrs	r3, r3, #28
 800a0e8:	b2da      	uxtb	r2, r3
 800a0ea:	7dfb      	ldrb	r3, [r7, #23]
 800a0ec:	005b      	lsls	r3, r3, #1
 800a0ee:	4619      	mov	r1, r3
 800a0f0:	68bb      	ldr	r3, [r7, #8]
 800a0f2:	440b      	add	r3, r1
 800a0f4:	3237      	adds	r2, #55	; 0x37
 800a0f6:	b2d2      	uxtb	r2, r2
 800a0f8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	011b      	lsls	r3, r3, #4
 800a0fe:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a100:	7dfb      	ldrb	r3, [r7, #23]
 800a102:	005b      	lsls	r3, r3, #1
 800a104:	3301      	adds	r3, #1
 800a106:	68ba      	ldr	r2, [r7, #8]
 800a108:	4413      	add	r3, r2
 800a10a:	2200      	movs	r2, #0
 800a10c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a10e:	7dfb      	ldrb	r3, [r7, #23]
 800a110:	3301      	adds	r3, #1
 800a112:	75fb      	strb	r3, [r7, #23]
 800a114:	7dfa      	ldrb	r2, [r7, #23]
 800a116:	79fb      	ldrb	r3, [r7, #7]
 800a118:	429a      	cmp	r2, r3
 800a11a:	d3d3      	bcc.n	800a0c4 <IntToUnicode+0x18>
  }
}
 800a11c:	bf00      	nop
 800a11e:	bf00      	nop
 800a120:	371c      	adds	r7, #28
 800a122:	46bd      	mov	sp, r7
 800a124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a128:	4770      	bx	lr
	...

0800a12c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a12c:	b580      	push	{r7, lr}
 800a12e:	b08a      	sub	sp, #40	; 0x28
 800a130:	af00      	add	r7, sp, #0
 800a132:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a134:	f107 0314 	add.w	r3, r7, #20
 800a138:	2200      	movs	r2, #0
 800a13a:	601a      	str	r2, [r3, #0]
 800a13c:	605a      	str	r2, [r3, #4]
 800a13e:	609a      	str	r2, [r3, #8]
 800a140:	60da      	str	r2, [r3, #12]
 800a142:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a14c:	d13a      	bne.n	800a1c4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a14e:	2300      	movs	r3, #0
 800a150:	613b      	str	r3, [r7, #16]
 800a152:	4b1e      	ldr	r3, [pc, #120]	; (800a1cc <HAL_PCD_MspInit+0xa0>)
 800a154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a156:	4a1d      	ldr	r2, [pc, #116]	; (800a1cc <HAL_PCD_MspInit+0xa0>)
 800a158:	f043 0301 	orr.w	r3, r3, #1
 800a15c:	6313      	str	r3, [r2, #48]	; 0x30
 800a15e:	4b1b      	ldr	r3, [pc, #108]	; (800a1cc <HAL_PCD_MspInit+0xa0>)
 800a160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a162:	f003 0301 	and.w	r3, r3, #1
 800a166:	613b      	str	r3, [r7, #16]
 800a168:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 800a16a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800a16e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a170:	2302      	movs	r3, #2
 800a172:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a174:	2300      	movs	r3, #0
 800a176:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a178:	2303      	movs	r3, #3
 800a17a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a17c:	230a      	movs	r3, #10
 800a17e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a180:	f107 0314 	add.w	r3, r7, #20
 800a184:	4619      	mov	r1, r3
 800a186:	4812      	ldr	r0, [pc, #72]	; (800a1d0 <HAL_PCD_MspInit+0xa4>)
 800a188:	f7f7 f998 	bl	80014bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a18c:	4b0f      	ldr	r3, [pc, #60]	; (800a1cc <HAL_PCD_MspInit+0xa0>)
 800a18e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a190:	4a0e      	ldr	r2, [pc, #56]	; (800a1cc <HAL_PCD_MspInit+0xa0>)
 800a192:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a196:	6353      	str	r3, [r2, #52]	; 0x34
 800a198:	2300      	movs	r3, #0
 800a19a:	60fb      	str	r3, [r7, #12]
 800a19c:	4b0b      	ldr	r3, [pc, #44]	; (800a1cc <HAL_PCD_MspInit+0xa0>)
 800a19e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a1a0:	4a0a      	ldr	r2, [pc, #40]	; (800a1cc <HAL_PCD_MspInit+0xa0>)
 800a1a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a1a6:	6453      	str	r3, [r2, #68]	; 0x44
 800a1a8:	4b08      	ldr	r3, [pc, #32]	; (800a1cc <HAL_PCD_MspInit+0xa0>)
 800a1aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a1ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a1b0:	60fb      	str	r3, [r7, #12]
 800a1b2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800a1b4:	2200      	movs	r2, #0
 800a1b6:	2105      	movs	r1, #5
 800a1b8:	2043      	movs	r0, #67	; 0x43
 800a1ba:	f7f7 f955 	bl	8001468 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a1be:	2043      	movs	r0, #67	; 0x43
 800a1c0:	f7f7 f96e 	bl	80014a0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a1c4:	bf00      	nop
 800a1c6:	3728      	adds	r7, #40	; 0x28
 800a1c8:	46bd      	mov	sp, r7
 800a1ca:	bd80      	pop	{r7, pc}
 800a1cc:	40023800 	.word	0x40023800
 800a1d0:	40020000 	.word	0x40020000

0800a1d4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a1d4:	b580      	push	{r7, lr}
 800a1d6:	b082      	sub	sp, #8
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	; 0x4e0
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800a1e8:	4619      	mov	r1, r3
 800a1ea:	4610      	mov	r0, r2
 800a1ec:	f7fb fdbb 	bl	8005d66 <USBD_LL_SetupStage>
}
 800a1f0:	bf00      	nop
 800a1f2:	3708      	adds	r7, #8
 800a1f4:	46bd      	mov	sp, r7
 800a1f6:	bd80      	pop	{r7, pc}

0800a1f8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a1f8:	b580      	push	{r7, lr}
 800a1fa:	b082      	sub	sp, #8
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	6078      	str	r0, [r7, #4]
 800a200:	460b      	mov	r3, r1
 800a202:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 800a20a:	78fa      	ldrb	r2, [r7, #3]
 800a20c:	6879      	ldr	r1, [r7, #4]
 800a20e:	4613      	mov	r3, r2
 800a210:	00db      	lsls	r3, r3, #3
 800a212:	4413      	add	r3, r2
 800a214:	009b      	lsls	r3, r3, #2
 800a216:	440b      	add	r3, r1
 800a218:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800a21c:	681a      	ldr	r2, [r3, #0]
 800a21e:	78fb      	ldrb	r3, [r7, #3]
 800a220:	4619      	mov	r1, r3
 800a222:	f7fb fdf5 	bl	8005e10 <USBD_LL_DataOutStage>
}
 800a226:	bf00      	nop
 800a228:	3708      	adds	r7, #8
 800a22a:	46bd      	mov	sp, r7
 800a22c:	bd80      	pop	{r7, pc}

0800a22e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a22e:	b580      	push	{r7, lr}
 800a230:	b082      	sub	sp, #8
 800a232:	af00      	add	r7, sp, #0
 800a234:	6078      	str	r0, [r7, #4]
 800a236:	460b      	mov	r3, r1
 800a238:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 800a240:	78fa      	ldrb	r2, [r7, #3]
 800a242:	6879      	ldr	r1, [r7, #4]
 800a244:	4613      	mov	r3, r2
 800a246:	00db      	lsls	r3, r3, #3
 800a248:	4413      	add	r3, r2
 800a24a:	009b      	lsls	r3, r3, #2
 800a24c:	440b      	add	r3, r1
 800a24e:	3320      	adds	r3, #32
 800a250:	681a      	ldr	r2, [r3, #0]
 800a252:	78fb      	ldrb	r3, [r7, #3]
 800a254:	4619      	mov	r1, r3
 800a256:	f7fb fe8e 	bl	8005f76 <USBD_LL_DataInStage>
}
 800a25a:	bf00      	nop
 800a25c:	3708      	adds	r7, #8
 800a25e:	46bd      	mov	sp, r7
 800a260:	bd80      	pop	{r7, pc}

0800a262 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a262:	b580      	push	{r7, lr}
 800a264:	b082      	sub	sp, #8
 800a266:	af00      	add	r7, sp, #0
 800a268:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800a270:	4618      	mov	r0, r3
 800a272:	f7fb ffc8 	bl	8006206 <USBD_LL_SOF>
}
 800a276:	bf00      	nop
 800a278:	3708      	adds	r7, #8
 800a27a:	46bd      	mov	sp, r7
 800a27c:	bd80      	pop	{r7, pc}

0800a27e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a27e:	b580      	push	{r7, lr}
 800a280:	b084      	sub	sp, #16
 800a282:	af00      	add	r7, sp, #0
 800a284:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a286:	2301      	movs	r3, #1
 800a288:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	79db      	ldrb	r3, [r3, #7]
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d102      	bne.n	800a298 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800a292:	2300      	movs	r3, #0
 800a294:	73fb      	strb	r3, [r7, #15]
 800a296:	e008      	b.n	800a2aa <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	79db      	ldrb	r3, [r3, #7]
 800a29c:	2b02      	cmp	r3, #2
 800a29e:	d102      	bne.n	800a2a6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800a2a0:	2301      	movs	r3, #1
 800a2a2:	73fb      	strb	r3, [r7, #15]
 800a2a4:	e001      	b.n	800a2aa <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800a2a6:	f7f6 fb0f 	bl	80008c8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800a2b0:	7bfa      	ldrb	r2, [r7, #15]
 800a2b2:	4611      	mov	r1, r2
 800a2b4:	4618      	mov	r0, r3
 800a2b6:	f7fb ff62 	bl	800617e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800a2c0:	4618      	mov	r0, r3
 800a2c2:	f7fb ff0a 	bl	80060da <USBD_LL_Reset>
}
 800a2c6:	bf00      	nop
 800a2c8:	3710      	adds	r7, #16
 800a2ca:	46bd      	mov	sp, r7
 800a2cc:	bd80      	pop	{r7, pc}
	...

0800a2d0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a2d0:	b580      	push	{r7, lr}
 800a2d2:	b082      	sub	sp, #8
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800a2de:	4618      	mov	r0, r3
 800a2e0:	f7fb ff5d 	bl	800619e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	687a      	ldr	r2, [r7, #4]
 800a2f0:	6812      	ldr	r2, [r2, #0]
 800a2f2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a2f6:	f043 0301 	orr.w	r3, r3, #1
 800a2fa:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	7adb      	ldrb	r3, [r3, #11]
 800a300:	2b00      	cmp	r3, #0
 800a302:	d005      	beq.n	800a310 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a304:	4b04      	ldr	r3, [pc, #16]	; (800a318 <HAL_PCD_SuspendCallback+0x48>)
 800a306:	691b      	ldr	r3, [r3, #16]
 800a308:	4a03      	ldr	r2, [pc, #12]	; (800a318 <HAL_PCD_SuspendCallback+0x48>)
 800a30a:	f043 0306 	orr.w	r3, r3, #6
 800a30e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a310:	bf00      	nop
 800a312:	3708      	adds	r7, #8
 800a314:	46bd      	mov	sp, r7
 800a316:	bd80      	pop	{r7, pc}
 800a318:	e000ed00 	.word	0xe000ed00

0800a31c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a31c:	b580      	push	{r7, lr}
 800a31e:	b082      	sub	sp, #8
 800a320:	af00      	add	r7, sp, #0
 800a322:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800a32a:	4618      	mov	r0, r3
 800a32c:	f7fb ff53 	bl	80061d6 <USBD_LL_Resume>
}
 800a330:	bf00      	nop
 800a332:	3708      	adds	r7, #8
 800a334:	46bd      	mov	sp, r7
 800a336:	bd80      	pop	{r7, pc}

0800a338 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a338:	b580      	push	{r7, lr}
 800a33a:	b082      	sub	sp, #8
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]
 800a340:	460b      	mov	r3, r1
 800a342:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800a34a:	78fa      	ldrb	r2, [r7, #3]
 800a34c:	4611      	mov	r1, r2
 800a34e:	4618      	mov	r0, r3
 800a350:	f7fb ffab 	bl	80062aa <USBD_LL_IsoOUTIncomplete>
}
 800a354:	bf00      	nop
 800a356:	3708      	adds	r7, #8
 800a358:	46bd      	mov	sp, r7
 800a35a:	bd80      	pop	{r7, pc}

0800a35c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a35c:	b580      	push	{r7, lr}
 800a35e:	b082      	sub	sp, #8
 800a360:	af00      	add	r7, sp, #0
 800a362:	6078      	str	r0, [r7, #4]
 800a364:	460b      	mov	r3, r1
 800a366:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800a36e:	78fa      	ldrb	r2, [r7, #3]
 800a370:	4611      	mov	r1, r2
 800a372:	4618      	mov	r0, r3
 800a374:	f7fb ff67 	bl	8006246 <USBD_LL_IsoINIncomplete>
}
 800a378:	bf00      	nop
 800a37a:	3708      	adds	r7, #8
 800a37c:	46bd      	mov	sp, r7
 800a37e:	bd80      	pop	{r7, pc}

0800a380 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a380:	b580      	push	{r7, lr}
 800a382:	b082      	sub	sp, #8
 800a384:	af00      	add	r7, sp, #0
 800a386:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800a38e:	4618      	mov	r0, r3
 800a390:	f7fb ffbd 	bl	800630e <USBD_LL_DevConnected>
}
 800a394:	bf00      	nop
 800a396:	3708      	adds	r7, #8
 800a398:	46bd      	mov	sp, r7
 800a39a:	bd80      	pop	{r7, pc}

0800a39c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a39c:	b580      	push	{r7, lr}
 800a39e:	b082      	sub	sp, #8
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800a3aa:	4618      	mov	r0, r3
 800a3ac:	f7fb ffba 	bl	8006324 <USBD_LL_DevDisconnected>
}
 800a3b0:	bf00      	nop
 800a3b2:	3708      	adds	r7, #8
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	bd80      	pop	{r7, pc}

0800a3b8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a3b8:	b580      	push	{r7, lr}
 800a3ba:	b082      	sub	sp, #8
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	781b      	ldrb	r3, [r3, #0]
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d13c      	bne.n	800a442 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a3c8:	4a20      	ldr	r2, [pc, #128]	; (800a44c <USBD_LL_Init+0x94>)
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	4a1e      	ldr	r2, [pc, #120]	; (800a44c <USBD_LL_Init+0x94>)
 800a3d4:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a3d8:	4b1c      	ldr	r3, [pc, #112]	; (800a44c <USBD_LL_Init+0x94>)
 800a3da:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a3de:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800a3e0:	4b1a      	ldr	r3, [pc, #104]	; (800a44c <USBD_LL_Init+0x94>)
 800a3e2:	2204      	movs	r2, #4
 800a3e4:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a3e6:	4b19      	ldr	r3, [pc, #100]	; (800a44c <USBD_LL_Init+0x94>)
 800a3e8:	2202      	movs	r2, #2
 800a3ea:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a3ec:	4b17      	ldr	r3, [pc, #92]	; (800a44c <USBD_LL_Init+0x94>)
 800a3ee:	2200      	movs	r2, #0
 800a3f0:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a3f2:	4b16      	ldr	r3, [pc, #88]	; (800a44c <USBD_LL_Init+0x94>)
 800a3f4:	2202      	movs	r2, #2
 800a3f6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a3f8:	4b14      	ldr	r3, [pc, #80]	; (800a44c <USBD_LL_Init+0x94>)
 800a3fa:	2200      	movs	r2, #0
 800a3fc:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a3fe:	4b13      	ldr	r3, [pc, #76]	; (800a44c <USBD_LL_Init+0x94>)
 800a400:	2200      	movs	r2, #0
 800a402:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a404:	4b11      	ldr	r3, [pc, #68]	; (800a44c <USBD_LL_Init+0x94>)
 800a406:	2200      	movs	r2, #0
 800a408:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800a40a:	4b10      	ldr	r3, [pc, #64]	; (800a44c <USBD_LL_Init+0x94>)
 800a40c:	2200      	movs	r2, #0
 800a40e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a410:	4b0e      	ldr	r3, [pc, #56]	; (800a44c <USBD_LL_Init+0x94>)
 800a412:	2200      	movs	r2, #0
 800a414:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a416:	480d      	ldr	r0, [pc, #52]	; (800a44c <USBD_LL_Init+0x94>)
 800a418:	f7f7 fa2f 	bl	800187a <HAL_PCD_Init>
 800a41c:	4603      	mov	r3, r0
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d001      	beq.n	800a426 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800a422:	f7f6 fa51 	bl	80008c8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a426:	2180      	movs	r1, #128	; 0x80
 800a428:	4808      	ldr	r0, [pc, #32]	; (800a44c <USBD_LL_Init+0x94>)
 800a42a:	f7f8 fc5a 	bl	8002ce2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a42e:	2240      	movs	r2, #64	; 0x40
 800a430:	2100      	movs	r1, #0
 800a432:	4806      	ldr	r0, [pc, #24]	; (800a44c <USBD_LL_Init+0x94>)
 800a434:	f7f8 fc0e 	bl	8002c54 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a438:	2280      	movs	r2, #128	; 0x80
 800a43a:	2101      	movs	r1, #1
 800a43c:	4803      	ldr	r0, [pc, #12]	; (800a44c <USBD_LL_Init+0x94>)
 800a43e:	f7f8 fc09 	bl	8002c54 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a442:	2300      	movs	r3, #0
}
 800a444:	4618      	mov	r0, r3
 800a446:	3708      	adds	r7, #8
 800a448:	46bd      	mov	sp, r7
 800a44a:	bd80      	pop	{r7, pc}
 800a44c:	20006104 	.word	0x20006104

0800a450 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a450:	b580      	push	{r7, lr}
 800a452:	b084      	sub	sp, #16
 800a454:	af00      	add	r7, sp, #0
 800a456:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a458:	2300      	movs	r3, #0
 800a45a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a45c:	2300      	movs	r3, #0
 800a45e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a466:	4618      	mov	r0, r3
 800a468:	f7f7 fb16 	bl	8001a98 <HAL_PCD_Start>
 800a46c:	4603      	mov	r3, r0
 800a46e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a470:	7bfb      	ldrb	r3, [r7, #15]
 800a472:	4618      	mov	r0, r3
 800a474:	f000 f942 	bl	800a6fc <USBD_Get_USB_Status>
 800a478:	4603      	mov	r3, r0
 800a47a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a47c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a47e:	4618      	mov	r0, r3
 800a480:	3710      	adds	r7, #16
 800a482:	46bd      	mov	sp, r7
 800a484:	bd80      	pop	{r7, pc}

0800a486 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a486:	b580      	push	{r7, lr}
 800a488:	b084      	sub	sp, #16
 800a48a:	af00      	add	r7, sp, #0
 800a48c:	6078      	str	r0, [r7, #4]
 800a48e:	4608      	mov	r0, r1
 800a490:	4611      	mov	r1, r2
 800a492:	461a      	mov	r2, r3
 800a494:	4603      	mov	r3, r0
 800a496:	70fb      	strb	r3, [r7, #3]
 800a498:	460b      	mov	r3, r1
 800a49a:	70bb      	strb	r3, [r7, #2]
 800a49c:	4613      	mov	r3, r2
 800a49e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a4a0:	2300      	movs	r3, #0
 800a4a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a4a4:	2300      	movs	r3, #0
 800a4a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a4ae:	78bb      	ldrb	r3, [r7, #2]
 800a4b0:	883a      	ldrh	r2, [r7, #0]
 800a4b2:	78f9      	ldrb	r1, [r7, #3]
 800a4b4:	f7f7 ffea 	bl	800248c <HAL_PCD_EP_Open>
 800a4b8:	4603      	mov	r3, r0
 800a4ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a4bc:	7bfb      	ldrb	r3, [r7, #15]
 800a4be:	4618      	mov	r0, r3
 800a4c0:	f000 f91c 	bl	800a6fc <USBD_Get_USB_Status>
 800a4c4:	4603      	mov	r3, r0
 800a4c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a4c8:	7bbb      	ldrb	r3, [r7, #14]
}
 800a4ca:	4618      	mov	r0, r3
 800a4cc:	3710      	adds	r7, #16
 800a4ce:	46bd      	mov	sp, r7
 800a4d0:	bd80      	pop	{r7, pc}

0800a4d2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a4d2:	b580      	push	{r7, lr}
 800a4d4:	b084      	sub	sp, #16
 800a4d6:	af00      	add	r7, sp, #0
 800a4d8:	6078      	str	r0, [r7, #4]
 800a4da:	460b      	mov	r3, r1
 800a4dc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a4de:	2300      	movs	r3, #0
 800a4e0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a4e2:	2300      	movs	r3, #0
 800a4e4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a4ec:	78fa      	ldrb	r2, [r7, #3]
 800a4ee:	4611      	mov	r1, r2
 800a4f0:	4618      	mov	r0, r3
 800a4f2:	f7f8 f833 	bl	800255c <HAL_PCD_EP_Close>
 800a4f6:	4603      	mov	r3, r0
 800a4f8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a4fa:	7bfb      	ldrb	r3, [r7, #15]
 800a4fc:	4618      	mov	r0, r3
 800a4fe:	f000 f8fd 	bl	800a6fc <USBD_Get_USB_Status>
 800a502:	4603      	mov	r3, r0
 800a504:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a506:	7bbb      	ldrb	r3, [r7, #14]
}
 800a508:	4618      	mov	r0, r3
 800a50a:	3710      	adds	r7, #16
 800a50c:	46bd      	mov	sp, r7
 800a50e:	bd80      	pop	{r7, pc}

0800a510 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a510:	b580      	push	{r7, lr}
 800a512:	b084      	sub	sp, #16
 800a514:	af00      	add	r7, sp, #0
 800a516:	6078      	str	r0, [r7, #4]
 800a518:	460b      	mov	r3, r1
 800a51a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a51c:	2300      	movs	r3, #0
 800a51e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a520:	2300      	movs	r3, #0
 800a522:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a52a:	78fa      	ldrb	r2, [r7, #3]
 800a52c:	4611      	mov	r1, r2
 800a52e:	4618      	mov	r0, r3
 800a530:	f7f8 f8eb 	bl	800270a <HAL_PCD_EP_SetStall>
 800a534:	4603      	mov	r3, r0
 800a536:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a538:	7bfb      	ldrb	r3, [r7, #15]
 800a53a:	4618      	mov	r0, r3
 800a53c:	f000 f8de 	bl	800a6fc <USBD_Get_USB_Status>
 800a540:	4603      	mov	r3, r0
 800a542:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a544:	7bbb      	ldrb	r3, [r7, #14]
}
 800a546:	4618      	mov	r0, r3
 800a548:	3710      	adds	r7, #16
 800a54a:	46bd      	mov	sp, r7
 800a54c:	bd80      	pop	{r7, pc}

0800a54e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a54e:	b580      	push	{r7, lr}
 800a550:	b084      	sub	sp, #16
 800a552:	af00      	add	r7, sp, #0
 800a554:	6078      	str	r0, [r7, #4]
 800a556:	460b      	mov	r3, r1
 800a558:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a55a:	2300      	movs	r3, #0
 800a55c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a55e:	2300      	movs	r3, #0
 800a560:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a568:	78fa      	ldrb	r2, [r7, #3]
 800a56a:	4611      	mov	r1, r2
 800a56c:	4618      	mov	r0, r3
 800a56e:	f7f8 f92f 	bl	80027d0 <HAL_PCD_EP_ClrStall>
 800a572:	4603      	mov	r3, r0
 800a574:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a576:	7bfb      	ldrb	r3, [r7, #15]
 800a578:	4618      	mov	r0, r3
 800a57a:	f000 f8bf 	bl	800a6fc <USBD_Get_USB_Status>
 800a57e:	4603      	mov	r3, r0
 800a580:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a582:	7bbb      	ldrb	r3, [r7, #14]
}
 800a584:	4618      	mov	r0, r3
 800a586:	3710      	adds	r7, #16
 800a588:	46bd      	mov	sp, r7
 800a58a:	bd80      	pop	{r7, pc}

0800a58c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a58c:	b480      	push	{r7}
 800a58e:	b085      	sub	sp, #20
 800a590:	af00      	add	r7, sp, #0
 800a592:	6078      	str	r0, [r7, #4]
 800a594:	460b      	mov	r3, r1
 800a596:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a59e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a5a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	da0b      	bge.n	800a5c0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a5a8:	78fb      	ldrb	r3, [r7, #3]
 800a5aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a5ae:	68f9      	ldr	r1, [r7, #12]
 800a5b0:	4613      	mov	r3, r2
 800a5b2:	00db      	lsls	r3, r3, #3
 800a5b4:	4413      	add	r3, r2
 800a5b6:	009b      	lsls	r3, r3, #2
 800a5b8:	440b      	add	r3, r1
 800a5ba:	3316      	adds	r3, #22
 800a5bc:	781b      	ldrb	r3, [r3, #0]
 800a5be:	e00b      	b.n	800a5d8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a5c0:	78fb      	ldrb	r3, [r7, #3]
 800a5c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a5c6:	68f9      	ldr	r1, [r7, #12]
 800a5c8:	4613      	mov	r3, r2
 800a5ca:	00db      	lsls	r3, r3, #3
 800a5cc:	4413      	add	r3, r2
 800a5ce:	009b      	lsls	r3, r3, #2
 800a5d0:	440b      	add	r3, r1
 800a5d2:	f203 2356 	addw	r3, r3, #598	; 0x256
 800a5d6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a5d8:	4618      	mov	r0, r3
 800a5da:	3714      	adds	r7, #20
 800a5dc:	46bd      	mov	sp, r7
 800a5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e2:	4770      	bx	lr

0800a5e4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a5e4:	b580      	push	{r7, lr}
 800a5e6:	b084      	sub	sp, #16
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	6078      	str	r0, [r7, #4]
 800a5ec:	460b      	mov	r3, r1
 800a5ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a5f4:	2300      	movs	r3, #0
 800a5f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a5fe:	78fa      	ldrb	r2, [r7, #3]
 800a600:	4611      	mov	r1, r2
 800a602:	4618      	mov	r0, r3
 800a604:	f7f7 ff1e 	bl	8002444 <HAL_PCD_SetAddress>
 800a608:	4603      	mov	r3, r0
 800a60a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a60c:	7bfb      	ldrb	r3, [r7, #15]
 800a60e:	4618      	mov	r0, r3
 800a610:	f000 f874 	bl	800a6fc <USBD_Get_USB_Status>
 800a614:	4603      	mov	r3, r0
 800a616:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a618:	7bbb      	ldrb	r3, [r7, #14]
}
 800a61a:	4618      	mov	r0, r3
 800a61c:	3710      	adds	r7, #16
 800a61e:	46bd      	mov	sp, r7
 800a620:	bd80      	pop	{r7, pc}

0800a622 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a622:	b580      	push	{r7, lr}
 800a624:	b086      	sub	sp, #24
 800a626:	af00      	add	r7, sp, #0
 800a628:	60f8      	str	r0, [r7, #12]
 800a62a:	607a      	str	r2, [r7, #4]
 800a62c:	603b      	str	r3, [r7, #0]
 800a62e:	460b      	mov	r3, r1
 800a630:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a632:	2300      	movs	r3, #0
 800a634:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a636:	2300      	movs	r3, #0
 800a638:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a640:	7af9      	ldrb	r1, [r7, #11]
 800a642:	683b      	ldr	r3, [r7, #0]
 800a644:	687a      	ldr	r2, [r7, #4]
 800a646:	f7f8 f826 	bl	8002696 <HAL_PCD_EP_Transmit>
 800a64a:	4603      	mov	r3, r0
 800a64c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a64e:	7dfb      	ldrb	r3, [r7, #23]
 800a650:	4618      	mov	r0, r3
 800a652:	f000 f853 	bl	800a6fc <USBD_Get_USB_Status>
 800a656:	4603      	mov	r3, r0
 800a658:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a65a:	7dbb      	ldrb	r3, [r7, #22]
}
 800a65c:	4618      	mov	r0, r3
 800a65e:	3718      	adds	r7, #24
 800a660:	46bd      	mov	sp, r7
 800a662:	bd80      	pop	{r7, pc}

0800a664 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a664:	b580      	push	{r7, lr}
 800a666:	b086      	sub	sp, #24
 800a668:	af00      	add	r7, sp, #0
 800a66a:	60f8      	str	r0, [r7, #12]
 800a66c:	607a      	str	r2, [r7, #4]
 800a66e:	603b      	str	r3, [r7, #0]
 800a670:	460b      	mov	r3, r1
 800a672:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a674:	2300      	movs	r3, #0
 800a676:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a678:	2300      	movs	r3, #0
 800a67a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a682:	7af9      	ldrb	r1, [r7, #11]
 800a684:	683b      	ldr	r3, [r7, #0]
 800a686:	687a      	ldr	r2, [r7, #4]
 800a688:	f7f7 ffb2 	bl	80025f0 <HAL_PCD_EP_Receive>
 800a68c:	4603      	mov	r3, r0
 800a68e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a690:	7dfb      	ldrb	r3, [r7, #23]
 800a692:	4618      	mov	r0, r3
 800a694:	f000 f832 	bl	800a6fc <USBD_Get_USB_Status>
 800a698:	4603      	mov	r3, r0
 800a69a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a69c:	7dbb      	ldrb	r3, [r7, #22]
}
 800a69e:	4618      	mov	r0, r3
 800a6a0:	3718      	adds	r7, #24
 800a6a2:	46bd      	mov	sp, r7
 800a6a4:	bd80      	pop	{r7, pc}

0800a6a6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a6a6:	b580      	push	{r7, lr}
 800a6a8:	b082      	sub	sp, #8
 800a6aa:	af00      	add	r7, sp, #0
 800a6ac:	6078      	str	r0, [r7, #4]
 800a6ae:	460b      	mov	r3, r1
 800a6b0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a6b8:	78fa      	ldrb	r2, [r7, #3]
 800a6ba:	4611      	mov	r1, r2
 800a6bc:	4618      	mov	r0, r3
 800a6be:	f7f7 ffd2 	bl	8002666 <HAL_PCD_EP_GetRxCount>
 800a6c2:	4603      	mov	r3, r0
}
 800a6c4:	4618      	mov	r0, r3
 800a6c6:	3708      	adds	r7, #8
 800a6c8:	46bd      	mov	sp, r7
 800a6ca:	bd80      	pop	{r7, pc}

0800a6cc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a6cc:	b480      	push	{r7}
 800a6ce:	b083      	sub	sp, #12
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a6d4:	4b03      	ldr	r3, [pc, #12]	; (800a6e4 <USBD_static_malloc+0x18>)
}
 800a6d6:	4618      	mov	r0, r3
 800a6d8:	370c      	adds	r7, #12
 800a6da:	46bd      	mov	sp, r7
 800a6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e0:	4770      	bx	lr
 800a6e2:	bf00      	nop
 800a6e4:	200065e8 	.word	0x200065e8

0800a6e8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a6e8:	b480      	push	{r7}
 800a6ea:	b083      	sub	sp, #12
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	6078      	str	r0, [r7, #4]

}
 800a6f0:	bf00      	nop
 800a6f2:	370c      	adds	r7, #12
 800a6f4:	46bd      	mov	sp, r7
 800a6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6fa:	4770      	bx	lr

0800a6fc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a6fc:	b480      	push	{r7}
 800a6fe:	b085      	sub	sp, #20
 800a700:	af00      	add	r7, sp, #0
 800a702:	4603      	mov	r3, r0
 800a704:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a706:	2300      	movs	r3, #0
 800a708:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a70a:	79fb      	ldrb	r3, [r7, #7]
 800a70c:	2b03      	cmp	r3, #3
 800a70e:	d817      	bhi.n	800a740 <USBD_Get_USB_Status+0x44>
 800a710:	a201      	add	r2, pc, #4	; (adr r2, 800a718 <USBD_Get_USB_Status+0x1c>)
 800a712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a716:	bf00      	nop
 800a718:	0800a729 	.word	0x0800a729
 800a71c:	0800a72f 	.word	0x0800a72f
 800a720:	0800a735 	.word	0x0800a735
 800a724:	0800a73b 	.word	0x0800a73b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a728:	2300      	movs	r3, #0
 800a72a:	73fb      	strb	r3, [r7, #15]
    break;
 800a72c:	e00b      	b.n	800a746 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a72e:	2303      	movs	r3, #3
 800a730:	73fb      	strb	r3, [r7, #15]
    break;
 800a732:	e008      	b.n	800a746 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a734:	2301      	movs	r3, #1
 800a736:	73fb      	strb	r3, [r7, #15]
    break;
 800a738:	e005      	b.n	800a746 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a73a:	2303      	movs	r3, #3
 800a73c:	73fb      	strb	r3, [r7, #15]
    break;
 800a73e:	e002      	b.n	800a746 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a740:	2303      	movs	r3, #3
 800a742:	73fb      	strb	r3, [r7, #15]
    break;
 800a744:	bf00      	nop
  }
  return usb_status;
 800a746:	7bfb      	ldrb	r3, [r7, #15]
}
 800a748:	4618      	mov	r0, r3
 800a74a:	3714      	adds	r7, #20
 800a74c:	46bd      	mov	sp, r7
 800a74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a752:	4770      	bx	lr

0800a754 <init>:
 *      Author: bentjh01
 */

#include "init.h"

void init(void){
 800a754:	b580      	push	{r7, lr}
 800a756:	af00      	add	r7, sp, #0
	motors_init();
 800a758:	f000 f802 	bl	800a760 <motors_init>
}
 800a75c:	bf00      	nop
 800a75e:	bd80      	pop	{r7, pc}

0800a760 <motors_init>:
  .name = "motorTask",
  .stack_size = 128 * 4,
  .priority = (osPriority_t) osPriorityNormal,
};

void motors_init(void){
 800a760:	b580      	push	{r7, lr}
 800a762:	af00      	add	r7, sp, #0
	motorsTaskHandle = osThreadNew(motors_task, NULL, &motorTask_attributes);
 800a764:	4a04      	ldr	r2, [pc, #16]	; (800a778 <motors_init+0x18>)
 800a766:	2100      	movs	r1, #0
 800a768:	4804      	ldr	r0, [pc, #16]	; (800a77c <motors_init+0x1c>)
 800a76a:	f7fc fdcf 	bl	800730c <osThreadNew>
 800a76e:	4603      	mov	r3, r0
 800a770:	4a03      	ldr	r2, [pc, #12]	; (800a780 <motors_init+0x20>)
 800a772:	6013      	str	r3, [r2, #0]
}
 800a774:	bf00      	nop
 800a776:	bd80      	pop	{r7, pc}
 800a778:	0800ab44 	.word	0x0800ab44
 800a77c:	0800a785 	.word	0x0800a785
 800a780:	20006808 	.word	0x20006808

0800a784 <motors_task>:

void motors_task(void *arguments){
 800a784:	b580      	push	{r7, lr}
 800a786:	b0a8      	sub	sp, #160	; 0xa0
 800a788:	af00      	add	r7, sp, #0
 800a78a:	6078      	str	r0, [r7, #4]

	int sanity_count =0;
 800a78c:	2300      	movs	r3, #0
 800a78e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	CAN_RxHeaderTypeDef rxHeader;
	uint8_t txData[8];
	uint8_t rxData[8];
	uint32_t txMailbox;
	motor_measure_t moto1;
	int16_t current = 0;
 800a792:	2300      	movs	r3, #0
 800a794:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

	//
	sFilterConfig.FilterBank = 0;
 800a798:	2300      	movs	r3, #0
 800a79a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800a79e:	2300      	movs	r3, #0
 800a7a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800a7a4:	2301      	movs	r3, #1
 800a7a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	sFilterConfig.FilterIdHigh = 0x0000;
 800a7aa:	2300      	movs	r3, #0
 800a7ac:	673b      	str	r3, [r7, #112]	; 0x70
	sFilterConfig.FilterIdLow = 0x0000;
 800a7ae:	2300      	movs	r3, #0
 800a7b0:	677b      	str	r3, [r7, #116]	; 0x74
	sFilterConfig.FilterMaskIdHigh = 0x0000;
 800a7b2:	2300      	movs	r3, #0
 800a7b4:	67bb      	str	r3, [r7, #120]	; 0x78
	sFilterConfig.FilterMaskIdLow = 0x0000;
 800a7b6:	2300      	movs	r3, #0
 800a7b8:	67fb      	str	r3, [r7, #124]	; 0x7c
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 800a7ba:	2300      	movs	r3, #0
 800a7bc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	sFilterConfig.FilterActivation = ENABLE;
 800a7c0:	2301      	movs	r3, #1
 800a7c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	sFilterConfig.SlaveStartFilterBank = 14;
 800a7c6:	230e      	movs	r3, #14
 800a7c8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

	if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK) {
 800a7cc:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800a7d0:	4619      	mov	r1, r3
 800a7d2:	4832      	ldr	r0, [pc, #200]	; (800a89c <motors_task+0x118>)
 800a7d4:	f7f6 fb76 	bl	8000ec4 <HAL_CAN_ConfigFilter>
 800a7d8:	4603      	mov	r3, r0
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d001      	beq.n	800a7e2 <motors_task+0x5e>
		Error_Handler();
 800a7de:	f7f6 f873 	bl	80008c8 <Error_Handler>
	}

	if (HAL_CAN_Start(&hcan1) != HAL_OK) {
 800a7e2:	482e      	ldr	r0, [pc, #184]	; (800a89c <motors_task+0x118>)
 800a7e4:	f7f6 fc4e 	bl	8001084 <HAL_CAN_Start>
 800a7e8:	4603      	mov	r3, r0
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d001      	beq.n	800a7f2 <motors_task+0x6e>
		Error_Handler();
 800a7ee:	f7f6 f86b 	bl	80008c8 <Error_Handler>
	}

	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK) {
 800a7f2:	2102      	movs	r1, #2
 800a7f4:	4829      	ldr	r0, [pc, #164]	; (800a89c <motors_task+0x118>)
 800a7f6:	f7f6 fd59 	bl	80012ac <HAL_CAN_ActivateNotification>
 800a7fa:	4603      	mov	r3, r0
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d001      	beq.n	800a804 <motors_task+0x80>
		Error_Handler();
 800a800:	f7f6 f862 	bl	80008c8 <Error_Handler>
	}

	txHeader.StdId = 0x200;
 800a804:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a808:	65bb      	str	r3, [r7, #88]	; 0x58
	txHeader.RTR   = CAN_RTR_DATA;
 800a80a:	2300      	movs	r3, #0
 800a80c:	667b      	str	r3, [r7, #100]	; 0x64
	txHeader.IDE   = CAN_ID_STD;
 800a80e:	2300      	movs	r3, #0
 800a810:	663b      	str	r3, [r7, #96]	; 0x60
	txHeader.DLC   = 8;
 800a812:	2308      	movs	r3, #8
 800a814:	66bb      	str	r3, [r7, #104]	; 0x68
	txHeader.TransmitGlobalTime = DISABLE;
 800a816:	2300      	movs	r3, #0
 800a818:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
	txData[0] = 0;
 800a81c:	2300      	movs	r3, #0
 800a81e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	txData[1] = 0;
 800a822:	2300      	movs	r3, #0
 800a824:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	txData[2] = 0;
 800a828:	2300      	movs	r3, #0
 800a82a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	txData[3] = 0;
 800a82e:	2300      	movs	r3, #0
 800a830:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	txData[4] = 0;
 800a834:	2300      	movs	r3, #0
 800a836:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	txData[5] = 0;
 800a83a:	2300      	movs	r3, #0
 800a83c:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	txData[6] = 0;
 800a840:	2300      	movs	r3, #0
 800a842:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	txData[7] = 0;
 800a846:	2300      	movs	r3, #0
 800a848:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

	//

	HAL_GPIO_WritePin(POWER_OUT1_GPIO_Port, POWER_OUT1_Pin, GPIO_PIN_SET);
 800a84c:	2201      	movs	r2, #1
 800a84e:	2104      	movs	r1, #4
 800a850:	4813      	ldr	r0, [pc, #76]	; (800a8a0 <motors_task+0x11c>)
 800a852:	f7f6 ffdf 	bl	8001814 <HAL_GPIO_WritePin>
  for(;;)
  {
		if (HAL_CAN_AddTxMessage(&hcan1, &txHeader, txData, &txMailbox) != HAL_OK) {
 800a856:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a85a:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800a85e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800a862:	480e      	ldr	r0, [pc, #56]	; (800a89c <motors_task+0x118>)
 800a864:	f7f6 fc52 	bl	800110c <HAL_CAN_AddTxMessage>
 800a868:	4603      	mov	r3, r0
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d001      	beq.n	800a872 <motors_task+0xee>
			Error_Handler();
 800a86e:	f7f6 f82b 	bl	80008c8 <Error_Handler>
		}

		txData[0] = current >> 8;
 800a872:	f9b7 309a 	ldrsh.w	r3, [r7, #154]	; 0x9a
 800a876:	121b      	asrs	r3, r3, #8
 800a878:	b21b      	sxth	r3, r3
 800a87a:	b2db      	uxtb	r3, r3
 800a87c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
		txData[1] = current;
 800a880:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800a884:	b2db      	uxtb	r3, r3
 800a886:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
		sanity_count ++;
 800a88a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a88e:	3301      	adds	r3, #1
 800a890:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
		osDelay(10);
 800a894:	200a      	movs	r0, #10
 800a896:	f7fc fdcb 	bl	8007430 <osDelay>
		if (HAL_CAN_AddTxMessage(&hcan1, &txHeader, txData, &txMailbox) != HAL_OK) {
 800a89a:	e7dc      	b.n	800a856 <motors_task+0xd2>
 800a89c:	2000016c 	.word	0x2000016c
 800a8a0:	40021c00 	.word	0x40021c00

0800a8a4 <memset>:
 800a8a4:	4402      	add	r2, r0
 800a8a6:	4603      	mov	r3, r0
 800a8a8:	4293      	cmp	r3, r2
 800a8aa:	d100      	bne.n	800a8ae <memset+0xa>
 800a8ac:	4770      	bx	lr
 800a8ae:	f803 1b01 	strb.w	r1, [r3], #1
 800a8b2:	e7f9      	b.n	800a8a8 <memset+0x4>

0800a8b4 <_reclaim_reent>:
 800a8b4:	4b29      	ldr	r3, [pc, #164]	; (800a95c <_reclaim_reent+0xa8>)
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	4283      	cmp	r3, r0
 800a8ba:	b570      	push	{r4, r5, r6, lr}
 800a8bc:	4604      	mov	r4, r0
 800a8be:	d04b      	beq.n	800a958 <_reclaim_reent+0xa4>
 800a8c0:	69c3      	ldr	r3, [r0, #28]
 800a8c2:	b143      	cbz	r3, 800a8d6 <_reclaim_reent+0x22>
 800a8c4:	68db      	ldr	r3, [r3, #12]
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d144      	bne.n	800a954 <_reclaim_reent+0xa0>
 800a8ca:	69e3      	ldr	r3, [r4, #28]
 800a8cc:	6819      	ldr	r1, [r3, #0]
 800a8ce:	b111      	cbz	r1, 800a8d6 <_reclaim_reent+0x22>
 800a8d0:	4620      	mov	r0, r4
 800a8d2:	f000 f879 	bl	800a9c8 <_free_r>
 800a8d6:	6961      	ldr	r1, [r4, #20]
 800a8d8:	b111      	cbz	r1, 800a8e0 <_reclaim_reent+0x2c>
 800a8da:	4620      	mov	r0, r4
 800a8dc:	f000 f874 	bl	800a9c8 <_free_r>
 800a8e0:	69e1      	ldr	r1, [r4, #28]
 800a8e2:	b111      	cbz	r1, 800a8ea <_reclaim_reent+0x36>
 800a8e4:	4620      	mov	r0, r4
 800a8e6:	f000 f86f 	bl	800a9c8 <_free_r>
 800a8ea:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800a8ec:	b111      	cbz	r1, 800a8f4 <_reclaim_reent+0x40>
 800a8ee:	4620      	mov	r0, r4
 800a8f0:	f000 f86a 	bl	800a9c8 <_free_r>
 800a8f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a8f6:	b111      	cbz	r1, 800a8fe <_reclaim_reent+0x4a>
 800a8f8:	4620      	mov	r0, r4
 800a8fa:	f000 f865 	bl	800a9c8 <_free_r>
 800a8fe:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a900:	b111      	cbz	r1, 800a908 <_reclaim_reent+0x54>
 800a902:	4620      	mov	r0, r4
 800a904:	f000 f860 	bl	800a9c8 <_free_r>
 800a908:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800a90a:	b111      	cbz	r1, 800a912 <_reclaim_reent+0x5e>
 800a90c:	4620      	mov	r0, r4
 800a90e:	f000 f85b 	bl	800a9c8 <_free_r>
 800a912:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800a914:	b111      	cbz	r1, 800a91c <_reclaim_reent+0x68>
 800a916:	4620      	mov	r0, r4
 800a918:	f000 f856 	bl	800a9c8 <_free_r>
 800a91c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800a91e:	b111      	cbz	r1, 800a926 <_reclaim_reent+0x72>
 800a920:	4620      	mov	r0, r4
 800a922:	f000 f851 	bl	800a9c8 <_free_r>
 800a926:	6a23      	ldr	r3, [r4, #32]
 800a928:	b1b3      	cbz	r3, 800a958 <_reclaim_reent+0xa4>
 800a92a:	4620      	mov	r0, r4
 800a92c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a930:	4718      	bx	r3
 800a932:	5949      	ldr	r1, [r1, r5]
 800a934:	b941      	cbnz	r1, 800a948 <_reclaim_reent+0x94>
 800a936:	3504      	adds	r5, #4
 800a938:	69e3      	ldr	r3, [r4, #28]
 800a93a:	2d80      	cmp	r5, #128	; 0x80
 800a93c:	68d9      	ldr	r1, [r3, #12]
 800a93e:	d1f8      	bne.n	800a932 <_reclaim_reent+0x7e>
 800a940:	4620      	mov	r0, r4
 800a942:	f000 f841 	bl	800a9c8 <_free_r>
 800a946:	e7c0      	b.n	800a8ca <_reclaim_reent+0x16>
 800a948:	680e      	ldr	r6, [r1, #0]
 800a94a:	4620      	mov	r0, r4
 800a94c:	f000 f83c 	bl	800a9c8 <_free_r>
 800a950:	4631      	mov	r1, r6
 800a952:	e7ef      	b.n	800a934 <_reclaim_reent+0x80>
 800a954:	2500      	movs	r5, #0
 800a956:	e7ef      	b.n	800a938 <_reclaim_reent+0x84>
 800a958:	bd70      	pop	{r4, r5, r6, pc}
 800a95a:	bf00      	nop
 800a95c:	2000014c 	.word	0x2000014c

0800a960 <__libc_init_array>:
 800a960:	b570      	push	{r4, r5, r6, lr}
 800a962:	4d0d      	ldr	r5, [pc, #52]	; (800a998 <__libc_init_array+0x38>)
 800a964:	4c0d      	ldr	r4, [pc, #52]	; (800a99c <__libc_init_array+0x3c>)
 800a966:	1b64      	subs	r4, r4, r5
 800a968:	10a4      	asrs	r4, r4, #2
 800a96a:	2600      	movs	r6, #0
 800a96c:	42a6      	cmp	r6, r4
 800a96e:	d109      	bne.n	800a984 <__libc_init_array+0x24>
 800a970:	4d0b      	ldr	r5, [pc, #44]	; (800a9a0 <__libc_init_array+0x40>)
 800a972:	4c0c      	ldr	r4, [pc, #48]	; (800a9a4 <__libc_init_array+0x44>)
 800a974:	f000 f880 	bl	800aa78 <_init>
 800a978:	1b64      	subs	r4, r4, r5
 800a97a:	10a4      	asrs	r4, r4, #2
 800a97c:	2600      	movs	r6, #0
 800a97e:	42a6      	cmp	r6, r4
 800a980:	d105      	bne.n	800a98e <__libc_init_array+0x2e>
 800a982:	bd70      	pop	{r4, r5, r6, pc}
 800a984:	f855 3b04 	ldr.w	r3, [r5], #4
 800a988:	4798      	blx	r3
 800a98a:	3601      	adds	r6, #1
 800a98c:	e7ee      	b.n	800a96c <__libc_init_array+0xc>
 800a98e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a992:	4798      	blx	r3
 800a994:	3601      	adds	r6, #1
 800a996:	e7f2      	b.n	800a97e <__libc_init_array+0x1e>
 800a998:	0800ab70 	.word	0x0800ab70
 800a99c:	0800ab70 	.word	0x0800ab70
 800a9a0:	0800ab70 	.word	0x0800ab70
 800a9a4:	0800ab74 	.word	0x0800ab74

0800a9a8 <__retarget_lock_acquire_recursive>:
 800a9a8:	4770      	bx	lr

0800a9aa <__retarget_lock_release_recursive>:
 800a9aa:	4770      	bx	lr

0800a9ac <memcpy>:
 800a9ac:	440a      	add	r2, r1
 800a9ae:	4291      	cmp	r1, r2
 800a9b0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800a9b4:	d100      	bne.n	800a9b8 <memcpy+0xc>
 800a9b6:	4770      	bx	lr
 800a9b8:	b510      	push	{r4, lr}
 800a9ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a9be:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a9c2:	4291      	cmp	r1, r2
 800a9c4:	d1f9      	bne.n	800a9ba <memcpy+0xe>
 800a9c6:	bd10      	pop	{r4, pc}

0800a9c8 <_free_r>:
 800a9c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a9ca:	2900      	cmp	r1, #0
 800a9cc:	d044      	beq.n	800aa58 <_free_r+0x90>
 800a9ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a9d2:	9001      	str	r0, [sp, #4]
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	f1a1 0404 	sub.w	r4, r1, #4
 800a9da:	bfb8      	it	lt
 800a9dc:	18e4      	addlt	r4, r4, r3
 800a9de:	f000 f83f 	bl	800aa60 <__malloc_lock>
 800a9e2:	4a1e      	ldr	r2, [pc, #120]	; (800aa5c <_free_r+0x94>)
 800a9e4:	9801      	ldr	r0, [sp, #4]
 800a9e6:	6813      	ldr	r3, [r2, #0]
 800a9e8:	b933      	cbnz	r3, 800a9f8 <_free_r+0x30>
 800a9ea:	6063      	str	r3, [r4, #4]
 800a9ec:	6014      	str	r4, [r2, #0]
 800a9ee:	b003      	add	sp, #12
 800a9f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a9f4:	f000 b83a 	b.w	800aa6c <__malloc_unlock>
 800a9f8:	42a3      	cmp	r3, r4
 800a9fa:	d908      	bls.n	800aa0e <_free_r+0x46>
 800a9fc:	6825      	ldr	r5, [r4, #0]
 800a9fe:	1961      	adds	r1, r4, r5
 800aa00:	428b      	cmp	r3, r1
 800aa02:	bf01      	itttt	eq
 800aa04:	6819      	ldreq	r1, [r3, #0]
 800aa06:	685b      	ldreq	r3, [r3, #4]
 800aa08:	1949      	addeq	r1, r1, r5
 800aa0a:	6021      	streq	r1, [r4, #0]
 800aa0c:	e7ed      	b.n	800a9ea <_free_r+0x22>
 800aa0e:	461a      	mov	r2, r3
 800aa10:	685b      	ldr	r3, [r3, #4]
 800aa12:	b10b      	cbz	r3, 800aa18 <_free_r+0x50>
 800aa14:	42a3      	cmp	r3, r4
 800aa16:	d9fa      	bls.n	800aa0e <_free_r+0x46>
 800aa18:	6811      	ldr	r1, [r2, #0]
 800aa1a:	1855      	adds	r5, r2, r1
 800aa1c:	42a5      	cmp	r5, r4
 800aa1e:	d10b      	bne.n	800aa38 <_free_r+0x70>
 800aa20:	6824      	ldr	r4, [r4, #0]
 800aa22:	4421      	add	r1, r4
 800aa24:	1854      	adds	r4, r2, r1
 800aa26:	42a3      	cmp	r3, r4
 800aa28:	6011      	str	r1, [r2, #0]
 800aa2a:	d1e0      	bne.n	800a9ee <_free_r+0x26>
 800aa2c:	681c      	ldr	r4, [r3, #0]
 800aa2e:	685b      	ldr	r3, [r3, #4]
 800aa30:	6053      	str	r3, [r2, #4]
 800aa32:	440c      	add	r4, r1
 800aa34:	6014      	str	r4, [r2, #0]
 800aa36:	e7da      	b.n	800a9ee <_free_r+0x26>
 800aa38:	d902      	bls.n	800aa40 <_free_r+0x78>
 800aa3a:	230c      	movs	r3, #12
 800aa3c:	6003      	str	r3, [r0, #0]
 800aa3e:	e7d6      	b.n	800a9ee <_free_r+0x26>
 800aa40:	6825      	ldr	r5, [r4, #0]
 800aa42:	1961      	adds	r1, r4, r5
 800aa44:	428b      	cmp	r3, r1
 800aa46:	bf04      	itt	eq
 800aa48:	6819      	ldreq	r1, [r3, #0]
 800aa4a:	685b      	ldreq	r3, [r3, #4]
 800aa4c:	6063      	str	r3, [r4, #4]
 800aa4e:	bf04      	itt	eq
 800aa50:	1949      	addeq	r1, r1, r5
 800aa52:	6021      	streq	r1, [r4, #0]
 800aa54:	6054      	str	r4, [r2, #4]
 800aa56:	e7ca      	b.n	800a9ee <_free_r+0x26>
 800aa58:	b003      	add	sp, #12
 800aa5a:	bd30      	pop	{r4, r5, pc}
 800aa5c:	20006948 	.word	0x20006948

0800aa60 <__malloc_lock>:
 800aa60:	4801      	ldr	r0, [pc, #4]	; (800aa68 <__malloc_lock+0x8>)
 800aa62:	f7ff bfa1 	b.w	800a9a8 <__retarget_lock_acquire_recursive>
 800aa66:	bf00      	nop
 800aa68:	20006944 	.word	0x20006944

0800aa6c <__malloc_unlock>:
 800aa6c:	4801      	ldr	r0, [pc, #4]	; (800aa74 <__malloc_unlock+0x8>)
 800aa6e:	f7ff bf9c 	b.w	800a9aa <__retarget_lock_release_recursive>
 800aa72:	bf00      	nop
 800aa74:	20006944 	.word	0x20006944

0800aa78 <_init>:
 800aa78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa7a:	bf00      	nop
 800aa7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa7e:	bc08      	pop	{r3}
 800aa80:	469e      	mov	lr, r3
 800aa82:	4770      	bx	lr

0800aa84 <_fini>:
 800aa84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa86:	bf00      	nop
 800aa88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa8a:	bc08      	pop	{r3}
 800aa8c:	469e      	mov	lr, r3
 800aa8e:	4770      	bx	lr
