
ROBOT_DEV.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a420  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000198  0800a5d0  0800a5d0  0001a5d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a768  0800a768  00020150  2**0
                  CONTENTS
  4 .ARM          00000008  0800a768  0800a768  0001a768  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a770  0800a770  00020150  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a770  0800a770  0001a770  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a774  0800a774  0001a774  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000150  20000000  0800a778  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020150  2**0
                  CONTENTS
 10 .bss          0000680c  20000150  20000150  00020150  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000695c  2000695c  00020150  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020150  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 14 .debug_info   00021e41  00000000  00000000  000201c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00005441  00000000  00000000  00042004  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001cd8  00000000  00000000  00047448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000015f1  00000000  00000000  00049120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00029436  00000000  00000000  0004a711  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000227e3  00000000  00000000  00073b47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e87c7  00000000  00000000  0009632a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00007a84  00000000  00000000  0017eaf4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007a  00000000  00000000  00186578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000150 	.word	0x20000150
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800a5b8 	.word	0x0800a5b8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000154 	.word	0x20000154
 80001ec:	0800a5b8 	.word	0x0800a5b8

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000200:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000204:	f000 b970 	b.w	80004e8 <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9e08      	ldr	r6, [sp, #32]
 8000226:	460d      	mov	r5, r1
 8000228:	4604      	mov	r4, r0
 800022a:	460f      	mov	r7, r1
 800022c:	2b00      	cmp	r3, #0
 800022e:	d14a      	bne.n	80002c6 <__udivmoddi4+0xa6>
 8000230:	428a      	cmp	r2, r1
 8000232:	4694      	mov	ip, r2
 8000234:	d965      	bls.n	8000302 <__udivmoddi4+0xe2>
 8000236:	fab2 f382 	clz	r3, r2
 800023a:	b143      	cbz	r3, 800024e <__udivmoddi4+0x2e>
 800023c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000240:	f1c3 0220 	rsb	r2, r3, #32
 8000244:	409f      	lsls	r7, r3
 8000246:	fa20 f202 	lsr.w	r2, r0, r2
 800024a:	4317      	orrs	r7, r2
 800024c:	409c      	lsls	r4, r3
 800024e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000252:	fa1f f58c 	uxth.w	r5, ip
 8000256:	fbb7 f1fe 	udiv	r1, r7, lr
 800025a:	0c22      	lsrs	r2, r4, #16
 800025c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000260:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000264:	fb01 f005 	mul.w	r0, r1, r5
 8000268:	4290      	cmp	r0, r2
 800026a:	d90a      	bls.n	8000282 <__udivmoddi4+0x62>
 800026c:	eb1c 0202 	adds.w	r2, ip, r2
 8000270:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000274:	f080 811c 	bcs.w	80004b0 <__udivmoddi4+0x290>
 8000278:	4290      	cmp	r0, r2
 800027a:	f240 8119 	bls.w	80004b0 <__udivmoddi4+0x290>
 800027e:	3902      	subs	r1, #2
 8000280:	4462      	add	r2, ip
 8000282:	1a12      	subs	r2, r2, r0
 8000284:	b2a4      	uxth	r4, r4
 8000286:	fbb2 f0fe 	udiv	r0, r2, lr
 800028a:	fb0e 2210 	mls	r2, lr, r0, r2
 800028e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000292:	fb00 f505 	mul.w	r5, r0, r5
 8000296:	42a5      	cmp	r5, r4
 8000298:	d90a      	bls.n	80002b0 <__udivmoddi4+0x90>
 800029a:	eb1c 0404 	adds.w	r4, ip, r4
 800029e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002a2:	f080 8107 	bcs.w	80004b4 <__udivmoddi4+0x294>
 80002a6:	42a5      	cmp	r5, r4
 80002a8:	f240 8104 	bls.w	80004b4 <__udivmoddi4+0x294>
 80002ac:	4464      	add	r4, ip
 80002ae:	3802      	subs	r0, #2
 80002b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002b4:	1b64      	subs	r4, r4, r5
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11e      	cbz	r6, 80002c2 <__udivmoddi4+0xa2>
 80002ba:	40dc      	lsrs	r4, r3
 80002bc:	2300      	movs	r3, #0
 80002be:	e9c6 4300 	strd	r4, r3, [r6]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d908      	bls.n	80002dc <__udivmoddi4+0xbc>
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	f000 80ed 	beq.w	80004aa <__udivmoddi4+0x28a>
 80002d0:	2100      	movs	r1, #0
 80002d2:	e9c6 0500 	strd	r0, r5, [r6]
 80002d6:	4608      	mov	r0, r1
 80002d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002dc:	fab3 f183 	clz	r1, r3
 80002e0:	2900      	cmp	r1, #0
 80002e2:	d149      	bne.n	8000378 <__udivmoddi4+0x158>
 80002e4:	42ab      	cmp	r3, r5
 80002e6:	d302      	bcc.n	80002ee <__udivmoddi4+0xce>
 80002e8:	4282      	cmp	r2, r0
 80002ea:	f200 80f8 	bhi.w	80004de <__udivmoddi4+0x2be>
 80002ee:	1a84      	subs	r4, r0, r2
 80002f0:	eb65 0203 	sbc.w	r2, r5, r3
 80002f4:	2001      	movs	r0, #1
 80002f6:	4617      	mov	r7, r2
 80002f8:	2e00      	cmp	r6, #0
 80002fa:	d0e2      	beq.n	80002c2 <__udivmoddi4+0xa2>
 80002fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000300:	e7df      	b.n	80002c2 <__udivmoddi4+0xa2>
 8000302:	b902      	cbnz	r2, 8000306 <__udivmoddi4+0xe6>
 8000304:	deff      	udf	#255	; 0xff
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	2b00      	cmp	r3, #0
 800030c:	f040 8090 	bne.w	8000430 <__udivmoddi4+0x210>
 8000310:	1a8a      	subs	r2, r1, r2
 8000312:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000316:	fa1f fe8c 	uxth.w	lr, ip
 800031a:	2101      	movs	r1, #1
 800031c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000320:	fb07 2015 	mls	r0, r7, r5, r2
 8000324:	0c22      	lsrs	r2, r4, #16
 8000326:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800032a:	fb0e f005 	mul.w	r0, lr, r5
 800032e:	4290      	cmp	r0, r2
 8000330:	d908      	bls.n	8000344 <__udivmoddi4+0x124>
 8000332:	eb1c 0202 	adds.w	r2, ip, r2
 8000336:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x122>
 800033c:	4290      	cmp	r0, r2
 800033e:	f200 80cb 	bhi.w	80004d8 <__udivmoddi4+0x2b8>
 8000342:	4645      	mov	r5, r8
 8000344:	1a12      	subs	r2, r2, r0
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb2 f0f7 	udiv	r0, r2, r7
 800034c:	fb07 2210 	mls	r2, r7, r0, r2
 8000350:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000354:	fb0e fe00 	mul.w	lr, lr, r0
 8000358:	45a6      	cmp	lr, r4
 800035a:	d908      	bls.n	800036e <__udivmoddi4+0x14e>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000364:	d202      	bcs.n	800036c <__udivmoddi4+0x14c>
 8000366:	45a6      	cmp	lr, r4
 8000368:	f200 80bb 	bhi.w	80004e2 <__udivmoddi4+0x2c2>
 800036c:	4610      	mov	r0, r2
 800036e:	eba4 040e 	sub.w	r4, r4, lr
 8000372:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000376:	e79f      	b.n	80002b8 <__udivmoddi4+0x98>
 8000378:	f1c1 0720 	rsb	r7, r1, #32
 800037c:	408b      	lsls	r3, r1
 800037e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000382:	ea4c 0c03 	orr.w	ip, ip, r3
 8000386:	fa05 f401 	lsl.w	r4, r5, r1
 800038a:	fa20 f307 	lsr.w	r3, r0, r7
 800038e:	40fd      	lsrs	r5, r7
 8000390:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000394:	4323      	orrs	r3, r4
 8000396:	fbb5 f8f9 	udiv	r8, r5, r9
 800039a:	fa1f fe8c 	uxth.w	lr, ip
 800039e:	fb09 5518 	mls	r5, r9, r8, r5
 80003a2:	0c1c      	lsrs	r4, r3, #16
 80003a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003a8:	fb08 f50e 	mul.w	r5, r8, lr
 80003ac:	42a5      	cmp	r5, r4
 80003ae:	fa02 f201 	lsl.w	r2, r2, r1
 80003b2:	fa00 f001 	lsl.w	r0, r0, r1
 80003b6:	d90b      	bls.n	80003d0 <__udivmoddi4+0x1b0>
 80003b8:	eb1c 0404 	adds.w	r4, ip, r4
 80003bc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003c0:	f080 8088 	bcs.w	80004d4 <__udivmoddi4+0x2b4>
 80003c4:	42a5      	cmp	r5, r4
 80003c6:	f240 8085 	bls.w	80004d4 <__udivmoddi4+0x2b4>
 80003ca:	f1a8 0802 	sub.w	r8, r8, #2
 80003ce:	4464      	add	r4, ip
 80003d0:	1b64      	subs	r4, r4, r5
 80003d2:	b29d      	uxth	r5, r3
 80003d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003d8:	fb09 4413 	mls	r4, r9, r3, r4
 80003dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003e4:	45a6      	cmp	lr, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x1da>
 80003e8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ec:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003f0:	d26c      	bcs.n	80004cc <__udivmoddi4+0x2ac>
 80003f2:	45a6      	cmp	lr, r4
 80003f4:	d96a      	bls.n	80004cc <__udivmoddi4+0x2ac>
 80003f6:	3b02      	subs	r3, #2
 80003f8:	4464      	add	r4, ip
 80003fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000402:	eba4 040e 	sub.w	r4, r4, lr
 8000406:	42ac      	cmp	r4, r5
 8000408:	46c8      	mov	r8, r9
 800040a:	46ae      	mov	lr, r5
 800040c:	d356      	bcc.n	80004bc <__udivmoddi4+0x29c>
 800040e:	d053      	beq.n	80004b8 <__udivmoddi4+0x298>
 8000410:	b156      	cbz	r6, 8000428 <__udivmoddi4+0x208>
 8000412:	ebb0 0208 	subs.w	r2, r0, r8
 8000416:	eb64 040e 	sbc.w	r4, r4, lr
 800041a:	fa04 f707 	lsl.w	r7, r4, r7
 800041e:	40ca      	lsrs	r2, r1
 8000420:	40cc      	lsrs	r4, r1
 8000422:	4317      	orrs	r7, r2
 8000424:	e9c6 7400 	strd	r7, r4, [r6]
 8000428:	4618      	mov	r0, r3
 800042a:	2100      	movs	r1, #0
 800042c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000430:	f1c3 0120 	rsb	r1, r3, #32
 8000434:	fa02 fc03 	lsl.w	ip, r2, r3
 8000438:	fa20 f201 	lsr.w	r2, r0, r1
 800043c:	fa25 f101 	lsr.w	r1, r5, r1
 8000440:	409d      	lsls	r5, r3
 8000442:	432a      	orrs	r2, r5
 8000444:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000450:	fb07 1510 	mls	r5, r7, r0, r1
 8000454:	0c11      	lsrs	r1, r2, #16
 8000456:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800045a:	fb00 f50e 	mul.w	r5, r0, lr
 800045e:	428d      	cmp	r5, r1
 8000460:	fa04 f403 	lsl.w	r4, r4, r3
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x258>
 8000466:	eb1c 0101 	adds.w	r1, ip, r1
 800046a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800046e:	d22f      	bcs.n	80004d0 <__udivmoddi4+0x2b0>
 8000470:	428d      	cmp	r5, r1
 8000472:	d92d      	bls.n	80004d0 <__udivmoddi4+0x2b0>
 8000474:	3802      	subs	r0, #2
 8000476:	4461      	add	r1, ip
 8000478:	1b49      	subs	r1, r1, r5
 800047a:	b292      	uxth	r2, r2
 800047c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000480:	fb07 1115 	mls	r1, r7, r5, r1
 8000484:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000488:	fb05 f10e 	mul.w	r1, r5, lr
 800048c:	4291      	cmp	r1, r2
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x282>
 8000490:	eb1c 0202 	adds.w	r2, ip, r2
 8000494:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000498:	d216      	bcs.n	80004c8 <__udivmoddi4+0x2a8>
 800049a:	4291      	cmp	r1, r2
 800049c:	d914      	bls.n	80004c8 <__udivmoddi4+0x2a8>
 800049e:	3d02      	subs	r5, #2
 80004a0:	4462      	add	r2, ip
 80004a2:	1a52      	subs	r2, r2, r1
 80004a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004a8:	e738      	b.n	800031c <__udivmoddi4+0xfc>
 80004aa:	4631      	mov	r1, r6
 80004ac:	4630      	mov	r0, r6
 80004ae:	e708      	b.n	80002c2 <__udivmoddi4+0xa2>
 80004b0:	4639      	mov	r1, r7
 80004b2:	e6e6      	b.n	8000282 <__udivmoddi4+0x62>
 80004b4:	4610      	mov	r0, r2
 80004b6:	e6fb      	b.n	80002b0 <__udivmoddi4+0x90>
 80004b8:	4548      	cmp	r0, r9
 80004ba:	d2a9      	bcs.n	8000410 <__udivmoddi4+0x1f0>
 80004bc:	ebb9 0802 	subs.w	r8, r9, r2
 80004c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004c4:	3b01      	subs	r3, #1
 80004c6:	e7a3      	b.n	8000410 <__udivmoddi4+0x1f0>
 80004c8:	4645      	mov	r5, r8
 80004ca:	e7ea      	b.n	80004a2 <__udivmoddi4+0x282>
 80004cc:	462b      	mov	r3, r5
 80004ce:	e794      	b.n	80003fa <__udivmoddi4+0x1da>
 80004d0:	4640      	mov	r0, r8
 80004d2:	e7d1      	b.n	8000478 <__udivmoddi4+0x258>
 80004d4:	46d0      	mov	r8, sl
 80004d6:	e77b      	b.n	80003d0 <__udivmoddi4+0x1b0>
 80004d8:	3d02      	subs	r5, #2
 80004da:	4462      	add	r2, ip
 80004dc:	e732      	b.n	8000344 <__udivmoddi4+0x124>
 80004de:	4608      	mov	r0, r1
 80004e0:	e70a      	b.n	80002f8 <__udivmoddi4+0xd8>
 80004e2:	4464      	add	r4, ip
 80004e4:	3802      	subs	r0, #2
 80004e6:	e742      	b.n	800036e <__udivmoddi4+0x14e>

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80004f0:	4b17      	ldr	r3, [pc, #92]	; (8000550 <MX_CAN1_Init+0x64>)
 80004f2:	4a18      	ldr	r2, [pc, #96]	; (8000554 <MX_CAN1_Init+0x68>)
 80004f4:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 7;
 80004f6:	4b16      	ldr	r3, [pc, #88]	; (8000550 <MX_CAN1_Init+0x64>)
 80004f8:	2207      	movs	r2, #7
 80004fa:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80004fc:	4b14      	ldr	r3, [pc, #80]	; (8000550 <MX_CAN1_Init+0x64>)
 80004fe:	2200      	movs	r2, #0
 8000500:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000502:	4b13      	ldr	r3, [pc, #76]	; (8000550 <MX_CAN1_Init+0x64>)
 8000504:	2200      	movs	r2, #0
 8000506:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000508:	4b11      	ldr	r3, [pc, #68]	; (8000550 <MX_CAN1_Init+0x64>)
 800050a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800050e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000510:	4b0f      	ldr	r3, [pc, #60]	; (8000550 <MX_CAN1_Init+0x64>)
 8000512:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000516:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000518:	4b0d      	ldr	r3, [pc, #52]	; (8000550 <MX_CAN1_Init+0x64>)
 800051a:	2200      	movs	r2, #0
 800051c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800051e:	4b0c      	ldr	r3, [pc, #48]	; (8000550 <MX_CAN1_Init+0x64>)
 8000520:	2200      	movs	r2, #0
 8000522:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000524:	4b0a      	ldr	r3, [pc, #40]	; (8000550 <MX_CAN1_Init+0x64>)
 8000526:	2200      	movs	r2, #0
 8000528:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800052a:	4b09      	ldr	r3, [pc, #36]	; (8000550 <MX_CAN1_Init+0x64>)
 800052c:	2200      	movs	r2, #0
 800052e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000530:	4b07      	ldr	r3, [pc, #28]	; (8000550 <MX_CAN1_Init+0x64>)
 8000532:	2200      	movs	r2, #0
 8000534:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = ENABLE;
 8000536:	4b06      	ldr	r3, [pc, #24]	; (8000550 <MX_CAN1_Init+0x64>)
 8000538:	2201      	movs	r2, #1
 800053a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800053c:	4804      	ldr	r0, [pc, #16]	; (8000550 <MX_CAN1_Init+0x64>)
 800053e:	f000 fbff 	bl	8000d40 <HAL_CAN_Init>
 8000542:	4603      	mov	r3, r0
 8000544:	2b00      	cmp	r3, #0
 8000546:	d001      	beq.n	800054c <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000548:	f000 fa02 	bl	8000950 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800054c:	bf00      	nop
 800054e:	bd80      	pop	{r7, pc}
 8000550:	2000016c 	.word	0x2000016c
 8000554:	40006400 	.word	0x40006400

08000558 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b08a      	sub	sp, #40	; 0x28
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000560:	f107 0314 	add.w	r3, r7, #20
 8000564:	2200      	movs	r2, #0
 8000566:	601a      	str	r2, [r3, #0]
 8000568:	605a      	str	r2, [r3, #4]
 800056a:	609a      	str	r2, [r3, #8]
 800056c:	60da      	str	r2, [r3, #12]
 800056e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	4a19      	ldr	r2, [pc, #100]	; (80005dc <HAL_CAN_MspInit+0x84>)
 8000576:	4293      	cmp	r3, r2
 8000578:	d12b      	bne.n	80005d2 <HAL_CAN_MspInit+0x7a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800057a:	2300      	movs	r3, #0
 800057c:	613b      	str	r3, [r7, #16]
 800057e:	4b18      	ldr	r3, [pc, #96]	; (80005e0 <HAL_CAN_MspInit+0x88>)
 8000580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000582:	4a17      	ldr	r2, [pc, #92]	; (80005e0 <HAL_CAN_MspInit+0x88>)
 8000584:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000588:	6413      	str	r3, [r2, #64]	; 0x40
 800058a:	4b15      	ldr	r3, [pc, #84]	; (80005e0 <HAL_CAN_MspInit+0x88>)
 800058c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800058e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000592:	613b      	str	r3, [r7, #16]
 8000594:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000596:	2300      	movs	r3, #0
 8000598:	60fb      	str	r3, [r7, #12]
 800059a:	4b11      	ldr	r3, [pc, #68]	; (80005e0 <HAL_CAN_MspInit+0x88>)
 800059c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059e:	4a10      	ldr	r2, [pc, #64]	; (80005e0 <HAL_CAN_MspInit+0x88>)
 80005a0:	f043 0308 	orr.w	r3, r3, #8
 80005a4:	6313      	str	r3, [r2, #48]	; 0x30
 80005a6:	4b0e      	ldr	r3, [pc, #56]	; (80005e0 <HAL_CAN_MspInit+0x88>)
 80005a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005aa:	f003 0308 	and.w	r3, r3, #8
 80005ae:	60fb      	str	r3, [r7, #12]
 80005b0:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80005b2:	2303      	movs	r3, #3
 80005b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005b6:	2302      	movs	r3, #2
 80005b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ba:	2300      	movs	r3, #0
 80005bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005be:	2303      	movs	r3, #3
 80005c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80005c2:	2309      	movs	r3, #9
 80005c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80005c6:	f107 0314 	add.w	r3, r7, #20
 80005ca:	4619      	mov	r1, r3
 80005cc:	4805      	ldr	r0, [pc, #20]	; (80005e4 <HAL_CAN_MspInit+0x8c>)
 80005ce:	f000 fd95 	bl	80010fc <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80005d2:	bf00      	nop
 80005d4:	3728      	adds	r7, #40	; 0x28
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	40006400 	.word	0x40006400
 80005e0:	40023800 	.word	0x40023800
 80005e4:	40020c00 	.word	0x40020c00

080005e8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005ec:	4a14      	ldr	r2, [pc, #80]	; (8000640 <MX_FREERTOS_Init+0x58>)
 80005ee:	2100      	movs	r1, #0
 80005f0:	4814      	ldr	r0, [pc, #80]	; (8000644 <MX_FREERTOS_Init+0x5c>)
 80005f2:	f006 fcab 	bl	8006f4c <osThreadNew>
 80005f6:	4603      	mov	r3, r0
 80005f8:	4a13      	ldr	r2, [pc, #76]	; (8000648 <MX_FREERTOS_Init+0x60>)
 80005fa:	6013      	str	r3, [r2, #0]

  /* creation of Blink_LED_A */
  Blink_LED_AHandle = osThreadNew(Blink_LED_A_t, NULL, &Blink_LED_A_attributes);
 80005fc:	4a13      	ldr	r2, [pc, #76]	; (800064c <MX_FREERTOS_Init+0x64>)
 80005fe:	2100      	movs	r1, #0
 8000600:	4813      	ldr	r0, [pc, #76]	; (8000650 <MX_FREERTOS_Init+0x68>)
 8000602:	f006 fca3 	bl	8006f4c <osThreadNew>
 8000606:	4603      	mov	r3, r0
 8000608:	4a12      	ldr	r2, [pc, #72]	; (8000654 <MX_FREERTOS_Init+0x6c>)
 800060a:	6013      	str	r3, [r2, #0]

  /* creation of Blink_LED_B */
  Blink_LED_BHandle = osThreadNew(Blink_LED_B_t, NULL, &Blink_LED_B_attributes);
 800060c:	4a12      	ldr	r2, [pc, #72]	; (8000658 <MX_FREERTOS_Init+0x70>)
 800060e:	2100      	movs	r1, #0
 8000610:	4812      	ldr	r0, [pc, #72]	; (800065c <MX_FREERTOS_Init+0x74>)
 8000612:	f006 fc9b 	bl	8006f4c <osThreadNew>
 8000616:	4603      	mov	r3, r0
 8000618:	4a11      	ldr	r2, [pc, #68]	; (8000660 <MX_FREERTOS_Init+0x78>)
 800061a:	6013      	str	r3, [r2, #0]

  /* creation of Blink_LED_C */
  Blink_LED_CHandle = osThreadNew(Blink_LED_C_t, NULL, &Blink_LED_C_attributes);
 800061c:	4a11      	ldr	r2, [pc, #68]	; (8000664 <MX_FREERTOS_Init+0x7c>)
 800061e:	2100      	movs	r1, #0
 8000620:	4811      	ldr	r0, [pc, #68]	; (8000668 <MX_FREERTOS_Init+0x80>)
 8000622:	f006 fc93 	bl	8006f4c <osThreadNew>
 8000626:	4603      	mov	r3, r0
 8000628:	4a10      	ldr	r2, [pc, #64]	; (800066c <MX_FREERTOS_Init+0x84>)
 800062a:	6013      	str	r3, [r2, #0]

  /* creation of myTask05 */
  myTask05Handle = osThreadNew(StartTask05, NULL, &myTask05_attributes);
 800062c:	4a10      	ldr	r2, [pc, #64]	; (8000670 <MX_FREERTOS_Init+0x88>)
 800062e:	2100      	movs	r1, #0
 8000630:	4810      	ldr	r0, [pc, #64]	; (8000674 <MX_FREERTOS_Init+0x8c>)
 8000632:	f006 fc8b 	bl	8006f4c <osThreadNew>
 8000636:	4603      	mov	r3, r0
 8000638:	4a0f      	ldr	r2, [pc, #60]	; (8000678 <MX_FREERTOS_Init+0x90>)
 800063a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 800063c:	bf00      	nop
 800063e:	bd80      	pop	{r7, pc}
 8000640:	0800a678 	.word	0x0800a678
 8000644:	0800067d 	.word	0x0800067d
 8000648:	20000194 	.word	0x20000194
 800064c:	0800a69c 	.word	0x0800a69c
 8000650:	08000691 	.word	0x08000691
 8000654:	20000198 	.word	0x20000198
 8000658:	0800a6c0 	.word	0x0800a6c0
 800065c:	080006a1 	.word	0x080006a1
 8000660:	2000019c 	.word	0x2000019c
 8000664:	0800a6e4 	.word	0x0800a6e4
 8000668:	080006b1 	.word	0x080006b1
 800066c:	200001a0 	.word	0x200001a0
 8000670:	0800a708 	.word	0x0800a708
 8000674:	080006c1 	.word	0x080006c1
 8000678:	200001a4 	.word	0x200001a4

0800067c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b082      	sub	sp, #8
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000684:	f009 f992 	bl	80099ac <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000688:	2001      	movs	r0, #1
 800068a:	f006 fcf1 	bl	8007070 <osDelay>
 800068e:	e7fb      	b.n	8000688 <StartDefaultTask+0xc>

08000690 <Blink_LED_A_t>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Blink_LED_A_t */
void Blink_LED_A_t(void *argument)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Blink_LED_A_t */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000698:	2001      	movs	r0, #1
 800069a:	f006 fce9 	bl	8007070 <osDelay>
 800069e:	e7fb      	b.n	8000698 <Blink_LED_A_t+0x8>

080006a0 <Blink_LED_B_t>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Blink_LED_B_t */
void Blink_LED_B_t(void *argument)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Blink_LED_B_t */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80006a8:	2001      	movs	r0, #1
 80006aa:	f006 fce1 	bl	8007070 <osDelay>
 80006ae:	e7fb      	b.n	80006a8 <Blink_LED_B_t+0x8>

080006b0 <Blink_LED_C_t>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Blink_LED_C_t */
void Blink_LED_C_t(void *argument)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Blink_LED_C_t */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80006b8:	2001      	movs	r0, #1
 80006ba:	f006 fcd9 	bl	8007070 <osDelay>
 80006be:	e7fb      	b.n	80006b8 <Blink_LED_C_t+0x8>

080006c0 <StartTask05>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask05 */
void StartTask05(void *argument)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask05 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80006c8:	2001      	movs	r0, #1
 80006ca:	f006 fcd1 	bl	8007070 <osDelay>
 80006ce:	e7fb      	b.n	80006c8 <StartTask05+0x8>

080006d0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b08c      	sub	sp, #48	; 0x30
 80006d4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d6:	f107 031c 	add.w	r3, r7, #28
 80006da:	2200      	movs	r2, #0
 80006dc:	601a      	str	r2, [r3, #0]
 80006de:	605a      	str	r2, [r3, #4]
 80006e0:	609a      	str	r2, [r3, #8]
 80006e2:	60da      	str	r2, [r3, #12]
 80006e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e6:	2300      	movs	r3, #0
 80006e8:	61bb      	str	r3, [r7, #24]
 80006ea:	4b4b      	ldr	r3, [pc, #300]	; (8000818 <MX_GPIO_Init+0x148>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ee:	4a4a      	ldr	r2, [pc, #296]	; (8000818 <MX_GPIO_Init+0x148>)
 80006f0:	f043 0301 	orr.w	r3, r3, #1
 80006f4:	6313      	str	r3, [r2, #48]	; 0x30
 80006f6:	4b48      	ldr	r3, [pc, #288]	; (8000818 <MX_GPIO_Init+0x148>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	f003 0301 	and.w	r3, r3, #1
 80006fe:	61bb      	str	r3, [r7, #24]
 8000700:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000702:	2300      	movs	r3, #0
 8000704:	617b      	str	r3, [r7, #20]
 8000706:	4b44      	ldr	r3, [pc, #272]	; (8000818 <MX_GPIO_Init+0x148>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	4a43      	ldr	r2, [pc, #268]	; (8000818 <MX_GPIO_Init+0x148>)
 800070c:	f043 0308 	orr.w	r3, r3, #8
 8000710:	6313      	str	r3, [r2, #48]	; 0x30
 8000712:	4b41      	ldr	r3, [pc, #260]	; (8000818 <MX_GPIO_Init+0x148>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	f003 0308 	and.w	r3, r3, #8
 800071a:	617b      	str	r3, [r7, #20]
 800071c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800071e:	2300      	movs	r3, #0
 8000720:	613b      	str	r3, [r7, #16]
 8000722:	4b3d      	ldr	r3, [pc, #244]	; (8000818 <MX_GPIO_Init+0x148>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	4a3c      	ldr	r2, [pc, #240]	; (8000818 <MX_GPIO_Init+0x148>)
 8000728:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800072c:	6313      	str	r3, [r2, #48]	; 0x30
 800072e:	4b3a      	ldr	r3, [pc, #232]	; (8000818 <MX_GPIO_Init+0x148>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000736:	613b      	str	r3, [r7, #16]
 8000738:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	60fb      	str	r3, [r7, #12]
 800073e:	4b36      	ldr	r3, [pc, #216]	; (8000818 <MX_GPIO_Init+0x148>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	4a35      	ldr	r2, [pc, #212]	; (8000818 <MX_GPIO_Init+0x148>)
 8000744:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000748:	6313      	str	r3, [r2, #48]	; 0x30
 800074a:	4b33      	ldr	r3, [pc, #204]	; (8000818 <MX_GPIO_Init+0x148>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000752:	60fb      	str	r3, [r7, #12]
 8000754:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	60bb      	str	r3, [r7, #8]
 800075a:	4b2f      	ldr	r3, [pc, #188]	; (8000818 <MX_GPIO_Init+0x148>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	4a2e      	ldr	r2, [pc, #184]	; (8000818 <MX_GPIO_Init+0x148>)
 8000760:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000764:	6313      	str	r3, [r2, #48]	; 0x30
 8000766:	4b2c      	ldr	r3, [pc, #176]	; (8000818 <MX_GPIO_Init+0x148>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800076e:	60bb      	str	r3, [r7, #8]
 8000770:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	607b      	str	r3, [r7, #4]
 8000776:	4b28      	ldr	r3, [pc, #160]	; (8000818 <MX_GPIO_Init+0x148>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	4a27      	ldr	r2, [pc, #156]	; (8000818 <MX_GPIO_Init+0x148>)
 800077c:	f043 0320 	orr.w	r3, r3, #32
 8000780:	6313      	str	r3, [r2, #48]	; 0x30
 8000782:	4b25      	ldr	r3, [pc, #148]	; (8000818 <MX_GPIO_Init+0x148>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	f003 0320 	and.w	r3, r3, #32
 800078a:	607b      	str	r3, [r7, #4]
 800078c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LED_A_Pin|LED_B_Pin|LED_C_Pin|LED_D_Pin
 800078e:	2200      	movs	r2, #0
 8000790:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
 8000794:	4821      	ldr	r0, [pc, #132]	; (800081c <MX_GPIO_Init+0x14c>)
 8000796:	f000 fe5d 	bl	8001454 <HAL_GPIO_WritePin>
                          |LED_E_Pin|LED_F_Pin|LED_G_Pin|LED_H_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI5_NSS_GPIO_Port, SPI5_NSS_Pin, GPIO_PIN_RESET);
 800079a:	2200      	movs	r2, #0
 800079c:	2140      	movs	r1, #64	; 0x40
 800079e:	4820      	ldr	r0, [pc, #128]	; (8000820 <MX_GPIO_Init+0x150>)
 80007a0:	f000 fe58 	bl	8001454 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PIPin PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = PIN_Y_Pin|PIN_X_Pin|PIN_V_Pin|PIN_Z_Pin;
 80007a4:	23e4      	movs	r3, #228	; 0xe4
 80007a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007a8:	2300      	movs	r3, #0
 80007aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ac:	2300      	movs	r3, #0
 80007ae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80007b0:	f107 031c 	add.w	r3, r7, #28
 80007b4:	4619      	mov	r1, r3
 80007b6:	481b      	ldr	r0, [pc, #108]	; (8000824 <MX_GPIO_Init+0x154>)
 80007b8:	f000 fca0 	bl	80010fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = LED_A_Pin|LED_B_Pin|LED_C_Pin|LED_D_Pin
 80007bc:	f44f 73ff 	mov.w	r3, #510	; 0x1fe
 80007c0:	61fb      	str	r3, [r7, #28]
                          |LED_E_Pin|LED_F_Pin|LED_G_Pin|LED_H_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c2:	2301      	movs	r3, #1
 80007c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c6:	2300      	movs	r3, #0
 80007c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ca:	2300      	movs	r3, #0
 80007cc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007ce:	f107 031c 	add.w	r3, r7, #28
 80007d2:	4619      	mov	r1, r3
 80007d4:	4811      	ldr	r0, [pc, #68]	; (800081c <MX_GPIO_Init+0x14c>)
 80007d6:	f000 fc91 	bl	80010fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI5_NSS_Pin;
 80007da:	2340      	movs	r3, #64	; 0x40
 80007dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007de:	2301      	movs	r3, #1
 80007e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e2:	2300      	movs	r3, #0
 80007e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e6:	2300      	movs	r3, #0
 80007e8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI5_NSS_GPIO_Port, &GPIO_InitStruct);
 80007ea:	f107 031c 	add.w	r3, r7, #28
 80007ee:	4619      	mov	r1, r3
 80007f0:	480b      	ldr	r0, [pc, #44]	; (8000820 <MX_GPIO_Init+0x150>)
 80007f2:	f000 fc83 	bl	80010fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = PIN_YA1_Pin|PIN_ZA0_Pin|PIN_XA2_Pin|PIN_W_Pin;
 80007f6:	230f      	movs	r3, #15
 80007f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007fa:	2300      	movs	r3, #0
 80007fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fe:	2300      	movs	r3, #0
 8000800:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000802:	f107 031c 	add.w	r3, r7, #28
 8000806:	4619      	mov	r1, r3
 8000808:	4807      	ldr	r0, [pc, #28]	; (8000828 <MX_GPIO_Init+0x158>)
 800080a:	f000 fc77 	bl	80010fc <HAL_GPIO_Init>

}
 800080e:	bf00      	nop
 8000810:	3730      	adds	r7, #48	; 0x30
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	40023800 	.word	0x40023800
 800081c:	40021800 	.word	0x40021800
 8000820:	40021400 	.word	0x40021400
 8000824:	40022000 	.word	0x40022000
 8000828:	40020000 	.word	0x40020000

0800082c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000830:	f000 fa20 	bl	8000c74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000834:	f000 f810 	bl	8000858 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000838:	f7ff ff4a 	bl	80006d0 <MX_GPIO_Init>
  MX_SPI5_Init();
 800083c:	f000 f88e 	bl	800095c <MX_SPI5_Init>
  MX_CAN1_Init();
 8000840:	f7ff fe54 	bl	80004ec <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */
  init();
 8000844:	f009 fda6 	bl	800a394 <init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000848:	f006 fb36 	bl	8006eb8 <osKernelInitialize>

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 800084c:	f7ff fecc 	bl	80005e8 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000850:	f006 fb56 	bl	8006f00 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000854:	e7fe      	b.n	8000854 <main+0x28>
	...

08000858 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b094      	sub	sp, #80	; 0x50
 800085c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800085e:	f107 0320 	add.w	r3, r7, #32
 8000862:	2230      	movs	r2, #48	; 0x30
 8000864:	2100      	movs	r1, #0
 8000866:	4618      	mov	r0, r3
 8000868:	f009 fdbc 	bl	800a3e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800086c:	f107 030c 	add.w	r3, r7, #12
 8000870:	2200      	movs	r2, #0
 8000872:	601a      	str	r2, [r3, #0]
 8000874:	605a      	str	r2, [r3, #4]
 8000876:	609a      	str	r2, [r3, #8]
 8000878:	60da      	str	r2, [r3, #12]
 800087a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800087c:	2300      	movs	r3, #0
 800087e:	60bb      	str	r3, [r7, #8]
 8000880:	4b28      	ldr	r3, [pc, #160]	; (8000924 <SystemClock_Config+0xcc>)
 8000882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000884:	4a27      	ldr	r2, [pc, #156]	; (8000924 <SystemClock_Config+0xcc>)
 8000886:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800088a:	6413      	str	r3, [r2, #64]	; 0x40
 800088c:	4b25      	ldr	r3, [pc, #148]	; (8000924 <SystemClock_Config+0xcc>)
 800088e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000890:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000894:	60bb      	str	r3, [r7, #8]
 8000896:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000898:	2300      	movs	r3, #0
 800089a:	607b      	str	r3, [r7, #4]
 800089c:	4b22      	ldr	r3, [pc, #136]	; (8000928 <SystemClock_Config+0xd0>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	4a21      	ldr	r2, [pc, #132]	; (8000928 <SystemClock_Config+0xd0>)
 80008a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80008a6:	6013      	str	r3, [r2, #0]
 80008a8:	4b1f      	ldr	r3, [pc, #124]	; (8000928 <SystemClock_Config+0xd0>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008b0:	607b      	str	r3, [r7, #4]
 80008b2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008b4:	2301      	movs	r3, #1
 80008b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008bc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008be:	2302      	movs	r3, #2
 80008c0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008c2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80008c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 80008c8:	2306      	movs	r3, #6
 80008ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80008cc:	23a8      	movs	r3, #168	; 0xa8
 80008ce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008d0:	2302      	movs	r3, #2
 80008d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80008d4:	2307      	movs	r3, #7
 80008d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008d8:	f107 0320 	add.w	r3, r7, #32
 80008dc:	4618      	mov	r0, r3
 80008de:	f002 f83d 	bl	800295c <HAL_RCC_OscConfig>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <SystemClock_Config+0x94>
  {
    Error_Handler();
 80008e8:	f000 f832 	bl	8000950 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ec:	230f      	movs	r3, #15
 80008ee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008f0:	2302      	movs	r3, #2
 80008f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008f4:	2300      	movs	r3, #0
 80008f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008f8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000902:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000904:	f107 030c 	add.w	r3, r7, #12
 8000908:	2105      	movs	r1, #5
 800090a:	4618      	mov	r0, r3
 800090c:	f002 fa9e 	bl	8002e4c <HAL_RCC_ClockConfig>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000916:	f000 f81b 	bl	8000950 <Error_Handler>
  }
}
 800091a:	bf00      	nop
 800091c:	3750      	adds	r7, #80	; 0x50
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	40023800 	.word	0x40023800
 8000928:	40007000 	.word	0x40007000

0800092c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a04      	ldr	r2, [pc, #16]	; (800094c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800093a:	4293      	cmp	r3, r2
 800093c:	d101      	bne.n	8000942 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800093e:	f000 f9bb 	bl	8000cb8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000942:	bf00      	nop
 8000944:	3708      	adds	r7, #8
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	40000c00 	.word	0x40000c00

08000950 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000954:	b672      	cpsid	i
}
 8000956:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000958:	e7fe      	b.n	8000958 <Error_Handler+0x8>
	...

0800095c <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 8000960:	4b17      	ldr	r3, [pc, #92]	; (80009c0 <MX_SPI5_Init+0x64>)
 8000962:	4a18      	ldr	r2, [pc, #96]	; (80009c4 <MX_SPI5_Init+0x68>)
 8000964:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8000966:	4b16      	ldr	r3, [pc, #88]	; (80009c0 <MX_SPI5_Init+0x64>)
 8000968:	f44f 7282 	mov.w	r2, #260	; 0x104
 800096c:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800096e:	4b14      	ldr	r3, [pc, #80]	; (80009c0 <MX_SPI5_Init+0x64>)
 8000970:	2200      	movs	r2, #0
 8000972:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8000974:	4b12      	ldr	r3, [pc, #72]	; (80009c0 <MX_SPI5_Init+0x64>)
 8000976:	2200      	movs	r2, #0
 8000978:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800097a:	4b11      	ldr	r3, [pc, #68]	; (80009c0 <MX_SPI5_Init+0x64>)
 800097c:	2200      	movs	r2, #0
 800097e:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000980:	4b0f      	ldr	r3, [pc, #60]	; (80009c0 <MX_SPI5_Init+0x64>)
 8000982:	2200      	movs	r2, #0
 8000984:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8000986:	4b0e      	ldr	r3, [pc, #56]	; (80009c0 <MX_SPI5_Init+0x64>)
 8000988:	f44f 7200 	mov.w	r2, #512	; 0x200
 800098c:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800098e:	4b0c      	ldr	r3, [pc, #48]	; (80009c0 <MX_SPI5_Init+0x64>)
 8000990:	2230      	movs	r2, #48	; 0x30
 8000992:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000994:	4b0a      	ldr	r3, [pc, #40]	; (80009c0 <MX_SPI5_Init+0x64>)
 8000996:	2200      	movs	r2, #0
 8000998:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800099a:	4b09      	ldr	r3, [pc, #36]	; (80009c0 <MX_SPI5_Init+0x64>)
 800099c:	2200      	movs	r2, #0
 800099e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009a0:	4b07      	ldr	r3, [pc, #28]	; (80009c0 <MX_SPI5_Init+0x64>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 80009a6:	4b06      	ldr	r3, [pc, #24]	; (80009c0 <MX_SPI5_Init+0x64>)
 80009a8:	220a      	movs	r2, #10
 80009aa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80009ac:	4804      	ldr	r0, [pc, #16]	; (80009c0 <MX_SPI5_Init+0x64>)
 80009ae:	f002 fc4b 	bl	8003248 <HAL_SPI_Init>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 80009b8:	f7ff ffca 	bl	8000950 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80009bc:	bf00      	nop
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	200001a8 	.word	0x200001a8
 80009c4:	40015000 	.word	0x40015000

080009c8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b08a      	sub	sp, #40	; 0x28
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d0:	f107 0314 	add.w	r3, r7, #20
 80009d4:	2200      	movs	r2, #0
 80009d6:	601a      	str	r2, [r3, #0]
 80009d8:	605a      	str	r2, [r3, #4]
 80009da:	609a      	str	r2, [r3, #8]
 80009dc:	60da      	str	r2, [r3, #12]
 80009de:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4a19      	ldr	r2, [pc, #100]	; (8000a4c <HAL_SPI_MspInit+0x84>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d12c      	bne.n	8000a44 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80009ea:	2300      	movs	r3, #0
 80009ec:	613b      	str	r3, [r7, #16]
 80009ee:	4b18      	ldr	r3, [pc, #96]	; (8000a50 <HAL_SPI_MspInit+0x88>)
 80009f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009f2:	4a17      	ldr	r2, [pc, #92]	; (8000a50 <HAL_SPI_MspInit+0x88>)
 80009f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80009f8:	6453      	str	r3, [r2, #68]	; 0x44
 80009fa:	4b15      	ldr	r3, [pc, #84]	; (8000a50 <HAL_SPI_MspInit+0x88>)
 80009fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a02:	613b      	str	r3, [r7, #16]
 8000a04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a06:	2300      	movs	r3, #0
 8000a08:	60fb      	str	r3, [r7, #12]
 8000a0a:	4b11      	ldr	r3, [pc, #68]	; (8000a50 <HAL_SPI_MspInit+0x88>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	4a10      	ldr	r2, [pc, #64]	; (8000a50 <HAL_SPI_MspInit+0x88>)
 8000a10:	f043 0320 	orr.w	r3, r3, #32
 8000a14:	6313      	str	r3, [r2, #48]	; 0x30
 8000a16:	4b0e      	ldr	r3, [pc, #56]	; (8000a50 <HAL_SPI_MspInit+0x88>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	f003 0320 	and.w	r3, r3, #32
 8000a1e:	60fb      	str	r3, [r7, #12]
 8000a20:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF9     ------> SPI5_MOSI
    PF8     ------> SPI5_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_8;
 8000a22:	f44f 7360 	mov.w	r3, #896	; 0x380
 8000a26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a28:	2302      	movs	r3, #2
 8000a2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a30:	2303      	movs	r3, #3
 8000a32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8000a34:	2305      	movs	r3, #5
 8000a36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000a38:	f107 0314 	add.w	r3, r7, #20
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	4805      	ldr	r0, [pc, #20]	; (8000a54 <HAL_SPI_MspInit+0x8c>)
 8000a40:	f000 fb5c 	bl	80010fc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8000a44:	bf00      	nop
 8000a46:	3728      	adds	r7, #40	; 0x28
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	40015000 	.word	0x40015000
 8000a50:	40023800 	.word	0x40023800
 8000a54:	40021400 	.word	0x40021400

08000a58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a5e:	2300      	movs	r3, #0
 8000a60:	607b      	str	r3, [r7, #4]
 8000a62:	4b12      	ldr	r3, [pc, #72]	; (8000aac <HAL_MspInit+0x54>)
 8000a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a66:	4a11      	ldr	r2, [pc, #68]	; (8000aac <HAL_MspInit+0x54>)
 8000a68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a6c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a6e:	4b0f      	ldr	r3, [pc, #60]	; (8000aac <HAL_MspInit+0x54>)
 8000a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a76:	607b      	str	r3, [r7, #4]
 8000a78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	603b      	str	r3, [r7, #0]
 8000a7e:	4b0b      	ldr	r3, [pc, #44]	; (8000aac <HAL_MspInit+0x54>)
 8000a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a82:	4a0a      	ldr	r2, [pc, #40]	; (8000aac <HAL_MspInit+0x54>)
 8000a84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a88:	6413      	str	r3, [r2, #64]	; 0x40
 8000a8a:	4b08      	ldr	r3, [pc, #32]	; (8000aac <HAL_MspInit+0x54>)
 8000a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a92:	603b      	str	r3, [r7, #0]
 8000a94:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a96:	2200      	movs	r2, #0
 8000a98:	210f      	movs	r1, #15
 8000a9a:	f06f 0001 	mvn.w	r0, #1
 8000a9e:	f000 fb03 	bl	80010a8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aa2:	bf00      	nop
 8000aa4:	3708      	adds	r7, #8
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	40023800 	.word	0x40023800

08000ab0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b08e      	sub	sp, #56	; 0x38
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000abc:	2300      	movs	r3, #0
 8000abe:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	60fb      	str	r3, [r7, #12]
 8000ac4:	4b33      	ldr	r3, [pc, #204]	; (8000b94 <HAL_InitTick+0xe4>)
 8000ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac8:	4a32      	ldr	r2, [pc, #200]	; (8000b94 <HAL_InitTick+0xe4>)
 8000aca:	f043 0308 	orr.w	r3, r3, #8
 8000ace:	6413      	str	r3, [r2, #64]	; 0x40
 8000ad0:	4b30      	ldr	r3, [pc, #192]	; (8000b94 <HAL_InitTick+0xe4>)
 8000ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad4:	f003 0308 	and.w	r3, r3, #8
 8000ad8:	60fb      	str	r3, [r7, #12]
 8000ada:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000adc:	f107 0210 	add.w	r2, r7, #16
 8000ae0:	f107 0314 	add.w	r3, r7, #20
 8000ae4:	4611      	mov	r1, r2
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f002 fb7c 	bl	80031e4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000aec:	6a3b      	ldr	r3, [r7, #32]
 8000aee:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d103      	bne.n	8000afe <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000af6:	f002 fb61 	bl	80031bc <HAL_RCC_GetPCLK1Freq>
 8000afa:	6378      	str	r0, [r7, #52]	; 0x34
 8000afc:	e004      	b.n	8000b08 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000afe:	f002 fb5d 	bl	80031bc <HAL_RCC_GetPCLK1Freq>
 8000b02:	4603      	mov	r3, r0
 8000b04:	005b      	lsls	r3, r3, #1
 8000b06:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b0a:	4a23      	ldr	r2, [pc, #140]	; (8000b98 <HAL_InitTick+0xe8>)
 8000b0c:	fba2 2303 	umull	r2, r3, r2, r3
 8000b10:	0c9b      	lsrs	r3, r3, #18
 8000b12:	3b01      	subs	r3, #1
 8000b14:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8000b16:	4b21      	ldr	r3, [pc, #132]	; (8000b9c <HAL_InitTick+0xec>)
 8000b18:	4a21      	ldr	r2, [pc, #132]	; (8000ba0 <HAL_InitTick+0xf0>)
 8000b1a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8000b1c:	4b1f      	ldr	r3, [pc, #124]	; (8000b9c <HAL_InitTick+0xec>)
 8000b1e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b22:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8000b24:	4a1d      	ldr	r2, [pc, #116]	; (8000b9c <HAL_InitTick+0xec>)
 8000b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b28:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8000b2a:	4b1c      	ldr	r3, [pc, #112]	; (8000b9c <HAL_InitTick+0xec>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b30:	4b1a      	ldr	r3, [pc, #104]	; (8000b9c <HAL_InitTick+0xec>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b36:	4b19      	ldr	r3, [pc, #100]	; (8000b9c <HAL_InitTick+0xec>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 8000b3c:	4817      	ldr	r0, [pc, #92]	; (8000b9c <HAL_InitTick+0xec>)
 8000b3e:	f002 fc0c 	bl	800335a <HAL_TIM_Base_Init>
 8000b42:	4603      	mov	r3, r0
 8000b44:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000b48:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d11b      	bne.n	8000b88 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 8000b50:	4812      	ldr	r0, [pc, #72]	; (8000b9c <HAL_InitTick+0xec>)
 8000b52:	f002 fc5b 	bl	800340c <HAL_TIM_Base_Start_IT>
 8000b56:	4603      	mov	r3, r0
 8000b58:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000b5c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d111      	bne.n	8000b88 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8000b64:	2032      	movs	r0, #50	; 0x32
 8000b66:	f000 fabb 	bl	80010e0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	2b0f      	cmp	r3, #15
 8000b6e:	d808      	bhi.n	8000b82 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 8000b70:	2200      	movs	r2, #0
 8000b72:	6879      	ldr	r1, [r7, #4]
 8000b74:	2032      	movs	r0, #50	; 0x32
 8000b76:	f000 fa97 	bl	80010a8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b7a:	4a0a      	ldr	r2, [pc, #40]	; (8000ba4 <HAL_InitTick+0xf4>)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	6013      	str	r3, [r2, #0]
 8000b80:	e002      	b.n	8000b88 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000b82:	2301      	movs	r3, #1
 8000b84:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000b88:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	3738      	adds	r7, #56	; 0x38
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	40023800 	.word	0x40023800
 8000b98:	431bde83 	.word	0x431bde83
 8000b9c:	20000200 	.word	0x20000200
 8000ba0:	40000c00 	.word	0x40000c00
 8000ba4:	20000004 	.word	0x20000004

08000ba8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bac:	e7fe      	b.n	8000bac <NMI_Handler+0x4>

08000bae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bae:	b480      	push	{r7}
 8000bb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bb2:	e7fe      	b.n	8000bb2 <HardFault_Handler+0x4>

08000bb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bb8:	e7fe      	b.n	8000bb8 <MemManage_Handler+0x4>

08000bba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bba:	b480      	push	{r7}
 8000bbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bbe:	e7fe      	b.n	8000bbe <BusFault_Handler+0x4>

08000bc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bc4:	e7fe      	b.n	8000bc4 <UsageFault_Handler+0x4>

08000bc6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bc6:	b480      	push	{r7}
 8000bc8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bca:	bf00      	nop
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd2:	4770      	bx	lr

08000bd4 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000bd8:	4802      	ldr	r0, [pc, #8]	; (8000be4 <TIM5_IRQHandler+0x10>)
 8000bda:	f002 fc87 	bl	80034ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000bde:	bf00      	nop
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	20000200 	.word	0x20000200

08000be8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000bec:	4802      	ldr	r0, [pc, #8]	; (8000bf8 <OTG_FS_IRQHandler+0x10>)
 8000bee:	f000 fda8 	bl	8001742 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000bf2:	bf00      	nop
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	20006114 	.word	0x20006114

08000bfc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c00:	4b06      	ldr	r3, [pc, #24]	; (8000c1c <SystemInit+0x20>)
 8000c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c06:	4a05      	ldr	r2, [pc, #20]	; (8000c1c <SystemInit+0x20>)
 8000c08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c10:	bf00      	nop
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	e000ed00 	.word	0xe000ed00

08000c20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c58 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c24:	f7ff ffea 	bl	8000bfc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c28:	480c      	ldr	r0, [pc, #48]	; (8000c5c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c2a:	490d      	ldr	r1, [pc, #52]	; (8000c60 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c2c:	4a0d      	ldr	r2, [pc, #52]	; (8000c64 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c30:	e002      	b.n	8000c38 <LoopCopyDataInit>

08000c32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c36:	3304      	adds	r3, #4

08000c38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c3c:	d3f9      	bcc.n	8000c32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c3e:	4a0a      	ldr	r2, [pc, #40]	; (8000c68 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c40:	4c0a      	ldr	r4, [pc, #40]	; (8000c6c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c44:	e001      	b.n	8000c4a <LoopFillZerobss>

08000c46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c48:	3204      	adds	r2, #4

08000c4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c4c:	d3fb      	bcc.n	8000c46 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000c4e:	f009 fc27 	bl	800a4a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c52:	f7ff fdeb 	bl	800082c <main>
  bx  lr    
 8000c56:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c58:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000c5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c60:	20000150 	.word	0x20000150
  ldr r2, =_sidata
 8000c64:	0800a778 	.word	0x0800a778
  ldr r2, =_sbss
 8000c68:	20000150 	.word	0x20000150
  ldr r4, =_ebss
 8000c6c:	2000695c 	.word	0x2000695c

08000c70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c70:	e7fe      	b.n	8000c70 <ADC_IRQHandler>
	...

08000c74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c78:	4b0e      	ldr	r3, [pc, #56]	; (8000cb4 <HAL_Init+0x40>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a0d      	ldr	r2, [pc, #52]	; (8000cb4 <HAL_Init+0x40>)
 8000c7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c82:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c84:	4b0b      	ldr	r3, [pc, #44]	; (8000cb4 <HAL_Init+0x40>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a0a      	ldr	r2, [pc, #40]	; (8000cb4 <HAL_Init+0x40>)
 8000c8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c8e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c90:	4b08      	ldr	r3, [pc, #32]	; (8000cb4 <HAL_Init+0x40>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a07      	ldr	r2, [pc, #28]	; (8000cb4 <HAL_Init+0x40>)
 8000c96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c9c:	2003      	movs	r0, #3
 8000c9e:	f000 f9f8 	bl	8001092 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ca2:	200f      	movs	r0, #15
 8000ca4:	f7ff ff04 	bl	8000ab0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ca8:	f7ff fed6 	bl	8000a58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cac:	2300      	movs	r3, #0
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	40023c00 	.word	0x40023c00

08000cb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cbc:	4b06      	ldr	r3, [pc, #24]	; (8000cd8 <HAL_IncTick+0x20>)
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	461a      	mov	r2, r3
 8000cc2:	4b06      	ldr	r3, [pc, #24]	; (8000cdc <HAL_IncTick+0x24>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	4413      	add	r3, r2
 8000cc8:	4a04      	ldr	r2, [pc, #16]	; (8000cdc <HAL_IncTick+0x24>)
 8000cca:	6013      	str	r3, [r2, #0]
}
 8000ccc:	bf00      	nop
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop
 8000cd8:	20000008 	.word	0x20000008
 8000cdc:	20000248 	.word	0x20000248

08000ce0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ce4:	4b03      	ldr	r3, [pc, #12]	; (8000cf4 <HAL_GetTick+0x14>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
}
 8000ce8:	4618      	mov	r0, r3
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	20000248 	.word	0x20000248

08000cf8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b084      	sub	sp, #16
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d00:	f7ff ffee 	bl	8000ce0 <HAL_GetTick>
 8000d04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000d10:	d005      	beq.n	8000d1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d12:	4b0a      	ldr	r3, [pc, #40]	; (8000d3c <HAL_Delay+0x44>)
 8000d14:	781b      	ldrb	r3, [r3, #0]
 8000d16:	461a      	mov	r2, r3
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	4413      	add	r3, r2
 8000d1c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d1e:	bf00      	nop
 8000d20:	f7ff ffde 	bl	8000ce0 <HAL_GetTick>
 8000d24:	4602      	mov	r2, r0
 8000d26:	68bb      	ldr	r3, [r7, #8]
 8000d28:	1ad3      	subs	r3, r2, r3
 8000d2a:	68fa      	ldr	r2, [r7, #12]
 8000d2c:	429a      	cmp	r2, r3
 8000d2e:	d8f7      	bhi.n	8000d20 <HAL_Delay+0x28>
  {
  }
}
 8000d30:	bf00      	nop
 8000d32:	bf00      	nop
 8000d34:	3710      	adds	r7, #16
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	20000008 	.word	0x20000008

08000d40 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b084      	sub	sp, #16
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d101      	bne.n	8000d52 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000d4e:	2301      	movs	r3, #1
 8000d50:	e0ed      	b.n	8000f2e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d58:	b2db      	uxtb	r3, r3
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d102      	bne.n	8000d64 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000d5e:	6878      	ldr	r0, [r7, #4]
 8000d60:	f7ff fbfa 	bl	8000558 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	681a      	ldr	r2, [r3, #0]
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	f042 0201 	orr.w	r2, r2, #1
 8000d72:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000d74:	f7ff ffb4 	bl	8000ce0 <HAL_GetTick>
 8000d78:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000d7a:	e012      	b.n	8000da2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000d7c:	f7ff ffb0 	bl	8000ce0 <HAL_GetTick>
 8000d80:	4602      	mov	r2, r0
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	1ad3      	subs	r3, r2, r3
 8000d86:	2b0a      	cmp	r3, #10
 8000d88:	d90b      	bls.n	8000da2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d8e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	2205      	movs	r2, #5
 8000d9a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	e0c5      	b.n	8000f2e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	f003 0301 	and.w	r3, r3, #1
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d0e5      	beq.n	8000d7c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	681a      	ldr	r2, [r3, #0]
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	f022 0202 	bic.w	r2, r2, #2
 8000dbe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000dc0:	f7ff ff8e 	bl	8000ce0 <HAL_GetTick>
 8000dc4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000dc6:	e012      	b.n	8000dee <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000dc8:	f7ff ff8a 	bl	8000ce0 <HAL_GetTick>
 8000dcc:	4602      	mov	r2, r0
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	1ad3      	subs	r3, r2, r3
 8000dd2:	2b0a      	cmp	r3, #10
 8000dd4:	d90b      	bls.n	8000dee <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dda:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	2205      	movs	r2, #5
 8000de6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000dea:	2301      	movs	r3, #1
 8000dec:	e09f      	b.n	8000f2e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	f003 0302 	and.w	r3, r3, #2
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d1e5      	bne.n	8000dc8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	7e1b      	ldrb	r3, [r3, #24]
 8000e00:	2b01      	cmp	r3, #1
 8000e02:	d108      	bne.n	8000e16 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	681a      	ldr	r2, [r3, #0]
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000e12:	601a      	str	r2, [r3, #0]
 8000e14:	e007      	b.n	8000e26 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	681a      	ldr	r2, [r3, #0]
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000e24:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	7e5b      	ldrb	r3, [r3, #25]
 8000e2a:	2b01      	cmp	r3, #1
 8000e2c:	d108      	bne.n	8000e40 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	681a      	ldr	r2, [r3, #0]
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000e3c:	601a      	str	r2, [r3, #0]
 8000e3e:	e007      	b.n	8000e50 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	681a      	ldr	r2, [r3, #0]
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000e4e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	7e9b      	ldrb	r3, [r3, #26]
 8000e54:	2b01      	cmp	r3, #1
 8000e56:	d108      	bne.n	8000e6a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	681a      	ldr	r2, [r3, #0]
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	f042 0220 	orr.w	r2, r2, #32
 8000e66:	601a      	str	r2, [r3, #0]
 8000e68:	e007      	b.n	8000e7a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	681a      	ldr	r2, [r3, #0]
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	f022 0220 	bic.w	r2, r2, #32
 8000e78:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	7edb      	ldrb	r3, [r3, #27]
 8000e7e:	2b01      	cmp	r3, #1
 8000e80:	d108      	bne.n	8000e94 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	681a      	ldr	r2, [r3, #0]
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f022 0210 	bic.w	r2, r2, #16
 8000e90:	601a      	str	r2, [r3, #0]
 8000e92:	e007      	b.n	8000ea4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	681a      	ldr	r2, [r3, #0]
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	f042 0210 	orr.w	r2, r2, #16
 8000ea2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	7f1b      	ldrb	r3, [r3, #28]
 8000ea8:	2b01      	cmp	r3, #1
 8000eaa:	d108      	bne.n	8000ebe <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	681a      	ldr	r2, [r3, #0]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f042 0208 	orr.w	r2, r2, #8
 8000eba:	601a      	str	r2, [r3, #0]
 8000ebc:	e007      	b.n	8000ece <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	681a      	ldr	r2, [r3, #0]
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	f022 0208 	bic.w	r2, r2, #8
 8000ecc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	7f5b      	ldrb	r3, [r3, #29]
 8000ed2:	2b01      	cmp	r3, #1
 8000ed4:	d108      	bne.n	8000ee8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	681a      	ldr	r2, [r3, #0]
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f042 0204 	orr.w	r2, r2, #4
 8000ee4:	601a      	str	r2, [r3, #0]
 8000ee6:	e007      	b.n	8000ef8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	681a      	ldr	r2, [r3, #0]
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	f022 0204 	bic.w	r2, r2, #4
 8000ef6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	689a      	ldr	r2, [r3, #8]
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	68db      	ldr	r3, [r3, #12]
 8000f00:	431a      	orrs	r2, r3
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	691b      	ldr	r3, [r3, #16]
 8000f06:	431a      	orrs	r2, r3
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	695b      	ldr	r3, [r3, #20]
 8000f0c:	ea42 0103 	orr.w	r1, r2, r3
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	1e5a      	subs	r2, r3, #1
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	430a      	orrs	r2, r1
 8000f1c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	2200      	movs	r2, #0
 8000f22:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	2201      	movs	r2, #1
 8000f28:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000f2c:	2300      	movs	r3, #0
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	3710      	adds	r7, #16
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
	...

08000f38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b085      	sub	sp, #20
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	f003 0307 	and.w	r3, r3, #7
 8000f46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f48:	4b0c      	ldr	r3, [pc, #48]	; (8000f7c <__NVIC_SetPriorityGrouping+0x44>)
 8000f4a:	68db      	ldr	r3, [r3, #12]
 8000f4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f4e:	68ba      	ldr	r2, [r7, #8]
 8000f50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f54:	4013      	ands	r3, r2
 8000f56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f5c:	68bb      	ldr	r3, [r7, #8]
 8000f5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f6a:	4a04      	ldr	r2, [pc, #16]	; (8000f7c <__NVIC_SetPriorityGrouping+0x44>)
 8000f6c:	68bb      	ldr	r3, [r7, #8]
 8000f6e:	60d3      	str	r3, [r2, #12]
}
 8000f70:	bf00      	nop
 8000f72:	3714      	adds	r7, #20
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr
 8000f7c:	e000ed00 	.word	0xe000ed00

08000f80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f84:	4b04      	ldr	r3, [pc, #16]	; (8000f98 <__NVIC_GetPriorityGrouping+0x18>)
 8000f86:	68db      	ldr	r3, [r3, #12]
 8000f88:	0a1b      	lsrs	r3, r3, #8
 8000f8a:	f003 0307 	and.w	r3, r3, #7
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr
 8000f98:	e000ed00 	.word	0xe000ed00

08000f9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	db0b      	blt.n	8000fc6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fae:	79fb      	ldrb	r3, [r7, #7]
 8000fb0:	f003 021f 	and.w	r2, r3, #31
 8000fb4:	4907      	ldr	r1, [pc, #28]	; (8000fd4 <__NVIC_EnableIRQ+0x38>)
 8000fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fba:	095b      	lsrs	r3, r3, #5
 8000fbc:	2001      	movs	r0, #1
 8000fbe:	fa00 f202 	lsl.w	r2, r0, r2
 8000fc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000fc6:	bf00      	nop
 8000fc8:	370c      	adds	r7, #12
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop
 8000fd4:	e000e100 	.word	0xe000e100

08000fd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	4603      	mov	r3, r0
 8000fe0:	6039      	str	r1, [r7, #0]
 8000fe2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fe4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	db0a      	blt.n	8001002 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	b2da      	uxtb	r2, r3
 8000ff0:	490c      	ldr	r1, [pc, #48]	; (8001024 <__NVIC_SetPriority+0x4c>)
 8000ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff6:	0112      	lsls	r2, r2, #4
 8000ff8:	b2d2      	uxtb	r2, r2
 8000ffa:	440b      	add	r3, r1
 8000ffc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001000:	e00a      	b.n	8001018 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	b2da      	uxtb	r2, r3
 8001006:	4908      	ldr	r1, [pc, #32]	; (8001028 <__NVIC_SetPriority+0x50>)
 8001008:	79fb      	ldrb	r3, [r7, #7]
 800100a:	f003 030f 	and.w	r3, r3, #15
 800100e:	3b04      	subs	r3, #4
 8001010:	0112      	lsls	r2, r2, #4
 8001012:	b2d2      	uxtb	r2, r2
 8001014:	440b      	add	r3, r1
 8001016:	761a      	strb	r2, [r3, #24]
}
 8001018:	bf00      	nop
 800101a:	370c      	adds	r7, #12
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr
 8001024:	e000e100 	.word	0xe000e100
 8001028:	e000ed00 	.word	0xe000ed00

0800102c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800102c:	b480      	push	{r7}
 800102e:	b089      	sub	sp, #36	; 0x24
 8001030:	af00      	add	r7, sp, #0
 8001032:	60f8      	str	r0, [r7, #12]
 8001034:	60b9      	str	r1, [r7, #8]
 8001036:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	f003 0307 	and.w	r3, r3, #7
 800103e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001040:	69fb      	ldr	r3, [r7, #28]
 8001042:	f1c3 0307 	rsb	r3, r3, #7
 8001046:	2b04      	cmp	r3, #4
 8001048:	bf28      	it	cs
 800104a:	2304      	movcs	r3, #4
 800104c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	3304      	adds	r3, #4
 8001052:	2b06      	cmp	r3, #6
 8001054:	d902      	bls.n	800105c <NVIC_EncodePriority+0x30>
 8001056:	69fb      	ldr	r3, [r7, #28]
 8001058:	3b03      	subs	r3, #3
 800105a:	e000      	b.n	800105e <NVIC_EncodePriority+0x32>
 800105c:	2300      	movs	r3, #0
 800105e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001060:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001064:	69bb      	ldr	r3, [r7, #24]
 8001066:	fa02 f303 	lsl.w	r3, r2, r3
 800106a:	43da      	mvns	r2, r3
 800106c:	68bb      	ldr	r3, [r7, #8]
 800106e:	401a      	ands	r2, r3
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001074:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	fa01 f303 	lsl.w	r3, r1, r3
 800107e:	43d9      	mvns	r1, r3
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001084:	4313      	orrs	r3, r2
         );
}
 8001086:	4618      	mov	r0, r3
 8001088:	3724      	adds	r7, #36	; 0x24
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr

08001092 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001092:	b580      	push	{r7, lr}
 8001094:	b082      	sub	sp, #8
 8001096:	af00      	add	r7, sp, #0
 8001098:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800109a:	6878      	ldr	r0, [r7, #4]
 800109c:	f7ff ff4c 	bl	8000f38 <__NVIC_SetPriorityGrouping>
}
 80010a0:	bf00      	nop
 80010a2:	3708      	adds	r7, #8
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}

080010a8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b086      	sub	sp, #24
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	4603      	mov	r3, r0
 80010b0:	60b9      	str	r1, [r7, #8]
 80010b2:	607a      	str	r2, [r7, #4]
 80010b4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010b6:	2300      	movs	r3, #0
 80010b8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010ba:	f7ff ff61 	bl	8000f80 <__NVIC_GetPriorityGrouping>
 80010be:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010c0:	687a      	ldr	r2, [r7, #4]
 80010c2:	68b9      	ldr	r1, [r7, #8]
 80010c4:	6978      	ldr	r0, [r7, #20]
 80010c6:	f7ff ffb1 	bl	800102c <NVIC_EncodePriority>
 80010ca:	4602      	mov	r2, r0
 80010cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010d0:	4611      	mov	r1, r2
 80010d2:	4618      	mov	r0, r3
 80010d4:	f7ff ff80 	bl	8000fd8 <__NVIC_SetPriority>
}
 80010d8:	bf00      	nop
 80010da:	3718      	adds	r7, #24
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}

080010e0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	4603      	mov	r3, r0
 80010e8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ee:	4618      	mov	r0, r3
 80010f0:	f7ff ff54 	bl	8000f9c <__NVIC_EnableIRQ>
}
 80010f4:	bf00      	nop
 80010f6:	3708      	adds	r7, #8
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}

080010fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b089      	sub	sp, #36	; 0x24
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001106:	2300      	movs	r3, #0
 8001108:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800110a:	2300      	movs	r3, #0
 800110c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800110e:	2300      	movs	r3, #0
 8001110:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001112:	2300      	movs	r3, #0
 8001114:	61fb      	str	r3, [r7, #28]
 8001116:	e177      	b.n	8001408 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001118:	2201      	movs	r2, #1
 800111a:	69fb      	ldr	r3, [r7, #28]
 800111c:	fa02 f303 	lsl.w	r3, r2, r3
 8001120:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	697a      	ldr	r2, [r7, #20]
 8001128:	4013      	ands	r3, r2
 800112a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800112c:	693a      	ldr	r2, [r7, #16]
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	429a      	cmp	r2, r3
 8001132:	f040 8166 	bne.w	8001402 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	f003 0303 	and.w	r3, r3, #3
 800113e:	2b01      	cmp	r3, #1
 8001140:	d005      	beq.n	800114e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800114a:	2b02      	cmp	r3, #2
 800114c:	d130      	bne.n	80011b0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	689b      	ldr	r3, [r3, #8]
 8001152:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001154:	69fb      	ldr	r3, [r7, #28]
 8001156:	005b      	lsls	r3, r3, #1
 8001158:	2203      	movs	r2, #3
 800115a:	fa02 f303 	lsl.w	r3, r2, r3
 800115e:	43db      	mvns	r3, r3
 8001160:	69ba      	ldr	r2, [r7, #24]
 8001162:	4013      	ands	r3, r2
 8001164:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	68da      	ldr	r2, [r3, #12]
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	005b      	lsls	r3, r3, #1
 800116e:	fa02 f303 	lsl.w	r3, r2, r3
 8001172:	69ba      	ldr	r2, [r7, #24]
 8001174:	4313      	orrs	r3, r2
 8001176:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	69ba      	ldr	r2, [r7, #24]
 800117c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001184:	2201      	movs	r2, #1
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	fa02 f303 	lsl.w	r3, r2, r3
 800118c:	43db      	mvns	r3, r3
 800118e:	69ba      	ldr	r2, [r7, #24]
 8001190:	4013      	ands	r3, r2
 8001192:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	091b      	lsrs	r3, r3, #4
 800119a:	f003 0201 	and.w	r2, r3, #1
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	fa02 f303 	lsl.w	r3, r2, r3
 80011a4:	69ba      	ldr	r2, [r7, #24]
 80011a6:	4313      	orrs	r3, r2
 80011a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	69ba      	ldr	r2, [r7, #24]
 80011ae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	f003 0303 	and.w	r3, r3, #3
 80011b8:	2b03      	cmp	r3, #3
 80011ba:	d017      	beq.n	80011ec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	68db      	ldr	r3, [r3, #12]
 80011c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011c2:	69fb      	ldr	r3, [r7, #28]
 80011c4:	005b      	lsls	r3, r3, #1
 80011c6:	2203      	movs	r2, #3
 80011c8:	fa02 f303 	lsl.w	r3, r2, r3
 80011cc:	43db      	mvns	r3, r3
 80011ce:	69ba      	ldr	r2, [r7, #24]
 80011d0:	4013      	ands	r3, r2
 80011d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	689a      	ldr	r2, [r3, #8]
 80011d8:	69fb      	ldr	r3, [r7, #28]
 80011da:	005b      	lsls	r3, r3, #1
 80011dc:	fa02 f303 	lsl.w	r3, r2, r3
 80011e0:	69ba      	ldr	r2, [r7, #24]
 80011e2:	4313      	orrs	r3, r2
 80011e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f003 0303 	and.w	r3, r3, #3
 80011f4:	2b02      	cmp	r3, #2
 80011f6:	d123      	bne.n	8001240 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	08da      	lsrs	r2, r3, #3
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	3208      	adds	r2, #8
 8001200:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001204:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	f003 0307 	and.w	r3, r3, #7
 800120c:	009b      	lsls	r3, r3, #2
 800120e:	220f      	movs	r2, #15
 8001210:	fa02 f303 	lsl.w	r3, r2, r3
 8001214:	43db      	mvns	r3, r3
 8001216:	69ba      	ldr	r2, [r7, #24]
 8001218:	4013      	ands	r3, r2
 800121a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	691a      	ldr	r2, [r3, #16]
 8001220:	69fb      	ldr	r3, [r7, #28]
 8001222:	f003 0307 	and.w	r3, r3, #7
 8001226:	009b      	lsls	r3, r3, #2
 8001228:	fa02 f303 	lsl.w	r3, r2, r3
 800122c:	69ba      	ldr	r2, [r7, #24]
 800122e:	4313      	orrs	r3, r2
 8001230:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	08da      	lsrs	r2, r3, #3
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	3208      	adds	r2, #8
 800123a:	69b9      	ldr	r1, [r7, #24]
 800123c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	005b      	lsls	r3, r3, #1
 800124a:	2203      	movs	r2, #3
 800124c:	fa02 f303 	lsl.w	r3, r2, r3
 8001250:	43db      	mvns	r3, r3
 8001252:	69ba      	ldr	r2, [r7, #24]
 8001254:	4013      	ands	r3, r2
 8001256:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	f003 0203 	and.w	r2, r3, #3
 8001260:	69fb      	ldr	r3, [r7, #28]
 8001262:	005b      	lsls	r3, r3, #1
 8001264:	fa02 f303 	lsl.w	r3, r2, r3
 8001268:	69ba      	ldr	r2, [r7, #24]
 800126a:	4313      	orrs	r3, r2
 800126c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	69ba      	ldr	r2, [r7, #24]
 8001272:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800127c:	2b00      	cmp	r3, #0
 800127e:	f000 80c0 	beq.w	8001402 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001282:	2300      	movs	r3, #0
 8001284:	60fb      	str	r3, [r7, #12]
 8001286:	4b66      	ldr	r3, [pc, #408]	; (8001420 <HAL_GPIO_Init+0x324>)
 8001288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800128a:	4a65      	ldr	r2, [pc, #404]	; (8001420 <HAL_GPIO_Init+0x324>)
 800128c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001290:	6453      	str	r3, [r2, #68]	; 0x44
 8001292:	4b63      	ldr	r3, [pc, #396]	; (8001420 <HAL_GPIO_Init+0x324>)
 8001294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001296:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800129a:	60fb      	str	r3, [r7, #12]
 800129c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800129e:	4a61      	ldr	r2, [pc, #388]	; (8001424 <HAL_GPIO_Init+0x328>)
 80012a0:	69fb      	ldr	r3, [r7, #28]
 80012a2:	089b      	lsrs	r3, r3, #2
 80012a4:	3302      	adds	r3, #2
 80012a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012ac:	69fb      	ldr	r3, [r7, #28]
 80012ae:	f003 0303 	and.w	r3, r3, #3
 80012b2:	009b      	lsls	r3, r3, #2
 80012b4:	220f      	movs	r2, #15
 80012b6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ba:	43db      	mvns	r3, r3
 80012bc:	69ba      	ldr	r2, [r7, #24]
 80012be:	4013      	ands	r3, r2
 80012c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4a58      	ldr	r2, [pc, #352]	; (8001428 <HAL_GPIO_Init+0x32c>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d037      	beq.n	800133a <HAL_GPIO_Init+0x23e>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4a57      	ldr	r2, [pc, #348]	; (800142c <HAL_GPIO_Init+0x330>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d031      	beq.n	8001336 <HAL_GPIO_Init+0x23a>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4a56      	ldr	r2, [pc, #344]	; (8001430 <HAL_GPIO_Init+0x334>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d02b      	beq.n	8001332 <HAL_GPIO_Init+0x236>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	4a55      	ldr	r2, [pc, #340]	; (8001434 <HAL_GPIO_Init+0x338>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d025      	beq.n	800132e <HAL_GPIO_Init+0x232>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4a54      	ldr	r2, [pc, #336]	; (8001438 <HAL_GPIO_Init+0x33c>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d01f      	beq.n	800132a <HAL_GPIO_Init+0x22e>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4a53      	ldr	r2, [pc, #332]	; (800143c <HAL_GPIO_Init+0x340>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d019      	beq.n	8001326 <HAL_GPIO_Init+0x22a>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4a52      	ldr	r2, [pc, #328]	; (8001440 <HAL_GPIO_Init+0x344>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d013      	beq.n	8001322 <HAL_GPIO_Init+0x226>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	4a51      	ldr	r2, [pc, #324]	; (8001444 <HAL_GPIO_Init+0x348>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d00d      	beq.n	800131e <HAL_GPIO_Init+0x222>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4a50      	ldr	r2, [pc, #320]	; (8001448 <HAL_GPIO_Init+0x34c>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d007      	beq.n	800131a <HAL_GPIO_Init+0x21e>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4a4f      	ldr	r2, [pc, #316]	; (800144c <HAL_GPIO_Init+0x350>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d101      	bne.n	8001316 <HAL_GPIO_Init+0x21a>
 8001312:	2309      	movs	r3, #9
 8001314:	e012      	b.n	800133c <HAL_GPIO_Init+0x240>
 8001316:	230a      	movs	r3, #10
 8001318:	e010      	b.n	800133c <HAL_GPIO_Init+0x240>
 800131a:	2308      	movs	r3, #8
 800131c:	e00e      	b.n	800133c <HAL_GPIO_Init+0x240>
 800131e:	2307      	movs	r3, #7
 8001320:	e00c      	b.n	800133c <HAL_GPIO_Init+0x240>
 8001322:	2306      	movs	r3, #6
 8001324:	e00a      	b.n	800133c <HAL_GPIO_Init+0x240>
 8001326:	2305      	movs	r3, #5
 8001328:	e008      	b.n	800133c <HAL_GPIO_Init+0x240>
 800132a:	2304      	movs	r3, #4
 800132c:	e006      	b.n	800133c <HAL_GPIO_Init+0x240>
 800132e:	2303      	movs	r3, #3
 8001330:	e004      	b.n	800133c <HAL_GPIO_Init+0x240>
 8001332:	2302      	movs	r3, #2
 8001334:	e002      	b.n	800133c <HAL_GPIO_Init+0x240>
 8001336:	2301      	movs	r3, #1
 8001338:	e000      	b.n	800133c <HAL_GPIO_Init+0x240>
 800133a:	2300      	movs	r3, #0
 800133c:	69fa      	ldr	r2, [r7, #28]
 800133e:	f002 0203 	and.w	r2, r2, #3
 8001342:	0092      	lsls	r2, r2, #2
 8001344:	4093      	lsls	r3, r2
 8001346:	69ba      	ldr	r2, [r7, #24]
 8001348:	4313      	orrs	r3, r2
 800134a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800134c:	4935      	ldr	r1, [pc, #212]	; (8001424 <HAL_GPIO_Init+0x328>)
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	089b      	lsrs	r3, r3, #2
 8001352:	3302      	adds	r3, #2
 8001354:	69ba      	ldr	r2, [r7, #24]
 8001356:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800135a:	4b3d      	ldr	r3, [pc, #244]	; (8001450 <HAL_GPIO_Init+0x354>)
 800135c:	689b      	ldr	r3, [r3, #8]
 800135e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	43db      	mvns	r3, r3
 8001364:	69ba      	ldr	r2, [r7, #24]
 8001366:	4013      	ands	r3, r2
 8001368:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001372:	2b00      	cmp	r3, #0
 8001374:	d003      	beq.n	800137e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001376:	69ba      	ldr	r2, [r7, #24]
 8001378:	693b      	ldr	r3, [r7, #16]
 800137a:	4313      	orrs	r3, r2
 800137c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800137e:	4a34      	ldr	r2, [pc, #208]	; (8001450 <HAL_GPIO_Init+0x354>)
 8001380:	69bb      	ldr	r3, [r7, #24]
 8001382:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001384:	4b32      	ldr	r3, [pc, #200]	; (8001450 <HAL_GPIO_Init+0x354>)
 8001386:	68db      	ldr	r3, [r3, #12]
 8001388:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	43db      	mvns	r3, r3
 800138e:	69ba      	ldr	r2, [r7, #24]
 8001390:	4013      	ands	r3, r2
 8001392:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800139c:	2b00      	cmp	r3, #0
 800139e:	d003      	beq.n	80013a8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80013a0:	69ba      	ldr	r2, [r7, #24]
 80013a2:	693b      	ldr	r3, [r7, #16]
 80013a4:	4313      	orrs	r3, r2
 80013a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013a8:	4a29      	ldr	r2, [pc, #164]	; (8001450 <HAL_GPIO_Init+0x354>)
 80013aa:	69bb      	ldr	r3, [r7, #24]
 80013ac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013ae:	4b28      	ldr	r3, [pc, #160]	; (8001450 <HAL_GPIO_Init+0x354>)
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	43db      	mvns	r3, r3
 80013b8:	69ba      	ldr	r2, [r7, #24]
 80013ba:	4013      	ands	r3, r2
 80013bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d003      	beq.n	80013d2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80013ca:	69ba      	ldr	r2, [r7, #24]
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	4313      	orrs	r3, r2
 80013d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013d2:	4a1f      	ldr	r2, [pc, #124]	; (8001450 <HAL_GPIO_Init+0x354>)
 80013d4:	69bb      	ldr	r3, [r7, #24]
 80013d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013d8:	4b1d      	ldr	r3, [pc, #116]	; (8001450 <HAL_GPIO_Init+0x354>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	43db      	mvns	r3, r3
 80013e2:	69ba      	ldr	r2, [r7, #24]
 80013e4:	4013      	ands	r3, r2
 80013e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d003      	beq.n	80013fc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80013f4:	69ba      	ldr	r2, [r7, #24]
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	4313      	orrs	r3, r2
 80013fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013fc:	4a14      	ldr	r2, [pc, #80]	; (8001450 <HAL_GPIO_Init+0x354>)
 80013fe:	69bb      	ldr	r3, [r7, #24]
 8001400:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	3301      	adds	r3, #1
 8001406:	61fb      	str	r3, [r7, #28]
 8001408:	69fb      	ldr	r3, [r7, #28]
 800140a:	2b0f      	cmp	r3, #15
 800140c:	f67f ae84 	bls.w	8001118 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001410:	bf00      	nop
 8001412:	bf00      	nop
 8001414:	3724      	adds	r7, #36	; 0x24
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	40023800 	.word	0x40023800
 8001424:	40013800 	.word	0x40013800
 8001428:	40020000 	.word	0x40020000
 800142c:	40020400 	.word	0x40020400
 8001430:	40020800 	.word	0x40020800
 8001434:	40020c00 	.word	0x40020c00
 8001438:	40021000 	.word	0x40021000
 800143c:	40021400 	.word	0x40021400
 8001440:	40021800 	.word	0x40021800
 8001444:	40021c00 	.word	0x40021c00
 8001448:	40022000 	.word	0x40022000
 800144c:	40022400 	.word	0x40022400
 8001450:	40013c00 	.word	0x40013c00

08001454 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001454:	b480      	push	{r7}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
 800145c:	460b      	mov	r3, r1
 800145e:	807b      	strh	r3, [r7, #2]
 8001460:	4613      	mov	r3, r2
 8001462:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001464:	787b      	ldrb	r3, [r7, #1]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d003      	beq.n	8001472 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800146a:	887a      	ldrh	r2, [r7, #2]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001470:	e003      	b.n	800147a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001472:	887b      	ldrh	r3, [r7, #2]
 8001474:	041a      	lsls	r2, r3, #16
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	619a      	str	r2, [r3, #24]
}
 800147a:	bf00      	nop
 800147c:	370c      	adds	r7, #12
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr

08001486 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001486:	b480      	push	{r7}
 8001488:	b085      	sub	sp, #20
 800148a:	af00      	add	r7, sp, #0
 800148c:	6078      	str	r0, [r7, #4]
 800148e:	460b      	mov	r3, r1
 8001490:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	695b      	ldr	r3, [r3, #20]
 8001496:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001498:	887a      	ldrh	r2, [r7, #2]
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	4013      	ands	r3, r2
 800149e:	041a      	lsls	r2, r3, #16
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	43d9      	mvns	r1, r3
 80014a4:	887b      	ldrh	r3, [r7, #2]
 80014a6:	400b      	ands	r3, r1
 80014a8:	431a      	orrs	r2, r3
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	619a      	str	r2, [r3, #24]
}
 80014ae:	bf00      	nop
 80014b0:	3714      	adds	r7, #20
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr

080014ba <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80014ba:	b580      	push	{r7, lr}
 80014bc:	b086      	sub	sp, #24
 80014be:	af02      	add	r7, sp, #8
 80014c0:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d101      	bne.n	80014cc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80014c8:	2301      	movs	r3, #1
 80014ca:	e101      	b.n	80016d0 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d106      	bne.n	80014ec <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2200      	movs	r2, #0
 80014e2:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80014e6:	6878      	ldr	r0, [r7, #4]
 80014e8:	f008 fc40 	bl	8009d6c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2203      	movs	r2, #3
 80014f0:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80014fa:	d102      	bne.n	8001502 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2200      	movs	r2, #0
 8001500:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4618      	mov	r0, r3
 8001508:	f002 fadf 	bl	8003aca <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6818      	ldr	r0, [r3, #0]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	7c1a      	ldrb	r2, [r3, #16]
 8001514:	f88d 2000 	strb.w	r2, [sp]
 8001518:	3304      	adds	r3, #4
 800151a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800151c:	f002 f9be 	bl	800389c <USB_CoreInit>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d005      	beq.n	8001532 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2202      	movs	r2, #2
 800152a:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 800152e:	2301      	movs	r3, #1
 8001530:	e0ce      	b.n	80016d0 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	2100      	movs	r1, #0
 8001538:	4618      	mov	r0, r3
 800153a:	f002 fad7 	bl	8003aec <USB_SetCurrentMode>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d005      	beq.n	8001550 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2202      	movs	r2, #2
 8001548:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 800154c:	2301      	movs	r3, #1
 800154e:	e0bf      	b.n	80016d0 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001550:	2300      	movs	r3, #0
 8001552:	73fb      	strb	r3, [r7, #15]
 8001554:	e04a      	b.n	80015ec <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001556:	7bfa      	ldrb	r2, [r7, #15]
 8001558:	6879      	ldr	r1, [r7, #4]
 800155a:	4613      	mov	r3, r2
 800155c:	00db      	lsls	r3, r3, #3
 800155e:	4413      	add	r3, r2
 8001560:	009b      	lsls	r3, r3, #2
 8001562:	440b      	add	r3, r1
 8001564:	3315      	adds	r3, #21
 8001566:	2201      	movs	r2, #1
 8001568:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800156a:	7bfa      	ldrb	r2, [r7, #15]
 800156c:	6879      	ldr	r1, [r7, #4]
 800156e:	4613      	mov	r3, r2
 8001570:	00db      	lsls	r3, r3, #3
 8001572:	4413      	add	r3, r2
 8001574:	009b      	lsls	r3, r3, #2
 8001576:	440b      	add	r3, r1
 8001578:	3314      	adds	r3, #20
 800157a:	7bfa      	ldrb	r2, [r7, #15]
 800157c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800157e:	7bfa      	ldrb	r2, [r7, #15]
 8001580:	7bfb      	ldrb	r3, [r7, #15]
 8001582:	b298      	uxth	r0, r3
 8001584:	6879      	ldr	r1, [r7, #4]
 8001586:	4613      	mov	r3, r2
 8001588:	00db      	lsls	r3, r3, #3
 800158a:	4413      	add	r3, r2
 800158c:	009b      	lsls	r3, r3, #2
 800158e:	440b      	add	r3, r1
 8001590:	332e      	adds	r3, #46	; 0x2e
 8001592:	4602      	mov	r2, r0
 8001594:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001596:	7bfa      	ldrb	r2, [r7, #15]
 8001598:	6879      	ldr	r1, [r7, #4]
 800159a:	4613      	mov	r3, r2
 800159c:	00db      	lsls	r3, r3, #3
 800159e:	4413      	add	r3, r2
 80015a0:	009b      	lsls	r3, r3, #2
 80015a2:	440b      	add	r3, r1
 80015a4:	3318      	adds	r3, #24
 80015a6:	2200      	movs	r2, #0
 80015a8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80015aa:	7bfa      	ldrb	r2, [r7, #15]
 80015ac:	6879      	ldr	r1, [r7, #4]
 80015ae:	4613      	mov	r3, r2
 80015b0:	00db      	lsls	r3, r3, #3
 80015b2:	4413      	add	r3, r2
 80015b4:	009b      	lsls	r3, r3, #2
 80015b6:	440b      	add	r3, r1
 80015b8:	331c      	adds	r3, #28
 80015ba:	2200      	movs	r2, #0
 80015bc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80015be:	7bfa      	ldrb	r2, [r7, #15]
 80015c0:	6879      	ldr	r1, [r7, #4]
 80015c2:	4613      	mov	r3, r2
 80015c4:	00db      	lsls	r3, r3, #3
 80015c6:	4413      	add	r3, r2
 80015c8:	009b      	lsls	r3, r3, #2
 80015ca:	440b      	add	r3, r1
 80015cc:	3320      	adds	r3, #32
 80015ce:	2200      	movs	r2, #0
 80015d0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80015d2:	7bfa      	ldrb	r2, [r7, #15]
 80015d4:	6879      	ldr	r1, [r7, #4]
 80015d6:	4613      	mov	r3, r2
 80015d8:	00db      	lsls	r3, r3, #3
 80015da:	4413      	add	r3, r2
 80015dc:	009b      	lsls	r3, r3, #2
 80015de:	440b      	add	r3, r1
 80015e0:	3324      	adds	r3, #36	; 0x24
 80015e2:	2200      	movs	r2, #0
 80015e4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015e6:	7bfb      	ldrb	r3, [r7, #15]
 80015e8:	3301      	adds	r3, #1
 80015ea:	73fb      	strb	r3, [r7, #15]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	791b      	ldrb	r3, [r3, #4]
 80015f0:	7bfa      	ldrb	r2, [r7, #15]
 80015f2:	429a      	cmp	r2, r3
 80015f4:	d3af      	bcc.n	8001556 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015f6:	2300      	movs	r3, #0
 80015f8:	73fb      	strb	r3, [r7, #15]
 80015fa:	e044      	b.n	8001686 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80015fc:	7bfa      	ldrb	r2, [r7, #15]
 80015fe:	6879      	ldr	r1, [r7, #4]
 8001600:	4613      	mov	r3, r2
 8001602:	00db      	lsls	r3, r3, #3
 8001604:	4413      	add	r3, r2
 8001606:	009b      	lsls	r3, r3, #2
 8001608:	440b      	add	r3, r1
 800160a:	f203 2355 	addw	r3, r3, #597	; 0x255
 800160e:	2200      	movs	r2, #0
 8001610:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001612:	7bfa      	ldrb	r2, [r7, #15]
 8001614:	6879      	ldr	r1, [r7, #4]
 8001616:	4613      	mov	r3, r2
 8001618:	00db      	lsls	r3, r3, #3
 800161a:	4413      	add	r3, r2
 800161c:	009b      	lsls	r3, r3, #2
 800161e:	440b      	add	r3, r1
 8001620:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8001624:	7bfa      	ldrb	r2, [r7, #15]
 8001626:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001628:	7bfa      	ldrb	r2, [r7, #15]
 800162a:	6879      	ldr	r1, [r7, #4]
 800162c:	4613      	mov	r3, r2
 800162e:	00db      	lsls	r3, r3, #3
 8001630:	4413      	add	r3, r2
 8001632:	009b      	lsls	r3, r3, #2
 8001634:	440b      	add	r3, r1
 8001636:	f503 7316 	add.w	r3, r3, #600	; 0x258
 800163a:	2200      	movs	r2, #0
 800163c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800163e:	7bfa      	ldrb	r2, [r7, #15]
 8001640:	6879      	ldr	r1, [r7, #4]
 8001642:	4613      	mov	r3, r2
 8001644:	00db      	lsls	r3, r3, #3
 8001646:	4413      	add	r3, r2
 8001648:	009b      	lsls	r3, r3, #2
 800164a:	440b      	add	r3, r1
 800164c:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8001650:	2200      	movs	r2, #0
 8001652:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001654:	7bfa      	ldrb	r2, [r7, #15]
 8001656:	6879      	ldr	r1, [r7, #4]
 8001658:	4613      	mov	r3, r2
 800165a:	00db      	lsls	r3, r3, #3
 800165c:	4413      	add	r3, r2
 800165e:	009b      	lsls	r3, r3, #2
 8001660:	440b      	add	r3, r1
 8001662:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8001666:	2200      	movs	r2, #0
 8001668:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800166a:	7bfa      	ldrb	r2, [r7, #15]
 800166c:	6879      	ldr	r1, [r7, #4]
 800166e:	4613      	mov	r3, r2
 8001670:	00db      	lsls	r3, r3, #3
 8001672:	4413      	add	r3, r2
 8001674:	009b      	lsls	r3, r3, #2
 8001676:	440b      	add	r3, r1
 8001678:	f503 7319 	add.w	r3, r3, #612	; 0x264
 800167c:	2200      	movs	r2, #0
 800167e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001680:	7bfb      	ldrb	r3, [r7, #15]
 8001682:	3301      	adds	r3, #1
 8001684:	73fb      	strb	r3, [r7, #15]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	791b      	ldrb	r3, [r3, #4]
 800168a:	7bfa      	ldrb	r2, [r7, #15]
 800168c:	429a      	cmp	r2, r3
 800168e:	d3b5      	bcc.n	80015fc <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6818      	ldr	r0, [r3, #0]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	7c1a      	ldrb	r2, [r3, #16]
 8001698:	f88d 2000 	strb.w	r2, [sp]
 800169c:	3304      	adds	r3, #4
 800169e:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016a0:	f002 fa70 	bl	8003b84 <USB_DevInit>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d005      	beq.n	80016b6 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2202      	movs	r2, #2
 80016ae:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	e00c      	b.n	80016d0 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2200      	movs	r2, #0
 80016ba:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2201      	movs	r2, #1
 80016c0:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4618      	mov	r0, r3
 80016ca:	f003 fab4 	bl	8004c36 <USB_DevDisconnect>

  return HAL_OK;
 80016ce:	2300      	movs	r3, #0
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	3710      	adds	r7, #16
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}

080016d8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b084      	sub	sp, #16
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80016ec:	2b01      	cmp	r3, #1
 80016ee:	d101      	bne.n	80016f4 <HAL_PCD_Start+0x1c>
 80016f0:	2302      	movs	r3, #2
 80016f2:	e022      	b.n	800173a <HAL_PCD_Start+0x62>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2201      	movs	r2, #1
 80016f8:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001704:	2b00      	cmp	r3, #0
 8001706:	d009      	beq.n	800171c <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800170c:	2b01      	cmp	r3, #1
 800170e:	d105      	bne.n	800171c <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001714:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4618      	mov	r0, r3
 8001722:	f002 f9c1 	bl	8003aa8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4618      	mov	r0, r3
 800172c:	f003 fa62 	bl	8004bf4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2200      	movs	r2, #0
 8001734:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8001738:	2300      	movs	r3, #0
}
 800173a:	4618      	mov	r0, r3
 800173c:	3710      	adds	r7, #16
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}

08001742 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001742:	b590      	push	{r4, r7, lr}
 8001744:	b08d      	sub	sp, #52	; 0x34
 8001746:	af00      	add	r7, sp, #0
 8001748:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001750:	6a3b      	ldr	r3, [r7, #32]
 8001752:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4618      	mov	r0, r3
 800175a:	f003 fb20 	bl	8004d9e <USB_GetMode>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	f040 848c 	bne.w	800207e <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4618      	mov	r0, r3
 800176c:	f003 fa84 	bl	8004c78 <USB_ReadInterrupts>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	f000 8482 	beq.w	800207c <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001778:	69fb      	ldr	r3, [r7, #28]
 800177a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	0a1b      	lsrs	r3, r3, #8
 8001782:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4618      	mov	r0, r3
 8001792:	f003 fa71 	bl	8004c78 <USB_ReadInterrupts>
 8001796:	4603      	mov	r3, r0
 8001798:	f003 0302 	and.w	r3, r3, #2
 800179c:	2b02      	cmp	r3, #2
 800179e:	d107      	bne.n	80017b0 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	695a      	ldr	r2, [r3, #20]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f002 0202 	and.w	r2, r2, #2
 80017ae:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4618      	mov	r0, r3
 80017b6:	f003 fa5f 	bl	8004c78 <USB_ReadInterrupts>
 80017ba:	4603      	mov	r3, r0
 80017bc:	f003 0310 	and.w	r3, r3, #16
 80017c0:	2b10      	cmp	r3, #16
 80017c2:	d161      	bne.n	8001888 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	699a      	ldr	r2, [r3, #24]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f022 0210 	bic.w	r2, r2, #16
 80017d2:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80017d4:	6a3b      	ldr	r3, [r7, #32]
 80017d6:	6a1b      	ldr	r3, [r3, #32]
 80017d8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80017da:	69bb      	ldr	r3, [r7, #24]
 80017dc:	f003 020f 	and.w	r2, r3, #15
 80017e0:	4613      	mov	r3, r2
 80017e2:	00db      	lsls	r3, r3, #3
 80017e4:	4413      	add	r3, r2
 80017e6:	009b      	lsls	r3, r3, #2
 80017e8:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80017ec:	687a      	ldr	r2, [r7, #4]
 80017ee:	4413      	add	r3, r2
 80017f0:	3304      	adds	r3, #4
 80017f2:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80017f4:	69bb      	ldr	r3, [r7, #24]
 80017f6:	0c5b      	lsrs	r3, r3, #17
 80017f8:	f003 030f 	and.w	r3, r3, #15
 80017fc:	2b02      	cmp	r3, #2
 80017fe:	d124      	bne.n	800184a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001800:	69ba      	ldr	r2, [r7, #24]
 8001802:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001806:	4013      	ands	r3, r2
 8001808:	2b00      	cmp	r3, #0
 800180a:	d035      	beq.n	8001878 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001810:	69bb      	ldr	r3, [r7, #24]
 8001812:	091b      	lsrs	r3, r3, #4
 8001814:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001816:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800181a:	b29b      	uxth	r3, r3
 800181c:	461a      	mov	r2, r3
 800181e:	6a38      	ldr	r0, [r7, #32]
 8001820:	f003 f896 	bl	8004950 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	68da      	ldr	r2, [r3, #12]
 8001828:	69bb      	ldr	r3, [r7, #24]
 800182a:	091b      	lsrs	r3, r3, #4
 800182c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001830:	441a      	add	r2, r3
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	695a      	ldr	r2, [r3, #20]
 800183a:	69bb      	ldr	r3, [r7, #24]
 800183c:	091b      	lsrs	r3, r3, #4
 800183e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001842:	441a      	add	r2, r3
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	615a      	str	r2, [r3, #20]
 8001848:	e016      	b.n	8001878 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800184a:	69bb      	ldr	r3, [r7, #24]
 800184c:	0c5b      	lsrs	r3, r3, #17
 800184e:	f003 030f 	and.w	r3, r3, #15
 8001852:	2b06      	cmp	r3, #6
 8001854:	d110      	bne.n	8001878 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800185c:	2208      	movs	r2, #8
 800185e:	4619      	mov	r1, r3
 8001860:	6a38      	ldr	r0, [r7, #32]
 8001862:	f003 f875 	bl	8004950 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	695a      	ldr	r2, [r3, #20]
 800186a:	69bb      	ldr	r3, [r7, #24]
 800186c:	091b      	lsrs	r3, r3, #4
 800186e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001872:	441a      	add	r2, r3
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	699a      	ldr	r2, [r3, #24]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f042 0210 	orr.w	r2, r2, #16
 8001886:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4618      	mov	r0, r3
 800188e:	f003 f9f3 	bl	8004c78 <USB_ReadInterrupts>
 8001892:	4603      	mov	r3, r0
 8001894:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001898:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800189c:	f040 80a7 	bne.w	80019ee <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80018a0:	2300      	movs	r3, #0
 80018a2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4618      	mov	r0, r3
 80018aa:	f003 f9f8 	bl	8004c9e <USB_ReadDevAllOutEpInterrupt>
 80018ae:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80018b0:	e099      	b.n	80019e6 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80018b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018b4:	f003 0301 	and.w	r3, r3, #1
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	f000 808e 	beq.w	80019da <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018c4:	b2d2      	uxtb	r2, r2
 80018c6:	4611      	mov	r1, r2
 80018c8:	4618      	mov	r0, r3
 80018ca:	f003 fa1c 	bl	8004d06 <USB_ReadDevOutEPInterrupt>
 80018ce:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	f003 0301 	and.w	r3, r3, #1
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d00c      	beq.n	80018f4 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80018da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018dc:	015a      	lsls	r2, r3, #5
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	4413      	add	r3, r2
 80018e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80018e6:	461a      	mov	r2, r3
 80018e8:	2301      	movs	r3, #1
 80018ea:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80018ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80018ee:	6878      	ldr	r0, [r7, #4]
 80018f0:	f000 fea2 	bl	8002638 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	f003 0308 	and.w	r3, r3, #8
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d00c      	beq.n	8001918 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80018fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001900:	015a      	lsls	r2, r3, #5
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	4413      	add	r3, r2
 8001906:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800190a:	461a      	mov	r2, r3
 800190c:	2308      	movs	r3, #8
 800190e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001910:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001912:	6878      	ldr	r0, [r7, #4]
 8001914:	f000 ff78 	bl	8002808 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	f003 0310 	and.w	r3, r3, #16
 800191e:	2b00      	cmp	r3, #0
 8001920:	d008      	beq.n	8001934 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001924:	015a      	lsls	r2, r3, #5
 8001926:	69fb      	ldr	r3, [r7, #28]
 8001928:	4413      	add	r3, r2
 800192a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800192e:	461a      	mov	r2, r3
 8001930:	2310      	movs	r3, #16
 8001932:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	f003 0302 	and.w	r3, r3, #2
 800193a:	2b00      	cmp	r3, #0
 800193c:	d030      	beq.n	80019a0 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800193e:	6a3b      	ldr	r3, [r7, #32]
 8001940:	695b      	ldr	r3, [r3, #20]
 8001942:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001946:	2b80      	cmp	r3, #128	; 0x80
 8001948:	d109      	bne.n	800195e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800194a:	69fb      	ldr	r3, [r7, #28]
 800194c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	69fa      	ldr	r2, [r7, #28]
 8001954:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001958:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800195c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800195e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001960:	4613      	mov	r3, r2
 8001962:	00db      	lsls	r3, r3, #3
 8001964:	4413      	add	r3, r2
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800196c:	687a      	ldr	r2, [r7, #4]
 800196e:	4413      	add	r3, r2
 8001970:	3304      	adds	r3, #4
 8001972:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	78db      	ldrb	r3, [r3, #3]
 8001978:	2b01      	cmp	r3, #1
 800197a:	d108      	bne.n	800198e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	2200      	movs	r2, #0
 8001980:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001984:	b2db      	uxtb	r3, r3
 8001986:	4619      	mov	r1, r3
 8001988:	6878      	ldr	r0, [r7, #4]
 800198a:	f008 faf5 	bl	8009f78 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800198e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001990:	015a      	lsls	r2, r3, #5
 8001992:	69fb      	ldr	r3, [r7, #28]
 8001994:	4413      	add	r3, r2
 8001996:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800199a:	461a      	mov	r2, r3
 800199c:	2302      	movs	r3, #2
 800199e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	f003 0320 	and.w	r3, r3, #32
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d008      	beq.n	80019bc <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80019aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ac:	015a      	lsls	r2, r3, #5
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	4413      	add	r3, r2
 80019b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80019b6:	461a      	mov	r2, r3
 80019b8:	2320      	movs	r3, #32
 80019ba:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d009      	beq.n	80019da <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80019c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c8:	015a      	lsls	r2, r3, #5
 80019ca:	69fb      	ldr	r3, [r7, #28]
 80019cc:	4413      	add	r3, r2
 80019ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80019d2:	461a      	mov	r2, r3
 80019d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019d8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80019da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019dc:	3301      	adds	r3, #1
 80019de:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80019e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019e2:	085b      	lsrs	r3, r3, #1
 80019e4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80019e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	f47f af62 	bne.w	80018b2 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4618      	mov	r0, r3
 80019f4:	f003 f940 	bl	8004c78 <USB_ReadInterrupts>
 80019f8:	4603      	mov	r3, r0
 80019fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80019fe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001a02:	f040 80db 	bne.w	8001bbc <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f003 f961 	bl	8004cd2 <USB_ReadDevAllInEpInterrupt>
 8001a10:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001a12:	2300      	movs	r3, #0
 8001a14:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001a16:	e0cd      	b.n	8001bb4 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a1a:	f003 0301 	and.w	r3, r3, #1
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	f000 80c2 	beq.w	8001ba8 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a2a:	b2d2      	uxtb	r2, r2
 8001a2c:	4611      	mov	r1, r2
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f003 f987 	bl	8004d42 <USB_ReadDevInEPInterrupt>
 8001a34:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	f003 0301 	and.w	r3, r3, #1
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d057      	beq.n	8001af0 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a42:	f003 030f 	and.w	r3, r3, #15
 8001a46:	2201      	movs	r2, #1
 8001a48:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	43db      	mvns	r3, r3
 8001a5a:	69f9      	ldr	r1, [r7, #28]
 8001a5c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001a60:	4013      	ands	r3, r2
 8001a62:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a66:	015a      	lsls	r2, r3, #5
 8001a68:	69fb      	ldr	r3, [r7, #28]
 8001a6a:	4413      	add	r3, r2
 8001a6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a70:	461a      	mov	r2, r3
 8001a72:	2301      	movs	r3, #1
 8001a74:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	799b      	ldrb	r3, [r3, #6]
 8001a7a:	2b01      	cmp	r3, #1
 8001a7c:	d132      	bne.n	8001ae4 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001a7e:	6879      	ldr	r1, [r7, #4]
 8001a80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a82:	4613      	mov	r3, r2
 8001a84:	00db      	lsls	r3, r3, #3
 8001a86:	4413      	add	r3, r2
 8001a88:	009b      	lsls	r3, r3, #2
 8001a8a:	440b      	add	r3, r1
 8001a8c:	3320      	adds	r3, #32
 8001a8e:	6819      	ldr	r1, [r3, #0]
 8001a90:	6878      	ldr	r0, [r7, #4]
 8001a92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a94:	4613      	mov	r3, r2
 8001a96:	00db      	lsls	r3, r3, #3
 8001a98:	4413      	add	r3, r2
 8001a9a:	009b      	lsls	r3, r3, #2
 8001a9c:	4403      	add	r3, r0
 8001a9e:	331c      	adds	r3, #28
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4419      	add	r1, r3
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001aa8:	4613      	mov	r3, r2
 8001aaa:	00db      	lsls	r3, r3, #3
 8001aac:	4413      	add	r3, r2
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	4403      	add	r3, r0
 8001ab2:	3320      	adds	r3, #32
 8001ab4:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d113      	bne.n	8001ae4 <HAL_PCD_IRQHandler+0x3a2>
 8001abc:	6879      	ldr	r1, [r7, #4]
 8001abe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ac0:	4613      	mov	r3, r2
 8001ac2:	00db      	lsls	r3, r3, #3
 8001ac4:	4413      	add	r3, r2
 8001ac6:	009b      	lsls	r3, r3, #2
 8001ac8:	440b      	add	r3, r1
 8001aca:	3324      	adds	r3, #36	; 0x24
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d108      	bne.n	8001ae4 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6818      	ldr	r0, [r3, #0]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8001adc:	461a      	mov	r2, r3
 8001ade:	2101      	movs	r1, #1
 8001ae0:	f003 f98e 	bl	8004e00 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae6:	b2db      	uxtb	r3, r3
 8001ae8:	4619      	mov	r1, r3
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	f008 f9bf 	bl	8009e6e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	f003 0308 	and.w	r3, r3, #8
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d008      	beq.n	8001b0c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001afc:	015a      	lsls	r2, r3, #5
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	4413      	add	r3, r2
 8001b02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001b06:	461a      	mov	r2, r3
 8001b08:	2308      	movs	r3, #8
 8001b0a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	f003 0310 	and.w	r3, r3, #16
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d008      	beq.n	8001b28 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b18:	015a      	lsls	r2, r3, #5
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	4413      	add	r3, r2
 8001b1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001b22:	461a      	mov	r2, r3
 8001b24:	2310      	movs	r3, #16
 8001b26:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d008      	beq.n	8001b44 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b34:	015a      	lsls	r2, r3, #5
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	4413      	add	r3, r2
 8001b3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001b3e:	461a      	mov	r2, r3
 8001b40:	2340      	movs	r3, #64	; 0x40
 8001b42:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	f003 0302 	and.w	r3, r3, #2
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d023      	beq.n	8001b96 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001b4e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b50:	6a38      	ldr	r0, [r7, #32]
 8001b52:	f002 f97b 	bl	8003e4c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001b56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b58:	4613      	mov	r3, r2
 8001b5a:	00db      	lsls	r3, r3, #3
 8001b5c:	4413      	add	r3, r2
 8001b5e:	009b      	lsls	r3, r3, #2
 8001b60:	3310      	adds	r3, #16
 8001b62:	687a      	ldr	r2, [r7, #4]
 8001b64:	4413      	add	r3, r2
 8001b66:	3304      	adds	r3, #4
 8001b68:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	78db      	ldrb	r3, [r3, #3]
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d108      	bne.n	8001b84 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	2200      	movs	r2, #0
 8001b76:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b7a:	b2db      	uxtb	r3, r3
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	6878      	ldr	r0, [r7, #4]
 8001b80:	f008 fa0c 	bl	8009f9c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b86:	015a      	lsls	r2, r3, #5
 8001b88:	69fb      	ldr	r3, [r7, #28]
 8001b8a:	4413      	add	r3, r2
 8001b8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001b90:	461a      	mov	r2, r3
 8001b92:	2302      	movs	r3, #2
 8001b94:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d003      	beq.n	8001ba8 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001ba0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	f000 fcbb 	bl	800251e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001baa:	3301      	adds	r3, #1
 8001bac:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bb0:	085b      	lsrs	r3, r3, #1
 8001bb2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	f47f af2e 	bne.w	8001a18 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f003 f859 	bl	8004c78 <USB_ReadInterrupts>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001bcc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001bd0:	d122      	bne.n	8001c18 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	69fa      	ldr	r2, [r7, #28]
 8001bdc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001be0:	f023 0301 	bic.w	r3, r3, #1
 8001be4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d108      	bne.n	8001c02 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001bf8:	2100      	movs	r1, #0
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f000 fea2 	bl	8002944 <HAL_PCDEx_LPM_Callback>
 8001c00:	e002      	b.n	8001c08 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001c02:	6878      	ldr	r0, [r7, #4]
 8001c04:	f008 f9aa 	bl	8009f5c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	695a      	ldr	r2, [r3, #20]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001c16:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f003 f82b 	bl	8004c78 <USB_ReadInterrupts>
 8001c22:	4603      	mov	r3, r0
 8001c24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001c2c:	d112      	bne.n	8001c54 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	f003 0301 	and.w	r3, r3, #1
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	d102      	bne.n	8001c44 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	f008 f966 	bl	8009f10 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	695a      	ldr	r2, [r3, #20]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001c52:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f003 f80d 	bl	8004c78 <USB_ReadInterrupts>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c68:	f040 80b7 	bne.w	8001dda <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001c6c:	69fb      	ldr	r3, [r7, #28]
 8001c6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	69fa      	ldr	r2, [r7, #28]
 8001c76:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c7a:	f023 0301 	bic.w	r3, r3, #1
 8001c7e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	2110      	movs	r1, #16
 8001c86:	4618      	mov	r0, r3
 8001c88:	f002 f8e0 	bl	8003e4c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c90:	e046      	b.n	8001d20 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c94:	015a      	lsls	r2, r3, #5
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	4413      	add	r3, r2
 8001c9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001c9e:	461a      	mov	r2, r3
 8001ca0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001ca4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ca8:	015a      	lsls	r2, r3, #5
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	4413      	add	r3, r2
 8001cae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001cb6:	0151      	lsls	r1, r2, #5
 8001cb8:	69fa      	ldr	r2, [r7, #28]
 8001cba:	440a      	add	r2, r1
 8001cbc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001cc0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001cc4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cc8:	015a      	lsls	r2, r3, #5
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	4413      	add	r3, r2
 8001cce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001cd2:	461a      	mov	r2, r3
 8001cd4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001cd8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001cda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cdc:	015a      	lsls	r2, r3, #5
 8001cde:	69fb      	ldr	r3, [r7, #28]
 8001ce0:	4413      	add	r3, r2
 8001ce2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001cea:	0151      	lsls	r1, r2, #5
 8001cec:	69fa      	ldr	r2, [r7, #28]
 8001cee:	440a      	add	r2, r1
 8001cf0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001cf4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001cf8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cfc:	015a      	lsls	r2, r3, #5
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	4413      	add	r3, r2
 8001d02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d0a:	0151      	lsls	r1, r2, #5
 8001d0c:	69fa      	ldr	r2, [r7, #28]
 8001d0e:	440a      	add	r2, r1
 8001d10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001d14:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001d18:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d1c:	3301      	adds	r3, #1
 8001d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	791b      	ldrb	r3, [r3, #4]
 8001d24:	461a      	mov	r2, r3
 8001d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d3b2      	bcc.n	8001c92 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001d2c:	69fb      	ldr	r3, [r7, #28]
 8001d2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d32:	69db      	ldr	r3, [r3, #28]
 8001d34:	69fa      	ldr	r2, [r7, #28]
 8001d36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001d3a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001d3e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	7bdb      	ldrb	r3, [r3, #15]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d016      	beq.n	8001d76 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001d48:	69fb      	ldr	r3, [r7, #28]
 8001d4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001d52:	69fa      	ldr	r2, [r7, #28]
 8001d54:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001d58:	f043 030b 	orr.w	r3, r3, #11
 8001d5c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001d60:	69fb      	ldr	r3, [r7, #28]
 8001d62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d68:	69fa      	ldr	r2, [r7, #28]
 8001d6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001d6e:	f043 030b 	orr.w	r3, r3, #11
 8001d72:	6453      	str	r3, [r2, #68]	; 0x44
 8001d74:	e015      	b.n	8001da2 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d7c:	695b      	ldr	r3, [r3, #20]
 8001d7e:	69fa      	ldr	r2, [r7, #28]
 8001d80:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001d84:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001d88:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001d8c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d94:	691b      	ldr	r3, [r3, #16]
 8001d96:	69fa      	ldr	r2, [r7, #28]
 8001d98:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001d9c:	f043 030b 	orr.w	r3, r3, #11
 8001da0:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001da2:	69fb      	ldr	r3, [r7, #28]
 8001da4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	69fa      	ldr	r2, [r7, #28]
 8001dac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001db0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001db4:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6818      	ldr	r0, [r3, #0]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	f203 439c 	addw	r3, r3, #1180	; 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001dc4:	461a      	mov	r2, r3
 8001dc6:	f003 f81b 	bl	8004e00 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	695a      	ldr	r2, [r3, #20]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001dd8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4618      	mov	r0, r3
 8001de0:	f002 ff4a 	bl	8004c78 <USB_ReadInterrupts>
 8001de4:	4603      	mov	r3, r0
 8001de6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001dea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001dee:	d123      	bne.n	8001e38 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4618      	mov	r0, r3
 8001df6:	f002 ffe0 	bl	8004dba <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f002 f89d 	bl	8003f3e <USB_GetDevSpeed>
 8001e04:	4603      	mov	r3, r0
 8001e06:	461a      	mov	r2, r3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681c      	ldr	r4, [r3, #0]
 8001e10:	f001 f9c8 	bl	80031a4 <HAL_RCC_GetHCLKFreq>
 8001e14:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001e1a:	461a      	mov	r2, r3
 8001e1c:	4620      	mov	r0, r4
 8001e1e:	f001 fda1 	bl	8003964 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	f008 f84b 	bl	8009ebe <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	695a      	ldr	r2, [r3, #20]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001e36:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f002 ff1b 	bl	8004c78 <USB_ReadInterrupts>
 8001e42:	4603      	mov	r3, r0
 8001e44:	f003 0308 	and.w	r3, r3, #8
 8001e48:	2b08      	cmp	r3, #8
 8001e4a:	d10a      	bne.n	8001e62 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001e4c:	6878      	ldr	r0, [r7, #4]
 8001e4e:	f008 f828 	bl	8009ea2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	695a      	ldr	r2, [r3, #20]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f002 0208 	and.w	r2, r2, #8
 8001e60:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4618      	mov	r0, r3
 8001e68:	f002 ff06 	bl	8004c78 <USB_ReadInterrupts>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e72:	2b80      	cmp	r3, #128	; 0x80
 8001e74:	d123      	bne.n	8001ebe <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001e76:	6a3b      	ldr	r3, [r7, #32]
 8001e78:	699b      	ldr	r3, [r3, #24]
 8001e7a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001e7e:	6a3b      	ldr	r3, [r7, #32]
 8001e80:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001e82:	2301      	movs	r3, #1
 8001e84:	627b      	str	r3, [r7, #36]	; 0x24
 8001e86:	e014      	b.n	8001eb2 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001e88:	6879      	ldr	r1, [r7, #4]
 8001e8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e8c:	4613      	mov	r3, r2
 8001e8e:	00db      	lsls	r3, r3, #3
 8001e90:	4413      	add	r3, r2
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	440b      	add	r3, r1
 8001e96:	f203 2357 	addw	r3, r3, #599	; 0x257
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d105      	bne.n	8001eac <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea2:	b2db      	uxtb	r3, r3
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f000 fb08 	bl	80024bc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eae:	3301      	adds	r3, #1
 8001eb0:	627b      	str	r3, [r7, #36]	; 0x24
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	791b      	ldrb	r3, [r3, #4]
 8001eb6:	461a      	mov	r2, r3
 8001eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d3e4      	bcc.n	8001e88 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f002 fed8 	bl	8004c78 <USB_ReadInterrupts>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ece:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001ed2:	d13c      	bne.n	8001f4e <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	627b      	str	r3, [r7, #36]	; 0x24
 8001ed8:	e02b      	b.n	8001f32 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001edc:	015a      	lsls	r2, r3, #5
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	4413      	add	r3, r2
 8001ee2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001eea:	6879      	ldr	r1, [r7, #4]
 8001eec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001eee:	4613      	mov	r3, r2
 8001ef0:	00db      	lsls	r3, r3, #3
 8001ef2:	4413      	add	r3, r2
 8001ef4:	009b      	lsls	r3, r3, #2
 8001ef6:	440b      	add	r3, r1
 8001ef8:	3318      	adds	r3, #24
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d115      	bne.n	8001f2c <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001f00:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	da12      	bge.n	8001f2c <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001f06:	6879      	ldr	r1, [r7, #4]
 8001f08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f0a:	4613      	mov	r3, r2
 8001f0c:	00db      	lsls	r3, r3, #3
 8001f0e:	4413      	add	r3, r2
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	440b      	add	r3, r1
 8001f14:	3317      	adds	r3, #23
 8001f16:	2201      	movs	r2, #1
 8001f18:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001f22:	b2db      	uxtb	r3, r3
 8001f24:	4619      	mov	r1, r3
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f000 fac8 	bl	80024bc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2e:	3301      	adds	r3, #1
 8001f30:	627b      	str	r3, [r7, #36]	; 0x24
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	791b      	ldrb	r3, [r3, #4]
 8001f36:	461a      	mov	r2, r3
 8001f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d3cd      	bcc.n	8001eda <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	695a      	ldr	r2, [r3, #20]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001f4c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4618      	mov	r0, r3
 8001f54:	f002 fe90 	bl	8004c78 <USB_ReadInterrupts>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f5e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001f62:	d156      	bne.n	8002012 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001f64:	2301      	movs	r3, #1
 8001f66:	627b      	str	r3, [r7, #36]	; 0x24
 8001f68:	e045      	b.n	8001ff6 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f6c:	015a      	lsls	r2, r3, #5
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	4413      	add	r3, r2
 8001f72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001f7a:	6879      	ldr	r1, [r7, #4]
 8001f7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f7e:	4613      	mov	r3, r2
 8001f80:	00db      	lsls	r3, r3, #3
 8001f82:	4413      	add	r3, r2
 8001f84:	009b      	lsls	r3, r3, #2
 8001f86:	440b      	add	r3, r1
 8001f88:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d12e      	bne.n	8001ff0 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001f92:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	da2b      	bge.n	8001ff0 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001f98:	69bb      	ldr	r3, [r7, #24]
 8001f9a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 8001fa4:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d121      	bne.n	8001ff0 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001fac:	6879      	ldr	r1, [r7, #4]
 8001fae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fb0:	4613      	mov	r3, r2
 8001fb2:	00db      	lsls	r3, r3, #3
 8001fb4:	4413      	add	r3, r2
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	440b      	add	r3, r1
 8001fba:	f203 2357 	addw	r3, r3, #599	; 0x257
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001fc2:	6a3b      	ldr	r3, [r7, #32]
 8001fc4:	699b      	ldr	r3, [r3, #24]
 8001fc6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001fca:	6a3b      	ldr	r3, [r7, #32]
 8001fcc:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001fce:	6a3b      	ldr	r3, [r7, #32]
 8001fd0:	695b      	ldr	r3, [r3, #20]
 8001fd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d10a      	bne.n	8001ff0 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	69fa      	ldr	r2, [r7, #28]
 8001fe4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001fe8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001fec:	6053      	str	r3, [r2, #4]
            break;
 8001fee:	e008      	b.n	8002002 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff2:	3301      	adds	r3, #1
 8001ff4:	627b      	str	r3, [r7, #36]	; 0x24
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	791b      	ldrb	r3, [r3, #4]
 8001ffa:	461a      	mov	r2, r3
 8001ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d3b3      	bcc.n	8001f6a <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	695a      	ldr	r2, [r3, #20]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002010:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4618      	mov	r0, r3
 8002018:	f002 fe2e 	bl	8004c78 <USB_ReadInterrupts>
 800201c:	4603      	mov	r3, r0
 800201e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002022:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002026:	d10a      	bne.n	800203e <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002028:	6878      	ldr	r0, [r7, #4]
 800202a:	f007 ffc9 	bl	8009fc0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	695a      	ldr	r2, [r3, #20]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800203c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4618      	mov	r0, r3
 8002044:	f002 fe18 	bl	8004c78 <USB_ReadInterrupts>
 8002048:	4603      	mov	r3, r0
 800204a:	f003 0304 	and.w	r3, r3, #4
 800204e:	2b04      	cmp	r3, #4
 8002050:	d115      	bne.n	800207e <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800205a:	69bb      	ldr	r3, [r7, #24]
 800205c:	f003 0304 	and.w	r3, r3, #4
 8002060:	2b00      	cmp	r3, #0
 8002062:	d002      	beq.n	800206a <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002064:	6878      	ldr	r0, [r7, #4]
 8002066:	f007 ffb9 	bl	8009fdc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	6859      	ldr	r1, [r3, #4]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	69ba      	ldr	r2, [r7, #24]
 8002076:	430a      	orrs	r2, r1
 8002078:	605a      	str	r2, [r3, #4]
 800207a:	e000      	b.n	800207e <HAL_PCD_IRQHandler+0x93c>
      return;
 800207c:	bf00      	nop
    }
  }
}
 800207e:	3734      	adds	r7, #52	; 0x34
 8002080:	46bd      	mov	sp, r7
 8002082:	bd90      	pop	{r4, r7, pc}

08002084 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
 800208c:	460b      	mov	r3, r1
 800208e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8002096:	2b01      	cmp	r3, #1
 8002098:	d101      	bne.n	800209e <HAL_PCD_SetAddress+0x1a>
 800209a:	2302      	movs	r3, #2
 800209c:	e012      	b.n	80020c4 <HAL_PCD_SetAddress+0x40>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2201      	movs	r2, #1
 80020a2:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  hpcd->USB_Address = address;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	78fa      	ldrb	r2, [r7, #3]
 80020aa:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	78fa      	ldrb	r2, [r7, #3]
 80020b2:	4611      	mov	r1, r2
 80020b4:	4618      	mov	r0, r3
 80020b6:	f002 fd77 	bl	8004ba8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2200      	movs	r2, #0
 80020be:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 80020c2:	2300      	movs	r3, #0
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	3708      	adds	r7, #8
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}

080020cc <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b084      	sub	sp, #16
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
 80020d4:	4608      	mov	r0, r1
 80020d6:	4611      	mov	r1, r2
 80020d8:	461a      	mov	r2, r3
 80020da:	4603      	mov	r3, r0
 80020dc:	70fb      	strb	r3, [r7, #3]
 80020de:	460b      	mov	r3, r1
 80020e0:	803b      	strh	r3, [r7, #0]
 80020e2:	4613      	mov	r3, r2
 80020e4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80020e6:	2300      	movs	r3, #0
 80020e8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80020ea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	da0f      	bge.n	8002112 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020f2:	78fb      	ldrb	r3, [r7, #3]
 80020f4:	f003 020f 	and.w	r2, r3, #15
 80020f8:	4613      	mov	r3, r2
 80020fa:	00db      	lsls	r3, r3, #3
 80020fc:	4413      	add	r3, r2
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	3310      	adds	r3, #16
 8002102:	687a      	ldr	r2, [r7, #4]
 8002104:	4413      	add	r3, r2
 8002106:	3304      	adds	r3, #4
 8002108:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	2201      	movs	r2, #1
 800210e:	705a      	strb	r2, [r3, #1]
 8002110:	e00f      	b.n	8002132 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002112:	78fb      	ldrb	r3, [r7, #3]
 8002114:	f003 020f 	and.w	r2, r3, #15
 8002118:	4613      	mov	r3, r2
 800211a:	00db      	lsls	r3, r3, #3
 800211c:	4413      	add	r3, r2
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002124:	687a      	ldr	r2, [r7, #4]
 8002126:	4413      	add	r3, r2
 8002128:	3304      	adds	r3, #4
 800212a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	2200      	movs	r2, #0
 8002130:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002132:	78fb      	ldrb	r3, [r7, #3]
 8002134:	f003 030f 	and.w	r3, r3, #15
 8002138:	b2da      	uxtb	r2, r3
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800213e:	883a      	ldrh	r2, [r7, #0]
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	78ba      	ldrb	r2, [r7, #2]
 8002148:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	785b      	ldrb	r3, [r3, #1]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d004      	beq.n	800215c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	b29a      	uxth	r2, r3
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800215c:	78bb      	ldrb	r3, [r7, #2]
 800215e:	2b02      	cmp	r3, #2
 8002160:	d102      	bne.n	8002168 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	2200      	movs	r2, #0
 8002166:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800216e:	2b01      	cmp	r3, #1
 8002170:	d101      	bne.n	8002176 <HAL_PCD_EP_Open+0xaa>
 8002172:	2302      	movs	r3, #2
 8002174:	e00e      	b.n	8002194 <HAL_PCD_EP_Open+0xc8>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2201      	movs	r2, #1
 800217a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	68f9      	ldr	r1, [r7, #12]
 8002184:	4618      	mov	r0, r3
 8002186:	f001 feff 	bl	8003f88 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2200      	movs	r2, #0
 800218e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return ret;
 8002192:	7afb      	ldrb	r3, [r7, #11]
}
 8002194:	4618      	mov	r0, r3
 8002196:	3710      	adds	r7, #16
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}

0800219c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b084      	sub	sp, #16
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
 80021a4:	460b      	mov	r3, r1
 80021a6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80021a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	da0f      	bge.n	80021d0 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80021b0:	78fb      	ldrb	r3, [r7, #3]
 80021b2:	f003 020f 	and.w	r2, r3, #15
 80021b6:	4613      	mov	r3, r2
 80021b8:	00db      	lsls	r3, r3, #3
 80021ba:	4413      	add	r3, r2
 80021bc:	009b      	lsls	r3, r3, #2
 80021be:	3310      	adds	r3, #16
 80021c0:	687a      	ldr	r2, [r7, #4]
 80021c2:	4413      	add	r3, r2
 80021c4:	3304      	adds	r3, #4
 80021c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	2201      	movs	r2, #1
 80021cc:	705a      	strb	r2, [r3, #1]
 80021ce:	e00f      	b.n	80021f0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80021d0:	78fb      	ldrb	r3, [r7, #3]
 80021d2:	f003 020f 	and.w	r2, r3, #15
 80021d6:	4613      	mov	r3, r2
 80021d8:	00db      	lsls	r3, r3, #3
 80021da:	4413      	add	r3, r2
 80021dc:	009b      	lsls	r3, r3, #2
 80021de:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80021e2:	687a      	ldr	r2, [r7, #4]
 80021e4:	4413      	add	r3, r2
 80021e6:	3304      	adds	r3, #4
 80021e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	2200      	movs	r2, #0
 80021ee:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80021f0:	78fb      	ldrb	r3, [r7, #3]
 80021f2:	f003 030f 	and.w	r3, r3, #15
 80021f6:	b2da      	uxtb	r2, r3
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8002202:	2b01      	cmp	r3, #1
 8002204:	d101      	bne.n	800220a <HAL_PCD_EP_Close+0x6e>
 8002206:	2302      	movs	r3, #2
 8002208:	e00e      	b.n	8002228 <HAL_PCD_EP_Close+0x8c>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2201      	movs	r2, #1
 800220e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	68f9      	ldr	r1, [r7, #12]
 8002218:	4618      	mov	r0, r3
 800221a:	f001 ff3d 	bl	8004098 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2200      	movs	r2, #0
 8002222:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  return HAL_OK;
 8002226:	2300      	movs	r3, #0
}
 8002228:	4618      	mov	r0, r3
 800222a:	3710      	adds	r7, #16
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}

08002230 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b086      	sub	sp, #24
 8002234:	af00      	add	r7, sp, #0
 8002236:	60f8      	str	r0, [r7, #12]
 8002238:	607a      	str	r2, [r7, #4]
 800223a:	603b      	str	r3, [r7, #0]
 800223c:	460b      	mov	r3, r1
 800223e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002240:	7afb      	ldrb	r3, [r7, #11]
 8002242:	f003 020f 	and.w	r2, r3, #15
 8002246:	4613      	mov	r3, r2
 8002248:	00db      	lsls	r3, r3, #3
 800224a:	4413      	add	r3, r2
 800224c:	009b      	lsls	r3, r3, #2
 800224e:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002252:	68fa      	ldr	r2, [r7, #12]
 8002254:	4413      	add	r3, r2
 8002256:	3304      	adds	r3, #4
 8002258:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	687a      	ldr	r2, [r7, #4]
 800225e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	683a      	ldr	r2, [r7, #0]
 8002264:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	2200      	movs	r2, #0
 800226a:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	2200      	movs	r2, #0
 8002270:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002272:	7afb      	ldrb	r3, [r7, #11]
 8002274:	f003 030f 	and.w	r3, r3, #15
 8002278:	b2da      	uxtb	r2, r3
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	799b      	ldrb	r3, [r3, #6]
 8002282:	2b01      	cmp	r3, #1
 8002284:	d102      	bne.n	800228c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002286:	687a      	ldr	r2, [r7, #4]
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	6818      	ldr	r0, [r3, #0]
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	799b      	ldrb	r3, [r3, #6]
 8002294:	461a      	mov	r2, r3
 8002296:	6979      	ldr	r1, [r7, #20]
 8002298:	f001 ffda 	bl	8004250 <USB_EPStartXfer>

  return HAL_OK;
 800229c:	2300      	movs	r3, #0
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3718      	adds	r7, #24
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}

080022a6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80022a6:	b480      	push	{r7}
 80022a8:	b083      	sub	sp, #12
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	6078      	str	r0, [r7, #4]
 80022ae:	460b      	mov	r3, r1
 80022b0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80022b2:	78fb      	ldrb	r3, [r7, #3]
 80022b4:	f003 020f 	and.w	r2, r3, #15
 80022b8:	6879      	ldr	r1, [r7, #4]
 80022ba:	4613      	mov	r3, r2
 80022bc:	00db      	lsls	r3, r3, #3
 80022be:	4413      	add	r3, r2
 80022c0:	009b      	lsls	r3, r3, #2
 80022c2:	440b      	add	r3, r1
 80022c4:	f503 731a 	add.w	r3, r3, #616	; 0x268
 80022c8:	681b      	ldr	r3, [r3, #0]
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	370c      	adds	r7, #12
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr

080022d6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80022d6:	b580      	push	{r7, lr}
 80022d8:	b086      	sub	sp, #24
 80022da:	af00      	add	r7, sp, #0
 80022dc:	60f8      	str	r0, [r7, #12]
 80022de:	607a      	str	r2, [r7, #4]
 80022e0:	603b      	str	r3, [r7, #0]
 80022e2:	460b      	mov	r3, r1
 80022e4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022e6:	7afb      	ldrb	r3, [r7, #11]
 80022e8:	f003 020f 	and.w	r2, r3, #15
 80022ec:	4613      	mov	r3, r2
 80022ee:	00db      	lsls	r3, r3, #3
 80022f0:	4413      	add	r3, r2
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	3310      	adds	r3, #16
 80022f6:	68fa      	ldr	r2, [r7, #12]
 80022f8:	4413      	add	r3, r2
 80022fa:	3304      	adds	r3, #4
 80022fc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	687a      	ldr	r2, [r7, #4]
 8002302:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	683a      	ldr	r2, [r7, #0]
 8002308:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	2200      	movs	r2, #0
 800230e:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	2201      	movs	r2, #1
 8002314:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002316:	7afb      	ldrb	r3, [r7, #11]
 8002318:	f003 030f 	and.w	r3, r3, #15
 800231c:	b2da      	uxtb	r2, r3
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	799b      	ldrb	r3, [r3, #6]
 8002326:	2b01      	cmp	r3, #1
 8002328:	d102      	bne.n	8002330 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800232a:	687a      	ldr	r2, [r7, #4]
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	6818      	ldr	r0, [r3, #0]
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	799b      	ldrb	r3, [r3, #6]
 8002338:	461a      	mov	r2, r3
 800233a:	6979      	ldr	r1, [r7, #20]
 800233c:	f001 ff88 	bl	8004250 <USB_EPStartXfer>

  return HAL_OK;
 8002340:	2300      	movs	r3, #0
}
 8002342:	4618      	mov	r0, r3
 8002344:	3718      	adds	r7, #24
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}

0800234a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800234a:	b580      	push	{r7, lr}
 800234c:	b084      	sub	sp, #16
 800234e:	af00      	add	r7, sp, #0
 8002350:	6078      	str	r0, [r7, #4]
 8002352:	460b      	mov	r3, r1
 8002354:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002356:	78fb      	ldrb	r3, [r7, #3]
 8002358:	f003 030f 	and.w	r3, r3, #15
 800235c:	687a      	ldr	r2, [r7, #4]
 800235e:	7912      	ldrb	r2, [r2, #4]
 8002360:	4293      	cmp	r3, r2
 8002362:	d901      	bls.n	8002368 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e04f      	b.n	8002408 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002368:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800236c:	2b00      	cmp	r3, #0
 800236e:	da0f      	bge.n	8002390 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002370:	78fb      	ldrb	r3, [r7, #3]
 8002372:	f003 020f 	and.w	r2, r3, #15
 8002376:	4613      	mov	r3, r2
 8002378:	00db      	lsls	r3, r3, #3
 800237a:	4413      	add	r3, r2
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	3310      	adds	r3, #16
 8002380:	687a      	ldr	r2, [r7, #4]
 8002382:	4413      	add	r3, r2
 8002384:	3304      	adds	r3, #4
 8002386:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	2201      	movs	r2, #1
 800238c:	705a      	strb	r2, [r3, #1]
 800238e:	e00d      	b.n	80023ac <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002390:	78fa      	ldrb	r2, [r7, #3]
 8002392:	4613      	mov	r3, r2
 8002394:	00db      	lsls	r3, r3, #3
 8002396:	4413      	add	r3, r2
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800239e:	687a      	ldr	r2, [r7, #4]
 80023a0:	4413      	add	r3, r2
 80023a2:	3304      	adds	r3, #4
 80023a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	2200      	movs	r2, #0
 80023aa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	2201      	movs	r2, #1
 80023b0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80023b2:	78fb      	ldrb	r3, [r7, #3]
 80023b4:	f003 030f 	and.w	r3, r3, #15
 80023b8:	b2da      	uxtb	r2, r3
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d101      	bne.n	80023cc <HAL_PCD_EP_SetStall+0x82>
 80023c8:	2302      	movs	r3, #2
 80023ca:	e01d      	b.n	8002408 <HAL_PCD_EP_SetStall+0xbe>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2201      	movs	r2, #1
 80023d0:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	68f9      	ldr	r1, [r7, #12]
 80023da:	4618      	mov	r0, r3
 80023dc:	f002 fb10 	bl	8004a00 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80023e0:	78fb      	ldrb	r3, [r7, #3]
 80023e2:	f003 030f 	and.w	r3, r3, #15
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d109      	bne.n	80023fe <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6818      	ldr	r0, [r3, #0]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	7999      	ldrb	r1, [r3, #6]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80023f8:	461a      	mov	r2, r3
 80023fa:	f002 fd01 	bl	8004e00 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2200      	movs	r2, #0
 8002402:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8002406:	2300      	movs	r3, #0
}
 8002408:	4618      	mov	r0, r3
 800240a:	3710      	adds	r7, #16
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}

08002410 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b084      	sub	sp, #16
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
 8002418:	460b      	mov	r3, r1
 800241a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800241c:	78fb      	ldrb	r3, [r7, #3]
 800241e:	f003 030f 	and.w	r3, r3, #15
 8002422:	687a      	ldr	r2, [r7, #4]
 8002424:	7912      	ldrb	r2, [r2, #4]
 8002426:	4293      	cmp	r3, r2
 8002428:	d901      	bls.n	800242e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e042      	b.n	80024b4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800242e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002432:	2b00      	cmp	r3, #0
 8002434:	da0f      	bge.n	8002456 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002436:	78fb      	ldrb	r3, [r7, #3]
 8002438:	f003 020f 	and.w	r2, r3, #15
 800243c:	4613      	mov	r3, r2
 800243e:	00db      	lsls	r3, r3, #3
 8002440:	4413      	add	r3, r2
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	3310      	adds	r3, #16
 8002446:	687a      	ldr	r2, [r7, #4]
 8002448:	4413      	add	r3, r2
 800244a:	3304      	adds	r3, #4
 800244c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	2201      	movs	r2, #1
 8002452:	705a      	strb	r2, [r3, #1]
 8002454:	e00f      	b.n	8002476 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002456:	78fb      	ldrb	r3, [r7, #3]
 8002458:	f003 020f 	and.w	r2, r3, #15
 800245c:	4613      	mov	r3, r2
 800245e:	00db      	lsls	r3, r3, #3
 8002460:	4413      	add	r3, r2
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002468:	687a      	ldr	r2, [r7, #4]
 800246a:	4413      	add	r3, r2
 800246c:	3304      	adds	r3, #4
 800246e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	2200      	movs	r2, #0
 8002474:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	2200      	movs	r2, #0
 800247a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800247c:	78fb      	ldrb	r3, [r7, #3]
 800247e:	f003 030f 	and.w	r3, r3, #15
 8002482:	b2da      	uxtb	r2, r3
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800248e:	2b01      	cmp	r3, #1
 8002490:	d101      	bne.n	8002496 <HAL_PCD_EP_ClrStall+0x86>
 8002492:	2302      	movs	r3, #2
 8002494:	e00e      	b.n	80024b4 <HAL_PCD_EP_ClrStall+0xa4>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2201      	movs	r2, #1
 800249a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	68f9      	ldr	r1, [r7, #12]
 80024a4:	4618      	mov	r0, r3
 80024a6:	f002 fb19 	bl	8004adc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2200      	movs	r2, #0
 80024ae:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 80024b2:	2300      	movs	r3, #0
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	3710      	adds	r7, #16
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}

080024bc <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b084      	sub	sp, #16
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
 80024c4:	460b      	mov	r3, r1
 80024c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80024c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	da0c      	bge.n	80024ea <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80024d0:	78fb      	ldrb	r3, [r7, #3]
 80024d2:	f003 020f 	and.w	r2, r3, #15
 80024d6:	4613      	mov	r3, r2
 80024d8:	00db      	lsls	r3, r3, #3
 80024da:	4413      	add	r3, r2
 80024dc:	009b      	lsls	r3, r3, #2
 80024de:	3310      	adds	r3, #16
 80024e0:	687a      	ldr	r2, [r7, #4]
 80024e2:	4413      	add	r3, r2
 80024e4:	3304      	adds	r3, #4
 80024e6:	60fb      	str	r3, [r7, #12]
 80024e8:	e00c      	b.n	8002504 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80024ea:	78fb      	ldrb	r3, [r7, #3]
 80024ec:	f003 020f 	and.w	r2, r3, #15
 80024f0:	4613      	mov	r3, r2
 80024f2:	00db      	lsls	r3, r3, #3
 80024f4:	4413      	add	r3, r2
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80024fc:	687a      	ldr	r2, [r7, #4]
 80024fe:	4413      	add	r3, r2
 8002500:	3304      	adds	r3, #4
 8002502:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	68f9      	ldr	r1, [r7, #12]
 800250a:	4618      	mov	r0, r3
 800250c:	f002 f938 	bl	8004780 <USB_EPStopXfer>
 8002510:	4603      	mov	r3, r0
 8002512:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002514:	7afb      	ldrb	r3, [r7, #11]
}
 8002516:	4618      	mov	r0, r3
 8002518:	3710      	adds	r7, #16
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}

0800251e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800251e:	b580      	push	{r7, lr}
 8002520:	b08a      	sub	sp, #40	; 0x28
 8002522:	af02      	add	r7, sp, #8
 8002524:	6078      	str	r0, [r7, #4]
 8002526:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002532:	683a      	ldr	r2, [r7, #0]
 8002534:	4613      	mov	r3, r2
 8002536:	00db      	lsls	r3, r3, #3
 8002538:	4413      	add	r3, r2
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	3310      	adds	r3, #16
 800253e:	687a      	ldr	r2, [r7, #4]
 8002540:	4413      	add	r3, r2
 8002542:	3304      	adds	r3, #4
 8002544:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	695a      	ldr	r2, [r3, #20]
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	691b      	ldr	r3, [r3, #16]
 800254e:	429a      	cmp	r2, r3
 8002550:	d901      	bls.n	8002556 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e06b      	b.n	800262e <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	691a      	ldr	r2, [r3, #16]
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	695b      	ldr	r3, [r3, #20]
 800255e:	1ad3      	subs	r3, r2, r3
 8002560:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	69fa      	ldr	r2, [r7, #28]
 8002568:	429a      	cmp	r2, r3
 800256a:	d902      	bls.n	8002572 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002572:	69fb      	ldr	r3, [r7, #28]
 8002574:	3303      	adds	r3, #3
 8002576:	089b      	lsrs	r3, r3, #2
 8002578:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800257a:	e02a      	b.n	80025d2 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	691a      	ldr	r2, [r3, #16]
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	695b      	ldr	r3, [r3, #20]
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	69fa      	ldr	r2, [r7, #28]
 800258e:	429a      	cmp	r2, r3
 8002590:	d902      	bls.n	8002598 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002598:	69fb      	ldr	r3, [r7, #28]
 800259a:	3303      	adds	r3, #3
 800259c:	089b      	lsrs	r3, r3, #2
 800259e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	68d9      	ldr	r1, [r3, #12]
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	b2da      	uxtb	r2, r3
 80025a8:	69fb      	ldr	r3, [r7, #28]
 80025aa:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80025b0:	9300      	str	r3, [sp, #0]
 80025b2:	4603      	mov	r3, r0
 80025b4:	6978      	ldr	r0, [r7, #20]
 80025b6:	f002 f98d 	bl	80048d4 <USB_WritePacket>

    ep->xfer_buff  += len;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	68da      	ldr	r2, [r3, #12]
 80025be:	69fb      	ldr	r3, [r7, #28]
 80025c0:	441a      	add	r2, r3
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	695a      	ldr	r2, [r3, #20]
 80025ca:	69fb      	ldr	r3, [r7, #28]
 80025cc:	441a      	add	r2, r3
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	015a      	lsls	r2, r3, #5
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	4413      	add	r3, r2
 80025da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80025de:	699b      	ldr	r3, [r3, #24]
 80025e0:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80025e2:	69ba      	ldr	r2, [r7, #24]
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d809      	bhi.n	80025fc <PCD_WriteEmptyTxFifo+0xde>
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	695a      	ldr	r2, [r3, #20]
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d203      	bcs.n	80025fc <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	691b      	ldr	r3, [r3, #16]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d1bf      	bne.n	800257c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	691a      	ldr	r2, [r3, #16]
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	695b      	ldr	r3, [r3, #20]
 8002604:	429a      	cmp	r2, r3
 8002606:	d811      	bhi.n	800262c <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	f003 030f 	and.w	r3, r3, #15
 800260e:	2201      	movs	r2, #1
 8002610:	fa02 f303 	lsl.w	r3, r2, r3
 8002614:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800261c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	43db      	mvns	r3, r3
 8002622:	6939      	ldr	r1, [r7, #16]
 8002624:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002628:	4013      	ands	r3, r2
 800262a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800262c:	2300      	movs	r3, #0
}
 800262e:	4618      	mov	r0, r3
 8002630:	3720      	adds	r7, #32
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
	...

08002638 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b088      	sub	sp, #32
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
 8002640:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002648:	69fb      	ldr	r3, [r7, #28]
 800264a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	333c      	adds	r3, #60	; 0x3c
 8002650:	3304      	adds	r3, #4
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	015a      	lsls	r2, r3, #5
 800265a:	69bb      	ldr	r3, [r7, #24]
 800265c:	4413      	add	r3, r2
 800265e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	799b      	ldrb	r3, [r3, #6]
 800266a:	2b01      	cmp	r3, #1
 800266c:	d17b      	bne.n	8002766 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	f003 0308 	and.w	r3, r3, #8
 8002674:	2b00      	cmp	r3, #0
 8002676:	d015      	beq.n	80026a4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	4a61      	ldr	r2, [pc, #388]	; (8002800 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800267c:	4293      	cmp	r3, r2
 800267e:	f240 80b9 	bls.w	80027f4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002688:	2b00      	cmp	r3, #0
 800268a:	f000 80b3 	beq.w	80027f4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	015a      	lsls	r2, r3, #5
 8002692:	69bb      	ldr	r3, [r7, #24]
 8002694:	4413      	add	r3, r2
 8002696:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800269a:	461a      	mov	r2, r3
 800269c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80026a0:	6093      	str	r3, [r2, #8]
 80026a2:	e0a7      	b.n	80027f4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	f003 0320 	and.w	r3, r3, #32
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d009      	beq.n	80026c2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	015a      	lsls	r2, r3, #5
 80026b2:	69bb      	ldr	r3, [r7, #24]
 80026b4:	4413      	add	r3, r2
 80026b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026ba:	461a      	mov	r2, r3
 80026bc:	2320      	movs	r3, #32
 80026be:	6093      	str	r3, [r2, #8]
 80026c0:	e098      	b.n	80027f4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	f040 8093 	bne.w	80027f4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	4a4b      	ldr	r2, [pc, #300]	; (8002800 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d90f      	bls.n	80026f6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d00a      	beq.n	80026f6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	015a      	lsls	r2, r3, #5
 80026e4:	69bb      	ldr	r3, [r7, #24]
 80026e6:	4413      	add	r3, r2
 80026e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026ec:	461a      	mov	r2, r3
 80026ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80026f2:	6093      	str	r3, [r2, #8]
 80026f4:	e07e      	b.n	80027f4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80026f6:	683a      	ldr	r2, [r7, #0]
 80026f8:	4613      	mov	r3, r2
 80026fa:	00db      	lsls	r3, r3, #3
 80026fc:	4413      	add	r3, r2
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002704:	687a      	ldr	r2, [r7, #4]
 8002706:	4413      	add	r3, r2
 8002708:	3304      	adds	r3, #4
 800270a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	6a1a      	ldr	r2, [r3, #32]
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	0159      	lsls	r1, r3, #5
 8002714:	69bb      	ldr	r3, [r7, #24]
 8002716:	440b      	add	r3, r1
 8002718:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800271c:	691b      	ldr	r3, [r3, #16]
 800271e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002722:	1ad2      	subs	r2, r2, r3
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d114      	bne.n	8002758 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	691b      	ldr	r3, [r3, #16]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d109      	bne.n	800274a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6818      	ldr	r0, [r3, #0]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8002740:	461a      	mov	r2, r3
 8002742:	2101      	movs	r1, #1
 8002744:	f002 fb5c 	bl	8004e00 <USB_EP0_OutStart>
 8002748:	e006      	b.n	8002758 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	68da      	ldr	r2, [r3, #12]
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	695b      	ldr	r3, [r3, #20]
 8002752:	441a      	add	r2, r3
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	b2db      	uxtb	r3, r3
 800275c:	4619      	mov	r1, r3
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f007 fb6a 	bl	8009e38 <HAL_PCD_DataOutStageCallback>
 8002764:	e046      	b.n	80027f4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	4a26      	ldr	r2, [pc, #152]	; (8002804 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d124      	bne.n	80027b8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002774:	2b00      	cmp	r3, #0
 8002776:	d00a      	beq.n	800278e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	015a      	lsls	r2, r3, #5
 800277c:	69bb      	ldr	r3, [r7, #24]
 800277e:	4413      	add	r3, r2
 8002780:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002784:	461a      	mov	r2, r3
 8002786:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800278a:	6093      	str	r3, [r2, #8]
 800278c:	e032      	b.n	80027f4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	f003 0320 	and.w	r3, r3, #32
 8002794:	2b00      	cmp	r3, #0
 8002796:	d008      	beq.n	80027aa <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	015a      	lsls	r2, r3, #5
 800279c:	69bb      	ldr	r3, [r7, #24]
 800279e:	4413      	add	r3, r2
 80027a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027a4:	461a      	mov	r2, r3
 80027a6:	2320      	movs	r3, #32
 80027a8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	4619      	mov	r1, r3
 80027b0:	6878      	ldr	r0, [r7, #4]
 80027b2:	f007 fb41 	bl	8009e38 <HAL_PCD_DataOutStageCallback>
 80027b6:	e01d      	b.n	80027f4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d114      	bne.n	80027e8 <PCD_EP_OutXfrComplete_int+0x1b0>
 80027be:	6879      	ldr	r1, [r7, #4]
 80027c0:	683a      	ldr	r2, [r7, #0]
 80027c2:	4613      	mov	r3, r2
 80027c4:	00db      	lsls	r3, r3, #3
 80027c6:	4413      	add	r3, r2
 80027c8:	009b      	lsls	r3, r3, #2
 80027ca:	440b      	add	r3, r1
 80027cc:	f503 7319 	add.w	r3, r3, #612	; 0x264
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d108      	bne.n	80027e8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6818      	ldr	r0, [r3, #0]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80027e0:	461a      	mov	r2, r3
 80027e2:	2100      	movs	r1, #0
 80027e4:	f002 fb0c 	bl	8004e00 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	b2db      	uxtb	r3, r3
 80027ec:	4619      	mov	r1, r3
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f007 fb22 	bl	8009e38 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80027f4:	2300      	movs	r3, #0
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3720      	adds	r7, #32
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	4f54300a 	.word	0x4f54300a
 8002804:	4f54310a 	.word	0x4f54310a

08002808 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b086      	sub	sp, #24
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
 8002810:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	333c      	adds	r3, #60	; 0x3c
 8002820:	3304      	adds	r3, #4
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	015a      	lsls	r2, r3, #5
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	4413      	add	r3, r2
 800282e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	4a15      	ldr	r2, [pc, #84]	; (8002890 <PCD_EP_OutSetupPacket_int+0x88>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d90e      	bls.n	800285c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002844:	2b00      	cmp	r3, #0
 8002846:	d009      	beq.n	800285c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	015a      	lsls	r2, r3, #5
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	4413      	add	r3, r2
 8002850:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002854:	461a      	mov	r2, r3
 8002856:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800285a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800285c:	6878      	ldr	r0, [r7, #4]
 800285e:	f007 fad9 	bl	8009e14 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	4a0a      	ldr	r2, [pc, #40]	; (8002890 <PCD_EP_OutSetupPacket_int+0x88>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d90c      	bls.n	8002884 <PCD_EP_OutSetupPacket_int+0x7c>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	799b      	ldrb	r3, [r3, #6]
 800286e:	2b01      	cmp	r3, #1
 8002870:	d108      	bne.n	8002884 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6818      	ldr	r0, [r3, #0]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800287c:	461a      	mov	r2, r3
 800287e:	2101      	movs	r1, #1
 8002880:	f002 fabe 	bl	8004e00 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002884:	2300      	movs	r3, #0
}
 8002886:	4618      	mov	r0, r3
 8002888:	3718      	adds	r7, #24
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	4f54300a 	.word	0x4f54300a

08002894 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002894:	b480      	push	{r7}
 8002896:	b085      	sub	sp, #20
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
 800289c:	460b      	mov	r3, r1
 800289e:	70fb      	strb	r3, [r7, #3]
 80028a0:	4613      	mov	r3, r2
 80028a2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028aa:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80028ac:	78fb      	ldrb	r3, [r7, #3]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d107      	bne.n	80028c2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80028b2:	883b      	ldrh	r3, [r7, #0]
 80028b4:	0419      	lsls	r1, r3, #16
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	68ba      	ldr	r2, [r7, #8]
 80028bc:	430a      	orrs	r2, r1
 80028be:	629a      	str	r2, [r3, #40]	; 0x28
 80028c0:	e028      	b.n	8002914 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028c8:	0c1b      	lsrs	r3, r3, #16
 80028ca:	68ba      	ldr	r2, [r7, #8]
 80028cc:	4413      	add	r3, r2
 80028ce:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80028d0:	2300      	movs	r3, #0
 80028d2:	73fb      	strb	r3, [r7, #15]
 80028d4:	e00d      	b.n	80028f2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	7bfb      	ldrb	r3, [r7, #15]
 80028dc:	3340      	adds	r3, #64	; 0x40
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	4413      	add	r3, r2
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	0c1b      	lsrs	r3, r3, #16
 80028e6:	68ba      	ldr	r2, [r7, #8]
 80028e8:	4413      	add	r3, r2
 80028ea:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80028ec:	7bfb      	ldrb	r3, [r7, #15]
 80028ee:	3301      	adds	r3, #1
 80028f0:	73fb      	strb	r3, [r7, #15]
 80028f2:	7bfa      	ldrb	r2, [r7, #15]
 80028f4:	78fb      	ldrb	r3, [r7, #3]
 80028f6:	3b01      	subs	r3, #1
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d3ec      	bcc.n	80028d6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80028fc:	883b      	ldrh	r3, [r7, #0]
 80028fe:	0418      	lsls	r0, r3, #16
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6819      	ldr	r1, [r3, #0]
 8002904:	78fb      	ldrb	r3, [r7, #3]
 8002906:	3b01      	subs	r3, #1
 8002908:	68ba      	ldr	r2, [r7, #8]
 800290a:	4302      	orrs	r2, r0
 800290c:	3340      	adds	r3, #64	; 0x40
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	440b      	add	r3, r1
 8002912:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002914:	2300      	movs	r3, #0
}
 8002916:	4618      	mov	r0, r3
 8002918:	3714      	adds	r7, #20
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr

08002922 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002922:	b480      	push	{r7}
 8002924:	b083      	sub	sp, #12
 8002926:	af00      	add	r7, sp, #0
 8002928:	6078      	str	r0, [r7, #4]
 800292a:	460b      	mov	r3, r1
 800292c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	887a      	ldrh	r2, [r7, #2]
 8002934:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002936:	2300      	movs	r3, #0
}
 8002938:	4618      	mov	r0, r3
 800293a:	370c      	adds	r7, #12
 800293c:	46bd      	mov	sp, r7
 800293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002942:	4770      	bx	lr

08002944 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002944:	b480      	push	{r7}
 8002946:	b083      	sub	sp, #12
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
 800294c:	460b      	mov	r3, r1
 800294e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002950:	bf00      	nop
 8002952:	370c      	adds	r7, #12
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr

0800295c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b086      	sub	sp, #24
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d101      	bne.n	800296e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e267      	b.n	8002e3e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f003 0301 	and.w	r3, r3, #1
 8002976:	2b00      	cmp	r3, #0
 8002978:	d075      	beq.n	8002a66 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800297a:	4b88      	ldr	r3, [pc, #544]	; (8002b9c <HAL_RCC_OscConfig+0x240>)
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	f003 030c 	and.w	r3, r3, #12
 8002982:	2b04      	cmp	r3, #4
 8002984:	d00c      	beq.n	80029a0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002986:	4b85      	ldr	r3, [pc, #532]	; (8002b9c <HAL_RCC_OscConfig+0x240>)
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800298e:	2b08      	cmp	r3, #8
 8002990:	d112      	bne.n	80029b8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002992:	4b82      	ldr	r3, [pc, #520]	; (8002b9c <HAL_RCC_OscConfig+0x240>)
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800299a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800299e:	d10b      	bne.n	80029b8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029a0:	4b7e      	ldr	r3, [pc, #504]	; (8002b9c <HAL_RCC_OscConfig+0x240>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d05b      	beq.n	8002a64 <HAL_RCC_OscConfig+0x108>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d157      	bne.n	8002a64 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	e242      	b.n	8002e3e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029c0:	d106      	bne.n	80029d0 <HAL_RCC_OscConfig+0x74>
 80029c2:	4b76      	ldr	r3, [pc, #472]	; (8002b9c <HAL_RCC_OscConfig+0x240>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a75      	ldr	r2, [pc, #468]	; (8002b9c <HAL_RCC_OscConfig+0x240>)
 80029c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029cc:	6013      	str	r3, [r2, #0]
 80029ce:	e01d      	b.n	8002a0c <HAL_RCC_OscConfig+0xb0>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029d8:	d10c      	bne.n	80029f4 <HAL_RCC_OscConfig+0x98>
 80029da:	4b70      	ldr	r3, [pc, #448]	; (8002b9c <HAL_RCC_OscConfig+0x240>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a6f      	ldr	r2, [pc, #444]	; (8002b9c <HAL_RCC_OscConfig+0x240>)
 80029e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029e4:	6013      	str	r3, [r2, #0]
 80029e6:	4b6d      	ldr	r3, [pc, #436]	; (8002b9c <HAL_RCC_OscConfig+0x240>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a6c      	ldr	r2, [pc, #432]	; (8002b9c <HAL_RCC_OscConfig+0x240>)
 80029ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029f0:	6013      	str	r3, [r2, #0]
 80029f2:	e00b      	b.n	8002a0c <HAL_RCC_OscConfig+0xb0>
 80029f4:	4b69      	ldr	r3, [pc, #420]	; (8002b9c <HAL_RCC_OscConfig+0x240>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a68      	ldr	r2, [pc, #416]	; (8002b9c <HAL_RCC_OscConfig+0x240>)
 80029fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029fe:	6013      	str	r3, [r2, #0]
 8002a00:	4b66      	ldr	r3, [pc, #408]	; (8002b9c <HAL_RCC_OscConfig+0x240>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a65      	ldr	r2, [pc, #404]	; (8002b9c <HAL_RCC_OscConfig+0x240>)
 8002a06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d013      	beq.n	8002a3c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a14:	f7fe f964 	bl	8000ce0 <HAL_GetTick>
 8002a18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a1a:	e008      	b.n	8002a2e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a1c:	f7fe f960 	bl	8000ce0 <HAL_GetTick>
 8002a20:	4602      	mov	r2, r0
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	2b64      	cmp	r3, #100	; 0x64
 8002a28:	d901      	bls.n	8002a2e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	e207      	b.n	8002e3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a2e:	4b5b      	ldr	r3, [pc, #364]	; (8002b9c <HAL_RCC_OscConfig+0x240>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d0f0      	beq.n	8002a1c <HAL_RCC_OscConfig+0xc0>
 8002a3a:	e014      	b.n	8002a66 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a3c:	f7fe f950 	bl	8000ce0 <HAL_GetTick>
 8002a40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a42:	e008      	b.n	8002a56 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a44:	f7fe f94c 	bl	8000ce0 <HAL_GetTick>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	2b64      	cmp	r3, #100	; 0x64
 8002a50:	d901      	bls.n	8002a56 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a52:	2303      	movs	r3, #3
 8002a54:	e1f3      	b.n	8002e3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a56:	4b51      	ldr	r3, [pc, #324]	; (8002b9c <HAL_RCC_OscConfig+0x240>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d1f0      	bne.n	8002a44 <HAL_RCC_OscConfig+0xe8>
 8002a62:	e000      	b.n	8002a66 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 0302 	and.w	r3, r3, #2
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d063      	beq.n	8002b3a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a72:	4b4a      	ldr	r3, [pc, #296]	; (8002b9c <HAL_RCC_OscConfig+0x240>)
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	f003 030c 	and.w	r3, r3, #12
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d00b      	beq.n	8002a96 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a7e:	4b47      	ldr	r3, [pc, #284]	; (8002b9c <HAL_RCC_OscConfig+0x240>)
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a86:	2b08      	cmp	r3, #8
 8002a88:	d11c      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a8a:	4b44      	ldr	r3, [pc, #272]	; (8002b9c <HAL_RCC_OscConfig+0x240>)
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d116      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a96:	4b41      	ldr	r3, [pc, #260]	; (8002b9c <HAL_RCC_OscConfig+0x240>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 0302 	and.w	r3, r3, #2
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d005      	beq.n	8002aae <HAL_RCC_OscConfig+0x152>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	68db      	ldr	r3, [r3, #12]
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d001      	beq.n	8002aae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e1c7      	b.n	8002e3e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002aae:	4b3b      	ldr	r3, [pc, #236]	; (8002b9c <HAL_RCC_OscConfig+0x240>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	691b      	ldr	r3, [r3, #16]
 8002aba:	00db      	lsls	r3, r3, #3
 8002abc:	4937      	ldr	r1, [pc, #220]	; (8002b9c <HAL_RCC_OscConfig+0x240>)
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ac2:	e03a      	b.n	8002b3a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d020      	beq.n	8002b0e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002acc:	4b34      	ldr	r3, [pc, #208]	; (8002ba0 <HAL_RCC_OscConfig+0x244>)
 8002ace:	2201      	movs	r2, #1
 8002ad0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ad2:	f7fe f905 	bl	8000ce0 <HAL_GetTick>
 8002ad6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ad8:	e008      	b.n	8002aec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ada:	f7fe f901 	bl	8000ce0 <HAL_GetTick>
 8002ade:	4602      	mov	r2, r0
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	1ad3      	subs	r3, r2, r3
 8002ae4:	2b02      	cmp	r3, #2
 8002ae6:	d901      	bls.n	8002aec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002ae8:	2303      	movs	r3, #3
 8002aea:	e1a8      	b.n	8002e3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002aec:	4b2b      	ldr	r3, [pc, #172]	; (8002b9c <HAL_RCC_OscConfig+0x240>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f003 0302 	and.w	r3, r3, #2
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d0f0      	beq.n	8002ada <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002af8:	4b28      	ldr	r3, [pc, #160]	; (8002b9c <HAL_RCC_OscConfig+0x240>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	691b      	ldr	r3, [r3, #16]
 8002b04:	00db      	lsls	r3, r3, #3
 8002b06:	4925      	ldr	r1, [pc, #148]	; (8002b9c <HAL_RCC_OscConfig+0x240>)
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	600b      	str	r3, [r1, #0]
 8002b0c:	e015      	b.n	8002b3a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b0e:	4b24      	ldr	r3, [pc, #144]	; (8002ba0 <HAL_RCC_OscConfig+0x244>)
 8002b10:	2200      	movs	r2, #0
 8002b12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b14:	f7fe f8e4 	bl	8000ce0 <HAL_GetTick>
 8002b18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b1a:	e008      	b.n	8002b2e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b1c:	f7fe f8e0 	bl	8000ce0 <HAL_GetTick>
 8002b20:	4602      	mov	r2, r0
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	2b02      	cmp	r3, #2
 8002b28:	d901      	bls.n	8002b2e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	e187      	b.n	8002e3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b2e:	4b1b      	ldr	r3, [pc, #108]	; (8002b9c <HAL_RCC_OscConfig+0x240>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 0302 	and.w	r3, r3, #2
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d1f0      	bne.n	8002b1c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 0308 	and.w	r3, r3, #8
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d036      	beq.n	8002bb4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	695b      	ldr	r3, [r3, #20]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d016      	beq.n	8002b7c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b4e:	4b15      	ldr	r3, [pc, #84]	; (8002ba4 <HAL_RCC_OscConfig+0x248>)
 8002b50:	2201      	movs	r2, #1
 8002b52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b54:	f7fe f8c4 	bl	8000ce0 <HAL_GetTick>
 8002b58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b5a:	e008      	b.n	8002b6e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b5c:	f7fe f8c0 	bl	8000ce0 <HAL_GetTick>
 8002b60:	4602      	mov	r2, r0
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	1ad3      	subs	r3, r2, r3
 8002b66:	2b02      	cmp	r3, #2
 8002b68:	d901      	bls.n	8002b6e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	e167      	b.n	8002e3e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b6e:	4b0b      	ldr	r3, [pc, #44]	; (8002b9c <HAL_RCC_OscConfig+0x240>)
 8002b70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b72:	f003 0302 	and.w	r3, r3, #2
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d0f0      	beq.n	8002b5c <HAL_RCC_OscConfig+0x200>
 8002b7a:	e01b      	b.n	8002bb4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b7c:	4b09      	ldr	r3, [pc, #36]	; (8002ba4 <HAL_RCC_OscConfig+0x248>)
 8002b7e:	2200      	movs	r2, #0
 8002b80:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b82:	f7fe f8ad 	bl	8000ce0 <HAL_GetTick>
 8002b86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b88:	e00e      	b.n	8002ba8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b8a:	f7fe f8a9 	bl	8000ce0 <HAL_GetTick>
 8002b8e:	4602      	mov	r2, r0
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	1ad3      	subs	r3, r2, r3
 8002b94:	2b02      	cmp	r3, #2
 8002b96:	d907      	bls.n	8002ba8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002b98:	2303      	movs	r3, #3
 8002b9a:	e150      	b.n	8002e3e <HAL_RCC_OscConfig+0x4e2>
 8002b9c:	40023800 	.word	0x40023800
 8002ba0:	42470000 	.word	0x42470000
 8002ba4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ba8:	4b88      	ldr	r3, [pc, #544]	; (8002dcc <HAL_RCC_OscConfig+0x470>)
 8002baa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bac:	f003 0302 	and.w	r3, r3, #2
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d1ea      	bne.n	8002b8a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 0304 	and.w	r3, r3, #4
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	f000 8097 	beq.w	8002cf0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bc6:	4b81      	ldr	r3, [pc, #516]	; (8002dcc <HAL_RCC_OscConfig+0x470>)
 8002bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d10f      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	60bb      	str	r3, [r7, #8]
 8002bd6:	4b7d      	ldr	r3, [pc, #500]	; (8002dcc <HAL_RCC_OscConfig+0x470>)
 8002bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bda:	4a7c      	ldr	r2, [pc, #496]	; (8002dcc <HAL_RCC_OscConfig+0x470>)
 8002bdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002be0:	6413      	str	r3, [r2, #64]	; 0x40
 8002be2:	4b7a      	ldr	r3, [pc, #488]	; (8002dcc <HAL_RCC_OscConfig+0x470>)
 8002be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bea:	60bb      	str	r3, [r7, #8]
 8002bec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bf2:	4b77      	ldr	r3, [pc, #476]	; (8002dd0 <HAL_RCC_OscConfig+0x474>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d118      	bne.n	8002c30 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002bfe:	4b74      	ldr	r3, [pc, #464]	; (8002dd0 <HAL_RCC_OscConfig+0x474>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a73      	ldr	r2, [pc, #460]	; (8002dd0 <HAL_RCC_OscConfig+0x474>)
 8002c04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c0a:	f7fe f869 	bl	8000ce0 <HAL_GetTick>
 8002c0e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c10:	e008      	b.n	8002c24 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c12:	f7fe f865 	bl	8000ce0 <HAL_GetTick>
 8002c16:	4602      	mov	r2, r0
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	1ad3      	subs	r3, r2, r3
 8002c1c:	2b02      	cmp	r3, #2
 8002c1e:	d901      	bls.n	8002c24 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002c20:	2303      	movs	r3, #3
 8002c22:	e10c      	b.n	8002e3e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c24:	4b6a      	ldr	r3, [pc, #424]	; (8002dd0 <HAL_RCC_OscConfig+0x474>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d0f0      	beq.n	8002c12 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	d106      	bne.n	8002c46 <HAL_RCC_OscConfig+0x2ea>
 8002c38:	4b64      	ldr	r3, [pc, #400]	; (8002dcc <HAL_RCC_OscConfig+0x470>)
 8002c3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c3c:	4a63      	ldr	r2, [pc, #396]	; (8002dcc <HAL_RCC_OscConfig+0x470>)
 8002c3e:	f043 0301 	orr.w	r3, r3, #1
 8002c42:	6713      	str	r3, [r2, #112]	; 0x70
 8002c44:	e01c      	b.n	8002c80 <HAL_RCC_OscConfig+0x324>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	2b05      	cmp	r3, #5
 8002c4c:	d10c      	bne.n	8002c68 <HAL_RCC_OscConfig+0x30c>
 8002c4e:	4b5f      	ldr	r3, [pc, #380]	; (8002dcc <HAL_RCC_OscConfig+0x470>)
 8002c50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c52:	4a5e      	ldr	r2, [pc, #376]	; (8002dcc <HAL_RCC_OscConfig+0x470>)
 8002c54:	f043 0304 	orr.w	r3, r3, #4
 8002c58:	6713      	str	r3, [r2, #112]	; 0x70
 8002c5a:	4b5c      	ldr	r3, [pc, #368]	; (8002dcc <HAL_RCC_OscConfig+0x470>)
 8002c5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c5e:	4a5b      	ldr	r2, [pc, #364]	; (8002dcc <HAL_RCC_OscConfig+0x470>)
 8002c60:	f043 0301 	orr.w	r3, r3, #1
 8002c64:	6713      	str	r3, [r2, #112]	; 0x70
 8002c66:	e00b      	b.n	8002c80 <HAL_RCC_OscConfig+0x324>
 8002c68:	4b58      	ldr	r3, [pc, #352]	; (8002dcc <HAL_RCC_OscConfig+0x470>)
 8002c6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c6c:	4a57      	ldr	r2, [pc, #348]	; (8002dcc <HAL_RCC_OscConfig+0x470>)
 8002c6e:	f023 0301 	bic.w	r3, r3, #1
 8002c72:	6713      	str	r3, [r2, #112]	; 0x70
 8002c74:	4b55      	ldr	r3, [pc, #340]	; (8002dcc <HAL_RCC_OscConfig+0x470>)
 8002c76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c78:	4a54      	ldr	r2, [pc, #336]	; (8002dcc <HAL_RCC_OscConfig+0x470>)
 8002c7a:	f023 0304 	bic.w	r3, r3, #4
 8002c7e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d015      	beq.n	8002cb4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c88:	f7fe f82a 	bl	8000ce0 <HAL_GetTick>
 8002c8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c8e:	e00a      	b.n	8002ca6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c90:	f7fe f826 	bl	8000ce0 <HAL_GetTick>
 8002c94:	4602      	mov	r2, r0
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d901      	bls.n	8002ca6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	e0cb      	b.n	8002e3e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ca6:	4b49      	ldr	r3, [pc, #292]	; (8002dcc <HAL_RCC_OscConfig+0x470>)
 8002ca8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002caa:	f003 0302 	and.w	r3, r3, #2
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d0ee      	beq.n	8002c90 <HAL_RCC_OscConfig+0x334>
 8002cb2:	e014      	b.n	8002cde <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cb4:	f7fe f814 	bl	8000ce0 <HAL_GetTick>
 8002cb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cba:	e00a      	b.n	8002cd2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cbc:	f7fe f810 	bl	8000ce0 <HAL_GetTick>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d901      	bls.n	8002cd2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002cce:	2303      	movs	r3, #3
 8002cd0:	e0b5      	b.n	8002e3e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cd2:	4b3e      	ldr	r3, [pc, #248]	; (8002dcc <HAL_RCC_OscConfig+0x470>)
 8002cd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cd6:	f003 0302 	and.w	r3, r3, #2
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d1ee      	bne.n	8002cbc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002cde:	7dfb      	ldrb	r3, [r7, #23]
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d105      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ce4:	4b39      	ldr	r3, [pc, #228]	; (8002dcc <HAL_RCC_OscConfig+0x470>)
 8002ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce8:	4a38      	ldr	r2, [pc, #224]	; (8002dcc <HAL_RCC_OscConfig+0x470>)
 8002cea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cee:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	699b      	ldr	r3, [r3, #24]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	f000 80a1 	beq.w	8002e3c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002cfa:	4b34      	ldr	r3, [pc, #208]	; (8002dcc <HAL_RCC_OscConfig+0x470>)
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	f003 030c 	and.w	r3, r3, #12
 8002d02:	2b08      	cmp	r3, #8
 8002d04:	d05c      	beq.n	8002dc0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	699b      	ldr	r3, [r3, #24]
 8002d0a:	2b02      	cmp	r3, #2
 8002d0c:	d141      	bne.n	8002d92 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d0e:	4b31      	ldr	r3, [pc, #196]	; (8002dd4 <HAL_RCC_OscConfig+0x478>)
 8002d10:	2200      	movs	r2, #0
 8002d12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d14:	f7fd ffe4 	bl	8000ce0 <HAL_GetTick>
 8002d18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d1a:	e008      	b.n	8002d2e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d1c:	f7fd ffe0 	bl	8000ce0 <HAL_GetTick>
 8002d20:	4602      	mov	r2, r0
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	1ad3      	subs	r3, r2, r3
 8002d26:	2b02      	cmp	r3, #2
 8002d28:	d901      	bls.n	8002d2e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002d2a:	2303      	movs	r3, #3
 8002d2c:	e087      	b.n	8002e3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d2e:	4b27      	ldr	r3, [pc, #156]	; (8002dcc <HAL_RCC_OscConfig+0x470>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d1f0      	bne.n	8002d1c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	69da      	ldr	r2, [r3, #28]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6a1b      	ldr	r3, [r3, #32]
 8002d42:	431a      	orrs	r2, r3
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d48:	019b      	lsls	r3, r3, #6
 8002d4a:	431a      	orrs	r2, r3
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d50:	085b      	lsrs	r3, r3, #1
 8002d52:	3b01      	subs	r3, #1
 8002d54:	041b      	lsls	r3, r3, #16
 8002d56:	431a      	orrs	r2, r3
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d5c:	061b      	lsls	r3, r3, #24
 8002d5e:	491b      	ldr	r1, [pc, #108]	; (8002dcc <HAL_RCC_OscConfig+0x470>)
 8002d60:	4313      	orrs	r3, r2
 8002d62:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d64:	4b1b      	ldr	r3, [pc, #108]	; (8002dd4 <HAL_RCC_OscConfig+0x478>)
 8002d66:	2201      	movs	r2, #1
 8002d68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d6a:	f7fd ffb9 	bl	8000ce0 <HAL_GetTick>
 8002d6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d70:	e008      	b.n	8002d84 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d72:	f7fd ffb5 	bl	8000ce0 <HAL_GetTick>
 8002d76:	4602      	mov	r2, r0
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	1ad3      	subs	r3, r2, r3
 8002d7c:	2b02      	cmp	r3, #2
 8002d7e:	d901      	bls.n	8002d84 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002d80:	2303      	movs	r3, #3
 8002d82:	e05c      	b.n	8002e3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d84:	4b11      	ldr	r3, [pc, #68]	; (8002dcc <HAL_RCC_OscConfig+0x470>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d0f0      	beq.n	8002d72 <HAL_RCC_OscConfig+0x416>
 8002d90:	e054      	b.n	8002e3c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d92:	4b10      	ldr	r3, [pc, #64]	; (8002dd4 <HAL_RCC_OscConfig+0x478>)
 8002d94:	2200      	movs	r2, #0
 8002d96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d98:	f7fd ffa2 	bl	8000ce0 <HAL_GetTick>
 8002d9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d9e:	e008      	b.n	8002db2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002da0:	f7fd ff9e 	bl	8000ce0 <HAL_GetTick>
 8002da4:	4602      	mov	r2, r0
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	1ad3      	subs	r3, r2, r3
 8002daa:	2b02      	cmp	r3, #2
 8002dac:	d901      	bls.n	8002db2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002dae:	2303      	movs	r3, #3
 8002db0:	e045      	b.n	8002e3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002db2:	4b06      	ldr	r3, [pc, #24]	; (8002dcc <HAL_RCC_OscConfig+0x470>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d1f0      	bne.n	8002da0 <HAL_RCC_OscConfig+0x444>
 8002dbe:	e03d      	b.n	8002e3c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	699b      	ldr	r3, [r3, #24]
 8002dc4:	2b01      	cmp	r3, #1
 8002dc6:	d107      	bne.n	8002dd8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e038      	b.n	8002e3e <HAL_RCC_OscConfig+0x4e2>
 8002dcc:	40023800 	.word	0x40023800
 8002dd0:	40007000 	.word	0x40007000
 8002dd4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002dd8:	4b1b      	ldr	r3, [pc, #108]	; (8002e48 <HAL_RCC_OscConfig+0x4ec>)
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	699b      	ldr	r3, [r3, #24]
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d028      	beq.n	8002e38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d121      	bne.n	8002e38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d11a      	bne.n	8002e38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e02:	68fa      	ldr	r2, [r7, #12]
 8002e04:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002e08:	4013      	ands	r3, r2
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002e0e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d111      	bne.n	8002e38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e1e:	085b      	lsrs	r3, r3, #1
 8002e20:	3b01      	subs	r3, #1
 8002e22:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d107      	bne.n	8002e38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e32:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d001      	beq.n	8002e3c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e000      	b.n	8002e3e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002e3c:	2300      	movs	r3, #0
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3718      	adds	r7, #24
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	40023800 	.word	0x40023800

08002e4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b084      	sub	sp, #16
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
 8002e54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d101      	bne.n	8002e60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e0cc      	b.n	8002ffa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e60:	4b68      	ldr	r3, [pc, #416]	; (8003004 <HAL_RCC_ClockConfig+0x1b8>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f003 030f 	and.w	r3, r3, #15
 8002e68:	683a      	ldr	r2, [r7, #0]
 8002e6a:	429a      	cmp	r2, r3
 8002e6c:	d90c      	bls.n	8002e88 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e6e:	4b65      	ldr	r3, [pc, #404]	; (8003004 <HAL_RCC_ClockConfig+0x1b8>)
 8002e70:	683a      	ldr	r2, [r7, #0]
 8002e72:	b2d2      	uxtb	r2, r2
 8002e74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e76:	4b63      	ldr	r3, [pc, #396]	; (8003004 <HAL_RCC_ClockConfig+0x1b8>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 030f 	and.w	r3, r3, #15
 8002e7e:	683a      	ldr	r2, [r7, #0]
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d001      	beq.n	8002e88 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	e0b8      	b.n	8002ffa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 0302 	and.w	r3, r3, #2
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d020      	beq.n	8002ed6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 0304 	and.w	r3, r3, #4
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d005      	beq.n	8002eac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ea0:	4b59      	ldr	r3, [pc, #356]	; (8003008 <HAL_RCC_ClockConfig+0x1bc>)
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	4a58      	ldr	r2, [pc, #352]	; (8003008 <HAL_RCC_ClockConfig+0x1bc>)
 8002ea6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002eaa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 0308 	and.w	r3, r3, #8
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d005      	beq.n	8002ec4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002eb8:	4b53      	ldr	r3, [pc, #332]	; (8003008 <HAL_RCC_ClockConfig+0x1bc>)
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	4a52      	ldr	r2, [pc, #328]	; (8003008 <HAL_RCC_ClockConfig+0x1bc>)
 8002ebe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002ec2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ec4:	4b50      	ldr	r3, [pc, #320]	; (8003008 <HAL_RCC_ClockConfig+0x1bc>)
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	494d      	ldr	r1, [pc, #308]	; (8003008 <HAL_RCC_ClockConfig+0x1bc>)
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 0301 	and.w	r3, r3, #1
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d044      	beq.n	8002f6c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d107      	bne.n	8002efa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eea:	4b47      	ldr	r3, [pc, #284]	; (8003008 <HAL_RCC_ClockConfig+0x1bc>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d119      	bne.n	8002f2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e07f      	b.n	8002ffa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	2b02      	cmp	r3, #2
 8002f00:	d003      	beq.n	8002f0a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f06:	2b03      	cmp	r3, #3
 8002f08:	d107      	bne.n	8002f1a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f0a:	4b3f      	ldr	r3, [pc, #252]	; (8003008 <HAL_RCC_ClockConfig+0x1bc>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d109      	bne.n	8002f2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e06f      	b.n	8002ffa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f1a:	4b3b      	ldr	r3, [pc, #236]	; (8003008 <HAL_RCC_ClockConfig+0x1bc>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 0302 	and.w	r3, r3, #2
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d101      	bne.n	8002f2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	e067      	b.n	8002ffa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f2a:	4b37      	ldr	r3, [pc, #220]	; (8003008 <HAL_RCC_ClockConfig+0x1bc>)
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	f023 0203 	bic.w	r2, r3, #3
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	4934      	ldr	r1, [pc, #208]	; (8003008 <HAL_RCC_ClockConfig+0x1bc>)
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f3c:	f7fd fed0 	bl	8000ce0 <HAL_GetTick>
 8002f40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f42:	e00a      	b.n	8002f5a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f44:	f7fd fecc 	bl	8000ce0 <HAL_GetTick>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d901      	bls.n	8002f5a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f56:	2303      	movs	r3, #3
 8002f58:	e04f      	b.n	8002ffa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f5a:	4b2b      	ldr	r3, [pc, #172]	; (8003008 <HAL_RCC_ClockConfig+0x1bc>)
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	f003 020c 	and.w	r2, r3, #12
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	009b      	lsls	r3, r3, #2
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d1eb      	bne.n	8002f44 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f6c:	4b25      	ldr	r3, [pc, #148]	; (8003004 <HAL_RCC_ClockConfig+0x1b8>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 030f 	and.w	r3, r3, #15
 8002f74:	683a      	ldr	r2, [r7, #0]
 8002f76:	429a      	cmp	r2, r3
 8002f78:	d20c      	bcs.n	8002f94 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f7a:	4b22      	ldr	r3, [pc, #136]	; (8003004 <HAL_RCC_ClockConfig+0x1b8>)
 8002f7c:	683a      	ldr	r2, [r7, #0]
 8002f7e:	b2d2      	uxtb	r2, r2
 8002f80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f82:	4b20      	ldr	r3, [pc, #128]	; (8003004 <HAL_RCC_ClockConfig+0x1b8>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f003 030f 	and.w	r3, r3, #15
 8002f8a:	683a      	ldr	r2, [r7, #0]
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d001      	beq.n	8002f94 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	e032      	b.n	8002ffa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f003 0304 	and.w	r3, r3, #4
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d008      	beq.n	8002fb2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fa0:	4b19      	ldr	r3, [pc, #100]	; (8003008 <HAL_RCC_ClockConfig+0x1bc>)
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	68db      	ldr	r3, [r3, #12]
 8002fac:	4916      	ldr	r1, [pc, #88]	; (8003008 <HAL_RCC_ClockConfig+0x1bc>)
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 0308 	and.w	r3, r3, #8
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d009      	beq.n	8002fd2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002fbe:	4b12      	ldr	r3, [pc, #72]	; (8003008 <HAL_RCC_ClockConfig+0x1bc>)
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	691b      	ldr	r3, [r3, #16]
 8002fca:	00db      	lsls	r3, r3, #3
 8002fcc:	490e      	ldr	r1, [pc, #56]	; (8003008 <HAL_RCC_ClockConfig+0x1bc>)
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002fd2:	f000 f821 	bl	8003018 <HAL_RCC_GetSysClockFreq>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	4b0b      	ldr	r3, [pc, #44]	; (8003008 <HAL_RCC_ClockConfig+0x1bc>)
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	091b      	lsrs	r3, r3, #4
 8002fde:	f003 030f 	and.w	r3, r3, #15
 8002fe2:	490a      	ldr	r1, [pc, #40]	; (800300c <HAL_RCC_ClockConfig+0x1c0>)
 8002fe4:	5ccb      	ldrb	r3, [r1, r3]
 8002fe6:	fa22 f303 	lsr.w	r3, r2, r3
 8002fea:	4a09      	ldr	r2, [pc, #36]	; (8003010 <HAL_RCC_ClockConfig+0x1c4>)
 8002fec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002fee:	4b09      	ldr	r3, [pc, #36]	; (8003014 <HAL_RCC_ClockConfig+0x1c8>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f7fd fd5c 	bl	8000ab0 <HAL_InitTick>

  return HAL_OK;
 8002ff8:	2300      	movs	r3, #0
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3710      	adds	r7, #16
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}
 8003002:	bf00      	nop
 8003004:	40023c00 	.word	0x40023c00
 8003008:	40023800 	.word	0x40023800
 800300c:	0800a72c 	.word	0x0800a72c
 8003010:	20000000 	.word	0x20000000
 8003014:	20000004 	.word	0x20000004

08003018 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003018:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800301c:	b090      	sub	sp, #64	; 0x40
 800301e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003020:	2300      	movs	r3, #0
 8003022:	637b      	str	r3, [r7, #52]	; 0x34
 8003024:	2300      	movs	r3, #0
 8003026:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003028:	2300      	movs	r3, #0
 800302a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800302c:	2300      	movs	r3, #0
 800302e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003030:	4b59      	ldr	r3, [pc, #356]	; (8003198 <HAL_RCC_GetSysClockFreq+0x180>)
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	f003 030c 	and.w	r3, r3, #12
 8003038:	2b08      	cmp	r3, #8
 800303a:	d00d      	beq.n	8003058 <HAL_RCC_GetSysClockFreq+0x40>
 800303c:	2b08      	cmp	r3, #8
 800303e:	f200 80a1 	bhi.w	8003184 <HAL_RCC_GetSysClockFreq+0x16c>
 8003042:	2b00      	cmp	r3, #0
 8003044:	d002      	beq.n	800304c <HAL_RCC_GetSysClockFreq+0x34>
 8003046:	2b04      	cmp	r3, #4
 8003048:	d003      	beq.n	8003052 <HAL_RCC_GetSysClockFreq+0x3a>
 800304a:	e09b      	b.n	8003184 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800304c:	4b53      	ldr	r3, [pc, #332]	; (800319c <HAL_RCC_GetSysClockFreq+0x184>)
 800304e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003050:	e09b      	b.n	800318a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003052:	4b53      	ldr	r3, [pc, #332]	; (80031a0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003054:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003056:	e098      	b.n	800318a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003058:	4b4f      	ldr	r3, [pc, #316]	; (8003198 <HAL_RCC_GetSysClockFreq+0x180>)
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003060:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003062:	4b4d      	ldr	r3, [pc, #308]	; (8003198 <HAL_RCC_GetSysClockFreq+0x180>)
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800306a:	2b00      	cmp	r3, #0
 800306c:	d028      	beq.n	80030c0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800306e:	4b4a      	ldr	r3, [pc, #296]	; (8003198 <HAL_RCC_GetSysClockFreq+0x180>)
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	099b      	lsrs	r3, r3, #6
 8003074:	2200      	movs	r2, #0
 8003076:	623b      	str	r3, [r7, #32]
 8003078:	627a      	str	r2, [r7, #36]	; 0x24
 800307a:	6a3b      	ldr	r3, [r7, #32]
 800307c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003080:	2100      	movs	r1, #0
 8003082:	4b47      	ldr	r3, [pc, #284]	; (80031a0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003084:	fb03 f201 	mul.w	r2, r3, r1
 8003088:	2300      	movs	r3, #0
 800308a:	fb00 f303 	mul.w	r3, r0, r3
 800308e:	4413      	add	r3, r2
 8003090:	4a43      	ldr	r2, [pc, #268]	; (80031a0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003092:	fba0 1202 	umull	r1, r2, r0, r2
 8003096:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003098:	460a      	mov	r2, r1
 800309a:	62ba      	str	r2, [r7, #40]	; 0x28
 800309c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800309e:	4413      	add	r3, r2
 80030a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030a4:	2200      	movs	r2, #0
 80030a6:	61bb      	str	r3, [r7, #24]
 80030a8:	61fa      	str	r2, [r7, #28]
 80030aa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80030ae:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80030b2:	f7fd f89d 	bl	80001f0 <__aeabi_uldivmod>
 80030b6:	4602      	mov	r2, r0
 80030b8:	460b      	mov	r3, r1
 80030ba:	4613      	mov	r3, r2
 80030bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030be:	e053      	b.n	8003168 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030c0:	4b35      	ldr	r3, [pc, #212]	; (8003198 <HAL_RCC_GetSysClockFreq+0x180>)
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	099b      	lsrs	r3, r3, #6
 80030c6:	2200      	movs	r2, #0
 80030c8:	613b      	str	r3, [r7, #16]
 80030ca:	617a      	str	r2, [r7, #20]
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80030d2:	f04f 0b00 	mov.w	fp, #0
 80030d6:	4652      	mov	r2, sl
 80030d8:	465b      	mov	r3, fp
 80030da:	f04f 0000 	mov.w	r0, #0
 80030de:	f04f 0100 	mov.w	r1, #0
 80030e2:	0159      	lsls	r1, r3, #5
 80030e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030e8:	0150      	lsls	r0, r2, #5
 80030ea:	4602      	mov	r2, r0
 80030ec:	460b      	mov	r3, r1
 80030ee:	ebb2 080a 	subs.w	r8, r2, sl
 80030f2:	eb63 090b 	sbc.w	r9, r3, fp
 80030f6:	f04f 0200 	mov.w	r2, #0
 80030fa:	f04f 0300 	mov.w	r3, #0
 80030fe:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003102:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003106:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800310a:	ebb2 0408 	subs.w	r4, r2, r8
 800310e:	eb63 0509 	sbc.w	r5, r3, r9
 8003112:	f04f 0200 	mov.w	r2, #0
 8003116:	f04f 0300 	mov.w	r3, #0
 800311a:	00eb      	lsls	r3, r5, #3
 800311c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003120:	00e2      	lsls	r2, r4, #3
 8003122:	4614      	mov	r4, r2
 8003124:	461d      	mov	r5, r3
 8003126:	eb14 030a 	adds.w	r3, r4, sl
 800312a:	603b      	str	r3, [r7, #0]
 800312c:	eb45 030b 	adc.w	r3, r5, fp
 8003130:	607b      	str	r3, [r7, #4]
 8003132:	f04f 0200 	mov.w	r2, #0
 8003136:	f04f 0300 	mov.w	r3, #0
 800313a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800313e:	4629      	mov	r1, r5
 8003140:	028b      	lsls	r3, r1, #10
 8003142:	4621      	mov	r1, r4
 8003144:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003148:	4621      	mov	r1, r4
 800314a:	028a      	lsls	r2, r1, #10
 800314c:	4610      	mov	r0, r2
 800314e:	4619      	mov	r1, r3
 8003150:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003152:	2200      	movs	r2, #0
 8003154:	60bb      	str	r3, [r7, #8]
 8003156:	60fa      	str	r2, [r7, #12]
 8003158:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800315c:	f7fd f848 	bl	80001f0 <__aeabi_uldivmod>
 8003160:	4602      	mov	r2, r0
 8003162:	460b      	mov	r3, r1
 8003164:	4613      	mov	r3, r2
 8003166:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003168:	4b0b      	ldr	r3, [pc, #44]	; (8003198 <HAL_RCC_GetSysClockFreq+0x180>)
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	0c1b      	lsrs	r3, r3, #16
 800316e:	f003 0303 	and.w	r3, r3, #3
 8003172:	3301      	adds	r3, #1
 8003174:	005b      	lsls	r3, r3, #1
 8003176:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003178:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800317a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800317c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003180:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003182:	e002      	b.n	800318a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003184:	4b05      	ldr	r3, [pc, #20]	; (800319c <HAL_RCC_GetSysClockFreq+0x184>)
 8003186:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003188:	bf00      	nop
    }
  }
  return sysclockfreq;
 800318a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800318c:	4618      	mov	r0, r3
 800318e:	3740      	adds	r7, #64	; 0x40
 8003190:	46bd      	mov	sp, r7
 8003192:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003196:	bf00      	nop
 8003198:	40023800 	.word	0x40023800
 800319c:	00f42400 	.word	0x00f42400
 80031a0:	00b71b00 	.word	0x00b71b00

080031a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031a4:	b480      	push	{r7}
 80031a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031a8:	4b03      	ldr	r3, [pc, #12]	; (80031b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80031aa:	681b      	ldr	r3, [r3, #0]
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	46bd      	mov	sp, r7
 80031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b4:	4770      	bx	lr
 80031b6:	bf00      	nop
 80031b8:	20000000 	.word	0x20000000

080031bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80031c0:	f7ff fff0 	bl	80031a4 <HAL_RCC_GetHCLKFreq>
 80031c4:	4602      	mov	r2, r0
 80031c6:	4b05      	ldr	r3, [pc, #20]	; (80031dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	0a9b      	lsrs	r3, r3, #10
 80031cc:	f003 0307 	and.w	r3, r3, #7
 80031d0:	4903      	ldr	r1, [pc, #12]	; (80031e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80031d2:	5ccb      	ldrb	r3, [r1, r3]
 80031d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031d8:	4618      	mov	r0, r3
 80031da:	bd80      	pop	{r7, pc}
 80031dc:	40023800 	.word	0x40023800
 80031e0:	0800a73c 	.word	0x0800a73c

080031e4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b083      	sub	sp, #12
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
 80031ec:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	220f      	movs	r2, #15
 80031f2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80031f4:	4b12      	ldr	r3, [pc, #72]	; (8003240 <HAL_RCC_GetClockConfig+0x5c>)
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	f003 0203 	and.w	r2, r3, #3
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003200:	4b0f      	ldr	r3, [pc, #60]	; (8003240 <HAL_RCC_GetClockConfig+0x5c>)
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800320c:	4b0c      	ldr	r3, [pc, #48]	; (8003240 <HAL_RCC_GetClockConfig+0x5c>)
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003218:	4b09      	ldr	r3, [pc, #36]	; (8003240 <HAL_RCC_GetClockConfig+0x5c>)
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	08db      	lsrs	r3, r3, #3
 800321e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003226:	4b07      	ldr	r3, [pc, #28]	; (8003244 <HAL_RCC_GetClockConfig+0x60>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 020f 	and.w	r2, r3, #15
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	601a      	str	r2, [r3, #0]
}
 8003232:	bf00      	nop
 8003234:	370c      	adds	r7, #12
 8003236:	46bd      	mov	sp, r7
 8003238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323c:	4770      	bx	lr
 800323e:	bf00      	nop
 8003240:	40023800 	.word	0x40023800
 8003244:	40023c00 	.word	0x40023c00

08003248 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b082      	sub	sp, #8
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d101      	bne.n	800325a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e07b      	b.n	8003352 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325e:	2b00      	cmp	r3, #0
 8003260:	d108      	bne.n	8003274 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800326a:	d009      	beq.n	8003280 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2200      	movs	r2, #0
 8003270:	61da      	str	r2, [r3, #28]
 8003272:	e005      	b.n	8003280 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2200      	movs	r2, #0
 8003278:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2200      	movs	r2, #0
 800327e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2200      	movs	r2, #0
 8003284:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800328c:	b2db      	uxtb	r3, r3
 800328e:	2b00      	cmp	r3, #0
 8003290:	d106      	bne.n	80032a0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2200      	movs	r2, #0
 8003296:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f7fd fb94 	bl	80009c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2202      	movs	r2, #2
 80032a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032b6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80032c8:	431a      	orrs	r2, r3
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	68db      	ldr	r3, [r3, #12]
 80032ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032d2:	431a      	orrs	r2, r3
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	691b      	ldr	r3, [r3, #16]
 80032d8:	f003 0302 	and.w	r3, r3, #2
 80032dc:	431a      	orrs	r2, r3
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	695b      	ldr	r3, [r3, #20]
 80032e2:	f003 0301 	and.w	r3, r3, #1
 80032e6:	431a      	orrs	r2, r3
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	699b      	ldr	r3, [r3, #24]
 80032ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032f0:	431a      	orrs	r2, r3
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	69db      	ldr	r3, [r3, #28]
 80032f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80032fa:	431a      	orrs	r2, r3
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6a1b      	ldr	r3, [r3, #32]
 8003300:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003304:	ea42 0103 	orr.w	r1, r2, r3
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800330c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	430a      	orrs	r2, r1
 8003316:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	699b      	ldr	r3, [r3, #24]
 800331c:	0c1b      	lsrs	r3, r3, #16
 800331e:	f003 0104 	and.w	r1, r3, #4
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003326:	f003 0210 	and.w	r2, r3, #16
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	430a      	orrs	r2, r1
 8003330:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	69da      	ldr	r2, [r3, #28]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003340:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2200      	movs	r2, #0
 8003346:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2201      	movs	r2, #1
 800334c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003350:	2300      	movs	r3, #0
}
 8003352:	4618      	mov	r0, r3
 8003354:	3708      	adds	r7, #8
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}

0800335a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800335a:	b580      	push	{r7, lr}
 800335c:	b082      	sub	sp, #8
 800335e:	af00      	add	r7, sp, #0
 8003360:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d101      	bne.n	800336c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	e041      	b.n	80033f0 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003372:	b2db      	uxtb	r3, r3
 8003374:	2b00      	cmp	r3, #0
 8003376:	d106      	bne.n	8003386 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2200      	movs	r2, #0
 800337c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003380:	6878      	ldr	r0, [r7, #4]
 8003382:	f000 f839 	bl	80033f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2202      	movs	r2, #2
 800338a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	3304      	adds	r3, #4
 8003396:	4619      	mov	r1, r3
 8003398:	4610      	mov	r0, r2
 800339a:	f000 f9bf 	bl	800371c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2201      	movs	r2, #1
 80033a2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2201      	movs	r2, #1
 80033aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2201      	movs	r2, #1
 80033b2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2201      	movs	r2, #1
 80033ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2201      	movs	r2, #1
 80033c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2201      	movs	r2, #1
 80033ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2201      	movs	r2, #1
 80033d2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2201      	movs	r2, #1
 80033da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2201      	movs	r2, #1
 80033e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2201      	movs	r2, #1
 80033ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80033ee:	2300      	movs	r3, #0
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	3708      	adds	r7, #8
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}

080033f8 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b083      	sub	sp, #12
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003400:	bf00      	nop
 8003402:	370c      	adds	r7, #12
 8003404:	46bd      	mov	sp, r7
 8003406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340a:	4770      	bx	lr

0800340c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800340c:	b480      	push	{r7}
 800340e:	b085      	sub	sp, #20
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800341a:	b2db      	uxtb	r3, r3
 800341c:	2b01      	cmp	r3, #1
 800341e:	d001      	beq.n	8003424 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	e04e      	b.n	80034c2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2202      	movs	r2, #2
 8003428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	68da      	ldr	r2, [r3, #12]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f042 0201 	orr.w	r2, r2, #1
 800343a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a23      	ldr	r2, [pc, #140]	; (80034d0 <HAL_TIM_Base_Start_IT+0xc4>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d022      	beq.n	800348c <HAL_TIM_Base_Start_IT+0x80>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800344e:	d01d      	beq.n	800348c <HAL_TIM_Base_Start_IT+0x80>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a1f      	ldr	r2, [pc, #124]	; (80034d4 <HAL_TIM_Base_Start_IT+0xc8>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d018      	beq.n	800348c <HAL_TIM_Base_Start_IT+0x80>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a1e      	ldr	r2, [pc, #120]	; (80034d8 <HAL_TIM_Base_Start_IT+0xcc>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d013      	beq.n	800348c <HAL_TIM_Base_Start_IT+0x80>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a1c      	ldr	r2, [pc, #112]	; (80034dc <HAL_TIM_Base_Start_IT+0xd0>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d00e      	beq.n	800348c <HAL_TIM_Base_Start_IT+0x80>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a1b      	ldr	r2, [pc, #108]	; (80034e0 <HAL_TIM_Base_Start_IT+0xd4>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d009      	beq.n	800348c <HAL_TIM_Base_Start_IT+0x80>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a19      	ldr	r2, [pc, #100]	; (80034e4 <HAL_TIM_Base_Start_IT+0xd8>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d004      	beq.n	800348c <HAL_TIM_Base_Start_IT+0x80>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a18      	ldr	r2, [pc, #96]	; (80034e8 <HAL_TIM_Base_Start_IT+0xdc>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d111      	bne.n	80034b0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	f003 0307 	and.w	r3, r3, #7
 8003496:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2b06      	cmp	r3, #6
 800349c:	d010      	beq.n	80034c0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f042 0201 	orr.w	r2, r2, #1
 80034ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034ae:	e007      	b.n	80034c0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f042 0201 	orr.w	r2, r2, #1
 80034be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80034c0:	2300      	movs	r3, #0
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3714      	adds	r7, #20
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr
 80034ce:	bf00      	nop
 80034d0:	40010000 	.word	0x40010000
 80034d4:	40000400 	.word	0x40000400
 80034d8:	40000800 	.word	0x40000800
 80034dc:	40000c00 	.word	0x40000c00
 80034e0:	40010400 	.word	0x40010400
 80034e4:	40014000 	.word	0x40014000
 80034e8:	40001800 	.word	0x40001800

080034ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b084      	sub	sp, #16
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	68db      	ldr	r3, [r3, #12]
 80034fa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	691b      	ldr	r3, [r3, #16]
 8003502:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	f003 0302 	and.w	r3, r3, #2
 800350a:	2b00      	cmp	r3, #0
 800350c:	d020      	beq.n	8003550 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	f003 0302 	and.w	r3, r3, #2
 8003514:	2b00      	cmp	r3, #0
 8003516:	d01b      	beq.n	8003550 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f06f 0202 	mvn.w	r2, #2
 8003520:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2201      	movs	r2, #1
 8003526:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	699b      	ldr	r3, [r3, #24]
 800352e:	f003 0303 	and.w	r3, r3, #3
 8003532:	2b00      	cmp	r3, #0
 8003534:	d003      	beq.n	800353e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f000 f8d2 	bl	80036e0 <HAL_TIM_IC_CaptureCallback>
 800353c:	e005      	b.n	800354a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	f000 f8c4 	bl	80036cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003544:	6878      	ldr	r0, [r7, #4]
 8003546:	f000 f8d5 	bl	80036f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2200      	movs	r2, #0
 800354e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	f003 0304 	and.w	r3, r3, #4
 8003556:	2b00      	cmp	r3, #0
 8003558:	d020      	beq.n	800359c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	f003 0304 	and.w	r3, r3, #4
 8003560:	2b00      	cmp	r3, #0
 8003562:	d01b      	beq.n	800359c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f06f 0204 	mvn.w	r2, #4
 800356c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2202      	movs	r2, #2
 8003572:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	699b      	ldr	r3, [r3, #24]
 800357a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800357e:	2b00      	cmp	r3, #0
 8003580:	d003      	beq.n	800358a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f000 f8ac 	bl	80036e0 <HAL_TIM_IC_CaptureCallback>
 8003588:	e005      	b.n	8003596 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f000 f89e 	bl	80036cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	f000 f8af 	bl	80036f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2200      	movs	r2, #0
 800359a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	f003 0308 	and.w	r3, r3, #8
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d020      	beq.n	80035e8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	f003 0308 	and.w	r3, r3, #8
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d01b      	beq.n	80035e8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f06f 0208 	mvn.w	r2, #8
 80035b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2204      	movs	r2, #4
 80035be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	69db      	ldr	r3, [r3, #28]
 80035c6:	f003 0303 	and.w	r3, r3, #3
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d003      	beq.n	80035d6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f000 f886 	bl	80036e0 <HAL_TIM_IC_CaptureCallback>
 80035d4:	e005      	b.n	80035e2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	f000 f878 	bl	80036cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035dc:	6878      	ldr	r0, [r7, #4]
 80035de:	f000 f889 	bl	80036f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2200      	movs	r2, #0
 80035e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	f003 0310 	and.w	r3, r3, #16
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d020      	beq.n	8003634 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	f003 0310 	and.w	r3, r3, #16
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d01b      	beq.n	8003634 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f06f 0210 	mvn.w	r2, #16
 8003604:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2208      	movs	r2, #8
 800360a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	69db      	ldr	r3, [r3, #28]
 8003612:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003616:	2b00      	cmp	r3, #0
 8003618:	d003      	beq.n	8003622 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	f000 f860 	bl	80036e0 <HAL_TIM_IC_CaptureCallback>
 8003620:	e005      	b.n	800362e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f000 f852 	bl	80036cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003628:	6878      	ldr	r0, [r7, #4]
 800362a:	f000 f863 	bl	80036f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2200      	movs	r2, #0
 8003632:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	f003 0301 	and.w	r3, r3, #1
 800363a:	2b00      	cmp	r3, #0
 800363c:	d00c      	beq.n	8003658 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	f003 0301 	and.w	r3, r3, #1
 8003644:	2b00      	cmp	r3, #0
 8003646:	d007      	beq.n	8003658 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f06f 0201 	mvn.w	r2, #1
 8003650:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f7fd f96a 	bl	800092c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800365e:	2b00      	cmp	r3, #0
 8003660:	d00c      	beq.n	800367c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003668:	2b00      	cmp	r3, #0
 800366a:	d007      	beq.n	800367c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003674:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	f000 f906 	bl	8003888 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003682:	2b00      	cmp	r3, #0
 8003684:	d00c      	beq.n	80036a0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800368c:	2b00      	cmp	r3, #0
 800368e:	d007      	beq.n	80036a0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003698:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f000 f834 	bl	8003708 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	f003 0320 	and.w	r3, r3, #32
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d00c      	beq.n	80036c4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	f003 0320 	and.w	r3, r3, #32
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d007      	beq.n	80036c4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f06f 0220 	mvn.w	r2, #32
 80036bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f000 f8d8 	bl	8003874 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80036c4:	bf00      	nop
 80036c6:	3710      	adds	r7, #16
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}

080036cc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b083      	sub	sp, #12
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80036d4:	bf00      	nop
 80036d6:	370c      	adds	r7, #12
 80036d8:	46bd      	mov	sp, r7
 80036da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036de:	4770      	bx	lr

080036e0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b083      	sub	sp, #12
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80036e8:	bf00      	nop
 80036ea:	370c      	adds	r7, #12
 80036ec:	46bd      	mov	sp, r7
 80036ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f2:	4770      	bx	lr

080036f4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b083      	sub	sp, #12
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80036fc:	bf00      	nop
 80036fe:	370c      	adds	r7, #12
 8003700:	46bd      	mov	sp, r7
 8003702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003706:	4770      	bx	lr

08003708 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003708:	b480      	push	{r7}
 800370a:	b083      	sub	sp, #12
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003710:	bf00      	nop
 8003712:	370c      	adds	r7, #12
 8003714:	46bd      	mov	sp, r7
 8003716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371a:	4770      	bx	lr

0800371c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800371c:	b480      	push	{r7}
 800371e:	b085      	sub	sp, #20
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
 8003724:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	4a46      	ldr	r2, [pc, #280]	; (8003848 <TIM_Base_SetConfig+0x12c>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d013      	beq.n	800375c <TIM_Base_SetConfig+0x40>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800373a:	d00f      	beq.n	800375c <TIM_Base_SetConfig+0x40>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	4a43      	ldr	r2, [pc, #268]	; (800384c <TIM_Base_SetConfig+0x130>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d00b      	beq.n	800375c <TIM_Base_SetConfig+0x40>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	4a42      	ldr	r2, [pc, #264]	; (8003850 <TIM_Base_SetConfig+0x134>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d007      	beq.n	800375c <TIM_Base_SetConfig+0x40>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	4a41      	ldr	r2, [pc, #260]	; (8003854 <TIM_Base_SetConfig+0x138>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d003      	beq.n	800375c <TIM_Base_SetConfig+0x40>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	4a40      	ldr	r2, [pc, #256]	; (8003858 <TIM_Base_SetConfig+0x13c>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d108      	bne.n	800376e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003762:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	68fa      	ldr	r2, [r7, #12]
 800376a:	4313      	orrs	r3, r2
 800376c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	4a35      	ldr	r2, [pc, #212]	; (8003848 <TIM_Base_SetConfig+0x12c>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d02b      	beq.n	80037ce <TIM_Base_SetConfig+0xb2>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800377c:	d027      	beq.n	80037ce <TIM_Base_SetConfig+0xb2>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	4a32      	ldr	r2, [pc, #200]	; (800384c <TIM_Base_SetConfig+0x130>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d023      	beq.n	80037ce <TIM_Base_SetConfig+0xb2>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	4a31      	ldr	r2, [pc, #196]	; (8003850 <TIM_Base_SetConfig+0x134>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d01f      	beq.n	80037ce <TIM_Base_SetConfig+0xb2>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	4a30      	ldr	r2, [pc, #192]	; (8003854 <TIM_Base_SetConfig+0x138>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d01b      	beq.n	80037ce <TIM_Base_SetConfig+0xb2>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	4a2f      	ldr	r2, [pc, #188]	; (8003858 <TIM_Base_SetConfig+0x13c>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d017      	beq.n	80037ce <TIM_Base_SetConfig+0xb2>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	4a2e      	ldr	r2, [pc, #184]	; (800385c <TIM_Base_SetConfig+0x140>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d013      	beq.n	80037ce <TIM_Base_SetConfig+0xb2>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	4a2d      	ldr	r2, [pc, #180]	; (8003860 <TIM_Base_SetConfig+0x144>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d00f      	beq.n	80037ce <TIM_Base_SetConfig+0xb2>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	4a2c      	ldr	r2, [pc, #176]	; (8003864 <TIM_Base_SetConfig+0x148>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d00b      	beq.n	80037ce <TIM_Base_SetConfig+0xb2>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	4a2b      	ldr	r2, [pc, #172]	; (8003868 <TIM_Base_SetConfig+0x14c>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d007      	beq.n	80037ce <TIM_Base_SetConfig+0xb2>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	4a2a      	ldr	r2, [pc, #168]	; (800386c <TIM_Base_SetConfig+0x150>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d003      	beq.n	80037ce <TIM_Base_SetConfig+0xb2>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	4a29      	ldr	r2, [pc, #164]	; (8003870 <TIM_Base_SetConfig+0x154>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d108      	bne.n	80037e0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	68db      	ldr	r3, [r3, #12]
 80037da:	68fa      	ldr	r2, [r7, #12]
 80037dc:	4313      	orrs	r3, r2
 80037de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	695b      	ldr	r3, [r3, #20]
 80037ea:	4313      	orrs	r3, r2
 80037ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	68fa      	ldr	r2, [r7, #12]
 80037f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	689a      	ldr	r2, [r3, #8]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	4a10      	ldr	r2, [pc, #64]	; (8003848 <TIM_Base_SetConfig+0x12c>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d003      	beq.n	8003814 <TIM_Base_SetConfig+0xf8>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	4a12      	ldr	r2, [pc, #72]	; (8003858 <TIM_Base_SetConfig+0x13c>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d103      	bne.n	800381c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	691a      	ldr	r2, [r3, #16]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2201      	movs	r2, #1
 8003820:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	691b      	ldr	r3, [r3, #16]
 8003826:	f003 0301 	and.w	r3, r3, #1
 800382a:	2b01      	cmp	r3, #1
 800382c:	d105      	bne.n	800383a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	691b      	ldr	r3, [r3, #16]
 8003832:	f023 0201 	bic.w	r2, r3, #1
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	611a      	str	r2, [r3, #16]
  }
}
 800383a:	bf00      	nop
 800383c:	3714      	adds	r7, #20
 800383e:	46bd      	mov	sp, r7
 8003840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003844:	4770      	bx	lr
 8003846:	bf00      	nop
 8003848:	40010000 	.word	0x40010000
 800384c:	40000400 	.word	0x40000400
 8003850:	40000800 	.word	0x40000800
 8003854:	40000c00 	.word	0x40000c00
 8003858:	40010400 	.word	0x40010400
 800385c:	40014000 	.word	0x40014000
 8003860:	40014400 	.word	0x40014400
 8003864:	40014800 	.word	0x40014800
 8003868:	40001800 	.word	0x40001800
 800386c:	40001c00 	.word	0x40001c00
 8003870:	40002000 	.word	0x40002000

08003874 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003874:	b480      	push	{r7}
 8003876:	b083      	sub	sp, #12
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800387c:	bf00      	nop
 800387e:	370c      	adds	r7, #12
 8003880:	46bd      	mov	sp, r7
 8003882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003886:	4770      	bx	lr

08003888 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003888:	b480      	push	{r7}
 800388a:	b083      	sub	sp, #12
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003890:	bf00      	nop
 8003892:	370c      	adds	r7, #12
 8003894:	46bd      	mov	sp, r7
 8003896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389a:	4770      	bx	lr

0800389c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800389c:	b084      	sub	sp, #16
 800389e:	b580      	push	{r7, lr}
 80038a0:	b084      	sub	sp, #16
 80038a2:	af00      	add	r7, sp, #0
 80038a4:	6078      	str	r0, [r7, #4]
 80038a6:	f107 001c 	add.w	r0, r7, #28
 80038aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80038ae:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d123      	bne.n	80038fe <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ba:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	68db      	ldr	r3, [r3, #12]
 80038c6:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80038ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80038ce:	687a      	ldr	r2, [r7, #4]
 80038d0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	68db      	ldr	r3, [r3, #12]
 80038d6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80038de:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	d105      	bne.n	80038f2 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	68db      	ldr	r3, [r3, #12]
 80038ea:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f001 fae2 	bl	8004ebc <USB_CoreReset>
 80038f8:	4603      	mov	r3, r0
 80038fa:	73fb      	strb	r3, [r7, #15]
 80038fc:	e01b      	b.n	8003936 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	68db      	ldr	r3, [r3, #12]
 8003902:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f001 fad6 	bl	8004ebc <USB_CoreReset>
 8003910:	4603      	mov	r3, r0
 8003912:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003914:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003918:	2b00      	cmp	r3, #0
 800391a:	d106      	bne.n	800392a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003920:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	639a      	str	r2, [r3, #56]	; 0x38
 8003928:	e005      	b.n	8003936 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800392e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003936:	7fbb      	ldrb	r3, [r7, #30]
 8003938:	2b01      	cmp	r3, #1
 800393a:	d10b      	bne.n	8003954 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	f043 0206 	orr.w	r2, r3, #6
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	f043 0220 	orr.w	r2, r3, #32
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003954:	7bfb      	ldrb	r3, [r7, #15]
}
 8003956:	4618      	mov	r0, r3
 8003958:	3710      	adds	r7, #16
 800395a:	46bd      	mov	sp, r7
 800395c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003960:	b004      	add	sp, #16
 8003962:	4770      	bx	lr

08003964 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003964:	b480      	push	{r7}
 8003966:	b087      	sub	sp, #28
 8003968:	af00      	add	r7, sp, #0
 800396a:	60f8      	str	r0, [r7, #12]
 800396c:	60b9      	str	r1, [r7, #8]
 800396e:	4613      	mov	r3, r2
 8003970:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003972:	79fb      	ldrb	r3, [r7, #7]
 8003974:	2b02      	cmp	r3, #2
 8003976:	d165      	bne.n	8003a44 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	4a41      	ldr	r2, [pc, #260]	; (8003a80 <USB_SetTurnaroundTime+0x11c>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d906      	bls.n	800398e <USB_SetTurnaroundTime+0x2a>
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	4a40      	ldr	r2, [pc, #256]	; (8003a84 <USB_SetTurnaroundTime+0x120>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d202      	bcs.n	800398e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003988:	230f      	movs	r3, #15
 800398a:	617b      	str	r3, [r7, #20]
 800398c:	e062      	b.n	8003a54 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	4a3c      	ldr	r2, [pc, #240]	; (8003a84 <USB_SetTurnaroundTime+0x120>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d306      	bcc.n	80039a4 <USB_SetTurnaroundTime+0x40>
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	4a3b      	ldr	r2, [pc, #236]	; (8003a88 <USB_SetTurnaroundTime+0x124>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d202      	bcs.n	80039a4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800399e:	230e      	movs	r3, #14
 80039a0:	617b      	str	r3, [r7, #20]
 80039a2:	e057      	b.n	8003a54 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	4a38      	ldr	r2, [pc, #224]	; (8003a88 <USB_SetTurnaroundTime+0x124>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d306      	bcc.n	80039ba <USB_SetTurnaroundTime+0x56>
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	4a37      	ldr	r2, [pc, #220]	; (8003a8c <USB_SetTurnaroundTime+0x128>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d202      	bcs.n	80039ba <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80039b4:	230d      	movs	r3, #13
 80039b6:	617b      	str	r3, [r7, #20]
 80039b8:	e04c      	b.n	8003a54 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	4a33      	ldr	r2, [pc, #204]	; (8003a8c <USB_SetTurnaroundTime+0x128>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d306      	bcc.n	80039d0 <USB_SetTurnaroundTime+0x6c>
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	4a32      	ldr	r2, [pc, #200]	; (8003a90 <USB_SetTurnaroundTime+0x12c>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d802      	bhi.n	80039d0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80039ca:	230c      	movs	r3, #12
 80039cc:	617b      	str	r3, [r7, #20]
 80039ce:	e041      	b.n	8003a54 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	4a2f      	ldr	r2, [pc, #188]	; (8003a90 <USB_SetTurnaroundTime+0x12c>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d906      	bls.n	80039e6 <USB_SetTurnaroundTime+0x82>
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	4a2e      	ldr	r2, [pc, #184]	; (8003a94 <USB_SetTurnaroundTime+0x130>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d802      	bhi.n	80039e6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80039e0:	230b      	movs	r3, #11
 80039e2:	617b      	str	r3, [r7, #20]
 80039e4:	e036      	b.n	8003a54 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	4a2a      	ldr	r2, [pc, #168]	; (8003a94 <USB_SetTurnaroundTime+0x130>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d906      	bls.n	80039fc <USB_SetTurnaroundTime+0x98>
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	4a29      	ldr	r2, [pc, #164]	; (8003a98 <USB_SetTurnaroundTime+0x134>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d802      	bhi.n	80039fc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80039f6:	230a      	movs	r3, #10
 80039f8:	617b      	str	r3, [r7, #20]
 80039fa:	e02b      	b.n	8003a54 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	4a26      	ldr	r2, [pc, #152]	; (8003a98 <USB_SetTurnaroundTime+0x134>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d906      	bls.n	8003a12 <USB_SetTurnaroundTime+0xae>
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	4a25      	ldr	r2, [pc, #148]	; (8003a9c <USB_SetTurnaroundTime+0x138>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d202      	bcs.n	8003a12 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003a0c:	2309      	movs	r3, #9
 8003a0e:	617b      	str	r3, [r7, #20]
 8003a10:	e020      	b.n	8003a54 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	4a21      	ldr	r2, [pc, #132]	; (8003a9c <USB_SetTurnaroundTime+0x138>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d306      	bcc.n	8003a28 <USB_SetTurnaroundTime+0xc4>
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	4a20      	ldr	r2, [pc, #128]	; (8003aa0 <USB_SetTurnaroundTime+0x13c>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d802      	bhi.n	8003a28 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003a22:	2308      	movs	r3, #8
 8003a24:	617b      	str	r3, [r7, #20]
 8003a26:	e015      	b.n	8003a54 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	4a1d      	ldr	r2, [pc, #116]	; (8003aa0 <USB_SetTurnaroundTime+0x13c>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d906      	bls.n	8003a3e <USB_SetTurnaroundTime+0xda>
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	4a1c      	ldr	r2, [pc, #112]	; (8003aa4 <USB_SetTurnaroundTime+0x140>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d202      	bcs.n	8003a3e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003a38:	2307      	movs	r3, #7
 8003a3a:	617b      	str	r3, [r7, #20]
 8003a3c:	e00a      	b.n	8003a54 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003a3e:	2306      	movs	r3, #6
 8003a40:	617b      	str	r3, [r7, #20]
 8003a42:	e007      	b.n	8003a54 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003a44:	79fb      	ldrb	r3, [r7, #7]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d102      	bne.n	8003a50 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003a4a:	2309      	movs	r3, #9
 8003a4c:	617b      	str	r3, [r7, #20]
 8003a4e:	e001      	b.n	8003a54 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003a50:	2309      	movs	r3, #9
 8003a52:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	68db      	ldr	r3, [r3, #12]
 8003a58:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	68da      	ldr	r2, [r3, #12]
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	029b      	lsls	r3, r3, #10
 8003a68:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003a6c:	431a      	orrs	r2, r3
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003a72:	2300      	movs	r3, #0
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	371c      	adds	r7, #28
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7e:	4770      	bx	lr
 8003a80:	00d8acbf 	.word	0x00d8acbf
 8003a84:	00e4e1c0 	.word	0x00e4e1c0
 8003a88:	00f42400 	.word	0x00f42400
 8003a8c:	01067380 	.word	0x01067380
 8003a90:	011a499f 	.word	0x011a499f
 8003a94:	01312cff 	.word	0x01312cff
 8003a98:	014ca43f 	.word	0x014ca43f
 8003a9c:	016e3600 	.word	0x016e3600
 8003aa0:	01a6ab1f 	.word	0x01a6ab1f
 8003aa4:	01e84800 	.word	0x01e84800

08003aa8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b083      	sub	sp, #12
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	f043 0201 	orr.w	r2, r3, #1
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003abc:	2300      	movs	r3, #0
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	370c      	adds	r7, #12
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac8:	4770      	bx	lr

08003aca <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003aca:	b480      	push	{r7}
 8003acc:	b083      	sub	sp, #12
 8003ace:	af00      	add	r7, sp, #0
 8003ad0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	f023 0201 	bic.w	r2, r3, #1
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003ade:	2300      	movs	r3, #0
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	370c      	adds	r7, #12
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aea:	4770      	bx	lr

08003aec <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b084      	sub	sp, #16
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
 8003af4:	460b      	mov	r3, r1
 8003af6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003af8:	2300      	movs	r3, #0
 8003afa:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	68db      	ldr	r3, [r3, #12]
 8003b00:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003b08:	78fb      	ldrb	r3, [r7, #3]
 8003b0a:	2b01      	cmp	r3, #1
 8003b0c:	d115      	bne.n	8003b3a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	68db      	ldr	r3, [r3, #12]
 8003b12:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003b1a:	200a      	movs	r0, #10
 8003b1c:	f7fd f8ec 	bl	8000cf8 <HAL_Delay>
      ms += 10U;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	330a      	adds	r3, #10
 8003b24:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003b26:	6878      	ldr	r0, [r7, #4]
 8003b28:	f001 f939 	bl	8004d9e <USB_GetMode>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	2b01      	cmp	r3, #1
 8003b30:	d01e      	beq.n	8003b70 <USB_SetCurrentMode+0x84>
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2bc7      	cmp	r3, #199	; 0xc7
 8003b36:	d9f0      	bls.n	8003b1a <USB_SetCurrentMode+0x2e>
 8003b38:	e01a      	b.n	8003b70 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003b3a:	78fb      	ldrb	r3, [r7, #3]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d115      	bne.n	8003b6c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	68db      	ldr	r3, [r3, #12]
 8003b44:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003b4c:	200a      	movs	r0, #10
 8003b4e:	f7fd f8d3 	bl	8000cf8 <HAL_Delay>
      ms += 10U;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	330a      	adds	r3, #10
 8003b56:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003b58:	6878      	ldr	r0, [r7, #4]
 8003b5a:	f001 f920 	bl	8004d9e <USB_GetMode>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d005      	beq.n	8003b70 <USB_SetCurrentMode+0x84>
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2bc7      	cmp	r3, #199	; 0xc7
 8003b68:	d9f0      	bls.n	8003b4c <USB_SetCurrentMode+0x60>
 8003b6a:	e001      	b.n	8003b70 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	e005      	b.n	8003b7c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2bc8      	cmp	r3, #200	; 0xc8
 8003b74:	d101      	bne.n	8003b7a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	e000      	b.n	8003b7c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003b7a:	2300      	movs	r3, #0
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	3710      	adds	r7, #16
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}

08003b84 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003b84:	b084      	sub	sp, #16
 8003b86:	b580      	push	{r7, lr}
 8003b88:	b086      	sub	sp, #24
 8003b8a:	af00      	add	r7, sp, #0
 8003b8c:	6078      	str	r0, [r7, #4]
 8003b8e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003b92:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003b96:	2300      	movs	r3, #0
 8003b98:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	613b      	str	r3, [r7, #16]
 8003ba2:	e009      	b.n	8003bb8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003ba4:	687a      	ldr	r2, [r7, #4]
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	3340      	adds	r3, #64	; 0x40
 8003baa:	009b      	lsls	r3, r3, #2
 8003bac:	4413      	add	r3, r2
 8003bae:	2200      	movs	r2, #0
 8003bb0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	3301      	adds	r3, #1
 8003bb6:	613b      	str	r3, [r7, #16]
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	2b0e      	cmp	r3, #14
 8003bbc:	d9f2      	bls.n	8003ba4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003bbe:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d11c      	bne.n	8003c00 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	68fa      	ldr	r2, [r7, #12]
 8003bd0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003bd4:	f043 0302 	orr.w	r3, r3, #2
 8003bd8:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bde:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bea:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bf6:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	639a      	str	r2, [r3, #56]	; 0x38
 8003bfe:	e00b      	b.n	8003c18 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c04:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c10:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003c1e:	461a      	mov	r2, r3
 8003c20:	2300      	movs	r3, #0
 8003c22:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003c24:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	d10d      	bne.n	8003c48 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003c2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d104      	bne.n	8003c3e <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003c34:	2100      	movs	r1, #0
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f000 f968 	bl	8003f0c <USB_SetDevSpeed>
 8003c3c:	e008      	b.n	8003c50 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003c3e:	2101      	movs	r1, #1
 8003c40:	6878      	ldr	r0, [r7, #4]
 8003c42:	f000 f963 	bl	8003f0c <USB_SetDevSpeed>
 8003c46:	e003      	b.n	8003c50 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003c48:	2103      	movs	r1, #3
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	f000 f95e 	bl	8003f0c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003c50:	2110      	movs	r1, #16
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f000 f8fa 	bl	8003e4c <USB_FlushTxFifo>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d001      	beq.n	8003c62 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f000 f924 	bl	8003eb0 <USB_FlushRxFifo>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d001      	beq.n	8003c72 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c78:	461a      	mov	r2, r3
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c84:	461a      	mov	r2, r3
 8003c86:	2300      	movs	r3, #0
 8003c88:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c90:	461a      	mov	r2, r3
 8003c92:	2300      	movs	r3, #0
 8003c94:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003c96:	2300      	movs	r3, #0
 8003c98:	613b      	str	r3, [r7, #16]
 8003c9a:	e043      	b.n	8003d24 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	015a      	lsls	r2, r3, #5
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	4413      	add	r3, r2
 8003ca4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003cae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003cb2:	d118      	bne.n	8003ce6 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d10a      	bne.n	8003cd0 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	015a      	lsls	r2, r3, #5
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	4413      	add	r3, r2
 8003cc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cc6:	461a      	mov	r2, r3
 8003cc8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003ccc:	6013      	str	r3, [r2, #0]
 8003cce:	e013      	b.n	8003cf8 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	015a      	lsls	r2, r3, #5
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	4413      	add	r3, r2
 8003cd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cdc:	461a      	mov	r2, r3
 8003cde:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003ce2:	6013      	str	r3, [r2, #0]
 8003ce4:	e008      	b.n	8003cf8 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	015a      	lsls	r2, r3, #5
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	4413      	add	r3, r2
 8003cee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cf2:	461a      	mov	r2, r3
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	015a      	lsls	r2, r3, #5
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	4413      	add	r3, r2
 8003d00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d04:	461a      	mov	r2, r3
 8003d06:	2300      	movs	r3, #0
 8003d08:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	015a      	lsls	r2, r3, #5
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	4413      	add	r3, r2
 8003d12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d16:	461a      	mov	r2, r3
 8003d18:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003d1c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	3301      	adds	r3, #1
 8003d22:	613b      	str	r3, [r7, #16]
 8003d24:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003d28:	461a      	mov	r2, r3
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d3b5      	bcc.n	8003c9c <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003d30:	2300      	movs	r3, #0
 8003d32:	613b      	str	r3, [r7, #16]
 8003d34:	e043      	b.n	8003dbe <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	015a      	lsls	r2, r3, #5
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	4413      	add	r3, r2
 8003d3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003d48:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003d4c:	d118      	bne.n	8003d80 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d10a      	bne.n	8003d6a <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	015a      	lsls	r2, r3, #5
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	4413      	add	r3, r2
 8003d5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d60:	461a      	mov	r2, r3
 8003d62:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003d66:	6013      	str	r3, [r2, #0]
 8003d68:	e013      	b.n	8003d92 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	015a      	lsls	r2, r3, #5
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	4413      	add	r3, r2
 8003d72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d76:	461a      	mov	r2, r3
 8003d78:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003d7c:	6013      	str	r3, [r2, #0]
 8003d7e:	e008      	b.n	8003d92 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	015a      	lsls	r2, r3, #5
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	4413      	add	r3, r2
 8003d88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d8c:	461a      	mov	r2, r3
 8003d8e:	2300      	movs	r3, #0
 8003d90:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	015a      	lsls	r2, r3, #5
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	4413      	add	r3, r2
 8003d9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d9e:	461a      	mov	r2, r3
 8003da0:	2300      	movs	r3, #0
 8003da2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	015a      	lsls	r2, r3, #5
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	4413      	add	r3, r2
 8003dac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003db0:	461a      	mov	r2, r3
 8003db2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003db6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	3301      	adds	r3, #1
 8003dbc:	613b      	str	r3, [r7, #16]
 8003dbe:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003dc2:	461a      	mov	r2, r3
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d3b5      	bcc.n	8003d36 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dd0:	691b      	ldr	r3, [r3, #16]
 8003dd2:	68fa      	ldr	r2, [r7, #12]
 8003dd4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003dd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ddc:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2200      	movs	r2, #0
 8003de2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003dea:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003dec:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d105      	bne.n	8003e00 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	699b      	ldr	r3, [r3, #24]
 8003df8:	f043 0210 	orr.w	r2, r3, #16
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	699a      	ldr	r2, [r3, #24]
 8003e04:	4b10      	ldr	r3, [pc, #64]	; (8003e48 <USB_DevInit+0x2c4>)
 8003e06:	4313      	orrs	r3, r2
 8003e08:	687a      	ldr	r2, [r7, #4]
 8003e0a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003e0c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d005      	beq.n	8003e20 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	699b      	ldr	r3, [r3, #24]
 8003e18:	f043 0208 	orr.w	r2, r3, #8
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003e20:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d107      	bne.n	8003e38 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	699b      	ldr	r3, [r3, #24]
 8003e2c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003e30:	f043 0304 	orr.w	r3, r3, #4
 8003e34:	687a      	ldr	r2, [r7, #4]
 8003e36:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003e38:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	3718      	adds	r7, #24
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003e44:	b004      	add	sp, #16
 8003e46:	4770      	bx	lr
 8003e48:	803c3800 	.word	0x803c3800

08003e4c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b085      	sub	sp, #20
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
 8003e54:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003e56:	2300      	movs	r3, #0
 8003e58:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	3301      	adds	r3, #1
 8003e5e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8003e66:	d901      	bls.n	8003e6c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003e68:	2303      	movs	r3, #3
 8003e6a:	e01b      	b.n	8003ea4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	691b      	ldr	r3, [r3, #16]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	daf2      	bge.n	8003e5a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003e74:	2300      	movs	r3, #0
 8003e76:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	019b      	lsls	r3, r3, #6
 8003e7c:	f043 0220 	orr.w	r2, r3, #32
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	3301      	adds	r3, #1
 8003e88:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8003e90:	d901      	bls.n	8003e96 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003e92:	2303      	movs	r3, #3
 8003e94:	e006      	b.n	8003ea4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	691b      	ldr	r3, [r3, #16]
 8003e9a:	f003 0320 	and.w	r3, r3, #32
 8003e9e:	2b20      	cmp	r3, #32
 8003ea0:	d0f0      	beq.n	8003e84 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003ea2:	2300      	movs	r3, #0
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	3714      	adds	r7, #20
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eae:	4770      	bx	lr

08003eb0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b085      	sub	sp, #20
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	3301      	adds	r3, #1
 8003ec0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8003ec8:	d901      	bls.n	8003ece <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003eca:	2303      	movs	r3, #3
 8003ecc:	e018      	b.n	8003f00 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	691b      	ldr	r3, [r3, #16]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	daf2      	bge.n	8003ebc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2210      	movs	r2, #16
 8003ede:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	3301      	adds	r3, #1
 8003ee4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8003eec:	d901      	bls.n	8003ef2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003eee:	2303      	movs	r3, #3
 8003ef0:	e006      	b.n	8003f00 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	691b      	ldr	r3, [r3, #16]
 8003ef6:	f003 0310 	and.w	r3, r3, #16
 8003efa:	2b10      	cmp	r3, #16
 8003efc:	d0f0      	beq.n	8003ee0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003efe:	2300      	movs	r3, #0
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	3714      	adds	r7, #20
 8003f04:	46bd      	mov	sp, r7
 8003f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0a:	4770      	bx	lr

08003f0c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b085      	sub	sp, #20
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
 8003f14:	460b      	mov	r3, r1
 8003f16:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	78fb      	ldrb	r3, [r7, #3]
 8003f26:	68f9      	ldr	r1, [r7, #12]
 8003f28:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003f30:	2300      	movs	r3, #0
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	3714      	adds	r7, #20
 8003f36:	46bd      	mov	sp, r7
 8003f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3c:	4770      	bx	lr

08003f3e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8003f3e:	b480      	push	{r7}
 8003f40:	b087      	sub	sp, #28
 8003f42:	af00      	add	r7, sp, #0
 8003f44:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	f003 0306 	and.w	r3, r3, #6
 8003f56:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d102      	bne.n	8003f64 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	75fb      	strb	r3, [r7, #23]
 8003f62:	e00a      	b.n	8003f7a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2b02      	cmp	r3, #2
 8003f68:	d002      	beq.n	8003f70 <USB_GetDevSpeed+0x32>
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2b06      	cmp	r3, #6
 8003f6e:	d102      	bne.n	8003f76 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003f70:	2302      	movs	r3, #2
 8003f72:	75fb      	strb	r3, [r7, #23]
 8003f74:	e001      	b.n	8003f7a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003f76:	230f      	movs	r3, #15
 8003f78:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003f7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	371c      	adds	r7, #28
 8003f80:	46bd      	mov	sp, r7
 8003f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f86:	4770      	bx	lr

08003f88 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b085      	sub	sp, #20
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
 8003f90:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	781b      	ldrb	r3, [r3, #0]
 8003f9a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	785b      	ldrb	r3, [r3, #1]
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d13a      	bne.n	800401a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003faa:	69da      	ldr	r2, [r3, #28]
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	781b      	ldrb	r3, [r3, #0]
 8003fb0:	f003 030f 	and.w	r3, r3, #15
 8003fb4:	2101      	movs	r1, #1
 8003fb6:	fa01 f303 	lsl.w	r3, r1, r3
 8003fba:	b29b      	uxth	r3, r3
 8003fbc:	68f9      	ldr	r1, [r7, #12]
 8003fbe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	015a      	lsls	r2, r3, #5
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	4413      	add	r3, r2
 8003fce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d155      	bne.n	8004088 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	015a      	lsls	r2, r3, #5
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	4413      	add	r3, r2
 8003fe4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	689b      	ldr	r3, [r3, #8]
 8003fee:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	791b      	ldrb	r3, [r3, #4]
 8003ff6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003ff8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	059b      	lsls	r3, r3, #22
 8003ffe:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004000:	4313      	orrs	r3, r2
 8004002:	68ba      	ldr	r2, [r7, #8]
 8004004:	0151      	lsls	r1, r2, #5
 8004006:	68fa      	ldr	r2, [r7, #12]
 8004008:	440a      	add	r2, r1
 800400a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800400e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004012:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004016:	6013      	str	r3, [r2, #0]
 8004018:	e036      	b.n	8004088 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004020:	69da      	ldr	r2, [r3, #28]
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	781b      	ldrb	r3, [r3, #0]
 8004026:	f003 030f 	and.w	r3, r3, #15
 800402a:	2101      	movs	r1, #1
 800402c:	fa01 f303 	lsl.w	r3, r1, r3
 8004030:	041b      	lsls	r3, r3, #16
 8004032:	68f9      	ldr	r1, [r7, #12]
 8004034:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004038:	4313      	orrs	r3, r2
 800403a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	015a      	lsls	r2, r3, #5
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	4413      	add	r3, r2
 8004044:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800404e:	2b00      	cmp	r3, #0
 8004050:	d11a      	bne.n	8004088 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	015a      	lsls	r2, r3, #5
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	4413      	add	r3, r2
 800405a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	791b      	ldrb	r3, [r3, #4]
 800406c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800406e:	430b      	orrs	r3, r1
 8004070:	4313      	orrs	r3, r2
 8004072:	68ba      	ldr	r2, [r7, #8]
 8004074:	0151      	lsls	r1, r2, #5
 8004076:	68fa      	ldr	r2, [r7, #12]
 8004078:	440a      	add	r2, r1
 800407a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800407e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004082:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004086:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004088:	2300      	movs	r3, #0
}
 800408a:	4618      	mov	r0, r3
 800408c:	3714      	adds	r7, #20
 800408e:	46bd      	mov	sp, r7
 8004090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004094:	4770      	bx	lr
	...

08004098 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004098:	b480      	push	{r7}
 800409a:	b085      	sub	sp, #20
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
 80040a0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	781b      	ldrb	r3, [r3, #0]
 80040aa:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	785b      	ldrb	r3, [r3, #1]
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	d161      	bne.n	8004178 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	015a      	lsls	r2, r3, #5
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	4413      	add	r3, r2
 80040bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80040c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80040ca:	d11f      	bne.n	800410c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	015a      	lsls	r2, r3, #5
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	4413      	add	r3, r2
 80040d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	68ba      	ldr	r2, [r7, #8]
 80040dc:	0151      	lsls	r1, r2, #5
 80040de:	68fa      	ldr	r2, [r7, #12]
 80040e0:	440a      	add	r2, r1
 80040e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040e6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80040ea:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	015a      	lsls	r2, r3, #5
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	4413      	add	r3, r2
 80040f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	68ba      	ldr	r2, [r7, #8]
 80040fc:	0151      	lsls	r1, r2, #5
 80040fe:	68fa      	ldr	r2, [r7, #12]
 8004100:	440a      	add	r2, r1
 8004102:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004106:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800410a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004112:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	781b      	ldrb	r3, [r3, #0]
 8004118:	f003 030f 	and.w	r3, r3, #15
 800411c:	2101      	movs	r1, #1
 800411e:	fa01 f303 	lsl.w	r3, r1, r3
 8004122:	b29b      	uxth	r3, r3
 8004124:	43db      	mvns	r3, r3
 8004126:	68f9      	ldr	r1, [r7, #12]
 8004128:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800412c:	4013      	ands	r3, r2
 800412e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004136:	69da      	ldr	r2, [r3, #28]
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	781b      	ldrb	r3, [r3, #0]
 800413c:	f003 030f 	and.w	r3, r3, #15
 8004140:	2101      	movs	r1, #1
 8004142:	fa01 f303 	lsl.w	r3, r1, r3
 8004146:	b29b      	uxth	r3, r3
 8004148:	43db      	mvns	r3, r3
 800414a:	68f9      	ldr	r1, [r7, #12]
 800414c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004150:	4013      	ands	r3, r2
 8004152:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	015a      	lsls	r2, r3, #5
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	4413      	add	r3, r2
 800415c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	0159      	lsls	r1, r3, #5
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	440b      	add	r3, r1
 800416a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800416e:	4619      	mov	r1, r3
 8004170:	4b35      	ldr	r3, [pc, #212]	; (8004248 <USB_DeactivateEndpoint+0x1b0>)
 8004172:	4013      	ands	r3, r2
 8004174:	600b      	str	r3, [r1, #0]
 8004176:	e060      	b.n	800423a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	015a      	lsls	r2, r3, #5
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	4413      	add	r3, r2
 8004180:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800418a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800418e:	d11f      	bne.n	80041d0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	015a      	lsls	r2, r3, #5
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	4413      	add	r3, r2
 8004198:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	68ba      	ldr	r2, [r7, #8]
 80041a0:	0151      	lsls	r1, r2, #5
 80041a2:	68fa      	ldr	r2, [r7, #12]
 80041a4:	440a      	add	r2, r1
 80041a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80041aa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80041ae:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	015a      	lsls	r2, r3, #5
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	4413      	add	r3, r2
 80041b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	68ba      	ldr	r2, [r7, #8]
 80041c0:	0151      	lsls	r1, r2, #5
 80041c2:	68fa      	ldr	r2, [r7, #12]
 80041c4:	440a      	add	r2, r1
 80041c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80041ca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80041ce:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	781b      	ldrb	r3, [r3, #0]
 80041dc:	f003 030f 	and.w	r3, r3, #15
 80041e0:	2101      	movs	r1, #1
 80041e2:	fa01 f303 	lsl.w	r3, r1, r3
 80041e6:	041b      	lsls	r3, r3, #16
 80041e8:	43db      	mvns	r3, r3
 80041ea:	68f9      	ldr	r1, [r7, #12]
 80041ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80041f0:	4013      	ands	r3, r2
 80041f2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041fa:	69da      	ldr	r2, [r3, #28]
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	781b      	ldrb	r3, [r3, #0]
 8004200:	f003 030f 	and.w	r3, r3, #15
 8004204:	2101      	movs	r1, #1
 8004206:	fa01 f303 	lsl.w	r3, r1, r3
 800420a:	041b      	lsls	r3, r3, #16
 800420c:	43db      	mvns	r3, r3
 800420e:	68f9      	ldr	r1, [r7, #12]
 8004210:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004214:	4013      	ands	r3, r2
 8004216:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	015a      	lsls	r2, r3, #5
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	4413      	add	r3, r2
 8004220:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	0159      	lsls	r1, r3, #5
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	440b      	add	r3, r1
 800422e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004232:	4619      	mov	r1, r3
 8004234:	4b05      	ldr	r3, [pc, #20]	; (800424c <USB_DeactivateEndpoint+0x1b4>)
 8004236:	4013      	ands	r3, r2
 8004238:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800423a:	2300      	movs	r3, #0
}
 800423c:	4618      	mov	r0, r3
 800423e:	3714      	adds	r7, #20
 8004240:	46bd      	mov	sp, r7
 8004242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004246:	4770      	bx	lr
 8004248:	ec337800 	.word	0xec337800
 800424c:	eff37800 	.word	0xeff37800

08004250 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b08a      	sub	sp, #40	; 0x28
 8004254:	af02      	add	r7, sp, #8
 8004256:	60f8      	str	r0, [r7, #12]
 8004258:	60b9      	str	r1, [r7, #8]
 800425a:	4613      	mov	r3, r2
 800425c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	781b      	ldrb	r3, [r3, #0]
 8004266:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	785b      	ldrb	r3, [r3, #1]
 800426c:	2b01      	cmp	r3, #1
 800426e:	f040 817a 	bne.w	8004566 <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	691b      	ldr	r3, [r3, #16]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d132      	bne.n	80042e0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800427a:	69bb      	ldr	r3, [r7, #24]
 800427c:	015a      	lsls	r2, r3, #5
 800427e:	69fb      	ldr	r3, [r7, #28]
 8004280:	4413      	add	r3, r2
 8004282:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004286:	691b      	ldr	r3, [r3, #16]
 8004288:	69ba      	ldr	r2, [r7, #24]
 800428a:	0151      	lsls	r1, r2, #5
 800428c:	69fa      	ldr	r2, [r7, #28]
 800428e:	440a      	add	r2, r1
 8004290:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004294:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004298:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800429c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800429e:	69bb      	ldr	r3, [r7, #24]
 80042a0:	015a      	lsls	r2, r3, #5
 80042a2:	69fb      	ldr	r3, [r7, #28]
 80042a4:	4413      	add	r3, r2
 80042a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042aa:	691b      	ldr	r3, [r3, #16]
 80042ac:	69ba      	ldr	r2, [r7, #24]
 80042ae:	0151      	lsls	r1, r2, #5
 80042b0:	69fa      	ldr	r2, [r7, #28]
 80042b2:	440a      	add	r2, r1
 80042b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042b8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80042bc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80042be:	69bb      	ldr	r3, [r7, #24]
 80042c0:	015a      	lsls	r2, r3, #5
 80042c2:	69fb      	ldr	r3, [r7, #28]
 80042c4:	4413      	add	r3, r2
 80042c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042ca:	691b      	ldr	r3, [r3, #16]
 80042cc:	69ba      	ldr	r2, [r7, #24]
 80042ce:	0151      	lsls	r1, r2, #5
 80042d0:	69fa      	ldr	r2, [r7, #28]
 80042d2:	440a      	add	r2, r1
 80042d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042d8:	0cdb      	lsrs	r3, r3, #19
 80042da:	04db      	lsls	r3, r3, #19
 80042dc:	6113      	str	r3, [r2, #16]
 80042de:	e092      	b.n	8004406 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80042e0:	69bb      	ldr	r3, [r7, #24]
 80042e2:	015a      	lsls	r2, r3, #5
 80042e4:	69fb      	ldr	r3, [r7, #28]
 80042e6:	4413      	add	r3, r2
 80042e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042ec:	691b      	ldr	r3, [r3, #16]
 80042ee:	69ba      	ldr	r2, [r7, #24]
 80042f0:	0151      	lsls	r1, r2, #5
 80042f2:	69fa      	ldr	r2, [r7, #28]
 80042f4:	440a      	add	r2, r1
 80042f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042fa:	0cdb      	lsrs	r3, r3, #19
 80042fc:	04db      	lsls	r3, r3, #19
 80042fe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004300:	69bb      	ldr	r3, [r7, #24]
 8004302:	015a      	lsls	r2, r3, #5
 8004304:	69fb      	ldr	r3, [r7, #28]
 8004306:	4413      	add	r3, r2
 8004308:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800430c:	691b      	ldr	r3, [r3, #16]
 800430e:	69ba      	ldr	r2, [r7, #24]
 8004310:	0151      	lsls	r1, r2, #5
 8004312:	69fa      	ldr	r2, [r7, #28]
 8004314:	440a      	add	r2, r1
 8004316:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800431a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800431e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004322:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8004324:	69bb      	ldr	r3, [r7, #24]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d11a      	bne.n	8004360 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	691a      	ldr	r2, [r3, #16]
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	429a      	cmp	r2, r3
 8004334:	d903      	bls.n	800433e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	689a      	ldr	r2, [r3, #8]
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800433e:	69bb      	ldr	r3, [r7, #24]
 8004340:	015a      	lsls	r2, r3, #5
 8004342:	69fb      	ldr	r3, [r7, #28]
 8004344:	4413      	add	r3, r2
 8004346:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800434a:	691b      	ldr	r3, [r3, #16]
 800434c:	69ba      	ldr	r2, [r7, #24]
 800434e:	0151      	lsls	r1, r2, #5
 8004350:	69fa      	ldr	r2, [r7, #28]
 8004352:	440a      	add	r2, r1
 8004354:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004358:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800435c:	6113      	str	r3, [r2, #16]
 800435e:	e01b      	b.n	8004398 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004360:	69bb      	ldr	r3, [r7, #24]
 8004362:	015a      	lsls	r2, r3, #5
 8004364:	69fb      	ldr	r3, [r7, #28]
 8004366:	4413      	add	r3, r2
 8004368:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800436c:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	6919      	ldr	r1, [r3, #16]
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	440b      	add	r3, r1
 8004378:	1e59      	subs	r1, r3, #1
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004382:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004384:	4ba2      	ldr	r3, [pc, #648]	; (8004610 <USB_EPStartXfer+0x3c0>)
 8004386:	400b      	ands	r3, r1
 8004388:	69b9      	ldr	r1, [r7, #24]
 800438a:	0148      	lsls	r0, r1, #5
 800438c:	69f9      	ldr	r1, [r7, #28]
 800438e:	4401      	add	r1, r0
 8004390:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004394:	4313      	orrs	r3, r2
 8004396:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004398:	69bb      	ldr	r3, [r7, #24]
 800439a:	015a      	lsls	r2, r3, #5
 800439c:	69fb      	ldr	r3, [r7, #28]
 800439e:	4413      	add	r3, r2
 80043a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043a4:	691a      	ldr	r2, [r3, #16]
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	691b      	ldr	r3, [r3, #16]
 80043aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043ae:	69b9      	ldr	r1, [r7, #24]
 80043b0:	0148      	lsls	r0, r1, #5
 80043b2:	69f9      	ldr	r1, [r7, #28]
 80043b4:	4401      	add	r1, r0
 80043b6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80043ba:	4313      	orrs	r3, r2
 80043bc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	791b      	ldrb	r3, [r3, #4]
 80043c2:	2b01      	cmp	r3, #1
 80043c4:	d11f      	bne.n	8004406 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80043c6:	69bb      	ldr	r3, [r7, #24]
 80043c8:	015a      	lsls	r2, r3, #5
 80043ca:	69fb      	ldr	r3, [r7, #28]
 80043cc:	4413      	add	r3, r2
 80043ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043d2:	691b      	ldr	r3, [r3, #16]
 80043d4:	69ba      	ldr	r2, [r7, #24]
 80043d6:	0151      	lsls	r1, r2, #5
 80043d8:	69fa      	ldr	r2, [r7, #28]
 80043da:	440a      	add	r2, r1
 80043dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043e0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80043e4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80043e6:	69bb      	ldr	r3, [r7, #24]
 80043e8:	015a      	lsls	r2, r3, #5
 80043ea:	69fb      	ldr	r3, [r7, #28]
 80043ec:	4413      	add	r3, r2
 80043ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043f2:	691b      	ldr	r3, [r3, #16]
 80043f4:	69ba      	ldr	r2, [r7, #24]
 80043f6:	0151      	lsls	r1, r2, #5
 80043f8:	69fa      	ldr	r2, [r7, #28]
 80043fa:	440a      	add	r2, r1
 80043fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004400:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004404:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004406:	79fb      	ldrb	r3, [r7, #7]
 8004408:	2b01      	cmp	r3, #1
 800440a:	d14b      	bne.n	80044a4 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	69db      	ldr	r3, [r3, #28]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d009      	beq.n	8004428 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004414:	69bb      	ldr	r3, [r7, #24]
 8004416:	015a      	lsls	r2, r3, #5
 8004418:	69fb      	ldr	r3, [r7, #28]
 800441a:	4413      	add	r3, r2
 800441c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004420:	461a      	mov	r2, r3
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	69db      	ldr	r3, [r3, #28]
 8004426:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	791b      	ldrb	r3, [r3, #4]
 800442c:	2b01      	cmp	r3, #1
 800442e:	d128      	bne.n	8004482 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004430:	69fb      	ldr	r3, [r7, #28]
 8004432:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800443c:	2b00      	cmp	r3, #0
 800443e:	d110      	bne.n	8004462 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004440:	69bb      	ldr	r3, [r7, #24]
 8004442:	015a      	lsls	r2, r3, #5
 8004444:	69fb      	ldr	r3, [r7, #28]
 8004446:	4413      	add	r3, r2
 8004448:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	69ba      	ldr	r2, [r7, #24]
 8004450:	0151      	lsls	r1, r2, #5
 8004452:	69fa      	ldr	r2, [r7, #28]
 8004454:	440a      	add	r2, r1
 8004456:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800445a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800445e:	6013      	str	r3, [r2, #0]
 8004460:	e00f      	b.n	8004482 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004462:	69bb      	ldr	r3, [r7, #24]
 8004464:	015a      	lsls	r2, r3, #5
 8004466:	69fb      	ldr	r3, [r7, #28]
 8004468:	4413      	add	r3, r2
 800446a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	69ba      	ldr	r2, [r7, #24]
 8004472:	0151      	lsls	r1, r2, #5
 8004474:	69fa      	ldr	r2, [r7, #28]
 8004476:	440a      	add	r2, r1
 8004478:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800447c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004480:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004482:	69bb      	ldr	r3, [r7, #24]
 8004484:	015a      	lsls	r2, r3, #5
 8004486:	69fb      	ldr	r3, [r7, #28]
 8004488:	4413      	add	r3, r2
 800448a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	69ba      	ldr	r2, [r7, #24]
 8004492:	0151      	lsls	r1, r2, #5
 8004494:	69fa      	ldr	r2, [r7, #28]
 8004496:	440a      	add	r2, r1
 8004498:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800449c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80044a0:	6013      	str	r3, [r2, #0]
 80044a2:	e165      	b.n	8004770 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80044a4:	69bb      	ldr	r3, [r7, #24]
 80044a6:	015a      	lsls	r2, r3, #5
 80044a8:	69fb      	ldr	r3, [r7, #28]
 80044aa:	4413      	add	r3, r2
 80044ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	69ba      	ldr	r2, [r7, #24]
 80044b4:	0151      	lsls	r1, r2, #5
 80044b6:	69fa      	ldr	r2, [r7, #28]
 80044b8:	440a      	add	r2, r1
 80044ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044be:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80044c2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	791b      	ldrb	r3, [r3, #4]
 80044c8:	2b01      	cmp	r3, #1
 80044ca:	d015      	beq.n	80044f8 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	691b      	ldr	r3, [r3, #16]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	f000 814d 	beq.w	8004770 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80044d6:	69fb      	ldr	r3, [r7, #28]
 80044d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	781b      	ldrb	r3, [r3, #0]
 80044e2:	f003 030f 	and.w	r3, r3, #15
 80044e6:	2101      	movs	r1, #1
 80044e8:	fa01 f303 	lsl.w	r3, r1, r3
 80044ec:	69f9      	ldr	r1, [r7, #28]
 80044ee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80044f2:	4313      	orrs	r3, r2
 80044f4:	634b      	str	r3, [r1, #52]	; 0x34
 80044f6:	e13b      	b.n	8004770 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80044f8:	69fb      	ldr	r3, [r7, #28]
 80044fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044fe:	689b      	ldr	r3, [r3, #8]
 8004500:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004504:	2b00      	cmp	r3, #0
 8004506:	d110      	bne.n	800452a <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004508:	69bb      	ldr	r3, [r7, #24]
 800450a:	015a      	lsls	r2, r3, #5
 800450c:	69fb      	ldr	r3, [r7, #28]
 800450e:	4413      	add	r3, r2
 8004510:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	69ba      	ldr	r2, [r7, #24]
 8004518:	0151      	lsls	r1, r2, #5
 800451a:	69fa      	ldr	r2, [r7, #28]
 800451c:	440a      	add	r2, r1
 800451e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004522:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004526:	6013      	str	r3, [r2, #0]
 8004528:	e00f      	b.n	800454a <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800452a:	69bb      	ldr	r3, [r7, #24]
 800452c:	015a      	lsls	r2, r3, #5
 800452e:	69fb      	ldr	r3, [r7, #28]
 8004530:	4413      	add	r3, r2
 8004532:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	69ba      	ldr	r2, [r7, #24]
 800453a:	0151      	lsls	r1, r2, #5
 800453c:	69fa      	ldr	r2, [r7, #28]
 800453e:	440a      	add	r2, r1
 8004540:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004544:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004548:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	68d9      	ldr	r1, [r3, #12]
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	781a      	ldrb	r2, [r3, #0]
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	691b      	ldr	r3, [r3, #16]
 8004556:	b298      	uxth	r0, r3
 8004558:	79fb      	ldrb	r3, [r7, #7]
 800455a:	9300      	str	r3, [sp, #0]
 800455c:	4603      	mov	r3, r0
 800455e:	68f8      	ldr	r0, [r7, #12]
 8004560:	f000 f9b8 	bl	80048d4 <USB_WritePacket>
 8004564:	e104      	b.n	8004770 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004566:	69bb      	ldr	r3, [r7, #24]
 8004568:	015a      	lsls	r2, r3, #5
 800456a:	69fb      	ldr	r3, [r7, #28]
 800456c:	4413      	add	r3, r2
 800456e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004572:	691b      	ldr	r3, [r3, #16]
 8004574:	69ba      	ldr	r2, [r7, #24]
 8004576:	0151      	lsls	r1, r2, #5
 8004578:	69fa      	ldr	r2, [r7, #28]
 800457a:	440a      	add	r2, r1
 800457c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004580:	0cdb      	lsrs	r3, r3, #19
 8004582:	04db      	lsls	r3, r3, #19
 8004584:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004586:	69bb      	ldr	r3, [r7, #24]
 8004588:	015a      	lsls	r2, r3, #5
 800458a:	69fb      	ldr	r3, [r7, #28]
 800458c:	4413      	add	r3, r2
 800458e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004592:	691b      	ldr	r3, [r3, #16]
 8004594:	69ba      	ldr	r2, [r7, #24]
 8004596:	0151      	lsls	r1, r2, #5
 8004598:	69fa      	ldr	r2, [r7, #28]
 800459a:	440a      	add	r2, r1
 800459c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80045a0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80045a4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80045a8:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80045aa:	69bb      	ldr	r3, [r7, #24]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d131      	bne.n	8004614 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	691b      	ldr	r3, [r3, #16]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d003      	beq.n	80045c0 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	689a      	ldr	r2, [r3, #8]
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	689a      	ldr	r2, [r3, #8]
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80045c8:	69bb      	ldr	r3, [r7, #24]
 80045ca:	015a      	lsls	r2, r3, #5
 80045cc:	69fb      	ldr	r3, [r7, #28]
 80045ce:	4413      	add	r3, r2
 80045d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045d4:	691a      	ldr	r2, [r3, #16]
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	6a1b      	ldr	r3, [r3, #32]
 80045da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045de:	69b9      	ldr	r1, [r7, #24]
 80045e0:	0148      	lsls	r0, r1, #5
 80045e2:	69f9      	ldr	r1, [r7, #28]
 80045e4:	4401      	add	r1, r0
 80045e6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80045ea:	4313      	orrs	r3, r2
 80045ec:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80045ee:	69bb      	ldr	r3, [r7, #24]
 80045f0:	015a      	lsls	r2, r3, #5
 80045f2:	69fb      	ldr	r3, [r7, #28]
 80045f4:	4413      	add	r3, r2
 80045f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045fa:	691b      	ldr	r3, [r3, #16]
 80045fc:	69ba      	ldr	r2, [r7, #24]
 80045fe:	0151      	lsls	r1, r2, #5
 8004600:	69fa      	ldr	r2, [r7, #28]
 8004602:	440a      	add	r2, r1
 8004604:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004608:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800460c:	6113      	str	r3, [r2, #16]
 800460e:	e061      	b.n	80046d4 <USB_EPStartXfer+0x484>
 8004610:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	691b      	ldr	r3, [r3, #16]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d123      	bne.n	8004664 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800461c:	69bb      	ldr	r3, [r7, #24]
 800461e:	015a      	lsls	r2, r3, #5
 8004620:	69fb      	ldr	r3, [r7, #28]
 8004622:	4413      	add	r3, r2
 8004624:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004628:	691a      	ldr	r2, [r3, #16]
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004632:	69b9      	ldr	r1, [r7, #24]
 8004634:	0148      	lsls	r0, r1, #5
 8004636:	69f9      	ldr	r1, [r7, #28]
 8004638:	4401      	add	r1, r0
 800463a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800463e:	4313      	orrs	r3, r2
 8004640:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004642:	69bb      	ldr	r3, [r7, #24]
 8004644:	015a      	lsls	r2, r3, #5
 8004646:	69fb      	ldr	r3, [r7, #28]
 8004648:	4413      	add	r3, r2
 800464a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800464e:	691b      	ldr	r3, [r3, #16]
 8004650:	69ba      	ldr	r2, [r7, #24]
 8004652:	0151      	lsls	r1, r2, #5
 8004654:	69fa      	ldr	r2, [r7, #28]
 8004656:	440a      	add	r2, r1
 8004658:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800465c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004660:	6113      	str	r3, [r2, #16]
 8004662:	e037      	b.n	80046d4 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	691a      	ldr	r2, [r3, #16]
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	689b      	ldr	r3, [r3, #8]
 800466c:	4413      	add	r3, r2
 800466e:	1e5a      	subs	r2, r3, #1
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	fbb2 f3f3 	udiv	r3, r2, r3
 8004678:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	8afa      	ldrh	r2, [r7, #22]
 8004680:	fb03 f202 	mul.w	r2, r3, r2
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004688:	69bb      	ldr	r3, [r7, #24]
 800468a:	015a      	lsls	r2, r3, #5
 800468c:	69fb      	ldr	r3, [r7, #28]
 800468e:	4413      	add	r3, r2
 8004690:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004694:	691a      	ldr	r2, [r3, #16]
 8004696:	8afb      	ldrh	r3, [r7, #22]
 8004698:	04d9      	lsls	r1, r3, #19
 800469a:	4b38      	ldr	r3, [pc, #224]	; (800477c <USB_EPStartXfer+0x52c>)
 800469c:	400b      	ands	r3, r1
 800469e:	69b9      	ldr	r1, [r7, #24]
 80046a0:	0148      	lsls	r0, r1, #5
 80046a2:	69f9      	ldr	r1, [r7, #28]
 80046a4:	4401      	add	r1, r0
 80046a6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80046aa:	4313      	orrs	r3, r2
 80046ac:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80046ae:	69bb      	ldr	r3, [r7, #24]
 80046b0:	015a      	lsls	r2, r3, #5
 80046b2:	69fb      	ldr	r3, [r7, #28]
 80046b4:	4413      	add	r3, r2
 80046b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046ba:	691a      	ldr	r2, [r3, #16]
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	6a1b      	ldr	r3, [r3, #32]
 80046c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046c4:	69b9      	ldr	r1, [r7, #24]
 80046c6:	0148      	lsls	r0, r1, #5
 80046c8:	69f9      	ldr	r1, [r7, #28]
 80046ca:	4401      	add	r1, r0
 80046cc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80046d0:	4313      	orrs	r3, r2
 80046d2:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80046d4:	79fb      	ldrb	r3, [r7, #7]
 80046d6:	2b01      	cmp	r3, #1
 80046d8:	d10d      	bne.n	80046f6 <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	68db      	ldr	r3, [r3, #12]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d009      	beq.n	80046f6 <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	68d9      	ldr	r1, [r3, #12]
 80046e6:	69bb      	ldr	r3, [r7, #24]
 80046e8:	015a      	lsls	r2, r3, #5
 80046ea:	69fb      	ldr	r3, [r7, #28]
 80046ec:	4413      	add	r3, r2
 80046ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046f2:	460a      	mov	r2, r1
 80046f4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	791b      	ldrb	r3, [r3, #4]
 80046fa:	2b01      	cmp	r3, #1
 80046fc:	d128      	bne.n	8004750 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80046fe:	69fb      	ldr	r3, [r7, #28]
 8004700:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800470a:	2b00      	cmp	r3, #0
 800470c:	d110      	bne.n	8004730 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800470e:	69bb      	ldr	r3, [r7, #24]
 8004710:	015a      	lsls	r2, r3, #5
 8004712:	69fb      	ldr	r3, [r7, #28]
 8004714:	4413      	add	r3, r2
 8004716:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	69ba      	ldr	r2, [r7, #24]
 800471e:	0151      	lsls	r1, r2, #5
 8004720:	69fa      	ldr	r2, [r7, #28]
 8004722:	440a      	add	r2, r1
 8004724:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004728:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800472c:	6013      	str	r3, [r2, #0]
 800472e:	e00f      	b.n	8004750 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004730:	69bb      	ldr	r3, [r7, #24]
 8004732:	015a      	lsls	r2, r3, #5
 8004734:	69fb      	ldr	r3, [r7, #28]
 8004736:	4413      	add	r3, r2
 8004738:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	69ba      	ldr	r2, [r7, #24]
 8004740:	0151      	lsls	r1, r2, #5
 8004742:	69fa      	ldr	r2, [r7, #28]
 8004744:	440a      	add	r2, r1
 8004746:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800474a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800474e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004750:	69bb      	ldr	r3, [r7, #24]
 8004752:	015a      	lsls	r2, r3, #5
 8004754:	69fb      	ldr	r3, [r7, #28]
 8004756:	4413      	add	r3, r2
 8004758:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	69ba      	ldr	r2, [r7, #24]
 8004760:	0151      	lsls	r1, r2, #5
 8004762:	69fa      	ldr	r2, [r7, #28]
 8004764:	440a      	add	r2, r1
 8004766:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800476a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800476e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004770:	2300      	movs	r3, #0
}
 8004772:	4618      	mov	r0, r3
 8004774:	3720      	adds	r7, #32
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}
 800477a:	bf00      	nop
 800477c:	1ff80000 	.word	0x1ff80000

08004780 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004780:	b480      	push	{r7}
 8004782:	b087      	sub	sp, #28
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
 8004788:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800478a:	2300      	movs	r3, #0
 800478c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800478e:	2300      	movs	r3, #0
 8004790:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	785b      	ldrb	r3, [r3, #1]
 800479a:	2b01      	cmp	r3, #1
 800479c:	d14a      	bne.n	8004834 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	781b      	ldrb	r3, [r3, #0]
 80047a2:	015a      	lsls	r2, r3, #5
 80047a4:	693b      	ldr	r3, [r7, #16]
 80047a6:	4413      	add	r3, r2
 80047a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80047b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80047b6:	f040 8086 	bne.w	80048c6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	781b      	ldrb	r3, [r3, #0]
 80047be:	015a      	lsls	r2, r3, #5
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	4413      	add	r3, r2
 80047c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	683a      	ldr	r2, [r7, #0]
 80047cc:	7812      	ldrb	r2, [r2, #0]
 80047ce:	0151      	lsls	r1, r2, #5
 80047d0:	693a      	ldr	r2, [r7, #16]
 80047d2:	440a      	add	r2, r1
 80047d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047d8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80047dc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	781b      	ldrb	r3, [r3, #0]
 80047e2:	015a      	lsls	r2, r3, #5
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	4413      	add	r3, r2
 80047e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	683a      	ldr	r2, [r7, #0]
 80047f0:	7812      	ldrb	r2, [r2, #0]
 80047f2:	0151      	lsls	r1, r2, #5
 80047f4:	693a      	ldr	r2, [r7, #16]
 80047f6:	440a      	add	r2, r1
 80047f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047fc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004800:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	3301      	adds	r3, #1
 8004806:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	f242 7210 	movw	r2, #10000	; 0x2710
 800480e:	4293      	cmp	r3, r2
 8004810:	d902      	bls.n	8004818 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004812:	2301      	movs	r3, #1
 8004814:	75fb      	strb	r3, [r7, #23]
          break;
 8004816:	e056      	b.n	80048c6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	781b      	ldrb	r3, [r3, #0]
 800481c:	015a      	lsls	r2, r3, #5
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	4413      	add	r3, r2
 8004822:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800482c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004830:	d0e7      	beq.n	8004802 <USB_EPStopXfer+0x82>
 8004832:	e048      	b.n	80048c6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	781b      	ldrb	r3, [r3, #0]
 8004838:	015a      	lsls	r2, r3, #5
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	4413      	add	r3, r2
 800483e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004848:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800484c:	d13b      	bne.n	80048c6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	781b      	ldrb	r3, [r3, #0]
 8004852:	015a      	lsls	r2, r3, #5
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	4413      	add	r3, r2
 8004858:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	683a      	ldr	r2, [r7, #0]
 8004860:	7812      	ldrb	r2, [r2, #0]
 8004862:	0151      	lsls	r1, r2, #5
 8004864:	693a      	ldr	r2, [r7, #16]
 8004866:	440a      	add	r2, r1
 8004868:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800486c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004870:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	781b      	ldrb	r3, [r3, #0]
 8004876:	015a      	lsls	r2, r3, #5
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	4413      	add	r3, r2
 800487c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	683a      	ldr	r2, [r7, #0]
 8004884:	7812      	ldrb	r2, [r2, #0]
 8004886:	0151      	lsls	r1, r2, #5
 8004888:	693a      	ldr	r2, [r7, #16]
 800488a:	440a      	add	r2, r1
 800488c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004890:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004894:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	3301      	adds	r3, #1
 800489a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	f242 7210 	movw	r2, #10000	; 0x2710
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d902      	bls.n	80048ac <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	75fb      	strb	r3, [r7, #23]
          break;
 80048aa:	e00c      	b.n	80048c6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	781b      	ldrb	r3, [r3, #0]
 80048b0:	015a      	lsls	r2, r3, #5
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	4413      	add	r3, r2
 80048b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80048c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80048c4:	d0e7      	beq.n	8004896 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80048c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	371c      	adds	r7, #28
 80048cc:	46bd      	mov	sp, r7
 80048ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d2:	4770      	bx	lr

080048d4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b089      	sub	sp, #36	; 0x24
 80048d8:	af00      	add	r7, sp, #0
 80048da:	60f8      	str	r0, [r7, #12]
 80048dc:	60b9      	str	r1, [r7, #8]
 80048de:	4611      	mov	r1, r2
 80048e0:	461a      	mov	r2, r3
 80048e2:	460b      	mov	r3, r1
 80048e4:	71fb      	strb	r3, [r7, #7]
 80048e6:	4613      	mov	r3, r2
 80048e8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80048f2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d123      	bne.n	8004942 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80048fa:	88bb      	ldrh	r3, [r7, #4]
 80048fc:	3303      	adds	r3, #3
 80048fe:	089b      	lsrs	r3, r3, #2
 8004900:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004902:	2300      	movs	r3, #0
 8004904:	61bb      	str	r3, [r7, #24]
 8004906:	e018      	b.n	800493a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004908:	79fb      	ldrb	r3, [r7, #7]
 800490a:	031a      	lsls	r2, r3, #12
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	4413      	add	r3, r2
 8004910:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004914:	461a      	mov	r2, r3
 8004916:	69fb      	ldr	r3, [r7, #28]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800491c:	69fb      	ldr	r3, [r7, #28]
 800491e:	3301      	adds	r3, #1
 8004920:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004922:	69fb      	ldr	r3, [r7, #28]
 8004924:	3301      	adds	r3, #1
 8004926:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004928:	69fb      	ldr	r3, [r7, #28]
 800492a:	3301      	adds	r3, #1
 800492c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800492e:	69fb      	ldr	r3, [r7, #28]
 8004930:	3301      	adds	r3, #1
 8004932:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004934:	69bb      	ldr	r3, [r7, #24]
 8004936:	3301      	adds	r3, #1
 8004938:	61bb      	str	r3, [r7, #24]
 800493a:	69ba      	ldr	r2, [r7, #24]
 800493c:	693b      	ldr	r3, [r7, #16]
 800493e:	429a      	cmp	r2, r3
 8004940:	d3e2      	bcc.n	8004908 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004942:	2300      	movs	r3, #0
}
 8004944:	4618      	mov	r0, r3
 8004946:	3724      	adds	r7, #36	; 0x24
 8004948:	46bd      	mov	sp, r7
 800494a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494e:	4770      	bx	lr

08004950 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004950:	b480      	push	{r7}
 8004952:	b08b      	sub	sp, #44	; 0x2c
 8004954:	af00      	add	r7, sp, #0
 8004956:	60f8      	str	r0, [r7, #12]
 8004958:	60b9      	str	r1, [r7, #8]
 800495a:	4613      	mov	r3, r2
 800495c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004966:	88fb      	ldrh	r3, [r7, #6]
 8004968:	089b      	lsrs	r3, r3, #2
 800496a:	b29b      	uxth	r3, r3
 800496c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800496e:	88fb      	ldrh	r3, [r7, #6]
 8004970:	f003 0303 	and.w	r3, r3, #3
 8004974:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004976:	2300      	movs	r3, #0
 8004978:	623b      	str	r3, [r7, #32]
 800497a:	e014      	b.n	80049a6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800497c:	69bb      	ldr	r3, [r7, #24]
 800497e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004982:	681a      	ldr	r2, [r3, #0]
 8004984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004986:	601a      	str	r2, [r3, #0]
    pDest++;
 8004988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800498a:	3301      	adds	r3, #1
 800498c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800498e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004990:	3301      	adds	r3, #1
 8004992:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004996:	3301      	adds	r3, #1
 8004998:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800499a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800499c:	3301      	adds	r3, #1
 800499e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80049a0:	6a3b      	ldr	r3, [r7, #32]
 80049a2:	3301      	adds	r3, #1
 80049a4:	623b      	str	r3, [r7, #32]
 80049a6:	6a3a      	ldr	r2, [r7, #32]
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	429a      	cmp	r2, r3
 80049ac:	d3e6      	bcc.n	800497c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80049ae:	8bfb      	ldrh	r3, [r7, #30]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d01e      	beq.n	80049f2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80049b4:	2300      	movs	r3, #0
 80049b6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80049b8:	69bb      	ldr	r3, [r7, #24]
 80049ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049be:	461a      	mov	r2, r3
 80049c0:	f107 0310 	add.w	r3, r7, #16
 80049c4:	6812      	ldr	r2, [r2, #0]
 80049c6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80049c8:	693a      	ldr	r2, [r7, #16]
 80049ca:	6a3b      	ldr	r3, [r7, #32]
 80049cc:	b2db      	uxtb	r3, r3
 80049ce:	00db      	lsls	r3, r3, #3
 80049d0:	fa22 f303 	lsr.w	r3, r2, r3
 80049d4:	b2da      	uxtb	r2, r3
 80049d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d8:	701a      	strb	r2, [r3, #0]
      i++;
 80049da:	6a3b      	ldr	r3, [r7, #32]
 80049dc:	3301      	adds	r3, #1
 80049de:	623b      	str	r3, [r7, #32]
      pDest++;
 80049e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e2:	3301      	adds	r3, #1
 80049e4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80049e6:	8bfb      	ldrh	r3, [r7, #30]
 80049e8:	3b01      	subs	r3, #1
 80049ea:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80049ec:	8bfb      	ldrh	r3, [r7, #30]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d1ea      	bne.n	80049c8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80049f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	372c      	adds	r7, #44	; 0x2c
 80049f8:	46bd      	mov	sp, r7
 80049fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fe:	4770      	bx	lr

08004a00 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b085      	sub	sp, #20
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
 8004a08:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	781b      	ldrb	r3, [r3, #0]
 8004a12:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	785b      	ldrb	r3, [r3, #1]
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	d12c      	bne.n	8004a76 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	015a      	lsls	r2, r3, #5
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	4413      	add	r3, r2
 8004a24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	db12      	blt.n	8004a54 <USB_EPSetStall+0x54>
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d00f      	beq.n	8004a54 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	015a      	lsls	r2, r3, #5
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	4413      	add	r3, r2
 8004a3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	68ba      	ldr	r2, [r7, #8]
 8004a44:	0151      	lsls	r1, r2, #5
 8004a46:	68fa      	ldr	r2, [r7, #12]
 8004a48:	440a      	add	r2, r1
 8004a4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a4e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004a52:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	015a      	lsls	r2, r3, #5
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	4413      	add	r3, r2
 8004a5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	68ba      	ldr	r2, [r7, #8]
 8004a64:	0151      	lsls	r1, r2, #5
 8004a66:	68fa      	ldr	r2, [r7, #12]
 8004a68:	440a      	add	r2, r1
 8004a6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a6e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004a72:	6013      	str	r3, [r2, #0]
 8004a74:	e02b      	b.n	8004ace <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	015a      	lsls	r2, r3, #5
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	4413      	add	r3, r2
 8004a7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	db12      	blt.n	8004aae <USB_EPSetStall+0xae>
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d00f      	beq.n	8004aae <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	015a      	lsls	r2, r3, #5
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	4413      	add	r3, r2
 8004a96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	68ba      	ldr	r2, [r7, #8]
 8004a9e:	0151      	lsls	r1, r2, #5
 8004aa0:	68fa      	ldr	r2, [r7, #12]
 8004aa2:	440a      	add	r2, r1
 8004aa4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004aa8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004aac:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	015a      	lsls	r2, r3, #5
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	4413      	add	r3, r2
 8004ab6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	68ba      	ldr	r2, [r7, #8]
 8004abe:	0151      	lsls	r1, r2, #5
 8004ac0:	68fa      	ldr	r2, [r7, #12]
 8004ac2:	440a      	add	r2, r1
 8004ac4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ac8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004acc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004ace:	2300      	movs	r3, #0
}
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	3714      	adds	r7, #20
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ada:	4770      	bx	lr

08004adc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b085      	sub	sp, #20
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
 8004ae4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	781b      	ldrb	r3, [r3, #0]
 8004aee:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	785b      	ldrb	r3, [r3, #1]
 8004af4:	2b01      	cmp	r3, #1
 8004af6:	d128      	bne.n	8004b4a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	015a      	lsls	r2, r3, #5
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	4413      	add	r3, r2
 8004b00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	68ba      	ldr	r2, [r7, #8]
 8004b08:	0151      	lsls	r1, r2, #5
 8004b0a:	68fa      	ldr	r2, [r7, #12]
 8004b0c:	440a      	add	r2, r1
 8004b0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b12:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004b16:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	791b      	ldrb	r3, [r3, #4]
 8004b1c:	2b03      	cmp	r3, #3
 8004b1e:	d003      	beq.n	8004b28 <USB_EPClearStall+0x4c>
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	791b      	ldrb	r3, [r3, #4]
 8004b24:	2b02      	cmp	r3, #2
 8004b26:	d138      	bne.n	8004b9a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	015a      	lsls	r2, r3, #5
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	4413      	add	r3, r2
 8004b30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	68ba      	ldr	r2, [r7, #8]
 8004b38:	0151      	lsls	r1, r2, #5
 8004b3a:	68fa      	ldr	r2, [r7, #12]
 8004b3c:	440a      	add	r2, r1
 8004b3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b46:	6013      	str	r3, [r2, #0]
 8004b48:	e027      	b.n	8004b9a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	015a      	lsls	r2, r3, #5
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	4413      	add	r3, r2
 8004b52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	68ba      	ldr	r2, [r7, #8]
 8004b5a:	0151      	lsls	r1, r2, #5
 8004b5c:	68fa      	ldr	r2, [r7, #12]
 8004b5e:	440a      	add	r2, r1
 8004b60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b64:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004b68:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	791b      	ldrb	r3, [r3, #4]
 8004b6e:	2b03      	cmp	r3, #3
 8004b70:	d003      	beq.n	8004b7a <USB_EPClearStall+0x9e>
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	791b      	ldrb	r3, [r3, #4]
 8004b76:	2b02      	cmp	r3, #2
 8004b78:	d10f      	bne.n	8004b9a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	015a      	lsls	r2, r3, #5
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	4413      	add	r3, r2
 8004b82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	68ba      	ldr	r2, [r7, #8]
 8004b8a:	0151      	lsls	r1, r2, #5
 8004b8c:	68fa      	ldr	r2, [r7, #12]
 8004b8e:	440a      	add	r2, r1
 8004b90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b98:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004b9a:	2300      	movs	r3, #0
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	3714      	adds	r7, #20
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba6:	4770      	bx	lr

08004ba8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b085      	sub	sp, #20
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
 8004bb0:	460b      	mov	r3, r1
 8004bb2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	68fa      	ldr	r2, [r7, #12]
 8004bc2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004bc6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004bca:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bd2:	681a      	ldr	r2, [r3, #0]
 8004bd4:	78fb      	ldrb	r3, [r7, #3]
 8004bd6:	011b      	lsls	r3, r3, #4
 8004bd8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004bdc:	68f9      	ldr	r1, [r7, #12]
 8004bde:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004be2:	4313      	orrs	r3, r2
 8004be4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004be6:	2300      	movs	r3, #0
}
 8004be8:	4618      	mov	r0, r3
 8004bea:	3714      	adds	r7, #20
 8004bec:	46bd      	mov	sp, r7
 8004bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf2:	4770      	bx	lr

08004bf4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b085      	sub	sp, #20
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	68fa      	ldr	r2, [r7, #12]
 8004c0a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004c0e:	f023 0303 	bic.w	r3, r3, #3
 8004c12:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	68fa      	ldr	r2, [r7, #12]
 8004c1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c22:	f023 0302 	bic.w	r3, r3, #2
 8004c26:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004c28:	2300      	movs	r3, #0
}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	3714      	adds	r7, #20
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c34:	4770      	bx	lr

08004c36 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004c36:	b480      	push	{r7}
 8004c38:	b085      	sub	sp, #20
 8004c3a:	af00      	add	r7, sp, #0
 8004c3c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	68fa      	ldr	r2, [r7, #12]
 8004c4c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004c50:	f023 0303 	bic.w	r3, r3, #3
 8004c54:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	68fa      	ldr	r2, [r7, #12]
 8004c60:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c64:	f043 0302 	orr.w	r3, r3, #2
 8004c68:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004c6a:	2300      	movs	r3, #0
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	3714      	adds	r7, #20
 8004c70:	46bd      	mov	sp, r7
 8004c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c76:	4770      	bx	lr

08004c78 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b085      	sub	sp, #20
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	695b      	ldr	r3, [r3, #20]
 8004c84:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	699b      	ldr	r3, [r3, #24]
 8004c8a:	68fa      	ldr	r2, [r7, #12]
 8004c8c:	4013      	ands	r3, r2
 8004c8e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004c90:	68fb      	ldr	r3, [r7, #12]
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	3714      	adds	r7, #20
 8004c96:	46bd      	mov	sp, r7
 8004c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9c:	4770      	bx	lr

08004c9e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8004c9e:	b480      	push	{r7}
 8004ca0:	b085      	sub	sp, #20
 8004ca2:	af00      	add	r7, sp, #0
 8004ca4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cb0:	699b      	ldr	r3, [r3, #24]
 8004cb2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cba:	69db      	ldr	r3, [r3, #28]
 8004cbc:	68ba      	ldr	r2, [r7, #8]
 8004cbe:	4013      	ands	r3, r2
 8004cc0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	0c1b      	lsrs	r3, r3, #16
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	3714      	adds	r7, #20
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd0:	4770      	bx	lr

08004cd2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8004cd2:	b480      	push	{r7}
 8004cd4:	b085      	sub	sp, #20
 8004cd6:	af00      	add	r7, sp, #0
 8004cd8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ce4:	699b      	ldr	r3, [r3, #24]
 8004ce6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cee:	69db      	ldr	r3, [r3, #28]
 8004cf0:	68ba      	ldr	r2, [r7, #8]
 8004cf2:	4013      	ands	r3, r2
 8004cf4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	b29b      	uxth	r3, r3
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	3714      	adds	r7, #20
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d04:	4770      	bx	lr

08004d06 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004d06:	b480      	push	{r7}
 8004d08:	b085      	sub	sp, #20
 8004d0a:	af00      	add	r7, sp, #0
 8004d0c:	6078      	str	r0, [r7, #4]
 8004d0e:	460b      	mov	r3, r1
 8004d10:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004d16:	78fb      	ldrb	r3, [r7, #3]
 8004d18:	015a      	lsls	r2, r3, #5
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	4413      	add	r3, r2
 8004d1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d22:	689b      	ldr	r3, [r3, #8]
 8004d24:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d2c:	695b      	ldr	r3, [r3, #20]
 8004d2e:	68ba      	ldr	r2, [r7, #8]
 8004d30:	4013      	ands	r3, r2
 8004d32:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004d34:	68bb      	ldr	r3, [r7, #8]
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	3714      	adds	r7, #20
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d40:	4770      	bx	lr

08004d42 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004d42:	b480      	push	{r7}
 8004d44:	b087      	sub	sp, #28
 8004d46:	af00      	add	r7, sp, #0
 8004d48:	6078      	str	r0, [r7, #4]
 8004d4a:	460b      	mov	r3, r1
 8004d4c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d58:	691b      	ldr	r3, [r3, #16]
 8004d5a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d64:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004d66:	78fb      	ldrb	r3, [r7, #3]
 8004d68:	f003 030f 	and.w	r3, r3, #15
 8004d6c:	68fa      	ldr	r2, [r7, #12]
 8004d6e:	fa22 f303 	lsr.w	r3, r2, r3
 8004d72:	01db      	lsls	r3, r3, #7
 8004d74:	b2db      	uxtb	r3, r3
 8004d76:	693a      	ldr	r2, [r7, #16]
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004d7c:	78fb      	ldrb	r3, [r7, #3]
 8004d7e:	015a      	lsls	r2, r3, #5
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	4413      	add	r3, r2
 8004d84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	693a      	ldr	r2, [r7, #16]
 8004d8c:	4013      	ands	r3, r2
 8004d8e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004d90:	68bb      	ldr	r3, [r7, #8]
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	371c      	adds	r7, #28
 8004d96:	46bd      	mov	sp, r7
 8004d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9c:	4770      	bx	lr

08004d9e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8004d9e:	b480      	push	{r7}
 8004da0:	b083      	sub	sp, #12
 8004da2:	af00      	add	r7, sp, #0
 8004da4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	695b      	ldr	r3, [r3, #20]
 8004daa:	f003 0301 	and.w	r3, r3, #1
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	370c      	adds	r7, #12
 8004db2:	46bd      	mov	sp, r7
 8004db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db8:	4770      	bx	lr

08004dba <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8004dba:	b480      	push	{r7}
 8004dbc:	b085      	sub	sp, #20
 8004dbe:	af00      	add	r7, sp, #0
 8004dc0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	68fa      	ldr	r2, [r7, #12]
 8004dd0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004dd4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004dd8:	f023 0307 	bic.w	r3, r3, #7
 8004ddc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	68fa      	ldr	r2, [r7, #12]
 8004de8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004dec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004df0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004df2:	2300      	movs	r3, #0
}
 8004df4:	4618      	mov	r0, r3
 8004df6:	3714      	adds	r7, #20
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfe:	4770      	bx	lr

08004e00 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8004e00:	b480      	push	{r7}
 8004e02:	b087      	sub	sp, #28
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	60f8      	str	r0, [r7, #12]
 8004e08:	460b      	mov	r3, r1
 8004e0a:	607a      	str	r2, [r7, #4]
 8004e0c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	333c      	adds	r3, #60	; 0x3c
 8004e16:	3304      	adds	r3, #4
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004e1c:	693b      	ldr	r3, [r7, #16]
 8004e1e:	4a26      	ldr	r2, [pc, #152]	; (8004eb8 <USB_EP0_OutStart+0xb8>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d90a      	bls.n	8004e3a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e30:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e34:	d101      	bne.n	8004e3a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004e36:	2300      	movs	r3, #0
 8004e38:	e037      	b.n	8004eaa <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e40:	461a      	mov	r2, r3
 8004e42:	2300      	movs	r3, #0
 8004e44:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004e46:	697b      	ldr	r3, [r7, #20]
 8004e48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e4c:	691b      	ldr	r3, [r3, #16]
 8004e4e:	697a      	ldr	r2, [r7, #20]
 8004e50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e54:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004e58:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e60:	691b      	ldr	r3, [r3, #16]
 8004e62:	697a      	ldr	r2, [r7, #20]
 8004e64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e68:	f043 0318 	orr.w	r3, r3, #24
 8004e6c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e74:	691b      	ldr	r3, [r3, #16]
 8004e76:	697a      	ldr	r2, [r7, #20]
 8004e78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e7c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004e80:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004e82:	7afb      	ldrb	r3, [r7, #11]
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	d10f      	bne.n	8004ea8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e8e:	461a      	mov	r2, r3
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	697a      	ldr	r2, [r7, #20]
 8004e9e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ea2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8004ea6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004ea8:	2300      	movs	r3, #0
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	371c      	adds	r7, #28
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb4:	4770      	bx	lr
 8004eb6:	bf00      	nop
 8004eb8:	4f54300a 	.word	0x4f54300a

08004ebc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b085      	sub	sp, #20
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	3301      	adds	r3, #1
 8004ecc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004ed4:	d901      	bls.n	8004eda <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004ed6:	2303      	movs	r3, #3
 8004ed8:	e01b      	b.n	8004f12 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	691b      	ldr	r3, [r3, #16]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	daf2      	bge.n	8004ec8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	691b      	ldr	r3, [r3, #16]
 8004eea:	f043 0201 	orr.w	r2, r3, #1
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	3301      	adds	r3, #1
 8004ef6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004efe:	d901      	bls.n	8004f04 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004f00:	2303      	movs	r3, #3
 8004f02:	e006      	b.n	8004f12 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	691b      	ldr	r3, [r3, #16]
 8004f08:	f003 0301 	and.w	r3, r3, #1
 8004f0c:	2b01      	cmp	r3, #1
 8004f0e:	d0f0      	beq.n	8004ef2 <USB_CoreReset+0x36>

  return HAL_OK;
 8004f10:	2300      	movs	r3, #0
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	3714      	adds	r7, #20
 8004f16:	46bd      	mov	sp, r7
 8004f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1c:	4770      	bx	lr
	...

08004f20 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b084      	sub	sp, #16
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
 8004f28:	460b      	mov	r3, r1
 8004f2a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004f2c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004f30:	f005 f9ec 	bl	800a30c <USBD_static_malloc>
 8004f34:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d109      	bne.n	8004f50 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	32b0      	adds	r2, #176	; 0xb0
 8004f46:	2100      	movs	r1, #0
 8004f48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8004f4c:	2302      	movs	r3, #2
 8004f4e:	e0d4      	b.n	80050fa <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8004f50:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8004f54:	2100      	movs	r1, #0
 8004f56:	68f8      	ldr	r0, [r7, #12]
 8004f58:	f005 fa44 	bl	800a3e4 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	32b0      	adds	r2, #176	; 0xb0
 8004f66:	68f9      	ldr	r1, [r7, #12]
 8004f68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	32b0      	adds	r2, #176	; 0xb0
 8004f76:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	7c1b      	ldrb	r3, [r3, #16]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d138      	bne.n	8004ffa <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004f88:	4b5e      	ldr	r3, [pc, #376]	; (8005104 <USBD_CDC_Init+0x1e4>)
 8004f8a:	7819      	ldrb	r1, [r3, #0]
 8004f8c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004f90:	2202      	movs	r2, #2
 8004f92:	6878      	ldr	r0, [r7, #4]
 8004f94:	f005 f897 	bl	800a0c6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004f98:	4b5a      	ldr	r3, [pc, #360]	; (8005104 <USBD_CDC_Init+0x1e4>)
 8004f9a:	781b      	ldrb	r3, [r3, #0]
 8004f9c:	f003 020f 	and.w	r2, r3, #15
 8004fa0:	6879      	ldr	r1, [r7, #4]
 8004fa2:	4613      	mov	r3, r2
 8004fa4:	009b      	lsls	r3, r3, #2
 8004fa6:	4413      	add	r3, r2
 8004fa8:	009b      	lsls	r3, r3, #2
 8004faa:	440b      	add	r3, r1
 8004fac:	3324      	adds	r3, #36	; 0x24
 8004fae:	2201      	movs	r2, #1
 8004fb0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004fb2:	4b55      	ldr	r3, [pc, #340]	; (8005108 <USBD_CDC_Init+0x1e8>)
 8004fb4:	7819      	ldrb	r1, [r3, #0]
 8004fb6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004fba:	2202      	movs	r2, #2
 8004fbc:	6878      	ldr	r0, [r7, #4]
 8004fbe:	f005 f882 	bl	800a0c6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004fc2:	4b51      	ldr	r3, [pc, #324]	; (8005108 <USBD_CDC_Init+0x1e8>)
 8004fc4:	781b      	ldrb	r3, [r3, #0]
 8004fc6:	f003 020f 	and.w	r2, r3, #15
 8004fca:	6879      	ldr	r1, [r7, #4]
 8004fcc:	4613      	mov	r3, r2
 8004fce:	009b      	lsls	r3, r3, #2
 8004fd0:	4413      	add	r3, r2
 8004fd2:	009b      	lsls	r3, r3, #2
 8004fd4:	440b      	add	r3, r1
 8004fd6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004fda:	2201      	movs	r2, #1
 8004fdc:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8004fde:	4b4b      	ldr	r3, [pc, #300]	; (800510c <USBD_CDC_Init+0x1ec>)
 8004fe0:	781b      	ldrb	r3, [r3, #0]
 8004fe2:	f003 020f 	and.w	r2, r3, #15
 8004fe6:	6879      	ldr	r1, [r7, #4]
 8004fe8:	4613      	mov	r3, r2
 8004fea:	009b      	lsls	r3, r3, #2
 8004fec:	4413      	add	r3, r2
 8004fee:	009b      	lsls	r3, r3, #2
 8004ff0:	440b      	add	r3, r1
 8004ff2:	3326      	adds	r3, #38	; 0x26
 8004ff4:	2210      	movs	r2, #16
 8004ff6:	801a      	strh	r2, [r3, #0]
 8004ff8:	e035      	b.n	8005066 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004ffa:	4b42      	ldr	r3, [pc, #264]	; (8005104 <USBD_CDC_Init+0x1e4>)
 8004ffc:	7819      	ldrb	r1, [r3, #0]
 8004ffe:	2340      	movs	r3, #64	; 0x40
 8005000:	2202      	movs	r2, #2
 8005002:	6878      	ldr	r0, [r7, #4]
 8005004:	f005 f85f 	bl	800a0c6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005008:	4b3e      	ldr	r3, [pc, #248]	; (8005104 <USBD_CDC_Init+0x1e4>)
 800500a:	781b      	ldrb	r3, [r3, #0]
 800500c:	f003 020f 	and.w	r2, r3, #15
 8005010:	6879      	ldr	r1, [r7, #4]
 8005012:	4613      	mov	r3, r2
 8005014:	009b      	lsls	r3, r3, #2
 8005016:	4413      	add	r3, r2
 8005018:	009b      	lsls	r3, r3, #2
 800501a:	440b      	add	r3, r1
 800501c:	3324      	adds	r3, #36	; 0x24
 800501e:	2201      	movs	r2, #1
 8005020:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005022:	4b39      	ldr	r3, [pc, #228]	; (8005108 <USBD_CDC_Init+0x1e8>)
 8005024:	7819      	ldrb	r1, [r3, #0]
 8005026:	2340      	movs	r3, #64	; 0x40
 8005028:	2202      	movs	r2, #2
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f005 f84b 	bl	800a0c6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005030:	4b35      	ldr	r3, [pc, #212]	; (8005108 <USBD_CDC_Init+0x1e8>)
 8005032:	781b      	ldrb	r3, [r3, #0]
 8005034:	f003 020f 	and.w	r2, r3, #15
 8005038:	6879      	ldr	r1, [r7, #4]
 800503a:	4613      	mov	r3, r2
 800503c:	009b      	lsls	r3, r3, #2
 800503e:	4413      	add	r3, r2
 8005040:	009b      	lsls	r3, r3, #2
 8005042:	440b      	add	r3, r1
 8005044:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005048:	2201      	movs	r2, #1
 800504a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800504c:	4b2f      	ldr	r3, [pc, #188]	; (800510c <USBD_CDC_Init+0x1ec>)
 800504e:	781b      	ldrb	r3, [r3, #0]
 8005050:	f003 020f 	and.w	r2, r3, #15
 8005054:	6879      	ldr	r1, [r7, #4]
 8005056:	4613      	mov	r3, r2
 8005058:	009b      	lsls	r3, r3, #2
 800505a:	4413      	add	r3, r2
 800505c:	009b      	lsls	r3, r3, #2
 800505e:	440b      	add	r3, r1
 8005060:	3326      	adds	r3, #38	; 0x26
 8005062:	2210      	movs	r2, #16
 8005064:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005066:	4b29      	ldr	r3, [pc, #164]	; (800510c <USBD_CDC_Init+0x1ec>)
 8005068:	7819      	ldrb	r1, [r3, #0]
 800506a:	2308      	movs	r3, #8
 800506c:	2203      	movs	r2, #3
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f005 f829 	bl	800a0c6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8005074:	4b25      	ldr	r3, [pc, #148]	; (800510c <USBD_CDC_Init+0x1ec>)
 8005076:	781b      	ldrb	r3, [r3, #0]
 8005078:	f003 020f 	and.w	r2, r3, #15
 800507c:	6879      	ldr	r1, [r7, #4]
 800507e:	4613      	mov	r3, r2
 8005080:	009b      	lsls	r3, r3, #2
 8005082:	4413      	add	r3, r2
 8005084:	009b      	lsls	r3, r3, #2
 8005086:	440b      	add	r3, r1
 8005088:	3324      	adds	r3, #36	; 0x24
 800508a:	2201      	movs	r2, #1
 800508c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	2200      	movs	r2, #0
 8005092:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800509c:	687a      	ldr	r2, [r7, #4]
 800509e:	33b0      	adds	r3, #176	; 0xb0
 80050a0:	009b      	lsls	r3, r3, #2
 80050a2:	4413      	add	r3, r2
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	2200      	movs	r2, #0
 80050ae:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	2200      	movs	r2, #0
 80050b6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d101      	bne.n	80050c8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80050c4:	2302      	movs	r3, #2
 80050c6:	e018      	b.n	80050fa <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	7c1b      	ldrb	r3, [r3, #16]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d10a      	bne.n	80050e6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80050d0:	4b0d      	ldr	r3, [pc, #52]	; (8005108 <USBD_CDC_Init+0x1e8>)
 80050d2:	7819      	ldrb	r1, [r3, #0]
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80050da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80050de:	6878      	ldr	r0, [r7, #4]
 80050e0:	f005 f8e0 	bl	800a2a4 <USBD_LL_PrepareReceive>
 80050e4:	e008      	b.n	80050f8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80050e6:	4b08      	ldr	r3, [pc, #32]	; (8005108 <USBD_CDC_Init+0x1e8>)
 80050e8:	7819      	ldrb	r1, [r3, #0]
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80050f0:	2340      	movs	r3, #64	; 0x40
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f005 f8d6 	bl	800a2a4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80050f8:	2300      	movs	r3, #0
}
 80050fa:	4618      	mov	r0, r3
 80050fc:	3710      	adds	r7, #16
 80050fe:	46bd      	mov	sp, r7
 8005100:	bd80      	pop	{r7, pc}
 8005102:	bf00      	nop
 8005104:	20000093 	.word	0x20000093
 8005108:	20000094 	.word	0x20000094
 800510c:	20000095 	.word	0x20000095

08005110 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b082      	sub	sp, #8
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
 8005118:	460b      	mov	r3, r1
 800511a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800511c:	4b3a      	ldr	r3, [pc, #232]	; (8005208 <USBD_CDC_DeInit+0xf8>)
 800511e:	781b      	ldrb	r3, [r3, #0]
 8005120:	4619      	mov	r1, r3
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	f004 fff5 	bl	800a112 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8005128:	4b37      	ldr	r3, [pc, #220]	; (8005208 <USBD_CDC_DeInit+0xf8>)
 800512a:	781b      	ldrb	r3, [r3, #0]
 800512c:	f003 020f 	and.w	r2, r3, #15
 8005130:	6879      	ldr	r1, [r7, #4]
 8005132:	4613      	mov	r3, r2
 8005134:	009b      	lsls	r3, r3, #2
 8005136:	4413      	add	r3, r2
 8005138:	009b      	lsls	r3, r3, #2
 800513a:	440b      	add	r3, r1
 800513c:	3324      	adds	r3, #36	; 0x24
 800513e:	2200      	movs	r2, #0
 8005140:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8005142:	4b32      	ldr	r3, [pc, #200]	; (800520c <USBD_CDC_DeInit+0xfc>)
 8005144:	781b      	ldrb	r3, [r3, #0]
 8005146:	4619      	mov	r1, r3
 8005148:	6878      	ldr	r0, [r7, #4]
 800514a:	f004 ffe2 	bl	800a112 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800514e:	4b2f      	ldr	r3, [pc, #188]	; (800520c <USBD_CDC_DeInit+0xfc>)
 8005150:	781b      	ldrb	r3, [r3, #0]
 8005152:	f003 020f 	and.w	r2, r3, #15
 8005156:	6879      	ldr	r1, [r7, #4]
 8005158:	4613      	mov	r3, r2
 800515a:	009b      	lsls	r3, r3, #2
 800515c:	4413      	add	r3, r2
 800515e:	009b      	lsls	r3, r3, #2
 8005160:	440b      	add	r3, r1
 8005162:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005166:	2200      	movs	r2, #0
 8005168:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800516a:	4b29      	ldr	r3, [pc, #164]	; (8005210 <USBD_CDC_DeInit+0x100>)
 800516c:	781b      	ldrb	r3, [r3, #0]
 800516e:	4619      	mov	r1, r3
 8005170:	6878      	ldr	r0, [r7, #4]
 8005172:	f004 ffce 	bl	800a112 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8005176:	4b26      	ldr	r3, [pc, #152]	; (8005210 <USBD_CDC_DeInit+0x100>)
 8005178:	781b      	ldrb	r3, [r3, #0]
 800517a:	f003 020f 	and.w	r2, r3, #15
 800517e:	6879      	ldr	r1, [r7, #4]
 8005180:	4613      	mov	r3, r2
 8005182:	009b      	lsls	r3, r3, #2
 8005184:	4413      	add	r3, r2
 8005186:	009b      	lsls	r3, r3, #2
 8005188:	440b      	add	r3, r1
 800518a:	3324      	adds	r3, #36	; 0x24
 800518c:	2200      	movs	r2, #0
 800518e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8005190:	4b1f      	ldr	r3, [pc, #124]	; (8005210 <USBD_CDC_DeInit+0x100>)
 8005192:	781b      	ldrb	r3, [r3, #0]
 8005194:	f003 020f 	and.w	r2, r3, #15
 8005198:	6879      	ldr	r1, [r7, #4]
 800519a:	4613      	mov	r3, r2
 800519c:	009b      	lsls	r3, r3, #2
 800519e:	4413      	add	r3, r2
 80051a0:	009b      	lsls	r3, r3, #2
 80051a2:	440b      	add	r3, r1
 80051a4:	3326      	adds	r3, #38	; 0x26
 80051a6:	2200      	movs	r2, #0
 80051a8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	32b0      	adds	r2, #176	; 0xb0
 80051b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d01f      	beq.n	80051fc <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80051c2:	687a      	ldr	r2, [r7, #4]
 80051c4:	33b0      	adds	r3, #176	; 0xb0
 80051c6:	009b      	lsls	r3, r3, #2
 80051c8:	4413      	add	r3, r2
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	32b0      	adds	r2, #176	; 0xb0
 80051da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051de:	4618      	mov	r0, r3
 80051e0:	f005 f8a2 	bl	800a328 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	32b0      	adds	r2, #176	; 0xb0
 80051ee:	2100      	movs	r1, #0
 80051f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2200      	movs	r2, #0
 80051f8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80051fc:	2300      	movs	r3, #0
}
 80051fe:	4618      	mov	r0, r3
 8005200:	3708      	adds	r7, #8
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}
 8005206:	bf00      	nop
 8005208:	20000093 	.word	0x20000093
 800520c:	20000094 	.word	0x20000094
 8005210:	20000095 	.word	0x20000095

08005214 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b086      	sub	sp, #24
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
 800521c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	32b0      	adds	r2, #176	; 0xb0
 8005228:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800522c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800522e:	2300      	movs	r3, #0
 8005230:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005232:	2300      	movs	r3, #0
 8005234:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005236:	2300      	movs	r3, #0
 8005238:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800523a:	693b      	ldr	r3, [r7, #16]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d101      	bne.n	8005244 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8005240:	2303      	movs	r3, #3
 8005242:	e0bf      	b.n	80053c4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	781b      	ldrb	r3, [r3, #0]
 8005248:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800524c:	2b00      	cmp	r3, #0
 800524e:	d050      	beq.n	80052f2 <USBD_CDC_Setup+0xde>
 8005250:	2b20      	cmp	r3, #32
 8005252:	f040 80af 	bne.w	80053b4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	88db      	ldrh	r3, [r3, #6]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d03a      	beq.n	80052d4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	781b      	ldrb	r3, [r3, #0]
 8005262:	b25b      	sxtb	r3, r3
 8005264:	2b00      	cmp	r3, #0
 8005266:	da1b      	bge.n	80052a0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800526e:	687a      	ldr	r2, [r7, #4]
 8005270:	33b0      	adds	r3, #176	; 0xb0
 8005272:	009b      	lsls	r3, r3, #2
 8005274:	4413      	add	r3, r2
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	689b      	ldr	r3, [r3, #8]
 800527a:	683a      	ldr	r2, [r7, #0]
 800527c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800527e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005280:	683a      	ldr	r2, [r7, #0]
 8005282:	88d2      	ldrh	r2, [r2, #6]
 8005284:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	88db      	ldrh	r3, [r3, #6]
 800528a:	2b07      	cmp	r3, #7
 800528c:	bf28      	it	cs
 800528e:	2307      	movcs	r3, #7
 8005290:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	89fa      	ldrh	r2, [r7, #14]
 8005296:	4619      	mov	r1, r3
 8005298:	6878      	ldr	r0, [r7, #4]
 800529a:	f001 fd49 	bl	8006d30 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800529e:	e090      	b.n	80053c2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	785a      	ldrb	r2, [r3, #1]
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	88db      	ldrh	r3, [r3, #6]
 80052ae:	2b3f      	cmp	r3, #63	; 0x3f
 80052b0:	d803      	bhi.n	80052ba <USBD_CDC_Setup+0xa6>
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	88db      	ldrh	r3, [r3, #6]
 80052b6:	b2da      	uxtb	r2, r3
 80052b8:	e000      	b.n	80052bc <USBD_CDC_Setup+0xa8>
 80052ba:	2240      	movs	r2, #64	; 0x40
 80052bc:	693b      	ldr	r3, [r7, #16]
 80052be:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80052c2:	6939      	ldr	r1, [r7, #16]
 80052c4:	693b      	ldr	r3, [r7, #16]
 80052c6:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80052ca:	461a      	mov	r2, r3
 80052cc:	6878      	ldr	r0, [r7, #4]
 80052ce:	f001 fd5b 	bl	8006d88 <USBD_CtlPrepareRx>
      break;
 80052d2:	e076      	b.n	80053c2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80052da:	687a      	ldr	r2, [r7, #4]
 80052dc:	33b0      	adds	r3, #176	; 0xb0
 80052de:	009b      	lsls	r3, r3, #2
 80052e0:	4413      	add	r3, r2
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	689b      	ldr	r3, [r3, #8]
 80052e6:	683a      	ldr	r2, [r7, #0]
 80052e8:	7850      	ldrb	r0, [r2, #1]
 80052ea:	2200      	movs	r2, #0
 80052ec:	6839      	ldr	r1, [r7, #0]
 80052ee:	4798      	blx	r3
      break;
 80052f0:	e067      	b.n	80053c2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	785b      	ldrb	r3, [r3, #1]
 80052f6:	2b0b      	cmp	r3, #11
 80052f8:	d851      	bhi.n	800539e <USBD_CDC_Setup+0x18a>
 80052fa:	a201      	add	r2, pc, #4	; (adr r2, 8005300 <USBD_CDC_Setup+0xec>)
 80052fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005300:	08005331 	.word	0x08005331
 8005304:	080053ad 	.word	0x080053ad
 8005308:	0800539f 	.word	0x0800539f
 800530c:	0800539f 	.word	0x0800539f
 8005310:	0800539f 	.word	0x0800539f
 8005314:	0800539f 	.word	0x0800539f
 8005318:	0800539f 	.word	0x0800539f
 800531c:	0800539f 	.word	0x0800539f
 8005320:	0800539f 	.word	0x0800539f
 8005324:	0800539f 	.word	0x0800539f
 8005328:	0800535b 	.word	0x0800535b
 800532c:	08005385 	.word	0x08005385
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005336:	b2db      	uxtb	r3, r3
 8005338:	2b03      	cmp	r3, #3
 800533a:	d107      	bne.n	800534c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800533c:	f107 030a 	add.w	r3, r7, #10
 8005340:	2202      	movs	r2, #2
 8005342:	4619      	mov	r1, r3
 8005344:	6878      	ldr	r0, [r7, #4]
 8005346:	f001 fcf3 	bl	8006d30 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800534a:	e032      	b.n	80053b2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800534c:	6839      	ldr	r1, [r7, #0]
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f001 fc7d 	bl	8006c4e <USBD_CtlError>
            ret = USBD_FAIL;
 8005354:	2303      	movs	r3, #3
 8005356:	75fb      	strb	r3, [r7, #23]
          break;
 8005358:	e02b      	b.n	80053b2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005360:	b2db      	uxtb	r3, r3
 8005362:	2b03      	cmp	r3, #3
 8005364:	d107      	bne.n	8005376 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005366:	f107 030d 	add.w	r3, r7, #13
 800536a:	2201      	movs	r2, #1
 800536c:	4619      	mov	r1, r3
 800536e:	6878      	ldr	r0, [r7, #4]
 8005370:	f001 fcde 	bl	8006d30 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005374:	e01d      	b.n	80053b2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005376:	6839      	ldr	r1, [r7, #0]
 8005378:	6878      	ldr	r0, [r7, #4]
 800537a:	f001 fc68 	bl	8006c4e <USBD_CtlError>
            ret = USBD_FAIL;
 800537e:	2303      	movs	r3, #3
 8005380:	75fb      	strb	r3, [r7, #23]
          break;
 8005382:	e016      	b.n	80053b2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800538a:	b2db      	uxtb	r3, r3
 800538c:	2b03      	cmp	r3, #3
 800538e:	d00f      	beq.n	80053b0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8005390:	6839      	ldr	r1, [r7, #0]
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	f001 fc5b 	bl	8006c4e <USBD_CtlError>
            ret = USBD_FAIL;
 8005398:	2303      	movs	r3, #3
 800539a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800539c:	e008      	b.n	80053b0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800539e:	6839      	ldr	r1, [r7, #0]
 80053a0:	6878      	ldr	r0, [r7, #4]
 80053a2:	f001 fc54 	bl	8006c4e <USBD_CtlError>
          ret = USBD_FAIL;
 80053a6:	2303      	movs	r3, #3
 80053a8:	75fb      	strb	r3, [r7, #23]
          break;
 80053aa:	e002      	b.n	80053b2 <USBD_CDC_Setup+0x19e>
          break;
 80053ac:	bf00      	nop
 80053ae:	e008      	b.n	80053c2 <USBD_CDC_Setup+0x1ae>
          break;
 80053b0:	bf00      	nop
      }
      break;
 80053b2:	e006      	b.n	80053c2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80053b4:	6839      	ldr	r1, [r7, #0]
 80053b6:	6878      	ldr	r0, [r7, #4]
 80053b8:	f001 fc49 	bl	8006c4e <USBD_CtlError>
      ret = USBD_FAIL;
 80053bc:	2303      	movs	r3, #3
 80053be:	75fb      	strb	r3, [r7, #23]
      break;
 80053c0:	bf00      	nop
  }

  return (uint8_t)ret;
 80053c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	3718      	adds	r7, #24
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bd80      	pop	{r7, pc}

080053cc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b084      	sub	sp, #16
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
 80053d4:	460b      	mov	r3, r1
 80053d6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80053de:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	32b0      	adds	r2, #176	; 0xb0
 80053ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d101      	bne.n	80053f6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80053f2:	2303      	movs	r3, #3
 80053f4:	e065      	b.n	80054c2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	32b0      	adds	r2, #176	; 0xb0
 8005400:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005404:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005406:	78fb      	ldrb	r3, [r7, #3]
 8005408:	f003 020f 	and.w	r2, r3, #15
 800540c:	6879      	ldr	r1, [r7, #4]
 800540e:	4613      	mov	r3, r2
 8005410:	009b      	lsls	r3, r3, #2
 8005412:	4413      	add	r3, r2
 8005414:	009b      	lsls	r3, r3, #2
 8005416:	440b      	add	r3, r1
 8005418:	3318      	adds	r3, #24
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d02f      	beq.n	8005480 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8005420:	78fb      	ldrb	r3, [r7, #3]
 8005422:	f003 020f 	and.w	r2, r3, #15
 8005426:	6879      	ldr	r1, [r7, #4]
 8005428:	4613      	mov	r3, r2
 800542a:	009b      	lsls	r3, r3, #2
 800542c:	4413      	add	r3, r2
 800542e:	009b      	lsls	r3, r3, #2
 8005430:	440b      	add	r3, r1
 8005432:	3318      	adds	r3, #24
 8005434:	681a      	ldr	r2, [r3, #0]
 8005436:	78fb      	ldrb	r3, [r7, #3]
 8005438:	f003 010f 	and.w	r1, r3, #15
 800543c:	68f8      	ldr	r0, [r7, #12]
 800543e:	460b      	mov	r3, r1
 8005440:	00db      	lsls	r3, r3, #3
 8005442:	440b      	add	r3, r1
 8005444:	009b      	lsls	r3, r3, #2
 8005446:	4403      	add	r3, r0
 8005448:	331c      	adds	r3, #28
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	fbb2 f1f3 	udiv	r1, r2, r3
 8005450:	fb01 f303 	mul.w	r3, r1, r3
 8005454:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005456:	2b00      	cmp	r3, #0
 8005458:	d112      	bne.n	8005480 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800545a:	78fb      	ldrb	r3, [r7, #3]
 800545c:	f003 020f 	and.w	r2, r3, #15
 8005460:	6879      	ldr	r1, [r7, #4]
 8005462:	4613      	mov	r3, r2
 8005464:	009b      	lsls	r3, r3, #2
 8005466:	4413      	add	r3, r2
 8005468:	009b      	lsls	r3, r3, #2
 800546a:	440b      	add	r3, r1
 800546c:	3318      	adds	r3, #24
 800546e:	2200      	movs	r2, #0
 8005470:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005472:	78f9      	ldrb	r1, [r7, #3]
 8005474:	2300      	movs	r3, #0
 8005476:	2200      	movs	r2, #0
 8005478:	6878      	ldr	r0, [r7, #4]
 800547a:	f004 fef2 	bl	800a262 <USBD_LL_Transmit>
 800547e:	e01f      	b.n	80054c0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	2200      	movs	r2, #0
 8005484:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800548e:	687a      	ldr	r2, [r7, #4]
 8005490:	33b0      	adds	r3, #176	; 0xb0
 8005492:	009b      	lsls	r3, r3, #2
 8005494:	4413      	add	r3, r2
 8005496:	685b      	ldr	r3, [r3, #4]
 8005498:	691b      	ldr	r3, [r3, #16]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d010      	beq.n	80054c0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80054a4:	687a      	ldr	r2, [r7, #4]
 80054a6:	33b0      	adds	r3, #176	; 0xb0
 80054a8:	009b      	lsls	r3, r3, #2
 80054aa:	4413      	add	r3, r2
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	691b      	ldr	r3, [r3, #16]
 80054b0:	68ba      	ldr	r2, [r7, #8]
 80054b2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80054b6:	68ba      	ldr	r2, [r7, #8]
 80054b8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80054bc:	78fa      	ldrb	r2, [r7, #3]
 80054be:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80054c0:	2300      	movs	r3, #0
}
 80054c2:	4618      	mov	r0, r3
 80054c4:	3710      	adds	r7, #16
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bd80      	pop	{r7, pc}

080054ca <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80054ca:	b580      	push	{r7, lr}
 80054cc:	b084      	sub	sp, #16
 80054ce:	af00      	add	r7, sp, #0
 80054d0:	6078      	str	r0, [r7, #4]
 80054d2:	460b      	mov	r3, r1
 80054d4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	32b0      	adds	r2, #176	; 0xb0
 80054e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054e4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	32b0      	adds	r2, #176	; 0xb0
 80054f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d101      	bne.n	80054fc <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80054f8:	2303      	movs	r3, #3
 80054fa:	e01a      	b.n	8005532 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80054fc:	78fb      	ldrb	r3, [r7, #3]
 80054fe:	4619      	mov	r1, r3
 8005500:	6878      	ldr	r0, [r7, #4]
 8005502:	f004 fef0 	bl	800a2e6 <USBD_LL_GetRxDataSize>
 8005506:	4602      	mov	r2, r0
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005514:	687a      	ldr	r2, [r7, #4]
 8005516:	33b0      	adds	r3, #176	; 0xb0
 8005518:	009b      	lsls	r3, r3, #2
 800551a:	4413      	add	r3, r2
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	68db      	ldr	r3, [r3, #12]
 8005520:	68fa      	ldr	r2, [r7, #12]
 8005522:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005526:	68fa      	ldr	r2, [r7, #12]
 8005528:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800552c:	4611      	mov	r1, r2
 800552e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005530:	2300      	movs	r3, #0
}
 8005532:	4618      	mov	r0, r3
 8005534:	3710      	adds	r7, #16
 8005536:	46bd      	mov	sp, r7
 8005538:	bd80      	pop	{r7, pc}

0800553a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800553a:	b580      	push	{r7, lr}
 800553c:	b084      	sub	sp, #16
 800553e:	af00      	add	r7, sp, #0
 8005540:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	32b0      	adds	r2, #176	; 0xb0
 800554c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005550:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d101      	bne.n	800555c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005558:	2303      	movs	r3, #3
 800555a:	e025      	b.n	80055a8 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005562:	687a      	ldr	r2, [r7, #4]
 8005564:	33b0      	adds	r3, #176	; 0xb0
 8005566:	009b      	lsls	r3, r3, #2
 8005568:	4413      	add	r3, r2
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d01a      	beq.n	80055a6 <USBD_CDC_EP0_RxReady+0x6c>
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005576:	2bff      	cmp	r3, #255	; 0xff
 8005578:	d015      	beq.n	80055a6 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005580:	687a      	ldr	r2, [r7, #4]
 8005582:	33b0      	adds	r3, #176	; 0xb0
 8005584:	009b      	lsls	r3, r3, #2
 8005586:	4413      	add	r3, r2
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	689b      	ldr	r3, [r3, #8]
 800558c:	68fa      	ldr	r2, [r7, #12]
 800558e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8005592:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8005594:	68fa      	ldr	r2, [r7, #12]
 8005596:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800559a:	b292      	uxth	r2, r2
 800559c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	22ff      	movs	r2, #255	; 0xff
 80055a2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80055a6:	2300      	movs	r3, #0
}
 80055a8:	4618      	mov	r0, r3
 80055aa:	3710      	adds	r7, #16
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bd80      	pop	{r7, pc}

080055b0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b086      	sub	sp, #24
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80055b8:	2182      	movs	r1, #130	; 0x82
 80055ba:	4818      	ldr	r0, [pc, #96]	; (800561c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80055bc:	f000 fd0f 	bl	8005fde <USBD_GetEpDesc>
 80055c0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80055c2:	2101      	movs	r1, #1
 80055c4:	4815      	ldr	r0, [pc, #84]	; (800561c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80055c6:	f000 fd0a 	bl	8005fde <USBD_GetEpDesc>
 80055ca:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80055cc:	2181      	movs	r1, #129	; 0x81
 80055ce:	4813      	ldr	r0, [pc, #76]	; (800561c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80055d0:	f000 fd05 	bl	8005fde <USBD_GetEpDesc>
 80055d4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d002      	beq.n	80055e2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80055dc:	697b      	ldr	r3, [r7, #20]
 80055de:	2210      	movs	r2, #16
 80055e0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d006      	beq.n	80055f6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80055e8:	693b      	ldr	r3, [r7, #16]
 80055ea:	2200      	movs	r2, #0
 80055ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80055f0:	711a      	strb	r2, [r3, #4]
 80055f2:	2200      	movs	r2, #0
 80055f4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d006      	beq.n	800560a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	2200      	movs	r2, #0
 8005600:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005604:	711a      	strb	r2, [r3, #4]
 8005606:	2200      	movs	r2, #0
 8005608:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2243      	movs	r2, #67	; 0x43
 800560e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005610:	4b02      	ldr	r3, [pc, #8]	; (800561c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8005612:	4618      	mov	r0, r3
 8005614:	3718      	adds	r7, #24
 8005616:	46bd      	mov	sp, r7
 8005618:	bd80      	pop	{r7, pc}
 800561a:	bf00      	nop
 800561c:	20000050 	.word	0x20000050

08005620 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b086      	sub	sp, #24
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005628:	2182      	movs	r1, #130	; 0x82
 800562a:	4818      	ldr	r0, [pc, #96]	; (800568c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800562c:	f000 fcd7 	bl	8005fde <USBD_GetEpDesc>
 8005630:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005632:	2101      	movs	r1, #1
 8005634:	4815      	ldr	r0, [pc, #84]	; (800568c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005636:	f000 fcd2 	bl	8005fde <USBD_GetEpDesc>
 800563a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800563c:	2181      	movs	r1, #129	; 0x81
 800563e:	4813      	ldr	r0, [pc, #76]	; (800568c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005640:	f000 fccd 	bl	8005fde <USBD_GetEpDesc>
 8005644:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d002      	beq.n	8005652 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	2210      	movs	r2, #16
 8005650:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005652:	693b      	ldr	r3, [r7, #16]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d006      	beq.n	8005666 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005658:	693b      	ldr	r3, [r7, #16]
 800565a:	2200      	movs	r2, #0
 800565c:	711a      	strb	r2, [r3, #4]
 800565e:	2200      	movs	r2, #0
 8005660:	f042 0202 	orr.w	r2, r2, #2
 8005664:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d006      	beq.n	800567a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	2200      	movs	r2, #0
 8005670:	711a      	strb	r2, [r3, #4]
 8005672:	2200      	movs	r2, #0
 8005674:	f042 0202 	orr.w	r2, r2, #2
 8005678:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2243      	movs	r2, #67	; 0x43
 800567e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005680:	4b02      	ldr	r3, [pc, #8]	; (800568c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8005682:	4618      	mov	r0, r3
 8005684:	3718      	adds	r7, #24
 8005686:	46bd      	mov	sp, r7
 8005688:	bd80      	pop	{r7, pc}
 800568a:	bf00      	nop
 800568c:	20000050 	.word	0x20000050

08005690 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b086      	sub	sp, #24
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005698:	2182      	movs	r1, #130	; 0x82
 800569a:	4818      	ldr	r0, [pc, #96]	; (80056fc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800569c:	f000 fc9f 	bl	8005fde <USBD_GetEpDesc>
 80056a0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80056a2:	2101      	movs	r1, #1
 80056a4:	4815      	ldr	r0, [pc, #84]	; (80056fc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80056a6:	f000 fc9a 	bl	8005fde <USBD_GetEpDesc>
 80056aa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80056ac:	2181      	movs	r1, #129	; 0x81
 80056ae:	4813      	ldr	r0, [pc, #76]	; (80056fc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80056b0:	f000 fc95 	bl	8005fde <USBD_GetEpDesc>
 80056b4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d002      	beq.n	80056c2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	2210      	movs	r2, #16
 80056c0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d006      	beq.n	80056d6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80056c8:	693b      	ldr	r3, [r7, #16]
 80056ca:	2200      	movs	r2, #0
 80056cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80056d0:	711a      	strb	r2, [r3, #4]
 80056d2:	2200      	movs	r2, #0
 80056d4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d006      	beq.n	80056ea <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	2200      	movs	r2, #0
 80056e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80056e4:	711a      	strb	r2, [r3, #4]
 80056e6:	2200      	movs	r2, #0
 80056e8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2243      	movs	r2, #67	; 0x43
 80056ee:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80056f0:	4b02      	ldr	r3, [pc, #8]	; (80056fc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	3718      	adds	r7, #24
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bd80      	pop	{r7, pc}
 80056fa:	bf00      	nop
 80056fc:	20000050 	.word	0x20000050

08005700 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005700:	b480      	push	{r7}
 8005702:	b083      	sub	sp, #12
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	220a      	movs	r2, #10
 800570c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800570e:	4b03      	ldr	r3, [pc, #12]	; (800571c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005710:	4618      	mov	r0, r3
 8005712:	370c      	adds	r7, #12
 8005714:	46bd      	mov	sp, r7
 8005716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571a:	4770      	bx	lr
 800571c:	2000000c 	.word	0x2000000c

08005720 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005720:	b480      	push	{r7}
 8005722:	b083      	sub	sp, #12
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
 8005728:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d101      	bne.n	8005734 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005730:	2303      	movs	r3, #3
 8005732:	e009      	b.n	8005748 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800573a:	687a      	ldr	r2, [r7, #4]
 800573c:	33b0      	adds	r3, #176	; 0xb0
 800573e:	009b      	lsls	r3, r3, #2
 8005740:	4413      	add	r3, r2
 8005742:	683a      	ldr	r2, [r7, #0]
 8005744:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8005746:	2300      	movs	r3, #0
}
 8005748:	4618      	mov	r0, r3
 800574a:	370c      	adds	r7, #12
 800574c:	46bd      	mov	sp, r7
 800574e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005752:	4770      	bx	lr

08005754 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005754:	b480      	push	{r7}
 8005756:	b087      	sub	sp, #28
 8005758:	af00      	add	r7, sp, #0
 800575a:	60f8      	str	r0, [r7, #12]
 800575c:	60b9      	str	r1, [r7, #8]
 800575e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	32b0      	adds	r2, #176	; 0xb0
 800576a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800576e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8005770:	697b      	ldr	r3, [r7, #20]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d101      	bne.n	800577a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8005776:	2303      	movs	r3, #3
 8005778:	e008      	b.n	800578c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800577a:	697b      	ldr	r3, [r7, #20]
 800577c:	68ba      	ldr	r2, [r7, #8]
 800577e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	687a      	ldr	r2, [r7, #4]
 8005786:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800578a:	2300      	movs	r3, #0
}
 800578c:	4618      	mov	r0, r3
 800578e:	371c      	adds	r7, #28
 8005790:	46bd      	mov	sp, r7
 8005792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005796:	4770      	bx	lr

08005798 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005798:	b480      	push	{r7}
 800579a:	b085      	sub	sp, #20
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
 80057a0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	32b0      	adds	r2, #176	; 0xb0
 80057ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057b0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d101      	bne.n	80057bc <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80057b8:	2303      	movs	r3, #3
 80057ba:	e004      	b.n	80057c6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	683a      	ldr	r2, [r7, #0]
 80057c0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80057c4:	2300      	movs	r3, #0
}
 80057c6:	4618      	mov	r0, r3
 80057c8:	3714      	adds	r7, #20
 80057ca:	46bd      	mov	sp, r7
 80057cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d0:	4770      	bx	lr
	...

080057d4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b084      	sub	sp, #16
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	32b0      	adds	r2, #176	; 0xb0
 80057e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057ea:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	32b0      	adds	r2, #176	; 0xb0
 80057f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d101      	bne.n	8005802 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80057fe:	2303      	movs	r3, #3
 8005800:	e018      	b.n	8005834 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	7c1b      	ldrb	r3, [r3, #16]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d10a      	bne.n	8005820 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800580a:	4b0c      	ldr	r3, [pc, #48]	; (800583c <USBD_CDC_ReceivePacket+0x68>)
 800580c:	7819      	ldrb	r1, [r3, #0]
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005814:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005818:	6878      	ldr	r0, [r7, #4]
 800581a:	f004 fd43 	bl	800a2a4 <USBD_LL_PrepareReceive>
 800581e:	e008      	b.n	8005832 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005820:	4b06      	ldr	r3, [pc, #24]	; (800583c <USBD_CDC_ReceivePacket+0x68>)
 8005822:	7819      	ldrb	r1, [r3, #0]
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800582a:	2340      	movs	r3, #64	; 0x40
 800582c:	6878      	ldr	r0, [r7, #4]
 800582e:	f004 fd39 	bl	800a2a4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005832:	2300      	movs	r3, #0
}
 8005834:	4618      	mov	r0, r3
 8005836:	3710      	adds	r7, #16
 8005838:	46bd      	mov	sp, r7
 800583a:	bd80      	pop	{r7, pc}
 800583c:	20000094 	.word	0x20000094

08005840 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b086      	sub	sp, #24
 8005844:	af00      	add	r7, sp, #0
 8005846:	60f8      	str	r0, [r7, #12]
 8005848:	60b9      	str	r1, [r7, #8]
 800584a:	4613      	mov	r3, r2
 800584c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d101      	bne.n	8005858 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005854:	2303      	movs	r3, #3
 8005856:	e01f      	b.n	8005898 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	2200      	movs	r2, #0
 800585c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	2200      	movs	r2, #0
 8005864:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	2200      	movs	r2, #0
 800586c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d003      	beq.n	800587e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	68ba      	ldr	r2, [r7, #8]
 800587a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	2201      	movs	r2, #1
 8005882:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	79fa      	ldrb	r2, [r7, #7]
 800588a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800588c:	68f8      	ldr	r0, [r7, #12]
 800588e:	f004 fbb3 	bl	8009ff8 <USBD_LL_Init>
 8005892:	4603      	mov	r3, r0
 8005894:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005896:	7dfb      	ldrb	r3, [r7, #23]
}
 8005898:	4618      	mov	r0, r3
 800589a:	3718      	adds	r7, #24
 800589c:	46bd      	mov	sp, r7
 800589e:	bd80      	pop	{r7, pc}

080058a0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b084      	sub	sp, #16
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
 80058a8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80058aa:	2300      	movs	r3, #0
 80058ac:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d101      	bne.n	80058b8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80058b4:	2303      	movs	r3, #3
 80058b6:	e025      	b.n	8005904 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	683a      	ldr	r2, [r7, #0]
 80058bc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	32ae      	adds	r2, #174	; 0xae
 80058ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d00f      	beq.n	80058f4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	32ae      	adds	r2, #174	; 0xae
 80058de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058e4:	f107 020e 	add.w	r2, r7, #14
 80058e8:	4610      	mov	r0, r2
 80058ea:	4798      	blx	r3
 80058ec:	4602      	mov	r2, r0
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80058fa:	1c5a      	adds	r2, r3, #1
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8005902:	2300      	movs	r3, #0
}
 8005904:	4618      	mov	r0, r3
 8005906:	3710      	adds	r7, #16
 8005908:	46bd      	mov	sp, r7
 800590a:	bd80      	pop	{r7, pc}

0800590c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b082      	sub	sp, #8
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005914:	6878      	ldr	r0, [r7, #4]
 8005916:	f004 fbbb 	bl	800a090 <USBD_LL_Start>
 800591a:	4603      	mov	r3, r0
}
 800591c:	4618      	mov	r0, r3
 800591e:	3708      	adds	r7, #8
 8005920:	46bd      	mov	sp, r7
 8005922:	bd80      	pop	{r7, pc}

08005924 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005924:	b480      	push	{r7}
 8005926:	b083      	sub	sp, #12
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800592c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800592e:	4618      	mov	r0, r3
 8005930:	370c      	adds	r7, #12
 8005932:	46bd      	mov	sp, r7
 8005934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005938:	4770      	bx	lr

0800593a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800593a:	b580      	push	{r7, lr}
 800593c:	b084      	sub	sp, #16
 800593e:	af00      	add	r7, sp, #0
 8005940:	6078      	str	r0, [r7, #4]
 8005942:	460b      	mov	r3, r1
 8005944:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005946:	2300      	movs	r3, #0
 8005948:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005950:	2b00      	cmp	r3, #0
 8005952:	d009      	beq.n	8005968 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	78fa      	ldrb	r2, [r7, #3]
 800595e:	4611      	mov	r1, r2
 8005960:	6878      	ldr	r0, [r7, #4]
 8005962:	4798      	blx	r3
 8005964:	4603      	mov	r3, r0
 8005966:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005968:	7bfb      	ldrb	r3, [r7, #15]
}
 800596a:	4618      	mov	r0, r3
 800596c:	3710      	adds	r7, #16
 800596e:	46bd      	mov	sp, r7
 8005970:	bd80      	pop	{r7, pc}

08005972 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005972:	b580      	push	{r7, lr}
 8005974:	b084      	sub	sp, #16
 8005976:	af00      	add	r7, sp, #0
 8005978:	6078      	str	r0, [r7, #4]
 800597a:	460b      	mov	r3, r1
 800597c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800597e:	2300      	movs	r3, #0
 8005980:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	78fa      	ldrb	r2, [r7, #3]
 800598c:	4611      	mov	r1, r2
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	4798      	blx	r3
 8005992:	4603      	mov	r3, r0
 8005994:	2b00      	cmp	r3, #0
 8005996:	d001      	beq.n	800599c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005998:	2303      	movs	r3, #3
 800599a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800599c:	7bfb      	ldrb	r3, [r7, #15]
}
 800599e:	4618      	mov	r0, r3
 80059a0:	3710      	adds	r7, #16
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bd80      	pop	{r7, pc}

080059a6 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80059a6:	b580      	push	{r7, lr}
 80059a8:	b084      	sub	sp, #16
 80059aa:	af00      	add	r7, sp, #0
 80059ac:	6078      	str	r0, [r7, #4]
 80059ae:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80059b6:	6839      	ldr	r1, [r7, #0]
 80059b8:	4618      	mov	r0, r3
 80059ba:	f001 f90e 	bl	8006bda <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2201      	movs	r2, #1
 80059c2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80059cc:	461a      	mov	r2, r3
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80059da:	f003 031f 	and.w	r3, r3, #31
 80059de:	2b02      	cmp	r3, #2
 80059e0:	d01a      	beq.n	8005a18 <USBD_LL_SetupStage+0x72>
 80059e2:	2b02      	cmp	r3, #2
 80059e4:	d822      	bhi.n	8005a2c <USBD_LL_SetupStage+0x86>
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d002      	beq.n	80059f0 <USBD_LL_SetupStage+0x4a>
 80059ea:	2b01      	cmp	r3, #1
 80059ec:	d00a      	beq.n	8005a04 <USBD_LL_SetupStage+0x5e>
 80059ee:	e01d      	b.n	8005a2c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80059f6:	4619      	mov	r1, r3
 80059f8:	6878      	ldr	r0, [r7, #4]
 80059fa:	f000 fb65 	bl	80060c8 <USBD_StdDevReq>
 80059fe:	4603      	mov	r3, r0
 8005a00:	73fb      	strb	r3, [r7, #15]
      break;
 8005a02:	e020      	b.n	8005a46 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005a0a:	4619      	mov	r1, r3
 8005a0c:	6878      	ldr	r0, [r7, #4]
 8005a0e:	f000 fbcd 	bl	80061ac <USBD_StdItfReq>
 8005a12:	4603      	mov	r3, r0
 8005a14:	73fb      	strb	r3, [r7, #15]
      break;
 8005a16:	e016      	b.n	8005a46 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005a1e:	4619      	mov	r1, r3
 8005a20:	6878      	ldr	r0, [r7, #4]
 8005a22:	f000 fc2f 	bl	8006284 <USBD_StdEPReq>
 8005a26:	4603      	mov	r3, r0
 8005a28:	73fb      	strb	r3, [r7, #15]
      break;
 8005a2a:	e00c      	b.n	8005a46 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005a32:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005a36:	b2db      	uxtb	r3, r3
 8005a38:	4619      	mov	r1, r3
 8005a3a:	6878      	ldr	r0, [r7, #4]
 8005a3c:	f004 fb88 	bl	800a150 <USBD_LL_StallEP>
 8005a40:	4603      	mov	r3, r0
 8005a42:	73fb      	strb	r3, [r7, #15]
      break;
 8005a44:	bf00      	nop
  }

  return ret;
 8005a46:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a48:	4618      	mov	r0, r3
 8005a4a:	3710      	adds	r7, #16
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bd80      	pop	{r7, pc}

08005a50 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b086      	sub	sp, #24
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	60f8      	str	r0, [r7, #12]
 8005a58:	460b      	mov	r3, r1
 8005a5a:	607a      	str	r2, [r7, #4]
 8005a5c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8005a5e:	2300      	movs	r3, #0
 8005a60:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8005a62:	7afb      	ldrb	r3, [r7, #11]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d16e      	bne.n	8005b46 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005a6e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005a76:	2b03      	cmp	r3, #3
 8005a78:	f040 8098 	bne.w	8005bac <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8005a7c:	693b      	ldr	r3, [r7, #16]
 8005a7e:	689a      	ldr	r2, [r3, #8]
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	68db      	ldr	r3, [r3, #12]
 8005a84:	429a      	cmp	r2, r3
 8005a86:	d913      	bls.n	8005ab0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8005a88:	693b      	ldr	r3, [r7, #16]
 8005a8a:	689a      	ldr	r2, [r3, #8]
 8005a8c:	693b      	ldr	r3, [r7, #16]
 8005a8e:	68db      	ldr	r3, [r3, #12]
 8005a90:	1ad2      	subs	r2, r2, r3
 8005a92:	693b      	ldr	r3, [r7, #16]
 8005a94:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005a96:	693b      	ldr	r3, [r7, #16]
 8005a98:	68da      	ldr	r2, [r3, #12]
 8005a9a:	693b      	ldr	r3, [r7, #16]
 8005a9c:	689b      	ldr	r3, [r3, #8]
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	bf28      	it	cs
 8005aa2:	4613      	movcs	r3, r2
 8005aa4:	461a      	mov	r2, r3
 8005aa6:	6879      	ldr	r1, [r7, #4]
 8005aa8:	68f8      	ldr	r0, [r7, #12]
 8005aaa:	f001 f98a 	bl	8006dc2 <USBD_CtlContinueRx>
 8005aae:	e07d      	b.n	8005bac <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005ab6:	f003 031f 	and.w	r3, r3, #31
 8005aba:	2b02      	cmp	r3, #2
 8005abc:	d014      	beq.n	8005ae8 <USBD_LL_DataOutStage+0x98>
 8005abe:	2b02      	cmp	r3, #2
 8005ac0:	d81d      	bhi.n	8005afe <USBD_LL_DataOutStage+0xae>
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d002      	beq.n	8005acc <USBD_LL_DataOutStage+0x7c>
 8005ac6:	2b01      	cmp	r3, #1
 8005ac8:	d003      	beq.n	8005ad2 <USBD_LL_DataOutStage+0x82>
 8005aca:	e018      	b.n	8005afe <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005acc:	2300      	movs	r3, #0
 8005ace:	75bb      	strb	r3, [r7, #22]
            break;
 8005ad0:	e018      	b.n	8005b04 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005ad8:	b2db      	uxtb	r3, r3
 8005ada:	4619      	mov	r1, r3
 8005adc:	68f8      	ldr	r0, [r7, #12]
 8005ade:	f000 fa64 	bl	8005faa <USBD_CoreFindIF>
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	75bb      	strb	r3, [r7, #22]
            break;
 8005ae6:	e00d      	b.n	8005b04 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005aee:	b2db      	uxtb	r3, r3
 8005af0:	4619      	mov	r1, r3
 8005af2:	68f8      	ldr	r0, [r7, #12]
 8005af4:	f000 fa66 	bl	8005fc4 <USBD_CoreFindEP>
 8005af8:	4603      	mov	r3, r0
 8005afa:	75bb      	strb	r3, [r7, #22]
            break;
 8005afc:	e002      	b.n	8005b04 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8005afe:	2300      	movs	r3, #0
 8005b00:	75bb      	strb	r3, [r7, #22]
            break;
 8005b02:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8005b04:	7dbb      	ldrb	r3, [r7, #22]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d119      	bne.n	8005b3e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b10:	b2db      	uxtb	r3, r3
 8005b12:	2b03      	cmp	r3, #3
 8005b14:	d113      	bne.n	8005b3e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8005b16:	7dba      	ldrb	r2, [r7, #22]
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	32ae      	adds	r2, #174	; 0xae
 8005b1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b20:	691b      	ldr	r3, [r3, #16]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d00b      	beq.n	8005b3e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8005b26:	7dba      	ldrb	r2, [r7, #22]
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8005b2e:	7dba      	ldrb	r2, [r7, #22]
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	32ae      	adds	r2, #174	; 0xae
 8005b34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b38:	691b      	ldr	r3, [r3, #16]
 8005b3a:	68f8      	ldr	r0, [r7, #12]
 8005b3c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005b3e:	68f8      	ldr	r0, [r7, #12]
 8005b40:	f001 f950 	bl	8006de4 <USBD_CtlSendStatus>
 8005b44:	e032      	b.n	8005bac <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8005b46:	7afb      	ldrb	r3, [r7, #11]
 8005b48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b4c:	b2db      	uxtb	r3, r3
 8005b4e:	4619      	mov	r1, r3
 8005b50:	68f8      	ldr	r0, [r7, #12]
 8005b52:	f000 fa37 	bl	8005fc4 <USBD_CoreFindEP>
 8005b56:	4603      	mov	r3, r0
 8005b58:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005b5a:	7dbb      	ldrb	r3, [r7, #22]
 8005b5c:	2bff      	cmp	r3, #255	; 0xff
 8005b5e:	d025      	beq.n	8005bac <USBD_LL_DataOutStage+0x15c>
 8005b60:	7dbb      	ldrb	r3, [r7, #22]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d122      	bne.n	8005bac <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b6c:	b2db      	uxtb	r3, r3
 8005b6e:	2b03      	cmp	r3, #3
 8005b70:	d117      	bne.n	8005ba2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8005b72:	7dba      	ldrb	r2, [r7, #22]
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	32ae      	adds	r2, #174	; 0xae
 8005b78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b7c:	699b      	ldr	r3, [r3, #24]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d00f      	beq.n	8005ba2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8005b82:	7dba      	ldrb	r2, [r7, #22]
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8005b8a:	7dba      	ldrb	r2, [r7, #22]
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	32ae      	adds	r2, #174	; 0xae
 8005b90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b94:	699b      	ldr	r3, [r3, #24]
 8005b96:	7afa      	ldrb	r2, [r7, #11]
 8005b98:	4611      	mov	r1, r2
 8005b9a:	68f8      	ldr	r0, [r7, #12]
 8005b9c:	4798      	blx	r3
 8005b9e:	4603      	mov	r3, r0
 8005ba0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8005ba2:	7dfb      	ldrb	r3, [r7, #23]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d001      	beq.n	8005bac <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8005ba8:	7dfb      	ldrb	r3, [r7, #23]
 8005baa:	e000      	b.n	8005bae <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8005bac:	2300      	movs	r3, #0
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	3718      	adds	r7, #24
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bd80      	pop	{r7, pc}

08005bb6 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005bb6:	b580      	push	{r7, lr}
 8005bb8:	b086      	sub	sp, #24
 8005bba:	af00      	add	r7, sp, #0
 8005bbc:	60f8      	str	r0, [r7, #12]
 8005bbe:	460b      	mov	r3, r1
 8005bc0:	607a      	str	r2, [r7, #4]
 8005bc2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8005bc4:	7afb      	ldrb	r3, [r7, #11]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d16f      	bne.n	8005caa <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	3314      	adds	r3, #20
 8005bce:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005bd6:	2b02      	cmp	r3, #2
 8005bd8:	d15a      	bne.n	8005c90 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	689a      	ldr	r2, [r3, #8]
 8005bde:	693b      	ldr	r3, [r7, #16]
 8005be0:	68db      	ldr	r3, [r3, #12]
 8005be2:	429a      	cmp	r2, r3
 8005be4:	d914      	bls.n	8005c10 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005be6:	693b      	ldr	r3, [r7, #16]
 8005be8:	689a      	ldr	r2, [r3, #8]
 8005bea:	693b      	ldr	r3, [r7, #16]
 8005bec:	68db      	ldr	r3, [r3, #12]
 8005bee:	1ad2      	subs	r2, r2, r3
 8005bf0:	693b      	ldr	r3, [r7, #16]
 8005bf2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005bf4:	693b      	ldr	r3, [r7, #16]
 8005bf6:	689b      	ldr	r3, [r3, #8]
 8005bf8:	461a      	mov	r2, r3
 8005bfa:	6879      	ldr	r1, [r7, #4]
 8005bfc:	68f8      	ldr	r0, [r7, #12]
 8005bfe:	f001 f8b2 	bl	8006d66 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005c02:	2300      	movs	r3, #0
 8005c04:	2200      	movs	r2, #0
 8005c06:	2100      	movs	r1, #0
 8005c08:	68f8      	ldr	r0, [r7, #12]
 8005c0a:	f004 fb4b 	bl	800a2a4 <USBD_LL_PrepareReceive>
 8005c0e:	e03f      	b.n	8005c90 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	68da      	ldr	r2, [r3, #12]
 8005c14:	693b      	ldr	r3, [r7, #16]
 8005c16:	689b      	ldr	r3, [r3, #8]
 8005c18:	429a      	cmp	r2, r3
 8005c1a:	d11c      	bne.n	8005c56 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005c1c:	693b      	ldr	r3, [r7, #16]
 8005c1e:	685a      	ldr	r2, [r3, #4]
 8005c20:	693b      	ldr	r3, [r7, #16]
 8005c22:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005c24:	429a      	cmp	r2, r3
 8005c26:	d316      	bcc.n	8005c56 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005c28:	693b      	ldr	r3, [r7, #16]
 8005c2a:	685a      	ldr	r2, [r3, #4]
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005c32:	429a      	cmp	r2, r3
 8005c34:	d20f      	bcs.n	8005c56 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005c36:	2200      	movs	r2, #0
 8005c38:	2100      	movs	r1, #0
 8005c3a:	68f8      	ldr	r0, [r7, #12]
 8005c3c:	f001 f893 	bl	8006d66 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	2200      	movs	r2, #0
 8005c44:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005c48:	2300      	movs	r3, #0
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	2100      	movs	r1, #0
 8005c4e:	68f8      	ldr	r0, [r7, #12]
 8005c50:	f004 fb28 	bl	800a2a4 <USBD_LL_PrepareReceive>
 8005c54:	e01c      	b.n	8005c90 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c5c:	b2db      	uxtb	r3, r3
 8005c5e:	2b03      	cmp	r3, #3
 8005c60:	d10f      	bne.n	8005c82 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c68:	68db      	ldr	r3, [r3, #12]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d009      	beq.n	8005c82 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	2200      	movs	r2, #0
 8005c72:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c7c:	68db      	ldr	r3, [r3, #12]
 8005c7e:	68f8      	ldr	r0, [r7, #12]
 8005c80:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005c82:	2180      	movs	r1, #128	; 0x80
 8005c84:	68f8      	ldr	r0, [r7, #12]
 8005c86:	f004 fa63 	bl	800a150 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005c8a:	68f8      	ldr	r0, [r7, #12]
 8005c8c:	f001 f8bd 	bl	8006e0a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d03a      	beq.n	8005d10 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8005c9a:	68f8      	ldr	r0, [r7, #12]
 8005c9c:	f7ff fe42 	bl	8005924 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005ca8:	e032      	b.n	8005d10 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8005caa:	7afb      	ldrb	r3, [r7, #11]
 8005cac:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005cb0:	b2db      	uxtb	r3, r3
 8005cb2:	4619      	mov	r1, r3
 8005cb4:	68f8      	ldr	r0, [r7, #12]
 8005cb6:	f000 f985 	bl	8005fc4 <USBD_CoreFindEP>
 8005cba:	4603      	mov	r3, r0
 8005cbc:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005cbe:	7dfb      	ldrb	r3, [r7, #23]
 8005cc0:	2bff      	cmp	r3, #255	; 0xff
 8005cc2:	d025      	beq.n	8005d10 <USBD_LL_DataInStage+0x15a>
 8005cc4:	7dfb      	ldrb	r3, [r7, #23]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d122      	bne.n	8005d10 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005cd0:	b2db      	uxtb	r3, r3
 8005cd2:	2b03      	cmp	r3, #3
 8005cd4:	d11c      	bne.n	8005d10 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8005cd6:	7dfa      	ldrb	r2, [r7, #23]
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	32ae      	adds	r2, #174	; 0xae
 8005cdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ce0:	695b      	ldr	r3, [r3, #20]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d014      	beq.n	8005d10 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8005ce6:	7dfa      	ldrb	r2, [r7, #23]
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8005cee:	7dfa      	ldrb	r2, [r7, #23]
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	32ae      	adds	r2, #174	; 0xae
 8005cf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cf8:	695b      	ldr	r3, [r3, #20]
 8005cfa:	7afa      	ldrb	r2, [r7, #11]
 8005cfc:	4611      	mov	r1, r2
 8005cfe:	68f8      	ldr	r0, [r7, #12]
 8005d00:	4798      	blx	r3
 8005d02:	4603      	mov	r3, r0
 8005d04:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8005d06:	7dbb      	ldrb	r3, [r7, #22]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d001      	beq.n	8005d10 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8005d0c:	7dbb      	ldrb	r3, [r7, #22]
 8005d0e:	e000      	b.n	8005d12 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8005d10:	2300      	movs	r3, #0
}
 8005d12:	4618      	mov	r0, r3
 8005d14:	3718      	adds	r7, #24
 8005d16:	46bd      	mov	sp, r7
 8005d18:	bd80      	pop	{r7, pc}

08005d1a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005d1a:	b580      	push	{r7, lr}
 8005d1c:	b084      	sub	sp, #16
 8005d1e:	af00      	add	r7, sp, #0
 8005d20:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8005d22:	2300      	movs	r3, #0
 8005d24:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2201      	movs	r2, #1
 8005d2a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2200      	movs	r2, #0
 8005d32:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2200      	movs	r2, #0
 8005d48:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d014      	beq.n	8005d80 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d5c:	685b      	ldr	r3, [r3, #4]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d00e      	beq.n	8005d80 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d68:	685b      	ldr	r3, [r3, #4]
 8005d6a:	687a      	ldr	r2, [r7, #4]
 8005d6c:	6852      	ldr	r2, [r2, #4]
 8005d6e:	b2d2      	uxtb	r2, r2
 8005d70:	4611      	mov	r1, r2
 8005d72:	6878      	ldr	r0, [r7, #4]
 8005d74:	4798      	blx	r3
 8005d76:	4603      	mov	r3, r0
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d001      	beq.n	8005d80 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8005d7c:	2303      	movs	r3, #3
 8005d7e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005d80:	2340      	movs	r3, #64	; 0x40
 8005d82:	2200      	movs	r2, #0
 8005d84:	2100      	movs	r1, #0
 8005d86:	6878      	ldr	r0, [r7, #4]
 8005d88:	f004 f99d 	bl	800a0c6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2201      	movs	r2, #1
 8005d90:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2240      	movs	r2, #64	; 0x40
 8005d98:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005d9c:	2340      	movs	r3, #64	; 0x40
 8005d9e:	2200      	movs	r2, #0
 8005da0:	2180      	movs	r1, #128	; 0x80
 8005da2:	6878      	ldr	r0, [r7, #4]
 8005da4:	f004 f98f 	bl	800a0c6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2201      	movs	r2, #1
 8005dac:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2240      	movs	r2, #64	; 0x40
 8005db2:	621a      	str	r2, [r3, #32]

  return ret;
 8005db4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005db6:	4618      	mov	r0, r3
 8005db8:	3710      	adds	r7, #16
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	bd80      	pop	{r7, pc}

08005dbe <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005dbe:	b480      	push	{r7}
 8005dc0:	b083      	sub	sp, #12
 8005dc2:	af00      	add	r7, sp, #0
 8005dc4:	6078      	str	r0, [r7, #4]
 8005dc6:	460b      	mov	r3, r1
 8005dc8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	78fa      	ldrb	r2, [r7, #3]
 8005dce:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005dd0:	2300      	movs	r3, #0
}
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	370c      	adds	r7, #12
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ddc:	4770      	bx	lr

08005dde <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005dde:	b480      	push	{r7}
 8005de0:	b083      	sub	sp, #12
 8005de2:	af00      	add	r7, sp, #0
 8005de4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005dec:	b2db      	uxtb	r3, r3
 8005dee:	2b04      	cmp	r3, #4
 8005df0:	d006      	beq.n	8005e00 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005df8:	b2da      	uxtb	r2, r3
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2204      	movs	r2, #4
 8005e04:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005e08:	2300      	movs	r3, #0
}
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	370c      	adds	r7, #12
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e14:	4770      	bx	lr

08005e16 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005e16:	b480      	push	{r7}
 8005e18:	b083      	sub	sp, #12
 8005e1a:	af00      	add	r7, sp, #0
 8005e1c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e24:	b2db      	uxtb	r3, r3
 8005e26:	2b04      	cmp	r3, #4
 8005e28:	d106      	bne.n	8005e38 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8005e30:	b2da      	uxtb	r2, r3
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005e38:	2300      	movs	r3, #0
}
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	370c      	adds	r7, #12
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e44:	4770      	bx	lr

08005e46 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005e46:	b580      	push	{r7, lr}
 8005e48:	b082      	sub	sp, #8
 8005e4a:	af00      	add	r7, sp, #0
 8005e4c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e54:	b2db      	uxtb	r3, r3
 8005e56:	2b03      	cmp	r3, #3
 8005e58:	d110      	bne.n	8005e7c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d00b      	beq.n	8005e7c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e6a:	69db      	ldr	r3, [r3, #28]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d005      	beq.n	8005e7c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e76:	69db      	ldr	r3, [r3, #28]
 8005e78:	6878      	ldr	r0, [r7, #4]
 8005e7a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8005e7c:	2300      	movs	r3, #0
}
 8005e7e:	4618      	mov	r0, r3
 8005e80:	3708      	adds	r7, #8
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bd80      	pop	{r7, pc}

08005e86 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005e86:	b580      	push	{r7, lr}
 8005e88:	b082      	sub	sp, #8
 8005e8a:	af00      	add	r7, sp, #0
 8005e8c:	6078      	str	r0, [r7, #4]
 8005e8e:	460b      	mov	r3, r1
 8005e90:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	32ae      	adds	r2, #174	; 0xae
 8005e9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d101      	bne.n	8005ea8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8005ea4:	2303      	movs	r3, #3
 8005ea6:	e01c      	b.n	8005ee2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005eae:	b2db      	uxtb	r3, r3
 8005eb0:	2b03      	cmp	r3, #3
 8005eb2:	d115      	bne.n	8005ee0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	32ae      	adds	r2, #174	; 0xae
 8005ebe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ec2:	6a1b      	ldr	r3, [r3, #32]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d00b      	beq.n	8005ee0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	32ae      	adds	r2, #174	; 0xae
 8005ed2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ed6:	6a1b      	ldr	r3, [r3, #32]
 8005ed8:	78fa      	ldrb	r2, [r7, #3]
 8005eda:	4611      	mov	r1, r2
 8005edc:	6878      	ldr	r0, [r7, #4]
 8005ede:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005ee0:	2300      	movs	r3, #0
}
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	3708      	adds	r7, #8
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bd80      	pop	{r7, pc}

08005eea <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005eea:	b580      	push	{r7, lr}
 8005eec:	b082      	sub	sp, #8
 8005eee:	af00      	add	r7, sp, #0
 8005ef0:	6078      	str	r0, [r7, #4]
 8005ef2:	460b      	mov	r3, r1
 8005ef4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	32ae      	adds	r2, #174	; 0xae
 8005f00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d101      	bne.n	8005f0c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8005f08:	2303      	movs	r3, #3
 8005f0a:	e01c      	b.n	8005f46 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f12:	b2db      	uxtb	r3, r3
 8005f14:	2b03      	cmp	r3, #3
 8005f16:	d115      	bne.n	8005f44 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	32ae      	adds	r2, #174	; 0xae
 8005f22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d00b      	beq.n	8005f44 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	32ae      	adds	r2, #174	; 0xae
 8005f36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f3c:	78fa      	ldrb	r2, [r7, #3]
 8005f3e:	4611      	mov	r1, r2
 8005f40:	6878      	ldr	r0, [r7, #4]
 8005f42:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005f44:	2300      	movs	r3, #0
}
 8005f46:	4618      	mov	r0, r3
 8005f48:	3708      	adds	r7, #8
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bd80      	pop	{r7, pc}

08005f4e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005f4e:	b480      	push	{r7}
 8005f50:	b083      	sub	sp, #12
 8005f52:	af00      	add	r7, sp, #0
 8005f54:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005f56:	2300      	movs	r3, #0
}
 8005f58:	4618      	mov	r0, r3
 8005f5a:	370c      	adds	r7, #12
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f62:	4770      	bx	lr

08005f64 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b084      	sub	sp, #16
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2201      	movs	r2, #1
 8005f74:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d00e      	beq.n	8005fa0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f88:	685b      	ldr	r3, [r3, #4]
 8005f8a:	687a      	ldr	r2, [r7, #4]
 8005f8c:	6852      	ldr	r2, [r2, #4]
 8005f8e:	b2d2      	uxtb	r2, r2
 8005f90:	4611      	mov	r1, r2
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	4798      	blx	r3
 8005f96:	4603      	mov	r3, r0
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d001      	beq.n	8005fa0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8005f9c:	2303      	movs	r3, #3
 8005f9e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005fa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	3710      	adds	r7, #16
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bd80      	pop	{r7, pc}

08005faa <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005faa:	b480      	push	{r7}
 8005fac:	b083      	sub	sp, #12
 8005fae:	af00      	add	r7, sp, #0
 8005fb0:	6078      	str	r0, [r7, #4]
 8005fb2:	460b      	mov	r3, r1
 8005fb4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005fb6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005fb8:	4618      	mov	r0, r3
 8005fba:	370c      	adds	r7, #12
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc2:	4770      	bx	lr

08005fc4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b083      	sub	sp, #12
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
 8005fcc:	460b      	mov	r3, r1
 8005fce:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005fd0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	370c      	adds	r7, #12
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fdc:	4770      	bx	lr

08005fde <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8005fde:	b580      	push	{r7, lr}
 8005fe0:	b086      	sub	sp, #24
 8005fe2:	af00      	add	r7, sp, #0
 8005fe4:	6078      	str	r0, [r7, #4]
 8005fe6:	460b      	mov	r3, r1
 8005fe8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	885b      	ldrh	r3, [r3, #2]
 8005ffa:	b29a      	uxth	r2, r3
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	781b      	ldrb	r3, [r3, #0]
 8006000:	b29b      	uxth	r3, r3
 8006002:	429a      	cmp	r2, r3
 8006004:	d920      	bls.n	8006048 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	781b      	ldrb	r3, [r3, #0]
 800600a:	b29b      	uxth	r3, r3
 800600c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800600e:	e013      	b.n	8006038 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006010:	f107 030a 	add.w	r3, r7, #10
 8006014:	4619      	mov	r1, r3
 8006016:	6978      	ldr	r0, [r7, #20]
 8006018:	f000 f81b 	bl	8006052 <USBD_GetNextDesc>
 800601c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800601e:	697b      	ldr	r3, [r7, #20]
 8006020:	785b      	ldrb	r3, [r3, #1]
 8006022:	2b05      	cmp	r3, #5
 8006024:	d108      	bne.n	8006038 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006026:	697b      	ldr	r3, [r7, #20]
 8006028:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800602a:	693b      	ldr	r3, [r7, #16]
 800602c:	789b      	ldrb	r3, [r3, #2]
 800602e:	78fa      	ldrb	r2, [r7, #3]
 8006030:	429a      	cmp	r2, r3
 8006032:	d008      	beq.n	8006046 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006034:	2300      	movs	r3, #0
 8006036:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	885b      	ldrh	r3, [r3, #2]
 800603c:	b29a      	uxth	r2, r3
 800603e:	897b      	ldrh	r3, [r7, #10]
 8006040:	429a      	cmp	r2, r3
 8006042:	d8e5      	bhi.n	8006010 <USBD_GetEpDesc+0x32>
 8006044:	e000      	b.n	8006048 <USBD_GetEpDesc+0x6a>
          break;
 8006046:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006048:	693b      	ldr	r3, [r7, #16]
}
 800604a:	4618      	mov	r0, r3
 800604c:	3718      	adds	r7, #24
 800604e:	46bd      	mov	sp, r7
 8006050:	bd80      	pop	{r7, pc}

08006052 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006052:	b480      	push	{r7}
 8006054:	b085      	sub	sp, #20
 8006056:	af00      	add	r7, sp, #0
 8006058:	6078      	str	r0, [r7, #4]
 800605a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	881a      	ldrh	r2, [r3, #0]
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	781b      	ldrb	r3, [r3, #0]
 8006068:	b29b      	uxth	r3, r3
 800606a:	4413      	add	r3, r2
 800606c:	b29a      	uxth	r2, r3
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	781b      	ldrb	r3, [r3, #0]
 8006076:	461a      	mov	r2, r3
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	4413      	add	r3, r2
 800607c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800607e:	68fb      	ldr	r3, [r7, #12]
}
 8006080:	4618      	mov	r0, r3
 8006082:	3714      	adds	r7, #20
 8006084:	46bd      	mov	sp, r7
 8006086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608a:	4770      	bx	lr

0800608c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800608c:	b480      	push	{r7}
 800608e:	b087      	sub	sp, #28
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006098:	697b      	ldr	r3, [r7, #20]
 800609a:	781b      	ldrb	r3, [r3, #0]
 800609c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800609e:	697b      	ldr	r3, [r7, #20]
 80060a0:	3301      	adds	r3, #1
 80060a2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80060a4:	697b      	ldr	r3, [r7, #20]
 80060a6:	781b      	ldrb	r3, [r3, #0]
 80060a8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80060aa:	8a3b      	ldrh	r3, [r7, #16]
 80060ac:	021b      	lsls	r3, r3, #8
 80060ae:	b21a      	sxth	r2, r3
 80060b0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80060b4:	4313      	orrs	r3, r2
 80060b6:	b21b      	sxth	r3, r3
 80060b8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80060ba:	89fb      	ldrh	r3, [r7, #14]
}
 80060bc:	4618      	mov	r0, r3
 80060be:	371c      	adds	r7, #28
 80060c0:	46bd      	mov	sp, r7
 80060c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c6:	4770      	bx	lr

080060c8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b084      	sub	sp, #16
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
 80060d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80060d2:	2300      	movs	r3, #0
 80060d4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	781b      	ldrb	r3, [r3, #0]
 80060da:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80060de:	2b40      	cmp	r3, #64	; 0x40
 80060e0:	d005      	beq.n	80060ee <USBD_StdDevReq+0x26>
 80060e2:	2b40      	cmp	r3, #64	; 0x40
 80060e4:	d857      	bhi.n	8006196 <USBD_StdDevReq+0xce>
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d00f      	beq.n	800610a <USBD_StdDevReq+0x42>
 80060ea:	2b20      	cmp	r3, #32
 80060ec:	d153      	bne.n	8006196 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	32ae      	adds	r2, #174	; 0xae
 80060f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060fc:	689b      	ldr	r3, [r3, #8]
 80060fe:	6839      	ldr	r1, [r7, #0]
 8006100:	6878      	ldr	r0, [r7, #4]
 8006102:	4798      	blx	r3
 8006104:	4603      	mov	r3, r0
 8006106:	73fb      	strb	r3, [r7, #15]
      break;
 8006108:	e04a      	b.n	80061a0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	785b      	ldrb	r3, [r3, #1]
 800610e:	2b09      	cmp	r3, #9
 8006110:	d83b      	bhi.n	800618a <USBD_StdDevReq+0xc2>
 8006112:	a201      	add	r2, pc, #4	; (adr r2, 8006118 <USBD_StdDevReq+0x50>)
 8006114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006118:	0800616d 	.word	0x0800616d
 800611c:	08006181 	.word	0x08006181
 8006120:	0800618b 	.word	0x0800618b
 8006124:	08006177 	.word	0x08006177
 8006128:	0800618b 	.word	0x0800618b
 800612c:	0800614b 	.word	0x0800614b
 8006130:	08006141 	.word	0x08006141
 8006134:	0800618b 	.word	0x0800618b
 8006138:	08006163 	.word	0x08006163
 800613c:	08006155 	.word	0x08006155
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006140:	6839      	ldr	r1, [r7, #0]
 8006142:	6878      	ldr	r0, [r7, #4]
 8006144:	f000 fa3c 	bl	80065c0 <USBD_GetDescriptor>
          break;
 8006148:	e024      	b.n	8006194 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800614a:	6839      	ldr	r1, [r7, #0]
 800614c:	6878      	ldr	r0, [r7, #4]
 800614e:	f000 fba1 	bl	8006894 <USBD_SetAddress>
          break;
 8006152:	e01f      	b.n	8006194 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006154:	6839      	ldr	r1, [r7, #0]
 8006156:	6878      	ldr	r0, [r7, #4]
 8006158:	f000 fbe0 	bl	800691c <USBD_SetConfig>
 800615c:	4603      	mov	r3, r0
 800615e:	73fb      	strb	r3, [r7, #15]
          break;
 8006160:	e018      	b.n	8006194 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006162:	6839      	ldr	r1, [r7, #0]
 8006164:	6878      	ldr	r0, [r7, #4]
 8006166:	f000 fc83 	bl	8006a70 <USBD_GetConfig>
          break;
 800616a:	e013      	b.n	8006194 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800616c:	6839      	ldr	r1, [r7, #0]
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	f000 fcb4 	bl	8006adc <USBD_GetStatus>
          break;
 8006174:	e00e      	b.n	8006194 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006176:	6839      	ldr	r1, [r7, #0]
 8006178:	6878      	ldr	r0, [r7, #4]
 800617a:	f000 fce3 	bl	8006b44 <USBD_SetFeature>
          break;
 800617e:	e009      	b.n	8006194 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006180:	6839      	ldr	r1, [r7, #0]
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f000 fd07 	bl	8006b96 <USBD_ClrFeature>
          break;
 8006188:	e004      	b.n	8006194 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800618a:	6839      	ldr	r1, [r7, #0]
 800618c:	6878      	ldr	r0, [r7, #4]
 800618e:	f000 fd5e 	bl	8006c4e <USBD_CtlError>
          break;
 8006192:	bf00      	nop
      }
      break;
 8006194:	e004      	b.n	80061a0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8006196:	6839      	ldr	r1, [r7, #0]
 8006198:	6878      	ldr	r0, [r7, #4]
 800619a:	f000 fd58 	bl	8006c4e <USBD_CtlError>
      break;
 800619e:	bf00      	nop
  }

  return ret;
 80061a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80061a2:	4618      	mov	r0, r3
 80061a4:	3710      	adds	r7, #16
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bd80      	pop	{r7, pc}
 80061aa:	bf00      	nop

080061ac <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b084      	sub	sp, #16
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
 80061b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80061b6:	2300      	movs	r3, #0
 80061b8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	781b      	ldrb	r3, [r3, #0]
 80061be:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80061c2:	2b40      	cmp	r3, #64	; 0x40
 80061c4:	d005      	beq.n	80061d2 <USBD_StdItfReq+0x26>
 80061c6:	2b40      	cmp	r3, #64	; 0x40
 80061c8:	d852      	bhi.n	8006270 <USBD_StdItfReq+0xc4>
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d001      	beq.n	80061d2 <USBD_StdItfReq+0x26>
 80061ce:	2b20      	cmp	r3, #32
 80061d0:	d14e      	bne.n	8006270 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061d8:	b2db      	uxtb	r3, r3
 80061da:	3b01      	subs	r3, #1
 80061dc:	2b02      	cmp	r3, #2
 80061de:	d840      	bhi.n	8006262 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	889b      	ldrh	r3, [r3, #4]
 80061e4:	b2db      	uxtb	r3, r3
 80061e6:	2b01      	cmp	r3, #1
 80061e8:	d836      	bhi.n	8006258 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	889b      	ldrh	r3, [r3, #4]
 80061ee:	b2db      	uxtb	r3, r3
 80061f0:	4619      	mov	r1, r3
 80061f2:	6878      	ldr	r0, [r7, #4]
 80061f4:	f7ff fed9 	bl	8005faa <USBD_CoreFindIF>
 80061f8:	4603      	mov	r3, r0
 80061fa:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80061fc:	7bbb      	ldrb	r3, [r7, #14]
 80061fe:	2bff      	cmp	r3, #255	; 0xff
 8006200:	d01d      	beq.n	800623e <USBD_StdItfReq+0x92>
 8006202:	7bbb      	ldrb	r3, [r7, #14]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d11a      	bne.n	800623e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006208:	7bba      	ldrb	r2, [r7, #14]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	32ae      	adds	r2, #174	; 0xae
 800620e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006212:	689b      	ldr	r3, [r3, #8]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d00f      	beq.n	8006238 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006218:	7bba      	ldrb	r2, [r7, #14]
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006220:	7bba      	ldrb	r2, [r7, #14]
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	32ae      	adds	r2, #174	; 0xae
 8006226:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800622a:	689b      	ldr	r3, [r3, #8]
 800622c:	6839      	ldr	r1, [r7, #0]
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	4798      	blx	r3
 8006232:	4603      	mov	r3, r0
 8006234:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006236:	e004      	b.n	8006242 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006238:	2303      	movs	r3, #3
 800623a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800623c:	e001      	b.n	8006242 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800623e:	2303      	movs	r3, #3
 8006240:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	88db      	ldrh	r3, [r3, #6]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d110      	bne.n	800626c <USBD_StdItfReq+0xc0>
 800624a:	7bfb      	ldrb	r3, [r7, #15]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d10d      	bne.n	800626c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006250:	6878      	ldr	r0, [r7, #4]
 8006252:	f000 fdc7 	bl	8006de4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006256:	e009      	b.n	800626c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006258:	6839      	ldr	r1, [r7, #0]
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f000 fcf7 	bl	8006c4e <USBD_CtlError>
          break;
 8006260:	e004      	b.n	800626c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006262:	6839      	ldr	r1, [r7, #0]
 8006264:	6878      	ldr	r0, [r7, #4]
 8006266:	f000 fcf2 	bl	8006c4e <USBD_CtlError>
          break;
 800626a:	e000      	b.n	800626e <USBD_StdItfReq+0xc2>
          break;
 800626c:	bf00      	nop
      }
      break;
 800626e:	e004      	b.n	800627a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006270:	6839      	ldr	r1, [r7, #0]
 8006272:	6878      	ldr	r0, [r7, #4]
 8006274:	f000 fceb 	bl	8006c4e <USBD_CtlError>
      break;
 8006278:	bf00      	nop
  }

  return ret;
 800627a:	7bfb      	ldrb	r3, [r7, #15]
}
 800627c:	4618      	mov	r0, r3
 800627e:	3710      	adds	r7, #16
 8006280:	46bd      	mov	sp, r7
 8006282:	bd80      	pop	{r7, pc}

08006284 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b084      	sub	sp, #16
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
 800628c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800628e:	2300      	movs	r3, #0
 8006290:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	889b      	ldrh	r3, [r3, #4]
 8006296:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	781b      	ldrb	r3, [r3, #0]
 800629c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80062a0:	2b40      	cmp	r3, #64	; 0x40
 80062a2:	d007      	beq.n	80062b4 <USBD_StdEPReq+0x30>
 80062a4:	2b40      	cmp	r3, #64	; 0x40
 80062a6:	f200 817f 	bhi.w	80065a8 <USBD_StdEPReq+0x324>
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d02a      	beq.n	8006304 <USBD_StdEPReq+0x80>
 80062ae:	2b20      	cmp	r3, #32
 80062b0:	f040 817a 	bne.w	80065a8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80062b4:	7bbb      	ldrb	r3, [r7, #14]
 80062b6:	4619      	mov	r1, r3
 80062b8:	6878      	ldr	r0, [r7, #4]
 80062ba:	f7ff fe83 	bl	8005fc4 <USBD_CoreFindEP>
 80062be:	4603      	mov	r3, r0
 80062c0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80062c2:	7b7b      	ldrb	r3, [r7, #13]
 80062c4:	2bff      	cmp	r3, #255	; 0xff
 80062c6:	f000 8174 	beq.w	80065b2 <USBD_StdEPReq+0x32e>
 80062ca:	7b7b      	ldrb	r3, [r7, #13]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	f040 8170 	bne.w	80065b2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80062d2:	7b7a      	ldrb	r2, [r7, #13]
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80062da:	7b7a      	ldrb	r2, [r7, #13]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	32ae      	adds	r2, #174	; 0xae
 80062e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062e4:	689b      	ldr	r3, [r3, #8]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	f000 8163 	beq.w	80065b2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80062ec:	7b7a      	ldrb	r2, [r7, #13]
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	32ae      	adds	r2, #174	; 0xae
 80062f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062f6:	689b      	ldr	r3, [r3, #8]
 80062f8:	6839      	ldr	r1, [r7, #0]
 80062fa:	6878      	ldr	r0, [r7, #4]
 80062fc:	4798      	blx	r3
 80062fe:	4603      	mov	r3, r0
 8006300:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006302:	e156      	b.n	80065b2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	785b      	ldrb	r3, [r3, #1]
 8006308:	2b03      	cmp	r3, #3
 800630a:	d008      	beq.n	800631e <USBD_StdEPReq+0x9a>
 800630c:	2b03      	cmp	r3, #3
 800630e:	f300 8145 	bgt.w	800659c <USBD_StdEPReq+0x318>
 8006312:	2b00      	cmp	r3, #0
 8006314:	f000 809b 	beq.w	800644e <USBD_StdEPReq+0x1ca>
 8006318:	2b01      	cmp	r3, #1
 800631a:	d03c      	beq.n	8006396 <USBD_StdEPReq+0x112>
 800631c:	e13e      	b.n	800659c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006324:	b2db      	uxtb	r3, r3
 8006326:	2b02      	cmp	r3, #2
 8006328:	d002      	beq.n	8006330 <USBD_StdEPReq+0xac>
 800632a:	2b03      	cmp	r3, #3
 800632c:	d016      	beq.n	800635c <USBD_StdEPReq+0xd8>
 800632e:	e02c      	b.n	800638a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006330:	7bbb      	ldrb	r3, [r7, #14]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d00d      	beq.n	8006352 <USBD_StdEPReq+0xce>
 8006336:	7bbb      	ldrb	r3, [r7, #14]
 8006338:	2b80      	cmp	r3, #128	; 0x80
 800633a:	d00a      	beq.n	8006352 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800633c:	7bbb      	ldrb	r3, [r7, #14]
 800633e:	4619      	mov	r1, r3
 8006340:	6878      	ldr	r0, [r7, #4]
 8006342:	f003 ff05 	bl	800a150 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006346:	2180      	movs	r1, #128	; 0x80
 8006348:	6878      	ldr	r0, [r7, #4]
 800634a:	f003 ff01 	bl	800a150 <USBD_LL_StallEP>
 800634e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006350:	e020      	b.n	8006394 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8006352:	6839      	ldr	r1, [r7, #0]
 8006354:	6878      	ldr	r0, [r7, #4]
 8006356:	f000 fc7a 	bl	8006c4e <USBD_CtlError>
              break;
 800635a:	e01b      	b.n	8006394 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	885b      	ldrh	r3, [r3, #2]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d10e      	bne.n	8006382 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006364:	7bbb      	ldrb	r3, [r7, #14]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d00b      	beq.n	8006382 <USBD_StdEPReq+0xfe>
 800636a:	7bbb      	ldrb	r3, [r7, #14]
 800636c:	2b80      	cmp	r3, #128	; 0x80
 800636e:	d008      	beq.n	8006382 <USBD_StdEPReq+0xfe>
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	88db      	ldrh	r3, [r3, #6]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d104      	bne.n	8006382 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006378:	7bbb      	ldrb	r3, [r7, #14]
 800637a:	4619      	mov	r1, r3
 800637c:	6878      	ldr	r0, [r7, #4]
 800637e:	f003 fee7 	bl	800a150 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006382:	6878      	ldr	r0, [r7, #4]
 8006384:	f000 fd2e 	bl	8006de4 <USBD_CtlSendStatus>

              break;
 8006388:	e004      	b.n	8006394 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800638a:	6839      	ldr	r1, [r7, #0]
 800638c:	6878      	ldr	r0, [r7, #4]
 800638e:	f000 fc5e 	bl	8006c4e <USBD_CtlError>
              break;
 8006392:	bf00      	nop
          }
          break;
 8006394:	e107      	b.n	80065a6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800639c:	b2db      	uxtb	r3, r3
 800639e:	2b02      	cmp	r3, #2
 80063a0:	d002      	beq.n	80063a8 <USBD_StdEPReq+0x124>
 80063a2:	2b03      	cmp	r3, #3
 80063a4:	d016      	beq.n	80063d4 <USBD_StdEPReq+0x150>
 80063a6:	e04b      	b.n	8006440 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80063a8:	7bbb      	ldrb	r3, [r7, #14]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d00d      	beq.n	80063ca <USBD_StdEPReq+0x146>
 80063ae:	7bbb      	ldrb	r3, [r7, #14]
 80063b0:	2b80      	cmp	r3, #128	; 0x80
 80063b2:	d00a      	beq.n	80063ca <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80063b4:	7bbb      	ldrb	r3, [r7, #14]
 80063b6:	4619      	mov	r1, r3
 80063b8:	6878      	ldr	r0, [r7, #4]
 80063ba:	f003 fec9 	bl	800a150 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80063be:	2180      	movs	r1, #128	; 0x80
 80063c0:	6878      	ldr	r0, [r7, #4]
 80063c2:	f003 fec5 	bl	800a150 <USBD_LL_StallEP>
 80063c6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80063c8:	e040      	b.n	800644c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80063ca:	6839      	ldr	r1, [r7, #0]
 80063cc:	6878      	ldr	r0, [r7, #4]
 80063ce:	f000 fc3e 	bl	8006c4e <USBD_CtlError>
              break;
 80063d2:	e03b      	b.n	800644c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	885b      	ldrh	r3, [r3, #2]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d136      	bne.n	800644a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80063dc:	7bbb      	ldrb	r3, [r7, #14]
 80063de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d004      	beq.n	80063f0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80063e6:	7bbb      	ldrb	r3, [r7, #14]
 80063e8:	4619      	mov	r1, r3
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	f003 fecf 	bl	800a18e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80063f0:	6878      	ldr	r0, [r7, #4]
 80063f2:	f000 fcf7 	bl	8006de4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80063f6:	7bbb      	ldrb	r3, [r7, #14]
 80063f8:	4619      	mov	r1, r3
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	f7ff fde2 	bl	8005fc4 <USBD_CoreFindEP>
 8006400:	4603      	mov	r3, r0
 8006402:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006404:	7b7b      	ldrb	r3, [r7, #13]
 8006406:	2bff      	cmp	r3, #255	; 0xff
 8006408:	d01f      	beq.n	800644a <USBD_StdEPReq+0x1c6>
 800640a:	7b7b      	ldrb	r3, [r7, #13]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d11c      	bne.n	800644a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006410:	7b7a      	ldrb	r2, [r7, #13]
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006418:	7b7a      	ldrb	r2, [r7, #13]
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	32ae      	adds	r2, #174	; 0xae
 800641e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006422:	689b      	ldr	r3, [r3, #8]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d010      	beq.n	800644a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006428:	7b7a      	ldrb	r2, [r7, #13]
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	32ae      	adds	r2, #174	; 0xae
 800642e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006432:	689b      	ldr	r3, [r3, #8]
 8006434:	6839      	ldr	r1, [r7, #0]
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	4798      	blx	r3
 800643a:	4603      	mov	r3, r0
 800643c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800643e:	e004      	b.n	800644a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006440:	6839      	ldr	r1, [r7, #0]
 8006442:	6878      	ldr	r0, [r7, #4]
 8006444:	f000 fc03 	bl	8006c4e <USBD_CtlError>
              break;
 8006448:	e000      	b.n	800644c <USBD_StdEPReq+0x1c8>
              break;
 800644a:	bf00      	nop
          }
          break;
 800644c:	e0ab      	b.n	80065a6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006454:	b2db      	uxtb	r3, r3
 8006456:	2b02      	cmp	r3, #2
 8006458:	d002      	beq.n	8006460 <USBD_StdEPReq+0x1dc>
 800645a:	2b03      	cmp	r3, #3
 800645c:	d032      	beq.n	80064c4 <USBD_StdEPReq+0x240>
 800645e:	e097      	b.n	8006590 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006460:	7bbb      	ldrb	r3, [r7, #14]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d007      	beq.n	8006476 <USBD_StdEPReq+0x1f2>
 8006466:	7bbb      	ldrb	r3, [r7, #14]
 8006468:	2b80      	cmp	r3, #128	; 0x80
 800646a:	d004      	beq.n	8006476 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800646c:	6839      	ldr	r1, [r7, #0]
 800646e:	6878      	ldr	r0, [r7, #4]
 8006470:	f000 fbed 	bl	8006c4e <USBD_CtlError>
                break;
 8006474:	e091      	b.n	800659a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006476:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800647a:	2b00      	cmp	r3, #0
 800647c:	da0b      	bge.n	8006496 <USBD_StdEPReq+0x212>
 800647e:	7bbb      	ldrb	r3, [r7, #14]
 8006480:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006484:	4613      	mov	r3, r2
 8006486:	009b      	lsls	r3, r3, #2
 8006488:	4413      	add	r3, r2
 800648a:	009b      	lsls	r3, r3, #2
 800648c:	3310      	adds	r3, #16
 800648e:	687a      	ldr	r2, [r7, #4]
 8006490:	4413      	add	r3, r2
 8006492:	3304      	adds	r3, #4
 8006494:	e00b      	b.n	80064ae <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006496:	7bbb      	ldrb	r3, [r7, #14]
 8006498:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800649c:	4613      	mov	r3, r2
 800649e:	009b      	lsls	r3, r3, #2
 80064a0:	4413      	add	r3, r2
 80064a2:	009b      	lsls	r3, r3, #2
 80064a4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80064a8:	687a      	ldr	r2, [r7, #4]
 80064aa:	4413      	add	r3, r2
 80064ac:	3304      	adds	r3, #4
 80064ae:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	2200      	movs	r2, #0
 80064b4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	2202      	movs	r2, #2
 80064ba:	4619      	mov	r1, r3
 80064bc:	6878      	ldr	r0, [r7, #4]
 80064be:	f000 fc37 	bl	8006d30 <USBD_CtlSendData>
              break;
 80064c2:	e06a      	b.n	800659a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80064c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	da11      	bge.n	80064f0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80064cc:	7bbb      	ldrb	r3, [r7, #14]
 80064ce:	f003 020f 	and.w	r2, r3, #15
 80064d2:	6879      	ldr	r1, [r7, #4]
 80064d4:	4613      	mov	r3, r2
 80064d6:	009b      	lsls	r3, r3, #2
 80064d8:	4413      	add	r3, r2
 80064da:	009b      	lsls	r3, r3, #2
 80064dc:	440b      	add	r3, r1
 80064de:	3324      	adds	r3, #36	; 0x24
 80064e0:	881b      	ldrh	r3, [r3, #0]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d117      	bne.n	8006516 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80064e6:	6839      	ldr	r1, [r7, #0]
 80064e8:	6878      	ldr	r0, [r7, #4]
 80064ea:	f000 fbb0 	bl	8006c4e <USBD_CtlError>
                  break;
 80064ee:	e054      	b.n	800659a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80064f0:	7bbb      	ldrb	r3, [r7, #14]
 80064f2:	f003 020f 	and.w	r2, r3, #15
 80064f6:	6879      	ldr	r1, [r7, #4]
 80064f8:	4613      	mov	r3, r2
 80064fa:	009b      	lsls	r3, r3, #2
 80064fc:	4413      	add	r3, r2
 80064fe:	009b      	lsls	r3, r3, #2
 8006500:	440b      	add	r3, r1
 8006502:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006506:	881b      	ldrh	r3, [r3, #0]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d104      	bne.n	8006516 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800650c:	6839      	ldr	r1, [r7, #0]
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f000 fb9d 	bl	8006c4e <USBD_CtlError>
                  break;
 8006514:	e041      	b.n	800659a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006516:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800651a:	2b00      	cmp	r3, #0
 800651c:	da0b      	bge.n	8006536 <USBD_StdEPReq+0x2b2>
 800651e:	7bbb      	ldrb	r3, [r7, #14]
 8006520:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006524:	4613      	mov	r3, r2
 8006526:	009b      	lsls	r3, r3, #2
 8006528:	4413      	add	r3, r2
 800652a:	009b      	lsls	r3, r3, #2
 800652c:	3310      	adds	r3, #16
 800652e:	687a      	ldr	r2, [r7, #4]
 8006530:	4413      	add	r3, r2
 8006532:	3304      	adds	r3, #4
 8006534:	e00b      	b.n	800654e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006536:	7bbb      	ldrb	r3, [r7, #14]
 8006538:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800653c:	4613      	mov	r3, r2
 800653e:	009b      	lsls	r3, r3, #2
 8006540:	4413      	add	r3, r2
 8006542:	009b      	lsls	r3, r3, #2
 8006544:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006548:	687a      	ldr	r2, [r7, #4]
 800654a:	4413      	add	r3, r2
 800654c:	3304      	adds	r3, #4
 800654e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006550:	7bbb      	ldrb	r3, [r7, #14]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d002      	beq.n	800655c <USBD_StdEPReq+0x2d8>
 8006556:	7bbb      	ldrb	r3, [r7, #14]
 8006558:	2b80      	cmp	r3, #128	; 0x80
 800655a:	d103      	bne.n	8006564 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	2200      	movs	r2, #0
 8006560:	601a      	str	r2, [r3, #0]
 8006562:	e00e      	b.n	8006582 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006564:	7bbb      	ldrb	r3, [r7, #14]
 8006566:	4619      	mov	r1, r3
 8006568:	6878      	ldr	r0, [r7, #4]
 800656a:	f003 fe2f 	bl	800a1cc <USBD_LL_IsStallEP>
 800656e:	4603      	mov	r3, r0
 8006570:	2b00      	cmp	r3, #0
 8006572:	d003      	beq.n	800657c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	2201      	movs	r2, #1
 8006578:	601a      	str	r2, [r3, #0]
 800657a:	e002      	b.n	8006582 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	2200      	movs	r2, #0
 8006580:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	2202      	movs	r2, #2
 8006586:	4619      	mov	r1, r3
 8006588:	6878      	ldr	r0, [r7, #4]
 800658a:	f000 fbd1 	bl	8006d30 <USBD_CtlSendData>
              break;
 800658e:	e004      	b.n	800659a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006590:	6839      	ldr	r1, [r7, #0]
 8006592:	6878      	ldr	r0, [r7, #4]
 8006594:	f000 fb5b 	bl	8006c4e <USBD_CtlError>
              break;
 8006598:	bf00      	nop
          }
          break;
 800659a:	e004      	b.n	80065a6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800659c:	6839      	ldr	r1, [r7, #0]
 800659e:	6878      	ldr	r0, [r7, #4]
 80065a0:	f000 fb55 	bl	8006c4e <USBD_CtlError>
          break;
 80065a4:	bf00      	nop
      }
      break;
 80065a6:	e005      	b.n	80065b4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80065a8:	6839      	ldr	r1, [r7, #0]
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	f000 fb4f 	bl	8006c4e <USBD_CtlError>
      break;
 80065b0:	e000      	b.n	80065b4 <USBD_StdEPReq+0x330>
      break;
 80065b2:	bf00      	nop
  }

  return ret;
 80065b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80065b6:	4618      	mov	r0, r3
 80065b8:	3710      	adds	r7, #16
 80065ba:	46bd      	mov	sp, r7
 80065bc:	bd80      	pop	{r7, pc}
	...

080065c0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b084      	sub	sp, #16
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
 80065c8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80065ca:	2300      	movs	r3, #0
 80065cc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80065ce:	2300      	movs	r3, #0
 80065d0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80065d2:	2300      	movs	r3, #0
 80065d4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	885b      	ldrh	r3, [r3, #2]
 80065da:	0a1b      	lsrs	r3, r3, #8
 80065dc:	b29b      	uxth	r3, r3
 80065de:	3b01      	subs	r3, #1
 80065e0:	2b06      	cmp	r3, #6
 80065e2:	f200 8128 	bhi.w	8006836 <USBD_GetDescriptor+0x276>
 80065e6:	a201      	add	r2, pc, #4	; (adr r2, 80065ec <USBD_GetDescriptor+0x2c>)
 80065e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065ec:	08006609 	.word	0x08006609
 80065f0:	08006621 	.word	0x08006621
 80065f4:	08006661 	.word	0x08006661
 80065f8:	08006837 	.word	0x08006837
 80065fc:	08006837 	.word	0x08006837
 8006600:	080067d7 	.word	0x080067d7
 8006604:	08006803 	.word	0x08006803
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	687a      	ldr	r2, [r7, #4]
 8006612:	7c12      	ldrb	r2, [r2, #16]
 8006614:	f107 0108 	add.w	r1, r7, #8
 8006618:	4610      	mov	r0, r2
 800661a:	4798      	blx	r3
 800661c:	60f8      	str	r0, [r7, #12]
      break;
 800661e:	e112      	b.n	8006846 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	7c1b      	ldrb	r3, [r3, #16]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d10d      	bne.n	8006644 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800662e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006630:	f107 0208 	add.w	r2, r7, #8
 8006634:	4610      	mov	r0, r2
 8006636:	4798      	blx	r3
 8006638:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	3301      	adds	r3, #1
 800663e:	2202      	movs	r2, #2
 8006640:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006642:	e100      	b.n	8006846 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800664a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800664c:	f107 0208 	add.w	r2, r7, #8
 8006650:	4610      	mov	r0, r2
 8006652:	4798      	blx	r3
 8006654:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	3301      	adds	r3, #1
 800665a:	2202      	movs	r2, #2
 800665c:	701a      	strb	r2, [r3, #0]
      break;
 800665e:	e0f2      	b.n	8006846 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	885b      	ldrh	r3, [r3, #2]
 8006664:	b2db      	uxtb	r3, r3
 8006666:	2b05      	cmp	r3, #5
 8006668:	f200 80ac 	bhi.w	80067c4 <USBD_GetDescriptor+0x204>
 800666c:	a201      	add	r2, pc, #4	; (adr r2, 8006674 <USBD_GetDescriptor+0xb4>)
 800666e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006672:	bf00      	nop
 8006674:	0800668d 	.word	0x0800668d
 8006678:	080066c1 	.word	0x080066c1
 800667c:	080066f5 	.word	0x080066f5
 8006680:	08006729 	.word	0x08006729
 8006684:	0800675d 	.word	0x0800675d
 8006688:	08006791 	.word	0x08006791
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006692:	685b      	ldr	r3, [r3, #4]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d00b      	beq.n	80066b0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800669e:	685b      	ldr	r3, [r3, #4]
 80066a0:	687a      	ldr	r2, [r7, #4]
 80066a2:	7c12      	ldrb	r2, [r2, #16]
 80066a4:	f107 0108 	add.w	r1, r7, #8
 80066a8:	4610      	mov	r0, r2
 80066aa:	4798      	blx	r3
 80066ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80066ae:	e091      	b.n	80067d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80066b0:	6839      	ldr	r1, [r7, #0]
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	f000 facb 	bl	8006c4e <USBD_CtlError>
            err++;
 80066b8:	7afb      	ldrb	r3, [r7, #11]
 80066ba:	3301      	adds	r3, #1
 80066bc:	72fb      	strb	r3, [r7, #11]
          break;
 80066be:	e089      	b.n	80067d4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066c6:	689b      	ldr	r3, [r3, #8]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d00b      	beq.n	80066e4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066d2:	689b      	ldr	r3, [r3, #8]
 80066d4:	687a      	ldr	r2, [r7, #4]
 80066d6:	7c12      	ldrb	r2, [r2, #16]
 80066d8:	f107 0108 	add.w	r1, r7, #8
 80066dc:	4610      	mov	r0, r2
 80066de:	4798      	blx	r3
 80066e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80066e2:	e077      	b.n	80067d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80066e4:	6839      	ldr	r1, [r7, #0]
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	f000 fab1 	bl	8006c4e <USBD_CtlError>
            err++;
 80066ec:	7afb      	ldrb	r3, [r7, #11]
 80066ee:	3301      	adds	r3, #1
 80066f0:	72fb      	strb	r3, [r7, #11]
          break;
 80066f2:	e06f      	b.n	80067d4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066fa:	68db      	ldr	r3, [r3, #12]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d00b      	beq.n	8006718 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006706:	68db      	ldr	r3, [r3, #12]
 8006708:	687a      	ldr	r2, [r7, #4]
 800670a:	7c12      	ldrb	r2, [r2, #16]
 800670c:	f107 0108 	add.w	r1, r7, #8
 8006710:	4610      	mov	r0, r2
 8006712:	4798      	blx	r3
 8006714:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006716:	e05d      	b.n	80067d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006718:	6839      	ldr	r1, [r7, #0]
 800671a:	6878      	ldr	r0, [r7, #4]
 800671c:	f000 fa97 	bl	8006c4e <USBD_CtlError>
            err++;
 8006720:	7afb      	ldrb	r3, [r7, #11]
 8006722:	3301      	adds	r3, #1
 8006724:	72fb      	strb	r3, [r7, #11]
          break;
 8006726:	e055      	b.n	80067d4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800672e:	691b      	ldr	r3, [r3, #16]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d00b      	beq.n	800674c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800673a:	691b      	ldr	r3, [r3, #16]
 800673c:	687a      	ldr	r2, [r7, #4]
 800673e:	7c12      	ldrb	r2, [r2, #16]
 8006740:	f107 0108 	add.w	r1, r7, #8
 8006744:	4610      	mov	r0, r2
 8006746:	4798      	blx	r3
 8006748:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800674a:	e043      	b.n	80067d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800674c:	6839      	ldr	r1, [r7, #0]
 800674e:	6878      	ldr	r0, [r7, #4]
 8006750:	f000 fa7d 	bl	8006c4e <USBD_CtlError>
            err++;
 8006754:	7afb      	ldrb	r3, [r7, #11]
 8006756:	3301      	adds	r3, #1
 8006758:	72fb      	strb	r3, [r7, #11]
          break;
 800675a:	e03b      	b.n	80067d4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006762:	695b      	ldr	r3, [r3, #20]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d00b      	beq.n	8006780 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800676e:	695b      	ldr	r3, [r3, #20]
 8006770:	687a      	ldr	r2, [r7, #4]
 8006772:	7c12      	ldrb	r2, [r2, #16]
 8006774:	f107 0108 	add.w	r1, r7, #8
 8006778:	4610      	mov	r0, r2
 800677a:	4798      	blx	r3
 800677c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800677e:	e029      	b.n	80067d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006780:	6839      	ldr	r1, [r7, #0]
 8006782:	6878      	ldr	r0, [r7, #4]
 8006784:	f000 fa63 	bl	8006c4e <USBD_CtlError>
            err++;
 8006788:	7afb      	ldrb	r3, [r7, #11]
 800678a:	3301      	adds	r3, #1
 800678c:	72fb      	strb	r3, [r7, #11]
          break;
 800678e:	e021      	b.n	80067d4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006796:	699b      	ldr	r3, [r3, #24]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d00b      	beq.n	80067b4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067a2:	699b      	ldr	r3, [r3, #24]
 80067a4:	687a      	ldr	r2, [r7, #4]
 80067a6:	7c12      	ldrb	r2, [r2, #16]
 80067a8:	f107 0108 	add.w	r1, r7, #8
 80067ac:	4610      	mov	r0, r2
 80067ae:	4798      	blx	r3
 80067b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80067b2:	e00f      	b.n	80067d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80067b4:	6839      	ldr	r1, [r7, #0]
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	f000 fa49 	bl	8006c4e <USBD_CtlError>
            err++;
 80067bc:	7afb      	ldrb	r3, [r7, #11]
 80067be:	3301      	adds	r3, #1
 80067c0:	72fb      	strb	r3, [r7, #11]
          break;
 80067c2:	e007      	b.n	80067d4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80067c4:	6839      	ldr	r1, [r7, #0]
 80067c6:	6878      	ldr	r0, [r7, #4]
 80067c8:	f000 fa41 	bl	8006c4e <USBD_CtlError>
          err++;
 80067cc:	7afb      	ldrb	r3, [r7, #11]
 80067ce:	3301      	adds	r3, #1
 80067d0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80067d2:	bf00      	nop
      }
      break;
 80067d4:	e037      	b.n	8006846 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	7c1b      	ldrb	r3, [r3, #16]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d109      	bne.n	80067f2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067e6:	f107 0208 	add.w	r2, r7, #8
 80067ea:	4610      	mov	r0, r2
 80067ec:	4798      	blx	r3
 80067ee:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80067f0:	e029      	b.n	8006846 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80067f2:	6839      	ldr	r1, [r7, #0]
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	f000 fa2a 	bl	8006c4e <USBD_CtlError>
        err++;
 80067fa:	7afb      	ldrb	r3, [r7, #11]
 80067fc:	3301      	adds	r3, #1
 80067fe:	72fb      	strb	r3, [r7, #11]
      break;
 8006800:	e021      	b.n	8006846 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	7c1b      	ldrb	r3, [r3, #16]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d10d      	bne.n	8006826 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006812:	f107 0208 	add.w	r2, r7, #8
 8006816:	4610      	mov	r0, r2
 8006818:	4798      	blx	r3
 800681a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	3301      	adds	r3, #1
 8006820:	2207      	movs	r2, #7
 8006822:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006824:	e00f      	b.n	8006846 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006826:	6839      	ldr	r1, [r7, #0]
 8006828:	6878      	ldr	r0, [r7, #4]
 800682a:	f000 fa10 	bl	8006c4e <USBD_CtlError>
        err++;
 800682e:	7afb      	ldrb	r3, [r7, #11]
 8006830:	3301      	adds	r3, #1
 8006832:	72fb      	strb	r3, [r7, #11]
      break;
 8006834:	e007      	b.n	8006846 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006836:	6839      	ldr	r1, [r7, #0]
 8006838:	6878      	ldr	r0, [r7, #4]
 800683a:	f000 fa08 	bl	8006c4e <USBD_CtlError>
      err++;
 800683e:	7afb      	ldrb	r3, [r7, #11]
 8006840:	3301      	adds	r3, #1
 8006842:	72fb      	strb	r3, [r7, #11]
      break;
 8006844:	bf00      	nop
  }

  if (err != 0U)
 8006846:	7afb      	ldrb	r3, [r7, #11]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d11e      	bne.n	800688a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	88db      	ldrh	r3, [r3, #6]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d016      	beq.n	8006882 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006854:	893b      	ldrh	r3, [r7, #8]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d00e      	beq.n	8006878 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	88da      	ldrh	r2, [r3, #6]
 800685e:	893b      	ldrh	r3, [r7, #8]
 8006860:	4293      	cmp	r3, r2
 8006862:	bf28      	it	cs
 8006864:	4613      	movcs	r3, r2
 8006866:	b29b      	uxth	r3, r3
 8006868:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800686a:	893b      	ldrh	r3, [r7, #8]
 800686c:	461a      	mov	r2, r3
 800686e:	68f9      	ldr	r1, [r7, #12]
 8006870:	6878      	ldr	r0, [r7, #4]
 8006872:	f000 fa5d 	bl	8006d30 <USBD_CtlSendData>
 8006876:	e009      	b.n	800688c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006878:	6839      	ldr	r1, [r7, #0]
 800687a:	6878      	ldr	r0, [r7, #4]
 800687c:	f000 f9e7 	bl	8006c4e <USBD_CtlError>
 8006880:	e004      	b.n	800688c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006882:	6878      	ldr	r0, [r7, #4]
 8006884:	f000 faae 	bl	8006de4 <USBD_CtlSendStatus>
 8006888:	e000      	b.n	800688c <USBD_GetDescriptor+0x2cc>
    return;
 800688a:	bf00      	nop
  }
}
 800688c:	3710      	adds	r7, #16
 800688e:	46bd      	mov	sp, r7
 8006890:	bd80      	pop	{r7, pc}
 8006892:	bf00      	nop

08006894 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b084      	sub	sp, #16
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
 800689c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	889b      	ldrh	r3, [r3, #4]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d131      	bne.n	800690a <USBD_SetAddress+0x76>
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	88db      	ldrh	r3, [r3, #6]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d12d      	bne.n	800690a <USBD_SetAddress+0x76>
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	885b      	ldrh	r3, [r3, #2]
 80068b2:	2b7f      	cmp	r3, #127	; 0x7f
 80068b4:	d829      	bhi.n	800690a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	885b      	ldrh	r3, [r3, #2]
 80068ba:	b2db      	uxtb	r3, r3
 80068bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068c0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068c8:	b2db      	uxtb	r3, r3
 80068ca:	2b03      	cmp	r3, #3
 80068cc:	d104      	bne.n	80068d8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80068ce:	6839      	ldr	r1, [r7, #0]
 80068d0:	6878      	ldr	r0, [r7, #4]
 80068d2:	f000 f9bc 	bl	8006c4e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068d6:	e01d      	b.n	8006914 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	7bfa      	ldrb	r2, [r7, #15]
 80068dc:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80068e0:	7bfb      	ldrb	r3, [r7, #15]
 80068e2:	4619      	mov	r1, r3
 80068e4:	6878      	ldr	r0, [r7, #4]
 80068e6:	f003 fc9d 	bl	800a224 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	f000 fa7a 	bl	8006de4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80068f0:	7bfb      	ldrb	r3, [r7, #15]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d004      	beq.n	8006900 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2202      	movs	r2, #2
 80068fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068fe:	e009      	b.n	8006914 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2201      	movs	r2, #1
 8006904:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006908:	e004      	b.n	8006914 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800690a:	6839      	ldr	r1, [r7, #0]
 800690c:	6878      	ldr	r0, [r7, #4]
 800690e:	f000 f99e 	bl	8006c4e <USBD_CtlError>
  }
}
 8006912:	bf00      	nop
 8006914:	bf00      	nop
 8006916:	3710      	adds	r7, #16
 8006918:	46bd      	mov	sp, r7
 800691a:	bd80      	pop	{r7, pc}

0800691c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b084      	sub	sp, #16
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
 8006924:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006926:	2300      	movs	r3, #0
 8006928:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	885b      	ldrh	r3, [r3, #2]
 800692e:	b2da      	uxtb	r2, r3
 8006930:	4b4e      	ldr	r3, [pc, #312]	; (8006a6c <USBD_SetConfig+0x150>)
 8006932:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006934:	4b4d      	ldr	r3, [pc, #308]	; (8006a6c <USBD_SetConfig+0x150>)
 8006936:	781b      	ldrb	r3, [r3, #0]
 8006938:	2b01      	cmp	r3, #1
 800693a:	d905      	bls.n	8006948 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800693c:	6839      	ldr	r1, [r7, #0]
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	f000 f985 	bl	8006c4e <USBD_CtlError>
    return USBD_FAIL;
 8006944:	2303      	movs	r3, #3
 8006946:	e08c      	b.n	8006a62 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800694e:	b2db      	uxtb	r3, r3
 8006950:	2b02      	cmp	r3, #2
 8006952:	d002      	beq.n	800695a <USBD_SetConfig+0x3e>
 8006954:	2b03      	cmp	r3, #3
 8006956:	d029      	beq.n	80069ac <USBD_SetConfig+0x90>
 8006958:	e075      	b.n	8006a46 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800695a:	4b44      	ldr	r3, [pc, #272]	; (8006a6c <USBD_SetConfig+0x150>)
 800695c:	781b      	ldrb	r3, [r3, #0]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d020      	beq.n	80069a4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8006962:	4b42      	ldr	r3, [pc, #264]	; (8006a6c <USBD_SetConfig+0x150>)
 8006964:	781b      	ldrb	r3, [r3, #0]
 8006966:	461a      	mov	r2, r3
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800696c:	4b3f      	ldr	r3, [pc, #252]	; (8006a6c <USBD_SetConfig+0x150>)
 800696e:	781b      	ldrb	r3, [r3, #0]
 8006970:	4619      	mov	r1, r3
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	f7fe ffe1 	bl	800593a <USBD_SetClassConfig>
 8006978:	4603      	mov	r3, r0
 800697a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800697c:	7bfb      	ldrb	r3, [r7, #15]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d008      	beq.n	8006994 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8006982:	6839      	ldr	r1, [r7, #0]
 8006984:	6878      	ldr	r0, [r7, #4]
 8006986:	f000 f962 	bl	8006c4e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2202      	movs	r2, #2
 800698e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006992:	e065      	b.n	8006a60 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006994:	6878      	ldr	r0, [r7, #4]
 8006996:	f000 fa25 	bl	8006de4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2203      	movs	r2, #3
 800699e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80069a2:	e05d      	b.n	8006a60 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80069a4:	6878      	ldr	r0, [r7, #4]
 80069a6:	f000 fa1d 	bl	8006de4 <USBD_CtlSendStatus>
      break;
 80069aa:	e059      	b.n	8006a60 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80069ac:	4b2f      	ldr	r3, [pc, #188]	; (8006a6c <USBD_SetConfig+0x150>)
 80069ae:	781b      	ldrb	r3, [r3, #0]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d112      	bne.n	80069da <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2202      	movs	r2, #2
 80069b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80069bc:	4b2b      	ldr	r3, [pc, #172]	; (8006a6c <USBD_SetConfig+0x150>)
 80069be:	781b      	ldrb	r3, [r3, #0]
 80069c0:	461a      	mov	r2, r3
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80069c6:	4b29      	ldr	r3, [pc, #164]	; (8006a6c <USBD_SetConfig+0x150>)
 80069c8:	781b      	ldrb	r3, [r3, #0]
 80069ca:	4619      	mov	r1, r3
 80069cc:	6878      	ldr	r0, [r7, #4]
 80069ce:	f7fe ffd0 	bl	8005972 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	f000 fa06 	bl	8006de4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80069d8:	e042      	b.n	8006a60 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80069da:	4b24      	ldr	r3, [pc, #144]	; (8006a6c <USBD_SetConfig+0x150>)
 80069dc:	781b      	ldrb	r3, [r3, #0]
 80069de:	461a      	mov	r2, r3
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	685b      	ldr	r3, [r3, #4]
 80069e4:	429a      	cmp	r2, r3
 80069e6:	d02a      	beq.n	8006a3e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	685b      	ldr	r3, [r3, #4]
 80069ec:	b2db      	uxtb	r3, r3
 80069ee:	4619      	mov	r1, r3
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	f7fe ffbe 	bl	8005972 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80069f6:	4b1d      	ldr	r3, [pc, #116]	; (8006a6c <USBD_SetConfig+0x150>)
 80069f8:	781b      	ldrb	r3, [r3, #0]
 80069fa:	461a      	mov	r2, r3
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006a00:	4b1a      	ldr	r3, [pc, #104]	; (8006a6c <USBD_SetConfig+0x150>)
 8006a02:	781b      	ldrb	r3, [r3, #0]
 8006a04:	4619      	mov	r1, r3
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	f7fe ff97 	bl	800593a <USBD_SetClassConfig>
 8006a0c:	4603      	mov	r3, r0
 8006a0e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006a10:	7bfb      	ldrb	r3, [r7, #15]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d00f      	beq.n	8006a36 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8006a16:	6839      	ldr	r1, [r7, #0]
 8006a18:	6878      	ldr	r0, [r7, #4]
 8006a1a:	f000 f918 	bl	8006c4e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	685b      	ldr	r3, [r3, #4]
 8006a22:	b2db      	uxtb	r3, r3
 8006a24:	4619      	mov	r1, r3
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	f7fe ffa3 	bl	8005972 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2202      	movs	r2, #2
 8006a30:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006a34:	e014      	b.n	8006a60 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006a36:	6878      	ldr	r0, [r7, #4]
 8006a38:	f000 f9d4 	bl	8006de4 <USBD_CtlSendStatus>
      break;
 8006a3c:	e010      	b.n	8006a60 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f000 f9d0 	bl	8006de4 <USBD_CtlSendStatus>
      break;
 8006a44:	e00c      	b.n	8006a60 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8006a46:	6839      	ldr	r1, [r7, #0]
 8006a48:	6878      	ldr	r0, [r7, #4]
 8006a4a:	f000 f900 	bl	8006c4e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006a4e:	4b07      	ldr	r3, [pc, #28]	; (8006a6c <USBD_SetConfig+0x150>)
 8006a50:	781b      	ldrb	r3, [r3, #0]
 8006a52:	4619      	mov	r1, r3
 8006a54:	6878      	ldr	r0, [r7, #4]
 8006a56:	f7fe ff8c 	bl	8005972 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006a5a:	2303      	movs	r3, #3
 8006a5c:	73fb      	strb	r3, [r7, #15]
      break;
 8006a5e:	bf00      	nop
  }

  return ret;
 8006a60:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a62:	4618      	mov	r0, r3
 8006a64:	3710      	adds	r7, #16
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bd80      	pop	{r7, pc}
 8006a6a:	bf00      	nop
 8006a6c:	2000024c 	.word	0x2000024c

08006a70 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b082      	sub	sp, #8
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
 8006a78:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	88db      	ldrh	r3, [r3, #6]
 8006a7e:	2b01      	cmp	r3, #1
 8006a80:	d004      	beq.n	8006a8c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006a82:	6839      	ldr	r1, [r7, #0]
 8006a84:	6878      	ldr	r0, [r7, #4]
 8006a86:	f000 f8e2 	bl	8006c4e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006a8a:	e023      	b.n	8006ad4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a92:	b2db      	uxtb	r3, r3
 8006a94:	2b02      	cmp	r3, #2
 8006a96:	dc02      	bgt.n	8006a9e <USBD_GetConfig+0x2e>
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	dc03      	bgt.n	8006aa4 <USBD_GetConfig+0x34>
 8006a9c:	e015      	b.n	8006aca <USBD_GetConfig+0x5a>
 8006a9e:	2b03      	cmp	r3, #3
 8006aa0:	d00b      	beq.n	8006aba <USBD_GetConfig+0x4a>
 8006aa2:	e012      	b.n	8006aca <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	3308      	adds	r3, #8
 8006aae:	2201      	movs	r2, #1
 8006ab0:	4619      	mov	r1, r3
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	f000 f93c 	bl	8006d30 <USBD_CtlSendData>
        break;
 8006ab8:	e00c      	b.n	8006ad4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	3304      	adds	r3, #4
 8006abe:	2201      	movs	r2, #1
 8006ac0:	4619      	mov	r1, r3
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	f000 f934 	bl	8006d30 <USBD_CtlSendData>
        break;
 8006ac8:	e004      	b.n	8006ad4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006aca:	6839      	ldr	r1, [r7, #0]
 8006acc:	6878      	ldr	r0, [r7, #4]
 8006ace:	f000 f8be 	bl	8006c4e <USBD_CtlError>
        break;
 8006ad2:	bf00      	nop
}
 8006ad4:	bf00      	nop
 8006ad6:	3708      	adds	r7, #8
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	bd80      	pop	{r7, pc}

08006adc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b082      	sub	sp, #8
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
 8006ae4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006aec:	b2db      	uxtb	r3, r3
 8006aee:	3b01      	subs	r3, #1
 8006af0:	2b02      	cmp	r3, #2
 8006af2:	d81e      	bhi.n	8006b32 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	88db      	ldrh	r3, [r3, #6]
 8006af8:	2b02      	cmp	r3, #2
 8006afa:	d004      	beq.n	8006b06 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006afc:	6839      	ldr	r1, [r7, #0]
 8006afe:	6878      	ldr	r0, [r7, #4]
 8006b00:	f000 f8a5 	bl	8006c4e <USBD_CtlError>
        break;
 8006b04:	e01a      	b.n	8006b3c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2201      	movs	r2, #1
 8006b0a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d005      	beq.n	8006b22 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	68db      	ldr	r3, [r3, #12]
 8006b1a:	f043 0202 	orr.w	r2, r3, #2
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	330c      	adds	r3, #12
 8006b26:	2202      	movs	r2, #2
 8006b28:	4619      	mov	r1, r3
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	f000 f900 	bl	8006d30 <USBD_CtlSendData>
      break;
 8006b30:	e004      	b.n	8006b3c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006b32:	6839      	ldr	r1, [r7, #0]
 8006b34:	6878      	ldr	r0, [r7, #4]
 8006b36:	f000 f88a 	bl	8006c4e <USBD_CtlError>
      break;
 8006b3a:	bf00      	nop
  }
}
 8006b3c:	bf00      	nop
 8006b3e:	3708      	adds	r7, #8
 8006b40:	46bd      	mov	sp, r7
 8006b42:	bd80      	pop	{r7, pc}

08006b44 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b082      	sub	sp, #8
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
 8006b4c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	885b      	ldrh	r3, [r3, #2]
 8006b52:	2b01      	cmp	r3, #1
 8006b54:	d107      	bne.n	8006b66 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2201      	movs	r2, #1
 8006b5a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f000 f940 	bl	8006de4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8006b64:	e013      	b.n	8006b8e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	885b      	ldrh	r3, [r3, #2]
 8006b6a:	2b02      	cmp	r3, #2
 8006b6c:	d10b      	bne.n	8006b86 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	889b      	ldrh	r3, [r3, #4]
 8006b72:	0a1b      	lsrs	r3, r3, #8
 8006b74:	b29b      	uxth	r3, r3
 8006b76:	b2da      	uxtb	r2, r3
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	f000 f930 	bl	8006de4 <USBD_CtlSendStatus>
}
 8006b84:	e003      	b.n	8006b8e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8006b86:	6839      	ldr	r1, [r7, #0]
 8006b88:	6878      	ldr	r0, [r7, #4]
 8006b8a:	f000 f860 	bl	8006c4e <USBD_CtlError>
}
 8006b8e:	bf00      	nop
 8006b90:	3708      	adds	r7, #8
 8006b92:	46bd      	mov	sp, r7
 8006b94:	bd80      	pop	{r7, pc}

08006b96 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b96:	b580      	push	{r7, lr}
 8006b98:	b082      	sub	sp, #8
 8006b9a:	af00      	add	r7, sp, #0
 8006b9c:	6078      	str	r0, [r7, #4]
 8006b9e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ba6:	b2db      	uxtb	r3, r3
 8006ba8:	3b01      	subs	r3, #1
 8006baa:	2b02      	cmp	r3, #2
 8006bac:	d80b      	bhi.n	8006bc6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	885b      	ldrh	r3, [r3, #2]
 8006bb2:	2b01      	cmp	r3, #1
 8006bb4:	d10c      	bne.n	8006bd0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2200      	movs	r2, #0
 8006bba:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006bbe:	6878      	ldr	r0, [r7, #4]
 8006bc0:	f000 f910 	bl	8006de4 <USBD_CtlSendStatus>
      }
      break;
 8006bc4:	e004      	b.n	8006bd0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006bc6:	6839      	ldr	r1, [r7, #0]
 8006bc8:	6878      	ldr	r0, [r7, #4]
 8006bca:	f000 f840 	bl	8006c4e <USBD_CtlError>
      break;
 8006bce:	e000      	b.n	8006bd2 <USBD_ClrFeature+0x3c>
      break;
 8006bd0:	bf00      	nop
  }
}
 8006bd2:	bf00      	nop
 8006bd4:	3708      	adds	r7, #8
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bd80      	pop	{r7, pc}

08006bda <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006bda:	b580      	push	{r7, lr}
 8006bdc:	b084      	sub	sp, #16
 8006bde:	af00      	add	r7, sp, #0
 8006be0:	6078      	str	r0, [r7, #4]
 8006be2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	781a      	ldrb	r2, [r3, #0]
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	3301      	adds	r3, #1
 8006bf4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	781a      	ldrb	r2, [r3, #0]
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	3301      	adds	r3, #1
 8006c02:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006c04:	68f8      	ldr	r0, [r7, #12]
 8006c06:	f7ff fa41 	bl	800608c <SWAPBYTE>
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	461a      	mov	r2, r3
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	3301      	adds	r3, #1
 8006c16:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	3301      	adds	r3, #1
 8006c1c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006c1e:	68f8      	ldr	r0, [r7, #12]
 8006c20:	f7ff fa34 	bl	800608c <SWAPBYTE>
 8006c24:	4603      	mov	r3, r0
 8006c26:	461a      	mov	r2, r3
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	3301      	adds	r3, #1
 8006c30:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	3301      	adds	r3, #1
 8006c36:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006c38:	68f8      	ldr	r0, [r7, #12]
 8006c3a:	f7ff fa27 	bl	800608c <SWAPBYTE>
 8006c3e:	4603      	mov	r3, r0
 8006c40:	461a      	mov	r2, r3
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	80da      	strh	r2, [r3, #6]
}
 8006c46:	bf00      	nop
 8006c48:	3710      	adds	r7, #16
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	bd80      	pop	{r7, pc}

08006c4e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c4e:	b580      	push	{r7, lr}
 8006c50:	b082      	sub	sp, #8
 8006c52:	af00      	add	r7, sp, #0
 8006c54:	6078      	str	r0, [r7, #4]
 8006c56:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006c58:	2180      	movs	r1, #128	; 0x80
 8006c5a:	6878      	ldr	r0, [r7, #4]
 8006c5c:	f003 fa78 	bl	800a150 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006c60:	2100      	movs	r1, #0
 8006c62:	6878      	ldr	r0, [r7, #4]
 8006c64:	f003 fa74 	bl	800a150 <USBD_LL_StallEP>
}
 8006c68:	bf00      	nop
 8006c6a:	3708      	adds	r7, #8
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	bd80      	pop	{r7, pc}

08006c70 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b086      	sub	sp, #24
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	60f8      	str	r0, [r7, #12]
 8006c78:	60b9      	str	r1, [r7, #8]
 8006c7a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d036      	beq.n	8006cf4 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006c8a:	6938      	ldr	r0, [r7, #16]
 8006c8c:	f000 f836 	bl	8006cfc <USBD_GetLen>
 8006c90:	4603      	mov	r3, r0
 8006c92:	3301      	adds	r3, #1
 8006c94:	b29b      	uxth	r3, r3
 8006c96:	005b      	lsls	r3, r3, #1
 8006c98:	b29a      	uxth	r2, r3
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006c9e:	7dfb      	ldrb	r3, [r7, #23]
 8006ca0:	68ba      	ldr	r2, [r7, #8]
 8006ca2:	4413      	add	r3, r2
 8006ca4:	687a      	ldr	r2, [r7, #4]
 8006ca6:	7812      	ldrb	r2, [r2, #0]
 8006ca8:	701a      	strb	r2, [r3, #0]
  idx++;
 8006caa:	7dfb      	ldrb	r3, [r7, #23]
 8006cac:	3301      	adds	r3, #1
 8006cae:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006cb0:	7dfb      	ldrb	r3, [r7, #23]
 8006cb2:	68ba      	ldr	r2, [r7, #8]
 8006cb4:	4413      	add	r3, r2
 8006cb6:	2203      	movs	r2, #3
 8006cb8:	701a      	strb	r2, [r3, #0]
  idx++;
 8006cba:	7dfb      	ldrb	r3, [r7, #23]
 8006cbc:	3301      	adds	r3, #1
 8006cbe:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006cc0:	e013      	b.n	8006cea <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006cc2:	7dfb      	ldrb	r3, [r7, #23]
 8006cc4:	68ba      	ldr	r2, [r7, #8]
 8006cc6:	4413      	add	r3, r2
 8006cc8:	693a      	ldr	r2, [r7, #16]
 8006cca:	7812      	ldrb	r2, [r2, #0]
 8006ccc:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006cce:	693b      	ldr	r3, [r7, #16]
 8006cd0:	3301      	adds	r3, #1
 8006cd2:	613b      	str	r3, [r7, #16]
    idx++;
 8006cd4:	7dfb      	ldrb	r3, [r7, #23]
 8006cd6:	3301      	adds	r3, #1
 8006cd8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006cda:	7dfb      	ldrb	r3, [r7, #23]
 8006cdc:	68ba      	ldr	r2, [r7, #8]
 8006cde:	4413      	add	r3, r2
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	701a      	strb	r2, [r3, #0]
    idx++;
 8006ce4:	7dfb      	ldrb	r3, [r7, #23]
 8006ce6:	3301      	adds	r3, #1
 8006ce8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006cea:	693b      	ldr	r3, [r7, #16]
 8006cec:	781b      	ldrb	r3, [r3, #0]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d1e7      	bne.n	8006cc2 <USBD_GetString+0x52>
 8006cf2:	e000      	b.n	8006cf6 <USBD_GetString+0x86>
    return;
 8006cf4:	bf00      	nop
  }
}
 8006cf6:	3718      	adds	r7, #24
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	bd80      	pop	{r7, pc}

08006cfc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	b085      	sub	sp, #20
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006d04:	2300      	movs	r3, #0
 8006d06:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006d0c:	e005      	b.n	8006d1a <USBD_GetLen+0x1e>
  {
    len++;
 8006d0e:	7bfb      	ldrb	r3, [r7, #15]
 8006d10:	3301      	adds	r3, #1
 8006d12:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	3301      	adds	r3, #1
 8006d18:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	781b      	ldrb	r3, [r3, #0]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d1f5      	bne.n	8006d0e <USBD_GetLen+0x12>
  }

  return len;
 8006d22:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d24:	4618      	mov	r0, r3
 8006d26:	3714      	adds	r7, #20
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2e:	4770      	bx	lr

08006d30 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b084      	sub	sp, #16
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	60f8      	str	r0, [r7, #12]
 8006d38:	60b9      	str	r1, [r7, #8]
 8006d3a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	2202      	movs	r2, #2
 8006d40:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	687a      	ldr	r2, [r7, #4]
 8006d48:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	687a      	ldr	r2, [r7, #4]
 8006d4e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	68ba      	ldr	r2, [r7, #8]
 8006d54:	2100      	movs	r1, #0
 8006d56:	68f8      	ldr	r0, [r7, #12]
 8006d58:	f003 fa83 	bl	800a262 <USBD_LL_Transmit>

  return USBD_OK;
 8006d5c:	2300      	movs	r3, #0
}
 8006d5e:	4618      	mov	r0, r3
 8006d60:	3710      	adds	r7, #16
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bd80      	pop	{r7, pc}

08006d66 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006d66:	b580      	push	{r7, lr}
 8006d68:	b084      	sub	sp, #16
 8006d6a:	af00      	add	r7, sp, #0
 8006d6c:	60f8      	str	r0, [r7, #12]
 8006d6e:	60b9      	str	r1, [r7, #8]
 8006d70:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	68ba      	ldr	r2, [r7, #8]
 8006d76:	2100      	movs	r1, #0
 8006d78:	68f8      	ldr	r0, [r7, #12]
 8006d7a:	f003 fa72 	bl	800a262 <USBD_LL_Transmit>

  return USBD_OK;
 8006d7e:	2300      	movs	r3, #0
}
 8006d80:	4618      	mov	r0, r3
 8006d82:	3710      	adds	r7, #16
 8006d84:	46bd      	mov	sp, r7
 8006d86:	bd80      	pop	{r7, pc}

08006d88 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b084      	sub	sp, #16
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	60f8      	str	r0, [r7, #12]
 8006d90:	60b9      	str	r1, [r7, #8]
 8006d92:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	2203      	movs	r2, #3
 8006d98:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	687a      	ldr	r2, [r7, #4]
 8006da0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	687a      	ldr	r2, [r7, #4]
 8006da8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	68ba      	ldr	r2, [r7, #8]
 8006db0:	2100      	movs	r1, #0
 8006db2:	68f8      	ldr	r0, [r7, #12]
 8006db4:	f003 fa76 	bl	800a2a4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006db8:	2300      	movs	r3, #0
}
 8006dba:	4618      	mov	r0, r3
 8006dbc:	3710      	adds	r7, #16
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	bd80      	pop	{r7, pc}

08006dc2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006dc2:	b580      	push	{r7, lr}
 8006dc4:	b084      	sub	sp, #16
 8006dc6:	af00      	add	r7, sp, #0
 8006dc8:	60f8      	str	r0, [r7, #12]
 8006dca:	60b9      	str	r1, [r7, #8]
 8006dcc:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	68ba      	ldr	r2, [r7, #8]
 8006dd2:	2100      	movs	r1, #0
 8006dd4:	68f8      	ldr	r0, [r7, #12]
 8006dd6:	f003 fa65 	bl	800a2a4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006dda:	2300      	movs	r3, #0
}
 8006ddc:	4618      	mov	r0, r3
 8006dde:	3710      	adds	r7, #16
 8006de0:	46bd      	mov	sp, r7
 8006de2:	bd80      	pop	{r7, pc}

08006de4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b082      	sub	sp, #8
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2204      	movs	r2, #4
 8006df0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006df4:	2300      	movs	r3, #0
 8006df6:	2200      	movs	r2, #0
 8006df8:	2100      	movs	r1, #0
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	f003 fa31 	bl	800a262 <USBD_LL_Transmit>

  return USBD_OK;
 8006e00:	2300      	movs	r3, #0
}
 8006e02:	4618      	mov	r0, r3
 8006e04:	3708      	adds	r7, #8
 8006e06:	46bd      	mov	sp, r7
 8006e08:	bd80      	pop	{r7, pc}

08006e0a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006e0a:	b580      	push	{r7, lr}
 8006e0c:	b082      	sub	sp, #8
 8006e0e:	af00      	add	r7, sp, #0
 8006e10:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2205      	movs	r2, #5
 8006e16:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	2100      	movs	r1, #0
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	f003 fa3f 	bl	800a2a4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006e26:	2300      	movs	r3, #0
}
 8006e28:	4618      	mov	r0, r3
 8006e2a:	3708      	adds	r7, #8
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	bd80      	pop	{r7, pc}

08006e30 <__NVIC_SetPriority>:
{
 8006e30:	b480      	push	{r7}
 8006e32:	b083      	sub	sp, #12
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	4603      	mov	r3, r0
 8006e38:	6039      	str	r1, [r7, #0]
 8006e3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006e3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	db0a      	blt.n	8006e5a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	b2da      	uxtb	r2, r3
 8006e48:	490c      	ldr	r1, [pc, #48]	; (8006e7c <__NVIC_SetPriority+0x4c>)
 8006e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e4e:	0112      	lsls	r2, r2, #4
 8006e50:	b2d2      	uxtb	r2, r2
 8006e52:	440b      	add	r3, r1
 8006e54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006e58:	e00a      	b.n	8006e70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	b2da      	uxtb	r2, r3
 8006e5e:	4908      	ldr	r1, [pc, #32]	; (8006e80 <__NVIC_SetPriority+0x50>)
 8006e60:	79fb      	ldrb	r3, [r7, #7]
 8006e62:	f003 030f 	and.w	r3, r3, #15
 8006e66:	3b04      	subs	r3, #4
 8006e68:	0112      	lsls	r2, r2, #4
 8006e6a:	b2d2      	uxtb	r2, r2
 8006e6c:	440b      	add	r3, r1
 8006e6e:	761a      	strb	r2, [r3, #24]
}
 8006e70:	bf00      	nop
 8006e72:	370c      	adds	r7, #12
 8006e74:	46bd      	mov	sp, r7
 8006e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7a:	4770      	bx	lr
 8006e7c:	e000e100 	.word	0xe000e100
 8006e80:	e000ed00 	.word	0xe000ed00

08006e84 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006e84:	b580      	push	{r7, lr}
 8006e86:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006e88:	4b05      	ldr	r3, [pc, #20]	; (8006ea0 <SysTick_Handler+0x1c>)
 8006e8a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006e8c:	f001 fd28 	bl	80088e0 <xTaskGetSchedulerState>
 8006e90:	4603      	mov	r3, r0
 8006e92:	2b01      	cmp	r3, #1
 8006e94:	d001      	beq.n	8006e9a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8006e96:	f002 fb0f 	bl	80094b8 <xPortSysTickHandler>
  }
}
 8006e9a:	bf00      	nop
 8006e9c:	bd80      	pop	{r7, pc}
 8006e9e:	bf00      	nop
 8006ea0:	e000e010 	.word	0xe000e010

08006ea4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006ea8:	2100      	movs	r1, #0
 8006eaa:	f06f 0004 	mvn.w	r0, #4
 8006eae:	f7ff ffbf 	bl	8006e30 <__NVIC_SetPriority>
#endif
}
 8006eb2:	bf00      	nop
 8006eb4:	bd80      	pop	{r7, pc}
	...

08006eb8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006eb8:	b480      	push	{r7}
 8006eba:	b083      	sub	sp, #12
 8006ebc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006ebe:	f3ef 8305 	mrs	r3, IPSR
 8006ec2:	603b      	str	r3, [r7, #0]
  return(result);
 8006ec4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d003      	beq.n	8006ed2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006eca:	f06f 0305 	mvn.w	r3, #5
 8006ece:	607b      	str	r3, [r7, #4]
 8006ed0:	e00c      	b.n	8006eec <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006ed2:	4b0a      	ldr	r3, [pc, #40]	; (8006efc <osKernelInitialize+0x44>)
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d105      	bne.n	8006ee6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006eda:	4b08      	ldr	r3, [pc, #32]	; (8006efc <osKernelInitialize+0x44>)
 8006edc:	2201      	movs	r2, #1
 8006ede:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	607b      	str	r3, [r7, #4]
 8006ee4:	e002      	b.n	8006eec <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006ee6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006eea:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006eec:	687b      	ldr	r3, [r7, #4]
}
 8006eee:	4618      	mov	r0, r3
 8006ef0:	370c      	adds	r7, #12
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef8:	4770      	bx	lr
 8006efa:	bf00      	nop
 8006efc:	20000250 	.word	0x20000250

08006f00 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b082      	sub	sp, #8
 8006f04:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006f06:	f3ef 8305 	mrs	r3, IPSR
 8006f0a:	603b      	str	r3, [r7, #0]
  return(result);
 8006f0c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d003      	beq.n	8006f1a <osKernelStart+0x1a>
    stat = osErrorISR;
 8006f12:	f06f 0305 	mvn.w	r3, #5
 8006f16:	607b      	str	r3, [r7, #4]
 8006f18:	e010      	b.n	8006f3c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006f1a:	4b0b      	ldr	r3, [pc, #44]	; (8006f48 <osKernelStart+0x48>)
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	2b01      	cmp	r3, #1
 8006f20:	d109      	bne.n	8006f36 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006f22:	f7ff ffbf 	bl	8006ea4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006f26:	4b08      	ldr	r3, [pc, #32]	; (8006f48 <osKernelStart+0x48>)
 8006f28:	2202      	movs	r2, #2
 8006f2a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006f2c:	f001 f87c 	bl	8008028 <vTaskStartScheduler>
      stat = osOK;
 8006f30:	2300      	movs	r3, #0
 8006f32:	607b      	str	r3, [r7, #4]
 8006f34:	e002      	b.n	8006f3c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006f36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006f3a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006f3c:	687b      	ldr	r3, [r7, #4]
}
 8006f3e:	4618      	mov	r0, r3
 8006f40:	3708      	adds	r7, #8
 8006f42:	46bd      	mov	sp, r7
 8006f44:	bd80      	pop	{r7, pc}
 8006f46:	bf00      	nop
 8006f48:	20000250 	.word	0x20000250

08006f4c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b08e      	sub	sp, #56	; 0x38
 8006f50:	af04      	add	r7, sp, #16
 8006f52:	60f8      	str	r0, [r7, #12]
 8006f54:	60b9      	str	r1, [r7, #8]
 8006f56:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006f58:	2300      	movs	r3, #0
 8006f5a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006f5c:	f3ef 8305 	mrs	r3, IPSR
 8006f60:	617b      	str	r3, [r7, #20]
  return(result);
 8006f62:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d17e      	bne.n	8007066 <osThreadNew+0x11a>
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d07b      	beq.n	8007066 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006f6e:	2380      	movs	r3, #128	; 0x80
 8006f70:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006f72:	2318      	movs	r3, #24
 8006f74:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006f76:	2300      	movs	r3, #0
 8006f78:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8006f7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006f7e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d045      	beq.n	8007012 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d002      	beq.n	8006f94 <osThreadNew+0x48>
        name = attr->name;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	699b      	ldr	r3, [r3, #24]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d002      	beq.n	8006fa2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	699b      	ldr	r3, [r3, #24]
 8006fa0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006fa2:	69fb      	ldr	r3, [r7, #28]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d008      	beq.n	8006fba <osThreadNew+0x6e>
 8006fa8:	69fb      	ldr	r3, [r7, #28]
 8006faa:	2b38      	cmp	r3, #56	; 0x38
 8006fac:	d805      	bhi.n	8006fba <osThreadNew+0x6e>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	685b      	ldr	r3, [r3, #4]
 8006fb2:	f003 0301 	and.w	r3, r3, #1
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d001      	beq.n	8006fbe <osThreadNew+0x72>
        return (NULL);
 8006fba:	2300      	movs	r3, #0
 8006fbc:	e054      	b.n	8007068 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	695b      	ldr	r3, [r3, #20]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d003      	beq.n	8006fce <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	695b      	ldr	r3, [r3, #20]
 8006fca:	089b      	lsrs	r3, r3, #2
 8006fcc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	689b      	ldr	r3, [r3, #8]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d00e      	beq.n	8006ff4 <osThreadNew+0xa8>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	68db      	ldr	r3, [r3, #12]
 8006fda:	2ba7      	cmp	r3, #167	; 0xa7
 8006fdc:	d90a      	bls.n	8006ff4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d006      	beq.n	8006ff4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	695b      	ldr	r3, [r3, #20]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d002      	beq.n	8006ff4 <osThreadNew+0xa8>
        mem = 1;
 8006fee:	2301      	movs	r3, #1
 8006ff0:	61bb      	str	r3, [r7, #24]
 8006ff2:	e010      	b.n	8007016 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	689b      	ldr	r3, [r3, #8]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d10c      	bne.n	8007016 <osThreadNew+0xca>
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	68db      	ldr	r3, [r3, #12]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d108      	bne.n	8007016 <osThreadNew+0xca>
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	691b      	ldr	r3, [r3, #16]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d104      	bne.n	8007016 <osThreadNew+0xca>
          mem = 0;
 800700c:	2300      	movs	r3, #0
 800700e:	61bb      	str	r3, [r7, #24]
 8007010:	e001      	b.n	8007016 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007012:	2300      	movs	r3, #0
 8007014:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007016:	69bb      	ldr	r3, [r7, #24]
 8007018:	2b01      	cmp	r3, #1
 800701a:	d110      	bne.n	800703e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007020:	687a      	ldr	r2, [r7, #4]
 8007022:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007024:	9202      	str	r2, [sp, #8]
 8007026:	9301      	str	r3, [sp, #4]
 8007028:	69fb      	ldr	r3, [r7, #28]
 800702a:	9300      	str	r3, [sp, #0]
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	6a3a      	ldr	r2, [r7, #32]
 8007030:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007032:	68f8      	ldr	r0, [r7, #12]
 8007034:	f000 fe0c 	bl	8007c50 <xTaskCreateStatic>
 8007038:	4603      	mov	r3, r0
 800703a:	613b      	str	r3, [r7, #16]
 800703c:	e013      	b.n	8007066 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800703e:	69bb      	ldr	r3, [r7, #24]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d110      	bne.n	8007066 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007044:	6a3b      	ldr	r3, [r7, #32]
 8007046:	b29a      	uxth	r2, r3
 8007048:	f107 0310 	add.w	r3, r7, #16
 800704c:	9301      	str	r3, [sp, #4]
 800704e:	69fb      	ldr	r3, [r7, #28]
 8007050:	9300      	str	r3, [sp, #0]
 8007052:	68bb      	ldr	r3, [r7, #8]
 8007054:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007056:	68f8      	ldr	r0, [r7, #12]
 8007058:	f000 fe57 	bl	8007d0a <xTaskCreate>
 800705c:	4603      	mov	r3, r0
 800705e:	2b01      	cmp	r3, #1
 8007060:	d001      	beq.n	8007066 <osThreadNew+0x11a>
            hTask = NULL;
 8007062:	2300      	movs	r3, #0
 8007064:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007066:	693b      	ldr	r3, [r7, #16]
}
 8007068:	4618      	mov	r0, r3
 800706a:	3728      	adds	r7, #40	; 0x28
 800706c:	46bd      	mov	sp, r7
 800706e:	bd80      	pop	{r7, pc}

08007070 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007070:	b580      	push	{r7, lr}
 8007072:	b084      	sub	sp, #16
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007078:	f3ef 8305 	mrs	r3, IPSR
 800707c:	60bb      	str	r3, [r7, #8]
  return(result);
 800707e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007080:	2b00      	cmp	r3, #0
 8007082:	d003      	beq.n	800708c <osDelay+0x1c>
    stat = osErrorISR;
 8007084:	f06f 0305 	mvn.w	r3, #5
 8007088:	60fb      	str	r3, [r7, #12]
 800708a:	e007      	b.n	800709c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800708c:	2300      	movs	r3, #0
 800708e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d002      	beq.n	800709c <osDelay+0x2c>
      vTaskDelay(ticks);
 8007096:	6878      	ldr	r0, [r7, #4]
 8007098:	f000 ff92 	bl	8007fc0 <vTaskDelay>
    }
  }

  return (stat);
 800709c:	68fb      	ldr	r3, [r7, #12]
}
 800709e:	4618      	mov	r0, r3
 80070a0:	3710      	adds	r7, #16
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd80      	pop	{r7, pc}
	...

080070a8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80070a8:	b480      	push	{r7}
 80070aa:	b085      	sub	sp, #20
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	60f8      	str	r0, [r7, #12]
 80070b0:	60b9      	str	r1, [r7, #8]
 80070b2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	4a07      	ldr	r2, [pc, #28]	; (80070d4 <vApplicationGetIdleTaskMemory+0x2c>)
 80070b8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80070ba:	68bb      	ldr	r3, [r7, #8]
 80070bc:	4a06      	ldr	r2, [pc, #24]	; (80070d8 <vApplicationGetIdleTaskMemory+0x30>)
 80070be:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2280      	movs	r2, #128	; 0x80
 80070c4:	601a      	str	r2, [r3, #0]
}
 80070c6:	bf00      	nop
 80070c8:	3714      	adds	r7, #20
 80070ca:	46bd      	mov	sp, r7
 80070cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d0:	4770      	bx	lr
 80070d2:	bf00      	nop
 80070d4:	20000254 	.word	0x20000254
 80070d8:	200002fc 	.word	0x200002fc

080070dc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80070dc:	b480      	push	{r7}
 80070de:	b085      	sub	sp, #20
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	60f8      	str	r0, [r7, #12]
 80070e4:	60b9      	str	r1, [r7, #8]
 80070e6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	4a07      	ldr	r2, [pc, #28]	; (8007108 <vApplicationGetTimerTaskMemory+0x2c>)
 80070ec:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80070ee:	68bb      	ldr	r3, [r7, #8]
 80070f0:	4a06      	ldr	r2, [pc, #24]	; (800710c <vApplicationGetTimerTaskMemory+0x30>)
 80070f2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80070fa:	601a      	str	r2, [r3, #0]
}
 80070fc:	bf00      	nop
 80070fe:	3714      	adds	r7, #20
 8007100:	46bd      	mov	sp, r7
 8007102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007106:	4770      	bx	lr
 8007108:	200004fc 	.word	0x200004fc
 800710c:	200005a4 	.word	0x200005a4

08007110 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007110:	b480      	push	{r7}
 8007112:	b083      	sub	sp, #12
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	f103 0208 	add.w	r2, r3, #8
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007128:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	f103 0208 	add.w	r2, r3, #8
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	f103 0208 	add.w	r2, r3, #8
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2200      	movs	r2, #0
 8007142:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007144:	bf00      	nop
 8007146:	370c      	adds	r7, #12
 8007148:	46bd      	mov	sp, r7
 800714a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714e:	4770      	bx	lr

08007150 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007150:	b480      	push	{r7}
 8007152:	b083      	sub	sp, #12
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2200      	movs	r2, #0
 800715c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800715e:	bf00      	nop
 8007160:	370c      	adds	r7, #12
 8007162:	46bd      	mov	sp, r7
 8007164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007168:	4770      	bx	lr

0800716a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800716a:	b480      	push	{r7}
 800716c:	b085      	sub	sp, #20
 800716e:	af00      	add	r7, sp, #0
 8007170:	6078      	str	r0, [r7, #4]
 8007172:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	685b      	ldr	r3, [r3, #4]
 8007178:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	68fa      	ldr	r2, [r7, #12]
 800717e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	689a      	ldr	r2, [r3, #8]
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	689b      	ldr	r3, [r3, #8]
 800718c:	683a      	ldr	r2, [r7, #0]
 800718e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	683a      	ldr	r2, [r7, #0]
 8007194:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007196:	683b      	ldr	r3, [r7, #0]
 8007198:	687a      	ldr	r2, [r7, #4]
 800719a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	1c5a      	adds	r2, r3, #1
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	601a      	str	r2, [r3, #0]
}
 80071a6:	bf00      	nop
 80071a8:	3714      	adds	r7, #20
 80071aa:	46bd      	mov	sp, r7
 80071ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b0:	4770      	bx	lr

080071b2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80071b2:	b480      	push	{r7}
 80071b4:	b085      	sub	sp, #20
 80071b6:	af00      	add	r7, sp, #0
 80071b8:	6078      	str	r0, [r7, #4]
 80071ba:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80071c2:	68bb      	ldr	r3, [r7, #8]
 80071c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80071c8:	d103      	bne.n	80071d2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	691b      	ldr	r3, [r3, #16]
 80071ce:	60fb      	str	r3, [r7, #12]
 80071d0:	e00c      	b.n	80071ec <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	3308      	adds	r3, #8
 80071d6:	60fb      	str	r3, [r7, #12]
 80071d8:	e002      	b.n	80071e0 <vListInsert+0x2e>
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	685b      	ldr	r3, [r3, #4]
 80071de:	60fb      	str	r3, [r7, #12]
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	685b      	ldr	r3, [r3, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	68ba      	ldr	r2, [r7, #8]
 80071e8:	429a      	cmp	r2, r3
 80071ea:	d2f6      	bcs.n	80071da <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	685a      	ldr	r2, [r3, #4]
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	685b      	ldr	r3, [r3, #4]
 80071f8:	683a      	ldr	r2, [r7, #0]
 80071fa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	68fa      	ldr	r2, [r7, #12]
 8007200:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	683a      	ldr	r2, [r7, #0]
 8007206:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	687a      	ldr	r2, [r7, #4]
 800720c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	1c5a      	adds	r2, r3, #1
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	601a      	str	r2, [r3, #0]
}
 8007218:	bf00      	nop
 800721a:	3714      	adds	r7, #20
 800721c:	46bd      	mov	sp, r7
 800721e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007222:	4770      	bx	lr

08007224 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007224:	b480      	push	{r7}
 8007226:	b085      	sub	sp, #20
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	691b      	ldr	r3, [r3, #16]
 8007230:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	685b      	ldr	r3, [r3, #4]
 8007236:	687a      	ldr	r2, [r7, #4]
 8007238:	6892      	ldr	r2, [r2, #8]
 800723a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	689b      	ldr	r3, [r3, #8]
 8007240:	687a      	ldr	r2, [r7, #4]
 8007242:	6852      	ldr	r2, [r2, #4]
 8007244:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	685b      	ldr	r3, [r3, #4]
 800724a:	687a      	ldr	r2, [r7, #4]
 800724c:	429a      	cmp	r2, r3
 800724e:	d103      	bne.n	8007258 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	689a      	ldr	r2, [r3, #8]
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2200      	movs	r2, #0
 800725c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	1e5a      	subs	r2, r3, #1
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	681b      	ldr	r3, [r3, #0]
}
 800726c:	4618      	mov	r0, r3
 800726e:	3714      	adds	r7, #20
 8007270:	46bd      	mov	sp, r7
 8007272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007276:	4770      	bx	lr

08007278 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b084      	sub	sp, #16
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
 8007280:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d10a      	bne.n	80072a2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800728c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007290:	f383 8811 	msr	BASEPRI, r3
 8007294:	f3bf 8f6f 	isb	sy
 8007298:	f3bf 8f4f 	dsb	sy
 800729c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800729e:	bf00      	nop
 80072a0:	e7fe      	b.n	80072a0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80072a2:	f002 f877 	bl	8009394 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681a      	ldr	r2, [r3, #0]
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072ae:	68f9      	ldr	r1, [r7, #12]
 80072b0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80072b2:	fb01 f303 	mul.w	r3, r1, r3
 80072b6:	441a      	add	r2, r3
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	2200      	movs	r2, #0
 80072c0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	681a      	ldr	r2, [r3, #0]
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	681a      	ldr	r2, [r3, #0]
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072d2:	3b01      	subs	r3, #1
 80072d4:	68f9      	ldr	r1, [r7, #12]
 80072d6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80072d8:	fb01 f303 	mul.w	r3, r1, r3
 80072dc:	441a      	add	r2, r3
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	22ff      	movs	r2, #255	; 0xff
 80072e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	22ff      	movs	r2, #255	; 0xff
 80072ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d114      	bne.n	8007322 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	691b      	ldr	r3, [r3, #16]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d01a      	beq.n	8007336 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	3310      	adds	r3, #16
 8007304:	4618      	mov	r0, r3
 8007306:	f001 f929 	bl	800855c <xTaskRemoveFromEventList>
 800730a:	4603      	mov	r3, r0
 800730c:	2b00      	cmp	r3, #0
 800730e:	d012      	beq.n	8007336 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007310:	4b0c      	ldr	r3, [pc, #48]	; (8007344 <xQueueGenericReset+0xcc>)
 8007312:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007316:	601a      	str	r2, [r3, #0]
 8007318:	f3bf 8f4f 	dsb	sy
 800731c:	f3bf 8f6f 	isb	sy
 8007320:	e009      	b.n	8007336 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	3310      	adds	r3, #16
 8007326:	4618      	mov	r0, r3
 8007328:	f7ff fef2 	bl	8007110 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	3324      	adds	r3, #36	; 0x24
 8007330:	4618      	mov	r0, r3
 8007332:	f7ff feed 	bl	8007110 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007336:	f002 f85d 	bl	80093f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800733a:	2301      	movs	r3, #1
}
 800733c:	4618      	mov	r0, r3
 800733e:	3710      	adds	r7, #16
 8007340:	46bd      	mov	sp, r7
 8007342:	bd80      	pop	{r7, pc}
 8007344:	e000ed04 	.word	0xe000ed04

08007348 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007348:	b580      	push	{r7, lr}
 800734a:	b08e      	sub	sp, #56	; 0x38
 800734c:	af02      	add	r7, sp, #8
 800734e:	60f8      	str	r0, [r7, #12]
 8007350:	60b9      	str	r1, [r7, #8]
 8007352:	607a      	str	r2, [r7, #4]
 8007354:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d10a      	bne.n	8007372 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800735c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007360:	f383 8811 	msr	BASEPRI, r3
 8007364:	f3bf 8f6f 	isb	sy
 8007368:	f3bf 8f4f 	dsb	sy
 800736c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800736e:	bf00      	nop
 8007370:	e7fe      	b.n	8007370 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d10a      	bne.n	800738e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800737c:	f383 8811 	msr	BASEPRI, r3
 8007380:	f3bf 8f6f 	isb	sy
 8007384:	f3bf 8f4f 	dsb	sy
 8007388:	627b      	str	r3, [r7, #36]	; 0x24
}
 800738a:	bf00      	nop
 800738c:	e7fe      	b.n	800738c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d002      	beq.n	800739a <xQueueGenericCreateStatic+0x52>
 8007394:	68bb      	ldr	r3, [r7, #8]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d001      	beq.n	800739e <xQueueGenericCreateStatic+0x56>
 800739a:	2301      	movs	r3, #1
 800739c:	e000      	b.n	80073a0 <xQueueGenericCreateStatic+0x58>
 800739e:	2300      	movs	r3, #0
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d10a      	bne.n	80073ba <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80073a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073a8:	f383 8811 	msr	BASEPRI, r3
 80073ac:	f3bf 8f6f 	isb	sy
 80073b0:	f3bf 8f4f 	dsb	sy
 80073b4:	623b      	str	r3, [r7, #32]
}
 80073b6:	bf00      	nop
 80073b8:	e7fe      	b.n	80073b8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d102      	bne.n	80073c6 <xQueueGenericCreateStatic+0x7e>
 80073c0:	68bb      	ldr	r3, [r7, #8]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d101      	bne.n	80073ca <xQueueGenericCreateStatic+0x82>
 80073c6:	2301      	movs	r3, #1
 80073c8:	e000      	b.n	80073cc <xQueueGenericCreateStatic+0x84>
 80073ca:	2300      	movs	r3, #0
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d10a      	bne.n	80073e6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80073d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073d4:	f383 8811 	msr	BASEPRI, r3
 80073d8:	f3bf 8f6f 	isb	sy
 80073dc:	f3bf 8f4f 	dsb	sy
 80073e0:	61fb      	str	r3, [r7, #28]
}
 80073e2:	bf00      	nop
 80073e4:	e7fe      	b.n	80073e4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80073e6:	2350      	movs	r3, #80	; 0x50
 80073e8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80073ea:	697b      	ldr	r3, [r7, #20]
 80073ec:	2b50      	cmp	r3, #80	; 0x50
 80073ee:	d00a      	beq.n	8007406 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80073f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073f4:	f383 8811 	msr	BASEPRI, r3
 80073f8:	f3bf 8f6f 	isb	sy
 80073fc:	f3bf 8f4f 	dsb	sy
 8007400:	61bb      	str	r3, [r7, #24]
}
 8007402:	bf00      	nop
 8007404:	e7fe      	b.n	8007404 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007406:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800740c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800740e:	2b00      	cmp	r3, #0
 8007410:	d00d      	beq.n	800742e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007414:	2201      	movs	r2, #1
 8007416:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800741a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800741e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007420:	9300      	str	r3, [sp, #0]
 8007422:	4613      	mov	r3, r2
 8007424:	687a      	ldr	r2, [r7, #4]
 8007426:	68b9      	ldr	r1, [r7, #8]
 8007428:	68f8      	ldr	r0, [r7, #12]
 800742a:	f000 f805 	bl	8007438 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800742e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007430:	4618      	mov	r0, r3
 8007432:	3730      	adds	r7, #48	; 0x30
 8007434:	46bd      	mov	sp, r7
 8007436:	bd80      	pop	{r7, pc}

08007438 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b084      	sub	sp, #16
 800743c:	af00      	add	r7, sp, #0
 800743e:	60f8      	str	r0, [r7, #12]
 8007440:	60b9      	str	r1, [r7, #8]
 8007442:	607a      	str	r2, [r7, #4]
 8007444:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007446:	68bb      	ldr	r3, [r7, #8]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d103      	bne.n	8007454 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800744c:	69bb      	ldr	r3, [r7, #24]
 800744e:	69ba      	ldr	r2, [r7, #24]
 8007450:	601a      	str	r2, [r3, #0]
 8007452:	e002      	b.n	800745a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007454:	69bb      	ldr	r3, [r7, #24]
 8007456:	687a      	ldr	r2, [r7, #4]
 8007458:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800745a:	69bb      	ldr	r3, [r7, #24]
 800745c:	68fa      	ldr	r2, [r7, #12]
 800745e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007460:	69bb      	ldr	r3, [r7, #24]
 8007462:	68ba      	ldr	r2, [r7, #8]
 8007464:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007466:	2101      	movs	r1, #1
 8007468:	69b8      	ldr	r0, [r7, #24]
 800746a:	f7ff ff05 	bl	8007278 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800746e:	69bb      	ldr	r3, [r7, #24]
 8007470:	78fa      	ldrb	r2, [r7, #3]
 8007472:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007476:	bf00      	nop
 8007478:	3710      	adds	r7, #16
 800747a:	46bd      	mov	sp, r7
 800747c:	bd80      	pop	{r7, pc}
	...

08007480 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b08e      	sub	sp, #56	; 0x38
 8007484:	af00      	add	r7, sp, #0
 8007486:	60f8      	str	r0, [r7, #12]
 8007488:	60b9      	str	r1, [r7, #8]
 800748a:	607a      	str	r2, [r7, #4]
 800748c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800748e:	2300      	movs	r3, #0
 8007490:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007498:	2b00      	cmp	r3, #0
 800749a:	d10a      	bne.n	80074b2 <xQueueGenericSend+0x32>
	__asm volatile
 800749c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074a0:	f383 8811 	msr	BASEPRI, r3
 80074a4:	f3bf 8f6f 	isb	sy
 80074a8:	f3bf 8f4f 	dsb	sy
 80074ac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80074ae:	bf00      	nop
 80074b0:	e7fe      	b.n	80074b0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80074b2:	68bb      	ldr	r3, [r7, #8]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d103      	bne.n	80074c0 <xQueueGenericSend+0x40>
 80074b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d101      	bne.n	80074c4 <xQueueGenericSend+0x44>
 80074c0:	2301      	movs	r3, #1
 80074c2:	e000      	b.n	80074c6 <xQueueGenericSend+0x46>
 80074c4:	2300      	movs	r3, #0
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d10a      	bne.n	80074e0 <xQueueGenericSend+0x60>
	__asm volatile
 80074ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074ce:	f383 8811 	msr	BASEPRI, r3
 80074d2:	f3bf 8f6f 	isb	sy
 80074d6:	f3bf 8f4f 	dsb	sy
 80074da:	627b      	str	r3, [r7, #36]	; 0x24
}
 80074dc:	bf00      	nop
 80074de:	e7fe      	b.n	80074de <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	2b02      	cmp	r3, #2
 80074e4:	d103      	bne.n	80074ee <xQueueGenericSend+0x6e>
 80074e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074ea:	2b01      	cmp	r3, #1
 80074ec:	d101      	bne.n	80074f2 <xQueueGenericSend+0x72>
 80074ee:	2301      	movs	r3, #1
 80074f0:	e000      	b.n	80074f4 <xQueueGenericSend+0x74>
 80074f2:	2300      	movs	r3, #0
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d10a      	bne.n	800750e <xQueueGenericSend+0x8e>
	__asm volatile
 80074f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074fc:	f383 8811 	msr	BASEPRI, r3
 8007500:	f3bf 8f6f 	isb	sy
 8007504:	f3bf 8f4f 	dsb	sy
 8007508:	623b      	str	r3, [r7, #32]
}
 800750a:	bf00      	nop
 800750c:	e7fe      	b.n	800750c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800750e:	f001 f9e7 	bl	80088e0 <xTaskGetSchedulerState>
 8007512:	4603      	mov	r3, r0
 8007514:	2b00      	cmp	r3, #0
 8007516:	d102      	bne.n	800751e <xQueueGenericSend+0x9e>
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d101      	bne.n	8007522 <xQueueGenericSend+0xa2>
 800751e:	2301      	movs	r3, #1
 8007520:	e000      	b.n	8007524 <xQueueGenericSend+0xa4>
 8007522:	2300      	movs	r3, #0
 8007524:	2b00      	cmp	r3, #0
 8007526:	d10a      	bne.n	800753e <xQueueGenericSend+0xbe>
	__asm volatile
 8007528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800752c:	f383 8811 	msr	BASEPRI, r3
 8007530:	f3bf 8f6f 	isb	sy
 8007534:	f3bf 8f4f 	dsb	sy
 8007538:	61fb      	str	r3, [r7, #28]
}
 800753a:	bf00      	nop
 800753c:	e7fe      	b.n	800753c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800753e:	f001 ff29 	bl	8009394 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007544:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007548:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800754a:	429a      	cmp	r2, r3
 800754c:	d302      	bcc.n	8007554 <xQueueGenericSend+0xd4>
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	2b02      	cmp	r3, #2
 8007552:	d129      	bne.n	80075a8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007554:	683a      	ldr	r2, [r7, #0]
 8007556:	68b9      	ldr	r1, [r7, #8]
 8007558:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800755a:	f000 fa0b 	bl	8007974 <prvCopyDataToQueue>
 800755e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007564:	2b00      	cmp	r3, #0
 8007566:	d010      	beq.n	800758a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800756a:	3324      	adds	r3, #36	; 0x24
 800756c:	4618      	mov	r0, r3
 800756e:	f000 fff5 	bl	800855c <xTaskRemoveFromEventList>
 8007572:	4603      	mov	r3, r0
 8007574:	2b00      	cmp	r3, #0
 8007576:	d013      	beq.n	80075a0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007578:	4b3f      	ldr	r3, [pc, #252]	; (8007678 <xQueueGenericSend+0x1f8>)
 800757a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800757e:	601a      	str	r2, [r3, #0]
 8007580:	f3bf 8f4f 	dsb	sy
 8007584:	f3bf 8f6f 	isb	sy
 8007588:	e00a      	b.n	80075a0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800758a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800758c:	2b00      	cmp	r3, #0
 800758e:	d007      	beq.n	80075a0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007590:	4b39      	ldr	r3, [pc, #228]	; (8007678 <xQueueGenericSend+0x1f8>)
 8007592:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007596:	601a      	str	r2, [r3, #0]
 8007598:	f3bf 8f4f 	dsb	sy
 800759c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80075a0:	f001 ff28 	bl	80093f4 <vPortExitCritical>
				return pdPASS;
 80075a4:	2301      	movs	r3, #1
 80075a6:	e063      	b.n	8007670 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d103      	bne.n	80075b6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80075ae:	f001 ff21 	bl	80093f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80075b2:	2300      	movs	r3, #0
 80075b4:	e05c      	b.n	8007670 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80075b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d106      	bne.n	80075ca <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80075bc:	f107 0314 	add.w	r3, r7, #20
 80075c0:	4618      	mov	r0, r3
 80075c2:	f001 f82f 	bl	8008624 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80075c6:	2301      	movs	r3, #1
 80075c8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80075ca:	f001 ff13 	bl	80093f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80075ce:	f000 fd9b 	bl	8008108 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80075d2:	f001 fedf 	bl	8009394 <vPortEnterCritical>
 80075d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80075dc:	b25b      	sxtb	r3, r3
 80075de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80075e2:	d103      	bne.n	80075ec <xQueueGenericSend+0x16c>
 80075e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075e6:	2200      	movs	r2, #0
 80075e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80075ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80075f2:	b25b      	sxtb	r3, r3
 80075f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80075f8:	d103      	bne.n	8007602 <xQueueGenericSend+0x182>
 80075fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075fc:	2200      	movs	r2, #0
 80075fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007602:	f001 fef7 	bl	80093f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007606:	1d3a      	adds	r2, r7, #4
 8007608:	f107 0314 	add.w	r3, r7, #20
 800760c:	4611      	mov	r1, r2
 800760e:	4618      	mov	r0, r3
 8007610:	f001 f81e 	bl	8008650 <xTaskCheckForTimeOut>
 8007614:	4603      	mov	r3, r0
 8007616:	2b00      	cmp	r3, #0
 8007618:	d124      	bne.n	8007664 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800761a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800761c:	f000 faa2 	bl	8007b64 <prvIsQueueFull>
 8007620:	4603      	mov	r3, r0
 8007622:	2b00      	cmp	r3, #0
 8007624:	d018      	beq.n	8007658 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007628:	3310      	adds	r3, #16
 800762a:	687a      	ldr	r2, [r7, #4]
 800762c:	4611      	mov	r1, r2
 800762e:	4618      	mov	r0, r3
 8007630:	f000 ff44 	bl	80084bc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007634:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007636:	f000 fa2d 	bl	8007a94 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800763a:	f000 fd73 	bl	8008124 <xTaskResumeAll>
 800763e:	4603      	mov	r3, r0
 8007640:	2b00      	cmp	r3, #0
 8007642:	f47f af7c 	bne.w	800753e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007646:	4b0c      	ldr	r3, [pc, #48]	; (8007678 <xQueueGenericSend+0x1f8>)
 8007648:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800764c:	601a      	str	r2, [r3, #0]
 800764e:	f3bf 8f4f 	dsb	sy
 8007652:	f3bf 8f6f 	isb	sy
 8007656:	e772      	b.n	800753e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007658:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800765a:	f000 fa1b 	bl	8007a94 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800765e:	f000 fd61 	bl	8008124 <xTaskResumeAll>
 8007662:	e76c      	b.n	800753e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007664:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007666:	f000 fa15 	bl	8007a94 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800766a:	f000 fd5b 	bl	8008124 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800766e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007670:	4618      	mov	r0, r3
 8007672:	3738      	adds	r7, #56	; 0x38
 8007674:	46bd      	mov	sp, r7
 8007676:	bd80      	pop	{r7, pc}
 8007678:	e000ed04 	.word	0xe000ed04

0800767c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b090      	sub	sp, #64	; 0x40
 8007680:	af00      	add	r7, sp, #0
 8007682:	60f8      	str	r0, [r7, #12]
 8007684:	60b9      	str	r1, [r7, #8]
 8007686:	607a      	str	r2, [r7, #4]
 8007688:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800768e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007690:	2b00      	cmp	r3, #0
 8007692:	d10a      	bne.n	80076aa <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007698:	f383 8811 	msr	BASEPRI, r3
 800769c:	f3bf 8f6f 	isb	sy
 80076a0:	f3bf 8f4f 	dsb	sy
 80076a4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80076a6:	bf00      	nop
 80076a8:	e7fe      	b.n	80076a8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80076aa:	68bb      	ldr	r3, [r7, #8]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d103      	bne.n	80076b8 <xQueueGenericSendFromISR+0x3c>
 80076b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d101      	bne.n	80076bc <xQueueGenericSendFromISR+0x40>
 80076b8:	2301      	movs	r3, #1
 80076ba:	e000      	b.n	80076be <xQueueGenericSendFromISR+0x42>
 80076bc:	2300      	movs	r3, #0
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d10a      	bne.n	80076d8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80076c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076c6:	f383 8811 	msr	BASEPRI, r3
 80076ca:	f3bf 8f6f 	isb	sy
 80076ce:	f3bf 8f4f 	dsb	sy
 80076d2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80076d4:	bf00      	nop
 80076d6:	e7fe      	b.n	80076d6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	2b02      	cmp	r3, #2
 80076dc:	d103      	bne.n	80076e6 <xQueueGenericSendFromISR+0x6a>
 80076de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076e2:	2b01      	cmp	r3, #1
 80076e4:	d101      	bne.n	80076ea <xQueueGenericSendFromISR+0x6e>
 80076e6:	2301      	movs	r3, #1
 80076e8:	e000      	b.n	80076ec <xQueueGenericSendFromISR+0x70>
 80076ea:	2300      	movs	r3, #0
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d10a      	bne.n	8007706 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80076f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076f4:	f383 8811 	msr	BASEPRI, r3
 80076f8:	f3bf 8f6f 	isb	sy
 80076fc:	f3bf 8f4f 	dsb	sy
 8007700:	623b      	str	r3, [r7, #32]
}
 8007702:	bf00      	nop
 8007704:	e7fe      	b.n	8007704 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007706:	f001 ff27 	bl	8009558 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800770a:	f3ef 8211 	mrs	r2, BASEPRI
 800770e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007712:	f383 8811 	msr	BASEPRI, r3
 8007716:	f3bf 8f6f 	isb	sy
 800771a:	f3bf 8f4f 	dsb	sy
 800771e:	61fa      	str	r2, [r7, #28]
 8007720:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007722:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007724:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007728:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800772a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800772c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800772e:	429a      	cmp	r2, r3
 8007730:	d302      	bcc.n	8007738 <xQueueGenericSendFromISR+0xbc>
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	2b02      	cmp	r3, #2
 8007736:	d12f      	bne.n	8007798 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800773a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800773e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007746:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007748:	683a      	ldr	r2, [r7, #0]
 800774a:	68b9      	ldr	r1, [r7, #8]
 800774c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800774e:	f000 f911 	bl	8007974 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007752:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8007756:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800775a:	d112      	bne.n	8007782 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800775c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800775e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007760:	2b00      	cmp	r3, #0
 8007762:	d016      	beq.n	8007792 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007766:	3324      	adds	r3, #36	; 0x24
 8007768:	4618      	mov	r0, r3
 800776a:	f000 fef7 	bl	800855c <xTaskRemoveFromEventList>
 800776e:	4603      	mov	r3, r0
 8007770:	2b00      	cmp	r3, #0
 8007772:	d00e      	beq.n	8007792 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d00b      	beq.n	8007792 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2201      	movs	r2, #1
 800777e:	601a      	str	r2, [r3, #0]
 8007780:	e007      	b.n	8007792 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007782:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007786:	3301      	adds	r3, #1
 8007788:	b2db      	uxtb	r3, r3
 800778a:	b25a      	sxtb	r2, r3
 800778c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800778e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007792:	2301      	movs	r3, #1
 8007794:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8007796:	e001      	b.n	800779c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007798:	2300      	movs	r3, #0
 800779a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800779c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800779e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80077a0:	697b      	ldr	r3, [r7, #20]
 80077a2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80077a6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80077a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80077aa:	4618      	mov	r0, r3
 80077ac:	3740      	adds	r7, #64	; 0x40
 80077ae:	46bd      	mov	sp, r7
 80077b0:	bd80      	pop	{r7, pc}
	...

080077b4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b08c      	sub	sp, #48	; 0x30
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	60f8      	str	r0, [r7, #12]
 80077bc:	60b9      	str	r1, [r7, #8]
 80077be:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80077c0:	2300      	movs	r3, #0
 80077c2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80077c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d10a      	bne.n	80077e4 <xQueueReceive+0x30>
	__asm volatile
 80077ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077d2:	f383 8811 	msr	BASEPRI, r3
 80077d6:	f3bf 8f6f 	isb	sy
 80077da:	f3bf 8f4f 	dsb	sy
 80077de:	623b      	str	r3, [r7, #32]
}
 80077e0:	bf00      	nop
 80077e2:	e7fe      	b.n	80077e2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80077e4:	68bb      	ldr	r3, [r7, #8]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d103      	bne.n	80077f2 <xQueueReceive+0x3e>
 80077ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d101      	bne.n	80077f6 <xQueueReceive+0x42>
 80077f2:	2301      	movs	r3, #1
 80077f4:	e000      	b.n	80077f8 <xQueueReceive+0x44>
 80077f6:	2300      	movs	r3, #0
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d10a      	bne.n	8007812 <xQueueReceive+0x5e>
	__asm volatile
 80077fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007800:	f383 8811 	msr	BASEPRI, r3
 8007804:	f3bf 8f6f 	isb	sy
 8007808:	f3bf 8f4f 	dsb	sy
 800780c:	61fb      	str	r3, [r7, #28]
}
 800780e:	bf00      	nop
 8007810:	e7fe      	b.n	8007810 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007812:	f001 f865 	bl	80088e0 <xTaskGetSchedulerState>
 8007816:	4603      	mov	r3, r0
 8007818:	2b00      	cmp	r3, #0
 800781a:	d102      	bne.n	8007822 <xQueueReceive+0x6e>
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d101      	bne.n	8007826 <xQueueReceive+0x72>
 8007822:	2301      	movs	r3, #1
 8007824:	e000      	b.n	8007828 <xQueueReceive+0x74>
 8007826:	2300      	movs	r3, #0
 8007828:	2b00      	cmp	r3, #0
 800782a:	d10a      	bne.n	8007842 <xQueueReceive+0x8e>
	__asm volatile
 800782c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007830:	f383 8811 	msr	BASEPRI, r3
 8007834:	f3bf 8f6f 	isb	sy
 8007838:	f3bf 8f4f 	dsb	sy
 800783c:	61bb      	str	r3, [r7, #24]
}
 800783e:	bf00      	nop
 8007840:	e7fe      	b.n	8007840 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007842:	f001 fda7 	bl	8009394 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800784a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800784c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800784e:	2b00      	cmp	r3, #0
 8007850:	d01f      	beq.n	8007892 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007852:	68b9      	ldr	r1, [r7, #8]
 8007854:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007856:	f000 f8f7 	bl	8007a48 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800785a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800785c:	1e5a      	subs	r2, r3, #1
 800785e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007860:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007864:	691b      	ldr	r3, [r3, #16]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d00f      	beq.n	800788a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800786a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800786c:	3310      	adds	r3, #16
 800786e:	4618      	mov	r0, r3
 8007870:	f000 fe74 	bl	800855c <xTaskRemoveFromEventList>
 8007874:	4603      	mov	r3, r0
 8007876:	2b00      	cmp	r3, #0
 8007878:	d007      	beq.n	800788a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800787a:	4b3d      	ldr	r3, [pc, #244]	; (8007970 <xQueueReceive+0x1bc>)
 800787c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007880:	601a      	str	r2, [r3, #0]
 8007882:	f3bf 8f4f 	dsb	sy
 8007886:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800788a:	f001 fdb3 	bl	80093f4 <vPortExitCritical>
				return pdPASS;
 800788e:	2301      	movs	r3, #1
 8007890:	e069      	b.n	8007966 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d103      	bne.n	80078a0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007898:	f001 fdac 	bl	80093f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800789c:	2300      	movs	r3, #0
 800789e:	e062      	b.n	8007966 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80078a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d106      	bne.n	80078b4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80078a6:	f107 0310 	add.w	r3, r7, #16
 80078aa:	4618      	mov	r0, r3
 80078ac:	f000 feba 	bl	8008624 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80078b0:	2301      	movs	r3, #1
 80078b2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80078b4:	f001 fd9e 	bl	80093f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80078b8:	f000 fc26 	bl	8008108 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80078bc:	f001 fd6a 	bl	8009394 <vPortEnterCritical>
 80078c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078c2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80078c6:	b25b      	sxtb	r3, r3
 80078c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80078cc:	d103      	bne.n	80078d6 <xQueueReceive+0x122>
 80078ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078d0:	2200      	movs	r2, #0
 80078d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80078d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80078dc:	b25b      	sxtb	r3, r3
 80078de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80078e2:	d103      	bne.n	80078ec <xQueueReceive+0x138>
 80078e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078e6:	2200      	movs	r2, #0
 80078e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80078ec:	f001 fd82 	bl	80093f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80078f0:	1d3a      	adds	r2, r7, #4
 80078f2:	f107 0310 	add.w	r3, r7, #16
 80078f6:	4611      	mov	r1, r2
 80078f8:	4618      	mov	r0, r3
 80078fa:	f000 fea9 	bl	8008650 <xTaskCheckForTimeOut>
 80078fe:	4603      	mov	r3, r0
 8007900:	2b00      	cmp	r3, #0
 8007902:	d123      	bne.n	800794c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007904:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007906:	f000 f917 	bl	8007b38 <prvIsQueueEmpty>
 800790a:	4603      	mov	r3, r0
 800790c:	2b00      	cmp	r3, #0
 800790e:	d017      	beq.n	8007940 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007912:	3324      	adds	r3, #36	; 0x24
 8007914:	687a      	ldr	r2, [r7, #4]
 8007916:	4611      	mov	r1, r2
 8007918:	4618      	mov	r0, r3
 800791a:	f000 fdcf 	bl	80084bc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800791e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007920:	f000 f8b8 	bl	8007a94 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007924:	f000 fbfe 	bl	8008124 <xTaskResumeAll>
 8007928:	4603      	mov	r3, r0
 800792a:	2b00      	cmp	r3, #0
 800792c:	d189      	bne.n	8007842 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800792e:	4b10      	ldr	r3, [pc, #64]	; (8007970 <xQueueReceive+0x1bc>)
 8007930:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007934:	601a      	str	r2, [r3, #0]
 8007936:	f3bf 8f4f 	dsb	sy
 800793a:	f3bf 8f6f 	isb	sy
 800793e:	e780      	b.n	8007842 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007940:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007942:	f000 f8a7 	bl	8007a94 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007946:	f000 fbed 	bl	8008124 <xTaskResumeAll>
 800794a:	e77a      	b.n	8007842 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800794c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800794e:	f000 f8a1 	bl	8007a94 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007952:	f000 fbe7 	bl	8008124 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007956:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007958:	f000 f8ee 	bl	8007b38 <prvIsQueueEmpty>
 800795c:	4603      	mov	r3, r0
 800795e:	2b00      	cmp	r3, #0
 8007960:	f43f af6f 	beq.w	8007842 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007964:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007966:	4618      	mov	r0, r3
 8007968:	3730      	adds	r7, #48	; 0x30
 800796a:	46bd      	mov	sp, r7
 800796c:	bd80      	pop	{r7, pc}
 800796e:	bf00      	nop
 8007970:	e000ed04 	.word	0xe000ed04

08007974 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007974:	b580      	push	{r7, lr}
 8007976:	b086      	sub	sp, #24
 8007978:	af00      	add	r7, sp, #0
 800797a:	60f8      	str	r0, [r7, #12]
 800797c:	60b9      	str	r1, [r7, #8]
 800797e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007980:	2300      	movs	r3, #0
 8007982:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007988:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800798e:	2b00      	cmp	r3, #0
 8007990:	d10d      	bne.n	80079ae <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d14d      	bne.n	8007a36 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	689b      	ldr	r3, [r3, #8]
 800799e:	4618      	mov	r0, r3
 80079a0:	f000 ffbc 	bl	800891c <xTaskPriorityDisinherit>
 80079a4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	2200      	movs	r2, #0
 80079aa:	609a      	str	r2, [r3, #8]
 80079ac:	e043      	b.n	8007a36 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d119      	bne.n	80079e8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	6858      	ldr	r0, [r3, #4]
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079bc:	461a      	mov	r2, r3
 80079be:	68b9      	ldr	r1, [r7, #8]
 80079c0:	f002 fd94 	bl	800a4ec <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	685a      	ldr	r2, [r3, #4]
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079cc:	441a      	add	r2, r3
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	685a      	ldr	r2, [r3, #4]
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	689b      	ldr	r3, [r3, #8]
 80079da:	429a      	cmp	r2, r3
 80079dc:	d32b      	bcc.n	8007a36 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	681a      	ldr	r2, [r3, #0]
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	605a      	str	r2, [r3, #4]
 80079e6:	e026      	b.n	8007a36 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	68d8      	ldr	r0, [r3, #12]
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079f0:	461a      	mov	r2, r3
 80079f2:	68b9      	ldr	r1, [r7, #8]
 80079f4:	f002 fd7a 	bl	800a4ec <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	68da      	ldr	r2, [r3, #12]
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a00:	425b      	negs	r3, r3
 8007a02:	441a      	add	r2, r3
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	68da      	ldr	r2, [r3, #12]
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	429a      	cmp	r2, r3
 8007a12:	d207      	bcs.n	8007a24 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	689a      	ldr	r2, [r3, #8]
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a1c:	425b      	negs	r3, r3
 8007a1e:	441a      	add	r2, r3
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2b02      	cmp	r3, #2
 8007a28:	d105      	bne.n	8007a36 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007a2a:	693b      	ldr	r3, [r7, #16]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d002      	beq.n	8007a36 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007a30:	693b      	ldr	r3, [r7, #16]
 8007a32:	3b01      	subs	r3, #1
 8007a34:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007a36:	693b      	ldr	r3, [r7, #16]
 8007a38:	1c5a      	adds	r2, r3, #1
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007a3e:	697b      	ldr	r3, [r7, #20]
}
 8007a40:	4618      	mov	r0, r3
 8007a42:	3718      	adds	r7, #24
 8007a44:	46bd      	mov	sp, r7
 8007a46:	bd80      	pop	{r7, pc}

08007a48 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b082      	sub	sp, #8
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
 8007a50:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d018      	beq.n	8007a8c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	68da      	ldr	r2, [r3, #12]
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a62:	441a      	add	r2, r3
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	68da      	ldr	r2, [r3, #12]
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	689b      	ldr	r3, [r3, #8]
 8007a70:	429a      	cmp	r2, r3
 8007a72:	d303      	bcc.n	8007a7c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681a      	ldr	r2, [r3, #0]
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	68d9      	ldr	r1, [r3, #12]
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a84:	461a      	mov	r2, r3
 8007a86:	6838      	ldr	r0, [r7, #0]
 8007a88:	f002 fd30 	bl	800a4ec <memcpy>
	}
}
 8007a8c:	bf00      	nop
 8007a8e:	3708      	adds	r7, #8
 8007a90:	46bd      	mov	sp, r7
 8007a92:	bd80      	pop	{r7, pc}

08007a94 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b084      	sub	sp, #16
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007a9c:	f001 fc7a 	bl	8009394 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007aa6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007aa8:	e011      	b.n	8007ace <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d012      	beq.n	8007ad8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	3324      	adds	r3, #36	; 0x24
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	f000 fd50 	bl	800855c <xTaskRemoveFromEventList>
 8007abc:	4603      	mov	r3, r0
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d001      	beq.n	8007ac6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007ac2:	f000 fe27 	bl	8008714 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007ac6:	7bfb      	ldrb	r3, [r7, #15]
 8007ac8:	3b01      	subs	r3, #1
 8007aca:	b2db      	uxtb	r3, r3
 8007acc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007ace:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	dce9      	bgt.n	8007aaa <prvUnlockQueue+0x16>
 8007ad6:	e000      	b.n	8007ada <prvUnlockQueue+0x46>
					break;
 8007ad8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	22ff      	movs	r2, #255	; 0xff
 8007ade:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007ae2:	f001 fc87 	bl	80093f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007ae6:	f001 fc55 	bl	8009394 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007af0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007af2:	e011      	b.n	8007b18 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	691b      	ldr	r3, [r3, #16]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d012      	beq.n	8007b22 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	3310      	adds	r3, #16
 8007b00:	4618      	mov	r0, r3
 8007b02:	f000 fd2b 	bl	800855c <xTaskRemoveFromEventList>
 8007b06:	4603      	mov	r3, r0
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d001      	beq.n	8007b10 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007b0c:	f000 fe02 	bl	8008714 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007b10:	7bbb      	ldrb	r3, [r7, #14]
 8007b12:	3b01      	subs	r3, #1
 8007b14:	b2db      	uxtb	r3, r3
 8007b16:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007b18:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	dce9      	bgt.n	8007af4 <prvUnlockQueue+0x60>
 8007b20:	e000      	b.n	8007b24 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007b22:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	22ff      	movs	r2, #255	; 0xff
 8007b28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007b2c:	f001 fc62 	bl	80093f4 <vPortExitCritical>
}
 8007b30:	bf00      	nop
 8007b32:	3710      	adds	r7, #16
 8007b34:	46bd      	mov	sp, r7
 8007b36:	bd80      	pop	{r7, pc}

08007b38 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b084      	sub	sp, #16
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007b40:	f001 fc28 	bl	8009394 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d102      	bne.n	8007b52 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007b4c:	2301      	movs	r3, #1
 8007b4e:	60fb      	str	r3, [r7, #12]
 8007b50:	e001      	b.n	8007b56 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007b52:	2300      	movs	r3, #0
 8007b54:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007b56:	f001 fc4d 	bl	80093f4 <vPortExitCritical>

	return xReturn;
 8007b5a:	68fb      	ldr	r3, [r7, #12]
}
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	3710      	adds	r7, #16
 8007b60:	46bd      	mov	sp, r7
 8007b62:	bd80      	pop	{r7, pc}

08007b64 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b084      	sub	sp, #16
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007b6c:	f001 fc12 	bl	8009394 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b78:	429a      	cmp	r2, r3
 8007b7a:	d102      	bne.n	8007b82 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007b7c:	2301      	movs	r3, #1
 8007b7e:	60fb      	str	r3, [r7, #12]
 8007b80:	e001      	b.n	8007b86 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007b82:	2300      	movs	r3, #0
 8007b84:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007b86:	f001 fc35 	bl	80093f4 <vPortExitCritical>

	return xReturn;
 8007b8a:	68fb      	ldr	r3, [r7, #12]
}
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	3710      	adds	r7, #16
 8007b90:	46bd      	mov	sp, r7
 8007b92:	bd80      	pop	{r7, pc}

08007b94 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007b94:	b480      	push	{r7}
 8007b96:	b085      	sub	sp, #20
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
 8007b9c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	60fb      	str	r3, [r7, #12]
 8007ba2:	e014      	b.n	8007bce <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007ba4:	4a0f      	ldr	r2, [pc, #60]	; (8007be4 <vQueueAddToRegistry+0x50>)
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d10b      	bne.n	8007bc8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007bb0:	490c      	ldr	r1, [pc, #48]	; (8007be4 <vQueueAddToRegistry+0x50>)
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	683a      	ldr	r2, [r7, #0]
 8007bb6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007bba:	4a0a      	ldr	r2, [pc, #40]	; (8007be4 <vQueueAddToRegistry+0x50>)
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	00db      	lsls	r3, r3, #3
 8007bc0:	4413      	add	r3, r2
 8007bc2:	687a      	ldr	r2, [r7, #4]
 8007bc4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007bc6:	e006      	b.n	8007bd6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	3301      	adds	r3, #1
 8007bcc:	60fb      	str	r3, [r7, #12]
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	2b07      	cmp	r3, #7
 8007bd2:	d9e7      	bls.n	8007ba4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007bd4:	bf00      	nop
 8007bd6:	bf00      	nop
 8007bd8:	3714      	adds	r7, #20
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be0:	4770      	bx	lr
 8007be2:	bf00      	nop
 8007be4:	200009a4 	.word	0x200009a4

08007be8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b086      	sub	sp, #24
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	60f8      	str	r0, [r7, #12]
 8007bf0:	60b9      	str	r1, [r7, #8]
 8007bf2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007bf8:	f001 fbcc 	bl	8009394 <vPortEnterCritical>
 8007bfc:	697b      	ldr	r3, [r7, #20]
 8007bfe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007c02:	b25b      	sxtb	r3, r3
 8007c04:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007c08:	d103      	bne.n	8007c12 <vQueueWaitForMessageRestricted+0x2a>
 8007c0a:	697b      	ldr	r3, [r7, #20]
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007c12:	697b      	ldr	r3, [r7, #20]
 8007c14:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007c18:	b25b      	sxtb	r3, r3
 8007c1a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007c1e:	d103      	bne.n	8007c28 <vQueueWaitForMessageRestricted+0x40>
 8007c20:	697b      	ldr	r3, [r7, #20]
 8007c22:	2200      	movs	r2, #0
 8007c24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007c28:	f001 fbe4 	bl	80093f4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007c2c:	697b      	ldr	r3, [r7, #20]
 8007c2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d106      	bne.n	8007c42 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007c34:	697b      	ldr	r3, [r7, #20]
 8007c36:	3324      	adds	r3, #36	; 0x24
 8007c38:	687a      	ldr	r2, [r7, #4]
 8007c3a:	68b9      	ldr	r1, [r7, #8]
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	f000 fc61 	bl	8008504 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007c42:	6978      	ldr	r0, [r7, #20]
 8007c44:	f7ff ff26 	bl	8007a94 <prvUnlockQueue>
	}
 8007c48:	bf00      	nop
 8007c4a:	3718      	adds	r7, #24
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	bd80      	pop	{r7, pc}

08007c50 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b08e      	sub	sp, #56	; 0x38
 8007c54:	af04      	add	r7, sp, #16
 8007c56:	60f8      	str	r0, [r7, #12]
 8007c58:	60b9      	str	r1, [r7, #8]
 8007c5a:	607a      	str	r2, [r7, #4]
 8007c5c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007c5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d10a      	bne.n	8007c7a <xTaskCreateStatic+0x2a>
	__asm volatile
 8007c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c68:	f383 8811 	msr	BASEPRI, r3
 8007c6c:	f3bf 8f6f 	isb	sy
 8007c70:	f3bf 8f4f 	dsb	sy
 8007c74:	623b      	str	r3, [r7, #32]
}
 8007c76:	bf00      	nop
 8007c78:	e7fe      	b.n	8007c78 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007c7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d10a      	bne.n	8007c96 <xTaskCreateStatic+0x46>
	__asm volatile
 8007c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c84:	f383 8811 	msr	BASEPRI, r3
 8007c88:	f3bf 8f6f 	isb	sy
 8007c8c:	f3bf 8f4f 	dsb	sy
 8007c90:	61fb      	str	r3, [r7, #28]
}
 8007c92:	bf00      	nop
 8007c94:	e7fe      	b.n	8007c94 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007c96:	23a8      	movs	r3, #168	; 0xa8
 8007c98:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007c9a:	693b      	ldr	r3, [r7, #16]
 8007c9c:	2ba8      	cmp	r3, #168	; 0xa8
 8007c9e:	d00a      	beq.n	8007cb6 <xTaskCreateStatic+0x66>
	__asm volatile
 8007ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ca4:	f383 8811 	msr	BASEPRI, r3
 8007ca8:	f3bf 8f6f 	isb	sy
 8007cac:	f3bf 8f4f 	dsb	sy
 8007cb0:	61bb      	str	r3, [r7, #24]
}
 8007cb2:	bf00      	nop
 8007cb4:	e7fe      	b.n	8007cb4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007cb6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007cb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d01e      	beq.n	8007cfc <xTaskCreateStatic+0xac>
 8007cbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d01b      	beq.n	8007cfc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007cc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cc6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007ccc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cd0:	2202      	movs	r2, #2
 8007cd2:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	9303      	str	r3, [sp, #12]
 8007cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cdc:	9302      	str	r3, [sp, #8]
 8007cde:	f107 0314 	add.w	r3, r7, #20
 8007ce2:	9301      	str	r3, [sp, #4]
 8007ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ce6:	9300      	str	r3, [sp, #0]
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	687a      	ldr	r2, [r7, #4]
 8007cec:	68b9      	ldr	r1, [r7, #8]
 8007cee:	68f8      	ldr	r0, [r7, #12]
 8007cf0:	f000 f850 	bl	8007d94 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007cf4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007cf6:	f000 f8f3 	bl	8007ee0 <prvAddNewTaskToReadyList>
 8007cfa:	e001      	b.n	8007d00 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007d00:	697b      	ldr	r3, [r7, #20]
	}
 8007d02:	4618      	mov	r0, r3
 8007d04:	3728      	adds	r7, #40	; 0x28
 8007d06:	46bd      	mov	sp, r7
 8007d08:	bd80      	pop	{r7, pc}

08007d0a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007d0a:	b580      	push	{r7, lr}
 8007d0c:	b08c      	sub	sp, #48	; 0x30
 8007d0e:	af04      	add	r7, sp, #16
 8007d10:	60f8      	str	r0, [r7, #12]
 8007d12:	60b9      	str	r1, [r7, #8]
 8007d14:	603b      	str	r3, [r7, #0]
 8007d16:	4613      	mov	r3, r2
 8007d18:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007d1a:	88fb      	ldrh	r3, [r7, #6]
 8007d1c:	009b      	lsls	r3, r3, #2
 8007d1e:	4618      	mov	r0, r3
 8007d20:	f001 fc5a 	bl	80095d8 <pvPortMalloc>
 8007d24:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007d26:	697b      	ldr	r3, [r7, #20]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d00e      	beq.n	8007d4a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007d2c:	20a8      	movs	r0, #168	; 0xa8
 8007d2e:	f001 fc53 	bl	80095d8 <pvPortMalloc>
 8007d32:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007d34:	69fb      	ldr	r3, [r7, #28]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d003      	beq.n	8007d42 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007d3a:	69fb      	ldr	r3, [r7, #28]
 8007d3c:	697a      	ldr	r2, [r7, #20]
 8007d3e:	631a      	str	r2, [r3, #48]	; 0x30
 8007d40:	e005      	b.n	8007d4e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007d42:	6978      	ldr	r0, [r7, #20]
 8007d44:	f001 fd14 	bl	8009770 <vPortFree>
 8007d48:	e001      	b.n	8007d4e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007d4e:	69fb      	ldr	r3, [r7, #28]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d017      	beq.n	8007d84 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007d54:	69fb      	ldr	r3, [r7, #28]
 8007d56:	2200      	movs	r2, #0
 8007d58:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007d5c:	88fa      	ldrh	r2, [r7, #6]
 8007d5e:	2300      	movs	r3, #0
 8007d60:	9303      	str	r3, [sp, #12]
 8007d62:	69fb      	ldr	r3, [r7, #28]
 8007d64:	9302      	str	r3, [sp, #8]
 8007d66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d68:	9301      	str	r3, [sp, #4]
 8007d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d6c:	9300      	str	r3, [sp, #0]
 8007d6e:	683b      	ldr	r3, [r7, #0]
 8007d70:	68b9      	ldr	r1, [r7, #8]
 8007d72:	68f8      	ldr	r0, [r7, #12]
 8007d74:	f000 f80e 	bl	8007d94 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007d78:	69f8      	ldr	r0, [r7, #28]
 8007d7a:	f000 f8b1 	bl	8007ee0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007d7e:	2301      	movs	r3, #1
 8007d80:	61bb      	str	r3, [r7, #24]
 8007d82:	e002      	b.n	8007d8a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007d84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007d88:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007d8a:	69bb      	ldr	r3, [r7, #24]
	}
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	3720      	adds	r7, #32
 8007d90:	46bd      	mov	sp, r7
 8007d92:	bd80      	pop	{r7, pc}

08007d94 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b088      	sub	sp, #32
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	60f8      	str	r0, [r7, #12]
 8007d9c:	60b9      	str	r1, [r7, #8]
 8007d9e:	607a      	str	r2, [r7, #4]
 8007da0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007da4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	009b      	lsls	r3, r3, #2
 8007daa:	461a      	mov	r2, r3
 8007dac:	21a5      	movs	r1, #165	; 0xa5
 8007dae:	f002 fb19 	bl	800a3e4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007db4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007dbc:	3b01      	subs	r3, #1
 8007dbe:	009b      	lsls	r3, r3, #2
 8007dc0:	4413      	add	r3, r2
 8007dc2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007dc4:	69bb      	ldr	r3, [r7, #24]
 8007dc6:	f023 0307 	bic.w	r3, r3, #7
 8007dca:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007dcc:	69bb      	ldr	r3, [r7, #24]
 8007dce:	f003 0307 	and.w	r3, r3, #7
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d00a      	beq.n	8007dec <prvInitialiseNewTask+0x58>
	__asm volatile
 8007dd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dda:	f383 8811 	msr	BASEPRI, r3
 8007dde:	f3bf 8f6f 	isb	sy
 8007de2:	f3bf 8f4f 	dsb	sy
 8007de6:	617b      	str	r3, [r7, #20]
}
 8007de8:	bf00      	nop
 8007dea:	e7fe      	b.n	8007dea <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007dec:	68bb      	ldr	r3, [r7, #8]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d01f      	beq.n	8007e32 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007df2:	2300      	movs	r3, #0
 8007df4:	61fb      	str	r3, [r7, #28]
 8007df6:	e012      	b.n	8007e1e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007df8:	68ba      	ldr	r2, [r7, #8]
 8007dfa:	69fb      	ldr	r3, [r7, #28]
 8007dfc:	4413      	add	r3, r2
 8007dfe:	7819      	ldrb	r1, [r3, #0]
 8007e00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e02:	69fb      	ldr	r3, [r7, #28]
 8007e04:	4413      	add	r3, r2
 8007e06:	3334      	adds	r3, #52	; 0x34
 8007e08:	460a      	mov	r2, r1
 8007e0a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007e0c:	68ba      	ldr	r2, [r7, #8]
 8007e0e:	69fb      	ldr	r3, [r7, #28]
 8007e10:	4413      	add	r3, r2
 8007e12:	781b      	ldrb	r3, [r3, #0]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d006      	beq.n	8007e26 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007e18:	69fb      	ldr	r3, [r7, #28]
 8007e1a:	3301      	adds	r3, #1
 8007e1c:	61fb      	str	r3, [r7, #28]
 8007e1e:	69fb      	ldr	r3, [r7, #28]
 8007e20:	2b0f      	cmp	r3, #15
 8007e22:	d9e9      	bls.n	8007df8 <prvInitialiseNewTask+0x64>
 8007e24:	e000      	b.n	8007e28 <prvInitialiseNewTask+0x94>
			{
				break;
 8007e26:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007e30:	e003      	b.n	8007e3a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e34:	2200      	movs	r2, #0
 8007e36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e3c:	2b37      	cmp	r3, #55	; 0x37
 8007e3e:	d901      	bls.n	8007e44 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007e40:	2337      	movs	r3, #55	; 0x37
 8007e42:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007e48:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007e4e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e52:	2200      	movs	r2, #0
 8007e54:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e58:	3304      	adds	r3, #4
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	f7ff f978 	bl	8007150 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e62:	3318      	adds	r3, #24
 8007e64:	4618      	mov	r0, r3
 8007e66:	f7ff f973 	bl	8007150 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e6e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e72:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e78:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e7e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e82:	2200      	movs	r2, #0
 8007e84:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e92:	3354      	adds	r3, #84	; 0x54
 8007e94:	224c      	movs	r2, #76	; 0x4c
 8007e96:	2100      	movs	r1, #0
 8007e98:	4618      	mov	r0, r3
 8007e9a:	f002 faa3 	bl	800a3e4 <memset>
 8007e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ea0:	4a0c      	ldr	r2, [pc, #48]	; (8007ed4 <prvInitialiseNewTask+0x140>)
 8007ea2:	659a      	str	r2, [r3, #88]	; 0x58
 8007ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ea6:	4a0c      	ldr	r2, [pc, #48]	; (8007ed8 <prvInitialiseNewTask+0x144>)
 8007ea8:	65da      	str	r2, [r3, #92]	; 0x5c
 8007eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eac:	4a0b      	ldr	r2, [pc, #44]	; (8007edc <prvInitialiseNewTask+0x148>)
 8007eae:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007eb0:	683a      	ldr	r2, [r7, #0]
 8007eb2:	68f9      	ldr	r1, [r7, #12]
 8007eb4:	69b8      	ldr	r0, [r7, #24]
 8007eb6:	f001 f941 	bl	800913c <pxPortInitialiseStack>
 8007eba:	4602      	mov	r2, r0
 8007ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ebe:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d002      	beq.n	8007ecc <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ec8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007eca:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007ecc:	bf00      	nop
 8007ece:	3720      	adds	r7, #32
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	bd80      	pop	{r7, pc}
 8007ed4:	2000681c 	.word	0x2000681c
 8007ed8:	20006884 	.word	0x20006884
 8007edc:	200068ec 	.word	0x200068ec

08007ee0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b082      	sub	sp, #8
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007ee8:	f001 fa54 	bl	8009394 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007eec:	4b2d      	ldr	r3, [pc, #180]	; (8007fa4 <prvAddNewTaskToReadyList+0xc4>)
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	3301      	adds	r3, #1
 8007ef2:	4a2c      	ldr	r2, [pc, #176]	; (8007fa4 <prvAddNewTaskToReadyList+0xc4>)
 8007ef4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007ef6:	4b2c      	ldr	r3, [pc, #176]	; (8007fa8 <prvAddNewTaskToReadyList+0xc8>)
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d109      	bne.n	8007f12 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007efe:	4a2a      	ldr	r2, [pc, #168]	; (8007fa8 <prvAddNewTaskToReadyList+0xc8>)
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007f04:	4b27      	ldr	r3, [pc, #156]	; (8007fa4 <prvAddNewTaskToReadyList+0xc4>)
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	2b01      	cmp	r3, #1
 8007f0a:	d110      	bne.n	8007f2e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007f0c:	f000 fc26 	bl	800875c <prvInitialiseTaskLists>
 8007f10:	e00d      	b.n	8007f2e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007f12:	4b26      	ldr	r3, [pc, #152]	; (8007fac <prvAddNewTaskToReadyList+0xcc>)
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d109      	bne.n	8007f2e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007f1a:	4b23      	ldr	r3, [pc, #140]	; (8007fa8 <prvAddNewTaskToReadyList+0xc8>)
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f24:	429a      	cmp	r2, r3
 8007f26:	d802      	bhi.n	8007f2e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007f28:	4a1f      	ldr	r2, [pc, #124]	; (8007fa8 <prvAddNewTaskToReadyList+0xc8>)
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007f2e:	4b20      	ldr	r3, [pc, #128]	; (8007fb0 <prvAddNewTaskToReadyList+0xd0>)
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	3301      	adds	r3, #1
 8007f34:	4a1e      	ldr	r2, [pc, #120]	; (8007fb0 <prvAddNewTaskToReadyList+0xd0>)
 8007f36:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007f38:	4b1d      	ldr	r3, [pc, #116]	; (8007fb0 <prvAddNewTaskToReadyList+0xd0>)
 8007f3a:	681a      	ldr	r2, [r3, #0]
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f44:	4b1b      	ldr	r3, [pc, #108]	; (8007fb4 <prvAddNewTaskToReadyList+0xd4>)
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	429a      	cmp	r2, r3
 8007f4a:	d903      	bls.n	8007f54 <prvAddNewTaskToReadyList+0x74>
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f50:	4a18      	ldr	r2, [pc, #96]	; (8007fb4 <prvAddNewTaskToReadyList+0xd4>)
 8007f52:	6013      	str	r3, [r2, #0]
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f58:	4613      	mov	r3, r2
 8007f5a:	009b      	lsls	r3, r3, #2
 8007f5c:	4413      	add	r3, r2
 8007f5e:	009b      	lsls	r3, r3, #2
 8007f60:	4a15      	ldr	r2, [pc, #84]	; (8007fb8 <prvAddNewTaskToReadyList+0xd8>)
 8007f62:	441a      	add	r2, r3
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	3304      	adds	r3, #4
 8007f68:	4619      	mov	r1, r3
 8007f6a:	4610      	mov	r0, r2
 8007f6c:	f7ff f8fd 	bl	800716a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007f70:	f001 fa40 	bl	80093f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007f74:	4b0d      	ldr	r3, [pc, #52]	; (8007fac <prvAddNewTaskToReadyList+0xcc>)
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d00e      	beq.n	8007f9a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007f7c:	4b0a      	ldr	r3, [pc, #40]	; (8007fa8 <prvAddNewTaskToReadyList+0xc8>)
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f86:	429a      	cmp	r2, r3
 8007f88:	d207      	bcs.n	8007f9a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007f8a:	4b0c      	ldr	r3, [pc, #48]	; (8007fbc <prvAddNewTaskToReadyList+0xdc>)
 8007f8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f90:	601a      	str	r2, [r3, #0]
 8007f92:	f3bf 8f4f 	dsb	sy
 8007f96:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007f9a:	bf00      	nop
 8007f9c:	3708      	adds	r7, #8
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	bd80      	pop	{r7, pc}
 8007fa2:	bf00      	nop
 8007fa4:	20000eb8 	.word	0x20000eb8
 8007fa8:	200009e4 	.word	0x200009e4
 8007fac:	20000ec4 	.word	0x20000ec4
 8007fb0:	20000ed4 	.word	0x20000ed4
 8007fb4:	20000ec0 	.word	0x20000ec0
 8007fb8:	200009e8 	.word	0x200009e8
 8007fbc:	e000ed04 	.word	0xe000ed04

08007fc0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b084      	sub	sp, #16
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007fc8:	2300      	movs	r3, #0
 8007fca:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d017      	beq.n	8008002 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007fd2:	4b13      	ldr	r3, [pc, #76]	; (8008020 <vTaskDelay+0x60>)
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d00a      	beq.n	8007ff0 <vTaskDelay+0x30>
	__asm volatile
 8007fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fde:	f383 8811 	msr	BASEPRI, r3
 8007fe2:	f3bf 8f6f 	isb	sy
 8007fe6:	f3bf 8f4f 	dsb	sy
 8007fea:	60bb      	str	r3, [r7, #8]
}
 8007fec:	bf00      	nop
 8007fee:	e7fe      	b.n	8007fee <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007ff0:	f000 f88a 	bl	8008108 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007ff4:	2100      	movs	r1, #0
 8007ff6:	6878      	ldr	r0, [r7, #4]
 8007ff8:	f000 fcfe 	bl	80089f8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007ffc:	f000 f892 	bl	8008124 <xTaskResumeAll>
 8008000:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d107      	bne.n	8008018 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008008:	4b06      	ldr	r3, [pc, #24]	; (8008024 <vTaskDelay+0x64>)
 800800a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800800e:	601a      	str	r2, [r3, #0]
 8008010:	f3bf 8f4f 	dsb	sy
 8008014:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008018:	bf00      	nop
 800801a:	3710      	adds	r7, #16
 800801c:	46bd      	mov	sp, r7
 800801e:	bd80      	pop	{r7, pc}
 8008020:	20000ee0 	.word	0x20000ee0
 8008024:	e000ed04 	.word	0xe000ed04

08008028 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008028:	b580      	push	{r7, lr}
 800802a:	b08a      	sub	sp, #40	; 0x28
 800802c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800802e:	2300      	movs	r3, #0
 8008030:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008032:	2300      	movs	r3, #0
 8008034:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008036:	463a      	mov	r2, r7
 8008038:	1d39      	adds	r1, r7, #4
 800803a:	f107 0308 	add.w	r3, r7, #8
 800803e:	4618      	mov	r0, r3
 8008040:	f7ff f832 	bl	80070a8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008044:	6839      	ldr	r1, [r7, #0]
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	68ba      	ldr	r2, [r7, #8]
 800804a:	9202      	str	r2, [sp, #8]
 800804c:	9301      	str	r3, [sp, #4]
 800804e:	2300      	movs	r3, #0
 8008050:	9300      	str	r3, [sp, #0]
 8008052:	2300      	movs	r3, #0
 8008054:	460a      	mov	r2, r1
 8008056:	4924      	ldr	r1, [pc, #144]	; (80080e8 <vTaskStartScheduler+0xc0>)
 8008058:	4824      	ldr	r0, [pc, #144]	; (80080ec <vTaskStartScheduler+0xc4>)
 800805a:	f7ff fdf9 	bl	8007c50 <xTaskCreateStatic>
 800805e:	4603      	mov	r3, r0
 8008060:	4a23      	ldr	r2, [pc, #140]	; (80080f0 <vTaskStartScheduler+0xc8>)
 8008062:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008064:	4b22      	ldr	r3, [pc, #136]	; (80080f0 <vTaskStartScheduler+0xc8>)
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d002      	beq.n	8008072 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800806c:	2301      	movs	r3, #1
 800806e:	617b      	str	r3, [r7, #20]
 8008070:	e001      	b.n	8008076 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008072:	2300      	movs	r3, #0
 8008074:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008076:	697b      	ldr	r3, [r7, #20]
 8008078:	2b01      	cmp	r3, #1
 800807a:	d102      	bne.n	8008082 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800807c:	f000 fd10 	bl	8008aa0 <xTimerCreateTimerTask>
 8008080:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008082:	697b      	ldr	r3, [r7, #20]
 8008084:	2b01      	cmp	r3, #1
 8008086:	d11b      	bne.n	80080c0 <vTaskStartScheduler+0x98>
	__asm volatile
 8008088:	f04f 0350 	mov.w	r3, #80	; 0x50
 800808c:	f383 8811 	msr	BASEPRI, r3
 8008090:	f3bf 8f6f 	isb	sy
 8008094:	f3bf 8f4f 	dsb	sy
 8008098:	613b      	str	r3, [r7, #16]
}
 800809a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800809c:	4b15      	ldr	r3, [pc, #84]	; (80080f4 <vTaskStartScheduler+0xcc>)
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	3354      	adds	r3, #84	; 0x54
 80080a2:	4a15      	ldr	r2, [pc, #84]	; (80080f8 <vTaskStartScheduler+0xd0>)
 80080a4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80080a6:	4b15      	ldr	r3, [pc, #84]	; (80080fc <vTaskStartScheduler+0xd4>)
 80080a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80080ac:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80080ae:	4b14      	ldr	r3, [pc, #80]	; (8008100 <vTaskStartScheduler+0xd8>)
 80080b0:	2201      	movs	r2, #1
 80080b2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80080b4:	4b13      	ldr	r3, [pc, #76]	; (8008104 <vTaskStartScheduler+0xdc>)
 80080b6:	2200      	movs	r2, #0
 80080b8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80080ba:	f001 f8c9 	bl	8009250 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80080be:	e00e      	b.n	80080de <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80080c0:	697b      	ldr	r3, [r7, #20]
 80080c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80080c6:	d10a      	bne.n	80080de <vTaskStartScheduler+0xb6>
	__asm volatile
 80080c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080cc:	f383 8811 	msr	BASEPRI, r3
 80080d0:	f3bf 8f6f 	isb	sy
 80080d4:	f3bf 8f4f 	dsb	sy
 80080d8:	60fb      	str	r3, [r7, #12]
}
 80080da:	bf00      	nop
 80080dc:	e7fe      	b.n	80080dc <vTaskStartScheduler+0xb4>
}
 80080de:	bf00      	nop
 80080e0:	3718      	adds	r7, #24
 80080e2:	46bd      	mov	sp, r7
 80080e4:	bd80      	pop	{r7, pc}
 80080e6:	bf00      	nop
 80080e8:	0800a60c 	.word	0x0800a60c
 80080ec:	0800872d 	.word	0x0800872d
 80080f0:	20000edc 	.word	0x20000edc
 80080f4:	200009e4 	.word	0x200009e4
 80080f8:	2000014c 	.word	0x2000014c
 80080fc:	20000ed8 	.word	0x20000ed8
 8008100:	20000ec4 	.word	0x20000ec4
 8008104:	20000ebc 	.word	0x20000ebc

08008108 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008108:	b480      	push	{r7}
 800810a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800810c:	4b04      	ldr	r3, [pc, #16]	; (8008120 <vTaskSuspendAll+0x18>)
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	3301      	adds	r3, #1
 8008112:	4a03      	ldr	r2, [pc, #12]	; (8008120 <vTaskSuspendAll+0x18>)
 8008114:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008116:	bf00      	nop
 8008118:	46bd      	mov	sp, r7
 800811a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811e:	4770      	bx	lr
 8008120:	20000ee0 	.word	0x20000ee0

08008124 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008124:	b580      	push	{r7, lr}
 8008126:	b084      	sub	sp, #16
 8008128:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800812a:	2300      	movs	r3, #0
 800812c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800812e:	2300      	movs	r3, #0
 8008130:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008132:	4b42      	ldr	r3, [pc, #264]	; (800823c <xTaskResumeAll+0x118>)
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d10a      	bne.n	8008150 <xTaskResumeAll+0x2c>
	__asm volatile
 800813a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800813e:	f383 8811 	msr	BASEPRI, r3
 8008142:	f3bf 8f6f 	isb	sy
 8008146:	f3bf 8f4f 	dsb	sy
 800814a:	603b      	str	r3, [r7, #0]
}
 800814c:	bf00      	nop
 800814e:	e7fe      	b.n	800814e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008150:	f001 f920 	bl	8009394 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008154:	4b39      	ldr	r3, [pc, #228]	; (800823c <xTaskResumeAll+0x118>)
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	3b01      	subs	r3, #1
 800815a:	4a38      	ldr	r2, [pc, #224]	; (800823c <xTaskResumeAll+0x118>)
 800815c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800815e:	4b37      	ldr	r3, [pc, #220]	; (800823c <xTaskResumeAll+0x118>)
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d162      	bne.n	800822c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008166:	4b36      	ldr	r3, [pc, #216]	; (8008240 <xTaskResumeAll+0x11c>)
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d05e      	beq.n	800822c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800816e:	e02f      	b.n	80081d0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008170:	4b34      	ldr	r3, [pc, #208]	; (8008244 <xTaskResumeAll+0x120>)
 8008172:	68db      	ldr	r3, [r3, #12]
 8008174:	68db      	ldr	r3, [r3, #12]
 8008176:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	3318      	adds	r3, #24
 800817c:	4618      	mov	r0, r3
 800817e:	f7ff f851 	bl	8007224 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	3304      	adds	r3, #4
 8008186:	4618      	mov	r0, r3
 8008188:	f7ff f84c 	bl	8007224 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008190:	4b2d      	ldr	r3, [pc, #180]	; (8008248 <xTaskResumeAll+0x124>)
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	429a      	cmp	r2, r3
 8008196:	d903      	bls.n	80081a0 <xTaskResumeAll+0x7c>
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800819c:	4a2a      	ldr	r2, [pc, #168]	; (8008248 <xTaskResumeAll+0x124>)
 800819e:	6013      	str	r3, [r2, #0]
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081a4:	4613      	mov	r3, r2
 80081a6:	009b      	lsls	r3, r3, #2
 80081a8:	4413      	add	r3, r2
 80081aa:	009b      	lsls	r3, r3, #2
 80081ac:	4a27      	ldr	r2, [pc, #156]	; (800824c <xTaskResumeAll+0x128>)
 80081ae:	441a      	add	r2, r3
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	3304      	adds	r3, #4
 80081b4:	4619      	mov	r1, r3
 80081b6:	4610      	mov	r0, r2
 80081b8:	f7fe ffd7 	bl	800716a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081c0:	4b23      	ldr	r3, [pc, #140]	; (8008250 <xTaskResumeAll+0x12c>)
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081c6:	429a      	cmp	r2, r3
 80081c8:	d302      	bcc.n	80081d0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80081ca:	4b22      	ldr	r3, [pc, #136]	; (8008254 <xTaskResumeAll+0x130>)
 80081cc:	2201      	movs	r2, #1
 80081ce:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80081d0:	4b1c      	ldr	r3, [pc, #112]	; (8008244 <xTaskResumeAll+0x120>)
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d1cb      	bne.n	8008170 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d001      	beq.n	80081e2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80081de:	f000 fb5f 	bl	80088a0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80081e2:	4b1d      	ldr	r3, [pc, #116]	; (8008258 <xTaskResumeAll+0x134>)
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d010      	beq.n	8008210 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80081ee:	f000 f847 	bl	8008280 <xTaskIncrementTick>
 80081f2:	4603      	mov	r3, r0
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d002      	beq.n	80081fe <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80081f8:	4b16      	ldr	r3, [pc, #88]	; (8008254 <xTaskResumeAll+0x130>)
 80081fa:	2201      	movs	r2, #1
 80081fc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	3b01      	subs	r3, #1
 8008202:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d1f1      	bne.n	80081ee <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800820a:	4b13      	ldr	r3, [pc, #76]	; (8008258 <xTaskResumeAll+0x134>)
 800820c:	2200      	movs	r2, #0
 800820e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008210:	4b10      	ldr	r3, [pc, #64]	; (8008254 <xTaskResumeAll+0x130>)
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d009      	beq.n	800822c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008218:	2301      	movs	r3, #1
 800821a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800821c:	4b0f      	ldr	r3, [pc, #60]	; (800825c <xTaskResumeAll+0x138>)
 800821e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008222:	601a      	str	r2, [r3, #0]
 8008224:	f3bf 8f4f 	dsb	sy
 8008228:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800822c:	f001 f8e2 	bl	80093f4 <vPortExitCritical>

	return xAlreadyYielded;
 8008230:	68bb      	ldr	r3, [r7, #8]
}
 8008232:	4618      	mov	r0, r3
 8008234:	3710      	adds	r7, #16
 8008236:	46bd      	mov	sp, r7
 8008238:	bd80      	pop	{r7, pc}
 800823a:	bf00      	nop
 800823c:	20000ee0 	.word	0x20000ee0
 8008240:	20000eb8 	.word	0x20000eb8
 8008244:	20000e78 	.word	0x20000e78
 8008248:	20000ec0 	.word	0x20000ec0
 800824c:	200009e8 	.word	0x200009e8
 8008250:	200009e4 	.word	0x200009e4
 8008254:	20000ecc 	.word	0x20000ecc
 8008258:	20000ec8 	.word	0x20000ec8
 800825c:	e000ed04 	.word	0xe000ed04

08008260 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008260:	b480      	push	{r7}
 8008262:	b083      	sub	sp, #12
 8008264:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008266:	4b05      	ldr	r3, [pc, #20]	; (800827c <xTaskGetTickCount+0x1c>)
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800826c:	687b      	ldr	r3, [r7, #4]
}
 800826e:	4618      	mov	r0, r3
 8008270:	370c      	adds	r7, #12
 8008272:	46bd      	mov	sp, r7
 8008274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008278:	4770      	bx	lr
 800827a:	bf00      	nop
 800827c:	20000ebc 	.word	0x20000ebc

08008280 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b086      	sub	sp, #24
 8008284:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008286:	2300      	movs	r3, #0
 8008288:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800828a:	4b4f      	ldr	r3, [pc, #316]	; (80083c8 <xTaskIncrementTick+0x148>)
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	2b00      	cmp	r3, #0
 8008290:	f040 808f 	bne.w	80083b2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008294:	4b4d      	ldr	r3, [pc, #308]	; (80083cc <xTaskIncrementTick+0x14c>)
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	3301      	adds	r3, #1
 800829a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800829c:	4a4b      	ldr	r2, [pc, #300]	; (80083cc <xTaskIncrementTick+0x14c>)
 800829e:	693b      	ldr	r3, [r7, #16]
 80082a0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80082a2:	693b      	ldr	r3, [r7, #16]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d120      	bne.n	80082ea <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80082a8:	4b49      	ldr	r3, [pc, #292]	; (80083d0 <xTaskIncrementTick+0x150>)
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d00a      	beq.n	80082c8 <xTaskIncrementTick+0x48>
	__asm volatile
 80082b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082b6:	f383 8811 	msr	BASEPRI, r3
 80082ba:	f3bf 8f6f 	isb	sy
 80082be:	f3bf 8f4f 	dsb	sy
 80082c2:	603b      	str	r3, [r7, #0]
}
 80082c4:	bf00      	nop
 80082c6:	e7fe      	b.n	80082c6 <xTaskIncrementTick+0x46>
 80082c8:	4b41      	ldr	r3, [pc, #260]	; (80083d0 <xTaskIncrementTick+0x150>)
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	60fb      	str	r3, [r7, #12]
 80082ce:	4b41      	ldr	r3, [pc, #260]	; (80083d4 <xTaskIncrementTick+0x154>)
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	4a3f      	ldr	r2, [pc, #252]	; (80083d0 <xTaskIncrementTick+0x150>)
 80082d4:	6013      	str	r3, [r2, #0]
 80082d6:	4a3f      	ldr	r2, [pc, #252]	; (80083d4 <xTaskIncrementTick+0x154>)
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	6013      	str	r3, [r2, #0]
 80082dc:	4b3e      	ldr	r3, [pc, #248]	; (80083d8 <xTaskIncrementTick+0x158>)
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	3301      	adds	r3, #1
 80082e2:	4a3d      	ldr	r2, [pc, #244]	; (80083d8 <xTaskIncrementTick+0x158>)
 80082e4:	6013      	str	r3, [r2, #0]
 80082e6:	f000 fadb 	bl	80088a0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80082ea:	4b3c      	ldr	r3, [pc, #240]	; (80083dc <xTaskIncrementTick+0x15c>)
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	693a      	ldr	r2, [r7, #16]
 80082f0:	429a      	cmp	r2, r3
 80082f2:	d349      	bcc.n	8008388 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80082f4:	4b36      	ldr	r3, [pc, #216]	; (80083d0 <xTaskIncrementTick+0x150>)
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d104      	bne.n	8008308 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80082fe:	4b37      	ldr	r3, [pc, #220]	; (80083dc <xTaskIncrementTick+0x15c>)
 8008300:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008304:	601a      	str	r2, [r3, #0]
					break;
 8008306:	e03f      	b.n	8008388 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008308:	4b31      	ldr	r3, [pc, #196]	; (80083d0 <xTaskIncrementTick+0x150>)
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	68db      	ldr	r3, [r3, #12]
 800830e:	68db      	ldr	r3, [r3, #12]
 8008310:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008312:	68bb      	ldr	r3, [r7, #8]
 8008314:	685b      	ldr	r3, [r3, #4]
 8008316:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008318:	693a      	ldr	r2, [r7, #16]
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	429a      	cmp	r2, r3
 800831e:	d203      	bcs.n	8008328 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008320:	4a2e      	ldr	r2, [pc, #184]	; (80083dc <xTaskIncrementTick+0x15c>)
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008326:	e02f      	b.n	8008388 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008328:	68bb      	ldr	r3, [r7, #8]
 800832a:	3304      	adds	r3, #4
 800832c:	4618      	mov	r0, r3
 800832e:	f7fe ff79 	bl	8007224 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008332:	68bb      	ldr	r3, [r7, #8]
 8008334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008336:	2b00      	cmp	r3, #0
 8008338:	d004      	beq.n	8008344 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800833a:	68bb      	ldr	r3, [r7, #8]
 800833c:	3318      	adds	r3, #24
 800833e:	4618      	mov	r0, r3
 8008340:	f7fe ff70 	bl	8007224 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008344:	68bb      	ldr	r3, [r7, #8]
 8008346:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008348:	4b25      	ldr	r3, [pc, #148]	; (80083e0 <xTaskIncrementTick+0x160>)
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	429a      	cmp	r2, r3
 800834e:	d903      	bls.n	8008358 <xTaskIncrementTick+0xd8>
 8008350:	68bb      	ldr	r3, [r7, #8]
 8008352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008354:	4a22      	ldr	r2, [pc, #136]	; (80083e0 <xTaskIncrementTick+0x160>)
 8008356:	6013      	str	r3, [r2, #0]
 8008358:	68bb      	ldr	r3, [r7, #8]
 800835a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800835c:	4613      	mov	r3, r2
 800835e:	009b      	lsls	r3, r3, #2
 8008360:	4413      	add	r3, r2
 8008362:	009b      	lsls	r3, r3, #2
 8008364:	4a1f      	ldr	r2, [pc, #124]	; (80083e4 <xTaskIncrementTick+0x164>)
 8008366:	441a      	add	r2, r3
 8008368:	68bb      	ldr	r3, [r7, #8]
 800836a:	3304      	adds	r3, #4
 800836c:	4619      	mov	r1, r3
 800836e:	4610      	mov	r0, r2
 8008370:	f7fe fefb 	bl	800716a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008374:	68bb      	ldr	r3, [r7, #8]
 8008376:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008378:	4b1b      	ldr	r3, [pc, #108]	; (80083e8 <xTaskIncrementTick+0x168>)
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800837e:	429a      	cmp	r2, r3
 8008380:	d3b8      	bcc.n	80082f4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008382:	2301      	movs	r3, #1
 8008384:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008386:	e7b5      	b.n	80082f4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008388:	4b17      	ldr	r3, [pc, #92]	; (80083e8 <xTaskIncrementTick+0x168>)
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800838e:	4915      	ldr	r1, [pc, #84]	; (80083e4 <xTaskIncrementTick+0x164>)
 8008390:	4613      	mov	r3, r2
 8008392:	009b      	lsls	r3, r3, #2
 8008394:	4413      	add	r3, r2
 8008396:	009b      	lsls	r3, r3, #2
 8008398:	440b      	add	r3, r1
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	2b01      	cmp	r3, #1
 800839e:	d901      	bls.n	80083a4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80083a0:	2301      	movs	r3, #1
 80083a2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80083a4:	4b11      	ldr	r3, [pc, #68]	; (80083ec <xTaskIncrementTick+0x16c>)
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d007      	beq.n	80083bc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80083ac:	2301      	movs	r3, #1
 80083ae:	617b      	str	r3, [r7, #20]
 80083b0:	e004      	b.n	80083bc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80083b2:	4b0f      	ldr	r3, [pc, #60]	; (80083f0 <xTaskIncrementTick+0x170>)
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	3301      	adds	r3, #1
 80083b8:	4a0d      	ldr	r2, [pc, #52]	; (80083f0 <xTaskIncrementTick+0x170>)
 80083ba:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80083bc:	697b      	ldr	r3, [r7, #20]
}
 80083be:	4618      	mov	r0, r3
 80083c0:	3718      	adds	r7, #24
 80083c2:	46bd      	mov	sp, r7
 80083c4:	bd80      	pop	{r7, pc}
 80083c6:	bf00      	nop
 80083c8:	20000ee0 	.word	0x20000ee0
 80083cc:	20000ebc 	.word	0x20000ebc
 80083d0:	20000e70 	.word	0x20000e70
 80083d4:	20000e74 	.word	0x20000e74
 80083d8:	20000ed0 	.word	0x20000ed0
 80083dc:	20000ed8 	.word	0x20000ed8
 80083e0:	20000ec0 	.word	0x20000ec0
 80083e4:	200009e8 	.word	0x200009e8
 80083e8:	200009e4 	.word	0x200009e4
 80083ec:	20000ecc 	.word	0x20000ecc
 80083f0:	20000ec8 	.word	0x20000ec8

080083f4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80083f4:	b480      	push	{r7}
 80083f6:	b085      	sub	sp, #20
 80083f8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80083fa:	4b2a      	ldr	r3, [pc, #168]	; (80084a4 <vTaskSwitchContext+0xb0>)
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d003      	beq.n	800840a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008402:	4b29      	ldr	r3, [pc, #164]	; (80084a8 <vTaskSwitchContext+0xb4>)
 8008404:	2201      	movs	r2, #1
 8008406:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008408:	e046      	b.n	8008498 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800840a:	4b27      	ldr	r3, [pc, #156]	; (80084a8 <vTaskSwitchContext+0xb4>)
 800840c:	2200      	movs	r2, #0
 800840e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008410:	4b26      	ldr	r3, [pc, #152]	; (80084ac <vTaskSwitchContext+0xb8>)
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	60fb      	str	r3, [r7, #12]
 8008416:	e010      	b.n	800843a <vTaskSwitchContext+0x46>
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d10a      	bne.n	8008434 <vTaskSwitchContext+0x40>
	__asm volatile
 800841e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008422:	f383 8811 	msr	BASEPRI, r3
 8008426:	f3bf 8f6f 	isb	sy
 800842a:	f3bf 8f4f 	dsb	sy
 800842e:	607b      	str	r3, [r7, #4]
}
 8008430:	bf00      	nop
 8008432:	e7fe      	b.n	8008432 <vTaskSwitchContext+0x3e>
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	3b01      	subs	r3, #1
 8008438:	60fb      	str	r3, [r7, #12]
 800843a:	491d      	ldr	r1, [pc, #116]	; (80084b0 <vTaskSwitchContext+0xbc>)
 800843c:	68fa      	ldr	r2, [r7, #12]
 800843e:	4613      	mov	r3, r2
 8008440:	009b      	lsls	r3, r3, #2
 8008442:	4413      	add	r3, r2
 8008444:	009b      	lsls	r3, r3, #2
 8008446:	440b      	add	r3, r1
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d0e4      	beq.n	8008418 <vTaskSwitchContext+0x24>
 800844e:	68fa      	ldr	r2, [r7, #12]
 8008450:	4613      	mov	r3, r2
 8008452:	009b      	lsls	r3, r3, #2
 8008454:	4413      	add	r3, r2
 8008456:	009b      	lsls	r3, r3, #2
 8008458:	4a15      	ldr	r2, [pc, #84]	; (80084b0 <vTaskSwitchContext+0xbc>)
 800845a:	4413      	add	r3, r2
 800845c:	60bb      	str	r3, [r7, #8]
 800845e:	68bb      	ldr	r3, [r7, #8]
 8008460:	685b      	ldr	r3, [r3, #4]
 8008462:	685a      	ldr	r2, [r3, #4]
 8008464:	68bb      	ldr	r3, [r7, #8]
 8008466:	605a      	str	r2, [r3, #4]
 8008468:	68bb      	ldr	r3, [r7, #8]
 800846a:	685a      	ldr	r2, [r3, #4]
 800846c:	68bb      	ldr	r3, [r7, #8]
 800846e:	3308      	adds	r3, #8
 8008470:	429a      	cmp	r2, r3
 8008472:	d104      	bne.n	800847e <vTaskSwitchContext+0x8a>
 8008474:	68bb      	ldr	r3, [r7, #8]
 8008476:	685b      	ldr	r3, [r3, #4]
 8008478:	685a      	ldr	r2, [r3, #4]
 800847a:	68bb      	ldr	r3, [r7, #8]
 800847c:	605a      	str	r2, [r3, #4]
 800847e:	68bb      	ldr	r3, [r7, #8]
 8008480:	685b      	ldr	r3, [r3, #4]
 8008482:	68db      	ldr	r3, [r3, #12]
 8008484:	4a0b      	ldr	r2, [pc, #44]	; (80084b4 <vTaskSwitchContext+0xc0>)
 8008486:	6013      	str	r3, [r2, #0]
 8008488:	4a08      	ldr	r2, [pc, #32]	; (80084ac <vTaskSwitchContext+0xb8>)
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800848e:	4b09      	ldr	r3, [pc, #36]	; (80084b4 <vTaskSwitchContext+0xc0>)
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	3354      	adds	r3, #84	; 0x54
 8008494:	4a08      	ldr	r2, [pc, #32]	; (80084b8 <vTaskSwitchContext+0xc4>)
 8008496:	6013      	str	r3, [r2, #0]
}
 8008498:	bf00      	nop
 800849a:	3714      	adds	r7, #20
 800849c:	46bd      	mov	sp, r7
 800849e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a2:	4770      	bx	lr
 80084a4:	20000ee0 	.word	0x20000ee0
 80084a8:	20000ecc 	.word	0x20000ecc
 80084ac:	20000ec0 	.word	0x20000ec0
 80084b0:	200009e8 	.word	0x200009e8
 80084b4:	200009e4 	.word	0x200009e4
 80084b8:	2000014c 	.word	0x2000014c

080084bc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80084bc:	b580      	push	{r7, lr}
 80084be:	b084      	sub	sp, #16
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
 80084c4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d10a      	bne.n	80084e2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80084cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084d0:	f383 8811 	msr	BASEPRI, r3
 80084d4:	f3bf 8f6f 	isb	sy
 80084d8:	f3bf 8f4f 	dsb	sy
 80084dc:	60fb      	str	r3, [r7, #12]
}
 80084de:	bf00      	nop
 80084e0:	e7fe      	b.n	80084e0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80084e2:	4b07      	ldr	r3, [pc, #28]	; (8008500 <vTaskPlaceOnEventList+0x44>)
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	3318      	adds	r3, #24
 80084e8:	4619      	mov	r1, r3
 80084ea:	6878      	ldr	r0, [r7, #4]
 80084ec:	f7fe fe61 	bl	80071b2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80084f0:	2101      	movs	r1, #1
 80084f2:	6838      	ldr	r0, [r7, #0]
 80084f4:	f000 fa80 	bl	80089f8 <prvAddCurrentTaskToDelayedList>
}
 80084f8:	bf00      	nop
 80084fa:	3710      	adds	r7, #16
 80084fc:	46bd      	mov	sp, r7
 80084fe:	bd80      	pop	{r7, pc}
 8008500:	200009e4 	.word	0x200009e4

08008504 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008504:	b580      	push	{r7, lr}
 8008506:	b086      	sub	sp, #24
 8008508:	af00      	add	r7, sp, #0
 800850a:	60f8      	str	r0, [r7, #12]
 800850c:	60b9      	str	r1, [r7, #8]
 800850e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d10a      	bne.n	800852c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8008516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800851a:	f383 8811 	msr	BASEPRI, r3
 800851e:	f3bf 8f6f 	isb	sy
 8008522:	f3bf 8f4f 	dsb	sy
 8008526:	617b      	str	r3, [r7, #20]
}
 8008528:	bf00      	nop
 800852a:	e7fe      	b.n	800852a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800852c:	4b0a      	ldr	r3, [pc, #40]	; (8008558 <vTaskPlaceOnEventListRestricted+0x54>)
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	3318      	adds	r3, #24
 8008532:	4619      	mov	r1, r3
 8008534:	68f8      	ldr	r0, [r7, #12]
 8008536:	f7fe fe18 	bl	800716a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	2b00      	cmp	r3, #0
 800853e:	d002      	beq.n	8008546 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008540:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008544:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008546:	6879      	ldr	r1, [r7, #4]
 8008548:	68b8      	ldr	r0, [r7, #8]
 800854a:	f000 fa55 	bl	80089f8 <prvAddCurrentTaskToDelayedList>
	}
 800854e:	bf00      	nop
 8008550:	3718      	adds	r7, #24
 8008552:	46bd      	mov	sp, r7
 8008554:	bd80      	pop	{r7, pc}
 8008556:	bf00      	nop
 8008558:	200009e4 	.word	0x200009e4

0800855c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800855c:	b580      	push	{r7, lr}
 800855e:	b086      	sub	sp, #24
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	68db      	ldr	r3, [r3, #12]
 8008568:	68db      	ldr	r3, [r3, #12]
 800856a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800856c:	693b      	ldr	r3, [r7, #16]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d10a      	bne.n	8008588 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008576:	f383 8811 	msr	BASEPRI, r3
 800857a:	f3bf 8f6f 	isb	sy
 800857e:	f3bf 8f4f 	dsb	sy
 8008582:	60fb      	str	r3, [r7, #12]
}
 8008584:	bf00      	nop
 8008586:	e7fe      	b.n	8008586 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008588:	693b      	ldr	r3, [r7, #16]
 800858a:	3318      	adds	r3, #24
 800858c:	4618      	mov	r0, r3
 800858e:	f7fe fe49 	bl	8007224 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008592:	4b1e      	ldr	r3, [pc, #120]	; (800860c <xTaskRemoveFromEventList+0xb0>)
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d11d      	bne.n	80085d6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800859a:	693b      	ldr	r3, [r7, #16]
 800859c:	3304      	adds	r3, #4
 800859e:	4618      	mov	r0, r3
 80085a0:	f7fe fe40 	bl	8007224 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80085a4:	693b      	ldr	r3, [r7, #16]
 80085a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085a8:	4b19      	ldr	r3, [pc, #100]	; (8008610 <xTaskRemoveFromEventList+0xb4>)
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	429a      	cmp	r2, r3
 80085ae:	d903      	bls.n	80085b8 <xTaskRemoveFromEventList+0x5c>
 80085b0:	693b      	ldr	r3, [r7, #16]
 80085b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085b4:	4a16      	ldr	r2, [pc, #88]	; (8008610 <xTaskRemoveFromEventList+0xb4>)
 80085b6:	6013      	str	r3, [r2, #0]
 80085b8:	693b      	ldr	r3, [r7, #16]
 80085ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085bc:	4613      	mov	r3, r2
 80085be:	009b      	lsls	r3, r3, #2
 80085c0:	4413      	add	r3, r2
 80085c2:	009b      	lsls	r3, r3, #2
 80085c4:	4a13      	ldr	r2, [pc, #76]	; (8008614 <xTaskRemoveFromEventList+0xb8>)
 80085c6:	441a      	add	r2, r3
 80085c8:	693b      	ldr	r3, [r7, #16]
 80085ca:	3304      	adds	r3, #4
 80085cc:	4619      	mov	r1, r3
 80085ce:	4610      	mov	r0, r2
 80085d0:	f7fe fdcb 	bl	800716a <vListInsertEnd>
 80085d4:	e005      	b.n	80085e2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80085d6:	693b      	ldr	r3, [r7, #16]
 80085d8:	3318      	adds	r3, #24
 80085da:	4619      	mov	r1, r3
 80085dc:	480e      	ldr	r0, [pc, #56]	; (8008618 <xTaskRemoveFromEventList+0xbc>)
 80085de:	f7fe fdc4 	bl	800716a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80085e2:	693b      	ldr	r3, [r7, #16]
 80085e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085e6:	4b0d      	ldr	r3, [pc, #52]	; (800861c <xTaskRemoveFromEventList+0xc0>)
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085ec:	429a      	cmp	r2, r3
 80085ee:	d905      	bls.n	80085fc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80085f0:	2301      	movs	r3, #1
 80085f2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80085f4:	4b0a      	ldr	r3, [pc, #40]	; (8008620 <xTaskRemoveFromEventList+0xc4>)
 80085f6:	2201      	movs	r2, #1
 80085f8:	601a      	str	r2, [r3, #0]
 80085fa:	e001      	b.n	8008600 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80085fc:	2300      	movs	r3, #0
 80085fe:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008600:	697b      	ldr	r3, [r7, #20]
}
 8008602:	4618      	mov	r0, r3
 8008604:	3718      	adds	r7, #24
 8008606:	46bd      	mov	sp, r7
 8008608:	bd80      	pop	{r7, pc}
 800860a:	bf00      	nop
 800860c:	20000ee0 	.word	0x20000ee0
 8008610:	20000ec0 	.word	0x20000ec0
 8008614:	200009e8 	.word	0x200009e8
 8008618:	20000e78 	.word	0x20000e78
 800861c:	200009e4 	.word	0x200009e4
 8008620:	20000ecc 	.word	0x20000ecc

08008624 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008624:	b480      	push	{r7}
 8008626:	b083      	sub	sp, #12
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800862c:	4b06      	ldr	r3, [pc, #24]	; (8008648 <vTaskInternalSetTimeOutState+0x24>)
 800862e:	681a      	ldr	r2, [r3, #0]
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008634:	4b05      	ldr	r3, [pc, #20]	; (800864c <vTaskInternalSetTimeOutState+0x28>)
 8008636:	681a      	ldr	r2, [r3, #0]
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	605a      	str	r2, [r3, #4]
}
 800863c:	bf00      	nop
 800863e:	370c      	adds	r7, #12
 8008640:	46bd      	mov	sp, r7
 8008642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008646:	4770      	bx	lr
 8008648:	20000ed0 	.word	0x20000ed0
 800864c:	20000ebc 	.word	0x20000ebc

08008650 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b088      	sub	sp, #32
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
 8008658:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d10a      	bne.n	8008676 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008664:	f383 8811 	msr	BASEPRI, r3
 8008668:	f3bf 8f6f 	isb	sy
 800866c:	f3bf 8f4f 	dsb	sy
 8008670:	613b      	str	r3, [r7, #16]
}
 8008672:	bf00      	nop
 8008674:	e7fe      	b.n	8008674 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008676:	683b      	ldr	r3, [r7, #0]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d10a      	bne.n	8008692 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800867c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008680:	f383 8811 	msr	BASEPRI, r3
 8008684:	f3bf 8f6f 	isb	sy
 8008688:	f3bf 8f4f 	dsb	sy
 800868c:	60fb      	str	r3, [r7, #12]
}
 800868e:	bf00      	nop
 8008690:	e7fe      	b.n	8008690 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008692:	f000 fe7f 	bl	8009394 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008696:	4b1d      	ldr	r3, [pc, #116]	; (800870c <xTaskCheckForTimeOut+0xbc>)
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	685b      	ldr	r3, [r3, #4]
 80086a0:	69ba      	ldr	r2, [r7, #24]
 80086a2:	1ad3      	subs	r3, r2, r3
 80086a4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80086ae:	d102      	bne.n	80086b6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80086b0:	2300      	movs	r3, #0
 80086b2:	61fb      	str	r3, [r7, #28]
 80086b4:	e023      	b.n	80086fe <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681a      	ldr	r2, [r3, #0]
 80086ba:	4b15      	ldr	r3, [pc, #84]	; (8008710 <xTaskCheckForTimeOut+0xc0>)
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	429a      	cmp	r2, r3
 80086c0:	d007      	beq.n	80086d2 <xTaskCheckForTimeOut+0x82>
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	685b      	ldr	r3, [r3, #4]
 80086c6:	69ba      	ldr	r2, [r7, #24]
 80086c8:	429a      	cmp	r2, r3
 80086ca:	d302      	bcc.n	80086d2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80086cc:	2301      	movs	r3, #1
 80086ce:	61fb      	str	r3, [r7, #28]
 80086d0:	e015      	b.n	80086fe <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80086d2:	683b      	ldr	r3, [r7, #0]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	697a      	ldr	r2, [r7, #20]
 80086d8:	429a      	cmp	r2, r3
 80086da:	d20b      	bcs.n	80086f4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80086dc:	683b      	ldr	r3, [r7, #0]
 80086de:	681a      	ldr	r2, [r3, #0]
 80086e0:	697b      	ldr	r3, [r7, #20]
 80086e2:	1ad2      	subs	r2, r2, r3
 80086e4:	683b      	ldr	r3, [r7, #0]
 80086e6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80086e8:	6878      	ldr	r0, [r7, #4]
 80086ea:	f7ff ff9b 	bl	8008624 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80086ee:	2300      	movs	r3, #0
 80086f0:	61fb      	str	r3, [r7, #28]
 80086f2:	e004      	b.n	80086fe <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80086f4:	683b      	ldr	r3, [r7, #0]
 80086f6:	2200      	movs	r2, #0
 80086f8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80086fa:	2301      	movs	r3, #1
 80086fc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80086fe:	f000 fe79 	bl	80093f4 <vPortExitCritical>

	return xReturn;
 8008702:	69fb      	ldr	r3, [r7, #28]
}
 8008704:	4618      	mov	r0, r3
 8008706:	3720      	adds	r7, #32
 8008708:	46bd      	mov	sp, r7
 800870a:	bd80      	pop	{r7, pc}
 800870c:	20000ebc 	.word	0x20000ebc
 8008710:	20000ed0 	.word	0x20000ed0

08008714 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008714:	b480      	push	{r7}
 8008716:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008718:	4b03      	ldr	r3, [pc, #12]	; (8008728 <vTaskMissedYield+0x14>)
 800871a:	2201      	movs	r2, #1
 800871c:	601a      	str	r2, [r3, #0]
}
 800871e:	bf00      	nop
 8008720:	46bd      	mov	sp, r7
 8008722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008726:	4770      	bx	lr
 8008728:	20000ecc 	.word	0x20000ecc

0800872c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800872c:	b580      	push	{r7, lr}
 800872e:	b082      	sub	sp, #8
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008734:	f000 f852 	bl	80087dc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008738:	4b06      	ldr	r3, [pc, #24]	; (8008754 <prvIdleTask+0x28>)
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	2b01      	cmp	r3, #1
 800873e:	d9f9      	bls.n	8008734 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008740:	4b05      	ldr	r3, [pc, #20]	; (8008758 <prvIdleTask+0x2c>)
 8008742:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008746:	601a      	str	r2, [r3, #0]
 8008748:	f3bf 8f4f 	dsb	sy
 800874c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008750:	e7f0      	b.n	8008734 <prvIdleTask+0x8>
 8008752:	bf00      	nop
 8008754:	200009e8 	.word	0x200009e8
 8008758:	e000ed04 	.word	0xe000ed04

0800875c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800875c:	b580      	push	{r7, lr}
 800875e:	b082      	sub	sp, #8
 8008760:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008762:	2300      	movs	r3, #0
 8008764:	607b      	str	r3, [r7, #4]
 8008766:	e00c      	b.n	8008782 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008768:	687a      	ldr	r2, [r7, #4]
 800876a:	4613      	mov	r3, r2
 800876c:	009b      	lsls	r3, r3, #2
 800876e:	4413      	add	r3, r2
 8008770:	009b      	lsls	r3, r3, #2
 8008772:	4a12      	ldr	r2, [pc, #72]	; (80087bc <prvInitialiseTaskLists+0x60>)
 8008774:	4413      	add	r3, r2
 8008776:	4618      	mov	r0, r3
 8008778:	f7fe fcca 	bl	8007110 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	3301      	adds	r3, #1
 8008780:	607b      	str	r3, [r7, #4]
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	2b37      	cmp	r3, #55	; 0x37
 8008786:	d9ef      	bls.n	8008768 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008788:	480d      	ldr	r0, [pc, #52]	; (80087c0 <prvInitialiseTaskLists+0x64>)
 800878a:	f7fe fcc1 	bl	8007110 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800878e:	480d      	ldr	r0, [pc, #52]	; (80087c4 <prvInitialiseTaskLists+0x68>)
 8008790:	f7fe fcbe 	bl	8007110 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008794:	480c      	ldr	r0, [pc, #48]	; (80087c8 <prvInitialiseTaskLists+0x6c>)
 8008796:	f7fe fcbb 	bl	8007110 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800879a:	480c      	ldr	r0, [pc, #48]	; (80087cc <prvInitialiseTaskLists+0x70>)
 800879c:	f7fe fcb8 	bl	8007110 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80087a0:	480b      	ldr	r0, [pc, #44]	; (80087d0 <prvInitialiseTaskLists+0x74>)
 80087a2:	f7fe fcb5 	bl	8007110 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80087a6:	4b0b      	ldr	r3, [pc, #44]	; (80087d4 <prvInitialiseTaskLists+0x78>)
 80087a8:	4a05      	ldr	r2, [pc, #20]	; (80087c0 <prvInitialiseTaskLists+0x64>)
 80087aa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80087ac:	4b0a      	ldr	r3, [pc, #40]	; (80087d8 <prvInitialiseTaskLists+0x7c>)
 80087ae:	4a05      	ldr	r2, [pc, #20]	; (80087c4 <prvInitialiseTaskLists+0x68>)
 80087b0:	601a      	str	r2, [r3, #0]
}
 80087b2:	bf00      	nop
 80087b4:	3708      	adds	r7, #8
 80087b6:	46bd      	mov	sp, r7
 80087b8:	bd80      	pop	{r7, pc}
 80087ba:	bf00      	nop
 80087bc:	200009e8 	.word	0x200009e8
 80087c0:	20000e48 	.word	0x20000e48
 80087c4:	20000e5c 	.word	0x20000e5c
 80087c8:	20000e78 	.word	0x20000e78
 80087cc:	20000e8c 	.word	0x20000e8c
 80087d0:	20000ea4 	.word	0x20000ea4
 80087d4:	20000e70 	.word	0x20000e70
 80087d8:	20000e74 	.word	0x20000e74

080087dc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	b082      	sub	sp, #8
 80087e0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80087e2:	e019      	b.n	8008818 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80087e4:	f000 fdd6 	bl	8009394 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80087e8:	4b10      	ldr	r3, [pc, #64]	; (800882c <prvCheckTasksWaitingTermination+0x50>)
 80087ea:	68db      	ldr	r3, [r3, #12]
 80087ec:	68db      	ldr	r3, [r3, #12]
 80087ee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	3304      	adds	r3, #4
 80087f4:	4618      	mov	r0, r3
 80087f6:	f7fe fd15 	bl	8007224 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80087fa:	4b0d      	ldr	r3, [pc, #52]	; (8008830 <prvCheckTasksWaitingTermination+0x54>)
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	3b01      	subs	r3, #1
 8008800:	4a0b      	ldr	r2, [pc, #44]	; (8008830 <prvCheckTasksWaitingTermination+0x54>)
 8008802:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008804:	4b0b      	ldr	r3, [pc, #44]	; (8008834 <prvCheckTasksWaitingTermination+0x58>)
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	3b01      	subs	r3, #1
 800880a:	4a0a      	ldr	r2, [pc, #40]	; (8008834 <prvCheckTasksWaitingTermination+0x58>)
 800880c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800880e:	f000 fdf1 	bl	80093f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008812:	6878      	ldr	r0, [r7, #4]
 8008814:	f000 f810 	bl	8008838 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008818:	4b06      	ldr	r3, [pc, #24]	; (8008834 <prvCheckTasksWaitingTermination+0x58>)
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d1e1      	bne.n	80087e4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008820:	bf00      	nop
 8008822:	bf00      	nop
 8008824:	3708      	adds	r7, #8
 8008826:	46bd      	mov	sp, r7
 8008828:	bd80      	pop	{r7, pc}
 800882a:	bf00      	nop
 800882c:	20000e8c 	.word	0x20000e8c
 8008830:	20000eb8 	.word	0x20000eb8
 8008834:	20000ea0 	.word	0x20000ea0

08008838 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008838:	b580      	push	{r7, lr}
 800883a:	b084      	sub	sp, #16
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	3354      	adds	r3, #84	; 0x54
 8008844:	4618      	mov	r0, r3
 8008846:	f001 fdd5 	bl	800a3f4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8008850:	2b00      	cmp	r3, #0
 8008852:	d108      	bne.n	8008866 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008858:	4618      	mov	r0, r3
 800885a:	f000 ff89 	bl	8009770 <vPortFree>
				vPortFree( pxTCB );
 800885e:	6878      	ldr	r0, [r7, #4]
 8008860:	f000 ff86 	bl	8009770 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008864:	e018      	b.n	8008898 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800886c:	2b01      	cmp	r3, #1
 800886e:	d103      	bne.n	8008878 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008870:	6878      	ldr	r0, [r7, #4]
 8008872:	f000 ff7d 	bl	8009770 <vPortFree>
	}
 8008876:	e00f      	b.n	8008898 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800887e:	2b02      	cmp	r3, #2
 8008880:	d00a      	beq.n	8008898 <prvDeleteTCB+0x60>
	__asm volatile
 8008882:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008886:	f383 8811 	msr	BASEPRI, r3
 800888a:	f3bf 8f6f 	isb	sy
 800888e:	f3bf 8f4f 	dsb	sy
 8008892:	60fb      	str	r3, [r7, #12]
}
 8008894:	bf00      	nop
 8008896:	e7fe      	b.n	8008896 <prvDeleteTCB+0x5e>
	}
 8008898:	bf00      	nop
 800889a:	3710      	adds	r7, #16
 800889c:	46bd      	mov	sp, r7
 800889e:	bd80      	pop	{r7, pc}

080088a0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80088a0:	b480      	push	{r7}
 80088a2:	b083      	sub	sp, #12
 80088a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80088a6:	4b0c      	ldr	r3, [pc, #48]	; (80088d8 <prvResetNextTaskUnblockTime+0x38>)
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d104      	bne.n	80088ba <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80088b0:	4b0a      	ldr	r3, [pc, #40]	; (80088dc <prvResetNextTaskUnblockTime+0x3c>)
 80088b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80088b6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80088b8:	e008      	b.n	80088cc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80088ba:	4b07      	ldr	r3, [pc, #28]	; (80088d8 <prvResetNextTaskUnblockTime+0x38>)
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	68db      	ldr	r3, [r3, #12]
 80088c0:	68db      	ldr	r3, [r3, #12]
 80088c2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	685b      	ldr	r3, [r3, #4]
 80088c8:	4a04      	ldr	r2, [pc, #16]	; (80088dc <prvResetNextTaskUnblockTime+0x3c>)
 80088ca:	6013      	str	r3, [r2, #0]
}
 80088cc:	bf00      	nop
 80088ce:	370c      	adds	r7, #12
 80088d0:	46bd      	mov	sp, r7
 80088d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d6:	4770      	bx	lr
 80088d8:	20000e70 	.word	0x20000e70
 80088dc:	20000ed8 	.word	0x20000ed8

080088e0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80088e0:	b480      	push	{r7}
 80088e2:	b083      	sub	sp, #12
 80088e4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80088e6:	4b0b      	ldr	r3, [pc, #44]	; (8008914 <xTaskGetSchedulerState+0x34>)
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d102      	bne.n	80088f4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80088ee:	2301      	movs	r3, #1
 80088f0:	607b      	str	r3, [r7, #4]
 80088f2:	e008      	b.n	8008906 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80088f4:	4b08      	ldr	r3, [pc, #32]	; (8008918 <xTaskGetSchedulerState+0x38>)
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d102      	bne.n	8008902 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80088fc:	2302      	movs	r3, #2
 80088fe:	607b      	str	r3, [r7, #4]
 8008900:	e001      	b.n	8008906 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008902:	2300      	movs	r3, #0
 8008904:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008906:	687b      	ldr	r3, [r7, #4]
	}
 8008908:	4618      	mov	r0, r3
 800890a:	370c      	adds	r7, #12
 800890c:	46bd      	mov	sp, r7
 800890e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008912:	4770      	bx	lr
 8008914:	20000ec4 	.word	0x20000ec4
 8008918:	20000ee0 	.word	0x20000ee0

0800891c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800891c:	b580      	push	{r7, lr}
 800891e:	b086      	sub	sp, #24
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008928:	2300      	movs	r3, #0
 800892a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d056      	beq.n	80089e0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008932:	4b2e      	ldr	r3, [pc, #184]	; (80089ec <xTaskPriorityDisinherit+0xd0>)
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	693a      	ldr	r2, [r7, #16]
 8008938:	429a      	cmp	r2, r3
 800893a:	d00a      	beq.n	8008952 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800893c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008940:	f383 8811 	msr	BASEPRI, r3
 8008944:	f3bf 8f6f 	isb	sy
 8008948:	f3bf 8f4f 	dsb	sy
 800894c:	60fb      	str	r3, [r7, #12]
}
 800894e:	bf00      	nop
 8008950:	e7fe      	b.n	8008950 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008952:	693b      	ldr	r3, [r7, #16]
 8008954:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008956:	2b00      	cmp	r3, #0
 8008958:	d10a      	bne.n	8008970 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800895a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800895e:	f383 8811 	msr	BASEPRI, r3
 8008962:	f3bf 8f6f 	isb	sy
 8008966:	f3bf 8f4f 	dsb	sy
 800896a:	60bb      	str	r3, [r7, #8]
}
 800896c:	bf00      	nop
 800896e:	e7fe      	b.n	800896e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008970:	693b      	ldr	r3, [r7, #16]
 8008972:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008974:	1e5a      	subs	r2, r3, #1
 8008976:	693b      	ldr	r3, [r7, #16]
 8008978:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800897a:	693b      	ldr	r3, [r7, #16]
 800897c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800897e:	693b      	ldr	r3, [r7, #16]
 8008980:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008982:	429a      	cmp	r2, r3
 8008984:	d02c      	beq.n	80089e0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008986:	693b      	ldr	r3, [r7, #16]
 8008988:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800898a:	2b00      	cmp	r3, #0
 800898c:	d128      	bne.n	80089e0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800898e:	693b      	ldr	r3, [r7, #16]
 8008990:	3304      	adds	r3, #4
 8008992:	4618      	mov	r0, r3
 8008994:	f7fe fc46 	bl	8007224 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008998:	693b      	ldr	r3, [r7, #16]
 800899a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800899c:	693b      	ldr	r3, [r7, #16]
 800899e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80089a0:	693b      	ldr	r3, [r7, #16]
 80089a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089a4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80089a8:	693b      	ldr	r3, [r7, #16]
 80089aa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80089ac:	693b      	ldr	r3, [r7, #16]
 80089ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089b0:	4b0f      	ldr	r3, [pc, #60]	; (80089f0 <xTaskPriorityDisinherit+0xd4>)
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	429a      	cmp	r2, r3
 80089b6:	d903      	bls.n	80089c0 <xTaskPriorityDisinherit+0xa4>
 80089b8:	693b      	ldr	r3, [r7, #16]
 80089ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089bc:	4a0c      	ldr	r2, [pc, #48]	; (80089f0 <xTaskPriorityDisinherit+0xd4>)
 80089be:	6013      	str	r3, [r2, #0]
 80089c0:	693b      	ldr	r3, [r7, #16]
 80089c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089c4:	4613      	mov	r3, r2
 80089c6:	009b      	lsls	r3, r3, #2
 80089c8:	4413      	add	r3, r2
 80089ca:	009b      	lsls	r3, r3, #2
 80089cc:	4a09      	ldr	r2, [pc, #36]	; (80089f4 <xTaskPriorityDisinherit+0xd8>)
 80089ce:	441a      	add	r2, r3
 80089d0:	693b      	ldr	r3, [r7, #16]
 80089d2:	3304      	adds	r3, #4
 80089d4:	4619      	mov	r1, r3
 80089d6:	4610      	mov	r0, r2
 80089d8:	f7fe fbc7 	bl	800716a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80089dc:	2301      	movs	r3, #1
 80089de:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80089e0:	697b      	ldr	r3, [r7, #20]
	}
 80089e2:	4618      	mov	r0, r3
 80089e4:	3718      	adds	r7, #24
 80089e6:	46bd      	mov	sp, r7
 80089e8:	bd80      	pop	{r7, pc}
 80089ea:	bf00      	nop
 80089ec:	200009e4 	.word	0x200009e4
 80089f0:	20000ec0 	.word	0x20000ec0
 80089f4:	200009e8 	.word	0x200009e8

080089f8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b084      	sub	sp, #16
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
 8008a00:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008a02:	4b21      	ldr	r3, [pc, #132]	; (8008a88 <prvAddCurrentTaskToDelayedList+0x90>)
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008a08:	4b20      	ldr	r3, [pc, #128]	; (8008a8c <prvAddCurrentTaskToDelayedList+0x94>)
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	3304      	adds	r3, #4
 8008a0e:	4618      	mov	r0, r3
 8008a10:	f7fe fc08 	bl	8007224 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008a1a:	d10a      	bne.n	8008a32 <prvAddCurrentTaskToDelayedList+0x3a>
 8008a1c:	683b      	ldr	r3, [r7, #0]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d007      	beq.n	8008a32 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008a22:	4b1a      	ldr	r3, [pc, #104]	; (8008a8c <prvAddCurrentTaskToDelayedList+0x94>)
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	3304      	adds	r3, #4
 8008a28:	4619      	mov	r1, r3
 8008a2a:	4819      	ldr	r0, [pc, #100]	; (8008a90 <prvAddCurrentTaskToDelayedList+0x98>)
 8008a2c:	f7fe fb9d 	bl	800716a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008a30:	e026      	b.n	8008a80 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008a32:	68fa      	ldr	r2, [r7, #12]
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	4413      	add	r3, r2
 8008a38:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008a3a:	4b14      	ldr	r3, [pc, #80]	; (8008a8c <prvAddCurrentTaskToDelayedList+0x94>)
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	68ba      	ldr	r2, [r7, #8]
 8008a40:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008a42:	68ba      	ldr	r2, [r7, #8]
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	429a      	cmp	r2, r3
 8008a48:	d209      	bcs.n	8008a5e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008a4a:	4b12      	ldr	r3, [pc, #72]	; (8008a94 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008a4c:	681a      	ldr	r2, [r3, #0]
 8008a4e:	4b0f      	ldr	r3, [pc, #60]	; (8008a8c <prvAddCurrentTaskToDelayedList+0x94>)
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	3304      	adds	r3, #4
 8008a54:	4619      	mov	r1, r3
 8008a56:	4610      	mov	r0, r2
 8008a58:	f7fe fbab 	bl	80071b2 <vListInsert>
}
 8008a5c:	e010      	b.n	8008a80 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008a5e:	4b0e      	ldr	r3, [pc, #56]	; (8008a98 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008a60:	681a      	ldr	r2, [r3, #0]
 8008a62:	4b0a      	ldr	r3, [pc, #40]	; (8008a8c <prvAddCurrentTaskToDelayedList+0x94>)
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	3304      	adds	r3, #4
 8008a68:	4619      	mov	r1, r3
 8008a6a:	4610      	mov	r0, r2
 8008a6c:	f7fe fba1 	bl	80071b2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008a70:	4b0a      	ldr	r3, [pc, #40]	; (8008a9c <prvAddCurrentTaskToDelayedList+0xa4>)
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	68ba      	ldr	r2, [r7, #8]
 8008a76:	429a      	cmp	r2, r3
 8008a78:	d202      	bcs.n	8008a80 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008a7a:	4a08      	ldr	r2, [pc, #32]	; (8008a9c <prvAddCurrentTaskToDelayedList+0xa4>)
 8008a7c:	68bb      	ldr	r3, [r7, #8]
 8008a7e:	6013      	str	r3, [r2, #0]
}
 8008a80:	bf00      	nop
 8008a82:	3710      	adds	r7, #16
 8008a84:	46bd      	mov	sp, r7
 8008a86:	bd80      	pop	{r7, pc}
 8008a88:	20000ebc 	.word	0x20000ebc
 8008a8c:	200009e4 	.word	0x200009e4
 8008a90:	20000ea4 	.word	0x20000ea4
 8008a94:	20000e74 	.word	0x20000e74
 8008a98:	20000e70 	.word	0x20000e70
 8008a9c:	20000ed8 	.word	0x20000ed8

08008aa0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b08a      	sub	sp, #40	; 0x28
 8008aa4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008aaa:	f000 fb07 	bl	80090bc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008aae:	4b1c      	ldr	r3, [pc, #112]	; (8008b20 <xTimerCreateTimerTask+0x80>)
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d021      	beq.n	8008afa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008aba:	2300      	movs	r3, #0
 8008abc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008abe:	1d3a      	adds	r2, r7, #4
 8008ac0:	f107 0108 	add.w	r1, r7, #8
 8008ac4:	f107 030c 	add.w	r3, r7, #12
 8008ac8:	4618      	mov	r0, r3
 8008aca:	f7fe fb07 	bl	80070dc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008ace:	6879      	ldr	r1, [r7, #4]
 8008ad0:	68bb      	ldr	r3, [r7, #8]
 8008ad2:	68fa      	ldr	r2, [r7, #12]
 8008ad4:	9202      	str	r2, [sp, #8]
 8008ad6:	9301      	str	r3, [sp, #4]
 8008ad8:	2302      	movs	r3, #2
 8008ada:	9300      	str	r3, [sp, #0]
 8008adc:	2300      	movs	r3, #0
 8008ade:	460a      	mov	r2, r1
 8008ae0:	4910      	ldr	r1, [pc, #64]	; (8008b24 <xTimerCreateTimerTask+0x84>)
 8008ae2:	4811      	ldr	r0, [pc, #68]	; (8008b28 <xTimerCreateTimerTask+0x88>)
 8008ae4:	f7ff f8b4 	bl	8007c50 <xTaskCreateStatic>
 8008ae8:	4603      	mov	r3, r0
 8008aea:	4a10      	ldr	r2, [pc, #64]	; (8008b2c <xTimerCreateTimerTask+0x8c>)
 8008aec:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008aee:	4b0f      	ldr	r3, [pc, #60]	; (8008b2c <xTimerCreateTimerTask+0x8c>)
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d001      	beq.n	8008afa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008af6:	2301      	movs	r3, #1
 8008af8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008afa:	697b      	ldr	r3, [r7, #20]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d10a      	bne.n	8008b16 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b04:	f383 8811 	msr	BASEPRI, r3
 8008b08:	f3bf 8f6f 	isb	sy
 8008b0c:	f3bf 8f4f 	dsb	sy
 8008b10:	613b      	str	r3, [r7, #16]
}
 8008b12:	bf00      	nop
 8008b14:	e7fe      	b.n	8008b14 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008b16:	697b      	ldr	r3, [r7, #20]
}
 8008b18:	4618      	mov	r0, r3
 8008b1a:	3718      	adds	r7, #24
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	bd80      	pop	{r7, pc}
 8008b20:	20000f14 	.word	0x20000f14
 8008b24:	0800a614 	.word	0x0800a614
 8008b28:	08008c65 	.word	0x08008c65
 8008b2c:	20000f18 	.word	0x20000f18

08008b30 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b08a      	sub	sp, #40	; 0x28
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	60f8      	str	r0, [r7, #12]
 8008b38:	60b9      	str	r1, [r7, #8]
 8008b3a:	607a      	str	r2, [r7, #4]
 8008b3c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008b3e:	2300      	movs	r3, #0
 8008b40:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d10a      	bne.n	8008b5e <xTimerGenericCommand+0x2e>
	__asm volatile
 8008b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b4c:	f383 8811 	msr	BASEPRI, r3
 8008b50:	f3bf 8f6f 	isb	sy
 8008b54:	f3bf 8f4f 	dsb	sy
 8008b58:	623b      	str	r3, [r7, #32]
}
 8008b5a:	bf00      	nop
 8008b5c:	e7fe      	b.n	8008b5c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008b5e:	4b1a      	ldr	r3, [pc, #104]	; (8008bc8 <xTimerGenericCommand+0x98>)
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d02a      	beq.n	8008bbc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008b66:	68bb      	ldr	r3, [r7, #8]
 8008b68:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008b72:	68bb      	ldr	r3, [r7, #8]
 8008b74:	2b05      	cmp	r3, #5
 8008b76:	dc18      	bgt.n	8008baa <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008b78:	f7ff feb2 	bl	80088e0 <xTaskGetSchedulerState>
 8008b7c:	4603      	mov	r3, r0
 8008b7e:	2b02      	cmp	r3, #2
 8008b80:	d109      	bne.n	8008b96 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008b82:	4b11      	ldr	r3, [pc, #68]	; (8008bc8 <xTimerGenericCommand+0x98>)
 8008b84:	6818      	ldr	r0, [r3, #0]
 8008b86:	f107 0110 	add.w	r1, r7, #16
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b8e:	f7fe fc77 	bl	8007480 <xQueueGenericSend>
 8008b92:	6278      	str	r0, [r7, #36]	; 0x24
 8008b94:	e012      	b.n	8008bbc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008b96:	4b0c      	ldr	r3, [pc, #48]	; (8008bc8 <xTimerGenericCommand+0x98>)
 8008b98:	6818      	ldr	r0, [r3, #0]
 8008b9a:	f107 0110 	add.w	r1, r7, #16
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	2200      	movs	r2, #0
 8008ba2:	f7fe fc6d 	bl	8007480 <xQueueGenericSend>
 8008ba6:	6278      	str	r0, [r7, #36]	; 0x24
 8008ba8:	e008      	b.n	8008bbc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008baa:	4b07      	ldr	r3, [pc, #28]	; (8008bc8 <xTimerGenericCommand+0x98>)
 8008bac:	6818      	ldr	r0, [r3, #0]
 8008bae:	f107 0110 	add.w	r1, r7, #16
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	683a      	ldr	r2, [r7, #0]
 8008bb6:	f7fe fd61 	bl	800767c <xQueueGenericSendFromISR>
 8008bba:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	3728      	adds	r7, #40	; 0x28
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	bd80      	pop	{r7, pc}
 8008bc6:	bf00      	nop
 8008bc8:	20000f14 	.word	0x20000f14

08008bcc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	b088      	sub	sp, #32
 8008bd0:	af02      	add	r7, sp, #8
 8008bd2:	6078      	str	r0, [r7, #4]
 8008bd4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008bd6:	4b22      	ldr	r3, [pc, #136]	; (8008c60 <prvProcessExpiredTimer+0x94>)
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	68db      	ldr	r3, [r3, #12]
 8008bdc:	68db      	ldr	r3, [r3, #12]
 8008bde:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008be0:	697b      	ldr	r3, [r7, #20]
 8008be2:	3304      	adds	r3, #4
 8008be4:	4618      	mov	r0, r3
 8008be6:	f7fe fb1d 	bl	8007224 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008bea:	697b      	ldr	r3, [r7, #20]
 8008bec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008bf0:	f003 0304 	and.w	r3, r3, #4
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d022      	beq.n	8008c3e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008bf8:	697b      	ldr	r3, [r7, #20]
 8008bfa:	699a      	ldr	r2, [r3, #24]
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	18d1      	adds	r1, r2, r3
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	683a      	ldr	r2, [r7, #0]
 8008c04:	6978      	ldr	r0, [r7, #20]
 8008c06:	f000 f8d1 	bl	8008dac <prvInsertTimerInActiveList>
 8008c0a:	4603      	mov	r3, r0
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d01f      	beq.n	8008c50 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008c10:	2300      	movs	r3, #0
 8008c12:	9300      	str	r3, [sp, #0]
 8008c14:	2300      	movs	r3, #0
 8008c16:	687a      	ldr	r2, [r7, #4]
 8008c18:	2100      	movs	r1, #0
 8008c1a:	6978      	ldr	r0, [r7, #20]
 8008c1c:	f7ff ff88 	bl	8008b30 <xTimerGenericCommand>
 8008c20:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008c22:	693b      	ldr	r3, [r7, #16]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d113      	bne.n	8008c50 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8008c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c2c:	f383 8811 	msr	BASEPRI, r3
 8008c30:	f3bf 8f6f 	isb	sy
 8008c34:	f3bf 8f4f 	dsb	sy
 8008c38:	60fb      	str	r3, [r7, #12]
}
 8008c3a:	bf00      	nop
 8008c3c:	e7fe      	b.n	8008c3c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008c3e:	697b      	ldr	r3, [r7, #20]
 8008c40:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008c44:	f023 0301 	bic.w	r3, r3, #1
 8008c48:	b2da      	uxtb	r2, r3
 8008c4a:	697b      	ldr	r3, [r7, #20]
 8008c4c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008c50:	697b      	ldr	r3, [r7, #20]
 8008c52:	6a1b      	ldr	r3, [r3, #32]
 8008c54:	6978      	ldr	r0, [r7, #20]
 8008c56:	4798      	blx	r3
}
 8008c58:	bf00      	nop
 8008c5a:	3718      	adds	r7, #24
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	bd80      	pop	{r7, pc}
 8008c60:	20000f0c 	.word	0x20000f0c

08008c64 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008c64:	b580      	push	{r7, lr}
 8008c66:	b084      	sub	sp, #16
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008c6c:	f107 0308 	add.w	r3, r7, #8
 8008c70:	4618      	mov	r0, r3
 8008c72:	f000 f857 	bl	8008d24 <prvGetNextExpireTime>
 8008c76:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008c78:	68bb      	ldr	r3, [r7, #8]
 8008c7a:	4619      	mov	r1, r3
 8008c7c:	68f8      	ldr	r0, [r7, #12]
 8008c7e:	f000 f803 	bl	8008c88 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008c82:	f000 f8d5 	bl	8008e30 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008c86:	e7f1      	b.n	8008c6c <prvTimerTask+0x8>

08008c88 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b084      	sub	sp, #16
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
 8008c90:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008c92:	f7ff fa39 	bl	8008108 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008c96:	f107 0308 	add.w	r3, r7, #8
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	f000 f866 	bl	8008d6c <prvSampleTimeNow>
 8008ca0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008ca2:	68bb      	ldr	r3, [r7, #8]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d130      	bne.n	8008d0a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008ca8:	683b      	ldr	r3, [r7, #0]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d10a      	bne.n	8008cc4 <prvProcessTimerOrBlockTask+0x3c>
 8008cae:	687a      	ldr	r2, [r7, #4]
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	429a      	cmp	r2, r3
 8008cb4:	d806      	bhi.n	8008cc4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008cb6:	f7ff fa35 	bl	8008124 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008cba:	68f9      	ldr	r1, [r7, #12]
 8008cbc:	6878      	ldr	r0, [r7, #4]
 8008cbe:	f7ff ff85 	bl	8008bcc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008cc2:	e024      	b.n	8008d0e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008cc4:	683b      	ldr	r3, [r7, #0]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d008      	beq.n	8008cdc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008cca:	4b13      	ldr	r3, [pc, #76]	; (8008d18 <prvProcessTimerOrBlockTask+0x90>)
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d101      	bne.n	8008cd8 <prvProcessTimerOrBlockTask+0x50>
 8008cd4:	2301      	movs	r3, #1
 8008cd6:	e000      	b.n	8008cda <prvProcessTimerOrBlockTask+0x52>
 8008cd8:	2300      	movs	r3, #0
 8008cda:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008cdc:	4b0f      	ldr	r3, [pc, #60]	; (8008d1c <prvProcessTimerOrBlockTask+0x94>)
 8008cde:	6818      	ldr	r0, [r3, #0]
 8008ce0:	687a      	ldr	r2, [r7, #4]
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	1ad3      	subs	r3, r2, r3
 8008ce6:	683a      	ldr	r2, [r7, #0]
 8008ce8:	4619      	mov	r1, r3
 8008cea:	f7fe ff7d 	bl	8007be8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008cee:	f7ff fa19 	bl	8008124 <xTaskResumeAll>
 8008cf2:	4603      	mov	r3, r0
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d10a      	bne.n	8008d0e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008cf8:	4b09      	ldr	r3, [pc, #36]	; (8008d20 <prvProcessTimerOrBlockTask+0x98>)
 8008cfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008cfe:	601a      	str	r2, [r3, #0]
 8008d00:	f3bf 8f4f 	dsb	sy
 8008d04:	f3bf 8f6f 	isb	sy
}
 8008d08:	e001      	b.n	8008d0e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008d0a:	f7ff fa0b 	bl	8008124 <xTaskResumeAll>
}
 8008d0e:	bf00      	nop
 8008d10:	3710      	adds	r7, #16
 8008d12:	46bd      	mov	sp, r7
 8008d14:	bd80      	pop	{r7, pc}
 8008d16:	bf00      	nop
 8008d18:	20000f10 	.word	0x20000f10
 8008d1c:	20000f14 	.word	0x20000f14
 8008d20:	e000ed04 	.word	0xe000ed04

08008d24 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008d24:	b480      	push	{r7}
 8008d26:	b085      	sub	sp, #20
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008d2c:	4b0e      	ldr	r3, [pc, #56]	; (8008d68 <prvGetNextExpireTime+0x44>)
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d101      	bne.n	8008d3a <prvGetNextExpireTime+0x16>
 8008d36:	2201      	movs	r2, #1
 8008d38:	e000      	b.n	8008d3c <prvGetNextExpireTime+0x18>
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d105      	bne.n	8008d54 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008d48:	4b07      	ldr	r3, [pc, #28]	; (8008d68 <prvGetNextExpireTime+0x44>)
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	68db      	ldr	r3, [r3, #12]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	60fb      	str	r3, [r7, #12]
 8008d52:	e001      	b.n	8008d58 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008d54:	2300      	movs	r3, #0
 8008d56:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008d58:	68fb      	ldr	r3, [r7, #12]
}
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	3714      	adds	r7, #20
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d64:	4770      	bx	lr
 8008d66:	bf00      	nop
 8008d68:	20000f0c 	.word	0x20000f0c

08008d6c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b084      	sub	sp, #16
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008d74:	f7ff fa74 	bl	8008260 <xTaskGetTickCount>
 8008d78:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008d7a:	4b0b      	ldr	r3, [pc, #44]	; (8008da8 <prvSampleTimeNow+0x3c>)
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	68fa      	ldr	r2, [r7, #12]
 8008d80:	429a      	cmp	r2, r3
 8008d82:	d205      	bcs.n	8008d90 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008d84:	f000 f936 	bl	8008ff4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	2201      	movs	r2, #1
 8008d8c:	601a      	str	r2, [r3, #0]
 8008d8e:	e002      	b.n	8008d96 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	2200      	movs	r2, #0
 8008d94:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008d96:	4a04      	ldr	r2, [pc, #16]	; (8008da8 <prvSampleTimeNow+0x3c>)
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008d9c:	68fb      	ldr	r3, [r7, #12]
}
 8008d9e:	4618      	mov	r0, r3
 8008da0:	3710      	adds	r7, #16
 8008da2:	46bd      	mov	sp, r7
 8008da4:	bd80      	pop	{r7, pc}
 8008da6:	bf00      	nop
 8008da8:	20000f1c 	.word	0x20000f1c

08008dac <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b086      	sub	sp, #24
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	60f8      	str	r0, [r7, #12]
 8008db4:	60b9      	str	r1, [r7, #8]
 8008db6:	607a      	str	r2, [r7, #4]
 8008db8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008dba:	2300      	movs	r3, #0
 8008dbc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	68ba      	ldr	r2, [r7, #8]
 8008dc2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	68fa      	ldr	r2, [r7, #12]
 8008dc8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008dca:	68ba      	ldr	r2, [r7, #8]
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	429a      	cmp	r2, r3
 8008dd0:	d812      	bhi.n	8008df8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008dd2:	687a      	ldr	r2, [r7, #4]
 8008dd4:	683b      	ldr	r3, [r7, #0]
 8008dd6:	1ad2      	subs	r2, r2, r3
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	699b      	ldr	r3, [r3, #24]
 8008ddc:	429a      	cmp	r2, r3
 8008dde:	d302      	bcc.n	8008de6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008de0:	2301      	movs	r3, #1
 8008de2:	617b      	str	r3, [r7, #20]
 8008de4:	e01b      	b.n	8008e1e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008de6:	4b10      	ldr	r3, [pc, #64]	; (8008e28 <prvInsertTimerInActiveList+0x7c>)
 8008de8:	681a      	ldr	r2, [r3, #0]
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	3304      	adds	r3, #4
 8008dee:	4619      	mov	r1, r3
 8008df0:	4610      	mov	r0, r2
 8008df2:	f7fe f9de 	bl	80071b2 <vListInsert>
 8008df6:	e012      	b.n	8008e1e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008df8:	687a      	ldr	r2, [r7, #4]
 8008dfa:	683b      	ldr	r3, [r7, #0]
 8008dfc:	429a      	cmp	r2, r3
 8008dfe:	d206      	bcs.n	8008e0e <prvInsertTimerInActiveList+0x62>
 8008e00:	68ba      	ldr	r2, [r7, #8]
 8008e02:	683b      	ldr	r3, [r7, #0]
 8008e04:	429a      	cmp	r2, r3
 8008e06:	d302      	bcc.n	8008e0e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008e08:	2301      	movs	r3, #1
 8008e0a:	617b      	str	r3, [r7, #20]
 8008e0c:	e007      	b.n	8008e1e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008e0e:	4b07      	ldr	r3, [pc, #28]	; (8008e2c <prvInsertTimerInActiveList+0x80>)
 8008e10:	681a      	ldr	r2, [r3, #0]
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	3304      	adds	r3, #4
 8008e16:	4619      	mov	r1, r3
 8008e18:	4610      	mov	r0, r2
 8008e1a:	f7fe f9ca 	bl	80071b2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008e1e:	697b      	ldr	r3, [r7, #20]
}
 8008e20:	4618      	mov	r0, r3
 8008e22:	3718      	adds	r7, #24
 8008e24:	46bd      	mov	sp, r7
 8008e26:	bd80      	pop	{r7, pc}
 8008e28:	20000f10 	.word	0x20000f10
 8008e2c:	20000f0c 	.word	0x20000f0c

08008e30 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008e30:	b580      	push	{r7, lr}
 8008e32:	b08e      	sub	sp, #56	; 0x38
 8008e34:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008e36:	e0ca      	b.n	8008fce <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	da18      	bge.n	8008e70 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008e3e:	1d3b      	adds	r3, r7, #4
 8008e40:	3304      	adds	r3, #4
 8008e42:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d10a      	bne.n	8008e60 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8008e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e4e:	f383 8811 	msr	BASEPRI, r3
 8008e52:	f3bf 8f6f 	isb	sy
 8008e56:	f3bf 8f4f 	dsb	sy
 8008e5a:	61fb      	str	r3, [r7, #28]
}
 8008e5c:	bf00      	nop
 8008e5e:	e7fe      	b.n	8008e5e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e66:	6850      	ldr	r0, [r2, #4]
 8008e68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e6a:	6892      	ldr	r2, [r2, #8]
 8008e6c:	4611      	mov	r1, r2
 8008e6e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	f2c0 80ab 	blt.w	8008fce <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e7e:	695b      	ldr	r3, [r3, #20]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d004      	beq.n	8008e8e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e86:	3304      	adds	r3, #4
 8008e88:	4618      	mov	r0, r3
 8008e8a:	f7fe f9cb 	bl	8007224 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008e8e:	463b      	mov	r3, r7
 8008e90:	4618      	mov	r0, r3
 8008e92:	f7ff ff6b 	bl	8008d6c <prvSampleTimeNow>
 8008e96:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	2b09      	cmp	r3, #9
 8008e9c:	f200 8096 	bhi.w	8008fcc <prvProcessReceivedCommands+0x19c>
 8008ea0:	a201      	add	r2, pc, #4	; (adr r2, 8008ea8 <prvProcessReceivedCommands+0x78>)
 8008ea2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ea6:	bf00      	nop
 8008ea8:	08008ed1 	.word	0x08008ed1
 8008eac:	08008ed1 	.word	0x08008ed1
 8008eb0:	08008ed1 	.word	0x08008ed1
 8008eb4:	08008f45 	.word	0x08008f45
 8008eb8:	08008f59 	.word	0x08008f59
 8008ebc:	08008fa3 	.word	0x08008fa3
 8008ec0:	08008ed1 	.word	0x08008ed1
 8008ec4:	08008ed1 	.word	0x08008ed1
 8008ec8:	08008f45 	.word	0x08008f45
 8008ecc:	08008f59 	.word	0x08008f59
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ed2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008ed6:	f043 0301 	orr.w	r3, r3, #1
 8008eda:	b2da      	uxtb	r2, r3
 8008edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ede:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008ee2:	68ba      	ldr	r2, [r7, #8]
 8008ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ee6:	699b      	ldr	r3, [r3, #24]
 8008ee8:	18d1      	adds	r1, r2, r3
 8008eea:	68bb      	ldr	r3, [r7, #8]
 8008eec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008eee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008ef0:	f7ff ff5c 	bl	8008dac <prvInsertTimerInActiveList>
 8008ef4:	4603      	mov	r3, r0
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d069      	beq.n	8008fce <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008efc:	6a1b      	ldr	r3, [r3, #32]
 8008efe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008f00:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f04:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008f08:	f003 0304 	and.w	r3, r3, #4
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d05e      	beq.n	8008fce <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008f10:	68ba      	ldr	r2, [r7, #8]
 8008f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f14:	699b      	ldr	r3, [r3, #24]
 8008f16:	441a      	add	r2, r3
 8008f18:	2300      	movs	r3, #0
 8008f1a:	9300      	str	r3, [sp, #0]
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	2100      	movs	r1, #0
 8008f20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008f22:	f7ff fe05 	bl	8008b30 <xTimerGenericCommand>
 8008f26:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008f28:	6a3b      	ldr	r3, [r7, #32]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d14f      	bne.n	8008fce <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8008f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f32:	f383 8811 	msr	BASEPRI, r3
 8008f36:	f3bf 8f6f 	isb	sy
 8008f3a:	f3bf 8f4f 	dsb	sy
 8008f3e:	61bb      	str	r3, [r7, #24]
}
 8008f40:	bf00      	nop
 8008f42:	e7fe      	b.n	8008f42 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f46:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008f4a:	f023 0301 	bic.w	r3, r3, #1
 8008f4e:	b2da      	uxtb	r2, r3
 8008f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f52:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8008f56:	e03a      	b.n	8008fce <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f5a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008f5e:	f043 0301 	orr.w	r3, r3, #1
 8008f62:	b2da      	uxtb	r2, r3
 8008f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f66:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008f6a:	68ba      	ldr	r2, [r7, #8]
 8008f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f6e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f72:	699b      	ldr	r3, [r3, #24]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d10a      	bne.n	8008f8e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8008f78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f7c:	f383 8811 	msr	BASEPRI, r3
 8008f80:	f3bf 8f6f 	isb	sy
 8008f84:	f3bf 8f4f 	dsb	sy
 8008f88:	617b      	str	r3, [r7, #20]
}
 8008f8a:	bf00      	nop
 8008f8c:	e7fe      	b.n	8008f8c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f90:	699a      	ldr	r2, [r3, #24]
 8008f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f94:	18d1      	adds	r1, r2, r3
 8008f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008f9c:	f7ff ff06 	bl	8008dac <prvInsertTimerInActiveList>
					break;
 8008fa0:	e015      	b.n	8008fce <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fa4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008fa8:	f003 0302 	and.w	r3, r3, #2
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d103      	bne.n	8008fb8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8008fb0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008fb2:	f000 fbdd 	bl	8009770 <vPortFree>
 8008fb6:	e00a      	b.n	8008fce <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008fbe:	f023 0301 	bic.w	r3, r3, #1
 8008fc2:	b2da      	uxtb	r2, r3
 8008fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fc6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008fca:	e000      	b.n	8008fce <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8008fcc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008fce:	4b08      	ldr	r3, [pc, #32]	; (8008ff0 <prvProcessReceivedCommands+0x1c0>)
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	1d39      	adds	r1, r7, #4
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	f7fe fbec 	bl	80077b4 <xQueueReceive>
 8008fdc:	4603      	mov	r3, r0
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	f47f af2a 	bne.w	8008e38 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008fe4:	bf00      	nop
 8008fe6:	bf00      	nop
 8008fe8:	3730      	adds	r7, #48	; 0x30
 8008fea:	46bd      	mov	sp, r7
 8008fec:	bd80      	pop	{r7, pc}
 8008fee:	bf00      	nop
 8008ff0:	20000f14 	.word	0x20000f14

08008ff4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b088      	sub	sp, #32
 8008ff8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008ffa:	e048      	b.n	800908e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008ffc:	4b2d      	ldr	r3, [pc, #180]	; (80090b4 <prvSwitchTimerLists+0xc0>)
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	68db      	ldr	r3, [r3, #12]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009006:	4b2b      	ldr	r3, [pc, #172]	; (80090b4 <prvSwitchTimerLists+0xc0>)
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	68db      	ldr	r3, [r3, #12]
 800900c:	68db      	ldr	r3, [r3, #12]
 800900e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	3304      	adds	r3, #4
 8009014:	4618      	mov	r0, r3
 8009016:	f7fe f905 	bl	8007224 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	6a1b      	ldr	r3, [r3, #32]
 800901e:	68f8      	ldr	r0, [r7, #12]
 8009020:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009028:	f003 0304 	and.w	r3, r3, #4
 800902c:	2b00      	cmp	r3, #0
 800902e:	d02e      	beq.n	800908e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	699b      	ldr	r3, [r3, #24]
 8009034:	693a      	ldr	r2, [r7, #16]
 8009036:	4413      	add	r3, r2
 8009038:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800903a:	68ba      	ldr	r2, [r7, #8]
 800903c:	693b      	ldr	r3, [r7, #16]
 800903e:	429a      	cmp	r2, r3
 8009040:	d90e      	bls.n	8009060 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	68ba      	ldr	r2, [r7, #8]
 8009046:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	68fa      	ldr	r2, [r7, #12]
 800904c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800904e:	4b19      	ldr	r3, [pc, #100]	; (80090b4 <prvSwitchTimerLists+0xc0>)
 8009050:	681a      	ldr	r2, [r3, #0]
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	3304      	adds	r3, #4
 8009056:	4619      	mov	r1, r3
 8009058:	4610      	mov	r0, r2
 800905a:	f7fe f8aa 	bl	80071b2 <vListInsert>
 800905e:	e016      	b.n	800908e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009060:	2300      	movs	r3, #0
 8009062:	9300      	str	r3, [sp, #0]
 8009064:	2300      	movs	r3, #0
 8009066:	693a      	ldr	r2, [r7, #16]
 8009068:	2100      	movs	r1, #0
 800906a:	68f8      	ldr	r0, [r7, #12]
 800906c:	f7ff fd60 	bl	8008b30 <xTimerGenericCommand>
 8009070:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d10a      	bne.n	800908e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8009078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800907c:	f383 8811 	msr	BASEPRI, r3
 8009080:	f3bf 8f6f 	isb	sy
 8009084:	f3bf 8f4f 	dsb	sy
 8009088:	603b      	str	r3, [r7, #0]
}
 800908a:	bf00      	nop
 800908c:	e7fe      	b.n	800908c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800908e:	4b09      	ldr	r3, [pc, #36]	; (80090b4 <prvSwitchTimerLists+0xc0>)
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	2b00      	cmp	r3, #0
 8009096:	d1b1      	bne.n	8008ffc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009098:	4b06      	ldr	r3, [pc, #24]	; (80090b4 <prvSwitchTimerLists+0xc0>)
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800909e:	4b06      	ldr	r3, [pc, #24]	; (80090b8 <prvSwitchTimerLists+0xc4>)
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	4a04      	ldr	r2, [pc, #16]	; (80090b4 <prvSwitchTimerLists+0xc0>)
 80090a4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80090a6:	4a04      	ldr	r2, [pc, #16]	; (80090b8 <prvSwitchTimerLists+0xc4>)
 80090a8:	697b      	ldr	r3, [r7, #20]
 80090aa:	6013      	str	r3, [r2, #0]
}
 80090ac:	bf00      	nop
 80090ae:	3718      	adds	r7, #24
 80090b0:	46bd      	mov	sp, r7
 80090b2:	bd80      	pop	{r7, pc}
 80090b4:	20000f0c 	.word	0x20000f0c
 80090b8:	20000f10 	.word	0x20000f10

080090bc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b082      	sub	sp, #8
 80090c0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80090c2:	f000 f967 	bl	8009394 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80090c6:	4b15      	ldr	r3, [pc, #84]	; (800911c <prvCheckForValidListAndQueue+0x60>)
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d120      	bne.n	8009110 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80090ce:	4814      	ldr	r0, [pc, #80]	; (8009120 <prvCheckForValidListAndQueue+0x64>)
 80090d0:	f7fe f81e 	bl	8007110 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80090d4:	4813      	ldr	r0, [pc, #76]	; (8009124 <prvCheckForValidListAndQueue+0x68>)
 80090d6:	f7fe f81b 	bl	8007110 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80090da:	4b13      	ldr	r3, [pc, #76]	; (8009128 <prvCheckForValidListAndQueue+0x6c>)
 80090dc:	4a10      	ldr	r2, [pc, #64]	; (8009120 <prvCheckForValidListAndQueue+0x64>)
 80090de:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80090e0:	4b12      	ldr	r3, [pc, #72]	; (800912c <prvCheckForValidListAndQueue+0x70>)
 80090e2:	4a10      	ldr	r2, [pc, #64]	; (8009124 <prvCheckForValidListAndQueue+0x68>)
 80090e4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80090e6:	2300      	movs	r3, #0
 80090e8:	9300      	str	r3, [sp, #0]
 80090ea:	4b11      	ldr	r3, [pc, #68]	; (8009130 <prvCheckForValidListAndQueue+0x74>)
 80090ec:	4a11      	ldr	r2, [pc, #68]	; (8009134 <prvCheckForValidListAndQueue+0x78>)
 80090ee:	2110      	movs	r1, #16
 80090f0:	200a      	movs	r0, #10
 80090f2:	f7fe f929 	bl	8007348 <xQueueGenericCreateStatic>
 80090f6:	4603      	mov	r3, r0
 80090f8:	4a08      	ldr	r2, [pc, #32]	; (800911c <prvCheckForValidListAndQueue+0x60>)
 80090fa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80090fc:	4b07      	ldr	r3, [pc, #28]	; (800911c <prvCheckForValidListAndQueue+0x60>)
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d005      	beq.n	8009110 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009104:	4b05      	ldr	r3, [pc, #20]	; (800911c <prvCheckForValidListAndQueue+0x60>)
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	490b      	ldr	r1, [pc, #44]	; (8009138 <prvCheckForValidListAndQueue+0x7c>)
 800910a:	4618      	mov	r0, r3
 800910c:	f7fe fd42 	bl	8007b94 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009110:	f000 f970 	bl	80093f4 <vPortExitCritical>
}
 8009114:	bf00      	nop
 8009116:	46bd      	mov	sp, r7
 8009118:	bd80      	pop	{r7, pc}
 800911a:	bf00      	nop
 800911c:	20000f14 	.word	0x20000f14
 8009120:	20000ee4 	.word	0x20000ee4
 8009124:	20000ef8 	.word	0x20000ef8
 8009128:	20000f0c 	.word	0x20000f0c
 800912c:	20000f10 	.word	0x20000f10
 8009130:	20000fc0 	.word	0x20000fc0
 8009134:	20000f20 	.word	0x20000f20
 8009138:	0800a61c 	.word	0x0800a61c

0800913c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800913c:	b480      	push	{r7}
 800913e:	b085      	sub	sp, #20
 8009140:	af00      	add	r7, sp, #0
 8009142:	60f8      	str	r0, [r7, #12]
 8009144:	60b9      	str	r1, [r7, #8]
 8009146:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	3b04      	subs	r3, #4
 800914c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009154:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	3b04      	subs	r3, #4
 800915a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800915c:	68bb      	ldr	r3, [r7, #8]
 800915e:	f023 0201 	bic.w	r2, r3, #1
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	3b04      	subs	r3, #4
 800916a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800916c:	4a0c      	ldr	r2, [pc, #48]	; (80091a0 <pxPortInitialiseStack+0x64>)
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	3b14      	subs	r3, #20
 8009176:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009178:	687a      	ldr	r2, [r7, #4]
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	3b04      	subs	r3, #4
 8009182:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	f06f 0202 	mvn.w	r2, #2
 800918a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	3b20      	subs	r3, #32
 8009190:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009192:	68fb      	ldr	r3, [r7, #12]
}
 8009194:	4618      	mov	r0, r3
 8009196:	3714      	adds	r7, #20
 8009198:	46bd      	mov	sp, r7
 800919a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919e:	4770      	bx	lr
 80091a0:	080091a5 	.word	0x080091a5

080091a4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80091a4:	b480      	push	{r7}
 80091a6:	b085      	sub	sp, #20
 80091a8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80091aa:	2300      	movs	r3, #0
 80091ac:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80091ae:	4b12      	ldr	r3, [pc, #72]	; (80091f8 <prvTaskExitError+0x54>)
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80091b6:	d00a      	beq.n	80091ce <prvTaskExitError+0x2a>
	__asm volatile
 80091b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091bc:	f383 8811 	msr	BASEPRI, r3
 80091c0:	f3bf 8f6f 	isb	sy
 80091c4:	f3bf 8f4f 	dsb	sy
 80091c8:	60fb      	str	r3, [r7, #12]
}
 80091ca:	bf00      	nop
 80091cc:	e7fe      	b.n	80091cc <prvTaskExitError+0x28>
	__asm volatile
 80091ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091d2:	f383 8811 	msr	BASEPRI, r3
 80091d6:	f3bf 8f6f 	isb	sy
 80091da:	f3bf 8f4f 	dsb	sy
 80091de:	60bb      	str	r3, [r7, #8]
}
 80091e0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80091e2:	bf00      	nop
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d0fc      	beq.n	80091e4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80091ea:	bf00      	nop
 80091ec:	bf00      	nop
 80091ee:	3714      	adds	r7, #20
 80091f0:	46bd      	mov	sp, r7
 80091f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f6:	4770      	bx	lr
 80091f8:	20000098 	.word	0x20000098
 80091fc:	00000000 	.word	0x00000000

08009200 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009200:	4b07      	ldr	r3, [pc, #28]	; (8009220 <pxCurrentTCBConst2>)
 8009202:	6819      	ldr	r1, [r3, #0]
 8009204:	6808      	ldr	r0, [r1, #0]
 8009206:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800920a:	f380 8809 	msr	PSP, r0
 800920e:	f3bf 8f6f 	isb	sy
 8009212:	f04f 0000 	mov.w	r0, #0
 8009216:	f380 8811 	msr	BASEPRI, r0
 800921a:	4770      	bx	lr
 800921c:	f3af 8000 	nop.w

08009220 <pxCurrentTCBConst2>:
 8009220:	200009e4 	.word	0x200009e4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009224:	bf00      	nop
 8009226:	bf00      	nop

08009228 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009228:	4808      	ldr	r0, [pc, #32]	; (800924c <prvPortStartFirstTask+0x24>)
 800922a:	6800      	ldr	r0, [r0, #0]
 800922c:	6800      	ldr	r0, [r0, #0]
 800922e:	f380 8808 	msr	MSP, r0
 8009232:	f04f 0000 	mov.w	r0, #0
 8009236:	f380 8814 	msr	CONTROL, r0
 800923a:	b662      	cpsie	i
 800923c:	b661      	cpsie	f
 800923e:	f3bf 8f4f 	dsb	sy
 8009242:	f3bf 8f6f 	isb	sy
 8009246:	df00      	svc	0
 8009248:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800924a:	bf00      	nop
 800924c:	e000ed08 	.word	0xe000ed08

08009250 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009250:	b580      	push	{r7, lr}
 8009252:	b086      	sub	sp, #24
 8009254:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009256:	4b46      	ldr	r3, [pc, #280]	; (8009370 <xPortStartScheduler+0x120>)
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	4a46      	ldr	r2, [pc, #280]	; (8009374 <xPortStartScheduler+0x124>)
 800925c:	4293      	cmp	r3, r2
 800925e:	d10a      	bne.n	8009276 <xPortStartScheduler+0x26>
	__asm volatile
 8009260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009264:	f383 8811 	msr	BASEPRI, r3
 8009268:	f3bf 8f6f 	isb	sy
 800926c:	f3bf 8f4f 	dsb	sy
 8009270:	613b      	str	r3, [r7, #16]
}
 8009272:	bf00      	nop
 8009274:	e7fe      	b.n	8009274 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009276:	4b3e      	ldr	r3, [pc, #248]	; (8009370 <xPortStartScheduler+0x120>)
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	4a3f      	ldr	r2, [pc, #252]	; (8009378 <xPortStartScheduler+0x128>)
 800927c:	4293      	cmp	r3, r2
 800927e:	d10a      	bne.n	8009296 <xPortStartScheduler+0x46>
	__asm volatile
 8009280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009284:	f383 8811 	msr	BASEPRI, r3
 8009288:	f3bf 8f6f 	isb	sy
 800928c:	f3bf 8f4f 	dsb	sy
 8009290:	60fb      	str	r3, [r7, #12]
}
 8009292:	bf00      	nop
 8009294:	e7fe      	b.n	8009294 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009296:	4b39      	ldr	r3, [pc, #228]	; (800937c <xPortStartScheduler+0x12c>)
 8009298:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800929a:	697b      	ldr	r3, [r7, #20]
 800929c:	781b      	ldrb	r3, [r3, #0]
 800929e:	b2db      	uxtb	r3, r3
 80092a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80092a2:	697b      	ldr	r3, [r7, #20]
 80092a4:	22ff      	movs	r2, #255	; 0xff
 80092a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80092a8:	697b      	ldr	r3, [r7, #20]
 80092aa:	781b      	ldrb	r3, [r3, #0]
 80092ac:	b2db      	uxtb	r3, r3
 80092ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80092b0:	78fb      	ldrb	r3, [r7, #3]
 80092b2:	b2db      	uxtb	r3, r3
 80092b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80092b8:	b2da      	uxtb	r2, r3
 80092ba:	4b31      	ldr	r3, [pc, #196]	; (8009380 <xPortStartScheduler+0x130>)
 80092bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80092be:	4b31      	ldr	r3, [pc, #196]	; (8009384 <xPortStartScheduler+0x134>)
 80092c0:	2207      	movs	r2, #7
 80092c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80092c4:	e009      	b.n	80092da <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80092c6:	4b2f      	ldr	r3, [pc, #188]	; (8009384 <xPortStartScheduler+0x134>)
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	3b01      	subs	r3, #1
 80092cc:	4a2d      	ldr	r2, [pc, #180]	; (8009384 <xPortStartScheduler+0x134>)
 80092ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80092d0:	78fb      	ldrb	r3, [r7, #3]
 80092d2:	b2db      	uxtb	r3, r3
 80092d4:	005b      	lsls	r3, r3, #1
 80092d6:	b2db      	uxtb	r3, r3
 80092d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80092da:	78fb      	ldrb	r3, [r7, #3]
 80092dc:	b2db      	uxtb	r3, r3
 80092de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092e2:	2b80      	cmp	r3, #128	; 0x80
 80092e4:	d0ef      	beq.n	80092c6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80092e6:	4b27      	ldr	r3, [pc, #156]	; (8009384 <xPortStartScheduler+0x134>)
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	f1c3 0307 	rsb	r3, r3, #7
 80092ee:	2b04      	cmp	r3, #4
 80092f0:	d00a      	beq.n	8009308 <xPortStartScheduler+0xb8>
	__asm volatile
 80092f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092f6:	f383 8811 	msr	BASEPRI, r3
 80092fa:	f3bf 8f6f 	isb	sy
 80092fe:	f3bf 8f4f 	dsb	sy
 8009302:	60bb      	str	r3, [r7, #8]
}
 8009304:	bf00      	nop
 8009306:	e7fe      	b.n	8009306 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009308:	4b1e      	ldr	r3, [pc, #120]	; (8009384 <xPortStartScheduler+0x134>)
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	021b      	lsls	r3, r3, #8
 800930e:	4a1d      	ldr	r2, [pc, #116]	; (8009384 <xPortStartScheduler+0x134>)
 8009310:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009312:	4b1c      	ldr	r3, [pc, #112]	; (8009384 <xPortStartScheduler+0x134>)
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800931a:	4a1a      	ldr	r2, [pc, #104]	; (8009384 <xPortStartScheduler+0x134>)
 800931c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	b2da      	uxtb	r2, r3
 8009322:	697b      	ldr	r3, [r7, #20]
 8009324:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009326:	4b18      	ldr	r3, [pc, #96]	; (8009388 <xPortStartScheduler+0x138>)
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	4a17      	ldr	r2, [pc, #92]	; (8009388 <xPortStartScheduler+0x138>)
 800932c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009330:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009332:	4b15      	ldr	r3, [pc, #84]	; (8009388 <xPortStartScheduler+0x138>)
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	4a14      	ldr	r2, [pc, #80]	; (8009388 <xPortStartScheduler+0x138>)
 8009338:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800933c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800933e:	f000 f8dd 	bl	80094fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009342:	4b12      	ldr	r3, [pc, #72]	; (800938c <xPortStartScheduler+0x13c>)
 8009344:	2200      	movs	r2, #0
 8009346:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009348:	f000 f8fc 	bl	8009544 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800934c:	4b10      	ldr	r3, [pc, #64]	; (8009390 <xPortStartScheduler+0x140>)
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	4a0f      	ldr	r2, [pc, #60]	; (8009390 <xPortStartScheduler+0x140>)
 8009352:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009356:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009358:	f7ff ff66 	bl	8009228 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800935c:	f7ff f84a 	bl	80083f4 <vTaskSwitchContext>
	prvTaskExitError();
 8009360:	f7ff ff20 	bl	80091a4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009364:	2300      	movs	r3, #0
}
 8009366:	4618      	mov	r0, r3
 8009368:	3718      	adds	r7, #24
 800936a:	46bd      	mov	sp, r7
 800936c:	bd80      	pop	{r7, pc}
 800936e:	bf00      	nop
 8009370:	e000ed00 	.word	0xe000ed00
 8009374:	410fc271 	.word	0x410fc271
 8009378:	410fc270 	.word	0x410fc270
 800937c:	e000e400 	.word	0xe000e400
 8009380:	20001010 	.word	0x20001010
 8009384:	20001014 	.word	0x20001014
 8009388:	e000ed20 	.word	0xe000ed20
 800938c:	20000098 	.word	0x20000098
 8009390:	e000ef34 	.word	0xe000ef34

08009394 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009394:	b480      	push	{r7}
 8009396:	b083      	sub	sp, #12
 8009398:	af00      	add	r7, sp, #0
	__asm volatile
 800939a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800939e:	f383 8811 	msr	BASEPRI, r3
 80093a2:	f3bf 8f6f 	isb	sy
 80093a6:	f3bf 8f4f 	dsb	sy
 80093aa:	607b      	str	r3, [r7, #4]
}
 80093ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80093ae:	4b0f      	ldr	r3, [pc, #60]	; (80093ec <vPortEnterCritical+0x58>)
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	3301      	adds	r3, #1
 80093b4:	4a0d      	ldr	r2, [pc, #52]	; (80093ec <vPortEnterCritical+0x58>)
 80093b6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80093b8:	4b0c      	ldr	r3, [pc, #48]	; (80093ec <vPortEnterCritical+0x58>)
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	2b01      	cmp	r3, #1
 80093be:	d10f      	bne.n	80093e0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80093c0:	4b0b      	ldr	r3, [pc, #44]	; (80093f0 <vPortEnterCritical+0x5c>)
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	b2db      	uxtb	r3, r3
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d00a      	beq.n	80093e0 <vPortEnterCritical+0x4c>
	__asm volatile
 80093ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093ce:	f383 8811 	msr	BASEPRI, r3
 80093d2:	f3bf 8f6f 	isb	sy
 80093d6:	f3bf 8f4f 	dsb	sy
 80093da:	603b      	str	r3, [r7, #0]
}
 80093dc:	bf00      	nop
 80093de:	e7fe      	b.n	80093de <vPortEnterCritical+0x4a>
	}
}
 80093e0:	bf00      	nop
 80093e2:	370c      	adds	r7, #12
 80093e4:	46bd      	mov	sp, r7
 80093e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ea:	4770      	bx	lr
 80093ec:	20000098 	.word	0x20000098
 80093f0:	e000ed04 	.word	0xe000ed04

080093f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80093f4:	b480      	push	{r7}
 80093f6:	b083      	sub	sp, #12
 80093f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80093fa:	4b12      	ldr	r3, [pc, #72]	; (8009444 <vPortExitCritical+0x50>)
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d10a      	bne.n	8009418 <vPortExitCritical+0x24>
	__asm volatile
 8009402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009406:	f383 8811 	msr	BASEPRI, r3
 800940a:	f3bf 8f6f 	isb	sy
 800940e:	f3bf 8f4f 	dsb	sy
 8009412:	607b      	str	r3, [r7, #4]
}
 8009414:	bf00      	nop
 8009416:	e7fe      	b.n	8009416 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009418:	4b0a      	ldr	r3, [pc, #40]	; (8009444 <vPortExitCritical+0x50>)
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	3b01      	subs	r3, #1
 800941e:	4a09      	ldr	r2, [pc, #36]	; (8009444 <vPortExitCritical+0x50>)
 8009420:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009422:	4b08      	ldr	r3, [pc, #32]	; (8009444 <vPortExitCritical+0x50>)
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	2b00      	cmp	r3, #0
 8009428:	d105      	bne.n	8009436 <vPortExitCritical+0x42>
 800942a:	2300      	movs	r3, #0
 800942c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800942e:	683b      	ldr	r3, [r7, #0]
 8009430:	f383 8811 	msr	BASEPRI, r3
}
 8009434:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009436:	bf00      	nop
 8009438:	370c      	adds	r7, #12
 800943a:	46bd      	mov	sp, r7
 800943c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009440:	4770      	bx	lr
 8009442:	bf00      	nop
 8009444:	20000098 	.word	0x20000098
	...

08009450 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009450:	f3ef 8009 	mrs	r0, PSP
 8009454:	f3bf 8f6f 	isb	sy
 8009458:	4b15      	ldr	r3, [pc, #84]	; (80094b0 <pxCurrentTCBConst>)
 800945a:	681a      	ldr	r2, [r3, #0]
 800945c:	f01e 0f10 	tst.w	lr, #16
 8009460:	bf08      	it	eq
 8009462:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009466:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800946a:	6010      	str	r0, [r2, #0]
 800946c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009470:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009474:	f380 8811 	msr	BASEPRI, r0
 8009478:	f3bf 8f4f 	dsb	sy
 800947c:	f3bf 8f6f 	isb	sy
 8009480:	f7fe ffb8 	bl	80083f4 <vTaskSwitchContext>
 8009484:	f04f 0000 	mov.w	r0, #0
 8009488:	f380 8811 	msr	BASEPRI, r0
 800948c:	bc09      	pop	{r0, r3}
 800948e:	6819      	ldr	r1, [r3, #0]
 8009490:	6808      	ldr	r0, [r1, #0]
 8009492:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009496:	f01e 0f10 	tst.w	lr, #16
 800949a:	bf08      	it	eq
 800949c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80094a0:	f380 8809 	msr	PSP, r0
 80094a4:	f3bf 8f6f 	isb	sy
 80094a8:	4770      	bx	lr
 80094aa:	bf00      	nop
 80094ac:	f3af 8000 	nop.w

080094b0 <pxCurrentTCBConst>:
 80094b0:	200009e4 	.word	0x200009e4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80094b4:	bf00      	nop
 80094b6:	bf00      	nop

080094b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80094b8:	b580      	push	{r7, lr}
 80094ba:	b082      	sub	sp, #8
 80094bc:	af00      	add	r7, sp, #0
	__asm volatile
 80094be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094c2:	f383 8811 	msr	BASEPRI, r3
 80094c6:	f3bf 8f6f 	isb	sy
 80094ca:	f3bf 8f4f 	dsb	sy
 80094ce:	607b      	str	r3, [r7, #4]
}
 80094d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80094d2:	f7fe fed5 	bl	8008280 <xTaskIncrementTick>
 80094d6:	4603      	mov	r3, r0
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d003      	beq.n	80094e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80094dc:	4b06      	ldr	r3, [pc, #24]	; (80094f8 <xPortSysTickHandler+0x40>)
 80094de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80094e2:	601a      	str	r2, [r3, #0]
 80094e4:	2300      	movs	r3, #0
 80094e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80094e8:	683b      	ldr	r3, [r7, #0]
 80094ea:	f383 8811 	msr	BASEPRI, r3
}
 80094ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80094f0:	bf00      	nop
 80094f2:	3708      	adds	r7, #8
 80094f4:	46bd      	mov	sp, r7
 80094f6:	bd80      	pop	{r7, pc}
 80094f8:	e000ed04 	.word	0xe000ed04

080094fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80094fc:	b480      	push	{r7}
 80094fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009500:	4b0b      	ldr	r3, [pc, #44]	; (8009530 <vPortSetupTimerInterrupt+0x34>)
 8009502:	2200      	movs	r2, #0
 8009504:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009506:	4b0b      	ldr	r3, [pc, #44]	; (8009534 <vPortSetupTimerInterrupt+0x38>)
 8009508:	2200      	movs	r2, #0
 800950a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800950c:	4b0a      	ldr	r3, [pc, #40]	; (8009538 <vPortSetupTimerInterrupt+0x3c>)
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	4a0a      	ldr	r2, [pc, #40]	; (800953c <vPortSetupTimerInterrupt+0x40>)
 8009512:	fba2 2303 	umull	r2, r3, r2, r3
 8009516:	099b      	lsrs	r3, r3, #6
 8009518:	4a09      	ldr	r2, [pc, #36]	; (8009540 <vPortSetupTimerInterrupt+0x44>)
 800951a:	3b01      	subs	r3, #1
 800951c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800951e:	4b04      	ldr	r3, [pc, #16]	; (8009530 <vPortSetupTimerInterrupt+0x34>)
 8009520:	2207      	movs	r2, #7
 8009522:	601a      	str	r2, [r3, #0]
}
 8009524:	bf00      	nop
 8009526:	46bd      	mov	sp, r7
 8009528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952c:	4770      	bx	lr
 800952e:	bf00      	nop
 8009530:	e000e010 	.word	0xe000e010
 8009534:	e000e018 	.word	0xe000e018
 8009538:	20000000 	.word	0x20000000
 800953c:	10624dd3 	.word	0x10624dd3
 8009540:	e000e014 	.word	0xe000e014

08009544 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009544:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009554 <vPortEnableVFP+0x10>
 8009548:	6801      	ldr	r1, [r0, #0]
 800954a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800954e:	6001      	str	r1, [r0, #0]
 8009550:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009552:	bf00      	nop
 8009554:	e000ed88 	.word	0xe000ed88

08009558 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009558:	b480      	push	{r7}
 800955a:	b085      	sub	sp, #20
 800955c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800955e:	f3ef 8305 	mrs	r3, IPSR
 8009562:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	2b0f      	cmp	r3, #15
 8009568:	d914      	bls.n	8009594 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800956a:	4a17      	ldr	r2, [pc, #92]	; (80095c8 <vPortValidateInterruptPriority+0x70>)
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	4413      	add	r3, r2
 8009570:	781b      	ldrb	r3, [r3, #0]
 8009572:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009574:	4b15      	ldr	r3, [pc, #84]	; (80095cc <vPortValidateInterruptPriority+0x74>)
 8009576:	781b      	ldrb	r3, [r3, #0]
 8009578:	7afa      	ldrb	r2, [r7, #11]
 800957a:	429a      	cmp	r2, r3
 800957c:	d20a      	bcs.n	8009594 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800957e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009582:	f383 8811 	msr	BASEPRI, r3
 8009586:	f3bf 8f6f 	isb	sy
 800958a:	f3bf 8f4f 	dsb	sy
 800958e:	607b      	str	r3, [r7, #4]
}
 8009590:	bf00      	nop
 8009592:	e7fe      	b.n	8009592 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009594:	4b0e      	ldr	r3, [pc, #56]	; (80095d0 <vPortValidateInterruptPriority+0x78>)
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800959c:	4b0d      	ldr	r3, [pc, #52]	; (80095d4 <vPortValidateInterruptPriority+0x7c>)
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	429a      	cmp	r2, r3
 80095a2:	d90a      	bls.n	80095ba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80095a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095a8:	f383 8811 	msr	BASEPRI, r3
 80095ac:	f3bf 8f6f 	isb	sy
 80095b0:	f3bf 8f4f 	dsb	sy
 80095b4:	603b      	str	r3, [r7, #0]
}
 80095b6:	bf00      	nop
 80095b8:	e7fe      	b.n	80095b8 <vPortValidateInterruptPriority+0x60>
	}
 80095ba:	bf00      	nop
 80095bc:	3714      	adds	r7, #20
 80095be:	46bd      	mov	sp, r7
 80095c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c4:	4770      	bx	lr
 80095c6:	bf00      	nop
 80095c8:	e000e3f0 	.word	0xe000e3f0
 80095cc:	20001010 	.word	0x20001010
 80095d0:	e000ed0c 	.word	0xe000ed0c
 80095d4:	20001014 	.word	0x20001014

080095d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80095d8:	b580      	push	{r7, lr}
 80095da:	b08a      	sub	sp, #40	; 0x28
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80095e0:	2300      	movs	r3, #0
 80095e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80095e4:	f7fe fd90 	bl	8008108 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80095e8:	4b5b      	ldr	r3, [pc, #364]	; (8009758 <pvPortMalloc+0x180>)
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d101      	bne.n	80095f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80095f0:	f000 f920 	bl	8009834 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80095f4:	4b59      	ldr	r3, [pc, #356]	; (800975c <pvPortMalloc+0x184>)
 80095f6:	681a      	ldr	r2, [r3, #0]
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	4013      	ands	r3, r2
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	f040 8093 	bne.w	8009728 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	2b00      	cmp	r3, #0
 8009606:	d01d      	beq.n	8009644 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009608:	2208      	movs	r2, #8
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	4413      	add	r3, r2
 800960e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	f003 0307 	and.w	r3, r3, #7
 8009616:	2b00      	cmp	r3, #0
 8009618:	d014      	beq.n	8009644 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	f023 0307 	bic.w	r3, r3, #7
 8009620:	3308      	adds	r3, #8
 8009622:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	f003 0307 	and.w	r3, r3, #7
 800962a:	2b00      	cmp	r3, #0
 800962c:	d00a      	beq.n	8009644 <pvPortMalloc+0x6c>
	__asm volatile
 800962e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009632:	f383 8811 	msr	BASEPRI, r3
 8009636:	f3bf 8f6f 	isb	sy
 800963a:	f3bf 8f4f 	dsb	sy
 800963e:	617b      	str	r3, [r7, #20]
}
 8009640:	bf00      	nop
 8009642:	e7fe      	b.n	8009642 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	2b00      	cmp	r3, #0
 8009648:	d06e      	beq.n	8009728 <pvPortMalloc+0x150>
 800964a:	4b45      	ldr	r3, [pc, #276]	; (8009760 <pvPortMalloc+0x188>)
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	687a      	ldr	r2, [r7, #4]
 8009650:	429a      	cmp	r2, r3
 8009652:	d869      	bhi.n	8009728 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009654:	4b43      	ldr	r3, [pc, #268]	; (8009764 <pvPortMalloc+0x18c>)
 8009656:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009658:	4b42      	ldr	r3, [pc, #264]	; (8009764 <pvPortMalloc+0x18c>)
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800965e:	e004      	b.n	800966a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009662:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800966a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800966c:	685b      	ldr	r3, [r3, #4]
 800966e:	687a      	ldr	r2, [r7, #4]
 8009670:	429a      	cmp	r2, r3
 8009672:	d903      	bls.n	800967c <pvPortMalloc+0xa4>
 8009674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d1f1      	bne.n	8009660 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800967c:	4b36      	ldr	r3, [pc, #216]	; (8009758 <pvPortMalloc+0x180>)
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009682:	429a      	cmp	r2, r3
 8009684:	d050      	beq.n	8009728 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009686:	6a3b      	ldr	r3, [r7, #32]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	2208      	movs	r2, #8
 800968c:	4413      	add	r3, r2
 800968e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009692:	681a      	ldr	r2, [r3, #0]
 8009694:	6a3b      	ldr	r3, [r7, #32]
 8009696:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800969a:	685a      	ldr	r2, [r3, #4]
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	1ad2      	subs	r2, r2, r3
 80096a0:	2308      	movs	r3, #8
 80096a2:	005b      	lsls	r3, r3, #1
 80096a4:	429a      	cmp	r2, r3
 80096a6:	d91f      	bls.n	80096e8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80096a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	4413      	add	r3, r2
 80096ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80096b0:	69bb      	ldr	r3, [r7, #24]
 80096b2:	f003 0307 	and.w	r3, r3, #7
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d00a      	beq.n	80096d0 <pvPortMalloc+0xf8>
	__asm volatile
 80096ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096be:	f383 8811 	msr	BASEPRI, r3
 80096c2:	f3bf 8f6f 	isb	sy
 80096c6:	f3bf 8f4f 	dsb	sy
 80096ca:	613b      	str	r3, [r7, #16]
}
 80096cc:	bf00      	nop
 80096ce:	e7fe      	b.n	80096ce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80096d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096d2:	685a      	ldr	r2, [r3, #4]
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	1ad2      	subs	r2, r2, r3
 80096d8:	69bb      	ldr	r3, [r7, #24]
 80096da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80096dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096de:	687a      	ldr	r2, [r7, #4]
 80096e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80096e2:	69b8      	ldr	r0, [r7, #24]
 80096e4:	f000 f908 	bl	80098f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80096e8:	4b1d      	ldr	r3, [pc, #116]	; (8009760 <pvPortMalloc+0x188>)
 80096ea:	681a      	ldr	r2, [r3, #0]
 80096ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096ee:	685b      	ldr	r3, [r3, #4]
 80096f0:	1ad3      	subs	r3, r2, r3
 80096f2:	4a1b      	ldr	r2, [pc, #108]	; (8009760 <pvPortMalloc+0x188>)
 80096f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80096f6:	4b1a      	ldr	r3, [pc, #104]	; (8009760 <pvPortMalloc+0x188>)
 80096f8:	681a      	ldr	r2, [r3, #0]
 80096fa:	4b1b      	ldr	r3, [pc, #108]	; (8009768 <pvPortMalloc+0x190>)
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	429a      	cmp	r2, r3
 8009700:	d203      	bcs.n	800970a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009702:	4b17      	ldr	r3, [pc, #92]	; (8009760 <pvPortMalloc+0x188>)
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	4a18      	ldr	r2, [pc, #96]	; (8009768 <pvPortMalloc+0x190>)
 8009708:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800970a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800970c:	685a      	ldr	r2, [r3, #4]
 800970e:	4b13      	ldr	r3, [pc, #76]	; (800975c <pvPortMalloc+0x184>)
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	431a      	orrs	r2, r3
 8009714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009716:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800971a:	2200      	movs	r2, #0
 800971c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800971e:	4b13      	ldr	r3, [pc, #76]	; (800976c <pvPortMalloc+0x194>)
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	3301      	adds	r3, #1
 8009724:	4a11      	ldr	r2, [pc, #68]	; (800976c <pvPortMalloc+0x194>)
 8009726:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009728:	f7fe fcfc 	bl	8008124 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800972c:	69fb      	ldr	r3, [r7, #28]
 800972e:	f003 0307 	and.w	r3, r3, #7
 8009732:	2b00      	cmp	r3, #0
 8009734:	d00a      	beq.n	800974c <pvPortMalloc+0x174>
	__asm volatile
 8009736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800973a:	f383 8811 	msr	BASEPRI, r3
 800973e:	f3bf 8f6f 	isb	sy
 8009742:	f3bf 8f4f 	dsb	sy
 8009746:	60fb      	str	r3, [r7, #12]
}
 8009748:	bf00      	nop
 800974a:	e7fe      	b.n	800974a <pvPortMalloc+0x172>
	return pvReturn;
 800974c:	69fb      	ldr	r3, [r7, #28]
}
 800974e:	4618      	mov	r0, r3
 8009750:	3728      	adds	r7, #40	; 0x28
 8009752:	46bd      	mov	sp, r7
 8009754:	bd80      	pop	{r7, pc}
 8009756:	bf00      	nop
 8009758:	20004c20 	.word	0x20004c20
 800975c:	20004c34 	.word	0x20004c34
 8009760:	20004c24 	.word	0x20004c24
 8009764:	20004c18 	.word	0x20004c18
 8009768:	20004c28 	.word	0x20004c28
 800976c:	20004c2c 	.word	0x20004c2c

08009770 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009770:	b580      	push	{r7, lr}
 8009772:	b086      	sub	sp, #24
 8009774:	af00      	add	r7, sp, #0
 8009776:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	2b00      	cmp	r3, #0
 8009780:	d04d      	beq.n	800981e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009782:	2308      	movs	r3, #8
 8009784:	425b      	negs	r3, r3
 8009786:	697a      	ldr	r2, [r7, #20]
 8009788:	4413      	add	r3, r2
 800978a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800978c:	697b      	ldr	r3, [r7, #20]
 800978e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009790:	693b      	ldr	r3, [r7, #16]
 8009792:	685a      	ldr	r2, [r3, #4]
 8009794:	4b24      	ldr	r3, [pc, #144]	; (8009828 <vPortFree+0xb8>)
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	4013      	ands	r3, r2
 800979a:	2b00      	cmp	r3, #0
 800979c:	d10a      	bne.n	80097b4 <vPortFree+0x44>
	__asm volatile
 800979e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097a2:	f383 8811 	msr	BASEPRI, r3
 80097a6:	f3bf 8f6f 	isb	sy
 80097aa:	f3bf 8f4f 	dsb	sy
 80097ae:	60fb      	str	r3, [r7, #12]
}
 80097b0:	bf00      	nop
 80097b2:	e7fe      	b.n	80097b2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80097b4:	693b      	ldr	r3, [r7, #16]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d00a      	beq.n	80097d2 <vPortFree+0x62>
	__asm volatile
 80097bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097c0:	f383 8811 	msr	BASEPRI, r3
 80097c4:	f3bf 8f6f 	isb	sy
 80097c8:	f3bf 8f4f 	dsb	sy
 80097cc:	60bb      	str	r3, [r7, #8]
}
 80097ce:	bf00      	nop
 80097d0:	e7fe      	b.n	80097d0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80097d2:	693b      	ldr	r3, [r7, #16]
 80097d4:	685a      	ldr	r2, [r3, #4]
 80097d6:	4b14      	ldr	r3, [pc, #80]	; (8009828 <vPortFree+0xb8>)
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	4013      	ands	r3, r2
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d01e      	beq.n	800981e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80097e0:	693b      	ldr	r3, [r7, #16]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d11a      	bne.n	800981e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80097e8:	693b      	ldr	r3, [r7, #16]
 80097ea:	685a      	ldr	r2, [r3, #4]
 80097ec:	4b0e      	ldr	r3, [pc, #56]	; (8009828 <vPortFree+0xb8>)
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	43db      	mvns	r3, r3
 80097f2:	401a      	ands	r2, r3
 80097f4:	693b      	ldr	r3, [r7, #16]
 80097f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80097f8:	f7fe fc86 	bl	8008108 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80097fc:	693b      	ldr	r3, [r7, #16]
 80097fe:	685a      	ldr	r2, [r3, #4]
 8009800:	4b0a      	ldr	r3, [pc, #40]	; (800982c <vPortFree+0xbc>)
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	4413      	add	r3, r2
 8009806:	4a09      	ldr	r2, [pc, #36]	; (800982c <vPortFree+0xbc>)
 8009808:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800980a:	6938      	ldr	r0, [r7, #16]
 800980c:	f000 f874 	bl	80098f8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009810:	4b07      	ldr	r3, [pc, #28]	; (8009830 <vPortFree+0xc0>)
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	3301      	adds	r3, #1
 8009816:	4a06      	ldr	r2, [pc, #24]	; (8009830 <vPortFree+0xc0>)
 8009818:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800981a:	f7fe fc83 	bl	8008124 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800981e:	bf00      	nop
 8009820:	3718      	adds	r7, #24
 8009822:	46bd      	mov	sp, r7
 8009824:	bd80      	pop	{r7, pc}
 8009826:	bf00      	nop
 8009828:	20004c34 	.word	0x20004c34
 800982c:	20004c24 	.word	0x20004c24
 8009830:	20004c30 	.word	0x20004c30

08009834 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009834:	b480      	push	{r7}
 8009836:	b085      	sub	sp, #20
 8009838:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800983a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800983e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009840:	4b27      	ldr	r3, [pc, #156]	; (80098e0 <prvHeapInit+0xac>)
 8009842:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	f003 0307 	and.w	r3, r3, #7
 800984a:	2b00      	cmp	r3, #0
 800984c:	d00c      	beq.n	8009868 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	3307      	adds	r3, #7
 8009852:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	f023 0307 	bic.w	r3, r3, #7
 800985a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800985c:	68ba      	ldr	r2, [r7, #8]
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	1ad3      	subs	r3, r2, r3
 8009862:	4a1f      	ldr	r2, [pc, #124]	; (80098e0 <prvHeapInit+0xac>)
 8009864:	4413      	add	r3, r2
 8009866:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800986c:	4a1d      	ldr	r2, [pc, #116]	; (80098e4 <prvHeapInit+0xb0>)
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009872:	4b1c      	ldr	r3, [pc, #112]	; (80098e4 <prvHeapInit+0xb0>)
 8009874:	2200      	movs	r2, #0
 8009876:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	68ba      	ldr	r2, [r7, #8]
 800987c:	4413      	add	r3, r2
 800987e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009880:	2208      	movs	r2, #8
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	1a9b      	subs	r3, r3, r2
 8009886:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	f023 0307 	bic.w	r3, r3, #7
 800988e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	4a15      	ldr	r2, [pc, #84]	; (80098e8 <prvHeapInit+0xb4>)
 8009894:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009896:	4b14      	ldr	r3, [pc, #80]	; (80098e8 <prvHeapInit+0xb4>)
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	2200      	movs	r2, #0
 800989c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800989e:	4b12      	ldr	r3, [pc, #72]	; (80098e8 <prvHeapInit+0xb4>)
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	2200      	movs	r2, #0
 80098a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80098aa:	683b      	ldr	r3, [r7, #0]
 80098ac:	68fa      	ldr	r2, [r7, #12]
 80098ae:	1ad2      	subs	r2, r2, r3
 80098b0:	683b      	ldr	r3, [r7, #0]
 80098b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80098b4:	4b0c      	ldr	r3, [pc, #48]	; (80098e8 <prvHeapInit+0xb4>)
 80098b6:	681a      	ldr	r2, [r3, #0]
 80098b8:	683b      	ldr	r3, [r7, #0]
 80098ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80098bc:	683b      	ldr	r3, [r7, #0]
 80098be:	685b      	ldr	r3, [r3, #4]
 80098c0:	4a0a      	ldr	r2, [pc, #40]	; (80098ec <prvHeapInit+0xb8>)
 80098c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80098c4:	683b      	ldr	r3, [r7, #0]
 80098c6:	685b      	ldr	r3, [r3, #4]
 80098c8:	4a09      	ldr	r2, [pc, #36]	; (80098f0 <prvHeapInit+0xbc>)
 80098ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80098cc:	4b09      	ldr	r3, [pc, #36]	; (80098f4 <prvHeapInit+0xc0>)
 80098ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80098d2:	601a      	str	r2, [r3, #0]
}
 80098d4:	bf00      	nop
 80098d6:	3714      	adds	r7, #20
 80098d8:	46bd      	mov	sp, r7
 80098da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098de:	4770      	bx	lr
 80098e0:	20001018 	.word	0x20001018
 80098e4:	20004c18 	.word	0x20004c18
 80098e8:	20004c20 	.word	0x20004c20
 80098ec:	20004c28 	.word	0x20004c28
 80098f0:	20004c24 	.word	0x20004c24
 80098f4:	20004c34 	.word	0x20004c34

080098f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80098f8:	b480      	push	{r7}
 80098fa:	b085      	sub	sp, #20
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009900:	4b28      	ldr	r3, [pc, #160]	; (80099a4 <prvInsertBlockIntoFreeList+0xac>)
 8009902:	60fb      	str	r3, [r7, #12]
 8009904:	e002      	b.n	800990c <prvInsertBlockIntoFreeList+0x14>
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	60fb      	str	r3, [r7, #12]
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	687a      	ldr	r2, [r7, #4]
 8009912:	429a      	cmp	r2, r3
 8009914:	d8f7      	bhi.n	8009906 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	685b      	ldr	r3, [r3, #4]
 800991e:	68ba      	ldr	r2, [r7, #8]
 8009920:	4413      	add	r3, r2
 8009922:	687a      	ldr	r2, [r7, #4]
 8009924:	429a      	cmp	r2, r3
 8009926:	d108      	bne.n	800993a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	685a      	ldr	r2, [r3, #4]
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	685b      	ldr	r3, [r3, #4]
 8009930:	441a      	add	r2, r3
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	685b      	ldr	r3, [r3, #4]
 8009942:	68ba      	ldr	r2, [r7, #8]
 8009944:	441a      	add	r2, r3
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	429a      	cmp	r2, r3
 800994c:	d118      	bne.n	8009980 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	681a      	ldr	r2, [r3, #0]
 8009952:	4b15      	ldr	r3, [pc, #84]	; (80099a8 <prvInsertBlockIntoFreeList+0xb0>)
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	429a      	cmp	r2, r3
 8009958:	d00d      	beq.n	8009976 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	685a      	ldr	r2, [r3, #4]
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	685b      	ldr	r3, [r3, #4]
 8009964:	441a      	add	r2, r3
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	681a      	ldr	r2, [r3, #0]
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	601a      	str	r2, [r3, #0]
 8009974:	e008      	b.n	8009988 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009976:	4b0c      	ldr	r3, [pc, #48]	; (80099a8 <prvInsertBlockIntoFreeList+0xb0>)
 8009978:	681a      	ldr	r2, [r3, #0]
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	601a      	str	r2, [r3, #0]
 800997e:	e003      	b.n	8009988 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	681a      	ldr	r2, [r3, #0]
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009988:	68fa      	ldr	r2, [r7, #12]
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	429a      	cmp	r2, r3
 800998e:	d002      	beq.n	8009996 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	687a      	ldr	r2, [r7, #4]
 8009994:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009996:	bf00      	nop
 8009998:	3714      	adds	r7, #20
 800999a:	46bd      	mov	sp, r7
 800999c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a0:	4770      	bx	lr
 80099a2:	bf00      	nop
 80099a4:	20004c18 	.word	0x20004c18
 80099a8:	20004c20 	.word	0x20004c20

080099ac <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80099ac:	b580      	push	{r7, lr}
 80099ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80099b0:	2200      	movs	r2, #0
 80099b2:	4912      	ldr	r1, [pc, #72]	; (80099fc <MX_USB_DEVICE_Init+0x50>)
 80099b4:	4812      	ldr	r0, [pc, #72]	; (8009a00 <MX_USB_DEVICE_Init+0x54>)
 80099b6:	f7fb ff43 	bl	8005840 <USBD_Init>
 80099ba:	4603      	mov	r3, r0
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d001      	beq.n	80099c4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80099c0:	f7f6 ffc6 	bl	8000950 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80099c4:	490f      	ldr	r1, [pc, #60]	; (8009a04 <MX_USB_DEVICE_Init+0x58>)
 80099c6:	480e      	ldr	r0, [pc, #56]	; (8009a00 <MX_USB_DEVICE_Init+0x54>)
 80099c8:	f7fb ff6a 	bl	80058a0 <USBD_RegisterClass>
 80099cc:	4603      	mov	r3, r0
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d001      	beq.n	80099d6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80099d2:	f7f6 ffbd 	bl	8000950 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80099d6:	490c      	ldr	r1, [pc, #48]	; (8009a08 <MX_USB_DEVICE_Init+0x5c>)
 80099d8:	4809      	ldr	r0, [pc, #36]	; (8009a00 <MX_USB_DEVICE_Init+0x54>)
 80099da:	f7fb fea1 	bl	8005720 <USBD_CDC_RegisterInterface>
 80099de:	4603      	mov	r3, r0
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d001      	beq.n	80099e8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80099e4:	f7f6 ffb4 	bl	8000950 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80099e8:	4805      	ldr	r0, [pc, #20]	; (8009a00 <MX_USB_DEVICE_Init+0x54>)
 80099ea:	f7fb ff8f 	bl	800590c <USBD_Start>
 80099ee:	4603      	mov	r3, r0
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d001      	beq.n	80099f8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80099f4:	f7f6 ffac 	bl	8000950 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80099f8:	bf00      	nop
 80099fa:	bd80      	pop	{r7, pc}
 80099fc:	200000b0 	.word	0x200000b0
 8009a00:	20004c38 	.word	0x20004c38
 8009a04:	20000018 	.word	0x20000018
 8009a08:	2000009c 	.word	0x2000009c

08009a0c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009a0c:	b580      	push	{r7, lr}
 8009a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009a10:	2200      	movs	r2, #0
 8009a12:	4905      	ldr	r1, [pc, #20]	; (8009a28 <CDC_Init_FS+0x1c>)
 8009a14:	4805      	ldr	r0, [pc, #20]	; (8009a2c <CDC_Init_FS+0x20>)
 8009a16:	f7fb fe9d 	bl	8005754 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009a1a:	4905      	ldr	r1, [pc, #20]	; (8009a30 <CDC_Init_FS+0x24>)
 8009a1c:	4803      	ldr	r0, [pc, #12]	; (8009a2c <CDC_Init_FS+0x20>)
 8009a1e:	f7fb febb 	bl	8005798 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009a22:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009a24:	4618      	mov	r0, r3
 8009a26:	bd80      	pop	{r7, pc}
 8009a28:	20005714 	.word	0x20005714
 8009a2c:	20004c38 	.word	0x20004c38
 8009a30:	20004f14 	.word	0x20004f14

08009a34 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009a34:	b480      	push	{r7}
 8009a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009a38:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a42:	4770      	bx	lr

08009a44 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009a44:	b480      	push	{r7}
 8009a46:	b083      	sub	sp, #12
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	4603      	mov	r3, r0
 8009a4c:	6039      	str	r1, [r7, #0]
 8009a4e:	71fb      	strb	r3, [r7, #7]
 8009a50:	4613      	mov	r3, r2
 8009a52:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009a54:	79fb      	ldrb	r3, [r7, #7]
 8009a56:	2b23      	cmp	r3, #35	; 0x23
 8009a58:	d84a      	bhi.n	8009af0 <CDC_Control_FS+0xac>
 8009a5a:	a201      	add	r2, pc, #4	; (adr r2, 8009a60 <CDC_Control_FS+0x1c>)
 8009a5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a60:	08009af1 	.word	0x08009af1
 8009a64:	08009af1 	.word	0x08009af1
 8009a68:	08009af1 	.word	0x08009af1
 8009a6c:	08009af1 	.word	0x08009af1
 8009a70:	08009af1 	.word	0x08009af1
 8009a74:	08009af1 	.word	0x08009af1
 8009a78:	08009af1 	.word	0x08009af1
 8009a7c:	08009af1 	.word	0x08009af1
 8009a80:	08009af1 	.word	0x08009af1
 8009a84:	08009af1 	.word	0x08009af1
 8009a88:	08009af1 	.word	0x08009af1
 8009a8c:	08009af1 	.word	0x08009af1
 8009a90:	08009af1 	.word	0x08009af1
 8009a94:	08009af1 	.word	0x08009af1
 8009a98:	08009af1 	.word	0x08009af1
 8009a9c:	08009af1 	.word	0x08009af1
 8009aa0:	08009af1 	.word	0x08009af1
 8009aa4:	08009af1 	.word	0x08009af1
 8009aa8:	08009af1 	.word	0x08009af1
 8009aac:	08009af1 	.word	0x08009af1
 8009ab0:	08009af1 	.word	0x08009af1
 8009ab4:	08009af1 	.word	0x08009af1
 8009ab8:	08009af1 	.word	0x08009af1
 8009abc:	08009af1 	.word	0x08009af1
 8009ac0:	08009af1 	.word	0x08009af1
 8009ac4:	08009af1 	.word	0x08009af1
 8009ac8:	08009af1 	.word	0x08009af1
 8009acc:	08009af1 	.word	0x08009af1
 8009ad0:	08009af1 	.word	0x08009af1
 8009ad4:	08009af1 	.word	0x08009af1
 8009ad8:	08009af1 	.word	0x08009af1
 8009adc:	08009af1 	.word	0x08009af1
 8009ae0:	08009af1 	.word	0x08009af1
 8009ae4:	08009af1 	.word	0x08009af1
 8009ae8:	08009af1 	.word	0x08009af1
 8009aec:	08009af1 	.word	0x08009af1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009af0:	bf00      	nop
  }

  return (USBD_OK);
 8009af2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009af4:	4618      	mov	r0, r3
 8009af6:	370c      	adds	r7, #12
 8009af8:	46bd      	mov	sp, r7
 8009afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009afe:	4770      	bx	lr

08009b00 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009b00:	b580      	push	{r7, lr}
 8009b02:	b082      	sub	sp, #8
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	6078      	str	r0, [r7, #4]
 8009b08:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009b0a:	6879      	ldr	r1, [r7, #4]
 8009b0c:	4805      	ldr	r0, [pc, #20]	; (8009b24 <CDC_Receive_FS+0x24>)
 8009b0e:	f7fb fe43 	bl	8005798 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009b12:	4804      	ldr	r0, [pc, #16]	; (8009b24 <CDC_Receive_FS+0x24>)
 8009b14:	f7fb fe5e 	bl	80057d4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009b18:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009b1a:	4618      	mov	r0, r3
 8009b1c:	3708      	adds	r7, #8
 8009b1e:	46bd      	mov	sp, r7
 8009b20:	bd80      	pop	{r7, pc}
 8009b22:	bf00      	nop
 8009b24:	20004c38 	.word	0x20004c38

08009b28 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009b28:	b480      	push	{r7}
 8009b2a:	b087      	sub	sp, #28
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	60f8      	str	r0, [r7, #12]
 8009b30:	60b9      	str	r1, [r7, #8]
 8009b32:	4613      	mov	r3, r2
 8009b34:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009b36:	2300      	movs	r3, #0
 8009b38:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009b3a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009b3e:	4618      	mov	r0, r3
 8009b40:	371c      	adds	r7, #28
 8009b42:	46bd      	mov	sp, r7
 8009b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b48:	4770      	bx	lr
	...

08009b4c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b4c:	b480      	push	{r7}
 8009b4e:	b083      	sub	sp, #12
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	4603      	mov	r3, r0
 8009b54:	6039      	str	r1, [r7, #0]
 8009b56:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009b58:	683b      	ldr	r3, [r7, #0]
 8009b5a:	2212      	movs	r2, #18
 8009b5c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009b5e:	4b03      	ldr	r3, [pc, #12]	; (8009b6c <USBD_FS_DeviceDescriptor+0x20>)
}
 8009b60:	4618      	mov	r0, r3
 8009b62:	370c      	adds	r7, #12
 8009b64:	46bd      	mov	sp, r7
 8009b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6a:	4770      	bx	lr
 8009b6c:	200000cc 	.word	0x200000cc

08009b70 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b70:	b480      	push	{r7}
 8009b72:	b083      	sub	sp, #12
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	4603      	mov	r3, r0
 8009b78:	6039      	str	r1, [r7, #0]
 8009b7a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009b7c:	683b      	ldr	r3, [r7, #0]
 8009b7e:	2204      	movs	r2, #4
 8009b80:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009b82:	4b03      	ldr	r3, [pc, #12]	; (8009b90 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009b84:	4618      	mov	r0, r3
 8009b86:	370c      	adds	r7, #12
 8009b88:	46bd      	mov	sp, r7
 8009b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8e:	4770      	bx	lr
 8009b90:	200000e0 	.word	0x200000e0

08009b94 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b94:	b580      	push	{r7, lr}
 8009b96:	b082      	sub	sp, #8
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	4603      	mov	r3, r0
 8009b9c:	6039      	str	r1, [r7, #0]
 8009b9e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009ba0:	79fb      	ldrb	r3, [r7, #7]
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d105      	bne.n	8009bb2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009ba6:	683a      	ldr	r2, [r7, #0]
 8009ba8:	4907      	ldr	r1, [pc, #28]	; (8009bc8 <USBD_FS_ProductStrDescriptor+0x34>)
 8009baa:	4808      	ldr	r0, [pc, #32]	; (8009bcc <USBD_FS_ProductStrDescriptor+0x38>)
 8009bac:	f7fd f860 	bl	8006c70 <USBD_GetString>
 8009bb0:	e004      	b.n	8009bbc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009bb2:	683a      	ldr	r2, [r7, #0]
 8009bb4:	4904      	ldr	r1, [pc, #16]	; (8009bc8 <USBD_FS_ProductStrDescriptor+0x34>)
 8009bb6:	4805      	ldr	r0, [pc, #20]	; (8009bcc <USBD_FS_ProductStrDescriptor+0x38>)
 8009bb8:	f7fd f85a 	bl	8006c70 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009bbc:	4b02      	ldr	r3, [pc, #8]	; (8009bc8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	3708      	adds	r7, #8
 8009bc2:	46bd      	mov	sp, r7
 8009bc4:	bd80      	pop	{r7, pc}
 8009bc6:	bf00      	nop
 8009bc8:	20005f14 	.word	0x20005f14
 8009bcc:	0800a624 	.word	0x0800a624

08009bd0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009bd0:	b580      	push	{r7, lr}
 8009bd2:	b082      	sub	sp, #8
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	4603      	mov	r3, r0
 8009bd8:	6039      	str	r1, [r7, #0]
 8009bda:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009bdc:	683a      	ldr	r2, [r7, #0]
 8009bde:	4904      	ldr	r1, [pc, #16]	; (8009bf0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009be0:	4804      	ldr	r0, [pc, #16]	; (8009bf4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009be2:	f7fd f845 	bl	8006c70 <USBD_GetString>
  return USBD_StrDesc;
 8009be6:	4b02      	ldr	r3, [pc, #8]	; (8009bf0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009be8:	4618      	mov	r0, r3
 8009bea:	3708      	adds	r7, #8
 8009bec:	46bd      	mov	sp, r7
 8009bee:	bd80      	pop	{r7, pc}
 8009bf0:	20005f14 	.word	0x20005f14
 8009bf4:	0800a63c 	.word	0x0800a63c

08009bf8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009bf8:	b580      	push	{r7, lr}
 8009bfa:	b082      	sub	sp, #8
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	4603      	mov	r3, r0
 8009c00:	6039      	str	r1, [r7, #0]
 8009c02:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009c04:	683b      	ldr	r3, [r7, #0]
 8009c06:	221a      	movs	r2, #26
 8009c08:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009c0a:	f000 f843 	bl	8009c94 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009c0e:	4b02      	ldr	r3, [pc, #8]	; (8009c18 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009c10:	4618      	mov	r0, r3
 8009c12:	3708      	adds	r7, #8
 8009c14:	46bd      	mov	sp, r7
 8009c16:	bd80      	pop	{r7, pc}
 8009c18:	200000e4 	.word	0x200000e4

08009c1c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c1c:	b580      	push	{r7, lr}
 8009c1e:	b082      	sub	sp, #8
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	4603      	mov	r3, r0
 8009c24:	6039      	str	r1, [r7, #0]
 8009c26:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009c28:	79fb      	ldrb	r3, [r7, #7]
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d105      	bne.n	8009c3a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009c2e:	683a      	ldr	r2, [r7, #0]
 8009c30:	4907      	ldr	r1, [pc, #28]	; (8009c50 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009c32:	4808      	ldr	r0, [pc, #32]	; (8009c54 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009c34:	f7fd f81c 	bl	8006c70 <USBD_GetString>
 8009c38:	e004      	b.n	8009c44 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009c3a:	683a      	ldr	r2, [r7, #0]
 8009c3c:	4904      	ldr	r1, [pc, #16]	; (8009c50 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009c3e:	4805      	ldr	r0, [pc, #20]	; (8009c54 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009c40:	f7fd f816 	bl	8006c70 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009c44:	4b02      	ldr	r3, [pc, #8]	; (8009c50 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009c46:	4618      	mov	r0, r3
 8009c48:	3708      	adds	r7, #8
 8009c4a:	46bd      	mov	sp, r7
 8009c4c:	bd80      	pop	{r7, pc}
 8009c4e:	bf00      	nop
 8009c50:	20005f14 	.word	0x20005f14
 8009c54:	0800a650 	.word	0x0800a650

08009c58 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	b082      	sub	sp, #8
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	4603      	mov	r3, r0
 8009c60:	6039      	str	r1, [r7, #0]
 8009c62:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009c64:	79fb      	ldrb	r3, [r7, #7]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d105      	bne.n	8009c76 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009c6a:	683a      	ldr	r2, [r7, #0]
 8009c6c:	4907      	ldr	r1, [pc, #28]	; (8009c8c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009c6e:	4808      	ldr	r0, [pc, #32]	; (8009c90 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009c70:	f7fc fffe 	bl	8006c70 <USBD_GetString>
 8009c74:	e004      	b.n	8009c80 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009c76:	683a      	ldr	r2, [r7, #0]
 8009c78:	4904      	ldr	r1, [pc, #16]	; (8009c8c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009c7a:	4805      	ldr	r0, [pc, #20]	; (8009c90 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009c7c:	f7fc fff8 	bl	8006c70 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009c80:	4b02      	ldr	r3, [pc, #8]	; (8009c8c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009c82:	4618      	mov	r0, r3
 8009c84:	3708      	adds	r7, #8
 8009c86:	46bd      	mov	sp, r7
 8009c88:	bd80      	pop	{r7, pc}
 8009c8a:	bf00      	nop
 8009c8c:	20005f14 	.word	0x20005f14
 8009c90:	0800a65c 	.word	0x0800a65c

08009c94 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009c94:	b580      	push	{r7, lr}
 8009c96:	b084      	sub	sp, #16
 8009c98:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009c9a:	4b0f      	ldr	r3, [pc, #60]	; (8009cd8 <Get_SerialNum+0x44>)
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009ca0:	4b0e      	ldr	r3, [pc, #56]	; (8009cdc <Get_SerialNum+0x48>)
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009ca6:	4b0e      	ldr	r3, [pc, #56]	; (8009ce0 <Get_SerialNum+0x4c>)
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009cac:	68fa      	ldr	r2, [r7, #12]
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	4413      	add	r3, r2
 8009cb2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d009      	beq.n	8009cce <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009cba:	2208      	movs	r2, #8
 8009cbc:	4909      	ldr	r1, [pc, #36]	; (8009ce4 <Get_SerialNum+0x50>)
 8009cbe:	68f8      	ldr	r0, [r7, #12]
 8009cc0:	f000 f814 	bl	8009cec <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009cc4:	2204      	movs	r2, #4
 8009cc6:	4908      	ldr	r1, [pc, #32]	; (8009ce8 <Get_SerialNum+0x54>)
 8009cc8:	68b8      	ldr	r0, [r7, #8]
 8009cca:	f000 f80f 	bl	8009cec <IntToUnicode>
  }
}
 8009cce:	bf00      	nop
 8009cd0:	3710      	adds	r7, #16
 8009cd2:	46bd      	mov	sp, r7
 8009cd4:	bd80      	pop	{r7, pc}
 8009cd6:	bf00      	nop
 8009cd8:	1fff7a10 	.word	0x1fff7a10
 8009cdc:	1fff7a14 	.word	0x1fff7a14
 8009ce0:	1fff7a18 	.word	0x1fff7a18
 8009ce4:	200000e6 	.word	0x200000e6
 8009ce8:	200000f6 	.word	0x200000f6

08009cec <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009cec:	b480      	push	{r7}
 8009cee:	b087      	sub	sp, #28
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	60f8      	str	r0, [r7, #12]
 8009cf4:	60b9      	str	r1, [r7, #8]
 8009cf6:	4613      	mov	r3, r2
 8009cf8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009cfa:	2300      	movs	r3, #0
 8009cfc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009cfe:	2300      	movs	r3, #0
 8009d00:	75fb      	strb	r3, [r7, #23]
 8009d02:	e027      	b.n	8009d54 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	0f1b      	lsrs	r3, r3, #28
 8009d08:	2b09      	cmp	r3, #9
 8009d0a:	d80b      	bhi.n	8009d24 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	0f1b      	lsrs	r3, r3, #28
 8009d10:	b2da      	uxtb	r2, r3
 8009d12:	7dfb      	ldrb	r3, [r7, #23]
 8009d14:	005b      	lsls	r3, r3, #1
 8009d16:	4619      	mov	r1, r3
 8009d18:	68bb      	ldr	r3, [r7, #8]
 8009d1a:	440b      	add	r3, r1
 8009d1c:	3230      	adds	r2, #48	; 0x30
 8009d1e:	b2d2      	uxtb	r2, r2
 8009d20:	701a      	strb	r2, [r3, #0]
 8009d22:	e00a      	b.n	8009d3a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	0f1b      	lsrs	r3, r3, #28
 8009d28:	b2da      	uxtb	r2, r3
 8009d2a:	7dfb      	ldrb	r3, [r7, #23]
 8009d2c:	005b      	lsls	r3, r3, #1
 8009d2e:	4619      	mov	r1, r3
 8009d30:	68bb      	ldr	r3, [r7, #8]
 8009d32:	440b      	add	r3, r1
 8009d34:	3237      	adds	r2, #55	; 0x37
 8009d36:	b2d2      	uxtb	r2, r2
 8009d38:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	011b      	lsls	r3, r3, #4
 8009d3e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009d40:	7dfb      	ldrb	r3, [r7, #23]
 8009d42:	005b      	lsls	r3, r3, #1
 8009d44:	3301      	adds	r3, #1
 8009d46:	68ba      	ldr	r2, [r7, #8]
 8009d48:	4413      	add	r3, r2
 8009d4a:	2200      	movs	r2, #0
 8009d4c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009d4e:	7dfb      	ldrb	r3, [r7, #23]
 8009d50:	3301      	adds	r3, #1
 8009d52:	75fb      	strb	r3, [r7, #23]
 8009d54:	7dfa      	ldrb	r2, [r7, #23]
 8009d56:	79fb      	ldrb	r3, [r7, #7]
 8009d58:	429a      	cmp	r2, r3
 8009d5a:	d3d3      	bcc.n	8009d04 <IntToUnicode+0x18>
  }
}
 8009d5c:	bf00      	nop
 8009d5e:	bf00      	nop
 8009d60:	371c      	adds	r7, #28
 8009d62:	46bd      	mov	sp, r7
 8009d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d68:	4770      	bx	lr
	...

08009d6c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009d6c:	b580      	push	{r7, lr}
 8009d6e:	b08a      	sub	sp, #40	; 0x28
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009d74:	f107 0314 	add.w	r3, r7, #20
 8009d78:	2200      	movs	r2, #0
 8009d7a:	601a      	str	r2, [r3, #0]
 8009d7c:	605a      	str	r2, [r3, #4]
 8009d7e:	609a      	str	r2, [r3, #8]
 8009d80:	60da      	str	r2, [r3, #12]
 8009d82:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009d8c:	d13a      	bne.n	8009e04 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009d8e:	2300      	movs	r3, #0
 8009d90:	613b      	str	r3, [r7, #16]
 8009d92:	4b1e      	ldr	r3, [pc, #120]	; (8009e0c <HAL_PCD_MspInit+0xa0>)
 8009d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d96:	4a1d      	ldr	r2, [pc, #116]	; (8009e0c <HAL_PCD_MspInit+0xa0>)
 8009d98:	f043 0301 	orr.w	r3, r3, #1
 8009d9c:	6313      	str	r3, [r2, #48]	; 0x30
 8009d9e:	4b1b      	ldr	r3, [pc, #108]	; (8009e0c <HAL_PCD_MspInit+0xa0>)
 8009da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009da2:	f003 0301 	and.w	r3, r3, #1
 8009da6:	613b      	str	r3, [r7, #16]
 8009da8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 8009daa:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8009dae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009db0:	2302      	movs	r3, #2
 8009db2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009db4:	2300      	movs	r3, #0
 8009db6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009db8:	2303      	movs	r3, #3
 8009dba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009dbc:	230a      	movs	r3, #10
 8009dbe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009dc0:	f107 0314 	add.w	r3, r7, #20
 8009dc4:	4619      	mov	r1, r3
 8009dc6:	4812      	ldr	r0, [pc, #72]	; (8009e10 <HAL_PCD_MspInit+0xa4>)
 8009dc8:	f7f7 f998 	bl	80010fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009dcc:	4b0f      	ldr	r3, [pc, #60]	; (8009e0c <HAL_PCD_MspInit+0xa0>)
 8009dce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009dd0:	4a0e      	ldr	r2, [pc, #56]	; (8009e0c <HAL_PCD_MspInit+0xa0>)
 8009dd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009dd6:	6353      	str	r3, [r2, #52]	; 0x34
 8009dd8:	2300      	movs	r3, #0
 8009dda:	60fb      	str	r3, [r7, #12]
 8009ddc:	4b0b      	ldr	r3, [pc, #44]	; (8009e0c <HAL_PCD_MspInit+0xa0>)
 8009dde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009de0:	4a0a      	ldr	r2, [pc, #40]	; (8009e0c <HAL_PCD_MspInit+0xa0>)
 8009de2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009de6:	6453      	str	r3, [r2, #68]	; 0x44
 8009de8:	4b08      	ldr	r3, [pc, #32]	; (8009e0c <HAL_PCD_MspInit+0xa0>)
 8009dea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009dec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009df0:	60fb      	str	r3, [r7, #12]
 8009df2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8009df4:	2200      	movs	r2, #0
 8009df6:	2105      	movs	r1, #5
 8009df8:	2043      	movs	r0, #67	; 0x43
 8009dfa:	f7f7 f955 	bl	80010a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009dfe:	2043      	movs	r0, #67	; 0x43
 8009e00:	f7f7 f96e 	bl	80010e0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009e04:	bf00      	nop
 8009e06:	3728      	adds	r7, #40	; 0x28
 8009e08:	46bd      	mov	sp, r7
 8009e0a:	bd80      	pop	{r7, pc}
 8009e0c:	40023800 	.word	0x40023800
 8009e10:	40020000 	.word	0x40020000

08009e14 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e14:	b580      	push	{r7, lr}
 8009e16:	b082      	sub	sp, #8
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	; 0x4e0
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8009e28:	4619      	mov	r1, r3
 8009e2a:	4610      	mov	r0, r2
 8009e2c:	f7fb fdbb 	bl	80059a6 <USBD_LL_SetupStage>
}
 8009e30:	bf00      	nop
 8009e32:	3708      	adds	r7, #8
 8009e34:	46bd      	mov	sp, r7
 8009e36:	bd80      	pop	{r7, pc}

08009e38 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e38:	b580      	push	{r7, lr}
 8009e3a:	b082      	sub	sp, #8
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	6078      	str	r0, [r7, #4]
 8009e40:	460b      	mov	r3, r1
 8009e42:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 8009e4a:	78fa      	ldrb	r2, [r7, #3]
 8009e4c:	6879      	ldr	r1, [r7, #4]
 8009e4e:	4613      	mov	r3, r2
 8009e50:	00db      	lsls	r3, r3, #3
 8009e52:	4413      	add	r3, r2
 8009e54:	009b      	lsls	r3, r3, #2
 8009e56:	440b      	add	r3, r1
 8009e58:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8009e5c:	681a      	ldr	r2, [r3, #0]
 8009e5e:	78fb      	ldrb	r3, [r7, #3]
 8009e60:	4619      	mov	r1, r3
 8009e62:	f7fb fdf5 	bl	8005a50 <USBD_LL_DataOutStage>
}
 8009e66:	bf00      	nop
 8009e68:	3708      	adds	r7, #8
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	bd80      	pop	{r7, pc}

08009e6e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e6e:	b580      	push	{r7, lr}
 8009e70:	b082      	sub	sp, #8
 8009e72:	af00      	add	r7, sp, #0
 8009e74:	6078      	str	r0, [r7, #4]
 8009e76:	460b      	mov	r3, r1
 8009e78:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 8009e80:	78fa      	ldrb	r2, [r7, #3]
 8009e82:	6879      	ldr	r1, [r7, #4]
 8009e84:	4613      	mov	r3, r2
 8009e86:	00db      	lsls	r3, r3, #3
 8009e88:	4413      	add	r3, r2
 8009e8a:	009b      	lsls	r3, r3, #2
 8009e8c:	440b      	add	r3, r1
 8009e8e:	3320      	adds	r3, #32
 8009e90:	681a      	ldr	r2, [r3, #0]
 8009e92:	78fb      	ldrb	r3, [r7, #3]
 8009e94:	4619      	mov	r1, r3
 8009e96:	f7fb fe8e 	bl	8005bb6 <USBD_LL_DataInStage>
}
 8009e9a:	bf00      	nop
 8009e9c:	3708      	adds	r7, #8
 8009e9e:	46bd      	mov	sp, r7
 8009ea0:	bd80      	pop	{r7, pc}

08009ea2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ea2:	b580      	push	{r7, lr}
 8009ea4:	b082      	sub	sp, #8
 8009ea6:	af00      	add	r7, sp, #0
 8009ea8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	f7fb ffc8 	bl	8005e46 <USBD_LL_SOF>
}
 8009eb6:	bf00      	nop
 8009eb8:	3708      	adds	r7, #8
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	bd80      	pop	{r7, pc}

08009ebe <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ebe:	b580      	push	{r7, lr}
 8009ec0:	b084      	sub	sp, #16
 8009ec2:	af00      	add	r7, sp, #0
 8009ec4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009ec6:	2301      	movs	r3, #1
 8009ec8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	79db      	ldrb	r3, [r3, #7]
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d102      	bne.n	8009ed8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8009ed2:	2300      	movs	r3, #0
 8009ed4:	73fb      	strb	r3, [r7, #15]
 8009ed6:	e008      	b.n	8009eea <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	79db      	ldrb	r3, [r3, #7]
 8009edc:	2b02      	cmp	r3, #2
 8009ede:	d102      	bne.n	8009ee6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8009ee0:	2301      	movs	r3, #1
 8009ee2:	73fb      	strb	r3, [r7, #15]
 8009ee4:	e001      	b.n	8009eea <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8009ee6:	f7f6 fd33 	bl	8000950 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8009ef0:	7bfa      	ldrb	r2, [r7, #15]
 8009ef2:	4611      	mov	r1, r2
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	f7fb ff62 	bl	8005dbe <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8009f00:	4618      	mov	r0, r3
 8009f02:	f7fb ff0a 	bl	8005d1a <USBD_LL_Reset>
}
 8009f06:	bf00      	nop
 8009f08:	3710      	adds	r7, #16
 8009f0a:	46bd      	mov	sp, r7
 8009f0c:	bd80      	pop	{r7, pc}
	...

08009f10 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f10:	b580      	push	{r7, lr}
 8009f12:	b082      	sub	sp, #8
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8009f1e:	4618      	mov	r0, r3
 8009f20:	f7fb ff5d 	bl	8005dde <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	687a      	ldr	r2, [r7, #4]
 8009f30:	6812      	ldr	r2, [r2, #0]
 8009f32:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009f36:	f043 0301 	orr.w	r3, r3, #1
 8009f3a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	7adb      	ldrb	r3, [r3, #11]
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d005      	beq.n	8009f50 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009f44:	4b04      	ldr	r3, [pc, #16]	; (8009f58 <HAL_PCD_SuspendCallback+0x48>)
 8009f46:	691b      	ldr	r3, [r3, #16]
 8009f48:	4a03      	ldr	r2, [pc, #12]	; (8009f58 <HAL_PCD_SuspendCallback+0x48>)
 8009f4a:	f043 0306 	orr.w	r3, r3, #6
 8009f4e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009f50:	bf00      	nop
 8009f52:	3708      	adds	r7, #8
 8009f54:	46bd      	mov	sp, r7
 8009f56:	bd80      	pop	{r7, pc}
 8009f58:	e000ed00 	.word	0xe000ed00

08009f5c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	b082      	sub	sp, #8
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8009f6a:	4618      	mov	r0, r3
 8009f6c:	f7fb ff53 	bl	8005e16 <USBD_LL_Resume>
}
 8009f70:	bf00      	nop
 8009f72:	3708      	adds	r7, #8
 8009f74:	46bd      	mov	sp, r7
 8009f76:	bd80      	pop	{r7, pc}

08009f78 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f78:	b580      	push	{r7, lr}
 8009f7a:	b082      	sub	sp, #8
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	6078      	str	r0, [r7, #4]
 8009f80:	460b      	mov	r3, r1
 8009f82:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8009f8a:	78fa      	ldrb	r2, [r7, #3]
 8009f8c:	4611      	mov	r1, r2
 8009f8e:	4618      	mov	r0, r3
 8009f90:	f7fb ffab 	bl	8005eea <USBD_LL_IsoOUTIncomplete>
}
 8009f94:	bf00      	nop
 8009f96:	3708      	adds	r7, #8
 8009f98:	46bd      	mov	sp, r7
 8009f9a:	bd80      	pop	{r7, pc}

08009f9c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f9c:	b580      	push	{r7, lr}
 8009f9e:	b082      	sub	sp, #8
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	6078      	str	r0, [r7, #4]
 8009fa4:	460b      	mov	r3, r1
 8009fa6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8009fae:	78fa      	ldrb	r2, [r7, #3]
 8009fb0:	4611      	mov	r1, r2
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	f7fb ff67 	bl	8005e86 <USBD_LL_IsoINIncomplete>
}
 8009fb8:	bf00      	nop
 8009fba:	3708      	adds	r7, #8
 8009fbc:	46bd      	mov	sp, r7
 8009fbe:	bd80      	pop	{r7, pc}

08009fc0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009fc0:	b580      	push	{r7, lr}
 8009fc2:	b082      	sub	sp, #8
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8009fce:	4618      	mov	r0, r3
 8009fd0:	f7fb ffbd 	bl	8005f4e <USBD_LL_DevConnected>
}
 8009fd4:	bf00      	nop
 8009fd6:	3708      	adds	r7, #8
 8009fd8:	46bd      	mov	sp, r7
 8009fda:	bd80      	pop	{r7, pc}

08009fdc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009fdc:	b580      	push	{r7, lr}
 8009fde:	b082      	sub	sp, #8
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8009fea:	4618      	mov	r0, r3
 8009fec:	f7fb ffba 	bl	8005f64 <USBD_LL_DevDisconnected>
}
 8009ff0:	bf00      	nop
 8009ff2:	3708      	adds	r7, #8
 8009ff4:	46bd      	mov	sp, r7
 8009ff6:	bd80      	pop	{r7, pc}

08009ff8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009ff8:	b580      	push	{r7, lr}
 8009ffa:	b082      	sub	sp, #8
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	781b      	ldrb	r3, [r3, #0]
 800a004:	2b00      	cmp	r3, #0
 800a006:	d13c      	bne.n	800a082 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a008:	4a20      	ldr	r2, [pc, #128]	; (800a08c <USBD_LL_Init+0x94>)
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	4a1e      	ldr	r2, [pc, #120]	; (800a08c <USBD_LL_Init+0x94>)
 800a014:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a018:	4b1c      	ldr	r3, [pc, #112]	; (800a08c <USBD_LL_Init+0x94>)
 800a01a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a01e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800a020:	4b1a      	ldr	r3, [pc, #104]	; (800a08c <USBD_LL_Init+0x94>)
 800a022:	2204      	movs	r2, #4
 800a024:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a026:	4b19      	ldr	r3, [pc, #100]	; (800a08c <USBD_LL_Init+0x94>)
 800a028:	2202      	movs	r2, #2
 800a02a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a02c:	4b17      	ldr	r3, [pc, #92]	; (800a08c <USBD_LL_Init+0x94>)
 800a02e:	2200      	movs	r2, #0
 800a030:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a032:	4b16      	ldr	r3, [pc, #88]	; (800a08c <USBD_LL_Init+0x94>)
 800a034:	2202      	movs	r2, #2
 800a036:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a038:	4b14      	ldr	r3, [pc, #80]	; (800a08c <USBD_LL_Init+0x94>)
 800a03a:	2200      	movs	r2, #0
 800a03c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a03e:	4b13      	ldr	r3, [pc, #76]	; (800a08c <USBD_LL_Init+0x94>)
 800a040:	2200      	movs	r2, #0
 800a042:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a044:	4b11      	ldr	r3, [pc, #68]	; (800a08c <USBD_LL_Init+0x94>)
 800a046:	2200      	movs	r2, #0
 800a048:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800a04a:	4b10      	ldr	r3, [pc, #64]	; (800a08c <USBD_LL_Init+0x94>)
 800a04c:	2200      	movs	r2, #0
 800a04e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a050:	4b0e      	ldr	r3, [pc, #56]	; (800a08c <USBD_LL_Init+0x94>)
 800a052:	2200      	movs	r2, #0
 800a054:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a056:	480d      	ldr	r0, [pc, #52]	; (800a08c <USBD_LL_Init+0x94>)
 800a058:	f7f7 fa2f 	bl	80014ba <HAL_PCD_Init>
 800a05c:	4603      	mov	r3, r0
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d001      	beq.n	800a066 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800a062:	f7f6 fc75 	bl	8000950 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a066:	2180      	movs	r1, #128	; 0x80
 800a068:	4808      	ldr	r0, [pc, #32]	; (800a08c <USBD_LL_Init+0x94>)
 800a06a:	f7f8 fc5a 	bl	8002922 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a06e:	2240      	movs	r2, #64	; 0x40
 800a070:	2100      	movs	r1, #0
 800a072:	4806      	ldr	r0, [pc, #24]	; (800a08c <USBD_LL_Init+0x94>)
 800a074:	f7f8 fc0e 	bl	8002894 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a078:	2280      	movs	r2, #128	; 0x80
 800a07a:	2101      	movs	r1, #1
 800a07c:	4803      	ldr	r0, [pc, #12]	; (800a08c <USBD_LL_Init+0x94>)
 800a07e:	f7f8 fc09 	bl	8002894 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a082:	2300      	movs	r3, #0
}
 800a084:	4618      	mov	r0, r3
 800a086:	3708      	adds	r7, #8
 800a088:	46bd      	mov	sp, r7
 800a08a:	bd80      	pop	{r7, pc}
 800a08c:	20006114 	.word	0x20006114

0800a090 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a090:	b580      	push	{r7, lr}
 800a092:	b084      	sub	sp, #16
 800a094:	af00      	add	r7, sp, #0
 800a096:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a098:	2300      	movs	r3, #0
 800a09a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a09c:	2300      	movs	r3, #0
 800a09e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	f7f7 fb16 	bl	80016d8 <HAL_PCD_Start>
 800a0ac:	4603      	mov	r3, r0
 800a0ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a0b0:	7bfb      	ldrb	r3, [r7, #15]
 800a0b2:	4618      	mov	r0, r3
 800a0b4:	f000 f942 	bl	800a33c <USBD_Get_USB_Status>
 800a0b8:	4603      	mov	r3, r0
 800a0ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a0bc:	7bbb      	ldrb	r3, [r7, #14]
}
 800a0be:	4618      	mov	r0, r3
 800a0c0:	3710      	adds	r7, #16
 800a0c2:	46bd      	mov	sp, r7
 800a0c4:	bd80      	pop	{r7, pc}

0800a0c6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a0c6:	b580      	push	{r7, lr}
 800a0c8:	b084      	sub	sp, #16
 800a0ca:	af00      	add	r7, sp, #0
 800a0cc:	6078      	str	r0, [r7, #4]
 800a0ce:	4608      	mov	r0, r1
 800a0d0:	4611      	mov	r1, r2
 800a0d2:	461a      	mov	r2, r3
 800a0d4:	4603      	mov	r3, r0
 800a0d6:	70fb      	strb	r3, [r7, #3]
 800a0d8:	460b      	mov	r3, r1
 800a0da:	70bb      	strb	r3, [r7, #2]
 800a0dc:	4613      	mov	r3, r2
 800a0de:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a0e4:	2300      	movs	r3, #0
 800a0e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a0ee:	78bb      	ldrb	r3, [r7, #2]
 800a0f0:	883a      	ldrh	r2, [r7, #0]
 800a0f2:	78f9      	ldrb	r1, [r7, #3]
 800a0f4:	f7f7 ffea 	bl	80020cc <HAL_PCD_EP_Open>
 800a0f8:	4603      	mov	r3, r0
 800a0fa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a0fc:	7bfb      	ldrb	r3, [r7, #15]
 800a0fe:	4618      	mov	r0, r3
 800a100:	f000 f91c 	bl	800a33c <USBD_Get_USB_Status>
 800a104:	4603      	mov	r3, r0
 800a106:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a108:	7bbb      	ldrb	r3, [r7, #14]
}
 800a10a:	4618      	mov	r0, r3
 800a10c:	3710      	adds	r7, #16
 800a10e:	46bd      	mov	sp, r7
 800a110:	bd80      	pop	{r7, pc}

0800a112 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a112:	b580      	push	{r7, lr}
 800a114:	b084      	sub	sp, #16
 800a116:	af00      	add	r7, sp, #0
 800a118:	6078      	str	r0, [r7, #4]
 800a11a:	460b      	mov	r3, r1
 800a11c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a11e:	2300      	movs	r3, #0
 800a120:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a122:	2300      	movs	r3, #0
 800a124:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a12c:	78fa      	ldrb	r2, [r7, #3]
 800a12e:	4611      	mov	r1, r2
 800a130:	4618      	mov	r0, r3
 800a132:	f7f8 f833 	bl	800219c <HAL_PCD_EP_Close>
 800a136:	4603      	mov	r3, r0
 800a138:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a13a:	7bfb      	ldrb	r3, [r7, #15]
 800a13c:	4618      	mov	r0, r3
 800a13e:	f000 f8fd 	bl	800a33c <USBD_Get_USB_Status>
 800a142:	4603      	mov	r3, r0
 800a144:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a146:	7bbb      	ldrb	r3, [r7, #14]
}
 800a148:	4618      	mov	r0, r3
 800a14a:	3710      	adds	r7, #16
 800a14c:	46bd      	mov	sp, r7
 800a14e:	bd80      	pop	{r7, pc}

0800a150 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a150:	b580      	push	{r7, lr}
 800a152:	b084      	sub	sp, #16
 800a154:	af00      	add	r7, sp, #0
 800a156:	6078      	str	r0, [r7, #4]
 800a158:	460b      	mov	r3, r1
 800a15a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a15c:	2300      	movs	r3, #0
 800a15e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a160:	2300      	movs	r3, #0
 800a162:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a16a:	78fa      	ldrb	r2, [r7, #3]
 800a16c:	4611      	mov	r1, r2
 800a16e:	4618      	mov	r0, r3
 800a170:	f7f8 f8eb 	bl	800234a <HAL_PCD_EP_SetStall>
 800a174:	4603      	mov	r3, r0
 800a176:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a178:	7bfb      	ldrb	r3, [r7, #15]
 800a17a:	4618      	mov	r0, r3
 800a17c:	f000 f8de 	bl	800a33c <USBD_Get_USB_Status>
 800a180:	4603      	mov	r3, r0
 800a182:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a184:	7bbb      	ldrb	r3, [r7, #14]
}
 800a186:	4618      	mov	r0, r3
 800a188:	3710      	adds	r7, #16
 800a18a:	46bd      	mov	sp, r7
 800a18c:	bd80      	pop	{r7, pc}

0800a18e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a18e:	b580      	push	{r7, lr}
 800a190:	b084      	sub	sp, #16
 800a192:	af00      	add	r7, sp, #0
 800a194:	6078      	str	r0, [r7, #4]
 800a196:	460b      	mov	r3, r1
 800a198:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a19a:	2300      	movs	r3, #0
 800a19c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a19e:	2300      	movs	r3, #0
 800a1a0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a1a8:	78fa      	ldrb	r2, [r7, #3]
 800a1aa:	4611      	mov	r1, r2
 800a1ac:	4618      	mov	r0, r3
 800a1ae:	f7f8 f92f 	bl	8002410 <HAL_PCD_EP_ClrStall>
 800a1b2:	4603      	mov	r3, r0
 800a1b4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a1b6:	7bfb      	ldrb	r3, [r7, #15]
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	f000 f8bf 	bl	800a33c <USBD_Get_USB_Status>
 800a1be:	4603      	mov	r3, r0
 800a1c0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a1c2:	7bbb      	ldrb	r3, [r7, #14]
}
 800a1c4:	4618      	mov	r0, r3
 800a1c6:	3710      	adds	r7, #16
 800a1c8:	46bd      	mov	sp, r7
 800a1ca:	bd80      	pop	{r7, pc}

0800a1cc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a1cc:	b480      	push	{r7}
 800a1ce:	b085      	sub	sp, #20
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	6078      	str	r0, [r7, #4]
 800a1d4:	460b      	mov	r3, r1
 800a1d6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a1de:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a1e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	da0b      	bge.n	800a200 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a1e8:	78fb      	ldrb	r3, [r7, #3]
 800a1ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a1ee:	68f9      	ldr	r1, [r7, #12]
 800a1f0:	4613      	mov	r3, r2
 800a1f2:	00db      	lsls	r3, r3, #3
 800a1f4:	4413      	add	r3, r2
 800a1f6:	009b      	lsls	r3, r3, #2
 800a1f8:	440b      	add	r3, r1
 800a1fa:	3316      	adds	r3, #22
 800a1fc:	781b      	ldrb	r3, [r3, #0]
 800a1fe:	e00b      	b.n	800a218 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a200:	78fb      	ldrb	r3, [r7, #3]
 800a202:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a206:	68f9      	ldr	r1, [r7, #12]
 800a208:	4613      	mov	r3, r2
 800a20a:	00db      	lsls	r3, r3, #3
 800a20c:	4413      	add	r3, r2
 800a20e:	009b      	lsls	r3, r3, #2
 800a210:	440b      	add	r3, r1
 800a212:	f203 2356 	addw	r3, r3, #598	; 0x256
 800a216:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a218:	4618      	mov	r0, r3
 800a21a:	3714      	adds	r7, #20
 800a21c:	46bd      	mov	sp, r7
 800a21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a222:	4770      	bx	lr

0800a224 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a224:	b580      	push	{r7, lr}
 800a226:	b084      	sub	sp, #16
 800a228:	af00      	add	r7, sp, #0
 800a22a:	6078      	str	r0, [r7, #4]
 800a22c:	460b      	mov	r3, r1
 800a22e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a230:	2300      	movs	r3, #0
 800a232:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a234:	2300      	movs	r3, #0
 800a236:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a23e:	78fa      	ldrb	r2, [r7, #3]
 800a240:	4611      	mov	r1, r2
 800a242:	4618      	mov	r0, r3
 800a244:	f7f7 ff1e 	bl	8002084 <HAL_PCD_SetAddress>
 800a248:	4603      	mov	r3, r0
 800a24a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a24c:	7bfb      	ldrb	r3, [r7, #15]
 800a24e:	4618      	mov	r0, r3
 800a250:	f000 f874 	bl	800a33c <USBD_Get_USB_Status>
 800a254:	4603      	mov	r3, r0
 800a256:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a258:	7bbb      	ldrb	r3, [r7, #14]
}
 800a25a:	4618      	mov	r0, r3
 800a25c:	3710      	adds	r7, #16
 800a25e:	46bd      	mov	sp, r7
 800a260:	bd80      	pop	{r7, pc}

0800a262 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a262:	b580      	push	{r7, lr}
 800a264:	b086      	sub	sp, #24
 800a266:	af00      	add	r7, sp, #0
 800a268:	60f8      	str	r0, [r7, #12]
 800a26a:	607a      	str	r2, [r7, #4]
 800a26c:	603b      	str	r3, [r7, #0]
 800a26e:	460b      	mov	r3, r1
 800a270:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a272:	2300      	movs	r3, #0
 800a274:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a276:	2300      	movs	r3, #0
 800a278:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a280:	7af9      	ldrb	r1, [r7, #11]
 800a282:	683b      	ldr	r3, [r7, #0]
 800a284:	687a      	ldr	r2, [r7, #4]
 800a286:	f7f8 f826 	bl	80022d6 <HAL_PCD_EP_Transmit>
 800a28a:	4603      	mov	r3, r0
 800a28c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a28e:	7dfb      	ldrb	r3, [r7, #23]
 800a290:	4618      	mov	r0, r3
 800a292:	f000 f853 	bl	800a33c <USBD_Get_USB_Status>
 800a296:	4603      	mov	r3, r0
 800a298:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a29a:	7dbb      	ldrb	r3, [r7, #22]
}
 800a29c:	4618      	mov	r0, r3
 800a29e:	3718      	adds	r7, #24
 800a2a0:	46bd      	mov	sp, r7
 800a2a2:	bd80      	pop	{r7, pc}

0800a2a4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a2a4:	b580      	push	{r7, lr}
 800a2a6:	b086      	sub	sp, #24
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	60f8      	str	r0, [r7, #12]
 800a2ac:	607a      	str	r2, [r7, #4]
 800a2ae:	603b      	str	r3, [r7, #0]
 800a2b0:	460b      	mov	r3, r1
 800a2b2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a2b4:	2300      	movs	r3, #0
 800a2b6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a2b8:	2300      	movs	r3, #0
 800a2ba:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a2c2:	7af9      	ldrb	r1, [r7, #11]
 800a2c4:	683b      	ldr	r3, [r7, #0]
 800a2c6:	687a      	ldr	r2, [r7, #4]
 800a2c8:	f7f7 ffb2 	bl	8002230 <HAL_PCD_EP_Receive>
 800a2cc:	4603      	mov	r3, r0
 800a2ce:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a2d0:	7dfb      	ldrb	r3, [r7, #23]
 800a2d2:	4618      	mov	r0, r3
 800a2d4:	f000 f832 	bl	800a33c <USBD_Get_USB_Status>
 800a2d8:	4603      	mov	r3, r0
 800a2da:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a2dc:	7dbb      	ldrb	r3, [r7, #22]
}
 800a2de:	4618      	mov	r0, r3
 800a2e0:	3718      	adds	r7, #24
 800a2e2:	46bd      	mov	sp, r7
 800a2e4:	bd80      	pop	{r7, pc}

0800a2e6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a2e6:	b580      	push	{r7, lr}
 800a2e8:	b082      	sub	sp, #8
 800a2ea:	af00      	add	r7, sp, #0
 800a2ec:	6078      	str	r0, [r7, #4]
 800a2ee:	460b      	mov	r3, r1
 800a2f0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a2f8:	78fa      	ldrb	r2, [r7, #3]
 800a2fa:	4611      	mov	r1, r2
 800a2fc:	4618      	mov	r0, r3
 800a2fe:	f7f7 ffd2 	bl	80022a6 <HAL_PCD_EP_GetRxCount>
 800a302:	4603      	mov	r3, r0
}
 800a304:	4618      	mov	r0, r3
 800a306:	3708      	adds	r7, #8
 800a308:	46bd      	mov	sp, r7
 800a30a:	bd80      	pop	{r7, pc}

0800a30c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a30c:	b480      	push	{r7}
 800a30e:	b083      	sub	sp, #12
 800a310:	af00      	add	r7, sp, #0
 800a312:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a314:	4b03      	ldr	r3, [pc, #12]	; (800a324 <USBD_static_malloc+0x18>)
}
 800a316:	4618      	mov	r0, r3
 800a318:	370c      	adds	r7, #12
 800a31a:	46bd      	mov	sp, r7
 800a31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a320:	4770      	bx	lr
 800a322:	bf00      	nop
 800a324:	200065f8 	.word	0x200065f8

0800a328 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a328:	b480      	push	{r7}
 800a32a:	b083      	sub	sp, #12
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	6078      	str	r0, [r7, #4]

}
 800a330:	bf00      	nop
 800a332:	370c      	adds	r7, #12
 800a334:	46bd      	mov	sp, r7
 800a336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a33a:	4770      	bx	lr

0800a33c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a33c:	b480      	push	{r7}
 800a33e:	b085      	sub	sp, #20
 800a340:	af00      	add	r7, sp, #0
 800a342:	4603      	mov	r3, r0
 800a344:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a346:	2300      	movs	r3, #0
 800a348:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a34a:	79fb      	ldrb	r3, [r7, #7]
 800a34c:	2b03      	cmp	r3, #3
 800a34e:	d817      	bhi.n	800a380 <USBD_Get_USB_Status+0x44>
 800a350:	a201      	add	r2, pc, #4	; (adr r2, 800a358 <USBD_Get_USB_Status+0x1c>)
 800a352:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a356:	bf00      	nop
 800a358:	0800a369 	.word	0x0800a369
 800a35c:	0800a36f 	.word	0x0800a36f
 800a360:	0800a375 	.word	0x0800a375
 800a364:	0800a37b 	.word	0x0800a37b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a368:	2300      	movs	r3, #0
 800a36a:	73fb      	strb	r3, [r7, #15]
    break;
 800a36c:	e00b      	b.n	800a386 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a36e:	2303      	movs	r3, #3
 800a370:	73fb      	strb	r3, [r7, #15]
    break;
 800a372:	e008      	b.n	800a386 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a374:	2301      	movs	r3, #1
 800a376:	73fb      	strb	r3, [r7, #15]
    break;
 800a378:	e005      	b.n	800a386 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a37a:	2303      	movs	r3, #3
 800a37c:	73fb      	strb	r3, [r7, #15]
    break;
 800a37e:	e002      	b.n	800a386 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a380:	2303      	movs	r3, #3
 800a382:	73fb      	strb	r3, [r7, #15]
    break;
 800a384:	bf00      	nop
  }
  return usb_status;
 800a386:	7bfb      	ldrb	r3, [r7, #15]
}
 800a388:	4618      	mov	r0, r3
 800a38a:	3714      	adds	r7, #20
 800a38c:	46bd      	mov	sp, r7
 800a38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a392:	4770      	bx	lr

0800a394 <init>:
 *  Created on: Feb 7, 2024
 *      Author: bentjh01
 */


void init(void){
 800a394:	b580      	push	{r7, lr}
 800a396:	af00      	add	r7, sp, #0
	motors_init();
 800a398:	f000 f802 	bl	800a3a0 <motors_init>
}
 800a39c:	bf00      	nop
 800a39e:	bd80      	pop	{r7, pc}

0800a3a0 <motors_init>:
  .name = "motorTask",
  .stack_size = 128 * 4,
  .priority = (osPriority_t) osPriorityNormal,
};

void motors_init(void){
 800a3a0:	b580      	push	{r7, lr}
 800a3a2:	af00      	add	r7, sp, #0
	motorsTaskHandle = osThreadNew(motors_task, NULL, &motorTask_attributes);
 800a3a4:	4a04      	ldr	r2, [pc, #16]	; (800a3b8 <motors_init+0x18>)
 800a3a6:	2100      	movs	r1, #0
 800a3a8:	4804      	ldr	r0, [pc, #16]	; (800a3bc <motors_init+0x1c>)
 800a3aa:	f7fc fdcf 	bl	8006f4c <osThreadNew>
 800a3ae:	4603      	mov	r3, r0
 800a3b0:	4a03      	ldr	r2, [pc, #12]	; (800a3c0 <motors_init+0x20>)
 800a3b2:	6013      	str	r3, [r2, #0]
}
 800a3b4:	bf00      	nop
 800a3b6:	bd80      	pop	{r7, pc}
 800a3b8:	0800a744 	.word	0x0800a744
 800a3bc:	0800a3c5 	.word	0x0800a3c5
 800a3c0:	20006818 	.word	0x20006818

0800a3c4 <motors_task>:

void motors_task(void *arguments){
 800a3c4:	b580      	push	{r7, lr}
 800a3c6:	b082      	sub	sp, #8
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	6078      	str	r0, [r7, #4]
  for(;;)
  {
	HAL_GPIO_TogglePin(LED_A_GPIO_Port, LED_A_Pin);
 800a3cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a3d0:	4803      	ldr	r0, [pc, #12]	; (800a3e0 <motors_task+0x1c>)
 800a3d2:	f7f7 f858 	bl	8001486 <HAL_GPIO_TogglePin>
	osDelay(1000);
 800a3d6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800a3da:	f7fc fe49 	bl	8007070 <osDelay>
	HAL_GPIO_TogglePin(LED_A_GPIO_Port, LED_A_Pin);
 800a3de:	e7f5      	b.n	800a3cc <motors_task+0x8>
 800a3e0:	40021800 	.word	0x40021800

0800a3e4 <memset>:
 800a3e4:	4402      	add	r2, r0
 800a3e6:	4603      	mov	r3, r0
 800a3e8:	4293      	cmp	r3, r2
 800a3ea:	d100      	bne.n	800a3ee <memset+0xa>
 800a3ec:	4770      	bx	lr
 800a3ee:	f803 1b01 	strb.w	r1, [r3], #1
 800a3f2:	e7f9      	b.n	800a3e8 <memset+0x4>

0800a3f4 <_reclaim_reent>:
 800a3f4:	4b29      	ldr	r3, [pc, #164]	; (800a49c <_reclaim_reent+0xa8>)
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	4283      	cmp	r3, r0
 800a3fa:	b570      	push	{r4, r5, r6, lr}
 800a3fc:	4604      	mov	r4, r0
 800a3fe:	d04b      	beq.n	800a498 <_reclaim_reent+0xa4>
 800a400:	69c3      	ldr	r3, [r0, #28]
 800a402:	b143      	cbz	r3, 800a416 <_reclaim_reent+0x22>
 800a404:	68db      	ldr	r3, [r3, #12]
 800a406:	2b00      	cmp	r3, #0
 800a408:	d144      	bne.n	800a494 <_reclaim_reent+0xa0>
 800a40a:	69e3      	ldr	r3, [r4, #28]
 800a40c:	6819      	ldr	r1, [r3, #0]
 800a40e:	b111      	cbz	r1, 800a416 <_reclaim_reent+0x22>
 800a410:	4620      	mov	r0, r4
 800a412:	f000 f879 	bl	800a508 <_free_r>
 800a416:	6961      	ldr	r1, [r4, #20]
 800a418:	b111      	cbz	r1, 800a420 <_reclaim_reent+0x2c>
 800a41a:	4620      	mov	r0, r4
 800a41c:	f000 f874 	bl	800a508 <_free_r>
 800a420:	69e1      	ldr	r1, [r4, #28]
 800a422:	b111      	cbz	r1, 800a42a <_reclaim_reent+0x36>
 800a424:	4620      	mov	r0, r4
 800a426:	f000 f86f 	bl	800a508 <_free_r>
 800a42a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800a42c:	b111      	cbz	r1, 800a434 <_reclaim_reent+0x40>
 800a42e:	4620      	mov	r0, r4
 800a430:	f000 f86a 	bl	800a508 <_free_r>
 800a434:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a436:	b111      	cbz	r1, 800a43e <_reclaim_reent+0x4a>
 800a438:	4620      	mov	r0, r4
 800a43a:	f000 f865 	bl	800a508 <_free_r>
 800a43e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a440:	b111      	cbz	r1, 800a448 <_reclaim_reent+0x54>
 800a442:	4620      	mov	r0, r4
 800a444:	f000 f860 	bl	800a508 <_free_r>
 800a448:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800a44a:	b111      	cbz	r1, 800a452 <_reclaim_reent+0x5e>
 800a44c:	4620      	mov	r0, r4
 800a44e:	f000 f85b 	bl	800a508 <_free_r>
 800a452:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800a454:	b111      	cbz	r1, 800a45c <_reclaim_reent+0x68>
 800a456:	4620      	mov	r0, r4
 800a458:	f000 f856 	bl	800a508 <_free_r>
 800a45c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800a45e:	b111      	cbz	r1, 800a466 <_reclaim_reent+0x72>
 800a460:	4620      	mov	r0, r4
 800a462:	f000 f851 	bl	800a508 <_free_r>
 800a466:	6a23      	ldr	r3, [r4, #32]
 800a468:	b1b3      	cbz	r3, 800a498 <_reclaim_reent+0xa4>
 800a46a:	4620      	mov	r0, r4
 800a46c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a470:	4718      	bx	r3
 800a472:	5949      	ldr	r1, [r1, r5]
 800a474:	b941      	cbnz	r1, 800a488 <_reclaim_reent+0x94>
 800a476:	3504      	adds	r5, #4
 800a478:	69e3      	ldr	r3, [r4, #28]
 800a47a:	2d80      	cmp	r5, #128	; 0x80
 800a47c:	68d9      	ldr	r1, [r3, #12]
 800a47e:	d1f8      	bne.n	800a472 <_reclaim_reent+0x7e>
 800a480:	4620      	mov	r0, r4
 800a482:	f000 f841 	bl	800a508 <_free_r>
 800a486:	e7c0      	b.n	800a40a <_reclaim_reent+0x16>
 800a488:	680e      	ldr	r6, [r1, #0]
 800a48a:	4620      	mov	r0, r4
 800a48c:	f000 f83c 	bl	800a508 <_free_r>
 800a490:	4631      	mov	r1, r6
 800a492:	e7ef      	b.n	800a474 <_reclaim_reent+0x80>
 800a494:	2500      	movs	r5, #0
 800a496:	e7ef      	b.n	800a478 <_reclaim_reent+0x84>
 800a498:	bd70      	pop	{r4, r5, r6, pc}
 800a49a:	bf00      	nop
 800a49c:	2000014c 	.word	0x2000014c

0800a4a0 <__libc_init_array>:
 800a4a0:	b570      	push	{r4, r5, r6, lr}
 800a4a2:	4d0d      	ldr	r5, [pc, #52]	; (800a4d8 <__libc_init_array+0x38>)
 800a4a4:	4c0d      	ldr	r4, [pc, #52]	; (800a4dc <__libc_init_array+0x3c>)
 800a4a6:	1b64      	subs	r4, r4, r5
 800a4a8:	10a4      	asrs	r4, r4, #2
 800a4aa:	2600      	movs	r6, #0
 800a4ac:	42a6      	cmp	r6, r4
 800a4ae:	d109      	bne.n	800a4c4 <__libc_init_array+0x24>
 800a4b0:	4d0b      	ldr	r5, [pc, #44]	; (800a4e0 <__libc_init_array+0x40>)
 800a4b2:	4c0c      	ldr	r4, [pc, #48]	; (800a4e4 <__libc_init_array+0x44>)
 800a4b4:	f000 f880 	bl	800a5b8 <_init>
 800a4b8:	1b64      	subs	r4, r4, r5
 800a4ba:	10a4      	asrs	r4, r4, #2
 800a4bc:	2600      	movs	r6, #0
 800a4be:	42a6      	cmp	r6, r4
 800a4c0:	d105      	bne.n	800a4ce <__libc_init_array+0x2e>
 800a4c2:	bd70      	pop	{r4, r5, r6, pc}
 800a4c4:	f855 3b04 	ldr.w	r3, [r5], #4
 800a4c8:	4798      	blx	r3
 800a4ca:	3601      	adds	r6, #1
 800a4cc:	e7ee      	b.n	800a4ac <__libc_init_array+0xc>
 800a4ce:	f855 3b04 	ldr.w	r3, [r5], #4
 800a4d2:	4798      	blx	r3
 800a4d4:	3601      	adds	r6, #1
 800a4d6:	e7f2      	b.n	800a4be <__libc_init_array+0x1e>
 800a4d8:	0800a770 	.word	0x0800a770
 800a4dc:	0800a770 	.word	0x0800a770
 800a4e0:	0800a770 	.word	0x0800a770
 800a4e4:	0800a774 	.word	0x0800a774

0800a4e8 <__retarget_lock_acquire_recursive>:
 800a4e8:	4770      	bx	lr

0800a4ea <__retarget_lock_release_recursive>:
 800a4ea:	4770      	bx	lr

0800a4ec <memcpy>:
 800a4ec:	440a      	add	r2, r1
 800a4ee:	4291      	cmp	r1, r2
 800a4f0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800a4f4:	d100      	bne.n	800a4f8 <memcpy+0xc>
 800a4f6:	4770      	bx	lr
 800a4f8:	b510      	push	{r4, lr}
 800a4fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a4fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a502:	4291      	cmp	r1, r2
 800a504:	d1f9      	bne.n	800a4fa <memcpy+0xe>
 800a506:	bd10      	pop	{r4, pc}

0800a508 <_free_r>:
 800a508:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a50a:	2900      	cmp	r1, #0
 800a50c:	d044      	beq.n	800a598 <_free_r+0x90>
 800a50e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a512:	9001      	str	r0, [sp, #4]
 800a514:	2b00      	cmp	r3, #0
 800a516:	f1a1 0404 	sub.w	r4, r1, #4
 800a51a:	bfb8      	it	lt
 800a51c:	18e4      	addlt	r4, r4, r3
 800a51e:	f000 f83f 	bl	800a5a0 <__malloc_lock>
 800a522:	4a1e      	ldr	r2, [pc, #120]	; (800a59c <_free_r+0x94>)
 800a524:	9801      	ldr	r0, [sp, #4]
 800a526:	6813      	ldr	r3, [r2, #0]
 800a528:	b933      	cbnz	r3, 800a538 <_free_r+0x30>
 800a52a:	6063      	str	r3, [r4, #4]
 800a52c:	6014      	str	r4, [r2, #0]
 800a52e:	b003      	add	sp, #12
 800a530:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a534:	f000 b83a 	b.w	800a5ac <__malloc_unlock>
 800a538:	42a3      	cmp	r3, r4
 800a53a:	d908      	bls.n	800a54e <_free_r+0x46>
 800a53c:	6825      	ldr	r5, [r4, #0]
 800a53e:	1961      	adds	r1, r4, r5
 800a540:	428b      	cmp	r3, r1
 800a542:	bf01      	itttt	eq
 800a544:	6819      	ldreq	r1, [r3, #0]
 800a546:	685b      	ldreq	r3, [r3, #4]
 800a548:	1949      	addeq	r1, r1, r5
 800a54a:	6021      	streq	r1, [r4, #0]
 800a54c:	e7ed      	b.n	800a52a <_free_r+0x22>
 800a54e:	461a      	mov	r2, r3
 800a550:	685b      	ldr	r3, [r3, #4]
 800a552:	b10b      	cbz	r3, 800a558 <_free_r+0x50>
 800a554:	42a3      	cmp	r3, r4
 800a556:	d9fa      	bls.n	800a54e <_free_r+0x46>
 800a558:	6811      	ldr	r1, [r2, #0]
 800a55a:	1855      	adds	r5, r2, r1
 800a55c:	42a5      	cmp	r5, r4
 800a55e:	d10b      	bne.n	800a578 <_free_r+0x70>
 800a560:	6824      	ldr	r4, [r4, #0]
 800a562:	4421      	add	r1, r4
 800a564:	1854      	adds	r4, r2, r1
 800a566:	42a3      	cmp	r3, r4
 800a568:	6011      	str	r1, [r2, #0]
 800a56a:	d1e0      	bne.n	800a52e <_free_r+0x26>
 800a56c:	681c      	ldr	r4, [r3, #0]
 800a56e:	685b      	ldr	r3, [r3, #4]
 800a570:	6053      	str	r3, [r2, #4]
 800a572:	440c      	add	r4, r1
 800a574:	6014      	str	r4, [r2, #0]
 800a576:	e7da      	b.n	800a52e <_free_r+0x26>
 800a578:	d902      	bls.n	800a580 <_free_r+0x78>
 800a57a:	230c      	movs	r3, #12
 800a57c:	6003      	str	r3, [r0, #0]
 800a57e:	e7d6      	b.n	800a52e <_free_r+0x26>
 800a580:	6825      	ldr	r5, [r4, #0]
 800a582:	1961      	adds	r1, r4, r5
 800a584:	428b      	cmp	r3, r1
 800a586:	bf04      	itt	eq
 800a588:	6819      	ldreq	r1, [r3, #0]
 800a58a:	685b      	ldreq	r3, [r3, #4]
 800a58c:	6063      	str	r3, [r4, #4]
 800a58e:	bf04      	itt	eq
 800a590:	1949      	addeq	r1, r1, r5
 800a592:	6021      	streq	r1, [r4, #0]
 800a594:	6054      	str	r4, [r2, #4]
 800a596:	e7ca      	b.n	800a52e <_free_r+0x26>
 800a598:	b003      	add	sp, #12
 800a59a:	bd30      	pop	{r4, r5, pc}
 800a59c:	20006958 	.word	0x20006958

0800a5a0 <__malloc_lock>:
 800a5a0:	4801      	ldr	r0, [pc, #4]	; (800a5a8 <__malloc_lock+0x8>)
 800a5a2:	f7ff bfa1 	b.w	800a4e8 <__retarget_lock_acquire_recursive>
 800a5a6:	bf00      	nop
 800a5a8:	20006954 	.word	0x20006954

0800a5ac <__malloc_unlock>:
 800a5ac:	4801      	ldr	r0, [pc, #4]	; (800a5b4 <__malloc_unlock+0x8>)
 800a5ae:	f7ff bf9c 	b.w	800a4ea <__retarget_lock_release_recursive>
 800a5b2:	bf00      	nop
 800a5b4:	20006954 	.word	0x20006954

0800a5b8 <_init>:
 800a5b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5ba:	bf00      	nop
 800a5bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a5be:	bc08      	pop	{r3}
 800a5c0:	469e      	mov	lr, r3
 800a5c2:	4770      	bx	lr

0800a5c4 <_fini>:
 800a5c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5c6:	bf00      	nop
 800a5c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a5ca:	bc08      	pop	{r3}
 800a5cc:	469e      	mov	lr, r3
 800a5ce:	4770      	bx	lr
