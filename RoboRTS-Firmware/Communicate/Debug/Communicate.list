
Communicate.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b110  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  0800b2c0  0800b2c0  0001b2c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b370  0800b370  00020150  2**0
                  CONTENTS
  4 .ARM          00000008  0800b370  0800b370  0001b370  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b378  0800b378  00020150  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b378  0800b378  0001b378  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b37c  0800b37c  0001b37c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000150  20000000  0800b380  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020150  2**0
                  CONTENTS
 10 .bss          00006900  20000150  20000150  00020150  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20006a50  20006a50  00020150  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020150  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 14 .debug_info   00025f7d  00000000  00000000  000201c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00005ac7  00000000  00000000  00046140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001f68  00000000  00000000  0004bc08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001817  00000000  00000000  0004db70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00029d97  00000000  00000000  0004f387  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00026805  00000000  00000000  0007911e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000eb0ee  00000000  00000000  0009f923  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00008610  00000000  00000000  0018aa14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000083  00000000  00000000  00193024  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000150 	.word	0x20000150
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800b2a8 	.word	0x0800b2a8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000154 	.word	0x20000154
 80001ec:	0800b2a8 	.word	0x0800b2a8

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000200:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000204:	f000 b970 	b.w	80004e8 <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9e08      	ldr	r6, [sp, #32]
 8000226:	460d      	mov	r5, r1
 8000228:	4604      	mov	r4, r0
 800022a:	460f      	mov	r7, r1
 800022c:	2b00      	cmp	r3, #0
 800022e:	d14a      	bne.n	80002c6 <__udivmoddi4+0xa6>
 8000230:	428a      	cmp	r2, r1
 8000232:	4694      	mov	ip, r2
 8000234:	d965      	bls.n	8000302 <__udivmoddi4+0xe2>
 8000236:	fab2 f382 	clz	r3, r2
 800023a:	b143      	cbz	r3, 800024e <__udivmoddi4+0x2e>
 800023c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000240:	f1c3 0220 	rsb	r2, r3, #32
 8000244:	409f      	lsls	r7, r3
 8000246:	fa20 f202 	lsr.w	r2, r0, r2
 800024a:	4317      	orrs	r7, r2
 800024c:	409c      	lsls	r4, r3
 800024e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000252:	fa1f f58c 	uxth.w	r5, ip
 8000256:	fbb7 f1fe 	udiv	r1, r7, lr
 800025a:	0c22      	lsrs	r2, r4, #16
 800025c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000260:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000264:	fb01 f005 	mul.w	r0, r1, r5
 8000268:	4290      	cmp	r0, r2
 800026a:	d90a      	bls.n	8000282 <__udivmoddi4+0x62>
 800026c:	eb1c 0202 	adds.w	r2, ip, r2
 8000270:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000274:	f080 811c 	bcs.w	80004b0 <__udivmoddi4+0x290>
 8000278:	4290      	cmp	r0, r2
 800027a:	f240 8119 	bls.w	80004b0 <__udivmoddi4+0x290>
 800027e:	3902      	subs	r1, #2
 8000280:	4462      	add	r2, ip
 8000282:	1a12      	subs	r2, r2, r0
 8000284:	b2a4      	uxth	r4, r4
 8000286:	fbb2 f0fe 	udiv	r0, r2, lr
 800028a:	fb0e 2210 	mls	r2, lr, r0, r2
 800028e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000292:	fb00 f505 	mul.w	r5, r0, r5
 8000296:	42a5      	cmp	r5, r4
 8000298:	d90a      	bls.n	80002b0 <__udivmoddi4+0x90>
 800029a:	eb1c 0404 	adds.w	r4, ip, r4
 800029e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002a2:	f080 8107 	bcs.w	80004b4 <__udivmoddi4+0x294>
 80002a6:	42a5      	cmp	r5, r4
 80002a8:	f240 8104 	bls.w	80004b4 <__udivmoddi4+0x294>
 80002ac:	4464      	add	r4, ip
 80002ae:	3802      	subs	r0, #2
 80002b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002b4:	1b64      	subs	r4, r4, r5
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11e      	cbz	r6, 80002c2 <__udivmoddi4+0xa2>
 80002ba:	40dc      	lsrs	r4, r3
 80002bc:	2300      	movs	r3, #0
 80002be:	e9c6 4300 	strd	r4, r3, [r6]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d908      	bls.n	80002dc <__udivmoddi4+0xbc>
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	f000 80ed 	beq.w	80004aa <__udivmoddi4+0x28a>
 80002d0:	2100      	movs	r1, #0
 80002d2:	e9c6 0500 	strd	r0, r5, [r6]
 80002d6:	4608      	mov	r0, r1
 80002d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002dc:	fab3 f183 	clz	r1, r3
 80002e0:	2900      	cmp	r1, #0
 80002e2:	d149      	bne.n	8000378 <__udivmoddi4+0x158>
 80002e4:	42ab      	cmp	r3, r5
 80002e6:	d302      	bcc.n	80002ee <__udivmoddi4+0xce>
 80002e8:	4282      	cmp	r2, r0
 80002ea:	f200 80f8 	bhi.w	80004de <__udivmoddi4+0x2be>
 80002ee:	1a84      	subs	r4, r0, r2
 80002f0:	eb65 0203 	sbc.w	r2, r5, r3
 80002f4:	2001      	movs	r0, #1
 80002f6:	4617      	mov	r7, r2
 80002f8:	2e00      	cmp	r6, #0
 80002fa:	d0e2      	beq.n	80002c2 <__udivmoddi4+0xa2>
 80002fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000300:	e7df      	b.n	80002c2 <__udivmoddi4+0xa2>
 8000302:	b902      	cbnz	r2, 8000306 <__udivmoddi4+0xe6>
 8000304:	deff      	udf	#255	; 0xff
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	2b00      	cmp	r3, #0
 800030c:	f040 8090 	bne.w	8000430 <__udivmoddi4+0x210>
 8000310:	1a8a      	subs	r2, r1, r2
 8000312:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000316:	fa1f fe8c 	uxth.w	lr, ip
 800031a:	2101      	movs	r1, #1
 800031c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000320:	fb07 2015 	mls	r0, r7, r5, r2
 8000324:	0c22      	lsrs	r2, r4, #16
 8000326:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800032a:	fb0e f005 	mul.w	r0, lr, r5
 800032e:	4290      	cmp	r0, r2
 8000330:	d908      	bls.n	8000344 <__udivmoddi4+0x124>
 8000332:	eb1c 0202 	adds.w	r2, ip, r2
 8000336:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x122>
 800033c:	4290      	cmp	r0, r2
 800033e:	f200 80cb 	bhi.w	80004d8 <__udivmoddi4+0x2b8>
 8000342:	4645      	mov	r5, r8
 8000344:	1a12      	subs	r2, r2, r0
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb2 f0f7 	udiv	r0, r2, r7
 800034c:	fb07 2210 	mls	r2, r7, r0, r2
 8000350:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000354:	fb0e fe00 	mul.w	lr, lr, r0
 8000358:	45a6      	cmp	lr, r4
 800035a:	d908      	bls.n	800036e <__udivmoddi4+0x14e>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000364:	d202      	bcs.n	800036c <__udivmoddi4+0x14c>
 8000366:	45a6      	cmp	lr, r4
 8000368:	f200 80bb 	bhi.w	80004e2 <__udivmoddi4+0x2c2>
 800036c:	4610      	mov	r0, r2
 800036e:	eba4 040e 	sub.w	r4, r4, lr
 8000372:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000376:	e79f      	b.n	80002b8 <__udivmoddi4+0x98>
 8000378:	f1c1 0720 	rsb	r7, r1, #32
 800037c:	408b      	lsls	r3, r1
 800037e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000382:	ea4c 0c03 	orr.w	ip, ip, r3
 8000386:	fa05 f401 	lsl.w	r4, r5, r1
 800038a:	fa20 f307 	lsr.w	r3, r0, r7
 800038e:	40fd      	lsrs	r5, r7
 8000390:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000394:	4323      	orrs	r3, r4
 8000396:	fbb5 f8f9 	udiv	r8, r5, r9
 800039a:	fa1f fe8c 	uxth.w	lr, ip
 800039e:	fb09 5518 	mls	r5, r9, r8, r5
 80003a2:	0c1c      	lsrs	r4, r3, #16
 80003a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003a8:	fb08 f50e 	mul.w	r5, r8, lr
 80003ac:	42a5      	cmp	r5, r4
 80003ae:	fa02 f201 	lsl.w	r2, r2, r1
 80003b2:	fa00 f001 	lsl.w	r0, r0, r1
 80003b6:	d90b      	bls.n	80003d0 <__udivmoddi4+0x1b0>
 80003b8:	eb1c 0404 	adds.w	r4, ip, r4
 80003bc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003c0:	f080 8088 	bcs.w	80004d4 <__udivmoddi4+0x2b4>
 80003c4:	42a5      	cmp	r5, r4
 80003c6:	f240 8085 	bls.w	80004d4 <__udivmoddi4+0x2b4>
 80003ca:	f1a8 0802 	sub.w	r8, r8, #2
 80003ce:	4464      	add	r4, ip
 80003d0:	1b64      	subs	r4, r4, r5
 80003d2:	b29d      	uxth	r5, r3
 80003d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003d8:	fb09 4413 	mls	r4, r9, r3, r4
 80003dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003e4:	45a6      	cmp	lr, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x1da>
 80003e8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ec:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003f0:	d26c      	bcs.n	80004cc <__udivmoddi4+0x2ac>
 80003f2:	45a6      	cmp	lr, r4
 80003f4:	d96a      	bls.n	80004cc <__udivmoddi4+0x2ac>
 80003f6:	3b02      	subs	r3, #2
 80003f8:	4464      	add	r4, ip
 80003fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000402:	eba4 040e 	sub.w	r4, r4, lr
 8000406:	42ac      	cmp	r4, r5
 8000408:	46c8      	mov	r8, r9
 800040a:	46ae      	mov	lr, r5
 800040c:	d356      	bcc.n	80004bc <__udivmoddi4+0x29c>
 800040e:	d053      	beq.n	80004b8 <__udivmoddi4+0x298>
 8000410:	b156      	cbz	r6, 8000428 <__udivmoddi4+0x208>
 8000412:	ebb0 0208 	subs.w	r2, r0, r8
 8000416:	eb64 040e 	sbc.w	r4, r4, lr
 800041a:	fa04 f707 	lsl.w	r7, r4, r7
 800041e:	40ca      	lsrs	r2, r1
 8000420:	40cc      	lsrs	r4, r1
 8000422:	4317      	orrs	r7, r2
 8000424:	e9c6 7400 	strd	r7, r4, [r6]
 8000428:	4618      	mov	r0, r3
 800042a:	2100      	movs	r1, #0
 800042c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000430:	f1c3 0120 	rsb	r1, r3, #32
 8000434:	fa02 fc03 	lsl.w	ip, r2, r3
 8000438:	fa20 f201 	lsr.w	r2, r0, r1
 800043c:	fa25 f101 	lsr.w	r1, r5, r1
 8000440:	409d      	lsls	r5, r3
 8000442:	432a      	orrs	r2, r5
 8000444:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000450:	fb07 1510 	mls	r5, r7, r0, r1
 8000454:	0c11      	lsrs	r1, r2, #16
 8000456:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800045a:	fb00 f50e 	mul.w	r5, r0, lr
 800045e:	428d      	cmp	r5, r1
 8000460:	fa04 f403 	lsl.w	r4, r4, r3
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x258>
 8000466:	eb1c 0101 	adds.w	r1, ip, r1
 800046a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800046e:	d22f      	bcs.n	80004d0 <__udivmoddi4+0x2b0>
 8000470:	428d      	cmp	r5, r1
 8000472:	d92d      	bls.n	80004d0 <__udivmoddi4+0x2b0>
 8000474:	3802      	subs	r0, #2
 8000476:	4461      	add	r1, ip
 8000478:	1b49      	subs	r1, r1, r5
 800047a:	b292      	uxth	r2, r2
 800047c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000480:	fb07 1115 	mls	r1, r7, r5, r1
 8000484:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000488:	fb05 f10e 	mul.w	r1, r5, lr
 800048c:	4291      	cmp	r1, r2
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x282>
 8000490:	eb1c 0202 	adds.w	r2, ip, r2
 8000494:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000498:	d216      	bcs.n	80004c8 <__udivmoddi4+0x2a8>
 800049a:	4291      	cmp	r1, r2
 800049c:	d914      	bls.n	80004c8 <__udivmoddi4+0x2a8>
 800049e:	3d02      	subs	r5, #2
 80004a0:	4462      	add	r2, ip
 80004a2:	1a52      	subs	r2, r2, r1
 80004a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004a8:	e738      	b.n	800031c <__udivmoddi4+0xfc>
 80004aa:	4631      	mov	r1, r6
 80004ac:	4630      	mov	r0, r6
 80004ae:	e708      	b.n	80002c2 <__udivmoddi4+0xa2>
 80004b0:	4639      	mov	r1, r7
 80004b2:	e6e6      	b.n	8000282 <__udivmoddi4+0x62>
 80004b4:	4610      	mov	r0, r2
 80004b6:	e6fb      	b.n	80002b0 <__udivmoddi4+0x90>
 80004b8:	4548      	cmp	r0, r9
 80004ba:	d2a9      	bcs.n	8000410 <__udivmoddi4+0x1f0>
 80004bc:	ebb9 0802 	subs.w	r8, r9, r2
 80004c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004c4:	3b01      	subs	r3, #1
 80004c6:	e7a3      	b.n	8000410 <__udivmoddi4+0x1f0>
 80004c8:	4645      	mov	r5, r8
 80004ca:	e7ea      	b.n	80004a2 <__udivmoddi4+0x282>
 80004cc:	462b      	mov	r3, r5
 80004ce:	e794      	b.n	80003fa <__udivmoddi4+0x1da>
 80004d0:	4640      	mov	r0, r8
 80004d2:	e7d1      	b.n	8000478 <__udivmoddi4+0x258>
 80004d4:	46d0      	mov	r8, sl
 80004d6:	e77b      	b.n	80003d0 <__udivmoddi4+0x1b0>
 80004d8:	3d02      	subs	r5, #2
 80004da:	4462      	add	r2, ip
 80004dc:	e732      	b.n	8000344 <__udivmoddi4+0x124>
 80004de:	4608      	mov	r0, r1
 80004e0:	e70a      	b.n	80002f8 <__udivmoddi4+0xd8>
 80004e2:	4464      	add	r4, ip
 80004e4:	3802      	subs	r0, #2
 80004e6:	e742      	b.n	800036e <__udivmoddi4+0x14e>

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80004f0:	4b17      	ldr	r3, [pc, #92]	; (8000550 <MX_CAN1_Init+0x64>)
 80004f2:	4a18      	ldr	r2, [pc, #96]	; (8000554 <MX_CAN1_Init+0x68>)
 80004f4:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 7;
 80004f6:	4b16      	ldr	r3, [pc, #88]	; (8000550 <MX_CAN1_Init+0x64>)
 80004f8:	2207      	movs	r2, #7
 80004fa:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80004fc:	4b14      	ldr	r3, [pc, #80]	; (8000550 <MX_CAN1_Init+0x64>)
 80004fe:	2200      	movs	r2, #0
 8000500:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000502:	4b13      	ldr	r3, [pc, #76]	; (8000550 <MX_CAN1_Init+0x64>)
 8000504:	2200      	movs	r2, #0
 8000506:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000508:	4b11      	ldr	r3, [pc, #68]	; (8000550 <MX_CAN1_Init+0x64>)
 800050a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800050e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000510:	4b0f      	ldr	r3, [pc, #60]	; (8000550 <MX_CAN1_Init+0x64>)
 8000512:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000516:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000518:	4b0d      	ldr	r3, [pc, #52]	; (8000550 <MX_CAN1_Init+0x64>)
 800051a:	2200      	movs	r2, #0
 800051c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800051e:	4b0c      	ldr	r3, [pc, #48]	; (8000550 <MX_CAN1_Init+0x64>)
 8000520:	2200      	movs	r2, #0
 8000522:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000524:	4b0a      	ldr	r3, [pc, #40]	; (8000550 <MX_CAN1_Init+0x64>)
 8000526:	2200      	movs	r2, #0
 8000528:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800052a:	4b09      	ldr	r3, [pc, #36]	; (8000550 <MX_CAN1_Init+0x64>)
 800052c:	2200      	movs	r2, #0
 800052e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000530:	4b07      	ldr	r3, [pc, #28]	; (8000550 <MX_CAN1_Init+0x64>)
 8000532:	2200      	movs	r2, #0
 8000534:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = ENABLE;
 8000536:	4b06      	ldr	r3, [pc, #24]	; (8000550 <MX_CAN1_Init+0x64>)
 8000538:	2201      	movs	r2, #1
 800053a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800053c:	4804      	ldr	r0, [pc, #16]	; (8000550 <MX_CAN1_Init+0x64>)
 800053e:	f000 fcf9 	bl	8000f34 <HAL_CAN_Init>
 8000542:	4603      	mov	r3, r0
 8000544:	2b00      	cmp	r3, #0
 8000546:	d001      	beq.n	800054c <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000548:	f000 fa10 	bl	800096c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800054c:	bf00      	nop
 800054e:	bd80      	pop	{r7, pc}
 8000550:	2000016c 	.word	0x2000016c
 8000554:	40006400 	.word	0x40006400

08000558 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b08a      	sub	sp, #40	; 0x28
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000560:	f107 0314 	add.w	r3, r7, #20
 8000564:	2200      	movs	r2, #0
 8000566:	601a      	str	r2, [r3, #0]
 8000568:	605a      	str	r2, [r3, #4]
 800056a:	609a      	str	r2, [r3, #8]
 800056c:	60da      	str	r2, [r3, #12]
 800056e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	4a19      	ldr	r2, [pc, #100]	; (80005dc <HAL_CAN_MspInit+0x84>)
 8000576:	4293      	cmp	r3, r2
 8000578:	d12b      	bne.n	80005d2 <HAL_CAN_MspInit+0x7a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800057a:	2300      	movs	r3, #0
 800057c:	613b      	str	r3, [r7, #16]
 800057e:	4b18      	ldr	r3, [pc, #96]	; (80005e0 <HAL_CAN_MspInit+0x88>)
 8000580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000582:	4a17      	ldr	r2, [pc, #92]	; (80005e0 <HAL_CAN_MspInit+0x88>)
 8000584:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000588:	6413      	str	r3, [r2, #64]	; 0x40
 800058a:	4b15      	ldr	r3, [pc, #84]	; (80005e0 <HAL_CAN_MspInit+0x88>)
 800058c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800058e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000592:	613b      	str	r3, [r7, #16]
 8000594:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000596:	2300      	movs	r3, #0
 8000598:	60fb      	str	r3, [r7, #12]
 800059a:	4b11      	ldr	r3, [pc, #68]	; (80005e0 <HAL_CAN_MspInit+0x88>)
 800059c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059e:	4a10      	ldr	r2, [pc, #64]	; (80005e0 <HAL_CAN_MspInit+0x88>)
 80005a0:	f043 0308 	orr.w	r3, r3, #8
 80005a4:	6313      	str	r3, [r2, #48]	; 0x30
 80005a6:	4b0e      	ldr	r3, [pc, #56]	; (80005e0 <HAL_CAN_MspInit+0x88>)
 80005a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005aa:	f003 0308 	and.w	r3, r3, #8
 80005ae:	60fb      	str	r3, [r7, #12]
 80005b0:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80005b2:	2303      	movs	r3, #3
 80005b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005b6:	2302      	movs	r3, #2
 80005b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ba:	2300      	movs	r3, #0
 80005bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005be:	2303      	movs	r3, #3
 80005c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80005c2:	2309      	movs	r3, #9
 80005c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80005c6:	f107 0314 	add.w	r3, r7, #20
 80005ca:	4619      	mov	r1, r3
 80005cc:	4805      	ldr	r0, [pc, #20]	; (80005e4 <HAL_CAN_MspInit+0x8c>)
 80005ce:	f001 f979 	bl	80018c4 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80005d2:	bf00      	nop
 80005d4:	3728      	adds	r7, #40	; 0x28
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	40006400 	.word	0x40006400
 80005e0:	40023800 	.word	0x40023800
 80005e4:	40020c00 	.word	0x40020c00

080005e8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80005ee:	2300      	movs	r3, #0
 80005f0:	607b      	str	r3, [r7, #4]
 80005f2:	4b10      	ldr	r3, [pc, #64]	; (8000634 <MX_DMA_Init+0x4c>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f6:	4a0f      	ldr	r2, [pc, #60]	; (8000634 <MX_DMA_Init+0x4c>)
 80005f8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80005fc:	6313      	str	r3, [r2, #48]	; 0x30
 80005fe:	4b0d      	ldr	r3, [pc, #52]	; (8000634 <MX_DMA_Init+0x4c>)
 8000600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000602:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000606:	607b      	str	r3, [r7, #4]
 8000608:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 800060a:	2200      	movs	r2, #0
 800060c:	2105      	movs	r1, #5
 800060e:	2039      	movs	r0, #57	; 0x39
 8000610:	f000 fe44 	bl	800129c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000614:	2039      	movs	r0, #57	; 0x39
 8000616:	f000 fe5d 	bl	80012d4 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 800061a:	2200      	movs	r2, #0
 800061c:	2105      	movs	r1, #5
 800061e:	2045      	movs	r0, #69	; 0x45
 8000620:	f000 fe3c 	bl	800129c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000624:	2045      	movs	r0, #69	; 0x45
 8000626:	f000 fe55 	bl	80012d4 <HAL_NVIC_EnableIRQ>

}
 800062a:	bf00      	nop
 800062c:	3708      	adds	r7, #8
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	40023800 	.word	0x40023800

08000638 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800063c:	4a04      	ldr	r2, [pc, #16]	; (8000650 <MX_FREERTOS_Init+0x18>)
 800063e:	2100      	movs	r1, #0
 8000640:	4804      	ldr	r0, [pc, #16]	; (8000654 <MX_FREERTOS_Init+0x1c>)
 8000642:	f007 fb25 	bl	8007c90 <osThreadNew>
 8000646:	4603      	mov	r3, r0
 8000648:	4a03      	ldr	r2, [pc, #12]	; (8000658 <MX_FREERTOS_Init+0x20>)
 800064a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 800064c:	bf00      	nop
 800064e:	bd80      	pop	{r7, pc}
 8000650:	0800b32c 	.word	0x0800b32c
 8000654:	0800065d 	.word	0x0800065d
 8000658:	20000194 	.word	0x20000194

0800065c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000664:	f00a f842 	bl	800a6ec <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000668:	2001      	movs	r0, #1
 800066a:	f007 fba3 	bl	8007db4 <osDelay>
 800066e:	e7fb      	b.n	8000668 <StartDefaultTask+0xc>

08000670 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b08c      	sub	sp, #48	; 0x30
 8000674:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000676:	f107 031c 	add.w	r3, r7, #28
 800067a:	2200      	movs	r2, #0
 800067c:	601a      	str	r2, [r3, #0]
 800067e:	605a      	str	r2, [r3, #4]
 8000680:	609a      	str	r2, [r3, #8]
 8000682:	60da      	str	r2, [r3, #12]
 8000684:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000686:	2300      	movs	r3, #0
 8000688:	61bb      	str	r3, [r7, #24]
 800068a:	4b67      	ldr	r3, [pc, #412]	; (8000828 <MX_GPIO_Init+0x1b8>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068e:	4a66      	ldr	r2, [pc, #408]	; (8000828 <MX_GPIO_Init+0x1b8>)
 8000690:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000694:	6313      	str	r3, [r2, #48]	; 0x30
 8000696:	4b64      	ldr	r3, [pc, #400]	; (8000828 <MX_GPIO_Init+0x1b8>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800069e:	61bb      	str	r3, [r7, #24]
 80006a0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006a2:	2300      	movs	r3, #0
 80006a4:	617b      	str	r3, [r7, #20]
 80006a6:	4b60      	ldr	r3, [pc, #384]	; (8000828 <MX_GPIO_Init+0x1b8>)
 80006a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006aa:	4a5f      	ldr	r2, [pc, #380]	; (8000828 <MX_GPIO_Init+0x1b8>)
 80006ac:	f043 0301 	orr.w	r3, r3, #1
 80006b0:	6313      	str	r3, [r2, #48]	; 0x30
 80006b2:	4b5d      	ldr	r3, [pc, #372]	; (8000828 <MX_GPIO_Init+0x1b8>)
 80006b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b6:	f003 0301 	and.w	r3, r3, #1
 80006ba:	617b      	str	r3, [r7, #20]
 80006bc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006be:	2300      	movs	r3, #0
 80006c0:	613b      	str	r3, [r7, #16]
 80006c2:	4b59      	ldr	r3, [pc, #356]	; (8000828 <MX_GPIO_Init+0x1b8>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c6:	4a58      	ldr	r2, [pc, #352]	; (8000828 <MX_GPIO_Init+0x1b8>)
 80006c8:	f043 0308 	orr.w	r3, r3, #8
 80006cc:	6313      	str	r3, [r2, #48]	; 0x30
 80006ce:	4b56      	ldr	r3, [pc, #344]	; (8000828 <MX_GPIO_Init+0x1b8>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d2:	f003 0308 	and.w	r3, r3, #8
 80006d6:	613b      	str	r3, [r7, #16]
 80006d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80006da:	2300      	movs	r3, #0
 80006dc:	60fb      	str	r3, [r7, #12]
 80006de:	4b52      	ldr	r3, [pc, #328]	; (8000828 <MX_GPIO_Init+0x1b8>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e2:	4a51      	ldr	r2, [pc, #324]	; (8000828 <MX_GPIO_Init+0x1b8>)
 80006e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006e8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ea:	4b4f      	ldr	r3, [pc, #316]	; (8000828 <MX_GPIO_Init+0x1b8>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80006f2:	60fb      	str	r3, [r7, #12]
 80006f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006f6:	2300      	movs	r3, #0
 80006f8:	60bb      	str	r3, [r7, #8]
 80006fa:	4b4b      	ldr	r3, [pc, #300]	; (8000828 <MX_GPIO_Init+0x1b8>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fe:	4a4a      	ldr	r2, [pc, #296]	; (8000828 <MX_GPIO_Init+0x1b8>)
 8000700:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000704:	6313      	str	r3, [r2, #48]	; 0x30
 8000706:	4b48      	ldr	r3, [pc, #288]	; (8000828 <MX_GPIO_Init+0x1b8>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800070e:	60bb      	str	r3, [r7, #8]
 8000710:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000712:	2300      	movs	r3, #0
 8000714:	607b      	str	r3, [r7, #4]
 8000716:	4b44      	ldr	r3, [pc, #272]	; (8000828 <MX_GPIO_Init+0x1b8>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	4a43      	ldr	r2, [pc, #268]	; (8000828 <MX_GPIO_Init+0x1b8>)
 800071c:	f043 0320 	orr.w	r3, r3, #32
 8000720:	6313      	str	r3, [r2, #48]	; 0x30
 8000722:	4b41      	ldr	r3, [pc, #260]	; (8000828 <MX_GPIO_Init+0x1b8>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	f003 0320 	and.w	r3, r3, #32
 800072a:	607b      	str	r3, [r7, #4]
 800072c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800072e:	2300      	movs	r3, #0
 8000730:	603b      	str	r3, [r7, #0]
 8000732:	4b3d      	ldr	r3, [pc, #244]	; (8000828 <MX_GPIO_Init+0x1b8>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	4a3c      	ldr	r2, [pc, #240]	; (8000828 <MX_GPIO_Init+0x1b8>)
 8000738:	f043 0310 	orr.w	r3, r3, #16
 800073c:	6313      	str	r3, [r2, #48]	; 0x30
 800073e:	4b3a      	ldr	r3, [pc, #232]	; (8000828 <MX_GPIO_Init+0x1b8>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	f003 0310 	and.w	r3, r3, #16
 8000746:	603b      	str	r3, [r7, #0]
 8000748:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, POWER1_CTRL_Pin|POWER2_CTRL_Pin|POWER3_CTRL_Pin|POWER4_CTRL_Pin, GPIO_PIN_RESET);
 800074a:	2200      	movs	r2, #0
 800074c:	213c      	movs	r1, #60	; 0x3c
 800074e:	4837      	ldr	r0, [pc, #220]	; (800082c <MX_GPIO_Init+0x1bc>)
 8000750:	f001 fa64 	bl	8001c1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LED_A_Pin|LED_B_Pin|LED_C_Pin|LED_D_Pin
 8000754:	2200      	movs	r2, #0
 8000756:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
 800075a:	4835      	ldr	r0, [pc, #212]	; (8000830 <MX_GPIO_Init+0x1c0>)
 800075c:	f001 fa5e 	bl	8001c1c <HAL_GPIO_WritePin>
                          |LED_E_Pin|LED_F_Pin|LED_G_Pin|LED_H_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, SPI5_NSS_Pin|LED_GF14_Pin, GPIO_PIN_RESET);
 8000760:	2200      	movs	r2, #0
 8000762:	f244 0140 	movw	r1, #16448	; 0x4040
 8000766:	4833      	ldr	r0, [pc, #204]	; (8000834 <MX_GPIO_Init+0x1c4>)
 8000768:	f001 fa58 	bl	8001c1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_RESET);
 800076c:	2200      	movs	r2, #0
 800076e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000772:	4831      	ldr	r0, [pc, #196]	; (8000838 <MX_GPIO_Init+0x1c8>)
 8000774:	f001 fa52 	bl	8001c1c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PIPin PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = PIN_Y_Pin|PIN_X_Pin|PIN_V_Pin|PIN_Z_Pin;
 8000778:	23e4      	movs	r3, #228	; 0xe4
 800077a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800077c:	2300      	movs	r3, #0
 800077e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000780:	2300      	movs	r3, #0
 8000782:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000784:	f107 031c 	add.w	r3, r7, #28
 8000788:	4619      	mov	r1, r3
 800078a:	482c      	ldr	r0, [pc, #176]	; (800083c <MX_GPIO_Init+0x1cc>)
 800078c:	f001 f89a 	bl	80018c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin PHPin */
  GPIO_InitStruct.Pin = POWER1_CTRL_Pin|POWER2_CTRL_Pin|POWER3_CTRL_Pin|POWER4_CTRL_Pin;
 8000790:	233c      	movs	r3, #60	; 0x3c
 8000792:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000794:	2301      	movs	r3, #1
 8000796:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000798:	2300      	movs	r3, #0
 800079a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800079c:	2300      	movs	r3, #0
 800079e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80007a0:	f107 031c 	add.w	r3, r7, #28
 80007a4:	4619      	mov	r1, r3
 80007a6:	4821      	ldr	r0, [pc, #132]	; (800082c <MX_GPIO_Init+0x1bc>)
 80007a8:	f001 f88c 	bl	80018c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = LED_A_Pin|LED_B_Pin|LED_C_Pin|LED_D_Pin
 80007ac:	f44f 73ff 	mov.w	r3, #510	; 0x1fe
 80007b0:	61fb      	str	r3, [r7, #28]
                          |LED_E_Pin|LED_F_Pin|LED_G_Pin|LED_H_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b2:	2301      	movs	r3, #1
 80007b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b6:	2300      	movs	r3, #0
 80007b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ba:	2300      	movs	r3, #0
 80007bc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007be:	f107 031c 	add.w	r3, r7, #28
 80007c2:	4619      	mov	r1, r3
 80007c4:	481a      	ldr	r0, [pc, #104]	; (8000830 <MX_GPIO_Init+0x1c0>)
 80007c6:	f001 f87d 	bl	80018c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = SPI5_NSS_Pin|LED_GF14_Pin;
 80007ca:	f244 0340 	movw	r3, #16448	; 0x4040
 80007ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d0:	2301      	movs	r3, #1
 80007d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d4:	2300      	movs	r3, #0
 80007d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d8:	2300      	movs	r3, #0
 80007da:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80007dc:	f107 031c 	add.w	r3, r7, #28
 80007e0:	4619      	mov	r1, r3
 80007e2:	4814      	ldr	r0, [pc, #80]	; (8000834 <MX_GPIO_Init+0x1c4>)
 80007e4:	f001 f86e 	bl	80018c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = PIN_YA1_Pin|PIN_ZA0_Pin|PIN_XA2_Pin|PIN_W_Pin;
 80007e8:	230f      	movs	r3, #15
 80007ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007ec:	2300      	movs	r3, #0
 80007ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f0:	2300      	movs	r3, #0
 80007f2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007f4:	f107 031c 	add.w	r3, r7, #28
 80007f8:	4619      	mov	r1, r3
 80007fa:	4811      	ldr	r0, [pc, #68]	; (8000840 <MX_GPIO_Init+0x1d0>)
 80007fc:	f001 f862 	bl	80018c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_R_Pin;
 8000800:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000804:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000806:	2301      	movs	r3, #1
 8000808:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080a:	2300      	movs	r3, #0
 800080c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080e:	2300      	movs	r3, #0
 8000810:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_R_GPIO_Port, &GPIO_InitStruct);
 8000812:	f107 031c 	add.w	r3, r7, #28
 8000816:	4619      	mov	r1, r3
 8000818:	4807      	ldr	r0, [pc, #28]	; (8000838 <MX_GPIO_Init+0x1c8>)
 800081a:	f001 f853 	bl	80018c4 <HAL_GPIO_Init>

}
 800081e:	bf00      	nop
 8000820:	3730      	adds	r7, #48	; 0x30
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	40023800 	.word	0x40023800
 800082c:	40021c00 	.word	0x40021c00
 8000830:	40021800 	.word	0x40021800
 8000834:	40021400 	.word	0x40021400
 8000838:	40021000 	.word	0x40021000
 800083c:	40022000 	.word	0x40022000
 8000840:	40020000 	.word	0x40020000

08000844 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000848:	f000 fb0e 	bl	8000e68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800084c:	f000 f812 	bl	8000874 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000850:	f7ff ff0e 	bl	8000670 <MX_GPIO_Init>
  MX_DMA_Init();
 8000854:	f7ff fec8 	bl	80005e8 <MX_DMA_Init>
  MX_SPI5_Init();
 8000858:	f000 f88e 	bl	8000978 <MX_SPI5_Init>
  MX_CAN1_Init();
 800085c:	f7ff fe46 	bl	80004ec <MX_CAN1_Init>
  MX_USART6_UART_Init();
 8000860:	f000 fa00 	bl	8000c64 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000864:	f007 f9ca 	bl	8007bfc <osKernelInitialize>

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8000868:	f7ff fee6 	bl	8000638 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800086c:	f007 f9ea 	bl	8007c44 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000870:	e7fe      	b.n	8000870 <main+0x2c>
	...

08000874 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b094      	sub	sp, #80	; 0x50
 8000878:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800087a:	f107 0320 	add.w	r3, r7, #32
 800087e:	2230      	movs	r2, #48	; 0x30
 8000880:	2100      	movs	r1, #0
 8000882:	4618      	mov	r0, r3
 8000884:	f00a fc32 	bl	800b0ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000888:	f107 030c 	add.w	r3, r7, #12
 800088c:	2200      	movs	r2, #0
 800088e:	601a      	str	r2, [r3, #0]
 8000890:	605a      	str	r2, [r3, #4]
 8000892:	609a      	str	r2, [r3, #8]
 8000894:	60da      	str	r2, [r3, #12]
 8000896:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000898:	2300      	movs	r3, #0
 800089a:	60bb      	str	r3, [r7, #8]
 800089c:	4b28      	ldr	r3, [pc, #160]	; (8000940 <SystemClock_Config+0xcc>)
 800089e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a0:	4a27      	ldr	r2, [pc, #156]	; (8000940 <SystemClock_Config+0xcc>)
 80008a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008a6:	6413      	str	r3, [r2, #64]	; 0x40
 80008a8:	4b25      	ldr	r3, [pc, #148]	; (8000940 <SystemClock_Config+0xcc>)
 80008aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008b0:	60bb      	str	r3, [r7, #8]
 80008b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008b4:	2300      	movs	r3, #0
 80008b6:	607b      	str	r3, [r7, #4]
 80008b8:	4b22      	ldr	r3, [pc, #136]	; (8000944 <SystemClock_Config+0xd0>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	4a21      	ldr	r2, [pc, #132]	; (8000944 <SystemClock_Config+0xd0>)
 80008be:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80008c2:	6013      	str	r3, [r2, #0]
 80008c4:	4b1f      	ldr	r3, [pc, #124]	; (8000944 <SystemClock_Config+0xd0>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008cc:	607b      	str	r3, [r7, #4]
 80008ce:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008d0:	2301      	movs	r3, #1
 80008d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008d8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008da:	2302      	movs	r3, #2
 80008dc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008de:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80008e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 80008e4:	2306      	movs	r3, #6
 80008e6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80008e8:	23a8      	movs	r3, #168	; 0xa8
 80008ea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008ec:	2302      	movs	r3, #2
 80008ee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80008f0:	2307      	movs	r3, #7
 80008f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008f4:	f107 0320 	add.w	r3, r7, #32
 80008f8:	4618      	mov	r0, r3
 80008fa:	f002 fbf9 	bl	80030f0 <HAL_RCC_OscConfig>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000904:	f000 f832 	bl	800096c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000908:	230f      	movs	r3, #15
 800090a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800090c:	2302      	movs	r3, #2
 800090e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000910:	2300      	movs	r3, #0
 8000912:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000914:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000918:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800091a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800091e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000920:	f107 030c 	add.w	r3, r7, #12
 8000924:	2105      	movs	r1, #5
 8000926:	4618      	mov	r0, r3
 8000928:	f002 fe5a 	bl	80035e0 <HAL_RCC_ClockConfig>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000932:	f000 f81b 	bl	800096c <Error_Handler>
  }
}
 8000936:	bf00      	nop
 8000938:	3750      	adds	r7, #80	; 0x50
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	40023800 	.word	0x40023800
 8000944:	40007000 	.word	0x40007000

08000948 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	4a04      	ldr	r2, [pc, #16]	; (8000968 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000956:	4293      	cmp	r3, r2
 8000958:	d101      	bne.n	800095e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800095a:	f000 faa7 	bl	8000eac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800095e:	bf00      	nop
 8000960:	3708      	adds	r7, #8
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	40000c00 	.word	0x40000c00

0800096c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000970:	b672      	cpsid	i
}
 8000972:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000974:	e7fe      	b.n	8000974 <Error_Handler+0x8>
	...

08000978 <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 800097c:	4b17      	ldr	r3, [pc, #92]	; (80009dc <MX_SPI5_Init+0x64>)
 800097e:	4a18      	ldr	r2, [pc, #96]	; (80009e0 <MX_SPI5_Init+0x68>)
 8000980:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8000982:	4b16      	ldr	r3, [pc, #88]	; (80009dc <MX_SPI5_Init+0x64>)
 8000984:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000988:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800098a:	4b14      	ldr	r3, [pc, #80]	; (80009dc <MX_SPI5_Init+0x64>)
 800098c:	2200      	movs	r2, #0
 800098e:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8000990:	4b12      	ldr	r3, [pc, #72]	; (80009dc <MX_SPI5_Init+0x64>)
 8000992:	2200      	movs	r2, #0
 8000994:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000996:	4b11      	ldr	r3, [pc, #68]	; (80009dc <MX_SPI5_Init+0x64>)
 8000998:	2200      	movs	r2, #0
 800099a:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 800099c:	4b0f      	ldr	r3, [pc, #60]	; (80009dc <MX_SPI5_Init+0x64>)
 800099e:	2200      	movs	r2, #0
 80009a0:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80009a2:	4b0e      	ldr	r3, [pc, #56]	; (80009dc <MX_SPI5_Init+0x64>)
 80009a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009a8:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80009aa:	4b0c      	ldr	r3, [pc, #48]	; (80009dc <MX_SPI5_Init+0x64>)
 80009ac:	2230      	movs	r2, #48	; 0x30
 80009ae:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009b0:	4b0a      	ldr	r3, [pc, #40]	; (80009dc <MX_SPI5_Init+0x64>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80009b6:	4b09      	ldr	r3, [pc, #36]	; (80009dc <MX_SPI5_Init+0x64>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009bc:	4b07      	ldr	r3, [pc, #28]	; (80009dc <MX_SPI5_Init+0x64>)
 80009be:	2200      	movs	r2, #0
 80009c0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 80009c2:	4b06      	ldr	r3, [pc, #24]	; (80009dc <MX_SPI5_Init+0x64>)
 80009c4:	220a      	movs	r2, #10
 80009c6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80009c8:	4804      	ldr	r0, [pc, #16]	; (80009dc <MX_SPI5_Init+0x64>)
 80009ca:	f003 f81b 	bl	8003a04 <HAL_SPI_Init>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 80009d4:	f7ff ffca 	bl	800096c <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80009d8:	bf00      	nop
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	20000198 	.word	0x20000198
 80009e0:	40015000 	.word	0x40015000

080009e4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b08a      	sub	sp, #40	; 0x28
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ec:	f107 0314 	add.w	r3, r7, #20
 80009f0:	2200      	movs	r2, #0
 80009f2:	601a      	str	r2, [r3, #0]
 80009f4:	605a      	str	r2, [r3, #4]
 80009f6:	609a      	str	r2, [r3, #8]
 80009f8:	60da      	str	r2, [r3, #12]
 80009fa:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4a19      	ldr	r2, [pc, #100]	; (8000a68 <HAL_SPI_MspInit+0x84>)
 8000a02:	4293      	cmp	r3, r2
 8000a04:	d12c      	bne.n	8000a60 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8000a06:	2300      	movs	r3, #0
 8000a08:	613b      	str	r3, [r7, #16]
 8000a0a:	4b18      	ldr	r3, [pc, #96]	; (8000a6c <HAL_SPI_MspInit+0x88>)
 8000a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a0e:	4a17      	ldr	r2, [pc, #92]	; (8000a6c <HAL_SPI_MspInit+0x88>)
 8000a10:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000a14:	6453      	str	r3, [r2, #68]	; 0x44
 8000a16:	4b15      	ldr	r3, [pc, #84]	; (8000a6c <HAL_SPI_MspInit+0x88>)
 8000a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a1e:	613b      	str	r3, [r7, #16]
 8000a20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a22:	2300      	movs	r3, #0
 8000a24:	60fb      	str	r3, [r7, #12]
 8000a26:	4b11      	ldr	r3, [pc, #68]	; (8000a6c <HAL_SPI_MspInit+0x88>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	4a10      	ldr	r2, [pc, #64]	; (8000a6c <HAL_SPI_MspInit+0x88>)
 8000a2c:	f043 0320 	orr.w	r3, r3, #32
 8000a30:	6313      	str	r3, [r2, #48]	; 0x30
 8000a32:	4b0e      	ldr	r3, [pc, #56]	; (8000a6c <HAL_SPI_MspInit+0x88>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	f003 0320 	and.w	r3, r3, #32
 8000a3a:	60fb      	str	r3, [r7, #12]
 8000a3c:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF9     ------> SPI5_MOSI
    PF8     ------> SPI5_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_8;
 8000a3e:	f44f 7360 	mov.w	r3, #896	; 0x380
 8000a42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a44:	2302      	movs	r3, #2
 8000a46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a4c:	2303      	movs	r3, #3
 8000a4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8000a50:	2305      	movs	r3, #5
 8000a52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000a54:	f107 0314 	add.w	r3, r7, #20
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4805      	ldr	r0, [pc, #20]	; (8000a70 <HAL_SPI_MspInit+0x8c>)
 8000a5c:	f000 ff32 	bl	80018c4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8000a60:	bf00      	nop
 8000a62:	3728      	adds	r7, #40	; 0x28
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	40015000 	.word	0x40015000
 8000a6c:	40023800 	.word	0x40023800
 8000a70:	40021400 	.word	0x40021400

08000a74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	607b      	str	r3, [r7, #4]
 8000a7e:	4b12      	ldr	r3, [pc, #72]	; (8000ac8 <HAL_MspInit+0x54>)
 8000a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a82:	4a11      	ldr	r2, [pc, #68]	; (8000ac8 <HAL_MspInit+0x54>)
 8000a84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a88:	6453      	str	r3, [r2, #68]	; 0x44
 8000a8a:	4b0f      	ldr	r3, [pc, #60]	; (8000ac8 <HAL_MspInit+0x54>)
 8000a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a92:	607b      	str	r3, [r7, #4]
 8000a94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a96:	2300      	movs	r3, #0
 8000a98:	603b      	str	r3, [r7, #0]
 8000a9a:	4b0b      	ldr	r3, [pc, #44]	; (8000ac8 <HAL_MspInit+0x54>)
 8000a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a9e:	4a0a      	ldr	r2, [pc, #40]	; (8000ac8 <HAL_MspInit+0x54>)
 8000aa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aa4:	6413      	str	r3, [r2, #64]	; 0x40
 8000aa6:	4b08      	ldr	r3, [pc, #32]	; (8000ac8 <HAL_MspInit+0x54>)
 8000aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aae:	603b      	str	r3, [r7, #0]
 8000ab0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	210f      	movs	r1, #15
 8000ab6:	f06f 0001 	mvn.w	r0, #1
 8000aba:	f000 fbef 	bl	800129c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000abe:	bf00      	nop
 8000ac0:	3708      	adds	r7, #8
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	40023800 	.word	0x40023800

08000acc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b08e      	sub	sp, #56	; 0x38
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8000adc:	2300      	movs	r3, #0
 8000ade:	60fb      	str	r3, [r7, #12]
 8000ae0:	4b33      	ldr	r3, [pc, #204]	; (8000bb0 <HAL_InitTick+0xe4>)
 8000ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae4:	4a32      	ldr	r2, [pc, #200]	; (8000bb0 <HAL_InitTick+0xe4>)
 8000ae6:	f043 0308 	orr.w	r3, r3, #8
 8000aea:	6413      	str	r3, [r2, #64]	; 0x40
 8000aec:	4b30      	ldr	r3, [pc, #192]	; (8000bb0 <HAL_InitTick+0xe4>)
 8000aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af0:	f003 0308 	and.w	r3, r3, #8
 8000af4:	60fb      	str	r3, [r7, #12]
 8000af6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000af8:	f107 0210 	add.w	r2, r7, #16
 8000afc:	f107 0314 	add.w	r3, r7, #20
 8000b00:	4611      	mov	r1, r2
 8000b02:	4618      	mov	r0, r3
 8000b04:	f002 ff4c 	bl	80039a0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000b08:	6a3b      	ldr	r3, [r7, #32]
 8000b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d103      	bne.n	8000b1a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000b12:	f002 ff1d 	bl	8003950 <HAL_RCC_GetPCLK1Freq>
 8000b16:	6378      	str	r0, [r7, #52]	; 0x34
 8000b18:	e004      	b.n	8000b24 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000b1a:	f002 ff19 	bl	8003950 <HAL_RCC_GetPCLK1Freq>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	005b      	lsls	r3, r3, #1
 8000b22:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b26:	4a23      	ldr	r2, [pc, #140]	; (8000bb4 <HAL_InitTick+0xe8>)
 8000b28:	fba2 2303 	umull	r2, r3, r2, r3
 8000b2c:	0c9b      	lsrs	r3, r3, #18
 8000b2e:	3b01      	subs	r3, #1
 8000b30:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8000b32:	4b21      	ldr	r3, [pc, #132]	; (8000bb8 <HAL_InitTick+0xec>)
 8000b34:	4a21      	ldr	r2, [pc, #132]	; (8000bbc <HAL_InitTick+0xf0>)
 8000b36:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8000b38:	4b1f      	ldr	r3, [pc, #124]	; (8000bb8 <HAL_InitTick+0xec>)
 8000b3a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b3e:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8000b40:	4a1d      	ldr	r2, [pc, #116]	; (8000bb8 <HAL_InitTick+0xec>)
 8000b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b44:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8000b46:	4b1c      	ldr	r3, [pc, #112]	; (8000bb8 <HAL_InitTick+0xec>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b4c:	4b1a      	ldr	r3, [pc, #104]	; (8000bb8 <HAL_InitTick+0xec>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b52:	4b19      	ldr	r3, [pc, #100]	; (8000bb8 <HAL_InitTick+0xec>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 8000b58:	4817      	ldr	r0, [pc, #92]	; (8000bb8 <HAL_InitTick+0xec>)
 8000b5a:	f002 ffdc 	bl	8003b16 <HAL_TIM_Base_Init>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000b64:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d11b      	bne.n	8000ba4 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 8000b6c:	4812      	ldr	r0, [pc, #72]	; (8000bb8 <HAL_InitTick+0xec>)
 8000b6e:	f003 f82b 	bl	8003bc8 <HAL_TIM_Base_Start_IT>
 8000b72:	4603      	mov	r3, r0
 8000b74:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000b78:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d111      	bne.n	8000ba4 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8000b80:	2032      	movs	r0, #50	; 0x32
 8000b82:	f000 fba7 	bl	80012d4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	2b0f      	cmp	r3, #15
 8000b8a:	d808      	bhi.n	8000b9e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	6879      	ldr	r1, [r7, #4]
 8000b90:	2032      	movs	r0, #50	; 0x32
 8000b92:	f000 fb83 	bl	800129c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b96:	4a0a      	ldr	r2, [pc, #40]	; (8000bc0 <HAL_InitTick+0xf4>)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	6013      	str	r3, [r2, #0]
 8000b9c:	e002      	b.n	8000ba4 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000ba4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000ba8:	4618      	mov	r0, r3
 8000baa:	3738      	adds	r7, #56	; 0x38
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	40023800 	.word	0x40023800
 8000bb4:	431bde83 	.word	0x431bde83
 8000bb8:	200001f0 	.word	0x200001f0
 8000bbc:	40000c00 	.word	0x40000c00
 8000bc0:	20000004 	.word	0x20000004

08000bc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bc8:	e7fe      	b.n	8000bc8 <NMI_Handler+0x4>

08000bca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bca:	b480      	push	{r7}
 8000bcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bce:	e7fe      	b.n	8000bce <HardFault_Handler+0x4>

08000bd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bd4:	e7fe      	b.n	8000bd4 <MemManage_Handler+0x4>

08000bd6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bd6:	b480      	push	{r7}
 8000bd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bda:	e7fe      	b.n	8000bda <BusFault_Handler+0x4>

08000bdc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000be0:	e7fe      	b.n	8000be0 <UsageFault_Handler+0x4>

08000be2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000be2:	b480      	push	{r7}
 8000be4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000be6:	bf00      	nop
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr

08000bf0 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000bf4:	4802      	ldr	r0, [pc, #8]	; (8000c00 <TIM5_IRQHandler+0x10>)
 8000bf6:	f003 f857 	bl	8003ca8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000bfa:	bf00      	nop
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	200001f0 	.word	0x200001f0

08000c04 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8000c08:	4802      	ldr	r0, [pc, #8]	; (8000c14 <DMA2_Stream1_IRQHandler+0x10>)
 8000c0a:	f000 fc1f 	bl	800144c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8000c0e:	bf00      	nop
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	20000280 	.word	0x20000280

08000c18 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000c1c:	4802      	ldr	r0, [pc, #8]	; (8000c28 <OTG_FS_IRQHandler+0x10>)
 8000c1e:	f001 f95a 	bl	8001ed6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000c22:	bf00      	nop
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	2000620c 	.word	0x2000620c

08000c2c <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8000c30:	4802      	ldr	r0, [pc, #8]	; (8000c3c <DMA2_Stream6_IRQHandler+0x10>)
 8000c32:	f000 fc0b 	bl	800144c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8000c36:	bf00      	nop
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	200002e0 	.word	0x200002e0

08000c40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c44:	4b06      	ldr	r3, [pc, #24]	; (8000c60 <SystemInit+0x20>)
 8000c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c4a:	4a05      	ldr	r2, [pc, #20]	; (8000c60 <SystemInit+0x20>)
 8000c4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c54:	bf00      	nop
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	e000ed00 	.word	0xe000ed00

08000c64 <MX_USART6_UART_Init>:
DMA_HandleTypeDef hdma_usart6_tx;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000c68:	4b11      	ldr	r3, [pc, #68]	; (8000cb0 <MX_USART6_UART_Init+0x4c>)
 8000c6a:	4a12      	ldr	r2, [pc, #72]	; (8000cb4 <MX_USART6_UART_Init+0x50>)
 8000c6c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 921600;
 8000c6e:	4b10      	ldr	r3, [pc, #64]	; (8000cb0 <MX_USART6_UART_Init+0x4c>)
 8000c70:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8000c74:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000c76:	4b0e      	ldr	r3, [pc, #56]	; (8000cb0 <MX_USART6_UART_Init+0x4c>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000c7c:	4b0c      	ldr	r3, [pc, #48]	; (8000cb0 <MX_USART6_UART_Init+0x4c>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000c82:	4b0b      	ldr	r3, [pc, #44]	; (8000cb0 <MX_USART6_UART_Init+0x4c>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000c88:	4b09      	ldr	r3, [pc, #36]	; (8000cb0 <MX_USART6_UART_Init+0x4c>)
 8000c8a:	220c      	movs	r2, #12
 8000c8c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c8e:	4b08      	ldr	r3, [pc, #32]	; (8000cb0 <MX_USART6_UART_Init+0x4c>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c94:	4b06      	ldr	r3, [pc, #24]	; (8000cb0 <MX_USART6_UART_Init+0x4c>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000c9a:	4805      	ldr	r0, [pc, #20]	; (8000cb0 <MX_USART6_UART_Init+0x4c>)
 8000c9c:	f003 f9dc 	bl	8004058 <HAL_UART_Init>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000ca6:	f7ff fe61 	bl	800096c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000caa:	bf00      	nop
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	20000238 	.word	0x20000238
 8000cb4:	40011400 	.word	0x40011400

08000cb8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b08a      	sub	sp, #40	; 0x28
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc0:	f107 0314 	add.w	r3, r7, #20
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	601a      	str	r2, [r3, #0]
 8000cc8:	605a      	str	r2, [r3, #4]
 8000cca:	609a      	str	r2, [r3, #8]
 8000ccc:	60da      	str	r2, [r3, #12]
 8000cce:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART6)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4a48      	ldr	r2, [pc, #288]	; (8000df8 <HAL_UART_MspInit+0x140>)
 8000cd6:	4293      	cmp	r3, r2
 8000cd8:	f040 808a 	bne.w	8000df0 <HAL_UART_MspInit+0x138>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8000cdc:	2300      	movs	r3, #0
 8000cde:	613b      	str	r3, [r7, #16]
 8000ce0:	4b46      	ldr	r3, [pc, #280]	; (8000dfc <HAL_UART_MspInit+0x144>)
 8000ce2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ce4:	4a45      	ldr	r2, [pc, #276]	; (8000dfc <HAL_UART_MspInit+0x144>)
 8000ce6:	f043 0320 	orr.w	r3, r3, #32
 8000cea:	6453      	str	r3, [r2, #68]	; 0x44
 8000cec:	4b43      	ldr	r3, [pc, #268]	; (8000dfc <HAL_UART_MspInit+0x144>)
 8000cee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cf0:	f003 0320 	and.w	r3, r3, #32
 8000cf4:	613b      	str	r3, [r7, #16]
 8000cf6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	60fb      	str	r3, [r7, #12]
 8000cfc:	4b3f      	ldr	r3, [pc, #252]	; (8000dfc <HAL_UART_MspInit+0x144>)
 8000cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d00:	4a3e      	ldr	r2, [pc, #248]	; (8000dfc <HAL_UART_MspInit+0x144>)
 8000d02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d06:	6313      	str	r3, [r2, #48]	; 0x30
 8000d08:	4b3c      	ldr	r3, [pc, #240]	; (8000dfc <HAL_UART_MspInit+0x144>)
 8000d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d10:	60fb      	str	r3, [r7, #12]
 8000d12:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PG14     ------> USART6_TX
    PG9     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_9;
 8000d14:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8000d18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1a:	2302      	movs	r3, #2
 8000d1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d22:	2303      	movs	r3, #3
 8000d24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000d26:	2308      	movs	r3, #8
 8000d28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d2a:	f107 0314 	add.w	r3, r7, #20
 8000d2e:	4619      	mov	r1, r3
 8000d30:	4833      	ldr	r0, [pc, #204]	; (8000e00 <HAL_UART_MspInit+0x148>)
 8000d32:	f000 fdc7 	bl	80018c4 <HAL_GPIO_Init>

    /* USART6 DMA Init */
    /* USART6_RX Init */
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8000d36:	4b33      	ldr	r3, [pc, #204]	; (8000e04 <HAL_UART_MspInit+0x14c>)
 8000d38:	4a33      	ldr	r2, [pc, #204]	; (8000e08 <HAL_UART_MspInit+0x150>)
 8000d3a:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8000d3c:	4b31      	ldr	r3, [pc, #196]	; (8000e04 <HAL_UART_MspInit+0x14c>)
 8000d3e:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8000d42:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d44:	4b2f      	ldr	r3, [pc, #188]	; (8000e04 <HAL_UART_MspInit+0x14c>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d4a:	4b2e      	ldr	r3, [pc, #184]	; (8000e04 <HAL_UART_MspInit+0x14c>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000d50:	4b2c      	ldr	r3, [pc, #176]	; (8000e04 <HAL_UART_MspInit+0x14c>)
 8000d52:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d56:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d58:	4b2a      	ldr	r3, [pc, #168]	; (8000e04 <HAL_UART_MspInit+0x14c>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d5e:	4b29      	ldr	r3, [pc, #164]	; (8000e04 <HAL_UART_MspInit+0x14c>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8000d64:	4b27      	ldr	r3, [pc, #156]	; (8000e04 <HAL_UART_MspInit+0x14c>)
 8000d66:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d6a:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000d6c:	4b25      	ldr	r3, [pc, #148]	; (8000e04 <HAL_UART_MspInit+0x14c>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d72:	4b24      	ldr	r3, [pc, #144]	; (8000e04 <HAL_UART_MspInit+0x14c>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8000d78:	4822      	ldr	r0, [pc, #136]	; (8000e04 <HAL_UART_MspInit+0x14c>)
 8000d7a:	f000 fab9 	bl	80012f0 <HAL_DMA_Init>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8000d84:	f7ff fdf2 	bl	800096c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	4a1e      	ldr	r2, [pc, #120]	; (8000e04 <HAL_UART_MspInit+0x14c>)
 8000d8c:	63da      	str	r2, [r3, #60]	; 0x3c
 8000d8e:	4a1d      	ldr	r2, [pc, #116]	; (8000e04 <HAL_UART_MspInit+0x14c>)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART6_TX Init */
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8000d94:	4b1d      	ldr	r3, [pc, #116]	; (8000e0c <HAL_UART_MspInit+0x154>)
 8000d96:	4a1e      	ldr	r2, [pc, #120]	; (8000e10 <HAL_UART_MspInit+0x158>)
 8000d98:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8000d9a:	4b1c      	ldr	r3, [pc, #112]	; (8000e0c <HAL_UART_MspInit+0x154>)
 8000d9c:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8000da0:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000da2:	4b1a      	ldr	r3, [pc, #104]	; (8000e0c <HAL_UART_MspInit+0x154>)
 8000da4:	2240      	movs	r2, #64	; 0x40
 8000da6:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000da8:	4b18      	ldr	r3, [pc, #96]	; (8000e0c <HAL_UART_MspInit+0x154>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000dae:	4b17      	ldr	r3, [pc, #92]	; (8000e0c <HAL_UART_MspInit+0x154>)
 8000db0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000db4:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000db6:	4b15      	ldr	r3, [pc, #84]	; (8000e0c <HAL_UART_MspInit+0x154>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000dbc:	4b13      	ldr	r3, [pc, #76]	; (8000e0c <HAL_UART_MspInit+0x154>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8000dc2:	4b12      	ldr	r3, [pc, #72]	; (8000e0c <HAL_UART_MspInit+0x154>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000dc8:	4b10      	ldr	r3, [pc, #64]	; (8000e0c <HAL_UART_MspInit+0x154>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000dce:	4b0f      	ldr	r3, [pc, #60]	; (8000e0c <HAL_UART_MspInit+0x154>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8000dd4:	480d      	ldr	r0, [pc, #52]	; (8000e0c <HAL_UART_MspInit+0x154>)
 8000dd6:	f000 fa8b 	bl	80012f0 <HAL_DMA_Init>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d001      	beq.n	8000de4 <HAL_UART_MspInit+0x12c>
    {
      Error_Handler();
 8000de0:	f7ff fdc4 	bl	800096c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart6_tx);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	4a09      	ldr	r2, [pc, #36]	; (8000e0c <HAL_UART_MspInit+0x154>)
 8000de8:	639a      	str	r2, [r3, #56]	; 0x38
 8000dea:	4a08      	ldr	r2, [pc, #32]	; (8000e0c <HAL_UART_MspInit+0x154>)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8000df0:	bf00      	nop
 8000df2:	3728      	adds	r7, #40	; 0x28
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	40011400 	.word	0x40011400
 8000dfc:	40023800 	.word	0x40023800
 8000e00:	40021800 	.word	0x40021800
 8000e04:	20000280 	.word	0x20000280
 8000e08:	40026428 	.word	0x40026428
 8000e0c:	200002e0 	.word	0x200002e0
 8000e10:	400264a0 	.word	0x400264a0

08000e14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e4c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e18:	f7ff ff12 	bl	8000c40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e1c:	480c      	ldr	r0, [pc, #48]	; (8000e50 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e1e:	490d      	ldr	r1, [pc, #52]	; (8000e54 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e20:	4a0d      	ldr	r2, [pc, #52]	; (8000e58 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e24:	e002      	b.n	8000e2c <LoopCopyDataInit>

08000e26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e2a:	3304      	adds	r3, #4

08000e2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e30:	d3f9      	bcc.n	8000e26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e32:	4a0a      	ldr	r2, [pc, #40]	; (8000e5c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e34:	4c0a      	ldr	r4, [pc, #40]	; (8000e60 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e38:	e001      	b.n	8000e3e <LoopFillZerobss>

08000e3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e3c:	3204      	adds	r2, #4

08000e3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e40:	d3fb      	bcc.n	8000e3a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000e42:	f00a f9b1 	bl	800b1a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e46:	f7ff fcfd 	bl	8000844 <main>
  bx  lr    
 8000e4a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e4c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000e50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e54:	20000150 	.word	0x20000150
  ldr r2, =_sidata
 8000e58:	0800b380 	.word	0x0800b380
  ldr r2, =_sbss
 8000e5c:	20000150 	.word	0x20000150
  ldr r4, =_ebss
 8000e60:	20006a50 	.word	0x20006a50

08000e64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e64:	e7fe      	b.n	8000e64 <ADC_IRQHandler>
	...

08000e68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e6c:	4b0e      	ldr	r3, [pc, #56]	; (8000ea8 <HAL_Init+0x40>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a0d      	ldr	r2, [pc, #52]	; (8000ea8 <HAL_Init+0x40>)
 8000e72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e76:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e78:	4b0b      	ldr	r3, [pc, #44]	; (8000ea8 <HAL_Init+0x40>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a0a      	ldr	r2, [pc, #40]	; (8000ea8 <HAL_Init+0x40>)
 8000e7e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e82:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e84:	4b08      	ldr	r3, [pc, #32]	; (8000ea8 <HAL_Init+0x40>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a07      	ldr	r2, [pc, #28]	; (8000ea8 <HAL_Init+0x40>)
 8000e8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e90:	2003      	movs	r0, #3
 8000e92:	f000 f9f8 	bl	8001286 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e96:	200f      	movs	r0, #15
 8000e98:	f7ff fe18 	bl	8000acc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e9c:	f7ff fdea 	bl	8000a74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ea0:	2300      	movs	r3, #0
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	40023c00 	.word	0x40023c00

08000eac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000eb0:	4b06      	ldr	r3, [pc, #24]	; (8000ecc <HAL_IncTick+0x20>)
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	461a      	mov	r2, r3
 8000eb6:	4b06      	ldr	r3, [pc, #24]	; (8000ed0 <HAL_IncTick+0x24>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4413      	add	r3, r2
 8000ebc:	4a04      	ldr	r2, [pc, #16]	; (8000ed0 <HAL_IncTick+0x24>)
 8000ebe:	6013      	str	r3, [r2, #0]
}
 8000ec0:	bf00      	nop
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	20000008 	.word	0x20000008
 8000ed0:	20000340 	.word	0x20000340

08000ed4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ed8:	4b03      	ldr	r3, [pc, #12]	; (8000ee8 <HAL_GetTick+0x14>)
 8000eda:	681b      	ldr	r3, [r3, #0]
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	20000340 	.word	0x20000340

08000eec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b084      	sub	sp, #16
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ef4:	f7ff ffee 	bl	8000ed4 <HAL_GetTick>
 8000ef8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000f04:	d005      	beq.n	8000f12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f06:	4b0a      	ldr	r3, [pc, #40]	; (8000f30 <HAL_Delay+0x44>)
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	461a      	mov	r2, r3
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	4413      	add	r3, r2
 8000f10:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f12:	bf00      	nop
 8000f14:	f7ff ffde 	bl	8000ed4 <HAL_GetTick>
 8000f18:	4602      	mov	r2, r0
 8000f1a:	68bb      	ldr	r3, [r7, #8]
 8000f1c:	1ad3      	subs	r3, r2, r3
 8000f1e:	68fa      	ldr	r2, [r7, #12]
 8000f20:	429a      	cmp	r2, r3
 8000f22:	d8f7      	bhi.n	8000f14 <HAL_Delay+0x28>
  {
  }
}
 8000f24:	bf00      	nop
 8000f26:	bf00      	nop
 8000f28:	3710      	adds	r7, #16
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	20000008 	.word	0x20000008

08000f34 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b084      	sub	sp, #16
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d101      	bne.n	8000f46 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000f42:	2301      	movs	r3, #1
 8000f44:	e0ed      	b.n	8001122 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f4c:	b2db      	uxtb	r3, r3
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d102      	bne.n	8000f58 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000f52:	6878      	ldr	r0, [r7, #4]
 8000f54:	f7ff fb00 	bl	8000558 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	681a      	ldr	r2, [r3, #0]
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f042 0201 	orr.w	r2, r2, #1
 8000f66:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000f68:	f7ff ffb4 	bl	8000ed4 <HAL_GetTick>
 8000f6c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000f6e:	e012      	b.n	8000f96 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000f70:	f7ff ffb0 	bl	8000ed4 <HAL_GetTick>
 8000f74:	4602      	mov	r2, r0
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	1ad3      	subs	r3, r2, r3
 8000f7a:	2b0a      	cmp	r3, #10
 8000f7c:	d90b      	bls.n	8000f96 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f82:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	2205      	movs	r2, #5
 8000f8e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000f92:	2301      	movs	r3, #1
 8000f94:	e0c5      	b.n	8001122 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	f003 0301 	and.w	r3, r3, #1
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d0e5      	beq.n	8000f70 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	681a      	ldr	r2, [r3, #0]
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f022 0202 	bic.w	r2, r2, #2
 8000fb2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000fb4:	f7ff ff8e 	bl	8000ed4 <HAL_GetTick>
 8000fb8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000fba:	e012      	b.n	8000fe2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000fbc:	f7ff ff8a 	bl	8000ed4 <HAL_GetTick>
 8000fc0:	4602      	mov	r2, r0
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	1ad3      	subs	r3, r2, r3
 8000fc6:	2b0a      	cmp	r3, #10
 8000fc8:	d90b      	bls.n	8000fe2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fce:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2205      	movs	r2, #5
 8000fda:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	e09f      	b.n	8001122 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	f003 0302 	and.w	r3, r3, #2
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d1e5      	bne.n	8000fbc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	7e1b      	ldrb	r3, [r3, #24]
 8000ff4:	2b01      	cmp	r3, #1
 8000ff6:	d108      	bne.n	800100a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001006:	601a      	str	r2, [r3, #0]
 8001008:	e007      	b.n	800101a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	681a      	ldr	r2, [r3, #0]
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001018:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	7e5b      	ldrb	r3, [r3, #25]
 800101e:	2b01      	cmp	r3, #1
 8001020:	d108      	bne.n	8001034 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	681a      	ldr	r2, [r3, #0]
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001030:	601a      	str	r2, [r3, #0]
 8001032:	e007      	b.n	8001044 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	681a      	ldr	r2, [r3, #0]
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001042:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	7e9b      	ldrb	r3, [r3, #26]
 8001048:	2b01      	cmp	r3, #1
 800104a:	d108      	bne.n	800105e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	681a      	ldr	r2, [r3, #0]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f042 0220 	orr.w	r2, r2, #32
 800105a:	601a      	str	r2, [r3, #0]
 800105c:	e007      	b.n	800106e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	681a      	ldr	r2, [r3, #0]
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f022 0220 	bic.w	r2, r2, #32
 800106c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	7edb      	ldrb	r3, [r3, #27]
 8001072:	2b01      	cmp	r3, #1
 8001074:	d108      	bne.n	8001088 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	681a      	ldr	r2, [r3, #0]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f022 0210 	bic.w	r2, r2, #16
 8001084:	601a      	str	r2, [r3, #0]
 8001086:	e007      	b.n	8001098 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	681a      	ldr	r2, [r3, #0]
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f042 0210 	orr.w	r2, r2, #16
 8001096:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	7f1b      	ldrb	r3, [r3, #28]
 800109c:	2b01      	cmp	r3, #1
 800109e:	d108      	bne.n	80010b2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	681a      	ldr	r2, [r3, #0]
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f042 0208 	orr.w	r2, r2, #8
 80010ae:	601a      	str	r2, [r3, #0]
 80010b0:	e007      	b.n	80010c2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	681a      	ldr	r2, [r3, #0]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f022 0208 	bic.w	r2, r2, #8
 80010c0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	7f5b      	ldrb	r3, [r3, #29]
 80010c6:	2b01      	cmp	r3, #1
 80010c8:	d108      	bne.n	80010dc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	681a      	ldr	r2, [r3, #0]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f042 0204 	orr.w	r2, r2, #4
 80010d8:	601a      	str	r2, [r3, #0]
 80010da:	e007      	b.n	80010ec <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f022 0204 	bic.w	r2, r2, #4
 80010ea:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	689a      	ldr	r2, [r3, #8]
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	68db      	ldr	r3, [r3, #12]
 80010f4:	431a      	orrs	r2, r3
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	691b      	ldr	r3, [r3, #16]
 80010fa:	431a      	orrs	r2, r3
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	695b      	ldr	r3, [r3, #20]
 8001100:	ea42 0103 	orr.w	r1, r2, r3
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	1e5a      	subs	r2, r3, #1
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	430a      	orrs	r2, r1
 8001110:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2200      	movs	r2, #0
 8001116:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2201      	movs	r2, #1
 800111c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001120:	2300      	movs	r3, #0
}
 8001122:	4618      	mov	r0, r3
 8001124:	3710      	adds	r7, #16
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
	...

0800112c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800112c:	b480      	push	{r7}
 800112e:	b085      	sub	sp, #20
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	f003 0307 	and.w	r3, r3, #7
 800113a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800113c:	4b0c      	ldr	r3, [pc, #48]	; (8001170 <__NVIC_SetPriorityGrouping+0x44>)
 800113e:	68db      	ldr	r3, [r3, #12]
 8001140:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001142:	68ba      	ldr	r2, [r7, #8]
 8001144:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001148:	4013      	ands	r3, r2
 800114a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001150:	68bb      	ldr	r3, [r7, #8]
 8001152:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001154:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001158:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800115c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800115e:	4a04      	ldr	r2, [pc, #16]	; (8001170 <__NVIC_SetPriorityGrouping+0x44>)
 8001160:	68bb      	ldr	r3, [r7, #8]
 8001162:	60d3      	str	r3, [r2, #12]
}
 8001164:	bf00      	nop
 8001166:	3714      	adds	r7, #20
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr
 8001170:	e000ed00 	.word	0xe000ed00

08001174 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001178:	4b04      	ldr	r3, [pc, #16]	; (800118c <__NVIC_GetPriorityGrouping+0x18>)
 800117a:	68db      	ldr	r3, [r3, #12]
 800117c:	0a1b      	lsrs	r3, r3, #8
 800117e:	f003 0307 	and.w	r3, r3, #7
}
 8001182:	4618      	mov	r0, r3
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr
 800118c:	e000ed00 	.word	0xe000ed00

08001190 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001190:	b480      	push	{r7}
 8001192:	b083      	sub	sp, #12
 8001194:	af00      	add	r7, sp, #0
 8001196:	4603      	mov	r3, r0
 8001198:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800119a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	db0b      	blt.n	80011ba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011a2:	79fb      	ldrb	r3, [r7, #7]
 80011a4:	f003 021f 	and.w	r2, r3, #31
 80011a8:	4907      	ldr	r1, [pc, #28]	; (80011c8 <__NVIC_EnableIRQ+0x38>)
 80011aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ae:	095b      	lsrs	r3, r3, #5
 80011b0:	2001      	movs	r0, #1
 80011b2:	fa00 f202 	lsl.w	r2, r0, r2
 80011b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80011ba:	bf00      	nop
 80011bc:	370c      	adds	r7, #12
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop
 80011c8:	e000e100 	.word	0xe000e100

080011cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	4603      	mov	r3, r0
 80011d4:	6039      	str	r1, [r7, #0]
 80011d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	db0a      	blt.n	80011f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	b2da      	uxtb	r2, r3
 80011e4:	490c      	ldr	r1, [pc, #48]	; (8001218 <__NVIC_SetPriority+0x4c>)
 80011e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ea:	0112      	lsls	r2, r2, #4
 80011ec:	b2d2      	uxtb	r2, r2
 80011ee:	440b      	add	r3, r1
 80011f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011f4:	e00a      	b.n	800120c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	b2da      	uxtb	r2, r3
 80011fa:	4908      	ldr	r1, [pc, #32]	; (800121c <__NVIC_SetPriority+0x50>)
 80011fc:	79fb      	ldrb	r3, [r7, #7]
 80011fe:	f003 030f 	and.w	r3, r3, #15
 8001202:	3b04      	subs	r3, #4
 8001204:	0112      	lsls	r2, r2, #4
 8001206:	b2d2      	uxtb	r2, r2
 8001208:	440b      	add	r3, r1
 800120a:	761a      	strb	r2, [r3, #24]
}
 800120c:	bf00      	nop
 800120e:	370c      	adds	r7, #12
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr
 8001218:	e000e100 	.word	0xe000e100
 800121c:	e000ed00 	.word	0xe000ed00

08001220 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001220:	b480      	push	{r7}
 8001222:	b089      	sub	sp, #36	; 0x24
 8001224:	af00      	add	r7, sp, #0
 8001226:	60f8      	str	r0, [r7, #12]
 8001228:	60b9      	str	r1, [r7, #8]
 800122a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	f003 0307 	and.w	r3, r3, #7
 8001232:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001234:	69fb      	ldr	r3, [r7, #28]
 8001236:	f1c3 0307 	rsb	r3, r3, #7
 800123a:	2b04      	cmp	r3, #4
 800123c:	bf28      	it	cs
 800123e:	2304      	movcs	r3, #4
 8001240:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	3304      	adds	r3, #4
 8001246:	2b06      	cmp	r3, #6
 8001248:	d902      	bls.n	8001250 <NVIC_EncodePriority+0x30>
 800124a:	69fb      	ldr	r3, [r7, #28]
 800124c:	3b03      	subs	r3, #3
 800124e:	e000      	b.n	8001252 <NVIC_EncodePriority+0x32>
 8001250:	2300      	movs	r3, #0
 8001252:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001254:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001258:	69bb      	ldr	r3, [r7, #24]
 800125a:	fa02 f303 	lsl.w	r3, r2, r3
 800125e:	43da      	mvns	r2, r3
 8001260:	68bb      	ldr	r3, [r7, #8]
 8001262:	401a      	ands	r2, r3
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001268:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	fa01 f303 	lsl.w	r3, r1, r3
 8001272:	43d9      	mvns	r1, r3
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001278:	4313      	orrs	r3, r2
         );
}
 800127a:	4618      	mov	r0, r3
 800127c:	3724      	adds	r7, #36	; 0x24
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr

08001286 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001286:	b580      	push	{r7, lr}
 8001288:	b082      	sub	sp, #8
 800128a:	af00      	add	r7, sp, #0
 800128c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800128e:	6878      	ldr	r0, [r7, #4]
 8001290:	f7ff ff4c 	bl	800112c <__NVIC_SetPriorityGrouping>
}
 8001294:	bf00      	nop
 8001296:	3708      	adds	r7, #8
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}

0800129c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800129c:	b580      	push	{r7, lr}
 800129e:	b086      	sub	sp, #24
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	4603      	mov	r3, r0
 80012a4:	60b9      	str	r1, [r7, #8]
 80012a6:	607a      	str	r2, [r7, #4]
 80012a8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012aa:	2300      	movs	r3, #0
 80012ac:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012ae:	f7ff ff61 	bl	8001174 <__NVIC_GetPriorityGrouping>
 80012b2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012b4:	687a      	ldr	r2, [r7, #4]
 80012b6:	68b9      	ldr	r1, [r7, #8]
 80012b8:	6978      	ldr	r0, [r7, #20]
 80012ba:	f7ff ffb1 	bl	8001220 <NVIC_EncodePriority>
 80012be:	4602      	mov	r2, r0
 80012c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012c4:	4611      	mov	r1, r2
 80012c6:	4618      	mov	r0, r3
 80012c8:	f7ff ff80 	bl	80011cc <__NVIC_SetPriority>
}
 80012cc:	bf00      	nop
 80012ce:	3718      	adds	r7, #24
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}

080012d4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
 80012da:	4603      	mov	r3, r0
 80012dc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e2:	4618      	mov	r0, r3
 80012e4:	f7ff ff54 	bl	8001190 <__NVIC_EnableIRQ>
}
 80012e8:	bf00      	nop
 80012ea:	3708      	adds	r7, #8
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}

080012f0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b086      	sub	sp, #24
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80012f8:	2300      	movs	r3, #0
 80012fa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80012fc:	f7ff fdea 	bl	8000ed4 <HAL_GetTick>
 8001300:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d101      	bne.n	800130c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001308:	2301      	movs	r3, #1
 800130a:	e099      	b.n	8001440 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2202      	movs	r2, #2
 8001310:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2200      	movs	r2, #0
 8001318:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f022 0201 	bic.w	r2, r2, #1
 800132a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800132c:	e00f      	b.n	800134e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800132e:	f7ff fdd1 	bl	8000ed4 <HAL_GetTick>
 8001332:	4602      	mov	r2, r0
 8001334:	693b      	ldr	r3, [r7, #16]
 8001336:	1ad3      	subs	r3, r2, r3
 8001338:	2b05      	cmp	r3, #5
 800133a:	d908      	bls.n	800134e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2220      	movs	r2, #32
 8001340:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2203      	movs	r2, #3
 8001346:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800134a:	2303      	movs	r3, #3
 800134c:	e078      	b.n	8001440 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f003 0301 	and.w	r3, r3, #1
 8001358:	2b00      	cmp	r3, #0
 800135a:	d1e8      	bne.n	800132e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001364:	697a      	ldr	r2, [r7, #20]
 8001366:	4b38      	ldr	r3, [pc, #224]	; (8001448 <HAL_DMA_Init+0x158>)
 8001368:	4013      	ands	r3, r2
 800136a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	685a      	ldr	r2, [r3, #4]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	689b      	ldr	r3, [r3, #8]
 8001374:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800137a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	691b      	ldr	r3, [r3, #16]
 8001380:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001386:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	699b      	ldr	r3, [r3, #24]
 800138c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001392:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6a1b      	ldr	r3, [r3, #32]
 8001398:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800139a:	697a      	ldr	r2, [r7, #20]
 800139c:	4313      	orrs	r3, r2
 800139e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013a4:	2b04      	cmp	r3, #4
 80013a6:	d107      	bne.n	80013b8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b0:	4313      	orrs	r3, r2
 80013b2:	697a      	ldr	r2, [r7, #20]
 80013b4:	4313      	orrs	r3, r2
 80013b6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	697a      	ldr	r2, [r7, #20]
 80013be:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	695b      	ldr	r3, [r3, #20]
 80013c6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	f023 0307 	bic.w	r3, r3, #7
 80013ce:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013d4:	697a      	ldr	r2, [r7, #20]
 80013d6:	4313      	orrs	r3, r2
 80013d8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013de:	2b04      	cmp	r3, #4
 80013e0:	d117      	bne.n	8001412 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013e6:	697a      	ldr	r2, [r7, #20]
 80013e8:	4313      	orrs	r3, r2
 80013ea:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d00e      	beq.n	8001412 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80013f4:	6878      	ldr	r0, [r7, #4]
 80013f6:	f000 f9e9 	bl	80017cc <DMA_CheckFifoParam>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d008      	beq.n	8001412 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2240      	movs	r2, #64	; 0x40
 8001404:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2201      	movs	r2, #1
 800140a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800140e:	2301      	movs	r3, #1
 8001410:	e016      	b.n	8001440 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	697a      	ldr	r2, [r7, #20]
 8001418:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800141a:	6878      	ldr	r0, [r7, #4]
 800141c:	f000 f9a0 	bl	8001760 <DMA_CalcBaseAndBitshift>
 8001420:	4603      	mov	r3, r0
 8001422:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001428:	223f      	movs	r2, #63	; 0x3f
 800142a:	409a      	lsls	r2, r3
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2200      	movs	r2, #0
 8001434:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2201      	movs	r2, #1
 800143a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800143e:	2300      	movs	r3, #0
}
 8001440:	4618      	mov	r0, r3
 8001442:	3718      	adds	r7, #24
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	f010803f 	.word	0xf010803f

0800144c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b086      	sub	sp, #24
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001454:	2300      	movs	r3, #0
 8001456:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001458:	4b8e      	ldr	r3, [pc, #568]	; (8001694 <HAL_DMA_IRQHandler+0x248>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a8e      	ldr	r2, [pc, #568]	; (8001698 <HAL_DMA_IRQHandler+0x24c>)
 800145e:	fba2 2303 	umull	r2, r3, r2, r3
 8001462:	0a9b      	lsrs	r3, r3, #10
 8001464:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800146a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800146c:	693b      	ldr	r3, [r7, #16]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001476:	2208      	movs	r2, #8
 8001478:	409a      	lsls	r2, r3
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	4013      	ands	r3, r2
 800147e:	2b00      	cmp	r3, #0
 8001480:	d01a      	beq.n	80014b8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f003 0304 	and.w	r3, r3, #4
 800148c:	2b00      	cmp	r3, #0
 800148e:	d013      	beq.n	80014b8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f022 0204 	bic.w	r2, r2, #4
 800149e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014a4:	2208      	movs	r2, #8
 80014a6:	409a      	lsls	r2, r3
 80014a8:	693b      	ldr	r3, [r7, #16]
 80014aa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014b0:	f043 0201 	orr.w	r2, r3, #1
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014bc:	2201      	movs	r2, #1
 80014be:	409a      	lsls	r2, r3
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	4013      	ands	r3, r2
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d012      	beq.n	80014ee <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	695b      	ldr	r3, [r3, #20]
 80014ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d00b      	beq.n	80014ee <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014da:	2201      	movs	r2, #1
 80014dc:	409a      	lsls	r2, r3
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014e6:	f043 0202 	orr.w	r2, r3, #2
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014f2:	2204      	movs	r2, #4
 80014f4:	409a      	lsls	r2, r3
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	4013      	ands	r3, r2
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d012      	beq.n	8001524 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f003 0302 	and.w	r3, r3, #2
 8001508:	2b00      	cmp	r3, #0
 800150a:	d00b      	beq.n	8001524 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001510:	2204      	movs	r2, #4
 8001512:	409a      	lsls	r2, r3
 8001514:	693b      	ldr	r3, [r7, #16]
 8001516:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800151c:	f043 0204 	orr.w	r2, r3, #4
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001528:	2210      	movs	r2, #16
 800152a:	409a      	lsls	r2, r3
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	4013      	ands	r3, r2
 8001530:	2b00      	cmp	r3, #0
 8001532:	d043      	beq.n	80015bc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f003 0308 	and.w	r3, r3, #8
 800153e:	2b00      	cmp	r3, #0
 8001540:	d03c      	beq.n	80015bc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001546:	2210      	movs	r2, #16
 8001548:	409a      	lsls	r2, r3
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001558:	2b00      	cmp	r3, #0
 800155a:	d018      	beq.n	800158e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001566:	2b00      	cmp	r3, #0
 8001568:	d108      	bne.n	800157c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156e:	2b00      	cmp	r3, #0
 8001570:	d024      	beq.n	80015bc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001576:	6878      	ldr	r0, [r7, #4]
 8001578:	4798      	blx	r3
 800157a:	e01f      	b.n	80015bc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001580:	2b00      	cmp	r3, #0
 8001582:	d01b      	beq.n	80015bc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001588:	6878      	ldr	r0, [r7, #4]
 800158a:	4798      	blx	r3
 800158c:	e016      	b.n	80015bc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001598:	2b00      	cmp	r3, #0
 800159a:	d107      	bne.n	80015ac <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	681a      	ldr	r2, [r3, #0]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f022 0208 	bic.w	r2, r2, #8
 80015aa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d003      	beq.n	80015bc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b8:	6878      	ldr	r0, [r7, #4]
 80015ba:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015c0:	2220      	movs	r2, #32
 80015c2:	409a      	lsls	r2, r3
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	4013      	ands	r3, r2
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	f000 808f 	beq.w	80016ec <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f003 0310 	and.w	r3, r3, #16
 80015d8:	2b00      	cmp	r3, #0
 80015da:	f000 8087 	beq.w	80016ec <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015e2:	2220      	movs	r2, #32
 80015e4:	409a      	lsls	r2, r3
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80015f0:	b2db      	uxtb	r3, r3
 80015f2:	2b05      	cmp	r3, #5
 80015f4:	d136      	bne.n	8001664 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f022 0216 	bic.w	r2, r2, #22
 8001604:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	695a      	ldr	r2, [r3, #20]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001614:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161a:	2b00      	cmp	r3, #0
 800161c:	d103      	bne.n	8001626 <HAL_DMA_IRQHandler+0x1da>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001622:	2b00      	cmp	r3, #0
 8001624:	d007      	beq.n	8001636 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f022 0208 	bic.w	r2, r2, #8
 8001634:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800163a:	223f      	movs	r2, #63	; 0x3f
 800163c:	409a      	lsls	r2, r3
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2201      	movs	r2, #1
 8001646:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2200      	movs	r2, #0
 800164e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001656:	2b00      	cmp	r3, #0
 8001658:	d07e      	beq.n	8001758 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800165e:	6878      	ldr	r0, [r7, #4]
 8001660:	4798      	blx	r3
        }
        return;
 8001662:	e079      	b.n	8001758 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800166e:	2b00      	cmp	r3, #0
 8001670:	d01d      	beq.n	80016ae <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800167c:	2b00      	cmp	r3, #0
 800167e:	d10d      	bne.n	800169c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001684:	2b00      	cmp	r3, #0
 8001686:	d031      	beq.n	80016ec <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800168c:	6878      	ldr	r0, [r7, #4]
 800168e:	4798      	blx	r3
 8001690:	e02c      	b.n	80016ec <HAL_DMA_IRQHandler+0x2a0>
 8001692:	bf00      	nop
 8001694:	20000000 	.word	0x20000000
 8001698:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d023      	beq.n	80016ec <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016a8:	6878      	ldr	r0, [r7, #4]
 80016aa:	4798      	blx	r3
 80016ac:	e01e      	b.n	80016ec <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d10f      	bne.n	80016dc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f022 0210 	bic.w	r2, r2, #16
 80016ca:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2201      	movs	r2, #1
 80016d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2200      	movs	r2, #0
 80016d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d003      	beq.n	80016ec <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016e8:	6878      	ldr	r0, [r7, #4]
 80016ea:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d032      	beq.n	800175a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016f8:	f003 0301 	and.w	r3, r3, #1
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d022      	beq.n	8001746 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2205      	movs	r2, #5
 8001704:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f022 0201 	bic.w	r2, r2, #1
 8001716:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	3301      	adds	r3, #1
 800171c:	60bb      	str	r3, [r7, #8]
 800171e:	697a      	ldr	r2, [r7, #20]
 8001720:	429a      	cmp	r2, r3
 8001722:	d307      	bcc.n	8001734 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f003 0301 	and.w	r3, r3, #1
 800172e:	2b00      	cmp	r3, #0
 8001730:	d1f2      	bne.n	8001718 <HAL_DMA_IRQHandler+0x2cc>
 8001732:	e000      	b.n	8001736 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001734:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2201      	movs	r2, #1
 800173a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2200      	movs	r2, #0
 8001742:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800174a:	2b00      	cmp	r3, #0
 800174c:	d005      	beq.n	800175a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001752:	6878      	ldr	r0, [r7, #4]
 8001754:	4798      	blx	r3
 8001756:	e000      	b.n	800175a <HAL_DMA_IRQHandler+0x30e>
        return;
 8001758:	bf00      	nop
    }
  }
}
 800175a:	3718      	adds	r7, #24
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}

08001760 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001760:	b480      	push	{r7}
 8001762:	b085      	sub	sp, #20
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	b2db      	uxtb	r3, r3
 800176e:	3b10      	subs	r3, #16
 8001770:	4a14      	ldr	r2, [pc, #80]	; (80017c4 <DMA_CalcBaseAndBitshift+0x64>)
 8001772:	fba2 2303 	umull	r2, r3, r2, r3
 8001776:	091b      	lsrs	r3, r3, #4
 8001778:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800177a:	4a13      	ldr	r2, [pc, #76]	; (80017c8 <DMA_CalcBaseAndBitshift+0x68>)
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	4413      	add	r3, r2
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	461a      	mov	r2, r3
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	2b03      	cmp	r3, #3
 800178c:	d909      	bls.n	80017a2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001796:	f023 0303 	bic.w	r3, r3, #3
 800179a:	1d1a      	adds	r2, r3, #4
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	659a      	str	r2, [r3, #88]	; 0x58
 80017a0:	e007      	b.n	80017b2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80017aa:	f023 0303 	bic.w	r3, r3, #3
 80017ae:	687a      	ldr	r2, [r7, #4]
 80017b0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3714      	adds	r7, #20
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop
 80017c4:	aaaaaaab 	.word	0xaaaaaaab
 80017c8:	0800b368 	.word	0x0800b368

080017cc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b085      	sub	sp, #20
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017d4:	2300      	movs	r3, #0
 80017d6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017dc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	699b      	ldr	r3, [r3, #24]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d11f      	bne.n	8001826 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80017e6:	68bb      	ldr	r3, [r7, #8]
 80017e8:	2b03      	cmp	r3, #3
 80017ea:	d856      	bhi.n	800189a <DMA_CheckFifoParam+0xce>
 80017ec:	a201      	add	r2, pc, #4	; (adr r2, 80017f4 <DMA_CheckFifoParam+0x28>)
 80017ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017f2:	bf00      	nop
 80017f4:	08001805 	.word	0x08001805
 80017f8:	08001817 	.word	0x08001817
 80017fc:	08001805 	.word	0x08001805
 8001800:	0800189b 	.word	0x0800189b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001808:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800180c:	2b00      	cmp	r3, #0
 800180e:	d046      	beq.n	800189e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001810:	2301      	movs	r3, #1
 8001812:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001814:	e043      	b.n	800189e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800181a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800181e:	d140      	bne.n	80018a2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001820:	2301      	movs	r3, #1
 8001822:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001824:	e03d      	b.n	80018a2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	699b      	ldr	r3, [r3, #24]
 800182a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800182e:	d121      	bne.n	8001874 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	2b03      	cmp	r3, #3
 8001834:	d837      	bhi.n	80018a6 <DMA_CheckFifoParam+0xda>
 8001836:	a201      	add	r2, pc, #4	; (adr r2, 800183c <DMA_CheckFifoParam+0x70>)
 8001838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800183c:	0800184d 	.word	0x0800184d
 8001840:	08001853 	.word	0x08001853
 8001844:	0800184d 	.word	0x0800184d
 8001848:	08001865 	.word	0x08001865
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800184c:	2301      	movs	r3, #1
 800184e:	73fb      	strb	r3, [r7, #15]
      break;
 8001850:	e030      	b.n	80018b4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001856:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800185a:	2b00      	cmp	r3, #0
 800185c:	d025      	beq.n	80018aa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001862:	e022      	b.n	80018aa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001868:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800186c:	d11f      	bne.n	80018ae <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001872:	e01c      	b.n	80018ae <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	2b02      	cmp	r3, #2
 8001878:	d903      	bls.n	8001882 <DMA_CheckFifoParam+0xb6>
 800187a:	68bb      	ldr	r3, [r7, #8]
 800187c:	2b03      	cmp	r3, #3
 800187e:	d003      	beq.n	8001888 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001880:	e018      	b.n	80018b4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	73fb      	strb	r3, [r7, #15]
      break;
 8001886:	e015      	b.n	80018b4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800188c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001890:	2b00      	cmp	r3, #0
 8001892:	d00e      	beq.n	80018b2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001894:	2301      	movs	r3, #1
 8001896:	73fb      	strb	r3, [r7, #15]
      break;
 8001898:	e00b      	b.n	80018b2 <DMA_CheckFifoParam+0xe6>
      break;
 800189a:	bf00      	nop
 800189c:	e00a      	b.n	80018b4 <DMA_CheckFifoParam+0xe8>
      break;
 800189e:	bf00      	nop
 80018a0:	e008      	b.n	80018b4 <DMA_CheckFifoParam+0xe8>
      break;
 80018a2:	bf00      	nop
 80018a4:	e006      	b.n	80018b4 <DMA_CheckFifoParam+0xe8>
      break;
 80018a6:	bf00      	nop
 80018a8:	e004      	b.n	80018b4 <DMA_CheckFifoParam+0xe8>
      break;
 80018aa:	bf00      	nop
 80018ac:	e002      	b.n	80018b4 <DMA_CheckFifoParam+0xe8>
      break;   
 80018ae:	bf00      	nop
 80018b0:	e000      	b.n	80018b4 <DMA_CheckFifoParam+0xe8>
      break;
 80018b2:	bf00      	nop
    }
  } 
  
  return status; 
 80018b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3714      	adds	r7, #20
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr
 80018c2:	bf00      	nop

080018c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b089      	sub	sp, #36	; 0x24
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
 80018cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80018ce:	2300      	movs	r3, #0
 80018d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80018d2:	2300      	movs	r3, #0
 80018d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80018d6:	2300      	movs	r3, #0
 80018d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018da:	2300      	movs	r3, #0
 80018dc:	61fb      	str	r3, [r7, #28]
 80018de:	e177      	b.n	8001bd0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80018e0:	2201      	movs	r2, #1
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	fa02 f303 	lsl.w	r3, r2, r3
 80018e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	697a      	ldr	r2, [r7, #20]
 80018f0:	4013      	ands	r3, r2
 80018f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018f4:	693a      	ldr	r2, [r7, #16]
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	429a      	cmp	r2, r3
 80018fa:	f040 8166 	bne.w	8001bca <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	f003 0303 	and.w	r3, r3, #3
 8001906:	2b01      	cmp	r3, #1
 8001908:	d005      	beq.n	8001916 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001912:	2b02      	cmp	r3, #2
 8001914:	d130      	bne.n	8001978 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800191c:	69fb      	ldr	r3, [r7, #28]
 800191e:	005b      	lsls	r3, r3, #1
 8001920:	2203      	movs	r2, #3
 8001922:	fa02 f303 	lsl.w	r3, r2, r3
 8001926:	43db      	mvns	r3, r3
 8001928:	69ba      	ldr	r2, [r7, #24]
 800192a:	4013      	ands	r3, r2
 800192c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	68da      	ldr	r2, [r3, #12]
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	005b      	lsls	r3, r3, #1
 8001936:	fa02 f303 	lsl.w	r3, r2, r3
 800193a:	69ba      	ldr	r2, [r7, #24]
 800193c:	4313      	orrs	r3, r2
 800193e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	69ba      	ldr	r2, [r7, #24]
 8001944:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800194c:	2201      	movs	r2, #1
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	fa02 f303 	lsl.w	r3, r2, r3
 8001954:	43db      	mvns	r3, r3
 8001956:	69ba      	ldr	r2, [r7, #24]
 8001958:	4013      	ands	r3, r2
 800195a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	091b      	lsrs	r3, r3, #4
 8001962:	f003 0201 	and.w	r2, r3, #1
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	fa02 f303 	lsl.w	r3, r2, r3
 800196c:	69ba      	ldr	r2, [r7, #24]
 800196e:	4313      	orrs	r3, r2
 8001970:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	69ba      	ldr	r2, [r7, #24]
 8001976:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f003 0303 	and.w	r3, r3, #3
 8001980:	2b03      	cmp	r3, #3
 8001982:	d017      	beq.n	80019b4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	005b      	lsls	r3, r3, #1
 800198e:	2203      	movs	r2, #3
 8001990:	fa02 f303 	lsl.w	r3, r2, r3
 8001994:	43db      	mvns	r3, r3
 8001996:	69ba      	ldr	r2, [r7, #24]
 8001998:	4013      	ands	r3, r2
 800199a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	689a      	ldr	r2, [r3, #8]
 80019a0:	69fb      	ldr	r3, [r7, #28]
 80019a2:	005b      	lsls	r3, r3, #1
 80019a4:	fa02 f303 	lsl.w	r3, r2, r3
 80019a8:	69ba      	ldr	r2, [r7, #24]
 80019aa:	4313      	orrs	r3, r2
 80019ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	69ba      	ldr	r2, [r7, #24]
 80019b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f003 0303 	and.w	r3, r3, #3
 80019bc:	2b02      	cmp	r3, #2
 80019be:	d123      	bne.n	8001a08 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80019c0:	69fb      	ldr	r3, [r7, #28]
 80019c2:	08da      	lsrs	r2, r3, #3
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	3208      	adds	r2, #8
 80019c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	f003 0307 	and.w	r3, r3, #7
 80019d4:	009b      	lsls	r3, r3, #2
 80019d6:	220f      	movs	r2, #15
 80019d8:	fa02 f303 	lsl.w	r3, r2, r3
 80019dc:	43db      	mvns	r3, r3
 80019de:	69ba      	ldr	r2, [r7, #24]
 80019e0:	4013      	ands	r3, r2
 80019e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	691a      	ldr	r2, [r3, #16]
 80019e8:	69fb      	ldr	r3, [r7, #28]
 80019ea:	f003 0307 	and.w	r3, r3, #7
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	fa02 f303 	lsl.w	r3, r2, r3
 80019f4:	69ba      	ldr	r2, [r7, #24]
 80019f6:	4313      	orrs	r3, r2
 80019f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	08da      	lsrs	r2, r3, #3
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	3208      	adds	r2, #8
 8001a02:	69b9      	ldr	r1, [r7, #24]
 8001a04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	005b      	lsls	r3, r3, #1
 8001a12:	2203      	movs	r2, #3
 8001a14:	fa02 f303 	lsl.w	r3, r2, r3
 8001a18:	43db      	mvns	r3, r3
 8001a1a:	69ba      	ldr	r2, [r7, #24]
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	f003 0203 	and.w	r2, r3, #3
 8001a28:	69fb      	ldr	r3, [r7, #28]
 8001a2a:	005b      	lsls	r3, r3, #1
 8001a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a30:	69ba      	ldr	r2, [r7, #24]
 8001a32:	4313      	orrs	r3, r2
 8001a34:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	69ba      	ldr	r2, [r7, #24]
 8001a3a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	f000 80c0 	beq.w	8001bca <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	60fb      	str	r3, [r7, #12]
 8001a4e:	4b66      	ldr	r3, [pc, #408]	; (8001be8 <HAL_GPIO_Init+0x324>)
 8001a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a52:	4a65      	ldr	r2, [pc, #404]	; (8001be8 <HAL_GPIO_Init+0x324>)
 8001a54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a58:	6453      	str	r3, [r2, #68]	; 0x44
 8001a5a:	4b63      	ldr	r3, [pc, #396]	; (8001be8 <HAL_GPIO_Init+0x324>)
 8001a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a62:	60fb      	str	r3, [r7, #12]
 8001a64:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a66:	4a61      	ldr	r2, [pc, #388]	; (8001bec <HAL_GPIO_Init+0x328>)
 8001a68:	69fb      	ldr	r3, [r7, #28]
 8001a6a:	089b      	lsrs	r3, r3, #2
 8001a6c:	3302      	adds	r3, #2
 8001a6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a72:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a74:	69fb      	ldr	r3, [r7, #28]
 8001a76:	f003 0303 	and.w	r3, r3, #3
 8001a7a:	009b      	lsls	r3, r3, #2
 8001a7c:	220f      	movs	r2, #15
 8001a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a82:	43db      	mvns	r3, r3
 8001a84:	69ba      	ldr	r2, [r7, #24]
 8001a86:	4013      	ands	r3, r2
 8001a88:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	4a58      	ldr	r2, [pc, #352]	; (8001bf0 <HAL_GPIO_Init+0x32c>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d037      	beq.n	8001b02 <HAL_GPIO_Init+0x23e>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	4a57      	ldr	r2, [pc, #348]	; (8001bf4 <HAL_GPIO_Init+0x330>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d031      	beq.n	8001afe <HAL_GPIO_Init+0x23a>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	4a56      	ldr	r2, [pc, #344]	; (8001bf8 <HAL_GPIO_Init+0x334>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d02b      	beq.n	8001afa <HAL_GPIO_Init+0x236>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	4a55      	ldr	r2, [pc, #340]	; (8001bfc <HAL_GPIO_Init+0x338>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d025      	beq.n	8001af6 <HAL_GPIO_Init+0x232>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	4a54      	ldr	r2, [pc, #336]	; (8001c00 <HAL_GPIO_Init+0x33c>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d01f      	beq.n	8001af2 <HAL_GPIO_Init+0x22e>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	4a53      	ldr	r2, [pc, #332]	; (8001c04 <HAL_GPIO_Init+0x340>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d019      	beq.n	8001aee <HAL_GPIO_Init+0x22a>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	4a52      	ldr	r2, [pc, #328]	; (8001c08 <HAL_GPIO_Init+0x344>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d013      	beq.n	8001aea <HAL_GPIO_Init+0x226>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	4a51      	ldr	r2, [pc, #324]	; (8001c0c <HAL_GPIO_Init+0x348>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d00d      	beq.n	8001ae6 <HAL_GPIO_Init+0x222>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	4a50      	ldr	r2, [pc, #320]	; (8001c10 <HAL_GPIO_Init+0x34c>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d007      	beq.n	8001ae2 <HAL_GPIO_Init+0x21e>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	4a4f      	ldr	r2, [pc, #316]	; (8001c14 <HAL_GPIO_Init+0x350>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d101      	bne.n	8001ade <HAL_GPIO_Init+0x21a>
 8001ada:	2309      	movs	r3, #9
 8001adc:	e012      	b.n	8001b04 <HAL_GPIO_Init+0x240>
 8001ade:	230a      	movs	r3, #10
 8001ae0:	e010      	b.n	8001b04 <HAL_GPIO_Init+0x240>
 8001ae2:	2308      	movs	r3, #8
 8001ae4:	e00e      	b.n	8001b04 <HAL_GPIO_Init+0x240>
 8001ae6:	2307      	movs	r3, #7
 8001ae8:	e00c      	b.n	8001b04 <HAL_GPIO_Init+0x240>
 8001aea:	2306      	movs	r3, #6
 8001aec:	e00a      	b.n	8001b04 <HAL_GPIO_Init+0x240>
 8001aee:	2305      	movs	r3, #5
 8001af0:	e008      	b.n	8001b04 <HAL_GPIO_Init+0x240>
 8001af2:	2304      	movs	r3, #4
 8001af4:	e006      	b.n	8001b04 <HAL_GPIO_Init+0x240>
 8001af6:	2303      	movs	r3, #3
 8001af8:	e004      	b.n	8001b04 <HAL_GPIO_Init+0x240>
 8001afa:	2302      	movs	r3, #2
 8001afc:	e002      	b.n	8001b04 <HAL_GPIO_Init+0x240>
 8001afe:	2301      	movs	r3, #1
 8001b00:	e000      	b.n	8001b04 <HAL_GPIO_Init+0x240>
 8001b02:	2300      	movs	r3, #0
 8001b04:	69fa      	ldr	r2, [r7, #28]
 8001b06:	f002 0203 	and.w	r2, r2, #3
 8001b0a:	0092      	lsls	r2, r2, #2
 8001b0c:	4093      	lsls	r3, r2
 8001b0e:	69ba      	ldr	r2, [r7, #24]
 8001b10:	4313      	orrs	r3, r2
 8001b12:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b14:	4935      	ldr	r1, [pc, #212]	; (8001bec <HAL_GPIO_Init+0x328>)
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	089b      	lsrs	r3, r3, #2
 8001b1a:	3302      	adds	r3, #2
 8001b1c:	69ba      	ldr	r2, [r7, #24]
 8001b1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b22:	4b3d      	ldr	r3, [pc, #244]	; (8001c18 <HAL_GPIO_Init+0x354>)
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	43db      	mvns	r3, r3
 8001b2c:	69ba      	ldr	r2, [r7, #24]
 8001b2e:	4013      	ands	r3, r2
 8001b30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d003      	beq.n	8001b46 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001b3e:	69ba      	ldr	r2, [r7, #24]
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	4313      	orrs	r3, r2
 8001b44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b46:	4a34      	ldr	r2, [pc, #208]	; (8001c18 <HAL_GPIO_Init+0x354>)
 8001b48:	69bb      	ldr	r3, [r7, #24]
 8001b4a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b4c:	4b32      	ldr	r3, [pc, #200]	; (8001c18 <HAL_GPIO_Init+0x354>)
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	43db      	mvns	r3, r3
 8001b56:	69ba      	ldr	r2, [r7, #24]
 8001b58:	4013      	ands	r3, r2
 8001b5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d003      	beq.n	8001b70 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001b68:	69ba      	ldr	r2, [r7, #24]
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b70:	4a29      	ldr	r2, [pc, #164]	; (8001c18 <HAL_GPIO_Init+0x354>)
 8001b72:	69bb      	ldr	r3, [r7, #24]
 8001b74:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b76:	4b28      	ldr	r3, [pc, #160]	; (8001c18 <HAL_GPIO_Init+0x354>)
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b7c:	693b      	ldr	r3, [r7, #16]
 8001b7e:	43db      	mvns	r3, r3
 8001b80:	69ba      	ldr	r2, [r7, #24]
 8001b82:	4013      	ands	r3, r2
 8001b84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d003      	beq.n	8001b9a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001b92:	69ba      	ldr	r2, [r7, #24]
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	4313      	orrs	r3, r2
 8001b98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b9a:	4a1f      	ldr	r2, [pc, #124]	; (8001c18 <HAL_GPIO_Init+0x354>)
 8001b9c:	69bb      	ldr	r3, [r7, #24]
 8001b9e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ba0:	4b1d      	ldr	r3, [pc, #116]	; (8001c18 <HAL_GPIO_Init+0x354>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	43db      	mvns	r3, r3
 8001baa:	69ba      	ldr	r2, [r7, #24]
 8001bac:	4013      	ands	r3, r2
 8001bae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d003      	beq.n	8001bc4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001bbc:	69ba      	ldr	r2, [r7, #24]
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001bc4:	4a14      	ldr	r2, [pc, #80]	; (8001c18 <HAL_GPIO_Init+0x354>)
 8001bc6:	69bb      	ldr	r3, [r7, #24]
 8001bc8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	3301      	adds	r3, #1
 8001bce:	61fb      	str	r3, [r7, #28]
 8001bd0:	69fb      	ldr	r3, [r7, #28]
 8001bd2:	2b0f      	cmp	r3, #15
 8001bd4:	f67f ae84 	bls.w	80018e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001bd8:	bf00      	nop
 8001bda:	bf00      	nop
 8001bdc:	3724      	adds	r7, #36	; 0x24
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr
 8001be6:	bf00      	nop
 8001be8:	40023800 	.word	0x40023800
 8001bec:	40013800 	.word	0x40013800
 8001bf0:	40020000 	.word	0x40020000
 8001bf4:	40020400 	.word	0x40020400
 8001bf8:	40020800 	.word	0x40020800
 8001bfc:	40020c00 	.word	0x40020c00
 8001c00:	40021000 	.word	0x40021000
 8001c04:	40021400 	.word	0x40021400
 8001c08:	40021800 	.word	0x40021800
 8001c0c:	40021c00 	.word	0x40021c00
 8001c10:	40022000 	.word	0x40022000
 8001c14:	40022400 	.word	0x40022400
 8001c18:	40013c00 	.word	0x40013c00

08001c1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
 8001c24:	460b      	mov	r3, r1
 8001c26:	807b      	strh	r3, [r7, #2]
 8001c28:	4613      	mov	r3, r2
 8001c2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c2c:	787b      	ldrb	r3, [r7, #1]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d003      	beq.n	8001c3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c32:	887a      	ldrh	r2, [r7, #2]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c38:	e003      	b.n	8001c42 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c3a:	887b      	ldrh	r3, [r7, #2]
 8001c3c:	041a      	lsls	r2, r3, #16
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	619a      	str	r2, [r3, #24]
}
 8001c42:	bf00      	nop
 8001c44:	370c      	adds	r7, #12
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr

08001c4e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001c4e:	b580      	push	{r7, lr}
 8001c50:	b086      	sub	sp, #24
 8001c52:	af02      	add	r7, sp, #8
 8001c54:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d101      	bne.n	8001c60 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	e101      	b.n	8001e64 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d106      	bne.n	8001c80 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2200      	movs	r2, #0
 8001c76:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f008 ff16 	bl	800aaac <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2203      	movs	r2, #3
 8001c84:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001c88:	68bb      	ldr	r3, [r7, #8]
 8001c8a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c8e:	d102      	bne.n	8001c96 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2200      	movs	r2, #0
 8001c94:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f002 fdb7 	bl	800480e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6818      	ldr	r0, [r3, #0]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	7c1a      	ldrb	r2, [r3, #16]
 8001ca8:	f88d 2000 	strb.w	r2, [sp]
 8001cac:	3304      	adds	r3, #4
 8001cae:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001cb0:	f002 fc96 	bl	80045e0 <USB_CoreInit>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d005      	beq.n	8001cc6 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2202      	movs	r2, #2
 8001cbe:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e0ce      	b.n	8001e64 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	2100      	movs	r1, #0
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f002 fdaf 	bl	8004830 <USB_SetCurrentMode>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d005      	beq.n	8001ce4 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2202      	movs	r2, #2
 8001cdc:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	e0bf      	b.n	8001e64 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	73fb      	strb	r3, [r7, #15]
 8001ce8:	e04a      	b.n	8001d80 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001cea:	7bfa      	ldrb	r2, [r7, #15]
 8001cec:	6879      	ldr	r1, [r7, #4]
 8001cee:	4613      	mov	r3, r2
 8001cf0:	00db      	lsls	r3, r3, #3
 8001cf2:	4413      	add	r3, r2
 8001cf4:	009b      	lsls	r3, r3, #2
 8001cf6:	440b      	add	r3, r1
 8001cf8:	3315      	adds	r3, #21
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001cfe:	7bfa      	ldrb	r2, [r7, #15]
 8001d00:	6879      	ldr	r1, [r7, #4]
 8001d02:	4613      	mov	r3, r2
 8001d04:	00db      	lsls	r3, r3, #3
 8001d06:	4413      	add	r3, r2
 8001d08:	009b      	lsls	r3, r3, #2
 8001d0a:	440b      	add	r3, r1
 8001d0c:	3314      	adds	r3, #20
 8001d0e:	7bfa      	ldrb	r2, [r7, #15]
 8001d10:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001d12:	7bfa      	ldrb	r2, [r7, #15]
 8001d14:	7bfb      	ldrb	r3, [r7, #15]
 8001d16:	b298      	uxth	r0, r3
 8001d18:	6879      	ldr	r1, [r7, #4]
 8001d1a:	4613      	mov	r3, r2
 8001d1c:	00db      	lsls	r3, r3, #3
 8001d1e:	4413      	add	r3, r2
 8001d20:	009b      	lsls	r3, r3, #2
 8001d22:	440b      	add	r3, r1
 8001d24:	332e      	adds	r3, #46	; 0x2e
 8001d26:	4602      	mov	r2, r0
 8001d28:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001d2a:	7bfa      	ldrb	r2, [r7, #15]
 8001d2c:	6879      	ldr	r1, [r7, #4]
 8001d2e:	4613      	mov	r3, r2
 8001d30:	00db      	lsls	r3, r3, #3
 8001d32:	4413      	add	r3, r2
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	440b      	add	r3, r1
 8001d38:	3318      	adds	r3, #24
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001d3e:	7bfa      	ldrb	r2, [r7, #15]
 8001d40:	6879      	ldr	r1, [r7, #4]
 8001d42:	4613      	mov	r3, r2
 8001d44:	00db      	lsls	r3, r3, #3
 8001d46:	4413      	add	r3, r2
 8001d48:	009b      	lsls	r3, r3, #2
 8001d4a:	440b      	add	r3, r1
 8001d4c:	331c      	adds	r3, #28
 8001d4e:	2200      	movs	r2, #0
 8001d50:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001d52:	7bfa      	ldrb	r2, [r7, #15]
 8001d54:	6879      	ldr	r1, [r7, #4]
 8001d56:	4613      	mov	r3, r2
 8001d58:	00db      	lsls	r3, r3, #3
 8001d5a:	4413      	add	r3, r2
 8001d5c:	009b      	lsls	r3, r3, #2
 8001d5e:	440b      	add	r3, r1
 8001d60:	3320      	adds	r3, #32
 8001d62:	2200      	movs	r2, #0
 8001d64:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001d66:	7bfa      	ldrb	r2, [r7, #15]
 8001d68:	6879      	ldr	r1, [r7, #4]
 8001d6a:	4613      	mov	r3, r2
 8001d6c:	00db      	lsls	r3, r3, #3
 8001d6e:	4413      	add	r3, r2
 8001d70:	009b      	lsls	r3, r3, #2
 8001d72:	440b      	add	r3, r1
 8001d74:	3324      	adds	r3, #36	; 0x24
 8001d76:	2200      	movs	r2, #0
 8001d78:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d7a:	7bfb      	ldrb	r3, [r7, #15]
 8001d7c:	3301      	adds	r3, #1
 8001d7e:	73fb      	strb	r3, [r7, #15]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	791b      	ldrb	r3, [r3, #4]
 8001d84:	7bfa      	ldrb	r2, [r7, #15]
 8001d86:	429a      	cmp	r2, r3
 8001d88:	d3af      	bcc.n	8001cea <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	73fb      	strb	r3, [r7, #15]
 8001d8e:	e044      	b.n	8001e1a <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001d90:	7bfa      	ldrb	r2, [r7, #15]
 8001d92:	6879      	ldr	r1, [r7, #4]
 8001d94:	4613      	mov	r3, r2
 8001d96:	00db      	lsls	r3, r3, #3
 8001d98:	4413      	add	r3, r2
 8001d9a:	009b      	lsls	r3, r3, #2
 8001d9c:	440b      	add	r3, r1
 8001d9e:	f203 2355 	addw	r3, r3, #597	; 0x255
 8001da2:	2200      	movs	r2, #0
 8001da4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001da6:	7bfa      	ldrb	r2, [r7, #15]
 8001da8:	6879      	ldr	r1, [r7, #4]
 8001daa:	4613      	mov	r3, r2
 8001dac:	00db      	lsls	r3, r3, #3
 8001dae:	4413      	add	r3, r2
 8001db0:	009b      	lsls	r3, r3, #2
 8001db2:	440b      	add	r3, r1
 8001db4:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8001db8:	7bfa      	ldrb	r2, [r7, #15]
 8001dba:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001dbc:	7bfa      	ldrb	r2, [r7, #15]
 8001dbe:	6879      	ldr	r1, [r7, #4]
 8001dc0:	4613      	mov	r3, r2
 8001dc2:	00db      	lsls	r3, r3, #3
 8001dc4:	4413      	add	r3, r2
 8001dc6:	009b      	lsls	r3, r3, #2
 8001dc8:	440b      	add	r3, r1
 8001dca:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8001dce:	2200      	movs	r2, #0
 8001dd0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001dd2:	7bfa      	ldrb	r2, [r7, #15]
 8001dd4:	6879      	ldr	r1, [r7, #4]
 8001dd6:	4613      	mov	r3, r2
 8001dd8:	00db      	lsls	r3, r3, #3
 8001dda:	4413      	add	r3, r2
 8001ddc:	009b      	lsls	r3, r3, #2
 8001dde:	440b      	add	r3, r1
 8001de0:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8001de4:	2200      	movs	r2, #0
 8001de6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001de8:	7bfa      	ldrb	r2, [r7, #15]
 8001dea:	6879      	ldr	r1, [r7, #4]
 8001dec:	4613      	mov	r3, r2
 8001dee:	00db      	lsls	r3, r3, #3
 8001df0:	4413      	add	r3, r2
 8001df2:	009b      	lsls	r3, r3, #2
 8001df4:	440b      	add	r3, r1
 8001df6:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001dfe:	7bfa      	ldrb	r2, [r7, #15]
 8001e00:	6879      	ldr	r1, [r7, #4]
 8001e02:	4613      	mov	r3, r2
 8001e04:	00db      	lsls	r3, r3, #3
 8001e06:	4413      	add	r3, r2
 8001e08:	009b      	lsls	r3, r3, #2
 8001e0a:	440b      	add	r3, r1
 8001e0c:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8001e10:	2200      	movs	r2, #0
 8001e12:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e14:	7bfb      	ldrb	r3, [r7, #15]
 8001e16:	3301      	adds	r3, #1
 8001e18:	73fb      	strb	r3, [r7, #15]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	791b      	ldrb	r3, [r3, #4]
 8001e1e:	7bfa      	ldrb	r2, [r7, #15]
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d3b5      	bcc.n	8001d90 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6818      	ldr	r0, [r3, #0]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	7c1a      	ldrb	r2, [r3, #16]
 8001e2c:	f88d 2000 	strb.w	r2, [sp]
 8001e30:	3304      	adds	r3, #4
 8001e32:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e34:	f002 fd48 	bl	80048c8 <USB_DevInit>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d005      	beq.n	8001e4a <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2202      	movs	r2, #2
 8001e42:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e00c      	b.n	8001e64 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2201      	movs	r2, #1
 8001e54:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f003 fd8c 	bl	800597a <USB_DevDisconnect>

  return HAL_OK;
 8001e62:	2300      	movs	r3, #0
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	3710      	adds	r7, #16
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}

08001e6c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b084      	sub	sp, #16
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d101      	bne.n	8001e88 <HAL_PCD_Start+0x1c>
 8001e84:	2302      	movs	r3, #2
 8001e86:	e022      	b.n	8001ece <HAL_PCD_Start+0x62>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d009      	beq.n	8001eb0 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d105      	bne.n	8001eb0 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ea8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f002 fc99 	bl	80047ec <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f003 fd3a 	bl	8005938 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8001ecc:	2300      	movs	r3, #0
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	3710      	adds	r7, #16
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}

08001ed6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001ed6:	b590      	push	{r4, r7, lr}
 8001ed8:	b08d      	sub	sp, #52	; 0x34
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ee4:	6a3b      	ldr	r3, [r7, #32]
 8001ee6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4618      	mov	r0, r3
 8001eee:	f003 fdf8 	bl	8005ae2 <USB_GetMode>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	f040 848c 	bne.w	8002812 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4618      	mov	r0, r3
 8001f00:	f003 fd5c 	bl	80059bc <USB_ReadInterrupts>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	f000 8482 	beq.w	8002810 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001f0c:	69fb      	ldr	r3, [r7, #28]
 8001f0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	0a1b      	lsrs	r3, r3, #8
 8001f16:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4618      	mov	r0, r3
 8001f26:	f003 fd49 	bl	80059bc <USB_ReadInterrupts>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	f003 0302 	and.w	r3, r3, #2
 8001f30:	2b02      	cmp	r3, #2
 8001f32:	d107      	bne.n	8001f44 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	695a      	ldr	r2, [r3, #20]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f002 0202 	and.w	r2, r2, #2
 8001f42:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f003 fd37 	bl	80059bc <USB_ReadInterrupts>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	f003 0310 	and.w	r3, r3, #16
 8001f54:	2b10      	cmp	r3, #16
 8001f56:	d161      	bne.n	800201c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	699a      	ldr	r2, [r3, #24]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f022 0210 	bic.w	r2, r2, #16
 8001f66:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001f68:	6a3b      	ldr	r3, [r7, #32]
 8001f6a:	6a1b      	ldr	r3, [r3, #32]
 8001f6c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001f6e:	69bb      	ldr	r3, [r7, #24]
 8001f70:	f003 020f 	and.w	r2, r3, #15
 8001f74:	4613      	mov	r3, r2
 8001f76:	00db      	lsls	r3, r3, #3
 8001f78:	4413      	add	r3, r2
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8001f80:	687a      	ldr	r2, [r7, #4]
 8001f82:	4413      	add	r3, r2
 8001f84:	3304      	adds	r3, #4
 8001f86:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001f88:	69bb      	ldr	r3, [r7, #24]
 8001f8a:	0c5b      	lsrs	r3, r3, #17
 8001f8c:	f003 030f 	and.w	r3, r3, #15
 8001f90:	2b02      	cmp	r3, #2
 8001f92:	d124      	bne.n	8001fde <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001f94:	69ba      	ldr	r2, [r7, #24]
 8001f96:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d035      	beq.n	800200c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001fa4:	69bb      	ldr	r3, [r7, #24]
 8001fa6:	091b      	lsrs	r3, r3, #4
 8001fa8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001faa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001fae:	b29b      	uxth	r3, r3
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	6a38      	ldr	r0, [r7, #32]
 8001fb4:	f003 fb6e 	bl	8005694 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	68da      	ldr	r2, [r3, #12]
 8001fbc:	69bb      	ldr	r3, [r7, #24]
 8001fbe:	091b      	lsrs	r3, r3, #4
 8001fc0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001fc4:	441a      	add	r2, r3
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	695a      	ldr	r2, [r3, #20]
 8001fce:	69bb      	ldr	r3, [r7, #24]
 8001fd0:	091b      	lsrs	r3, r3, #4
 8001fd2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001fd6:	441a      	add	r2, r3
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	615a      	str	r2, [r3, #20]
 8001fdc:	e016      	b.n	800200c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001fde:	69bb      	ldr	r3, [r7, #24]
 8001fe0:	0c5b      	lsrs	r3, r3, #17
 8001fe2:	f003 030f 	and.w	r3, r3, #15
 8001fe6:	2b06      	cmp	r3, #6
 8001fe8:	d110      	bne.n	800200c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8001ff0:	2208      	movs	r2, #8
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	6a38      	ldr	r0, [r7, #32]
 8001ff6:	f003 fb4d 	bl	8005694 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	695a      	ldr	r2, [r3, #20]
 8001ffe:	69bb      	ldr	r3, [r7, #24]
 8002000:	091b      	lsrs	r3, r3, #4
 8002002:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002006:	441a      	add	r2, r3
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	699a      	ldr	r2, [r3, #24]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f042 0210 	orr.w	r2, r2, #16
 800201a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4618      	mov	r0, r3
 8002022:	f003 fccb 	bl	80059bc <USB_ReadInterrupts>
 8002026:	4603      	mov	r3, r0
 8002028:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800202c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002030:	f040 80a7 	bne.w	8002182 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002034:	2300      	movs	r3, #0
 8002036:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4618      	mov	r0, r3
 800203e:	f003 fcd0 	bl	80059e2 <USB_ReadDevAllOutEpInterrupt>
 8002042:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002044:	e099      	b.n	800217a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002048:	f003 0301 	and.w	r3, r3, #1
 800204c:	2b00      	cmp	r3, #0
 800204e:	f000 808e 	beq.w	800216e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002058:	b2d2      	uxtb	r2, r2
 800205a:	4611      	mov	r1, r2
 800205c:	4618      	mov	r0, r3
 800205e:	f003 fcf4 	bl	8005a4a <USB_ReadDevOutEPInterrupt>
 8002062:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	f003 0301 	and.w	r3, r3, #1
 800206a:	2b00      	cmp	r3, #0
 800206c:	d00c      	beq.n	8002088 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800206e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002070:	015a      	lsls	r2, r3, #5
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	4413      	add	r3, r2
 8002076:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800207a:	461a      	mov	r2, r3
 800207c:	2301      	movs	r3, #1
 800207e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002080:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	f000 fea2 	bl	8002dcc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	f003 0308 	and.w	r3, r3, #8
 800208e:	2b00      	cmp	r3, #0
 8002090:	d00c      	beq.n	80020ac <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002094:	015a      	lsls	r2, r3, #5
 8002096:	69fb      	ldr	r3, [r7, #28]
 8002098:	4413      	add	r3, r2
 800209a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800209e:	461a      	mov	r2, r3
 80020a0:	2308      	movs	r3, #8
 80020a2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80020a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f000 ff78 	bl	8002f9c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	f003 0310 	and.w	r3, r3, #16
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d008      	beq.n	80020c8 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80020b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b8:	015a      	lsls	r2, r3, #5
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	4413      	add	r3, r2
 80020be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020c2:	461a      	mov	r2, r3
 80020c4:	2310      	movs	r3, #16
 80020c6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	f003 0302 	and.w	r3, r3, #2
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d030      	beq.n	8002134 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80020d2:	6a3b      	ldr	r3, [r7, #32]
 80020d4:	695b      	ldr	r3, [r3, #20]
 80020d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020da:	2b80      	cmp	r3, #128	; 0x80
 80020dc:	d109      	bne.n	80020f2 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80020de:	69fb      	ldr	r3, [r7, #28]
 80020e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	69fa      	ldr	r2, [r7, #28]
 80020e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80020ec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80020f0:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80020f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020f4:	4613      	mov	r3, r2
 80020f6:	00db      	lsls	r3, r3, #3
 80020f8:	4413      	add	r3, r2
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002100:	687a      	ldr	r2, [r7, #4]
 8002102:	4413      	add	r3, r2
 8002104:	3304      	adds	r3, #4
 8002106:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	78db      	ldrb	r3, [r3, #3]
 800210c:	2b01      	cmp	r3, #1
 800210e:	d108      	bne.n	8002122 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	2200      	movs	r2, #0
 8002114:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002118:	b2db      	uxtb	r3, r3
 800211a:	4619      	mov	r1, r3
 800211c:	6878      	ldr	r0, [r7, #4]
 800211e:	f008 fdcb 	bl	800acb8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002124:	015a      	lsls	r2, r3, #5
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	4413      	add	r3, r2
 800212a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800212e:	461a      	mov	r2, r3
 8002130:	2302      	movs	r3, #2
 8002132:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	f003 0320 	and.w	r3, r3, #32
 800213a:	2b00      	cmp	r3, #0
 800213c:	d008      	beq.n	8002150 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800213e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002140:	015a      	lsls	r2, r3, #5
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	4413      	add	r3, r2
 8002146:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800214a:	461a      	mov	r2, r3
 800214c:	2320      	movs	r3, #32
 800214e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002156:	2b00      	cmp	r3, #0
 8002158:	d009      	beq.n	800216e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800215a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800215c:	015a      	lsls	r2, r3, #5
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	4413      	add	r3, r2
 8002162:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002166:	461a      	mov	r2, r3
 8002168:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800216c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800216e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002170:	3301      	adds	r3, #1
 8002172:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002176:	085b      	lsrs	r3, r3, #1
 8002178:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800217a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800217c:	2b00      	cmp	r3, #0
 800217e:	f47f af62 	bne.w	8002046 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4618      	mov	r0, r3
 8002188:	f003 fc18 	bl	80059bc <USB_ReadInterrupts>
 800218c:	4603      	mov	r3, r0
 800218e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002192:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002196:	f040 80db 	bne.w	8002350 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4618      	mov	r0, r3
 80021a0:	f003 fc39 	bl	8005a16 <USB_ReadDevAllInEpInterrupt>
 80021a4:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80021a6:	2300      	movs	r3, #0
 80021a8:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80021aa:	e0cd      	b.n	8002348 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80021ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021ae:	f003 0301 	and.w	r3, r3, #1
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	f000 80c2 	beq.w	800233c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021be:	b2d2      	uxtb	r2, r2
 80021c0:	4611      	mov	r1, r2
 80021c2:	4618      	mov	r0, r3
 80021c4:	f003 fc5f 	bl	8005a86 <USB_ReadDevInEPInterrupt>
 80021c8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	f003 0301 	and.w	r3, r3, #1
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d057      	beq.n	8002284 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80021d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d6:	f003 030f 	and.w	r3, r3, #15
 80021da:	2201      	movs	r2, #1
 80021dc:	fa02 f303 	lsl.w	r3, r2, r3
 80021e0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80021e2:	69fb      	ldr	r3, [r7, #28]
 80021e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	43db      	mvns	r3, r3
 80021ee:	69f9      	ldr	r1, [r7, #28]
 80021f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80021f4:	4013      	ands	r3, r2
 80021f6:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80021f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021fa:	015a      	lsls	r2, r3, #5
 80021fc:	69fb      	ldr	r3, [r7, #28]
 80021fe:	4413      	add	r3, r2
 8002200:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002204:	461a      	mov	r2, r3
 8002206:	2301      	movs	r3, #1
 8002208:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	799b      	ldrb	r3, [r3, #6]
 800220e:	2b01      	cmp	r3, #1
 8002210:	d132      	bne.n	8002278 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002212:	6879      	ldr	r1, [r7, #4]
 8002214:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002216:	4613      	mov	r3, r2
 8002218:	00db      	lsls	r3, r3, #3
 800221a:	4413      	add	r3, r2
 800221c:	009b      	lsls	r3, r3, #2
 800221e:	440b      	add	r3, r1
 8002220:	3320      	adds	r3, #32
 8002222:	6819      	ldr	r1, [r3, #0]
 8002224:	6878      	ldr	r0, [r7, #4]
 8002226:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002228:	4613      	mov	r3, r2
 800222a:	00db      	lsls	r3, r3, #3
 800222c:	4413      	add	r3, r2
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	4403      	add	r3, r0
 8002232:	331c      	adds	r3, #28
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4419      	add	r1, r3
 8002238:	6878      	ldr	r0, [r7, #4]
 800223a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800223c:	4613      	mov	r3, r2
 800223e:	00db      	lsls	r3, r3, #3
 8002240:	4413      	add	r3, r2
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	4403      	add	r3, r0
 8002246:	3320      	adds	r3, #32
 8002248:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800224a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800224c:	2b00      	cmp	r3, #0
 800224e:	d113      	bne.n	8002278 <HAL_PCD_IRQHandler+0x3a2>
 8002250:	6879      	ldr	r1, [r7, #4]
 8002252:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002254:	4613      	mov	r3, r2
 8002256:	00db      	lsls	r3, r3, #3
 8002258:	4413      	add	r3, r2
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	440b      	add	r3, r1
 800225e:	3324      	adds	r3, #36	; 0x24
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d108      	bne.n	8002278 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6818      	ldr	r0, [r3, #0]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8002270:	461a      	mov	r2, r3
 8002272:	2101      	movs	r1, #1
 8002274:	f003 fc66 	bl	8005b44 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800227a:	b2db      	uxtb	r3, r3
 800227c:	4619      	mov	r1, r3
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	f008 fc95 	bl	800abae <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	f003 0308 	and.w	r3, r3, #8
 800228a:	2b00      	cmp	r3, #0
 800228c:	d008      	beq.n	80022a0 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800228e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002290:	015a      	lsls	r2, r3, #5
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	4413      	add	r3, r2
 8002296:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800229a:	461a      	mov	r2, r3
 800229c:	2308      	movs	r3, #8
 800229e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	f003 0310 	and.w	r3, r3, #16
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d008      	beq.n	80022bc <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80022aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ac:	015a      	lsls	r2, r3, #5
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	4413      	add	r3, r2
 80022b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80022b6:	461a      	mov	r2, r3
 80022b8:	2310      	movs	r3, #16
 80022ba:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d008      	beq.n	80022d8 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80022c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c8:	015a      	lsls	r2, r3, #5
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	4413      	add	r3, r2
 80022ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80022d2:	461a      	mov	r2, r3
 80022d4:	2340      	movs	r3, #64	; 0x40
 80022d6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	f003 0302 	and.w	r3, r3, #2
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d023      	beq.n	800232a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80022e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80022e4:	6a38      	ldr	r0, [r7, #32]
 80022e6:	f002 fc53 	bl	8004b90 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80022ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022ec:	4613      	mov	r3, r2
 80022ee:	00db      	lsls	r3, r3, #3
 80022f0:	4413      	add	r3, r2
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	3310      	adds	r3, #16
 80022f6:	687a      	ldr	r2, [r7, #4]
 80022f8:	4413      	add	r3, r2
 80022fa:	3304      	adds	r3, #4
 80022fc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	78db      	ldrb	r3, [r3, #3]
 8002302:	2b01      	cmp	r3, #1
 8002304:	d108      	bne.n	8002318 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	2200      	movs	r2, #0
 800230a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800230c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230e:	b2db      	uxtb	r3, r3
 8002310:	4619      	mov	r1, r3
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	f008 fce2 	bl	800acdc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800231a:	015a      	lsls	r2, r3, #5
 800231c:	69fb      	ldr	r3, [r7, #28]
 800231e:	4413      	add	r3, r2
 8002320:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002324:	461a      	mov	r2, r3
 8002326:	2302      	movs	r3, #2
 8002328:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002330:	2b00      	cmp	r3, #0
 8002332:	d003      	beq.n	800233c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002334:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	f000 fcbb 	bl	8002cb2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800233c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233e:	3301      	adds	r3, #1
 8002340:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002344:	085b      	lsrs	r3, r3, #1
 8002346:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800234a:	2b00      	cmp	r3, #0
 800234c:	f47f af2e 	bne.w	80021ac <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4618      	mov	r0, r3
 8002356:	f003 fb31 	bl	80059bc <USB_ReadInterrupts>
 800235a:	4603      	mov	r3, r0
 800235c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002360:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002364:	d122      	bne.n	80023ac <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	69fa      	ldr	r2, [r7, #28]
 8002370:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002374:	f023 0301 	bic.w	r3, r3, #1
 8002378:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 8002380:	2b01      	cmp	r3, #1
 8002382:	d108      	bne.n	8002396 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2200      	movs	r2, #0
 8002388:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800238c:	2100      	movs	r1, #0
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	f000 fea2 	bl	80030d8 <HAL_PCDEx_LPM_Callback>
 8002394:	e002      	b.n	800239c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f008 fc80 	bl	800ac9c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	695a      	ldr	r2, [r3, #20]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80023aa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4618      	mov	r0, r3
 80023b2:	f003 fb03 	bl	80059bc <USB_ReadInterrupts>
 80023b6:	4603      	mov	r3, r0
 80023b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80023c0:	d112      	bne.n	80023e8 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	f003 0301 	and.w	r3, r3, #1
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d102      	bne.n	80023d8 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80023d2:	6878      	ldr	r0, [r7, #4]
 80023d4:	f008 fc3c 	bl	800ac50 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	695a      	ldr	r2, [r3, #20]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80023e6:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4618      	mov	r0, r3
 80023ee:	f003 fae5 	bl	80059bc <USB_ReadInterrupts>
 80023f2:	4603      	mov	r3, r0
 80023f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023fc:	f040 80b7 	bne.w	800256e <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002400:	69fb      	ldr	r3, [r7, #28]
 8002402:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	69fa      	ldr	r2, [r7, #28]
 800240a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800240e:	f023 0301 	bic.w	r3, r3, #1
 8002412:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	2110      	movs	r1, #16
 800241a:	4618      	mov	r0, r3
 800241c:	f002 fbb8 	bl	8004b90 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002420:	2300      	movs	r3, #0
 8002422:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002424:	e046      	b.n	80024b4 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002428:	015a      	lsls	r2, r3, #5
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	4413      	add	r3, r2
 800242e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002432:	461a      	mov	r2, r3
 8002434:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002438:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800243a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800243c:	015a      	lsls	r2, r3, #5
 800243e:	69fb      	ldr	r3, [r7, #28]
 8002440:	4413      	add	r3, r2
 8002442:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800244a:	0151      	lsls	r1, r2, #5
 800244c:	69fa      	ldr	r2, [r7, #28]
 800244e:	440a      	add	r2, r1
 8002450:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002454:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002458:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800245a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800245c:	015a      	lsls	r2, r3, #5
 800245e:	69fb      	ldr	r3, [r7, #28]
 8002460:	4413      	add	r3, r2
 8002462:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002466:	461a      	mov	r2, r3
 8002468:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800246c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800246e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002470:	015a      	lsls	r2, r3, #5
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	4413      	add	r3, r2
 8002476:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800247e:	0151      	lsls	r1, r2, #5
 8002480:	69fa      	ldr	r2, [r7, #28]
 8002482:	440a      	add	r2, r1
 8002484:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002488:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800248c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800248e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002490:	015a      	lsls	r2, r3, #5
 8002492:	69fb      	ldr	r3, [r7, #28]
 8002494:	4413      	add	r3, r2
 8002496:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800249e:	0151      	lsls	r1, r2, #5
 80024a0:	69fa      	ldr	r2, [r7, #28]
 80024a2:	440a      	add	r2, r1
 80024a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80024a8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80024ac:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024b0:	3301      	adds	r3, #1
 80024b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	791b      	ldrb	r3, [r3, #4]
 80024b8:	461a      	mov	r2, r3
 80024ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024bc:	4293      	cmp	r3, r2
 80024be:	d3b2      	bcc.n	8002426 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024c6:	69db      	ldr	r3, [r3, #28]
 80024c8:	69fa      	ldr	r2, [r7, #28]
 80024ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80024ce:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80024d2:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	7bdb      	ldrb	r3, [r3, #15]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d016      	beq.n	800250a <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80024dc:	69fb      	ldr	r3, [r7, #28]
 80024de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024e6:	69fa      	ldr	r2, [r7, #28]
 80024e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80024ec:	f043 030b 	orr.w	r3, r3, #11
 80024f0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80024f4:	69fb      	ldr	r3, [r7, #28]
 80024f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024fc:	69fa      	ldr	r2, [r7, #28]
 80024fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002502:	f043 030b 	orr.w	r3, r3, #11
 8002506:	6453      	str	r3, [r2, #68]	; 0x44
 8002508:	e015      	b.n	8002536 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800250a:	69fb      	ldr	r3, [r7, #28]
 800250c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002510:	695b      	ldr	r3, [r3, #20]
 8002512:	69fa      	ldr	r2, [r7, #28]
 8002514:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002518:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800251c:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002520:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002528:	691b      	ldr	r3, [r3, #16]
 800252a:	69fa      	ldr	r2, [r7, #28]
 800252c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002530:	f043 030b 	orr.w	r3, r3, #11
 8002534:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002536:	69fb      	ldr	r3, [r7, #28]
 8002538:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	69fa      	ldr	r2, [r7, #28]
 8002540:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002544:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002548:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6818      	ldr	r0, [r3, #0]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	f203 439c 	addw	r3, r3, #1180	; 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002558:	461a      	mov	r2, r3
 800255a:	f003 faf3 	bl	8005b44 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	695a      	ldr	r2, [r3, #20]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800256c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4618      	mov	r0, r3
 8002574:	f003 fa22 	bl	80059bc <USB_ReadInterrupts>
 8002578:	4603      	mov	r3, r0
 800257a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800257e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002582:	d123      	bne.n	80025cc <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4618      	mov	r0, r3
 800258a:	f003 fab8 	bl	8005afe <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4618      	mov	r0, r3
 8002594:	f002 fb75 	bl	8004c82 <USB_GetDevSpeed>
 8002598:	4603      	mov	r3, r0
 800259a:	461a      	mov	r2, r3
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681c      	ldr	r4, [r3, #0]
 80025a4:	f001 f9c8 	bl	8003938 <HAL_RCC_GetHCLKFreq>
 80025a8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80025ae:	461a      	mov	r2, r3
 80025b0:	4620      	mov	r0, r4
 80025b2:	f002 f879 	bl	80046a8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	f008 fb21 	bl	800abfe <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	695a      	ldr	r2, [r3, #20]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80025ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4618      	mov	r0, r3
 80025d2:	f003 f9f3 	bl	80059bc <USB_ReadInterrupts>
 80025d6:	4603      	mov	r3, r0
 80025d8:	f003 0308 	and.w	r3, r3, #8
 80025dc:	2b08      	cmp	r3, #8
 80025de:	d10a      	bne.n	80025f6 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80025e0:	6878      	ldr	r0, [r7, #4]
 80025e2:	f008 fafe 	bl	800abe2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	695a      	ldr	r2, [r3, #20]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f002 0208 	and.w	r2, r2, #8
 80025f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4618      	mov	r0, r3
 80025fc:	f003 f9de 	bl	80059bc <USB_ReadInterrupts>
 8002600:	4603      	mov	r3, r0
 8002602:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002606:	2b80      	cmp	r3, #128	; 0x80
 8002608:	d123      	bne.n	8002652 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800260a:	6a3b      	ldr	r3, [r7, #32]
 800260c:	699b      	ldr	r3, [r3, #24]
 800260e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002612:	6a3b      	ldr	r3, [r7, #32]
 8002614:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002616:	2301      	movs	r3, #1
 8002618:	627b      	str	r3, [r7, #36]	; 0x24
 800261a:	e014      	b.n	8002646 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800261c:	6879      	ldr	r1, [r7, #4]
 800261e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002620:	4613      	mov	r3, r2
 8002622:	00db      	lsls	r3, r3, #3
 8002624:	4413      	add	r3, r2
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	440b      	add	r3, r1
 800262a:	f203 2357 	addw	r3, r3, #599	; 0x257
 800262e:	781b      	ldrb	r3, [r3, #0]
 8002630:	2b01      	cmp	r3, #1
 8002632:	d105      	bne.n	8002640 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002636:	b2db      	uxtb	r3, r3
 8002638:	4619      	mov	r1, r3
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	f000 fb08 	bl	8002c50 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002642:	3301      	adds	r3, #1
 8002644:	627b      	str	r3, [r7, #36]	; 0x24
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	791b      	ldrb	r3, [r3, #4]
 800264a:	461a      	mov	r2, r3
 800264c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264e:	4293      	cmp	r3, r2
 8002650:	d3e4      	bcc.n	800261c <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4618      	mov	r0, r3
 8002658:	f003 f9b0 	bl	80059bc <USB_ReadInterrupts>
 800265c:	4603      	mov	r3, r0
 800265e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002662:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002666:	d13c      	bne.n	80026e2 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002668:	2301      	movs	r3, #1
 800266a:	627b      	str	r3, [r7, #36]	; 0x24
 800266c:	e02b      	b.n	80026c6 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800266e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002670:	015a      	lsls	r2, r3, #5
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	4413      	add	r3, r2
 8002676:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800267e:	6879      	ldr	r1, [r7, #4]
 8002680:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002682:	4613      	mov	r3, r2
 8002684:	00db      	lsls	r3, r3, #3
 8002686:	4413      	add	r3, r2
 8002688:	009b      	lsls	r3, r3, #2
 800268a:	440b      	add	r3, r1
 800268c:	3318      	adds	r3, #24
 800268e:	781b      	ldrb	r3, [r3, #0]
 8002690:	2b01      	cmp	r3, #1
 8002692:	d115      	bne.n	80026c0 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002694:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002696:	2b00      	cmp	r3, #0
 8002698:	da12      	bge.n	80026c0 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800269a:	6879      	ldr	r1, [r7, #4]
 800269c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800269e:	4613      	mov	r3, r2
 80026a0:	00db      	lsls	r3, r3, #3
 80026a2:	4413      	add	r3, r2
 80026a4:	009b      	lsls	r3, r3, #2
 80026a6:	440b      	add	r3, r1
 80026a8:	3317      	adds	r3, #23
 80026aa:	2201      	movs	r2, #1
 80026ac:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80026ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80026b6:	b2db      	uxtb	r3, r3
 80026b8:	4619      	mov	r1, r3
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	f000 fac8 	bl	8002c50 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80026c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c2:	3301      	adds	r3, #1
 80026c4:	627b      	str	r3, [r7, #36]	; 0x24
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	791b      	ldrb	r3, [r3, #4]
 80026ca:	461a      	mov	r2, r3
 80026cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d3cd      	bcc.n	800266e <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	695a      	ldr	r2, [r3, #20]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80026e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4618      	mov	r0, r3
 80026e8:	f003 f968 	bl	80059bc <USB_ReadInterrupts>
 80026ec:	4603      	mov	r3, r0
 80026ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026f2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80026f6:	d156      	bne.n	80027a6 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80026f8:	2301      	movs	r3, #1
 80026fa:	627b      	str	r3, [r7, #36]	; 0x24
 80026fc:	e045      	b.n	800278a <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80026fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002700:	015a      	lsls	r2, r3, #5
 8002702:	69fb      	ldr	r3, [r7, #28]
 8002704:	4413      	add	r3, r2
 8002706:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800270e:	6879      	ldr	r1, [r7, #4]
 8002710:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002712:	4613      	mov	r3, r2
 8002714:	00db      	lsls	r3, r3, #3
 8002716:	4413      	add	r3, r2
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	440b      	add	r3, r1
 800271c:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8002720:	781b      	ldrb	r3, [r3, #0]
 8002722:	2b01      	cmp	r3, #1
 8002724:	d12e      	bne.n	8002784 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002726:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002728:	2b00      	cmp	r3, #0
 800272a:	da2b      	bge.n	8002784 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800272c:	69bb      	ldr	r3, [r7, #24]
 800272e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 8002738:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800273c:	429a      	cmp	r2, r3
 800273e:	d121      	bne.n	8002784 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002740:	6879      	ldr	r1, [r7, #4]
 8002742:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002744:	4613      	mov	r3, r2
 8002746:	00db      	lsls	r3, r3, #3
 8002748:	4413      	add	r3, r2
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	440b      	add	r3, r1
 800274e:	f203 2357 	addw	r3, r3, #599	; 0x257
 8002752:	2201      	movs	r2, #1
 8002754:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002756:	6a3b      	ldr	r3, [r7, #32]
 8002758:	699b      	ldr	r3, [r3, #24]
 800275a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800275e:	6a3b      	ldr	r3, [r7, #32]
 8002760:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002762:	6a3b      	ldr	r3, [r7, #32]
 8002764:	695b      	ldr	r3, [r3, #20]
 8002766:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800276a:	2b00      	cmp	r3, #0
 800276c:	d10a      	bne.n	8002784 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	69fa      	ldr	r2, [r7, #28]
 8002778:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800277c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002780:	6053      	str	r3, [r2, #4]
            break;
 8002782:	e008      	b.n	8002796 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002786:	3301      	adds	r3, #1
 8002788:	627b      	str	r3, [r7, #36]	; 0x24
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	791b      	ldrb	r3, [r3, #4]
 800278e:	461a      	mov	r2, r3
 8002790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002792:	4293      	cmp	r3, r2
 8002794:	d3b3      	bcc.n	80026fe <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	695a      	ldr	r2, [r3, #20]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80027a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4618      	mov	r0, r3
 80027ac:	f003 f906 	bl	80059bc <USB_ReadInterrupts>
 80027b0:	4603      	mov	r3, r0
 80027b2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80027b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027ba:	d10a      	bne.n	80027d2 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80027bc:	6878      	ldr	r0, [r7, #4]
 80027be:	f008 fa9f 	bl	800ad00 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	695a      	ldr	r2, [r3, #20]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80027d0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4618      	mov	r0, r3
 80027d8:	f003 f8f0 	bl	80059bc <USB_ReadInterrupts>
 80027dc:	4603      	mov	r3, r0
 80027de:	f003 0304 	and.w	r3, r3, #4
 80027e2:	2b04      	cmp	r3, #4
 80027e4:	d115      	bne.n	8002812 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80027ee:	69bb      	ldr	r3, [r7, #24]
 80027f0:	f003 0304 	and.w	r3, r3, #4
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d002      	beq.n	80027fe <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80027f8:	6878      	ldr	r0, [r7, #4]
 80027fa:	f008 fa8f 	bl	800ad1c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	6859      	ldr	r1, [r3, #4]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	69ba      	ldr	r2, [r7, #24]
 800280a:	430a      	orrs	r2, r1
 800280c:	605a      	str	r2, [r3, #4]
 800280e:	e000      	b.n	8002812 <HAL_PCD_IRQHandler+0x93c>
      return;
 8002810:	bf00      	nop
    }
  }
}
 8002812:	3734      	adds	r7, #52	; 0x34
 8002814:	46bd      	mov	sp, r7
 8002816:	bd90      	pop	{r4, r7, pc}

08002818 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b082      	sub	sp, #8
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
 8002820:	460b      	mov	r3, r1
 8002822:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800282a:	2b01      	cmp	r3, #1
 800282c:	d101      	bne.n	8002832 <HAL_PCD_SetAddress+0x1a>
 800282e:	2302      	movs	r3, #2
 8002830:	e012      	b.n	8002858 <HAL_PCD_SetAddress+0x40>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2201      	movs	r2, #1
 8002836:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  hpcd->USB_Address = address;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	78fa      	ldrb	r2, [r7, #3]
 800283e:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	78fa      	ldrb	r2, [r7, #3]
 8002846:	4611      	mov	r1, r2
 8002848:	4618      	mov	r0, r3
 800284a:	f003 f84f 	bl	80058ec <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2200      	movs	r2, #0
 8002852:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8002856:	2300      	movs	r3, #0
}
 8002858:	4618      	mov	r0, r3
 800285a:	3708      	adds	r7, #8
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}

08002860 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b084      	sub	sp, #16
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	4608      	mov	r0, r1
 800286a:	4611      	mov	r1, r2
 800286c:	461a      	mov	r2, r3
 800286e:	4603      	mov	r3, r0
 8002870:	70fb      	strb	r3, [r7, #3]
 8002872:	460b      	mov	r3, r1
 8002874:	803b      	strh	r3, [r7, #0]
 8002876:	4613      	mov	r3, r2
 8002878:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800287a:	2300      	movs	r3, #0
 800287c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800287e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002882:	2b00      	cmp	r3, #0
 8002884:	da0f      	bge.n	80028a6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002886:	78fb      	ldrb	r3, [r7, #3]
 8002888:	f003 020f 	and.w	r2, r3, #15
 800288c:	4613      	mov	r3, r2
 800288e:	00db      	lsls	r3, r3, #3
 8002890:	4413      	add	r3, r2
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	3310      	adds	r3, #16
 8002896:	687a      	ldr	r2, [r7, #4]
 8002898:	4413      	add	r3, r2
 800289a:	3304      	adds	r3, #4
 800289c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2201      	movs	r2, #1
 80028a2:	705a      	strb	r2, [r3, #1]
 80028a4:	e00f      	b.n	80028c6 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80028a6:	78fb      	ldrb	r3, [r7, #3]
 80028a8:	f003 020f 	and.w	r2, r3, #15
 80028ac:	4613      	mov	r3, r2
 80028ae:	00db      	lsls	r3, r3, #3
 80028b0:	4413      	add	r3, r2
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80028b8:	687a      	ldr	r2, [r7, #4]
 80028ba:	4413      	add	r3, r2
 80028bc:	3304      	adds	r3, #4
 80028be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	2200      	movs	r2, #0
 80028c4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80028c6:	78fb      	ldrb	r3, [r7, #3]
 80028c8:	f003 030f 	and.w	r3, r3, #15
 80028cc:	b2da      	uxtb	r2, r3
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80028d2:	883a      	ldrh	r2, [r7, #0]
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	78ba      	ldrb	r2, [r7, #2]
 80028dc:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	785b      	ldrb	r3, [r3, #1]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d004      	beq.n	80028f0 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	781b      	ldrb	r3, [r3, #0]
 80028ea:	b29a      	uxth	r2, r3
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80028f0:	78bb      	ldrb	r3, [r7, #2]
 80028f2:	2b02      	cmp	r3, #2
 80028f4:	d102      	bne.n	80028fc <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	2200      	movs	r2, #0
 80028fa:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8002902:	2b01      	cmp	r3, #1
 8002904:	d101      	bne.n	800290a <HAL_PCD_EP_Open+0xaa>
 8002906:	2302      	movs	r3, #2
 8002908:	e00e      	b.n	8002928 <HAL_PCD_EP_Open+0xc8>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2201      	movs	r2, #1
 800290e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	68f9      	ldr	r1, [r7, #12]
 8002918:	4618      	mov	r0, r3
 800291a:	f002 f9d7 	bl	8004ccc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2200      	movs	r2, #0
 8002922:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return ret;
 8002926:	7afb      	ldrb	r3, [r7, #11]
}
 8002928:	4618      	mov	r0, r3
 800292a:	3710      	adds	r7, #16
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}

08002930 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b084      	sub	sp, #16
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
 8002938:	460b      	mov	r3, r1
 800293a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800293c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002940:	2b00      	cmp	r3, #0
 8002942:	da0f      	bge.n	8002964 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002944:	78fb      	ldrb	r3, [r7, #3]
 8002946:	f003 020f 	and.w	r2, r3, #15
 800294a:	4613      	mov	r3, r2
 800294c:	00db      	lsls	r3, r3, #3
 800294e:	4413      	add	r3, r2
 8002950:	009b      	lsls	r3, r3, #2
 8002952:	3310      	adds	r3, #16
 8002954:	687a      	ldr	r2, [r7, #4]
 8002956:	4413      	add	r3, r2
 8002958:	3304      	adds	r3, #4
 800295a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	2201      	movs	r2, #1
 8002960:	705a      	strb	r2, [r3, #1]
 8002962:	e00f      	b.n	8002984 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002964:	78fb      	ldrb	r3, [r7, #3]
 8002966:	f003 020f 	and.w	r2, r3, #15
 800296a:	4613      	mov	r3, r2
 800296c:	00db      	lsls	r3, r3, #3
 800296e:	4413      	add	r3, r2
 8002970:	009b      	lsls	r3, r3, #2
 8002972:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	4413      	add	r3, r2
 800297a:	3304      	adds	r3, #4
 800297c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	2200      	movs	r2, #0
 8002982:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002984:	78fb      	ldrb	r3, [r7, #3]
 8002986:	f003 030f 	and.w	r3, r3, #15
 800298a:	b2da      	uxtb	r2, r3
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8002996:	2b01      	cmp	r3, #1
 8002998:	d101      	bne.n	800299e <HAL_PCD_EP_Close+0x6e>
 800299a:	2302      	movs	r3, #2
 800299c:	e00e      	b.n	80029bc <HAL_PCD_EP_Close+0x8c>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2201      	movs	r2, #1
 80029a2:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	68f9      	ldr	r1, [r7, #12]
 80029ac:	4618      	mov	r0, r3
 80029ae:	f002 fa15 	bl	8004ddc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2200      	movs	r2, #0
 80029b6:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  return HAL_OK;
 80029ba:	2300      	movs	r3, #0
}
 80029bc:	4618      	mov	r0, r3
 80029be:	3710      	adds	r7, #16
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}

080029c4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b086      	sub	sp, #24
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	60f8      	str	r0, [r7, #12]
 80029cc:	607a      	str	r2, [r7, #4]
 80029ce:	603b      	str	r3, [r7, #0]
 80029d0:	460b      	mov	r3, r1
 80029d2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80029d4:	7afb      	ldrb	r3, [r7, #11]
 80029d6:	f003 020f 	and.w	r2, r3, #15
 80029da:	4613      	mov	r3, r2
 80029dc:	00db      	lsls	r3, r3, #3
 80029de:	4413      	add	r3, r2
 80029e0:	009b      	lsls	r3, r3, #2
 80029e2:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80029e6:	68fa      	ldr	r2, [r7, #12]
 80029e8:	4413      	add	r3, r2
 80029ea:	3304      	adds	r3, #4
 80029ec:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	687a      	ldr	r2, [r7, #4]
 80029f2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	683a      	ldr	r2, [r7, #0]
 80029f8:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	2200      	movs	r2, #0
 80029fe:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	2200      	movs	r2, #0
 8002a04:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a06:	7afb      	ldrb	r3, [r7, #11]
 8002a08:	f003 030f 	and.w	r3, r3, #15
 8002a0c:	b2da      	uxtb	r2, r3
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	799b      	ldrb	r3, [r3, #6]
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d102      	bne.n	8002a20 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002a1a:	687a      	ldr	r2, [r7, #4]
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	6818      	ldr	r0, [r3, #0]
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	799b      	ldrb	r3, [r3, #6]
 8002a28:	461a      	mov	r2, r3
 8002a2a:	6979      	ldr	r1, [r7, #20]
 8002a2c:	f002 fab2 	bl	8004f94 <USB_EPStartXfer>

  return HAL_OK;
 8002a30:	2300      	movs	r3, #0
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3718      	adds	r7, #24
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}

08002a3a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002a3a:	b480      	push	{r7}
 8002a3c:	b083      	sub	sp, #12
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	6078      	str	r0, [r7, #4]
 8002a42:	460b      	mov	r3, r1
 8002a44:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002a46:	78fb      	ldrb	r3, [r7, #3]
 8002a48:	f003 020f 	and.w	r2, r3, #15
 8002a4c:	6879      	ldr	r1, [r7, #4]
 8002a4e:	4613      	mov	r3, r2
 8002a50:	00db      	lsls	r3, r3, #3
 8002a52:	4413      	add	r3, r2
 8002a54:	009b      	lsls	r3, r3, #2
 8002a56:	440b      	add	r3, r1
 8002a58:	f503 731a 	add.w	r3, r3, #616	; 0x268
 8002a5c:	681b      	ldr	r3, [r3, #0]
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	370c      	adds	r7, #12
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr

08002a6a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002a6a:	b580      	push	{r7, lr}
 8002a6c:	b086      	sub	sp, #24
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	60f8      	str	r0, [r7, #12]
 8002a72:	607a      	str	r2, [r7, #4]
 8002a74:	603b      	str	r3, [r7, #0]
 8002a76:	460b      	mov	r3, r1
 8002a78:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a7a:	7afb      	ldrb	r3, [r7, #11]
 8002a7c:	f003 020f 	and.w	r2, r3, #15
 8002a80:	4613      	mov	r3, r2
 8002a82:	00db      	lsls	r3, r3, #3
 8002a84:	4413      	add	r3, r2
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	3310      	adds	r3, #16
 8002a8a:	68fa      	ldr	r2, [r7, #12]
 8002a8c:	4413      	add	r3, r2
 8002a8e:	3304      	adds	r3, #4
 8002a90:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	687a      	ldr	r2, [r7, #4]
 8002a96:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	683a      	ldr	r2, [r7, #0]
 8002a9c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002aaa:	7afb      	ldrb	r3, [r7, #11]
 8002aac:	f003 030f 	and.w	r3, r3, #15
 8002ab0:	b2da      	uxtb	r2, r3
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	799b      	ldrb	r3, [r3, #6]
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d102      	bne.n	8002ac4 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002abe:	687a      	ldr	r2, [r7, #4]
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	6818      	ldr	r0, [r3, #0]
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	799b      	ldrb	r3, [r3, #6]
 8002acc:	461a      	mov	r2, r3
 8002ace:	6979      	ldr	r1, [r7, #20]
 8002ad0:	f002 fa60 	bl	8004f94 <USB_EPStartXfer>

  return HAL_OK;
 8002ad4:	2300      	movs	r3, #0
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	3718      	adds	r7, #24
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}

08002ade <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ade:	b580      	push	{r7, lr}
 8002ae0:	b084      	sub	sp, #16
 8002ae2:	af00      	add	r7, sp, #0
 8002ae4:	6078      	str	r0, [r7, #4]
 8002ae6:	460b      	mov	r3, r1
 8002ae8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002aea:	78fb      	ldrb	r3, [r7, #3]
 8002aec:	f003 030f 	and.w	r3, r3, #15
 8002af0:	687a      	ldr	r2, [r7, #4]
 8002af2:	7912      	ldrb	r2, [r2, #4]
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d901      	bls.n	8002afc <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	e04f      	b.n	8002b9c <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002afc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	da0f      	bge.n	8002b24 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b04:	78fb      	ldrb	r3, [r7, #3]
 8002b06:	f003 020f 	and.w	r2, r3, #15
 8002b0a:	4613      	mov	r3, r2
 8002b0c:	00db      	lsls	r3, r3, #3
 8002b0e:	4413      	add	r3, r2
 8002b10:	009b      	lsls	r3, r3, #2
 8002b12:	3310      	adds	r3, #16
 8002b14:	687a      	ldr	r2, [r7, #4]
 8002b16:	4413      	add	r3, r2
 8002b18:	3304      	adds	r3, #4
 8002b1a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	2201      	movs	r2, #1
 8002b20:	705a      	strb	r2, [r3, #1]
 8002b22:	e00d      	b.n	8002b40 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002b24:	78fa      	ldrb	r2, [r7, #3]
 8002b26:	4613      	mov	r3, r2
 8002b28:	00db      	lsls	r3, r3, #3
 8002b2a:	4413      	add	r3, r2
 8002b2c:	009b      	lsls	r3, r3, #2
 8002b2e:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002b32:	687a      	ldr	r2, [r7, #4]
 8002b34:	4413      	add	r3, r2
 8002b36:	3304      	adds	r3, #4
 8002b38:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2201      	movs	r2, #1
 8002b44:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b46:	78fb      	ldrb	r3, [r7, #3]
 8002b48:	f003 030f 	and.w	r3, r3, #15
 8002b4c:	b2da      	uxtb	r2, r3
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d101      	bne.n	8002b60 <HAL_PCD_EP_SetStall+0x82>
 8002b5c:	2302      	movs	r3, #2
 8002b5e:	e01d      	b.n	8002b9c <HAL_PCD_EP_SetStall+0xbe>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2201      	movs	r2, #1
 8002b64:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	68f9      	ldr	r1, [r7, #12]
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f002 fde8 	bl	8005744 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002b74:	78fb      	ldrb	r3, [r7, #3]
 8002b76:	f003 030f 	and.w	r3, r3, #15
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d109      	bne.n	8002b92 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6818      	ldr	r0, [r3, #0]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	7999      	ldrb	r1, [r3, #6]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8002b8c:	461a      	mov	r2, r3
 8002b8e:	f002 ffd9 	bl	8005b44 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2200      	movs	r2, #0
 8002b96:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8002b9a:	2300      	movs	r3, #0
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	3710      	adds	r7, #16
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}

08002ba4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b084      	sub	sp, #16
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
 8002bac:	460b      	mov	r3, r1
 8002bae:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002bb0:	78fb      	ldrb	r3, [r7, #3]
 8002bb2:	f003 030f 	and.w	r3, r3, #15
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	7912      	ldrb	r2, [r2, #4]
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d901      	bls.n	8002bc2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e042      	b.n	8002c48 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002bc2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	da0f      	bge.n	8002bea <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002bca:	78fb      	ldrb	r3, [r7, #3]
 8002bcc:	f003 020f 	and.w	r2, r3, #15
 8002bd0:	4613      	mov	r3, r2
 8002bd2:	00db      	lsls	r3, r3, #3
 8002bd4:	4413      	add	r3, r2
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	3310      	adds	r3, #16
 8002bda:	687a      	ldr	r2, [r7, #4]
 8002bdc:	4413      	add	r3, r2
 8002bde:	3304      	adds	r3, #4
 8002be0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2201      	movs	r2, #1
 8002be6:	705a      	strb	r2, [r3, #1]
 8002be8:	e00f      	b.n	8002c0a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002bea:	78fb      	ldrb	r3, [r7, #3]
 8002bec:	f003 020f 	and.w	r2, r3, #15
 8002bf0:	4613      	mov	r3, r2
 8002bf2:	00db      	lsls	r3, r3, #3
 8002bf4:	4413      	add	r3, r2
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002bfc:	687a      	ldr	r2, [r7, #4]
 8002bfe:	4413      	add	r3, r2
 8002c00:	3304      	adds	r3, #4
 8002c02:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2200      	movs	r2, #0
 8002c08:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c10:	78fb      	ldrb	r3, [r7, #3]
 8002c12:	f003 030f 	and.w	r3, r3, #15
 8002c16:	b2da      	uxtb	r2, r3
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8002c22:	2b01      	cmp	r3, #1
 8002c24:	d101      	bne.n	8002c2a <HAL_PCD_EP_ClrStall+0x86>
 8002c26:	2302      	movs	r3, #2
 8002c28:	e00e      	b.n	8002c48 <HAL_PCD_EP_ClrStall+0xa4>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	68f9      	ldr	r1, [r7, #12]
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f002 fdf1 	bl	8005820 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2200      	movs	r2, #0
 8002c42:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8002c46:	2300      	movs	r3, #0
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	3710      	adds	r7, #16
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}

08002c50 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b084      	sub	sp, #16
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
 8002c58:	460b      	mov	r3, r1
 8002c5a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002c5c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	da0c      	bge.n	8002c7e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c64:	78fb      	ldrb	r3, [r7, #3]
 8002c66:	f003 020f 	and.w	r2, r3, #15
 8002c6a:	4613      	mov	r3, r2
 8002c6c:	00db      	lsls	r3, r3, #3
 8002c6e:	4413      	add	r3, r2
 8002c70:	009b      	lsls	r3, r3, #2
 8002c72:	3310      	adds	r3, #16
 8002c74:	687a      	ldr	r2, [r7, #4]
 8002c76:	4413      	add	r3, r2
 8002c78:	3304      	adds	r3, #4
 8002c7a:	60fb      	str	r3, [r7, #12]
 8002c7c:	e00c      	b.n	8002c98 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c7e:	78fb      	ldrb	r3, [r7, #3]
 8002c80:	f003 020f 	and.w	r2, r3, #15
 8002c84:	4613      	mov	r3, r2
 8002c86:	00db      	lsls	r3, r3, #3
 8002c88:	4413      	add	r3, r2
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002c90:	687a      	ldr	r2, [r7, #4]
 8002c92:	4413      	add	r3, r2
 8002c94:	3304      	adds	r3, #4
 8002c96:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	68f9      	ldr	r1, [r7, #12]
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f002 fc10 	bl	80054c4 <USB_EPStopXfer>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002ca8:	7afb      	ldrb	r3, [r7, #11]
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	3710      	adds	r7, #16
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}

08002cb2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002cb2:	b580      	push	{r7, lr}
 8002cb4:	b08a      	sub	sp, #40	; 0x28
 8002cb6:	af02      	add	r7, sp, #8
 8002cb8:	6078      	str	r0, [r7, #4]
 8002cba:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002cc6:	683a      	ldr	r2, [r7, #0]
 8002cc8:	4613      	mov	r3, r2
 8002cca:	00db      	lsls	r3, r3, #3
 8002ccc:	4413      	add	r3, r2
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	3310      	adds	r3, #16
 8002cd2:	687a      	ldr	r2, [r7, #4]
 8002cd4:	4413      	add	r3, r2
 8002cd6:	3304      	adds	r3, #4
 8002cd8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	695a      	ldr	r2, [r3, #20]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	691b      	ldr	r3, [r3, #16]
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d901      	bls.n	8002cea <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e06b      	b.n	8002dc2 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	691a      	ldr	r2, [r3, #16]
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	695b      	ldr	r3, [r3, #20]
 8002cf2:	1ad3      	subs	r3, r2, r3
 8002cf4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	69fa      	ldr	r2, [r7, #28]
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d902      	bls.n	8002d06 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	3303      	adds	r3, #3
 8002d0a:	089b      	lsrs	r3, r3, #2
 8002d0c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002d0e:	e02a      	b.n	8002d66 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	691a      	ldr	r2, [r3, #16]
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	695b      	ldr	r3, [r3, #20]
 8002d18:	1ad3      	subs	r3, r2, r3
 8002d1a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	69fa      	ldr	r2, [r7, #28]
 8002d22:	429a      	cmp	r2, r3
 8002d24:	d902      	bls.n	8002d2c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002d2c:	69fb      	ldr	r3, [r7, #28]
 8002d2e:	3303      	adds	r3, #3
 8002d30:	089b      	lsrs	r3, r3, #2
 8002d32:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	68d9      	ldr	r1, [r3, #12]
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	b2da      	uxtb	r2, r3
 8002d3c:	69fb      	ldr	r3, [r7, #28]
 8002d3e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002d44:	9300      	str	r3, [sp, #0]
 8002d46:	4603      	mov	r3, r0
 8002d48:	6978      	ldr	r0, [r7, #20]
 8002d4a:	f002 fc65 	bl	8005618 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	68da      	ldr	r2, [r3, #12]
 8002d52:	69fb      	ldr	r3, [r7, #28]
 8002d54:	441a      	add	r2, r3
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	695a      	ldr	r2, [r3, #20]
 8002d5e:	69fb      	ldr	r3, [r7, #28]
 8002d60:	441a      	add	r2, r3
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	015a      	lsls	r2, r3, #5
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	4413      	add	r3, r2
 8002d6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d72:	699b      	ldr	r3, [r3, #24]
 8002d74:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002d76:	69ba      	ldr	r2, [r7, #24]
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	d809      	bhi.n	8002d90 <PCD_WriteEmptyTxFifo+0xde>
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	695a      	ldr	r2, [r3, #20]
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002d84:	429a      	cmp	r2, r3
 8002d86:	d203      	bcs.n	8002d90 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	691b      	ldr	r3, [r3, #16]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d1bf      	bne.n	8002d10 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	691a      	ldr	r2, [r3, #16]
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	695b      	ldr	r3, [r3, #20]
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d811      	bhi.n	8002dc0 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	f003 030f 	and.w	r3, r3, #15
 8002da2:	2201      	movs	r2, #1
 8002da4:	fa02 f303 	lsl.w	r3, r2, r3
 8002da8:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002db0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	43db      	mvns	r3, r3
 8002db6:	6939      	ldr	r1, [r7, #16]
 8002db8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002dc0:	2300      	movs	r3, #0
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	3720      	adds	r7, #32
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}
	...

08002dcc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b088      	sub	sp, #32
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
 8002dd4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ddc:	69fb      	ldr	r3, [r7, #28]
 8002dde:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002de0:	69fb      	ldr	r3, [r7, #28]
 8002de2:	333c      	adds	r3, #60	; 0x3c
 8002de4:	3304      	adds	r3, #4
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	015a      	lsls	r2, r3, #5
 8002dee:	69bb      	ldr	r3, [r7, #24]
 8002df0:	4413      	add	r3, r2
 8002df2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	799b      	ldrb	r3, [r3, #6]
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d17b      	bne.n	8002efa <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	f003 0308 	and.w	r3, r3, #8
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d015      	beq.n	8002e38 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	4a61      	ldr	r2, [pc, #388]	; (8002f94 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	f240 80b9 	bls.w	8002f88 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	f000 80b3 	beq.w	8002f88 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	015a      	lsls	r2, r3, #5
 8002e26:	69bb      	ldr	r3, [r7, #24]
 8002e28:	4413      	add	r3, r2
 8002e2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e2e:	461a      	mov	r2, r3
 8002e30:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e34:	6093      	str	r3, [r2, #8]
 8002e36:	e0a7      	b.n	8002f88 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	f003 0320 	and.w	r3, r3, #32
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d009      	beq.n	8002e56 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	015a      	lsls	r2, r3, #5
 8002e46:	69bb      	ldr	r3, [r7, #24]
 8002e48:	4413      	add	r3, r2
 8002e4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e4e:	461a      	mov	r2, r3
 8002e50:	2320      	movs	r3, #32
 8002e52:	6093      	str	r3, [r2, #8]
 8002e54:	e098      	b.n	8002f88 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	f040 8093 	bne.w	8002f88 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	4a4b      	ldr	r2, [pc, #300]	; (8002f94 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d90f      	bls.n	8002e8a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d00a      	beq.n	8002e8a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	015a      	lsls	r2, r3, #5
 8002e78:	69bb      	ldr	r3, [r7, #24]
 8002e7a:	4413      	add	r3, r2
 8002e7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e80:	461a      	mov	r2, r3
 8002e82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e86:	6093      	str	r3, [r2, #8]
 8002e88:	e07e      	b.n	8002f88 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002e8a:	683a      	ldr	r2, [r7, #0]
 8002e8c:	4613      	mov	r3, r2
 8002e8e:	00db      	lsls	r3, r3, #3
 8002e90:	4413      	add	r3, r2
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002e98:	687a      	ldr	r2, [r7, #4]
 8002e9a:	4413      	add	r3, r2
 8002e9c:	3304      	adds	r3, #4
 8002e9e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	6a1a      	ldr	r2, [r3, #32]
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	0159      	lsls	r1, r3, #5
 8002ea8:	69bb      	ldr	r3, [r7, #24]
 8002eaa:	440b      	add	r3, r1
 8002eac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002eb0:	691b      	ldr	r3, [r3, #16]
 8002eb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002eb6:	1ad2      	subs	r2, r2, r3
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d114      	bne.n	8002eec <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	691b      	ldr	r3, [r3, #16]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d109      	bne.n	8002ede <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6818      	ldr	r0, [r3, #0]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8002ed4:	461a      	mov	r2, r3
 8002ed6:	2101      	movs	r1, #1
 8002ed8:	f002 fe34 	bl	8005b44 <USB_EP0_OutStart>
 8002edc:	e006      	b.n	8002eec <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	68da      	ldr	r2, [r3, #12]
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	695b      	ldr	r3, [r3, #20]
 8002ee6:	441a      	add	r2, r3
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	b2db      	uxtb	r3, r3
 8002ef0:	4619      	mov	r1, r3
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f007 fe40 	bl	800ab78 <HAL_PCD_DataOutStageCallback>
 8002ef8:	e046      	b.n	8002f88 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	4a26      	ldr	r2, [pc, #152]	; (8002f98 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d124      	bne.n	8002f4c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d00a      	beq.n	8002f22 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	015a      	lsls	r2, r3, #5
 8002f10:	69bb      	ldr	r3, [r7, #24]
 8002f12:	4413      	add	r3, r2
 8002f14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f18:	461a      	mov	r2, r3
 8002f1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f1e:	6093      	str	r3, [r2, #8]
 8002f20:	e032      	b.n	8002f88 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	f003 0320 	and.w	r3, r3, #32
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d008      	beq.n	8002f3e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	015a      	lsls	r2, r3, #5
 8002f30:	69bb      	ldr	r3, [r7, #24]
 8002f32:	4413      	add	r3, r2
 8002f34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f38:	461a      	mov	r2, r3
 8002f3a:	2320      	movs	r3, #32
 8002f3c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	4619      	mov	r1, r3
 8002f44:	6878      	ldr	r0, [r7, #4]
 8002f46:	f007 fe17 	bl	800ab78 <HAL_PCD_DataOutStageCallback>
 8002f4a:	e01d      	b.n	8002f88 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d114      	bne.n	8002f7c <PCD_EP_OutXfrComplete_int+0x1b0>
 8002f52:	6879      	ldr	r1, [r7, #4]
 8002f54:	683a      	ldr	r2, [r7, #0]
 8002f56:	4613      	mov	r3, r2
 8002f58:	00db      	lsls	r3, r3, #3
 8002f5a:	4413      	add	r3, r2
 8002f5c:	009b      	lsls	r3, r3, #2
 8002f5e:	440b      	add	r3, r1
 8002f60:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d108      	bne.n	8002f7c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6818      	ldr	r0, [r3, #0]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8002f74:	461a      	mov	r2, r3
 8002f76:	2100      	movs	r1, #0
 8002f78:	f002 fde4 	bl	8005b44 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	b2db      	uxtb	r3, r3
 8002f80:	4619      	mov	r1, r3
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	f007 fdf8 	bl	800ab78 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002f88:	2300      	movs	r3, #0
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3720      	adds	r7, #32
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	bf00      	nop
 8002f94:	4f54300a 	.word	0x4f54300a
 8002f98:	4f54310a 	.word	0x4f54310a

08002f9c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b086      	sub	sp, #24
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
 8002fa4:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	333c      	adds	r3, #60	; 0x3c
 8002fb4:	3304      	adds	r3, #4
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	015a      	lsls	r2, r3, #5
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	4413      	add	r3, r2
 8002fc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	4a15      	ldr	r2, [pc, #84]	; (8003024 <PCD_EP_OutSetupPacket_int+0x88>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d90e      	bls.n	8002ff0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d009      	beq.n	8002ff0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	015a      	lsls	r2, r3, #5
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	4413      	add	r3, r2
 8002fe4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fe8:	461a      	mov	r2, r3
 8002fea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002fee:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002ff0:	6878      	ldr	r0, [r7, #4]
 8002ff2:	f007 fdaf 	bl	800ab54 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	4a0a      	ldr	r2, [pc, #40]	; (8003024 <PCD_EP_OutSetupPacket_int+0x88>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d90c      	bls.n	8003018 <PCD_EP_OutSetupPacket_int+0x7c>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	799b      	ldrb	r3, [r3, #6]
 8003002:	2b01      	cmp	r3, #1
 8003004:	d108      	bne.n	8003018 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6818      	ldr	r0, [r3, #0]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8003010:	461a      	mov	r2, r3
 8003012:	2101      	movs	r1, #1
 8003014:	f002 fd96 	bl	8005b44 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003018:	2300      	movs	r3, #0
}
 800301a:	4618      	mov	r0, r3
 800301c:	3718      	adds	r7, #24
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
 8003022:	bf00      	nop
 8003024:	4f54300a 	.word	0x4f54300a

08003028 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003028:	b480      	push	{r7}
 800302a:	b085      	sub	sp, #20
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
 8003030:	460b      	mov	r3, r1
 8003032:	70fb      	strb	r3, [r7, #3]
 8003034:	4613      	mov	r3, r2
 8003036:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800303e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003040:	78fb      	ldrb	r3, [r7, #3]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d107      	bne.n	8003056 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003046:	883b      	ldrh	r3, [r7, #0]
 8003048:	0419      	lsls	r1, r3, #16
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	68ba      	ldr	r2, [r7, #8]
 8003050:	430a      	orrs	r2, r1
 8003052:	629a      	str	r2, [r3, #40]	; 0x28
 8003054:	e028      	b.n	80030a8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800305c:	0c1b      	lsrs	r3, r3, #16
 800305e:	68ba      	ldr	r2, [r7, #8]
 8003060:	4413      	add	r3, r2
 8003062:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003064:	2300      	movs	r3, #0
 8003066:	73fb      	strb	r3, [r7, #15]
 8003068:	e00d      	b.n	8003086 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	7bfb      	ldrb	r3, [r7, #15]
 8003070:	3340      	adds	r3, #64	; 0x40
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	4413      	add	r3, r2
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	0c1b      	lsrs	r3, r3, #16
 800307a:	68ba      	ldr	r2, [r7, #8]
 800307c:	4413      	add	r3, r2
 800307e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003080:	7bfb      	ldrb	r3, [r7, #15]
 8003082:	3301      	adds	r3, #1
 8003084:	73fb      	strb	r3, [r7, #15]
 8003086:	7bfa      	ldrb	r2, [r7, #15]
 8003088:	78fb      	ldrb	r3, [r7, #3]
 800308a:	3b01      	subs	r3, #1
 800308c:	429a      	cmp	r2, r3
 800308e:	d3ec      	bcc.n	800306a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003090:	883b      	ldrh	r3, [r7, #0]
 8003092:	0418      	lsls	r0, r3, #16
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6819      	ldr	r1, [r3, #0]
 8003098:	78fb      	ldrb	r3, [r7, #3]
 800309a:	3b01      	subs	r3, #1
 800309c:	68ba      	ldr	r2, [r7, #8]
 800309e:	4302      	orrs	r2, r0
 80030a0:	3340      	adds	r3, #64	; 0x40
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	440b      	add	r3, r1
 80030a6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80030a8:	2300      	movs	r3, #0
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3714      	adds	r7, #20
 80030ae:	46bd      	mov	sp, r7
 80030b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b4:	4770      	bx	lr

080030b6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80030b6:	b480      	push	{r7}
 80030b8:	b083      	sub	sp, #12
 80030ba:	af00      	add	r7, sp, #0
 80030bc:	6078      	str	r0, [r7, #4]
 80030be:	460b      	mov	r3, r1
 80030c0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	887a      	ldrh	r2, [r7, #2]
 80030c8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80030ca:	2300      	movs	r3, #0
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	370c      	adds	r7, #12
 80030d0:	46bd      	mov	sp, r7
 80030d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d6:	4770      	bx	lr

080030d8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80030d8:	b480      	push	{r7}
 80030da:	b083      	sub	sp, #12
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
 80030e0:	460b      	mov	r3, r1
 80030e2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80030e4:	bf00      	nop
 80030e6:	370c      	adds	r7, #12
 80030e8:	46bd      	mov	sp, r7
 80030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ee:	4770      	bx	lr

080030f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b086      	sub	sp, #24
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d101      	bne.n	8003102 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e267      	b.n	80035d2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 0301 	and.w	r3, r3, #1
 800310a:	2b00      	cmp	r3, #0
 800310c:	d075      	beq.n	80031fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800310e:	4b88      	ldr	r3, [pc, #544]	; (8003330 <HAL_RCC_OscConfig+0x240>)
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	f003 030c 	and.w	r3, r3, #12
 8003116:	2b04      	cmp	r3, #4
 8003118:	d00c      	beq.n	8003134 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800311a:	4b85      	ldr	r3, [pc, #532]	; (8003330 <HAL_RCC_OscConfig+0x240>)
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003122:	2b08      	cmp	r3, #8
 8003124:	d112      	bne.n	800314c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003126:	4b82      	ldr	r3, [pc, #520]	; (8003330 <HAL_RCC_OscConfig+0x240>)
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800312e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003132:	d10b      	bne.n	800314c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003134:	4b7e      	ldr	r3, [pc, #504]	; (8003330 <HAL_RCC_OscConfig+0x240>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800313c:	2b00      	cmp	r3, #0
 800313e:	d05b      	beq.n	80031f8 <HAL_RCC_OscConfig+0x108>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d157      	bne.n	80031f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003148:	2301      	movs	r3, #1
 800314a:	e242      	b.n	80035d2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003154:	d106      	bne.n	8003164 <HAL_RCC_OscConfig+0x74>
 8003156:	4b76      	ldr	r3, [pc, #472]	; (8003330 <HAL_RCC_OscConfig+0x240>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a75      	ldr	r2, [pc, #468]	; (8003330 <HAL_RCC_OscConfig+0x240>)
 800315c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003160:	6013      	str	r3, [r2, #0]
 8003162:	e01d      	b.n	80031a0 <HAL_RCC_OscConfig+0xb0>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800316c:	d10c      	bne.n	8003188 <HAL_RCC_OscConfig+0x98>
 800316e:	4b70      	ldr	r3, [pc, #448]	; (8003330 <HAL_RCC_OscConfig+0x240>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a6f      	ldr	r2, [pc, #444]	; (8003330 <HAL_RCC_OscConfig+0x240>)
 8003174:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003178:	6013      	str	r3, [r2, #0]
 800317a:	4b6d      	ldr	r3, [pc, #436]	; (8003330 <HAL_RCC_OscConfig+0x240>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a6c      	ldr	r2, [pc, #432]	; (8003330 <HAL_RCC_OscConfig+0x240>)
 8003180:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003184:	6013      	str	r3, [r2, #0]
 8003186:	e00b      	b.n	80031a0 <HAL_RCC_OscConfig+0xb0>
 8003188:	4b69      	ldr	r3, [pc, #420]	; (8003330 <HAL_RCC_OscConfig+0x240>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a68      	ldr	r2, [pc, #416]	; (8003330 <HAL_RCC_OscConfig+0x240>)
 800318e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003192:	6013      	str	r3, [r2, #0]
 8003194:	4b66      	ldr	r3, [pc, #408]	; (8003330 <HAL_RCC_OscConfig+0x240>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a65      	ldr	r2, [pc, #404]	; (8003330 <HAL_RCC_OscConfig+0x240>)
 800319a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800319e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d013      	beq.n	80031d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031a8:	f7fd fe94 	bl	8000ed4 <HAL_GetTick>
 80031ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031ae:	e008      	b.n	80031c2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031b0:	f7fd fe90 	bl	8000ed4 <HAL_GetTick>
 80031b4:	4602      	mov	r2, r0
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	2b64      	cmp	r3, #100	; 0x64
 80031bc:	d901      	bls.n	80031c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80031be:	2303      	movs	r3, #3
 80031c0:	e207      	b.n	80035d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031c2:	4b5b      	ldr	r3, [pc, #364]	; (8003330 <HAL_RCC_OscConfig+0x240>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d0f0      	beq.n	80031b0 <HAL_RCC_OscConfig+0xc0>
 80031ce:	e014      	b.n	80031fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031d0:	f7fd fe80 	bl	8000ed4 <HAL_GetTick>
 80031d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031d6:	e008      	b.n	80031ea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031d8:	f7fd fe7c 	bl	8000ed4 <HAL_GetTick>
 80031dc:	4602      	mov	r2, r0
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	1ad3      	subs	r3, r2, r3
 80031e2:	2b64      	cmp	r3, #100	; 0x64
 80031e4:	d901      	bls.n	80031ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80031e6:	2303      	movs	r3, #3
 80031e8:	e1f3      	b.n	80035d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031ea:	4b51      	ldr	r3, [pc, #324]	; (8003330 <HAL_RCC_OscConfig+0x240>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d1f0      	bne.n	80031d8 <HAL_RCC_OscConfig+0xe8>
 80031f6:	e000      	b.n	80031fa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 0302 	and.w	r3, r3, #2
 8003202:	2b00      	cmp	r3, #0
 8003204:	d063      	beq.n	80032ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003206:	4b4a      	ldr	r3, [pc, #296]	; (8003330 <HAL_RCC_OscConfig+0x240>)
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	f003 030c 	and.w	r3, r3, #12
 800320e:	2b00      	cmp	r3, #0
 8003210:	d00b      	beq.n	800322a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003212:	4b47      	ldr	r3, [pc, #284]	; (8003330 <HAL_RCC_OscConfig+0x240>)
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800321a:	2b08      	cmp	r3, #8
 800321c:	d11c      	bne.n	8003258 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800321e:	4b44      	ldr	r3, [pc, #272]	; (8003330 <HAL_RCC_OscConfig+0x240>)
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003226:	2b00      	cmp	r3, #0
 8003228:	d116      	bne.n	8003258 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800322a:	4b41      	ldr	r3, [pc, #260]	; (8003330 <HAL_RCC_OscConfig+0x240>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 0302 	and.w	r3, r3, #2
 8003232:	2b00      	cmp	r3, #0
 8003234:	d005      	beq.n	8003242 <HAL_RCC_OscConfig+0x152>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	68db      	ldr	r3, [r3, #12]
 800323a:	2b01      	cmp	r3, #1
 800323c:	d001      	beq.n	8003242 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e1c7      	b.n	80035d2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003242:	4b3b      	ldr	r3, [pc, #236]	; (8003330 <HAL_RCC_OscConfig+0x240>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	691b      	ldr	r3, [r3, #16]
 800324e:	00db      	lsls	r3, r3, #3
 8003250:	4937      	ldr	r1, [pc, #220]	; (8003330 <HAL_RCC_OscConfig+0x240>)
 8003252:	4313      	orrs	r3, r2
 8003254:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003256:	e03a      	b.n	80032ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	68db      	ldr	r3, [r3, #12]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d020      	beq.n	80032a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003260:	4b34      	ldr	r3, [pc, #208]	; (8003334 <HAL_RCC_OscConfig+0x244>)
 8003262:	2201      	movs	r2, #1
 8003264:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003266:	f7fd fe35 	bl	8000ed4 <HAL_GetTick>
 800326a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800326c:	e008      	b.n	8003280 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800326e:	f7fd fe31 	bl	8000ed4 <HAL_GetTick>
 8003272:	4602      	mov	r2, r0
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	1ad3      	subs	r3, r2, r3
 8003278:	2b02      	cmp	r3, #2
 800327a:	d901      	bls.n	8003280 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800327c:	2303      	movs	r3, #3
 800327e:	e1a8      	b.n	80035d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003280:	4b2b      	ldr	r3, [pc, #172]	; (8003330 <HAL_RCC_OscConfig+0x240>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 0302 	and.w	r3, r3, #2
 8003288:	2b00      	cmp	r3, #0
 800328a:	d0f0      	beq.n	800326e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800328c:	4b28      	ldr	r3, [pc, #160]	; (8003330 <HAL_RCC_OscConfig+0x240>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	691b      	ldr	r3, [r3, #16]
 8003298:	00db      	lsls	r3, r3, #3
 800329a:	4925      	ldr	r1, [pc, #148]	; (8003330 <HAL_RCC_OscConfig+0x240>)
 800329c:	4313      	orrs	r3, r2
 800329e:	600b      	str	r3, [r1, #0]
 80032a0:	e015      	b.n	80032ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032a2:	4b24      	ldr	r3, [pc, #144]	; (8003334 <HAL_RCC_OscConfig+0x244>)
 80032a4:	2200      	movs	r2, #0
 80032a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032a8:	f7fd fe14 	bl	8000ed4 <HAL_GetTick>
 80032ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032ae:	e008      	b.n	80032c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032b0:	f7fd fe10 	bl	8000ed4 <HAL_GetTick>
 80032b4:	4602      	mov	r2, r0
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	1ad3      	subs	r3, r2, r3
 80032ba:	2b02      	cmp	r3, #2
 80032bc:	d901      	bls.n	80032c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80032be:	2303      	movs	r3, #3
 80032c0:	e187      	b.n	80035d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032c2:	4b1b      	ldr	r3, [pc, #108]	; (8003330 <HAL_RCC_OscConfig+0x240>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 0302 	and.w	r3, r3, #2
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d1f0      	bne.n	80032b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 0308 	and.w	r3, r3, #8
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d036      	beq.n	8003348 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	695b      	ldr	r3, [r3, #20]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d016      	beq.n	8003310 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032e2:	4b15      	ldr	r3, [pc, #84]	; (8003338 <HAL_RCC_OscConfig+0x248>)
 80032e4:	2201      	movs	r2, #1
 80032e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032e8:	f7fd fdf4 	bl	8000ed4 <HAL_GetTick>
 80032ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032ee:	e008      	b.n	8003302 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032f0:	f7fd fdf0 	bl	8000ed4 <HAL_GetTick>
 80032f4:	4602      	mov	r2, r0
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	2b02      	cmp	r3, #2
 80032fc:	d901      	bls.n	8003302 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80032fe:	2303      	movs	r3, #3
 8003300:	e167      	b.n	80035d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003302:	4b0b      	ldr	r3, [pc, #44]	; (8003330 <HAL_RCC_OscConfig+0x240>)
 8003304:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003306:	f003 0302 	and.w	r3, r3, #2
 800330a:	2b00      	cmp	r3, #0
 800330c:	d0f0      	beq.n	80032f0 <HAL_RCC_OscConfig+0x200>
 800330e:	e01b      	b.n	8003348 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003310:	4b09      	ldr	r3, [pc, #36]	; (8003338 <HAL_RCC_OscConfig+0x248>)
 8003312:	2200      	movs	r2, #0
 8003314:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003316:	f7fd fddd 	bl	8000ed4 <HAL_GetTick>
 800331a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800331c:	e00e      	b.n	800333c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800331e:	f7fd fdd9 	bl	8000ed4 <HAL_GetTick>
 8003322:	4602      	mov	r2, r0
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	1ad3      	subs	r3, r2, r3
 8003328:	2b02      	cmp	r3, #2
 800332a:	d907      	bls.n	800333c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800332c:	2303      	movs	r3, #3
 800332e:	e150      	b.n	80035d2 <HAL_RCC_OscConfig+0x4e2>
 8003330:	40023800 	.word	0x40023800
 8003334:	42470000 	.word	0x42470000
 8003338:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800333c:	4b88      	ldr	r3, [pc, #544]	; (8003560 <HAL_RCC_OscConfig+0x470>)
 800333e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003340:	f003 0302 	and.w	r3, r3, #2
 8003344:	2b00      	cmp	r3, #0
 8003346:	d1ea      	bne.n	800331e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 0304 	and.w	r3, r3, #4
 8003350:	2b00      	cmp	r3, #0
 8003352:	f000 8097 	beq.w	8003484 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003356:	2300      	movs	r3, #0
 8003358:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800335a:	4b81      	ldr	r3, [pc, #516]	; (8003560 <HAL_RCC_OscConfig+0x470>)
 800335c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003362:	2b00      	cmp	r3, #0
 8003364:	d10f      	bne.n	8003386 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003366:	2300      	movs	r3, #0
 8003368:	60bb      	str	r3, [r7, #8]
 800336a:	4b7d      	ldr	r3, [pc, #500]	; (8003560 <HAL_RCC_OscConfig+0x470>)
 800336c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336e:	4a7c      	ldr	r2, [pc, #496]	; (8003560 <HAL_RCC_OscConfig+0x470>)
 8003370:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003374:	6413      	str	r3, [r2, #64]	; 0x40
 8003376:	4b7a      	ldr	r3, [pc, #488]	; (8003560 <HAL_RCC_OscConfig+0x470>)
 8003378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800337a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800337e:	60bb      	str	r3, [r7, #8]
 8003380:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003382:	2301      	movs	r3, #1
 8003384:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003386:	4b77      	ldr	r3, [pc, #476]	; (8003564 <HAL_RCC_OscConfig+0x474>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800338e:	2b00      	cmp	r3, #0
 8003390:	d118      	bne.n	80033c4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003392:	4b74      	ldr	r3, [pc, #464]	; (8003564 <HAL_RCC_OscConfig+0x474>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a73      	ldr	r2, [pc, #460]	; (8003564 <HAL_RCC_OscConfig+0x474>)
 8003398:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800339c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800339e:	f7fd fd99 	bl	8000ed4 <HAL_GetTick>
 80033a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033a4:	e008      	b.n	80033b8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033a6:	f7fd fd95 	bl	8000ed4 <HAL_GetTick>
 80033aa:	4602      	mov	r2, r0
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	1ad3      	subs	r3, r2, r3
 80033b0:	2b02      	cmp	r3, #2
 80033b2:	d901      	bls.n	80033b8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80033b4:	2303      	movs	r3, #3
 80033b6:	e10c      	b.n	80035d2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033b8:	4b6a      	ldr	r3, [pc, #424]	; (8003564 <HAL_RCC_OscConfig+0x474>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d0f0      	beq.n	80033a6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d106      	bne.n	80033da <HAL_RCC_OscConfig+0x2ea>
 80033cc:	4b64      	ldr	r3, [pc, #400]	; (8003560 <HAL_RCC_OscConfig+0x470>)
 80033ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033d0:	4a63      	ldr	r2, [pc, #396]	; (8003560 <HAL_RCC_OscConfig+0x470>)
 80033d2:	f043 0301 	orr.w	r3, r3, #1
 80033d6:	6713      	str	r3, [r2, #112]	; 0x70
 80033d8:	e01c      	b.n	8003414 <HAL_RCC_OscConfig+0x324>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	2b05      	cmp	r3, #5
 80033e0:	d10c      	bne.n	80033fc <HAL_RCC_OscConfig+0x30c>
 80033e2:	4b5f      	ldr	r3, [pc, #380]	; (8003560 <HAL_RCC_OscConfig+0x470>)
 80033e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033e6:	4a5e      	ldr	r2, [pc, #376]	; (8003560 <HAL_RCC_OscConfig+0x470>)
 80033e8:	f043 0304 	orr.w	r3, r3, #4
 80033ec:	6713      	str	r3, [r2, #112]	; 0x70
 80033ee:	4b5c      	ldr	r3, [pc, #368]	; (8003560 <HAL_RCC_OscConfig+0x470>)
 80033f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033f2:	4a5b      	ldr	r2, [pc, #364]	; (8003560 <HAL_RCC_OscConfig+0x470>)
 80033f4:	f043 0301 	orr.w	r3, r3, #1
 80033f8:	6713      	str	r3, [r2, #112]	; 0x70
 80033fa:	e00b      	b.n	8003414 <HAL_RCC_OscConfig+0x324>
 80033fc:	4b58      	ldr	r3, [pc, #352]	; (8003560 <HAL_RCC_OscConfig+0x470>)
 80033fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003400:	4a57      	ldr	r2, [pc, #348]	; (8003560 <HAL_RCC_OscConfig+0x470>)
 8003402:	f023 0301 	bic.w	r3, r3, #1
 8003406:	6713      	str	r3, [r2, #112]	; 0x70
 8003408:	4b55      	ldr	r3, [pc, #340]	; (8003560 <HAL_RCC_OscConfig+0x470>)
 800340a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800340c:	4a54      	ldr	r2, [pc, #336]	; (8003560 <HAL_RCC_OscConfig+0x470>)
 800340e:	f023 0304 	bic.w	r3, r3, #4
 8003412:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d015      	beq.n	8003448 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800341c:	f7fd fd5a 	bl	8000ed4 <HAL_GetTick>
 8003420:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003422:	e00a      	b.n	800343a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003424:	f7fd fd56 	bl	8000ed4 <HAL_GetTick>
 8003428:	4602      	mov	r2, r0
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003432:	4293      	cmp	r3, r2
 8003434:	d901      	bls.n	800343a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003436:	2303      	movs	r3, #3
 8003438:	e0cb      	b.n	80035d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800343a:	4b49      	ldr	r3, [pc, #292]	; (8003560 <HAL_RCC_OscConfig+0x470>)
 800343c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800343e:	f003 0302 	and.w	r3, r3, #2
 8003442:	2b00      	cmp	r3, #0
 8003444:	d0ee      	beq.n	8003424 <HAL_RCC_OscConfig+0x334>
 8003446:	e014      	b.n	8003472 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003448:	f7fd fd44 	bl	8000ed4 <HAL_GetTick>
 800344c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800344e:	e00a      	b.n	8003466 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003450:	f7fd fd40 	bl	8000ed4 <HAL_GetTick>
 8003454:	4602      	mov	r2, r0
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	f241 3288 	movw	r2, #5000	; 0x1388
 800345e:	4293      	cmp	r3, r2
 8003460:	d901      	bls.n	8003466 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003462:	2303      	movs	r3, #3
 8003464:	e0b5      	b.n	80035d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003466:	4b3e      	ldr	r3, [pc, #248]	; (8003560 <HAL_RCC_OscConfig+0x470>)
 8003468:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800346a:	f003 0302 	and.w	r3, r3, #2
 800346e:	2b00      	cmp	r3, #0
 8003470:	d1ee      	bne.n	8003450 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003472:	7dfb      	ldrb	r3, [r7, #23]
 8003474:	2b01      	cmp	r3, #1
 8003476:	d105      	bne.n	8003484 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003478:	4b39      	ldr	r3, [pc, #228]	; (8003560 <HAL_RCC_OscConfig+0x470>)
 800347a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347c:	4a38      	ldr	r2, [pc, #224]	; (8003560 <HAL_RCC_OscConfig+0x470>)
 800347e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003482:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	699b      	ldr	r3, [r3, #24]
 8003488:	2b00      	cmp	r3, #0
 800348a:	f000 80a1 	beq.w	80035d0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800348e:	4b34      	ldr	r3, [pc, #208]	; (8003560 <HAL_RCC_OscConfig+0x470>)
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	f003 030c 	and.w	r3, r3, #12
 8003496:	2b08      	cmp	r3, #8
 8003498:	d05c      	beq.n	8003554 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	699b      	ldr	r3, [r3, #24]
 800349e:	2b02      	cmp	r3, #2
 80034a0:	d141      	bne.n	8003526 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034a2:	4b31      	ldr	r3, [pc, #196]	; (8003568 <HAL_RCC_OscConfig+0x478>)
 80034a4:	2200      	movs	r2, #0
 80034a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034a8:	f7fd fd14 	bl	8000ed4 <HAL_GetTick>
 80034ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034ae:	e008      	b.n	80034c2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034b0:	f7fd fd10 	bl	8000ed4 <HAL_GetTick>
 80034b4:	4602      	mov	r2, r0
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	1ad3      	subs	r3, r2, r3
 80034ba:	2b02      	cmp	r3, #2
 80034bc:	d901      	bls.n	80034c2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80034be:	2303      	movs	r3, #3
 80034c0:	e087      	b.n	80035d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034c2:	4b27      	ldr	r3, [pc, #156]	; (8003560 <HAL_RCC_OscConfig+0x470>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d1f0      	bne.n	80034b0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	69da      	ldr	r2, [r3, #28]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6a1b      	ldr	r3, [r3, #32]
 80034d6:	431a      	orrs	r2, r3
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034dc:	019b      	lsls	r3, r3, #6
 80034de:	431a      	orrs	r2, r3
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034e4:	085b      	lsrs	r3, r3, #1
 80034e6:	3b01      	subs	r3, #1
 80034e8:	041b      	lsls	r3, r3, #16
 80034ea:	431a      	orrs	r2, r3
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f0:	061b      	lsls	r3, r3, #24
 80034f2:	491b      	ldr	r1, [pc, #108]	; (8003560 <HAL_RCC_OscConfig+0x470>)
 80034f4:	4313      	orrs	r3, r2
 80034f6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034f8:	4b1b      	ldr	r3, [pc, #108]	; (8003568 <HAL_RCC_OscConfig+0x478>)
 80034fa:	2201      	movs	r2, #1
 80034fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034fe:	f7fd fce9 	bl	8000ed4 <HAL_GetTick>
 8003502:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003504:	e008      	b.n	8003518 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003506:	f7fd fce5 	bl	8000ed4 <HAL_GetTick>
 800350a:	4602      	mov	r2, r0
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	1ad3      	subs	r3, r2, r3
 8003510:	2b02      	cmp	r3, #2
 8003512:	d901      	bls.n	8003518 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003514:	2303      	movs	r3, #3
 8003516:	e05c      	b.n	80035d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003518:	4b11      	ldr	r3, [pc, #68]	; (8003560 <HAL_RCC_OscConfig+0x470>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003520:	2b00      	cmp	r3, #0
 8003522:	d0f0      	beq.n	8003506 <HAL_RCC_OscConfig+0x416>
 8003524:	e054      	b.n	80035d0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003526:	4b10      	ldr	r3, [pc, #64]	; (8003568 <HAL_RCC_OscConfig+0x478>)
 8003528:	2200      	movs	r2, #0
 800352a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800352c:	f7fd fcd2 	bl	8000ed4 <HAL_GetTick>
 8003530:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003532:	e008      	b.n	8003546 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003534:	f7fd fcce 	bl	8000ed4 <HAL_GetTick>
 8003538:	4602      	mov	r2, r0
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	1ad3      	subs	r3, r2, r3
 800353e:	2b02      	cmp	r3, #2
 8003540:	d901      	bls.n	8003546 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003542:	2303      	movs	r3, #3
 8003544:	e045      	b.n	80035d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003546:	4b06      	ldr	r3, [pc, #24]	; (8003560 <HAL_RCC_OscConfig+0x470>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800354e:	2b00      	cmp	r3, #0
 8003550:	d1f0      	bne.n	8003534 <HAL_RCC_OscConfig+0x444>
 8003552:	e03d      	b.n	80035d0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	699b      	ldr	r3, [r3, #24]
 8003558:	2b01      	cmp	r3, #1
 800355a:	d107      	bne.n	800356c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	e038      	b.n	80035d2 <HAL_RCC_OscConfig+0x4e2>
 8003560:	40023800 	.word	0x40023800
 8003564:	40007000 	.word	0x40007000
 8003568:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800356c:	4b1b      	ldr	r3, [pc, #108]	; (80035dc <HAL_RCC_OscConfig+0x4ec>)
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	699b      	ldr	r3, [r3, #24]
 8003576:	2b01      	cmp	r3, #1
 8003578:	d028      	beq.n	80035cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003584:	429a      	cmp	r2, r3
 8003586:	d121      	bne.n	80035cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003592:	429a      	cmp	r2, r3
 8003594:	d11a      	bne.n	80035cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003596:	68fa      	ldr	r2, [r7, #12]
 8003598:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800359c:	4013      	ands	r3, r2
 800359e:	687a      	ldr	r2, [r7, #4]
 80035a0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80035a2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d111      	bne.n	80035cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035b2:	085b      	lsrs	r3, r3, #1
 80035b4:	3b01      	subs	r3, #1
 80035b6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d107      	bne.n	80035cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035c8:	429a      	cmp	r2, r3
 80035ca:	d001      	beq.n	80035d0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80035cc:	2301      	movs	r3, #1
 80035ce:	e000      	b.n	80035d2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80035d0:	2300      	movs	r3, #0
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3718      	adds	r7, #24
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	bf00      	nop
 80035dc:	40023800 	.word	0x40023800

080035e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b084      	sub	sp, #16
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
 80035e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d101      	bne.n	80035f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	e0cc      	b.n	800378e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80035f4:	4b68      	ldr	r3, [pc, #416]	; (8003798 <HAL_RCC_ClockConfig+0x1b8>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 030f 	and.w	r3, r3, #15
 80035fc:	683a      	ldr	r2, [r7, #0]
 80035fe:	429a      	cmp	r2, r3
 8003600:	d90c      	bls.n	800361c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003602:	4b65      	ldr	r3, [pc, #404]	; (8003798 <HAL_RCC_ClockConfig+0x1b8>)
 8003604:	683a      	ldr	r2, [r7, #0]
 8003606:	b2d2      	uxtb	r2, r2
 8003608:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800360a:	4b63      	ldr	r3, [pc, #396]	; (8003798 <HAL_RCC_ClockConfig+0x1b8>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 030f 	and.w	r3, r3, #15
 8003612:	683a      	ldr	r2, [r7, #0]
 8003614:	429a      	cmp	r2, r3
 8003616:	d001      	beq.n	800361c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	e0b8      	b.n	800378e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 0302 	and.w	r3, r3, #2
 8003624:	2b00      	cmp	r3, #0
 8003626:	d020      	beq.n	800366a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f003 0304 	and.w	r3, r3, #4
 8003630:	2b00      	cmp	r3, #0
 8003632:	d005      	beq.n	8003640 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003634:	4b59      	ldr	r3, [pc, #356]	; (800379c <HAL_RCC_ClockConfig+0x1bc>)
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	4a58      	ldr	r2, [pc, #352]	; (800379c <HAL_RCC_ClockConfig+0x1bc>)
 800363a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800363e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f003 0308 	and.w	r3, r3, #8
 8003648:	2b00      	cmp	r3, #0
 800364a:	d005      	beq.n	8003658 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800364c:	4b53      	ldr	r3, [pc, #332]	; (800379c <HAL_RCC_ClockConfig+0x1bc>)
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	4a52      	ldr	r2, [pc, #328]	; (800379c <HAL_RCC_ClockConfig+0x1bc>)
 8003652:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003656:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003658:	4b50      	ldr	r3, [pc, #320]	; (800379c <HAL_RCC_ClockConfig+0x1bc>)
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	494d      	ldr	r1, [pc, #308]	; (800379c <HAL_RCC_ClockConfig+0x1bc>)
 8003666:	4313      	orrs	r3, r2
 8003668:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f003 0301 	and.w	r3, r3, #1
 8003672:	2b00      	cmp	r3, #0
 8003674:	d044      	beq.n	8003700 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	2b01      	cmp	r3, #1
 800367c:	d107      	bne.n	800368e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800367e:	4b47      	ldr	r3, [pc, #284]	; (800379c <HAL_RCC_ClockConfig+0x1bc>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003686:	2b00      	cmp	r3, #0
 8003688:	d119      	bne.n	80036be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e07f      	b.n	800378e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	2b02      	cmp	r3, #2
 8003694:	d003      	beq.n	800369e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800369a:	2b03      	cmp	r3, #3
 800369c:	d107      	bne.n	80036ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800369e:	4b3f      	ldr	r3, [pc, #252]	; (800379c <HAL_RCC_ClockConfig+0x1bc>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d109      	bne.n	80036be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e06f      	b.n	800378e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036ae:	4b3b      	ldr	r3, [pc, #236]	; (800379c <HAL_RCC_ClockConfig+0x1bc>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 0302 	and.w	r3, r3, #2
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d101      	bne.n	80036be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	e067      	b.n	800378e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036be:	4b37      	ldr	r3, [pc, #220]	; (800379c <HAL_RCC_ClockConfig+0x1bc>)
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	f023 0203 	bic.w	r2, r3, #3
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	4934      	ldr	r1, [pc, #208]	; (800379c <HAL_RCC_ClockConfig+0x1bc>)
 80036cc:	4313      	orrs	r3, r2
 80036ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80036d0:	f7fd fc00 	bl	8000ed4 <HAL_GetTick>
 80036d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036d6:	e00a      	b.n	80036ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036d8:	f7fd fbfc 	bl	8000ed4 <HAL_GetTick>
 80036dc:	4602      	mov	r2, r0
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	1ad3      	subs	r3, r2, r3
 80036e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d901      	bls.n	80036ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80036ea:	2303      	movs	r3, #3
 80036ec:	e04f      	b.n	800378e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036ee:	4b2b      	ldr	r3, [pc, #172]	; (800379c <HAL_RCC_ClockConfig+0x1bc>)
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	f003 020c 	and.w	r2, r3, #12
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	429a      	cmp	r2, r3
 80036fe:	d1eb      	bne.n	80036d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003700:	4b25      	ldr	r3, [pc, #148]	; (8003798 <HAL_RCC_ClockConfig+0x1b8>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f003 030f 	and.w	r3, r3, #15
 8003708:	683a      	ldr	r2, [r7, #0]
 800370a:	429a      	cmp	r2, r3
 800370c:	d20c      	bcs.n	8003728 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800370e:	4b22      	ldr	r3, [pc, #136]	; (8003798 <HAL_RCC_ClockConfig+0x1b8>)
 8003710:	683a      	ldr	r2, [r7, #0]
 8003712:	b2d2      	uxtb	r2, r2
 8003714:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003716:	4b20      	ldr	r3, [pc, #128]	; (8003798 <HAL_RCC_ClockConfig+0x1b8>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 030f 	and.w	r3, r3, #15
 800371e:	683a      	ldr	r2, [r7, #0]
 8003720:	429a      	cmp	r2, r3
 8003722:	d001      	beq.n	8003728 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	e032      	b.n	800378e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 0304 	and.w	r3, r3, #4
 8003730:	2b00      	cmp	r3, #0
 8003732:	d008      	beq.n	8003746 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003734:	4b19      	ldr	r3, [pc, #100]	; (800379c <HAL_RCC_ClockConfig+0x1bc>)
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	68db      	ldr	r3, [r3, #12]
 8003740:	4916      	ldr	r1, [pc, #88]	; (800379c <HAL_RCC_ClockConfig+0x1bc>)
 8003742:	4313      	orrs	r3, r2
 8003744:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 0308 	and.w	r3, r3, #8
 800374e:	2b00      	cmp	r3, #0
 8003750:	d009      	beq.n	8003766 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003752:	4b12      	ldr	r3, [pc, #72]	; (800379c <HAL_RCC_ClockConfig+0x1bc>)
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	691b      	ldr	r3, [r3, #16]
 800375e:	00db      	lsls	r3, r3, #3
 8003760:	490e      	ldr	r1, [pc, #56]	; (800379c <HAL_RCC_ClockConfig+0x1bc>)
 8003762:	4313      	orrs	r3, r2
 8003764:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003766:	f000 f821 	bl	80037ac <HAL_RCC_GetSysClockFreq>
 800376a:	4602      	mov	r2, r0
 800376c:	4b0b      	ldr	r3, [pc, #44]	; (800379c <HAL_RCC_ClockConfig+0x1bc>)
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	091b      	lsrs	r3, r3, #4
 8003772:	f003 030f 	and.w	r3, r3, #15
 8003776:	490a      	ldr	r1, [pc, #40]	; (80037a0 <HAL_RCC_ClockConfig+0x1c0>)
 8003778:	5ccb      	ldrb	r3, [r1, r3]
 800377a:	fa22 f303 	lsr.w	r3, r2, r3
 800377e:	4a09      	ldr	r2, [pc, #36]	; (80037a4 <HAL_RCC_ClockConfig+0x1c4>)
 8003780:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003782:	4b09      	ldr	r3, [pc, #36]	; (80037a8 <HAL_RCC_ClockConfig+0x1c8>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4618      	mov	r0, r3
 8003788:	f7fd f9a0 	bl	8000acc <HAL_InitTick>

  return HAL_OK;
 800378c:	2300      	movs	r3, #0
}
 800378e:	4618      	mov	r0, r3
 8003790:	3710      	adds	r7, #16
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}
 8003796:	bf00      	nop
 8003798:	40023c00 	.word	0x40023c00
 800379c:	40023800 	.word	0x40023800
 80037a0:	0800b350 	.word	0x0800b350
 80037a4:	20000000 	.word	0x20000000
 80037a8:	20000004 	.word	0x20000004

080037ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80037b0:	b090      	sub	sp, #64	; 0x40
 80037b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80037b4:	2300      	movs	r3, #0
 80037b6:	637b      	str	r3, [r7, #52]	; 0x34
 80037b8:	2300      	movs	r3, #0
 80037ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80037bc:	2300      	movs	r3, #0
 80037be:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80037c0:	2300      	movs	r3, #0
 80037c2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80037c4:	4b59      	ldr	r3, [pc, #356]	; (800392c <HAL_RCC_GetSysClockFreq+0x180>)
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	f003 030c 	and.w	r3, r3, #12
 80037cc:	2b08      	cmp	r3, #8
 80037ce:	d00d      	beq.n	80037ec <HAL_RCC_GetSysClockFreq+0x40>
 80037d0:	2b08      	cmp	r3, #8
 80037d2:	f200 80a1 	bhi.w	8003918 <HAL_RCC_GetSysClockFreq+0x16c>
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d002      	beq.n	80037e0 <HAL_RCC_GetSysClockFreq+0x34>
 80037da:	2b04      	cmp	r3, #4
 80037dc:	d003      	beq.n	80037e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80037de:	e09b      	b.n	8003918 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80037e0:	4b53      	ldr	r3, [pc, #332]	; (8003930 <HAL_RCC_GetSysClockFreq+0x184>)
 80037e2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80037e4:	e09b      	b.n	800391e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80037e6:	4b53      	ldr	r3, [pc, #332]	; (8003934 <HAL_RCC_GetSysClockFreq+0x188>)
 80037e8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80037ea:	e098      	b.n	800391e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80037ec:	4b4f      	ldr	r3, [pc, #316]	; (800392c <HAL_RCC_GetSysClockFreq+0x180>)
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80037f4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80037f6:	4b4d      	ldr	r3, [pc, #308]	; (800392c <HAL_RCC_GetSysClockFreq+0x180>)
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d028      	beq.n	8003854 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003802:	4b4a      	ldr	r3, [pc, #296]	; (800392c <HAL_RCC_GetSysClockFreq+0x180>)
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	099b      	lsrs	r3, r3, #6
 8003808:	2200      	movs	r2, #0
 800380a:	623b      	str	r3, [r7, #32]
 800380c:	627a      	str	r2, [r7, #36]	; 0x24
 800380e:	6a3b      	ldr	r3, [r7, #32]
 8003810:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003814:	2100      	movs	r1, #0
 8003816:	4b47      	ldr	r3, [pc, #284]	; (8003934 <HAL_RCC_GetSysClockFreq+0x188>)
 8003818:	fb03 f201 	mul.w	r2, r3, r1
 800381c:	2300      	movs	r3, #0
 800381e:	fb00 f303 	mul.w	r3, r0, r3
 8003822:	4413      	add	r3, r2
 8003824:	4a43      	ldr	r2, [pc, #268]	; (8003934 <HAL_RCC_GetSysClockFreq+0x188>)
 8003826:	fba0 1202 	umull	r1, r2, r0, r2
 800382a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800382c:	460a      	mov	r2, r1
 800382e:	62ba      	str	r2, [r7, #40]	; 0x28
 8003830:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003832:	4413      	add	r3, r2
 8003834:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003836:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003838:	2200      	movs	r2, #0
 800383a:	61bb      	str	r3, [r7, #24]
 800383c:	61fa      	str	r2, [r7, #28]
 800383e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003842:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003846:	f7fc fcd3 	bl	80001f0 <__aeabi_uldivmod>
 800384a:	4602      	mov	r2, r0
 800384c:	460b      	mov	r3, r1
 800384e:	4613      	mov	r3, r2
 8003850:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003852:	e053      	b.n	80038fc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003854:	4b35      	ldr	r3, [pc, #212]	; (800392c <HAL_RCC_GetSysClockFreq+0x180>)
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	099b      	lsrs	r3, r3, #6
 800385a:	2200      	movs	r2, #0
 800385c:	613b      	str	r3, [r7, #16]
 800385e:	617a      	str	r2, [r7, #20]
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003866:	f04f 0b00 	mov.w	fp, #0
 800386a:	4652      	mov	r2, sl
 800386c:	465b      	mov	r3, fp
 800386e:	f04f 0000 	mov.w	r0, #0
 8003872:	f04f 0100 	mov.w	r1, #0
 8003876:	0159      	lsls	r1, r3, #5
 8003878:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800387c:	0150      	lsls	r0, r2, #5
 800387e:	4602      	mov	r2, r0
 8003880:	460b      	mov	r3, r1
 8003882:	ebb2 080a 	subs.w	r8, r2, sl
 8003886:	eb63 090b 	sbc.w	r9, r3, fp
 800388a:	f04f 0200 	mov.w	r2, #0
 800388e:	f04f 0300 	mov.w	r3, #0
 8003892:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003896:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800389a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800389e:	ebb2 0408 	subs.w	r4, r2, r8
 80038a2:	eb63 0509 	sbc.w	r5, r3, r9
 80038a6:	f04f 0200 	mov.w	r2, #0
 80038aa:	f04f 0300 	mov.w	r3, #0
 80038ae:	00eb      	lsls	r3, r5, #3
 80038b0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80038b4:	00e2      	lsls	r2, r4, #3
 80038b6:	4614      	mov	r4, r2
 80038b8:	461d      	mov	r5, r3
 80038ba:	eb14 030a 	adds.w	r3, r4, sl
 80038be:	603b      	str	r3, [r7, #0]
 80038c0:	eb45 030b 	adc.w	r3, r5, fp
 80038c4:	607b      	str	r3, [r7, #4]
 80038c6:	f04f 0200 	mov.w	r2, #0
 80038ca:	f04f 0300 	mov.w	r3, #0
 80038ce:	e9d7 4500 	ldrd	r4, r5, [r7]
 80038d2:	4629      	mov	r1, r5
 80038d4:	028b      	lsls	r3, r1, #10
 80038d6:	4621      	mov	r1, r4
 80038d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80038dc:	4621      	mov	r1, r4
 80038de:	028a      	lsls	r2, r1, #10
 80038e0:	4610      	mov	r0, r2
 80038e2:	4619      	mov	r1, r3
 80038e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038e6:	2200      	movs	r2, #0
 80038e8:	60bb      	str	r3, [r7, #8]
 80038ea:	60fa      	str	r2, [r7, #12]
 80038ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80038f0:	f7fc fc7e 	bl	80001f0 <__aeabi_uldivmod>
 80038f4:	4602      	mov	r2, r0
 80038f6:	460b      	mov	r3, r1
 80038f8:	4613      	mov	r3, r2
 80038fa:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80038fc:	4b0b      	ldr	r3, [pc, #44]	; (800392c <HAL_RCC_GetSysClockFreq+0x180>)
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	0c1b      	lsrs	r3, r3, #16
 8003902:	f003 0303 	and.w	r3, r3, #3
 8003906:	3301      	adds	r3, #1
 8003908:	005b      	lsls	r3, r3, #1
 800390a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800390c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800390e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003910:	fbb2 f3f3 	udiv	r3, r2, r3
 8003914:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003916:	e002      	b.n	800391e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003918:	4b05      	ldr	r3, [pc, #20]	; (8003930 <HAL_RCC_GetSysClockFreq+0x184>)
 800391a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800391c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800391e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003920:	4618      	mov	r0, r3
 8003922:	3740      	adds	r7, #64	; 0x40
 8003924:	46bd      	mov	sp, r7
 8003926:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800392a:	bf00      	nop
 800392c:	40023800 	.word	0x40023800
 8003930:	00f42400 	.word	0x00f42400
 8003934:	00b71b00 	.word	0x00b71b00

08003938 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003938:	b480      	push	{r7}
 800393a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800393c:	4b03      	ldr	r3, [pc, #12]	; (800394c <HAL_RCC_GetHCLKFreq+0x14>)
 800393e:	681b      	ldr	r3, [r3, #0]
}
 8003940:	4618      	mov	r0, r3
 8003942:	46bd      	mov	sp, r7
 8003944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003948:	4770      	bx	lr
 800394a:	bf00      	nop
 800394c:	20000000 	.word	0x20000000

08003950 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003954:	f7ff fff0 	bl	8003938 <HAL_RCC_GetHCLKFreq>
 8003958:	4602      	mov	r2, r0
 800395a:	4b05      	ldr	r3, [pc, #20]	; (8003970 <HAL_RCC_GetPCLK1Freq+0x20>)
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	0a9b      	lsrs	r3, r3, #10
 8003960:	f003 0307 	and.w	r3, r3, #7
 8003964:	4903      	ldr	r1, [pc, #12]	; (8003974 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003966:	5ccb      	ldrb	r3, [r1, r3]
 8003968:	fa22 f303 	lsr.w	r3, r2, r3
}
 800396c:	4618      	mov	r0, r3
 800396e:	bd80      	pop	{r7, pc}
 8003970:	40023800 	.word	0x40023800
 8003974:	0800b360 	.word	0x0800b360

08003978 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800397c:	f7ff ffdc 	bl	8003938 <HAL_RCC_GetHCLKFreq>
 8003980:	4602      	mov	r2, r0
 8003982:	4b05      	ldr	r3, [pc, #20]	; (8003998 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	0b5b      	lsrs	r3, r3, #13
 8003988:	f003 0307 	and.w	r3, r3, #7
 800398c:	4903      	ldr	r1, [pc, #12]	; (800399c <HAL_RCC_GetPCLK2Freq+0x24>)
 800398e:	5ccb      	ldrb	r3, [r1, r3]
 8003990:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003994:	4618      	mov	r0, r3
 8003996:	bd80      	pop	{r7, pc}
 8003998:	40023800 	.word	0x40023800
 800399c:	0800b360 	.word	0x0800b360

080039a0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b083      	sub	sp, #12
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
 80039a8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	220f      	movs	r2, #15
 80039ae:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80039b0:	4b12      	ldr	r3, [pc, #72]	; (80039fc <HAL_RCC_GetClockConfig+0x5c>)
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	f003 0203 	and.w	r2, r3, #3
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80039bc:	4b0f      	ldr	r3, [pc, #60]	; (80039fc <HAL_RCC_GetClockConfig+0x5c>)
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80039c8:	4b0c      	ldr	r3, [pc, #48]	; (80039fc <HAL_RCC_GetClockConfig+0x5c>)
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80039d4:	4b09      	ldr	r3, [pc, #36]	; (80039fc <HAL_RCC_GetClockConfig+0x5c>)
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	08db      	lsrs	r3, r3, #3
 80039da:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80039e2:	4b07      	ldr	r3, [pc, #28]	; (8003a00 <HAL_RCC_GetClockConfig+0x60>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 020f 	and.w	r2, r3, #15
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	601a      	str	r2, [r3, #0]
}
 80039ee:	bf00      	nop
 80039f0:	370c      	adds	r7, #12
 80039f2:	46bd      	mov	sp, r7
 80039f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f8:	4770      	bx	lr
 80039fa:	bf00      	nop
 80039fc:	40023800 	.word	0x40023800
 8003a00:	40023c00 	.word	0x40023c00

08003a04 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b082      	sub	sp, #8
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d101      	bne.n	8003a16 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	e07b      	b.n	8003b0e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d108      	bne.n	8003a30 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a26:	d009      	beq.n	8003a3c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	61da      	str	r2, [r3, #28]
 8003a2e:	e005      	b.n	8003a3c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2200      	movs	r2, #0
 8003a34:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a48:	b2db      	uxtb	r3, r3
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d106      	bne.n	8003a5c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2200      	movs	r2, #0
 8003a52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f7fc ffc4 	bl	80009e4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2202      	movs	r2, #2
 8003a60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a72:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003a84:	431a      	orrs	r2, r3
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	68db      	ldr	r3, [r3, #12]
 8003a8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a8e:	431a      	orrs	r2, r3
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	691b      	ldr	r3, [r3, #16]
 8003a94:	f003 0302 	and.w	r3, r3, #2
 8003a98:	431a      	orrs	r2, r3
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	695b      	ldr	r3, [r3, #20]
 8003a9e:	f003 0301 	and.w	r3, r3, #1
 8003aa2:	431a      	orrs	r2, r3
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	699b      	ldr	r3, [r3, #24]
 8003aa8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003aac:	431a      	orrs	r2, r3
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	69db      	ldr	r3, [r3, #28]
 8003ab2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003ab6:	431a      	orrs	r2, r3
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6a1b      	ldr	r3, [r3, #32]
 8003abc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ac0:	ea42 0103 	orr.w	r1, r2, r3
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ac8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	430a      	orrs	r2, r1
 8003ad2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	699b      	ldr	r3, [r3, #24]
 8003ad8:	0c1b      	lsrs	r3, r3, #16
 8003ada:	f003 0104 	and.w	r1, r3, #4
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae2:	f003 0210 	and.w	r2, r3, #16
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	430a      	orrs	r2, r1
 8003aec:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	69da      	ldr	r2, [r3, #28]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003afc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2200      	movs	r2, #0
 8003b02:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2201      	movs	r2, #1
 8003b08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003b0c:	2300      	movs	r3, #0
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3708      	adds	r7, #8
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}

08003b16 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b16:	b580      	push	{r7, lr}
 8003b18:	b082      	sub	sp, #8
 8003b1a:	af00      	add	r7, sp, #0
 8003b1c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d101      	bne.n	8003b28 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	e041      	b.n	8003bac <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b2e:	b2db      	uxtb	r3, r3
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d106      	bne.n	8003b42 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2200      	movs	r2, #0
 8003b38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b3c:	6878      	ldr	r0, [r7, #4]
 8003b3e:	f000 f839 	bl	8003bb4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2202      	movs	r2, #2
 8003b46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681a      	ldr	r2, [r3, #0]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	3304      	adds	r3, #4
 8003b52:	4619      	mov	r1, r3
 8003b54:	4610      	mov	r0, r2
 8003b56:	f000 f9bf 	bl	8003ed8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2201      	movs	r2, #1
 8003b5e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2201      	movs	r2, #1
 8003b66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2201      	movs	r2, #1
 8003b6e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2201      	movs	r2, #1
 8003b76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2201      	movs	r2, #1
 8003b7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2201      	movs	r2, #1
 8003b86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2201      	movs	r2, #1
 8003b96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2201      	movs	r2, #1
 8003b9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003baa:	2300      	movs	r3, #0
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	3708      	adds	r7, #8
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}

08003bb4 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b083      	sub	sp, #12
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003bbc:	bf00      	nop
 8003bbe:	370c      	adds	r7, #12
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc6:	4770      	bx	lr

08003bc8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b085      	sub	sp, #20
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bd6:	b2db      	uxtb	r3, r3
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d001      	beq.n	8003be0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	e04e      	b.n	8003c7e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2202      	movs	r2, #2
 8003be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	68da      	ldr	r2, [r3, #12]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f042 0201 	orr.w	r2, r2, #1
 8003bf6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a23      	ldr	r2, [pc, #140]	; (8003c8c <HAL_TIM_Base_Start_IT+0xc4>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d022      	beq.n	8003c48 <HAL_TIM_Base_Start_IT+0x80>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c0a:	d01d      	beq.n	8003c48 <HAL_TIM_Base_Start_IT+0x80>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a1f      	ldr	r2, [pc, #124]	; (8003c90 <HAL_TIM_Base_Start_IT+0xc8>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d018      	beq.n	8003c48 <HAL_TIM_Base_Start_IT+0x80>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a1e      	ldr	r2, [pc, #120]	; (8003c94 <HAL_TIM_Base_Start_IT+0xcc>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d013      	beq.n	8003c48 <HAL_TIM_Base_Start_IT+0x80>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a1c      	ldr	r2, [pc, #112]	; (8003c98 <HAL_TIM_Base_Start_IT+0xd0>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d00e      	beq.n	8003c48 <HAL_TIM_Base_Start_IT+0x80>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a1b      	ldr	r2, [pc, #108]	; (8003c9c <HAL_TIM_Base_Start_IT+0xd4>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d009      	beq.n	8003c48 <HAL_TIM_Base_Start_IT+0x80>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a19      	ldr	r2, [pc, #100]	; (8003ca0 <HAL_TIM_Base_Start_IT+0xd8>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d004      	beq.n	8003c48 <HAL_TIM_Base_Start_IT+0x80>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a18      	ldr	r2, [pc, #96]	; (8003ca4 <HAL_TIM_Base_Start_IT+0xdc>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d111      	bne.n	8003c6c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	f003 0307 	and.w	r3, r3, #7
 8003c52:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2b06      	cmp	r3, #6
 8003c58:	d010      	beq.n	8003c7c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f042 0201 	orr.w	r2, r2, #1
 8003c68:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c6a:	e007      	b.n	8003c7c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f042 0201 	orr.w	r2, r2, #1
 8003c7a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003c7c:	2300      	movs	r3, #0
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	3714      	adds	r7, #20
 8003c82:	46bd      	mov	sp, r7
 8003c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c88:	4770      	bx	lr
 8003c8a:	bf00      	nop
 8003c8c:	40010000 	.word	0x40010000
 8003c90:	40000400 	.word	0x40000400
 8003c94:	40000800 	.word	0x40000800
 8003c98:	40000c00 	.word	0x40000c00
 8003c9c:	40010400 	.word	0x40010400
 8003ca0:	40014000 	.word	0x40014000
 8003ca4:	40001800 	.word	0x40001800

08003ca8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b084      	sub	sp, #16
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	68db      	ldr	r3, [r3, #12]
 8003cb6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	691b      	ldr	r3, [r3, #16]
 8003cbe:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	f003 0302 	and.w	r3, r3, #2
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d020      	beq.n	8003d0c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	f003 0302 	and.w	r3, r3, #2
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d01b      	beq.n	8003d0c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f06f 0202 	mvn.w	r2, #2
 8003cdc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	699b      	ldr	r3, [r3, #24]
 8003cea:	f003 0303 	and.w	r3, r3, #3
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d003      	beq.n	8003cfa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	f000 f8d2 	bl	8003e9c <HAL_TIM_IC_CaptureCallback>
 8003cf8:	e005      	b.n	8003d06 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	f000 f8c4 	bl	8003e88 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d00:	6878      	ldr	r0, [r7, #4]
 8003d02:	f000 f8d5 	bl	8003eb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	f003 0304 	and.w	r3, r3, #4
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d020      	beq.n	8003d58 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	f003 0304 	and.w	r3, r3, #4
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d01b      	beq.n	8003d58 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f06f 0204 	mvn.w	r2, #4
 8003d28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2202      	movs	r2, #2
 8003d2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	699b      	ldr	r3, [r3, #24]
 8003d36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d003      	beq.n	8003d46 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d3e:	6878      	ldr	r0, [r7, #4]
 8003d40:	f000 f8ac 	bl	8003e9c <HAL_TIM_IC_CaptureCallback>
 8003d44:	e005      	b.n	8003d52 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d46:	6878      	ldr	r0, [r7, #4]
 8003d48:	f000 f89e 	bl	8003e88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d4c:	6878      	ldr	r0, [r7, #4]
 8003d4e:	f000 f8af 	bl	8003eb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2200      	movs	r2, #0
 8003d56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	f003 0308 	and.w	r3, r3, #8
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d020      	beq.n	8003da4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	f003 0308 	and.w	r3, r3, #8
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d01b      	beq.n	8003da4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f06f 0208 	mvn.w	r2, #8
 8003d74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2204      	movs	r2, #4
 8003d7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	69db      	ldr	r3, [r3, #28]
 8003d82:	f003 0303 	and.w	r3, r3, #3
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d003      	beq.n	8003d92 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f000 f886 	bl	8003e9c <HAL_TIM_IC_CaptureCallback>
 8003d90:	e005      	b.n	8003d9e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	f000 f878 	bl	8003e88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d98:	6878      	ldr	r0, [r7, #4]
 8003d9a:	f000 f889 	bl	8003eb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2200      	movs	r2, #0
 8003da2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	f003 0310 	and.w	r3, r3, #16
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d020      	beq.n	8003df0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	f003 0310 	and.w	r3, r3, #16
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d01b      	beq.n	8003df0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f06f 0210 	mvn.w	r2, #16
 8003dc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2208      	movs	r2, #8
 8003dc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	69db      	ldr	r3, [r3, #28]
 8003dce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d003      	beq.n	8003dde <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f000 f860 	bl	8003e9c <HAL_TIM_IC_CaptureCallback>
 8003ddc:	e005      	b.n	8003dea <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f000 f852 	bl	8003e88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003de4:	6878      	ldr	r0, [r7, #4]
 8003de6:	f000 f863 	bl	8003eb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2200      	movs	r2, #0
 8003dee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	f003 0301 	and.w	r3, r3, #1
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d00c      	beq.n	8003e14 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	f003 0301 	and.w	r3, r3, #1
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d007      	beq.n	8003e14 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f06f 0201 	mvn.w	r2, #1
 8003e0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f7fc fd9a 	bl	8000948 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d00c      	beq.n	8003e38 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d007      	beq.n	8003e38 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003e30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f000 f906 	bl	8004044 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d00c      	beq.n	8003e5c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d007      	beq.n	8003e5c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003e54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	f000 f834 	bl	8003ec4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	f003 0320 	and.w	r3, r3, #32
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d00c      	beq.n	8003e80 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	f003 0320 	and.w	r3, r3, #32
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d007      	beq.n	8003e80 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f06f 0220 	mvn.w	r2, #32
 8003e78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	f000 f8d8 	bl	8004030 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003e80:	bf00      	nop
 8003e82:	3710      	adds	r7, #16
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}

08003e88 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b083      	sub	sp, #12
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003e90:	bf00      	nop
 8003e92:	370c      	adds	r7, #12
 8003e94:	46bd      	mov	sp, r7
 8003e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9a:	4770      	bx	lr

08003e9c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b083      	sub	sp, #12
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003ea4:	bf00      	nop
 8003ea6:	370c      	adds	r7, #12
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eae:	4770      	bx	lr

08003eb0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b083      	sub	sp, #12
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003eb8:	bf00      	nop
 8003eba:	370c      	adds	r7, #12
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec2:	4770      	bx	lr

08003ec4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b083      	sub	sp, #12
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003ecc:	bf00      	nop
 8003ece:	370c      	adds	r7, #12
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed6:	4770      	bx	lr

08003ed8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b085      	sub	sp, #20
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
 8003ee0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	4a46      	ldr	r2, [pc, #280]	; (8004004 <TIM_Base_SetConfig+0x12c>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d013      	beq.n	8003f18 <TIM_Base_SetConfig+0x40>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ef6:	d00f      	beq.n	8003f18 <TIM_Base_SetConfig+0x40>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	4a43      	ldr	r2, [pc, #268]	; (8004008 <TIM_Base_SetConfig+0x130>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d00b      	beq.n	8003f18 <TIM_Base_SetConfig+0x40>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	4a42      	ldr	r2, [pc, #264]	; (800400c <TIM_Base_SetConfig+0x134>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d007      	beq.n	8003f18 <TIM_Base_SetConfig+0x40>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	4a41      	ldr	r2, [pc, #260]	; (8004010 <TIM_Base_SetConfig+0x138>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d003      	beq.n	8003f18 <TIM_Base_SetConfig+0x40>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	4a40      	ldr	r2, [pc, #256]	; (8004014 <TIM_Base_SetConfig+0x13c>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d108      	bne.n	8003f2a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	68fa      	ldr	r2, [r7, #12]
 8003f26:	4313      	orrs	r3, r2
 8003f28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	4a35      	ldr	r2, [pc, #212]	; (8004004 <TIM_Base_SetConfig+0x12c>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d02b      	beq.n	8003f8a <TIM_Base_SetConfig+0xb2>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f38:	d027      	beq.n	8003f8a <TIM_Base_SetConfig+0xb2>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	4a32      	ldr	r2, [pc, #200]	; (8004008 <TIM_Base_SetConfig+0x130>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d023      	beq.n	8003f8a <TIM_Base_SetConfig+0xb2>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	4a31      	ldr	r2, [pc, #196]	; (800400c <TIM_Base_SetConfig+0x134>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d01f      	beq.n	8003f8a <TIM_Base_SetConfig+0xb2>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	4a30      	ldr	r2, [pc, #192]	; (8004010 <TIM_Base_SetConfig+0x138>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d01b      	beq.n	8003f8a <TIM_Base_SetConfig+0xb2>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	4a2f      	ldr	r2, [pc, #188]	; (8004014 <TIM_Base_SetConfig+0x13c>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d017      	beq.n	8003f8a <TIM_Base_SetConfig+0xb2>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	4a2e      	ldr	r2, [pc, #184]	; (8004018 <TIM_Base_SetConfig+0x140>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d013      	beq.n	8003f8a <TIM_Base_SetConfig+0xb2>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	4a2d      	ldr	r2, [pc, #180]	; (800401c <TIM_Base_SetConfig+0x144>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d00f      	beq.n	8003f8a <TIM_Base_SetConfig+0xb2>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	4a2c      	ldr	r2, [pc, #176]	; (8004020 <TIM_Base_SetConfig+0x148>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d00b      	beq.n	8003f8a <TIM_Base_SetConfig+0xb2>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	4a2b      	ldr	r2, [pc, #172]	; (8004024 <TIM_Base_SetConfig+0x14c>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d007      	beq.n	8003f8a <TIM_Base_SetConfig+0xb2>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	4a2a      	ldr	r2, [pc, #168]	; (8004028 <TIM_Base_SetConfig+0x150>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d003      	beq.n	8003f8a <TIM_Base_SetConfig+0xb2>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	4a29      	ldr	r2, [pc, #164]	; (800402c <TIM_Base_SetConfig+0x154>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d108      	bne.n	8003f9c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	68db      	ldr	r3, [r3, #12]
 8003f96:	68fa      	ldr	r2, [r7, #12]
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	695b      	ldr	r3, [r3, #20]
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	68fa      	ldr	r2, [r7, #12]
 8003fae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	689a      	ldr	r2, [r3, #8]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	4a10      	ldr	r2, [pc, #64]	; (8004004 <TIM_Base_SetConfig+0x12c>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d003      	beq.n	8003fd0 <TIM_Base_SetConfig+0xf8>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	4a12      	ldr	r2, [pc, #72]	; (8004014 <TIM_Base_SetConfig+0x13c>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d103      	bne.n	8003fd8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	691a      	ldr	r2, [r3, #16]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	691b      	ldr	r3, [r3, #16]
 8003fe2:	f003 0301 	and.w	r3, r3, #1
 8003fe6:	2b01      	cmp	r3, #1
 8003fe8:	d105      	bne.n	8003ff6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	691b      	ldr	r3, [r3, #16]
 8003fee:	f023 0201 	bic.w	r2, r3, #1
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	611a      	str	r2, [r3, #16]
  }
}
 8003ff6:	bf00      	nop
 8003ff8:	3714      	adds	r7, #20
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004000:	4770      	bx	lr
 8004002:	bf00      	nop
 8004004:	40010000 	.word	0x40010000
 8004008:	40000400 	.word	0x40000400
 800400c:	40000800 	.word	0x40000800
 8004010:	40000c00 	.word	0x40000c00
 8004014:	40010400 	.word	0x40010400
 8004018:	40014000 	.word	0x40014000
 800401c:	40014400 	.word	0x40014400
 8004020:	40014800 	.word	0x40014800
 8004024:	40001800 	.word	0x40001800
 8004028:	40001c00 	.word	0x40001c00
 800402c:	40002000 	.word	0x40002000

08004030 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004030:	b480      	push	{r7}
 8004032:	b083      	sub	sp, #12
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004038:	bf00      	nop
 800403a:	370c      	adds	r7, #12
 800403c:	46bd      	mov	sp, r7
 800403e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004042:	4770      	bx	lr

08004044 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004044:	b480      	push	{r7}
 8004046:	b083      	sub	sp, #12
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800404c:	bf00      	nop
 800404e:	370c      	adds	r7, #12
 8004050:	46bd      	mov	sp, r7
 8004052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004056:	4770      	bx	lr

08004058 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b082      	sub	sp, #8
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d101      	bne.n	800406a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004066:	2301      	movs	r3, #1
 8004068:	e042      	b.n	80040f0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004070:	b2db      	uxtb	r3, r3
 8004072:	2b00      	cmp	r3, #0
 8004074:	d106      	bne.n	8004084 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2200      	movs	r2, #0
 800407a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	f7fc fe1a 	bl	8000cb8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2224      	movs	r2, #36	; 0x24
 8004088:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	68da      	ldr	r2, [r3, #12]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800409a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800409c:	6878      	ldr	r0, [r7, #4]
 800409e:	f000 f82b 	bl	80040f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	691a      	ldr	r2, [r3, #16]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80040b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	695a      	ldr	r2, [r3, #20]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80040c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	68da      	ldr	r2, [r3, #12]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80040d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2200      	movs	r2, #0
 80040d6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2220      	movs	r2, #32
 80040dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2220      	movs	r2, #32
 80040e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2200      	movs	r2, #0
 80040ec:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80040ee:	2300      	movs	r3, #0
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	3708      	adds	r7, #8
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd80      	pop	{r7, pc}

080040f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80040f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040fc:	b0c0      	sub	sp, #256	; 0x100
 80040fe:	af00      	add	r7, sp, #0
 8004100:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004104:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	691b      	ldr	r3, [r3, #16]
 800410c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004110:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004114:	68d9      	ldr	r1, [r3, #12]
 8004116:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	ea40 0301 	orr.w	r3, r0, r1
 8004120:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004122:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004126:	689a      	ldr	r2, [r3, #8]
 8004128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800412c:	691b      	ldr	r3, [r3, #16]
 800412e:	431a      	orrs	r2, r3
 8004130:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004134:	695b      	ldr	r3, [r3, #20]
 8004136:	431a      	orrs	r2, r3
 8004138:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800413c:	69db      	ldr	r3, [r3, #28]
 800413e:	4313      	orrs	r3, r2
 8004140:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004144:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	68db      	ldr	r3, [r3, #12]
 800414c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004150:	f021 010c 	bic.w	r1, r1, #12
 8004154:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004158:	681a      	ldr	r2, [r3, #0]
 800415a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800415e:	430b      	orrs	r3, r1
 8004160:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004162:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	695b      	ldr	r3, [r3, #20]
 800416a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800416e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004172:	6999      	ldr	r1, [r3, #24]
 8004174:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	ea40 0301 	orr.w	r3, r0, r1
 800417e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004180:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	4b8f      	ldr	r3, [pc, #572]	; (80043c4 <UART_SetConfig+0x2cc>)
 8004188:	429a      	cmp	r2, r3
 800418a:	d005      	beq.n	8004198 <UART_SetConfig+0xa0>
 800418c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	4b8d      	ldr	r3, [pc, #564]	; (80043c8 <UART_SetConfig+0x2d0>)
 8004194:	429a      	cmp	r2, r3
 8004196:	d104      	bne.n	80041a2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004198:	f7ff fbee 	bl	8003978 <HAL_RCC_GetPCLK2Freq>
 800419c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80041a0:	e003      	b.n	80041aa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80041a2:	f7ff fbd5 	bl	8003950 <HAL_RCC_GetPCLK1Freq>
 80041a6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80041aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041ae:	69db      	ldr	r3, [r3, #28]
 80041b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041b4:	f040 810c 	bne.w	80043d0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80041b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80041bc:	2200      	movs	r2, #0
 80041be:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80041c2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80041c6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80041ca:	4622      	mov	r2, r4
 80041cc:	462b      	mov	r3, r5
 80041ce:	1891      	adds	r1, r2, r2
 80041d0:	65b9      	str	r1, [r7, #88]	; 0x58
 80041d2:	415b      	adcs	r3, r3
 80041d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80041d6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80041da:	4621      	mov	r1, r4
 80041dc:	eb12 0801 	adds.w	r8, r2, r1
 80041e0:	4629      	mov	r1, r5
 80041e2:	eb43 0901 	adc.w	r9, r3, r1
 80041e6:	f04f 0200 	mov.w	r2, #0
 80041ea:	f04f 0300 	mov.w	r3, #0
 80041ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80041f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80041f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80041fa:	4690      	mov	r8, r2
 80041fc:	4699      	mov	r9, r3
 80041fe:	4623      	mov	r3, r4
 8004200:	eb18 0303 	adds.w	r3, r8, r3
 8004204:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004208:	462b      	mov	r3, r5
 800420a:	eb49 0303 	adc.w	r3, r9, r3
 800420e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004212:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	2200      	movs	r2, #0
 800421a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800421e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004222:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004226:	460b      	mov	r3, r1
 8004228:	18db      	adds	r3, r3, r3
 800422a:	653b      	str	r3, [r7, #80]	; 0x50
 800422c:	4613      	mov	r3, r2
 800422e:	eb42 0303 	adc.w	r3, r2, r3
 8004232:	657b      	str	r3, [r7, #84]	; 0x54
 8004234:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004238:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800423c:	f7fb ffd8 	bl	80001f0 <__aeabi_uldivmod>
 8004240:	4602      	mov	r2, r0
 8004242:	460b      	mov	r3, r1
 8004244:	4b61      	ldr	r3, [pc, #388]	; (80043cc <UART_SetConfig+0x2d4>)
 8004246:	fba3 2302 	umull	r2, r3, r3, r2
 800424a:	095b      	lsrs	r3, r3, #5
 800424c:	011c      	lsls	r4, r3, #4
 800424e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004252:	2200      	movs	r2, #0
 8004254:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004258:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800425c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004260:	4642      	mov	r2, r8
 8004262:	464b      	mov	r3, r9
 8004264:	1891      	adds	r1, r2, r2
 8004266:	64b9      	str	r1, [r7, #72]	; 0x48
 8004268:	415b      	adcs	r3, r3
 800426a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800426c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004270:	4641      	mov	r1, r8
 8004272:	eb12 0a01 	adds.w	sl, r2, r1
 8004276:	4649      	mov	r1, r9
 8004278:	eb43 0b01 	adc.w	fp, r3, r1
 800427c:	f04f 0200 	mov.w	r2, #0
 8004280:	f04f 0300 	mov.w	r3, #0
 8004284:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004288:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800428c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004290:	4692      	mov	sl, r2
 8004292:	469b      	mov	fp, r3
 8004294:	4643      	mov	r3, r8
 8004296:	eb1a 0303 	adds.w	r3, sl, r3
 800429a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800429e:	464b      	mov	r3, r9
 80042a0:	eb4b 0303 	adc.w	r3, fp, r3
 80042a4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80042a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	2200      	movs	r2, #0
 80042b0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80042b4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80042b8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80042bc:	460b      	mov	r3, r1
 80042be:	18db      	adds	r3, r3, r3
 80042c0:	643b      	str	r3, [r7, #64]	; 0x40
 80042c2:	4613      	mov	r3, r2
 80042c4:	eb42 0303 	adc.w	r3, r2, r3
 80042c8:	647b      	str	r3, [r7, #68]	; 0x44
 80042ca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80042ce:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80042d2:	f7fb ff8d 	bl	80001f0 <__aeabi_uldivmod>
 80042d6:	4602      	mov	r2, r0
 80042d8:	460b      	mov	r3, r1
 80042da:	4611      	mov	r1, r2
 80042dc:	4b3b      	ldr	r3, [pc, #236]	; (80043cc <UART_SetConfig+0x2d4>)
 80042de:	fba3 2301 	umull	r2, r3, r3, r1
 80042e2:	095b      	lsrs	r3, r3, #5
 80042e4:	2264      	movs	r2, #100	; 0x64
 80042e6:	fb02 f303 	mul.w	r3, r2, r3
 80042ea:	1acb      	subs	r3, r1, r3
 80042ec:	00db      	lsls	r3, r3, #3
 80042ee:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80042f2:	4b36      	ldr	r3, [pc, #216]	; (80043cc <UART_SetConfig+0x2d4>)
 80042f4:	fba3 2302 	umull	r2, r3, r3, r2
 80042f8:	095b      	lsrs	r3, r3, #5
 80042fa:	005b      	lsls	r3, r3, #1
 80042fc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004300:	441c      	add	r4, r3
 8004302:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004306:	2200      	movs	r2, #0
 8004308:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800430c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004310:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004314:	4642      	mov	r2, r8
 8004316:	464b      	mov	r3, r9
 8004318:	1891      	adds	r1, r2, r2
 800431a:	63b9      	str	r1, [r7, #56]	; 0x38
 800431c:	415b      	adcs	r3, r3
 800431e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004320:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004324:	4641      	mov	r1, r8
 8004326:	1851      	adds	r1, r2, r1
 8004328:	6339      	str	r1, [r7, #48]	; 0x30
 800432a:	4649      	mov	r1, r9
 800432c:	414b      	adcs	r3, r1
 800432e:	637b      	str	r3, [r7, #52]	; 0x34
 8004330:	f04f 0200 	mov.w	r2, #0
 8004334:	f04f 0300 	mov.w	r3, #0
 8004338:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800433c:	4659      	mov	r1, fp
 800433e:	00cb      	lsls	r3, r1, #3
 8004340:	4651      	mov	r1, sl
 8004342:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004346:	4651      	mov	r1, sl
 8004348:	00ca      	lsls	r2, r1, #3
 800434a:	4610      	mov	r0, r2
 800434c:	4619      	mov	r1, r3
 800434e:	4603      	mov	r3, r0
 8004350:	4642      	mov	r2, r8
 8004352:	189b      	adds	r3, r3, r2
 8004354:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004358:	464b      	mov	r3, r9
 800435a:	460a      	mov	r2, r1
 800435c:	eb42 0303 	adc.w	r3, r2, r3
 8004360:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004364:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	2200      	movs	r2, #0
 800436c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004370:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004374:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004378:	460b      	mov	r3, r1
 800437a:	18db      	adds	r3, r3, r3
 800437c:	62bb      	str	r3, [r7, #40]	; 0x28
 800437e:	4613      	mov	r3, r2
 8004380:	eb42 0303 	adc.w	r3, r2, r3
 8004384:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004386:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800438a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800438e:	f7fb ff2f 	bl	80001f0 <__aeabi_uldivmod>
 8004392:	4602      	mov	r2, r0
 8004394:	460b      	mov	r3, r1
 8004396:	4b0d      	ldr	r3, [pc, #52]	; (80043cc <UART_SetConfig+0x2d4>)
 8004398:	fba3 1302 	umull	r1, r3, r3, r2
 800439c:	095b      	lsrs	r3, r3, #5
 800439e:	2164      	movs	r1, #100	; 0x64
 80043a0:	fb01 f303 	mul.w	r3, r1, r3
 80043a4:	1ad3      	subs	r3, r2, r3
 80043a6:	00db      	lsls	r3, r3, #3
 80043a8:	3332      	adds	r3, #50	; 0x32
 80043aa:	4a08      	ldr	r2, [pc, #32]	; (80043cc <UART_SetConfig+0x2d4>)
 80043ac:	fba2 2303 	umull	r2, r3, r2, r3
 80043b0:	095b      	lsrs	r3, r3, #5
 80043b2:	f003 0207 	and.w	r2, r3, #7
 80043b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4422      	add	r2, r4
 80043be:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80043c0:	e106      	b.n	80045d0 <UART_SetConfig+0x4d8>
 80043c2:	bf00      	nop
 80043c4:	40011000 	.word	0x40011000
 80043c8:	40011400 	.word	0x40011400
 80043cc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80043d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80043d4:	2200      	movs	r2, #0
 80043d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80043da:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80043de:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80043e2:	4642      	mov	r2, r8
 80043e4:	464b      	mov	r3, r9
 80043e6:	1891      	adds	r1, r2, r2
 80043e8:	6239      	str	r1, [r7, #32]
 80043ea:	415b      	adcs	r3, r3
 80043ec:	627b      	str	r3, [r7, #36]	; 0x24
 80043ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80043f2:	4641      	mov	r1, r8
 80043f4:	1854      	adds	r4, r2, r1
 80043f6:	4649      	mov	r1, r9
 80043f8:	eb43 0501 	adc.w	r5, r3, r1
 80043fc:	f04f 0200 	mov.w	r2, #0
 8004400:	f04f 0300 	mov.w	r3, #0
 8004404:	00eb      	lsls	r3, r5, #3
 8004406:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800440a:	00e2      	lsls	r2, r4, #3
 800440c:	4614      	mov	r4, r2
 800440e:	461d      	mov	r5, r3
 8004410:	4643      	mov	r3, r8
 8004412:	18e3      	adds	r3, r4, r3
 8004414:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004418:	464b      	mov	r3, r9
 800441a:	eb45 0303 	adc.w	r3, r5, r3
 800441e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004422:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	2200      	movs	r2, #0
 800442a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800442e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004432:	f04f 0200 	mov.w	r2, #0
 8004436:	f04f 0300 	mov.w	r3, #0
 800443a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800443e:	4629      	mov	r1, r5
 8004440:	008b      	lsls	r3, r1, #2
 8004442:	4621      	mov	r1, r4
 8004444:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004448:	4621      	mov	r1, r4
 800444a:	008a      	lsls	r2, r1, #2
 800444c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004450:	f7fb fece 	bl	80001f0 <__aeabi_uldivmod>
 8004454:	4602      	mov	r2, r0
 8004456:	460b      	mov	r3, r1
 8004458:	4b60      	ldr	r3, [pc, #384]	; (80045dc <UART_SetConfig+0x4e4>)
 800445a:	fba3 2302 	umull	r2, r3, r3, r2
 800445e:	095b      	lsrs	r3, r3, #5
 8004460:	011c      	lsls	r4, r3, #4
 8004462:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004466:	2200      	movs	r2, #0
 8004468:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800446c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004470:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004474:	4642      	mov	r2, r8
 8004476:	464b      	mov	r3, r9
 8004478:	1891      	adds	r1, r2, r2
 800447a:	61b9      	str	r1, [r7, #24]
 800447c:	415b      	adcs	r3, r3
 800447e:	61fb      	str	r3, [r7, #28]
 8004480:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004484:	4641      	mov	r1, r8
 8004486:	1851      	adds	r1, r2, r1
 8004488:	6139      	str	r1, [r7, #16]
 800448a:	4649      	mov	r1, r9
 800448c:	414b      	adcs	r3, r1
 800448e:	617b      	str	r3, [r7, #20]
 8004490:	f04f 0200 	mov.w	r2, #0
 8004494:	f04f 0300 	mov.w	r3, #0
 8004498:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800449c:	4659      	mov	r1, fp
 800449e:	00cb      	lsls	r3, r1, #3
 80044a0:	4651      	mov	r1, sl
 80044a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80044a6:	4651      	mov	r1, sl
 80044a8:	00ca      	lsls	r2, r1, #3
 80044aa:	4610      	mov	r0, r2
 80044ac:	4619      	mov	r1, r3
 80044ae:	4603      	mov	r3, r0
 80044b0:	4642      	mov	r2, r8
 80044b2:	189b      	adds	r3, r3, r2
 80044b4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80044b8:	464b      	mov	r3, r9
 80044ba:	460a      	mov	r2, r1
 80044bc:	eb42 0303 	adc.w	r3, r2, r3
 80044c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80044c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	2200      	movs	r2, #0
 80044cc:	67bb      	str	r3, [r7, #120]	; 0x78
 80044ce:	67fa      	str	r2, [r7, #124]	; 0x7c
 80044d0:	f04f 0200 	mov.w	r2, #0
 80044d4:	f04f 0300 	mov.w	r3, #0
 80044d8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80044dc:	4649      	mov	r1, r9
 80044de:	008b      	lsls	r3, r1, #2
 80044e0:	4641      	mov	r1, r8
 80044e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80044e6:	4641      	mov	r1, r8
 80044e8:	008a      	lsls	r2, r1, #2
 80044ea:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80044ee:	f7fb fe7f 	bl	80001f0 <__aeabi_uldivmod>
 80044f2:	4602      	mov	r2, r0
 80044f4:	460b      	mov	r3, r1
 80044f6:	4611      	mov	r1, r2
 80044f8:	4b38      	ldr	r3, [pc, #224]	; (80045dc <UART_SetConfig+0x4e4>)
 80044fa:	fba3 2301 	umull	r2, r3, r3, r1
 80044fe:	095b      	lsrs	r3, r3, #5
 8004500:	2264      	movs	r2, #100	; 0x64
 8004502:	fb02 f303 	mul.w	r3, r2, r3
 8004506:	1acb      	subs	r3, r1, r3
 8004508:	011b      	lsls	r3, r3, #4
 800450a:	3332      	adds	r3, #50	; 0x32
 800450c:	4a33      	ldr	r2, [pc, #204]	; (80045dc <UART_SetConfig+0x4e4>)
 800450e:	fba2 2303 	umull	r2, r3, r2, r3
 8004512:	095b      	lsrs	r3, r3, #5
 8004514:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004518:	441c      	add	r4, r3
 800451a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800451e:	2200      	movs	r2, #0
 8004520:	673b      	str	r3, [r7, #112]	; 0x70
 8004522:	677a      	str	r2, [r7, #116]	; 0x74
 8004524:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004528:	4642      	mov	r2, r8
 800452a:	464b      	mov	r3, r9
 800452c:	1891      	adds	r1, r2, r2
 800452e:	60b9      	str	r1, [r7, #8]
 8004530:	415b      	adcs	r3, r3
 8004532:	60fb      	str	r3, [r7, #12]
 8004534:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004538:	4641      	mov	r1, r8
 800453a:	1851      	adds	r1, r2, r1
 800453c:	6039      	str	r1, [r7, #0]
 800453e:	4649      	mov	r1, r9
 8004540:	414b      	adcs	r3, r1
 8004542:	607b      	str	r3, [r7, #4]
 8004544:	f04f 0200 	mov.w	r2, #0
 8004548:	f04f 0300 	mov.w	r3, #0
 800454c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004550:	4659      	mov	r1, fp
 8004552:	00cb      	lsls	r3, r1, #3
 8004554:	4651      	mov	r1, sl
 8004556:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800455a:	4651      	mov	r1, sl
 800455c:	00ca      	lsls	r2, r1, #3
 800455e:	4610      	mov	r0, r2
 8004560:	4619      	mov	r1, r3
 8004562:	4603      	mov	r3, r0
 8004564:	4642      	mov	r2, r8
 8004566:	189b      	adds	r3, r3, r2
 8004568:	66bb      	str	r3, [r7, #104]	; 0x68
 800456a:	464b      	mov	r3, r9
 800456c:	460a      	mov	r2, r1
 800456e:	eb42 0303 	adc.w	r3, r2, r3
 8004572:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004574:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	2200      	movs	r2, #0
 800457c:	663b      	str	r3, [r7, #96]	; 0x60
 800457e:	667a      	str	r2, [r7, #100]	; 0x64
 8004580:	f04f 0200 	mov.w	r2, #0
 8004584:	f04f 0300 	mov.w	r3, #0
 8004588:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800458c:	4649      	mov	r1, r9
 800458e:	008b      	lsls	r3, r1, #2
 8004590:	4641      	mov	r1, r8
 8004592:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004596:	4641      	mov	r1, r8
 8004598:	008a      	lsls	r2, r1, #2
 800459a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800459e:	f7fb fe27 	bl	80001f0 <__aeabi_uldivmod>
 80045a2:	4602      	mov	r2, r0
 80045a4:	460b      	mov	r3, r1
 80045a6:	4b0d      	ldr	r3, [pc, #52]	; (80045dc <UART_SetConfig+0x4e4>)
 80045a8:	fba3 1302 	umull	r1, r3, r3, r2
 80045ac:	095b      	lsrs	r3, r3, #5
 80045ae:	2164      	movs	r1, #100	; 0x64
 80045b0:	fb01 f303 	mul.w	r3, r1, r3
 80045b4:	1ad3      	subs	r3, r2, r3
 80045b6:	011b      	lsls	r3, r3, #4
 80045b8:	3332      	adds	r3, #50	; 0x32
 80045ba:	4a08      	ldr	r2, [pc, #32]	; (80045dc <UART_SetConfig+0x4e4>)
 80045bc:	fba2 2303 	umull	r2, r3, r2, r3
 80045c0:	095b      	lsrs	r3, r3, #5
 80045c2:	f003 020f 	and.w	r2, r3, #15
 80045c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4422      	add	r2, r4
 80045ce:	609a      	str	r2, [r3, #8]
}
 80045d0:	bf00      	nop
 80045d2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80045d6:	46bd      	mov	sp, r7
 80045d8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80045dc:	51eb851f 	.word	0x51eb851f

080045e0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80045e0:	b084      	sub	sp, #16
 80045e2:	b580      	push	{r7, lr}
 80045e4:	b084      	sub	sp, #16
 80045e6:	af00      	add	r7, sp, #0
 80045e8:	6078      	str	r0, [r7, #4]
 80045ea:	f107 001c 	add.w	r0, r7, #28
 80045ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80045f2:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80045f6:	2b01      	cmp	r3, #1
 80045f8:	d123      	bne.n	8004642 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045fe:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	68db      	ldr	r3, [r3, #12]
 800460a:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800460e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004612:	687a      	ldr	r2, [r7, #4]
 8004614:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	68db      	ldr	r3, [r3, #12]
 800461a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004622:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004626:	2b01      	cmp	r3, #1
 8004628:	d105      	bne.n	8004636 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	68db      	ldr	r3, [r3, #12]
 800462e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	f001 fae2 	bl	8005c00 <USB_CoreReset>
 800463c:	4603      	mov	r3, r0
 800463e:	73fb      	strb	r3, [r7, #15]
 8004640:	e01b      	b.n	800467a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	68db      	ldr	r3, [r3, #12]
 8004646:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f001 fad6 	bl	8005c00 <USB_CoreReset>
 8004654:	4603      	mov	r3, r0
 8004656:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004658:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800465c:	2b00      	cmp	r3, #0
 800465e:	d106      	bne.n	800466e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004664:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	639a      	str	r2, [r3, #56]	; 0x38
 800466c:	e005      	b.n	800467a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004672:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800467a:	7fbb      	ldrb	r3, [r7, #30]
 800467c:	2b01      	cmp	r3, #1
 800467e:	d10b      	bne.n	8004698 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	689b      	ldr	r3, [r3, #8]
 8004684:	f043 0206 	orr.w	r2, r3, #6
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	f043 0220 	orr.w	r2, r3, #32
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004698:	7bfb      	ldrb	r3, [r7, #15]
}
 800469a:	4618      	mov	r0, r3
 800469c:	3710      	adds	r7, #16
 800469e:	46bd      	mov	sp, r7
 80046a0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80046a4:	b004      	add	sp, #16
 80046a6:	4770      	bx	lr

080046a8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b087      	sub	sp, #28
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	60f8      	str	r0, [r7, #12]
 80046b0:	60b9      	str	r1, [r7, #8]
 80046b2:	4613      	mov	r3, r2
 80046b4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80046b6:	79fb      	ldrb	r3, [r7, #7]
 80046b8:	2b02      	cmp	r3, #2
 80046ba:	d165      	bne.n	8004788 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	4a41      	ldr	r2, [pc, #260]	; (80047c4 <USB_SetTurnaroundTime+0x11c>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d906      	bls.n	80046d2 <USB_SetTurnaroundTime+0x2a>
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	4a40      	ldr	r2, [pc, #256]	; (80047c8 <USB_SetTurnaroundTime+0x120>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d202      	bcs.n	80046d2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80046cc:	230f      	movs	r3, #15
 80046ce:	617b      	str	r3, [r7, #20]
 80046d0:	e062      	b.n	8004798 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	4a3c      	ldr	r2, [pc, #240]	; (80047c8 <USB_SetTurnaroundTime+0x120>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d306      	bcc.n	80046e8 <USB_SetTurnaroundTime+0x40>
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	4a3b      	ldr	r2, [pc, #236]	; (80047cc <USB_SetTurnaroundTime+0x124>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d202      	bcs.n	80046e8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80046e2:	230e      	movs	r3, #14
 80046e4:	617b      	str	r3, [r7, #20]
 80046e6:	e057      	b.n	8004798 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	4a38      	ldr	r2, [pc, #224]	; (80047cc <USB_SetTurnaroundTime+0x124>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d306      	bcc.n	80046fe <USB_SetTurnaroundTime+0x56>
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	4a37      	ldr	r2, [pc, #220]	; (80047d0 <USB_SetTurnaroundTime+0x128>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d202      	bcs.n	80046fe <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80046f8:	230d      	movs	r3, #13
 80046fa:	617b      	str	r3, [r7, #20]
 80046fc:	e04c      	b.n	8004798 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	4a33      	ldr	r2, [pc, #204]	; (80047d0 <USB_SetTurnaroundTime+0x128>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d306      	bcc.n	8004714 <USB_SetTurnaroundTime+0x6c>
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	4a32      	ldr	r2, [pc, #200]	; (80047d4 <USB_SetTurnaroundTime+0x12c>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d802      	bhi.n	8004714 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800470e:	230c      	movs	r3, #12
 8004710:	617b      	str	r3, [r7, #20]
 8004712:	e041      	b.n	8004798 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	4a2f      	ldr	r2, [pc, #188]	; (80047d4 <USB_SetTurnaroundTime+0x12c>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d906      	bls.n	800472a <USB_SetTurnaroundTime+0x82>
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	4a2e      	ldr	r2, [pc, #184]	; (80047d8 <USB_SetTurnaroundTime+0x130>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d802      	bhi.n	800472a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004724:	230b      	movs	r3, #11
 8004726:	617b      	str	r3, [r7, #20]
 8004728:	e036      	b.n	8004798 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	4a2a      	ldr	r2, [pc, #168]	; (80047d8 <USB_SetTurnaroundTime+0x130>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d906      	bls.n	8004740 <USB_SetTurnaroundTime+0x98>
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	4a29      	ldr	r2, [pc, #164]	; (80047dc <USB_SetTurnaroundTime+0x134>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d802      	bhi.n	8004740 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800473a:	230a      	movs	r3, #10
 800473c:	617b      	str	r3, [r7, #20]
 800473e:	e02b      	b.n	8004798 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	4a26      	ldr	r2, [pc, #152]	; (80047dc <USB_SetTurnaroundTime+0x134>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d906      	bls.n	8004756 <USB_SetTurnaroundTime+0xae>
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	4a25      	ldr	r2, [pc, #148]	; (80047e0 <USB_SetTurnaroundTime+0x138>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d202      	bcs.n	8004756 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004750:	2309      	movs	r3, #9
 8004752:	617b      	str	r3, [r7, #20]
 8004754:	e020      	b.n	8004798 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	4a21      	ldr	r2, [pc, #132]	; (80047e0 <USB_SetTurnaroundTime+0x138>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d306      	bcc.n	800476c <USB_SetTurnaroundTime+0xc4>
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	4a20      	ldr	r2, [pc, #128]	; (80047e4 <USB_SetTurnaroundTime+0x13c>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d802      	bhi.n	800476c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004766:	2308      	movs	r3, #8
 8004768:	617b      	str	r3, [r7, #20]
 800476a:	e015      	b.n	8004798 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	4a1d      	ldr	r2, [pc, #116]	; (80047e4 <USB_SetTurnaroundTime+0x13c>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d906      	bls.n	8004782 <USB_SetTurnaroundTime+0xda>
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	4a1c      	ldr	r2, [pc, #112]	; (80047e8 <USB_SetTurnaroundTime+0x140>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d202      	bcs.n	8004782 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800477c:	2307      	movs	r3, #7
 800477e:	617b      	str	r3, [r7, #20]
 8004780:	e00a      	b.n	8004798 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004782:	2306      	movs	r3, #6
 8004784:	617b      	str	r3, [r7, #20]
 8004786:	e007      	b.n	8004798 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004788:	79fb      	ldrb	r3, [r7, #7]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d102      	bne.n	8004794 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800478e:	2309      	movs	r3, #9
 8004790:	617b      	str	r3, [r7, #20]
 8004792:	e001      	b.n	8004798 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004794:	2309      	movs	r3, #9
 8004796:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	68db      	ldr	r3, [r3, #12]
 800479c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	68da      	ldr	r2, [r3, #12]
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	029b      	lsls	r3, r3, #10
 80047ac:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80047b0:	431a      	orrs	r2, r3
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80047b6:	2300      	movs	r3, #0
}
 80047b8:	4618      	mov	r0, r3
 80047ba:	371c      	adds	r7, #28
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr
 80047c4:	00d8acbf 	.word	0x00d8acbf
 80047c8:	00e4e1c0 	.word	0x00e4e1c0
 80047cc:	00f42400 	.word	0x00f42400
 80047d0:	01067380 	.word	0x01067380
 80047d4:	011a499f 	.word	0x011a499f
 80047d8:	01312cff 	.word	0x01312cff
 80047dc:	014ca43f 	.word	0x014ca43f
 80047e0:	016e3600 	.word	0x016e3600
 80047e4:	01a6ab1f 	.word	0x01a6ab1f
 80047e8:	01e84800 	.word	0x01e84800

080047ec <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b083      	sub	sp, #12
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	f043 0201 	orr.w	r2, r3, #1
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004800:	2300      	movs	r3, #0
}
 8004802:	4618      	mov	r0, r3
 8004804:	370c      	adds	r7, #12
 8004806:	46bd      	mov	sp, r7
 8004808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480c:	4770      	bx	lr

0800480e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800480e:	b480      	push	{r7}
 8004810:	b083      	sub	sp, #12
 8004812:	af00      	add	r7, sp, #0
 8004814:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	f023 0201 	bic.w	r2, r3, #1
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004822:	2300      	movs	r3, #0
}
 8004824:	4618      	mov	r0, r3
 8004826:	370c      	adds	r7, #12
 8004828:	46bd      	mov	sp, r7
 800482a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482e:	4770      	bx	lr

08004830 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b084      	sub	sp, #16
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
 8004838:	460b      	mov	r3, r1
 800483a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800483c:	2300      	movs	r3, #0
 800483e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	68db      	ldr	r3, [r3, #12]
 8004844:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800484c:	78fb      	ldrb	r3, [r7, #3]
 800484e:	2b01      	cmp	r3, #1
 8004850:	d115      	bne.n	800487e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	68db      	ldr	r3, [r3, #12]
 8004856:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800485e:	200a      	movs	r0, #10
 8004860:	f7fc fb44 	bl	8000eec <HAL_Delay>
      ms += 10U;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	330a      	adds	r3, #10
 8004868:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800486a:	6878      	ldr	r0, [r7, #4]
 800486c:	f001 f939 	bl	8005ae2 <USB_GetMode>
 8004870:	4603      	mov	r3, r0
 8004872:	2b01      	cmp	r3, #1
 8004874:	d01e      	beq.n	80048b4 <USB_SetCurrentMode+0x84>
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2bc7      	cmp	r3, #199	; 0xc7
 800487a:	d9f0      	bls.n	800485e <USB_SetCurrentMode+0x2e>
 800487c:	e01a      	b.n	80048b4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800487e:	78fb      	ldrb	r3, [r7, #3]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d115      	bne.n	80048b0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	68db      	ldr	r3, [r3, #12]
 8004888:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004890:	200a      	movs	r0, #10
 8004892:	f7fc fb2b 	bl	8000eec <HAL_Delay>
      ms += 10U;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	330a      	adds	r3, #10
 800489a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	f001 f920 	bl	8005ae2 <USB_GetMode>
 80048a2:	4603      	mov	r3, r0
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d005      	beq.n	80048b4 <USB_SetCurrentMode+0x84>
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	2bc7      	cmp	r3, #199	; 0xc7
 80048ac:	d9f0      	bls.n	8004890 <USB_SetCurrentMode+0x60>
 80048ae:	e001      	b.n	80048b4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80048b0:	2301      	movs	r3, #1
 80048b2:	e005      	b.n	80048c0 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2bc8      	cmp	r3, #200	; 0xc8
 80048b8:	d101      	bne.n	80048be <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80048ba:	2301      	movs	r3, #1
 80048bc:	e000      	b.n	80048c0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80048be:	2300      	movs	r3, #0
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	3710      	adds	r7, #16
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bd80      	pop	{r7, pc}

080048c8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80048c8:	b084      	sub	sp, #16
 80048ca:	b580      	push	{r7, lr}
 80048cc:	b086      	sub	sp, #24
 80048ce:	af00      	add	r7, sp, #0
 80048d0:	6078      	str	r0, [r7, #4]
 80048d2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80048d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80048da:	2300      	movs	r3, #0
 80048dc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80048e2:	2300      	movs	r3, #0
 80048e4:	613b      	str	r3, [r7, #16]
 80048e6:	e009      	b.n	80048fc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80048e8:	687a      	ldr	r2, [r7, #4]
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	3340      	adds	r3, #64	; 0x40
 80048ee:	009b      	lsls	r3, r3, #2
 80048f0:	4413      	add	r3, r2
 80048f2:	2200      	movs	r2, #0
 80048f4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	3301      	adds	r3, #1
 80048fa:	613b      	str	r3, [r7, #16]
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	2b0e      	cmp	r3, #14
 8004900:	d9f2      	bls.n	80048e8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004902:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004906:	2b00      	cmp	r3, #0
 8004908:	d11c      	bne.n	8004944 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	68fa      	ldr	r2, [r7, #12]
 8004914:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004918:	f043 0302 	orr.w	r3, r3, #2
 800491c:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004922:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800492e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800493a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	639a      	str	r2, [r3, #56]	; 0x38
 8004942:	e00b      	b.n	800495c <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004948:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004954:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004962:	461a      	mov	r2, r3
 8004964:	2300      	movs	r3, #0
 8004966:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004968:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800496c:	2b01      	cmp	r3, #1
 800496e:	d10d      	bne.n	800498c <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004970:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004974:	2b00      	cmp	r3, #0
 8004976:	d104      	bne.n	8004982 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004978:	2100      	movs	r1, #0
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f000 f968 	bl	8004c50 <USB_SetDevSpeed>
 8004980:	e008      	b.n	8004994 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004982:	2101      	movs	r1, #1
 8004984:	6878      	ldr	r0, [r7, #4]
 8004986:	f000 f963 	bl	8004c50 <USB_SetDevSpeed>
 800498a:	e003      	b.n	8004994 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800498c:	2103      	movs	r1, #3
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	f000 f95e 	bl	8004c50 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004994:	2110      	movs	r1, #16
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f000 f8fa 	bl	8004b90 <USB_FlushTxFifo>
 800499c:	4603      	mov	r3, r0
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d001      	beq.n	80049a6 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80049a2:	2301      	movs	r3, #1
 80049a4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80049a6:	6878      	ldr	r0, [r7, #4]
 80049a8:	f000 f924 	bl	8004bf4 <USB_FlushRxFifo>
 80049ac:	4603      	mov	r3, r0
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d001      	beq.n	80049b6 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049bc:	461a      	mov	r2, r3
 80049be:	2300      	movs	r3, #0
 80049c0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049c8:	461a      	mov	r2, r3
 80049ca:	2300      	movs	r3, #0
 80049cc:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049d4:	461a      	mov	r2, r3
 80049d6:	2300      	movs	r3, #0
 80049d8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80049da:	2300      	movs	r3, #0
 80049dc:	613b      	str	r3, [r7, #16]
 80049de:	e043      	b.n	8004a68 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80049e0:	693b      	ldr	r3, [r7, #16]
 80049e2:	015a      	lsls	r2, r3, #5
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	4413      	add	r3, r2
 80049e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80049f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80049f6:	d118      	bne.n	8004a2a <USB_DevInit+0x162>
    {
      if (i == 0U)
 80049f8:	693b      	ldr	r3, [r7, #16]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d10a      	bne.n	8004a14 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	015a      	lsls	r2, r3, #5
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	4413      	add	r3, r2
 8004a06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a0a:	461a      	mov	r2, r3
 8004a0c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004a10:	6013      	str	r3, [r2, #0]
 8004a12:	e013      	b.n	8004a3c <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	015a      	lsls	r2, r3, #5
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	4413      	add	r3, r2
 8004a1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a20:	461a      	mov	r2, r3
 8004a22:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004a26:	6013      	str	r3, [r2, #0]
 8004a28:	e008      	b.n	8004a3c <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	015a      	lsls	r2, r3, #5
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	4413      	add	r3, r2
 8004a32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a36:	461a      	mov	r2, r3
 8004a38:	2300      	movs	r3, #0
 8004a3a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004a3c:	693b      	ldr	r3, [r7, #16]
 8004a3e:	015a      	lsls	r2, r3, #5
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	4413      	add	r3, r2
 8004a44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a48:	461a      	mov	r2, r3
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	015a      	lsls	r2, r3, #5
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	4413      	add	r3, r2
 8004a56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a5a:	461a      	mov	r2, r3
 8004a5c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004a60:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	3301      	adds	r3, #1
 8004a66:	613b      	str	r3, [r7, #16]
 8004a68:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004a6c:	461a      	mov	r2, r3
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d3b5      	bcc.n	80049e0 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a74:	2300      	movs	r3, #0
 8004a76:	613b      	str	r3, [r7, #16]
 8004a78:	e043      	b.n	8004b02 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	015a      	lsls	r2, r3, #5
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	4413      	add	r3, r2
 8004a82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a8c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a90:	d118      	bne.n	8004ac4 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d10a      	bne.n	8004aae <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004a98:	693b      	ldr	r3, [r7, #16]
 8004a9a:	015a      	lsls	r2, r3, #5
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	4413      	add	r3, r2
 8004aa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004aa4:	461a      	mov	r2, r3
 8004aa6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004aaa:	6013      	str	r3, [r2, #0]
 8004aac:	e013      	b.n	8004ad6 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	015a      	lsls	r2, r3, #5
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	4413      	add	r3, r2
 8004ab6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004aba:	461a      	mov	r2, r3
 8004abc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004ac0:	6013      	str	r3, [r2, #0]
 8004ac2:	e008      	b.n	8004ad6 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	015a      	lsls	r2, r3, #5
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	4413      	add	r3, r2
 8004acc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ad0:	461a      	mov	r2, r3
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	015a      	lsls	r2, r3, #5
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	4413      	add	r3, r2
 8004ade:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ae2:	461a      	mov	r2, r3
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	015a      	lsls	r2, r3, #5
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	4413      	add	r3, r2
 8004af0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004af4:	461a      	mov	r2, r3
 8004af6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004afa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004afc:	693b      	ldr	r3, [r7, #16]
 8004afe:	3301      	adds	r3, #1
 8004b00:	613b      	str	r3, [r7, #16]
 8004b02:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004b06:	461a      	mov	r2, r3
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d3b5      	bcc.n	8004a7a <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b14:	691b      	ldr	r3, [r3, #16]
 8004b16:	68fa      	ldr	r2, [r7, #12]
 8004b18:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b20:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2200      	movs	r2, #0
 8004b26:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004b2e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004b30:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d105      	bne.n	8004b44 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	699b      	ldr	r3, [r3, #24]
 8004b3c:	f043 0210 	orr.w	r2, r3, #16
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	699a      	ldr	r2, [r3, #24]
 8004b48:	4b10      	ldr	r3, [pc, #64]	; (8004b8c <USB_DevInit+0x2c4>)
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	687a      	ldr	r2, [r7, #4]
 8004b4e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004b50:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d005      	beq.n	8004b64 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	699b      	ldr	r3, [r3, #24]
 8004b5c:	f043 0208 	orr.w	r2, r3, #8
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004b64:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004b68:	2b01      	cmp	r3, #1
 8004b6a:	d107      	bne.n	8004b7c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	699b      	ldr	r3, [r3, #24]
 8004b70:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004b74:	f043 0304 	orr.w	r3, r3, #4
 8004b78:	687a      	ldr	r2, [r7, #4]
 8004b7a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004b7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	3718      	adds	r7, #24
 8004b82:	46bd      	mov	sp, r7
 8004b84:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004b88:	b004      	add	sp, #16
 8004b8a:	4770      	bx	lr
 8004b8c:	803c3800 	.word	0x803c3800

08004b90 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b085      	sub	sp, #20
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
 8004b98:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	3301      	adds	r3, #1
 8004ba2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004baa:	d901      	bls.n	8004bb0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004bac:	2303      	movs	r3, #3
 8004bae:	e01b      	b.n	8004be8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	691b      	ldr	r3, [r3, #16]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	daf2      	bge.n	8004b9e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004bb8:	2300      	movs	r3, #0
 8004bba:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	019b      	lsls	r3, r3, #6
 8004bc0:	f043 0220 	orr.w	r2, r3, #32
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	3301      	adds	r3, #1
 8004bcc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004bd4:	d901      	bls.n	8004bda <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004bd6:	2303      	movs	r3, #3
 8004bd8:	e006      	b.n	8004be8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	691b      	ldr	r3, [r3, #16]
 8004bde:	f003 0320 	and.w	r3, r3, #32
 8004be2:	2b20      	cmp	r3, #32
 8004be4:	d0f0      	beq.n	8004bc8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004be6:	2300      	movs	r3, #0
}
 8004be8:	4618      	mov	r0, r3
 8004bea:	3714      	adds	r7, #20
 8004bec:	46bd      	mov	sp, r7
 8004bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf2:	4770      	bx	lr

08004bf4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b085      	sub	sp, #20
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	3301      	adds	r3, #1
 8004c04:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004c0c:	d901      	bls.n	8004c12 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004c0e:	2303      	movs	r3, #3
 8004c10:	e018      	b.n	8004c44 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	691b      	ldr	r3, [r3, #16]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	daf2      	bge.n	8004c00 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2210      	movs	r2, #16
 8004c22:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	3301      	adds	r3, #1
 8004c28:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004c30:	d901      	bls.n	8004c36 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004c32:	2303      	movs	r3, #3
 8004c34:	e006      	b.n	8004c44 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	691b      	ldr	r3, [r3, #16]
 8004c3a:	f003 0310 	and.w	r3, r3, #16
 8004c3e:	2b10      	cmp	r3, #16
 8004c40:	d0f0      	beq.n	8004c24 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004c42:	2300      	movs	r3, #0
}
 8004c44:	4618      	mov	r0, r3
 8004c46:	3714      	adds	r7, #20
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4e:	4770      	bx	lr

08004c50 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004c50:	b480      	push	{r7}
 8004c52:	b085      	sub	sp, #20
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
 8004c58:	460b      	mov	r3, r1
 8004c5a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c66:	681a      	ldr	r2, [r3, #0]
 8004c68:	78fb      	ldrb	r3, [r7, #3]
 8004c6a:	68f9      	ldr	r1, [r7, #12]
 8004c6c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c70:	4313      	orrs	r3, r2
 8004c72:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004c74:	2300      	movs	r3, #0
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	3714      	adds	r7, #20
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c80:	4770      	bx	lr

08004c82 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8004c82:	b480      	push	{r7}
 8004c84:	b087      	sub	sp, #28
 8004c86:	af00      	add	r7, sp, #0
 8004c88:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c94:	689b      	ldr	r3, [r3, #8]
 8004c96:	f003 0306 	and.w	r3, r3, #6
 8004c9a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d102      	bne.n	8004ca8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	75fb      	strb	r3, [r7, #23]
 8004ca6:	e00a      	b.n	8004cbe <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2b02      	cmp	r3, #2
 8004cac:	d002      	beq.n	8004cb4 <USB_GetDevSpeed+0x32>
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	2b06      	cmp	r3, #6
 8004cb2:	d102      	bne.n	8004cba <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004cb4:	2302      	movs	r3, #2
 8004cb6:	75fb      	strb	r3, [r7, #23]
 8004cb8:	e001      	b.n	8004cbe <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004cba:	230f      	movs	r3, #15
 8004cbc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004cbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	371c      	adds	r7, #28
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cca:	4770      	bx	lr

08004ccc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b085      	sub	sp, #20
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
 8004cd4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	781b      	ldrb	r3, [r3, #0]
 8004cde:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	785b      	ldrb	r3, [r3, #1]
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	d13a      	bne.n	8004d5e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cee:	69da      	ldr	r2, [r3, #28]
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	781b      	ldrb	r3, [r3, #0]
 8004cf4:	f003 030f 	and.w	r3, r3, #15
 8004cf8:	2101      	movs	r1, #1
 8004cfa:	fa01 f303 	lsl.w	r3, r1, r3
 8004cfe:	b29b      	uxth	r3, r3
 8004d00:	68f9      	ldr	r1, [r7, #12]
 8004d02:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d06:	4313      	orrs	r3, r2
 8004d08:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	015a      	lsls	r2, r3, #5
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	4413      	add	r3, r2
 8004d12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d155      	bne.n	8004dcc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	015a      	lsls	r2, r3, #5
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	4413      	add	r3, r2
 8004d28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d2c:	681a      	ldr	r2, [r3, #0]
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	791b      	ldrb	r3, [r3, #4]
 8004d3a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004d3c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	059b      	lsls	r3, r3, #22
 8004d42:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004d44:	4313      	orrs	r3, r2
 8004d46:	68ba      	ldr	r2, [r7, #8]
 8004d48:	0151      	lsls	r1, r2, #5
 8004d4a:	68fa      	ldr	r2, [r7, #12]
 8004d4c:	440a      	add	r2, r1
 8004d4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d5a:	6013      	str	r3, [r2, #0]
 8004d5c:	e036      	b.n	8004dcc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d64:	69da      	ldr	r2, [r3, #28]
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	781b      	ldrb	r3, [r3, #0]
 8004d6a:	f003 030f 	and.w	r3, r3, #15
 8004d6e:	2101      	movs	r1, #1
 8004d70:	fa01 f303 	lsl.w	r3, r1, r3
 8004d74:	041b      	lsls	r3, r3, #16
 8004d76:	68f9      	ldr	r1, [r7, #12]
 8004d78:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	015a      	lsls	r2, r3, #5
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	4413      	add	r3, r2
 8004d88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d11a      	bne.n	8004dcc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	015a      	lsls	r2, r3, #5
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	4413      	add	r3, r2
 8004d9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004da2:	681a      	ldr	r2, [r3, #0]
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	689b      	ldr	r3, [r3, #8]
 8004da8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	791b      	ldrb	r3, [r3, #4]
 8004db0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004db2:	430b      	orrs	r3, r1
 8004db4:	4313      	orrs	r3, r2
 8004db6:	68ba      	ldr	r2, [r7, #8]
 8004db8:	0151      	lsls	r1, r2, #5
 8004dba:	68fa      	ldr	r2, [r7, #12]
 8004dbc:	440a      	add	r2, r1
 8004dbe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004dc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004dc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004dca:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004dcc:	2300      	movs	r3, #0
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	3714      	adds	r7, #20
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd8:	4770      	bx	lr
	...

08004ddc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b085      	sub	sp, #20
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
 8004de4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	781b      	ldrb	r3, [r3, #0]
 8004dee:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	785b      	ldrb	r3, [r3, #1]
 8004df4:	2b01      	cmp	r3, #1
 8004df6:	d161      	bne.n	8004ebc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	015a      	lsls	r2, r3, #5
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	4413      	add	r3, r2
 8004e00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e0a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e0e:	d11f      	bne.n	8004e50 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	015a      	lsls	r2, r3, #5
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	4413      	add	r3, r2
 8004e18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	68ba      	ldr	r2, [r7, #8]
 8004e20:	0151      	lsls	r1, r2, #5
 8004e22:	68fa      	ldr	r2, [r7, #12]
 8004e24:	440a      	add	r2, r1
 8004e26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e2a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004e2e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	015a      	lsls	r2, r3, #5
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	4413      	add	r3, r2
 8004e38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	68ba      	ldr	r2, [r7, #8]
 8004e40:	0151      	lsls	r1, r2, #5
 8004e42:	68fa      	ldr	r2, [r7, #12]
 8004e44:	440a      	add	r2, r1
 8004e46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e4a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004e4e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e56:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	781b      	ldrb	r3, [r3, #0]
 8004e5c:	f003 030f 	and.w	r3, r3, #15
 8004e60:	2101      	movs	r1, #1
 8004e62:	fa01 f303 	lsl.w	r3, r1, r3
 8004e66:	b29b      	uxth	r3, r3
 8004e68:	43db      	mvns	r3, r3
 8004e6a:	68f9      	ldr	r1, [r7, #12]
 8004e6c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004e70:	4013      	ands	r3, r2
 8004e72:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e7a:	69da      	ldr	r2, [r3, #28]
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	781b      	ldrb	r3, [r3, #0]
 8004e80:	f003 030f 	and.w	r3, r3, #15
 8004e84:	2101      	movs	r1, #1
 8004e86:	fa01 f303 	lsl.w	r3, r1, r3
 8004e8a:	b29b      	uxth	r3, r3
 8004e8c:	43db      	mvns	r3, r3
 8004e8e:	68f9      	ldr	r1, [r7, #12]
 8004e90:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004e94:	4013      	ands	r3, r2
 8004e96:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	015a      	lsls	r2, r3, #5
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	4413      	add	r3, r2
 8004ea0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ea4:	681a      	ldr	r2, [r3, #0]
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	0159      	lsls	r1, r3, #5
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	440b      	add	r3, r1
 8004eae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004eb2:	4619      	mov	r1, r3
 8004eb4:	4b35      	ldr	r3, [pc, #212]	; (8004f8c <USB_DeactivateEndpoint+0x1b0>)
 8004eb6:	4013      	ands	r3, r2
 8004eb8:	600b      	str	r3, [r1, #0]
 8004eba:	e060      	b.n	8004f7e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	015a      	lsls	r2, r3, #5
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	4413      	add	r3, r2
 8004ec4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004ece:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ed2:	d11f      	bne.n	8004f14 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	015a      	lsls	r2, r3, #5
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	4413      	add	r3, r2
 8004edc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	68ba      	ldr	r2, [r7, #8]
 8004ee4:	0151      	lsls	r1, r2, #5
 8004ee6:	68fa      	ldr	r2, [r7, #12]
 8004ee8:	440a      	add	r2, r1
 8004eea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004eee:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004ef2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	015a      	lsls	r2, r3, #5
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	4413      	add	r3, r2
 8004efc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	68ba      	ldr	r2, [r7, #8]
 8004f04:	0151      	lsls	r1, r2, #5
 8004f06:	68fa      	ldr	r2, [r7, #12]
 8004f08:	440a      	add	r2, r1
 8004f0a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f0e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004f12:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f1a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	781b      	ldrb	r3, [r3, #0]
 8004f20:	f003 030f 	and.w	r3, r3, #15
 8004f24:	2101      	movs	r1, #1
 8004f26:	fa01 f303 	lsl.w	r3, r1, r3
 8004f2a:	041b      	lsls	r3, r3, #16
 8004f2c:	43db      	mvns	r3, r3
 8004f2e:	68f9      	ldr	r1, [r7, #12]
 8004f30:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f34:	4013      	ands	r3, r2
 8004f36:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f3e:	69da      	ldr	r2, [r3, #28]
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	781b      	ldrb	r3, [r3, #0]
 8004f44:	f003 030f 	and.w	r3, r3, #15
 8004f48:	2101      	movs	r1, #1
 8004f4a:	fa01 f303 	lsl.w	r3, r1, r3
 8004f4e:	041b      	lsls	r3, r3, #16
 8004f50:	43db      	mvns	r3, r3
 8004f52:	68f9      	ldr	r1, [r7, #12]
 8004f54:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f58:	4013      	ands	r3, r2
 8004f5a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	015a      	lsls	r2, r3, #5
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	4413      	add	r3, r2
 8004f64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f68:	681a      	ldr	r2, [r3, #0]
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	0159      	lsls	r1, r3, #5
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	440b      	add	r3, r1
 8004f72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f76:	4619      	mov	r1, r3
 8004f78:	4b05      	ldr	r3, [pc, #20]	; (8004f90 <USB_DeactivateEndpoint+0x1b4>)
 8004f7a:	4013      	ands	r3, r2
 8004f7c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004f7e:	2300      	movs	r3, #0
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	3714      	adds	r7, #20
 8004f84:	46bd      	mov	sp, r7
 8004f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8a:	4770      	bx	lr
 8004f8c:	ec337800 	.word	0xec337800
 8004f90:	eff37800 	.word	0xeff37800

08004f94 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b08a      	sub	sp, #40	; 0x28
 8004f98:	af02      	add	r7, sp, #8
 8004f9a:	60f8      	str	r0, [r7, #12]
 8004f9c:	60b9      	str	r1, [r7, #8]
 8004f9e:	4613      	mov	r3, r2
 8004fa0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	781b      	ldrb	r3, [r3, #0]
 8004faa:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	785b      	ldrb	r3, [r3, #1]
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	f040 817a 	bne.w	80052aa <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	691b      	ldr	r3, [r3, #16]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d132      	bne.n	8005024 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004fbe:	69bb      	ldr	r3, [r7, #24]
 8004fc0:	015a      	lsls	r2, r3, #5
 8004fc2:	69fb      	ldr	r3, [r7, #28]
 8004fc4:	4413      	add	r3, r2
 8004fc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fca:	691b      	ldr	r3, [r3, #16]
 8004fcc:	69ba      	ldr	r2, [r7, #24]
 8004fce:	0151      	lsls	r1, r2, #5
 8004fd0:	69fa      	ldr	r2, [r7, #28]
 8004fd2:	440a      	add	r2, r1
 8004fd4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fd8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004fdc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004fe0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004fe2:	69bb      	ldr	r3, [r7, #24]
 8004fe4:	015a      	lsls	r2, r3, #5
 8004fe6:	69fb      	ldr	r3, [r7, #28]
 8004fe8:	4413      	add	r3, r2
 8004fea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fee:	691b      	ldr	r3, [r3, #16]
 8004ff0:	69ba      	ldr	r2, [r7, #24]
 8004ff2:	0151      	lsls	r1, r2, #5
 8004ff4:	69fa      	ldr	r2, [r7, #28]
 8004ff6:	440a      	add	r2, r1
 8004ff8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ffc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005000:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005002:	69bb      	ldr	r3, [r7, #24]
 8005004:	015a      	lsls	r2, r3, #5
 8005006:	69fb      	ldr	r3, [r7, #28]
 8005008:	4413      	add	r3, r2
 800500a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800500e:	691b      	ldr	r3, [r3, #16]
 8005010:	69ba      	ldr	r2, [r7, #24]
 8005012:	0151      	lsls	r1, r2, #5
 8005014:	69fa      	ldr	r2, [r7, #28]
 8005016:	440a      	add	r2, r1
 8005018:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800501c:	0cdb      	lsrs	r3, r3, #19
 800501e:	04db      	lsls	r3, r3, #19
 8005020:	6113      	str	r3, [r2, #16]
 8005022:	e092      	b.n	800514a <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005024:	69bb      	ldr	r3, [r7, #24]
 8005026:	015a      	lsls	r2, r3, #5
 8005028:	69fb      	ldr	r3, [r7, #28]
 800502a:	4413      	add	r3, r2
 800502c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005030:	691b      	ldr	r3, [r3, #16]
 8005032:	69ba      	ldr	r2, [r7, #24]
 8005034:	0151      	lsls	r1, r2, #5
 8005036:	69fa      	ldr	r2, [r7, #28]
 8005038:	440a      	add	r2, r1
 800503a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800503e:	0cdb      	lsrs	r3, r3, #19
 8005040:	04db      	lsls	r3, r3, #19
 8005042:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005044:	69bb      	ldr	r3, [r7, #24]
 8005046:	015a      	lsls	r2, r3, #5
 8005048:	69fb      	ldr	r3, [r7, #28]
 800504a:	4413      	add	r3, r2
 800504c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005050:	691b      	ldr	r3, [r3, #16]
 8005052:	69ba      	ldr	r2, [r7, #24]
 8005054:	0151      	lsls	r1, r2, #5
 8005056:	69fa      	ldr	r2, [r7, #28]
 8005058:	440a      	add	r2, r1
 800505a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800505e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005062:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005066:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8005068:	69bb      	ldr	r3, [r7, #24]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d11a      	bne.n	80050a4 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	691a      	ldr	r2, [r3, #16]
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	429a      	cmp	r2, r3
 8005078:	d903      	bls.n	8005082 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	689a      	ldr	r2, [r3, #8]
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005082:	69bb      	ldr	r3, [r7, #24]
 8005084:	015a      	lsls	r2, r3, #5
 8005086:	69fb      	ldr	r3, [r7, #28]
 8005088:	4413      	add	r3, r2
 800508a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800508e:	691b      	ldr	r3, [r3, #16]
 8005090:	69ba      	ldr	r2, [r7, #24]
 8005092:	0151      	lsls	r1, r2, #5
 8005094:	69fa      	ldr	r2, [r7, #28]
 8005096:	440a      	add	r2, r1
 8005098:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800509c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80050a0:	6113      	str	r3, [r2, #16]
 80050a2:	e01b      	b.n	80050dc <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80050a4:	69bb      	ldr	r3, [r7, #24]
 80050a6:	015a      	lsls	r2, r3, #5
 80050a8:	69fb      	ldr	r3, [r7, #28]
 80050aa:	4413      	add	r3, r2
 80050ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050b0:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	6919      	ldr	r1, [r3, #16]
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	689b      	ldr	r3, [r3, #8]
 80050ba:	440b      	add	r3, r1
 80050bc:	1e59      	subs	r1, r3, #1
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	689b      	ldr	r3, [r3, #8]
 80050c2:	fbb1 f3f3 	udiv	r3, r1, r3
 80050c6:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80050c8:	4ba2      	ldr	r3, [pc, #648]	; (8005354 <USB_EPStartXfer+0x3c0>)
 80050ca:	400b      	ands	r3, r1
 80050cc:	69b9      	ldr	r1, [r7, #24]
 80050ce:	0148      	lsls	r0, r1, #5
 80050d0:	69f9      	ldr	r1, [r7, #28]
 80050d2:	4401      	add	r1, r0
 80050d4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80050d8:	4313      	orrs	r3, r2
 80050da:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80050dc:	69bb      	ldr	r3, [r7, #24]
 80050de:	015a      	lsls	r2, r3, #5
 80050e0:	69fb      	ldr	r3, [r7, #28]
 80050e2:	4413      	add	r3, r2
 80050e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050e8:	691a      	ldr	r2, [r3, #16]
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	691b      	ldr	r3, [r3, #16]
 80050ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050f2:	69b9      	ldr	r1, [r7, #24]
 80050f4:	0148      	lsls	r0, r1, #5
 80050f6:	69f9      	ldr	r1, [r7, #28]
 80050f8:	4401      	add	r1, r0
 80050fa:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80050fe:	4313      	orrs	r3, r2
 8005100:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	791b      	ldrb	r3, [r3, #4]
 8005106:	2b01      	cmp	r3, #1
 8005108:	d11f      	bne.n	800514a <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800510a:	69bb      	ldr	r3, [r7, #24]
 800510c:	015a      	lsls	r2, r3, #5
 800510e:	69fb      	ldr	r3, [r7, #28]
 8005110:	4413      	add	r3, r2
 8005112:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005116:	691b      	ldr	r3, [r3, #16]
 8005118:	69ba      	ldr	r2, [r7, #24]
 800511a:	0151      	lsls	r1, r2, #5
 800511c:	69fa      	ldr	r2, [r7, #28]
 800511e:	440a      	add	r2, r1
 8005120:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005124:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005128:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800512a:	69bb      	ldr	r3, [r7, #24]
 800512c:	015a      	lsls	r2, r3, #5
 800512e:	69fb      	ldr	r3, [r7, #28]
 8005130:	4413      	add	r3, r2
 8005132:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005136:	691b      	ldr	r3, [r3, #16]
 8005138:	69ba      	ldr	r2, [r7, #24]
 800513a:	0151      	lsls	r1, r2, #5
 800513c:	69fa      	ldr	r2, [r7, #28]
 800513e:	440a      	add	r2, r1
 8005140:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005144:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005148:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800514a:	79fb      	ldrb	r3, [r7, #7]
 800514c:	2b01      	cmp	r3, #1
 800514e:	d14b      	bne.n	80051e8 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	69db      	ldr	r3, [r3, #28]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d009      	beq.n	800516c <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005158:	69bb      	ldr	r3, [r7, #24]
 800515a:	015a      	lsls	r2, r3, #5
 800515c:	69fb      	ldr	r3, [r7, #28]
 800515e:	4413      	add	r3, r2
 8005160:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005164:	461a      	mov	r2, r3
 8005166:	68bb      	ldr	r3, [r7, #8]
 8005168:	69db      	ldr	r3, [r3, #28]
 800516a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	791b      	ldrb	r3, [r3, #4]
 8005170:	2b01      	cmp	r3, #1
 8005172:	d128      	bne.n	80051c6 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005174:	69fb      	ldr	r3, [r7, #28]
 8005176:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800517a:	689b      	ldr	r3, [r3, #8]
 800517c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005180:	2b00      	cmp	r3, #0
 8005182:	d110      	bne.n	80051a6 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005184:	69bb      	ldr	r3, [r7, #24]
 8005186:	015a      	lsls	r2, r3, #5
 8005188:	69fb      	ldr	r3, [r7, #28]
 800518a:	4413      	add	r3, r2
 800518c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	69ba      	ldr	r2, [r7, #24]
 8005194:	0151      	lsls	r1, r2, #5
 8005196:	69fa      	ldr	r2, [r7, #28]
 8005198:	440a      	add	r2, r1
 800519a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800519e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80051a2:	6013      	str	r3, [r2, #0]
 80051a4:	e00f      	b.n	80051c6 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80051a6:	69bb      	ldr	r3, [r7, #24]
 80051a8:	015a      	lsls	r2, r3, #5
 80051aa:	69fb      	ldr	r3, [r7, #28]
 80051ac:	4413      	add	r3, r2
 80051ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	69ba      	ldr	r2, [r7, #24]
 80051b6:	0151      	lsls	r1, r2, #5
 80051b8:	69fa      	ldr	r2, [r7, #28]
 80051ba:	440a      	add	r2, r1
 80051bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051c4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80051c6:	69bb      	ldr	r3, [r7, #24]
 80051c8:	015a      	lsls	r2, r3, #5
 80051ca:	69fb      	ldr	r3, [r7, #28]
 80051cc:	4413      	add	r3, r2
 80051ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	69ba      	ldr	r2, [r7, #24]
 80051d6:	0151      	lsls	r1, r2, #5
 80051d8:	69fa      	ldr	r2, [r7, #28]
 80051da:	440a      	add	r2, r1
 80051dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051e0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80051e4:	6013      	str	r3, [r2, #0]
 80051e6:	e165      	b.n	80054b4 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80051e8:	69bb      	ldr	r3, [r7, #24]
 80051ea:	015a      	lsls	r2, r3, #5
 80051ec:	69fb      	ldr	r3, [r7, #28]
 80051ee:	4413      	add	r3, r2
 80051f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	69ba      	ldr	r2, [r7, #24]
 80051f8:	0151      	lsls	r1, r2, #5
 80051fa:	69fa      	ldr	r2, [r7, #28]
 80051fc:	440a      	add	r2, r1
 80051fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005202:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005206:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	791b      	ldrb	r3, [r3, #4]
 800520c:	2b01      	cmp	r3, #1
 800520e:	d015      	beq.n	800523c <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	691b      	ldr	r3, [r3, #16]
 8005214:	2b00      	cmp	r3, #0
 8005216:	f000 814d 	beq.w	80054b4 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800521a:	69fb      	ldr	r3, [r7, #28]
 800521c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005220:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	781b      	ldrb	r3, [r3, #0]
 8005226:	f003 030f 	and.w	r3, r3, #15
 800522a:	2101      	movs	r1, #1
 800522c:	fa01 f303 	lsl.w	r3, r1, r3
 8005230:	69f9      	ldr	r1, [r7, #28]
 8005232:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005236:	4313      	orrs	r3, r2
 8005238:	634b      	str	r3, [r1, #52]	; 0x34
 800523a:	e13b      	b.n	80054b4 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800523c:	69fb      	ldr	r3, [r7, #28]
 800523e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005242:	689b      	ldr	r3, [r3, #8]
 8005244:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005248:	2b00      	cmp	r3, #0
 800524a:	d110      	bne.n	800526e <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800524c:	69bb      	ldr	r3, [r7, #24]
 800524e:	015a      	lsls	r2, r3, #5
 8005250:	69fb      	ldr	r3, [r7, #28]
 8005252:	4413      	add	r3, r2
 8005254:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	69ba      	ldr	r2, [r7, #24]
 800525c:	0151      	lsls	r1, r2, #5
 800525e:	69fa      	ldr	r2, [r7, #28]
 8005260:	440a      	add	r2, r1
 8005262:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005266:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800526a:	6013      	str	r3, [r2, #0]
 800526c:	e00f      	b.n	800528e <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800526e:	69bb      	ldr	r3, [r7, #24]
 8005270:	015a      	lsls	r2, r3, #5
 8005272:	69fb      	ldr	r3, [r7, #28]
 8005274:	4413      	add	r3, r2
 8005276:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	69ba      	ldr	r2, [r7, #24]
 800527e:	0151      	lsls	r1, r2, #5
 8005280:	69fa      	ldr	r2, [r7, #28]
 8005282:	440a      	add	r2, r1
 8005284:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005288:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800528c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	68d9      	ldr	r1, [r3, #12]
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	781a      	ldrb	r2, [r3, #0]
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	691b      	ldr	r3, [r3, #16]
 800529a:	b298      	uxth	r0, r3
 800529c:	79fb      	ldrb	r3, [r7, #7]
 800529e:	9300      	str	r3, [sp, #0]
 80052a0:	4603      	mov	r3, r0
 80052a2:	68f8      	ldr	r0, [r7, #12]
 80052a4:	f000 f9b8 	bl	8005618 <USB_WritePacket>
 80052a8:	e104      	b.n	80054b4 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80052aa:	69bb      	ldr	r3, [r7, #24]
 80052ac:	015a      	lsls	r2, r3, #5
 80052ae:	69fb      	ldr	r3, [r7, #28]
 80052b0:	4413      	add	r3, r2
 80052b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052b6:	691b      	ldr	r3, [r3, #16]
 80052b8:	69ba      	ldr	r2, [r7, #24]
 80052ba:	0151      	lsls	r1, r2, #5
 80052bc:	69fa      	ldr	r2, [r7, #28]
 80052be:	440a      	add	r2, r1
 80052c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052c4:	0cdb      	lsrs	r3, r3, #19
 80052c6:	04db      	lsls	r3, r3, #19
 80052c8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80052ca:	69bb      	ldr	r3, [r7, #24]
 80052cc:	015a      	lsls	r2, r3, #5
 80052ce:	69fb      	ldr	r3, [r7, #28]
 80052d0:	4413      	add	r3, r2
 80052d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052d6:	691b      	ldr	r3, [r3, #16]
 80052d8:	69ba      	ldr	r2, [r7, #24]
 80052da:	0151      	lsls	r1, r2, #5
 80052dc:	69fa      	ldr	r2, [r7, #28]
 80052de:	440a      	add	r2, r1
 80052e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052e4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80052e8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80052ec:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80052ee:	69bb      	ldr	r3, [r7, #24]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d131      	bne.n	8005358 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	691b      	ldr	r3, [r3, #16]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d003      	beq.n	8005304 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	689a      	ldr	r2, [r3, #8]
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	689a      	ldr	r2, [r3, #8]
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800530c:	69bb      	ldr	r3, [r7, #24]
 800530e:	015a      	lsls	r2, r3, #5
 8005310:	69fb      	ldr	r3, [r7, #28]
 8005312:	4413      	add	r3, r2
 8005314:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005318:	691a      	ldr	r2, [r3, #16]
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	6a1b      	ldr	r3, [r3, #32]
 800531e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005322:	69b9      	ldr	r1, [r7, #24]
 8005324:	0148      	lsls	r0, r1, #5
 8005326:	69f9      	ldr	r1, [r7, #28]
 8005328:	4401      	add	r1, r0
 800532a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800532e:	4313      	orrs	r3, r2
 8005330:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005332:	69bb      	ldr	r3, [r7, #24]
 8005334:	015a      	lsls	r2, r3, #5
 8005336:	69fb      	ldr	r3, [r7, #28]
 8005338:	4413      	add	r3, r2
 800533a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800533e:	691b      	ldr	r3, [r3, #16]
 8005340:	69ba      	ldr	r2, [r7, #24]
 8005342:	0151      	lsls	r1, r2, #5
 8005344:	69fa      	ldr	r2, [r7, #28]
 8005346:	440a      	add	r2, r1
 8005348:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800534c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005350:	6113      	str	r3, [r2, #16]
 8005352:	e061      	b.n	8005418 <USB_EPStartXfer+0x484>
 8005354:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	691b      	ldr	r3, [r3, #16]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d123      	bne.n	80053a8 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005360:	69bb      	ldr	r3, [r7, #24]
 8005362:	015a      	lsls	r2, r3, #5
 8005364:	69fb      	ldr	r3, [r7, #28]
 8005366:	4413      	add	r3, r2
 8005368:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800536c:	691a      	ldr	r2, [r3, #16]
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	689b      	ldr	r3, [r3, #8]
 8005372:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005376:	69b9      	ldr	r1, [r7, #24]
 8005378:	0148      	lsls	r0, r1, #5
 800537a:	69f9      	ldr	r1, [r7, #28]
 800537c:	4401      	add	r1, r0
 800537e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005382:	4313      	orrs	r3, r2
 8005384:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005386:	69bb      	ldr	r3, [r7, #24]
 8005388:	015a      	lsls	r2, r3, #5
 800538a:	69fb      	ldr	r3, [r7, #28]
 800538c:	4413      	add	r3, r2
 800538e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005392:	691b      	ldr	r3, [r3, #16]
 8005394:	69ba      	ldr	r2, [r7, #24]
 8005396:	0151      	lsls	r1, r2, #5
 8005398:	69fa      	ldr	r2, [r7, #28]
 800539a:	440a      	add	r2, r1
 800539c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053a0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80053a4:	6113      	str	r3, [r2, #16]
 80053a6:	e037      	b.n	8005418 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	691a      	ldr	r2, [r3, #16]
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	689b      	ldr	r3, [r3, #8]
 80053b0:	4413      	add	r3, r2
 80053b2:	1e5a      	subs	r2, r3, #1
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	689b      	ldr	r3, [r3, #8]
 80053b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80053bc:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	689b      	ldr	r3, [r3, #8]
 80053c2:	8afa      	ldrh	r2, [r7, #22]
 80053c4:	fb03 f202 	mul.w	r2, r3, r2
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80053cc:	69bb      	ldr	r3, [r7, #24]
 80053ce:	015a      	lsls	r2, r3, #5
 80053d0:	69fb      	ldr	r3, [r7, #28]
 80053d2:	4413      	add	r3, r2
 80053d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053d8:	691a      	ldr	r2, [r3, #16]
 80053da:	8afb      	ldrh	r3, [r7, #22]
 80053dc:	04d9      	lsls	r1, r3, #19
 80053de:	4b38      	ldr	r3, [pc, #224]	; (80054c0 <USB_EPStartXfer+0x52c>)
 80053e0:	400b      	ands	r3, r1
 80053e2:	69b9      	ldr	r1, [r7, #24]
 80053e4:	0148      	lsls	r0, r1, #5
 80053e6:	69f9      	ldr	r1, [r7, #28]
 80053e8:	4401      	add	r1, r0
 80053ea:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80053ee:	4313      	orrs	r3, r2
 80053f0:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80053f2:	69bb      	ldr	r3, [r7, #24]
 80053f4:	015a      	lsls	r2, r3, #5
 80053f6:	69fb      	ldr	r3, [r7, #28]
 80053f8:	4413      	add	r3, r2
 80053fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053fe:	691a      	ldr	r2, [r3, #16]
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	6a1b      	ldr	r3, [r3, #32]
 8005404:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005408:	69b9      	ldr	r1, [r7, #24]
 800540a:	0148      	lsls	r0, r1, #5
 800540c:	69f9      	ldr	r1, [r7, #28]
 800540e:	4401      	add	r1, r0
 8005410:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005414:	4313      	orrs	r3, r2
 8005416:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8005418:	79fb      	ldrb	r3, [r7, #7]
 800541a:	2b01      	cmp	r3, #1
 800541c:	d10d      	bne.n	800543a <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	68db      	ldr	r3, [r3, #12]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d009      	beq.n	800543a <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	68d9      	ldr	r1, [r3, #12]
 800542a:	69bb      	ldr	r3, [r7, #24]
 800542c:	015a      	lsls	r2, r3, #5
 800542e:	69fb      	ldr	r3, [r7, #28]
 8005430:	4413      	add	r3, r2
 8005432:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005436:	460a      	mov	r2, r1
 8005438:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	791b      	ldrb	r3, [r3, #4]
 800543e:	2b01      	cmp	r3, #1
 8005440:	d128      	bne.n	8005494 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005442:	69fb      	ldr	r3, [r7, #28]
 8005444:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005448:	689b      	ldr	r3, [r3, #8]
 800544a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800544e:	2b00      	cmp	r3, #0
 8005450:	d110      	bne.n	8005474 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005452:	69bb      	ldr	r3, [r7, #24]
 8005454:	015a      	lsls	r2, r3, #5
 8005456:	69fb      	ldr	r3, [r7, #28]
 8005458:	4413      	add	r3, r2
 800545a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	69ba      	ldr	r2, [r7, #24]
 8005462:	0151      	lsls	r1, r2, #5
 8005464:	69fa      	ldr	r2, [r7, #28]
 8005466:	440a      	add	r2, r1
 8005468:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800546c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005470:	6013      	str	r3, [r2, #0]
 8005472:	e00f      	b.n	8005494 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005474:	69bb      	ldr	r3, [r7, #24]
 8005476:	015a      	lsls	r2, r3, #5
 8005478:	69fb      	ldr	r3, [r7, #28]
 800547a:	4413      	add	r3, r2
 800547c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	69ba      	ldr	r2, [r7, #24]
 8005484:	0151      	lsls	r1, r2, #5
 8005486:	69fa      	ldr	r2, [r7, #28]
 8005488:	440a      	add	r2, r1
 800548a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800548e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005492:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005494:	69bb      	ldr	r3, [r7, #24]
 8005496:	015a      	lsls	r2, r3, #5
 8005498:	69fb      	ldr	r3, [r7, #28]
 800549a:	4413      	add	r3, r2
 800549c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	69ba      	ldr	r2, [r7, #24]
 80054a4:	0151      	lsls	r1, r2, #5
 80054a6:	69fa      	ldr	r2, [r7, #28]
 80054a8:	440a      	add	r2, r1
 80054aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054ae:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80054b2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80054b4:	2300      	movs	r3, #0
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	3720      	adds	r7, #32
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd80      	pop	{r7, pc}
 80054be:	bf00      	nop
 80054c0:	1ff80000 	.word	0x1ff80000

080054c4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80054c4:	b480      	push	{r7}
 80054c6:	b087      	sub	sp, #28
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
 80054cc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80054ce:	2300      	movs	r3, #0
 80054d0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80054d2:	2300      	movs	r3, #0
 80054d4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	785b      	ldrb	r3, [r3, #1]
 80054de:	2b01      	cmp	r3, #1
 80054e0:	d14a      	bne.n	8005578 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	781b      	ldrb	r3, [r3, #0]
 80054e6:	015a      	lsls	r2, r3, #5
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	4413      	add	r3, r2
 80054ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80054f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80054fa:	f040 8086 	bne.w	800560a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	781b      	ldrb	r3, [r3, #0]
 8005502:	015a      	lsls	r2, r3, #5
 8005504:	693b      	ldr	r3, [r7, #16]
 8005506:	4413      	add	r3, r2
 8005508:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	683a      	ldr	r2, [r7, #0]
 8005510:	7812      	ldrb	r2, [r2, #0]
 8005512:	0151      	lsls	r1, r2, #5
 8005514:	693a      	ldr	r2, [r7, #16]
 8005516:	440a      	add	r2, r1
 8005518:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800551c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005520:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	781b      	ldrb	r3, [r3, #0]
 8005526:	015a      	lsls	r2, r3, #5
 8005528:	693b      	ldr	r3, [r7, #16]
 800552a:	4413      	add	r3, r2
 800552c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	683a      	ldr	r2, [r7, #0]
 8005534:	7812      	ldrb	r2, [r2, #0]
 8005536:	0151      	lsls	r1, r2, #5
 8005538:	693a      	ldr	r2, [r7, #16]
 800553a:	440a      	add	r2, r1
 800553c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005540:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005544:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	3301      	adds	r3, #1
 800554a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	f242 7210 	movw	r2, #10000	; 0x2710
 8005552:	4293      	cmp	r3, r2
 8005554:	d902      	bls.n	800555c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005556:	2301      	movs	r3, #1
 8005558:	75fb      	strb	r3, [r7, #23]
          break;
 800555a:	e056      	b.n	800560a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	781b      	ldrb	r3, [r3, #0]
 8005560:	015a      	lsls	r2, r3, #5
 8005562:	693b      	ldr	r3, [r7, #16]
 8005564:	4413      	add	r3, r2
 8005566:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005570:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005574:	d0e7      	beq.n	8005546 <USB_EPStopXfer+0x82>
 8005576:	e048      	b.n	800560a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	781b      	ldrb	r3, [r3, #0]
 800557c:	015a      	lsls	r2, r3, #5
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	4413      	add	r3, r2
 8005582:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800558c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005590:	d13b      	bne.n	800560a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	781b      	ldrb	r3, [r3, #0]
 8005596:	015a      	lsls	r2, r3, #5
 8005598:	693b      	ldr	r3, [r7, #16]
 800559a:	4413      	add	r3, r2
 800559c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	683a      	ldr	r2, [r7, #0]
 80055a4:	7812      	ldrb	r2, [r2, #0]
 80055a6:	0151      	lsls	r1, r2, #5
 80055a8:	693a      	ldr	r2, [r7, #16]
 80055aa:	440a      	add	r2, r1
 80055ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055b0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80055b4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	781b      	ldrb	r3, [r3, #0]
 80055ba:	015a      	lsls	r2, r3, #5
 80055bc:	693b      	ldr	r3, [r7, #16]
 80055be:	4413      	add	r3, r2
 80055c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	683a      	ldr	r2, [r7, #0]
 80055c8:	7812      	ldrb	r2, [r2, #0]
 80055ca:	0151      	lsls	r1, r2, #5
 80055cc:	693a      	ldr	r2, [r7, #16]
 80055ce:	440a      	add	r2, r1
 80055d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055d4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80055d8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	3301      	adds	r3, #1
 80055de:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	f242 7210 	movw	r2, #10000	; 0x2710
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d902      	bls.n	80055f0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80055ea:	2301      	movs	r3, #1
 80055ec:	75fb      	strb	r3, [r7, #23]
          break;
 80055ee:	e00c      	b.n	800560a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	781b      	ldrb	r3, [r3, #0]
 80055f4:	015a      	lsls	r2, r3, #5
 80055f6:	693b      	ldr	r3, [r7, #16]
 80055f8:	4413      	add	r3, r2
 80055fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005604:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005608:	d0e7      	beq.n	80055da <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800560a:	7dfb      	ldrb	r3, [r7, #23]
}
 800560c:	4618      	mov	r0, r3
 800560e:	371c      	adds	r7, #28
 8005610:	46bd      	mov	sp, r7
 8005612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005616:	4770      	bx	lr

08005618 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005618:	b480      	push	{r7}
 800561a:	b089      	sub	sp, #36	; 0x24
 800561c:	af00      	add	r7, sp, #0
 800561e:	60f8      	str	r0, [r7, #12]
 8005620:	60b9      	str	r1, [r7, #8]
 8005622:	4611      	mov	r1, r2
 8005624:	461a      	mov	r2, r3
 8005626:	460b      	mov	r3, r1
 8005628:	71fb      	strb	r3, [r7, #7]
 800562a:	4613      	mov	r3, r2
 800562c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005636:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800563a:	2b00      	cmp	r3, #0
 800563c:	d123      	bne.n	8005686 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800563e:	88bb      	ldrh	r3, [r7, #4]
 8005640:	3303      	adds	r3, #3
 8005642:	089b      	lsrs	r3, r3, #2
 8005644:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005646:	2300      	movs	r3, #0
 8005648:	61bb      	str	r3, [r7, #24]
 800564a:	e018      	b.n	800567e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800564c:	79fb      	ldrb	r3, [r7, #7]
 800564e:	031a      	lsls	r2, r3, #12
 8005650:	697b      	ldr	r3, [r7, #20]
 8005652:	4413      	add	r3, r2
 8005654:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005658:	461a      	mov	r2, r3
 800565a:	69fb      	ldr	r3, [r7, #28]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005660:	69fb      	ldr	r3, [r7, #28]
 8005662:	3301      	adds	r3, #1
 8005664:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005666:	69fb      	ldr	r3, [r7, #28]
 8005668:	3301      	adds	r3, #1
 800566a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800566c:	69fb      	ldr	r3, [r7, #28]
 800566e:	3301      	adds	r3, #1
 8005670:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005672:	69fb      	ldr	r3, [r7, #28]
 8005674:	3301      	adds	r3, #1
 8005676:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005678:	69bb      	ldr	r3, [r7, #24]
 800567a:	3301      	adds	r3, #1
 800567c:	61bb      	str	r3, [r7, #24]
 800567e:	69ba      	ldr	r2, [r7, #24]
 8005680:	693b      	ldr	r3, [r7, #16]
 8005682:	429a      	cmp	r2, r3
 8005684:	d3e2      	bcc.n	800564c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005686:	2300      	movs	r3, #0
}
 8005688:	4618      	mov	r0, r3
 800568a:	3724      	adds	r7, #36	; 0x24
 800568c:	46bd      	mov	sp, r7
 800568e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005692:	4770      	bx	lr

08005694 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005694:	b480      	push	{r7}
 8005696:	b08b      	sub	sp, #44	; 0x2c
 8005698:	af00      	add	r7, sp, #0
 800569a:	60f8      	str	r0, [r7, #12]
 800569c:	60b9      	str	r1, [r7, #8]
 800569e:	4613      	mov	r3, r2
 80056a0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80056aa:	88fb      	ldrh	r3, [r7, #6]
 80056ac:	089b      	lsrs	r3, r3, #2
 80056ae:	b29b      	uxth	r3, r3
 80056b0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80056b2:	88fb      	ldrh	r3, [r7, #6]
 80056b4:	f003 0303 	and.w	r3, r3, #3
 80056b8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80056ba:	2300      	movs	r3, #0
 80056bc:	623b      	str	r3, [r7, #32]
 80056be:	e014      	b.n	80056ea <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80056c0:	69bb      	ldr	r3, [r7, #24]
 80056c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056c6:	681a      	ldr	r2, [r3, #0]
 80056c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ca:	601a      	str	r2, [r3, #0]
    pDest++;
 80056cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ce:	3301      	adds	r3, #1
 80056d0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80056d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d4:	3301      	adds	r3, #1
 80056d6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80056d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056da:	3301      	adds	r3, #1
 80056dc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80056de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e0:	3301      	adds	r3, #1
 80056e2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80056e4:	6a3b      	ldr	r3, [r7, #32]
 80056e6:	3301      	adds	r3, #1
 80056e8:	623b      	str	r3, [r7, #32]
 80056ea:	6a3a      	ldr	r2, [r7, #32]
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	429a      	cmp	r2, r3
 80056f0:	d3e6      	bcc.n	80056c0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80056f2:	8bfb      	ldrh	r3, [r7, #30]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d01e      	beq.n	8005736 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80056f8:	2300      	movs	r3, #0
 80056fa:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80056fc:	69bb      	ldr	r3, [r7, #24]
 80056fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005702:	461a      	mov	r2, r3
 8005704:	f107 0310 	add.w	r3, r7, #16
 8005708:	6812      	ldr	r2, [r2, #0]
 800570a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800570c:	693a      	ldr	r2, [r7, #16]
 800570e:	6a3b      	ldr	r3, [r7, #32]
 8005710:	b2db      	uxtb	r3, r3
 8005712:	00db      	lsls	r3, r3, #3
 8005714:	fa22 f303 	lsr.w	r3, r2, r3
 8005718:	b2da      	uxtb	r2, r3
 800571a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800571c:	701a      	strb	r2, [r3, #0]
      i++;
 800571e:	6a3b      	ldr	r3, [r7, #32]
 8005720:	3301      	adds	r3, #1
 8005722:	623b      	str	r3, [r7, #32]
      pDest++;
 8005724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005726:	3301      	adds	r3, #1
 8005728:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800572a:	8bfb      	ldrh	r3, [r7, #30]
 800572c:	3b01      	subs	r3, #1
 800572e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005730:	8bfb      	ldrh	r3, [r7, #30]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d1ea      	bne.n	800570c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005738:	4618      	mov	r0, r3
 800573a:	372c      	adds	r7, #44	; 0x2c
 800573c:	46bd      	mov	sp, r7
 800573e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005742:	4770      	bx	lr

08005744 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005744:	b480      	push	{r7}
 8005746:	b085      	sub	sp, #20
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
 800574c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	781b      	ldrb	r3, [r3, #0]
 8005756:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	785b      	ldrb	r3, [r3, #1]
 800575c:	2b01      	cmp	r3, #1
 800575e:	d12c      	bne.n	80057ba <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	015a      	lsls	r2, r3, #5
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	4413      	add	r3, r2
 8005768:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	2b00      	cmp	r3, #0
 8005770:	db12      	blt.n	8005798 <USB_EPSetStall+0x54>
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d00f      	beq.n	8005798 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	015a      	lsls	r2, r3, #5
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	4413      	add	r3, r2
 8005780:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	68ba      	ldr	r2, [r7, #8]
 8005788:	0151      	lsls	r1, r2, #5
 800578a:	68fa      	ldr	r2, [r7, #12]
 800578c:	440a      	add	r2, r1
 800578e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005792:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005796:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	015a      	lsls	r2, r3, #5
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	4413      	add	r3, r2
 80057a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	68ba      	ldr	r2, [r7, #8]
 80057a8:	0151      	lsls	r1, r2, #5
 80057aa:	68fa      	ldr	r2, [r7, #12]
 80057ac:	440a      	add	r2, r1
 80057ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057b2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80057b6:	6013      	str	r3, [r2, #0]
 80057b8:	e02b      	b.n	8005812 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	015a      	lsls	r2, r3, #5
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	4413      	add	r3, r2
 80057c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	db12      	blt.n	80057f2 <USB_EPSetStall+0xae>
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d00f      	beq.n	80057f2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	015a      	lsls	r2, r3, #5
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	4413      	add	r3, r2
 80057da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	68ba      	ldr	r2, [r7, #8]
 80057e2:	0151      	lsls	r1, r2, #5
 80057e4:	68fa      	ldr	r2, [r7, #12]
 80057e6:	440a      	add	r2, r1
 80057e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057ec:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80057f0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	015a      	lsls	r2, r3, #5
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	4413      	add	r3, r2
 80057fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	68ba      	ldr	r2, [r7, #8]
 8005802:	0151      	lsls	r1, r2, #5
 8005804:	68fa      	ldr	r2, [r7, #12]
 8005806:	440a      	add	r2, r1
 8005808:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800580c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005810:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005812:	2300      	movs	r3, #0
}
 8005814:	4618      	mov	r0, r3
 8005816:	3714      	adds	r7, #20
 8005818:	46bd      	mov	sp, r7
 800581a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581e:	4770      	bx	lr

08005820 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005820:	b480      	push	{r7}
 8005822:	b085      	sub	sp, #20
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
 8005828:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	781b      	ldrb	r3, [r3, #0]
 8005832:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	785b      	ldrb	r3, [r3, #1]
 8005838:	2b01      	cmp	r3, #1
 800583a:	d128      	bne.n	800588e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	015a      	lsls	r2, r3, #5
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	4413      	add	r3, r2
 8005844:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	68ba      	ldr	r2, [r7, #8]
 800584c:	0151      	lsls	r1, r2, #5
 800584e:	68fa      	ldr	r2, [r7, #12]
 8005850:	440a      	add	r2, r1
 8005852:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005856:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800585a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	791b      	ldrb	r3, [r3, #4]
 8005860:	2b03      	cmp	r3, #3
 8005862:	d003      	beq.n	800586c <USB_EPClearStall+0x4c>
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	791b      	ldrb	r3, [r3, #4]
 8005868:	2b02      	cmp	r3, #2
 800586a:	d138      	bne.n	80058de <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	015a      	lsls	r2, r3, #5
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	4413      	add	r3, r2
 8005874:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	68ba      	ldr	r2, [r7, #8]
 800587c:	0151      	lsls	r1, r2, #5
 800587e:	68fa      	ldr	r2, [r7, #12]
 8005880:	440a      	add	r2, r1
 8005882:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005886:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800588a:	6013      	str	r3, [r2, #0]
 800588c:	e027      	b.n	80058de <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	015a      	lsls	r2, r3, #5
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	4413      	add	r3, r2
 8005896:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	68ba      	ldr	r2, [r7, #8]
 800589e:	0151      	lsls	r1, r2, #5
 80058a0:	68fa      	ldr	r2, [r7, #12]
 80058a2:	440a      	add	r2, r1
 80058a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058a8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80058ac:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	791b      	ldrb	r3, [r3, #4]
 80058b2:	2b03      	cmp	r3, #3
 80058b4:	d003      	beq.n	80058be <USB_EPClearStall+0x9e>
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	791b      	ldrb	r3, [r3, #4]
 80058ba:	2b02      	cmp	r3, #2
 80058bc:	d10f      	bne.n	80058de <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	015a      	lsls	r2, r3, #5
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	4413      	add	r3, r2
 80058c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	68ba      	ldr	r2, [r7, #8]
 80058ce:	0151      	lsls	r1, r2, #5
 80058d0:	68fa      	ldr	r2, [r7, #12]
 80058d2:	440a      	add	r2, r1
 80058d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058dc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80058de:	2300      	movs	r3, #0
}
 80058e0:	4618      	mov	r0, r3
 80058e2:	3714      	adds	r7, #20
 80058e4:	46bd      	mov	sp, r7
 80058e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ea:	4770      	bx	lr

080058ec <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80058ec:	b480      	push	{r7}
 80058ee:	b085      	sub	sp, #20
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
 80058f4:	460b      	mov	r3, r1
 80058f6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	68fa      	ldr	r2, [r7, #12]
 8005906:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800590a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800590e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005916:	681a      	ldr	r2, [r3, #0]
 8005918:	78fb      	ldrb	r3, [r7, #3]
 800591a:	011b      	lsls	r3, r3, #4
 800591c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005920:	68f9      	ldr	r1, [r7, #12]
 8005922:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005926:	4313      	orrs	r3, r2
 8005928:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800592a:	2300      	movs	r3, #0
}
 800592c:	4618      	mov	r0, r3
 800592e:	3714      	adds	r7, #20
 8005930:	46bd      	mov	sp, r7
 8005932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005936:	4770      	bx	lr

08005938 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005938:	b480      	push	{r7}
 800593a:	b085      	sub	sp, #20
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	68fa      	ldr	r2, [r7, #12]
 800594e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005952:	f023 0303 	bic.w	r3, r3, #3
 8005956:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	68fa      	ldr	r2, [r7, #12]
 8005962:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005966:	f023 0302 	bic.w	r3, r3, #2
 800596a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800596c:	2300      	movs	r3, #0
}
 800596e:	4618      	mov	r0, r3
 8005970:	3714      	adds	r7, #20
 8005972:	46bd      	mov	sp, r7
 8005974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005978:	4770      	bx	lr

0800597a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800597a:	b480      	push	{r7}
 800597c:	b085      	sub	sp, #20
 800597e:	af00      	add	r7, sp, #0
 8005980:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	68fa      	ldr	r2, [r7, #12]
 8005990:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005994:	f023 0303 	bic.w	r3, r3, #3
 8005998:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	68fa      	ldr	r2, [r7, #12]
 80059a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80059a8:	f043 0302 	orr.w	r3, r3, #2
 80059ac:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80059ae:	2300      	movs	r3, #0
}
 80059b0:	4618      	mov	r0, r3
 80059b2:	3714      	adds	r7, #20
 80059b4:	46bd      	mov	sp, r7
 80059b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ba:	4770      	bx	lr

080059bc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80059bc:	b480      	push	{r7}
 80059be:	b085      	sub	sp, #20
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	695b      	ldr	r3, [r3, #20]
 80059c8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	699b      	ldr	r3, [r3, #24]
 80059ce:	68fa      	ldr	r2, [r7, #12]
 80059d0:	4013      	ands	r3, r2
 80059d2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80059d4:	68fb      	ldr	r3, [r7, #12]
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	3714      	adds	r7, #20
 80059da:	46bd      	mov	sp, r7
 80059dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e0:	4770      	bx	lr

080059e2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80059e2:	b480      	push	{r7}
 80059e4:	b085      	sub	sp, #20
 80059e6:	af00      	add	r7, sp, #0
 80059e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059f4:	699b      	ldr	r3, [r3, #24]
 80059f6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059fe:	69db      	ldr	r3, [r3, #28]
 8005a00:	68ba      	ldr	r2, [r7, #8]
 8005a02:	4013      	ands	r3, r2
 8005a04:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	0c1b      	lsrs	r3, r3, #16
}
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	3714      	adds	r7, #20
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a14:	4770      	bx	lr

08005a16 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005a16:	b480      	push	{r7}
 8005a18:	b085      	sub	sp, #20
 8005a1a:	af00      	add	r7, sp, #0
 8005a1c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a28:	699b      	ldr	r3, [r3, #24]
 8005a2a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a32:	69db      	ldr	r3, [r3, #28]
 8005a34:	68ba      	ldr	r2, [r7, #8]
 8005a36:	4013      	ands	r3, r2
 8005a38:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	b29b      	uxth	r3, r3
}
 8005a3e:	4618      	mov	r0, r3
 8005a40:	3714      	adds	r7, #20
 8005a42:	46bd      	mov	sp, r7
 8005a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a48:	4770      	bx	lr

08005a4a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005a4a:	b480      	push	{r7}
 8005a4c:	b085      	sub	sp, #20
 8005a4e:	af00      	add	r7, sp, #0
 8005a50:	6078      	str	r0, [r7, #4]
 8005a52:	460b      	mov	r3, r1
 8005a54:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005a5a:	78fb      	ldrb	r3, [r7, #3]
 8005a5c:	015a      	lsls	r2, r3, #5
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	4413      	add	r3, r2
 8005a62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a66:	689b      	ldr	r3, [r3, #8]
 8005a68:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a70:	695b      	ldr	r3, [r3, #20]
 8005a72:	68ba      	ldr	r2, [r7, #8]
 8005a74:	4013      	ands	r3, r2
 8005a76:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005a78:	68bb      	ldr	r3, [r7, #8]
}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	3714      	adds	r7, #20
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a84:	4770      	bx	lr

08005a86 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005a86:	b480      	push	{r7}
 8005a88:	b087      	sub	sp, #28
 8005a8a:	af00      	add	r7, sp, #0
 8005a8c:	6078      	str	r0, [r7, #4]
 8005a8e:	460b      	mov	r3, r1
 8005a90:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a9c:	691b      	ldr	r3, [r3, #16]
 8005a9e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005aa0:	697b      	ldr	r3, [r7, #20]
 8005aa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005aa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005aa8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005aaa:	78fb      	ldrb	r3, [r7, #3]
 8005aac:	f003 030f 	and.w	r3, r3, #15
 8005ab0:	68fa      	ldr	r2, [r7, #12]
 8005ab2:	fa22 f303 	lsr.w	r3, r2, r3
 8005ab6:	01db      	lsls	r3, r3, #7
 8005ab8:	b2db      	uxtb	r3, r3
 8005aba:	693a      	ldr	r2, [r7, #16]
 8005abc:	4313      	orrs	r3, r2
 8005abe:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005ac0:	78fb      	ldrb	r3, [r7, #3]
 8005ac2:	015a      	lsls	r2, r3, #5
 8005ac4:	697b      	ldr	r3, [r7, #20]
 8005ac6:	4413      	add	r3, r2
 8005ac8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005acc:	689b      	ldr	r3, [r3, #8]
 8005ace:	693a      	ldr	r2, [r7, #16]
 8005ad0:	4013      	ands	r3, r2
 8005ad2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005ad4:	68bb      	ldr	r3, [r7, #8]
}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	371c      	adds	r7, #28
 8005ada:	46bd      	mov	sp, r7
 8005adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae0:	4770      	bx	lr

08005ae2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005ae2:	b480      	push	{r7}
 8005ae4:	b083      	sub	sp, #12
 8005ae6:	af00      	add	r7, sp, #0
 8005ae8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	695b      	ldr	r3, [r3, #20]
 8005aee:	f003 0301 	and.w	r3, r3, #1
}
 8005af2:	4618      	mov	r0, r3
 8005af4:	370c      	adds	r7, #12
 8005af6:	46bd      	mov	sp, r7
 8005af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afc:	4770      	bx	lr

08005afe <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8005afe:	b480      	push	{r7}
 8005b00:	b085      	sub	sp, #20
 8005b02:	af00      	add	r7, sp, #0
 8005b04:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	68fa      	ldr	r2, [r7, #12]
 8005b14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b18:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005b1c:	f023 0307 	bic.w	r3, r3, #7
 8005b20:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b28:	685b      	ldr	r3, [r3, #4]
 8005b2a:	68fa      	ldr	r2, [r7, #12]
 8005b2c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b34:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005b36:	2300      	movs	r3, #0
}
 8005b38:	4618      	mov	r0, r3
 8005b3a:	3714      	adds	r7, #20
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b42:	4770      	bx	lr

08005b44 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b087      	sub	sp, #28
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	60f8      	str	r0, [r7, #12]
 8005b4c:	460b      	mov	r3, r1
 8005b4e:	607a      	str	r2, [r7, #4]
 8005b50:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	333c      	adds	r3, #60	; 0x3c
 8005b5a:	3304      	adds	r3, #4
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005b60:	693b      	ldr	r3, [r7, #16]
 8005b62:	4a26      	ldr	r2, [pc, #152]	; (8005bfc <USB_EP0_OutStart+0xb8>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d90a      	bls.n	8005b7e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005b68:	697b      	ldr	r3, [r7, #20]
 8005b6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b74:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b78:	d101      	bne.n	8005b7e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	e037      	b.n	8005bee <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b84:	461a      	mov	r2, r3
 8005b86:	2300      	movs	r3, #0
 8005b88:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b90:	691b      	ldr	r3, [r3, #16]
 8005b92:	697a      	ldr	r2, [r7, #20]
 8005b94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b98:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005b9c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005b9e:	697b      	ldr	r3, [r7, #20]
 8005ba0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ba4:	691b      	ldr	r3, [r3, #16]
 8005ba6:	697a      	ldr	r2, [r7, #20]
 8005ba8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bac:	f043 0318 	orr.w	r3, r3, #24
 8005bb0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005bb2:	697b      	ldr	r3, [r7, #20]
 8005bb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bb8:	691b      	ldr	r3, [r3, #16]
 8005bba:	697a      	ldr	r2, [r7, #20]
 8005bbc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bc0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005bc4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005bc6:	7afb      	ldrb	r3, [r7, #11]
 8005bc8:	2b01      	cmp	r3, #1
 8005bca:	d10f      	bne.n	8005bec <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005bcc:	697b      	ldr	r3, [r7, #20]
 8005bce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bd2:	461a      	mov	r2, r3
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005bd8:	697b      	ldr	r3, [r7, #20]
 8005bda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	697a      	ldr	r2, [r7, #20]
 8005be2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005be6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005bea:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005bec:	2300      	movs	r3, #0
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	371c      	adds	r7, #28
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf8:	4770      	bx	lr
 8005bfa:	bf00      	nop
 8005bfc:	4f54300a 	.word	0x4f54300a

08005c00 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005c00:	b480      	push	{r7}
 8005c02:	b085      	sub	sp, #20
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005c08:	2300      	movs	r3, #0
 8005c0a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	3301      	adds	r3, #1
 8005c10:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005c18:	d901      	bls.n	8005c1e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005c1a:	2303      	movs	r3, #3
 8005c1c:	e01b      	b.n	8005c56 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	691b      	ldr	r3, [r3, #16]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	daf2      	bge.n	8005c0c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005c26:	2300      	movs	r3, #0
 8005c28:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	691b      	ldr	r3, [r3, #16]
 8005c2e:	f043 0201 	orr.w	r2, r3, #1
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	3301      	adds	r3, #1
 8005c3a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005c42:	d901      	bls.n	8005c48 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005c44:	2303      	movs	r3, #3
 8005c46:	e006      	b.n	8005c56 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	691b      	ldr	r3, [r3, #16]
 8005c4c:	f003 0301 	and.w	r3, r3, #1
 8005c50:	2b01      	cmp	r3, #1
 8005c52:	d0f0      	beq.n	8005c36 <USB_CoreReset+0x36>

  return HAL_OK;
 8005c54:	2300      	movs	r3, #0
}
 8005c56:	4618      	mov	r0, r3
 8005c58:	3714      	adds	r7, #20
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c60:	4770      	bx	lr
	...

08005c64 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b084      	sub	sp, #16
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
 8005c6c:	460b      	mov	r3, r1
 8005c6e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005c70:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005c74:	f005 f9ea 	bl	800b04c <USBD_static_malloc>
 8005c78:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d109      	bne.n	8005c94 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	32b0      	adds	r2, #176	; 0xb0
 8005c8a:	2100      	movs	r1, #0
 8005c8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005c90:	2302      	movs	r3, #2
 8005c92:	e0d4      	b.n	8005e3e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8005c94:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8005c98:	2100      	movs	r1, #0
 8005c9a:	68f8      	ldr	r0, [r7, #12]
 8005c9c:	f005 fa26 	bl	800b0ec <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	32b0      	adds	r2, #176	; 0xb0
 8005caa:	68f9      	ldr	r1, [r7, #12]
 8005cac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	32b0      	adds	r2, #176	; 0xb0
 8005cba:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	7c1b      	ldrb	r3, [r3, #16]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d138      	bne.n	8005d3e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005ccc:	4b5e      	ldr	r3, [pc, #376]	; (8005e48 <USBD_CDC_Init+0x1e4>)
 8005cce:	7819      	ldrb	r1, [r3, #0]
 8005cd0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005cd4:	2202      	movs	r2, #2
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	f005 f895 	bl	800ae06 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005cdc:	4b5a      	ldr	r3, [pc, #360]	; (8005e48 <USBD_CDC_Init+0x1e4>)
 8005cde:	781b      	ldrb	r3, [r3, #0]
 8005ce0:	f003 020f 	and.w	r2, r3, #15
 8005ce4:	6879      	ldr	r1, [r7, #4]
 8005ce6:	4613      	mov	r3, r2
 8005ce8:	009b      	lsls	r3, r3, #2
 8005cea:	4413      	add	r3, r2
 8005cec:	009b      	lsls	r3, r3, #2
 8005cee:	440b      	add	r3, r1
 8005cf0:	3324      	adds	r3, #36	; 0x24
 8005cf2:	2201      	movs	r2, #1
 8005cf4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005cf6:	4b55      	ldr	r3, [pc, #340]	; (8005e4c <USBD_CDC_Init+0x1e8>)
 8005cf8:	7819      	ldrb	r1, [r3, #0]
 8005cfa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005cfe:	2202      	movs	r2, #2
 8005d00:	6878      	ldr	r0, [r7, #4]
 8005d02:	f005 f880 	bl	800ae06 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005d06:	4b51      	ldr	r3, [pc, #324]	; (8005e4c <USBD_CDC_Init+0x1e8>)
 8005d08:	781b      	ldrb	r3, [r3, #0]
 8005d0a:	f003 020f 	and.w	r2, r3, #15
 8005d0e:	6879      	ldr	r1, [r7, #4]
 8005d10:	4613      	mov	r3, r2
 8005d12:	009b      	lsls	r3, r3, #2
 8005d14:	4413      	add	r3, r2
 8005d16:	009b      	lsls	r3, r3, #2
 8005d18:	440b      	add	r3, r1
 8005d1a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005d1e:	2201      	movs	r2, #1
 8005d20:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005d22:	4b4b      	ldr	r3, [pc, #300]	; (8005e50 <USBD_CDC_Init+0x1ec>)
 8005d24:	781b      	ldrb	r3, [r3, #0]
 8005d26:	f003 020f 	and.w	r2, r3, #15
 8005d2a:	6879      	ldr	r1, [r7, #4]
 8005d2c:	4613      	mov	r3, r2
 8005d2e:	009b      	lsls	r3, r3, #2
 8005d30:	4413      	add	r3, r2
 8005d32:	009b      	lsls	r3, r3, #2
 8005d34:	440b      	add	r3, r1
 8005d36:	3326      	adds	r3, #38	; 0x26
 8005d38:	2210      	movs	r2, #16
 8005d3a:	801a      	strh	r2, [r3, #0]
 8005d3c:	e035      	b.n	8005daa <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005d3e:	4b42      	ldr	r3, [pc, #264]	; (8005e48 <USBD_CDC_Init+0x1e4>)
 8005d40:	7819      	ldrb	r1, [r3, #0]
 8005d42:	2340      	movs	r3, #64	; 0x40
 8005d44:	2202      	movs	r2, #2
 8005d46:	6878      	ldr	r0, [r7, #4]
 8005d48:	f005 f85d 	bl	800ae06 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005d4c:	4b3e      	ldr	r3, [pc, #248]	; (8005e48 <USBD_CDC_Init+0x1e4>)
 8005d4e:	781b      	ldrb	r3, [r3, #0]
 8005d50:	f003 020f 	and.w	r2, r3, #15
 8005d54:	6879      	ldr	r1, [r7, #4]
 8005d56:	4613      	mov	r3, r2
 8005d58:	009b      	lsls	r3, r3, #2
 8005d5a:	4413      	add	r3, r2
 8005d5c:	009b      	lsls	r3, r3, #2
 8005d5e:	440b      	add	r3, r1
 8005d60:	3324      	adds	r3, #36	; 0x24
 8005d62:	2201      	movs	r2, #1
 8005d64:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005d66:	4b39      	ldr	r3, [pc, #228]	; (8005e4c <USBD_CDC_Init+0x1e8>)
 8005d68:	7819      	ldrb	r1, [r3, #0]
 8005d6a:	2340      	movs	r3, #64	; 0x40
 8005d6c:	2202      	movs	r2, #2
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	f005 f849 	bl	800ae06 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005d74:	4b35      	ldr	r3, [pc, #212]	; (8005e4c <USBD_CDC_Init+0x1e8>)
 8005d76:	781b      	ldrb	r3, [r3, #0]
 8005d78:	f003 020f 	and.w	r2, r3, #15
 8005d7c:	6879      	ldr	r1, [r7, #4]
 8005d7e:	4613      	mov	r3, r2
 8005d80:	009b      	lsls	r3, r3, #2
 8005d82:	4413      	add	r3, r2
 8005d84:	009b      	lsls	r3, r3, #2
 8005d86:	440b      	add	r3, r1
 8005d88:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005d8c:	2201      	movs	r2, #1
 8005d8e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005d90:	4b2f      	ldr	r3, [pc, #188]	; (8005e50 <USBD_CDC_Init+0x1ec>)
 8005d92:	781b      	ldrb	r3, [r3, #0]
 8005d94:	f003 020f 	and.w	r2, r3, #15
 8005d98:	6879      	ldr	r1, [r7, #4]
 8005d9a:	4613      	mov	r3, r2
 8005d9c:	009b      	lsls	r3, r3, #2
 8005d9e:	4413      	add	r3, r2
 8005da0:	009b      	lsls	r3, r3, #2
 8005da2:	440b      	add	r3, r1
 8005da4:	3326      	adds	r3, #38	; 0x26
 8005da6:	2210      	movs	r2, #16
 8005da8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005daa:	4b29      	ldr	r3, [pc, #164]	; (8005e50 <USBD_CDC_Init+0x1ec>)
 8005dac:	7819      	ldrb	r1, [r3, #0]
 8005dae:	2308      	movs	r3, #8
 8005db0:	2203      	movs	r2, #3
 8005db2:	6878      	ldr	r0, [r7, #4]
 8005db4:	f005 f827 	bl	800ae06 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8005db8:	4b25      	ldr	r3, [pc, #148]	; (8005e50 <USBD_CDC_Init+0x1ec>)
 8005dba:	781b      	ldrb	r3, [r3, #0]
 8005dbc:	f003 020f 	and.w	r2, r3, #15
 8005dc0:	6879      	ldr	r1, [r7, #4]
 8005dc2:	4613      	mov	r3, r2
 8005dc4:	009b      	lsls	r3, r3, #2
 8005dc6:	4413      	add	r3, r2
 8005dc8:	009b      	lsls	r3, r3, #2
 8005dca:	440b      	add	r3, r1
 8005dcc:	3324      	adds	r3, #36	; 0x24
 8005dce:	2201      	movs	r2, #1
 8005dd0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005de0:	687a      	ldr	r2, [r7, #4]
 8005de2:	33b0      	adds	r3, #176	; 0xb0
 8005de4:	009b      	lsls	r3, r3, #2
 8005de6:	4413      	add	r3, r2
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	2200      	movs	r2, #0
 8005df2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d101      	bne.n	8005e0c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8005e08:	2302      	movs	r3, #2
 8005e0a:	e018      	b.n	8005e3e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	7c1b      	ldrb	r3, [r3, #16]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d10a      	bne.n	8005e2a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005e14:	4b0d      	ldr	r3, [pc, #52]	; (8005e4c <USBD_CDC_Init+0x1e8>)
 8005e16:	7819      	ldrb	r1, [r3, #0]
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005e1e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f005 f8de 	bl	800afe4 <USBD_LL_PrepareReceive>
 8005e28:	e008      	b.n	8005e3c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005e2a:	4b08      	ldr	r3, [pc, #32]	; (8005e4c <USBD_CDC_Init+0x1e8>)
 8005e2c:	7819      	ldrb	r1, [r3, #0]
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005e34:	2340      	movs	r3, #64	; 0x40
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	f005 f8d4 	bl	800afe4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005e3c:	2300      	movs	r3, #0
}
 8005e3e:	4618      	mov	r0, r3
 8005e40:	3710      	adds	r7, #16
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bd80      	pop	{r7, pc}
 8005e46:	bf00      	nop
 8005e48:	20000093 	.word	0x20000093
 8005e4c:	20000094 	.word	0x20000094
 8005e50:	20000095 	.word	0x20000095

08005e54 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b082      	sub	sp, #8
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
 8005e5c:	460b      	mov	r3, r1
 8005e5e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8005e60:	4b3a      	ldr	r3, [pc, #232]	; (8005f4c <USBD_CDC_DeInit+0xf8>)
 8005e62:	781b      	ldrb	r3, [r3, #0]
 8005e64:	4619      	mov	r1, r3
 8005e66:	6878      	ldr	r0, [r7, #4]
 8005e68:	f004 fff3 	bl	800ae52 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8005e6c:	4b37      	ldr	r3, [pc, #220]	; (8005f4c <USBD_CDC_DeInit+0xf8>)
 8005e6e:	781b      	ldrb	r3, [r3, #0]
 8005e70:	f003 020f 	and.w	r2, r3, #15
 8005e74:	6879      	ldr	r1, [r7, #4]
 8005e76:	4613      	mov	r3, r2
 8005e78:	009b      	lsls	r3, r3, #2
 8005e7a:	4413      	add	r3, r2
 8005e7c:	009b      	lsls	r3, r3, #2
 8005e7e:	440b      	add	r3, r1
 8005e80:	3324      	adds	r3, #36	; 0x24
 8005e82:	2200      	movs	r2, #0
 8005e84:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8005e86:	4b32      	ldr	r3, [pc, #200]	; (8005f50 <USBD_CDC_DeInit+0xfc>)
 8005e88:	781b      	ldrb	r3, [r3, #0]
 8005e8a:	4619      	mov	r1, r3
 8005e8c:	6878      	ldr	r0, [r7, #4]
 8005e8e:	f004 ffe0 	bl	800ae52 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8005e92:	4b2f      	ldr	r3, [pc, #188]	; (8005f50 <USBD_CDC_DeInit+0xfc>)
 8005e94:	781b      	ldrb	r3, [r3, #0]
 8005e96:	f003 020f 	and.w	r2, r3, #15
 8005e9a:	6879      	ldr	r1, [r7, #4]
 8005e9c:	4613      	mov	r3, r2
 8005e9e:	009b      	lsls	r3, r3, #2
 8005ea0:	4413      	add	r3, r2
 8005ea2:	009b      	lsls	r3, r3, #2
 8005ea4:	440b      	add	r3, r1
 8005ea6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005eaa:	2200      	movs	r2, #0
 8005eac:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8005eae:	4b29      	ldr	r3, [pc, #164]	; (8005f54 <USBD_CDC_DeInit+0x100>)
 8005eb0:	781b      	ldrb	r3, [r3, #0]
 8005eb2:	4619      	mov	r1, r3
 8005eb4:	6878      	ldr	r0, [r7, #4]
 8005eb6:	f004 ffcc 	bl	800ae52 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8005eba:	4b26      	ldr	r3, [pc, #152]	; (8005f54 <USBD_CDC_DeInit+0x100>)
 8005ebc:	781b      	ldrb	r3, [r3, #0]
 8005ebe:	f003 020f 	and.w	r2, r3, #15
 8005ec2:	6879      	ldr	r1, [r7, #4]
 8005ec4:	4613      	mov	r3, r2
 8005ec6:	009b      	lsls	r3, r3, #2
 8005ec8:	4413      	add	r3, r2
 8005eca:	009b      	lsls	r3, r3, #2
 8005ecc:	440b      	add	r3, r1
 8005ece:	3324      	adds	r3, #36	; 0x24
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8005ed4:	4b1f      	ldr	r3, [pc, #124]	; (8005f54 <USBD_CDC_DeInit+0x100>)
 8005ed6:	781b      	ldrb	r3, [r3, #0]
 8005ed8:	f003 020f 	and.w	r2, r3, #15
 8005edc:	6879      	ldr	r1, [r7, #4]
 8005ede:	4613      	mov	r3, r2
 8005ee0:	009b      	lsls	r3, r3, #2
 8005ee2:	4413      	add	r3, r2
 8005ee4:	009b      	lsls	r3, r3, #2
 8005ee6:	440b      	add	r3, r1
 8005ee8:	3326      	adds	r3, #38	; 0x26
 8005eea:	2200      	movs	r2, #0
 8005eec:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	32b0      	adds	r2, #176	; 0xb0
 8005ef8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d01f      	beq.n	8005f40 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005f06:	687a      	ldr	r2, [r7, #4]
 8005f08:	33b0      	adds	r3, #176	; 0xb0
 8005f0a:	009b      	lsls	r3, r3, #2
 8005f0c:	4413      	add	r3, r2
 8005f0e:	685b      	ldr	r3, [r3, #4]
 8005f10:	685b      	ldr	r3, [r3, #4]
 8005f12:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	32b0      	adds	r2, #176	; 0xb0
 8005f1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f22:	4618      	mov	r0, r3
 8005f24:	f005 f8a0 	bl	800b068 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	32b0      	adds	r2, #176	; 0xb0
 8005f32:	2100      	movs	r1, #0
 8005f34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005f40:	2300      	movs	r3, #0
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	3708      	adds	r7, #8
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bd80      	pop	{r7, pc}
 8005f4a:	bf00      	nop
 8005f4c:	20000093 	.word	0x20000093
 8005f50:	20000094 	.word	0x20000094
 8005f54:	20000095 	.word	0x20000095

08005f58 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b086      	sub	sp, #24
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
 8005f60:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	32b0      	adds	r2, #176	; 0xb0
 8005f6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f70:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005f72:	2300      	movs	r3, #0
 8005f74:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005f76:	2300      	movs	r3, #0
 8005f78:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005f7e:	693b      	ldr	r3, [r7, #16]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d101      	bne.n	8005f88 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8005f84:	2303      	movs	r3, #3
 8005f86:	e0bf      	b.n	8006108 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	781b      	ldrb	r3, [r3, #0]
 8005f8c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d050      	beq.n	8006036 <USBD_CDC_Setup+0xde>
 8005f94:	2b20      	cmp	r3, #32
 8005f96:	f040 80af 	bne.w	80060f8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	88db      	ldrh	r3, [r3, #6]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d03a      	beq.n	8006018 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	781b      	ldrb	r3, [r3, #0]
 8005fa6:	b25b      	sxtb	r3, r3
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	da1b      	bge.n	8005fe4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005fb2:	687a      	ldr	r2, [r7, #4]
 8005fb4:	33b0      	adds	r3, #176	; 0xb0
 8005fb6:	009b      	lsls	r3, r3, #2
 8005fb8:	4413      	add	r3, r2
 8005fba:	685b      	ldr	r3, [r3, #4]
 8005fbc:	689b      	ldr	r3, [r3, #8]
 8005fbe:	683a      	ldr	r2, [r7, #0]
 8005fc0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8005fc2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005fc4:	683a      	ldr	r2, [r7, #0]
 8005fc6:	88d2      	ldrh	r2, [r2, #6]
 8005fc8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	88db      	ldrh	r3, [r3, #6]
 8005fce:	2b07      	cmp	r3, #7
 8005fd0:	bf28      	it	cs
 8005fd2:	2307      	movcs	r3, #7
 8005fd4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005fd6:	693b      	ldr	r3, [r7, #16]
 8005fd8:	89fa      	ldrh	r2, [r7, #14]
 8005fda:	4619      	mov	r1, r3
 8005fdc:	6878      	ldr	r0, [r7, #4]
 8005fde:	f001 fd49 	bl	8007a74 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8005fe2:	e090      	b.n	8006106 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	785a      	ldrb	r2, [r3, #1]
 8005fe8:	693b      	ldr	r3, [r7, #16]
 8005fea:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	88db      	ldrh	r3, [r3, #6]
 8005ff2:	2b3f      	cmp	r3, #63	; 0x3f
 8005ff4:	d803      	bhi.n	8005ffe <USBD_CDC_Setup+0xa6>
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	88db      	ldrh	r3, [r3, #6]
 8005ffa:	b2da      	uxtb	r2, r3
 8005ffc:	e000      	b.n	8006000 <USBD_CDC_Setup+0xa8>
 8005ffe:	2240      	movs	r2, #64	; 0x40
 8006000:	693b      	ldr	r3, [r7, #16]
 8006002:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006006:	6939      	ldr	r1, [r7, #16]
 8006008:	693b      	ldr	r3, [r7, #16]
 800600a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800600e:	461a      	mov	r2, r3
 8006010:	6878      	ldr	r0, [r7, #4]
 8006012:	f001 fd5b 	bl	8007acc <USBD_CtlPrepareRx>
      break;
 8006016:	e076      	b.n	8006106 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800601e:	687a      	ldr	r2, [r7, #4]
 8006020:	33b0      	adds	r3, #176	; 0xb0
 8006022:	009b      	lsls	r3, r3, #2
 8006024:	4413      	add	r3, r2
 8006026:	685b      	ldr	r3, [r3, #4]
 8006028:	689b      	ldr	r3, [r3, #8]
 800602a:	683a      	ldr	r2, [r7, #0]
 800602c:	7850      	ldrb	r0, [r2, #1]
 800602e:	2200      	movs	r2, #0
 8006030:	6839      	ldr	r1, [r7, #0]
 8006032:	4798      	blx	r3
      break;
 8006034:	e067      	b.n	8006106 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	785b      	ldrb	r3, [r3, #1]
 800603a:	2b0b      	cmp	r3, #11
 800603c:	d851      	bhi.n	80060e2 <USBD_CDC_Setup+0x18a>
 800603e:	a201      	add	r2, pc, #4	; (adr r2, 8006044 <USBD_CDC_Setup+0xec>)
 8006040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006044:	08006075 	.word	0x08006075
 8006048:	080060f1 	.word	0x080060f1
 800604c:	080060e3 	.word	0x080060e3
 8006050:	080060e3 	.word	0x080060e3
 8006054:	080060e3 	.word	0x080060e3
 8006058:	080060e3 	.word	0x080060e3
 800605c:	080060e3 	.word	0x080060e3
 8006060:	080060e3 	.word	0x080060e3
 8006064:	080060e3 	.word	0x080060e3
 8006068:	080060e3 	.word	0x080060e3
 800606c:	0800609f 	.word	0x0800609f
 8006070:	080060c9 	.word	0x080060c9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800607a:	b2db      	uxtb	r3, r3
 800607c:	2b03      	cmp	r3, #3
 800607e:	d107      	bne.n	8006090 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006080:	f107 030a 	add.w	r3, r7, #10
 8006084:	2202      	movs	r2, #2
 8006086:	4619      	mov	r1, r3
 8006088:	6878      	ldr	r0, [r7, #4]
 800608a:	f001 fcf3 	bl	8007a74 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800608e:	e032      	b.n	80060f6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006090:	6839      	ldr	r1, [r7, #0]
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f001 fc7d 	bl	8007992 <USBD_CtlError>
            ret = USBD_FAIL;
 8006098:	2303      	movs	r3, #3
 800609a:	75fb      	strb	r3, [r7, #23]
          break;
 800609c:	e02b      	b.n	80060f6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060a4:	b2db      	uxtb	r3, r3
 80060a6:	2b03      	cmp	r3, #3
 80060a8:	d107      	bne.n	80060ba <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80060aa:	f107 030d 	add.w	r3, r7, #13
 80060ae:	2201      	movs	r2, #1
 80060b0:	4619      	mov	r1, r3
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	f001 fcde 	bl	8007a74 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80060b8:	e01d      	b.n	80060f6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80060ba:	6839      	ldr	r1, [r7, #0]
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	f001 fc68 	bl	8007992 <USBD_CtlError>
            ret = USBD_FAIL;
 80060c2:	2303      	movs	r3, #3
 80060c4:	75fb      	strb	r3, [r7, #23]
          break;
 80060c6:	e016      	b.n	80060f6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060ce:	b2db      	uxtb	r3, r3
 80060d0:	2b03      	cmp	r3, #3
 80060d2:	d00f      	beq.n	80060f4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80060d4:	6839      	ldr	r1, [r7, #0]
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	f001 fc5b 	bl	8007992 <USBD_CtlError>
            ret = USBD_FAIL;
 80060dc:	2303      	movs	r3, #3
 80060de:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80060e0:	e008      	b.n	80060f4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80060e2:	6839      	ldr	r1, [r7, #0]
 80060e4:	6878      	ldr	r0, [r7, #4]
 80060e6:	f001 fc54 	bl	8007992 <USBD_CtlError>
          ret = USBD_FAIL;
 80060ea:	2303      	movs	r3, #3
 80060ec:	75fb      	strb	r3, [r7, #23]
          break;
 80060ee:	e002      	b.n	80060f6 <USBD_CDC_Setup+0x19e>
          break;
 80060f0:	bf00      	nop
 80060f2:	e008      	b.n	8006106 <USBD_CDC_Setup+0x1ae>
          break;
 80060f4:	bf00      	nop
      }
      break;
 80060f6:	e006      	b.n	8006106 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80060f8:	6839      	ldr	r1, [r7, #0]
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	f001 fc49 	bl	8007992 <USBD_CtlError>
      ret = USBD_FAIL;
 8006100:	2303      	movs	r3, #3
 8006102:	75fb      	strb	r3, [r7, #23]
      break;
 8006104:	bf00      	nop
  }

  return (uint8_t)ret;
 8006106:	7dfb      	ldrb	r3, [r7, #23]
}
 8006108:	4618      	mov	r0, r3
 800610a:	3718      	adds	r7, #24
 800610c:	46bd      	mov	sp, r7
 800610e:	bd80      	pop	{r7, pc}

08006110 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b084      	sub	sp, #16
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
 8006118:	460b      	mov	r3, r1
 800611a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006122:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	32b0      	adds	r2, #176	; 0xb0
 800612e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d101      	bne.n	800613a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006136:	2303      	movs	r3, #3
 8006138:	e065      	b.n	8006206 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	32b0      	adds	r2, #176	; 0xb0
 8006144:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006148:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800614a:	78fb      	ldrb	r3, [r7, #3]
 800614c:	f003 020f 	and.w	r2, r3, #15
 8006150:	6879      	ldr	r1, [r7, #4]
 8006152:	4613      	mov	r3, r2
 8006154:	009b      	lsls	r3, r3, #2
 8006156:	4413      	add	r3, r2
 8006158:	009b      	lsls	r3, r3, #2
 800615a:	440b      	add	r3, r1
 800615c:	3318      	adds	r3, #24
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d02f      	beq.n	80061c4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006164:	78fb      	ldrb	r3, [r7, #3]
 8006166:	f003 020f 	and.w	r2, r3, #15
 800616a:	6879      	ldr	r1, [r7, #4]
 800616c:	4613      	mov	r3, r2
 800616e:	009b      	lsls	r3, r3, #2
 8006170:	4413      	add	r3, r2
 8006172:	009b      	lsls	r3, r3, #2
 8006174:	440b      	add	r3, r1
 8006176:	3318      	adds	r3, #24
 8006178:	681a      	ldr	r2, [r3, #0]
 800617a:	78fb      	ldrb	r3, [r7, #3]
 800617c:	f003 010f 	and.w	r1, r3, #15
 8006180:	68f8      	ldr	r0, [r7, #12]
 8006182:	460b      	mov	r3, r1
 8006184:	00db      	lsls	r3, r3, #3
 8006186:	440b      	add	r3, r1
 8006188:	009b      	lsls	r3, r3, #2
 800618a:	4403      	add	r3, r0
 800618c:	331c      	adds	r3, #28
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	fbb2 f1f3 	udiv	r1, r2, r3
 8006194:	fb01 f303 	mul.w	r3, r1, r3
 8006198:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800619a:	2b00      	cmp	r3, #0
 800619c:	d112      	bne.n	80061c4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800619e:	78fb      	ldrb	r3, [r7, #3]
 80061a0:	f003 020f 	and.w	r2, r3, #15
 80061a4:	6879      	ldr	r1, [r7, #4]
 80061a6:	4613      	mov	r3, r2
 80061a8:	009b      	lsls	r3, r3, #2
 80061aa:	4413      	add	r3, r2
 80061ac:	009b      	lsls	r3, r3, #2
 80061ae:	440b      	add	r3, r1
 80061b0:	3318      	adds	r3, #24
 80061b2:	2200      	movs	r2, #0
 80061b4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80061b6:	78f9      	ldrb	r1, [r7, #3]
 80061b8:	2300      	movs	r3, #0
 80061ba:	2200      	movs	r2, #0
 80061bc:	6878      	ldr	r0, [r7, #4]
 80061be:	f004 fef0 	bl	800afa2 <USBD_LL_Transmit>
 80061c2:	e01f      	b.n	8006204 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	2200      	movs	r2, #0
 80061c8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80061d2:	687a      	ldr	r2, [r7, #4]
 80061d4:	33b0      	adds	r3, #176	; 0xb0
 80061d6:	009b      	lsls	r3, r3, #2
 80061d8:	4413      	add	r3, r2
 80061da:	685b      	ldr	r3, [r3, #4]
 80061dc:	691b      	ldr	r3, [r3, #16]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d010      	beq.n	8006204 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80061e8:	687a      	ldr	r2, [r7, #4]
 80061ea:	33b0      	adds	r3, #176	; 0xb0
 80061ec:	009b      	lsls	r3, r3, #2
 80061ee:	4413      	add	r3, r2
 80061f0:	685b      	ldr	r3, [r3, #4]
 80061f2:	691b      	ldr	r3, [r3, #16]
 80061f4:	68ba      	ldr	r2, [r7, #8]
 80061f6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80061fa:	68ba      	ldr	r2, [r7, #8]
 80061fc:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006200:	78fa      	ldrb	r2, [r7, #3]
 8006202:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006204:	2300      	movs	r3, #0
}
 8006206:	4618      	mov	r0, r3
 8006208:	3710      	adds	r7, #16
 800620a:	46bd      	mov	sp, r7
 800620c:	bd80      	pop	{r7, pc}

0800620e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800620e:	b580      	push	{r7, lr}
 8006210:	b084      	sub	sp, #16
 8006212:	af00      	add	r7, sp, #0
 8006214:	6078      	str	r0, [r7, #4]
 8006216:	460b      	mov	r3, r1
 8006218:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	32b0      	adds	r2, #176	; 0xb0
 8006224:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006228:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	32b0      	adds	r2, #176	; 0xb0
 8006234:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d101      	bne.n	8006240 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800623c:	2303      	movs	r3, #3
 800623e:	e01a      	b.n	8006276 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006240:	78fb      	ldrb	r3, [r7, #3]
 8006242:	4619      	mov	r1, r3
 8006244:	6878      	ldr	r0, [r7, #4]
 8006246:	f004 feee 	bl	800b026 <USBD_LL_GetRxDataSize>
 800624a:	4602      	mov	r2, r0
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006258:	687a      	ldr	r2, [r7, #4]
 800625a:	33b0      	adds	r3, #176	; 0xb0
 800625c:	009b      	lsls	r3, r3, #2
 800625e:	4413      	add	r3, r2
 8006260:	685b      	ldr	r3, [r3, #4]
 8006262:	68db      	ldr	r3, [r3, #12]
 8006264:	68fa      	ldr	r2, [r7, #12]
 8006266:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800626a:	68fa      	ldr	r2, [r7, #12]
 800626c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006270:	4611      	mov	r1, r2
 8006272:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006274:	2300      	movs	r3, #0
}
 8006276:	4618      	mov	r0, r3
 8006278:	3710      	adds	r7, #16
 800627a:	46bd      	mov	sp, r7
 800627c:	bd80      	pop	{r7, pc}

0800627e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800627e:	b580      	push	{r7, lr}
 8006280:	b084      	sub	sp, #16
 8006282:	af00      	add	r7, sp, #0
 8006284:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	32b0      	adds	r2, #176	; 0xb0
 8006290:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006294:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d101      	bne.n	80062a0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800629c:	2303      	movs	r3, #3
 800629e:	e025      	b.n	80062ec <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80062a6:	687a      	ldr	r2, [r7, #4]
 80062a8:	33b0      	adds	r3, #176	; 0xb0
 80062aa:	009b      	lsls	r3, r3, #2
 80062ac:	4413      	add	r3, r2
 80062ae:	685b      	ldr	r3, [r3, #4]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d01a      	beq.n	80062ea <USBD_CDC_EP0_RxReady+0x6c>
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80062ba:	2bff      	cmp	r3, #255	; 0xff
 80062bc:	d015      	beq.n	80062ea <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80062c4:	687a      	ldr	r2, [r7, #4]
 80062c6:	33b0      	adds	r3, #176	; 0xb0
 80062c8:	009b      	lsls	r3, r3, #2
 80062ca:	4413      	add	r3, r2
 80062cc:	685b      	ldr	r3, [r3, #4]
 80062ce:	689b      	ldr	r3, [r3, #8]
 80062d0:	68fa      	ldr	r2, [r7, #12]
 80062d2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80062d6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80062d8:	68fa      	ldr	r2, [r7, #12]
 80062da:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80062de:	b292      	uxth	r2, r2
 80062e0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	22ff      	movs	r2, #255	; 0xff
 80062e6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80062ea:	2300      	movs	r3, #0
}
 80062ec:	4618      	mov	r0, r3
 80062ee:	3710      	adds	r7, #16
 80062f0:	46bd      	mov	sp, r7
 80062f2:	bd80      	pop	{r7, pc}

080062f4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b086      	sub	sp, #24
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80062fc:	2182      	movs	r1, #130	; 0x82
 80062fe:	4818      	ldr	r0, [pc, #96]	; (8006360 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006300:	f000 fd0f 	bl	8006d22 <USBD_GetEpDesc>
 8006304:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006306:	2101      	movs	r1, #1
 8006308:	4815      	ldr	r0, [pc, #84]	; (8006360 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800630a:	f000 fd0a 	bl	8006d22 <USBD_GetEpDesc>
 800630e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006310:	2181      	movs	r1, #129	; 0x81
 8006312:	4813      	ldr	r0, [pc, #76]	; (8006360 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006314:	f000 fd05 	bl	8006d22 <USBD_GetEpDesc>
 8006318:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800631a:	697b      	ldr	r3, [r7, #20]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d002      	beq.n	8006326 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006320:	697b      	ldr	r3, [r7, #20]
 8006322:	2210      	movs	r2, #16
 8006324:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d006      	beq.n	800633a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800632c:	693b      	ldr	r3, [r7, #16]
 800632e:	2200      	movs	r2, #0
 8006330:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006334:	711a      	strb	r2, [r3, #4]
 8006336:	2200      	movs	r2, #0
 8006338:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d006      	beq.n	800634e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	2200      	movs	r2, #0
 8006344:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006348:	711a      	strb	r2, [r3, #4]
 800634a:	2200      	movs	r2, #0
 800634c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2243      	movs	r2, #67	; 0x43
 8006352:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006354:	4b02      	ldr	r3, [pc, #8]	; (8006360 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8006356:	4618      	mov	r0, r3
 8006358:	3718      	adds	r7, #24
 800635a:	46bd      	mov	sp, r7
 800635c:	bd80      	pop	{r7, pc}
 800635e:	bf00      	nop
 8006360:	20000050 	.word	0x20000050

08006364 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b086      	sub	sp, #24
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800636c:	2182      	movs	r1, #130	; 0x82
 800636e:	4818      	ldr	r0, [pc, #96]	; (80063d0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006370:	f000 fcd7 	bl	8006d22 <USBD_GetEpDesc>
 8006374:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006376:	2101      	movs	r1, #1
 8006378:	4815      	ldr	r0, [pc, #84]	; (80063d0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800637a:	f000 fcd2 	bl	8006d22 <USBD_GetEpDesc>
 800637e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006380:	2181      	movs	r1, #129	; 0x81
 8006382:	4813      	ldr	r0, [pc, #76]	; (80063d0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006384:	f000 fccd 	bl	8006d22 <USBD_GetEpDesc>
 8006388:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800638a:	697b      	ldr	r3, [r7, #20]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d002      	beq.n	8006396 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006390:	697b      	ldr	r3, [r7, #20]
 8006392:	2210      	movs	r2, #16
 8006394:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006396:	693b      	ldr	r3, [r7, #16]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d006      	beq.n	80063aa <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800639c:	693b      	ldr	r3, [r7, #16]
 800639e:	2200      	movs	r2, #0
 80063a0:	711a      	strb	r2, [r3, #4]
 80063a2:	2200      	movs	r2, #0
 80063a4:	f042 0202 	orr.w	r2, r2, #2
 80063a8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d006      	beq.n	80063be <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	2200      	movs	r2, #0
 80063b4:	711a      	strb	r2, [r3, #4]
 80063b6:	2200      	movs	r2, #0
 80063b8:	f042 0202 	orr.w	r2, r2, #2
 80063bc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2243      	movs	r2, #67	; 0x43
 80063c2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80063c4:	4b02      	ldr	r3, [pc, #8]	; (80063d0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80063c6:	4618      	mov	r0, r3
 80063c8:	3718      	adds	r7, #24
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bd80      	pop	{r7, pc}
 80063ce:	bf00      	nop
 80063d0:	20000050 	.word	0x20000050

080063d4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b086      	sub	sp, #24
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80063dc:	2182      	movs	r1, #130	; 0x82
 80063de:	4818      	ldr	r0, [pc, #96]	; (8006440 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80063e0:	f000 fc9f 	bl	8006d22 <USBD_GetEpDesc>
 80063e4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80063e6:	2101      	movs	r1, #1
 80063e8:	4815      	ldr	r0, [pc, #84]	; (8006440 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80063ea:	f000 fc9a 	bl	8006d22 <USBD_GetEpDesc>
 80063ee:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80063f0:	2181      	movs	r1, #129	; 0x81
 80063f2:	4813      	ldr	r0, [pc, #76]	; (8006440 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80063f4:	f000 fc95 	bl	8006d22 <USBD_GetEpDesc>
 80063f8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80063fa:	697b      	ldr	r3, [r7, #20]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d002      	beq.n	8006406 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006400:	697b      	ldr	r3, [r7, #20]
 8006402:	2210      	movs	r2, #16
 8006404:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006406:	693b      	ldr	r3, [r7, #16]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d006      	beq.n	800641a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800640c:	693b      	ldr	r3, [r7, #16]
 800640e:	2200      	movs	r2, #0
 8006410:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006414:	711a      	strb	r2, [r3, #4]
 8006416:	2200      	movs	r2, #0
 8006418:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d006      	beq.n	800642e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	2200      	movs	r2, #0
 8006424:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006428:	711a      	strb	r2, [r3, #4]
 800642a:	2200      	movs	r2, #0
 800642c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2243      	movs	r2, #67	; 0x43
 8006432:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006434:	4b02      	ldr	r3, [pc, #8]	; (8006440 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8006436:	4618      	mov	r0, r3
 8006438:	3718      	adds	r7, #24
 800643a:	46bd      	mov	sp, r7
 800643c:	bd80      	pop	{r7, pc}
 800643e:	bf00      	nop
 8006440:	20000050 	.word	0x20000050

08006444 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006444:	b480      	push	{r7}
 8006446:	b083      	sub	sp, #12
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	220a      	movs	r2, #10
 8006450:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006452:	4b03      	ldr	r3, [pc, #12]	; (8006460 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006454:	4618      	mov	r0, r3
 8006456:	370c      	adds	r7, #12
 8006458:	46bd      	mov	sp, r7
 800645a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645e:	4770      	bx	lr
 8006460:	2000000c 	.word	0x2000000c

08006464 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006464:	b480      	push	{r7}
 8006466:	b083      	sub	sp, #12
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
 800646c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d101      	bne.n	8006478 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006474:	2303      	movs	r3, #3
 8006476:	e009      	b.n	800648c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800647e:	687a      	ldr	r2, [r7, #4]
 8006480:	33b0      	adds	r3, #176	; 0xb0
 8006482:	009b      	lsls	r3, r3, #2
 8006484:	4413      	add	r3, r2
 8006486:	683a      	ldr	r2, [r7, #0]
 8006488:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800648a:	2300      	movs	r3, #0
}
 800648c:	4618      	mov	r0, r3
 800648e:	370c      	adds	r7, #12
 8006490:	46bd      	mov	sp, r7
 8006492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006496:	4770      	bx	lr

08006498 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006498:	b480      	push	{r7}
 800649a:	b087      	sub	sp, #28
 800649c:	af00      	add	r7, sp, #0
 800649e:	60f8      	str	r0, [r7, #12]
 80064a0:	60b9      	str	r1, [r7, #8]
 80064a2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	32b0      	adds	r2, #176	; 0xb0
 80064ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064b2:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80064b4:	697b      	ldr	r3, [r7, #20]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d101      	bne.n	80064be <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80064ba:	2303      	movs	r3, #3
 80064bc:	e008      	b.n	80064d0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80064be:	697b      	ldr	r3, [r7, #20]
 80064c0:	68ba      	ldr	r2, [r7, #8]
 80064c2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80064c6:	697b      	ldr	r3, [r7, #20]
 80064c8:	687a      	ldr	r2, [r7, #4]
 80064ca:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80064ce:	2300      	movs	r3, #0
}
 80064d0:	4618      	mov	r0, r3
 80064d2:	371c      	adds	r7, #28
 80064d4:	46bd      	mov	sp, r7
 80064d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064da:	4770      	bx	lr

080064dc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80064dc:	b480      	push	{r7}
 80064de:	b085      	sub	sp, #20
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
 80064e4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	32b0      	adds	r2, #176	; 0xb0
 80064f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064f4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d101      	bne.n	8006500 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80064fc:	2303      	movs	r3, #3
 80064fe:	e004      	b.n	800650a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	683a      	ldr	r2, [r7, #0]
 8006504:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006508:	2300      	movs	r3, #0
}
 800650a:	4618      	mov	r0, r3
 800650c:	3714      	adds	r7, #20
 800650e:	46bd      	mov	sp, r7
 8006510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006514:	4770      	bx	lr
	...

08006518 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b084      	sub	sp, #16
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	32b0      	adds	r2, #176	; 0xb0
 800652a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800652e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	32b0      	adds	r2, #176	; 0xb0
 800653a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d101      	bne.n	8006546 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006542:	2303      	movs	r3, #3
 8006544:	e018      	b.n	8006578 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	7c1b      	ldrb	r3, [r3, #16]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d10a      	bne.n	8006564 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800654e:	4b0c      	ldr	r3, [pc, #48]	; (8006580 <USBD_CDC_ReceivePacket+0x68>)
 8006550:	7819      	ldrb	r1, [r3, #0]
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006558:	f44f 7300 	mov.w	r3, #512	; 0x200
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	f004 fd41 	bl	800afe4 <USBD_LL_PrepareReceive>
 8006562:	e008      	b.n	8006576 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006564:	4b06      	ldr	r3, [pc, #24]	; (8006580 <USBD_CDC_ReceivePacket+0x68>)
 8006566:	7819      	ldrb	r1, [r3, #0]
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800656e:	2340      	movs	r3, #64	; 0x40
 8006570:	6878      	ldr	r0, [r7, #4]
 8006572:	f004 fd37 	bl	800afe4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006576:	2300      	movs	r3, #0
}
 8006578:	4618      	mov	r0, r3
 800657a:	3710      	adds	r7, #16
 800657c:	46bd      	mov	sp, r7
 800657e:	bd80      	pop	{r7, pc}
 8006580:	20000094 	.word	0x20000094

08006584 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b086      	sub	sp, #24
 8006588:	af00      	add	r7, sp, #0
 800658a:	60f8      	str	r0, [r7, #12]
 800658c:	60b9      	str	r1, [r7, #8]
 800658e:	4613      	mov	r3, r2
 8006590:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d101      	bne.n	800659c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006598:	2303      	movs	r3, #3
 800659a:	e01f      	b.n	80065dc <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	2200      	movs	r2, #0
 80065a0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	2200      	movs	r2, #0
 80065a8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	2200      	movs	r2, #0
 80065b0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d003      	beq.n	80065c2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	68ba      	ldr	r2, [r7, #8]
 80065be:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	2201      	movs	r2, #1
 80065c6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	79fa      	ldrb	r2, [r7, #7]
 80065ce:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80065d0:	68f8      	ldr	r0, [r7, #12]
 80065d2:	f004 fbb1 	bl	800ad38 <USBD_LL_Init>
 80065d6:	4603      	mov	r3, r0
 80065d8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80065da:	7dfb      	ldrb	r3, [r7, #23]
}
 80065dc:	4618      	mov	r0, r3
 80065de:	3718      	adds	r7, #24
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bd80      	pop	{r7, pc}

080065e4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b084      	sub	sp, #16
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
 80065ec:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80065ee:	2300      	movs	r3, #0
 80065f0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d101      	bne.n	80065fc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80065f8:	2303      	movs	r3, #3
 80065fa:	e025      	b.n	8006648 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	683a      	ldr	r2, [r7, #0]
 8006600:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	32ae      	adds	r2, #174	; 0xae
 800660e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006614:	2b00      	cmp	r3, #0
 8006616:	d00f      	beq.n	8006638 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	32ae      	adds	r2, #174	; 0xae
 8006622:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006628:	f107 020e 	add.w	r2, r7, #14
 800662c:	4610      	mov	r0, r2
 800662e:	4798      	blx	r3
 8006630:	4602      	mov	r2, r0
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800663e:	1c5a      	adds	r2, r3, #1
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8006646:	2300      	movs	r3, #0
}
 8006648:	4618      	mov	r0, r3
 800664a:	3710      	adds	r7, #16
 800664c:	46bd      	mov	sp, r7
 800664e:	bd80      	pop	{r7, pc}

08006650 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b082      	sub	sp, #8
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	f004 fbb9 	bl	800add0 <USBD_LL_Start>
 800665e:	4603      	mov	r3, r0
}
 8006660:	4618      	mov	r0, r3
 8006662:	3708      	adds	r7, #8
 8006664:	46bd      	mov	sp, r7
 8006666:	bd80      	pop	{r7, pc}

08006668 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006668:	b480      	push	{r7}
 800666a:	b083      	sub	sp, #12
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006670:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006672:	4618      	mov	r0, r3
 8006674:	370c      	adds	r7, #12
 8006676:	46bd      	mov	sp, r7
 8006678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667c:	4770      	bx	lr

0800667e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800667e:	b580      	push	{r7, lr}
 8006680:	b084      	sub	sp, #16
 8006682:	af00      	add	r7, sp, #0
 8006684:	6078      	str	r0, [r7, #4]
 8006686:	460b      	mov	r3, r1
 8006688:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800668a:	2300      	movs	r3, #0
 800668c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006694:	2b00      	cmp	r3, #0
 8006696:	d009      	beq.n	80066ac <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	78fa      	ldrb	r2, [r7, #3]
 80066a2:	4611      	mov	r1, r2
 80066a4:	6878      	ldr	r0, [r7, #4]
 80066a6:	4798      	blx	r3
 80066a8:	4603      	mov	r3, r0
 80066aa:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80066ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80066ae:	4618      	mov	r0, r3
 80066b0:	3710      	adds	r7, #16
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bd80      	pop	{r7, pc}

080066b6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80066b6:	b580      	push	{r7, lr}
 80066b8:	b084      	sub	sp, #16
 80066ba:	af00      	add	r7, sp, #0
 80066bc:	6078      	str	r0, [r7, #4]
 80066be:	460b      	mov	r3, r1
 80066c0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80066c2:	2300      	movs	r3, #0
 80066c4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066cc:	685b      	ldr	r3, [r3, #4]
 80066ce:	78fa      	ldrb	r2, [r7, #3]
 80066d0:	4611      	mov	r1, r2
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	4798      	blx	r3
 80066d6:	4603      	mov	r3, r0
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d001      	beq.n	80066e0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80066dc:	2303      	movs	r3, #3
 80066de:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80066e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80066e2:	4618      	mov	r0, r3
 80066e4:	3710      	adds	r7, #16
 80066e6:	46bd      	mov	sp, r7
 80066e8:	bd80      	pop	{r7, pc}

080066ea <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80066ea:	b580      	push	{r7, lr}
 80066ec:	b084      	sub	sp, #16
 80066ee:	af00      	add	r7, sp, #0
 80066f0:	6078      	str	r0, [r7, #4]
 80066f2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80066fa:	6839      	ldr	r1, [r7, #0]
 80066fc:	4618      	mov	r0, r3
 80066fe:	f001 f90e 	bl	800791e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2201      	movs	r2, #1
 8006706:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006710:	461a      	mov	r2, r3
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800671e:	f003 031f 	and.w	r3, r3, #31
 8006722:	2b02      	cmp	r3, #2
 8006724:	d01a      	beq.n	800675c <USBD_LL_SetupStage+0x72>
 8006726:	2b02      	cmp	r3, #2
 8006728:	d822      	bhi.n	8006770 <USBD_LL_SetupStage+0x86>
 800672a:	2b00      	cmp	r3, #0
 800672c:	d002      	beq.n	8006734 <USBD_LL_SetupStage+0x4a>
 800672e:	2b01      	cmp	r3, #1
 8006730:	d00a      	beq.n	8006748 <USBD_LL_SetupStage+0x5e>
 8006732:	e01d      	b.n	8006770 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800673a:	4619      	mov	r1, r3
 800673c:	6878      	ldr	r0, [r7, #4]
 800673e:	f000 fb65 	bl	8006e0c <USBD_StdDevReq>
 8006742:	4603      	mov	r3, r0
 8006744:	73fb      	strb	r3, [r7, #15]
      break;
 8006746:	e020      	b.n	800678a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800674e:	4619      	mov	r1, r3
 8006750:	6878      	ldr	r0, [r7, #4]
 8006752:	f000 fbcd 	bl	8006ef0 <USBD_StdItfReq>
 8006756:	4603      	mov	r3, r0
 8006758:	73fb      	strb	r3, [r7, #15]
      break;
 800675a:	e016      	b.n	800678a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006762:	4619      	mov	r1, r3
 8006764:	6878      	ldr	r0, [r7, #4]
 8006766:	f000 fc2f 	bl	8006fc8 <USBD_StdEPReq>
 800676a:	4603      	mov	r3, r0
 800676c:	73fb      	strb	r3, [r7, #15]
      break;
 800676e:	e00c      	b.n	800678a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006776:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800677a:	b2db      	uxtb	r3, r3
 800677c:	4619      	mov	r1, r3
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	f004 fb86 	bl	800ae90 <USBD_LL_StallEP>
 8006784:	4603      	mov	r3, r0
 8006786:	73fb      	strb	r3, [r7, #15]
      break;
 8006788:	bf00      	nop
  }

  return ret;
 800678a:	7bfb      	ldrb	r3, [r7, #15]
}
 800678c:	4618      	mov	r0, r3
 800678e:	3710      	adds	r7, #16
 8006790:	46bd      	mov	sp, r7
 8006792:	bd80      	pop	{r7, pc}

08006794 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b086      	sub	sp, #24
 8006798:	af00      	add	r7, sp, #0
 800679a:	60f8      	str	r0, [r7, #12]
 800679c:	460b      	mov	r3, r1
 800679e:	607a      	str	r2, [r7, #4]
 80067a0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80067a2:	2300      	movs	r3, #0
 80067a4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80067a6:	7afb      	ldrb	r3, [r7, #11]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d16e      	bne.n	800688a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80067b2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80067ba:	2b03      	cmp	r3, #3
 80067bc:	f040 8098 	bne.w	80068f0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80067c0:	693b      	ldr	r3, [r7, #16]
 80067c2:	689a      	ldr	r2, [r3, #8]
 80067c4:	693b      	ldr	r3, [r7, #16]
 80067c6:	68db      	ldr	r3, [r3, #12]
 80067c8:	429a      	cmp	r2, r3
 80067ca:	d913      	bls.n	80067f4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80067cc:	693b      	ldr	r3, [r7, #16]
 80067ce:	689a      	ldr	r2, [r3, #8]
 80067d0:	693b      	ldr	r3, [r7, #16]
 80067d2:	68db      	ldr	r3, [r3, #12]
 80067d4:	1ad2      	subs	r2, r2, r3
 80067d6:	693b      	ldr	r3, [r7, #16]
 80067d8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80067da:	693b      	ldr	r3, [r7, #16]
 80067dc:	68da      	ldr	r2, [r3, #12]
 80067de:	693b      	ldr	r3, [r7, #16]
 80067e0:	689b      	ldr	r3, [r3, #8]
 80067e2:	4293      	cmp	r3, r2
 80067e4:	bf28      	it	cs
 80067e6:	4613      	movcs	r3, r2
 80067e8:	461a      	mov	r2, r3
 80067ea:	6879      	ldr	r1, [r7, #4]
 80067ec:	68f8      	ldr	r0, [r7, #12]
 80067ee:	f001 f98a 	bl	8007b06 <USBD_CtlContinueRx>
 80067f2:	e07d      	b.n	80068f0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80067fa:	f003 031f 	and.w	r3, r3, #31
 80067fe:	2b02      	cmp	r3, #2
 8006800:	d014      	beq.n	800682c <USBD_LL_DataOutStage+0x98>
 8006802:	2b02      	cmp	r3, #2
 8006804:	d81d      	bhi.n	8006842 <USBD_LL_DataOutStage+0xae>
 8006806:	2b00      	cmp	r3, #0
 8006808:	d002      	beq.n	8006810 <USBD_LL_DataOutStage+0x7c>
 800680a:	2b01      	cmp	r3, #1
 800680c:	d003      	beq.n	8006816 <USBD_LL_DataOutStage+0x82>
 800680e:	e018      	b.n	8006842 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006810:	2300      	movs	r3, #0
 8006812:	75bb      	strb	r3, [r7, #22]
            break;
 8006814:	e018      	b.n	8006848 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800681c:	b2db      	uxtb	r3, r3
 800681e:	4619      	mov	r1, r3
 8006820:	68f8      	ldr	r0, [r7, #12]
 8006822:	f000 fa64 	bl	8006cee <USBD_CoreFindIF>
 8006826:	4603      	mov	r3, r0
 8006828:	75bb      	strb	r3, [r7, #22]
            break;
 800682a:	e00d      	b.n	8006848 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006832:	b2db      	uxtb	r3, r3
 8006834:	4619      	mov	r1, r3
 8006836:	68f8      	ldr	r0, [r7, #12]
 8006838:	f000 fa66 	bl	8006d08 <USBD_CoreFindEP>
 800683c:	4603      	mov	r3, r0
 800683e:	75bb      	strb	r3, [r7, #22]
            break;
 8006840:	e002      	b.n	8006848 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006842:	2300      	movs	r3, #0
 8006844:	75bb      	strb	r3, [r7, #22]
            break;
 8006846:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006848:	7dbb      	ldrb	r3, [r7, #22]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d119      	bne.n	8006882 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006854:	b2db      	uxtb	r3, r3
 8006856:	2b03      	cmp	r3, #3
 8006858:	d113      	bne.n	8006882 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800685a:	7dba      	ldrb	r2, [r7, #22]
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	32ae      	adds	r2, #174	; 0xae
 8006860:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006864:	691b      	ldr	r3, [r3, #16]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d00b      	beq.n	8006882 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800686a:	7dba      	ldrb	r2, [r7, #22]
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006872:	7dba      	ldrb	r2, [r7, #22]
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	32ae      	adds	r2, #174	; 0xae
 8006878:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800687c:	691b      	ldr	r3, [r3, #16]
 800687e:	68f8      	ldr	r0, [r7, #12]
 8006880:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006882:	68f8      	ldr	r0, [r7, #12]
 8006884:	f001 f950 	bl	8007b28 <USBD_CtlSendStatus>
 8006888:	e032      	b.n	80068f0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800688a:	7afb      	ldrb	r3, [r7, #11]
 800688c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006890:	b2db      	uxtb	r3, r3
 8006892:	4619      	mov	r1, r3
 8006894:	68f8      	ldr	r0, [r7, #12]
 8006896:	f000 fa37 	bl	8006d08 <USBD_CoreFindEP>
 800689a:	4603      	mov	r3, r0
 800689c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800689e:	7dbb      	ldrb	r3, [r7, #22]
 80068a0:	2bff      	cmp	r3, #255	; 0xff
 80068a2:	d025      	beq.n	80068f0 <USBD_LL_DataOutStage+0x15c>
 80068a4:	7dbb      	ldrb	r3, [r7, #22]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d122      	bne.n	80068f0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068b0:	b2db      	uxtb	r3, r3
 80068b2:	2b03      	cmp	r3, #3
 80068b4:	d117      	bne.n	80068e6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80068b6:	7dba      	ldrb	r2, [r7, #22]
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	32ae      	adds	r2, #174	; 0xae
 80068bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068c0:	699b      	ldr	r3, [r3, #24]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d00f      	beq.n	80068e6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80068c6:	7dba      	ldrb	r2, [r7, #22]
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80068ce:	7dba      	ldrb	r2, [r7, #22]
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	32ae      	adds	r2, #174	; 0xae
 80068d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068d8:	699b      	ldr	r3, [r3, #24]
 80068da:	7afa      	ldrb	r2, [r7, #11]
 80068dc:	4611      	mov	r1, r2
 80068de:	68f8      	ldr	r0, [r7, #12]
 80068e0:	4798      	blx	r3
 80068e2:	4603      	mov	r3, r0
 80068e4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80068e6:	7dfb      	ldrb	r3, [r7, #23]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d001      	beq.n	80068f0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80068ec:	7dfb      	ldrb	r3, [r7, #23]
 80068ee:	e000      	b.n	80068f2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80068f0:	2300      	movs	r3, #0
}
 80068f2:	4618      	mov	r0, r3
 80068f4:	3718      	adds	r7, #24
 80068f6:	46bd      	mov	sp, r7
 80068f8:	bd80      	pop	{r7, pc}

080068fa <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80068fa:	b580      	push	{r7, lr}
 80068fc:	b086      	sub	sp, #24
 80068fe:	af00      	add	r7, sp, #0
 8006900:	60f8      	str	r0, [r7, #12]
 8006902:	460b      	mov	r3, r1
 8006904:	607a      	str	r2, [r7, #4]
 8006906:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006908:	7afb      	ldrb	r3, [r7, #11]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d16f      	bne.n	80069ee <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	3314      	adds	r3, #20
 8006912:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800691a:	2b02      	cmp	r3, #2
 800691c:	d15a      	bne.n	80069d4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800691e:	693b      	ldr	r3, [r7, #16]
 8006920:	689a      	ldr	r2, [r3, #8]
 8006922:	693b      	ldr	r3, [r7, #16]
 8006924:	68db      	ldr	r3, [r3, #12]
 8006926:	429a      	cmp	r2, r3
 8006928:	d914      	bls.n	8006954 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800692a:	693b      	ldr	r3, [r7, #16]
 800692c:	689a      	ldr	r2, [r3, #8]
 800692e:	693b      	ldr	r3, [r7, #16]
 8006930:	68db      	ldr	r3, [r3, #12]
 8006932:	1ad2      	subs	r2, r2, r3
 8006934:	693b      	ldr	r3, [r7, #16]
 8006936:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006938:	693b      	ldr	r3, [r7, #16]
 800693a:	689b      	ldr	r3, [r3, #8]
 800693c:	461a      	mov	r2, r3
 800693e:	6879      	ldr	r1, [r7, #4]
 8006940:	68f8      	ldr	r0, [r7, #12]
 8006942:	f001 f8b2 	bl	8007aaa <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006946:	2300      	movs	r3, #0
 8006948:	2200      	movs	r2, #0
 800694a:	2100      	movs	r1, #0
 800694c:	68f8      	ldr	r0, [r7, #12]
 800694e:	f004 fb49 	bl	800afe4 <USBD_LL_PrepareReceive>
 8006952:	e03f      	b.n	80069d4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006954:	693b      	ldr	r3, [r7, #16]
 8006956:	68da      	ldr	r2, [r3, #12]
 8006958:	693b      	ldr	r3, [r7, #16]
 800695a:	689b      	ldr	r3, [r3, #8]
 800695c:	429a      	cmp	r2, r3
 800695e:	d11c      	bne.n	800699a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006960:	693b      	ldr	r3, [r7, #16]
 8006962:	685a      	ldr	r2, [r3, #4]
 8006964:	693b      	ldr	r3, [r7, #16]
 8006966:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006968:	429a      	cmp	r2, r3
 800696a:	d316      	bcc.n	800699a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800696c:	693b      	ldr	r3, [r7, #16]
 800696e:	685a      	ldr	r2, [r3, #4]
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006976:	429a      	cmp	r2, r3
 8006978:	d20f      	bcs.n	800699a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800697a:	2200      	movs	r2, #0
 800697c:	2100      	movs	r1, #0
 800697e:	68f8      	ldr	r0, [r7, #12]
 8006980:	f001 f893 	bl	8007aaa <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	2200      	movs	r2, #0
 8006988:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800698c:	2300      	movs	r3, #0
 800698e:	2200      	movs	r2, #0
 8006990:	2100      	movs	r1, #0
 8006992:	68f8      	ldr	r0, [r7, #12]
 8006994:	f004 fb26 	bl	800afe4 <USBD_LL_PrepareReceive>
 8006998:	e01c      	b.n	80069d4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069a0:	b2db      	uxtb	r3, r3
 80069a2:	2b03      	cmp	r3, #3
 80069a4:	d10f      	bne.n	80069c6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069ac:	68db      	ldr	r3, [r3, #12]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d009      	beq.n	80069c6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	2200      	movs	r2, #0
 80069b6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069c0:	68db      	ldr	r3, [r3, #12]
 80069c2:	68f8      	ldr	r0, [r7, #12]
 80069c4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80069c6:	2180      	movs	r1, #128	; 0x80
 80069c8:	68f8      	ldr	r0, [r7, #12]
 80069ca:	f004 fa61 	bl	800ae90 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80069ce:	68f8      	ldr	r0, [r7, #12]
 80069d0:	f001 f8bd 	bl	8007b4e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d03a      	beq.n	8006a54 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80069de:	68f8      	ldr	r0, [r7, #12]
 80069e0:	f7ff fe42 	bl	8006668 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	2200      	movs	r2, #0
 80069e8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80069ec:	e032      	b.n	8006a54 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80069ee:	7afb      	ldrb	r3, [r7, #11]
 80069f0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80069f4:	b2db      	uxtb	r3, r3
 80069f6:	4619      	mov	r1, r3
 80069f8:	68f8      	ldr	r0, [r7, #12]
 80069fa:	f000 f985 	bl	8006d08 <USBD_CoreFindEP>
 80069fe:	4603      	mov	r3, r0
 8006a00:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006a02:	7dfb      	ldrb	r3, [r7, #23]
 8006a04:	2bff      	cmp	r3, #255	; 0xff
 8006a06:	d025      	beq.n	8006a54 <USBD_LL_DataInStage+0x15a>
 8006a08:	7dfb      	ldrb	r3, [r7, #23]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d122      	bne.n	8006a54 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a14:	b2db      	uxtb	r3, r3
 8006a16:	2b03      	cmp	r3, #3
 8006a18:	d11c      	bne.n	8006a54 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006a1a:	7dfa      	ldrb	r2, [r7, #23]
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	32ae      	adds	r2, #174	; 0xae
 8006a20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a24:	695b      	ldr	r3, [r3, #20]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d014      	beq.n	8006a54 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006a2a:	7dfa      	ldrb	r2, [r7, #23]
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006a32:	7dfa      	ldrb	r2, [r7, #23]
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	32ae      	adds	r2, #174	; 0xae
 8006a38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a3c:	695b      	ldr	r3, [r3, #20]
 8006a3e:	7afa      	ldrb	r2, [r7, #11]
 8006a40:	4611      	mov	r1, r2
 8006a42:	68f8      	ldr	r0, [r7, #12]
 8006a44:	4798      	blx	r3
 8006a46:	4603      	mov	r3, r0
 8006a48:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006a4a:	7dbb      	ldrb	r3, [r7, #22]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d001      	beq.n	8006a54 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006a50:	7dbb      	ldrb	r3, [r7, #22]
 8006a52:	e000      	b.n	8006a56 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006a54:	2300      	movs	r3, #0
}
 8006a56:	4618      	mov	r0, r3
 8006a58:	3718      	adds	r7, #24
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	bd80      	pop	{r7, pc}

08006a5e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006a5e:	b580      	push	{r7, lr}
 8006a60:	b084      	sub	sp, #16
 8006a62:	af00      	add	r7, sp, #0
 8006a64:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006a66:	2300      	movs	r3, #0
 8006a68:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2201      	movs	r2, #1
 8006a6e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2200      	movs	r2, #0
 8006a76:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2200      	movs	r2, #0
 8006a84:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d014      	beq.n	8006ac4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006aa0:	685b      	ldr	r3, [r3, #4]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d00e      	beq.n	8006ac4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006aac:	685b      	ldr	r3, [r3, #4]
 8006aae:	687a      	ldr	r2, [r7, #4]
 8006ab0:	6852      	ldr	r2, [r2, #4]
 8006ab2:	b2d2      	uxtb	r2, r2
 8006ab4:	4611      	mov	r1, r2
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	4798      	blx	r3
 8006aba:	4603      	mov	r3, r0
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d001      	beq.n	8006ac4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006ac0:	2303      	movs	r3, #3
 8006ac2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006ac4:	2340      	movs	r3, #64	; 0x40
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	2100      	movs	r1, #0
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	f004 f99b 	bl	800ae06 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2201      	movs	r2, #1
 8006ad4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2240      	movs	r2, #64	; 0x40
 8006adc:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006ae0:	2340      	movs	r3, #64	; 0x40
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	2180      	movs	r1, #128	; 0x80
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f004 f98d 	bl	800ae06 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2201      	movs	r2, #1
 8006af0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2240      	movs	r2, #64	; 0x40
 8006af6:	621a      	str	r2, [r3, #32]

  return ret;
 8006af8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006afa:	4618      	mov	r0, r3
 8006afc:	3710      	adds	r7, #16
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd80      	pop	{r7, pc}

08006b02 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006b02:	b480      	push	{r7}
 8006b04:	b083      	sub	sp, #12
 8006b06:	af00      	add	r7, sp, #0
 8006b08:	6078      	str	r0, [r7, #4]
 8006b0a:	460b      	mov	r3, r1
 8006b0c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	78fa      	ldrb	r2, [r7, #3]
 8006b12:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006b14:	2300      	movs	r3, #0
}
 8006b16:	4618      	mov	r0, r3
 8006b18:	370c      	adds	r7, #12
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b20:	4770      	bx	lr

08006b22 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006b22:	b480      	push	{r7}
 8006b24:	b083      	sub	sp, #12
 8006b26:	af00      	add	r7, sp, #0
 8006b28:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b30:	b2db      	uxtb	r3, r3
 8006b32:	2b04      	cmp	r3, #4
 8006b34:	d006      	beq.n	8006b44 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b3c:	b2da      	uxtb	r2, r3
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2204      	movs	r2, #4
 8006b48:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006b4c:	2300      	movs	r3, #0
}
 8006b4e:	4618      	mov	r0, r3
 8006b50:	370c      	adds	r7, #12
 8006b52:	46bd      	mov	sp, r7
 8006b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b58:	4770      	bx	lr

08006b5a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006b5a:	b480      	push	{r7}
 8006b5c:	b083      	sub	sp, #12
 8006b5e:	af00      	add	r7, sp, #0
 8006b60:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b68:	b2db      	uxtb	r3, r3
 8006b6a:	2b04      	cmp	r3, #4
 8006b6c:	d106      	bne.n	8006b7c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006b74:	b2da      	uxtb	r2, r3
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006b7c:	2300      	movs	r3, #0
}
 8006b7e:	4618      	mov	r0, r3
 8006b80:	370c      	adds	r7, #12
 8006b82:	46bd      	mov	sp, r7
 8006b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b88:	4770      	bx	lr

08006b8a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006b8a:	b580      	push	{r7, lr}
 8006b8c:	b082      	sub	sp, #8
 8006b8e:	af00      	add	r7, sp, #0
 8006b90:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b98:	b2db      	uxtb	r3, r3
 8006b9a:	2b03      	cmp	r3, #3
 8006b9c:	d110      	bne.n	8006bc0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d00b      	beq.n	8006bc0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bae:	69db      	ldr	r3, [r3, #28]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d005      	beq.n	8006bc0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bba:	69db      	ldr	r3, [r3, #28]
 8006bbc:	6878      	ldr	r0, [r7, #4]
 8006bbe:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006bc0:	2300      	movs	r3, #0
}
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	3708      	adds	r7, #8
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	bd80      	pop	{r7, pc}

08006bca <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006bca:	b580      	push	{r7, lr}
 8006bcc:	b082      	sub	sp, #8
 8006bce:	af00      	add	r7, sp, #0
 8006bd0:	6078      	str	r0, [r7, #4]
 8006bd2:	460b      	mov	r3, r1
 8006bd4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	32ae      	adds	r2, #174	; 0xae
 8006be0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d101      	bne.n	8006bec <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006be8:	2303      	movs	r3, #3
 8006bea:	e01c      	b.n	8006c26 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bf2:	b2db      	uxtb	r3, r3
 8006bf4:	2b03      	cmp	r3, #3
 8006bf6:	d115      	bne.n	8006c24 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	32ae      	adds	r2, #174	; 0xae
 8006c02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c06:	6a1b      	ldr	r3, [r3, #32]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d00b      	beq.n	8006c24 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	32ae      	adds	r2, #174	; 0xae
 8006c16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c1a:	6a1b      	ldr	r3, [r3, #32]
 8006c1c:	78fa      	ldrb	r2, [r7, #3]
 8006c1e:	4611      	mov	r1, r2
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006c24:	2300      	movs	r3, #0
}
 8006c26:	4618      	mov	r0, r3
 8006c28:	3708      	adds	r7, #8
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bd80      	pop	{r7, pc}

08006c2e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006c2e:	b580      	push	{r7, lr}
 8006c30:	b082      	sub	sp, #8
 8006c32:	af00      	add	r7, sp, #0
 8006c34:	6078      	str	r0, [r7, #4]
 8006c36:	460b      	mov	r3, r1
 8006c38:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	32ae      	adds	r2, #174	; 0xae
 8006c44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d101      	bne.n	8006c50 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006c4c:	2303      	movs	r3, #3
 8006c4e:	e01c      	b.n	8006c8a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c56:	b2db      	uxtb	r3, r3
 8006c58:	2b03      	cmp	r3, #3
 8006c5a:	d115      	bne.n	8006c88 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	32ae      	adds	r2, #174	; 0xae
 8006c66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d00b      	beq.n	8006c88 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	32ae      	adds	r2, #174	; 0xae
 8006c7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c80:	78fa      	ldrb	r2, [r7, #3]
 8006c82:	4611      	mov	r1, r2
 8006c84:	6878      	ldr	r0, [r7, #4]
 8006c86:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006c88:	2300      	movs	r3, #0
}
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	3708      	adds	r7, #8
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bd80      	pop	{r7, pc}

08006c92 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006c92:	b480      	push	{r7}
 8006c94:	b083      	sub	sp, #12
 8006c96:	af00      	add	r7, sp, #0
 8006c98:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006c9a:	2300      	movs	r3, #0
}
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	370c      	adds	r7, #12
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca6:	4770      	bx	lr

08006ca8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b084      	sub	sp, #16
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2201      	movs	r2, #1
 8006cb8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d00e      	beq.n	8006ce4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ccc:	685b      	ldr	r3, [r3, #4]
 8006cce:	687a      	ldr	r2, [r7, #4]
 8006cd0:	6852      	ldr	r2, [r2, #4]
 8006cd2:	b2d2      	uxtb	r2, r2
 8006cd4:	4611      	mov	r1, r2
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	4798      	blx	r3
 8006cda:	4603      	mov	r3, r0
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d001      	beq.n	8006ce4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006ce0:	2303      	movs	r3, #3
 8006ce2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006ce4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	3710      	adds	r7, #16
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bd80      	pop	{r7, pc}

08006cee <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006cee:	b480      	push	{r7}
 8006cf0:	b083      	sub	sp, #12
 8006cf2:	af00      	add	r7, sp, #0
 8006cf4:	6078      	str	r0, [r7, #4]
 8006cf6:	460b      	mov	r3, r1
 8006cf8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006cfa:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	370c      	adds	r7, #12
 8006d00:	46bd      	mov	sp, r7
 8006d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d06:	4770      	bx	lr

08006d08 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006d08:	b480      	push	{r7}
 8006d0a:	b083      	sub	sp, #12
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
 8006d10:	460b      	mov	r3, r1
 8006d12:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006d14:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006d16:	4618      	mov	r0, r3
 8006d18:	370c      	adds	r7, #12
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d20:	4770      	bx	lr

08006d22 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8006d22:	b580      	push	{r7, lr}
 8006d24:	b086      	sub	sp, #24
 8006d26:	af00      	add	r7, sp, #0
 8006d28:	6078      	str	r0, [r7, #4]
 8006d2a:	460b      	mov	r3, r1
 8006d2c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006d36:	2300      	movs	r3, #0
 8006d38:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	885b      	ldrh	r3, [r3, #2]
 8006d3e:	b29a      	uxth	r2, r3
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	781b      	ldrb	r3, [r3, #0]
 8006d44:	b29b      	uxth	r3, r3
 8006d46:	429a      	cmp	r2, r3
 8006d48:	d920      	bls.n	8006d8c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	781b      	ldrb	r3, [r3, #0]
 8006d4e:	b29b      	uxth	r3, r3
 8006d50:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006d52:	e013      	b.n	8006d7c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006d54:	f107 030a 	add.w	r3, r7, #10
 8006d58:	4619      	mov	r1, r3
 8006d5a:	6978      	ldr	r0, [r7, #20]
 8006d5c:	f000 f81b 	bl	8006d96 <USBD_GetNextDesc>
 8006d60:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006d62:	697b      	ldr	r3, [r7, #20]
 8006d64:	785b      	ldrb	r3, [r3, #1]
 8006d66:	2b05      	cmp	r3, #5
 8006d68:	d108      	bne.n	8006d7c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006d6a:	697b      	ldr	r3, [r7, #20]
 8006d6c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006d6e:	693b      	ldr	r3, [r7, #16]
 8006d70:	789b      	ldrb	r3, [r3, #2]
 8006d72:	78fa      	ldrb	r2, [r7, #3]
 8006d74:	429a      	cmp	r2, r3
 8006d76:	d008      	beq.n	8006d8a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006d78:	2300      	movs	r3, #0
 8006d7a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	885b      	ldrh	r3, [r3, #2]
 8006d80:	b29a      	uxth	r2, r3
 8006d82:	897b      	ldrh	r3, [r7, #10]
 8006d84:	429a      	cmp	r2, r3
 8006d86:	d8e5      	bhi.n	8006d54 <USBD_GetEpDesc+0x32>
 8006d88:	e000      	b.n	8006d8c <USBD_GetEpDesc+0x6a>
          break;
 8006d8a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006d8c:	693b      	ldr	r3, [r7, #16]
}
 8006d8e:	4618      	mov	r0, r3
 8006d90:	3718      	adds	r7, #24
 8006d92:	46bd      	mov	sp, r7
 8006d94:	bd80      	pop	{r7, pc}

08006d96 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006d96:	b480      	push	{r7}
 8006d98:	b085      	sub	sp, #20
 8006d9a:	af00      	add	r7, sp, #0
 8006d9c:	6078      	str	r0, [r7, #4]
 8006d9e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	881a      	ldrh	r2, [r3, #0]
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	781b      	ldrb	r3, [r3, #0]
 8006dac:	b29b      	uxth	r3, r3
 8006dae:	4413      	add	r3, r2
 8006db0:	b29a      	uxth	r2, r3
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	781b      	ldrb	r3, [r3, #0]
 8006dba:	461a      	mov	r2, r3
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	4413      	add	r3, r2
 8006dc0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006dc2:	68fb      	ldr	r3, [r7, #12]
}
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	3714      	adds	r7, #20
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dce:	4770      	bx	lr

08006dd0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006dd0:	b480      	push	{r7}
 8006dd2:	b087      	sub	sp, #28
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006ddc:	697b      	ldr	r3, [r7, #20]
 8006dde:	781b      	ldrb	r3, [r3, #0]
 8006de0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006de2:	697b      	ldr	r3, [r7, #20]
 8006de4:	3301      	adds	r3, #1
 8006de6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006de8:	697b      	ldr	r3, [r7, #20]
 8006dea:	781b      	ldrb	r3, [r3, #0]
 8006dec:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006dee:	8a3b      	ldrh	r3, [r7, #16]
 8006df0:	021b      	lsls	r3, r3, #8
 8006df2:	b21a      	sxth	r2, r3
 8006df4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006df8:	4313      	orrs	r3, r2
 8006dfa:	b21b      	sxth	r3, r3
 8006dfc:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006dfe:	89fb      	ldrh	r3, [r7, #14]
}
 8006e00:	4618      	mov	r0, r3
 8006e02:	371c      	adds	r7, #28
 8006e04:	46bd      	mov	sp, r7
 8006e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0a:	4770      	bx	lr

08006e0c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b084      	sub	sp, #16
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
 8006e14:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006e16:	2300      	movs	r3, #0
 8006e18:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	781b      	ldrb	r3, [r3, #0]
 8006e1e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006e22:	2b40      	cmp	r3, #64	; 0x40
 8006e24:	d005      	beq.n	8006e32 <USBD_StdDevReq+0x26>
 8006e26:	2b40      	cmp	r3, #64	; 0x40
 8006e28:	d857      	bhi.n	8006eda <USBD_StdDevReq+0xce>
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d00f      	beq.n	8006e4e <USBD_StdDevReq+0x42>
 8006e2e:	2b20      	cmp	r3, #32
 8006e30:	d153      	bne.n	8006eda <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	32ae      	adds	r2, #174	; 0xae
 8006e3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e40:	689b      	ldr	r3, [r3, #8]
 8006e42:	6839      	ldr	r1, [r7, #0]
 8006e44:	6878      	ldr	r0, [r7, #4]
 8006e46:	4798      	blx	r3
 8006e48:	4603      	mov	r3, r0
 8006e4a:	73fb      	strb	r3, [r7, #15]
      break;
 8006e4c:	e04a      	b.n	8006ee4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	785b      	ldrb	r3, [r3, #1]
 8006e52:	2b09      	cmp	r3, #9
 8006e54:	d83b      	bhi.n	8006ece <USBD_StdDevReq+0xc2>
 8006e56:	a201      	add	r2, pc, #4	; (adr r2, 8006e5c <USBD_StdDevReq+0x50>)
 8006e58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e5c:	08006eb1 	.word	0x08006eb1
 8006e60:	08006ec5 	.word	0x08006ec5
 8006e64:	08006ecf 	.word	0x08006ecf
 8006e68:	08006ebb 	.word	0x08006ebb
 8006e6c:	08006ecf 	.word	0x08006ecf
 8006e70:	08006e8f 	.word	0x08006e8f
 8006e74:	08006e85 	.word	0x08006e85
 8006e78:	08006ecf 	.word	0x08006ecf
 8006e7c:	08006ea7 	.word	0x08006ea7
 8006e80:	08006e99 	.word	0x08006e99
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006e84:	6839      	ldr	r1, [r7, #0]
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	f000 fa3c 	bl	8007304 <USBD_GetDescriptor>
          break;
 8006e8c:	e024      	b.n	8006ed8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006e8e:	6839      	ldr	r1, [r7, #0]
 8006e90:	6878      	ldr	r0, [r7, #4]
 8006e92:	f000 fba1 	bl	80075d8 <USBD_SetAddress>
          break;
 8006e96:	e01f      	b.n	8006ed8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006e98:	6839      	ldr	r1, [r7, #0]
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	f000 fbe0 	bl	8007660 <USBD_SetConfig>
 8006ea0:	4603      	mov	r3, r0
 8006ea2:	73fb      	strb	r3, [r7, #15]
          break;
 8006ea4:	e018      	b.n	8006ed8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006ea6:	6839      	ldr	r1, [r7, #0]
 8006ea8:	6878      	ldr	r0, [r7, #4]
 8006eaa:	f000 fc83 	bl	80077b4 <USBD_GetConfig>
          break;
 8006eae:	e013      	b.n	8006ed8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006eb0:	6839      	ldr	r1, [r7, #0]
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	f000 fcb4 	bl	8007820 <USBD_GetStatus>
          break;
 8006eb8:	e00e      	b.n	8006ed8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006eba:	6839      	ldr	r1, [r7, #0]
 8006ebc:	6878      	ldr	r0, [r7, #4]
 8006ebe:	f000 fce3 	bl	8007888 <USBD_SetFeature>
          break;
 8006ec2:	e009      	b.n	8006ed8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006ec4:	6839      	ldr	r1, [r7, #0]
 8006ec6:	6878      	ldr	r0, [r7, #4]
 8006ec8:	f000 fd07 	bl	80078da <USBD_ClrFeature>
          break;
 8006ecc:	e004      	b.n	8006ed8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006ece:	6839      	ldr	r1, [r7, #0]
 8006ed0:	6878      	ldr	r0, [r7, #4]
 8006ed2:	f000 fd5e 	bl	8007992 <USBD_CtlError>
          break;
 8006ed6:	bf00      	nop
      }
      break;
 8006ed8:	e004      	b.n	8006ee4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8006eda:	6839      	ldr	r1, [r7, #0]
 8006edc:	6878      	ldr	r0, [r7, #4]
 8006ede:	f000 fd58 	bl	8007992 <USBD_CtlError>
      break;
 8006ee2:	bf00      	nop
  }

  return ret;
 8006ee4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	3710      	adds	r7, #16
 8006eea:	46bd      	mov	sp, r7
 8006eec:	bd80      	pop	{r7, pc}
 8006eee:	bf00      	nop

08006ef0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b084      	sub	sp, #16
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
 8006ef8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006efa:	2300      	movs	r3, #0
 8006efc:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	781b      	ldrb	r3, [r3, #0]
 8006f02:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006f06:	2b40      	cmp	r3, #64	; 0x40
 8006f08:	d005      	beq.n	8006f16 <USBD_StdItfReq+0x26>
 8006f0a:	2b40      	cmp	r3, #64	; 0x40
 8006f0c:	d852      	bhi.n	8006fb4 <USBD_StdItfReq+0xc4>
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d001      	beq.n	8006f16 <USBD_StdItfReq+0x26>
 8006f12:	2b20      	cmp	r3, #32
 8006f14:	d14e      	bne.n	8006fb4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f1c:	b2db      	uxtb	r3, r3
 8006f1e:	3b01      	subs	r3, #1
 8006f20:	2b02      	cmp	r3, #2
 8006f22:	d840      	bhi.n	8006fa6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	889b      	ldrh	r3, [r3, #4]
 8006f28:	b2db      	uxtb	r3, r3
 8006f2a:	2b01      	cmp	r3, #1
 8006f2c:	d836      	bhi.n	8006f9c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	889b      	ldrh	r3, [r3, #4]
 8006f32:	b2db      	uxtb	r3, r3
 8006f34:	4619      	mov	r1, r3
 8006f36:	6878      	ldr	r0, [r7, #4]
 8006f38:	f7ff fed9 	bl	8006cee <USBD_CoreFindIF>
 8006f3c:	4603      	mov	r3, r0
 8006f3e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006f40:	7bbb      	ldrb	r3, [r7, #14]
 8006f42:	2bff      	cmp	r3, #255	; 0xff
 8006f44:	d01d      	beq.n	8006f82 <USBD_StdItfReq+0x92>
 8006f46:	7bbb      	ldrb	r3, [r7, #14]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d11a      	bne.n	8006f82 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006f4c:	7bba      	ldrb	r2, [r7, #14]
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	32ae      	adds	r2, #174	; 0xae
 8006f52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f56:	689b      	ldr	r3, [r3, #8]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d00f      	beq.n	8006f7c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006f5c:	7bba      	ldrb	r2, [r7, #14]
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006f64:	7bba      	ldrb	r2, [r7, #14]
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	32ae      	adds	r2, #174	; 0xae
 8006f6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f6e:	689b      	ldr	r3, [r3, #8]
 8006f70:	6839      	ldr	r1, [r7, #0]
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	4798      	blx	r3
 8006f76:	4603      	mov	r3, r0
 8006f78:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006f7a:	e004      	b.n	8006f86 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006f7c:	2303      	movs	r3, #3
 8006f7e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006f80:	e001      	b.n	8006f86 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8006f82:	2303      	movs	r3, #3
 8006f84:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	88db      	ldrh	r3, [r3, #6]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d110      	bne.n	8006fb0 <USBD_StdItfReq+0xc0>
 8006f8e:	7bfb      	ldrb	r3, [r7, #15]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d10d      	bne.n	8006fb0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006f94:	6878      	ldr	r0, [r7, #4]
 8006f96:	f000 fdc7 	bl	8007b28 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006f9a:	e009      	b.n	8006fb0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006f9c:	6839      	ldr	r1, [r7, #0]
 8006f9e:	6878      	ldr	r0, [r7, #4]
 8006fa0:	f000 fcf7 	bl	8007992 <USBD_CtlError>
          break;
 8006fa4:	e004      	b.n	8006fb0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006fa6:	6839      	ldr	r1, [r7, #0]
 8006fa8:	6878      	ldr	r0, [r7, #4]
 8006faa:	f000 fcf2 	bl	8007992 <USBD_CtlError>
          break;
 8006fae:	e000      	b.n	8006fb2 <USBD_StdItfReq+0xc2>
          break;
 8006fb0:	bf00      	nop
      }
      break;
 8006fb2:	e004      	b.n	8006fbe <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006fb4:	6839      	ldr	r1, [r7, #0]
 8006fb6:	6878      	ldr	r0, [r7, #4]
 8006fb8:	f000 fceb 	bl	8007992 <USBD_CtlError>
      break;
 8006fbc:	bf00      	nop
  }

  return ret;
 8006fbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	3710      	adds	r7, #16
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bd80      	pop	{r7, pc}

08006fc8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b084      	sub	sp, #16
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
 8006fd0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	889b      	ldrh	r3, [r3, #4]
 8006fda:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	781b      	ldrb	r3, [r3, #0]
 8006fe0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006fe4:	2b40      	cmp	r3, #64	; 0x40
 8006fe6:	d007      	beq.n	8006ff8 <USBD_StdEPReq+0x30>
 8006fe8:	2b40      	cmp	r3, #64	; 0x40
 8006fea:	f200 817f 	bhi.w	80072ec <USBD_StdEPReq+0x324>
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d02a      	beq.n	8007048 <USBD_StdEPReq+0x80>
 8006ff2:	2b20      	cmp	r3, #32
 8006ff4:	f040 817a 	bne.w	80072ec <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006ff8:	7bbb      	ldrb	r3, [r7, #14]
 8006ffa:	4619      	mov	r1, r3
 8006ffc:	6878      	ldr	r0, [r7, #4]
 8006ffe:	f7ff fe83 	bl	8006d08 <USBD_CoreFindEP>
 8007002:	4603      	mov	r3, r0
 8007004:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007006:	7b7b      	ldrb	r3, [r7, #13]
 8007008:	2bff      	cmp	r3, #255	; 0xff
 800700a:	f000 8174 	beq.w	80072f6 <USBD_StdEPReq+0x32e>
 800700e:	7b7b      	ldrb	r3, [r7, #13]
 8007010:	2b00      	cmp	r3, #0
 8007012:	f040 8170 	bne.w	80072f6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007016:	7b7a      	ldrb	r2, [r7, #13]
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800701e:	7b7a      	ldrb	r2, [r7, #13]
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	32ae      	adds	r2, #174	; 0xae
 8007024:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007028:	689b      	ldr	r3, [r3, #8]
 800702a:	2b00      	cmp	r3, #0
 800702c:	f000 8163 	beq.w	80072f6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007030:	7b7a      	ldrb	r2, [r7, #13]
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	32ae      	adds	r2, #174	; 0xae
 8007036:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800703a:	689b      	ldr	r3, [r3, #8]
 800703c:	6839      	ldr	r1, [r7, #0]
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	4798      	blx	r3
 8007042:	4603      	mov	r3, r0
 8007044:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007046:	e156      	b.n	80072f6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	785b      	ldrb	r3, [r3, #1]
 800704c:	2b03      	cmp	r3, #3
 800704e:	d008      	beq.n	8007062 <USBD_StdEPReq+0x9a>
 8007050:	2b03      	cmp	r3, #3
 8007052:	f300 8145 	bgt.w	80072e0 <USBD_StdEPReq+0x318>
 8007056:	2b00      	cmp	r3, #0
 8007058:	f000 809b 	beq.w	8007192 <USBD_StdEPReq+0x1ca>
 800705c:	2b01      	cmp	r3, #1
 800705e:	d03c      	beq.n	80070da <USBD_StdEPReq+0x112>
 8007060:	e13e      	b.n	80072e0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007068:	b2db      	uxtb	r3, r3
 800706a:	2b02      	cmp	r3, #2
 800706c:	d002      	beq.n	8007074 <USBD_StdEPReq+0xac>
 800706e:	2b03      	cmp	r3, #3
 8007070:	d016      	beq.n	80070a0 <USBD_StdEPReq+0xd8>
 8007072:	e02c      	b.n	80070ce <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007074:	7bbb      	ldrb	r3, [r7, #14]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d00d      	beq.n	8007096 <USBD_StdEPReq+0xce>
 800707a:	7bbb      	ldrb	r3, [r7, #14]
 800707c:	2b80      	cmp	r3, #128	; 0x80
 800707e:	d00a      	beq.n	8007096 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007080:	7bbb      	ldrb	r3, [r7, #14]
 8007082:	4619      	mov	r1, r3
 8007084:	6878      	ldr	r0, [r7, #4]
 8007086:	f003 ff03 	bl	800ae90 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800708a:	2180      	movs	r1, #128	; 0x80
 800708c:	6878      	ldr	r0, [r7, #4]
 800708e:	f003 feff 	bl	800ae90 <USBD_LL_StallEP>
 8007092:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007094:	e020      	b.n	80070d8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007096:	6839      	ldr	r1, [r7, #0]
 8007098:	6878      	ldr	r0, [r7, #4]
 800709a:	f000 fc7a 	bl	8007992 <USBD_CtlError>
              break;
 800709e:	e01b      	b.n	80070d8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	885b      	ldrh	r3, [r3, #2]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d10e      	bne.n	80070c6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80070a8:	7bbb      	ldrb	r3, [r7, #14]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d00b      	beq.n	80070c6 <USBD_StdEPReq+0xfe>
 80070ae:	7bbb      	ldrb	r3, [r7, #14]
 80070b0:	2b80      	cmp	r3, #128	; 0x80
 80070b2:	d008      	beq.n	80070c6 <USBD_StdEPReq+0xfe>
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	88db      	ldrh	r3, [r3, #6]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d104      	bne.n	80070c6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80070bc:	7bbb      	ldrb	r3, [r7, #14]
 80070be:	4619      	mov	r1, r3
 80070c0:	6878      	ldr	r0, [r7, #4]
 80070c2:	f003 fee5 	bl	800ae90 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80070c6:	6878      	ldr	r0, [r7, #4]
 80070c8:	f000 fd2e 	bl	8007b28 <USBD_CtlSendStatus>

              break;
 80070cc:	e004      	b.n	80070d8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80070ce:	6839      	ldr	r1, [r7, #0]
 80070d0:	6878      	ldr	r0, [r7, #4]
 80070d2:	f000 fc5e 	bl	8007992 <USBD_CtlError>
              break;
 80070d6:	bf00      	nop
          }
          break;
 80070d8:	e107      	b.n	80072ea <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070e0:	b2db      	uxtb	r3, r3
 80070e2:	2b02      	cmp	r3, #2
 80070e4:	d002      	beq.n	80070ec <USBD_StdEPReq+0x124>
 80070e6:	2b03      	cmp	r3, #3
 80070e8:	d016      	beq.n	8007118 <USBD_StdEPReq+0x150>
 80070ea:	e04b      	b.n	8007184 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80070ec:	7bbb      	ldrb	r3, [r7, #14]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d00d      	beq.n	800710e <USBD_StdEPReq+0x146>
 80070f2:	7bbb      	ldrb	r3, [r7, #14]
 80070f4:	2b80      	cmp	r3, #128	; 0x80
 80070f6:	d00a      	beq.n	800710e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80070f8:	7bbb      	ldrb	r3, [r7, #14]
 80070fa:	4619      	mov	r1, r3
 80070fc:	6878      	ldr	r0, [r7, #4]
 80070fe:	f003 fec7 	bl	800ae90 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007102:	2180      	movs	r1, #128	; 0x80
 8007104:	6878      	ldr	r0, [r7, #4]
 8007106:	f003 fec3 	bl	800ae90 <USBD_LL_StallEP>
 800710a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800710c:	e040      	b.n	8007190 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800710e:	6839      	ldr	r1, [r7, #0]
 8007110:	6878      	ldr	r0, [r7, #4]
 8007112:	f000 fc3e 	bl	8007992 <USBD_CtlError>
              break;
 8007116:	e03b      	b.n	8007190 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	885b      	ldrh	r3, [r3, #2]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d136      	bne.n	800718e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007120:	7bbb      	ldrb	r3, [r7, #14]
 8007122:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007126:	2b00      	cmp	r3, #0
 8007128:	d004      	beq.n	8007134 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800712a:	7bbb      	ldrb	r3, [r7, #14]
 800712c:	4619      	mov	r1, r3
 800712e:	6878      	ldr	r0, [r7, #4]
 8007130:	f003 fecd 	bl	800aece <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007134:	6878      	ldr	r0, [r7, #4]
 8007136:	f000 fcf7 	bl	8007b28 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800713a:	7bbb      	ldrb	r3, [r7, #14]
 800713c:	4619      	mov	r1, r3
 800713e:	6878      	ldr	r0, [r7, #4]
 8007140:	f7ff fde2 	bl	8006d08 <USBD_CoreFindEP>
 8007144:	4603      	mov	r3, r0
 8007146:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007148:	7b7b      	ldrb	r3, [r7, #13]
 800714a:	2bff      	cmp	r3, #255	; 0xff
 800714c:	d01f      	beq.n	800718e <USBD_StdEPReq+0x1c6>
 800714e:	7b7b      	ldrb	r3, [r7, #13]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d11c      	bne.n	800718e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007154:	7b7a      	ldrb	r2, [r7, #13]
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800715c:	7b7a      	ldrb	r2, [r7, #13]
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	32ae      	adds	r2, #174	; 0xae
 8007162:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007166:	689b      	ldr	r3, [r3, #8]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d010      	beq.n	800718e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800716c:	7b7a      	ldrb	r2, [r7, #13]
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	32ae      	adds	r2, #174	; 0xae
 8007172:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007176:	689b      	ldr	r3, [r3, #8]
 8007178:	6839      	ldr	r1, [r7, #0]
 800717a:	6878      	ldr	r0, [r7, #4]
 800717c:	4798      	blx	r3
 800717e:	4603      	mov	r3, r0
 8007180:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007182:	e004      	b.n	800718e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007184:	6839      	ldr	r1, [r7, #0]
 8007186:	6878      	ldr	r0, [r7, #4]
 8007188:	f000 fc03 	bl	8007992 <USBD_CtlError>
              break;
 800718c:	e000      	b.n	8007190 <USBD_StdEPReq+0x1c8>
              break;
 800718e:	bf00      	nop
          }
          break;
 8007190:	e0ab      	b.n	80072ea <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007198:	b2db      	uxtb	r3, r3
 800719a:	2b02      	cmp	r3, #2
 800719c:	d002      	beq.n	80071a4 <USBD_StdEPReq+0x1dc>
 800719e:	2b03      	cmp	r3, #3
 80071a0:	d032      	beq.n	8007208 <USBD_StdEPReq+0x240>
 80071a2:	e097      	b.n	80072d4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80071a4:	7bbb      	ldrb	r3, [r7, #14]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d007      	beq.n	80071ba <USBD_StdEPReq+0x1f2>
 80071aa:	7bbb      	ldrb	r3, [r7, #14]
 80071ac:	2b80      	cmp	r3, #128	; 0x80
 80071ae:	d004      	beq.n	80071ba <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80071b0:	6839      	ldr	r1, [r7, #0]
 80071b2:	6878      	ldr	r0, [r7, #4]
 80071b4:	f000 fbed 	bl	8007992 <USBD_CtlError>
                break;
 80071b8:	e091      	b.n	80072de <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80071ba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	da0b      	bge.n	80071da <USBD_StdEPReq+0x212>
 80071c2:	7bbb      	ldrb	r3, [r7, #14]
 80071c4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80071c8:	4613      	mov	r3, r2
 80071ca:	009b      	lsls	r3, r3, #2
 80071cc:	4413      	add	r3, r2
 80071ce:	009b      	lsls	r3, r3, #2
 80071d0:	3310      	adds	r3, #16
 80071d2:	687a      	ldr	r2, [r7, #4]
 80071d4:	4413      	add	r3, r2
 80071d6:	3304      	adds	r3, #4
 80071d8:	e00b      	b.n	80071f2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80071da:	7bbb      	ldrb	r3, [r7, #14]
 80071dc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80071e0:	4613      	mov	r3, r2
 80071e2:	009b      	lsls	r3, r3, #2
 80071e4:	4413      	add	r3, r2
 80071e6:	009b      	lsls	r3, r3, #2
 80071e8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80071ec:	687a      	ldr	r2, [r7, #4]
 80071ee:	4413      	add	r3, r2
 80071f0:	3304      	adds	r3, #4
 80071f2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80071f4:	68bb      	ldr	r3, [r7, #8]
 80071f6:	2200      	movs	r2, #0
 80071f8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80071fa:	68bb      	ldr	r3, [r7, #8]
 80071fc:	2202      	movs	r2, #2
 80071fe:	4619      	mov	r1, r3
 8007200:	6878      	ldr	r0, [r7, #4]
 8007202:	f000 fc37 	bl	8007a74 <USBD_CtlSendData>
              break;
 8007206:	e06a      	b.n	80072de <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007208:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800720c:	2b00      	cmp	r3, #0
 800720e:	da11      	bge.n	8007234 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007210:	7bbb      	ldrb	r3, [r7, #14]
 8007212:	f003 020f 	and.w	r2, r3, #15
 8007216:	6879      	ldr	r1, [r7, #4]
 8007218:	4613      	mov	r3, r2
 800721a:	009b      	lsls	r3, r3, #2
 800721c:	4413      	add	r3, r2
 800721e:	009b      	lsls	r3, r3, #2
 8007220:	440b      	add	r3, r1
 8007222:	3324      	adds	r3, #36	; 0x24
 8007224:	881b      	ldrh	r3, [r3, #0]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d117      	bne.n	800725a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800722a:	6839      	ldr	r1, [r7, #0]
 800722c:	6878      	ldr	r0, [r7, #4]
 800722e:	f000 fbb0 	bl	8007992 <USBD_CtlError>
                  break;
 8007232:	e054      	b.n	80072de <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007234:	7bbb      	ldrb	r3, [r7, #14]
 8007236:	f003 020f 	and.w	r2, r3, #15
 800723a:	6879      	ldr	r1, [r7, #4]
 800723c:	4613      	mov	r3, r2
 800723e:	009b      	lsls	r3, r3, #2
 8007240:	4413      	add	r3, r2
 8007242:	009b      	lsls	r3, r3, #2
 8007244:	440b      	add	r3, r1
 8007246:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800724a:	881b      	ldrh	r3, [r3, #0]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d104      	bne.n	800725a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007250:	6839      	ldr	r1, [r7, #0]
 8007252:	6878      	ldr	r0, [r7, #4]
 8007254:	f000 fb9d 	bl	8007992 <USBD_CtlError>
                  break;
 8007258:	e041      	b.n	80072de <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800725a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800725e:	2b00      	cmp	r3, #0
 8007260:	da0b      	bge.n	800727a <USBD_StdEPReq+0x2b2>
 8007262:	7bbb      	ldrb	r3, [r7, #14]
 8007264:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007268:	4613      	mov	r3, r2
 800726a:	009b      	lsls	r3, r3, #2
 800726c:	4413      	add	r3, r2
 800726e:	009b      	lsls	r3, r3, #2
 8007270:	3310      	adds	r3, #16
 8007272:	687a      	ldr	r2, [r7, #4]
 8007274:	4413      	add	r3, r2
 8007276:	3304      	adds	r3, #4
 8007278:	e00b      	b.n	8007292 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800727a:	7bbb      	ldrb	r3, [r7, #14]
 800727c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007280:	4613      	mov	r3, r2
 8007282:	009b      	lsls	r3, r3, #2
 8007284:	4413      	add	r3, r2
 8007286:	009b      	lsls	r3, r3, #2
 8007288:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800728c:	687a      	ldr	r2, [r7, #4]
 800728e:	4413      	add	r3, r2
 8007290:	3304      	adds	r3, #4
 8007292:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007294:	7bbb      	ldrb	r3, [r7, #14]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d002      	beq.n	80072a0 <USBD_StdEPReq+0x2d8>
 800729a:	7bbb      	ldrb	r3, [r7, #14]
 800729c:	2b80      	cmp	r3, #128	; 0x80
 800729e:	d103      	bne.n	80072a8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80072a0:	68bb      	ldr	r3, [r7, #8]
 80072a2:	2200      	movs	r2, #0
 80072a4:	601a      	str	r2, [r3, #0]
 80072a6:	e00e      	b.n	80072c6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80072a8:	7bbb      	ldrb	r3, [r7, #14]
 80072aa:	4619      	mov	r1, r3
 80072ac:	6878      	ldr	r0, [r7, #4]
 80072ae:	f003 fe2d 	bl	800af0c <USBD_LL_IsStallEP>
 80072b2:	4603      	mov	r3, r0
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d003      	beq.n	80072c0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80072b8:	68bb      	ldr	r3, [r7, #8]
 80072ba:	2201      	movs	r2, #1
 80072bc:	601a      	str	r2, [r3, #0]
 80072be:	e002      	b.n	80072c6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	2200      	movs	r2, #0
 80072c4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80072c6:	68bb      	ldr	r3, [r7, #8]
 80072c8:	2202      	movs	r2, #2
 80072ca:	4619      	mov	r1, r3
 80072cc:	6878      	ldr	r0, [r7, #4]
 80072ce:	f000 fbd1 	bl	8007a74 <USBD_CtlSendData>
              break;
 80072d2:	e004      	b.n	80072de <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80072d4:	6839      	ldr	r1, [r7, #0]
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	f000 fb5b 	bl	8007992 <USBD_CtlError>
              break;
 80072dc:	bf00      	nop
          }
          break;
 80072de:	e004      	b.n	80072ea <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80072e0:	6839      	ldr	r1, [r7, #0]
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f000 fb55 	bl	8007992 <USBD_CtlError>
          break;
 80072e8:	bf00      	nop
      }
      break;
 80072ea:	e005      	b.n	80072f8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80072ec:	6839      	ldr	r1, [r7, #0]
 80072ee:	6878      	ldr	r0, [r7, #4]
 80072f0:	f000 fb4f 	bl	8007992 <USBD_CtlError>
      break;
 80072f4:	e000      	b.n	80072f8 <USBD_StdEPReq+0x330>
      break;
 80072f6:	bf00      	nop
  }

  return ret;
 80072f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80072fa:	4618      	mov	r0, r3
 80072fc:	3710      	adds	r7, #16
 80072fe:	46bd      	mov	sp, r7
 8007300:	bd80      	pop	{r7, pc}
	...

08007304 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b084      	sub	sp, #16
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
 800730c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800730e:	2300      	movs	r3, #0
 8007310:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007312:	2300      	movs	r3, #0
 8007314:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007316:	2300      	movs	r3, #0
 8007318:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	885b      	ldrh	r3, [r3, #2]
 800731e:	0a1b      	lsrs	r3, r3, #8
 8007320:	b29b      	uxth	r3, r3
 8007322:	3b01      	subs	r3, #1
 8007324:	2b06      	cmp	r3, #6
 8007326:	f200 8128 	bhi.w	800757a <USBD_GetDescriptor+0x276>
 800732a:	a201      	add	r2, pc, #4	; (adr r2, 8007330 <USBD_GetDescriptor+0x2c>)
 800732c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007330:	0800734d 	.word	0x0800734d
 8007334:	08007365 	.word	0x08007365
 8007338:	080073a5 	.word	0x080073a5
 800733c:	0800757b 	.word	0x0800757b
 8007340:	0800757b 	.word	0x0800757b
 8007344:	0800751b 	.word	0x0800751b
 8007348:	08007547 	.word	0x08007547
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	687a      	ldr	r2, [r7, #4]
 8007356:	7c12      	ldrb	r2, [r2, #16]
 8007358:	f107 0108 	add.w	r1, r7, #8
 800735c:	4610      	mov	r0, r2
 800735e:	4798      	blx	r3
 8007360:	60f8      	str	r0, [r7, #12]
      break;
 8007362:	e112      	b.n	800758a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	7c1b      	ldrb	r3, [r3, #16]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d10d      	bne.n	8007388 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007374:	f107 0208 	add.w	r2, r7, #8
 8007378:	4610      	mov	r0, r2
 800737a:	4798      	blx	r3
 800737c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	3301      	adds	r3, #1
 8007382:	2202      	movs	r2, #2
 8007384:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007386:	e100      	b.n	800758a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800738e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007390:	f107 0208 	add.w	r2, r7, #8
 8007394:	4610      	mov	r0, r2
 8007396:	4798      	blx	r3
 8007398:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	3301      	adds	r3, #1
 800739e:	2202      	movs	r2, #2
 80073a0:	701a      	strb	r2, [r3, #0]
      break;
 80073a2:	e0f2      	b.n	800758a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	885b      	ldrh	r3, [r3, #2]
 80073a8:	b2db      	uxtb	r3, r3
 80073aa:	2b05      	cmp	r3, #5
 80073ac:	f200 80ac 	bhi.w	8007508 <USBD_GetDescriptor+0x204>
 80073b0:	a201      	add	r2, pc, #4	; (adr r2, 80073b8 <USBD_GetDescriptor+0xb4>)
 80073b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073b6:	bf00      	nop
 80073b8:	080073d1 	.word	0x080073d1
 80073bc:	08007405 	.word	0x08007405
 80073c0:	08007439 	.word	0x08007439
 80073c4:	0800746d 	.word	0x0800746d
 80073c8:	080074a1 	.word	0x080074a1
 80073cc:	080074d5 	.word	0x080074d5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073d6:	685b      	ldr	r3, [r3, #4]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d00b      	beq.n	80073f4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073e2:	685b      	ldr	r3, [r3, #4]
 80073e4:	687a      	ldr	r2, [r7, #4]
 80073e6:	7c12      	ldrb	r2, [r2, #16]
 80073e8:	f107 0108 	add.w	r1, r7, #8
 80073ec:	4610      	mov	r0, r2
 80073ee:	4798      	blx	r3
 80073f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80073f2:	e091      	b.n	8007518 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80073f4:	6839      	ldr	r1, [r7, #0]
 80073f6:	6878      	ldr	r0, [r7, #4]
 80073f8:	f000 facb 	bl	8007992 <USBD_CtlError>
            err++;
 80073fc:	7afb      	ldrb	r3, [r7, #11]
 80073fe:	3301      	adds	r3, #1
 8007400:	72fb      	strb	r3, [r7, #11]
          break;
 8007402:	e089      	b.n	8007518 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800740a:	689b      	ldr	r3, [r3, #8]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d00b      	beq.n	8007428 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007416:	689b      	ldr	r3, [r3, #8]
 8007418:	687a      	ldr	r2, [r7, #4]
 800741a:	7c12      	ldrb	r2, [r2, #16]
 800741c:	f107 0108 	add.w	r1, r7, #8
 8007420:	4610      	mov	r0, r2
 8007422:	4798      	blx	r3
 8007424:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007426:	e077      	b.n	8007518 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007428:	6839      	ldr	r1, [r7, #0]
 800742a:	6878      	ldr	r0, [r7, #4]
 800742c:	f000 fab1 	bl	8007992 <USBD_CtlError>
            err++;
 8007430:	7afb      	ldrb	r3, [r7, #11]
 8007432:	3301      	adds	r3, #1
 8007434:	72fb      	strb	r3, [r7, #11]
          break;
 8007436:	e06f      	b.n	8007518 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800743e:	68db      	ldr	r3, [r3, #12]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d00b      	beq.n	800745c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800744a:	68db      	ldr	r3, [r3, #12]
 800744c:	687a      	ldr	r2, [r7, #4]
 800744e:	7c12      	ldrb	r2, [r2, #16]
 8007450:	f107 0108 	add.w	r1, r7, #8
 8007454:	4610      	mov	r0, r2
 8007456:	4798      	blx	r3
 8007458:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800745a:	e05d      	b.n	8007518 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800745c:	6839      	ldr	r1, [r7, #0]
 800745e:	6878      	ldr	r0, [r7, #4]
 8007460:	f000 fa97 	bl	8007992 <USBD_CtlError>
            err++;
 8007464:	7afb      	ldrb	r3, [r7, #11]
 8007466:	3301      	adds	r3, #1
 8007468:	72fb      	strb	r3, [r7, #11]
          break;
 800746a:	e055      	b.n	8007518 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007472:	691b      	ldr	r3, [r3, #16]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d00b      	beq.n	8007490 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800747e:	691b      	ldr	r3, [r3, #16]
 8007480:	687a      	ldr	r2, [r7, #4]
 8007482:	7c12      	ldrb	r2, [r2, #16]
 8007484:	f107 0108 	add.w	r1, r7, #8
 8007488:	4610      	mov	r0, r2
 800748a:	4798      	blx	r3
 800748c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800748e:	e043      	b.n	8007518 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007490:	6839      	ldr	r1, [r7, #0]
 8007492:	6878      	ldr	r0, [r7, #4]
 8007494:	f000 fa7d 	bl	8007992 <USBD_CtlError>
            err++;
 8007498:	7afb      	ldrb	r3, [r7, #11]
 800749a:	3301      	adds	r3, #1
 800749c:	72fb      	strb	r3, [r7, #11]
          break;
 800749e:	e03b      	b.n	8007518 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074a6:	695b      	ldr	r3, [r3, #20]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d00b      	beq.n	80074c4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074b2:	695b      	ldr	r3, [r3, #20]
 80074b4:	687a      	ldr	r2, [r7, #4]
 80074b6:	7c12      	ldrb	r2, [r2, #16]
 80074b8:	f107 0108 	add.w	r1, r7, #8
 80074bc:	4610      	mov	r0, r2
 80074be:	4798      	blx	r3
 80074c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80074c2:	e029      	b.n	8007518 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80074c4:	6839      	ldr	r1, [r7, #0]
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	f000 fa63 	bl	8007992 <USBD_CtlError>
            err++;
 80074cc:	7afb      	ldrb	r3, [r7, #11]
 80074ce:	3301      	adds	r3, #1
 80074d0:	72fb      	strb	r3, [r7, #11]
          break;
 80074d2:	e021      	b.n	8007518 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074da:	699b      	ldr	r3, [r3, #24]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d00b      	beq.n	80074f8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074e6:	699b      	ldr	r3, [r3, #24]
 80074e8:	687a      	ldr	r2, [r7, #4]
 80074ea:	7c12      	ldrb	r2, [r2, #16]
 80074ec:	f107 0108 	add.w	r1, r7, #8
 80074f0:	4610      	mov	r0, r2
 80074f2:	4798      	blx	r3
 80074f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80074f6:	e00f      	b.n	8007518 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80074f8:	6839      	ldr	r1, [r7, #0]
 80074fa:	6878      	ldr	r0, [r7, #4]
 80074fc:	f000 fa49 	bl	8007992 <USBD_CtlError>
            err++;
 8007500:	7afb      	ldrb	r3, [r7, #11]
 8007502:	3301      	adds	r3, #1
 8007504:	72fb      	strb	r3, [r7, #11]
          break;
 8007506:	e007      	b.n	8007518 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007508:	6839      	ldr	r1, [r7, #0]
 800750a:	6878      	ldr	r0, [r7, #4]
 800750c:	f000 fa41 	bl	8007992 <USBD_CtlError>
          err++;
 8007510:	7afb      	ldrb	r3, [r7, #11]
 8007512:	3301      	adds	r3, #1
 8007514:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007516:	bf00      	nop
      }
      break;
 8007518:	e037      	b.n	800758a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	7c1b      	ldrb	r3, [r3, #16]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d109      	bne.n	8007536 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007528:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800752a:	f107 0208 	add.w	r2, r7, #8
 800752e:	4610      	mov	r0, r2
 8007530:	4798      	blx	r3
 8007532:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007534:	e029      	b.n	800758a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007536:	6839      	ldr	r1, [r7, #0]
 8007538:	6878      	ldr	r0, [r7, #4]
 800753a:	f000 fa2a 	bl	8007992 <USBD_CtlError>
        err++;
 800753e:	7afb      	ldrb	r3, [r7, #11]
 8007540:	3301      	adds	r3, #1
 8007542:	72fb      	strb	r3, [r7, #11]
      break;
 8007544:	e021      	b.n	800758a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	7c1b      	ldrb	r3, [r3, #16]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d10d      	bne.n	800756a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007556:	f107 0208 	add.w	r2, r7, #8
 800755a:	4610      	mov	r0, r2
 800755c:	4798      	blx	r3
 800755e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	3301      	adds	r3, #1
 8007564:	2207      	movs	r2, #7
 8007566:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007568:	e00f      	b.n	800758a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800756a:	6839      	ldr	r1, [r7, #0]
 800756c:	6878      	ldr	r0, [r7, #4]
 800756e:	f000 fa10 	bl	8007992 <USBD_CtlError>
        err++;
 8007572:	7afb      	ldrb	r3, [r7, #11]
 8007574:	3301      	adds	r3, #1
 8007576:	72fb      	strb	r3, [r7, #11]
      break;
 8007578:	e007      	b.n	800758a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800757a:	6839      	ldr	r1, [r7, #0]
 800757c:	6878      	ldr	r0, [r7, #4]
 800757e:	f000 fa08 	bl	8007992 <USBD_CtlError>
      err++;
 8007582:	7afb      	ldrb	r3, [r7, #11]
 8007584:	3301      	adds	r3, #1
 8007586:	72fb      	strb	r3, [r7, #11]
      break;
 8007588:	bf00      	nop
  }

  if (err != 0U)
 800758a:	7afb      	ldrb	r3, [r7, #11]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d11e      	bne.n	80075ce <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	88db      	ldrh	r3, [r3, #6]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d016      	beq.n	80075c6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007598:	893b      	ldrh	r3, [r7, #8]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d00e      	beq.n	80075bc <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	88da      	ldrh	r2, [r3, #6]
 80075a2:	893b      	ldrh	r3, [r7, #8]
 80075a4:	4293      	cmp	r3, r2
 80075a6:	bf28      	it	cs
 80075a8:	4613      	movcs	r3, r2
 80075aa:	b29b      	uxth	r3, r3
 80075ac:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80075ae:	893b      	ldrh	r3, [r7, #8]
 80075b0:	461a      	mov	r2, r3
 80075b2:	68f9      	ldr	r1, [r7, #12]
 80075b4:	6878      	ldr	r0, [r7, #4]
 80075b6:	f000 fa5d 	bl	8007a74 <USBD_CtlSendData>
 80075ba:	e009      	b.n	80075d0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80075bc:	6839      	ldr	r1, [r7, #0]
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	f000 f9e7 	bl	8007992 <USBD_CtlError>
 80075c4:	e004      	b.n	80075d0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80075c6:	6878      	ldr	r0, [r7, #4]
 80075c8:	f000 faae 	bl	8007b28 <USBD_CtlSendStatus>
 80075cc:	e000      	b.n	80075d0 <USBD_GetDescriptor+0x2cc>
    return;
 80075ce:	bf00      	nop
  }
}
 80075d0:	3710      	adds	r7, #16
 80075d2:	46bd      	mov	sp, r7
 80075d4:	bd80      	pop	{r7, pc}
 80075d6:	bf00      	nop

080075d8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b084      	sub	sp, #16
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
 80075e0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	889b      	ldrh	r3, [r3, #4]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d131      	bne.n	800764e <USBD_SetAddress+0x76>
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	88db      	ldrh	r3, [r3, #6]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d12d      	bne.n	800764e <USBD_SetAddress+0x76>
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	885b      	ldrh	r3, [r3, #2]
 80075f6:	2b7f      	cmp	r3, #127	; 0x7f
 80075f8:	d829      	bhi.n	800764e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	885b      	ldrh	r3, [r3, #2]
 80075fe:	b2db      	uxtb	r3, r3
 8007600:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007604:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800760c:	b2db      	uxtb	r3, r3
 800760e:	2b03      	cmp	r3, #3
 8007610:	d104      	bne.n	800761c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007612:	6839      	ldr	r1, [r7, #0]
 8007614:	6878      	ldr	r0, [r7, #4]
 8007616:	f000 f9bc 	bl	8007992 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800761a:	e01d      	b.n	8007658 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	7bfa      	ldrb	r2, [r7, #15]
 8007620:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007624:	7bfb      	ldrb	r3, [r7, #15]
 8007626:	4619      	mov	r1, r3
 8007628:	6878      	ldr	r0, [r7, #4]
 800762a:	f003 fc9b 	bl	800af64 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f000 fa7a 	bl	8007b28 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007634:	7bfb      	ldrb	r3, [r7, #15]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d004      	beq.n	8007644 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2202      	movs	r2, #2
 800763e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007642:	e009      	b.n	8007658 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2201      	movs	r2, #1
 8007648:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800764c:	e004      	b.n	8007658 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800764e:	6839      	ldr	r1, [r7, #0]
 8007650:	6878      	ldr	r0, [r7, #4]
 8007652:	f000 f99e 	bl	8007992 <USBD_CtlError>
  }
}
 8007656:	bf00      	nop
 8007658:	bf00      	nop
 800765a:	3710      	adds	r7, #16
 800765c:	46bd      	mov	sp, r7
 800765e:	bd80      	pop	{r7, pc}

08007660 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b084      	sub	sp, #16
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
 8007668:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800766a:	2300      	movs	r3, #0
 800766c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	885b      	ldrh	r3, [r3, #2]
 8007672:	b2da      	uxtb	r2, r3
 8007674:	4b4e      	ldr	r3, [pc, #312]	; (80077b0 <USBD_SetConfig+0x150>)
 8007676:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007678:	4b4d      	ldr	r3, [pc, #308]	; (80077b0 <USBD_SetConfig+0x150>)
 800767a:	781b      	ldrb	r3, [r3, #0]
 800767c:	2b01      	cmp	r3, #1
 800767e:	d905      	bls.n	800768c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007680:	6839      	ldr	r1, [r7, #0]
 8007682:	6878      	ldr	r0, [r7, #4]
 8007684:	f000 f985 	bl	8007992 <USBD_CtlError>
    return USBD_FAIL;
 8007688:	2303      	movs	r3, #3
 800768a:	e08c      	b.n	80077a6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007692:	b2db      	uxtb	r3, r3
 8007694:	2b02      	cmp	r3, #2
 8007696:	d002      	beq.n	800769e <USBD_SetConfig+0x3e>
 8007698:	2b03      	cmp	r3, #3
 800769a:	d029      	beq.n	80076f0 <USBD_SetConfig+0x90>
 800769c:	e075      	b.n	800778a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800769e:	4b44      	ldr	r3, [pc, #272]	; (80077b0 <USBD_SetConfig+0x150>)
 80076a0:	781b      	ldrb	r3, [r3, #0]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d020      	beq.n	80076e8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80076a6:	4b42      	ldr	r3, [pc, #264]	; (80077b0 <USBD_SetConfig+0x150>)
 80076a8:	781b      	ldrb	r3, [r3, #0]
 80076aa:	461a      	mov	r2, r3
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80076b0:	4b3f      	ldr	r3, [pc, #252]	; (80077b0 <USBD_SetConfig+0x150>)
 80076b2:	781b      	ldrb	r3, [r3, #0]
 80076b4:	4619      	mov	r1, r3
 80076b6:	6878      	ldr	r0, [r7, #4]
 80076b8:	f7fe ffe1 	bl	800667e <USBD_SetClassConfig>
 80076bc:	4603      	mov	r3, r0
 80076be:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80076c0:	7bfb      	ldrb	r3, [r7, #15]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d008      	beq.n	80076d8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80076c6:	6839      	ldr	r1, [r7, #0]
 80076c8:	6878      	ldr	r0, [r7, #4]
 80076ca:	f000 f962 	bl	8007992 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2202      	movs	r2, #2
 80076d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80076d6:	e065      	b.n	80077a4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80076d8:	6878      	ldr	r0, [r7, #4]
 80076da:	f000 fa25 	bl	8007b28 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2203      	movs	r2, #3
 80076e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80076e6:	e05d      	b.n	80077a4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80076e8:	6878      	ldr	r0, [r7, #4]
 80076ea:	f000 fa1d 	bl	8007b28 <USBD_CtlSendStatus>
      break;
 80076ee:	e059      	b.n	80077a4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80076f0:	4b2f      	ldr	r3, [pc, #188]	; (80077b0 <USBD_SetConfig+0x150>)
 80076f2:	781b      	ldrb	r3, [r3, #0]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d112      	bne.n	800771e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2202      	movs	r2, #2
 80076fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007700:	4b2b      	ldr	r3, [pc, #172]	; (80077b0 <USBD_SetConfig+0x150>)
 8007702:	781b      	ldrb	r3, [r3, #0]
 8007704:	461a      	mov	r2, r3
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800770a:	4b29      	ldr	r3, [pc, #164]	; (80077b0 <USBD_SetConfig+0x150>)
 800770c:	781b      	ldrb	r3, [r3, #0]
 800770e:	4619      	mov	r1, r3
 8007710:	6878      	ldr	r0, [r7, #4]
 8007712:	f7fe ffd0 	bl	80066b6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007716:	6878      	ldr	r0, [r7, #4]
 8007718:	f000 fa06 	bl	8007b28 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800771c:	e042      	b.n	80077a4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800771e:	4b24      	ldr	r3, [pc, #144]	; (80077b0 <USBD_SetConfig+0x150>)
 8007720:	781b      	ldrb	r3, [r3, #0]
 8007722:	461a      	mov	r2, r3
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	685b      	ldr	r3, [r3, #4]
 8007728:	429a      	cmp	r2, r3
 800772a:	d02a      	beq.n	8007782 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	685b      	ldr	r3, [r3, #4]
 8007730:	b2db      	uxtb	r3, r3
 8007732:	4619      	mov	r1, r3
 8007734:	6878      	ldr	r0, [r7, #4]
 8007736:	f7fe ffbe 	bl	80066b6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800773a:	4b1d      	ldr	r3, [pc, #116]	; (80077b0 <USBD_SetConfig+0x150>)
 800773c:	781b      	ldrb	r3, [r3, #0]
 800773e:	461a      	mov	r2, r3
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007744:	4b1a      	ldr	r3, [pc, #104]	; (80077b0 <USBD_SetConfig+0x150>)
 8007746:	781b      	ldrb	r3, [r3, #0]
 8007748:	4619      	mov	r1, r3
 800774a:	6878      	ldr	r0, [r7, #4]
 800774c:	f7fe ff97 	bl	800667e <USBD_SetClassConfig>
 8007750:	4603      	mov	r3, r0
 8007752:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007754:	7bfb      	ldrb	r3, [r7, #15]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d00f      	beq.n	800777a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800775a:	6839      	ldr	r1, [r7, #0]
 800775c:	6878      	ldr	r0, [r7, #4]
 800775e:	f000 f918 	bl	8007992 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	685b      	ldr	r3, [r3, #4]
 8007766:	b2db      	uxtb	r3, r3
 8007768:	4619      	mov	r1, r3
 800776a:	6878      	ldr	r0, [r7, #4]
 800776c:	f7fe ffa3 	bl	80066b6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2202      	movs	r2, #2
 8007774:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007778:	e014      	b.n	80077a4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	f000 f9d4 	bl	8007b28 <USBD_CtlSendStatus>
      break;
 8007780:	e010      	b.n	80077a4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007782:	6878      	ldr	r0, [r7, #4]
 8007784:	f000 f9d0 	bl	8007b28 <USBD_CtlSendStatus>
      break;
 8007788:	e00c      	b.n	80077a4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800778a:	6839      	ldr	r1, [r7, #0]
 800778c:	6878      	ldr	r0, [r7, #4]
 800778e:	f000 f900 	bl	8007992 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007792:	4b07      	ldr	r3, [pc, #28]	; (80077b0 <USBD_SetConfig+0x150>)
 8007794:	781b      	ldrb	r3, [r3, #0]
 8007796:	4619      	mov	r1, r3
 8007798:	6878      	ldr	r0, [r7, #4]
 800779a:	f7fe ff8c 	bl	80066b6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800779e:	2303      	movs	r3, #3
 80077a0:	73fb      	strb	r3, [r7, #15]
      break;
 80077a2:	bf00      	nop
  }

  return ret;
 80077a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80077a6:	4618      	mov	r0, r3
 80077a8:	3710      	adds	r7, #16
 80077aa:	46bd      	mov	sp, r7
 80077ac:	bd80      	pop	{r7, pc}
 80077ae:	bf00      	nop
 80077b0:	20000344 	.word	0x20000344

080077b4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b082      	sub	sp, #8
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
 80077bc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	88db      	ldrh	r3, [r3, #6]
 80077c2:	2b01      	cmp	r3, #1
 80077c4:	d004      	beq.n	80077d0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80077c6:	6839      	ldr	r1, [r7, #0]
 80077c8:	6878      	ldr	r0, [r7, #4]
 80077ca:	f000 f8e2 	bl	8007992 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80077ce:	e023      	b.n	8007818 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077d6:	b2db      	uxtb	r3, r3
 80077d8:	2b02      	cmp	r3, #2
 80077da:	dc02      	bgt.n	80077e2 <USBD_GetConfig+0x2e>
 80077dc:	2b00      	cmp	r3, #0
 80077de:	dc03      	bgt.n	80077e8 <USBD_GetConfig+0x34>
 80077e0:	e015      	b.n	800780e <USBD_GetConfig+0x5a>
 80077e2:	2b03      	cmp	r3, #3
 80077e4:	d00b      	beq.n	80077fe <USBD_GetConfig+0x4a>
 80077e6:	e012      	b.n	800780e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2200      	movs	r2, #0
 80077ec:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	3308      	adds	r3, #8
 80077f2:	2201      	movs	r2, #1
 80077f4:	4619      	mov	r1, r3
 80077f6:	6878      	ldr	r0, [r7, #4]
 80077f8:	f000 f93c 	bl	8007a74 <USBD_CtlSendData>
        break;
 80077fc:	e00c      	b.n	8007818 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	3304      	adds	r3, #4
 8007802:	2201      	movs	r2, #1
 8007804:	4619      	mov	r1, r3
 8007806:	6878      	ldr	r0, [r7, #4]
 8007808:	f000 f934 	bl	8007a74 <USBD_CtlSendData>
        break;
 800780c:	e004      	b.n	8007818 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800780e:	6839      	ldr	r1, [r7, #0]
 8007810:	6878      	ldr	r0, [r7, #4]
 8007812:	f000 f8be 	bl	8007992 <USBD_CtlError>
        break;
 8007816:	bf00      	nop
}
 8007818:	bf00      	nop
 800781a:	3708      	adds	r7, #8
 800781c:	46bd      	mov	sp, r7
 800781e:	bd80      	pop	{r7, pc}

08007820 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b082      	sub	sp, #8
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
 8007828:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007830:	b2db      	uxtb	r3, r3
 8007832:	3b01      	subs	r3, #1
 8007834:	2b02      	cmp	r3, #2
 8007836:	d81e      	bhi.n	8007876 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	88db      	ldrh	r3, [r3, #6]
 800783c:	2b02      	cmp	r3, #2
 800783e:	d004      	beq.n	800784a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007840:	6839      	ldr	r1, [r7, #0]
 8007842:	6878      	ldr	r0, [r7, #4]
 8007844:	f000 f8a5 	bl	8007992 <USBD_CtlError>
        break;
 8007848:	e01a      	b.n	8007880 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	2201      	movs	r2, #1
 800784e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007856:	2b00      	cmp	r3, #0
 8007858:	d005      	beq.n	8007866 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	68db      	ldr	r3, [r3, #12]
 800785e:	f043 0202 	orr.w	r2, r3, #2
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	330c      	adds	r3, #12
 800786a:	2202      	movs	r2, #2
 800786c:	4619      	mov	r1, r3
 800786e:	6878      	ldr	r0, [r7, #4]
 8007870:	f000 f900 	bl	8007a74 <USBD_CtlSendData>
      break;
 8007874:	e004      	b.n	8007880 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007876:	6839      	ldr	r1, [r7, #0]
 8007878:	6878      	ldr	r0, [r7, #4]
 800787a:	f000 f88a 	bl	8007992 <USBD_CtlError>
      break;
 800787e:	bf00      	nop
  }
}
 8007880:	bf00      	nop
 8007882:	3708      	adds	r7, #8
 8007884:	46bd      	mov	sp, r7
 8007886:	bd80      	pop	{r7, pc}

08007888 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b082      	sub	sp, #8
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
 8007890:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	885b      	ldrh	r3, [r3, #2]
 8007896:	2b01      	cmp	r3, #1
 8007898:	d107      	bne.n	80078aa <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2201      	movs	r2, #1
 800789e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	f000 f940 	bl	8007b28 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80078a8:	e013      	b.n	80078d2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	885b      	ldrh	r3, [r3, #2]
 80078ae:	2b02      	cmp	r3, #2
 80078b0:	d10b      	bne.n	80078ca <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80078b2:	683b      	ldr	r3, [r7, #0]
 80078b4:	889b      	ldrh	r3, [r3, #4]
 80078b6:	0a1b      	lsrs	r3, r3, #8
 80078b8:	b29b      	uxth	r3, r3
 80078ba:	b2da      	uxtb	r2, r3
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80078c2:	6878      	ldr	r0, [r7, #4]
 80078c4:	f000 f930 	bl	8007b28 <USBD_CtlSendStatus>
}
 80078c8:	e003      	b.n	80078d2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80078ca:	6839      	ldr	r1, [r7, #0]
 80078cc:	6878      	ldr	r0, [r7, #4]
 80078ce:	f000 f860 	bl	8007992 <USBD_CtlError>
}
 80078d2:	bf00      	nop
 80078d4:	3708      	adds	r7, #8
 80078d6:	46bd      	mov	sp, r7
 80078d8:	bd80      	pop	{r7, pc}

080078da <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078da:	b580      	push	{r7, lr}
 80078dc:	b082      	sub	sp, #8
 80078de:	af00      	add	r7, sp, #0
 80078e0:	6078      	str	r0, [r7, #4]
 80078e2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078ea:	b2db      	uxtb	r3, r3
 80078ec:	3b01      	subs	r3, #1
 80078ee:	2b02      	cmp	r3, #2
 80078f0:	d80b      	bhi.n	800790a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	885b      	ldrh	r3, [r3, #2]
 80078f6:	2b01      	cmp	r3, #1
 80078f8:	d10c      	bne.n	8007914 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2200      	movs	r2, #0
 80078fe:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007902:	6878      	ldr	r0, [r7, #4]
 8007904:	f000 f910 	bl	8007b28 <USBD_CtlSendStatus>
      }
      break;
 8007908:	e004      	b.n	8007914 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800790a:	6839      	ldr	r1, [r7, #0]
 800790c:	6878      	ldr	r0, [r7, #4]
 800790e:	f000 f840 	bl	8007992 <USBD_CtlError>
      break;
 8007912:	e000      	b.n	8007916 <USBD_ClrFeature+0x3c>
      break;
 8007914:	bf00      	nop
  }
}
 8007916:	bf00      	nop
 8007918:	3708      	adds	r7, #8
 800791a:	46bd      	mov	sp, r7
 800791c:	bd80      	pop	{r7, pc}

0800791e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800791e:	b580      	push	{r7, lr}
 8007920:	b084      	sub	sp, #16
 8007922:	af00      	add	r7, sp, #0
 8007924:	6078      	str	r0, [r7, #4]
 8007926:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	781a      	ldrb	r2, [r3, #0]
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	3301      	adds	r3, #1
 8007938:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	781a      	ldrb	r2, [r3, #0]
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	3301      	adds	r3, #1
 8007946:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007948:	68f8      	ldr	r0, [r7, #12]
 800794a:	f7ff fa41 	bl	8006dd0 <SWAPBYTE>
 800794e:	4603      	mov	r3, r0
 8007950:	461a      	mov	r2, r3
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	3301      	adds	r3, #1
 800795a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	3301      	adds	r3, #1
 8007960:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007962:	68f8      	ldr	r0, [r7, #12]
 8007964:	f7ff fa34 	bl	8006dd0 <SWAPBYTE>
 8007968:	4603      	mov	r3, r0
 800796a:	461a      	mov	r2, r3
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	3301      	adds	r3, #1
 8007974:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	3301      	adds	r3, #1
 800797a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800797c:	68f8      	ldr	r0, [r7, #12]
 800797e:	f7ff fa27 	bl	8006dd0 <SWAPBYTE>
 8007982:	4603      	mov	r3, r0
 8007984:	461a      	mov	r2, r3
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	80da      	strh	r2, [r3, #6]
}
 800798a:	bf00      	nop
 800798c:	3710      	adds	r7, #16
 800798e:	46bd      	mov	sp, r7
 8007990:	bd80      	pop	{r7, pc}

08007992 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007992:	b580      	push	{r7, lr}
 8007994:	b082      	sub	sp, #8
 8007996:	af00      	add	r7, sp, #0
 8007998:	6078      	str	r0, [r7, #4]
 800799a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800799c:	2180      	movs	r1, #128	; 0x80
 800799e:	6878      	ldr	r0, [r7, #4]
 80079a0:	f003 fa76 	bl	800ae90 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80079a4:	2100      	movs	r1, #0
 80079a6:	6878      	ldr	r0, [r7, #4]
 80079a8:	f003 fa72 	bl	800ae90 <USBD_LL_StallEP>
}
 80079ac:	bf00      	nop
 80079ae:	3708      	adds	r7, #8
 80079b0:	46bd      	mov	sp, r7
 80079b2:	bd80      	pop	{r7, pc}

080079b4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b086      	sub	sp, #24
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	60f8      	str	r0, [r7, #12]
 80079bc:	60b9      	str	r1, [r7, #8]
 80079be:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80079c0:	2300      	movs	r3, #0
 80079c2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d036      	beq.n	8007a38 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80079ce:	6938      	ldr	r0, [r7, #16]
 80079d0:	f000 f836 	bl	8007a40 <USBD_GetLen>
 80079d4:	4603      	mov	r3, r0
 80079d6:	3301      	adds	r3, #1
 80079d8:	b29b      	uxth	r3, r3
 80079da:	005b      	lsls	r3, r3, #1
 80079dc:	b29a      	uxth	r2, r3
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80079e2:	7dfb      	ldrb	r3, [r7, #23]
 80079e4:	68ba      	ldr	r2, [r7, #8]
 80079e6:	4413      	add	r3, r2
 80079e8:	687a      	ldr	r2, [r7, #4]
 80079ea:	7812      	ldrb	r2, [r2, #0]
 80079ec:	701a      	strb	r2, [r3, #0]
  idx++;
 80079ee:	7dfb      	ldrb	r3, [r7, #23]
 80079f0:	3301      	adds	r3, #1
 80079f2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80079f4:	7dfb      	ldrb	r3, [r7, #23]
 80079f6:	68ba      	ldr	r2, [r7, #8]
 80079f8:	4413      	add	r3, r2
 80079fa:	2203      	movs	r2, #3
 80079fc:	701a      	strb	r2, [r3, #0]
  idx++;
 80079fe:	7dfb      	ldrb	r3, [r7, #23]
 8007a00:	3301      	adds	r3, #1
 8007a02:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007a04:	e013      	b.n	8007a2e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007a06:	7dfb      	ldrb	r3, [r7, #23]
 8007a08:	68ba      	ldr	r2, [r7, #8]
 8007a0a:	4413      	add	r3, r2
 8007a0c:	693a      	ldr	r2, [r7, #16]
 8007a0e:	7812      	ldrb	r2, [r2, #0]
 8007a10:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007a12:	693b      	ldr	r3, [r7, #16]
 8007a14:	3301      	adds	r3, #1
 8007a16:	613b      	str	r3, [r7, #16]
    idx++;
 8007a18:	7dfb      	ldrb	r3, [r7, #23]
 8007a1a:	3301      	adds	r3, #1
 8007a1c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007a1e:	7dfb      	ldrb	r3, [r7, #23]
 8007a20:	68ba      	ldr	r2, [r7, #8]
 8007a22:	4413      	add	r3, r2
 8007a24:	2200      	movs	r2, #0
 8007a26:	701a      	strb	r2, [r3, #0]
    idx++;
 8007a28:	7dfb      	ldrb	r3, [r7, #23]
 8007a2a:	3301      	adds	r3, #1
 8007a2c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007a2e:	693b      	ldr	r3, [r7, #16]
 8007a30:	781b      	ldrb	r3, [r3, #0]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d1e7      	bne.n	8007a06 <USBD_GetString+0x52>
 8007a36:	e000      	b.n	8007a3a <USBD_GetString+0x86>
    return;
 8007a38:	bf00      	nop
  }
}
 8007a3a:	3718      	adds	r7, #24
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	bd80      	pop	{r7, pc}

08007a40 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007a40:	b480      	push	{r7}
 8007a42:	b085      	sub	sp, #20
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007a48:	2300      	movs	r3, #0
 8007a4a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007a50:	e005      	b.n	8007a5e <USBD_GetLen+0x1e>
  {
    len++;
 8007a52:	7bfb      	ldrb	r3, [r7, #15]
 8007a54:	3301      	adds	r3, #1
 8007a56:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007a58:	68bb      	ldr	r3, [r7, #8]
 8007a5a:	3301      	adds	r3, #1
 8007a5c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007a5e:	68bb      	ldr	r3, [r7, #8]
 8007a60:	781b      	ldrb	r3, [r3, #0]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d1f5      	bne.n	8007a52 <USBD_GetLen+0x12>
  }

  return len;
 8007a66:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a68:	4618      	mov	r0, r3
 8007a6a:	3714      	adds	r7, #20
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a72:	4770      	bx	lr

08007a74 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b084      	sub	sp, #16
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	60f8      	str	r0, [r7, #12]
 8007a7c:	60b9      	str	r1, [r7, #8]
 8007a7e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	2202      	movs	r2, #2
 8007a84:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	687a      	ldr	r2, [r7, #4]
 8007a8c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	687a      	ldr	r2, [r7, #4]
 8007a92:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	68ba      	ldr	r2, [r7, #8]
 8007a98:	2100      	movs	r1, #0
 8007a9a:	68f8      	ldr	r0, [r7, #12]
 8007a9c:	f003 fa81 	bl	800afa2 <USBD_LL_Transmit>

  return USBD_OK;
 8007aa0:	2300      	movs	r3, #0
}
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	3710      	adds	r7, #16
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	bd80      	pop	{r7, pc}

08007aaa <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007aaa:	b580      	push	{r7, lr}
 8007aac:	b084      	sub	sp, #16
 8007aae:	af00      	add	r7, sp, #0
 8007ab0:	60f8      	str	r0, [r7, #12]
 8007ab2:	60b9      	str	r1, [r7, #8]
 8007ab4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	68ba      	ldr	r2, [r7, #8]
 8007aba:	2100      	movs	r1, #0
 8007abc:	68f8      	ldr	r0, [r7, #12]
 8007abe:	f003 fa70 	bl	800afa2 <USBD_LL_Transmit>

  return USBD_OK;
 8007ac2:	2300      	movs	r3, #0
}
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	3710      	adds	r7, #16
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	bd80      	pop	{r7, pc}

08007acc <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007acc:	b580      	push	{r7, lr}
 8007ace:	b084      	sub	sp, #16
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	60f8      	str	r0, [r7, #12]
 8007ad4:	60b9      	str	r1, [r7, #8]
 8007ad6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	2203      	movs	r2, #3
 8007adc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	687a      	ldr	r2, [r7, #4]
 8007ae4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	687a      	ldr	r2, [r7, #4]
 8007aec:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	68ba      	ldr	r2, [r7, #8]
 8007af4:	2100      	movs	r1, #0
 8007af6:	68f8      	ldr	r0, [r7, #12]
 8007af8:	f003 fa74 	bl	800afe4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007afc:	2300      	movs	r3, #0
}
 8007afe:	4618      	mov	r0, r3
 8007b00:	3710      	adds	r7, #16
 8007b02:	46bd      	mov	sp, r7
 8007b04:	bd80      	pop	{r7, pc}

08007b06 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007b06:	b580      	push	{r7, lr}
 8007b08:	b084      	sub	sp, #16
 8007b0a:	af00      	add	r7, sp, #0
 8007b0c:	60f8      	str	r0, [r7, #12]
 8007b0e:	60b9      	str	r1, [r7, #8]
 8007b10:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	68ba      	ldr	r2, [r7, #8]
 8007b16:	2100      	movs	r1, #0
 8007b18:	68f8      	ldr	r0, [r7, #12]
 8007b1a:	f003 fa63 	bl	800afe4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007b1e:	2300      	movs	r3, #0
}
 8007b20:	4618      	mov	r0, r3
 8007b22:	3710      	adds	r7, #16
 8007b24:	46bd      	mov	sp, r7
 8007b26:	bd80      	pop	{r7, pc}

08007b28 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b082      	sub	sp, #8
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2204      	movs	r2, #4
 8007b34:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007b38:	2300      	movs	r3, #0
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	2100      	movs	r1, #0
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	f003 fa2f 	bl	800afa2 <USBD_LL_Transmit>

  return USBD_OK;
 8007b44:	2300      	movs	r3, #0
}
 8007b46:	4618      	mov	r0, r3
 8007b48:	3708      	adds	r7, #8
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	bd80      	pop	{r7, pc}

08007b4e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007b4e:	b580      	push	{r7, lr}
 8007b50:	b082      	sub	sp, #8
 8007b52:	af00      	add	r7, sp, #0
 8007b54:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2205      	movs	r2, #5
 8007b5a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007b5e:	2300      	movs	r3, #0
 8007b60:	2200      	movs	r2, #0
 8007b62:	2100      	movs	r1, #0
 8007b64:	6878      	ldr	r0, [r7, #4]
 8007b66:	f003 fa3d 	bl	800afe4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007b6a:	2300      	movs	r3, #0
}
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	3708      	adds	r7, #8
 8007b70:	46bd      	mov	sp, r7
 8007b72:	bd80      	pop	{r7, pc}

08007b74 <__NVIC_SetPriority>:
{
 8007b74:	b480      	push	{r7}
 8007b76:	b083      	sub	sp, #12
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	4603      	mov	r3, r0
 8007b7c:	6039      	str	r1, [r7, #0]
 8007b7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007b80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	db0a      	blt.n	8007b9e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	b2da      	uxtb	r2, r3
 8007b8c:	490c      	ldr	r1, [pc, #48]	; (8007bc0 <__NVIC_SetPriority+0x4c>)
 8007b8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b92:	0112      	lsls	r2, r2, #4
 8007b94:	b2d2      	uxtb	r2, r2
 8007b96:	440b      	add	r3, r1
 8007b98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007b9c:	e00a      	b.n	8007bb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	b2da      	uxtb	r2, r3
 8007ba2:	4908      	ldr	r1, [pc, #32]	; (8007bc4 <__NVIC_SetPriority+0x50>)
 8007ba4:	79fb      	ldrb	r3, [r7, #7]
 8007ba6:	f003 030f 	and.w	r3, r3, #15
 8007baa:	3b04      	subs	r3, #4
 8007bac:	0112      	lsls	r2, r2, #4
 8007bae:	b2d2      	uxtb	r2, r2
 8007bb0:	440b      	add	r3, r1
 8007bb2:	761a      	strb	r2, [r3, #24]
}
 8007bb4:	bf00      	nop
 8007bb6:	370c      	adds	r7, #12
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bbe:	4770      	bx	lr
 8007bc0:	e000e100 	.word	0xe000e100
 8007bc4:	e000ed00 	.word	0xe000ed00

08007bc8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007bcc:	4b05      	ldr	r3, [pc, #20]	; (8007be4 <SysTick_Handler+0x1c>)
 8007bce:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007bd0:	f001 fd28 	bl	8009624 <xTaskGetSchedulerState>
 8007bd4:	4603      	mov	r3, r0
 8007bd6:	2b01      	cmp	r3, #1
 8007bd8:	d001      	beq.n	8007bde <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007bda:	f002 fb0d 	bl	800a1f8 <xPortSysTickHandler>
  }
}
 8007bde:	bf00      	nop
 8007be0:	bd80      	pop	{r7, pc}
 8007be2:	bf00      	nop
 8007be4:	e000e010 	.word	0xe000e010

08007be8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007be8:	b580      	push	{r7, lr}
 8007bea:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007bec:	2100      	movs	r1, #0
 8007bee:	f06f 0004 	mvn.w	r0, #4
 8007bf2:	f7ff ffbf 	bl	8007b74 <__NVIC_SetPriority>
#endif
}
 8007bf6:	bf00      	nop
 8007bf8:	bd80      	pop	{r7, pc}
	...

08007bfc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007bfc:	b480      	push	{r7}
 8007bfe:	b083      	sub	sp, #12
 8007c00:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007c02:	f3ef 8305 	mrs	r3, IPSR
 8007c06:	603b      	str	r3, [r7, #0]
  return(result);
 8007c08:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d003      	beq.n	8007c16 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007c0e:	f06f 0305 	mvn.w	r3, #5
 8007c12:	607b      	str	r3, [r7, #4]
 8007c14:	e00c      	b.n	8007c30 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007c16:	4b0a      	ldr	r3, [pc, #40]	; (8007c40 <osKernelInitialize+0x44>)
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d105      	bne.n	8007c2a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007c1e:	4b08      	ldr	r3, [pc, #32]	; (8007c40 <osKernelInitialize+0x44>)
 8007c20:	2201      	movs	r2, #1
 8007c22:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007c24:	2300      	movs	r3, #0
 8007c26:	607b      	str	r3, [r7, #4]
 8007c28:	e002      	b.n	8007c30 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007c2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007c2e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007c30:	687b      	ldr	r3, [r7, #4]
}
 8007c32:	4618      	mov	r0, r3
 8007c34:	370c      	adds	r7, #12
 8007c36:	46bd      	mov	sp, r7
 8007c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3c:	4770      	bx	lr
 8007c3e:	bf00      	nop
 8007c40:	20000348 	.word	0x20000348

08007c44 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b082      	sub	sp, #8
 8007c48:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007c4a:	f3ef 8305 	mrs	r3, IPSR
 8007c4e:	603b      	str	r3, [r7, #0]
  return(result);
 8007c50:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d003      	beq.n	8007c5e <osKernelStart+0x1a>
    stat = osErrorISR;
 8007c56:	f06f 0305 	mvn.w	r3, #5
 8007c5a:	607b      	str	r3, [r7, #4]
 8007c5c:	e010      	b.n	8007c80 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007c5e:	4b0b      	ldr	r3, [pc, #44]	; (8007c8c <osKernelStart+0x48>)
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	2b01      	cmp	r3, #1
 8007c64:	d109      	bne.n	8007c7a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007c66:	f7ff ffbf 	bl	8007be8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007c6a:	4b08      	ldr	r3, [pc, #32]	; (8007c8c <osKernelStart+0x48>)
 8007c6c:	2202      	movs	r2, #2
 8007c6e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007c70:	f001 f87c 	bl	8008d6c <vTaskStartScheduler>
      stat = osOK;
 8007c74:	2300      	movs	r3, #0
 8007c76:	607b      	str	r3, [r7, #4]
 8007c78:	e002      	b.n	8007c80 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007c7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007c7e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007c80:	687b      	ldr	r3, [r7, #4]
}
 8007c82:	4618      	mov	r0, r3
 8007c84:	3708      	adds	r7, #8
 8007c86:	46bd      	mov	sp, r7
 8007c88:	bd80      	pop	{r7, pc}
 8007c8a:	bf00      	nop
 8007c8c:	20000348 	.word	0x20000348

08007c90 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b08e      	sub	sp, #56	; 0x38
 8007c94:	af04      	add	r7, sp, #16
 8007c96:	60f8      	str	r0, [r7, #12]
 8007c98:	60b9      	str	r1, [r7, #8]
 8007c9a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007ca0:	f3ef 8305 	mrs	r3, IPSR
 8007ca4:	617b      	str	r3, [r7, #20]
  return(result);
 8007ca6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d17e      	bne.n	8007daa <osThreadNew+0x11a>
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d07b      	beq.n	8007daa <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007cb2:	2380      	movs	r3, #128	; 0x80
 8007cb4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007cb6:	2318      	movs	r3, #24
 8007cb8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007cba:	2300      	movs	r3, #0
 8007cbc:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8007cbe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007cc2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d045      	beq.n	8007d56 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d002      	beq.n	8007cd8 <osThreadNew+0x48>
        name = attr->name;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	699b      	ldr	r3, [r3, #24]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d002      	beq.n	8007ce6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	699b      	ldr	r3, [r3, #24]
 8007ce4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007ce6:	69fb      	ldr	r3, [r7, #28]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d008      	beq.n	8007cfe <osThreadNew+0x6e>
 8007cec:	69fb      	ldr	r3, [r7, #28]
 8007cee:	2b38      	cmp	r3, #56	; 0x38
 8007cf0:	d805      	bhi.n	8007cfe <osThreadNew+0x6e>
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	685b      	ldr	r3, [r3, #4]
 8007cf6:	f003 0301 	and.w	r3, r3, #1
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d001      	beq.n	8007d02 <osThreadNew+0x72>
        return (NULL);
 8007cfe:	2300      	movs	r3, #0
 8007d00:	e054      	b.n	8007dac <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	695b      	ldr	r3, [r3, #20]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d003      	beq.n	8007d12 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	695b      	ldr	r3, [r3, #20]
 8007d0e:	089b      	lsrs	r3, r3, #2
 8007d10:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	689b      	ldr	r3, [r3, #8]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d00e      	beq.n	8007d38 <osThreadNew+0xa8>
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	68db      	ldr	r3, [r3, #12]
 8007d1e:	2ba7      	cmp	r3, #167	; 0xa7
 8007d20:	d90a      	bls.n	8007d38 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d006      	beq.n	8007d38 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	695b      	ldr	r3, [r3, #20]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d002      	beq.n	8007d38 <osThreadNew+0xa8>
        mem = 1;
 8007d32:	2301      	movs	r3, #1
 8007d34:	61bb      	str	r3, [r7, #24]
 8007d36:	e010      	b.n	8007d5a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	689b      	ldr	r3, [r3, #8]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d10c      	bne.n	8007d5a <osThreadNew+0xca>
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	68db      	ldr	r3, [r3, #12]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d108      	bne.n	8007d5a <osThreadNew+0xca>
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	691b      	ldr	r3, [r3, #16]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d104      	bne.n	8007d5a <osThreadNew+0xca>
          mem = 0;
 8007d50:	2300      	movs	r3, #0
 8007d52:	61bb      	str	r3, [r7, #24]
 8007d54:	e001      	b.n	8007d5a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007d56:	2300      	movs	r3, #0
 8007d58:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007d5a:	69bb      	ldr	r3, [r7, #24]
 8007d5c:	2b01      	cmp	r3, #1
 8007d5e:	d110      	bne.n	8007d82 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007d64:	687a      	ldr	r2, [r7, #4]
 8007d66:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007d68:	9202      	str	r2, [sp, #8]
 8007d6a:	9301      	str	r3, [sp, #4]
 8007d6c:	69fb      	ldr	r3, [r7, #28]
 8007d6e:	9300      	str	r3, [sp, #0]
 8007d70:	68bb      	ldr	r3, [r7, #8]
 8007d72:	6a3a      	ldr	r2, [r7, #32]
 8007d74:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007d76:	68f8      	ldr	r0, [r7, #12]
 8007d78:	f000 fe0c 	bl	8008994 <xTaskCreateStatic>
 8007d7c:	4603      	mov	r3, r0
 8007d7e:	613b      	str	r3, [r7, #16]
 8007d80:	e013      	b.n	8007daa <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007d82:	69bb      	ldr	r3, [r7, #24]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d110      	bne.n	8007daa <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007d88:	6a3b      	ldr	r3, [r7, #32]
 8007d8a:	b29a      	uxth	r2, r3
 8007d8c:	f107 0310 	add.w	r3, r7, #16
 8007d90:	9301      	str	r3, [sp, #4]
 8007d92:	69fb      	ldr	r3, [r7, #28]
 8007d94:	9300      	str	r3, [sp, #0]
 8007d96:	68bb      	ldr	r3, [r7, #8]
 8007d98:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007d9a:	68f8      	ldr	r0, [r7, #12]
 8007d9c:	f000 fe57 	bl	8008a4e <xTaskCreate>
 8007da0:	4603      	mov	r3, r0
 8007da2:	2b01      	cmp	r3, #1
 8007da4:	d001      	beq.n	8007daa <osThreadNew+0x11a>
            hTask = NULL;
 8007da6:	2300      	movs	r3, #0
 8007da8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007daa:	693b      	ldr	r3, [r7, #16]
}
 8007dac:	4618      	mov	r0, r3
 8007dae:	3728      	adds	r7, #40	; 0x28
 8007db0:	46bd      	mov	sp, r7
 8007db2:	bd80      	pop	{r7, pc}

08007db4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b084      	sub	sp, #16
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007dbc:	f3ef 8305 	mrs	r3, IPSR
 8007dc0:	60bb      	str	r3, [r7, #8]
  return(result);
 8007dc2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d003      	beq.n	8007dd0 <osDelay+0x1c>
    stat = osErrorISR;
 8007dc8:	f06f 0305 	mvn.w	r3, #5
 8007dcc:	60fb      	str	r3, [r7, #12]
 8007dce:	e007      	b.n	8007de0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d002      	beq.n	8007de0 <osDelay+0x2c>
      vTaskDelay(ticks);
 8007dda:	6878      	ldr	r0, [r7, #4]
 8007ddc:	f000 ff92 	bl	8008d04 <vTaskDelay>
    }
  }

  return (stat);
 8007de0:	68fb      	ldr	r3, [r7, #12]
}
 8007de2:	4618      	mov	r0, r3
 8007de4:	3710      	adds	r7, #16
 8007de6:	46bd      	mov	sp, r7
 8007de8:	bd80      	pop	{r7, pc}
	...

08007dec <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007dec:	b480      	push	{r7}
 8007dee:	b085      	sub	sp, #20
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	60f8      	str	r0, [r7, #12]
 8007df4:	60b9      	str	r1, [r7, #8]
 8007df6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	4a07      	ldr	r2, [pc, #28]	; (8007e18 <vApplicationGetIdleTaskMemory+0x2c>)
 8007dfc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007dfe:	68bb      	ldr	r3, [r7, #8]
 8007e00:	4a06      	ldr	r2, [pc, #24]	; (8007e1c <vApplicationGetIdleTaskMemory+0x30>)
 8007e02:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2280      	movs	r2, #128	; 0x80
 8007e08:	601a      	str	r2, [r3, #0]
}
 8007e0a:	bf00      	nop
 8007e0c:	3714      	adds	r7, #20
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e14:	4770      	bx	lr
 8007e16:	bf00      	nop
 8007e18:	2000034c 	.word	0x2000034c
 8007e1c:	200003f4 	.word	0x200003f4

08007e20 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007e20:	b480      	push	{r7}
 8007e22:	b085      	sub	sp, #20
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	60f8      	str	r0, [r7, #12]
 8007e28:	60b9      	str	r1, [r7, #8]
 8007e2a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	4a07      	ldr	r2, [pc, #28]	; (8007e4c <vApplicationGetTimerTaskMemory+0x2c>)
 8007e30:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007e32:	68bb      	ldr	r3, [r7, #8]
 8007e34:	4a06      	ldr	r2, [pc, #24]	; (8007e50 <vApplicationGetTimerTaskMemory+0x30>)
 8007e36:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007e3e:	601a      	str	r2, [r3, #0]
}
 8007e40:	bf00      	nop
 8007e42:	3714      	adds	r7, #20
 8007e44:	46bd      	mov	sp, r7
 8007e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4a:	4770      	bx	lr
 8007e4c:	200005f4 	.word	0x200005f4
 8007e50:	2000069c 	.word	0x2000069c

08007e54 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007e54:	b480      	push	{r7}
 8007e56:	b083      	sub	sp, #12
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	f103 0208 	add.w	r2, r3, #8
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007e6c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	f103 0208 	add.w	r2, r3, #8
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	f103 0208 	add.w	r2, r3, #8
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2200      	movs	r2, #0
 8007e86:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007e88:	bf00      	nop
 8007e8a:	370c      	adds	r7, #12
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e92:	4770      	bx	lr

08007e94 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007e94:	b480      	push	{r7}
 8007e96:	b083      	sub	sp, #12
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007ea2:	bf00      	nop
 8007ea4:	370c      	adds	r7, #12
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eac:	4770      	bx	lr

08007eae <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007eae:	b480      	push	{r7}
 8007eb0:	b085      	sub	sp, #20
 8007eb2:	af00      	add	r7, sp, #0
 8007eb4:	6078      	str	r0, [r7, #4]
 8007eb6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	685b      	ldr	r3, [r3, #4]
 8007ebc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	68fa      	ldr	r2, [r7, #12]
 8007ec2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	689a      	ldr	r2, [r3, #8]
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	689b      	ldr	r3, [r3, #8]
 8007ed0:	683a      	ldr	r2, [r7, #0]
 8007ed2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	683a      	ldr	r2, [r7, #0]
 8007ed8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	687a      	ldr	r2, [r7, #4]
 8007ede:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	1c5a      	adds	r2, r3, #1
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	601a      	str	r2, [r3, #0]
}
 8007eea:	bf00      	nop
 8007eec:	3714      	adds	r7, #20
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef4:	4770      	bx	lr

08007ef6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007ef6:	b480      	push	{r7}
 8007ef8:	b085      	sub	sp, #20
 8007efa:	af00      	add	r7, sp, #0
 8007efc:	6078      	str	r0, [r7, #4]
 8007efe:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007f06:	68bb      	ldr	r3, [r7, #8]
 8007f08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007f0c:	d103      	bne.n	8007f16 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	691b      	ldr	r3, [r3, #16]
 8007f12:	60fb      	str	r3, [r7, #12]
 8007f14:	e00c      	b.n	8007f30 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	3308      	adds	r3, #8
 8007f1a:	60fb      	str	r3, [r7, #12]
 8007f1c:	e002      	b.n	8007f24 <vListInsert+0x2e>
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	685b      	ldr	r3, [r3, #4]
 8007f22:	60fb      	str	r3, [r7, #12]
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	685b      	ldr	r3, [r3, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	68ba      	ldr	r2, [r7, #8]
 8007f2c:	429a      	cmp	r2, r3
 8007f2e:	d2f6      	bcs.n	8007f1e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	685a      	ldr	r2, [r3, #4]
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007f38:	683b      	ldr	r3, [r7, #0]
 8007f3a:	685b      	ldr	r3, [r3, #4]
 8007f3c:	683a      	ldr	r2, [r7, #0]
 8007f3e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	68fa      	ldr	r2, [r7, #12]
 8007f44:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	683a      	ldr	r2, [r7, #0]
 8007f4a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	687a      	ldr	r2, [r7, #4]
 8007f50:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	1c5a      	adds	r2, r3, #1
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	601a      	str	r2, [r3, #0]
}
 8007f5c:	bf00      	nop
 8007f5e:	3714      	adds	r7, #20
 8007f60:	46bd      	mov	sp, r7
 8007f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f66:	4770      	bx	lr

08007f68 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007f68:	b480      	push	{r7}
 8007f6a:	b085      	sub	sp, #20
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	691b      	ldr	r3, [r3, #16]
 8007f74:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	685b      	ldr	r3, [r3, #4]
 8007f7a:	687a      	ldr	r2, [r7, #4]
 8007f7c:	6892      	ldr	r2, [r2, #8]
 8007f7e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	689b      	ldr	r3, [r3, #8]
 8007f84:	687a      	ldr	r2, [r7, #4]
 8007f86:	6852      	ldr	r2, [r2, #4]
 8007f88:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	685b      	ldr	r3, [r3, #4]
 8007f8e:	687a      	ldr	r2, [r7, #4]
 8007f90:	429a      	cmp	r2, r3
 8007f92:	d103      	bne.n	8007f9c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	689a      	ldr	r2, [r3, #8]
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	1e5a      	subs	r2, r3, #1
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	681b      	ldr	r3, [r3, #0]
}
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	3714      	adds	r7, #20
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fba:	4770      	bx	lr

08007fbc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b084      	sub	sp, #16
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
 8007fc4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d10a      	bne.n	8007fe6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fd4:	f383 8811 	msr	BASEPRI, r3
 8007fd8:	f3bf 8f6f 	isb	sy
 8007fdc:	f3bf 8f4f 	dsb	sy
 8007fe0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007fe2:	bf00      	nop
 8007fe4:	e7fe      	b.n	8007fe4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007fe6:	f002 f875 	bl	800a0d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	681a      	ldr	r2, [r3, #0]
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ff2:	68f9      	ldr	r1, [r7, #12]
 8007ff4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007ff6:	fb01 f303 	mul.w	r3, r1, r3
 8007ffa:	441a      	add	r2, r3
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	2200      	movs	r2, #0
 8008004:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	681a      	ldr	r2, [r3, #0]
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	681a      	ldr	r2, [r3, #0]
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008016:	3b01      	subs	r3, #1
 8008018:	68f9      	ldr	r1, [r7, #12]
 800801a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800801c:	fb01 f303 	mul.w	r3, r1, r3
 8008020:	441a      	add	r2, r3
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	22ff      	movs	r2, #255	; 0xff
 800802a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	22ff      	movs	r2, #255	; 0xff
 8008032:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d114      	bne.n	8008066 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	691b      	ldr	r3, [r3, #16]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d01a      	beq.n	800807a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	3310      	adds	r3, #16
 8008048:	4618      	mov	r0, r3
 800804a:	f001 f929 	bl	80092a0 <xTaskRemoveFromEventList>
 800804e:	4603      	mov	r3, r0
 8008050:	2b00      	cmp	r3, #0
 8008052:	d012      	beq.n	800807a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008054:	4b0c      	ldr	r3, [pc, #48]	; (8008088 <xQueueGenericReset+0xcc>)
 8008056:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800805a:	601a      	str	r2, [r3, #0]
 800805c:	f3bf 8f4f 	dsb	sy
 8008060:	f3bf 8f6f 	isb	sy
 8008064:	e009      	b.n	800807a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	3310      	adds	r3, #16
 800806a:	4618      	mov	r0, r3
 800806c:	f7ff fef2 	bl	8007e54 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	3324      	adds	r3, #36	; 0x24
 8008074:	4618      	mov	r0, r3
 8008076:	f7ff feed 	bl	8007e54 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800807a:	f002 f85b 	bl	800a134 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800807e:	2301      	movs	r3, #1
}
 8008080:	4618      	mov	r0, r3
 8008082:	3710      	adds	r7, #16
 8008084:	46bd      	mov	sp, r7
 8008086:	bd80      	pop	{r7, pc}
 8008088:	e000ed04 	.word	0xe000ed04

0800808c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800808c:	b580      	push	{r7, lr}
 800808e:	b08e      	sub	sp, #56	; 0x38
 8008090:	af02      	add	r7, sp, #8
 8008092:	60f8      	str	r0, [r7, #12]
 8008094:	60b9      	str	r1, [r7, #8]
 8008096:	607a      	str	r2, [r7, #4]
 8008098:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d10a      	bne.n	80080b6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80080a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080a4:	f383 8811 	msr	BASEPRI, r3
 80080a8:	f3bf 8f6f 	isb	sy
 80080ac:	f3bf 8f4f 	dsb	sy
 80080b0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80080b2:	bf00      	nop
 80080b4:	e7fe      	b.n	80080b4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80080b6:	683b      	ldr	r3, [r7, #0]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d10a      	bne.n	80080d2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80080bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080c0:	f383 8811 	msr	BASEPRI, r3
 80080c4:	f3bf 8f6f 	isb	sy
 80080c8:	f3bf 8f4f 	dsb	sy
 80080cc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80080ce:	bf00      	nop
 80080d0:	e7fe      	b.n	80080d0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d002      	beq.n	80080de <xQueueGenericCreateStatic+0x52>
 80080d8:	68bb      	ldr	r3, [r7, #8]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d001      	beq.n	80080e2 <xQueueGenericCreateStatic+0x56>
 80080de:	2301      	movs	r3, #1
 80080e0:	e000      	b.n	80080e4 <xQueueGenericCreateStatic+0x58>
 80080e2:	2300      	movs	r3, #0
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d10a      	bne.n	80080fe <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80080e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080ec:	f383 8811 	msr	BASEPRI, r3
 80080f0:	f3bf 8f6f 	isb	sy
 80080f4:	f3bf 8f4f 	dsb	sy
 80080f8:	623b      	str	r3, [r7, #32]
}
 80080fa:	bf00      	nop
 80080fc:	e7fe      	b.n	80080fc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d102      	bne.n	800810a <xQueueGenericCreateStatic+0x7e>
 8008104:	68bb      	ldr	r3, [r7, #8]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d101      	bne.n	800810e <xQueueGenericCreateStatic+0x82>
 800810a:	2301      	movs	r3, #1
 800810c:	e000      	b.n	8008110 <xQueueGenericCreateStatic+0x84>
 800810e:	2300      	movs	r3, #0
 8008110:	2b00      	cmp	r3, #0
 8008112:	d10a      	bne.n	800812a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008118:	f383 8811 	msr	BASEPRI, r3
 800811c:	f3bf 8f6f 	isb	sy
 8008120:	f3bf 8f4f 	dsb	sy
 8008124:	61fb      	str	r3, [r7, #28]
}
 8008126:	bf00      	nop
 8008128:	e7fe      	b.n	8008128 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800812a:	2350      	movs	r3, #80	; 0x50
 800812c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800812e:	697b      	ldr	r3, [r7, #20]
 8008130:	2b50      	cmp	r3, #80	; 0x50
 8008132:	d00a      	beq.n	800814a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008138:	f383 8811 	msr	BASEPRI, r3
 800813c:	f3bf 8f6f 	isb	sy
 8008140:	f3bf 8f4f 	dsb	sy
 8008144:	61bb      	str	r3, [r7, #24]
}
 8008146:	bf00      	nop
 8008148:	e7fe      	b.n	8008148 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800814a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008152:	2b00      	cmp	r3, #0
 8008154:	d00d      	beq.n	8008172 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008158:	2201      	movs	r2, #1
 800815a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800815e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008164:	9300      	str	r3, [sp, #0]
 8008166:	4613      	mov	r3, r2
 8008168:	687a      	ldr	r2, [r7, #4]
 800816a:	68b9      	ldr	r1, [r7, #8]
 800816c:	68f8      	ldr	r0, [r7, #12]
 800816e:	f000 f805 	bl	800817c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008174:	4618      	mov	r0, r3
 8008176:	3730      	adds	r7, #48	; 0x30
 8008178:	46bd      	mov	sp, r7
 800817a:	bd80      	pop	{r7, pc}

0800817c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800817c:	b580      	push	{r7, lr}
 800817e:	b084      	sub	sp, #16
 8008180:	af00      	add	r7, sp, #0
 8008182:	60f8      	str	r0, [r7, #12]
 8008184:	60b9      	str	r1, [r7, #8]
 8008186:	607a      	str	r2, [r7, #4]
 8008188:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800818a:	68bb      	ldr	r3, [r7, #8]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d103      	bne.n	8008198 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008190:	69bb      	ldr	r3, [r7, #24]
 8008192:	69ba      	ldr	r2, [r7, #24]
 8008194:	601a      	str	r2, [r3, #0]
 8008196:	e002      	b.n	800819e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008198:	69bb      	ldr	r3, [r7, #24]
 800819a:	687a      	ldr	r2, [r7, #4]
 800819c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800819e:	69bb      	ldr	r3, [r7, #24]
 80081a0:	68fa      	ldr	r2, [r7, #12]
 80081a2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80081a4:	69bb      	ldr	r3, [r7, #24]
 80081a6:	68ba      	ldr	r2, [r7, #8]
 80081a8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80081aa:	2101      	movs	r1, #1
 80081ac:	69b8      	ldr	r0, [r7, #24]
 80081ae:	f7ff ff05 	bl	8007fbc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80081b2:	69bb      	ldr	r3, [r7, #24]
 80081b4:	78fa      	ldrb	r2, [r7, #3]
 80081b6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80081ba:	bf00      	nop
 80081bc:	3710      	adds	r7, #16
 80081be:	46bd      	mov	sp, r7
 80081c0:	bd80      	pop	{r7, pc}
	...

080081c4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b08e      	sub	sp, #56	; 0x38
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	60f8      	str	r0, [r7, #12]
 80081cc:	60b9      	str	r1, [r7, #8]
 80081ce:	607a      	str	r2, [r7, #4]
 80081d0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80081d2:	2300      	movs	r3, #0
 80081d4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80081da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d10a      	bne.n	80081f6 <xQueueGenericSend+0x32>
	__asm volatile
 80081e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081e4:	f383 8811 	msr	BASEPRI, r3
 80081e8:	f3bf 8f6f 	isb	sy
 80081ec:	f3bf 8f4f 	dsb	sy
 80081f0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80081f2:	bf00      	nop
 80081f4:	e7fe      	b.n	80081f4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80081f6:	68bb      	ldr	r3, [r7, #8]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d103      	bne.n	8008204 <xQueueGenericSend+0x40>
 80081fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008200:	2b00      	cmp	r3, #0
 8008202:	d101      	bne.n	8008208 <xQueueGenericSend+0x44>
 8008204:	2301      	movs	r3, #1
 8008206:	e000      	b.n	800820a <xQueueGenericSend+0x46>
 8008208:	2300      	movs	r3, #0
 800820a:	2b00      	cmp	r3, #0
 800820c:	d10a      	bne.n	8008224 <xQueueGenericSend+0x60>
	__asm volatile
 800820e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008212:	f383 8811 	msr	BASEPRI, r3
 8008216:	f3bf 8f6f 	isb	sy
 800821a:	f3bf 8f4f 	dsb	sy
 800821e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008220:	bf00      	nop
 8008222:	e7fe      	b.n	8008222 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	2b02      	cmp	r3, #2
 8008228:	d103      	bne.n	8008232 <xQueueGenericSend+0x6e>
 800822a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800822c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800822e:	2b01      	cmp	r3, #1
 8008230:	d101      	bne.n	8008236 <xQueueGenericSend+0x72>
 8008232:	2301      	movs	r3, #1
 8008234:	e000      	b.n	8008238 <xQueueGenericSend+0x74>
 8008236:	2300      	movs	r3, #0
 8008238:	2b00      	cmp	r3, #0
 800823a:	d10a      	bne.n	8008252 <xQueueGenericSend+0x8e>
	__asm volatile
 800823c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008240:	f383 8811 	msr	BASEPRI, r3
 8008244:	f3bf 8f6f 	isb	sy
 8008248:	f3bf 8f4f 	dsb	sy
 800824c:	623b      	str	r3, [r7, #32]
}
 800824e:	bf00      	nop
 8008250:	e7fe      	b.n	8008250 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008252:	f001 f9e7 	bl	8009624 <xTaskGetSchedulerState>
 8008256:	4603      	mov	r3, r0
 8008258:	2b00      	cmp	r3, #0
 800825a:	d102      	bne.n	8008262 <xQueueGenericSend+0x9e>
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d101      	bne.n	8008266 <xQueueGenericSend+0xa2>
 8008262:	2301      	movs	r3, #1
 8008264:	e000      	b.n	8008268 <xQueueGenericSend+0xa4>
 8008266:	2300      	movs	r3, #0
 8008268:	2b00      	cmp	r3, #0
 800826a:	d10a      	bne.n	8008282 <xQueueGenericSend+0xbe>
	__asm volatile
 800826c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008270:	f383 8811 	msr	BASEPRI, r3
 8008274:	f3bf 8f6f 	isb	sy
 8008278:	f3bf 8f4f 	dsb	sy
 800827c:	61fb      	str	r3, [r7, #28]
}
 800827e:	bf00      	nop
 8008280:	e7fe      	b.n	8008280 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008282:	f001 ff27 	bl	800a0d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008288:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800828a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800828c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800828e:	429a      	cmp	r2, r3
 8008290:	d302      	bcc.n	8008298 <xQueueGenericSend+0xd4>
 8008292:	683b      	ldr	r3, [r7, #0]
 8008294:	2b02      	cmp	r3, #2
 8008296:	d129      	bne.n	80082ec <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008298:	683a      	ldr	r2, [r7, #0]
 800829a:	68b9      	ldr	r1, [r7, #8]
 800829c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800829e:	f000 fa0b 	bl	80086b8 <prvCopyDataToQueue>
 80082a2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80082a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d010      	beq.n	80082ce <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80082ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082ae:	3324      	adds	r3, #36	; 0x24
 80082b0:	4618      	mov	r0, r3
 80082b2:	f000 fff5 	bl	80092a0 <xTaskRemoveFromEventList>
 80082b6:	4603      	mov	r3, r0
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d013      	beq.n	80082e4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80082bc:	4b3f      	ldr	r3, [pc, #252]	; (80083bc <xQueueGenericSend+0x1f8>)
 80082be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082c2:	601a      	str	r2, [r3, #0]
 80082c4:	f3bf 8f4f 	dsb	sy
 80082c8:	f3bf 8f6f 	isb	sy
 80082cc:	e00a      	b.n	80082e4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80082ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d007      	beq.n	80082e4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80082d4:	4b39      	ldr	r3, [pc, #228]	; (80083bc <xQueueGenericSend+0x1f8>)
 80082d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082da:	601a      	str	r2, [r3, #0]
 80082dc:	f3bf 8f4f 	dsb	sy
 80082e0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80082e4:	f001 ff26 	bl	800a134 <vPortExitCritical>
				return pdPASS;
 80082e8:	2301      	movs	r3, #1
 80082ea:	e063      	b.n	80083b4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d103      	bne.n	80082fa <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80082f2:	f001 ff1f 	bl	800a134 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80082f6:	2300      	movs	r3, #0
 80082f8:	e05c      	b.n	80083b4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80082fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d106      	bne.n	800830e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008300:	f107 0314 	add.w	r3, r7, #20
 8008304:	4618      	mov	r0, r3
 8008306:	f001 f82f 	bl	8009368 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800830a:	2301      	movs	r3, #1
 800830c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800830e:	f001 ff11 	bl	800a134 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008312:	f000 fd9b 	bl	8008e4c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008316:	f001 fedd 	bl	800a0d4 <vPortEnterCritical>
 800831a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800831c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008320:	b25b      	sxtb	r3, r3
 8008322:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008326:	d103      	bne.n	8008330 <xQueueGenericSend+0x16c>
 8008328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800832a:	2200      	movs	r2, #0
 800832c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008332:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008336:	b25b      	sxtb	r3, r3
 8008338:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800833c:	d103      	bne.n	8008346 <xQueueGenericSend+0x182>
 800833e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008340:	2200      	movs	r2, #0
 8008342:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008346:	f001 fef5 	bl	800a134 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800834a:	1d3a      	adds	r2, r7, #4
 800834c:	f107 0314 	add.w	r3, r7, #20
 8008350:	4611      	mov	r1, r2
 8008352:	4618      	mov	r0, r3
 8008354:	f001 f81e 	bl	8009394 <xTaskCheckForTimeOut>
 8008358:	4603      	mov	r3, r0
 800835a:	2b00      	cmp	r3, #0
 800835c:	d124      	bne.n	80083a8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800835e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008360:	f000 faa2 	bl	80088a8 <prvIsQueueFull>
 8008364:	4603      	mov	r3, r0
 8008366:	2b00      	cmp	r3, #0
 8008368:	d018      	beq.n	800839c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800836a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800836c:	3310      	adds	r3, #16
 800836e:	687a      	ldr	r2, [r7, #4]
 8008370:	4611      	mov	r1, r2
 8008372:	4618      	mov	r0, r3
 8008374:	f000 ff44 	bl	8009200 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008378:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800837a:	f000 fa2d 	bl	80087d8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800837e:	f000 fd73 	bl	8008e68 <xTaskResumeAll>
 8008382:	4603      	mov	r3, r0
 8008384:	2b00      	cmp	r3, #0
 8008386:	f47f af7c 	bne.w	8008282 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800838a:	4b0c      	ldr	r3, [pc, #48]	; (80083bc <xQueueGenericSend+0x1f8>)
 800838c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008390:	601a      	str	r2, [r3, #0]
 8008392:	f3bf 8f4f 	dsb	sy
 8008396:	f3bf 8f6f 	isb	sy
 800839a:	e772      	b.n	8008282 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800839c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800839e:	f000 fa1b 	bl	80087d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80083a2:	f000 fd61 	bl	8008e68 <xTaskResumeAll>
 80083a6:	e76c      	b.n	8008282 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80083a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80083aa:	f000 fa15 	bl	80087d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80083ae:	f000 fd5b 	bl	8008e68 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80083b2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80083b4:	4618      	mov	r0, r3
 80083b6:	3738      	adds	r7, #56	; 0x38
 80083b8:	46bd      	mov	sp, r7
 80083ba:	bd80      	pop	{r7, pc}
 80083bc:	e000ed04 	.word	0xe000ed04

080083c0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b090      	sub	sp, #64	; 0x40
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	60f8      	str	r0, [r7, #12]
 80083c8:	60b9      	str	r1, [r7, #8]
 80083ca:	607a      	str	r2, [r7, #4]
 80083cc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80083d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d10a      	bne.n	80083ee <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80083d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083dc:	f383 8811 	msr	BASEPRI, r3
 80083e0:	f3bf 8f6f 	isb	sy
 80083e4:	f3bf 8f4f 	dsb	sy
 80083e8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80083ea:	bf00      	nop
 80083ec:	e7fe      	b.n	80083ec <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80083ee:	68bb      	ldr	r3, [r7, #8]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d103      	bne.n	80083fc <xQueueGenericSendFromISR+0x3c>
 80083f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d101      	bne.n	8008400 <xQueueGenericSendFromISR+0x40>
 80083fc:	2301      	movs	r3, #1
 80083fe:	e000      	b.n	8008402 <xQueueGenericSendFromISR+0x42>
 8008400:	2300      	movs	r3, #0
 8008402:	2b00      	cmp	r3, #0
 8008404:	d10a      	bne.n	800841c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8008406:	f04f 0350 	mov.w	r3, #80	; 0x50
 800840a:	f383 8811 	msr	BASEPRI, r3
 800840e:	f3bf 8f6f 	isb	sy
 8008412:	f3bf 8f4f 	dsb	sy
 8008416:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008418:	bf00      	nop
 800841a:	e7fe      	b.n	800841a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	2b02      	cmp	r3, #2
 8008420:	d103      	bne.n	800842a <xQueueGenericSendFromISR+0x6a>
 8008422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008424:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008426:	2b01      	cmp	r3, #1
 8008428:	d101      	bne.n	800842e <xQueueGenericSendFromISR+0x6e>
 800842a:	2301      	movs	r3, #1
 800842c:	e000      	b.n	8008430 <xQueueGenericSendFromISR+0x70>
 800842e:	2300      	movs	r3, #0
 8008430:	2b00      	cmp	r3, #0
 8008432:	d10a      	bne.n	800844a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008438:	f383 8811 	msr	BASEPRI, r3
 800843c:	f3bf 8f6f 	isb	sy
 8008440:	f3bf 8f4f 	dsb	sy
 8008444:	623b      	str	r3, [r7, #32]
}
 8008446:	bf00      	nop
 8008448:	e7fe      	b.n	8008448 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800844a:	f001 ff25 	bl	800a298 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800844e:	f3ef 8211 	mrs	r2, BASEPRI
 8008452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008456:	f383 8811 	msr	BASEPRI, r3
 800845a:	f3bf 8f6f 	isb	sy
 800845e:	f3bf 8f4f 	dsb	sy
 8008462:	61fa      	str	r2, [r7, #28]
 8008464:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008466:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008468:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800846a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800846c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800846e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008470:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008472:	429a      	cmp	r2, r3
 8008474:	d302      	bcc.n	800847c <xQueueGenericSendFromISR+0xbc>
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	2b02      	cmp	r3, #2
 800847a:	d12f      	bne.n	80084dc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800847c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800847e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008482:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800848a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800848c:	683a      	ldr	r2, [r7, #0]
 800848e:	68b9      	ldr	r1, [r7, #8]
 8008490:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008492:	f000 f911 	bl	80086b8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008496:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800849a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800849e:	d112      	bne.n	80084c6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80084a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d016      	beq.n	80084d6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80084a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084aa:	3324      	adds	r3, #36	; 0x24
 80084ac:	4618      	mov	r0, r3
 80084ae:	f000 fef7 	bl	80092a0 <xTaskRemoveFromEventList>
 80084b2:	4603      	mov	r3, r0
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d00e      	beq.n	80084d6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d00b      	beq.n	80084d6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	2201      	movs	r2, #1
 80084c2:	601a      	str	r2, [r3, #0]
 80084c4:	e007      	b.n	80084d6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80084c6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80084ca:	3301      	adds	r3, #1
 80084cc:	b2db      	uxtb	r3, r3
 80084ce:	b25a      	sxtb	r2, r3
 80084d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80084d6:	2301      	movs	r3, #1
 80084d8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80084da:	e001      	b.n	80084e0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80084dc:	2300      	movs	r3, #0
 80084de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80084e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084e2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80084e4:	697b      	ldr	r3, [r7, #20]
 80084e6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80084ea:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80084ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80084ee:	4618      	mov	r0, r3
 80084f0:	3740      	adds	r7, #64	; 0x40
 80084f2:	46bd      	mov	sp, r7
 80084f4:	bd80      	pop	{r7, pc}
	...

080084f8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80084f8:	b580      	push	{r7, lr}
 80084fa:	b08c      	sub	sp, #48	; 0x30
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	60f8      	str	r0, [r7, #12]
 8008500:	60b9      	str	r1, [r7, #8]
 8008502:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008504:	2300      	movs	r3, #0
 8008506:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800850c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800850e:	2b00      	cmp	r3, #0
 8008510:	d10a      	bne.n	8008528 <xQueueReceive+0x30>
	__asm volatile
 8008512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008516:	f383 8811 	msr	BASEPRI, r3
 800851a:	f3bf 8f6f 	isb	sy
 800851e:	f3bf 8f4f 	dsb	sy
 8008522:	623b      	str	r3, [r7, #32]
}
 8008524:	bf00      	nop
 8008526:	e7fe      	b.n	8008526 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008528:	68bb      	ldr	r3, [r7, #8]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d103      	bne.n	8008536 <xQueueReceive+0x3e>
 800852e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008532:	2b00      	cmp	r3, #0
 8008534:	d101      	bne.n	800853a <xQueueReceive+0x42>
 8008536:	2301      	movs	r3, #1
 8008538:	e000      	b.n	800853c <xQueueReceive+0x44>
 800853a:	2300      	movs	r3, #0
 800853c:	2b00      	cmp	r3, #0
 800853e:	d10a      	bne.n	8008556 <xQueueReceive+0x5e>
	__asm volatile
 8008540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008544:	f383 8811 	msr	BASEPRI, r3
 8008548:	f3bf 8f6f 	isb	sy
 800854c:	f3bf 8f4f 	dsb	sy
 8008550:	61fb      	str	r3, [r7, #28]
}
 8008552:	bf00      	nop
 8008554:	e7fe      	b.n	8008554 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008556:	f001 f865 	bl	8009624 <xTaskGetSchedulerState>
 800855a:	4603      	mov	r3, r0
 800855c:	2b00      	cmp	r3, #0
 800855e:	d102      	bne.n	8008566 <xQueueReceive+0x6e>
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d101      	bne.n	800856a <xQueueReceive+0x72>
 8008566:	2301      	movs	r3, #1
 8008568:	e000      	b.n	800856c <xQueueReceive+0x74>
 800856a:	2300      	movs	r3, #0
 800856c:	2b00      	cmp	r3, #0
 800856e:	d10a      	bne.n	8008586 <xQueueReceive+0x8e>
	__asm volatile
 8008570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008574:	f383 8811 	msr	BASEPRI, r3
 8008578:	f3bf 8f6f 	isb	sy
 800857c:	f3bf 8f4f 	dsb	sy
 8008580:	61bb      	str	r3, [r7, #24]
}
 8008582:	bf00      	nop
 8008584:	e7fe      	b.n	8008584 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008586:	f001 fda5 	bl	800a0d4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800858a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800858c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800858e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008592:	2b00      	cmp	r3, #0
 8008594:	d01f      	beq.n	80085d6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008596:	68b9      	ldr	r1, [r7, #8]
 8008598:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800859a:	f000 f8f7 	bl	800878c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800859e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085a0:	1e5a      	subs	r2, r3, #1
 80085a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085a4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80085a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085a8:	691b      	ldr	r3, [r3, #16]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d00f      	beq.n	80085ce <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80085ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085b0:	3310      	adds	r3, #16
 80085b2:	4618      	mov	r0, r3
 80085b4:	f000 fe74 	bl	80092a0 <xTaskRemoveFromEventList>
 80085b8:	4603      	mov	r3, r0
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d007      	beq.n	80085ce <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80085be:	4b3d      	ldr	r3, [pc, #244]	; (80086b4 <xQueueReceive+0x1bc>)
 80085c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085c4:	601a      	str	r2, [r3, #0]
 80085c6:	f3bf 8f4f 	dsb	sy
 80085ca:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80085ce:	f001 fdb1 	bl	800a134 <vPortExitCritical>
				return pdPASS;
 80085d2:	2301      	movs	r3, #1
 80085d4:	e069      	b.n	80086aa <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d103      	bne.n	80085e4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80085dc:	f001 fdaa 	bl	800a134 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80085e0:	2300      	movs	r3, #0
 80085e2:	e062      	b.n	80086aa <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80085e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d106      	bne.n	80085f8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80085ea:	f107 0310 	add.w	r3, r7, #16
 80085ee:	4618      	mov	r0, r3
 80085f0:	f000 feba 	bl	8009368 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80085f4:	2301      	movs	r3, #1
 80085f6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80085f8:	f001 fd9c 	bl	800a134 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80085fc:	f000 fc26 	bl	8008e4c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008600:	f001 fd68 	bl	800a0d4 <vPortEnterCritical>
 8008604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008606:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800860a:	b25b      	sxtb	r3, r3
 800860c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008610:	d103      	bne.n	800861a <xQueueReceive+0x122>
 8008612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008614:	2200      	movs	r2, #0
 8008616:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800861a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800861c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008620:	b25b      	sxtb	r3, r3
 8008622:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008626:	d103      	bne.n	8008630 <xQueueReceive+0x138>
 8008628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800862a:	2200      	movs	r2, #0
 800862c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008630:	f001 fd80 	bl	800a134 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008634:	1d3a      	adds	r2, r7, #4
 8008636:	f107 0310 	add.w	r3, r7, #16
 800863a:	4611      	mov	r1, r2
 800863c:	4618      	mov	r0, r3
 800863e:	f000 fea9 	bl	8009394 <xTaskCheckForTimeOut>
 8008642:	4603      	mov	r3, r0
 8008644:	2b00      	cmp	r3, #0
 8008646:	d123      	bne.n	8008690 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008648:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800864a:	f000 f917 	bl	800887c <prvIsQueueEmpty>
 800864e:	4603      	mov	r3, r0
 8008650:	2b00      	cmp	r3, #0
 8008652:	d017      	beq.n	8008684 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008656:	3324      	adds	r3, #36	; 0x24
 8008658:	687a      	ldr	r2, [r7, #4]
 800865a:	4611      	mov	r1, r2
 800865c:	4618      	mov	r0, r3
 800865e:	f000 fdcf 	bl	8009200 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008662:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008664:	f000 f8b8 	bl	80087d8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008668:	f000 fbfe 	bl	8008e68 <xTaskResumeAll>
 800866c:	4603      	mov	r3, r0
 800866e:	2b00      	cmp	r3, #0
 8008670:	d189      	bne.n	8008586 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8008672:	4b10      	ldr	r3, [pc, #64]	; (80086b4 <xQueueReceive+0x1bc>)
 8008674:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008678:	601a      	str	r2, [r3, #0]
 800867a:	f3bf 8f4f 	dsb	sy
 800867e:	f3bf 8f6f 	isb	sy
 8008682:	e780      	b.n	8008586 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008684:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008686:	f000 f8a7 	bl	80087d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800868a:	f000 fbed 	bl	8008e68 <xTaskResumeAll>
 800868e:	e77a      	b.n	8008586 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008690:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008692:	f000 f8a1 	bl	80087d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008696:	f000 fbe7 	bl	8008e68 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800869a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800869c:	f000 f8ee 	bl	800887c <prvIsQueueEmpty>
 80086a0:	4603      	mov	r3, r0
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	f43f af6f 	beq.w	8008586 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80086a8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80086aa:	4618      	mov	r0, r3
 80086ac:	3730      	adds	r7, #48	; 0x30
 80086ae:	46bd      	mov	sp, r7
 80086b0:	bd80      	pop	{r7, pc}
 80086b2:	bf00      	nop
 80086b4:	e000ed04 	.word	0xe000ed04

080086b8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b086      	sub	sp, #24
 80086bc:	af00      	add	r7, sp, #0
 80086be:	60f8      	str	r0, [r7, #12]
 80086c0:	60b9      	str	r1, [r7, #8]
 80086c2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80086c4:	2300      	movs	r3, #0
 80086c6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086cc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d10d      	bne.n	80086f2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d14d      	bne.n	800877a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	689b      	ldr	r3, [r3, #8]
 80086e2:	4618      	mov	r0, r3
 80086e4:	f000 ffbc 	bl	8009660 <xTaskPriorityDisinherit>
 80086e8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	2200      	movs	r2, #0
 80086ee:	609a      	str	r2, [r3, #8]
 80086f0:	e043      	b.n	800877a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d119      	bne.n	800872c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	6858      	ldr	r0, [r3, #4]
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008700:	461a      	mov	r2, r3
 8008702:	68b9      	ldr	r1, [r7, #8]
 8008704:	f002 fd76 	bl	800b1f4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	685a      	ldr	r2, [r3, #4]
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008710:	441a      	add	r2, r3
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	685a      	ldr	r2, [r3, #4]
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	689b      	ldr	r3, [r3, #8]
 800871e:	429a      	cmp	r2, r3
 8008720:	d32b      	bcc.n	800877a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	681a      	ldr	r2, [r3, #0]
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	605a      	str	r2, [r3, #4]
 800872a:	e026      	b.n	800877a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	68d8      	ldr	r0, [r3, #12]
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008734:	461a      	mov	r2, r3
 8008736:	68b9      	ldr	r1, [r7, #8]
 8008738:	f002 fd5c 	bl	800b1f4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	68da      	ldr	r2, [r3, #12]
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008744:	425b      	negs	r3, r3
 8008746:	441a      	add	r2, r3
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	68da      	ldr	r2, [r3, #12]
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	429a      	cmp	r2, r3
 8008756:	d207      	bcs.n	8008768 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	689a      	ldr	r2, [r3, #8]
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008760:	425b      	negs	r3, r3
 8008762:	441a      	add	r2, r3
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	2b02      	cmp	r3, #2
 800876c:	d105      	bne.n	800877a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800876e:	693b      	ldr	r3, [r7, #16]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d002      	beq.n	800877a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008774:	693b      	ldr	r3, [r7, #16]
 8008776:	3b01      	subs	r3, #1
 8008778:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800877a:	693b      	ldr	r3, [r7, #16]
 800877c:	1c5a      	adds	r2, r3, #1
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008782:	697b      	ldr	r3, [r7, #20]
}
 8008784:	4618      	mov	r0, r3
 8008786:	3718      	adds	r7, #24
 8008788:	46bd      	mov	sp, r7
 800878a:	bd80      	pop	{r7, pc}

0800878c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b082      	sub	sp, #8
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
 8008794:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800879a:	2b00      	cmp	r3, #0
 800879c:	d018      	beq.n	80087d0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	68da      	ldr	r2, [r3, #12]
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087a6:	441a      	add	r2, r3
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	68da      	ldr	r2, [r3, #12]
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	689b      	ldr	r3, [r3, #8]
 80087b4:	429a      	cmp	r2, r3
 80087b6:	d303      	bcc.n	80087c0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681a      	ldr	r2, [r3, #0]
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	68d9      	ldr	r1, [r3, #12]
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087c8:	461a      	mov	r2, r3
 80087ca:	6838      	ldr	r0, [r7, #0]
 80087cc:	f002 fd12 	bl	800b1f4 <memcpy>
	}
}
 80087d0:	bf00      	nop
 80087d2:	3708      	adds	r7, #8
 80087d4:	46bd      	mov	sp, r7
 80087d6:	bd80      	pop	{r7, pc}

080087d8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80087d8:	b580      	push	{r7, lr}
 80087da:	b084      	sub	sp, #16
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80087e0:	f001 fc78 	bl	800a0d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80087ea:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80087ec:	e011      	b.n	8008812 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d012      	beq.n	800881c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	3324      	adds	r3, #36	; 0x24
 80087fa:	4618      	mov	r0, r3
 80087fc:	f000 fd50 	bl	80092a0 <xTaskRemoveFromEventList>
 8008800:	4603      	mov	r3, r0
 8008802:	2b00      	cmp	r3, #0
 8008804:	d001      	beq.n	800880a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008806:	f000 fe27 	bl	8009458 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800880a:	7bfb      	ldrb	r3, [r7, #15]
 800880c:	3b01      	subs	r3, #1
 800880e:	b2db      	uxtb	r3, r3
 8008810:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008812:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008816:	2b00      	cmp	r3, #0
 8008818:	dce9      	bgt.n	80087ee <prvUnlockQueue+0x16>
 800881a:	e000      	b.n	800881e <prvUnlockQueue+0x46>
					break;
 800881c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	22ff      	movs	r2, #255	; 0xff
 8008822:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008826:	f001 fc85 	bl	800a134 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800882a:	f001 fc53 	bl	800a0d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008834:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008836:	e011      	b.n	800885c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	691b      	ldr	r3, [r3, #16]
 800883c:	2b00      	cmp	r3, #0
 800883e:	d012      	beq.n	8008866 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	3310      	adds	r3, #16
 8008844:	4618      	mov	r0, r3
 8008846:	f000 fd2b 	bl	80092a0 <xTaskRemoveFromEventList>
 800884a:	4603      	mov	r3, r0
 800884c:	2b00      	cmp	r3, #0
 800884e:	d001      	beq.n	8008854 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008850:	f000 fe02 	bl	8009458 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008854:	7bbb      	ldrb	r3, [r7, #14]
 8008856:	3b01      	subs	r3, #1
 8008858:	b2db      	uxtb	r3, r3
 800885a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800885c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008860:	2b00      	cmp	r3, #0
 8008862:	dce9      	bgt.n	8008838 <prvUnlockQueue+0x60>
 8008864:	e000      	b.n	8008868 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008866:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	22ff      	movs	r2, #255	; 0xff
 800886c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008870:	f001 fc60 	bl	800a134 <vPortExitCritical>
}
 8008874:	bf00      	nop
 8008876:	3710      	adds	r7, #16
 8008878:	46bd      	mov	sp, r7
 800887a:	bd80      	pop	{r7, pc}

0800887c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800887c:	b580      	push	{r7, lr}
 800887e:	b084      	sub	sp, #16
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008884:	f001 fc26 	bl	800a0d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800888c:	2b00      	cmp	r3, #0
 800888e:	d102      	bne.n	8008896 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008890:	2301      	movs	r3, #1
 8008892:	60fb      	str	r3, [r7, #12]
 8008894:	e001      	b.n	800889a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008896:	2300      	movs	r3, #0
 8008898:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800889a:	f001 fc4b 	bl	800a134 <vPortExitCritical>

	return xReturn;
 800889e:	68fb      	ldr	r3, [r7, #12]
}
 80088a0:	4618      	mov	r0, r3
 80088a2:	3710      	adds	r7, #16
 80088a4:	46bd      	mov	sp, r7
 80088a6:	bd80      	pop	{r7, pc}

080088a8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b084      	sub	sp, #16
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80088b0:	f001 fc10 	bl	800a0d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088bc:	429a      	cmp	r2, r3
 80088be:	d102      	bne.n	80088c6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80088c0:	2301      	movs	r3, #1
 80088c2:	60fb      	str	r3, [r7, #12]
 80088c4:	e001      	b.n	80088ca <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80088c6:	2300      	movs	r3, #0
 80088c8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80088ca:	f001 fc33 	bl	800a134 <vPortExitCritical>

	return xReturn;
 80088ce:	68fb      	ldr	r3, [r7, #12]
}
 80088d0:	4618      	mov	r0, r3
 80088d2:	3710      	adds	r7, #16
 80088d4:	46bd      	mov	sp, r7
 80088d6:	bd80      	pop	{r7, pc}

080088d8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80088d8:	b480      	push	{r7}
 80088da:	b085      	sub	sp, #20
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
 80088e0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80088e2:	2300      	movs	r3, #0
 80088e4:	60fb      	str	r3, [r7, #12]
 80088e6:	e014      	b.n	8008912 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80088e8:	4a0f      	ldr	r2, [pc, #60]	; (8008928 <vQueueAddToRegistry+0x50>)
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d10b      	bne.n	800890c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80088f4:	490c      	ldr	r1, [pc, #48]	; (8008928 <vQueueAddToRegistry+0x50>)
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	683a      	ldr	r2, [r7, #0]
 80088fa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80088fe:	4a0a      	ldr	r2, [pc, #40]	; (8008928 <vQueueAddToRegistry+0x50>)
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	00db      	lsls	r3, r3, #3
 8008904:	4413      	add	r3, r2
 8008906:	687a      	ldr	r2, [r7, #4]
 8008908:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800890a:	e006      	b.n	800891a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	3301      	adds	r3, #1
 8008910:	60fb      	str	r3, [r7, #12]
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	2b07      	cmp	r3, #7
 8008916:	d9e7      	bls.n	80088e8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008918:	bf00      	nop
 800891a:	bf00      	nop
 800891c:	3714      	adds	r7, #20
 800891e:	46bd      	mov	sp, r7
 8008920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008924:	4770      	bx	lr
 8008926:	bf00      	nop
 8008928:	20000a9c 	.word	0x20000a9c

0800892c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800892c:	b580      	push	{r7, lr}
 800892e:	b086      	sub	sp, #24
 8008930:	af00      	add	r7, sp, #0
 8008932:	60f8      	str	r0, [r7, #12]
 8008934:	60b9      	str	r1, [r7, #8]
 8008936:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800893c:	f001 fbca 	bl	800a0d4 <vPortEnterCritical>
 8008940:	697b      	ldr	r3, [r7, #20]
 8008942:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008946:	b25b      	sxtb	r3, r3
 8008948:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800894c:	d103      	bne.n	8008956 <vQueueWaitForMessageRestricted+0x2a>
 800894e:	697b      	ldr	r3, [r7, #20]
 8008950:	2200      	movs	r2, #0
 8008952:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008956:	697b      	ldr	r3, [r7, #20]
 8008958:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800895c:	b25b      	sxtb	r3, r3
 800895e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008962:	d103      	bne.n	800896c <vQueueWaitForMessageRestricted+0x40>
 8008964:	697b      	ldr	r3, [r7, #20]
 8008966:	2200      	movs	r2, #0
 8008968:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800896c:	f001 fbe2 	bl	800a134 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008970:	697b      	ldr	r3, [r7, #20]
 8008972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008974:	2b00      	cmp	r3, #0
 8008976:	d106      	bne.n	8008986 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008978:	697b      	ldr	r3, [r7, #20]
 800897a:	3324      	adds	r3, #36	; 0x24
 800897c:	687a      	ldr	r2, [r7, #4]
 800897e:	68b9      	ldr	r1, [r7, #8]
 8008980:	4618      	mov	r0, r3
 8008982:	f000 fc61 	bl	8009248 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008986:	6978      	ldr	r0, [r7, #20]
 8008988:	f7ff ff26 	bl	80087d8 <prvUnlockQueue>
	}
 800898c:	bf00      	nop
 800898e:	3718      	adds	r7, #24
 8008990:	46bd      	mov	sp, r7
 8008992:	bd80      	pop	{r7, pc}

08008994 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008994:	b580      	push	{r7, lr}
 8008996:	b08e      	sub	sp, #56	; 0x38
 8008998:	af04      	add	r7, sp, #16
 800899a:	60f8      	str	r0, [r7, #12]
 800899c:	60b9      	str	r1, [r7, #8]
 800899e:	607a      	str	r2, [r7, #4]
 80089a0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80089a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d10a      	bne.n	80089be <xTaskCreateStatic+0x2a>
	__asm volatile
 80089a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089ac:	f383 8811 	msr	BASEPRI, r3
 80089b0:	f3bf 8f6f 	isb	sy
 80089b4:	f3bf 8f4f 	dsb	sy
 80089b8:	623b      	str	r3, [r7, #32]
}
 80089ba:	bf00      	nop
 80089bc:	e7fe      	b.n	80089bc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80089be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d10a      	bne.n	80089da <xTaskCreateStatic+0x46>
	__asm volatile
 80089c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089c8:	f383 8811 	msr	BASEPRI, r3
 80089cc:	f3bf 8f6f 	isb	sy
 80089d0:	f3bf 8f4f 	dsb	sy
 80089d4:	61fb      	str	r3, [r7, #28]
}
 80089d6:	bf00      	nop
 80089d8:	e7fe      	b.n	80089d8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80089da:	23a8      	movs	r3, #168	; 0xa8
 80089dc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80089de:	693b      	ldr	r3, [r7, #16]
 80089e0:	2ba8      	cmp	r3, #168	; 0xa8
 80089e2:	d00a      	beq.n	80089fa <xTaskCreateStatic+0x66>
	__asm volatile
 80089e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089e8:	f383 8811 	msr	BASEPRI, r3
 80089ec:	f3bf 8f6f 	isb	sy
 80089f0:	f3bf 8f4f 	dsb	sy
 80089f4:	61bb      	str	r3, [r7, #24]
}
 80089f6:	bf00      	nop
 80089f8:	e7fe      	b.n	80089f8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80089fa:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80089fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d01e      	beq.n	8008a40 <xTaskCreateStatic+0xac>
 8008a02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d01b      	beq.n	8008a40 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008a08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a0a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008a10:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a14:	2202      	movs	r2, #2
 8008a16:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	9303      	str	r3, [sp, #12]
 8008a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a20:	9302      	str	r3, [sp, #8]
 8008a22:	f107 0314 	add.w	r3, r7, #20
 8008a26:	9301      	str	r3, [sp, #4]
 8008a28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a2a:	9300      	str	r3, [sp, #0]
 8008a2c:	683b      	ldr	r3, [r7, #0]
 8008a2e:	687a      	ldr	r2, [r7, #4]
 8008a30:	68b9      	ldr	r1, [r7, #8]
 8008a32:	68f8      	ldr	r0, [r7, #12]
 8008a34:	f000 f850 	bl	8008ad8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008a38:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008a3a:	f000 f8f3 	bl	8008c24 <prvAddNewTaskToReadyList>
 8008a3e:	e001      	b.n	8008a44 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008a40:	2300      	movs	r3, #0
 8008a42:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008a44:	697b      	ldr	r3, [r7, #20]
	}
 8008a46:	4618      	mov	r0, r3
 8008a48:	3728      	adds	r7, #40	; 0x28
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	bd80      	pop	{r7, pc}

08008a4e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008a4e:	b580      	push	{r7, lr}
 8008a50:	b08c      	sub	sp, #48	; 0x30
 8008a52:	af04      	add	r7, sp, #16
 8008a54:	60f8      	str	r0, [r7, #12]
 8008a56:	60b9      	str	r1, [r7, #8]
 8008a58:	603b      	str	r3, [r7, #0]
 8008a5a:	4613      	mov	r3, r2
 8008a5c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008a5e:	88fb      	ldrh	r3, [r7, #6]
 8008a60:	009b      	lsls	r3, r3, #2
 8008a62:	4618      	mov	r0, r3
 8008a64:	f001 fc58 	bl	800a318 <pvPortMalloc>
 8008a68:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008a6a:	697b      	ldr	r3, [r7, #20]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d00e      	beq.n	8008a8e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008a70:	20a8      	movs	r0, #168	; 0xa8
 8008a72:	f001 fc51 	bl	800a318 <pvPortMalloc>
 8008a76:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008a78:	69fb      	ldr	r3, [r7, #28]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d003      	beq.n	8008a86 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008a7e:	69fb      	ldr	r3, [r7, #28]
 8008a80:	697a      	ldr	r2, [r7, #20]
 8008a82:	631a      	str	r2, [r3, #48]	; 0x30
 8008a84:	e005      	b.n	8008a92 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008a86:	6978      	ldr	r0, [r7, #20]
 8008a88:	f001 fd12 	bl	800a4b0 <vPortFree>
 8008a8c:	e001      	b.n	8008a92 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008a8e:	2300      	movs	r3, #0
 8008a90:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008a92:	69fb      	ldr	r3, [r7, #28]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d017      	beq.n	8008ac8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008a98:	69fb      	ldr	r3, [r7, #28]
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008aa0:	88fa      	ldrh	r2, [r7, #6]
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	9303      	str	r3, [sp, #12]
 8008aa6:	69fb      	ldr	r3, [r7, #28]
 8008aa8:	9302      	str	r3, [sp, #8]
 8008aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008aac:	9301      	str	r3, [sp, #4]
 8008aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ab0:	9300      	str	r3, [sp, #0]
 8008ab2:	683b      	ldr	r3, [r7, #0]
 8008ab4:	68b9      	ldr	r1, [r7, #8]
 8008ab6:	68f8      	ldr	r0, [r7, #12]
 8008ab8:	f000 f80e 	bl	8008ad8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008abc:	69f8      	ldr	r0, [r7, #28]
 8008abe:	f000 f8b1 	bl	8008c24 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008ac2:	2301      	movs	r3, #1
 8008ac4:	61bb      	str	r3, [r7, #24]
 8008ac6:	e002      	b.n	8008ace <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008ac8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008acc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008ace:	69bb      	ldr	r3, [r7, #24]
	}
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	3720      	adds	r7, #32
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	bd80      	pop	{r7, pc}

08008ad8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b088      	sub	sp, #32
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	60f8      	str	r0, [r7, #12]
 8008ae0:	60b9      	str	r1, [r7, #8]
 8008ae2:	607a      	str	r2, [r7, #4]
 8008ae4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ae8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	009b      	lsls	r3, r3, #2
 8008aee:	461a      	mov	r2, r3
 8008af0:	21a5      	movs	r1, #165	; 0xa5
 8008af2:	f002 fafb 	bl	800b0ec <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008af8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008b00:	3b01      	subs	r3, #1
 8008b02:	009b      	lsls	r3, r3, #2
 8008b04:	4413      	add	r3, r2
 8008b06:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008b08:	69bb      	ldr	r3, [r7, #24]
 8008b0a:	f023 0307 	bic.w	r3, r3, #7
 8008b0e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008b10:	69bb      	ldr	r3, [r7, #24]
 8008b12:	f003 0307 	and.w	r3, r3, #7
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d00a      	beq.n	8008b30 <prvInitialiseNewTask+0x58>
	__asm volatile
 8008b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b1e:	f383 8811 	msr	BASEPRI, r3
 8008b22:	f3bf 8f6f 	isb	sy
 8008b26:	f3bf 8f4f 	dsb	sy
 8008b2a:	617b      	str	r3, [r7, #20]
}
 8008b2c:	bf00      	nop
 8008b2e:	e7fe      	b.n	8008b2e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008b30:	68bb      	ldr	r3, [r7, #8]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d01f      	beq.n	8008b76 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008b36:	2300      	movs	r3, #0
 8008b38:	61fb      	str	r3, [r7, #28]
 8008b3a:	e012      	b.n	8008b62 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008b3c:	68ba      	ldr	r2, [r7, #8]
 8008b3e:	69fb      	ldr	r3, [r7, #28]
 8008b40:	4413      	add	r3, r2
 8008b42:	7819      	ldrb	r1, [r3, #0]
 8008b44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b46:	69fb      	ldr	r3, [r7, #28]
 8008b48:	4413      	add	r3, r2
 8008b4a:	3334      	adds	r3, #52	; 0x34
 8008b4c:	460a      	mov	r2, r1
 8008b4e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008b50:	68ba      	ldr	r2, [r7, #8]
 8008b52:	69fb      	ldr	r3, [r7, #28]
 8008b54:	4413      	add	r3, r2
 8008b56:	781b      	ldrb	r3, [r3, #0]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d006      	beq.n	8008b6a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008b5c:	69fb      	ldr	r3, [r7, #28]
 8008b5e:	3301      	adds	r3, #1
 8008b60:	61fb      	str	r3, [r7, #28]
 8008b62:	69fb      	ldr	r3, [r7, #28]
 8008b64:	2b0f      	cmp	r3, #15
 8008b66:	d9e9      	bls.n	8008b3c <prvInitialiseNewTask+0x64>
 8008b68:	e000      	b.n	8008b6c <prvInitialiseNewTask+0x94>
			{
				break;
 8008b6a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b6e:	2200      	movs	r2, #0
 8008b70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008b74:	e003      	b.n	8008b7e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b78:	2200      	movs	r2, #0
 8008b7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b80:	2b37      	cmp	r3, #55	; 0x37
 8008b82:	d901      	bls.n	8008b88 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008b84:	2337      	movs	r3, #55	; 0x37
 8008b86:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008b8c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008b92:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b96:	2200      	movs	r2, #0
 8008b98:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b9c:	3304      	adds	r3, #4
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	f7ff f978 	bl	8007e94 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ba6:	3318      	adds	r3, #24
 8008ba8:	4618      	mov	r0, r3
 8008baa:	f7ff f973 	bl	8007e94 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008bb2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bb6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bbc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008bc2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bc6:	2200      	movs	r2, #0
 8008bc8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bce:	2200      	movs	r2, #0
 8008bd0:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bd6:	3354      	adds	r3, #84	; 0x54
 8008bd8:	224c      	movs	r2, #76	; 0x4c
 8008bda:	2100      	movs	r1, #0
 8008bdc:	4618      	mov	r0, r3
 8008bde:	f002 fa85 	bl	800b0ec <memset>
 8008be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008be4:	4a0c      	ldr	r2, [pc, #48]	; (8008c18 <prvInitialiseNewTask+0x140>)
 8008be6:	659a      	str	r2, [r3, #88]	; 0x58
 8008be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bea:	4a0c      	ldr	r2, [pc, #48]	; (8008c1c <prvInitialiseNewTask+0x144>)
 8008bec:	65da      	str	r2, [r3, #92]	; 0x5c
 8008bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bf0:	4a0b      	ldr	r2, [pc, #44]	; (8008c20 <prvInitialiseNewTask+0x148>)
 8008bf2:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008bf4:	683a      	ldr	r2, [r7, #0]
 8008bf6:	68f9      	ldr	r1, [r7, #12]
 8008bf8:	69b8      	ldr	r0, [r7, #24]
 8008bfa:	f001 f941 	bl	8009e80 <pxPortInitialiseStack>
 8008bfe:	4602      	mov	r2, r0
 8008c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c02:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008c04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d002      	beq.n	8008c10 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c0e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008c10:	bf00      	nop
 8008c12:	3720      	adds	r7, #32
 8008c14:	46bd      	mov	sp, r7
 8008c16:	bd80      	pop	{r7, pc}
 8008c18:	20006914 	.word	0x20006914
 8008c1c:	2000697c 	.word	0x2000697c
 8008c20:	200069e4 	.word	0x200069e4

08008c24 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b082      	sub	sp, #8
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008c2c:	f001 fa52 	bl	800a0d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008c30:	4b2d      	ldr	r3, [pc, #180]	; (8008ce8 <prvAddNewTaskToReadyList+0xc4>)
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	3301      	adds	r3, #1
 8008c36:	4a2c      	ldr	r2, [pc, #176]	; (8008ce8 <prvAddNewTaskToReadyList+0xc4>)
 8008c38:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008c3a:	4b2c      	ldr	r3, [pc, #176]	; (8008cec <prvAddNewTaskToReadyList+0xc8>)
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d109      	bne.n	8008c56 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008c42:	4a2a      	ldr	r2, [pc, #168]	; (8008cec <prvAddNewTaskToReadyList+0xc8>)
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008c48:	4b27      	ldr	r3, [pc, #156]	; (8008ce8 <prvAddNewTaskToReadyList+0xc4>)
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	2b01      	cmp	r3, #1
 8008c4e:	d110      	bne.n	8008c72 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008c50:	f000 fc26 	bl	80094a0 <prvInitialiseTaskLists>
 8008c54:	e00d      	b.n	8008c72 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008c56:	4b26      	ldr	r3, [pc, #152]	; (8008cf0 <prvAddNewTaskToReadyList+0xcc>)
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d109      	bne.n	8008c72 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008c5e:	4b23      	ldr	r3, [pc, #140]	; (8008cec <prvAddNewTaskToReadyList+0xc8>)
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c68:	429a      	cmp	r2, r3
 8008c6a:	d802      	bhi.n	8008c72 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008c6c:	4a1f      	ldr	r2, [pc, #124]	; (8008cec <prvAddNewTaskToReadyList+0xc8>)
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008c72:	4b20      	ldr	r3, [pc, #128]	; (8008cf4 <prvAddNewTaskToReadyList+0xd0>)
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	3301      	adds	r3, #1
 8008c78:	4a1e      	ldr	r2, [pc, #120]	; (8008cf4 <prvAddNewTaskToReadyList+0xd0>)
 8008c7a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008c7c:	4b1d      	ldr	r3, [pc, #116]	; (8008cf4 <prvAddNewTaskToReadyList+0xd0>)
 8008c7e:	681a      	ldr	r2, [r3, #0]
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c88:	4b1b      	ldr	r3, [pc, #108]	; (8008cf8 <prvAddNewTaskToReadyList+0xd4>)
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	429a      	cmp	r2, r3
 8008c8e:	d903      	bls.n	8008c98 <prvAddNewTaskToReadyList+0x74>
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c94:	4a18      	ldr	r2, [pc, #96]	; (8008cf8 <prvAddNewTaskToReadyList+0xd4>)
 8008c96:	6013      	str	r3, [r2, #0]
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c9c:	4613      	mov	r3, r2
 8008c9e:	009b      	lsls	r3, r3, #2
 8008ca0:	4413      	add	r3, r2
 8008ca2:	009b      	lsls	r3, r3, #2
 8008ca4:	4a15      	ldr	r2, [pc, #84]	; (8008cfc <prvAddNewTaskToReadyList+0xd8>)
 8008ca6:	441a      	add	r2, r3
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	3304      	adds	r3, #4
 8008cac:	4619      	mov	r1, r3
 8008cae:	4610      	mov	r0, r2
 8008cb0:	f7ff f8fd 	bl	8007eae <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008cb4:	f001 fa3e 	bl	800a134 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008cb8:	4b0d      	ldr	r3, [pc, #52]	; (8008cf0 <prvAddNewTaskToReadyList+0xcc>)
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d00e      	beq.n	8008cde <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008cc0:	4b0a      	ldr	r3, [pc, #40]	; (8008cec <prvAddNewTaskToReadyList+0xc8>)
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cca:	429a      	cmp	r2, r3
 8008ccc:	d207      	bcs.n	8008cde <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008cce:	4b0c      	ldr	r3, [pc, #48]	; (8008d00 <prvAddNewTaskToReadyList+0xdc>)
 8008cd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008cd4:	601a      	str	r2, [r3, #0]
 8008cd6:	f3bf 8f4f 	dsb	sy
 8008cda:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008cde:	bf00      	nop
 8008ce0:	3708      	adds	r7, #8
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	bd80      	pop	{r7, pc}
 8008ce6:	bf00      	nop
 8008ce8:	20000fb0 	.word	0x20000fb0
 8008cec:	20000adc 	.word	0x20000adc
 8008cf0:	20000fbc 	.word	0x20000fbc
 8008cf4:	20000fcc 	.word	0x20000fcc
 8008cf8:	20000fb8 	.word	0x20000fb8
 8008cfc:	20000ae0 	.word	0x20000ae0
 8008d00:	e000ed04 	.word	0xe000ed04

08008d04 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b084      	sub	sp, #16
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d017      	beq.n	8008d46 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008d16:	4b13      	ldr	r3, [pc, #76]	; (8008d64 <vTaskDelay+0x60>)
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d00a      	beq.n	8008d34 <vTaskDelay+0x30>
	__asm volatile
 8008d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d22:	f383 8811 	msr	BASEPRI, r3
 8008d26:	f3bf 8f6f 	isb	sy
 8008d2a:	f3bf 8f4f 	dsb	sy
 8008d2e:	60bb      	str	r3, [r7, #8]
}
 8008d30:	bf00      	nop
 8008d32:	e7fe      	b.n	8008d32 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008d34:	f000 f88a 	bl	8008e4c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008d38:	2100      	movs	r1, #0
 8008d3a:	6878      	ldr	r0, [r7, #4]
 8008d3c:	f000 fcfe 	bl	800973c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008d40:	f000 f892 	bl	8008e68 <xTaskResumeAll>
 8008d44:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d107      	bne.n	8008d5c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008d4c:	4b06      	ldr	r3, [pc, #24]	; (8008d68 <vTaskDelay+0x64>)
 8008d4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d52:	601a      	str	r2, [r3, #0]
 8008d54:	f3bf 8f4f 	dsb	sy
 8008d58:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008d5c:	bf00      	nop
 8008d5e:	3710      	adds	r7, #16
 8008d60:	46bd      	mov	sp, r7
 8008d62:	bd80      	pop	{r7, pc}
 8008d64:	20000fd8 	.word	0x20000fd8
 8008d68:	e000ed04 	.word	0xe000ed04

08008d6c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b08a      	sub	sp, #40	; 0x28
 8008d70:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008d72:	2300      	movs	r3, #0
 8008d74:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008d76:	2300      	movs	r3, #0
 8008d78:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008d7a:	463a      	mov	r2, r7
 8008d7c:	1d39      	adds	r1, r7, #4
 8008d7e:	f107 0308 	add.w	r3, r7, #8
 8008d82:	4618      	mov	r0, r3
 8008d84:	f7ff f832 	bl	8007dec <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008d88:	6839      	ldr	r1, [r7, #0]
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	68ba      	ldr	r2, [r7, #8]
 8008d8e:	9202      	str	r2, [sp, #8]
 8008d90:	9301      	str	r3, [sp, #4]
 8008d92:	2300      	movs	r3, #0
 8008d94:	9300      	str	r3, [sp, #0]
 8008d96:	2300      	movs	r3, #0
 8008d98:	460a      	mov	r2, r1
 8008d9a:	4924      	ldr	r1, [pc, #144]	; (8008e2c <vTaskStartScheduler+0xc0>)
 8008d9c:	4824      	ldr	r0, [pc, #144]	; (8008e30 <vTaskStartScheduler+0xc4>)
 8008d9e:	f7ff fdf9 	bl	8008994 <xTaskCreateStatic>
 8008da2:	4603      	mov	r3, r0
 8008da4:	4a23      	ldr	r2, [pc, #140]	; (8008e34 <vTaskStartScheduler+0xc8>)
 8008da6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008da8:	4b22      	ldr	r3, [pc, #136]	; (8008e34 <vTaskStartScheduler+0xc8>)
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d002      	beq.n	8008db6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008db0:	2301      	movs	r3, #1
 8008db2:	617b      	str	r3, [r7, #20]
 8008db4:	e001      	b.n	8008dba <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008db6:	2300      	movs	r3, #0
 8008db8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008dba:	697b      	ldr	r3, [r7, #20]
 8008dbc:	2b01      	cmp	r3, #1
 8008dbe:	d102      	bne.n	8008dc6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008dc0:	f000 fd10 	bl	80097e4 <xTimerCreateTimerTask>
 8008dc4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008dc6:	697b      	ldr	r3, [r7, #20]
 8008dc8:	2b01      	cmp	r3, #1
 8008dca:	d11b      	bne.n	8008e04 <vTaskStartScheduler+0x98>
	__asm volatile
 8008dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dd0:	f383 8811 	msr	BASEPRI, r3
 8008dd4:	f3bf 8f6f 	isb	sy
 8008dd8:	f3bf 8f4f 	dsb	sy
 8008ddc:	613b      	str	r3, [r7, #16]
}
 8008dde:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008de0:	4b15      	ldr	r3, [pc, #84]	; (8008e38 <vTaskStartScheduler+0xcc>)
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	3354      	adds	r3, #84	; 0x54
 8008de6:	4a15      	ldr	r2, [pc, #84]	; (8008e3c <vTaskStartScheduler+0xd0>)
 8008de8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008dea:	4b15      	ldr	r3, [pc, #84]	; (8008e40 <vTaskStartScheduler+0xd4>)
 8008dec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008df0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008df2:	4b14      	ldr	r3, [pc, #80]	; (8008e44 <vTaskStartScheduler+0xd8>)
 8008df4:	2201      	movs	r2, #1
 8008df6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008df8:	4b13      	ldr	r3, [pc, #76]	; (8008e48 <vTaskStartScheduler+0xdc>)
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008dfe:	f001 f8c7 	bl	8009f90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008e02:	e00e      	b.n	8008e22 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008e04:	697b      	ldr	r3, [r7, #20]
 8008e06:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008e0a:	d10a      	bne.n	8008e22 <vTaskStartScheduler+0xb6>
	__asm volatile
 8008e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e10:	f383 8811 	msr	BASEPRI, r3
 8008e14:	f3bf 8f6f 	isb	sy
 8008e18:	f3bf 8f4f 	dsb	sy
 8008e1c:	60fb      	str	r3, [r7, #12]
}
 8008e1e:	bf00      	nop
 8008e20:	e7fe      	b.n	8008e20 <vTaskStartScheduler+0xb4>
}
 8008e22:	bf00      	nop
 8008e24:	3718      	adds	r7, #24
 8008e26:	46bd      	mov	sp, r7
 8008e28:	bd80      	pop	{r7, pc}
 8008e2a:	bf00      	nop
 8008e2c:	0800b2cc 	.word	0x0800b2cc
 8008e30:	08009471 	.word	0x08009471
 8008e34:	20000fd4 	.word	0x20000fd4
 8008e38:	20000adc 	.word	0x20000adc
 8008e3c:	2000014c 	.word	0x2000014c
 8008e40:	20000fd0 	.word	0x20000fd0
 8008e44:	20000fbc 	.word	0x20000fbc
 8008e48:	20000fb4 	.word	0x20000fb4

08008e4c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008e4c:	b480      	push	{r7}
 8008e4e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008e50:	4b04      	ldr	r3, [pc, #16]	; (8008e64 <vTaskSuspendAll+0x18>)
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	3301      	adds	r3, #1
 8008e56:	4a03      	ldr	r2, [pc, #12]	; (8008e64 <vTaskSuspendAll+0x18>)
 8008e58:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008e5a:	bf00      	nop
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e62:	4770      	bx	lr
 8008e64:	20000fd8 	.word	0x20000fd8

08008e68 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b084      	sub	sp, #16
 8008e6c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008e6e:	2300      	movs	r3, #0
 8008e70:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008e72:	2300      	movs	r3, #0
 8008e74:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008e76:	4b42      	ldr	r3, [pc, #264]	; (8008f80 <xTaskResumeAll+0x118>)
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d10a      	bne.n	8008e94 <xTaskResumeAll+0x2c>
	__asm volatile
 8008e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e82:	f383 8811 	msr	BASEPRI, r3
 8008e86:	f3bf 8f6f 	isb	sy
 8008e8a:	f3bf 8f4f 	dsb	sy
 8008e8e:	603b      	str	r3, [r7, #0]
}
 8008e90:	bf00      	nop
 8008e92:	e7fe      	b.n	8008e92 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008e94:	f001 f91e 	bl	800a0d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008e98:	4b39      	ldr	r3, [pc, #228]	; (8008f80 <xTaskResumeAll+0x118>)
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	3b01      	subs	r3, #1
 8008e9e:	4a38      	ldr	r2, [pc, #224]	; (8008f80 <xTaskResumeAll+0x118>)
 8008ea0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008ea2:	4b37      	ldr	r3, [pc, #220]	; (8008f80 <xTaskResumeAll+0x118>)
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d162      	bne.n	8008f70 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008eaa:	4b36      	ldr	r3, [pc, #216]	; (8008f84 <xTaskResumeAll+0x11c>)
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d05e      	beq.n	8008f70 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008eb2:	e02f      	b.n	8008f14 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008eb4:	4b34      	ldr	r3, [pc, #208]	; (8008f88 <xTaskResumeAll+0x120>)
 8008eb6:	68db      	ldr	r3, [r3, #12]
 8008eb8:	68db      	ldr	r3, [r3, #12]
 8008eba:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	3318      	adds	r3, #24
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	f7ff f851 	bl	8007f68 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	3304      	adds	r3, #4
 8008eca:	4618      	mov	r0, r3
 8008ecc:	f7ff f84c 	bl	8007f68 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ed4:	4b2d      	ldr	r3, [pc, #180]	; (8008f8c <xTaskResumeAll+0x124>)
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	429a      	cmp	r2, r3
 8008eda:	d903      	bls.n	8008ee4 <xTaskResumeAll+0x7c>
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ee0:	4a2a      	ldr	r2, [pc, #168]	; (8008f8c <xTaskResumeAll+0x124>)
 8008ee2:	6013      	str	r3, [r2, #0]
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ee8:	4613      	mov	r3, r2
 8008eea:	009b      	lsls	r3, r3, #2
 8008eec:	4413      	add	r3, r2
 8008eee:	009b      	lsls	r3, r3, #2
 8008ef0:	4a27      	ldr	r2, [pc, #156]	; (8008f90 <xTaskResumeAll+0x128>)
 8008ef2:	441a      	add	r2, r3
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	3304      	adds	r3, #4
 8008ef8:	4619      	mov	r1, r3
 8008efa:	4610      	mov	r0, r2
 8008efc:	f7fe ffd7 	bl	8007eae <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f04:	4b23      	ldr	r3, [pc, #140]	; (8008f94 <xTaskResumeAll+0x12c>)
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f0a:	429a      	cmp	r2, r3
 8008f0c:	d302      	bcc.n	8008f14 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008f0e:	4b22      	ldr	r3, [pc, #136]	; (8008f98 <xTaskResumeAll+0x130>)
 8008f10:	2201      	movs	r2, #1
 8008f12:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008f14:	4b1c      	ldr	r3, [pc, #112]	; (8008f88 <xTaskResumeAll+0x120>)
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d1cb      	bne.n	8008eb4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d001      	beq.n	8008f26 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008f22:	f000 fb5f 	bl	80095e4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008f26:	4b1d      	ldr	r3, [pc, #116]	; (8008f9c <xTaskResumeAll+0x134>)
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d010      	beq.n	8008f54 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008f32:	f000 f847 	bl	8008fc4 <xTaskIncrementTick>
 8008f36:	4603      	mov	r3, r0
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d002      	beq.n	8008f42 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008f3c:	4b16      	ldr	r3, [pc, #88]	; (8008f98 <xTaskResumeAll+0x130>)
 8008f3e:	2201      	movs	r2, #1
 8008f40:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	3b01      	subs	r3, #1
 8008f46:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d1f1      	bne.n	8008f32 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8008f4e:	4b13      	ldr	r3, [pc, #76]	; (8008f9c <xTaskResumeAll+0x134>)
 8008f50:	2200      	movs	r2, #0
 8008f52:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008f54:	4b10      	ldr	r3, [pc, #64]	; (8008f98 <xTaskResumeAll+0x130>)
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d009      	beq.n	8008f70 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008f5c:	2301      	movs	r3, #1
 8008f5e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008f60:	4b0f      	ldr	r3, [pc, #60]	; (8008fa0 <xTaskResumeAll+0x138>)
 8008f62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f66:	601a      	str	r2, [r3, #0]
 8008f68:	f3bf 8f4f 	dsb	sy
 8008f6c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008f70:	f001 f8e0 	bl	800a134 <vPortExitCritical>

	return xAlreadyYielded;
 8008f74:	68bb      	ldr	r3, [r7, #8]
}
 8008f76:	4618      	mov	r0, r3
 8008f78:	3710      	adds	r7, #16
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	bd80      	pop	{r7, pc}
 8008f7e:	bf00      	nop
 8008f80:	20000fd8 	.word	0x20000fd8
 8008f84:	20000fb0 	.word	0x20000fb0
 8008f88:	20000f70 	.word	0x20000f70
 8008f8c:	20000fb8 	.word	0x20000fb8
 8008f90:	20000ae0 	.word	0x20000ae0
 8008f94:	20000adc 	.word	0x20000adc
 8008f98:	20000fc4 	.word	0x20000fc4
 8008f9c:	20000fc0 	.word	0x20000fc0
 8008fa0:	e000ed04 	.word	0xe000ed04

08008fa4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008fa4:	b480      	push	{r7}
 8008fa6:	b083      	sub	sp, #12
 8008fa8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008faa:	4b05      	ldr	r3, [pc, #20]	; (8008fc0 <xTaskGetTickCount+0x1c>)
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008fb0:	687b      	ldr	r3, [r7, #4]
}
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	370c      	adds	r7, #12
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fbc:	4770      	bx	lr
 8008fbe:	bf00      	nop
 8008fc0:	20000fb4 	.word	0x20000fb4

08008fc4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b086      	sub	sp, #24
 8008fc8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008fca:	2300      	movs	r3, #0
 8008fcc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008fce:	4b4f      	ldr	r3, [pc, #316]	; (800910c <xTaskIncrementTick+0x148>)
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	f040 808f 	bne.w	80090f6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008fd8:	4b4d      	ldr	r3, [pc, #308]	; (8009110 <xTaskIncrementTick+0x14c>)
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	3301      	adds	r3, #1
 8008fde:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008fe0:	4a4b      	ldr	r2, [pc, #300]	; (8009110 <xTaskIncrementTick+0x14c>)
 8008fe2:	693b      	ldr	r3, [r7, #16]
 8008fe4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008fe6:	693b      	ldr	r3, [r7, #16]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d120      	bne.n	800902e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008fec:	4b49      	ldr	r3, [pc, #292]	; (8009114 <xTaskIncrementTick+0x150>)
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d00a      	beq.n	800900c <xTaskIncrementTick+0x48>
	__asm volatile
 8008ff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ffa:	f383 8811 	msr	BASEPRI, r3
 8008ffe:	f3bf 8f6f 	isb	sy
 8009002:	f3bf 8f4f 	dsb	sy
 8009006:	603b      	str	r3, [r7, #0]
}
 8009008:	bf00      	nop
 800900a:	e7fe      	b.n	800900a <xTaskIncrementTick+0x46>
 800900c:	4b41      	ldr	r3, [pc, #260]	; (8009114 <xTaskIncrementTick+0x150>)
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	60fb      	str	r3, [r7, #12]
 8009012:	4b41      	ldr	r3, [pc, #260]	; (8009118 <xTaskIncrementTick+0x154>)
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	4a3f      	ldr	r2, [pc, #252]	; (8009114 <xTaskIncrementTick+0x150>)
 8009018:	6013      	str	r3, [r2, #0]
 800901a:	4a3f      	ldr	r2, [pc, #252]	; (8009118 <xTaskIncrementTick+0x154>)
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	6013      	str	r3, [r2, #0]
 8009020:	4b3e      	ldr	r3, [pc, #248]	; (800911c <xTaskIncrementTick+0x158>)
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	3301      	adds	r3, #1
 8009026:	4a3d      	ldr	r2, [pc, #244]	; (800911c <xTaskIncrementTick+0x158>)
 8009028:	6013      	str	r3, [r2, #0]
 800902a:	f000 fadb 	bl	80095e4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800902e:	4b3c      	ldr	r3, [pc, #240]	; (8009120 <xTaskIncrementTick+0x15c>)
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	693a      	ldr	r2, [r7, #16]
 8009034:	429a      	cmp	r2, r3
 8009036:	d349      	bcc.n	80090cc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009038:	4b36      	ldr	r3, [pc, #216]	; (8009114 <xTaskIncrementTick+0x150>)
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d104      	bne.n	800904c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009042:	4b37      	ldr	r3, [pc, #220]	; (8009120 <xTaskIncrementTick+0x15c>)
 8009044:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009048:	601a      	str	r2, [r3, #0]
					break;
 800904a:	e03f      	b.n	80090cc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800904c:	4b31      	ldr	r3, [pc, #196]	; (8009114 <xTaskIncrementTick+0x150>)
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	68db      	ldr	r3, [r3, #12]
 8009052:	68db      	ldr	r3, [r3, #12]
 8009054:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009056:	68bb      	ldr	r3, [r7, #8]
 8009058:	685b      	ldr	r3, [r3, #4]
 800905a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800905c:	693a      	ldr	r2, [r7, #16]
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	429a      	cmp	r2, r3
 8009062:	d203      	bcs.n	800906c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009064:	4a2e      	ldr	r2, [pc, #184]	; (8009120 <xTaskIncrementTick+0x15c>)
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800906a:	e02f      	b.n	80090cc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800906c:	68bb      	ldr	r3, [r7, #8]
 800906e:	3304      	adds	r3, #4
 8009070:	4618      	mov	r0, r3
 8009072:	f7fe ff79 	bl	8007f68 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009076:	68bb      	ldr	r3, [r7, #8]
 8009078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800907a:	2b00      	cmp	r3, #0
 800907c:	d004      	beq.n	8009088 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800907e:	68bb      	ldr	r3, [r7, #8]
 8009080:	3318      	adds	r3, #24
 8009082:	4618      	mov	r0, r3
 8009084:	f7fe ff70 	bl	8007f68 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009088:	68bb      	ldr	r3, [r7, #8]
 800908a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800908c:	4b25      	ldr	r3, [pc, #148]	; (8009124 <xTaskIncrementTick+0x160>)
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	429a      	cmp	r2, r3
 8009092:	d903      	bls.n	800909c <xTaskIncrementTick+0xd8>
 8009094:	68bb      	ldr	r3, [r7, #8]
 8009096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009098:	4a22      	ldr	r2, [pc, #136]	; (8009124 <xTaskIncrementTick+0x160>)
 800909a:	6013      	str	r3, [r2, #0]
 800909c:	68bb      	ldr	r3, [r7, #8]
 800909e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090a0:	4613      	mov	r3, r2
 80090a2:	009b      	lsls	r3, r3, #2
 80090a4:	4413      	add	r3, r2
 80090a6:	009b      	lsls	r3, r3, #2
 80090a8:	4a1f      	ldr	r2, [pc, #124]	; (8009128 <xTaskIncrementTick+0x164>)
 80090aa:	441a      	add	r2, r3
 80090ac:	68bb      	ldr	r3, [r7, #8]
 80090ae:	3304      	adds	r3, #4
 80090b0:	4619      	mov	r1, r3
 80090b2:	4610      	mov	r0, r2
 80090b4:	f7fe fefb 	bl	8007eae <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80090b8:	68bb      	ldr	r3, [r7, #8]
 80090ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090bc:	4b1b      	ldr	r3, [pc, #108]	; (800912c <xTaskIncrementTick+0x168>)
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090c2:	429a      	cmp	r2, r3
 80090c4:	d3b8      	bcc.n	8009038 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80090c6:	2301      	movs	r3, #1
 80090c8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80090ca:	e7b5      	b.n	8009038 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80090cc:	4b17      	ldr	r3, [pc, #92]	; (800912c <xTaskIncrementTick+0x168>)
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090d2:	4915      	ldr	r1, [pc, #84]	; (8009128 <xTaskIncrementTick+0x164>)
 80090d4:	4613      	mov	r3, r2
 80090d6:	009b      	lsls	r3, r3, #2
 80090d8:	4413      	add	r3, r2
 80090da:	009b      	lsls	r3, r3, #2
 80090dc:	440b      	add	r3, r1
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	2b01      	cmp	r3, #1
 80090e2:	d901      	bls.n	80090e8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80090e4:	2301      	movs	r3, #1
 80090e6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80090e8:	4b11      	ldr	r3, [pc, #68]	; (8009130 <xTaskIncrementTick+0x16c>)
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d007      	beq.n	8009100 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80090f0:	2301      	movs	r3, #1
 80090f2:	617b      	str	r3, [r7, #20]
 80090f4:	e004      	b.n	8009100 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80090f6:	4b0f      	ldr	r3, [pc, #60]	; (8009134 <xTaskIncrementTick+0x170>)
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	3301      	adds	r3, #1
 80090fc:	4a0d      	ldr	r2, [pc, #52]	; (8009134 <xTaskIncrementTick+0x170>)
 80090fe:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009100:	697b      	ldr	r3, [r7, #20]
}
 8009102:	4618      	mov	r0, r3
 8009104:	3718      	adds	r7, #24
 8009106:	46bd      	mov	sp, r7
 8009108:	bd80      	pop	{r7, pc}
 800910a:	bf00      	nop
 800910c:	20000fd8 	.word	0x20000fd8
 8009110:	20000fb4 	.word	0x20000fb4
 8009114:	20000f68 	.word	0x20000f68
 8009118:	20000f6c 	.word	0x20000f6c
 800911c:	20000fc8 	.word	0x20000fc8
 8009120:	20000fd0 	.word	0x20000fd0
 8009124:	20000fb8 	.word	0x20000fb8
 8009128:	20000ae0 	.word	0x20000ae0
 800912c:	20000adc 	.word	0x20000adc
 8009130:	20000fc4 	.word	0x20000fc4
 8009134:	20000fc0 	.word	0x20000fc0

08009138 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009138:	b480      	push	{r7}
 800913a:	b085      	sub	sp, #20
 800913c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800913e:	4b2a      	ldr	r3, [pc, #168]	; (80091e8 <vTaskSwitchContext+0xb0>)
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	2b00      	cmp	r3, #0
 8009144:	d003      	beq.n	800914e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009146:	4b29      	ldr	r3, [pc, #164]	; (80091ec <vTaskSwitchContext+0xb4>)
 8009148:	2201      	movs	r2, #1
 800914a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800914c:	e046      	b.n	80091dc <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800914e:	4b27      	ldr	r3, [pc, #156]	; (80091ec <vTaskSwitchContext+0xb4>)
 8009150:	2200      	movs	r2, #0
 8009152:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009154:	4b26      	ldr	r3, [pc, #152]	; (80091f0 <vTaskSwitchContext+0xb8>)
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	60fb      	str	r3, [r7, #12]
 800915a:	e010      	b.n	800917e <vTaskSwitchContext+0x46>
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	2b00      	cmp	r3, #0
 8009160:	d10a      	bne.n	8009178 <vTaskSwitchContext+0x40>
	__asm volatile
 8009162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009166:	f383 8811 	msr	BASEPRI, r3
 800916a:	f3bf 8f6f 	isb	sy
 800916e:	f3bf 8f4f 	dsb	sy
 8009172:	607b      	str	r3, [r7, #4]
}
 8009174:	bf00      	nop
 8009176:	e7fe      	b.n	8009176 <vTaskSwitchContext+0x3e>
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	3b01      	subs	r3, #1
 800917c:	60fb      	str	r3, [r7, #12]
 800917e:	491d      	ldr	r1, [pc, #116]	; (80091f4 <vTaskSwitchContext+0xbc>)
 8009180:	68fa      	ldr	r2, [r7, #12]
 8009182:	4613      	mov	r3, r2
 8009184:	009b      	lsls	r3, r3, #2
 8009186:	4413      	add	r3, r2
 8009188:	009b      	lsls	r3, r3, #2
 800918a:	440b      	add	r3, r1
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	2b00      	cmp	r3, #0
 8009190:	d0e4      	beq.n	800915c <vTaskSwitchContext+0x24>
 8009192:	68fa      	ldr	r2, [r7, #12]
 8009194:	4613      	mov	r3, r2
 8009196:	009b      	lsls	r3, r3, #2
 8009198:	4413      	add	r3, r2
 800919a:	009b      	lsls	r3, r3, #2
 800919c:	4a15      	ldr	r2, [pc, #84]	; (80091f4 <vTaskSwitchContext+0xbc>)
 800919e:	4413      	add	r3, r2
 80091a0:	60bb      	str	r3, [r7, #8]
 80091a2:	68bb      	ldr	r3, [r7, #8]
 80091a4:	685b      	ldr	r3, [r3, #4]
 80091a6:	685a      	ldr	r2, [r3, #4]
 80091a8:	68bb      	ldr	r3, [r7, #8]
 80091aa:	605a      	str	r2, [r3, #4]
 80091ac:	68bb      	ldr	r3, [r7, #8]
 80091ae:	685a      	ldr	r2, [r3, #4]
 80091b0:	68bb      	ldr	r3, [r7, #8]
 80091b2:	3308      	adds	r3, #8
 80091b4:	429a      	cmp	r2, r3
 80091b6:	d104      	bne.n	80091c2 <vTaskSwitchContext+0x8a>
 80091b8:	68bb      	ldr	r3, [r7, #8]
 80091ba:	685b      	ldr	r3, [r3, #4]
 80091bc:	685a      	ldr	r2, [r3, #4]
 80091be:	68bb      	ldr	r3, [r7, #8]
 80091c0:	605a      	str	r2, [r3, #4]
 80091c2:	68bb      	ldr	r3, [r7, #8]
 80091c4:	685b      	ldr	r3, [r3, #4]
 80091c6:	68db      	ldr	r3, [r3, #12]
 80091c8:	4a0b      	ldr	r2, [pc, #44]	; (80091f8 <vTaskSwitchContext+0xc0>)
 80091ca:	6013      	str	r3, [r2, #0]
 80091cc:	4a08      	ldr	r2, [pc, #32]	; (80091f0 <vTaskSwitchContext+0xb8>)
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80091d2:	4b09      	ldr	r3, [pc, #36]	; (80091f8 <vTaskSwitchContext+0xc0>)
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	3354      	adds	r3, #84	; 0x54
 80091d8:	4a08      	ldr	r2, [pc, #32]	; (80091fc <vTaskSwitchContext+0xc4>)
 80091da:	6013      	str	r3, [r2, #0]
}
 80091dc:	bf00      	nop
 80091de:	3714      	adds	r7, #20
 80091e0:	46bd      	mov	sp, r7
 80091e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e6:	4770      	bx	lr
 80091e8:	20000fd8 	.word	0x20000fd8
 80091ec:	20000fc4 	.word	0x20000fc4
 80091f0:	20000fb8 	.word	0x20000fb8
 80091f4:	20000ae0 	.word	0x20000ae0
 80091f8:	20000adc 	.word	0x20000adc
 80091fc:	2000014c 	.word	0x2000014c

08009200 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009200:	b580      	push	{r7, lr}
 8009202:	b084      	sub	sp, #16
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]
 8009208:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	2b00      	cmp	r3, #0
 800920e:	d10a      	bne.n	8009226 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009214:	f383 8811 	msr	BASEPRI, r3
 8009218:	f3bf 8f6f 	isb	sy
 800921c:	f3bf 8f4f 	dsb	sy
 8009220:	60fb      	str	r3, [r7, #12]
}
 8009222:	bf00      	nop
 8009224:	e7fe      	b.n	8009224 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009226:	4b07      	ldr	r3, [pc, #28]	; (8009244 <vTaskPlaceOnEventList+0x44>)
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	3318      	adds	r3, #24
 800922c:	4619      	mov	r1, r3
 800922e:	6878      	ldr	r0, [r7, #4]
 8009230:	f7fe fe61 	bl	8007ef6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009234:	2101      	movs	r1, #1
 8009236:	6838      	ldr	r0, [r7, #0]
 8009238:	f000 fa80 	bl	800973c <prvAddCurrentTaskToDelayedList>
}
 800923c:	bf00      	nop
 800923e:	3710      	adds	r7, #16
 8009240:	46bd      	mov	sp, r7
 8009242:	bd80      	pop	{r7, pc}
 8009244:	20000adc 	.word	0x20000adc

08009248 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009248:	b580      	push	{r7, lr}
 800924a:	b086      	sub	sp, #24
 800924c:	af00      	add	r7, sp, #0
 800924e:	60f8      	str	r0, [r7, #12]
 8009250:	60b9      	str	r1, [r7, #8]
 8009252:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	2b00      	cmp	r3, #0
 8009258:	d10a      	bne.n	8009270 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800925a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800925e:	f383 8811 	msr	BASEPRI, r3
 8009262:	f3bf 8f6f 	isb	sy
 8009266:	f3bf 8f4f 	dsb	sy
 800926a:	617b      	str	r3, [r7, #20]
}
 800926c:	bf00      	nop
 800926e:	e7fe      	b.n	800926e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009270:	4b0a      	ldr	r3, [pc, #40]	; (800929c <vTaskPlaceOnEventListRestricted+0x54>)
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	3318      	adds	r3, #24
 8009276:	4619      	mov	r1, r3
 8009278:	68f8      	ldr	r0, [r7, #12]
 800927a:	f7fe fe18 	bl	8007eae <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	2b00      	cmp	r3, #0
 8009282:	d002      	beq.n	800928a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8009284:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009288:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800928a:	6879      	ldr	r1, [r7, #4]
 800928c:	68b8      	ldr	r0, [r7, #8]
 800928e:	f000 fa55 	bl	800973c <prvAddCurrentTaskToDelayedList>
	}
 8009292:	bf00      	nop
 8009294:	3718      	adds	r7, #24
 8009296:	46bd      	mov	sp, r7
 8009298:	bd80      	pop	{r7, pc}
 800929a:	bf00      	nop
 800929c:	20000adc 	.word	0x20000adc

080092a0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b086      	sub	sp, #24
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	68db      	ldr	r3, [r3, #12]
 80092ac:	68db      	ldr	r3, [r3, #12]
 80092ae:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80092b0:	693b      	ldr	r3, [r7, #16]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d10a      	bne.n	80092cc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80092b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092ba:	f383 8811 	msr	BASEPRI, r3
 80092be:	f3bf 8f6f 	isb	sy
 80092c2:	f3bf 8f4f 	dsb	sy
 80092c6:	60fb      	str	r3, [r7, #12]
}
 80092c8:	bf00      	nop
 80092ca:	e7fe      	b.n	80092ca <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80092cc:	693b      	ldr	r3, [r7, #16]
 80092ce:	3318      	adds	r3, #24
 80092d0:	4618      	mov	r0, r3
 80092d2:	f7fe fe49 	bl	8007f68 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80092d6:	4b1e      	ldr	r3, [pc, #120]	; (8009350 <xTaskRemoveFromEventList+0xb0>)
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d11d      	bne.n	800931a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80092de:	693b      	ldr	r3, [r7, #16]
 80092e0:	3304      	adds	r3, #4
 80092e2:	4618      	mov	r0, r3
 80092e4:	f7fe fe40 	bl	8007f68 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80092e8:	693b      	ldr	r3, [r7, #16]
 80092ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092ec:	4b19      	ldr	r3, [pc, #100]	; (8009354 <xTaskRemoveFromEventList+0xb4>)
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	429a      	cmp	r2, r3
 80092f2:	d903      	bls.n	80092fc <xTaskRemoveFromEventList+0x5c>
 80092f4:	693b      	ldr	r3, [r7, #16]
 80092f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092f8:	4a16      	ldr	r2, [pc, #88]	; (8009354 <xTaskRemoveFromEventList+0xb4>)
 80092fa:	6013      	str	r3, [r2, #0]
 80092fc:	693b      	ldr	r3, [r7, #16]
 80092fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009300:	4613      	mov	r3, r2
 8009302:	009b      	lsls	r3, r3, #2
 8009304:	4413      	add	r3, r2
 8009306:	009b      	lsls	r3, r3, #2
 8009308:	4a13      	ldr	r2, [pc, #76]	; (8009358 <xTaskRemoveFromEventList+0xb8>)
 800930a:	441a      	add	r2, r3
 800930c:	693b      	ldr	r3, [r7, #16]
 800930e:	3304      	adds	r3, #4
 8009310:	4619      	mov	r1, r3
 8009312:	4610      	mov	r0, r2
 8009314:	f7fe fdcb 	bl	8007eae <vListInsertEnd>
 8009318:	e005      	b.n	8009326 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800931a:	693b      	ldr	r3, [r7, #16]
 800931c:	3318      	adds	r3, #24
 800931e:	4619      	mov	r1, r3
 8009320:	480e      	ldr	r0, [pc, #56]	; (800935c <xTaskRemoveFromEventList+0xbc>)
 8009322:	f7fe fdc4 	bl	8007eae <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009326:	693b      	ldr	r3, [r7, #16]
 8009328:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800932a:	4b0d      	ldr	r3, [pc, #52]	; (8009360 <xTaskRemoveFromEventList+0xc0>)
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009330:	429a      	cmp	r2, r3
 8009332:	d905      	bls.n	8009340 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009334:	2301      	movs	r3, #1
 8009336:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009338:	4b0a      	ldr	r3, [pc, #40]	; (8009364 <xTaskRemoveFromEventList+0xc4>)
 800933a:	2201      	movs	r2, #1
 800933c:	601a      	str	r2, [r3, #0]
 800933e:	e001      	b.n	8009344 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009340:	2300      	movs	r3, #0
 8009342:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009344:	697b      	ldr	r3, [r7, #20]
}
 8009346:	4618      	mov	r0, r3
 8009348:	3718      	adds	r7, #24
 800934a:	46bd      	mov	sp, r7
 800934c:	bd80      	pop	{r7, pc}
 800934e:	bf00      	nop
 8009350:	20000fd8 	.word	0x20000fd8
 8009354:	20000fb8 	.word	0x20000fb8
 8009358:	20000ae0 	.word	0x20000ae0
 800935c:	20000f70 	.word	0x20000f70
 8009360:	20000adc 	.word	0x20000adc
 8009364:	20000fc4 	.word	0x20000fc4

08009368 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009368:	b480      	push	{r7}
 800936a:	b083      	sub	sp, #12
 800936c:	af00      	add	r7, sp, #0
 800936e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009370:	4b06      	ldr	r3, [pc, #24]	; (800938c <vTaskInternalSetTimeOutState+0x24>)
 8009372:	681a      	ldr	r2, [r3, #0]
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009378:	4b05      	ldr	r3, [pc, #20]	; (8009390 <vTaskInternalSetTimeOutState+0x28>)
 800937a:	681a      	ldr	r2, [r3, #0]
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	605a      	str	r2, [r3, #4]
}
 8009380:	bf00      	nop
 8009382:	370c      	adds	r7, #12
 8009384:	46bd      	mov	sp, r7
 8009386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938a:	4770      	bx	lr
 800938c:	20000fc8 	.word	0x20000fc8
 8009390:	20000fb4 	.word	0x20000fb4

08009394 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009394:	b580      	push	{r7, lr}
 8009396:	b088      	sub	sp, #32
 8009398:	af00      	add	r7, sp, #0
 800939a:	6078      	str	r0, [r7, #4]
 800939c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d10a      	bne.n	80093ba <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80093a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093a8:	f383 8811 	msr	BASEPRI, r3
 80093ac:	f3bf 8f6f 	isb	sy
 80093b0:	f3bf 8f4f 	dsb	sy
 80093b4:	613b      	str	r3, [r7, #16]
}
 80093b6:	bf00      	nop
 80093b8:	e7fe      	b.n	80093b8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80093ba:	683b      	ldr	r3, [r7, #0]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d10a      	bne.n	80093d6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80093c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093c4:	f383 8811 	msr	BASEPRI, r3
 80093c8:	f3bf 8f6f 	isb	sy
 80093cc:	f3bf 8f4f 	dsb	sy
 80093d0:	60fb      	str	r3, [r7, #12]
}
 80093d2:	bf00      	nop
 80093d4:	e7fe      	b.n	80093d4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80093d6:	f000 fe7d 	bl	800a0d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80093da:	4b1d      	ldr	r3, [pc, #116]	; (8009450 <xTaskCheckForTimeOut+0xbc>)
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	685b      	ldr	r3, [r3, #4]
 80093e4:	69ba      	ldr	r2, [r7, #24]
 80093e6:	1ad3      	subs	r3, r2, r3
 80093e8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80093ea:	683b      	ldr	r3, [r7, #0]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80093f2:	d102      	bne.n	80093fa <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80093f4:	2300      	movs	r3, #0
 80093f6:	61fb      	str	r3, [r7, #28]
 80093f8:	e023      	b.n	8009442 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681a      	ldr	r2, [r3, #0]
 80093fe:	4b15      	ldr	r3, [pc, #84]	; (8009454 <xTaskCheckForTimeOut+0xc0>)
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	429a      	cmp	r2, r3
 8009404:	d007      	beq.n	8009416 <xTaskCheckForTimeOut+0x82>
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	685b      	ldr	r3, [r3, #4]
 800940a:	69ba      	ldr	r2, [r7, #24]
 800940c:	429a      	cmp	r2, r3
 800940e:	d302      	bcc.n	8009416 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009410:	2301      	movs	r3, #1
 8009412:	61fb      	str	r3, [r7, #28]
 8009414:	e015      	b.n	8009442 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009416:	683b      	ldr	r3, [r7, #0]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	697a      	ldr	r2, [r7, #20]
 800941c:	429a      	cmp	r2, r3
 800941e:	d20b      	bcs.n	8009438 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009420:	683b      	ldr	r3, [r7, #0]
 8009422:	681a      	ldr	r2, [r3, #0]
 8009424:	697b      	ldr	r3, [r7, #20]
 8009426:	1ad2      	subs	r2, r2, r3
 8009428:	683b      	ldr	r3, [r7, #0]
 800942a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800942c:	6878      	ldr	r0, [r7, #4]
 800942e:	f7ff ff9b 	bl	8009368 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009432:	2300      	movs	r3, #0
 8009434:	61fb      	str	r3, [r7, #28]
 8009436:	e004      	b.n	8009442 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009438:	683b      	ldr	r3, [r7, #0]
 800943a:	2200      	movs	r2, #0
 800943c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800943e:	2301      	movs	r3, #1
 8009440:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009442:	f000 fe77 	bl	800a134 <vPortExitCritical>

	return xReturn;
 8009446:	69fb      	ldr	r3, [r7, #28]
}
 8009448:	4618      	mov	r0, r3
 800944a:	3720      	adds	r7, #32
 800944c:	46bd      	mov	sp, r7
 800944e:	bd80      	pop	{r7, pc}
 8009450:	20000fb4 	.word	0x20000fb4
 8009454:	20000fc8 	.word	0x20000fc8

08009458 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009458:	b480      	push	{r7}
 800945a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800945c:	4b03      	ldr	r3, [pc, #12]	; (800946c <vTaskMissedYield+0x14>)
 800945e:	2201      	movs	r2, #1
 8009460:	601a      	str	r2, [r3, #0]
}
 8009462:	bf00      	nop
 8009464:	46bd      	mov	sp, r7
 8009466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946a:	4770      	bx	lr
 800946c:	20000fc4 	.word	0x20000fc4

08009470 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009470:	b580      	push	{r7, lr}
 8009472:	b082      	sub	sp, #8
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009478:	f000 f852 	bl	8009520 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800947c:	4b06      	ldr	r3, [pc, #24]	; (8009498 <prvIdleTask+0x28>)
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	2b01      	cmp	r3, #1
 8009482:	d9f9      	bls.n	8009478 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009484:	4b05      	ldr	r3, [pc, #20]	; (800949c <prvIdleTask+0x2c>)
 8009486:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800948a:	601a      	str	r2, [r3, #0]
 800948c:	f3bf 8f4f 	dsb	sy
 8009490:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009494:	e7f0      	b.n	8009478 <prvIdleTask+0x8>
 8009496:	bf00      	nop
 8009498:	20000ae0 	.word	0x20000ae0
 800949c:	e000ed04 	.word	0xe000ed04

080094a0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b082      	sub	sp, #8
 80094a4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80094a6:	2300      	movs	r3, #0
 80094a8:	607b      	str	r3, [r7, #4]
 80094aa:	e00c      	b.n	80094c6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80094ac:	687a      	ldr	r2, [r7, #4]
 80094ae:	4613      	mov	r3, r2
 80094b0:	009b      	lsls	r3, r3, #2
 80094b2:	4413      	add	r3, r2
 80094b4:	009b      	lsls	r3, r3, #2
 80094b6:	4a12      	ldr	r2, [pc, #72]	; (8009500 <prvInitialiseTaskLists+0x60>)
 80094b8:	4413      	add	r3, r2
 80094ba:	4618      	mov	r0, r3
 80094bc:	f7fe fcca 	bl	8007e54 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	3301      	adds	r3, #1
 80094c4:	607b      	str	r3, [r7, #4]
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	2b37      	cmp	r3, #55	; 0x37
 80094ca:	d9ef      	bls.n	80094ac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80094cc:	480d      	ldr	r0, [pc, #52]	; (8009504 <prvInitialiseTaskLists+0x64>)
 80094ce:	f7fe fcc1 	bl	8007e54 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80094d2:	480d      	ldr	r0, [pc, #52]	; (8009508 <prvInitialiseTaskLists+0x68>)
 80094d4:	f7fe fcbe 	bl	8007e54 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80094d8:	480c      	ldr	r0, [pc, #48]	; (800950c <prvInitialiseTaskLists+0x6c>)
 80094da:	f7fe fcbb 	bl	8007e54 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80094de:	480c      	ldr	r0, [pc, #48]	; (8009510 <prvInitialiseTaskLists+0x70>)
 80094e0:	f7fe fcb8 	bl	8007e54 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80094e4:	480b      	ldr	r0, [pc, #44]	; (8009514 <prvInitialiseTaskLists+0x74>)
 80094e6:	f7fe fcb5 	bl	8007e54 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80094ea:	4b0b      	ldr	r3, [pc, #44]	; (8009518 <prvInitialiseTaskLists+0x78>)
 80094ec:	4a05      	ldr	r2, [pc, #20]	; (8009504 <prvInitialiseTaskLists+0x64>)
 80094ee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80094f0:	4b0a      	ldr	r3, [pc, #40]	; (800951c <prvInitialiseTaskLists+0x7c>)
 80094f2:	4a05      	ldr	r2, [pc, #20]	; (8009508 <prvInitialiseTaskLists+0x68>)
 80094f4:	601a      	str	r2, [r3, #0]
}
 80094f6:	bf00      	nop
 80094f8:	3708      	adds	r7, #8
 80094fa:	46bd      	mov	sp, r7
 80094fc:	bd80      	pop	{r7, pc}
 80094fe:	bf00      	nop
 8009500:	20000ae0 	.word	0x20000ae0
 8009504:	20000f40 	.word	0x20000f40
 8009508:	20000f54 	.word	0x20000f54
 800950c:	20000f70 	.word	0x20000f70
 8009510:	20000f84 	.word	0x20000f84
 8009514:	20000f9c 	.word	0x20000f9c
 8009518:	20000f68 	.word	0x20000f68
 800951c:	20000f6c 	.word	0x20000f6c

08009520 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009520:	b580      	push	{r7, lr}
 8009522:	b082      	sub	sp, #8
 8009524:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009526:	e019      	b.n	800955c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009528:	f000 fdd4 	bl	800a0d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800952c:	4b10      	ldr	r3, [pc, #64]	; (8009570 <prvCheckTasksWaitingTermination+0x50>)
 800952e:	68db      	ldr	r3, [r3, #12]
 8009530:	68db      	ldr	r3, [r3, #12]
 8009532:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	3304      	adds	r3, #4
 8009538:	4618      	mov	r0, r3
 800953a:	f7fe fd15 	bl	8007f68 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800953e:	4b0d      	ldr	r3, [pc, #52]	; (8009574 <prvCheckTasksWaitingTermination+0x54>)
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	3b01      	subs	r3, #1
 8009544:	4a0b      	ldr	r2, [pc, #44]	; (8009574 <prvCheckTasksWaitingTermination+0x54>)
 8009546:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009548:	4b0b      	ldr	r3, [pc, #44]	; (8009578 <prvCheckTasksWaitingTermination+0x58>)
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	3b01      	subs	r3, #1
 800954e:	4a0a      	ldr	r2, [pc, #40]	; (8009578 <prvCheckTasksWaitingTermination+0x58>)
 8009550:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009552:	f000 fdef 	bl	800a134 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009556:	6878      	ldr	r0, [r7, #4]
 8009558:	f000 f810 	bl	800957c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800955c:	4b06      	ldr	r3, [pc, #24]	; (8009578 <prvCheckTasksWaitingTermination+0x58>)
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	2b00      	cmp	r3, #0
 8009562:	d1e1      	bne.n	8009528 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009564:	bf00      	nop
 8009566:	bf00      	nop
 8009568:	3708      	adds	r7, #8
 800956a:	46bd      	mov	sp, r7
 800956c:	bd80      	pop	{r7, pc}
 800956e:	bf00      	nop
 8009570:	20000f84 	.word	0x20000f84
 8009574:	20000fb0 	.word	0x20000fb0
 8009578:	20000f98 	.word	0x20000f98

0800957c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800957c:	b580      	push	{r7, lr}
 800957e:	b084      	sub	sp, #16
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	3354      	adds	r3, #84	; 0x54
 8009588:	4618      	mov	r0, r3
 800958a:	f001 fdb7 	bl	800b0fc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8009594:	2b00      	cmp	r3, #0
 8009596:	d108      	bne.n	80095aa <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800959c:	4618      	mov	r0, r3
 800959e:	f000 ff87 	bl	800a4b0 <vPortFree>
				vPortFree( pxTCB );
 80095a2:	6878      	ldr	r0, [r7, #4]
 80095a4:	f000 ff84 	bl	800a4b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80095a8:	e018      	b.n	80095dc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80095b0:	2b01      	cmp	r3, #1
 80095b2:	d103      	bne.n	80095bc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80095b4:	6878      	ldr	r0, [r7, #4]
 80095b6:	f000 ff7b 	bl	800a4b0 <vPortFree>
	}
 80095ba:	e00f      	b.n	80095dc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80095c2:	2b02      	cmp	r3, #2
 80095c4:	d00a      	beq.n	80095dc <prvDeleteTCB+0x60>
	__asm volatile
 80095c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095ca:	f383 8811 	msr	BASEPRI, r3
 80095ce:	f3bf 8f6f 	isb	sy
 80095d2:	f3bf 8f4f 	dsb	sy
 80095d6:	60fb      	str	r3, [r7, #12]
}
 80095d8:	bf00      	nop
 80095da:	e7fe      	b.n	80095da <prvDeleteTCB+0x5e>
	}
 80095dc:	bf00      	nop
 80095de:	3710      	adds	r7, #16
 80095e0:	46bd      	mov	sp, r7
 80095e2:	bd80      	pop	{r7, pc}

080095e4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80095e4:	b480      	push	{r7}
 80095e6:	b083      	sub	sp, #12
 80095e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80095ea:	4b0c      	ldr	r3, [pc, #48]	; (800961c <prvResetNextTaskUnblockTime+0x38>)
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d104      	bne.n	80095fe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80095f4:	4b0a      	ldr	r3, [pc, #40]	; (8009620 <prvResetNextTaskUnblockTime+0x3c>)
 80095f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80095fa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80095fc:	e008      	b.n	8009610 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80095fe:	4b07      	ldr	r3, [pc, #28]	; (800961c <prvResetNextTaskUnblockTime+0x38>)
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	68db      	ldr	r3, [r3, #12]
 8009604:	68db      	ldr	r3, [r3, #12]
 8009606:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	685b      	ldr	r3, [r3, #4]
 800960c:	4a04      	ldr	r2, [pc, #16]	; (8009620 <prvResetNextTaskUnblockTime+0x3c>)
 800960e:	6013      	str	r3, [r2, #0]
}
 8009610:	bf00      	nop
 8009612:	370c      	adds	r7, #12
 8009614:	46bd      	mov	sp, r7
 8009616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961a:	4770      	bx	lr
 800961c:	20000f68 	.word	0x20000f68
 8009620:	20000fd0 	.word	0x20000fd0

08009624 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009624:	b480      	push	{r7}
 8009626:	b083      	sub	sp, #12
 8009628:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800962a:	4b0b      	ldr	r3, [pc, #44]	; (8009658 <xTaskGetSchedulerState+0x34>)
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	2b00      	cmp	r3, #0
 8009630:	d102      	bne.n	8009638 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009632:	2301      	movs	r3, #1
 8009634:	607b      	str	r3, [r7, #4]
 8009636:	e008      	b.n	800964a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009638:	4b08      	ldr	r3, [pc, #32]	; (800965c <xTaskGetSchedulerState+0x38>)
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	2b00      	cmp	r3, #0
 800963e:	d102      	bne.n	8009646 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009640:	2302      	movs	r3, #2
 8009642:	607b      	str	r3, [r7, #4]
 8009644:	e001      	b.n	800964a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009646:	2300      	movs	r3, #0
 8009648:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800964a:	687b      	ldr	r3, [r7, #4]
	}
 800964c:	4618      	mov	r0, r3
 800964e:	370c      	adds	r7, #12
 8009650:	46bd      	mov	sp, r7
 8009652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009656:	4770      	bx	lr
 8009658:	20000fbc 	.word	0x20000fbc
 800965c:	20000fd8 	.word	0x20000fd8

08009660 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009660:	b580      	push	{r7, lr}
 8009662:	b086      	sub	sp, #24
 8009664:	af00      	add	r7, sp, #0
 8009666:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800966c:	2300      	movs	r3, #0
 800966e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	2b00      	cmp	r3, #0
 8009674:	d056      	beq.n	8009724 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009676:	4b2e      	ldr	r3, [pc, #184]	; (8009730 <xTaskPriorityDisinherit+0xd0>)
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	693a      	ldr	r2, [r7, #16]
 800967c:	429a      	cmp	r2, r3
 800967e:	d00a      	beq.n	8009696 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009684:	f383 8811 	msr	BASEPRI, r3
 8009688:	f3bf 8f6f 	isb	sy
 800968c:	f3bf 8f4f 	dsb	sy
 8009690:	60fb      	str	r3, [r7, #12]
}
 8009692:	bf00      	nop
 8009694:	e7fe      	b.n	8009694 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009696:	693b      	ldr	r3, [r7, #16]
 8009698:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800969a:	2b00      	cmp	r3, #0
 800969c:	d10a      	bne.n	80096b4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800969e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096a2:	f383 8811 	msr	BASEPRI, r3
 80096a6:	f3bf 8f6f 	isb	sy
 80096aa:	f3bf 8f4f 	dsb	sy
 80096ae:	60bb      	str	r3, [r7, #8]
}
 80096b0:	bf00      	nop
 80096b2:	e7fe      	b.n	80096b2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80096b4:	693b      	ldr	r3, [r7, #16]
 80096b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80096b8:	1e5a      	subs	r2, r3, #1
 80096ba:	693b      	ldr	r3, [r7, #16]
 80096bc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80096be:	693b      	ldr	r3, [r7, #16]
 80096c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096c2:	693b      	ldr	r3, [r7, #16]
 80096c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80096c6:	429a      	cmp	r2, r3
 80096c8:	d02c      	beq.n	8009724 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80096ca:	693b      	ldr	r3, [r7, #16]
 80096cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d128      	bne.n	8009724 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80096d2:	693b      	ldr	r3, [r7, #16]
 80096d4:	3304      	adds	r3, #4
 80096d6:	4618      	mov	r0, r3
 80096d8:	f7fe fc46 	bl	8007f68 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80096dc:	693b      	ldr	r3, [r7, #16]
 80096de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80096e0:	693b      	ldr	r3, [r7, #16]
 80096e2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80096e4:	693b      	ldr	r3, [r7, #16]
 80096e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096e8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80096ec:	693b      	ldr	r3, [r7, #16]
 80096ee:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80096f0:	693b      	ldr	r3, [r7, #16]
 80096f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096f4:	4b0f      	ldr	r3, [pc, #60]	; (8009734 <xTaskPriorityDisinherit+0xd4>)
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	429a      	cmp	r2, r3
 80096fa:	d903      	bls.n	8009704 <xTaskPriorityDisinherit+0xa4>
 80096fc:	693b      	ldr	r3, [r7, #16]
 80096fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009700:	4a0c      	ldr	r2, [pc, #48]	; (8009734 <xTaskPriorityDisinherit+0xd4>)
 8009702:	6013      	str	r3, [r2, #0]
 8009704:	693b      	ldr	r3, [r7, #16]
 8009706:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009708:	4613      	mov	r3, r2
 800970a:	009b      	lsls	r3, r3, #2
 800970c:	4413      	add	r3, r2
 800970e:	009b      	lsls	r3, r3, #2
 8009710:	4a09      	ldr	r2, [pc, #36]	; (8009738 <xTaskPriorityDisinherit+0xd8>)
 8009712:	441a      	add	r2, r3
 8009714:	693b      	ldr	r3, [r7, #16]
 8009716:	3304      	adds	r3, #4
 8009718:	4619      	mov	r1, r3
 800971a:	4610      	mov	r0, r2
 800971c:	f7fe fbc7 	bl	8007eae <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009720:	2301      	movs	r3, #1
 8009722:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009724:	697b      	ldr	r3, [r7, #20]
	}
 8009726:	4618      	mov	r0, r3
 8009728:	3718      	adds	r7, #24
 800972a:	46bd      	mov	sp, r7
 800972c:	bd80      	pop	{r7, pc}
 800972e:	bf00      	nop
 8009730:	20000adc 	.word	0x20000adc
 8009734:	20000fb8 	.word	0x20000fb8
 8009738:	20000ae0 	.word	0x20000ae0

0800973c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800973c:	b580      	push	{r7, lr}
 800973e:	b084      	sub	sp, #16
 8009740:	af00      	add	r7, sp, #0
 8009742:	6078      	str	r0, [r7, #4]
 8009744:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009746:	4b21      	ldr	r3, [pc, #132]	; (80097cc <prvAddCurrentTaskToDelayedList+0x90>)
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800974c:	4b20      	ldr	r3, [pc, #128]	; (80097d0 <prvAddCurrentTaskToDelayedList+0x94>)
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	3304      	adds	r3, #4
 8009752:	4618      	mov	r0, r3
 8009754:	f7fe fc08 	bl	8007f68 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800975e:	d10a      	bne.n	8009776 <prvAddCurrentTaskToDelayedList+0x3a>
 8009760:	683b      	ldr	r3, [r7, #0]
 8009762:	2b00      	cmp	r3, #0
 8009764:	d007      	beq.n	8009776 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009766:	4b1a      	ldr	r3, [pc, #104]	; (80097d0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	3304      	adds	r3, #4
 800976c:	4619      	mov	r1, r3
 800976e:	4819      	ldr	r0, [pc, #100]	; (80097d4 <prvAddCurrentTaskToDelayedList+0x98>)
 8009770:	f7fe fb9d 	bl	8007eae <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009774:	e026      	b.n	80097c4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009776:	68fa      	ldr	r2, [r7, #12]
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	4413      	add	r3, r2
 800977c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800977e:	4b14      	ldr	r3, [pc, #80]	; (80097d0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	68ba      	ldr	r2, [r7, #8]
 8009784:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009786:	68ba      	ldr	r2, [r7, #8]
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	429a      	cmp	r2, r3
 800978c:	d209      	bcs.n	80097a2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800978e:	4b12      	ldr	r3, [pc, #72]	; (80097d8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009790:	681a      	ldr	r2, [r3, #0]
 8009792:	4b0f      	ldr	r3, [pc, #60]	; (80097d0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	3304      	adds	r3, #4
 8009798:	4619      	mov	r1, r3
 800979a:	4610      	mov	r0, r2
 800979c:	f7fe fbab 	bl	8007ef6 <vListInsert>
}
 80097a0:	e010      	b.n	80097c4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80097a2:	4b0e      	ldr	r3, [pc, #56]	; (80097dc <prvAddCurrentTaskToDelayedList+0xa0>)
 80097a4:	681a      	ldr	r2, [r3, #0]
 80097a6:	4b0a      	ldr	r3, [pc, #40]	; (80097d0 <prvAddCurrentTaskToDelayedList+0x94>)
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	3304      	adds	r3, #4
 80097ac:	4619      	mov	r1, r3
 80097ae:	4610      	mov	r0, r2
 80097b0:	f7fe fba1 	bl	8007ef6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80097b4:	4b0a      	ldr	r3, [pc, #40]	; (80097e0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	68ba      	ldr	r2, [r7, #8]
 80097ba:	429a      	cmp	r2, r3
 80097bc:	d202      	bcs.n	80097c4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80097be:	4a08      	ldr	r2, [pc, #32]	; (80097e0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80097c0:	68bb      	ldr	r3, [r7, #8]
 80097c2:	6013      	str	r3, [r2, #0]
}
 80097c4:	bf00      	nop
 80097c6:	3710      	adds	r7, #16
 80097c8:	46bd      	mov	sp, r7
 80097ca:	bd80      	pop	{r7, pc}
 80097cc:	20000fb4 	.word	0x20000fb4
 80097d0:	20000adc 	.word	0x20000adc
 80097d4:	20000f9c 	.word	0x20000f9c
 80097d8:	20000f6c 	.word	0x20000f6c
 80097dc:	20000f68 	.word	0x20000f68
 80097e0:	20000fd0 	.word	0x20000fd0

080097e4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b08a      	sub	sp, #40	; 0x28
 80097e8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80097ea:	2300      	movs	r3, #0
 80097ec:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80097ee:	f000 fb07 	bl	8009e00 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80097f2:	4b1c      	ldr	r3, [pc, #112]	; (8009864 <xTimerCreateTimerTask+0x80>)
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d021      	beq.n	800983e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80097fa:	2300      	movs	r3, #0
 80097fc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80097fe:	2300      	movs	r3, #0
 8009800:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009802:	1d3a      	adds	r2, r7, #4
 8009804:	f107 0108 	add.w	r1, r7, #8
 8009808:	f107 030c 	add.w	r3, r7, #12
 800980c:	4618      	mov	r0, r3
 800980e:	f7fe fb07 	bl	8007e20 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009812:	6879      	ldr	r1, [r7, #4]
 8009814:	68bb      	ldr	r3, [r7, #8]
 8009816:	68fa      	ldr	r2, [r7, #12]
 8009818:	9202      	str	r2, [sp, #8]
 800981a:	9301      	str	r3, [sp, #4]
 800981c:	2302      	movs	r3, #2
 800981e:	9300      	str	r3, [sp, #0]
 8009820:	2300      	movs	r3, #0
 8009822:	460a      	mov	r2, r1
 8009824:	4910      	ldr	r1, [pc, #64]	; (8009868 <xTimerCreateTimerTask+0x84>)
 8009826:	4811      	ldr	r0, [pc, #68]	; (800986c <xTimerCreateTimerTask+0x88>)
 8009828:	f7ff f8b4 	bl	8008994 <xTaskCreateStatic>
 800982c:	4603      	mov	r3, r0
 800982e:	4a10      	ldr	r2, [pc, #64]	; (8009870 <xTimerCreateTimerTask+0x8c>)
 8009830:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009832:	4b0f      	ldr	r3, [pc, #60]	; (8009870 <xTimerCreateTimerTask+0x8c>)
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	2b00      	cmp	r3, #0
 8009838:	d001      	beq.n	800983e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800983a:	2301      	movs	r3, #1
 800983c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800983e:	697b      	ldr	r3, [r7, #20]
 8009840:	2b00      	cmp	r3, #0
 8009842:	d10a      	bne.n	800985a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009848:	f383 8811 	msr	BASEPRI, r3
 800984c:	f3bf 8f6f 	isb	sy
 8009850:	f3bf 8f4f 	dsb	sy
 8009854:	613b      	str	r3, [r7, #16]
}
 8009856:	bf00      	nop
 8009858:	e7fe      	b.n	8009858 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800985a:	697b      	ldr	r3, [r7, #20]
}
 800985c:	4618      	mov	r0, r3
 800985e:	3718      	adds	r7, #24
 8009860:	46bd      	mov	sp, r7
 8009862:	bd80      	pop	{r7, pc}
 8009864:	2000100c 	.word	0x2000100c
 8009868:	0800b2d4 	.word	0x0800b2d4
 800986c:	080099a9 	.word	0x080099a9
 8009870:	20001010 	.word	0x20001010

08009874 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009874:	b580      	push	{r7, lr}
 8009876:	b08a      	sub	sp, #40	; 0x28
 8009878:	af00      	add	r7, sp, #0
 800987a:	60f8      	str	r0, [r7, #12]
 800987c:	60b9      	str	r1, [r7, #8]
 800987e:	607a      	str	r2, [r7, #4]
 8009880:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009882:	2300      	movs	r3, #0
 8009884:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d10a      	bne.n	80098a2 <xTimerGenericCommand+0x2e>
	__asm volatile
 800988c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009890:	f383 8811 	msr	BASEPRI, r3
 8009894:	f3bf 8f6f 	isb	sy
 8009898:	f3bf 8f4f 	dsb	sy
 800989c:	623b      	str	r3, [r7, #32]
}
 800989e:	bf00      	nop
 80098a0:	e7fe      	b.n	80098a0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80098a2:	4b1a      	ldr	r3, [pc, #104]	; (800990c <xTimerGenericCommand+0x98>)
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d02a      	beq.n	8009900 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80098aa:	68bb      	ldr	r3, [r7, #8]
 80098ac:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80098b6:	68bb      	ldr	r3, [r7, #8]
 80098b8:	2b05      	cmp	r3, #5
 80098ba:	dc18      	bgt.n	80098ee <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80098bc:	f7ff feb2 	bl	8009624 <xTaskGetSchedulerState>
 80098c0:	4603      	mov	r3, r0
 80098c2:	2b02      	cmp	r3, #2
 80098c4:	d109      	bne.n	80098da <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80098c6:	4b11      	ldr	r3, [pc, #68]	; (800990c <xTimerGenericCommand+0x98>)
 80098c8:	6818      	ldr	r0, [r3, #0]
 80098ca:	f107 0110 	add.w	r1, r7, #16
 80098ce:	2300      	movs	r3, #0
 80098d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80098d2:	f7fe fc77 	bl	80081c4 <xQueueGenericSend>
 80098d6:	6278      	str	r0, [r7, #36]	; 0x24
 80098d8:	e012      	b.n	8009900 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80098da:	4b0c      	ldr	r3, [pc, #48]	; (800990c <xTimerGenericCommand+0x98>)
 80098dc:	6818      	ldr	r0, [r3, #0]
 80098de:	f107 0110 	add.w	r1, r7, #16
 80098e2:	2300      	movs	r3, #0
 80098e4:	2200      	movs	r2, #0
 80098e6:	f7fe fc6d 	bl	80081c4 <xQueueGenericSend>
 80098ea:	6278      	str	r0, [r7, #36]	; 0x24
 80098ec:	e008      	b.n	8009900 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80098ee:	4b07      	ldr	r3, [pc, #28]	; (800990c <xTimerGenericCommand+0x98>)
 80098f0:	6818      	ldr	r0, [r3, #0]
 80098f2:	f107 0110 	add.w	r1, r7, #16
 80098f6:	2300      	movs	r3, #0
 80098f8:	683a      	ldr	r2, [r7, #0]
 80098fa:	f7fe fd61 	bl	80083c0 <xQueueGenericSendFromISR>
 80098fe:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009902:	4618      	mov	r0, r3
 8009904:	3728      	adds	r7, #40	; 0x28
 8009906:	46bd      	mov	sp, r7
 8009908:	bd80      	pop	{r7, pc}
 800990a:	bf00      	nop
 800990c:	2000100c 	.word	0x2000100c

08009910 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009910:	b580      	push	{r7, lr}
 8009912:	b088      	sub	sp, #32
 8009914:	af02      	add	r7, sp, #8
 8009916:	6078      	str	r0, [r7, #4]
 8009918:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800991a:	4b22      	ldr	r3, [pc, #136]	; (80099a4 <prvProcessExpiredTimer+0x94>)
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	68db      	ldr	r3, [r3, #12]
 8009920:	68db      	ldr	r3, [r3, #12]
 8009922:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009924:	697b      	ldr	r3, [r7, #20]
 8009926:	3304      	adds	r3, #4
 8009928:	4618      	mov	r0, r3
 800992a:	f7fe fb1d 	bl	8007f68 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800992e:	697b      	ldr	r3, [r7, #20]
 8009930:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009934:	f003 0304 	and.w	r3, r3, #4
 8009938:	2b00      	cmp	r3, #0
 800993a:	d022      	beq.n	8009982 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800993c:	697b      	ldr	r3, [r7, #20]
 800993e:	699a      	ldr	r2, [r3, #24]
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	18d1      	adds	r1, r2, r3
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	683a      	ldr	r2, [r7, #0]
 8009948:	6978      	ldr	r0, [r7, #20]
 800994a:	f000 f8d1 	bl	8009af0 <prvInsertTimerInActiveList>
 800994e:	4603      	mov	r3, r0
 8009950:	2b00      	cmp	r3, #0
 8009952:	d01f      	beq.n	8009994 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009954:	2300      	movs	r3, #0
 8009956:	9300      	str	r3, [sp, #0]
 8009958:	2300      	movs	r3, #0
 800995a:	687a      	ldr	r2, [r7, #4]
 800995c:	2100      	movs	r1, #0
 800995e:	6978      	ldr	r0, [r7, #20]
 8009960:	f7ff ff88 	bl	8009874 <xTimerGenericCommand>
 8009964:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009966:	693b      	ldr	r3, [r7, #16]
 8009968:	2b00      	cmp	r3, #0
 800996a:	d113      	bne.n	8009994 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800996c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009970:	f383 8811 	msr	BASEPRI, r3
 8009974:	f3bf 8f6f 	isb	sy
 8009978:	f3bf 8f4f 	dsb	sy
 800997c:	60fb      	str	r3, [r7, #12]
}
 800997e:	bf00      	nop
 8009980:	e7fe      	b.n	8009980 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009982:	697b      	ldr	r3, [r7, #20]
 8009984:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009988:	f023 0301 	bic.w	r3, r3, #1
 800998c:	b2da      	uxtb	r2, r3
 800998e:	697b      	ldr	r3, [r7, #20]
 8009990:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009994:	697b      	ldr	r3, [r7, #20]
 8009996:	6a1b      	ldr	r3, [r3, #32]
 8009998:	6978      	ldr	r0, [r7, #20]
 800999a:	4798      	blx	r3
}
 800999c:	bf00      	nop
 800999e:	3718      	adds	r7, #24
 80099a0:	46bd      	mov	sp, r7
 80099a2:	bd80      	pop	{r7, pc}
 80099a4:	20001004 	.word	0x20001004

080099a8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80099a8:	b580      	push	{r7, lr}
 80099aa:	b084      	sub	sp, #16
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80099b0:	f107 0308 	add.w	r3, r7, #8
 80099b4:	4618      	mov	r0, r3
 80099b6:	f000 f857 	bl	8009a68 <prvGetNextExpireTime>
 80099ba:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80099bc:	68bb      	ldr	r3, [r7, #8]
 80099be:	4619      	mov	r1, r3
 80099c0:	68f8      	ldr	r0, [r7, #12]
 80099c2:	f000 f803 	bl	80099cc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80099c6:	f000 f8d5 	bl	8009b74 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80099ca:	e7f1      	b.n	80099b0 <prvTimerTask+0x8>

080099cc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80099cc:	b580      	push	{r7, lr}
 80099ce:	b084      	sub	sp, #16
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	6078      	str	r0, [r7, #4]
 80099d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80099d6:	f7ff fa39 	bl	8008e4c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80099da:	f107 0308 	add.w	r3, r7, #8
 80099de:	4618      	mov	r0, r3
 80099e0:	f000 f866 	bl	8009ab0 <prvSampleTimeNow>
 80099e4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80099e6:	68bb      	ldr	r3, [r7, #8]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d130      	bne.n	8009a4e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80099ec:	683b      	ldr	r3, [r7, #0]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d10a      	bne.n	8009a08 <prvProcessTimerOrBlockTask+0x3c>
 80099f2:	687a      	ldr	r2, [r7, #4]
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	429a      	cmp	r2, r3
 80099f8:	d806      	bhi.n	8009a08 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80099fa:	f7ff fa35 	bl	8008e68 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80099fe:	68f9      	ldr	r1, [r7, #12]
 8009a00:	6878      	ldr	r0, [r7, #4]
 8009a02:	f7ff ff85 	bl	8009910 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009a06:	e024      	b.n	8009a52 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009a08:	683b      	ldr	r3, [r7, #0]
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d008      	beq.n	8009a20 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009a0e:	4b13      	ldr	r3, [pc, #76]	; (8009a5c <prvProcessTimerOrBlockTask+0x90>)
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d101      	bne.n	8009a1c <prvProcessTimerOrBlockTask+0x50>
 8009a18:	2301      	movs	r3, #1
 8009a1a:	e000      	b.n	8009a1e <prvProcessTimerOrBlockTask+0x52>
 8009a1c:	2300      	movs	r3, #0
 8009a1e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009a20:	4b0f      	ldr	r3, [pc, #60]	; (8009a60 <prvProcessTimerOrBlockTask+0x94>)
 8009a22:	6818      	ldr	r0, [r3, #0]
 8009a24:	687a      	ldr	r2, [r7, #4]
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	1ad3      	subs	r3, r2, r3
 8009a2a:	683a      	ldr	r2, [r7, #0]
 8009a2c:	4619      	mov	r1, r3
 8009a2e:	f7fe ff7d 	bl	800892c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009a32:	f7ff fa19 	bl	8008e68 <xTaskResumeAll>
 8009a36:	4603      	mov	r3, r0
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d10a      	bne.n	8009a52 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009a3c:	4b09      	ldr	r3, [pc, #36]	; (8009a64 <prvProcessTimerOrBlockTask+0x98>)
 8009a3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a42:	601a      	str	r2, [r3, #0]
 8009a44:	f3bf 8f4f 	dsb	sy
 8009a48:	f3bf 8f6f 	isb	sy
}
 8009a4c:	e001      	b.n	8009a52 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009a4e:	f7ff fa0b 	bl	8008e68 <xTaskResumeAll>
}
 8009a52:	bf00      	nop
 8009a54:	3710      	adds	r7, #16
 8009a56:	46bd      	mov	sp, r7
 8009a58:	bd80      	pop	{r7, pc}
 8009a5a:	bf00      	nop
 8009a5c:	20001008 	.word	0x20001008
 8009a60:	2000100c 	.word	0x2000100c
 8009a64:	e000ed04 	.word	0xe000ed04

08009a68 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009a68:	b480      	push	{r7}
 8009a6a:	b085      	sub	sp, #20
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009a70:	4b0e      	ldr	r3, [pc, #56]	; (8009aac <prvGetNextExpireTime+0x44>)
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d101      	bne.n	8009a7e <prvGetNextExpireTime+0x16>
 8009a7a:	2201      	movs	r2, #1
 8009a7c:	e000      	b.n	8009a80 <prvGetNextExpireTime+0x18>
 8009a7e:	2200      	movs	r2, #0
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d105      	bne.n	8009a98 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009a8c:	4b07      	ldr	r3, [pc, #28]	; (8009aac <prvGetNextExpireTime+0x44>)
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	68db      	ldr	r3, [r3, #12]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	60fb      	str	r3, [r7, #12]
 8009a96:	e001      	b.n	8009a9c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009a98:	2300      	movs	r3, #0
 8009a9a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009a9c:	68fb      	ldr	r3, [r7, #12]
}
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	3714      	adds	r7, #20
 8009aa2:	46bd      	mov	sp, r7
 8009aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa8:	4770      	bx	lr
 8009aaa:	bf00      	nop
 8009aac:	20001004 	.word	0x20001004

08009ab0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	b084      	sub	sp, #16
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009ab8:	f7ff fa74 	bl	8008fa4 <xTaskGetTickCount>
 8009abc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009abe:	4b0b      	ldr	r3, [pc, #44]	; (8009aec <prvSampleTimeNow+0x3c>)
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	68fa      	ldr	r2, [r7, #12]
 8009ac4:	429a      	cmp	r2, r3
 8009ac6:	d205      	bcs.n	8009ad4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009ac8:	f000 f936 	bl	8009d38 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	2201      	movs	r2, #1
 8009ad0:	601a      	str	r2, [r3, #0]
 8009ad2:	e002      	b.n	8009ada <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	2200      	movs	r2, #0
 8009ad8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009ada:	4a04      	ldr	r2, [pc, #16]	; (8009aec <prvSampleTimeNow+0x3c>)
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009ae0:	68fb      	ldr	r3, [r7, #12]
}
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	3710      	adds	r7, #16
 8009ae6:	46bd      	mov	sp, r7
 8009ae8:	bd80      	pop	{r7, pc}
 8009aea:	bf00      	nop
 8009aec:	20001014 	.word	0x20001014

08009af0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009af0:	b580      	push	{r7, lr}
 8009af2:	b086      	sub	sp, #24
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	60f8      	str	r0, [r7, #12]
 8009af8:	60b9      	str	r1, [r7, #8]
 8009afa:	607a      	str	r2, [r7, #4]
 8009afc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009afe:	2300      	movs	r3, #0
 8009b00:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	68ba      	ldr	r2, [r7, #8]
 8009b06:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	68fa      	ldr	r2, [r7, #12]
 8009b0c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009b0e:	68ba      	ldr	r2, [r7, #8]
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	429a      	cmp	r2, r3
 8009b14:	d812      	bhi.n	8009b3c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009b16:	687a      	ldr	r2, [r7, #4]
 8009b18:	683b      	ldr	r3, [r7, #0]
 8009b1a:	1ad2      	subs	r2, r2, r3
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	699b      	ldr	r3, [r3, #24]
 8009b20:	429a      	cmp	r2, r3
 8009b22:	d302      	bcc.n	8009b2a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009b24:	2301      	movs	r3, #1
 8009b26:	617b      	str	r3, [r7, #20]
 8009b28:	e01b      	b.n	8009b62 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009b2a:	4b10      	ldr	r3, [pc, #64]	; (8009b6c <prvInsertTimerInActiveList+0x7c>)
 8009b2c:	681a      	ldr	r2, [r3, #0]
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	3304      	adds	r3, #4
 8009b32:	4619      	mov	r1, r3
 8009b34:	4610      	mov	r0, r2
 8009b36:	f7fe f9de 	bl	8007ef6 <vListInsert>
 8009b3a:	e012      	b.n	8009b62 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009b3c:	687a      	ldr	r2, [r7, #4]
 8009b3e:	683b      	ldr	r3, [r7, #0]
 8009b40:	429a      	cmp	r2, r3
 8009b42:	d206      	bcs.n	8009b52 <prvInsertTimerInActiveList+0x62>
 8009b44:	68ba      	ldr	r2, [r7, #8]
 8009b46:	683b      	ldr	r3, [r7, #0]
 8009b48:	429a      	cmp	r2, r3
 8009b4a:	d302      	bcc.n	8009b52 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009b4c:	2301      	movs	r3, #1
 8009b4e:	617b      	str	r3, [r7, #20]
 8009b50:	e007      	b.n	8009b62 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009b52:	4b07      	ldr	r3, [pc, #28]	; (8009b70 <prvInsertTimerInActiveList+0x80>)
 8009b54:	681a      	ldr	r2, [r3, #0]
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	3304      	adds	r3, #4
 8009b5a:	4619      	mov	r1, r3
 8009b5c:	4610      	mov	r0, r2
 8009b5e:	f7fe f9ca 	bl	8007ef6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009b62:	697b      	ldr	r3, [r7, #20]
}
 8009b64:	4618      	mov	r0, r3
 8009b66:	3718      	adds	r7, #24
 8009b68:	46bd      	mov	sp, r7
 8009b6a:	bd80      	pop	{r7, pc}
 8009b6c:	20001008 	.word	0x20001008
 8009b70:	20001004 	.word	0x20001004

08009b74 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009b74:	b580      	push	{r7, lr}
 8009b76:	b08e      	sub	sp, #56	; 0x38
 8009b78:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009b7a:	e0ca      	b.n	8009d12 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	da18      	bge.n	8009bb4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009b82:	1d3b      	adds	r3, r7, #4
 8009b84:	3304      	adds	r3, #4
 8009b86:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d10a      	bne.n	8009ba4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8009b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b92:	f383 8811 	msr	BASEPRI, r3
 8009b96:	f3bf 8f6f 	isb	sy
 8009b9a:	f3bf 8f4f 	dsb	sy
 8009b9e:	61fb      	str	r3, [r7, #28]
}
 8009ba0:	bf00      	nop
 8009ba2:	e7fe      	b.n	8009ba2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009baa:	6850      	ldr	r0, [r2, #4]
 8009bac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009bae:	6892      	ldr	r2, [r2, #8]
 8009bb0:	4611      	mov	r1, r2
 8009bb2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	f2c0 80ab 	blt.w	8009d12 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bc2:	695b      	ldr	r3, [r3, #20]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d004      	beq.n	8009bd2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bca:	3304      	adds	r3, #4
 8009bcc:	4618      	mov	r0, r3
 8009bce:	f7fe f9cb 	bl	8007f68 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009bd2:	463b      	mov	r3, r7
 8009bd4:	4618      	mov	r0, r3
 8009bd6:	f7ff ff6b 	bl	8009ab0 <prvSampleTimeNow>
 8009bda:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	2b09      	cmp	r3, #9
 8009be0:	f200 8096 	bhi.w	8009d10 <prvProcessReceivedCommands+0x19c>
 8009be4:	a201      	add	r2, pc, #4	; (adr r2, 8009bec <prvProcessReceivedCommands+0x78>)
 8009be6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bea:	bf00      	nop
 8009bec:	08009c15 	.word	0x08009c15
 8009bf0:	08009c15 	.word	0x08009c15
 8009bf4:	08009c15 	.word	0x08009c15
 8009bf8:	08009c89 	.word	0x08009c89
 8009bfc:	08009c9d 	.word	0x08009c9d
 8009c00:	08009ce7 	.word	0x08009ce7
 8009c04:	08009c15 	.word	0x08009c15
 8009c08:	08009c15 	.word	0x08009c15
 8009c0c:	08009c89 	.word	0x08009c89
 8009c10:	08009c9d 	.word	0x08009c9d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c16:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009c1a:	f043 0301 	orr.w	r3, r3, #1
 8009c1e:	b2da      	uxtb	r2, r3
 8009c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c22:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009c26:	68ba      	ldr	r2, [r7, #8]
 8009c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c2a:	699b      	ldr	r3, [r3, #24]
 8009c2c:	18d1      	adds	r1, r2, r3
 8009c2e:	68bb      	ldr	r3, [r7, #8]
 8009c30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009c34:	f7ff ff5c 	bl	8009af0 <prvInsertTimerInActiveList>
 8009c38:	4603      	mov	r3, r0
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d069      	beq.n	8009d12 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c40:	6a1b      	ldr	r3, [r3, #32]
 8009c42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009c44:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c48:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009c4c:	f003 0304 	and.w	r3, r3, #4
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d05e      	beq.n	8009d12 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009c54:	68ba      	ldr	r2, [r7, #8]
 8009c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c58:	699b      	ldr	r3, [r3, #24]
 8009c5a:	441a      	add	r2, r3
 8009c5c:	2300      	movs	r3, #0
 8009c5e:	9300      	str	r3, [sp, #0]
 8009c60:	2300      	movs	r3, #0
 8009c62:	2100      	movs	r1, #0
 8009c64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009c66:	f7ff fe05 	bl	8009874 <xTimerGenericCommand>
 8009c6a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009c6c:	6a3b      	ldr	r3, [r7, #32]
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d14f      	bne.n	8009d12 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8009c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c76:	f383 8811 	msr	BASEPRI, r3
 8009c7a:	f3bf 8f6f 	isb	sy
 8009c7e:	f3bf 8f4f 	dsb	sy
 8009c82:	61bb      	str	r3, [r7, #24]
}
 8009c84:	bf00      	nop
 8009c86:	e7fe      	b.n	8009c86 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c8a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009c8e:	f023 0301 	bic.w	r3, r3, #1
 8009c92:	b2da      	uxtb	r2, r3
 8009c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c96:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009c9a:	e03a      	b.n	8009d12 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c9e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009ca2:	f043 0301 	orr.w	r3, r3, #1
 8009ca6:	b2da      	uxtb	r2, r3
 8009ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009caa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009cae:	68ba      	ldr	r2, [r7, #8]
 8009cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cb2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cb6:	699b      	ldr	r3, [r3, #24]
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d10a      	bne.n	8009cd2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8009cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cc0:	f383 8811 	msr	BASEPRI, r3
 8009cc4:	f3bf 8f6f 	isb	sy
 8009cc8:	f3bf 8f4f 	dsb	sy
 8009ccc:	617b      	str	r3, [r7, #20]
}
 8009cce:	bf00      	nop
 8009cd0:	e7fe      	b.n	8009cd0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cd4:	699a      	ldr	r2, [r3, #24]
 8009cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cd8:	18d1      	adds	r1, r2, r3
 8009cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009cde:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009ce0:	f7ff ff06 	bl	8009af0 <prvInsertTimerInActiveList>
					break;
 8009ce4:	e015      	b.n	8009d12 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ce8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009cec:	f003 0302 	and.w	r3, r3, #2
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d103      	bne.n	8009cfc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8009cf4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009cf6:	f000 fbdb 	bl	800a4b0 <vPortFree>
 8009cfa:	e00a      	b.n	8009d12 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cfe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009d02:	f023 0301 	bic.w	r3, r3, #1
 8009d06:	b2da      	uxtb	r2, r3
 8009d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d0a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009d0e:	e000      	b.n	8009d12 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8009d10:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009d12:	4b08      	ldr	r3, [pc, #32]	; (8009d34 <prvProcessReceivedCommands+0x1c0>)
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	1d39      	adds	r1, r7, #4
 8009d18:	2200      	movs	r2, #0
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	f7fe fbec 	bl	80084f8 <xQueueReceive>
 8009d20:	4603      	mov	r3, r0
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	f47f af2a 	bne.w	8009b7c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009d28:	bf00      	nop
 8009d2a:	bf00      	nop
 8009d2c:	3730      	adds	r7, #48	; 0x30
 8009d2e:	46bd      	mov	sp, r7
 8009d30:	bd80      	pop	{r7, pc}
 8009d32:	bf00      	nop
 8009d34:	2000100c 	.word	0x2000100c

08009d38 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009d38:	b580      	push	{r7, lr}
 8009d3a:	b088      	sub	sp, #32
 8009d3c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009d3e:	e048      	b.n	8009dd2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009d40:	4b2d      	ldr	r3, [pc, #180]	; (8009df8 <prvSwitchTimerLists+0xc0>)
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	68db      	ldr	r3, [r3, #12]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d4a:	4b2b      	ldr	r3, [pc, #172]	; (8009df8 <prvSwitchTimerLists+0xc0>)
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	68db      	ldr	r3, [r3, #12]
 8009d50:	68db      	ldr	r3, [r3, #12]
 8009d52:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	3304      	adds	r3, #4
 8009d58:	4618      	mov	r0, r3
 8009d5a:	f7fe f905 	bl	8007f68 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	6a1b      	ldr	r3, [r3, #32]
 8009d62:	68f8      	ldr	r0, [r7, #12]
 8009d64:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009d6c:	f003 0304 	and.w	r3, r3, #4
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d02e      	beq.n	8009dd2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	699b      	ldr	r3, [r3, #24]
 8009d78:	693a      	ldr	r2, [r7, #16]
 8009d7a:	4413      	add	r3, r2
 8009d7c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009d7e:	68ba      	ldr	r2, [r7, #8]
 8009d80:	693b      	ldr	r3, [r7, #16]
 8009d82:	429a      	cmp	r2, r3
 8009d84:	d90e      	bls.n	8009da4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	68ba      	ldr	r2, [r7, #8]
 8009d8a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	68fa      	ldr	r2, [r7, #12]
 8009d90:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009d92:	4b19      	ldr	r3, [pc, #100]	; (8009df8 <prvSwitchTimerLists+0xc0>)
 8009d94:	681a      	ldr	r2, [r3, #0]
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	3304      	adds	r3, #4
 8009d9a:	4619      	mov	r1, r3
 8009d9c:	4610      	mov	r0, r2
 8009d9e:	f7fe f8aa 	bl	8007ef6 <vListInsert>
 8009da2:	e016      	b.n	8009dd2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009da4:	2300      	movs	r3, #0
 8009da6:	9300      	str	r3, [sp, #0]
 8009da8:	2300      	movs	r3, #0
 8009daa:	693a      	ldr	r2, [r7, #16]
 8009dac:	2100      	movs	r1, #0
 8009dae:	68f8      	ldr	r0, [r7, #12]
 8009db0:	f7ff fd60 	bl	8009874 <xTimerGenericCommand>
 8009db4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d10a      	bne.n	8009dd2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8009dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dc0:	f383 8811 	msr	BASEPRI, r3
 8009dc4:	f3bf 8f6f 	isb	sy
 8009dc8:	f3bf 8f4f 	dsb	sy
 8009dcc:	603b      	str	r3, [r7, #0]
}
 8009dce:	bf00      	nop
 8009dd0:	e7fe      	b.n	8009dd0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009dd2:	4b09      	ldr	r3, [pc, #36]	; (8009df8 <prvSwitchTimerLists+0xc0>)
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d1b1      	bne.n	8009d40 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009ddc:	4b06      	ldr	r3, [pc, #24]	; (8009df8 <prvSwitchTimerLists+0xc0>)
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009de2:	4b06      	ldr	r3, [pc, #24]	; (8009dfc <prvSwitchTimerLists+0xc4>)
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	4a04      	ldr	r2, [pc, #16]	; (8009df8 <prvSwitchTimerLists+0xc0>)
 8009de8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009dea:	4a04      	ldr	r2, [pc, #16]	; (8009dfc <prvSwitchTimerLists+0xc4>)
 8009dec:	697b      	ldr	r3, [r7, #20]
 8009dee:	6013      	str	r3, [r2, #0]
}
 8009df0:	bf00      	nop
 8009df2:	3718      	adds	r7, #24
 8009df4:	46bd      	mov	sp, r7
 8009df6:	bd80      	pop	{r7, pc}
 8009df8:	20001004 	.word	0x20001004
 8009dfc:	20001008 	.word	0x20001008

08009e00 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009e00:	b580      	push	{r7, lr}
 8009e02:	b082      	sub	sp, #8
 8009e04:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009e06:	f000 f965 	bl	800a0d4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009e0a:	4b15      	ldr	r3, [pc, #84]	; (8009e60 <prvCheckForValidListAndQueue+0x60>)
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d120      	bne.n	8009e54 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009e12:	4814      	ldr	r0, [pc, #80]	; (8009e64 <prvCheckForValidListAndQueue+0x64>)
 8009e14:	f7fe f81e 	bl	8007e54 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009e18:	4813      	ldr	r0, [pc, #76]	; (8009e68 <prvCheckForValidListAndQueue+0x68>)
 8009e1a:	f7fe f81b 	bl	8007e54 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009e1e:	4b13      	ldr	r3, [pc, #76]	; (8009e6c <prvCheckForValidListAndQueue+0x6c>)
 8009e20:	4a10      	ldr	r2, [pc, #64]	; (8009e64 <prvCheckForValidListAndQueue+0x64>)
 8009e22:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009e24:	4b12      	ldr	r3, [pc, #72]	; (8009e70 <prvCheckForValidListAndQueue+0x70>)
 8009e26:	4a10      	ldr	r2, [pc, #64]	; (8009e68 <prvCheckForValidListAndQueue+0x68>)
 8009e28:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009e2a:	2300      	movs	r3, #0
 8009e2c:	9300      	str	r3, [sp, #0]
 8009e2e:	4b11      	ldr	r3, [pc, #68]	; (8009e74 <prvCheckForValidListAndQueue+0x74>)
 8009e30:	4a11      	ldr	r2, [pc, #68]	; (8009e78 <prvCheckForValidListAndQueue+0x78>)
 8009e32:	2110      	movs	r1, #16
 8009e34:	200a      	movs	r0, #10
 8009e36:	f7fe f929 	bl	800808c <xQueueGenericCreateStatic>
 8009e3a:	4603      	mov	r3, r0
 8009e3c:	4a08      	ldr	r2, [pc, #32]	; (8009e60 <prvCheckForValidListAndQueue+0x60>)
 8009e3e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009e40:	4b07      	ldr	r3, [pc, #28]	; (8009e60 <prvCheckForValidListAndQueue+0x60>)
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d005      	beq.n	8009e54 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009e48:	4b05      	ldr	r3, [pc, #20]	; (8009e60 <prvCheckForValidListAndQueue+0x60>)
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	490b      	ldr	r1, [pc, #44]	; (8009e7c <prvCheckForValidListAndQueue+0x7c>)
 8009e4e:	4618      	mov	r0, r3
 8009e50:	f7fe fd42 	bl	80088d8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009e54:	f000 f96e 	bl	800a134 <vPortExitCritical>
}
 8009e58:	bf00      	nop
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	bd80      	pop	{r7, pc}
 8009e5e:	bf00      	nop
 8009e60:	2000100c 	.word	0x2000100c
 8009e64:	20000fdc 	.word	0x20000fdc
 8009e68:	20000ff0 	.word	0x20000ff0
 8009e6c:	20001004 	.word	0x20001004
 8009e70:	20001008 	.word	0x20001008
 8009e74:	200010b8 	.word	0x200010b8
 8009e78:	20001018 	.word	0x20001018
 8009e7c:	0800b2dc 	.word	0x0800b2dc

08009e80 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009e80:	b480      	push	{r7}
 8009e82:	b085      	sub	sp, #20
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	60f8      	str	r0, [r7, #12]
 8009e88:	60b9      	str	r1, [r7, #8]
 8009e8a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	3b04      	subs	r3, #4
 8009e90:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009e98:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	3b04      	subs	r3, #4
 8009e9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009ea0:	68bb      	ldr	r3, [r7, #8]
 8009ea2:	f023 0201 	bic.w	r2, r3, #1
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	3b04      	subs	r3, #4
 8009eae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009eb0:	4a0c      	ldr	r2, [pc, #48]	; (8009ee4 <pxPortInitialiseStack+0x64>)
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	3b14      	subs	r3, #20
 8009eba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009ebc:	687a      	ldr	r2, [r7, #4]
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	3b04      	subs	r3, #4
 8009ec6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	f06f 0202 	mvn.w	r2, #2
 8009ece:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	3b20      	subs	r3, #32
 8009ed4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009ed6:	68fb      	ldr	r3, [r7, #12]
}
 8009ed8:	4618      	mov	r0, r3
 8009eda:	3714      	adds	r7, #20
 8009edc:	46bd      	mov	sp, r7
 8009ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee2:	4770      	bx	lr
 8009ee4:	08009ee9 	.word	0x08009ee9

08009ee8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009ee8:	b480      	push	{r7}
 8009eea:	b085      	sub	sp, #20
 8009eec:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009eee:	2300      	movs	r3, #0
 8009ef0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009ef2:	4b12      	ldr	r3, [pc, #72]	; (8009f3c <prvTaskExitError+0x54>)
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009efa:	d00a      	beq.n	8009f12 <prvTaskExitError+0x2a>
	__asm volatile
 8009efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f00:	f383 8811 	msr	BASEPRI, r3
 8009f04:	f3bf 8f6f 	isb	sy
 8009f08:	f3bf 8f4f 	dsb	sy
 8009f0c:	60fb      	str	r3, [r7, #12]
}
 8009f0e:	bf00      	nop
 8009f10:	e7fe      	b.n	8009f10 <prvTaskExitError+0x28>
	__asm volatile
 8009f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f16:	f383 8811 	msr	BASEPRI, r3
 8009f1a:	f3bf 8f6f 	isb	sy
 8009f1e:	f3bf 8f4f 	dsb	sy
 8009f22:	60bb      	str	r3, [r7, #8]
}
 8009f24:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009f26:	bf00      	nop
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d0fc      	beq.n	8009f28 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009f2e:	bf00      	nop
 8009f30:	bf00      	nop
 8009f32:	3714      	adds	r7, #20
 8009f34:	46bd      	mov	sp, r7
 8009f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3a:	4770      	bx	lr
 8009f3c:	20000098 	.word	0x20000098

08009f40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009f40:	4b07      	ldr	r3, [pc, #28]	; (8009f60 <pxCurrentTCBConst2>)
 8009f42:	6819      	ldr	r1, [r3, #0]
 8009f44:	6808      	ldr	r0, [r1, #0]
 8009f46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f4a:	f380 8809 	msr	PSP, r0
 8009f4e:	f3bf 8f6f 	isb	sy
 8009f52:	f04f 0000 	mov.w	r0, #0
 8009f56:	f380 8811 	msr	BASEPRI, r0
 8009f5a:	4770      	bx	lr
 8009f5c:	f3af 8000 	nop.w

08009f60 <pxCurrentTCBConst2>:
 8009f60:	20000adc 	.word	0x20000adc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009f64:	bf00      	nop
 8009f66:	bf00      	nop

08009f68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009f68:	4808      	ldr	r0, [pc, #32]	; (8009f8c <prvPortStartFirstTask+0x24>)
 8009f6a:	6800      	ldr	r0, [r0, #0]
 8009f6c:	6800      	ldr	r0, [r0, #0]
 8009f6e:	f380 8808 	msr	MSP, r0
 8009f72:	f04f 0000 	mov.w	r0, #0
 8009f76:	f380 8814 	msr	CONTROL, r0
 8009f7a:	b662      	cpsie	i
 8009f7c:	b661      	cpsie	f
 8009f7e:	f3bf 8f4f 	dsb	sy
 8009f82:	f3bf 8f6f 	isb	sy
 8009f86:	df00      	svc	0
 8009f88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009f8a:	bf00      	nop
 8009f8c:	e000ed08 	.word	0xe000ed08

08009f90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009f90:	b580      	push	{r7, lr}
 8009f92:	b086      	sub	sp, #24
 8009f94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009f96:	4b46      	ldr	r3, [pc, #280]	; (800a0b0 <xPortStartScheduler+0x120>)
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	4a46      	ldr	r2, [pc, #280]	; (800a0b4 <xPortStartScheduler+0x124>)
 8009f9c:	4293      	cmp	r3, r2
 8009f9e:	d10a      	bne.n	8009fb6 <xPortStartScheduler+0x26>
	__asm volatile
 8009fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fa4:	f383 8811 	msr	BASEPRI, r3
 8009fa8:	f3bf 8f6f 	isb	sy
 8009fac:	f3bf 8f4f 	dsb	sy
 8009fb0:	613b      	str	r3, [r7, #16]
}
 8009fb2:	bf00      	nop
 8009fb4:	e7fe      	b.n	8009fb4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009fb6:	4b3e      	ldr	r3, [pc, #248]	; (800a0b0 <xPortStartScheduler+0x120>)
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	4a3f      	ldr	r2, [pc, #252]	; (800a0b8 <xPortStartScheduler+0x128>)
 8009fbc:	4293      	cmp	r3, r2
 8009fbe:	d10a      	bne.n	8009fd6 <xPortStartScheduler+0x46>
	__asm volatile
 8009fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fc4:	f383 8811 	msr	BASEPRI, r3
 8009fc8:	f3bf 8f6f 	isb	sy
 8009fcc:	f3bf 8f4f 	dsb	sy
 8009fd0:	60fb      	str	r3, [r7, #12]
}
 8009fd2:	bf00      	nop
 8009fd4:	e7fe      	b.n	8009fd4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009fd6:	4b39      	ldr	r3, [pc, #228]	; (800a0bc <xPortStartScheduler+0x12c>)
 8009fd8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009fda:	697b      	ldr	r3, [r7, #20]
 8009fdc:	781b      	ldrb	r3, [r3, #0]
 8009fde:	b2db      	uxtb	r3, r3
 8009fe0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009fe2:	697b      	ldr	r3, [r7, #20]
 8009fe4:	22ff      	movs	r2, #255	; 0xff
 8009fe6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009fe8:	697b      	ldr	r3, [r7, #20]
 8009fea:	781b      	ldrb	r3, [r3, #0]
 8009fec:	b2db      	uxtb	r3, r3
 8009fee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009ff0:	78fb      	ldrb	r3, [r7, #3]
 8009ff2:	b2db      	uxtb	r3, r3
 8009ff4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009ff8:	b2da      	uxtb	r2, r3
 8009ffa:	4b31      	ldr	r3, [pc, #196]	; (800a0c0 <xPortStartScheduler+0x130>)
 8009ffc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009ffe:	4b31      	ldr	r3, [pc, #196]	; (800a0c4 <xPortStartScheduler+0x134>)
 800a000:	2207      	movs	r2, #7
 800a002:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a004:	e009      	b.n	800a01a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a006:	4b2f      	ldr	r3, [pc, #188]	; (800a0c4 <xPortStartScheduler+0x134>)
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	3b01      	subs	r3, #1
 800a00c:	4a2d      	ldr	r2, [pc, #180]	; (800a0c4 <xPortStartScheduler+0x134>)
 800a00e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a010:	78fb      	ldrb	r3, [r7, #3]
 800a012:	b2db      	uxtb	r3, r3
 800a014:	005b      	lsls	r3, r3, #1
 800a016:	b2db      	uxtb	r3, r3
 800a018:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a01a:	78fb      	ldrb	r3, [r7, #3]
 800a01c:	b2db      	uxtb	r3, r3
 800a01e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a022:	2b80      	cmp	r3, #128	; 0x80
 800a024:	d0ef      	beq.n	800a006 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a026:	4b27      	ldr	r3, [pc, #156]	; (800a0c4 <xPortStartScheduler+0x134>)
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	f1c3 0307 	rsb	r3, r3, #7
 800a02e:	2b04      	cmp	r3, #4
 800a030:	d00a      	beq.n	800a048 <xPortStartScheduler+0xb8>
	__asm volatile
 800a032:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a036:	f383 8811 	msr	BASEPRI, r3
 800a03a:	f3bf 8f6f 	isb	sy
 800a03e:	f3bf 8f4f 	dsb	sy
 800a042:	60bb      	str	r3, [r7, #8]
}
 800a044:	bf00      	nop
 800a046:	e7fe      	b.n	800a046 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a048:	4b1e      	ldr	r3, [pc, #120]	; (800a0c4 <xPortStartScheduler+0x134>)
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	021b      	lsls	r3, r3, #8
 800a04e:	4a1d      	ldr	r2, [pc, #116]	; (800a0c4 <xPortStartScheduler+0x134>)
 800a050:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a052:	4b1c      	ldr	r3, [pc, #112]	; (800a0c4 <xPortStartScheduler+0x134>)
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a05a:	4a1a      	ldr	r2, [pc, #104]	; (800a0c4 <xPortStartScheduler+0x134>)
 800a05c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	b2da      	uxtb	r2, r3
 800a062:	697b      	ldr	r3, [r7, #20]
 800a064:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a066:	4b18      	ldr	r3, [pc, #96]	; (800a0c8 <xPortStartScheduler+0x138>)
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	4a17      	ldr	r2, [pc, #92]	; (800a0c8 <xPortStartScheduler+0x138>)
 800a06c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a070:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a072:	4b15      	ldr	r3, [pc, #84]	; (800a0c8 <xPortStartScheduler+0x138>)
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	4a14      	ldr	r2, [pc, #80]	; (800a0c8 <xPortStartScheduler+0x138>)
 800a078:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a07c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a07e:	f000 f8dd 	bl	800a23c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a082:	4b12      	ldr	r3, [pc, #72]	; (800a0cc <xPortStartScheduler+0x13c>)
 800a084:	2200      	movs	r2, #0
 800a086:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a088:	f000 f8fc 	bl	800a284 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a08c:	4b10      	ldr	r3, [pc, #64]	; (800a0d0 <xPortStartScheduler+0x140>)
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	4a0f      	ldr	r2, [pc, #60]	; (800a0d0 <xPortStartScheduler+0x140>)
 800a092:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a096:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a098:	f7ff ff66 	bl	8009f68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a09c:	f7ff f84c 	bl	8009138 <vTaskSwitchContext>
	prvTaskExitError();
 800a0a0:	f7ff ff22 	bl	8009ee8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a0a4:	2300      	movs	r3, #0
}
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	3718      	adds	r7, #24
 800a0aa:	46bd      	mov	sp, r7
 800a0ac:	bd80      	pop	{r7, pc}
 800a0ae:	bf00      	nop
 800a0b0:	e000ed00 	.word	0xe000ed00
 800a0b4:	410fc271 	.word	0x410fc271
 800a0b8:	410fc270 	.word	0x410fc270
 800a0bc:	e000e400 	.word	0xe000e400
 800a0c0:	20001108 	.word	0x20001108
 800a0c4:	2000110c 	.word	0x2000110c
 800a0c8:	e000ed20 	.word	0xe000ed20
 800a0cc:	20000098 	.word	0x20000098
 800a0d0:	e000ef34 	.word	0xe000ef34

0800a0d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a0d4:	b480      	push	{r7}
 800a0d6:	b083      	sub	sp, #12
 800a0d8:	af00      	add	r7, sp, #0
	__asm volatile
 800a0da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0de:	f383 8811 	msr	BASEPRI, r3
 800a0e2:	f3bf 8f6f 	isb	sy
 800a0e6:	f3bf 8f4f 	dsb	sy
 800a0ea:	607b      	str	r3, [r7, #4]
}
 800a0ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a0ee:	4b0f      	ldr	r3, [pc, #60]	; (800a12c <vPortEnterCritical+0x58>)
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	3301      	adds	r3, #1
 800a0f4:	4a0d      	ldr	r2, [pc, #52]	; (800a12c <vPortEnterCritical+0x58>)
 800a0f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a0f8:	4b0c      	ldr	r3, [pc, #48]	; (800a12c <vPortEnterCritical+0x58>)
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	2b01      	cmp	r3, #1
 800a0fe:	d10f      	bne.n	800a120 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a100:	4b0b      	ldr	r3, [pc, #44]	; (800a130 <vPortEnterCritical+0x5c>)
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	b2db      	uxtb	r3, r3
 800a106:	2b00      	cmp	r3, #0
 800a108:	d00a      	beq.n	800a120 <vPortEnterCritical+0x4c>
	__asm volatile
 800a10a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a10e:	f383 8811 	msr	BASEPRI, r3
 800a112:	f3bf 8f6f 	isb	sy
 800a116:	f3bf 8f4f 	dsb	sy
 800a11a:	603b      	str	r3, [r7, #0]
}
 800a11c:	bf00      	nop
 800a11e:	e7fe      	b.n	800a11e <vPortEnterCritical+0x4a>
	}
}
 800a120:	bf00      	nop
 800a122:	370c      	adds	r7, #12
 800a124:	46bd      	mov	sp, r7
 800a126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12a:	4770      	bx	lr
 800a12c:	20000098 	.word	0x20000098
 800a130:	e000ed04 	.word	0xe000ed04

0800a134 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a134:	b480      	push	{r7}
 800a136:	b083      	sub	sp, #12
 800a138:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a13a:	4b12      	ldr	r3, [pc, #72]	; (800a184 <vPortExitCritical+0x50>)
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d10a      	bne.n	800a158 <vPortExitCritical+0x24>
	__asm volatile
 800a142:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a146:	f383 8811 	msr	BASEPRI, r3
 800a14a:	f3bf 8f6f 	isb	sy
 800a14e:	f3bf 8f4f 	dsb	sy
 800a152:	607b      	str	r3, [r7, #4]
}
 800a154:	bf00      	nop
 800a156:	e7fe      	b.n	800a156 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a158:	4b0a      	ldr	r3, [pc, #40]	; (800a184 <vPortExitCritical+0x50>)
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	3b01      	subs	r3, #1
 800a15e:	4a09      	ldr	r2, [pc, #36]	; (800a184 <vPortExitCritical+0x50>)
 800a160:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a162:	4b08      	ldr	r3, [pc, #32]	; (800a184 <vPortExitCritical+0x50>)
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	2b00      	cmp	r3, #0
 800a168:	d105      	bne.n	800a176 <vPortExitCritical+0x42>
 800a16a:	2300      	movs	r3, #0
 800a16c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a16e:	683b      	ldr	r3, [r7, #0]
 800a170:	f383 8811 	msr	BASEPRI, r3
}
 800a174:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a176:	bf00      	nop
 800a178:	370c      	adds	r7, #12
 800a17a:	46bd      	mov	sp, r7
 800a17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a180:	4770      	bx	lr
 800a182:	bf00      	nop
 800a184:	20000098 	.word	0x20000098
	...

0800a190 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a190:	f3ef 8009 	mrs	r0, PSP
 800a194:	f3bf 8f6f 	isb	sy
 800a198:	4b15      	ldr	r3, [pc, #84]	; (800a1f0 <pxCurrentTCBConst>)
 800a19a:	681a      	ldr	r2, [r3, #0]
 800a19c:	f01e 0f10 	tst.w	lr, #16
 800a1a0:	bf08      	it	eq
 800a1a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a1a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1aa:	6010      	str	r0, [r2, #0]
 800a1ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a1b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a1b4:	f380 8811 	msr	BASEPRI, r0
 800a1b8:	f3bf 8f4f 	dsb	sy
 800a1bc:	f3bf 8f6f 	isb	sy
 800a1c0:	f7fe ffba 	bl	8009138 <vTaskSwitchContext>
 800a1c4:	f04f 0000 	mov.w	r0, #0
 800a1c8:	f380 8811 	msr	BASEPRI, r0
 800a1cc:	bc09      	pop	{r0, r3}
 800a1ce:	6819      	ldr	r1, [r3, #0]
 800a1d0:	6808      	ldr	r0, [r1, #0]
 800a1d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1d6:	f01e 0f10 	tst.w	lr, #16
 800a1da:	bf08      	it	eq
 800a1dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a1e0:	f380 8809 	msr	PSP, r0
 800a1e4:	f3bf 8f6f 	isb	sy
 800a1e8:	4770      	bx	lr
 800a1ea:	bf00      	nop
 800a1ec:	f3af 8000 	nop.w

0800a1f0 <pxCurrentTCBConst>:
 800a1f0:	20000adc 	.word	0x20000adc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a1f4:	bf00      	nop
 800a1f6:	bf00      	nop

0800a1f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a1f8:	b580      	push	{r7, lr}
 800a1fa:	b082      	sub	sp, #8
 800a1fc:	af00      	add	r7, sp, #0
	__asm volatile
 800a1fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a202:	f383 8811 	msr	BASEPRI, r3
 800a206:	f3bf 8f6f 	isb	sy
 800a20a:	f3bf 8f4f 	dsb	sy
 800a20e:	607b      	str	r3, [r7, #4]
}
 800a210:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a212:	f7fe fed7 	bl	8008fc4 <xTaskIncrementTick>
 800a216:	4603      	mov	r3, r0
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d003      	beq.n	800a224 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a21c:	4b06      	ldr	r3, [pc, #24]	; (800a238 <xPortSysTickHandler+0x40>)
 800a21e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a222:	601a      	str	r2, [r3, #0]
 800a224:	2300      	movs	r3, #0
 800a226:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a228:	683b      	ldr	r3, [r7, #0]
 800a22a:	f383 8811 	msr	BASEPRI, r3
}
 800a22e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a230:	bf00      	nop
 800a232:	3708      	adds	r7, #8
 800a234:	46bd      	mov	sp, r7
 800a236:	bd80      	pop	{r7, pc}
 800a238:	e000ed04 	.word	0xe000ed04

0800a23c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a23c:	b480      	push	{r7}
 800a23e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a240:	4b0b      	ldr	r3, [pc, #44]	; (800a270 <vPortSetupTimerInterrupt+0x34>)
 800a242:	2200      	movs	r2, #0
 800a244:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a246:	4b0b      	ldr	r3, [pc, #44]	; (800a274 <vPortSetupTimerInterrupt+0x38>)
 800a248:	2200      	movs	r2, #0
 800a24a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a24c:	4b0a      	ldr	r3, [pc, #40]	; (800a278 <vPortSetupTimerInterrupt+0x3c>)
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	4a0a      	ldr	r2, [pc, #40]	; (800a27c <vPortSetupTimerInterrupt+0x40>)
 800a252:	fba2 2303 	umull	r2, r3, r2, r3
 800a256:	099b      	lsrs	r3, r3, #6
 800a258:	4a09      	ldr	r2, [pc, #36]	; (800a280 <vPortSetupTimerInterrupt+0x44>)
 800a25a:	3b01      	subs	r3, #1
 800a25c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a25e:	4b04      	ldr	r3, [pc, #16]	; (800a270 <vPortSetupTimerInterrupt+0x34>)
 800a260:	2207      	movs	r2, #7
 800a262:	601a      	str	r2, [r3, #0]
}
 800a264:	bf00      	nop
 800a266:	46bd      	mov	sp, r7
 800a268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26c:	4770      	bx	lr
 800a26e:	bf00      	nop
 800a270:	e000e010 	.word	0xe000e010
 800a274:	e000e018 	.word	0xe000e018
 800a278:	20000000 	.word	0x20000000
 800a27c:	10624dd3 	.word	0x10624dd3
 800a280:	e000e014 	.word	0xe000e014

0800a284 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a284:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a294 <vPortEnableVFP+0x10>
 800a288:	6801      	ldr	r1, [r0, #0]
 800a28a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a28e:	6001      	str	r1, [r0, #0]
 800a290:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a292:	bf00      	nop
 800a294:	e000ed88 	.word	0xe000ed88

0800a298 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a298:	b480      	push	{r7}
 800a29a:	b085      	sub	sp, #20
 800a29c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a29e:	f3ef 8305 	mrs	r3, IPSR
 800a2a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	2b0f      	cmp	r3, #15
 800a2a8:	d914      	bls.n	800a2d4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a2aa:	4a17      	ldr	r2, [pc, #92]	; (800a308 <vPortValidateInterruptPriority+0x70>)
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	4413      	add	r3, r2
 800a2b0:	781b      	ldrb	r3, [r3, #0]
 800a2b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a2b4:	4b15      	ldr	r3, [pc, #84]	; (800a30c <vPortValidateInterruptPriority+0x74>)
 800a2b6:	781b      	ldrb	r3, [r3, #0]
 800a2b8:	7afa      	ldrb	r2, [r7, #11]
 800a2ba:	429a      	cmp	r2, r3
 800a2bc:	d20a      	bcs.n	800a2d4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a2be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2c2:	f383 8811 	msr	BASEPRI, r3
 800a2c6:	f3bf 8f6f 	isb	sy
 800a2ca:	f3bf 8f4f 	dsb	sy
 800a2ce:	607b      	str	r3, [r7, #4]
}
 800a2d0:	bf00      	nop
 800a2d2:	e7fe      	b.n	800a2d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a2d4:	4b0e      	ldr	r3, [pc, #56]	; (800a310 <vPortValidateInterruptPriority+0x78>)
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a2dc:	4b0d      	ldr	r3, [pc, #52]	; (800a314 <vPortValidateInterruptPriority+0x7c>)
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	429a      	cmp	r2, r3
 800a2e2:	d90a      	bls.n	800a2fa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a2e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2e8:	f383 8811 	msr	BASEPRI, r3
 800a2ec:	f3bf 8f6f 	isb	sy
 800a2f0:	f3bf 8f4f 	dsb	sy
 800a2f4:	603b      	str	r3, [r7, #0]
}
 800a2f6:	bf00      	nop
 800a2f8:	e7fe      	b.n	800a2f8 <vPortValidateInterruptPriority+0x60>
	}
 800a2fa:	bf00      	nop
 800a2fc:	3714      	adds	r7, #20
 800a2fe:	46bd      	mov	sp, r7
 800a300:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a304:	4770      	bx	lr
 800a306:	bf00      	nop
 800a308:	e000e3f0 	.word	0xe000e3f0
 800a30c:	20001108 	.word	0x20001108
 800a310:	e000ed0c 	.word	0xe000ed0c
 800a314:	2000110c 	.word	0x2000110c

0800a318 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a318:	b580      	push	{r7, lr}
 800a31a:	b08a      	sub	sp, #40	; 0x28
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a320:	2300      	movs	r3, #0
 800a322:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a324:	f7fe fd92 	bl	8008e4c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a328:	4b5b      	ldr	r3, [pc, #364]	; (800a498 <pvPortMalloc+0x180>)
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d101      	bne.n	800a334 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a330:	f000 f920 	bl	800a574 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a334:	4b59      	ldr	r3, [pc, #356]	; (800a49c <pvPortMalloc+0x184>)
 800a336:	681a      	ldr	r2, [r3, #0]
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	4013      	ands	r3, r2
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	f040 8093 	bne.w	800a468 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	2b00      	cmp	r3, #0
 800a346:	d01d      	beq.n	800a384 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a348:	2208      	movs	r2, #8
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	4413      	add	r3, r2
 800a34e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	f003 0307 	and.w	r3, r3, #7
 800a356:	2b00      	cmp	r3, #0
 800a358:	d014      	beq.n	800a384 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	f023 0307 	bic.w	r3, r3, #7
 800a360:	3308      	adds	r3, #8
 800a362:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	f003 0307 	and.w	r3, r3, #7
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d00a      	beq.n	800a384 <pvPortMalloc+0x6c>
	__asm volatile
 800a36e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a372:	f383 8811 	msr	BASEPRI, r3
 800a376:	f3bf 8f6f 	isb	sy
 800a37a:	f3bf 8f4f 	dsb	sy
 800a37e:	617b      	str	r3, [r7, #20]
}
 800a380:	bf00      	nop
 800a382:	e7fe      	b.n	800a382 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	2b00      	cmp	r3, #0
 800a388:	d06e      	beq.n	800a468 <pvPortMalloc+0x150>
 800a38a:	4b45      	ldr	r3, [pc, #276]	; (800a4a0 <pvPortMalloc+0x188>)
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	687a      	ldr	r2, [r7, #4]
 800a390:	429a      	cmp	r2, r3
 800a392:	d869      	bhi.n	800a468 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a394:	4b43      	ldr	r3, [pc, #268]	; (800a4a4 <pvPortMalloc+0x18c>)
 800a396:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a398:	4b42      	ldr	r3, [pc, #264]	; (800a4a4 <pvPortMalloc+0x18c>)
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a39e:	e004      	b.n	800a3aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a3a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a3a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a3aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3ac:	685b      	ldr	r3, [r3, #4]
 800a3ae:	687a      	ldr	r2, [r7, #4]
 800a3b0:	429a      	cmp	r2, r3
 800a3b2:	d903      	bls.n	800a3bc <pvPortMalloc+0xa4>
 800a3b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d1f1      	bne.n	800a3a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a3bc:	4b36      	ldr	r3, [pc, #216]	; (800a498 <pvPortMalloc+0x180>)
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a3c2:	429a      	cmp	r2, r3
 800a3c4:	d050      	beq.n	800a468 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a3c6:	6a3b      	ldr	r3, [r7, #32]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	2208      	movs	r2, #8
 800a3cc:	4413      	add	r3, r2
 800a3ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a3d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3d2:	681a      	ldr	r2, [r3, #0]
 800a3d4:	6a3b      	ldr	r3, [r7, #32]
 800a3d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a3d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3da:	685a      	ldr	r2, [r3, #4]
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	1ad2      	subs	r2, r2, r3
 800a3e0:	2308      	movs	r3, #8
 800a3e2:	005b      	lsls	r3, r3, #1
 800a3e4:	429a      	cmp	r2, r3
 800a3e6:	d91f      	bls.n	800a428 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a3e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	4413      	add	r3, r2
 800a3ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a3f0:	69bb      	ldr	r3, [r7, #24]
 800a3f2:	f003 0307 	and.w	r3, r3, #7
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d00a      	beq.n	800a410 <pvPortMalloc+0xf8>
	__asm volatile
 800a3fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3fe:	f383 8811 	msr	BASEPRI, r3
 800a402:	f3bf 8f6f 	isb	sy
 800a406:	f3bf 8f4f 	dsb	sy
 800a40a:	613b      	str	r3, [r7, #16]
}
 800a40c:	bf00      	nop
 800a40e:	e7fe      	b.n	800a40e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a412:	685a      	ldr	r2, [r3, #4]
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	1ad2      	subs	r2, r2, r3
 800a418:	69bb      	ldr	r3, [r7, #24]
 800a41a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a41c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a41e:	687a      	ldr	r2, [r7, #4]
 800a420:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a422:	69b8      	ldr	r0, [r7, #24]
 800a424:	f000 f908 	bl	800a638 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a428:	4b1d      	ldr	r3, [pc, #116]	; (800a4a0 <pvPortMalloc+0x188>)
 800a42a:	681a      	ldr	r2, [r3, #0]
 800a42c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a42e:	685b      	ldr	r3, [r3, #4]
 800a430:	1ad3      	subs	r3, r2, r3
 800a432:	4a1b      	ldr	r2, [pc, #108]	; (800a4a0 <pvPortMalloc+0x188>)
 800a434:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a436:	4b1a      	ldr	r3, [pc, #104]	; (800a4a0 <pvPortMalloc+0x188>)
 800a438:	681a      	ldr	r2, [r3, #0]
 800a43a:	4b1b      	ldr	r3, [pc, #108]	; (800a4a8 <pvPortMalloc+0x190>)
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	429a      	cmp	r2, r3
 800a440:	d203      	bcs.n	800a44a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a442:	4b17      	ldr	r3, [pc, #92]	; (800a4a0 <pvPortMalloc+0x188>)
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	4a18      	ldr	r2, [pc, #96]	; (800a4a8 <pvPortMalloc+0x190>)
 800a448:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a44a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a44c:	685a      	ldr	r2, [r3, #4]
 800a44e:	4b13      	ldr	r3, [pc, #76]	; (800a49c <pvPortMalloc+0x184>)
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	431a      	orrs	r2, r3
 800a454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a456:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a45a:	2200      	movs	r2, #0
 800a45c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a45e:	4b13      	ldr	r3, [pc, #76]	; (800a4ac <pvPortMalloc+0x194>)
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	3301      	adds	r3, #1
 800a464:	4a11      	ldr	r2, [pc, #68]	; (800a4ac <pvPortMalloc+0x194>)
 800a466:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a468:	f7fe fcfe 	bl	8008e68 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a46c:	69fb      	ldr	r3, [r7, #28]
 800a46e:	f003 0307 	and.w	r3, r3, #7
 800a472:	2b00      	cmp	r3, #0
 800a474:	d00a      	beq.n	800a48c <pvPortMalloc+0x174>
	__asm volatile
 800a476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a47a:	f383 8811 	msr	BASEPRI, r3
 800a47e:	f3bf 8f6f 	isb	sy
 800a482:	f3bf 8f4f 	dsb	sy
 800a486:	60fb      	str	r3, [r7, #12]
}
 800a488:	bf00      	nop
 800a48a:	e7fe      	b.n	800a48a <pvPortMalloc+0x172>
	return pvReturn;
 800a48c:	69fb      	ldr	r3, [r7, #28]
}
 800a48e:	4618      	mov	r0, r3
 800a490:	3728      	adds	r7, #40	; 0x28
 800a492:	46bd      	mov	sp, r7
 800a494:	bd80      	pop	{r7, pc}
 800a496:	bf00      	nop
 800a498:	20004d18 	.word	0x20004d18
 800a49c:	20004d2c 	.word	0x20004d2c
 800a4a0:	20004d1c 	.word	0x20004d1c
 800a4a4:	20004d10 	.word	0x20004d10
 800a4a8:	20004d20 	.word	0x20004d20
 800a4ac:	20004d24 	.word	0x20004d24

0800a4b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a4b0:	b580      	push	{r7, lr}
 800a4b2:	b086      	sub	sp, #24
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d04d      	beq.n	800a55e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a4c2:	2308      	movs	r3, #8
 800a4c4:	425b      	negs	r3, r3
 800a4c6:	697a      	ldr	r2, [r7, #20]
 800a4c8:	4413      	add	r3, r2
 800a4ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a4cc:	697b      	ldr	r3, [r7, #20]
 800a4ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a4d0:	693b      	ldr	r3, [r7, #16]
 800a4d2:	685a      	ldr	r2, [r3, #4]
 800a4d4:	4b24      	ldr	r3, [pc, #144]	; (800a568 <vPortFree+0xb8>)
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	4013      	ands	r3, r2
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d10a      	bne.n	800a4f4 <vPortFree+0x44>
	__asm volatile
 800a4de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4e2:	f383 8811 	msr	BASEPRI, r3
 800a4e6:	f3bf 8f6f 	isb	sy
 800a4ea:	f3bf 8f4f 	dsb	sy
 800a4ee:	60fb      	str	r3, [r7, #12]
}
 800a4f0:	bf00      	nop
 800a4f2:	e7fe      	b.n	800a4f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a4f4:	693b      	ldr	r3, [r7, #16]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d00a      	beq.n	800a512 <vPortFree+0x62>
	__asm volatile
 800a4fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a500:	f383 8811 	msr	BASEPRI, r3
 800a504:	f3bf 8f6f 	isb	sy
 800a508:	f3bf 8f4f 	dsb	sy
 800a50c:	60bb      	str	r3, [r7, #8]
}
 800a50e:	bf00      	nop
 800a510:	e7fe      	b.n	800a510 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a512:	693b      	ldr	r3, [r7, #16]
 800a514:	685a      	ldr	r2, [r3, #4]
 800a516:	4b14      	ldr	r3, [pc, #80]	; (800a568 <vPortFree+0xb8>)
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	4013      	ands	r3, r2
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d01e      	beq.n	800a55e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a520:	693b      	ldr	r3, [r7, #16]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	2b00      	cmp	r3, #0
 800a526:	d11a      	bne.n	800a55e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a528:	693b      	ldr	r3, [r7, #16]
 800a52a:	685a      	ldr	r2, [r3, #4]
 800a52c:	4b0e      	ldr	r3, [pc, #56]	; (800a568 <vPortFree+0xb8>)
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	43db      	mvns	r3, r3
 800a532:	401a      	ands	r2, r3
 800a534:	693b      	ldr	r3, [r7, #16]
 800a536:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a538:	f7fe fc88 	bl	8008e4c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a53c:	693b      	ldr	r3, [r7, #16]
 800a53e:	685a      	ldr	r2, [r3, #4]
 800a540:	4b0a      	ldr	r3, [pc, #40]	; (800a56c <vPortFree+0xbc>)
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	4413      	add	r3, r2
 800a546:	4a09      	ldr	r2, [pc, #36]	; (800a56c <vPortFree+0xbc>)
 800a548:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a54a:	6938      	ldr	r0, [r7, #16]
 800a54c:	f000 f874 	bl	800a638 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a550:	4b07      	ldr	r3, [pc, #28]	; (800a570 <vPortFree+0xc0>)
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	3301      	adds	r3, #1
 800a556:	4a06      	ldr	r2, [pc, #24]	; (800a570 <vPortFree+0xc0>)
 800a558:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a55a:	f7fe fc85 	bl	8008e68 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a55e:	bf00      	nop
 800a560:	3718      	adds	r7, #24
 800a562:	46bd      	mov	sp, r7
 800a564:	bd80      	pop	{r7, pc}
 800a566:	bf00      	nop
 800a568:	20004d2c 	.word	0x20004d2c
 800a56c:	20004d1c 	.word	0x20004d1c
 800a570:	20004d28 	.word	0x20004d28

0800a574 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a574:	b480      	push	{r7}
 800a576:	b085      	sub	sp, #20
 800a578:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a57a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800a57e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a580:	4b27      	ldr	r3, [pc, #156]	; (800a620 <prvHeapInit+0xac>)
 800a582:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	f003 0307 	and.w	r3, r3, #7
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d00c      	beq.n	800a5a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	3307      	adds	r3, #7
 800a592:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	f023 0307 	bic.w	r3, r3, #7
 800a59a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a59c:	68ba      	ldr	r2, [r7, #8]
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	1ad3      	subs	r3, r2, r3
 800a5a2:	4a1f      	ldr	r2, [pc, #124]	; (800a620 <prvHeapInit+0xac>)
 800a5a4:	4413      	add	r3, r2
 800a5a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a5ac:	4a1d      	ldr	r2, [pc, #116]	; (800a624 <prvHeapInit+0xb0>)
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a5b2:	4b1c      	ldr	r3, [pc, #112]	; (800a624 <prvHeapInit+0xb0>)
 800a5b4:	2200      	movs	r2, #0
 800a5b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	68ba      	ldr	r2, [r7, #8]
 800a5bc:	4413      	add	r3, r2
 800a5be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a5c0:	2208      	movs	r2, #8
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	1a9b      	subs	r3, r3, r2
 800a5c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	f023 0307 	bic.w	r3, r3, #7
 800a5ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	4a15      	ldr	r2, [pc, #84]	; (800a628 <prvHeapInit+0xb4>)
 800a5d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a5d6:	4b14      	ldr	r3, [pc, #80]	; (800a628 <prvHeapInit+0xb4>)
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	2200      	movs	r2, #0
 800a5dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a5de:	4b12      	ldr	r3, [pc, #72]	; (800a628 <prvHeapInit+0xb4>)
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	2200      	movs	r2, #0
 800a5e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a5ea:	683b      	ldr	r3, [r7, #0]
 800a5ec:	68fa      	ldr	r2, [r7, #12]
 800a5ee:	1ad2      	subs	r2, r2, r3
 800a5f0:	683b      	ldr	r3, [r7, #0]
 800a5f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a5f4:	4b0c      	ldr	r3, [pc, #48]	; (800a628 <prvHeapInit+0xb4>)
 800a5f6:	681a      	ldr	r2, [r3, #0]
 800a5f8:	683b      	ldr	r3, [r7, #0]
 800a5fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a5fc:	683b      	ldr	r3, [r7, #0]
 800a5fe:	685b      	ldr	r3, [r3, #4]
 800a600:	4a0a      	ldr	r2, [pc, #40]	; (800a62c <prvHeapInit+0xb8>)
 800a602:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a604:	683b      	ldr	r3, [r7, #0]
 800a606:	685b      	ldr	r3, [r3, #4]
 800a608:	4a09      	ldr	r2, [pc, #36]	; (800a630 <prvHeapInit+0xbc>)
 800a60a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a60c:	4b09      	ldr	r3, [pc, #36]	; (800a634 <prvHeapInit+0xc0>)
 800a60e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a612:	601a      	str	r2, [r3, #0]
}
 800a614:	bf00      	nop
 800a616:	3714      	adds	r7, #20
 800a618:	46bd      	mov	sp, r7
 800a61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a61e:	4770      	bx	lr
 800a620:	20001110 	.word	0x20001110
 800a624:	20004d10 	.word	0x20004d10
 800a628:	20004d18 	.word	0x20004d18
 800a62c:	20004d20 	.word	0x20004d20
 800a630:	20004d1c 	.word	0x20004d1c
 800a634:	20004d2c 	.word	0x20004d2c

0800a638 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a638:	b480      	push	{r7}
 800a63a:	b085      	sub	sp, #20
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a640:	4b28      	ldr	r3, [pc, #160]	; (800a6e4 <prvInsertBlockIntoFreeList+0xac>)
 800a642:	60fb      	str	r3, [r7, #12]
 800a644:	e002      	b.n	800a64c <prvInsertBlockIntoFreeList+0x14>
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	60fb      	str	r3, [r7, #12]
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	687a      	ldr	r2, [r7, #4]
 800a652:	429a      	cmp	r2, r3
 800a654:	d8f7      	bhi.n	800a646 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	685b      	ldr	r3, [r3, #4]
 800a65e:	68ba      	ldr	r2, [r7, #8]
 800a660:	4413      	add	r3, r2
 800a662:	687a      	ldr	r2, [r7, #4]
 800a664:	429a      	cmp	r2, r3
 800a666:	d108      	bne.n	800a67a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	685a      	ldr	r2, [r3, #4]
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	685b      	ldr	r3, [r3, #4]
 800a670:	441a      	add	r2, r3
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	685b      	ldr	r3, [r3, #4]
 800a682:	68ba      	ldr	r2, [r7, #8]
 800a684:	441a      	add	r2, r3
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	429a      	cmp	r2, r3
 800a68c:	d118      	bne.n	800a6c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	681a      	ldr	r2, [r3, #0]
 800a692:	4b15      	ldr	r3, [pc, #84]	; (800a6e8 <prvInsertBlockIntoFreeList+0xb0>)
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	429a      	cmp	r2, r3
 800a698:	d00d      	beq.n	800a6b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	685a      	ldr	r2, [r3, #4]
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	685b      	ldr	r3, [r3, #4]
 800a6a4:	441a      	add	r2, r3
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	681a      	ldr	r2, [r3, #0]
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	601a      	str	r2, [r3, #0]
 800a6b4:	e008      	b.n	800a6c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a6b6:	4b0c      	ldr	r3, [pc, #48]	; (800a6e8 <prvInsertBlockIntoFreeList+0xb0>)
 800a6b8:	681a      	ldr	r2, [r3, #0]
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	601a      	str	r2, [r3, #0]
 800a6be:	e003      	b.n	800a6c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	681a      	ldr	r2, [r3, #0]
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a6c8:	68fa      	ldr	r2, [r7, #12]
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	429a      	cmp	r2, r3
 800a6ce:	d002      	beq.n	800a6d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	687a      	ldr	r2, [r7, #4]
 800a6d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a6d6:	bf00      	nop
 800a6d8:	3714      	adds	r7, #20
 800a6da:	46bd      	mov	sp, r7
 800a6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e0:	4770      	bx	lr
 800a6e2:	bf00      	nop
 800a6e4:	20004d10 	.word	0x20004d10
 800a6e8:	20004d18 	.word	0x20004d18

0800a6ec <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a6ec:	b580      	push	{r7, lr}
 800a6ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a6f0:	2200      	movs	r2, #0
 800a6f2:	4912      	ldr	r1, [pc, #72]	; (800a73c <MX_USB_DEVICE_Init+0x50>)
 800a6f4:	4812      	ldr	r0, [pc, #72]	; (800a740 <MX_USB_DEVICE_Init+0x54>)
 800a6f6:	f7fb ff45 	bl	8006584 <USBD_Init>
 800a6fa:	4603      	mov	r3, r0
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d001      	beq.n	800a704 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a700:	f7f6 f934 	bl	800096c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a704:	490f      	ldr	r1, [pc, #60]	; (800a744 <MX_USB_DEVICE_Init+0x58>)
 800a706:	480e      	ldr	r0, [pc, #56]	; (800a740 <MX_USB_DEVICE_Init+0x54>)
 800a708:	f7fb ff6c 	bl	80065e4 <USBD_RegisterClass>
 800a70c:	4603      	mov	r3, r0
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d001      	beq.n	800a716 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a712:	f7f6 f92b 	bl	800096c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a716:	490c      	ldr	r1, [pc, #48]	; (800a748 <MX_USB_DEVICE_Init+0x5c>)
 800a718:	4809      	ldr	r0, [pc, #36]	; (800a740 <MX_USB_DEVICE_Init+0x54>)
 800a71a:	f7fb fea3 	bl	8006464 <USBD_CDC_RegisterInterface>
 800a71e:	4603      	mov	r3, r0
 800a720:	2b00      	cmp	r3, #0
 800a722:	d001      	beq.n	800a728 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a724:	f7f6 f922 	bl	800096c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a728:	4805      	ldr	r0, [pc, #20]	; (800a740 <MX_USB_DEVICE_Init+0x54>)
 800a72a:	f7fb ff91 	bl	8006650 <USBD_Start>
 800a72e:	4603      	mov	r3, r0
 800a730:	2b00      	cmp	r3, #0
 800a732:	d001      	beq.n	800a738 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a734:	f7f6 f91a 	bl	800096c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a738:	bf00      	nop
 800a73a:	bd80      	pop	{r7, pc}
 800a73c:	200000b0 	.word	0x200000b0
 800a740:	20004d30 	.word	0x20004d30
 800a744:	20000018 	.word	0x20000018
 800a748:	2000009c 	.word	0x2000009c

0800a74c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a74c:	b580      	push	{r7, lr}
 800a74e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a750:	2200      	movs	r2, #0
 800a752:	4905      	ldr	r1, [pc, #20]	; (800a768 <CDC_Init_FS+0x1c>)
 800a754:	4805      	ldr	r0, [pc, #20]	; (800a76c <CDC_Init_FS+0x20>)
 800a756:	f7fb fe9f 	bl	8006498 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a75a:	4905      	ldr	r1, [pc, #20]	; (800a770 <CDC_Init_FS+0x24>)
 800a75c:	4803      	ldr	r0, [pc, #12]	; (800a76c <CDC_Init_FS+0x20>)
 800a75e:	f7fb febd 	bl	80064dc <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a762:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a764:	4618      	mov	r0, r3
 800a766:	bd80      	pop	{r7, pc}
 800a768:	2000580c 	.word	0x2000580c
 800a76c:	20004d30 	.word	0x20004d30
 800a770:	2000500c 	.word	0x2000500c

0800a774 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a774:	b480      	push	{r7}
 800a776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a778:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a77a:	4618      	mov	r0, r3
 800a77c:	46bd      	mov	sp, r7
 800a77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a782:	4770      	bx	lr

0800a784 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a784:	b480      	push	{r7}
 800a786:	b083      	sub	sp, #12
 800a788:	af00      	add	r7, sp, #0
 800a78a:	4603      	mov	r3, r0
 800a78c:	6039      	str	r1, [r7, #0]
 800a78e:	71fb      	strb	r3, [r7, #7]
 800a790:	4613      	mov	r3, r2
 800a792:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a794:	79fb      	ldrb	r3, [r7, #7]
 800a796:	2b23      	cmp	r3, #35	; 0x23
 800a798:	d84a      	bhi.n	800a830 <CDC_Control_FS+0xac>
 800a79a:	a201      	add	r2, pc, #4	; (adr r2, 800a7a0 <CDC_Control_FS+0x1c>)
 800a79c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7a0:	0800a831 	.word	0x0800a831
 800a7a4:	0800a831 	.word	0x0800a831
 800a7a8:	0800a831 	.word	0x0800a831
 800a7ac:	0800a831 	.word	0x0800a831
 800a7b0:	0800a831 	.word	0x0800a831
 800a7b4:	0800a831 	.word	0x0800a831
 800a7b8:	0800a831 	.word	0x0800a831
 800a7bc:	0800a831 	.word	0x0800a831
 800a7c0:	0800a831 	.word	0x0800a831
 800a7c4:	0800a831 	.word	0x0800a831
 800a7c8:	0800a831 	.word	0x0800a831
 800a7cc:	0800a831 	.word	0x0800a831
 800a7d0:	0800a831 	.word	0x0800a831
 800a7d4:	0800a831 	.word	0x0800a831
 800a7d8:	0800a831 	.word	0x0800a831
 800a7dc:	0800a831 	.word	0x0800a831
 800a7e0:	0800a831 	.word	0x0800a831
 800a7e4:	0800a831 	.word	0x0800a831
 800a7e8:	0800a831 	.word	0x0800a831
 800a7ec:	0800a831 	.word	0x0800a831
 800a7f0:	0800a831 	.word	0x0800a831
 800a7f4:	0800a831 	.word	0x0800a831
 800a7f8:	0800a831 	.word	0x0800a831
 800a7fc:	0800a831 	.word	0x0800a831
 800a800:	0800a831 	.word	0x0800a831
 800a804:	0800a831 	.word	0x0800a831
 800a808:	0800a831 	.word	0x0800a831
 800a80c:	0800a831 	.word	0x0800a831
 800a810:	0800a831 	.word	0x0800a831
 800a814:	0800a831 	.word	0x0800a831
 800a818:	0800a831 	.word	0x0800a831
 800a81c:	0800a831 	.word	0x0800a831
 800a820:	0800a831 	.word	0x0800a831
 800a824:	0800a831 	.word	0x0800a831
 800a828:	0800a831 	.word	0x0800a831
 800a82c:	0800a831 	.word	0x0800a831
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a830:	bf00      	nop
  }

  return (USBD_OK);
 800a832:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a834:	4618      	mov	r0, r3
 800a836:	370c      	adds	r7, #12
 800a838:	46bd      	mov	sp, r7
 800a83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a83e:	4770      	bx	lr

0800a840 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a840:	b580      	push	{r7, lr}
 800a842:	b082      	sub	sp, #8
 800a844:	af00      	add	r7, sp, #0
 800a846:	6078      	str	r0, [r7, #4]
 800a848:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a84a:	6879      	ldr	r1, [r7, #4]
 800a84c:	4805      	ldr	r0, [pc, #20]	; (800a864 <CDC_Receive_FS+0x24>)
 800a84e:	f7fb fe45 	bl	80064dc <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a852:	4804      	ldr	r0, [pc, #16]	; (800a864 <CDC_Receive_FS+0x24>)
 800a854:	f7fb fe60 	bl	8006518 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a858:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a85a:	4618      	mov	r0, r3
 800a85c:	3708      	adds	r7, #8
 800a85e:	46bd      	mov	sp, r7
 800a860:	bd80      	pop	{r7, pc}
 800a862:	bf00      	nop
 800a864:	20004d30 	.word	0x20004d30

0800a868 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a868:	b480      	push	{r7}
 800a86a:	b087      	sub	sp, #28
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	60f8      	str	r0, [r7, #12]
 800a870:	60b9      	str	r1, [r7, #8]
 800a872:	4613      	mov	r3, r2
 800a874:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a876:	2300      	movs	r3, #0
 800a878:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800a87a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a87e:	4618      	mov	r0, r3
 800a880:	371c      	adds	r7, #28
 800a882:	46bd      	mov	sp, r7
 800a884:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a888:	4770      	bx	lr
	...

0800a88c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a88c:	b480      	push	{r7}
 800a88e:	b083      	sub	sp, #12
 800a890:	af00      	add	r7, sp, #0
 800a892:	4603      	mov	r3, r0
 800a894:	6039      	str	r1, [r7, #0]
 800a896:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a898:	683b      	ldr	r3, [r7, #0]
 800a89a:	2212      	movs	r2, #18
 800a89c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a89e:	4b03      	ldr	r3, [pc, #12]	; (800a8ac <USBD_FS_DeviceDescriptor+0x20>)
}
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	370c      	adds	r7, #12
 800a8a4:	46bd      	mov	sp, r7
 800a8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8aa:	4770      	bx	lr
 800a8ac:	200000cc 	.word	0x200000cc

0800a8b0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a8b0:	b480      	push	{r7}
 800a8b2:	b083      	sub	sp, #12
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	4603      	mov	r3, r0
 800a8b8:	6039      	str	r1, [r7, #0]
 800a8ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a8bc:	683b      	ldr	r3, [r7, #0]
 800a8be:	2204      	movs	r2, #4
 800a8c0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a8c2:	4b03      	ldr	r3, [pc, #12]	; (800a8d0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a8c4:	4618      	mov	r0, r3
 800a8c6:	370c      	adds	r7, #12
 800a8c8:	46bd      	mov	sp, r7
 800a8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ce:	4770      	bx	lr
 800a8d0:	200000e0 	.word	0x200000e0

0800a8d4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a8d4:	b580      	push	{r7, lr}
 800a8d6:	b082      	sub	sp, #8
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	4603      	mov	r3, r0
 800a8dc:	6039      	str	r1, [r7, #0]
 800a8de:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a8e0:	79fb      	ldrb	r3, [r7, #7]
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d105      	bne.n	800a8f2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a8e6:	683a      	ldr	r2, [r7, #0]
 800a8e8:	4907      	ldr	r1, [pc, #28]	; (800a908 <USBD_FS_ProductStrDescriptor+0x34>)
 800a8ea:	4808      	ldr	r0, [pc, #32]	; (800a90c <USBD_FS_ProductStrDescriptor+0x38>)
 800a8ec:	f7fd f862 	bl	80079b4 <USBD_GetString>
 800a8f0:	e004      	b.n	800a8fc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a8f2:	683a      	ldr	r2, [r7, #0]
 800a8f4:	4904      	ldr	r1, [pc, #16]	; (800a908 <USBD_FS_ProductStrDescriptor+0x34>)
 800a8f6:	4805      	ldr	r0, [pc, #20]	; (800a90c <USBD_FS_ProductStrDescriptor+0x38>)
 800a8f8:	f7fd f85c 	bl	80079b4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a8fc:	4b02      	ldr	r3, [pc, #8]	; (800a908 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a8fe:	4618      	mov	r0, r3
 800a900:	3708      	adds	r7, #8
 800a902:	46bd      	mov	sp, r7
 800a904:	bd80      	pop	{r7, pc}
 800a906:	bf00      	nop
 800a908:	2000600c 	.word	0x2000600c
 800a90c:	0800b2e4 	.word	0x0800b2e4

0800a910 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a910:	b580      	push	{r7, lr}
 800a912:	b082      	sub	sp, #8
 800a914:	af00      	add	r7, sp, #0
 800a916:	4603      	mov	r3, r0
 800a918:	6039      	str	r1, [r7, #0]
 800a91a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a91c:	683a      	ldr	r2, [r7, #0]
 800a91e:	4904      	ldr	r1, [pc, #16]	; (800a930 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a920:	4804      	ldr	r0, [pc, #16]	; (800a934 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a922:	f7fd f847 	bl	80079b4 <USBD_GetString>
  return USBD_StrDesc;
 800a926:	4b02      	ldr	r3, [pc, #8]	; (800a930 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a928:	4618      	mov	r0, r3
 800a92a:	3708      	adds	r7, #8
 800a92c:	46bd      	mov	sp, r7
 800a92e:	bd80      	pop	{r7, pc}
 800a930:	2000600c 	.word	0x2000600c
 800a934:	0800b2fc 	.word	0x0800b2fc

0800a938 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a938:	b580      	push	{r7, lr}
 800a93a:	b082      	sub	sp, #8
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	4603      	mov	r3, r0
 800a940:	6039      	str	r1, [r7, #0]
 800a942:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a944:	683b      	ldr	r3, [r7, #0]
 800a946:	221a      	movs	r2, #26
 800a948:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a94a:	f000 f843 	bl	800a9d4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a94e:	4b02      	ldr	r3, [pc, #8]	; (800a958 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a950:	4618      	mov	r0, r3
 800a952:	3708      	adds	r7, #8
 800a954:	46bd      	mov	sp, r7
 800a956:	bd80      	pop	{r7, pc}
 800a958:	200000e4 	.word	0x200000e4

0800a95c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a95c:	b580      	push	{r7, lr}
 800a95e:	b082      	sub	sp, #8
 800a960:	af00      	add	r7, sp, #0
 800a962:	4603      	mov	r3, r0
 800a964:	6039      	str	r1, [r7, #0]
 800a966:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a968:	79fb      	ldrb	r3, [r7, #7]
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d105      	bne.n	800a97a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a96e:	683a      	ldr	r2, [r7, #0]
 800a970:	4907      	ldr	r1, [pc, #28]	; (800a990 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a972:	4808      	ldr	r0, [pc, #32]	; (800a994 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a974:	f7fd f81e 	bl	80079b4 <USBD_GetString>
 800a978:	e004      	b.n	800a984 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a97a:	683a      	ldr	r2, [r7, #0]
 800a97c:	4904      	ldr	r1, [pc, #16]	; (800a990 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a97e:	4805      	ldr	r0, [pc, #20]	; (800a994 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a980:	f7fd f818 	bl	80079b4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a984:	4b02      	ldr	r3, [pc, #8]	; (800a990 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a986:	4618      	mov	r0, r3
 800a988:	3708      	adds	r7, #8
 800a98a:	46bd      	mov	sp, r7
 800a98c:	bd80      	pop	{r7, pc}
 800a98e:	bf00      	nop
 800a990:	2000600c 	.word	0x2000600c
 800a994:	0800b310 	.word	0x0800b310

0800a998 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a998:	b580      	push	{r7, lr}
 800a99a:	b082      	sub	sp, #8
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	4603      	mov	r3, r0
 800a9a0:	6039      	str	r1, [r7, #0]
 800a9a2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a9a4:	79fb      	ldrb	r3, [r7, #7]
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d105      	bne.n	800a9b6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a9aa:	683a      	ldr	r2, [r7, #0]
 800a9ac:	4907      	ldr	r1, [pc, #28]	; (800a9cc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a9ae:	4808      	ldr	r0, [pc, #32]	; (800a9d0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a9b0:	f7fd f800 	bl	80079b4 <USBD_GetString>
 800a9b4:	e004      	b.n	800a9c0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a9b6:	683a      	ldr	r2, [r7, #0]
 800a9b8:	4904      	ldr	r1, [pc, #16]	; (800a9cc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a9ba:	4805      	ldr	r0, [pc, #20]	; (800a9d0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a9bc:	f7fc fffa 	bl	80079b4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a9c0:	4b02      	ldr	r3, [pc, #8]	; (800a9cc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a9c2:	4618      	mov	r0, r3
 800a9c4:	3708      	adds	r7, #8
 800a9c6:	46bd      	mov	sp, r7
 800a9c8:	bd80      	pop	{r7, pc}
 800a9ca:	bf00      	nop
 800a9cc:	2000600c 	.word	0x2000600c
 800a9d0:	0800b31c 	.word	0x0800b31c

0800a9d4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a9d4:	b580      	push	{r7, lr}
 800a9d6:	b084      	sub	sp, #16
 800a9d8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a9da:	4b0f      	ldr	r3, [pc, #60]	; (800aa18 <Get_SerialNum+0x44>)
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a9e0:	4b0e      	ldr	r3, [pc, #56]	; (800aa1c <Get_SerialNum+0x48>)
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a9e6:	4b0e      	ldr	r3, [pc, #56]	; (800aa20 <Get_SerialNum+0x4c>)
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a9ec:	68fa      	ldr	r2, [r7, #12]
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	4413      	add	r3, r2
 800a9f2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d009      	beq.n	800aa0e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a9fa:	2208      	movs	r2, #8
 800a9fc:	4909      	ldr	r1, [pc, #36]	; (800aa24 <Get_SerialNum+0x50>)
 800a9fe:	68f8      	ldr	r0, [r7, #12]
 800aa00:	f000 f814 	bl	800aa2c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800aa04:	2204      	movs	r2, #4
 800aa06:	4908      	ldr	r1, [pc, #32]	; (800aa28 <Get_SerialNum+0x54>)
 800aa08:	68b8      	ldr	r0, [r7, #8]
 800aa0a:	f000 f80f 	bl	800aa2c <IntToUnicode>
  }
}
 800aa0e:	bf00      	nop
 800aa10:	3710      	adds	r7, #16
 800aa12:	46bd      	mov	sp, r7
 800aa14:	bd80      	pop	{r7, pc}
 800aa16:	bf00      	nop
 800aa18:	1fff7a10 	.word	0x1fff7a10
 800aa1c:	1fff7a14 	.word	0x1fff7a14
 800aa20:	1fff7a18 	.word	0x1fff7a18
 800aa24:	200000e6 	.word	0x200000e6
 800aa28:	200000f6 	.word	0x200000f6

0800aa2c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800aa2c:	b480      	push	{r7}
 800aa2e:	b087      	sub	sp, #28
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	60f8      	str	r0, [r7, #12]
 800aa34:	60b9      	str	r1, [r7, #8]
 800aa36:	4613      	mov	r3, r2
 800aa38:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800aa3a:	2300      	movs	r3, #0
 800aa3c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800aa3e:	2300      	movs	r3, #0
 800aa40:	75fb      	strb	r3, [r7, #23]
 800aa42:	e027      	b.n	800aa94 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	0f1b      	lsrs	r3, r3, #28
 800aa48:	2b09      	cmp	r3, #9
 800aa4a:	d80b      	bhi.n	800aa64 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	0f1b      	lsrs	r3, r3, #28
 800aa50:	b2da      	uxtb	r2, r3
 800aa52:	7dfb      	ldrb	r3, [r7, #23]
 800aa54:	005b      	lsls	r3, r3, #1
 800aa56:	4619      	mov	r1, r3
 800aa58:	68bb      	ldr	r3, [r7, #8]
 800aa5a:	440b      	add	r3, r1
 800aa5c:	3230      	adds	r2, #48	; 0x30
 800aa5e:	b2d2      	uxtb	r2, r2
 800aa60:	701a      	strb	r2, [r3, #0]
 800aa62:	e00a      	b.n	800aa7a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	0f1b      	lsrs	r3, r3, #28
 800aa68:	b2da      	uxtb	r2, r3
 800aa6a:	7dfb      	ldrb	r3, [r7, #23]
 800aa6c:	005b      	lsls	r3, r3, #1
 800aa6e:	4619      	mov	r1, r3
 800aa70:	68bb      	ldr	r3, [r7, #8]
 800aa72:	440b      	add	r3, r1
 800aa74:	3237      	adds	r2, #55	; 0x37
 800aa76:	b2d2      	uxtb	r2, r2
 800aa78:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	011b      	lsls	r3, r3, #4
 800aa7e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800aa80:	7dfb      	ldrb	r3, [r7, #23]
 800aa82:	005b      	lsls	r3, r3, #1
 800aa84:	3301      	adds	r3, #1
 800aa86:	68ba      	ldr	r2, [r7, #8]
 800aa88:	4413      	add	r3, r2
 800aa8a:	2200      	movs	r2, #0
 800aa8c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800aa8e:	7dfb      	ldrb	r3, [r7, #23]
 800aa90:	3301      	adds	r3, #1
 800aa92:	75fb      	strb	r3, [r7, #23]
 800aa94:	7dfa      	ldrb	r2, [r7, #23]
 800aa96:	79fb      	ldrb	r3, [r7, #7]
 800aa98:	429a      	cmp	r2, r3
 800aa9a:	d3d3      	bcc.n	800aa44 <IntToUnicode+0x18>
  }
}
 800aa9c:	bf00      	nop
 800aa9e:	bf00      	nop
 800aaa0:	371c      	adds	r7, #28
 800aaa2:	46bd      	mov	sp, r7
 800aaa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa8:	4770      	bx	lr
	...

0800aaac <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800aaac:	b580      	push	{r7, lr}
 800aaae:	b08a      	sub	sp, #40	; 0x28
 800aab0:	af00      	add	r7, sp, #0
 800aab2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800aab4:	f107 0314 	add.w	r3, r7, #20
 800aab8:	2200      	movs	r2, #0
 800aaba:	601a      	str	r2, [r3, #0]
 800aabc:	605a      	str	r2, [r3, #4]
 800aabe:	609a      	str	r2, [r3, #8]
 800aac0:	60da      	str	r2, [r3, #12]
 800aac2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800aacc:	d13a      	bne.n	800ab44 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800aace:	2300      	movs	r3, #0
 800aad0:	613b      	str	r3, [r7, #16]
 800aad2:	4b1e      	ldr	r3, [pc, #120]	; (800ab4c <HAL_PCD_MspInit+0xa0>)
 800aad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aad6:	4a1d      	ldr	r2, [pc, #116]	; (800ab4c <HAL_PCD_MspInit+0xa0>)
 800aad8:	f043 0301 	orr.w	r3, r3, #1
 800aadc:	6313      	str	r3, [r2, #48]	; 0x30
 800aade:	4b1b      	ldr	r3, [pc, #108]	; (800ab4c <HAL_PCD_MspInit+0xa0>)
 800aae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aae2:	f003 0301 	and.w	r3, r3, #1
 800aae6:	613b      	str	r3, [r7, #16]
 800aae8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 800aaea:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800aaee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aaf0:	2302      	movs	r3, #2
 800aaf2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aaf4:	2300      	movs	r3, #0
 800aaf6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800aaf8:	2303      	movs	r3, #3
 800aafa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800aafc:	230a      	movs	r3, #10
 800aafe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ab00:	f107 0314 	add.w	r3, r7, #20
 800ab04:	4619      	mov	r1, r3
 800ab06:	4812      	ldr	r0, [pc, #72]	; (800ab50 <HAL_PCD_MspInit+0xa4>)
 800ab08:	f7f6 fedc 	bl	80018c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ab0c:	4b0f      	ldr	r3, [pc, #60]	; (800ab4c <HAL_PCD_MspInit+0xa0>)
 800ab0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab10:	4a0e      	ldr	r2, [pc, #56]	; (800ab4c <HAL_PCD_MspInit+0xa0>)
 800ab12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab16:	6353      	str	r3, [r2, #52]	; 0x34
 800ab18:	2300      	movs	r3, #0
 800ab1a:	60fb      	str	r3, [r7, #12]
 800ab1c:	4b0b      	ldr	r3, [pc, #44]	; (800ab4c <HAL_PCD_MspInit+0xa0>)
 800ab1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab20:	4a0a      	ldr	r2, [pc, #40]	; (800ab4c <HAL_PCD_MspInit+0xa0>)
 800ab22:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ab26:	6453      	str	r3, [r2, #68]	; 0x44
 800ab28:	4b08      	ldr	r3, [pc, #32]	; (800ab4c <HAL_PCD_MspInit+0xa0>)
 800ab2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ab30:	60fb      	str	r3, [r7, #12]
 800ab32:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800ab34:	2200      	movs	r2, #0
 800ab36:	2105      	movs	r1, #5
 800ab38:	2043      	movs	r0, #67	; 0x43
 800ab3a:	f7f6 fbaf 	bl	800129c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800ab3e:	2043      	movs	r0, #67	; 0x43
 800ab40:	f7f6 fbc8 	bl	80012d4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800ab44:	bf00      	nop
 800ab46:	3728      	adds	r7, #40	; 0x28
 800ab48:	46bd      	mov	sp, r7
 800ab4a:	bd80      	pop	{r7, pc}
 800ab4c:	40023800 	.word	0x40023800
 800ab50:	40020000 	.word	0x40020000

0800ab54 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab54:	b580      	push	{r7, lr}
 800ab56:	b082      	sub	sp, #8
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	; 0x4e0
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800ab68:	4619      	mov	r1, r3
 800ab6a:	4610      	mov	r0, r2
 800ab6c:	f7fb fdbd 	bl	80066ea <USBD_LL_SetupStage>
}
 800ab70:	bf00      	nop
 800ab72:	3708      	adds	r7, #8
 800ab74:	46bd      	mov	sp, r7
 800ab76:	bd80      	pop	{r7, pc}

0800ab78 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab78:	b580      	push	{r7, lr}
 800ab7a:	b082      	sub	sp, #8
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	6078      	str	r0, [r7, #4]
 800ab80:	460b      	mov	r3, r1
 800ab82:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 800ab8a:	78fa      	ldrb	r2, [r7, #3]
 800ab8c:	6879      	ldr	r1, [r7, #4]
 800ab8e:	4613      	mov	r3, r2
 800ab90:	00db      	lsls	r3, r3, #3
 800ab92:	4413      	add	r3, r2
 800ab94:	009b      	lsls	r3, r3, #2
 800ab96:	440b      	add	r3, r1
 800ab98:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800ab9c:	681a      	ldr	r2, [r3, #0]
 800ab9e:	78fb      	ldrb	r3, [r7, #3]
 800aba0:	4619      	mov	r1, r3
 800aba2:	f7fb fdf7 	bl	8006794 <USBD_LL_DataOutStage>
}
 800aba6:	bf00      	nop
 800aba8:	3708      	adds	r7, #8
 800abaa:	46bd      	mov	sp, r7
 800abac:	bd80      	pop	{r7, pc}

0800abae <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800abae:	b580      	push	{r7, lr}
 800abb0:	b082      	sub	sp, #8
 800abb2:	af00      	add	r7, sp, #0
 800abb4:	6078      	str	r0, [r7, #4]
 800abb6:	460b      	mov	r3, r1
 800abb8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 800abc0:	78fa      	ldrb	r2, [r7, #3]
 800abc2:	6879      	ldr	r1, [r7, #4]
 800abc4:	4613      	mov	r3, r2
 800abc6:	00db      	lsls	r3, r3, #3
 800abc8:	4413      	add	r3, r2
 800abca:	009b      	lsls	r3, r3, #2
 800abcc:	440b      	add	r3, r1
 800abce:	3320      	adds	r3, #32
 800abd0:	681a      	ldr	r2, [r3, #0]
 800abd2:	78fb      	ldrb	r3, [r7, #3]
 800abd4:	4619      	mov	r1, r3
 800abd6:	f7fb fe90 	bl	80068fa <USBD_LL_DataInStage>
}
 800abda:	bf00      	nop
 800abdc:	3708      	adds	r7, #8
 800abde:	46bd      	mov	sp, r7
 800abe0:	bd80      	pop	{r7, pc}

0800abe2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800abe2:	b580      	push	{r7, lr}
 800abe4:	b082      	sub	sp, #8
 800abe6:	af00      	add	r7, sp, #0
 800abe8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800abf0:	4618      	mov	r0, r3
 800abf2:	f7fb ffca 	bl	8006b8a <USBD_LL_SOF>
}
 800abf6:	bf00      	nop
 800abf8:	3708      	adds	r7, #8
 800abfa:	46bd      	mov	sp, r7
 800abfc:	bd80      	pop	{r7, pc}

0800abfe <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800abfe:	b580      	push	{r7, lr}
 800ac00:	b084      	sub	sp, #16
 800ac02:	af00      	add	r7, sp, #0
 800ac04:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ac06:	2301      	movs	r3, #1
 800ac08:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	79db      	ldrb	r3, [r3, #7]
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d102      	bne.n	800ac18 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800ac12:	2300      	movs	r3, #0
 800ac14:	73fb      	strb	r3, [r7, #15]
 800ac16:	e008      	b.n	800ac2a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	79db      	ldrb	r3, [r3, #7]
 800ac1c:	2b02      	cmp	r3, #2
 800ac1e:	d102      	bne.n	800ac26 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800ac20:	2301      	movs	r3, #1
 800ac22:	73fb      	strb	r3, [r7, #15]
 800ac24:	e001      	b.n	800ac2a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800ac26:	f7f5 fea1 	bl	800096c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800ac30:	7bfa      	ldrb	r2, [r7, #15]
 800ac32:	4611      	mov	r1, r2
 800ac34:	4618      	mov	r0, r3
 800ac36:	f7fb ff64 	bl	8006b02 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800ac40:	4618      	mov	r0, r3
 800ac42:	f7fb ff0c 	bl	8006a5e <USBD_LL_Reset>
}
 800ac46:	bf00      	nop
 800ac48:	3710      	adds	r7, #16
 800ac4a:	46bd      	mov	sp, r7
 800ac4c:	bd80      	pop	{r7, pc}
	...

0800ac50 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac50:	b580      	push	{r7, lr}
 800ac52:	b082      	sub	sp, #8
 800ac54:	af00      	add	r7, sp, #0
 800ac56:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800ac5e:	4618      	mov	r0, r3
 800ac60:	f7fb ff5f 	bl	8006b22 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	687a      	ldr	r2, [r7, #4]
 800ac70:	6812      	ldr	r2, [r2, #0]
 800ac72:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ac76:	f043 0301 	orr.w	r3, r3, #1
 800ac7a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	7adb      	ldrb	r3, [r3, #11]
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d005      	beq.n	800ac90 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ac84:	4b04      	ldr	r3, [pc, #16]	; (800ac98 <HAL_PCD_SuspendCallback+0x48>)
 800ac86:	691b      	ldr	r3, [r3, #16]
 800ac88:	4a03      	ldr	r2, [pc, #12]	; (800ac98 <HAL_PCD_SuspendCallback+0x48>)
 800ac8a:	f043 0306 	orr.w	r3, r3, #6
 800ac8e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ac90:	bf00      	nop
 800ac92:	3708      	adds	r7, #8
 800ac94:	46bd      	mov	sp, r7
 800ac96:	bd80      	pop	{r7, pc}
 800ac98:	e000ed00 	.word	0xe000ed00

0800ac9c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac9c:	b580      	push	{r7, lr}
 800ac9e:	b082      	sub	sp, #8
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800acaa:	4618      	mov	r0, r3
 800acac:	f7fb ff55 	bl	8006b5a <USBD_LL_Resume>
}
 800acb0:	bf00      	nop
 800acb2:	3708      	adds	r7, #8
 800acb4:	46bd      	mov	sp, r7
 800acb6:	bd80      	pop	{r7, pc}

0800acb8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800acb8:	b580      	push	{r7, lr}
 800acba:	b082      	sub	sp, #8
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	6078      	str	r0, [r7, #4]
 800acc0:	460b      	mov	r3, r1
 800acc2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800acca:	78fa      	ldrb	r2, [r7, #3]
 800accc:	4611      	mov	r1, r2
 800acce:	4618      	mov	r0, r3
 800acd0:	f7fb ffad 	bl	8006c2e <USBD_LL_IsoOUTIncomplete>
}
 800acd4:	bf00      	nop
 800acd6:	3708      	adds	r7, #8
 800acd8:	46bd      	mov	sp, r7
 800acda:	bd80      	pop	{r7, pc}

0800acdc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800acdc:	b580      	push	{r7, lr}
 800acde:	b082      	sub	sp, #8
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	6078      	str	r0, [r7, #4]
 800ace4:	460b      	mov	r3, r1
 800ace6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800acee:	78fa      	ldrb	r2, [r7, #3]
 800acf0:	4611      	mov	r1, r2
 800acf2:	4618      	mov	r0, r3
 800acf4:	f7fb ff69 	bl	8006bca <USBD_LL_IsoINIncomplete>
}
 800acf8:	bf00      	nop
 800acfa:	3708      	adds	r7, #8
 800acfc:	46bd      	mov	sp, r7
 800acfe:	bd80      	pop	{r7, pc}

0800ad00 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad00:	b580      	push	{r7, lr}
 800ad02:	b082      	sub	sp, #8
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800ad0e:	4618      	mov	r0, r3
 800ad10:	f7fb ffbf 	bl	8006c92 <USBD_LL_DevConnected>
}
 800ad14:	bf00      	nop
 800ad16:	3708      	adds	r7, #8
 800ad18:	46bd      	mov	sp, r7
 800ad1a:	bd80      	pop	{r7, pc}

0800ad1c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad1c:	b580      	push	{r7, lr}
 800ad1e:	b082      	sub	sp, #8
 800ad20:	af00      	add	r7, sp, #0
 800ad22:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800ad2a:	4618      	mov	r0, r3
 800ad2c:	f7fb ffbc 	bl	8006ca8 <USBD_LL_DevDisconnected>
}
 800ad30:	bf00      	nop
 800ad32:	3708      	adds	r7, #8
 800ad34:	46bd      	mov	sp, r7
 800ad36:	bd80      	pop	{r7, pc}

0800ad38 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ad38:	b580      	push	{r7, lr}
 800ad3a:	b082      	sub	sp, #8
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	781b      	ldrb	r3, [r3, #0]
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d13c      	bne.n	800adc2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800ad48:	4a20      	ldr	r2, [pc, #128]	; (800adcc <USBD_LL_Init+0x94>)
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	4a1e      	ldr	r2, [pc, #120]	; (800adcc <USBD_LL_Init+0x94>)
 800ad54:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ad58:	4b1c      	ldr	r3, [pc, #112]	; (800adcc <USBD_LL_Init+0x94>)
 800ad5a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800ad5e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800ad60:	4b1a      	ldr	r3, [pc, #104]	; (800adcc <USBD_LL_Init+0x94>)
 800ad62:	2204      	movs	r2, #4
 800ad64:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800ad66:	4b19      	ldr	r3, [pc, #100]	; (800adcc <USBD_LL_Init+0x94>)
 800ad68:	2202      	movs	r2, #2
 800ad6a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800ad6c:	4b17      	ldr	r3, [pc, #92]	; (800adcc <USBD_LL_Init+0x94>)
 800ad6e:	2200      	movs	r2, #0
 800ad70:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ad72:	4b16      	ldr	r3, [pc, #88]	; (800adcc <USBD_LL_Init+0x94>)
 800ad74:	2202      	movs	r2, #2
 800ad76:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800ad78:	4b14      	ldr	r3, [pc, #80]	; (800adcc <USBD_LL_Init+0x94>)
 800ad7a:	2200      	movs	r2, #0
 800ad7c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800ad7e:	4b13      	ldr	r3, [pc, #76]	; (800adcc <USBD_LL_Init+0x94>)
 800ad80:	2200      	movs	r2, #0
 800ad82:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800ad84:	4b11      	ldr	r3, [pc, #68]	; (800adcc <USBD_LL_Init+0x94>)
 800ad86:	2200      	movs	r2, #0
 800ad88:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800ad8a:	4b10      	ldr	r3, [pc, #64]	; (800adcc <USBD_LL_Init+0x94>)
 800ad8c:	2200      	movs	r2, #0
 800ad8e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800ad90:	4b0e      	ldr	r3, [pc, #56]	; (800adcc <USBD_LL_Init+0x94>)
 800ad92:	2200      	movs	r2, #0
 800ad94:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800ad96:	480d      	ldr	r0, [pc, #52]	; (800adcc <USBD_LL_Init+0x94>)
 800ad98:	f7f6 ff59 	bl	8001c4e <HAL_PCD_Init>
 800ad9c:	4603      	mov	r3, r0
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d001      	beq.n	800ada6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800ada2:	f7f5 fde3 	bl	800096c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800ada6:	2180      	movs	r1, #128	; 0x80
 800ada8:	4808      	ldr	r0, [pc, #32]	; (800adcc <USBD_LL_Init+0x94>)
 800adaa:	f7f8 f984 	bl	80030b6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800adae:	2240      	movs	r2, #64	; 0x40
 800adb0:	2100      	movs	r1, #0
 800adb2:	4806      	ldr	r0, [pc, #24]	; (800adcc <USBD_LL_Init+0x94>)
 800adb4:	f7f8 f938 	bl	8003028 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800adb8:	2280      	movs	r2, #128	; 0x80
 800adba:	2101      	movs	r1, #1
 800adbc:	4803      	ldr	r0, [pc, #12]	; (800adcc <USBD_LL_Init+0x94>)
 800adbe:	f7f8 f933 	bl	8003028 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800adc2:	2300      	movs	r3, #0
}
 800adc4:	4618      	mov	r0, r3
 800adc6:	3708      	adds	r7, #8
 800adc8:	46bd      	mov	sp, r7
 800adca:	bd80      	pop	{r7, pc}
 800adcc:	2000620c 	.word	0x2000620c

0800add0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800add0:	b580      	push	{r7, lr}
 800add2:	b084      	sub	sp, #16
 800add4:	af00      	add	r7, sp, #0
 800add6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800add8:	2300      	movs	r3, #0
 800adda:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800addc:	2300      	movs	r3, #0
 800adde:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ade6:	4618      	mov	r0, r3
 800ade8:	f7f7 f840 	bl	8001e6c <HAL_PCD_Start>
 800adec:	4603      	mov	r3, r0
 800adee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800adf0:	7bfb      	ldrb	r3, [r7, #15]
 800adf2:	4618      	mov	r0, r3
 800adf4:	f000 f942 	bl	800b07c <USBD_Get_USB_Status>
 800adf8:	4603      	mov	r3, r0
 800adfa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800adfc:	7bbb      	ldrb	r3, [r7, #14]
}
 800adfe:	4618      	mov	r0, r3
 800ae00:	3710      	adds	r7, #16
 800ae02:	46bd      	mov	sp, r7
 800ae04:	bd80      	pop	{r7, pc}

0800ae06 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ae06:	b580      	push	{r7, lr}
 800ae08:	b084      	sub	sp, #16
 800ae0a:	af00      	add	r7, sp, #0
 800ae0c:	6078      	str	r0, [r7, #4]
 800ae0e:	4608      	mov	r0, r1
 800ae10:	4611      	mov	r1, r2
 800ae12:	461a      	mov	r2, r3
 800ae14:	4603      	mov	r3, r0
 800ae16:	70fb      	strb	r3, [r7, #3]
 800ae18:	460b      	mov	r3, r1
 800ae1a:	70bb      	strb	r3, [r7, #2]
 800ae1c:	4613      	mov	r3, r2
 800ae1e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae20:	2300      	movs	r3, #0
 800ae22:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae24:	2300      	movs	r3, #0
 800ae26:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ae2e:	78bb      	ldrb	r3, [r7, #2]
 800ae30:	883a      	ldrh	r2, [r7, #0]
 800ae32:	78f9      	ldrb	r1, [r7, #3]
 800ae34:	f7f7 fd14 	bl	8002860 <HAL_PCD_EP_Open>
 800ae38:	4603      	mov	r3, r0
 800ae3a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ae3c:	7bfb      	ldrb	r3, [r7, #15]
 800ae3e:	4618      	mov	r0, r3
 800ae40:	f000 f91c 	bl	800b07c <USBD_Get_USB_Status>
 800ae44:	4603      	mov	r3, r0
 800ae46:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ae48:	7bbb      	ldrb	r3, [r7, #14]
}
 800ae4a:	4618      	mov	r0, r3
 800ae4c:	3710      	adds	r7, #16
 800ae4e:	46bd      	mov	sp, r7
 800ae50:	bd80      	pop	{r7, pc}

0800ae52 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ae52:	b580      	push	{r7, lr}
 800ae54:	b084      	sub	sp, #16
 800ae56:	af00      	add	r7, sp, #0
 800ae58:	6078      	str	r0, [r7, #4]
 800ae5a:	460b      	mov	r3, r1
 800ae5c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae5e:	2300      	movs	r3, #0
 800ae60:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae62:	2300      	movs	r3, #0
 800ae64:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ae6c:	78fa      	ldrb	r2, [r7, #3]
 800ae6e:	4611      	mov	r1, r2
 800ae70:	4618      	mov	r0, r3
 800ae72:	f7f7 fd5d 	bl	8002930 <HAL_PCD_EP_Close>
 800ae76:	4603      	mov	r3, r0
 800ae78:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ae7a:	7bfb      	ldrb	r3, [r7, #15]
 800ae7c:	4618      	mov	r0, r3
 800ae7e:	f000 f8fd 	bl	800b07c <USBD_Get_USB_Status>
 800ae82:	4603      	mov	r3, r0
 800ae84:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ae86:	7bbb      	ldrb	r3, [r7, #14]
}
 800ae88:	4618      	mov	r0, r3
 800ae8a:	3710      	adds	r7, #16
 800ae8c:	46bd      	mov	sp, r7
 800ae8e:	bd80      	pop	{r7, pc}

0800ae90 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ae90:	b580      	push	{r7, lr}
 800ae92:	b084      	sub	sp, #16
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	6078      	str	r0, [r7, #4]
 800ae98:	460b      	mov	r3, r1
 800ae9a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae9c:	2300      	movs	r3, #0
 800ae9e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aea0:	2300      	movs	r3, #0
 800aea2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800aeaa:	78fa      	ldrb	r2, [r7, #3]
 800aeac:	4611      	mov	r1, r2
 800aeae:	4618      	mov	r0, r3
 800aeb0:	f7f7 fe15 	bl	8002ade <HAL_PCD_EP_SetStall>
 800aeb4:	4603      	mov	r3, r0
 800aeb6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aeb8:	7bfb      	ldrb	r3, [r7, #15]
 800aeba:	4618      	mov	r0, r3
 800aebc:	f000 f8de 	bl	800b07c <USBD_Get_USB_Status>
 800aec0:	4603      	mov	r3, r0
 800aec2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aec4:	7bbb      	ldrb	r3, [r7, #14]
}
 800aec6:	4618      	mov	r0, r3
 800aec8:	3710      	adds	r7, #16
 800aeca:	46bd      	mov	sp, r7
 800aecc:	bd80      	pop	{r7, pc}

0800aece <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aece:	b580      	push	{r7, lr}
 800aed0:	b084      	sub	sp, #16
 800aed2:	af00      	add	r7, sp, #0
 800aed4:	6078      	str	r0, [r7, #4]
 800aed6:	460b      	mov	r3, r1
 800aed8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aeda:	2300      	movs	r3, #0
 800aedc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aede:	2300      	movs	r3, #0
 800aee0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800aee8:	78fa      	ldrb	r2, [r7, #3]
 800aeea:	4611      	mov	r1, r2
 800aeec:	4618      	mov	r0, r3
 800aeee:	f7f7 fe59 	bl	8002ba4 <HAL_PCD_EP_ClrStall>
 800aef2:	4603      	mov	r3, r0
 800aef4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aef6:	7bfb      	ldrb	r3, [r7, #15]
 800aef8:	4618      	mov	r0, r3
 800aefa:	f000 f8bf 	bl	800b07c <USBD_Get_USB_Status>
 800aefe:	4603      	mov	r3, r0
 800af00:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800af02:	7bbb      	ldrb	r3, [r7, #14]
}
 800af04:	4618      	mov	r0, r3
 800af06:	3710      	adds	r7, #16
 800af08:	46bd      	mov	sp, r7
 800af0a:	bd80      	pop	{r7, pc}

0800af0c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800af0c:	b480      	push	{r7}
 800af0e:	b085      	sub	sp, #20
 800af10:	af00      	add	r7, sp, #0
 800af12:	6078      	str	r0, [r7, #4]
 800af14:	460b      	mov	r3, r1
 800af16:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800af1e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800af20:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800af24:	2b00      	cmp	r3, #0
 800af26:	da0b      	bge.n	800af40 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800af28:	78fb      	ldrb	r3, [r7, #3]
 800af2a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800af2e:	68f9      	ldr	r1, [r7, #12]
 800af30:	4613      	mov	r3, r2
 800af32:	00db      	lsls	r3, r3, #3
 800af34:	4413      	add	r3, r2
 800af36:	009b      	lsls	r3, r3, #2
 800af38:	440b      	add	r3, r1
 800af3a:	3316      	adds	r3, #22
 800af3c:	781b      	ldrb	r3, [r3, #0]
 800af3e:	e00b      	b.n	800af58 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800af40:	78fb      	ldrb	r3, [r7, #3]
 800af42:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800af46:	68f9      	ldr	r1, [r7, #12]
 800af48:	4613      	mov	r3, r2
 800af4a:	00db      	lsls	r3, r3, #3
 800af4c:	4413      	add	r3, r2
 800af4e:	009b      	lsls	r3, r3, #2
 800af50:	440b      	add	r3, r1
 800af52:	f203 2356 	addw	r3, r3, #598	; 0x256
 800af56:	781b      	ldrb	r3, [r3, #0]
  }
}
 800af58:	4618      	mov	r0, r3
 800af5a:	3714      	adds	r7, #20
 800af5c:	46bd      	mov	sp, r7
 800af5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af62:	4770      	bx	lr

0800af64 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800af64:	b580      	push	{r7, lr}
 800af66:	b084      	sub	sp, #16
 800af68:	af00      	add	r7, sp, #0
 800af6a:	6078      	str	r0, [r7, #4]
 800af6c:	460b      	mov	r3, r1
 800af6e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af70:	2300      	movs	r3, #0
 800af72:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800af74:	2300      	movs	r3, #0
 800af76:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800af7e:	78fa      	ldrb	r2, [r7, #3]
 800af80:	4611      	mov	r1, r2
 800af82:	4618      	mov	r0, r3
 800af84:	f7f7 fc48 	bl	8002818 <HAL_PCD_SetAddress>
 800af88:	4603      	mov	r3, r0
 800af8a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800af8c:	7bfb      	ldrb	r3, [r7, #15]
 800af8e:	4618      	mov	r0, r3
 800af90:	f000 f874 	bl	800b07c <USBD_Get_USB_Status>
 800af94:	4603      	mov	r3, r0
 800af96:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800af98:	7bbb      	ldrb	r3, [r7, #14]
}
 800af9a:	4618      	mov	r0, r3
 800af9c:	3710      	adds	r7, #16
 800af9e:	46bd      	mov	sp, r7
 800afa0:	bd80      	pop	{r7, pc}

0800afa2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800afa2:	b580      	push	{r7, lr}
 800afa4:	b086      	sub	sp, #24
 800afa6:	af00      	add	r7, sp, #0
 800afa8:	60f8      	str	r0, [r7, #12]
 800afaa:	607a      	str	r2, [r7, #4]
 800afac:	603b      	str	r3, [r7, #0]
 800afae:	460b      	mov	r3, r1
 800afb0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800afb2:	2300      	movs	r3, #0
 800afb4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800afb6:	2300      	movs	r3, #0
 800afb8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800afc0:	7af9      	ldrb	r1, [r7, #11]
 800afc2:	683b      	ldr	r3, [r7, #0]
 800afc4:	687a      	ldr	r2, [r7, #4]
 800afc6:	f7f7 fd50 	bl	8002a6a <HAL_PCD_EP_Transmit>
 800afca:	4603      	mov	r3, r0
 800afcc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800afce:	7dfb      	ldrb	r3, [r7, #23]
 800afd0:	4618      	mov	r0, r3
 800afd2:	f000 f853 	bl	800b07c <USBD_Get_USB_Status>
 800afd6:	4603      	mov	r3, r0
 800afd8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800afda:	7dbb      	ldrb	r3, [r7, #22]
}
 800afdc:	4618      	mov	r0, r3
 800afde:	3718      	adds	r7, #24
 800afe0:	46bd      	mov	sp, r7
 800afe2:	bd80      	pop	{r7, pc}

0800afe4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800afe4:	b580      	push	{r7, lr}
 800afe6:	b086      	sub	sp, #24
 800afe8:	af00      	add	r7, sp, #0
 800afea:	60f8      	str	r0, [r7, #12]
 800afec:	607a      	str	r2, [r7, #4]
 800afee:	603b      	str	r3, [r7, #0]
 800aff0:	460b      	mov	r3, r1
 800aff2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aff4:	2300      	movs	r3, #0
 800aff6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aff8:	2300      	movs	r3, #0
 800affa:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b002:	7af9      	ldrb	r1, [r7, #11]
 800b004:	683b      	ldr	r3, [r7, #0]
 800b006:	687a      	ldr	r2, [r7, #4]
 800b008:	f7f7 fcdc 	bl	80029c4 <HAL_PCD_EP_Receive>
 800b00c:	4603      	mov	r3, r0
 800b00e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b010:	7dfb      	ldrb	r3, [r7, #23]
 800b012:	4618      	mov	r0, r3
 800b014:	f000 f832 	bl	800b07c <USBD_Get_USB_Status>
 800b018:	4603      	mov	r3, r0
 800b01a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b01c:	7dbb      	ldrb	r3, [r7, #22]
}
 800b01e:	4618      	mov	r0, r3
 800b020:	3718      	adds	r7, #24
 800b022:	46bd      	mov	sp, r7
 800b024:	bd80      	pop	{r7, pc}

0800b026 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b026:	b580      	push	{r7, lr}
 800b028:	b082      	sub	sp, #8
 800b02a:	af00      	add	r7, sp, #0
 800b02c:	6078      	str	r0, [r7, #4]
 800b02e:	460b      	mov	r3, r1
 800b030:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b038:	78fa      	ldrb	r2, [r7, #3]
 800b03a:	4611      	mov	r1, r2
 800b03c:	4618      	mov	r0, r3
 800b03e:	f7f7 fcfc 	bl	8002a3a <HAL_PCD_EP_GetRxCount>
 800b042:	4603      	mov	r3, r0
}
 800b044:	4618      	mov	r0, r3
 800b046:	3708      	adds	r7, #8
 800b048:	46bd      	mov	sp, r7
 800b04a:	bd80      	pop	{r7, pc}

0800b04c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b04c:	b480      	push	{r7}
 800b04e:	b083      	sub	sp, #12
 800b050:	af00      	add	r7, sp, #0
 800b052:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b054:	4b03      	ldr	r3, [pc, #12]	; (800b064 <USBD_static_malloc+0x18>)
}
 800b056:	4618      	mov	r0, r3
 800b058:	370c      	adds	r7, #12
 800b05a:	46bd      	mov	sp, r7
 800b05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b060:	4770      	bx	lr
 800b062:	bf00      	nop
 800b064:	200066f0 	.word	0x200066f0

0800b068 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b068:	b480      	push	{r7}
 800b06a:	b083      	sub	sp, #12
 800b06c:	af00      	add	r7, sp, #0
 800b06e:	6078      	str	r0, [r7, #4]

}
 800b070:	bf00      	nop
 800b072:	370c      	adds	r7, #12
 800b074:	46bd      	mov	sp, r7
 800b076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b07a:	4770      	bx	lr

0800b07c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b07c:	b480      	push	{r7}
 800b07e:	b085      	sub	sp, #20
 800b080:	af00      	add	r7, sp, #0
 800b082:	4603      	mov	r3, r0
 800b084:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b086:	2300      	movs	r3, #0
 800b088:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b08a:	79fb      	ldrb	r3, [r7, #7]
 800b08c:	2b03      	cmp	r3, #3
 800b08e:	d817      	bhi.n	800b0c0 <USBD_Get_USB_Status+0x44>
 800b090:	a201      	add	r2, pc, #4	; (adr r2, 800b098 <USBD_Get_USB_Status+0x1c>)
 800b092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b096:	bf00      	nop
 800b098:	0800b0a9 	.word	0x0800b0a9
 800b09c:	0800b0af 	.word	0x0800b0af
 800b0a0:	0800b0b5 	.word	0x0800b0b5
 800b0a4:	0800b0bb 	.word	0x0800b0bb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b0a8:	2300      	movs	r3, #0
 800b0aa:	73fb      	strb	r3, [r7, #15]
    break;
 800b0ac:	e00b      	b.n	800b0c6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b0ae:	2303      	movs	r3, #3
 800b0b0:	73fb      	strb	r3, [r7, #15]
    break;
 800b0b2:	e008      	b.n	800b0c6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b0b4:	2301      	movs	r3, #1
 800b0b6:	73fb      	strb	r3, [r7, #15]
    break;
 800b0b8:	e005      	b.n	800b0c6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b0ba:	2303      	movs	r3, #3
 800b0bc:	73fb      	strb	r3, [r7, #15]
    break;
 800b0be:	e002      	b.n	800b0c6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b0c0:	2303      	movs	r3, #3
 800b0c2:	73fb      	strb	r3, [r7, #15]
    break;
 800b0c4:	bf00      	nop
  }
  return usb_status;
 800b0c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0c8:	4618      	mov	r0, r3
 800b0ca:	3714      	adds	r7, #20
 800b0cc:	46bd      	mov	sp, r7
 800b0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d2:	4770      	bx	lr

0800b0d4 <__malloc_lock>:
 800b0d4:	4801      	ldr	r0, [pc, #4]	; (800b0dc <__malloc_lock+0x8>)
 800b0d6:	f000 b88b 	b.w	800b1f0 <__retarget_lock_acquire_recursive>
 800b0da:	bf00      	nop
 800b0dc:	20006a4c 	.word	0x20006a4c

0800b0e0 <__malloc_unlock>:
 800b0e0:	4801      	ldr	r0, [pc, #4]	; (800b0e8 <__malloc_unlock+0x8>)
 800b0e2:	f000 b886 	b.w	800b1f2 <__retarget_lock_release_recursive>
 800b0e6:	bf00      	nop
 800b0e8:	20006a4c 	.word	0x20006a4c

0800b0ec <memset>:
 800b0ec:	4402      	add	r2, r0
 800b0ee:	4603      	mov	r3, r0
 800b0f0:	4293      	cmp	r3, r2
 800b0f2:	d100      	bne.n	800b0f6 <memset+0xa>
 800b0f4:	4770      	bx	lr
 800b0f6:	f803 1b01 	strb.w	r1, [r3], #1
 800b0fa:	e7f9      	b.n	800b0f0 <memset+0x4>

0800b0fc <_reclaim_reent>:
 800b0fc:	4b29      	ldr	r3, [pc, #164]	; (800b1a4 <_reclaim_reent+0xa8>)
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	4283      	cmp	r3, r0
 800b102:	b570      	push	{r4, r5, r6, lr}
 800b104:	4604      	mov	r4, r0
 800b106:	d04b      	beq.n	800b1a0 <_reclaim_reent+0xa4>
 800b108:	69c3      	ldr	r3, [r0, #28]
 800b10a:	b143      	cbz	r3, 800b11e <_reclaim_reent+0x22>
 800b10c:	68db      	ldr	r3, [r3, #12]
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d144      	bne.n	800b19c <_reclaim_reent+0xa0>
 800b112:	69e3      	ldr	r3, [r4, #28]
 800b114:	6819      	ldr	r1, [r3, #0]
 800b116:	b111      	cbz	r1, 800b11e <_reclaim_reent+0x22>
 800b118:	4620      	mov	r0, r4
 800b11a:	f000 f879 	bl	800b210 <_free_r>
 800b11e:	6961      	ldr	r1, [r4, #20]
 800b120:	b111      	cbz	r1, 800b128 <_reclaim_reent+0x2c>
 800b122:	4620      	mov	r0, r4
 800b124:	f000 f874 	bl	800b210 <_free_r>
 800b128:	69e1      	ldr	r1, [r4, #28]
 800b12a:	b111      	cbz	r1, 800b132 <_reclaim_reent+0x36>
 800b12c:	4620      	mov	r0, r4
 800b12e:	f000 f86f 	bl	800b210 <_free_r>
 800b132:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800b134:	b111      	cbz	r1, 800b13c <_reclaim_reent+0x40>
 800b136:	4620      	mov	r0, r4
 800b138:	f000 f86a 	bl	800b210 <_free_r>
 800b13c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b13e:	b111      	cbz	r1, 800b146 <_reclaim_reent+0x4a>
 800b140:	4620      	mov	r0, r4
 800b142:	f000 f865 	bl	800b210 <_free_r>
 800b146:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b148:	b111      	cbz	r1, 800b150 <_reclaim_reent+0x54>
 800b14a:	4620      	mov	r0, r4
 800b14c:	f000 f860 	bl	800b210 <_free_r>
 800b150:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800b152:	b111      	cbz	r1, 800b15a <_reclaim_reent+0x5e>
 800b154:	4620      	mov	r0, r4
 800b156:	f000 f85b 	bl	800b210 <_free_r>
 800b15a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800b15c:	b111      	cbz	r1, 800b164 <_reclaim_reent+0x68>
 800b15e:	4620      	mov	r0, r4
 800b160:	f000 f856 	bl	800b210 <_free_r>
 800b164:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800b166:	b111      	cbz	r1, 800b16e <_reclaim_reent+0x72>
 800b168:	4620      	mov	r0, r4
 800b16a:	f000 f851 	bl	800b210 <_free_r>
 800b16e:	6a23      	ldr	r3, [r4, #32]
 800b170:	b1b3      	cbz	r3, 800b1a0 <_reclaim_reent+0xa4>
 800b172:	4620      	mov	r0, r4
 800b174:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b178:	4718      	bx	r3
 800b17a:	5949      	ldr	r1, [r1, r5]
 800b17c:	b941      	cbnz	r1, 800b190 <_reclaim_reent+0x94>
 800b17e:	3504      	adds	r5, #4
 800b180:	69e3      	ldr	r3, [r4, #28]
 800b182:	2d80      	cmp	r5, #128	; 0x80
 800b184:	68d9      	ldr	r1, [r3, #12]
 800b186:	d1f8      	bne.n	800b17a <_reclaim_reent+0x7e>
 800b188:	4620      	mov	r0, r4
 800b18a:	f000 f841 	bl	800b210 <_free_r>
 800b18e:	e7c0      	b.n	800b112 <_reclaim_reent+0x16>
 800b190:	680e      	ldr	r6, [r1, #0]
 800b192:	4620      	mov	r0, r4
 800b194:	f000 f83c 	bl	800b210 <_free_r>
 800b198:	4631      	mov	r1, r6
 800b19a:	e7ef      	b.n	800b17c <_reclaim_reent+0x80>
 800b19c:	2500      	movs	r5, #0
 800b19e:	e7ef      	b.n	800b180 <_reclaim_reent+0x84>
 800b1a0:	bd70      	pop	{r4, r5, r6, pc}
 800b1a2:	bf00      	nop
 800b1a4:	2000014c 	.word	0x2000014c

0800b1a8 <__libc_init_array>:
 800b1a8:	b570      	push	{r4, r5, r6, lr}
 800b1aa:	4d0d      	ldr	r5, [pc, #52]	; (800b1e0 <__libc_init_array+0x38>)
 800b1ac:	4c0d      	ldr	r4, [pc, #52]	; (800b1e4 <__libc_init_array+0x3c>)
 800b1ae:	1b64      	subs	r4, r4, r5
 800b1b0:	10a4      	asrs	r4, r4, #2
 800b1b2:	2600      	movs	r6, #0
 800b1b4:	42a6      	cmp	r6, r4
 800b1b6:	d109      	bne.n	800b1cc <__libc_init_array+0x24>
 800b1b8:	4d0b      	ldr	r5, [pc, #44]	; (800b1e8 <__libc_init_array+0x40>)
 800b1ba:	4c0c      	ldr	r4, [pc, #48]	; (800b1ec <__libc_init_array+0x44>)
 800b1bc:	f000 f874 	bl	800b2a8 <_init>
 800b1c0:	1b64      	subs	r4, r4, r5
 800b1c2:	10a4      	asrs	r4, r4, #2
 800b1c4:	2600      	movs	r6, #0
 800b1c6:	42a6      	cmp	r6, r4
 800b1c8:	d105      	bne.n	800b1d6 <__libc_init_array+0x2e>
 800b1ca:	bd70      	pop	{r4, r5, r6, pc}
 800b1cc:	f855 3b04 	ldr.w	r3, [r5], #4
 800b1d0:	4798      	blx	r3
 800b1d2:	3601      	adds	r6, #1
 800b1d4:	e7ee      	b.n	800b1b4 <__libc_init_array+0xc>
 800b1d6:	f855 3b04 	ldr.w	r3, [r5], #4
 800b1da:	4798      	blx	r3
 800b1dc:	3601      	adds	r6, #1
 800b1de:	e7f2      	b.n	800b1c6 <__libc_init_array+0x1e>
 800b1e0:	0800b378 	.word	0x0800b378
 800b1e4:	0800b378 	.word	0x0800b378
 800b1e8:	0800b378 	.word	0x0800b378
 800b1ec:	0800b37c 	.word	0x0800b37c

0800b1f0 <__retarget_lock_acquire_recursive>:
 800b1f0:	4770      	bx	lr

0800b1f2 <__retarget_lock_release_recursive>:
 800b1f2:	4770      	bx	lr

0800b1f4 <memcpy>:
 800b1f4:	440a      	add	r2, r1
 800b1f6:	4291      	cmp	r1, r2
 800b1f8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800b1fc:	d100      	bne.n	800b200 <memcpy+0xc>
 800b1fe:	4770      	bx	lr
 800b200:	b510      	push	{r4, lr}
 800b202:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b206:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b20a:	4291      	cmp	r1, r2
 800b20c:	d1f9      	bne.n	800b202 <memcpy+0xe>
 800b20e:	bd10      	pop	{r4, pc}

0800b210 <_free_r>:
 800b210:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b212:	2900      	cmp	r1, #0
 800b214:	d044      	beq.n	800b2a0 <_free_r+0x90>
 800b216:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b21a:	9001      	str	r0, [sp, #4]
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	f1a1 0404 	sub.w	r4, r1, #4
 800b222:	bfb8      	it	lt
 800b224:	18e4      	addlt	r4, r4, r3
 800b226:	f7ff ff55 	bl	800b0d4 <__malloc_lock>
 800b22a:	4a1e      	ldr	r2, [pc, #120]	; (800b2a4 <_free_r+0x94>)
 800b22c:	9801      	ldr	r0, [sp, #4]
 800b22e:	6813      	ldr	r3, [r2, #0]
 800b230:	b933      	cbnz	r3, 800b240 <_free_r+0x30>
 800b232:	6063      	str	r3, [r4, #4]
 800b234:	6014      	str	r4, [r2, #0]
 800b236:	b003      	add	sp, #12
 800b238:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b23c:	f7ff bf50 	b.w	800b0e0 <__malloc_unlock>
 800b240:	42a3      	cmp	r3, r4
 800b242:	d908      	bls.n	800b256 <_free_r+0x46>
 800b244:	6825      	ldr	r5, [r4, #0]
 800b246:	1961      	adds	r1, r4, r5
 800b248:	428b      	cmp	r3, r1
 800b24a:	bf01      	itttt	eq
 800b24c:	6819      	ldreq	r1, [r3, #0]
 800b24e:	685b      	ldreq	r3, [r3, #4]
 800b250:	1949      	addeq	r1, r1, r5
 800b252:	6021      	streq	r1, [r4, #0]
 800b254:	e7ed      	b.n	800b232 <_free_r+0x22>
 800b256:	461a      	mov	r2, r3
 800b258:	685b      	ldr	r3, [r3, #4]
 800b25a:	b10b      	cbz	r3, 800b260 <_free_r+0x50>
 800b25c:	42a3      	cmp	r3, r4
 800b25e:	d9fa      	bls.n	800b256 <_free_r+0x46>
 800b260:	6811      	ldr	r1, [r2, #0]
 800b262:	1855      	adds	r5, r2, r1
 800b264:	42a5      	cmp	r5, r4
 800b266:	d10b      	bne.n	800b280 <_free_r+0x70>
 800b268:	6824      	ldr	r4, [r4, #0]
 800b26a:	4421      	add	r1, r4
 800b26c:	1854      	adds	r4, r2, r1
 800b26e:	42a3      	cmp	r3, r4
 800b270:	6011      	str	r1, [r2, #0]
 800b272:	d1e0      	bne.n	800b236 <_free_r+0x26>
 800b274:	681c      	ldr	r4, [r3, #0]
 800b276:	685b      	ldr	r3, [r3, #4]
 800b278:	6053      	str	r3, [r2, #4]
 800b27a:	440c      	add	r4, r1
 800b27c:	6014      	str	r4, [r2, #0]
 800b27e:	e7da      	b.n	800b236 <_free_r+0x26>
 800b280:	d902      	bls.n	800b288 <_free_r+0x78>
 800b282:	230c      	movs	r3, #12
 800b284:	6003      	str	r3, [r0, #0]
 800b286:	e7d6      	b.n	800b236 <_free_r+0x26>
 800b288:	6825      	ldr	r5, [r4, #0]
 800b28a:	1961      	adds	r1, r4, r5
 800b28c:	428b      	cmp	r3, r1
 800b28e:	bf04      	itt	eq
 800b290:	6819      	ldreq	r1, [r3, #0]
 800b292:	685b      	ldreq	r3, [r3, #4]
 800b294:	6063      	str	r3, [r4, #4]
 800b296:	bf04      	itt	eq
 800b298:	1949      	addeq	r1, r1, r5
 800b29a:	6021      	streq	r1, [r4, #0]
 800b29c:	6054      	str	r4, [r2, #4]
 800b29e:	e7ca      	b.n	800b236 <_free_r+0x26>
 800b2a0:	b003      	add	sp, #12
 800b2a2:	bd30      	pop	{r4, r5, pc}
 800b2a4:	20006910 	.word	0x20006910

0800b2a8 <_init>:
 800b2a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2aa:	bf00      	nop
 800b2ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b2ae:	bc08      	pop	{r3}
 800b2b0:	469e      	mov	lr, r3
 800b2b2:	4770      	bx	lr

0800b2b4 <_fini>:
 800b2b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2b6:	bf00      	nop
 800b2b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b2ba:	bc08      	pop	{r3}
 800b2bc:	469e      	mov	lr, r3
 800b2be:	4770      	bx	lr
