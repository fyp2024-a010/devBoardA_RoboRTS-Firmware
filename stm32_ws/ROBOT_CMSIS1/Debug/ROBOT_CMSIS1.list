
ROBOT_CMSIS1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014fe8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c60  08015198  08015198  00025198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015df8  08015df8  0003019c  2**0
                  CONTENTS
  4 .ARM          00000008  08015df8  08015df8  00025df8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015e00  08015e00  0003019c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015e00  08015e00  00025e00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015e04  08015e04  00025e04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000019c  20000000  08015e08  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0003019c  2**0
                  CONTENTS
 10 .bss          00017630  200001a0  200001a0  000301a0  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  200177d0  200177d0  000301a0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0003019c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000301cc  2**0
                  CONTENTS, READONLY
 14 .debug_info   00032ed7  00000000  00000000  0003020f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00009d80  00000000  00000000  000630e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002870  00000000  00000000  0006ce68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001e89  00000000  00000000  0006f6d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003446f  00000000  00000000  00071561  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00040761  00000000  00000000  000a59d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f0b1b  00000000  00000000  000e6131  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000a8bc  00000000  00000000  001d6c4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000008f  00000000  00000000  001e1508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001a0 	.word	0x200001a0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08015180 	.word	0x08015180

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001a4 	.word	0x200001a4
 80001ec:	08015180 	.word	0x08015180

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <__aeabi_drsub>:
 8000200:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000204:	e002      	b.n	800020c <__adddf3>
 8000206:	bf00      	nop

08000208 <__aeabi_dsub>:
 8000208:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800020c <__adddf3>:
 800020c:	b530      	push	{r4, r5, lr}
 800020e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000212:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000216:	ea94 0f05 	teq	r4, r5
 800021a:	bf08      	it	eq
 800021c:	ea90 0f02 	teqeq	r0, r2
 8000220:	bf1f      	itttt	ne
 8000222:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000226:	ea55 0c02 	orrsne.w	ip, r5, r2
 800022a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800022e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000232:	f000 80e2 	beq.w	80003fa <__adddf3+0x1ee>
 8000236:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800023a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800023e:	bfb8      	it	lt
 8000240:	426d      	neglt	r5, r5
 8000242:	dd0c      	ble.n	800025e <__adddf3+0x52>
 8000244:	442c      	add	r4, r5
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	ea82 0000 	eor.w	r0, r2, r0
 8000252:	ea83 0101 	eor.w	r1, r3, r1
 8000256:	ea80 0202 	eor.w	r2, r0, r2
 800025a:	ea81 0303 	eor.w	r3, r1, r3
 800025e:	2d36      	cmp	r5, #54	; 0x36
 8000260:	bf88      	it	hi
 8000262:	bd30      	pophi	{r4, r5, pc}
 8000264:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000268:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800026c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000270:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000274:	d002      	beq.n	800027c <__adddf3+0x70>
 8000276:	4240      	negs	r0, r0
 8000278:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800027c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000280:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000284:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000288:	d002      	beq.n	8000290 <__adddf3+0x84>
 800028a:	4252      	negs	r2, r2
 800028c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000290:	ea94 0f05 	teq	r4, r5
 8000294:	f000 80a7 	beq.w	80003e6 <__adddf3+0x1da>
 8000298:	f1a4 0401 	sub.w	r4, r4, #1
 800029c:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a0:	db0d      	blt.n	80002be <__adddf3+0xb2>
 80002a2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002a6:	fa22 f205 	lsr.w	r2, r2, r5
 80002aa:	1880      	adds	r0, r0, r2
 80002ac:	f141 0100 	adc.w	r1, r1, #0
 80002b0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002b4:	1880      	adds	r0, r0, r2
 80002b6:	fa43 f305 	asr.w	r3, r3, r5
 80002ba:	4159      	adcs	r1, r3
 80002bc:	e00e      	b.n	80002dc <__adddf3+0xd0>
 80002be:	f1a5 0520 	sub.w	r5, r5, #32
 80002c2:	f10e 0e20 	add.w	lr, lr, #32
 80002c6:	2a01      	cmp	r2, #1
 80002c8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002cc:	bf28      	it	cs
 80002ce:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002d2:	fa43 f305 	asr.w	r3, r3, r5
 80002d6:	18c0      	adds	r0, r0, r3
 80002d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e0:	d507      	bpl.n	80002f2 <__adddf3+0xe6>
 80002e2:	f04f 0e00 	mov.w	lr, #0
 80002e6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ea:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ee:	eb6e 0101 	sbc.w	r1, lr, r1
 80002f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002f6:	d31b      	bcc.n	8000330 <__adddf3+0x124>
 80002f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002fc:	d30c      	bcc.n	8000318 <__adddf3+0x10c>
 80002fe:	0849      	lsrs	r1, r1, #1
 8000300:	ea5f 0030 	movs.w	r0, r0, rrx
 8000304:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000308:	f104 0401 	add.w	r4, r4, #1
 800030c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000310:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000314:	f080 809a 	bcs.w	800044c <__adddf3+0x240>
 8000318:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800031c:	bf08      	it	eq
 800031e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000322:	f150 0000 	adcs.w	r0, r0, #0
 8000326:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800032a:	ea41 0105 	orr.w	r1, r1, r5
 800032e:	bd30      	pop	{r4, r5, pc}
 8000330:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000334:	4140      	adcs	r0, r0
 8000336:	eb41 0101 	adc.w	r1, r1, r1
 800033a:	3c01      	subs	r4, #1
 800033c:	bf28      	it	cs
 800033e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000342:	d2e9      	bcs.n	8000318 <__adddf3+0x10c>
 8000344:	f091 0f00 	teq	r1, #0
 8000348:	bf04      	itt	eq
 800034a:	4601      	moveq	r1, r0
 800034c:	2000      	moveq	r0, #0
 800034e:	fab1 f381 	clz	r3, r1
 8000352:	bf08      	it	eq
 8000354:	3320      	addeq	r3, #32
 8000356:	f1a3 030b 	sub.w	r3, r3, #11
 800035a:	f1b3 0220 	subs.w	r2, r3, #32
 800035e:	da0c      	bge.n	800037a <__adddf3+0x16e>
 8000360:	320c      	adds	r2, #12
 8000362:	dd08      	ble.n	8000376 <__adddf3+0x16a>
 8000364:	f102 0c14 	add.w	ip, r2, #20
 8000368:	f1c2 020c 	rsb	r2, r2, #12
 800036c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000370:	fa21 f102 	lsr.w	r1, r1, r2
 8000374:	e00c      	b.n	8000390 <__adddf3+0x184>
 8000376:	f102 0214 	add.w	r2, r2, #20
 800037a:	bfd8      	it	le
 800037c:	f1c2 0c20 	rsble	ip, r2, #32
 8000380:	fa01 f102 	lsl.w	r1, r1, r2
 8000384:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000388:	bfdc      	itt	le
 800038a:	ea41 010c 	orrle.w	r1, r1, ip
 800038e:	4090      	lslle	r0, r2
 8000390:	1ae4      	subs	r4, r4, r3
 8000392:	bfa2      	ittt	ge
 8000394:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000398:	4329      	orrge	r1, r5
 800039a:	bd30      	popge	{r4, r5, pc}
 800039c:	ea6f 0404 	mvn.w	r4, r4
 80003a0:	3c1f      	subs	r4, #31
 80003a2:	da1c      	bge.n	80003de <__adddf3+0x1d2>
 80003a4:	340c      	adds	r4, #12
 80003a6:	dc0e      	bgt.n	80003c6 <__adddf3+0x1ba>
 80003a8:	f104 0414 	add.w	r4, r4, #20
 80003ac:	f1c4 0220 	rsb	r2, r4, #32
 80003b0:	fa20 f004 	lsr.w	r0, r0, r4
 80003b4:	fa01 f302 	lsl.w	r3, r1, r2
 80003b8:	ea40 0003 	orr.w	r0, r0, r3
 80003bc:	fa21 f304 	lsr.w	r3, r1, r4
 80003c0:	ea45 0103 	orr.w	r1, r5, r3
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f1c4 040c 	rsb	r4, r4, #12
 80003ca:	f1c4 0220 	rsb	r2, r4, #32
 80003ce:	fa20 f002 	lsr.w	r0, r0, r2
 80003d2:	fa01 f304 	lsl.w	r3, r1, r4
 80003d6:	ea40 0003 	orr.w	r0, r0, r3
 80003da:	4629      	mov	r1, r5
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	fa21 f004 	lsr.w	r0, r1, r4
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f094 0f00 	teq	r4, #0
 80003ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ee:	bf06      	itte	eq
 80003f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003f4:	3401      	addeq	r4, #1
 80003f6:	3d01      	subne	r5, #1
 80003f8:	e74e      	b.n	8000298 <__adddf3+0x8c>
 80003fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003fe:	bf18      	it	ne
 8000400:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000404:	d029      	beq.n	800045a <__adddf3+0x24e>
 8000406:	ea94 0f05 	teq	r4, r5
 800040a:	bf08      	it	eq
 800040c:	ea90 0f02 	teqeq	r0, r2
 8000410:	d005      	beq.n	800041e <__adddf3+0x212>
 8000412:	ea54 0c00 	orrs.w	ip, r4, r0
 8000416:	bf04      	itt	eq
 8000418:	4619      	moveq	r1, r3
 800041a:	4610      	moveq	r0, r2
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	ea91 0f03 	teq	r1, r3
 8000422:	bf1e      	ittt	ne
 8000424:	2100      	movne	r1, #0
 8000426:	2000      	movne	r0, #0
 8000428:	bd30      	popne	{r4, r5, pc}
 800042a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800042e:	d105      	bne.n	800043c <__adddf3+0x230>
 8000430:	0040      	lsls	r0, r0, #1
 8000432:	4149      	adcs	r1, r1
 8000434:	bf28      	it	cs
 8000436:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800043a:	bd30      	pop	{r4, r5, pc}
 800043c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000440:	bf3c      	itt	cc
 8000442:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000446:	bd30      	popcc	{r4, r5, pc}
 8000448:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800044c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000450:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000454:	f04f 0000 	mov.w	r0, #0
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800045e:	bf1a      	itte	ne
 8000460:	4619      	movne	r1, r3
 8000462:	4610      	movne	r0, r2
 8000464:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000468:	bf1c      	itt	ne
 800046a:	460b      	movne	r3, r1
 800046c:	4602      	movne	r2, r0
 800046e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000472:	bf06      	itte	eq
 8000474:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000478:	ea91 0f03 	teqeq	r1, r3
 800047c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	bf00      	nop

08000484 <__aeabi_ui2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f04f 0500 	mov.w	r5, #0
 800049c:	f04f 0100 	mov.w	r1, #0
 80004a0:	e750      	b.n	8000344 <__adddf3+0x138>
 80004a2:	bf00      	nop

080004a4 <__aeabi_i2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004bc:	bf48      	it	mi
 80004be:	4240      	negmi	r0, r0
 80004c0:	f04f 0100 	mov.w	r1, #0
 80004c4:	e73e      	b.n	8000344 <__adddf3+0x138>
 80004c6:	bf00      	nop

080004c8 <__aeabi_f2d>:
 80004c8:	0042      	lsls	r2, r0, #1
 80004ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ce:	ea4f 0131 	mov.w	r1, r1, rrx
 80004d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004d6:	bf1f      	itttt	ne
 80004d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004e4:	4770      	bxne	lr
 80004e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ea:	bf08      	it	eq
 80004ec:	4770      	bxeq	lr
 80004ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004f2:	bf04      	itt	eq
 80004f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004f8:	4770      	bxeq	lr
 80004fa:	b530      	push	{r4, r5, lr}
 80004fc:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000504:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000508:	e71c      	b.n	8000344 <__adddf3+0x138>
 800050a:	bf00      	nop

0800050c <__aeabi_ul2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f04f 0500 	mov.w	r5, #0
 800051a:	e00a      	b.n	8000532 <__aeabi_l2d+0x16>

0800051c <__aeabi_l2d>:
 800051c:	ea50 0201 	orrs.w	r2, r0, r1
 8000520:	bf08      	it	eq
 8000522:	4770      	bxeq	lr
 8000524:	b530      	push	{r4, r5, lr}
 8000526:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800052a:	d502      	bpl.n	8000532 <__aeabi_l2d+0x16>
 800052c:	4240      	negs	r0, r0
 800052e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000532:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000536:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800053a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800053e:	f43f aed8 	beq.w	80002f2 <__adddf3+0xe6>
 8000542:	f04f 0203 	mov.w	r2, #3
 8000546:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054a:	bf18      	it	ne
 800054c:	3203      	addne	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800055a:	f1c2 0320 	rsb	r3, r2, #32
 800055e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000562:	fa20 f002 	lsr.w	r0, r0, r2
 8000566:	fa01 fe03 	lsl.w	lr, r1, r3
 800056a:	ea40 000e 	orr.w	r0, r0, lr
 800056e:	fa21 f102 	lsr.w	r1, r1, r2
 8000572:	4414      	add	r4, r2
 8000574:	e6bd      	b.n	80002f2 <__adddf3+0xe6>
 8000576:	bf00      	nop

08000578 <__aeabi_dmul>:
 8000578:	b570      	push	{r4, r5, r6, lr}
 800057a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800057e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000582:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000586:	bf1d      	ittte	ne
 8000588:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800058c:	ea94 0f0c 	teqne	r4, ip
 8000590:	ea95 0f0c 	teqne	r5, ip
 8000594:	f000 f8de 	bleq	8000754 <__aeabi_dmul+0x1dc>
 8000598:	442c      	add	r4, r5
 800059a:	ea81 0603 	eor.w	r6, r1, r3
 800059e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005aa:	bf18      	it	ne
 80005ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005b8:	d038      	beq.n	800062c <__aeabi_dmul+0xb4>
 80005ba:	fba0 ce02 	umull	ip, lr, r0, r2
 80005be:	f04f 0500 	mov.w	r5, #0
 80005c2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005c6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ca:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ce:	f04f 0600 	mov.w	r6, #0
 80005d2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005d6:	f09c 0f00 	teq	ip, #0
 80005da:	bf18      	it	ne
 80005dc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005e4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005e8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005ec:	d204      	bcs.n	80005f8 <__aeabi_dmul+0x80>
 80005ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005f2:	416d      	adcs	r5, r5
 80005f4:	eb46 0606 	adc.w	r6, r6, r6
 80005f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000600:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000604:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000608:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800060c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000610:	bf88      	it	hi
 8000612:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000616:	d81e      	bhi.n	8000656 <__aeabi_dmul+0xde>
 8000618:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800061c:	bf08      	it	eq
 800061e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000622:	f150 0000 	adcs.w	r0, r0, #0
 8000626:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000630:	ea46 0101 	orr.w	r1, r6, r1
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	ea81 0103 	eor.w	r1, r1, r3
 800063c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000640:	bfc2      	ittt	gt
 8000642:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000646:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800064a:	bd70      	popgt	{r4, r5, r6, pc}
 800064c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000650:	f04f 0e00 	mov.w	lr, #0
 8000654:	3c01      	subs	r4, #1
 8000656:	f300 80ab 	bgt.w	80007b0 <__aeabi_dmul+0x238>
 800065a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800065e:	bfde      	ittt	le
 8000660:	2000      	movle	r0, #0
 8000662:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000666:	bd70      	pople	{r4, r5, r6, pc}
 8000668:	f1c4 0400 	rsb	r4, r4, #0
 800066c:	3c20      	subs	r4, #32
 800066e:	da35      	bge.n	80006dc <__aeabi_dmul+0x164>
 8000670:	340c      	adds	r4, #12
 8000672:	dc1b      	bgt.n	80006ac <__aeabi_dmul+0x134>
 8000674:	f104 0414 	add.w	r4, r4, #20
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f305 	lsl.w	r3, r0, r5
 8000680:	fa20 f004 	lsr.w	r0, r0, r4
 8000684:	fa01 f205 	lsl.w	r2, r1, r5
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000690:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000694:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000698:	fa21 f604 	lsr.w	r6, r1, r4
 800069c:	eb42 0106 	adc.w	r1, r2, r6
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 040c 	rsb	r4, r4, #12
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f304 	lsl.w	r3, r0, r4
 80006b8:	fa20 f005 	lsr.w	r0, r0, r5
 80006bc:	fa01 f204 	lsl.w	r2, r1, r4
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006cc:	f141 0100 	adc.w	r1, r1, #0
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 0520 	rsb	r5, r4, #32
 80006e0:	fa00 f205 	lsl.w	r2, r0, r5
 80006e4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006e8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ec:	fa01 f205 	lsl.w	r2, r1, r5
 80006f0:	ea43 0302 	orr.w	r3, r3, r2
 80006f4:	fa21 f004 	lsr.w	r0, r1, r4
 80006f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006fc:	fa21 f204 	lsr.w	r2, r1, r4
 8000700:	ea20 0002 	bic.w	r0, r0, r2
 8000704:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f094 0f00 	teq	r4, #0
 8000718:	d10f      	bne.n	800073a <__aeabi_dmul+0x1c2>
 800071a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800071e:	0040      	lsls	r0, r0, #1
 8000720:	eb41 0101 	adc.w	r1, r1, r1
 8000724:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3c01      	subeq	r4, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1a6>
 800072e:	ea41 0106 	orr.w	r1, r1, r6
 8000732:	f095 0f00 	teq	r5, #0
 8000736:	bf18      	it	ne
 8000738:	4770      	bxne	lr
 800073a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800073e:	0052      	lsls	r2, r2, #1
 8000740:	eb43 0303 	adc.w	r3, r3, r3
 8000744:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000748:	bf08      	it	eq
 800074a:	3d01      	subeq	r5, #1
 800074c:	d0f7      	beq.n	800073e <__aeabi_dmul+0x1c6>
 800074e:	ea43 0306 	orr.w	r3, r3, r6
 8000752:	4770      	bx	lr
 8000754:	ea94 0f0c 	teq	r4, ip
 8000758:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800075c:	bf18      	it	ne
 800075e:	ea95 0f0c 	teqne	r5, ip
 8000762:	d00c      	beq.n	800077e <__aeabi_dmul+0x206>
 8000764:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000768:	bf18      	it	ne
 800076a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076e:	d1d1      	bne.n	8000714 <__aeabi_dmul+0x19c>
 8000770:	ea81 0103 	eor.w	r1, r1, r3
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	f04f 0000 	mov.w	r0, #0
 800077c:	bd70      	pop	{r4, r5, r6, pc}
 800077e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000782:	bf06      	itte	eq
 8000784:	4610      	moveq	r0, r2
 8000786:	4619      	moveq	r1, r3
 8000788:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800078c:	d019      	beq.n	80007c2 <__aeabi_dmul+0x24a>
 800078e:	ea94 0f0c 	teq	r4, ip
 8000792:	d102      	bne.n	800079a <__aeabi_dmul+0x222>
 8000794:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000798:	d113      	bne.n	80007c2 <__aeabi_dmul+0x24a>
 800079a:	ea95 0f0c 	teq	r5, ip
 800079e:	d105      	bne.n	80007ac <__aeabi_dmul+0x234>
 80007a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007a4:	bf1c      	itt	ne
 80007a6:	4610      	movne	r0, r2
 80007a8:	4619      	movne	r1, r3
 80007aa:	d10a      	bne.n	80007c2 <__aeabi_dmul+0x24a>
 80007ac:	ea81 0103 	eor.w	r1, r1, r3
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007bc:	f04f 0000 	mov.w	r0, #0
 80007c0:	bd70      	pop	{r4, r5, r6, pc}
 80007c2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ca:	bd70      	pop	{r4, r5, r6, pc}

080007cc <__aeabi_ddiv>:
 80007cc:	b570      	push	{r4, r5, r6, lr}
 80007ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007da:	bf1d      	ittte	ne
 80007dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e0:	ea94 0f0c 	teqne	r4, ip
 80007e4:	ea95 0f0c 	teqne	r5, ip
 80007e8:	f000 f8a7 	bleq	800093a <__aeabi_ddiv+0x16e>
 80007ec:	eba4 0405 	sub.w	r4, r4, r5
 80007f0:	ea81 0e03 	eor.w	lr, r1, r3
 80007f4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007fc:	f000 8088 	beq.w	8000910 <__aeabi_ddiv+0x144>
 8000800:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000804:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000808:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800080c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000810:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000814:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000818:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800081c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000820:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000824:	429d      	cmp	r5, r3
 8000826:	bf08      	it	eq
 8000828:	4296      	cmpeq	r6, r2
 800082a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800082e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000832:	d202      	bcs.n	800083a <__aeabi_ddiv+0x6e>
 8000834:	085b      	lsrs	r3, r3, #1
 8000836:	ea4f 0232 	mov.w	r2, r2, rrx
 800083a:	1ab6      	subs	r6, r6, r2
 800083c:	eb65 0503 	sbc.w	r5, r5, r3
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800084a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008a8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008ac:	d018      	beq.n	80008e0 <__aeabi_ddiv+0x114>
 80008ae:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008b2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008b6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008be:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008c2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008c6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ca:	d1c0      	bne.n	800084e <__aeabi_ddiv+0x82>
 80008cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d0:	d10b      	bne.n	80008ea <__aeabi_ddiv+0x11e>
 80008d2:	ea41 0100 	orr.w	r1, r1, r0
 80008d6:	f04f 0000 	mov.w	r0, #0
 80008da:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008de:	e7b6      	b.n	800084e <__aeabi_ddiv+0x82>
 80008e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e4:	bf04      	itt	eq
 80008e6:	4301      	orreq	r1, r0
 80008e8:	2000      	moveq	r0, #0
 80008ea:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ee:	bf88      	it	hi
 80008f0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008f4:	f63f aeaf 	bhi.w	8000656 <__aeabi_dmul+0xde>
 80008f8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008fc:	bf04      	itt	eq
 80008fe:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000902:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000906:	f150 0000 	adcs.w	r0, r0, #0
 800090a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800090e:	bd70      	pop	{r4, r5, r6, pc}
 8000910:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000914:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000918:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800091c:	bfc2      	ittt	gt
 800091e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000922:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000926:	bd70      	popgt	{r4, r5, r6, pc}
 8000928:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800092c:	f04f 0e00 	mov.w	lr, #0
 8000930:	3c01      	subs	r4, #1
 8000932:	e690      	b.n	8000656 <__aeabi_dmul+0xde>
 8000934:	ea45 0e06 	orr.w	lr, r5, r6
 8000938:	e68d      	b.n	8000656 <__aeabi_dmul+0xde>
 800093a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800093e:	ea94 0f0c 	teq	r4, ip
 8000942:	bf08      	it	eq
 8000944:	ea95 0f0c 	teqeq	r5, ip
 8000948:	f43f af3b 	beq.w	80007c2 <__aeabi_dmul+0x24a>
 800094c:	ea94 0f0c 	teq	r4, ip
 8000950:	d10a      	bne.n	8000968 <__aeabi_ddiv+0x19c>
 8000952:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000956:	f47f af34 	bne.w	80007c2 <__aeabi_dmul+0x24a>
 800095a:	ea95 0f0c 	teq	r5, ip
 800095e:	f47f af25 	bne.w	80007ac <__aeabi_dmul+0x234>
 8000962:	4610      	mov	r0, r2
 8000964:	4619      	mov	r1, r3
 8000966:	e72c      	b.n	80007c2 <__aeabi_dmul+0x24a>
 8000968:	ea95 0f0c 	teq	r5, ip
 800096c:	d106      	bne.n	800097c <__aeabi_ddiv+0x1b0>
 800096e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000972:	f43f aefd 	beq.w	8000770 <__aeabi_dmul+0x1f8>
 8000976:	4610      	mov	r0, r2
 8000978:	4619      	mov	r1, r3
 800097a:	e722      	b.n	80007c2 <__aeabi_dmul+0x24a>
 800097c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000980:	bf18      	it	ne
 8000982:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000986:	f47f aec5 	bne.w	8000714 <__aeabi_dmul+0x19c>
 800098a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800098e:	f47f af0d 	bne.w	80007ac <__aeabi_dmul+0x234>
 8000992:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000996:	f47f aeeb 	bne.w	8000770 <__aeabi_dmul+0x1f8>
 800099a:	e712      	b.n	80007c2 <__aeabi_dmul+0x24a>

0800099c <__gedf2>:
 800099c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009a0:	e006      	b.n	80009b0 <__cmpdf2+0x4>
 80009a2:	bf00      	nop

080009a4 <__ledf2>:
 80009a4:	f04f 0c01 	mov.w	ip, #1
 80009a8:	e002      	b.n	80009b0 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__cmpdf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009b4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009bc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c0:	bf18      	it	ne
 80009c2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009c6:	d01b      	beq.n	8000a00 <__cmpdf2+0x54>
 80009c8:	b001      	add	sp, #4
 80009ca:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ce:	bf0c      	ite	eq
 80009d0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009d4:	ea91 0f03 	teqne	r1, r3
 80009d8:	bf02      	ittt	eq
 80009da:	ea90 0f02 	teqeq	r0, r2
 80009de:	2000      	moveq	r0, #0
 80009e0:	4770      	bxeq	lr
 80009e2:	f110 0f00 	cmn.w	r0, #0
 80009e6:	ea91 0f03 	teq	r1, r3
 80009ea:	bf58      	it	pl
 80009ec:	4299      	cmppl	r1, r3
 80009ee:	bf08      	it	eq
 80009f0:	4290      	cmpeq	r0, r2
 80009f2:	bf2c      	ite	cs
 80009f4:	17d8      	asrcs	r0, r3, #31
 80009f6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009fa:	f040 0001 	orr.w	r0, r0, #1
 80009fe:	4770      	bx	lr
 8000a00:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	d102      	bne.n	8000a10 <__cmpdf2+0x64>
 8000a0a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0e:	d107      	bne.n	8000a20 <__cmpdf2+0x74>
 8000a10:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a18:	d1d6      	bne.n	80009c8 <__cmpdf2+0x1c>
 8000a1a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1e:	d0d3      	beq.n	80009c8 <__cmpdf2+0x1c>
 8000a20:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop

08000a28 <__aeabi_cdrcmple>:
 8000a28:	4684      	mov	ip, r0
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4662      	mov	r2, ip
 8000a2e:	468c      	mov	ip, r1
 8000a30:	4619      	mov	r1, r3
 8000a32:	4663      	mov	r3, ip
 8000a34:	e000      	b.n	8000a38 <__aeabi_cdcmpeq>
 8000a36:	bf00      	nop

08000a38 <__aeabi_cdcmpeq>:
 8000a38:	b501      	push	{r0, lr}
 8000a3a:	f7ff ffb7 	bl	80009ac <__cmpdf2>
 8000a3e:	2800      	cmp	r0, #0
 8000a40:	bf48      	it	mi
 8000a42:	f110 0f00 	cmnmi.w	r0, #0
 8000a46:	bd01      	pop	{r0, pc}

08000a48 <__aeabi_dcmpeq>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff fff4 	bl	8000a38 <__aeabi_cdcmpeq>
 8000a50:	bf0c      	ite	eq
 8000a52:	2001      	moveq	r0, #1
 8000a54:	2000      	movne	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmplt>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffea 	bl	8000a38 <__aeabi_cdcmpeq>
 8000a64:	bf34      	ite	cc
 8000a66:	2001      	movcc	r0, #1
 8000a68:	2000      	movcs	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmple>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffe0 	bl	8000a38 <__aeabi_cdcmpeq>
 8000a78:	bf94      	ite	ls
 8000a7a:	2001      	movls	r0, #1
 8000a7c:	2000      	movhi	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpge>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff ffce 	bl	8000a28 <__aeabi_cdrcmple>
 8000a8c:	bf94      	ite	ls
 8000a8e:	2001      	movls	r0, #1
 8000a90:	2000      	movhi	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_dcmpgt>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff ffc4 	bl	8000a28 <__aeabi_cdrcmple>
 8000aa0:	bf34      	ite	cc
 8000aa2:	2001      	movcc	r0, #1
 8000aa4:	2000      	movcs	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_d2iz>:
 8000aac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab4:	d215      	bcs.n	8000ae2 <__aeabi_d2iz+0x36>
 8000ab6:	d511      	bpl.n	8000adc <__aeabi_d2iz+0x30>
 8000ab8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000abc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac0:	d912      	bls.n	8000ae8 <__aeabi_d2iz+0x3c>
 8000ac2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ace:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ad6:	bf18      	it	ne
 8000ad8:	4240      	negne	r0, r0
 8000ada:	4770      	bx	lr
 8000adc:	f04f 0000 	mov.w	r0, #0
 8000ae0:	4770      	bx	lr
 8000ae2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ae6:	d105      	bne.n	8000af4 <__aeabi_d2iz+0x48>
 8000ae8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000aec:	bf08      	it	eq
 8000aee:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop

08000afc <__aeabi_d2f>:
 8000afc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b00:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b04:	bf24      	itt	cs
 8000b06:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b0a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b0e:	d90d      	bls.n	8000b2c <__aeabi_d2f+0x30>
 8000b10:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b14:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b18:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b1c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b20:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b24:	bf08      	it	eq
 8000b26:	f020 0001 	biceq.w	r0, r0, #1
 8000b2a:	4770      	bx	lr
 8000b2c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b30:	d121      	bne.n	8000b76 <__aeabi_d2f+0x7a>
 8000b32:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b36:	bfbc      	itt	lt
 8000b38:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b3c:	4770      	bxlt	lr
 8000b3e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b42:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b46:	f1c2 0218 	rsb	r2, r2, #24
 8000b4a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b4e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b52:	fa20 f002 	lsr.w	r0, r0, r2
 8000b56:	bf18      	it	ne
 8000b58:	f040 0001 	orrne.w	r0, r0, #1
 8000b5c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b60:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b64:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b68:	ea40 000c 	orr.w	r0, r0, ip
 8000b6c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b70:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b74:	e7cc      	b.n	8000b10 <__aeabi_d2f+0x14>
 8000b76:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b7a:	d107      	bne.n	8000b8c <__aeabi_d2f+0x90>
 8000b7c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b80:	bf1e      	ittt	ne
 8000b82:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b86:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b8a:	4770      	bxne	lr
 8000b8c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b90:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b94:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop

08000b9c <__aeabi_uldivmod>:
 8000b9c:	b953      	cbnz	r3, 8000bb4 <__aeabi_uldivmod+0x18>
 8000b9e:	b94a      	cbnz	r2, 8000bb4 <__aeabi_uldivmod+0x18>
 8000ba0:	2900      	cmp	r1, #0
 8000ba2:	bf08      	it	eq
 8000ba4:	2800      	cmpeq	r0, #0
 8000ba6:	bf1c      	itt	ne
 8000ba8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bac:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bb0:	f000 b970 	b.w	8000e94 <__aeabi_idiv0>
 8000bb4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bb8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bbc:	f000 f806 	bl	8000bcc <__udivmoddi4>
 8000bc0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bc8:	b004      	add	sp, #16
 8000bca:	4770      	bx	lr

08000bcc <__udivmoddi4>:
 8000bcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bd0:	9e08      	ldr	r6, [sp, #32]
 8000bd2:	460d      	mov	r5, r1
 8000bd4:	4604      	mov	r4, r0
 8000bd6:	460f      	mov	r7, r1
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d14a      	bne.n	8000c72 <__udivmoddi4+0xa6>
 8000bdc:	428a      	cmp	r2, r1
 8000bde:	4694      	mov	ip, r2
 8000be0:	d965      	bls.n	8000cae <__udivmoddi4+0xe2>
 8000be2:	fab2 f382 	clz	r3, r2
 8000be6:	b143      	cbz	r3, 8000bfa <__udivmoddi4+0x2e>
 8000be8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bec:	f1c3 0220 	rsb	r2, r3, #32
 8000bf0:	409f      	lsls	r7, r3
 8000bf2:	fa20 f202 	lsr.w	r2, r0, r2
 8000bf6:	4317      	orrs	r7, r2
 8000bf8:	409c      	lsls	r4, r3
 8000bfa:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000bfe:	fa1f f58c 	uxth.w	r5, ip
 8000c02:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c06:	0c22      	lsrs	r2, r4, #16
 8000c08:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c0c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c10:	fb01 f005 	mul.w	r0, r1, r5
 8000c14:	4290      	cmp	r0, r2
 8000c16:	d90a      	bls.n	8000c2e <__udivmoddi4+0x62>
 8000c18:	eb1c 0202 	adds.w	r2, ip, r2
 8000c1c:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000c20:	f080 811c 	bcs.w	8000e5c <__udivmoddi4+0x290>
 8000c24:	4290      	cmp	r0, r2
 8000c26:	f240 8119 	bls.w	8000e5c <__udivmoddi4+0x290>
 8000c2a:	3902      	subs	r1, #2
 8000c2c:	4462      	add	r2, ip
 8000c2e:	1a12      	subs	r2, r2, r0
 8000c30:	b2a4      	uxth	r4, r4
 8000c32:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c36:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c3a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c3e:	fb00 f505 	mul.w	r5, r0, r5
 8000c42:	42a5      	cmp	r5, r4
 8000c44:	d90a      	bls.n	8000c5c <__udivmoddi4+0x90>
 8000c46:	eb1c 0404 	adds.w	r4, ip, r4
 8000c4a:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000c4e:	f080 8107 	bcs.w	8000e60 <__udivmoddi4+0x294>
 8000c52:	42a5      	cmp	r5, r4
 8000c54:	f240 8104 	bls.w	8000e60 <__udivmoddi4+0x294>
 8000c58:	4464      	add	r4, ip
 8000c5a:	3802      	subs	r0, #2
 8000c5c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c60:	1b64      	subs	r4, r4, r5
 8000c62:	2100      	movs	r1, #0
 8000c64:	b11e      	cbz	r6, 8000c6e <__udivmoddi4+0xa2>
 8000c66:	40dc      	lsrs	r4, r3
 8000c68:	2300      	movs	r3, #0
 8000c6a:	e9c6 4300 	strd	r4, r3, [r6]
 8000c6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c72:	428b      	cmp	r3, r1
 8000c74:	d908      	bls.n	8000c88 <__udivmoddi4+0xbc>
 8000c76:	2e00      	cmp	r6, #0
 8000c78:	f000 80ed 	beq.w	8000e56 <__udivmoddi4+0x28a>
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	e9c6 0500 	strd	r0, r5, [r6]
 8000c82:	4608      	mov	r0, r1
 8000c84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c88:	fab3 f183 	clz	r1, r3
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	d149      	bne.n	8000d24 <__udivmoddi4+0x158>
 8000c90:	42ab      	cmp	r3, r5
 8000c92:	d302      	bcc.n	8000c9a <__udivmoddi4+0xce>
 8000c94:	4282      	cmp	r2, r0
 8000c96:	f200 80f8 	bhi.w	8000e8a <__udivmoddi4+0x2be>
 8000c9a:	1a84      	subs	r4, r0, r2
 8000c9c:	eb65 0203 	sbc.w	r2, r5, r3
 8000ca0:	2001      	movs	r0, #1
 8000ca2:	4617      	mov	r7, r2
 8000ca4:	2e00      	cmp	r6, #0
 8000ca6:	d0e2      	beq.n	8000c6e <__udivmoddi4+0xa2>
 8000ca8:	e9c6 4700 	strd	r4, r7, [r6]
 8000cac:	e7df      	b.n	8000c6e <__udivmoddi4+0xa2>
 8000cae:	b902      	cbnz	r2, 8000cb2 <__udivmoddi4+0xe6>
 8000cb0:	deff      	udf	#255	; 0xff
 8000cb2:	fab2 f382 	clz	r3, r2
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	f040 8090 	bne.w	8000ddc <__udivmoddi4+0x210>
 8000cbc:	1a8a      	subs	r2, r1, r2
 8000cbe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cc2:	fa1f fe8c 	uxth.w	lr, ip
 8000cc6:	2101      	movs	r1, #1
 8000cc8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000ccc:	fb07 2015 	mls	r0, r7, r5, r2
 8000cd0:	0c22      	lsrs	r2, r4, #16
 8000cd2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cd6:	fb0e f005 	mul.w	r0, lr, r5
 8000cda:	4290      	cmp	r0, r2
 8000cdc:	d908      	bls.n	8000cf0 <__udivmoddi4+0x124>
 8000cde:	eb1c 0202 	adds.w	r2, ip, r2
 8000ce2:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000ce6:	d202      	bcs.n	8000cee <__udivmoddi4+0x122>
 8000ce8:	4290      	cmp	r0, r2
 8000cea:	f200 80cb 	bhi.w	8000e84 <__udivmoddi4+0x2b8>
 8000cee:	4645      	mov	r5, r8
 8000cf0:	1a12      	subs	r2, r2, r0
 8000cf2:	b2a4      	uxth	r4, r4
 8000cf4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000cf8:	fb07 2210 	mls	r2, r7, r0, r2
 8000cfc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d00:	fb0e fe00 	mul.w	lr, lr, r0
 8000d04:	45a6      	cmp	lr, r4
 8000d06:	d908      	bls.n	8000d1a <__udivmoddi4+0x14e>
 8000d08:	eb1c 0404 	adds.w	r4, ip, r4
 8000d0c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d10:	d202      	bcs.n	8000d18 <__udivmoddi4+0x14c>
 8000d12:	45a6      	cmp	lr, r4
 8000d14:	f200 80bb 	bhi.w	8000e8e <__udivmoddi4+0x2c2>
 8000d18:	4610      	mov	r0, r2
 8000d1a:	eba4 040e 	sub.w	r4, r4, lr
 8000d1e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d22:	e79f      	b.n	8000c64 <__udivmoddi4+0x98>
 8000d24:	f1c1 0720 	rsb	r7, r1, #32
 8000d28:	408b      	lsls	r3, r1
 8000d2a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d2e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d32:	fa05 f401 	lsl.w	r4, r5, r1
 8000d36:	fa20 f307 	lsr.w	r3, r0, r7
 8000d3a:	40fd      	lsrs	r5, r7
 8000d3c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d40:	4323      	orrs	r3, r4
 8000d42:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d46:	fa1f fe8c 	uxth.w	lr, ip
 8000d4a:	fb09 5518 	mls	r5, r9, r8, r5
 8000d4e:	0c1c      	lsrs	r4, r3, #16
 8000d50:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d54:	fb08 f50e 	mul.w	r5, r8, lr
 8000d58:	42a5      	cmp	r5, r4
 8000d5a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d5e:	fa00 f001 	lsl.w	r0, r0, r1
 8000d62:	d90b      	bls.n	8000d7c <__udivmoddi4+0x1b0>
 8000d64:	eb1c 0404 	adds.w	r4, ip, r4
 8000d68:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d6c:	f080 8088 	bcs.w	8000e80 <__udivmoddi4+0x2b4>
 8000d70:	42a5      	cmp	r5, r4
 8000d72:	f240 8085 	bls.w	8000e80 <__udivmoddi4+0x2b4>
 8000d76:	f1a8 0802 	sub.w	r8, r8, #2
 8000d7a:	4464      	add	r4, ip
 8000d7c:	1b64      	subs	r4, r4, r5
 8000d7e:	b29d      	uxth	r5, r3
 8000d80:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d84:	fb09 4413 	mls	r4, r9, r3, r4
 8000d88:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d8c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d90:	45a6      	cmp	lr, r4
 8000d92:	d908      	bls.n	8000da6 <__udivmoddi4+0x1da>
 8000d94:	eb1c 0404 	adds.w	r4, ip, r4
 8000d98:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000d9c:	d26c      	bcs.n	8000e78 <__udivmoddi4+0x2ac>
 8000d9e:	45a6      	cmp	lr, r4
 8000da0:	d96a      	bls.n	8000e78 <__udivmoddi4+0x2ac>
 8000da2:	3b02      	subs	r3, #2
 8000da4:	4464      	add	r4, ip
 8000da6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000daa:	fba3 9502 	umull	r9, r5, r3, r2
 8000dae:	eba4 040e 	sub.w	r4, r4, lr
 8000db2:	42ac      	cmp	r4, r5
 8000db4:	46c8      	mov	r8, r9
 8000db6:	46ae      	mov	lr, r5
 8000db8:	d356      	bcc.n	8000e68 <__udivmoddi4+0x29c>
 8000dba:	d053      	beq.n	8000e64 <__udivmoddi4+0x298>
 8000dbc:	b156      	cbz	r6, 8000dd4 <__udivmoddi4+0x208>
 8000dbe:	ebb0 0208 	subs.w	r2, r0, r8
 8000dc2:	eb64 040e 	sbc.w	r4, r4, lr
 8000dc6:	fa04 f707 	lsl.w	r7, r4, r7
 8000dca:	40ca      	lsrs	r2, r1
 8000dcc:	40cc      	lsrs	r4, r1
 8000dce:	4317      	orrs	r7, r2
 8000dd0:	e9c6 7400 	strd	r7, r4, [r6]
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ddc:	f1c3 0120 	rsb	r1, r3, #32
 8000de0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000de4:	fa20 f201 	lsr.w	r2, r0, r1
 8000de8:	fa25 f101 	lsr.w	r1, r5, r1
 8000dec:	409d      	lsls	r5, r3
 8000dee:	432a      	orrs	r2, r5
 8000df0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000df4:	fa1f fe8c 	uxth.w	lr, ip
 8000df8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dfc:	fb07 1510 	mls	r5, r7, r0, r1
 8000e00:	0c11      	lsrs	r1, r2, #16
 8000e02:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e06:	fb00 f50e 	mul.w	r5, r0, lr
 8000e0a:	428d      	cmp	r5, r1
 8000e0c:	fa04 f403 	lsl.w	r4, r4, r3
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x258>
 8000e12:	eb1c 0101 	adds.w	r1, ip, r1
 8000e16:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e1a:	d22f      	bcs.n	8000e7c <__udivmoddi4+0x2b0>
 8000e1c:	428d      	cmp	r5, r1
 8000e1e:	d92d      	bls.n	8000e7c <__udivmoddi4+0x2b0>
 8000e20:	3802      	subs	r0, #2
 8000e22:	4461      	add	r1, ip
 8000e24:	1b49      	subs	r1, r1, r5
 8000e26:	b292      	uxth	r2, r2
 8000e28:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e2c:	fb07 1115 	mls	r1, r7, r5, r1
 8000e30:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e34:	fb05 f10e 	mul.w	r1, r5, lr
 8000e38:	4291      	cmp	r1, r2
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x282>
 8000e3c:	eb1c 0202 	adds.w	r2, ip, r2
 8000e40:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e44:	d216      	bcs.n	8000e74 <__udivmoddi4+0x2a8>
 8000e46:	4291      	cmp	r1, r2
 8000e48:	d914      	bls.n	8000e74 <__udivmoddi4+0x2a8>
 8000e4a:	3d02      	subs	r5, #2
 8000e4c:	4462      	add	r2, ip
 8000e4e:	1a52      	subs	r2, r2, r1
 8000e50:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e54:	e738      	b.n	8000cc8 <__udivmoddi4+0xfc>
 8000e56:	4631      	mov	r1, r6
 8000e58:	4630      	mov	r0, r6
 8000e5a:	e708      	b.n	8000c6e <__udivmoddi4+0xa2>
 8000e5c:	4639      	mov	r1, r7
 8000e5e:	e6e6      	b.n	8000c2e <__udivmoddi4+0x62>
 8000e60:	4610      	mov	r0, r2
 8000e62:	e6fb      	b.n	8000c5c <__udivmoddi4+0x90>
 8000e64:	4548      	cmp	r0, r9
 8000e66:	d2a9      	bcs.n	8000dbc <__udivmoddi4+0x1f0>
 8000e68:	ebb9 0802 	subs.w	r8, r9, r2
 8000e6c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e70:	3b01      	subs	r3, #1
 8000e72:	e7a3      	b.n	8000dbc <__udivmoddi4+0x1f0>
 8000e74:	4645      	mov	r5, r8
 8000e76:	e7ea      	b.n	8000e4e <__udivmoddi4+0x282>
 8000e78:	462b      	mov	r3, r5
 8000e7a:	e794      	b.n	8000da6 <__udivmoddi4+0x1da>
 8000e7c:	4640      	mov	r0, r8
 8000e7e:	e7d1      	b.n	8000e24 <__udivmoddi4+0x258>
 8000e80:	46d0      	mov	r8, sl
 8000e82:	e77b      	b.n	8000d7c <__udivmoddi4+0x1b0>
 8000e84:	3d02      	subs	r5, #2
 8000e86:	4462      	add	r2, ip
 8000e88:	e732      	b.n	8000cf0 <__udivmoddi4+0x124>
 8000e8a:	4608      	mov	r0, r1
 8000e8c:	e70a      	b.n	8000ca4 <__udivmoddi4+0xd8>
 8000e8e:	4464      	add	r4, ip
 8000e90:	3802      	subs	r0, #2
 8000e92:	e742      	b.n	8000d1a <__udivmoddi4+0x14e>

08000e94 <__aeabi_idiv0>:
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <toggle_led_B>:
 */

#include "blinky_task.h"
 #include "timer_task.h"

void toggle_led_B(void *argc){
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(LED_B_GPIO_Port, LED_B_Pin);
 8000ea0:	2180      	movs	r1, #128	; 0x80
 8000ea2:	4803      	ldr	r0, [pc, #12]	; (8000eb0 <toggle_led_B+0x18>)
 8000ea4:	f005 ff73 	bl	8006d8e <HAL_GPIO_TogglePin>

}
 8000ea8:	bf00      	nop
 8000eaa:	3708      	adds	r7, #8
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	40021800 	.word	0x40021800

08000eb4 <blinky_task>:

void blinky_task (void const *argument){
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b084      	sub	sp, #16
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
	uint32_t t = osKernelSysTick();
 8000ebc:	f00d feff 	bl	800ecbe <osKernelSysTick>
 8000ec0:	60f8      	str	r0, [r7, #12]
	uint32_t period = 100;
 8000ec2:	2364      	movs	r3, #100	; 0x64
 8000ec4:	60bb      	str	r3, [r7, #8]

	soft_timer_register(toggle_led_B, NULL, 1000);
 8000ec6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000eca:	2100      	movs	r1, #0
 8000ecc:	4803      	ldr	r0, [pc, #12]	; (8000edc <blinky_task+0x28>)
 8000ece:	f000 faf5 	bl	80014bc <soft_timer_register>
		// HAL_GPIO_TogglePin(LED_G_GPIO_Port, LED_G_Pin);
		// osDelayUntil(&t, period);

		// HAL_GPIO_TogglePin(LED_H_GPIO_Port, LED_H_Pin);
		// osDelayUntil(&t, period);
		osDelay(1);
 8000ed2:	2001      	movs	r0, #1
 8000ed4:	f00d ff2a 	bl	800ed2c <osDelay>
 8000ed8:	e7fb      	b.n	8000ed2 <blinky_task+0x1e>
 8000eda:	bf00      	nop
 8000edc:	08000e99 	.word	0x08000e99

08000ee0 <toggle_led_E>:

float follow_relative_angle;
struct pid pid_follow = {0}; //angle control

void toggle_led_E(void *argc)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  HAL_GPIO_TogglePin(LED_E_GPIO_Port, LED_E_Pin);
 8000ee8:	2110      	movs	r1, #16
 8000eea:	4803      	ldr	r0, [pc, #12]	; (8000ef8 <toggle_led_E+0x18>)
 8000eec:	f005 ff4f 	bl	8006d8e <HAL_GPIO_TogglePin>
}
 8000ef0:	bf00      	nop
 8000ef2:	3708      	adds	r7, #8
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	40021800 	.word	0x40021800

08000efc <chassis_task>:

void chassis_task(void const *argument)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b084      	sub	sp, #16
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  uint32_t period = osKernelSysTick();
 8000f04:	f00d fedb 	bl	800ecbe <osKernelSysTick>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	60bb      	str	r3, [r7, #8]
  chassis_t pchassis = NULL;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	60fb      	str	r3, [r7, #12]
  pchassis = chassis_find("chassis");
 8000f10:	480c      	ldr	r0, [pc, #48]	; (8000f44 <chassis_task+0x48>)
 8000f12:	f011 fda1 	bl	8012a58 <chassis_find>
 8000f16:	60f8      	str	r0, [r7, #12]

  soft_timer_register(chassis_push_info, (void *)pchassis, 100);
 8000f18:	2264      	movs	r2, #100	; 0x64
 8000f1a:	68f9      	ldr	r1, [r7, #12]
 8000f1c:	480a      	ldr	r0, [pc, #40]	; (8000f48 <chassis_task+0x4c>)
 8000f1e:	f000 facd 	bl	80014bc <soft_timer_register>

  soft_timer_register(toggle_led_E, NULL, 1000);
 8000f22:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f26:	2100      	movs	r1, #0
 8000f28:	4808      	ldr	r0, [pc, #32]	; (8000f4c <chassis_task+0x50>)
 8000f2a:	f000 fac7 	bl	80014bc <soft_timer_register>

    //   chassis_set_acc(pchassis, 0, 0, 0);
    // }


    chassis_execute(pchassis);
 8000f2e:	68f8      	ldr	r0, [r7, #12]
 8000f30:	f011 fbe6 	bl	8012700 <chassis_execute>
    osDelayUntil(&period, 2);
 8000f34:	f107 0308 	add.w	r3, r7, #8
 8000f38:	2102      	movs	r1, #2
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f00d ff96 	bl	800ee6c <osDelayUntil>
    chassis_execute(pchassis);
 8000f40:	e7f5      	b.n	8000f2e <chassis_task+0x32>
 8000f42:	bf00      	nop
 8000f44:	08015198 	.word	0x08015198
 8000f48:	080010d1 	.word	0x080010d1
 8000f4c:	08000ee1 	.word	0x08000ee1

08000f50 <usb_rcv_callback>:
static int32_t usb_interface_send(uint8_t *p_data, uint32_t len);

extern osThreadId communicate_task_t;

static int32_t usb_rcv_callback(uint8_t *buf, uint32_t len)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
 8000f58:	6039      	str	r1, [r7, #0]
  protocol_uart_rcv_data(PROTOCOL_USB_PORT, buf, len);
 8000f5a:	683a      	ldr	r2, [r7, #0]
 8000f5c:	6879      	ldr	r1, [r7, #4]
 8000f5e:	2000      	movs	r0, #0
 8000f60:	f000 fee4 	bl	8001d2c <protocol_uart_rcv_data>
  osSignalSet(communicate_task_t, RECV_PROTOCOL_SIGNAL);
 8000f64:	4b05      	ldr	r3, [pc, #20]	; (8000f7c <usb_rcv_callback+0x2c>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	2101      	movs	r1, #1
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f00d fef2 	bl	800ed54 <osSignalSet>
  return len;
 8000f70:	683b      	ldr	r3, [r7, #0]
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	20000604 	.word	0x20000604

08000f80 <manifold2_heart_package>:

int32_t manifold2_heart_package(uint8_t *buff, uint16_t len)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
 8000f88:	460b      	mov	r3, r1
 8000f8a:	807b      	strh	r3, [r7, #2]
  return 0;
 8000f8c:	2300      	movs	r3, #0
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	370c      	adds	r7, #12
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
	...

08000f9c <report_firmware_version>:

int32_t report_firmware_version(uint8_t *buff, uint16_t len)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
 8000fa4:	460b      	mov	r3, r1
 8000fa6:	807b      	strh	r3, [r7, #2]
  return FIRMWARE_VERSION;
 8000fa8:	4b03      	ldr	r3, [pc, #12]	; (8000fb8 <report_firmware_version+0x1c>)
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	370c      	adds	r7, #12
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	01000106 	.word	0x01000106

08000fbc <toggle_led_C>:

void toggle_led_C(void* argc)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  HAL_GPIO_TogglePin(LED_C_GPIO_Port, LED_C_Pin);
 8000fc4:	2140      	movs	r1, #64	; 0x40
 8000fc6:	4803      	ldr	r0, [pc, #12]	; (8000fd4 <toggle_led_C+0x18>)
 8000fc8:	f005 fee1 	bl	8006d8e <HAL_GPIO_TogglePin>
}
 8000fcc:	bf00      	nop
 8000fce:	3708      	adds	r7, #8
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	40021800 	.word	0x40021800

08000fd8 <communicate_task>:

void communicate_task(void const *argument)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b088      	sub	sp, #32
 8000fdc:	af02      	add	r7, sp, #8
 8000fde:	6078      	str	r0, [r7, #4]
  // uint8_t app;
  // app = get_sys_cfg();

  protocol_local_init(CHASSIS_ADDRESS);
 8000fe0:	2001      	movs	r0, #1
 8000fe2:	f000 fb89 	bl	80016f8 <protocol_local_init>
  // PROBLEM: Was 4096
  // protocol_uart_interface_register("manifold2", 4096, 1, PROTOCOL_USB_PORT, usb_interface_send);
  protocol_uart_interface_register("manifold2", 2048, 1, PROTOCOL_USB_PORT, usb_interface_send);
 8000fe6:	4b23      	ldr	r3, [pc, #140]	; (8001074 <communicate_task+0x9c>)
 8000fe8:	9300      	str	r3, [sp, #0]
 8000fea:	2300      	movs	r3, #0
 8000fec:	2201      	movs	r2, #1
 8000fee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ff2:	4821      	ldr	r0, [pc, #132]	; (8001078 <communicate_task+0xa0>)
 8000ff4:	f000 fe16 	bl	8001c24 <protocol_uart_interface_register>
  protocol_set_route(MANIFOLD2_ADDRESS, "manifold2");
 8000ff8:	491f      	ldr	r1, [pc, #124]	; (8001078 <communicate_task+0xa0>)
 8000ffa:	2000      	movs	r0, #0
 8000ffc:	f000 fed4 	bl	8001da8 <protocol_set_route>

  protocol_rcv_cmd_register(CMD_MANIFOLD2_HEART, manifold2_heart_package);
 8001000:	491e      	ldr	r1, [pc, #120]	; (800107c <communicate_task+0xa4>)
 8001002:	2001      	movs	r0, #1
 8001004:	f000 fb3c 	bl	8001680 <protocol_rcv_cmd_register>
  protocol_rcv_cmd_register(CMD_REPORT_VERSION, report_firmware_version);
 8001008:	491d      	ldr	r1, [pc, #116]	; (8001080 <communicate_task+0xa8>)
 800100a:	2002      	movs	r0, #2
 800100c:	f000 fb38 	bl	8001680 <protocol_rcv_cmd_register>

  usb_vcp_rx_callback_register(usb_rcv_callback);
 8001010:	481c      	ldr	r0, [pc, #112]	; (8001084 <communicate_task+0xac>)
 8001012:	f00f fce3 	bl	80109dc <usb_vcp_rx_callback_register>
  soft_timer_register(usb_tx_flush, NULL, 1);
 8001016:	2201      	movs	r2, #1
 8001018:	2100      	movs	r1, #0
 800101a:	481b      	ldr	r0, [pc, #108]	; (8001088 <communicate_task+0xb0>)
 800101c:	f000 fa4e 	bl	80014bc <soft_timer_register>
	protocol_send_list_add_callback_reg(protocol_send_success_callback);
 8001020:	481a      	ldr	r0, [pc, #104]	; (800108c <communicate_task+0xb4>)
 8001022:	f000 fd2b 	bl	8001a7c <protocol_send_list_add_callback_reg>

  soft_timer_register(toggle_led_C, NULL, 1000);
 8001026:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800102a:	2100      	movs	r1, #0
 800102c:	4818      	ldr	r0, [pc, #96]	; (8001090 <communicate_task+0xb8>)
 800102e:	f000 fa45 	bl	80014bc <soft_timer_register>

  while (1)
  {
	  // THIS CAUSES THE USB CONNECTION TO BRICK

    osSignalSet(communicate_task_t, SEND_PROTOCOL_SIGNAL);
 8001032:	4b18      	ldr	r3, [pc, #96]	; (8001094 <communicate_task+0xbc>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	2102      	movs	r1, #2
 8001038:	4618      	mov	r0, r3
 800103a:	f00d fe8b 	bl	800ed54 <osSignalSet>

    event = osSignalWait(SEND_PROTOCOL_SIGNAL | RECV_PROTOCOL_SIGNAL, osWaitForever);
 800103e:	f107 030c 	add.w	r3, r7, #12
 8001042:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001046:	2103      	movs	r1, #3
 8001048:	4618      	mov	r0, r3
 800104a:	f00d fec3 	bl	800edd4 <osSignalWait>

    if (event.status == osEventSignal)
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	2b08      	cmp	r3, #8
 8001052:	d1ee      	bne.n	8001032 <communicate_task+0x5a>
    {
      if (event.value.signals & SEND_PROTOCOL_SIGNAL)
 8001054:	693b      	ldr	r3, [r7, #16]
 8001056:	f003 0302 	and.w	r3, r3, #2
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <communicate_task+0x8a>
      {
        protocol_send_flush();
 800105e:	f000 fc43 	bl	80018e8 <protocol_send_flush>
      }

      if (event.value.signals & RECV_PROTOCOL_SIGNAL)
 8001062:	693b      	ldr	r3, [r7, #16]
 8001064:	f003 0301 	and.w	r3, r3, #1
 8001068:	2b00      	cmp	r3, #0
 800106a:	d0e2      	beq.n	8001032 <communicate_task+0x5a>
      {
        protocol_unpack_flush();
 800106c:	f000 fc90 	bl	8001990 <protocol_unpack_flush>
    osSignalSet(communicate_task_t, SEND_PROTOCOL_SIGNAL);
 8001070:	e7df      	b.n	8001032 <communicate_task+0x5a>
 8001072:	bf00      	nop
 8001074:	08001099 	.word	0x08001099
 8001078:	080151a0 	.word	0x080151a0
 800107c:	08000f81 	.word	0x08000f81
 8001080:	08000f9d 	.word	0x08000f9d
 8001084:	08000f51 	.word	0x08000f51
 8001088:	08010941 	.word	0x08010941
 800108c:	080010b9 	.word	0x080010b9
 8001090:	08000fbd 	.word	0x08000fbd
 8001094:	20000604 	.word	0x20000604

08001098 <usb_interface_send>:
//	  osDelay(1);
  }
}

static int32_t usb_interface_send(uint8_t *p_data, uint32_t len)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	6039      	str	r1, [r7, #0]
  CDC_Transmit_FS(p_data, len);
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	b29b      	uxth	r3, r3
 80010a6:	4619      	mov	r1, r3
 80010a8:	6878      	ldr	r0, [r7, #4]
 80010aa:	f00f fc33 	bl	8010914 <CDC_Transmit_FS>
  return 0;
 80010ae:	2300      	movs	r3, #0
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	3708      	adds	r7, #8
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}

080010b8 <protocol_send_success_callback>:

static void protocol_send_success_callback(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
  osSignalSet(communicate_task_t, SEND_PROTOCOL_SIGNAL);
 80010bc:	4b03      	ldr	r3, [pc, #12]	; (80010cc <protocol_send_success_callback+0x14>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	2102      	movs	r1, #2
 80010c2:	4618      	mov	r0, r3
 80010c4:	f00d fe46 	bl	800ed54 <osSignalSet>
}
 80010c8:	bf00      	nop
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	20000604 	.word	0x20000604

080010d0 <chassis_push_info>:
  }
  return 0;
}

int32_t chassis_push_info(void *argc)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b09c      	sub	sp, #112	; 0x70
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  struct chassis_info info;
  chassis_t pchassis = (chassis_t)argc;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	66fb      	str	r3, [r7, #108]	; 0x6c
  chassis_get_info(pchassis, &info);
 80010dc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80010e0:	4619      	mov	r1, r3
 80010e2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80010e4:	f011 fbf6 	bl	80128d4 <chassis_get_info>
  // cmd_chassis_info.v_y_mm = info.v_y_mm;

  // protocol_send(MANIFOLD2_ADDRESS, CMD_PUSH_CHASSIS_INFO, &cmd_chassis_info, sizeof(cmd_chassis_info));

  struct chassis_info test_info;
  test_info.angle_deg = 1.0;
 80010e8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80010ec:	623b      	str	r3, [r7, #32]
  test_info.yaw_gyro_angle = 1.0;
 80010ee:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80010f2:	627b      	str	r3, [r7, #36]	; 0x24
  test_info.yaw_gyro_rate = 1.0;
 80010f4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80010f8:	62bb      	str	r3, [r7, #40]	; 0x28
  test_info.position_x_mm = 1.0;
 80010fa:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80010fe:	61bb      	str	r3, [r7, #24]
  test_info.position_y_mm = 1.0;
 8001100:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001104:	61fb      	str	r3, [r7, #28]
  test_info.v_x_mm = 1.0;
 8001106:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800110a:	60fb      	str	r3, [r7, #12]
  test_info.v_y_mm = 1.0;
 800110c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001110:	613b      	str	r3, [r7, #16]
  HAL_GPIO_TogglePin(LED_H_GPIO_Port, LED_H_Pin);
 8001112:	2102      	movs	r1, #2
 8001114:	4807      	ldr	r0, [pc, #28]	; (8001134 <chassis_push_info+0x64>)
 8001116:	f005 fe3a 	bl	8006d8e <HAL_GPIO_TogglePin>
  protocol_send(MANIFOLD2_ADDRESS, CMD_PUSH_CHASSIS_INFO, &test_info, sizeof(test_info));
 800111a:	f107 020c 	add.w	r2, r7, #12
 800111e:	2330      	movs	r3, #48	; 0x30
 8001120:	f240 2101 	movw	r1, #513	; 0x201
 8001124:	2000      	movs	r0, #0
 8001126:	f000 fb5b 	bl	80017e0 <protocol_send>

  return 0;
 800112a:	2300      	movs	r3, #0
}
 800112c:	4618      	mov	r0, r3
 800112e:	3770      	adds	r7, #112	; 0x70
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	40021800 	.word	0x40021800

08001138 <system_config>:
static uint8_t glb_sys_cfg;

extern int ulog_console_backend_init(void);

void system_config(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
  glb_sys_cfg = HAL_GPIO_ReadPin(SYS_CFG_GPIO_Port, SYS_CFG_Pin);
 800113c:	2140      	movs	r1, #64	; 0x40
 800113e:	4804      	ldr	r0, [pc, #16]	; (8001150 <system_config+0x18>)
 8001140:	f005 fdf4 	bl	8006d2c <HAL_GPIO_ReadPin>
 8001144:	4603      	mov	r3, r0
 8001146:	461a      	mov	r2, r3
 8001148:	4b02      	ldr	r3, [pc, #8]	; (8001154 <system_config+0x1c>)
 800114a:	701a      	strb	r2, [r3, #0]
}
 800114c:	bf00      	nop
 800114e:	bd80      	pop	{r7, pc}
 8001150:	40020c00 	.word	0x40020c00
 8001154:	200005f8 	.word	0x200005f8

08001158 <get_sys_cfg>:

uint8_t get_sys_cfg(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  return glb_sys_cfg;
 800115c:	4b03      	ldr	r3, [pc, #12]	; (800116c <get_sys_cfg+0x14>)
 800115e:	781b      	ldrb	r3, [r3, #0]
}
 8001160:	4618      	mov	r0, r3
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	200005f8 	.word	0x200005f8

08001170 <hw_init>:

void hw_init(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
  cali_param_init();
 8001174:	f000 f948 	bl	8001408 <cali_param_init>
  board_config();
 8001178:	f001 ff8c 	bl	8003094 <board_config>
  test_init();
 800117c:	f012 fc9c 	bl	8013ab8 <test_init>
  system_config();
 8001180:	f7ff ffda 	bl	8001138 <system_config>
  ulog_init();
 8001184:	f012 fe0e 	bl	8013da4 <ulog_init>
  ulog_console_backend_init();
 8001188:	f012 fe3c 	bl	8013e04 <ulog_console_backend_init>

  chassis_pid_register(&chassis, "chassis", DEVICE_CAN1);
 800118c:	2200      	movs	r2, #0
 800118e:	4905      	ldr	r1, [pc, #20]	; (80011a4 <hw_init+0x34>)
 8001190:	4805      	ldr	r0, [pc, #20]	; (80011a8 <hw_init+0x38>)
 8001192:	f011 f945 	bl	8012420 <chassis_pid_register>
  chassis_disable(&chassis);
 8001196:	4804      	ldr	r0, [pc, #16]	; (80011a8 <hw_init+0x38>)
 8001198:	f011 fc6c 	bl	8012a74 <chassis_disable>

  offline_init();
 800119c:	f000 f860 	bl	8001260 <offline_init>
}
 80011a0:	bf00      	nop
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	080151ac 	.word	0x080151ac
 80011a8:	200001bc 	.word	0x200001bc

080011ac <task_init>:
osThreadId communicate_task_t;
osThreadId cmd_task_t;
osThreadId blinky_task_t;

void task_init(void)
{
 80011ac:	b5b0      	push	{r4, r5, r7, lr}
 80011ae:	b094      	sub	sp, #80	; 0x50
 80011b0:	af00      	add	r7, sp, #0
  // uint8_t app;
  // app = get_sys_cfg();

  osThreadDef(TIMER_1MS, timer_task, osPriorityHigh, 0, 512);
 80011b2:	4b23      	ldr	r3, [pc, #140]	; (8001240 <task_init+0x94>)
 80011b4:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80011b8:	461d      	mov	r5, r3
 80011ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011be:	682b      	ldr	r3, [r5, #0]
 80011c0:	6023      	str	r3, [r4, #0]
  timer_task_t = osThreadCreate(osThread(TIMER_1MS), NULL);
 80011c2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80011c6:	2100      	movs	r1, #0
 80011c8:	4618      	mov	r0, r3
 80011ca:	f00d fd88 	bl	800ecde <osThreadCreate>
 80011ce:	4603      	mov	r3, r0
 80011d0:	4a1c      	ldr	r2, [pc, #112]	; (8001244 <task_init+0x98>)
 80011d2:	6013      	str	r3, [r2, #0]

  // PROBLEM was 4096
  // changed to 2048
  osThreadDef(COMMUNICATE_TASK, communicate_task, osPriorityHigh, 0, 2048);
 80011d4:	4b1c      	ldr	r3, [pc, #112]	; (8001248 <task_init+0x9c>)
 80011d6:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80011da:	461d      	mov	r5, r3
 80011dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011e0:	682b      	ldr	r3, [r5, #0]
 80011e2:	6023      	str	r3, [r4, #0]
  communicate_task_t = osThreadCreate(osThread(COMMUNICATE_TASK), NULL);
 80011e4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011e8:	2100      	movs	r1, #0
 80011ea:	4618      	mov	r0, r3
 80011ec:	f00d fd77 	bl	800ecde <osThreadCreate>
 80011f0:	4603      	mov	r3, r0
 80011f2:	4a16      	ldr	r2, [pc, #88]	; (800124c <task_init+0xa0>)
 80011f4:	6013      	str	r3, [r2, #0]
  // PROBLEM was 4096
  // changed to 1024
  //  osThreadDef(CMD_TASK, infantry_cmd_task, osPriorityNormal, 0, 2048);
  //  cmd_task_t = osThreadCreate(osThread(CMD_TASK), NULL);

   osThreadDef(CHASSIS_TASK, chassis_task, osPriorityRealtime, 0, 64);
 80011f6:	4b16      	ldr	r3, [pc, #88]	; (8001250 <task_init+0xa4>)
 80011f8:	f107 0414 	add.w	r4, r7, #20
 80011fc:	461d      	mov	r5, r3
 80011fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001200:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001202:	682b      	ldr	r3, [r5, #0]
 8001204:	6023      	str	r3, [r4, #0]
   chassis_task_t = osThreadCreate(osThread(CHASSIS_TASK), NULL);
 8001206:	f107 0314 	add.w	r3, r7, #20
 800120a:	2100      	movs	r1, #0
 800120c:	4618      	mov	r0, r3
 800120e:	f00d fd66 	bl	800ecde <osThreadCreate>
 8001212:	4603      	mov	r3, r0
 8001214:	4a0f      	ldr	r2, [pc, #60]	; (8001254 <task_init+0xa8>)
 8001216:	6013      	str	r3, [r2, #0]

   osThreadDef(BLINKY_TASK, blinky_task, osPriorityRealtime, 0, 64);
 8001218:	4b0f      	ldr	r3, [pc, #60]	; (8001258 <task_init+0xac>)
 800121a:	463c      	mov	r4, r7
 800121c:	461d      	mov	r5, r3
 800121e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001220:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001222:	682b      	ldr	r3, [r5, #0]
 8001224:	6023      	str	r3, [r4, #0]
   blinky_task_t = osThreadCreate(osThread(BLINKY_TASK), NULL);
 8001226:	463b      	mov	r3, r7
 8001228:	2100      	movs	r1, #0
 800122a:	4618      	mov	r0, r3
 800122c:	f00d fd57 	bl	800ecde <osThreadCreate>
 8001230:	4603      	mov	r3, r0
 8001232:	4a0a      	ldr	r2, [pc, #40]	; (800125c <task_init+0xb0>)
 8001234:	6013      	str	r3, [r2, #0]
}
 8001236:	bf00      	nop
 8001238:	3750      	adds	r7, #80	; 0x50
 800123a:	46bd      	mov	sp, r7
 800123c:	bdb0      	pop	{r4, r5, r7, pc}
 800123e:	bf00      	nop
 8001240:	080151c0 	.word	0x080151c0
 8001244:	200005fc 	.word	0x200005fc
 8001248:	080151e8 	.word	0x080151e8
 800124c:	20000604 	.word	0x20000604
 8001250:	0801520c 	.word	0x0801520c
 8001254:	20000600 	.word	0x20000600
 8001258:	0801522c 	.word	0x0801522c
 800125c:	20000608 	.word	0x20000608

08001260 <offline_init>:
}

static chassis_t pchassis = NULL;

void offline_init(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b084      	sub	sp, #16
 8001264:	af02      	add	r7, sp, #8
  uint8_t app;
  app = get_sys_cfg();
 8001266:	f7ff ff77 	bl	8001158 <get_sys_cfg>
 800126a:	4603      	mov	r3, r0
 800126c:	70fb      	strb	r3, [r7, #3]

  for (int i = 0; i < BEEP_MAX_TIMES; i++)
 800126e:	2300      	movs	r3, #0
 8001270:	607b      	str	r3, [r7, #4]
 8001272:	e009      	b.n	8001288 <offline_init+0x28>
  {
    offline_beep_times[i] = i;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	b2d9      	uxtb	r1, r3
 8001278:	4a23      	ldr	r2, [pc, #140]	; (8001308 <offline_init+0xa8>)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	4413      	add	r3, r2
 800127e:	460a      	mov	r2, r1
 8001280:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < BEEP_MAX_TIMES; i++)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	3301      	adds	r3, #1
 8001286:	607b      	str	r3, [r7, #4]
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2b13      	cmp	r3, #19
 800128c:	ddf2      	ble.n	8001274 <offline_init+0x14>
  }

  pchassis = chassis_find("chassis");
 800128e:	481f      	ldr	r0, [pc, #124]	; (800130c <offline_init+0xac>)
 8001290:	f011 fbe2 	bl	8012a58 <chassis_find>
 8001294:	4603      	mov	r3, r0
 8001296:	4a1e      	ldr	r2, [pc, #120]	; (8001310 <offline_init+0xb0>)
 8001298:	6013      	str	r3, [r2, #0]

  detect_device_register(&offline_dev, "detect", 0, 0);
 800129a:	2300      	movs	r3, #0
 800129c:	2200      	movs	r2, #0
 800129e:	491d      	ldr	r1, [pc, #116]	; (8001314 <offline_init+0xb4>)
 80012a0:	481d      	ldr	r0, [pc, #116]	; (8001318 <offline_init+0xb8>)
 80012a2:	f010 fd3a 	bl	8011d1a <detect_device_register>

  detect_device_add_event(&offline_dev, GYRO_OFFLINE_EVENT, 100, offline_beep_set_times, &offline_beep_times[8]);
 80012a6:	4b1d      	ldr	r3, [pc, #116]	; (800131c <offline_init+0xbc>)
 80012a8:	9300      	str	r3, [sp, #0]
 80012aa:	4b1d      	ldr	r3, [pc, #116]	; (8001320 <offline_init+0xc0>)
 80012ac:	2264      	movs	r2, #100	; 0x64
 80012ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012b2:	4819      	ldr	r0, [pc, #100]	; (8001318 <offline_init+0xb8>)
 80012b4:	f010 fd92 	bl	8011ddc <detect_device_add_event>

  detect_device_add_event(&offline_dev, MOTOR1_OFFLINE_EVENT, 100, offline_beep_set_times, &offline_beep_times[1]);
 80012b8:	4b1a      	ldr	r3, [pc, #104]	; (8001324 <offline_init+0xc4>)
 80012ba:	9300      	str	r3, [sp, #0]
 80012bc:	4b18      	ldr	r3, [pc, #96]	; (8001320 <offline_init+0xc0>)
 80012be:	2264      	movs	r2, #100	; 0x64
 80012c0:	2102      	movs	r1, #2
 80012c2:	4815      	ldr	r0, [pc, #84]	; (8001318 <offline_init+0xb8>)
 80012c4:	f010 fd8a 	bl	8011ddc <detect_device_add_event>
  detect_device_add_event(&offline_dev, MOTOR2_OFFLINE_EVENT, 100, offline_beep_set_times, &offline_beep_times[2]);
 80012c8:	4b17      	ldr	r3, [pc, #92]	; (8001328 <offline_init+0xc8>)
 80012ca:	9300      	str	r3, [sp, #0]
 80012cc:	4b14      	ldr	r3, [pc, #80]	; (8001320 <offline_init+0xc0>)
 80012ce:	2264      	movs	r2, #100	; 0x64
 80012d0:	2104      	movs	r1, #4
 80012d2:	4811      	ldr	r0, [pc, #68]	; (8001318 <offline_init+0xb8>)
 80012d4:	f010 fd82 	bl	8011ddc <detect_device_add_event>
  detect_device_add_event(&offline_dev, MOTOR3_OFFLINE_EVENT, 100, offline_beep_set_times, &offline_beep_times[3]);
 80012d8:	4b14      	ldr	r3, [pc, #80]	; (800132c <offline_init+0xcc>)
 80012da:	9300      	str	r3, [sp, #0]
 80012dc:	4b10      	ldr	r3, [pc, #64]	; (8001320 <offline_init+0xc0>)
 80012de:	2264      	movs	r2, #100	; 0x64
 80012e0:	2108      	movs	r1, #8
 80012e2:	480d      	ldr	r0, [pc, #52]	; (8001318 <offline_init+0xb8>)
 80012e4:	f010 fd7a 	bl	8011ddc <detect_device_add_event>
  detect_device_add_event(&offline_dev, MOTOR4_OFFLINE_EVENT, 100, offline_beep_set_times, &offline_beep_times[4]);
 80012e8:	4b11      	ldr	r3, [pc, #68]	; (8001330 <offline_init+0xd0>)
 80012ea:	9300      	str	r3, [sp, #0]
 80012ec:	4b0c      	ldr	r3, [pc, #48]	; (8001320 <offline_init+0xc0>)
 80012ee:	2264      	movs	r2, #100	; 0x64
 80012f0:	2110      	movs	r1, #16
 80012f2:	4809      	ldr	r0, [pc, #36]	; (8001318 <offline_init+0xb8>)
 80012f4:	f010 fd72 	bl	8011ddc <detect_device_add_event>

  // soft_timer_register(offline_check, NULL, 20);
  can_fifo0_rx_callback_register(&can1_manage, can1_detect_update);
 80012f8:	490e      	ldr	r1, [pc, #56]	; (8001334 <offline_init+0xd4>)
 80012fa:	480f      	ldr	r0, [pc, #60]	; (8001338 <offline_init+0xd8>)
 80012fc:	f002 f80c 	bl	8003318 <can_fifo0_rx_callback_register>
}
 8001300:	bf00      	nop
 8001302:	3708      	adds	r7, #8
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	20000850 	.word	0x20000850
 800130c:	08015240 	.word	0x08015240
 8001310:	20000864 	.word	0x20000864
 8001314:	08015248 	.word	0x08015248
 8001318:	2000060c 	.word	0x2000060c
 800131c:	20000858 	.word	0x20000858
 8001320:	0800133d 	.word	0x0800133d
 8001324:	20000851 	.word	0x20000851
 8001328:	20000852 	.word	0x20000852
 800132c:	20000853 	.word	0x20000853
 8001330:	20000854 	.word	0x20000854
 8001334:	08001359 	.word	0x08001359
 8001338:	20001258 	.word	0x20001258

0800133c <offline_beep_set_times>:
{
  return detect_device_get_event(&offline_dev);
}

int32_t offline_beep_set_times(void *argc)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  return beep_set_times(*(uint8_t *)argc);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	4618      	mov	r0, r3
 800134a:	f002 fd19 	bl	8003d80 <beep_set_times>
 800134e:	4603      	mov	r3, r0
}
 8001350:	4618      	mov	r0, r3
 8001352:	3708      	adds	r7, #8
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}

08001358 <can1_detect_update>:

int32_t can1_detect_update(CAN_RxHeaderTypeDef *header, uint8_t *rx_data)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
 8001360:	6039      	str	r1, [r7, #0]
  switch (header->StdId)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 800136a:	2b06      	cmp	r3, #6
 800136c:	d833      	bhi.n	80013d6 <can1_detect_update+0x7e>
 800136e:	a201      	add	r2, pc, #4	; (adr r2, 8001374 <can1_detect_update+0x1c>)
 8001370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001374:	08001391 	.word	0x08001391
 8001378:	0800139b 	.word	0x0800139b
 800137c:	080013a5 	.word	0x080013a5
 8001380:	080013af 	.word	0x080013af
 8001384:	080013b9 	.word	0x080013b9
 8001388:	080013c3 	.word	0x080013c3
 800138c:	080013cd 	.word	0x080013cd
  {
  case 0x201:
    detect_device_update(&offline_dev, MOTOR1_OFFLINE_EVENT);
 8001390:	2102      	movs	r1, #2
 8001392:	4814      	ldr	r0, [pc, #80]	; (80013e4 <can1_detect_update+0x8c>)
 8001394:	f010 fcee 	bl	8011d74 <detect_device_update>
    break;
 8001398:	e01e      	b.n	80013d8 <can1_detect_update+0x80>
  case 0x202:
    detect_device_update(&offline_dev, MOTOR2_OFFLINE_EVENT);
 800139a:	2104      	movs	r1, #4
 800139c:	4811      	ldr	r0, [pc, #68]	; (80013e4 <can1_detect_update+0x8c>)
 800139e:	f010 fce9 	bl	8011d74 <detect_device_update>
    break;
 80013a2:	e019      	b.n	80013d8 <can1_detect_update+0x80>
  case 0x203:
    detect_device_update(&offline_dev, MOTOR3_OFFLINE_EVENT);
 80013a4:	2108      	movs	r1, #8
 80013a6:	480f      	ldr	r0, [pc, #60]	; (80013e4 <can1_detect_update+0x8c>)
 80013a8:	f010 fce4 	bl	8011d74 <detect_device_update>
    break;
 80013ac:	e014      	b.n	80013d8 <can1_detect_update+0x80>
  case 0x204:
    detect_device_update(&offline_dev, MOTOR4_OFFLINE_EVENT);
 80013ae:	2110      	movs	r1, #16
 80013b0:	480c      	ldr	r0, [pc, #48]	; (80013e4 <can1_detect_update+0x8c>)
 80013b2:	f010 fcdf 	bl	8011d74 <detect_device_update>
    break;
 80013b6:	e00f      	b.n	80013d8 <can1_detect_update+0x80>
  case 0x205:
    detect_device_update(&offline_dev, YAW_OFFLINE_EVENT);
 80013b8:	2120      	movs	r1, #32
 80013ba:	480a      	ldr	r0, [pc, #40]	; (80013e4 <can1_detect_update+0x8c>)
 80013bc:	f010 fcda 	bl	8011d74 <detect_device_update>
    break;
 80013c0:	e00a      	b.n	80013d8 <can1_detect_update+0x80>
  case 0x206:
    detect_device_update(&offline_dev, PITCH_OFFLINE_EVENT);
 80013c2:	2140      	movs	r1, #64	; 0x40
 80013c4:	4807      	ldr	r0, [pc, #28]	; (80013e4 <can1_detect_update+0x8c>)
 80013c6:	f010 fcd5 	bl	8011d74 <detect_device_update>
    break;
 80013ca:	e005      	b.n	80013d8 <can1_detect_update+0x80>
  case 0x207:
    detect_device_update(&offline_dev, TURN_OFFLINE_EVENT);
 80013cc:	2180      	movs	r1, #128	; 0x80
 80013ce:	4805      	ldr	r0, [pc, #20]	; (80013e4 <can1_detect_update+0x8c>)
 80013d0:	f010 fcd0 	bl	8011d74 <detect_device_update>
    break;
 80013d4:	e000      	b.n	80013d8 <can1_detect_update+0x80>
  default:
    break;
 80013d6:	bf00      	nop
  }

  return header->DLC;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	691b      	ldr	r3, [r3, #16]
}
 80013dc:	4618      	mov	r0, r3
 80013de:	3708      	adds	r7, #8
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	2000060c 	.word	0x2000060c

080013e8 <cali_data_read>:
/**
  * @brief read calibrate data cali_param from chip flash
  * @usage called after cali_param_init() in main() initialize part.
  */
void cali_data_read(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
  memcpy((void*)&cali_param, (void*)PARAM_SAVED_START_ADDRESS, sizeof(cali_sys_t));
 80013ec:	4b04      	ldr	r3, [pc, #16]	; (8001400 <cali_data_read+0x18>)
 80013ee:	4a05      	ldr	r2, [pc, #20]	; (8001404 <cali_data_read+0x1c>)
 80013f0:	ca07      	ldmia	r2, {r0, r1, r2}
 80013f2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 80013f6:	bf00      	nop
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr
 8001400:	20000868 	.word	0x20000868
 8001404:	081e0000 	.word	0x081e0000

08001408 <cali_param_init>:

void cali_param_init(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
  cali_data_read();
 800140c:	f7ff ffec 	bl	80013e8 <cali_data_read>
}
 8001410:	bf00      	nop
 8001412:	bd80      	pop	{r7, pc}

08001414 <timer_task>:
#include "timer_task.h"

struct soft_timer soft_timer[TIMER_ELEMENT_NUM_MAX - 1];

void timer_task(void const *argument)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b084      	sub	sp, #16
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  uint32_t period = osKernelSysTick();
 800141c:	f00d fc4f 	bl	800ecbe <osKernelSysTick>
 8001420:	4603      	mov	r3, r0
 8001422:	60bb      	str	r3, [r7, #8]

  while (1)
  {
    TimerISR_Hook();
 8001424:	f012 fb50 	bl	8013ac8 <TimerISR_Hook>

    for (int i = 0; i < TIMER_ELEMENT_NUM_MAX - 1; i++)
 8001428:	2300      	movs	r3, #0
 800142a:	60fb      	str	r3, [r7, #12]
 800142c:	e03a      	b.n	80014a4 <timer_task+0x90>
    {
      if ((soft_timer[i].id != 0) && (soft_timer[i].soft_timer_callback != NULL))
 800142e:	4a22      	ldr	r2, [pc, #136]	; (80014b8 <timer_task+0xa4>)
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	011b      	lsls	r3, r3, #4
 8001434:	4413      	add	r3, r2
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d030      	beq.n	800149e <timer_task+0x8a>
 800143c:	4a1e      	ldr	r2, [pc, #120]	; (80014b8 <timer_task+0xa4>)
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	011b      	lsls	r3, r3, #4
 8001442:	4413      	add	r3, r2
 8001444:	330c      	adds	r3, #12
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d028      	beq.n	800149e <timer_task+0x8a>
      {
        if (soft_timer_check(soft_timer[i].id) == SOFT_TIMER_TIMEOUT)
 800144c:	4a1a      	ldr	r2, [pc, #104]	; (80014b8 <timer_task+0xa4>)
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	011b      	lsls	r3, r3, #4
 8001452:	4413      	add	r3, r2
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	b29b      	uxth	r3, r3
 8001458:	4618      	mov	r0, r3
 800145a:	f012 fbf1 	bl	8013c40 <soft_timer_check>
 800145e:	4603      	mov	r3, r0
 8001460:	2b02      	cmp	r3, #2
 8001462:	d11c      	bne.n	800149e <timer_task+0x8a>
        {
          soft_timer[i].soft_timer_callback(soft_timer[i].argc);
 8001464:	4a14      	ldr	r2, [pc, #80]	; (80014b8 <timer_task+0xa4>)
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	011b      	lsls	r3, r3, #4
 800146a:	4413      	add	r3, r2
 800146c:	330c      	adds	r3, #12
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4911      	ldr	r1, [pc, #68]	; (80014b8 <timer_task+0xa4>)
 8001472:	68fa      	ldr	r2, [r7, #12]
 8001474:	0112      	lsls	r2, r2, #4
 8001476:	440a      	add	r2, r1
 8001478:	3208      	adds	r2, #8
 800147a:	6812      	ldr	r2, [r2, #0]
 800147c:	4610      	mov	r0, r2
 800147e:	4798      	blx	r3

          soft_timer_update(soft_timer[i].id, soft_timer[i].ticks);
 8001480:	4a0d      	ldr	r2, [pc, #52]	; (80014b8 <timer_task+0xa4>)
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	011b      	lsls	r3, r3, #4
 8001486:	4413      	add	r3, r2
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	4618      	mov	r0, r3
 800148c:	4a0a      	ldr	r2, [pc, #40]	; (80014b8 <timer_task+0xa4>)
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	011b      	lsls	r3, r3, #4
 8001492:	4413      	add	r3, r2
 8001494:	3304      	adds	r3, #4
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4619      	mov	r1, r3
 800149a:	f012 fb9d 	bl	8013bd8 <soft_timer_update>
    for (int i = 0; i < TIMER_ELEMENT_NUM_MAX - 1; i++)
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	3301      	adds	r3, #1
 80014a2:	60fb      	str	r3, [r7, #12]
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	2b12      	cmp	r3, #18
 80014a8:	ddc1      	ble.n	800142e <timer_task+0x1a>
        }
      }
    }

    osDelayUntil(&period, 1);
 80014aa:	f107 0308 	add.w	r3, r7, #8
 80014ae:	2101      	movs	r1, #1
 80014b0:	4618      	mov	r0, r3
 80014b2:	f00d fcdb 	bl	800ee6c <osDelayUntil>
    TimerISR_Hook();
 80014b6:	e7b5      	b.n	8001424 <timer_task+0x10>
 80014b8:	20000874 	.word	0x20000874

080014bc <soft_timer_register>:
  }
}

int32_t soft_timer_register(int32_t (*soft_timer_callback)(void *argc), void *argc, uint32_t ticks)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b086      	sub	sp, #24
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	60f8      	str	r0, [r7, #12]
 80014c4:	60b9      	str	r1, [r7, #8]
 80014c6:	607a      	str	r2, [r7, #4]
  for (int i = 0; i < TIMER_ELEMENT_NUM_MAX - 1; i++)
 80014c8:	2300      	movs	r3, #0
 80014ca:	617b      	str	r3, [r7, #20]
 80014cc:	e02b      	b.n	8001526 <soft_timer_register+0x6a>
  {
    if (soft_timer[i].id == 0)
 80014ce:	4a1a      	ldr	r2, [pc, #104]	; (8001538 <soft_timer_register+0x7c>)
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	011b      	lsls	r3, r3, #4
 80014d4:	4413      	add	r3, r2
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d121      	bne.n	8001520 <soft_timer_register+0x64>
    {
      soft_timer[i].id = soft_timer_req(ticks);
 80014dc:	6878      	ldr	r0, [r7, #4]
 80014de:	f012 fb41 	bl	8013b64 <soft_timer_req>
 80014e2:	4603      	mov	r3, r0
 80014e4:	b2d9      	uxtb	r1, r3
 80014e6:	4a14      	ldr	r2, [pc, #80]	; (8001538 <soft_timer_register+0x7c>)
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	011b      	lsls	r3, r3, #4
 80014ec:	4413      	add	r3, r2
 80014ee:	460a      	mov	r2, r1
 80014f0:	701a      	strb	r2, [r3, #0]
      soft_timer[i].ticks = ticks;
 80014f2:	4a11      	ldr	r2, [pc, #68]	; (8001538 <soft_timer_register+0x7c>)
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	011b      	lsls	r3, r3, #4
 80014f8:	4413      	add	r3, r2
 80014fa:	3304      	adds	r3, #4
 80014fc:	687a      	ldr	r2, [r7, #4]
 80014fe:	601a      	str	r2, [r3, #0]
      soft_timer[i].argc = argc;
 8001500:	4a0d      	ldr	r2, [pc, #52]	; (8001538 <soft_timer_register+0x7c>)
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	011b      	lsls	r3, r3, #4
 8001506:	4413      	add	r3, r2
 8001508:	3308      	adds	r3, #8
 800150a:	68ba      	ldr	r2, [r7, #8]
 800150c:	601a      	str	r2, [r3, #0]
      soft_timer[i].soft_timer_callback = soft_timer_callback;
 800150e:	4a0a      	ldr	r2, [pc, #40]	; (8001538 <soft_timer_register+0x7c>)
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	011b      	lsls	r3, r3, #4
 8001514:	4413      	add	r3, r2
 8001516:	330c      	adds	r3, #12
 8001518:	68fa      	ldr	r2, [r7, #12]
 800151a:	601a      	str	r2, [r3, #0]
      return i;
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	e007      	b.n	8001530 <soft_timer_register+0x74>
  for (int i = 0; i < TIMER_ELEMENT_NUM_MAX - 1; i++)
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	3301      	adds	r3, #1
 8001524:	617b      	str	r3, [r7, #20]
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	2b12      	cmp	r3, #18
 800152a:	ddd0      	ble.n	80014ce <soft_timer_register+0x12>
    }
  }
  return -1;
 800152c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001530:	4618      	mov	r0, r3
 8001532:	3718      	adds	r7, #24
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	20000874 	.word	0x20000874

0800153c <INIT_LIST_HEAD>:

#define LIST_HEAD(name) \
  list_t name = LIST_HEAD_INIT(name)

static __inline void INIT_LIST_HEAD(list_t *list)
{
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  list->next = list;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	687a      	ldr	r2, [r7, #4]
 8001548:	601a      	str	r2, [r3, #0]
  list->prev = list;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	687a      	ldr	r2, [r7, #4]
 800154e:	605a      	str	r2, [r3, #4]
}
 8001550:	bf00      	nop
 8001552:	370c      	adds	r7, #12
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr

0800155c <protocol_get_send_cmd_info>:

/* Private function prototypes -----------------------------------------------*/
/* Exported functions --------------------------------------------------------*/

struct send_cmd_info *protocol_get_send_cmd_info(uint16_t cmd)
{
 800155c:	b480      	push	{r7}
 800155e:	b085      	sub	sp, #20
 8001560:	af00      	add	r7, sp, #0
 8001562:	4603      	mov	r3, r0
 8001564:	80fb      	strh	r3, [r7, #6]
  for (int i = 0; i < PROTOCOL_CMD_MAX_NUM; i++)
 8001566:	2300      	movs	r3, #0
 8001568:	60fb      	str	r3, [r7, #12]
 800156a:	e01c      	b.n	80015a6 <protocol_get_send_cmd_info+0x4a>
  {
    if ((protocol_local_info.send_cmd_info[i].cmd == cmd) && (protocol_local_info.send_cmd_info[i].used == 1))
 800156c:	4a13      	ldr	r2, [pc, #76]	; (80015bc <protocol_get_send_cmd_info+0x60>)
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	011b      	lsls	r3, r3, #4
 8001572:	4413      	add	r3, r2
 8001574:	f203 239a 	addw	r3, r3, #666	; 0x29a
 8001578:	881b      	ldrh	r3, [r3, #0]
 800157a:	88fa      	ldrh	r2, [r7, #6]
 800157c:	429a      	cmp	r2, r3
 800157e:	d10f      	bne.n	80015a0 <protocol_get_send_cmd_info+0x44>
 8001580:	4a0e      	ldr	r2, [pc, #56]	; (80015bc <protocol_get_send_cmd_info+0x60>)
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	011b      	lsls	r3, r3, #4
 8001586:	4413      	add	r3, r2
 8001588:	f503 7326 	add.w	r3, r3, #664	; 0x298
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	2b01      	cmp	r3, #1
 8001590:	d106      	bne.n	80015a0 <protocol_get_send_cmd_info+0x44>
    {
      return &protocol_local_info.send_cmd_info[i];
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	011b      	lsls	r3, r3, #4
 8001596:	f503 7326 	add.w	r3, r3, #664	; 0x298
 800159a:	4a08      	ldr	r2, [pc, #32]	; (80015bc <protocol_get_send_cmd_info+0x60>)
 800159c:	4413      	add	r3, r2
 800159e:	e006      	b.n	80015ae <protocol_get_send_cmd_info+0x52>
  for (int i = 0; i < PROTOCOL_CMD_MAX_NUM; i++)
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	3301      	adds	r3, #1
 80015a4:	60fb      	str	r3, [r7, #12]
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	2b31      	cmp	r3, #49	; 0x31
 80015aa:	dddf      	ble.n	800156c <protocol_get_send_cmd_info+0x10>
    }
  }
  return NULL;
 80015ac:	2300      	movs	r3, #0
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	3714      	adds	r7, #20
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop
 80015bc:	200009b4 	.word	0x200009b4

080015c0 <protocol_rcv_pack_handle>:

static void protocol_rcv_pack_handle(uint8_t *pack_data, uint16_t cmd, uint8_t session, uint8_t source_add)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b088      	sub	sp, #32
 80015c4:	af02      	add	r7, sp, #8
 80015c6:	6078      	str	r0, [r7, #4]
 80015c8:	4608      	mov	r0, r1
 80015ca:	4611      	mov	r1, r2
 80015cc:	461a      	mov	r2, r3
 80015ce:	4603      	mov	r3, r0
 80015d0:	807b      	strh	r3, [r7, #2]
 80015d2:	460b      	mov	r3, r1
 80015d4:	707b      	strb	r3, [r7, #1]
 80015d6:	4613      	mov	r3, r2
 80015d8:	703b      	strb	r3, [r7, #0]
  protocol_pack_desc_t *pack;
  uint16_t rcv_seq;
  int32_t err;
  rcv_seq = pack->seq_num;
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	7a1a      	ldrb	r2, [r3, #8]
 80015de:	7a5b      	ldrb	r3, [r3, #9]
 80015e0:	021b      	lsls	r3, r3, #8
 80015e2:	4313      	orrs	r3, r2
 80015e4:	81fb      	strh	r3, [r7, #14]
  pack = (protocol_pack_desc_t *)(pack_data);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	613b      	str	r3, [r7, #16]

  for (int i = 0; i < PROTOCOL_CMD_MAX_NUM; i++)
 80015ea:	2300      	movs	r3, #0
 80015ec:	617b      	str	r3, [r7, #20]
 80015ee:	e03d      	b.n	800166c <protocol_rcv_pack_handle+0xac>
  {
    if ((protocol_local_info.rcv_cmd_info[i].cmd == cmd) && (protocol_local_info.rcv_cmd_info[i].rcv_callback != NULL) && (protocol_local_info.rcv_cmd_info[i].used == 1))
 80015f0:	4a22      	ldr	r2, [pc, #136]	; (800167c <protocol_rcv_pack_handle+0xbc>)
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	3321      	adds	r3, #33	; 0x21
 80015f6:	00db      	lsls	r3, r3, #3
 80015f8:	4413      	add	r3, r2
 80015fa:	885b      	ldrh	r3, [r3, #2]
 80015fc:	887a      	ldrh	r2, [r7, #2]
 80015fe:	429a      	cmp	r2, r3
 8001600:	d131      	bne.n	8001666 <protocol_rcv_pack_handle+0xa6>
 8001602:	4a1e      	ldr	r2, [pc, #120]	; (800167c <protocol_rcv_pack_handle+0xbc>)
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	3321      	adds	r3, #33	; 0x21
 8001608:	00db      	lsls	r3, r3, #3
 800160a:	4413      	add	r3, r2
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d029      	beq.n	8001666 <protocol_rcv_pack_handle+0xa6>
 8001612:	4a1a      	ldr	r2, [pc, #104]	; (800167c <protocol_rcv_pack_handle+0xbc>)
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	3321      	adds	r3, #33	; 0x21
 8001618:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 800161c:	2b01      	cmp	r3, #1
 800161e:	d122      	bne.n	8001666 <protocol_rcv_pack_handle+0xa6>
    {
      err = protocol_local_info.rcv_cmd_info[i].rcv_callback(pack->pdata + 2, pack->data_len - PACK_HEADER_TAIL_LEN);
 8001620:	4a16      	ldr	r2, [pc, #88]	; (800167c <protocol_rcv_pack_handle+0xbc>)
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	3321      	adds	r3, #33	; 0x21
 8001626:	00db      	lsls	r3, r3, #3
 8001628:	4413      	add	r3, r2
 800162a:	685a      	ldr	r2, [r3, #4]
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	330c      	adds	r3, #12
 8001630:	1c98      	adds	r0, r3, #2
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	7859      	ldrb	r1, [r3, #1]
 8001636:	789b      	ldrb	r3, [r3, #2]
 8001638:	f003 0303 	and.w	r3, r3, #3
 800163c:	021b      	lsls	r3, r3, #8
 800163e:	430b      	orrs	r3, r1
 8001640:	b29b      	uxth	r3, r3
 8001642:	3b12      	subs	r3, #18
 8001644:	b29b      	uxth	r3, r3
 8001646:	4619      	mov	r1, r3
 8001648:	4790      	blx	r2
 800164a:	4603      	mov	r3, r0
 800164c:	60bb      	str	r3, [r7, #8]
      if (session != 0)
 800164e:	787b      	ldrb	r3, [r7, #1]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d008      	beq.n	8001666 <protocol_rcv_pack_handle+0xa6>
      {
        protocol_ack(source_add, session, &err, sizeof(err), rcv_seq);
 8001654:	f107 0208 	add.w	r2, r7, #8
 8001658:	7879      	ldrb	r1, [r7, #1]
 800165a:	7838      	ldrb	r0, [r7, #0]
 800165c:	89fb      	ldrh	r3, [r7, #14]
 800165e:	9300      	str	r3, [sp, #0]
 8001660:	2304      	movs	r3, #4
 8001662:	f000 f917 	bl	8001894 <protocol_ack>
  for (int i = 0; i < PROTOCOL_CMD_MAX_NUM; i++)
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	3301      	adds	r3, #1
 800166a:	617b      	str	r3, [r7, #20]
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	2b31      	cmp	r3, #49	; 0x31
 8001670:	ddbe      	ble.n	80015f0 <protocol_rcv_pack_handle+0x30>
      }
    }
  }

  return;
 8001672:	bf00      	nop
}
 8001674:	3718      	adds	r7, #24
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	200009b4 	.word	0x200009b4

08001680 <protocol_rcv_cmd_register>:

int32_t protocol_rcv_cmd_register(uint16_t cmd, rcv_handle_fn_t rcv_callback)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b084      	sub	sp, #16
 8001684:	af00      	add	r7, sp, #0
 8001686:	4603      	mov	r3, r0
 8001688:	6039      	str	r1, [r7, #0]
 800168a:	80fb      	strh	r3, [r7, #6]
  for (int i = 0; i < PROTOCOL_CMD_MAX_NUM; i++)
 800168c:	2300      	movs	r3, #0
 800168e:	60fb      	str	r3, [r7, #12]
 8001690:	e01f      	b.n	80016d2 <protocol_rcv_cmd_register+0x52>
  {
    if (protocol_local_info.rcv_cmd_info[i].used == 0)
 8001692:	4a17      	ldr	r2, [pc, #92]	; (80016f0 <protocol_rcv_cmd_register+0x70>)
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	3321      	adds	r3, #33	; 0x21
 8001698:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d115      	bne.n	80016cc <protocol_rcv_cmd_register+0x4c>
    {
      protocol_local_info.rcv_cmd_info[i].used = 1;
 80016a0:	4a13      	ldr	r2, [pc, #76]	; (80016f0 <protocol_rcv_cmd_register+0x70>)
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	3321      	adds	r3, #33	; 0x21
 80016a6:	2101      	movs	r1, #1
 80016a8:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
      protocol_local_info.rcv_cmd_info[i].cmd = cmd;
 80016ac:	4a10      	ldr	r2, [pc, #64]	; (80016f0 <protocol_rcv_cmd_register+0x70>)
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	3321      	adds	r3, #33	; 0x21
 80016b2:	00db      	lsls	r3, r3, #3
 80016b4:	4413      	add	r3, r2
 80016b6:	88fa      	ldrh	r2, [r7, #6]
 80016b8:	805a      	strh	r2, [r3, #2]
      protocol_local_info.rcv_cmd_info[i].rcv_callback = rcv_callback;
 80016ba:	4a0d      	ldr	r2, [pc, #52]	; (80016f0 <protocol_rcv_cmd_register+0x70>)
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	3321      	adds	r3, #33	; 0x21
 80016c0:	00db      	lsls	r3, r3, #3
 80016c2:	4413      	add	r3, r2
 80016c4:	683a      	ldr	r2, [r7, #0]
 80016c6:	605a      	str	r2, [r3, #4]
      return 0;
 80016c8:	2300      	movs	r3, #0
 80016ca:	e00c      	b.n	80016e6 <protocol_rcv_cmd_register+0x66>
  for (int i = 0; i < PROTOCOL_CMD_MAX_NUM; i++)
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	3301      	adds	r3, #1
 80016d0:	60fb      	str	r3, [r7, #12]
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	2b31      	cmp	r3, #49	; 0x31
 80016d6:	dddc      	ble.n	8001692 <protocol_rcv_cmd_register+0x12>
    }
  }
  PROTOCOL_ERR_INFO_PRINTF(PROTOCOL_ERR_REGISTER_FAILED, __FILE__, __LINE__);
 80016d8:	2254      	movs	r2, #84	; 0x54
 80016da:	4906      	ldr	r1, [pc, #24]	; (80016f4 <protocol_rcv_cmd_register+0x74>)
 80016dc:	2012      	movs	r0, #18
 80016de:	f001 fbc7 	bl	8002e70 <protocol_s_error_info_printf>
  return -1;
 80016e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3710      	adds	r7, #16
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	200009b4 	.word	0x200009b4
 80016f4:	08015250 	.word	0x08015250

080016f8 <protocol_local_init>:
  */

#include "main.h"

uint32_t protocol_local_init(uint8_t address)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b086      	sub	sp, #24
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	4603      	mov	r3, r0
 8001700:	71fb      	strb	r3, [r7, #7]

  uint32_t status;

  status = PROTOCOL_SUCCESS;
 8001702:	2300      	movs	r3, #0
 8001704:	613b      	str	r3, [r7, #16]

  // Check if it is a little-endian machine
  const uint16_t endian_test = 0xAABB;
 8001706:	f64a 23bb 	movw	r3, #43707	; 0xaabb
 800170a:	81fb      	strh	r3, [r7, #14]
  if (*((uint8_t *)(&endian_test)) == 0xAA)
 800170c:	f107 030e 	add.w	r3, r7, #14
 8001710:	781b      	ldrb	r3, [r3, #0]
 8001712:	2baa      	cmp	r3, #170	; 0xaa
 8001714:	d107      	bne.n	8001726 <protocol_local_init+0x2e>
  {
    // It is big-endian mode
    status = PROTOCOL_ERR_UNSUPPORT_CPU;
 8001716:	230d      	movs	r3, #13
 8001718:	613b      	str	r3, [r7, #16]
    PROTOCOL_ERR_INFO_PRINTF(status, __FILE__, __LINE__);
 800171a:	22a0      	movs	r2, #160	; 0xa0
 800171c:	492b      	ldr	r1, [pc, #172]	; (80017cc <protocol_local_init+0xd4>)
 800171e:	6938      	ldr	r0, [r7, #16]
 8001720:	f001 fba6 	bl	8002e70 <protocol_s_error_info_printf>

    while (1){
 8001724:	e7fe      	b.n	8001724 <protocol_local_init+0x2c>
    }
  }

  MUTEX_INIT(protocol_local_info.mutex_lock);
  
  memset(protocol_local_info.route_table, 0xFF, PROTOCOL_ROUTE_TABLE_MAX_NUM);
 8001726:	22fe      	movs	r2, #254	; 0xfe
 8001728:	21ff      	movs	r1, #255	; 0xff
 800172a:	4829      	ldr	r0, [pc, #164]	; (80017d0 <protocol_local_init+0xd8>)
 800172c:	f012 fbaf 	bl	8013e8e <memset>
	
	for(uint8_t i = 0; i < PROTOCOL_INTERFACE_MAX; i++)
 8001730:	2300      	movs	r3, #0
 8001732:	75fb      	strb	r3, [r7, #23]
 8001734:	e00f      	b.n	8001756 <protocol_local_init+0x5e>
	{
		/* initalization user data is 0xFF */
		// PROBLEM: Triggers HardFault_interupt from memory overflow. THe loop doesnt stop at 5
		// FIXED: i = 0
		memset(&protocol_local_info.interface[i].user_data, 0xFF, sizeof(union interface_user_data));
 8001736:	7dfb      	ldrb	r3, [r7, #23]
 8001738:	2294      	movs	r2, #148	; 0x94
 800173a:	fb02 f303 	mul.w	r3, r2, r3
 800173e:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 8001742:	4a24      	ldr	r2, [pc, #144]	; (80017d4 <protocol_local_init+0xdc>)
 8001744:	4413      	add	r3, r2
 8001746:	220c      	movs	r2, #12
 8001748:	21ff      	movs	r1, #255	; 0xff
 800174a:	4618      	mov	r0, r3
 800174c:	f012 fb9f 	bl	8013e8e <memset>
	for(uint8_t i = 0; i < PROTOCOL_INTERFACE_MAX; i++)
 8001750:	7dfb      	ldrb	r3, [r7, #23]
 8001752:	3301      	adds	r3, #1
 8001754:	75fb      	strb	r3, [r7, #23]
 8001756:	7dfb      	ldrb	r3, [r7, #23]
 8001758:	2b04      	cmp	r3, #4
 800175a:	d9ec      	bls.n	8001736 <protocol_local_init+0x3e>
	}

  for(uint8_t i = 0 ; i < PROTOCOL_CMD_MAX_NUM; i++)
 800175c:	2300      	movs	r3, #0
 800175e:	75bb      	strb	r3, [r7, #22]
 8001760:	e01b      	b.n	800179a <protocol_local_init+0xa2>
	{
    // PROBLEM: Triggers HardFault_interupt
    // FIXED: i = 0
	  /* initalization cmd is 0xFF */
	   memset(&protocol_local_info.send_cmd_info[i].cmd, 0xFFFF, sizeof(uint16_t));
 8001762:	7dbb      	ldrb	r3, [r7, #22]
 8001764:	011b      	lsls	r3, r3, #4
 8001766:	f503 7326 	add.w	r3, r3, #664	; 0x298
 800176a:	4a1a      	ldr	r2, [pc, #104]	; (80017d4 <protocol_local_init+0xdc>)
 800176c:	4413      	add	r3, r2
 800176e:	3302      	adds	r3, #2
 8001770:	2202      	movs	r2, #2
 8001772:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001776:	4618      	mov	r0, r3
 8001778:	f012 fb89 	bl	8013e8e <memset>
	   memset(&protocol_local_info.rcv_cmd_info[i].cmd, 0xFFFF, sizeof(uint16_t));
 800177c:	7dbb      	ldrb	r3, [r7, #22]
 800177e:	3321      	adds	r3, #33	; 0x21
 8001780:	00db      	lsls	r3, r3, #3
 8001782:	4a14      	ldr	r2, [pc, #80]	; (80017d4 <protocol_local_init+0xdc>)
 8001784:	4413      	add	r3, r2
 8001786:	3302      	adds	r3, #2
 8001788:	2202      	movs	r2, #2
 800178a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800178e:	4618      	mov	r0, r3
 8001790:	f012 fb7d 	bl	8013e8e <memset>
  for(uint8_t i = 0 ; i < PROTOCOL_CMD_MAX_NUM; i++)
 8001794:	7dbb      	ldrb	r3, [r7, #22]
 8001796:	3301      	adds	r3, #1
 8001798:	75bb      	strb	r3, [r7, #22]
 800179a:	7dbb      	ldrb	r3, [r7, #22]
 800179c:	2b31      	cmp	r3, #49	; 0x31
 800179e:	d9e0      	bls.n	8001762 <protocol_local_init+0x6a>
	}

  protocol_local_info.address = address;
 80017a0:	4a0c      	ldr	r2, [pc, #48]	; (80017d4 <protocol_local_init+0xdc>)
 80017a2:	79fb      	ldrb	r3, [r7, #7]
 80017a4:	7013      	strb	r3, [r2, #0]
  protocol_local_info.rcv_nor_callBack = protocol_rcv_pack_handle;
 80017a6:	4b0b      	ldr	r3, [pc, #44]	; (80017d4 <protocol_local_init+0xdc>)
 80017a8:	4a0b      	ldr	r2, [pc, #44]	; (80017d8 <protocol_local_init+0xe0>)
 80017aa:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

  MUTEX_INIT(boardcast_object.mutex_lock);
  INIT_LIST_HEAD(&boardcast_object.send_list_header);
 80017ae:	480b      	ldr	r0, [pc, #44]	; (80017dc <protocol_local_init+0xe4>)
 80017b0:	f7ff fec4 	bl	800153c <INIT_LIST_HEAD>
  boardcast_object.is_valid = 1;
 80017b4:	4b09      	ldr	r3, [pc, #36]	; (80017dc <protocol_local_init+0xe4>)
 80017b6:	2201      	movs	r2, #1
 80017b8:	725a      	strb	r2, [r3, #9]
  protocol_local_info.is_valid = 1; // Set the protocol to be valid after initialization
 80017ba:	4b06      	ldr	r3, [pc, #24]	; (80017d4 <protocol_local_init+0xdc>)
 80017bc:	2201      	movs	r2, #1
 80017be:	f883 289c 	strb.w	r2, [r3, #2204]	; 0x89c
  PROTOCOL_OTHER_INFO_PRINTF("Local info has been initialized.");

  return status;
 80017c2:	693b      	ldr	r3, [r7, #16]
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	3718      	adds	r7, #24
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	08015250 	.word	0x08015250
 80017d0:	200009b5 	.word	0x200009b5
 80017d4:	200009b4 	.word	0x200009b4
 80017d8:	080015c1 	.word	0x080015c1
 80017dc:	200009a4 	.word	0x200009a4

080017e0 <protocol_send>:
    * @param  p_data Pointer to the data to be sent
    * @param  data_len Length of the data to be sent
    * @retval Protocol return status
  */
uint32_t protocol_send(uint8_t reciver, uint16_t cmd, void *p_data, uint32_t data_len)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b08c      	sub	sp, #48	; 0x30
 80017e4:	af04      	add	r7, sp, #16
 80017e6:	60ba      	str	r2, [r7, #8]
 80017e8:	607b      	str	r3, [r7, #4]
 80017ea:	4603      	mov	r3, r0
 80017ec:	73fb      	strb	r3, [r7, #15]
 80017ee:	460b      	mov	r3, r1
 80017f0:	81bb      	strh	r3, [r7, #12]
  uint32_t status;
  uint8_t session = 0;
 80017f2:	2300      	movs	r3, #0
 80017f4:	76fb      	strb	r3, [r7, #27]
  uint8_t ack = 0;
 80017f6:	2300      	movs	r3, #0
 80017f8:	76bb      	strb	r3, [r7, #26]

  struct send_cmd_info *cmd_info;
  cmd_info = protocol_get_send_cmd_info(cmd);
 80017fa:	89bb      	ldrh	r3, [r7, #12]
 80017fc:	4618      	mov	r0, r3
 80017fe:	f7ff fead 	bl	800155c <protocol_get_send_cmd_info>
 8001802:	6178      	str	r0, [r7, #20]
  
  struct perph_interface *int_obj;
  int_obj = protocol_s_get_route(reciver);
 8001804:	7bfb      	ldrb	r3, [r7, #15]
 8001806:	4618      	mov	r0, r3
 8001808:	f001 f80c 	bl	8002824 <protocol_s_get_route>
 800180c:	6138      	str	r0, [r7, #16]
  
  if (cmd_info != NULL)
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d002      	beq.n	800181a <protocol_send+0x3a>
  {
    ack = cmd_info->ack_enable;
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	791b      	ldrb	r3, [r3, #4]
 8001818:	76bb      	strb	r3, [r7, #26]
  }

  if (reciver == PROTOCOL_BROADCAST_ADDR)
 800181a:	7bfb      	ldrb	r3, [r7, #15]
 800181c:	2bff      	cmp	r3, #255	; 0xff
 800181e:	d107      	bne.n	8001830 <protocol_send+0x50>
  {
    status = protocol_s_broadcast_add_node(p_data, data_len, cmd);
 8001820:	89bb      	ldrh	r3, [r7, #12]
 8001822:	461a      	mov	r2, r3
 8001824:	6879      	ldr	r1, [r7, #4]
 8001826:	68b8      	ldr	r0, [r7, #8]
 8001828:	f000 fd20 	bl	800226c <protocol_s_broadcast_add_node>
 800182c:	61f8      	str	r0, [r7, #28]
 800182e:	e014      	b.n	800185a <protocol_send+0x7a>
  }
  else
  {
    if (ack == 1)
 8001830:	7ebb      	ldrb	r3, [r7, #26]
 8001832:	2b01      	cmp	r3, #1
 8001834:	d104      	bne.n	8001840 <protocol_send+0x60>
    {
      session = protocol_get_session(int_obj);
 8001836:	6938      	ldr	r0, [r7, #16]
 8001838:	f000 fb81 	bl	8001f3e <protocol_get_session>
 800183c:	4603      	mov	r3, r0
 800183e:	76fb      	strb	r3, [r7, #27]
    }
    status = protocol_s_add_sendnode(reciver, session, PROTOCOL_PACK_NOR, p_data,
 8001840:	7ef9      	ldrb	r1, [r7, #27]
 8001842:	7bf8      	ldrb	r0, [r7, #15]
 8001844:	2300      	movs	r3, #0
 8001846:	9302      	str	r3, [sp, #8]
 8001848:	89bb      	ldrh	r3, [r7, #12]
 800184a:	9301      	str	r3, [sp, #4]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	9300      	str	r3, [sp, #0]
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	2200      	movs	r2, #0
 8001854:	f000 fbb6 	bl	8001fc4 <protocol_s_add_sendnode>
 8001858:	61f8      	str	r0, [r7, #28]
                                     data_len, cmd, 0);
  }
  if (status == PROTOCOL_SUCCESS)
 800185a:	69fb      	ldr	r3, [r7, #28]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d109      	bne.n	8001874 <protocol_send+0x94>
  {
    if (protocol_local_info.send_list_add_callBack != NULL)
 8001860:	4b0b      	ldr	r3, [pc, #44]	; (8001890 <protocol_send+0xb0>)
 8001862:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8001866:	2b00      	cmp	r3, #0
 8001868:	d00c      	beq.n	8001884 <protocol_send+0xa4>
    {
      protocol_local_info.send_list_add_callBack();
 800186a:	4b09      	ldr	r3, [pc, #36]	; (8001890 <protocol_send+0xb0>)
 800186c:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8001870:	4798      	blx	r3
 8001872:	e007      	b.n	8001884 <protocol_send+0xa4>
    }
  }
  else
  {
    if (ack == 1)
 8001874:	7ebb      	ldrb	r3, [r7, #26]
 8001876:	2b01      	cmp	r3, #1
 8001878:	d104      	bne.n	8001884 <protocol_send+0xa4>
    {
      protocol_release_session(int_obj, session);
 800187a:	7efb      	ldrb	r3, [r7, #27]
 800187c:	4619      	mov	r1, r3
 800187e:	6938      	ldr	r0, [r7, #16]
 8001880:	f000 fb83 	bl	8001f8a <protocol_release_session>
    }
  }
  return status;
 8001884:	69fb      	ldr	r3, [r7, #28]
}
 8001886:	4618      	mov	r0, r3
 8001888:	3720      	adds	r7, #32
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	200009b4 	.word	0x200009b4

08001894 <protocol_ack>:
    * @param  data_len Length of the data to be sent
    * @param  ack_seq Sequence number of the Ack packet to be sent
    * @retval Protocol return status
  */
uint32_t protocol_ack(uint8_t reciver, uint8_t session, void *p_data, uint32_t data_len, uint16_t ack_seq)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b08a      	sub	sp, #40	; 0x28
 8001898:	af04      	add	r7, sp, #16
 800189a:	60ba      	str	r2, [r7, #8]
 800189c:	607b      	str	r3, [r7, #4]
 800189e:	4603      	mov	r3, r0
 80018a0:	73fb      	strb	r3, [r7, #15]
 80018a2:	460b      	mov	r3, r1
 80018a4:	73bb      	strb	r3, [r7, #14]
  uint32_t status;
  status = protocol_s_add_sendnode(reciver, session, PROTOCOL_PACK_ACK, p_data,
 80018a6:	7bb9      	ldrb	r1, [r7, #14]
 80018a8:	7bf8      	ldrb	r0, [r7, #15]
 80018aa:	8c3b      	ldrh	r3, [r7, #32]
 80018ac:	9302      	str	r3, [sp, #8]
 80018ae:	2300      	movs	r3, #0
 80018b0:	9301      	str	r3, [sp, #4]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	9300      	str	r3, [sp, #0]
 80018b6:	68bb      	ldr	r3, [r7, #8]
 80018b8:	2201      	movs	r2, #1
 80018ba:	f000 fb83 	bl	8001fc4 <protocol_s_add_sendnode>
 80018be:	6178      	str	r0, [r7, #20]
                                   data_len, 0, ack_seq);
  if (status == PROTOCOL_SUCCESS)
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d108      	bne.n	80018d8 <protocol_ack+0x44>
  {
    if (protocol_local_info.send_list_add_callBack != NULL)
 80018c6:	4b07      	ldr	r3, [pc, #28]	; (80018e4 <protocol_ack+0x50>)
 80018c8:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d003      	beq.n	80018d8 <protocol_ack+0x44>
    {
      protocol_local_info.send_list_add_callBack();
 80018d0:	4b04      	ldr	r3, [pc, #16]	; (80018e4 <protocol_ack+0x50>)
 80018d2:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 80018d6:	4798      	blx	r3
    }
  }
  return status;
 80018d8:	697b      	ldr	r3, [r7, #20]
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3718      	adds	r7, #24
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	200009b4 	.word	0x200009b4

080018e8 <protocol_send_flush>:
  * @brief Flushes the send list, calling this function will send the data in the send list. Call after calling protocol_send or protocol_ack, or call periodically.
  * @param void
  * @retval Protocol return status
  */
uint32_t protocol_send_flush(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
  for (uint8_t i = 0; i < PROTOCOL_INTERFACE_MAX; i++)
 80018ee:	2300      	movs	r3, #0
 80018f0:	71fb      	strb	r3, [r7, #7]
 80018f2:	e035      	b.n	8001960 <protocol_send_flush+0x78>
  {
    if (protocol_local_info.interface[i].is_valid)
 80018f4:	79fb      	ldrb	r3, [r7, #7]
 80018f6:	4a23      	ldr	r2, [pc, #140]	; (8001984 <protocol_send_flush+0x9c>)
 80018f8:	2194      	movs	r1, #148	; 0x94
 80018fa:	fb01 f303 	mul.w	r3, r1, r3
 80018fe:	4413      	add	r3, r2
 8001900:	f203 6319 	addw	r3, r3, #1561	; 0x619
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d027      	beq.n	800195a <protocol_send_flush+0x72>
    {
      if (protocol_local_info.interface[i].send.normal_node_num > 0)
 800190a:	79fb      	ldrb	r3, [r7, #7]
 800190c:	4a1d      	ldr	r2, [pc, #116]	; (8001984 <protocol_send_flush+0x9c>)
 800190e:	2194      	movs	r1, #148	; 0x94
 8001910:	fb01 f303 	mul.w	r3, r1, r3
 8001914:	4413      	add	r3, r2
 8001916:	f203 6312 	addw	r3, r3, #1554	; 0x612
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d008      	beq.n	8001932 <protocol_send_flush+0x4a>
      {
        protocol_s_interface_normal_send_flush(protocol_local_info.interface + i);
 8001920:	79fb      	ldrb	r3, [r7, #7]
 8001922:	2294      	movs	r2, #148	; 0x94
 8001924:	fb02 f303 	mul.w	r3, r2, r3
 8001928:	4a17      	ldr	r2, [pc, #92]	; (8001988 <protocol_send_flush+0xa0>)
 800192a:	4413      	add	r3, r2
 800192c:	4618      	mov	r0, r3
 800192e:	f000 fdfd 	bl	800252c <protocol_s_interface_normal_send_flush>
      }
      if (protocol_local_info.interface[i].send.ack_node_num > 0)
 8001932:	79fb      	ldrb	r3, [r7, #7]
 8001934:	4a13      	ldr	r2, [pc, #76]	; (8001984 <protocol_send_flush+0x9c>)
 8001936:	2194      	movs	r1, #148	; 0x94
 8001938:	fb01 f303 	mul.w	r3, r1, r3
 800193c:	4413      	add	r3, r2
 800193e:	f203 6313 	addw	r3, r3, #1555	; 0x613
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d008      	beq.n	800195a <protocol_send_flush+0x72>
      {
        protocol_s_interface_ack_send_flush(protocol_local_info.interface + i);
 8001948:	79fb      	ldrb	r3, [r7, #7]
 800194a:	2294      	movs	r2, #148	; 0x94
 800194c:	fb02 f303 	mul.w	r3, r2, r3
 8001950:	4a0d      	ldr	r2, [pc, #52]	; (8001988 <protocol_send_flush+0xa0>)
 8001952:	4413      	add	r3, r2
 8001954:	4618      	mov	r0, r3
 8001956:	f000 feb4 	bl	80026c2 <protocol_s_interface_ack_send_flush>
  for (uint8_t i = 0; i < PROTOCOL_INTERFACE_MAX; i++)
 800195a:	79fb      	ldrb	r3, [r7, #7]
 800195c:	3301      	adds	r3, #1
 800195e:	71fb      	strb	r3, [r7, #7]
 8001960:	79fb      	ldrb	r3, [r7, #7]
 8001962:	2b04      	cmp	r3, #4
 8001964:	d9c6      	bls.n	80018f4 <protocol_send_flush+0xc>
      }
    }
  }

  if (boardcast_object.is_valid)
 8001966:	4b09      	ldr	r3, [pc, #36]	; (800198c <protocol_send_flush+0xa4>)
 8001968:	7a5b      	ldrb	r3, [r3, #9]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d005      	beq.n	800197a <protocol_send_flush+0x92>
  {
    if (boardcast_object.send_node_num > 0)
 800196e:	4b07      	ldr	r3, [pc, #28]	; (800198c <protocol_send_flush+0xa4>)
 8001970:	7a1b      	ldrb	r3, [r3, #8]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d001      	beq.n	800197a <protocol_send_flush+0x92>
    {
      protocol_s_broadcast_send_flush();
 8001976:	f000 fee3 	bl	8002740 <protocol_s_broadcast_send_flush>
    }
  }
  return 0;
 800197a:	2300      	movs	r3, #0
}
 800197c:	4618      	mov	r0, r3
 800197e:	3708      	adds	r7, #8
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	200009b4 	.word	0x200009b4
 8001988:	20000f6c 	.word	0x20000f6c
 800198c:	200009a4 	.word	0x200009a4

08001990 <protocol_unpack_flush>:
    * @brief  Protocol flushes the receive buffer, calling this function will unpack the data in the receive buffer. Call after receiving data or periodically.
    * @param  void
    * @retval Protocol return status
  */
uint32_t protocol_unpack_flush(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
  for (uint8_t i = 0; i < PROTOCOL_INTERFACE_MAX; i++)
 8001996:	2300      	movs	r3, #0
 8001998:	71fb      	strb	r3, [r7, #7]
 800199a:	e018      	b.n	80019ce <protocol_unpack_flush+0x3e>
  {
    if (protocol_local_info.interface[i].is_valid)
 800199c:	79fb      	ldrb	r3, [r7, #7]
 800199e:	4a10      	ldr	r2, [pc, #64]	; (80019e0 <protocol_unpack_flush+0x50>)
 80019a0:	2194      	movs	r1, #148	; 0x94
 80019a2:	fb01 f303 	mul.w	r3, r1, r3
 80019a6:	4413      	add	r3, r2
 80019a8:	f203 6319 	addw	r3, r3, #1561	; 0x619
 80019ac:	781b      	ldrb	r3, [r3, #0]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d00a      	beq.n	80019c8 <protocol_unpack_flush+0x38>
    {
      protocol_s_extract(&(protocol_local_info.interface[i]));
 80019b2:	79fb      	ldrb	r3, [r7, #7]
 80019b4:	2294      	movs	r2, #148	; 0x94
 80019b6:	fb02 f303 	mul.w	r3, r2, r3
 80019ba:	f503 63b7 	add.w	r3, r3, #1464	; 0x5b8
 80019be:	4a08      	ldr	r2, [pc, #32]	; (80019e0 <protocol_unpack_flush+0x50>)
 80019c0:	4413      	add	r3, r2
 80019c2:	4618      	mov	r0, r3
 80019c4:	f001 f8cc 	bl	8002b60 <protocol_s_extract>
  for (uint8_t i = 0; i < PROTOCOL_INTERFACE_MAX; i++)
 80019c8:	79fb      	ldrb	r3, [r7, #7]
 80019ca:	3301      	adds	r3, #1
 80019cc:	71fb      	strb	r3, [r7, #7]
 80019ce:	79fb      	ldrb	r3, [r7, #7]
 80019d0:	2b04      	cmp	r3, #4
 80019d2:	d9e3      	bls.n	800199c <protocol_unpack_flush+0xc>
    }
  }
  return 0;
 80019d4:	2300      	movs	r3, #0
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	3708      	adds	r7, #8
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	200009b4 	.word	0x200009b4

080019e4 <protocol_rcv_data>:
    * @param  data_len Length of the data
    * @param  perph Interface index, specify the index of the interface where the data is received
    * @retval Protocol return status
  */
uint32_t protocol_rcv_data(void *p_data, uint32_t data_len, struct perph_interface *perph)
{
 80019e4:	b590      	push	{r4, r7, lr}
 80019e6:	b08b      	sub	sp, #44	; 0x2c
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	60f8      	str	r0, [r7, #12]
 80019ec:	60b9      	str	r1, [r7, #8]
 80019ee:	607a      	str	r2, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80019f0:	f3ef 8310 	mrs	r3, PRIMASK
 80019f4:	61bb      	str	r3, [r7, #24]
  return(result);
 80019f6:	69bb      	ldr	r3, [r7, #24]
  struct perph_interface *obj;
  uint32_t rcv_length;
  uint32_t status;

  //Interrupt Off;
  cpu_sr = FIFO_GET_CPU_SR();
 80019f8:	461c      	mov	r4, r3
  __ASM volatile ("cpsid i" : : : "memory");
 80019fa:	b672      	cpsid	i
}
 80019fc:	bf00      	nop
  FIFO_ENTER_CRITICAL();
  
  status = PROTOCOL_SUCCESS;
 80019fe:	2300      	movs	r3, #0
 8001a00:	627b      	str	r3, [r7, #36]	; 0x24

  if (protocol_local_info.is_valid == 0)
 8001a02:	4b1c      	ldr	r3, [pc, #112]	; (8001a74 <protocol_rcv_data+0x90>)
 8001a04:	f893 389c 	ldrb.w	r3, [r3, #2204]	; 0x89c
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d108      	bne.n	8001a1e <protocol_rcv_data+0x3a>
  {
    status = PROTOCOL_ERR_PROTOCOL_NOT_INIT;
 8001a0c:	2310      	movs	r3, #16
 8001a0e:	627b      	str	r3, [r7, #36]	; 0x24
 8001a10:	617c      	str	r4, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	f383 8810 	msr	PRIMASK, r3
}
 8001a18:	bf00      	nop
    //Interrupt On
    FIFO_RESTORE_CPU_SR(cpu_sr);
    return status;
 8001a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a1c:	e026      	b.n	8001a6c <protocol_rcv_data+0x88>
  }

  obj = &(protocol_local_info.interface[perph->idx]);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8001a24:	461a      	mov	r2, r3
 8001a26:	2394      	movs	r3, #148	; 0x94
 8001a28:	fb02 f303 	mul.w	r3, r2, r3
 8001a2c:	f503 63b7 	add.w	r3, r3, #1464	; 0x5b8
 8001a30:	4a10      	ldr	r2, [pc, #64]	; (8001a74 <protocol_rcv_data+0x90>)
 8001a32:	4413      	add	r3, r2
 8001a34:	623b      	str	r3, [r7, #32]

  //TODO: Removed the protection here because considering that this function is not reentrant for the same protocol interface, careful consideration is needed.
  //Adding protection, high-speed transmission may still have nested reentry.
  rcv_length = fifo_s_puts_noprotect(&(obj->rcvd.fifo), p_data, data_len);
 8001a36:	6a3b      	ldr	r3, [r7, #32]
 8001a38:	3320      	adds	r3, #32
 8001a3a:	68ba      	ldr	r2, [r7, #8]
 8001a3c:	68f9      	ldr	r1, [r7, #12]
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f011 fa10 	bl	8012e64 <fifo_s_puts_noprotect>
 8001a44:	4603      	mov	r3, r0
 8001a46:	61fb      	str	r3, [r7, #28]

  if (rcv_length < data_len)
 8001a48:	69fa      	ldr	r2, [r7, #28]
 8001a4a:	68bb      	ldr	r3, [r7, #8]
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d207      	bcs.n	8001a60 <protocol_rcv_data+0x7c>
  {
    status = PROTOCOL_ERR_FIFO_FULL;
 8001a50:	230b      	movs	r3, #11
 8001a52:	627b      	str	r3, [r7, #36]	; 0x24
    PROTOCOL_ERR_INFO_PRINTF(status, __FILE__, __LINE__);
 8001a54:	f240 126d 	movw	r2, #365	; 0x16d
 8001a58:	4907      	ldr	r1, [pc, #28]	; (8001a78 <protocol_rcv_data+0x94>)
 8001a5a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001a5c:	f001 fa08 	bl	8002e70 <protocol_s_error_info_printf>
 8001a60:	613c      	str	r4, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	f383 8810 	msr	PRIMASK, r3
}
 8001a68:	bf00      	nop
  }
  //Interrupt On
  FIFO_RESTORE_CPU_SR(cpu_sr);
  return status;
 8001a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	372c      	adds	r7, #44	; 0x2c
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd90      	pop	{r4, r7, pc}
 8001a74:	200009b4 	.word	0x200009b4
 8001a78:	08015250 	.word	0x08015250

08001a7c <protocol_send_list_add_callback_reg>:
    * @brief  Protocol registers the callback function for adding the send packet to the send list. This function is called after the protocol data packet is packed and added to the send list.
    * @param  fn Callback function pointer, format refers to pack_handle_fn_t
    * @retval 0
  */
  uint32_t protocol_send_list_add_callback_reg(void_fn_t fn)
  {
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
    protocol_local_info.send_list_add_callBack = fn;
 8001a84:	4a05      	ldr	r2, [pc, #20]	; (8001a9c <protocol_send_list_add_callback_reg+0x20>)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
    return 0;
 8001a8c:	2300      	movs	r3, #0
  }
 8001a8e:	4618      	mov	r0, r3
 8001a90:	370c      	adds	r7, #12
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop
 8001a9c:	200009b4 	.word	0x200009b4

08001aa0 <protocol_p_malloc>:
    * @brief  Protocol memory allocation interface function, users can modify this function according to actual needs
    * @param  size Size of memory to allocate in bytes
    * @retval If allocation is successful, returns the pointer to the allocated memory, otherwise returns NULL
    */
void *protocol_p_malloc(uint32_t size)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  return heap_malloc(size);
 8001aa8:	6878      	ldr	r0, [r7, #4]
 8001aaa:	f011 fd1d 	bl	80134e8 <heap_malloc>
 8001aae:	4603      	mov	r3, r0
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	3708      	adds	r7, #8
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}

08001ab8 <protocol_p_free>:
    * @brief  Protocol memory deallocation interface function, users can modify this function according to actual needs
    * @param  ptr Pointer to the starting address of the memory to be freed
    * @retval void
    */
  void protocol_p_free(void *ptr)
  {
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
    heap_free(ptr);
 8001ac0:	6878      	ldr	r0, [r7, #4]
 8001ac2:	f011 fdbb 	bl	801363c <heap_free>
  }
 8001ac6:	bf00      	nop
 8001ac8:	3708      	adds	r7, #8
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}

08001ace <protocol_p_get_time>:
    * @brief  Protocol function to get system time in milliseconds, users can modify this function according to actual needs
    * @param  void
    * @retval Current system time in milliseconds
  */
uint32_t protocol_p_get_time(void)
{
 8001ace:	b580      	push	{r7, lr}
 8001ad0:	af00      	add	r7, sp, #0
  return osKernelSysTick() / portTICK_PERIOD_MS;
 8001ad2:	f00d f8f4 	bl	800ecbe <osKernelSysTick>
 8001ad6:	4603      	mov	r3, r0
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	bd80      	pop	{r7, pc}

08001adc <INIT_LIST_HEAD>:
{
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  list->next = list;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	687a      	ldr	r2, [r7, #4]
 8001ae8:	601a      	str	r2, [r3, #0]
  list->prev = list;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	687a      	ldr	r2, [r7, #4]
 8001aee:	605a      	str	r2, [r3, #4]
}
 8001af0:	bf00      	nop
 8001af2:	370c      	adds	r7, #12
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr

08001afc <protocol_interface_init>:
  */
int32_t protocol_interface_init(struct perph_interface *perph,
                                char *interface_name,
                                uint8_t boardcast_output_enable,
                                uint16_t rcv_buf_size)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b08a      	sub	sp, #40	; 0x28
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	60f8      	str	r0, [r7, #12]
 8001b04:	60b9      	str	r1, [r7, #8]
 8001b06:	4611      	mov	r1, r2
 8001b08:	461a      	mov	r2, r3
 8001b0a:	460b      	mov	r3, r1
 8001b0c:	71fb      	strb	r3, [r7, #7]
 8001b0e:	4613      	mov	r3, r2
 8001b10:	80bb      	strh	r3, [r7, #4]
  struct perph_interface *interface;

  uint32_t status;
  int32_t idx = PROTOCOL_INTERFACE_MAX;
 8001b12:	2305      	movs	r3, #5
 8001b14:	627b      	str	r3, [r7, #36]	; 0x24

  status = PROTOCOL_SUCCESS;
 8001b16:	2300      	movs	r3, #0
 8001b18:	61fb      	str	r3, [r7, #28]

  for (int i = 0; i < PROTOCOL_INTERFACE_MAX; i++)
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	623b      	str	r3, [r7, #32]
 8001b1e:	e010      	b.n	8001b42 <protocol_interface_init+0x46>
  {
    if (protocol_local_info.interface[i].is_valid == 0)
 8001b20:	4a3d      	ldr	r2, [pc, #244]	; (8001c18 <protocol_interface_init+0x11c>)
 8001b22:	6a3b      	ldr	r3, [r7, #32]
 8001b24:	2194      	movs	r1, #148	; 0x94
 8001b26:	fb01 f303 	mul.w	r3, r1, r3
 8001b2a:	4413      	add	r3, r2
 8001b2c:	f203 6319 	addw	r3, r3, #1561	; 0x619
 8001b30:	781b      	ldrb	r3, [r3, #0]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d102      	bne.n	8001b3c <protocol_interface_init+0x40>
    {
      idx = i;
 8001b36:	6a3b      	ldr	r3, [r7, #32]
 8001b38:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8001b3a:	e005      	b.n	8001b48 <protocol_interface_init+0x4c>
  for (int i = 0; i < PROTOCOL_INTERFACE_MAX; i++)
 8001b3c:	6a3b      	ldr	r3, [r7, #32]
 8001b3e:	3301      	adds	r3, #1
 8001b40:	623b      	str	r3, [r7, #32]
 8001b42:	6a3b      	ldr	r3, [r7, #32]
 8001b44:	2b04      	cmp	r3, #4
 8001b46:	ddeb      	ble.n	8001b20 <protocol_interface_init+0x24>
    }
  }

  if (idx == PROTOCOL_INTERFACE_MAX)
 8001b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b4a:	2b05      	cmp	r3, #5
 8001b4c:	d108      	bne.n	8001b60 <protocol_interface_init+0x64>
  {
    //TODO: Index length exceeded
    status = PROTOCOL_ERR_OBJECT_NOT_FOUND;
 8001b4e:	230c      	movs	r3, #12
 8001b50:	61fb      	str	r3, [r7, #28]
    PROTOCOL_ERR_INFO_PRINTF(status, __FILE__, __LINE__);
 8001b52:	223d      	movs	r2, #61	; 0x3d
 8001b54:	4931      	ldr	r1, [pc, #196]	; (8001c1c <protocol_interface_init+0x120>)
 8001b56:	69f8      	ldr	r0, [r7, #28]
 8001b58:	f001 f98a 	bl	8002e70 <protocol_s_error_info_printf>
    return status;
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	e056      	b.n	8001c0e <protocol_interface_init+0x112>
  }

  interface = &protocol_local_info.interface[idx];
 8001b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b62:	2294      	movs	r2, #148	; 0x94
 8001b64:	fb02 f303 	mul.w	r3, r2, r3
 8001b68:	f503 63b7 	add.w	r3, r3, #1464	; 0x5b8
 8001b6c:	4a2a      	ldr	r2, [pc, #168]	; (8001c18 <protocol_interface_init+0x11c>)
 8001b6e:	4413      	add	r3, r2
 8001b70:	61bb      	str	r3, [r7, #24]
  
  memcpy(interface, perph, sizeof(struct perph_interface));
 8001b72:	2294      	movs	r2, #148	; 0x94
 8001b74:	68f9      	ldr	r1, [r7, #12]
 8001b76:	69b8      	ldr	r0, [r7, #24]
 8001b78:	f012 fa0e 	bl	8013f98 <memcpy>

  // initialization name
  if ((interface_name != NULL) && (strlen(interface_name) < PROTOCOL_OBJ_NAME_MAX_LEN))
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d00f      	beq.n	8001ba2 <protocol_interface_init+0xa6>
 8001b82:	68b8      	ldr	r0, [r7, #8]
 8001b84:	f7fe fb34 	bl	80001f0 <strlen>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b1f      	cmp	r3, #31
 8001b8c:	d809      	bhi.n	8001ba2 <protocol_interface_init+0xa6>
  {
    strncpy(interface->object_name, (const char *)interface_name, sizeof(interface->object_name));
 8001b8e:	69bb      	ldr	r3, [r7, #24]
 8001b90:	2220      	movs	r2, #32
 8001b92:	68b9      	ldr	r1, [r7, #8]
 8001b94:	4618      	mov	r0, r3
 8001b96:	f012 f967 	bl	8013e68 <strncpy>
    interface->object_name[PROTOCOL_OBJ_NAME_MAX_LEN - 1] = '\0';
 8001b9a:	69bb      	ldr	r3, [r7, #24]
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	77da      	strb	r2, [r3, #31]
 8001ba0:	e005      	b.n	8001bae <protocol_interface_init+0xb2>
  }
  else
  {
    strcpy(interface->object_name, "NULL");
 8001ba2:	69bb      	ldr	r3, [r7, #24]
 8001ba4:	4a1e      	ldr	r2, [pc, #120]	; (8001c20 <protocol_interface_init+0x124>)
 8001ba6:	6810      	ldr	r0, [r2, #0]
 8001ba8:	6018      	str	r0, [r3, #0]
 8001baa:	7912      	ldrb	r2, [r2, #4]
 8001bac:	711a      	strb	r2, [r3, #4]
  }

  // Initialize the receive buffer area
  uint8_t *rcv_buf = protocol_p_malloc(rcv_buf_size);
 8001bae:	88bb      	ldrh	r3, [r7, #4]
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f7ff ff75 	bl	8001aa0 <protocol_p_malloc>
 8001bb6:	6178      	str	r0, [r7, #20]
  if (rcv_buf == NULL)
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d108      	bne.n	8001bd0 <protocol_interface_init+0xd4>
  {
    status = PROTOCOL_ERR_NOT_ENOUGH_MEM;
 8001bbe:	2302      	movs	r3, #2
 8001bc0:	61fb      	str	r3, [r7, #28]
    PROTOCOL_ERR_INFO_PRINTF(status, __FILE__, __LINE__);
 8001bc2:	2255      	movs	r2, #85	; 0x55
 8001bc4:	4915      	ldr	r1, [pc, #84]	; (8001c1c <protocol_interface_init+0x120>)
 8001bc6:	69f8      	ldr	r0, [r7, #28]
 8001bc8:	f001 f952 	bl	8002e70 <protocol_s_error_info_printf>
    return status;
 8001bcc:	69fb      	ldr	r3, [r7, #28]
 8001bce:	e01e      	b.n	8001c0e <protocol_interface_init+0x112>
  }
  fifo_s_init(&interface->rcvd.fifo, rcv_buf, rcv_buf_size);
 8001bd0:	69bb      	ldr	r3, [r7, #24]
 8001bd2:	3320      	adds	r3, #32
 8001bd4:	88ba      	ldrh	r2, [r7, #4]
 8001bd6:	6979      	ldr	r1, [r7, #20]
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f011 f8a4 	bl	8012d26 <fifo_s_init>

  // Initialize the sending structure
  INIT_LIST_HEAD(&interface->send.normal_list_header);
 8001bde:	69bb      	ldr	r3, [r7, #24]
 8001be0:	3348      	adds	r3, #72	; 0x48
 8001be2:	4618      	mov	r0, r3
 8001be4:	f7ff ff7a 	bl	8001adc <INIT_LIST_HEAD>
  INIT_LIST_HEAD(&interface->send.ack_list_header);
 8001be8:	69bb      	ldr	r3, [r7, #24]
 8001bea:	3350      	adds	r3, #80	; 0x50
 8001bec:	4618      	mov	r0, r3
 8001bee:	f7ff ff75 	bl	8001adc <INIT_LIST_HEAD>
  MUTEX_INIT(interface->send.mutex_lock);

  interface->broadcast_output_enable = boardcast_output_enable;
 8001bf2:	69bb      	ldr	r3, [r7, #24]
 8001bf4:	79fa      	ldrb	r2, [r7, #7]
 8001bf6:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  interface->idx = idx;
 8001bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bfc:	b2da      	uxtb	r2, r3
 8001bfe:	69bb      	ldr	r3, [r7, #24]
 8001c00:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
  interface->is_valid = 1;
 8001c04:	69bb      	ldr	r3, [r7, #24]
 8001c06:	2201      	movs	r2, #1
 8001c08:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  PROTOCOL_OTHER_INFO_PRINTF("Interface %s[%d] has been initialized.",
                             interface->object_name, interface->idx);

  return status;
 8001c0c:	69fb      	ldr	r3, [r7, #28]
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3728      	adds	r7, #40	; 0x28
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	200009b4 	.word	0x200009b4
 8001c1c:	08015274 	.word	0x08015274
 8001c20:	080152a4 	.word	0x080152a4

08001c24 <protocol_uart_interface_register>:
int32_t protocol_uart_interface_register(char *interface_name,
                                        uint16_t rcv_buf_size,
                                        uint8_t boardcast_output_enable,
                                        uint8_t com_port,
                                        int (*com_send_fn)(uint8_t *p_data, uint32_t len))
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b0a8      	sub	sp, #160	; 0xa0
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	4608      	mov	r0, r1
 8001c2e:	4611      	mov	r1, r2
 8001c30:	461a      	mov	r2, r3
 8001c32:	4603      	mov	r3, r0
 8001c34:	807b      	strh	r3, [r7, #2]
 8001c36:	460b      	mov	r3, r1
 8001c38:	707b      	strb	r3, [r7, #1]
 8001c3a:	4613      	mov	r3, r2
 8001c3c:	703b      	strb	r3, [r7, #0]
  struct perph_interface interface = {0};
 8001c3e:	f107 0308 	add.w	r3, r7, #8
 8001c42:	2294      	movs	r2, #148	; 0x94
 8001c44:	2100      	movs	r1, #0
 8001c46:	4618      	mov	r0, r3
 8001c48:	f012 f921 	bl	8013e8e <memset>
  uint32_t status;
  status = PROTOCOL_SUCCESS;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  interface.type = COM_PORT;
 8001c52:	2300      	movs	r3, #0
 8001c54:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  interface.send_callback.com_send_fn = com_send_fn;
 8001c58:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001c5c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  interface.user_data.com.port = com_port;
 8001c60:	783b      	ldrb	r3, [r7, #0]
 8001c62:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  status = protocol_interface_init(&interface, interface_name, boardcast_output_enable, rcv_buf_size);
 8001c66:	887b      	ldrh	r3, [r7, #2]
 8001c68:	787a      	ldrb	r2, [r7, #1]
 8001c6a:	f107 0008 	add.w	r0, r7, #8
 8001c6e:	6879      	ldr	r1, [r7, #4]
 8001c70:	f7ff ff44 	bl	8001afc <protocol_interface_init>
 8001c74:	4603      	mov	r3, r0
 8001c76:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return status;
 8001c7a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	37a0      	adds	r7, #160	; 0xa0
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
	...

08001c88 <protocol_interface_send_data>:

int32_t protocol_interface_send_data(struct perph_interface *perph, uint8_t *buff, uint16_t len)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b086      	sub	sp, #24
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	60f8      	str	r0, [r7, #12]
 8001c90:	60b9      	str	r1, [r7, #8]
 8001c92:	4613      	mov	r3, r2
 8001c94:	80fb      	strh	r3, [r7, #6]
  uint32_t status;
  status = PROTOCOL_SUCCESS;
 8001c96:	2300      	movs	r3, #0
 8001c98:	617b      	str	r3, [r7, #20]

  if (perph == NULL)
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d108      	bne.n	8001cb2 <protocol_interface_send_data+0x2a>
  {
    status = PROTOCOL_ERR_INTER_NOT_FOUND;
 8001ca0:	230f      	movs	r3, #15
 8001ca2:	617b      	str	r3, [r7, #20]
    PROTOCOL_ERR_INFO_PRINTF(status, __FILE__, __LINE__);
 8001ca4:	2299      	movs	r2, #153	; 0x99
 8001ca6:	4920      	ldr	r1, [pc, #128]	; (8001d28 <protocol_interface_send_data+0xa0>)
 8001ca8:	6978      	ldr	r0, [r7, #20]
 8001caa:	f001 f8e1 	bl	8002e70 <protocol_s_error_info_printf>
    return status;
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	e035      	b.n	8001d1e <protocol_interface_send_data+0x96>
  }

  if (perph->type == CAN_PORT)
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	d116      	bne.n	8001cea <protocol_interface_send_data+0x62>
  {
    if (perph->send_callback.can_send_fn != NULL)
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d009      	beq.n	8001cda <protocol_interface_send_data+0x52>
    {
      perph->send_callback.can_send_fn(perph->user_data.can.send_id, buff, len);
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001ccc:	68fa      	ldr	r2, [r7, #12]
 8001cce:	f8d2 008c 	ldr.w	r0, [r2, #140]	; 0x8c
 8001cd2:	88fa      	ldrh	r2, [r7, #6]
 8001cd4:	68b9      	ldr	r1, [r7, #8]
 8001cd6:	4798      	blx	r3
 8001cd8:	e020      	b.n	8001d1c <protocol_interface_send_data+0x94>
    }
    else
    {
      status = PROTOCOL_ERR_INTER_NOT_FOUND;
 8001cda:	230f      	movs	r3, #15
 8001cdc:	617b      	str	r3, [r7, #20]
      PROTOCOL_ERR_INFO_PRINTF(status, __FILE__, __LINE__);
 8001cde:	22a6      	movs	r2, #166	; 0xa6
 8001ce0:	4911      	ldr	r1, [pc, #68]	; (8001d28 <protocol_interface_send_data+0xa0>)
 8001ce2:	6978      	ldr	r0, [r7, #20]
 8001ce4:	f001 f8c4 	bl	8002e70 <protocol_s_error_info_printf>
 8001ce8:	e018      	b.n	8001d1c <protocol_interface_send_data+0x94>
    }
  }
  else if (perph->type == COM_PORT)
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d113      	bne.n	8001d1c <protocol_interface_send_data+0x94>
  {
    if (perph->send_callback.com_send_fn != NULL)
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d007      	beq.n	8001d0e <protocol_interface_send_data+0x86>
    {
      perph->send_callback.com_send_fn(buff, len);
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001d04:	88fa      	ldrh	r2, [r7, #6]
 8001d06:	4611      	mov	r1, r2
 8001d08:	68b8      	ldr	r0, [r7, #8]
 8001d0a:	4798      	blx	r3
 8001d0c:	e006      	b.n	8001d1c <protocol_interface_send_data+0x94>
    }
    else
    {
      status = PROTOCOL_ERR_INTER_NOT_FOUND;
 8001d0e:	230f      	movs	r3, #15
 8001d10:	617b      	str	r3, [r7, #20]
      PROTOCOL_ERR_INFO_PRINTF(status, __FILE__, __LINE__);
 8001d12:	22b2      	movs	r2, #178	; 0xb2
 8001d14:	4904      	ldr	r1, [pc, #16]	; (8001d28 <protocol_interface_send_data+0xa0>)
 8001d16:	6978      	ldr	r0, [r7, #20]
 8001d18:	f001 f8aa 	bl	8002e70 <protocol_s_error_info_printf>
    }
  }
  return status;
 8001d1c:	697b      	ldr	r3, [r7, #20]
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3718      	adds	r7, #24
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	08015274 	.word	0x08015274

08001d2c <protocol_uart_rcv_data>:
  } 
  return status;
}

uint32_t protocol_uart_rcv_data(uint8_t com_port, void *p_data, uint32_t data_len)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b086      	sub	sp, #24
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	4603      	mov	r3, r0
 8001d34:	60b9      	str	r1, [r7, #8]
 8001d36:	607a      	str	r2, [r7, #4]
 8001d38:	73fb      	strb	r3, [r7, #15]
  uint32_t status =PROTOCOL_SUCCESS;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	613b      	str	r3, [r7, #16]

  for (int i = 0; i< PROTOCOL_INTERFACE_MAX; i++)
 8001d3e:	2300      	movs	r3, #0
 8001d40:	617b      	str	r3, [r7, #20]
 8001d42:	e026      	b.n	8001d92 <protocol_uart_rcv_data+0x66>
  {
    if((protocol_local_info.interface[i].type == COM_PORT)
 8001d44:	4a17      	ldr	r2, [pc, #92]	; (8001da4 <protocol_uart_rcv_data+0x78>)
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	2194      	movs	r1, #148	; 0x94
 8001d4a:	fb01 f303 	mul.w	r3, r1, r3
 8001d4e:	4413      	add	r3, r2
 8001d50:	f203 633a 	addw	r3, r3, #1594	; 0x63a
 8001d54:	781b      	ldrb	r3, [r3, #0]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d118      	bne.n	8001d8c <protocol_uart_rcv_data+0x60>
     &&(protocol_local_info.interface[i].user_data.com.port == com_port))
 8001d5a:	4a12      	ldr	r2, [pc, #72]	; (8001da4 <protocol_uart_rcv_data+0x78>)
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	2194      	movs	r1, #148	; 0x94
 8001d60:	fb01 f303 	mul.w	r3, r1, r3
 8001d64:	4413      	add	r3, r2
 8001d66:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	7bfb      	ldrb	r3, [r7, #15]
 8001d6e:	429a      	cmp	r2, r3
 8001d70:	d10c      	bne.n	8001d8c <protocol_uart_rcv_data+0x60>
    {
      protocol_rcv_data(p_data, data_len, &protocol_local_info.interface[i]);
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	2294      	movs	r2, #148	; 0x94
 8001d76:	fb02 f303 	mul.w	r3, r2, r3
 8001d7a:	f503 63b7 	add.w	r3, r3, #1464	; 0x5b8
 8001d7e:	4a09      	ldr	r2, [pc, #36]	; (8001da4 <protocol_uart_rcv_data+0x78>)
 8001d80:	4413      	add	r3, r2
 8001d82:	461a      	mov	r2, r3
 8001d84:	6879      	ldr	r1, [r7, #4]
 8001d86:	68b8      	ldr	r0, [r7, #8]
 8001d88:	f7ff fe2c 	bl	80019e4 <protocol_rcv_data>
  for (int i = 0; i< PROTOCOL_INTERFACE_MAX; i++)
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	3301      	adds	r3, #1
 8001d90:	617b      	str	r3, [r7, #20]
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	2b04      	cmp	r3, #4
 8001d96:	ddd5      	ble.n	8001d44 <protocol_uart_rcv_data+0x18>
    }
  }
  return status;
 8001d98:	693b      	ldr	r3, [r7, #16]
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3718      	adds	r7, #24
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	200009b4 	.word	0x200009b4

08001da8 <protocol_set_route>:
    * @param  tar_add Target address
    *         interface Next hop interface serial number corresponding to the target address
    * @retval Protocol return status
    */
int32_t protocol_set_route(uint8_t tar_add, const char *name)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b084      	sub	sp, #16
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	4603      	mov	r3, r0
 8001db0:	6039      	str	r1, [r7, #0]
 8001db2:	71fb      	strb	r3, [r7, #7]
  uint32_t status;
  struct perph_interface *perph;
  perph = protocol_get_interface(name);
 8001db4:	6838      	ldr	r0, [r7, #0]
 8001db6:	f000 f83b 	bl	8001e30 <protocol_get_interface>
 8001dba:	60f8      	str	r0, [r7, #12]

  status = PROTOCOL_SUCCESS;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	60bb      	str	r3, [r7, #8]
  if (perph == NULL)
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d108      	bne.n	8001dd8 <protocol_set_route+0x30>
  {
    status = PROTOCOL_ERR_INTER_NOT_FOUND;
 8001dc6:	230f      	movs	r3, #15
 8001dc8:	60bb      	str	r3, [r7, #8]
    PROTOCOL_ERR_INFO_PRINTF(status, __FILE__, __LINE__);
 8001dca:	22e7      	movs	r2, #231	; 0xe7
 8001dcc:	4916      	ldr	r1, [pc, #88]	; (8001e28 <protocol_set_route+0x80>)
 8001dce:	68b8      	ldr	r0, [r7, #8]
 8001dd0:	f001 f84e 	bl	8002e70 <protocol_s_error_info_printf>
    return status;
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	e022      	b.n	8001e1e <protocol_set_route+0x76>
  }
  if (tar_add >= PROTOCOL_ROUTE_TABLE_MAX_NUM)
 8001dd8:	79fb      	ldrb	r3, [r7, #7]
 8001dda:	2bfd      	cmp	r3, #253	; 0xfd
 8001ddc:	d908      	bls.n	8001df0 <protocol_set_route+0x48>
  {
    status = PROTOCOL_ERR_ROUTEU_SET_BEYOND;
 8001dde:	230e      	movs	r3, #14
 8001de0:	60bb      	str	r3, [r7, #8]
    PROTOCOL_ERR_INFO_PRINTF(status, __FILE__, __LINE__);
 8001de2:	22ed      	movs	r2, #237	; 0xed
 8001de4:	4910      	ldr	r1, [pc, #64]	; (8001e28 <protocol_set_route+0x80>)
 8001de6:	68b8      	ldr	r0, [r7, #8]
 8001de8:	f001 f842 	bl	8002e70 <protocol_s_error_info_printf>
    return status;
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	e016      	b.n	8001e1e <protocol_set_route+0x76>
  }

  if (perph->is_valid == 0)
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d108      	bne.n	8001e0c <protocol_set_route+0x64>
  {
    status = PROTOCOL_ERR_INTER_NOT_FOUND;
 8001dfa:	230f      	movs	r3, #15
 8001dfc:	60bb      	str	r3, [r7, #8]
    PROTOCOL_ERR_INFO_PRINTF(status, __FILE__, __LINE__);
 8001dfe:	22f4      	movs	r2, #244	; 0xf4
 8001e00:	4909      	ldr	r1, [pc, #36]	; (8001e28 <protocol_set_route+0x80>)
 8001e02:	68b8      	ldr	r0, [r7, #8]
 8001e04:	f001 f834 	bl	8002e70 <protocol_s_error_info_printf>
    return status;
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	e008      	b.n	8001e1e <protocol_set_route+0x76>
  }

  protocol_local_info.route_table[tar_add] = perph->idx;
 8001e0c:	79fb      	ldrb	r3, [r7, #7]
 8001e0e:	68fa      	ldr	r2, [r7, #12]
 8001e10:	f892 1060 	ldrb.w	r1, [r2, #96]	; 0x60
 8001e14:	4a05      	ldr	r2, [pc, #20]	; (8001e2c <protocol_set_route+0x84>)
 8001e16:	4413      	add	r3, r2
 8001e18:	460a      	mov	r2, r1
 8001e1a:	705a      	strb	r2, [r3, #1]

  PROTOCOL_OTHER_INFO_PRINTF("Route has been set, Address 0x%02X next jump is %s[%d].",
                             tar_add, perph->object_name, perph->idx);

  return status;
 8001e1c:	68bb      	ldr	r3, [r7, #8]
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3710      	adds	r7, #16
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	08015274 	.word	0x08015274
 8001e2c:	200009b4 	.word	0x200009b4

08001e30 <protocol_get_interface>:

struct perph_interface *protocol_get_interface(const char *name)
{
 8001e30:	b590      	push	{r4, r7, lr}
 8001e32:	b087      	sub	sp, #28
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8001e38:	f3ef 8310 	mrs	r3, PRIMASK
 8001e3c:	613b      	str	r3, [r7, #16]
  return(result);
 8001e3e:	693b      	ldr	r3, [r7, #16]
  var_cpu_sr();
  enter_critical();
 8001e40:	461c      	mov	r4, r3
  __ASM volatile ("cpsid i" : : : "memory");
 8001e42:	b672      	cpsid	i
}
 8001e44:	bf00      	nop
  for (int i = 0; i < PROTOCOL_INTERFACE_MAX; i++)
 8001e46:	2300      	movs	r3, #0
 8001e48:	617b      	str	r3, [r7, #20]
 8001e4a:	e020      	b.n	8001e8e <protocol_get_interface+0x5e>
  {
    if (strncmp(protocol_local_info.interface[i].object_name, name, PROTOCOL_OBJ_NAME_MAX_LEN) == 0)
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	2294      	movs	r2, #148	; 0x94
 8001e50:	fb02 f303 	mul.w	r3, r2, r3
 8001e54:	f503 63b7 	add.w	r3, r3, #1464	; 0x5b8
 8001e58:	4a13      	ldr	r2, [pc, #76]	; (8001ea8 <protocol_get_interface+0x78>)
 8001e5a:	4413      	add	r3, r2
 8001e5c:	2220      	movs	r2, #32
 8001e5e:	6879      	ldr	r1, [r7, #4]
 8001e60:	4618      	mov	r0, r3
 8001e62:	f011 ffef 	bl	8013e44 <strncmp>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d10d      	bne.n	8001e88 <protocol_get_interface+0x58>
 8001e6c:	60fc      	str	r4, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	f383 8810 	msr	PRIMASK, r3
}
 8001e74:	bf00      	nop
    {
      exit_critical();
      return &protocol_local_info.interface[i];
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	2294      	movs	r2, #148	; 0x94
 8001e7a:	fb02 f303 	mul.w	r3, r2, r3
 8001e7e:	f503 63b7 	add.w	r3, r3, #1464	; 0x5b8
 8001e82:	4a09      	ldr	r2, [pc, #36]	; (8001ea8 <protocol_get_interface+0x78>)
 8001e84:	4413      	add	r3, r2
 8001e86:	e00b      	b.n	8001ea0 <protocol_get_interface+0x70>
  for (int i = 0; i < PROTOCOL_INTERFACE_MAX; i++)
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	3301      	adds	r3, #1
 8001e8c:	617b      	str	r3, [r7, #20]
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	2b04      	cmp	r3, #4
 8001e92:	dddb      	ble.n	8001e4c <protocol_get_interface+0x1c>
 8001e94:	60bc      	str	r4, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001e96:	68bb      	ldr	r3, [r7, #8]
 8001e98:	f383 8810 	msr	PRIMASK, r3
}
 8001e9c:	bf00      	nop
    }
  }
  exit_critical();
  return NULL;
 8001e9e:	2300      	movs	r3, #0
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	371c      	adds	r7, #28
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd90      	pop	{r4, r7, pc}
 8001ea8:	200009b4 	.word	0x200009b4

08001eac <__list_add>:
 * the prev/next entries already!
 */
static __inline void __list_add(list_t *new,
                                list_t *prev,
                                list_t *next)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b085      	sub	sp, #20
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	60f8      	str	r0, [r7, #12]
 8001eb4:	60b9      	str	r1, [r7, #8]
 8001eb6:	607a      	str	r2, [r7, #4]
  next->prev = new;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	68fa      	ldr	r2, [r7, #12]
 8001ebc:	605a      	str	r2, [r3, #4]
  new->next = next;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	687a      	ldr	r2, [r7, #4]
 8001ec2:	601a      	str	r2, [r3, #0]
  new->prev = prev;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	68ba      	ldr	r2, [r7, #8]
 8001ec8:	605a      	str	r2, [r3, #4]
  prev->next = new;
 8001eca:	68bb      	ldr	r3, [r7, #8]
 8001ecc:	68fa      	ldr	r2, [r7, #12]
 8001ece:	601a      	str	r2, [r3, #0]
}
 8001ed0:	bf00      	nop
 8001ed2:	3714      	adds	r7, #20
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr

08001edc <list_add>:
 *
 * Insert a new entry after the specified head.
 * This is good for implementing stacks.
 */
static __inline void list_add(list_t *new, list_t *head)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b082      	sub	sp, #8
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
 8001ee4:	6039      	str	r1, [r7, #0]
  __list_add(new, head, head->next);
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	461a      	mov	r2, r3
 8001eec:	6839      	ldr	r1, [r7, #0]
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f7ff ffdc 	bl	8001eac <__list_add>
}
 8001ef4:	bf00      	nop
 8001ef6:	3708      	adds	r7, #8
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}

08001efc <__list_del>:
 *
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 */
static __inline void __list_del(list_t *prev, list_t *next)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b083      	sub	sp, #12
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
 8001f04:	6039      	str	r1, [r7, #0]
  next->prev = prev;
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	687a      	ldr	r2, [r7, #4]
 8001f0a:	605a      	str	r2, [r3, #4]
  prev->next = next;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	683a      	ldr	r2, [r7, #0]
 8001f10:	601a      	str	r2, [r3, #0]
}
 8001f12:	bf00      	nop
 8001f14:	370c      	adds	r7, #12
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr

08001f1e <list_del>:
 * @entry: the element to delete from the list.
 * Note: list_empty() on entry does not return true after this, the entry is
 * in an undefined state.
 */
static __inline void list_del(list_t *entry)
{
 8001f1e:	b580      	push	{r7, lr}
 8001f20:	b082      	sub	sp, #8
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	6078      	str	r0, [r7, #4]
  __list_del(entry->prev, entry->next);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	685a      	ldr	r2, [r3, #4]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4619      	mov	r1, r3
 8001f30:	4610      	mov	r0, r2
 8001f32:	f7ff ffe3 	bl	8001efc <__list_del>
}
 8001f36:	bf00      	nop
 8001f38:	3708      	adds	r7, #8
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}

08001f3e <protocol_get_session>:

/* Private function prototypes -----------------------------------------------*/
/* Exported functions --------------------------------------------------------*/

uint8_t protocol_get_session(struct perph_interface * interface)
{
 8001f3e:	b480      	push	{r7}
 8001f40:	b085      	sub	sp, #20
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	6078      	str	r0, [r7, #4]
  for (int i = 0; i < 31; i++)
 8001f46:	2300      	movs	r3, #0
 8001f48:	60fb      	str	r3, [r7, #12]
 8001f4a:	e014      	b.n	8001f76 <protocol_get_session+0x38>
  {
    if (interface->session[i] == 0)
 8001f4c:	687a      	ldr	r2, [r7, #4]
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	4413      	add	r3, r2
 8001f52:	3363      	adds	r3, #99	; 0x63
 8001f54:	781b      	ldrb	r3, [r3, #0]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d10a      	bne.n	8001f70 <protocol_get_session+0x32>
    {
      interface->session[i] = 1;
 8001f5a:	687a      	ldr	r2, [r7, #4]
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	4413      	add	r3, r2
 8001f60:	3363      	adds	r3, #99	; 0x63
 8001f62:	2201      	movs	r2, #1
 8001f64:	701a      	strb	r2, [r3, #0]
      return i + 1;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	3301      	adds	r3, #1
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	e006      	b.n	8001f7e <protocol_get_session+0x40>
  for (int i = 0; i < 31; i++)
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	3301      	adds	r3, #1
 8001f74:	60fb      	str	r3, [r7, #12]
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	2b1e      	cmp	r3, #30
 8001f7a:	dde7      	ble.n	8001f4c <protocol_get_session+0xe>
    }
  }
  return 0;
 8001f7c:	2300      	movs	r3, #0
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3714      	adds	r7, #20
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr

08001f8a <protocol_release_session>:

int32_t protocol_release_session(struct perph_interface * interface, uint8_t id)
{
 8001f8a:	b480      	push	{r7}
 8001f8c:	b083      	sub	sp, #12
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	6078      	str	r0, [r7, #4]
 8001f92:	460b      	mov	r3, r1
 8001f94:	70fb      	strb	r3, [r7, #3]
  if ((id > 0) && (id < 32))
 8001f96:	78fb      	ldrb	r3, [r7, #3]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d00b      	beq.n	8001fb4 <protocol_release_session+0x2a>
 8001f9c:	78fb      	ldrb	r3, [r7, #3]
 8001f9e:	2b1f      	cmp	r3, #31
 8001fa0:	d808      	bhi.n	8001fb4 <protocol_release_session+0x2a>
  {
    interface->session[id - 1] = 0;
 8001fa2:	78fb      	ldrb	r3, [r7, #3]
 8001fa4:	3b01      	subs	r3, #1
 8001fa6:	687a      	ldr	r2, [r7, #4]
 8001fa8:	4413      	add	r3, r2
 8001faa:	2200      	movs	r2, #0
 8001fac:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
    return 0;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	e001      	b.n	8001fb8 <protocol_release_session+0x2e>
  }
  return -1;
 8001fb4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	370c      	adds	r7, #12
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr

08001fc4 <protocol_s_add_sendnode>:

// Add protocol frame
uint32_t protocol_s_add_sendnode(uint8_t reciver, uint8_t session, uint8_t pack_type,
                                 void *p_data, uint32_t data_len, uint16_t cmd, uint16_t ack_seq)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b094      	sub	sp, #80	; 0x50
 8001fc8:	af02      	add	r7, sp, #8
 8001fca:	603b      	str	r3, [r7, #0]
 8001fcc:	4603      	mov	r3, r0
 8001fce:	71fb      	strb	r3, [r7, #7]
 8001fd0:	460b      	mov	r3, r1
 8001fd2:	71bb      	strb	r3, [r7, #6]
 8001fd4:	4613      	mov	r3, r2
 8001fd6:	717b      	strb	r3, [r7, #5]
  send_ctx_t ctx = {0};
 8001fd8:	2300      	movs	r3, #0
 8001fda:	60fb      	str	r3, [r7, #12]
  uint32_t pack_head_offset;
  protocol_pack_desc_t *pack_head;
  send_list_node_t *send_node;
  uint16_t seq;

  status = PROTOCOL_SUCCESS;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (data_len > PROTOCOL_MAX_DATA_LEN)
 8001fe0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001fe2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fe6:	d908      	bls.n	8001ffa <protocol_s_add_sendnode+0x36>
  {
    status = PROTOCOL_ERR_DATA_TOO_LONG;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	63fb      	str	r3, [r7, #60]	; 0x3c
    PROTOCOL_ERR_INFO_PRINTF(status, __FILE__, __LINE__);
 8001fec:	224d      	movs	r2, #77	; 0x4d
 8001fee:	499e      	ldr	r1, [pc, #632]	; (8002268 <protocol_s_add_sendnode+0x2a4>)
 8001ff0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001ff2:	f000 ff3d 	bl	8002e70 <protocol_s_error_info_printf>
    return status;
 8001ff6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ff8:	e132      	b.n	8002260 <protocol_s_add_sendnode+0x29c>
  }

  // Configure sending parameters
  ctx.s_a_r.pack_type = pack_type;
 8001ffa:	797b      	ldrb	r3, [r7, #5]
 8001ffc:	f003 0301 	and.w	r3, r3, #1
 8002000:	b2da      	uxtb	r2, r3
 8002002:	7bfb      	ldrb	r3, [r7, #15]
 8002004:	f362 1345 	bfi	r3, r2, #5, #1
 8002008:	73fb      	strb	r3, [r7, #15]
  ctx.s_a_r.session = session;
 800200a:	79bb      	ldrb	r3, [r7, #6]
 800200c:	f003 031f 	and.w	r3, r3, #31
 8002010:	b2da      	uxtb	r2, r3
 8002012:	7bfb      	ldrb	r3, [r7, #15]
 8002014:	f362 0304 	bfi	r3, r2, #0, #5
 8002018:	73fb      	strb	r3, [r7, #15]
  ctx.s_a_r.res = 0;
 800201a:	7bfb      	ldrb	r3, [r7, #15]
 800201c:	f36f 1387 	bfc	r3, #6, #2
 8002020:	73fb      	strb	r3, [r7, #15]
  ctx.reciver = reciver;
 8002022:	79fb      	ldrb	r3, [r7, #7]
 8002024:	73bb      	strb	r3, [r7, #14]
  ctx.version = PROTOCOL_VERSION;
 8002026:	2300      	movs	r3, #0
 8002028:	81bb      	strh	r3, [r7, #12]

  // Get routing interface
  int_obj = protocol_s_get_route(reciver);
 800202a:	79fb      	ldrb	r3, [r7, #7]
 800202c:	4618      	mov	r0, r3
 800202e:	f000 fbf9 	bl	8002824 <protocol_s_get_route>
 8002032:	63b8      	str	r0, [r7, #56]	; 0x38

  if (int_obj == NULL)
 8002034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002036:	2b00      	cmp	r3, #0
 8002038:	d108      	bne.n	800204c <protocol_s_add_sendnode+0x88>
  {
    status = PROTOCOL_ERR_ROUTE_NOT_FOUND;
 800203a:	2306      	movs	r3, #6
 800203c:	63fb      	str	r3, [r7, #60]	; 0x3c
    PROTOCOL_ERR_INFO_PRINTF(status, __FILE__, __LINE__);
 800203e:	225e      	movs	r2, #94	; 0x5e
 8002040:	4989      	ldr	r1, [pc, #548]	; (8002268 <protocol_s_add_sendnode+0x2a4>)
 8002042:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002044:	f000 ff14 	bl	8002e70 <protocol_s_error_info_printf>

    return status;
 8002048:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800204a:	e109      	b.n	8002260 <protocol_s_add_sendnode+0x29c>
  }

  if ((pack_type == PROTOCOL_PACK_NOR) && (session != 0))
 800204c:	797b      	ldrb	r3, [r7, #5]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d114      	bne.n	800207c <protocol_s_add_sendnode+0xb8>
 8002052:	79bb      	ldrb	r3, [r7, #6]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d011      	beq.n	800207c <protocol_s_add_sendnode+0xb8>
  {
    if (protocol_s_session_get_node(int_obj, reciver, session) != NULL)
 8002058:	79ba      	ldrb	r2, [r7, #6]
 800205a:	79fb      	ldrb	r3, [r7, #7]
 800205c:	4619      	mov	r1, r3
 800205e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002060:	f000 fc0c 	bl	800287c <protocol_s_session_get_node>
 8002064:	4603      	mov	r3, r0
 8002066:	2b00      	cmp	r3, #0
 8002068:	d008      	beq.n	800207c <protocol_s_add_sendnode+0xb8>
    {
      status = PROTOCOL_ERR_SESSION_IS_USE;
 800206a:	2305      	movs	r3, #5
 800206c:	63fb      	str	r3, [r7, #60]	; 0x3c
      PROTOCOL_ERR_INFO_PRINTF(status, __FILE__, __LINE__);
 800206e:	2268      	movs	r2, #104	; 0x68
 8002070:	497d      	ldr	r1, [pc, #500]	; (8002268 <protocol_s_add_sendnode+0x2a4>)
 8002072:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002074:	f000 fefc 	bl	8002e70 <protocol_s_error_info_printf>
      return status;
 8002078:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800207a:	e0f1      	b.n	8002260 <protocol_s_add_sendnode+0x29c>
    }
  }

  // Allocate memory required for data frame
  if (pack_type == PROTOCOL_PACK_ACK)
 800207c:	797b      	ldrb	r3, [r7, #5]
 800207e:	2b01      	cmp	r3, #1
 8002080:	d103      	bne.n	800208a <protocol_s_add_sendnode+0xc6>
  {
    malloc_size = PROTOCOL_PACK_HEAD_TAIL_SIZE + PROTOCOL_SEND_NODE_SIZE +
 8002082:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002084:	3340      	adds	r3, #64	; 0x40
 8002086:	647b      	str	r3, [r7, #68]	; 0x44
 8002088:	e002      	b.n	8002090 <protocol_s_add_sendnode+0xcc>
                  data_len;
  }
  else
  {
    malloc_size = PROTOCOL_PACK_HEAD_TAIL_SIZE + PROTOCOL_SEND_NODE_SIZE +
 800208a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800208c:	3342      	adds	r3, #66	; 0x42
 800208e:	647b      	str	r3, [r7, #68]	; 0x44
                  data_len + PROTOCOL_PACK_CMD_SIZE;
  }
  malloc_zone = protocol_p_malloc(malloc_size);
 8002090:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002092:	f7ff fd05 	bl	8001aa0 <protocol_p_malloc>
 8002096:	6378      	str	r0, [r7, #52]	; 0x34
  if (malloc_zone == NULL)
 8002098:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800209a:	2b00      	cmp	r3, #0
 800209c:	d108      	bne.n	80020b0 <protocol_s_add_sendnode+0xec>
  {
    status = PROTOCOL_ERR_NOT_ENOUGH_MEM;
 800209e:	2302      	movs	r3, #2
 80020a0:	63fb      	str	r3, [r7, #60]	; 0x3c
    PROTOCOL_ERR_INFO_PRINTF(status, __FILE__, __LINE__);
 80020a2:	227c      	movs	r2, #124	; 0x7c
 80020a4:	4970      	ldr	r1, [pc, #448]	; (8002268 <protocol_s_add_sendnode+0x2a4>)
 80020a6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80020a8:	f000 fee2 	bl	8002e70 <protocol_s_error_info_printf>
    return status;
 80020ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020ae:	e0d7      	b.n	8002260 <protocol_s_add_sendnode+0x29c>
  }

  if (pack_type == PROTOCOL_PACK_NOR)
 80020b0:	797b      	ldrb	r3, [r7, #5]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d118      	bne.n	80020e8 <protocol_s_add_sendnode+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80020b6:	f3ef 8310 	mrs	r3, PRIMASK
 80020ba:	61fb      	str	r3, [r7, #28]
  return(result);
 80020bc:	69fa      	ldr	r2, [r7, #28]
  {
    MUTEX_LOCK(int_obj->send.mutex_lock);
 80020be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020c0:	65da      	str	r2, [r3, #92]	; 0x5c
  __ASM volatile ("cpsid i" : : : "memory");
 80020c2:	b672      	cpsid	i
}
 80020c4:	bf00      	nop
    seq = int_obj->send.send_seq++;
 80020c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020c8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80020cc:	1c5a      	adds	r2, r3, #1
 80020ce:	b291      	uxth	r1, r2
 80020d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80020d2:	f8a2 1058 	strh.w	r1, [r2, #88]	; 0x58
 80020d6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    MUTEX_UNLOCK(int_obj->send.mutex_lock);
 80020da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020de:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80020e0:	6a3b      	ldr	r3, [r7, #32]
 80020e2:	f383 8810 	msr	PRIMASK, r3
}
 80020e6:	e003      	b.n	80020f0 <protocol_s_add_sendnode+0x12c>
  }
  else
  {
    seq = ack_seq;
 80020e8:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 80020ec:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  }

  pack_head_offset = PROTOCOL_SEND_NODE_SIZE;
 80020f0:	2330      	movs	r3, #48	; 0x30
 80020f2:	633b      	str	r3, [r7, #48]	; 0x30
  pack_head = (protocol_pack_desc_t *)&malloc_zone[pack_head_offset];
 80020f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80020f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020f8:	4413      	add	r3, r2
 80020fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  send_node = (send_list_node_t *)&malloc_zone[0];
 80020fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020fe:	62bb      	str	r3, [r7, #40]	; 0x28

  // Fill in the frame data section
  protocol_s_fill_pack(&ctx, p_data, data_len, (uint8_t *)(pack_head), seq, cmd);
 8002100:	f107 000c 	add.w	r0, r7, #12
 8002104:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8002108:	9301      	str	r3, [sp, #4]
 800210a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800210e:	9300      	str	r3, [sp, #0]
 8002110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002112:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002114:	6839      	ldr	r1, [r7, #0]
 8002116:	f000 f945 	bl	80023a4 <protocol_s_fill_pack>

  // Populate send_node
  send_node->session = ctx.s_a_r.session;
 800211a:	7bfb      	ldrb	r3, [r7, #15]
 800211c:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8002120:	b2db      	uxtb	r3, r3
 8002122:	461a      	mov	r2, r3
 8002124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002126:	745a      	strb	r2, [r3, #17]
  send_node->p_data = &malloc_zone[pack_head_offset];
 8002128:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800212a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800212c:	441a      	add	r2, r3
 800212e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002130:	609a      	str	r2, [r3, #8]
  send_node->len = malloc_size - PROTOCOL_SEND_NODE_SIZE;
 8002132:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002134:	b29b      	uxth	r3, r3
 8002136:	3b30      	subs	r3, #48	; 0x30
 8002138:	b29a      	uxth	r2, r3
 800213a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800213c:	819a      	strh	r2, [r3, #12]
  send_node->pre_timestamp = 0;
 800213e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002140:	2200      	movs	r2, #0
 8002142:	61da      	str	r2, [r3, #28]
  send_node->is_got_ack = 0;
 8002144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002146:	2200      	movs	r2, #0
 8002148:	73da      	strb	r2, [r3, #15]
  send_node->is_first_send = 1;
 800214a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800214c:	2201      	movs	r2, #1
 800214e:	f883 2020 	strb.w	r2, [r3, #32]
  send_node->address = reciver;
 8002152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002154:	79fa      	ldrb	r2, [r7, #7]
 8002156:	749a      	strb	r2, [r3, #18]
  send_node->pack_type = pack_type;
 8002158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800215a:	797a      	ldrb	r2, [r7, #5]
 800215c:	759a      	strb	r2, [r3, #22]
  send_node->is_ready_realse = 0;
 800215e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002160:	2200      	movs	r2, #0
 8002162:	741a      	strb	r2, [r3, #16]
  send_node->cmd = cmd;
 8002164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002166:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800216a:	829a      	strh	r2, [r3, #20]
  send_node->forward_src_obj = NULL;
 800216c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800216e:	2200      	movs	r2, #0
 8002170:	625a      	str	r2, [r3, #36]	; 0x24

  struct send_cmd_info *cmd_info;
  cmd_info = protocol_get_send_cmd_info(cmd);
 8002172:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8002176:	4618      	mov	r0, r3
 8002178:	f7ff f9f0 	bl	800155c <protocol_get_send_cmd_info>
 800217c:	6278      	str	r0, [r7, #36]	; 0x24
  if (cmd_info != NULL)
 800217e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002180:	2b00      	cmp	r3, #0
 8002182:	d010      	beq.n	80021a6 <protocol_s_add_sendnode+0x1e2>
  {
    send_node->rest_cnt = cmd_info->resend_times;
 8002184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002186:	795a      	ldrb	r2, [r3, #5]
 8002188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800218a:	75da      	strb	r2, [r3, #23]
    send_node->timeout = cmd_info->resend_timeout;
 800218c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218e:	88da      	ldrh	r2, [r3, #6]
 8002190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002192:	831a      	strh	r2, [r3, #24]
    send_node->ack_callback = cmd_info->ack_callback;
 8002194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002196:	689a      	ldr	r2, [r3, #8]
 8002198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800219a:	629a      	str	r2, [r3, #40]	; 0x28
    send_node->no_ack_callback = cmd_info->no_ack_callback;
 800219c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800219e:	68da      	ldr	r2, [r3, #12]
 80021a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021a2:	62da      	str	r2, [r3, #44]	; 0x2c
 80021a4:	e00b      	b.n	80021be <protocol_s_add_sendnode+0x1fa>
  }
  else
  {
    send_node->rest_cnt = 1;
 80021a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021a8:	2201      	movs	r2, #1
 80021aa:	75da      	strb	r2, [r3, #23]
    send_node->timeout = 0;
 80021ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021ae:	2200      	movs	r2, #0
 80021b0:	831a      	strh	r2, [r3, #24]
    send_node->ack_callback = NULL;
 80021b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021b4:	2200      	movs	r2, #0
 80021b6:	629a      	str	r2, [r3, #40]	; 0x28
    send_node->no_ack_callback = NULL;
 80021b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021ba:	2200      	movs	r2, #0
 80021bc:	62da      	str	r2, [r3, #44]	; 0x2c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80021be:	f3ef 8310 	mrs	r3, PRIMASK
 80021c2:	61bb      	str	r3, [r7, #24]
  return(result);
 80021c4:	69ba      	ldr	r2, [r7, #24]
  }

  //Add to sending list
  MUTEX_LOCK(int_obj->send.mutex_lock);
 80021c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021c8:	65da      	str	r2, [r3, #92]	; 0x5c
  __ASM volatile ("cpsid i" : : : "memory");
 80021ca:	b672      	cpsid	i
}
 80021cc:	bf00      	nop

  if ((pack_type == PROTOCOL_PACK_NOR) && (session != 0))
 80021ce:	797b      	ldrb	r3, [r7, #5]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d11b      	bne.n	800220c <protocol_s_add_sendnode+0x248>
 80021d4:	79bb      	ldrb	r3, [r7, #6]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d018      	beq.n	800220c <protocol_s_add_sendnode+0x248>
  {
    if (protocol_s_session_get_node(int_obj, reciver, session) != NULL)
 80021da:	79ba      	ldrb	r2, [r7, #6]
 80021dc:	79fb      	ldrb	r3, [r7, #7]
 80021de:	4619      	mov	r1, r3
 80021e0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80021e2:	f000 fb4b 	bl	800287c <protocol_s_session_get_node>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d00f      	beq.n	800220c <protocol_s_add_sendnode+0x248>
    {
      status = PROTOCOL_ERR_SESSION_IS_USE;
 80021ec:	2305      	movs	r3, #5
 80021ee:	63fb      	str	r3, [r7, #60]	; 0x3c
      MUTEX_UNLOCK(int_obj->send.mutex_lock);
 80021f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021f4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	f383 8810 	msr	PRIMASK, r3
}
 80021fc:	bf00      	nop
      PROTOCOL_ERR_INFO_PRINTF(status, __FILE__, __LINE__);
 80021fe:	22b9      	movs	r2, #185	; 0xb9
 8002200:	4919      	ldr	r1, [pc, #100]	; (8002268 <protocol_s_add_sendnode+0x2a4>)
 8002202:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002204:	f000 fe34 	bl	8002e70 <protocol_s_error_info_printf>
      return status;
 8002208:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800220a:	e029      	b.n	8002260 <protocol_s_add_sendnode+0x29c>
    }
  }

  if (pack_type == PROTOCOL_PACK_NOR)
 800220c:	797b      	ldrb	r3, [r7, #5]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d10f      	bne.n	8002232 <protocol_s_add_sendnode+0x26e>
  {
    list_add(&(send_node->send_list), &(int_obj->send.normal_list_header));
 8002212:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002216:	3348      	adds	r3, #72	; 0x48
 8002218:	4619      	mov	r1, r3
 800221a:	4610      	mov	r0, r2
 800221c:	f7ff fe5e 	bl	8001edc <list_add>
    int_obj->send.normal_node_num++;
 8002220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002222:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 8002226:	3301      	adds	r3, #1
 8002228:	b2da      	uxtb	r2, r3
 800222a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800222c:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
 8002230:	e00e      	b.n	8002250 <protocol_s_add_sendnode+0x28c>
  }
  else
  {
    list_add(&(send_node->send_list), &(int_obj->send.ack_list_header));
 8002232:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002236:	3350      	adds	r3, #80	; 0x50
 8002238:	4619      	mov	r1, r3
 800223a:	4610      	mov	r0, r2
 800223c:	f7ff fe4e 	bl	8001edc <list_add>
    int_obj->send.ack_node_num++;
 8002240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002242:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 8002246:	3301      	adds	r3, #1
 8002248:	b2da      	uxtb	r2, r3
 800224a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800224c:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
  }

  MUTEX_UNLOCK(int_obj->send.mutex_lock);
 8002250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002252:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002254:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	f383 8810 	msr	PRIMASK, r3
}
 800225c:	bf00      	nop
  {
    PROTOCOL_SEND_DBG_PRINTF("Send pack, Address:0x%02X, Session: %d Ack pack.",
                              reciver, session);
  }

  return status;
 800225e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002260:	4618      	mov	r0, r3
 8002262:	3748      	adds	r7, #72	; 0x48
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}
 8002268:	080152ac 	.word	0x080152ac

0800226c <protocol_s_broadcast_add_node>:

// Add processing function to broadcast package
uint32_t protocol_s_broadcast_add_node(void *p_data, uint32_t data_len, uint16_t cmd)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b090      	sub	sp, #64	; 0x40
 8002270:	af02      	add	r7, sp, #8
 8002272:	60f8      	str	r0, [r7, #12]
 8002274:	60b9      	str	r1, [r7, #8]
 8002276:	4613      	mov	r3, r2
 8002278:	80fb      	strh	r3, [r7, #6]
  uint8_t *malloc_zone;
  uint32_t pack_head_offset;
  protocol_pack_desc_t *pack_head;
  send_list_node_t *send_node;

  status = PROTOCOL_SUCCESS;
 800227a:	2300      	movs	r3, #0
 800227c:	637b      	str	r3, [r7, #52]	; 0x34

  if (data_len > PROTOCOL_MAX_DATA_LEN)
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002284:	d908      	bls.n	8002298 <protocol_s_broadcast_add_node+0x2c>
  {
    status = PROTOCOL_ERR_DATA_TOO_LONG;
 8002286:	2301      	movs	r3, #1
 8002288:	637b      	str	r3, [r7, #52]	; 0x34
    PROTOCOL_ERR_INFO_PRINTF(status, __FILE__, __LINE__);
 800228a:	22e9      	movs	r2, #233	; 0xe9
 800228c:	4943      	ldr	r1, [pc, #268]	; (800239c <protocol_s_broadcast_add_node+0x130>)
 800228e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002290:	f000 fdee 	bl	8002e70 <protocol_s_error_info_printf>
    return status;
 8002294:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002296:	e07d      	b.n	8002394 <protocol_s_broadcast_add_node+0x128>
  }

  // Configure sending parameters
  ctx.s_a_r.pack_type = PROTOCOL_PACK_NOR;
 8002298:	7dfb      	ldrb	r3, [r7, #23]
 800229a:	f36f 1345 	bfc	r3, #5, #1
 800229e:	75fb      	strb	r3, [r7, #23]
  ctx.s_a_r.session = 0;
 80022a0:	7dfb      	ldrb	r3, [r7, #23]
 80022a2:	f36f 0304 	bfc	r3, #0, #5
 80022a6:	75fb      	strb	r3, [r7, #23]
  ctx.s_a_r.res = 0;
 80022a8:	7dfb      	ldrb	r3, [r7, #23]
 80022aa:	f36f 1387 	bfc	r3, #6, #2
 80022ae:	75fb      	strb	r3, [r7, #23]
  ctx.reciver = PROTOCOL_BROADCAST_ADDR;
 80022b0:	23ff      	movs	r3, #255	; 0xff
 80022b2:	75bb      	strb	r3, [r7, #22]
  ctx.version = PROTOCOL_VERSION;
 80022b4:	2300      	movs	r3, #0
 80022b6:	82bb      	strh	r3, [r7, #20]

  malloc_size = PROTOCOL_PACK_HEAD_TAIL_SIZE + PROTOCOL_SEND_NODE_SIZE +
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	3342      	adds	r3, #66	; 0x42
 80022bc:	633b      	str	r3, [r7, #48]	; 0x30
                data_len + PROTOCOL_PACK_CMD_SIZE;

  malloc_zone = protocol_p_malloc(malloc_size);
 80022be:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80022c0:	f7ff fbee 	bl	8001aa0 <protocol_p_malloc>
 80022c4:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (malloc_zone == NULL)
 80022c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d108      	bne.n	80022de <protocol_s_broadcast_add_node+0x72>
  {
    status = PROTOCOL_ERR_NOT_ENOUGH_MEM;
 80022cc:	2302      	movs	r3, #2
 80022ce:	637b      	str	r3, [r7, #52]	; 0x34
    PROTOCOL_ERR_INFO_PRINTF(status, __FILE__, __LINE__);
 80022d0:	22fb      	movs	r2, #251	; 0xfb
 80022d2:	4932      	ldr	r1, [pc, #200]	; (800239c <protocol_s_broadcast_add_node+0x130>)
 80022d4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80022d6:	f000 fdcb 	bl	8002e70 <protocol_s_error_info_printf>
    return status;
 80022da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022dc:	e05a      	b.n	8002394 <protocol_s_broadcast_add_node+0x128>
  }

  pack_head_offset = PROTOCOL_SEND_NODE_SIZE;
 80022de:	2330      	movs	r3, #48	; 0x30
 80022e0:	62bb      	str	r3, [r7, #40]	; 0x28
  pack_head = (protocol_pack_desc_t *)&malloc_zone[pack_head_offset];
 80022e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022e6:	4413      	add	r3, r2
 80022e8:	627b      	str	r3, [r7, #36]	; 0x24
  send_node = (send_list_node_t *)&malloc_zone[0];
 80022ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022ec:	623b      	str	r3, [r7, #32]

  // Fill in the frame data section
  protocol_s_fill_pack(&ctx, p_data, data_len, (uint8_t *)(pack_head), 0, cmd);
 80022ee:	f107 0014 	add.w	r0, r7, #20
 80022f2:	88fb      	ldrh	r3, [r7, #6]
 80022f4:	9301      	str	r3, [sp, #4]
 80022f6:	2300      	movs	r3, #0
 80022f8:	9300      	str	r3, [sp, #0]
 80022fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fc:	68ba      	ldr	r2, [r7, #8]
 80022fe:	68f9      	ldr	r1, [r7, #12]
 8002300:	f000 f850 	bl	80023a4 <protocol_s_fill_pack>

  // Populate send_node
  send_node->session = 0;
 8002304:	6a3b      	ldr	r3, [r7, #32]
 8002306:	2200      	movs	r2, #0
 8002308:	745a      	strb	r2, [r3, #17]
  send_node->p_data = &malloc_zone[pack_head_offset];
 800230a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800230c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800230e:	441a      	add	r2, r3
 8002310:	6a3b      	ldr	r3, [r7, #32]
 8002312:	609a      	str	r2, [r3, #8]
  send_node->len = malloc_size - PROTOCOL_SEND_NODE_SIZE;
 8002314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002316:	b29b      	uxth	r3, r3
 8002318:	3b30      	subs	r3, #48	; 0x30
 800231a:	b29a      	uxth	r2, r3
 800231c:	6a3b      	ldr	r3, [r7, #32]
 800231e:	819a      	strh	r2, [r3, #12]
  send_node->rest_cnt = 1;
 8002320:	6a3b      	ldr	r3, [r7, #32]
 8002322:	2201      	movs	r2, #1
 8002324:	75da      	strb	r2, [r3, #23]
  send_node->pre_timestamp = 0;
 8002326:	6a3b      	ldr	r3, [r7, #32]
 8002328:	2200      	movs	r2, #0
 800232a:	61da      	str	r2, [r3, #28]
  send_node->timeout = 0;
 800232c:	6a3b      	ldr	r3, [r7, #32]
 800232e:	2200      	movs	r2, #0
 8002330:	831a      	strh	r2, [r3, #24]
  send_node->is_got_ack = 0;
 8002332:	6a3b      	ldr	r3, [r7, #32]
 8002334:	2200      	movs	r2, #0
 8002336:	73da      	strb	r2, [r3, #15]
  send_node->is_first_send = 1;
 8002338:	6a3b      	ldr	r3, [r7, #32]
 800233a:	2201      	movs	r2, #1
 800233c:	f883 2020 	strb.w	r2, [r3, #32]
  send_node->address = PROTOCOL_BROADCAST_ADDR;
 8002340:	6a3b      	ldr	r3, [r7, #32]
 8002342:	22ff      	movs	r2, #255	; 0xff
 8002344:	749a      	strb	r2, [r3, #18]
  send_node->pack_type = PROTOCOL_PACK_NOR;
 8002346:	6a3b      	ldr	r3, [r7, #32]
 8002348:	2200      	movs	r2, #0
 800234a:	759a      	strb	r2, [r3, #22]
  send_node->is_ready_realse = 0;
 800234c:	6a3b      	ldr	r3, [r7, #32]
 800234e:	2200      	movs	r2, #0
 8002350:	741a      	strb	r2, [r3, #16]
  send_node->cmd = cmd;
 8002352:	6a3b      	ldr	r3, [r7, #32]
 8002354:	88fa      	ldrh	r2, [r7, #6]
 8002356:	829a      	strh	r2, [r3, #20]
  send_node->forward_src_obj = NULL;
 8002358:	6a3b      	ldr	r3, [r7, #32]
 800235a:	2200      	movs	r2, #0
 800235c:	625a      	str	r2, [r3, #36]	; 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800235e:	f3ef 8310 	mrs	r3, PRIMASK
 8002362:	61bb      	str	r3, [r7, #24]
  return(result);
 8002364:	69bb      	ldr	r3, [r7, #24]

  // Add to sending list
  MUTEX_LOCK(boardcast_object.mutex_lock);
 8002366:	4a0e      	ldr	r2, [pc, #56]	; (80023a0 <protocol_s_broadcast_add_node+0x134>)
 8002368:	60d3      	str	r3, [r2, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800236a:	b672      	cpsid	i
}
 800236c:	bf00      	nop

  list_add(&(send_node->send_list), &(boardcast_object.send_list_header));
 800236e:	6a3b      	ldr	r3, [r7, #32]
 8002370:	490b      	ldr	r1, [pc, #44]	; (80023a0 <protocol_s_broadcast_add_node+0x134>)
 8002372:	4618      	mov	r0, r3
 8002374:	f7ff fdb2 	bl	8001edc <list_add>
  boardcast_object.send_node_num++;
 8002378:	4b09      	ldr	r3, [pc, #36]	; (80023a0 <protocol_s_broadcast_add_node+0x134>)
 800237a:	7a1b      	ldrb	r3, [r3, #8]
 800237c:	3301      	adds	r3, #1
 800237e:	b2da      	uxtb	r2, r3
 8002380:	4b07      	ldr	r3, [pc, #28]	; (80023a0 <protocol_s_broadcast_add_node+0x134>)
 8002382:	721a      	strb	r2, [r3, #8]

  MUTEX_UNLOCK(boardcast_object.mutex_lock);
 8002384:	4b06      	ldr	r3, [pc, #24]	; (80023a0 <protocol_s_broadcast_add_node+0x134>)
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	f383 8810 	msr	PRIMASK, r3
}
 8002390:	bf00      	nop

  PROTOCOL_SEND_DBG_PRINTF("Send broadcast pack, Cmd:0x%04X, Normal pack.", cmd);

  return status;
 8002392:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002394:	4618      	mov	r0, r3
 8002396:	3738      	adds	r7, #56	; 0x38
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}
 800239c:	080152ac 	.word	0x080152ac
 80023a0:	200009a4 	.word	0x200009a4

080023a4 <protocol_s_fill_pack>:

// frame padding
uint32_t protocol_s_fill_pack(send_ctx_t *ctx, uint8_t *p_data,
                              uint32_t data_len, uint8_t *pack_zone, uint16_t seq, uint16_t cmd)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b086      	sub	sp, #24
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	60f8      	str	r0, [r7, #12]
 80023ac:	60b9      	str	r1, [r7, #8]
 80023ae:	607a      	str	r2, [r7, #4]
 80023b0:	603b      	str	r3, [r7, #0]
  uint32_t status = 0;
 80023b2:	2300      	movs	r3, #0
 80023b4:	617b      	str	r3, [r7, #20]
  protocol_pack_desc_t *p_pack_head;

  p_pack_head = (protocol_pack_desc_t *)pack_zone;
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	613b      	str	r3, [r7, #16]

  /* get local module */

  p_pack_head->sof = PROTOCOL_HEADER;
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	22aa      	movs	r2, #170	; 0xaa
 80023be:	701a      	strb	r2, [r3, #0]
  p_pack_head->version = ctx->version;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	881b      	ldrh	r3, [r3, #0]
 80023c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80023c8:	b2d9      	uxtb	r1, r3
 80023ca:	693a      	ldr	r2, [r7, #16]
 80023cc:	7893      	ldrb	r3, [r2, #2]
 80023ce:	f361 0387 	bfi	r3, r1, #2, #6
 80023d2:	7093      	strb	r3, [r2, #2]
  p_pack_head->sender = protocol_local_info.address;
 80023d4:	4b41      	ldr	r3, [pc, #260]	; (80024dc <protocol_s_fill_pack+0x138>)
 80023d6:	781a      	ldrb	r2, [r3, #0]
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	711a      	strb	r2, [r3, #4]
  p_pack_head->reciver = ctx->reciver;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	789a      	ldrb	r2, [r3, #2]
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	715a      	strb	r2, [r3, #5]
  p_pack_head->S_A_R_c = ctx->S_A_R_c;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	78da      	ldrb	r2, [r3, #3]
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	70da      	strb	r2, [r3, #3]
  p_pack_head->seq_num = seq;
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	8c3a      	ldrh	r2, [r7, #32]
 80023f0:	811a      	strh	r2, [r3, #8]
  p_pack_head->ver_data_len = p_pack_head->ver_data_len;
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80023f8:	b29a      	uxth	r2, r3
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	f8a3 2001 	strh.w	r2, [r3, #1]
  p_pack_head->res1 = 0;
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	2200      	movs	r2, #0
 8002404:	719a      	strb	r2, [r3, #6]
 8002406:	2200      	movs	r2, #0
 8002408:	71da      	strb	r2, [r3, #7]

  /* cpy data */
  if (ctx->s_a_r.pack_type == PROTOCOL_PACK_ACK)
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	78db      	ldrb	r3, [r3, #3]
 800240e:	f003 0320 	and.w	r3, r3, #32
 8002412:	b2db      	uxtb	r3, r3
 8002414:	2b00      	cmp	r3, #0
 8002416:	d020      	beq.n	800245a <protocol_s_fill_pack+0xb6>
  {
    p_pack_head->data_len = data_len + PROTOCOL_PACK_HEAD_TAIL_SIZE;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	b29b      	uxth	r3, r3
 800241c:	3310      	adds	r3, #16
 800241e:	b29b      	uxth	r3, r3
 8002420:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002424:	b29a      	uxth	r2, r3
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	b2d1      	uxtb	r1, r2
 800242a:	2000      	movs	r0, #0
 800242c:	4301      	orrs	r1, r0
 800242e:	7059      	strb	r1, [r3, #1]
 8002430:	0a12      	lsrs	r2, r2, #8
 8002432:	b292      	uxth	r2, r2
 8002434:	f002 0203 	and.w	r2, r2, #3
 8002438:	f002 0003 	and.w	r0, r2, #3
 800243c:	789a      	ldrb	r2, [r3, #2]
 800243e:	f022 0203 	bic.w	r2, r2, #3
 8002442:	4611      	mov	r1, r2
 8002444:	4602      	mov	r2, r0
 8002446:	430a      	orrs	r2, r1
 8002448:	709a      	strb	r2, [r3, #2]
    memcpy(pack_zone + PROTOCOL_PACK_HEAD_SIZE, p_data, data_len);
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	330c      	adds	r3, #12
 800244e:	687a      	ldr	r2, [r7, #4]
 8002450:	68b9      	ldr	r1, [r7, #8]
 8002452:	4618      	mov	r0, r3
 8002454:	f011 fda0 	bl	8013f98 <memcpy>
 8002458:	e023      	b.n	80024a2 <protocol_s_fill_pack+0xfe>
  }
  else
  {
    p_pack_head->data_len = data_len + PROTOCOL_PACK_HEAD_TAIL_SIZE + PROTOCOL_PACK_CMD_SIZE;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	b29b      	uxth	r3, r3
 800245e:	3312      	adds	r3, #18
 8002460:	b29b      	uxth	r3, r3
 8002462:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002466:	b29a      	uxth	r2, r3
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	b2d1      	uxtb	r1, r2
 800246c:	2000      	movs	r0, #0
 800246e:	4301      	orrs	r1, r0
 8002470:	7059      	strb	r1, [r3, #1]
 8002472:	0a12      	lsrs	r2, r2, #8
 8002474:	b292      	uxth	r2, r2
 8002476:	f002 0203 	and.w	r2, r2, #3
 800247a:	f002 0003 	and.w	r0, r2, #3
 800247e:	789a      	ldrb	r2, [r3, #2]
 8002480:	f022 0203 	bic.w	r2, r2, #3
 8002484:	4611      	mov	r1, r2
 8002486:	4602      	mov	r2, r0
 8002488:	430a      	orrs	r2, r1
 800248a:	709a      	strb	r2, [r3, #2]
    *((uint16_t *)(pack_zone + PROTOCOL_PACK_HEAD_SIZE)) = cmd;
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	330c      	adds	r3, #12
 8002490:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002492:	801a      	strh	r2, [r3, #0]
    memcpy(pack_zone + PROTOCOL_PACK_HEAD_SIZE + PROTOCOL_PACK_CMD_SIZE, p_data, data_len);
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	330e      	adds	r3, #14
 8002498:	687a      	ldr	r2, [r7, #4]
 800249a:	68b9      	ldr	r1, [r7, #8]
 800249c:	4618      	mov	r0, r3
 800249e:	f011 fd7b 	bl	8013f98 <memcpy>
  }

  /* crc */
  append_crc16(pack_zone, 12);
 80024a2:	210c      	movs	r1, #12
 80024a4:	6838      	ldr	r0, [r7, #0]
 80024a6:	f011 fa2b 	bl	8013900 <append_crc16>

  if (ctx->s_a_r.pack_type == PROTOCOL_PACK_ACK)
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	78db      	ldrb	r3, [r3, #3]
 80024ae:	f003 0320 	and.w	r3, r3, #32
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d006      	beq.n	80024c6 <protocol_s_fill_pack+0x122>
  {
    append_crc32(pack_zone, data_len + PROTOCOL_PACK_HEAD_TAIL_SIZE);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	3310      	adds	r3, #16
 80024bc:	4619      	mov	r1, r3
 80024be:	6838      	ldr	r0, [r7, #0]
 80024c0:	f011 fac0 	bl	8013a44 <append_crc32>
 80024c4:	e005      	b.n	80024d2 <protocol_s_fill_pack+0x12e>
  }
  else
  {
    append_crc32(pack_zone, data_len + PROTOCOL_PACK_HEAD_TAIL_SIZE + PROTOCOL_PACK_CMD_SIZE);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	3312      	adds	r3, #18
 80024ca:	4619      	mov	r1, r3
 80024cc:	6838      	ldr	r0, [r7, #0]
 80024ce:	f011 fab9 	bl	8013a44 <append_crc32>
  }

  return status;
 80024d2:	697b      	ldr	r3, [r7, #20]
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	3718      	adds	r7, #24
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	200009b4 	.word	0x200009b4

080024e0 <protocol_s_interface_send_data>:

// Send data through interface
uint32_t protocol_s_interface_send_data(send_list_node_t *cur_send_node, struct perph_interface *obj)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b082      	sub	sp, #8
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
 80024e8:	6039      	str	r1, [r7, #0]

#if (PROTOCOL_AUTO_LOOKBACK == PROTOCOL_ENABLE)

  if (cur_send_node->address != protocol_local_info.address)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	7c9a      	ldrb	r2, [r3, #18]
 80024ee:	4b0d      	ldr	r3, [pc, #52]	; (8002524 <protocol_s_interface_send_data+0x44>)
 80024f0:	781b      	ldrb	r3, [r3, #0]
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d008      	beq.n	8002508 <protocol_s_interface_send_data+0x28>
  {
    // The sending address is different from the local address. Outgoing
    protocol_interface_send_data(obj, cur_send_node->p_data, cur_send_node->len);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6899      	ldr	r1, [r3, #8]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	899b      	ldrh	r3, [r3, #12]
 80024fe:	461a      	mov	r2, r3
 8002500:	6838      	ldr	r0, [r7, #0]
 8002502:	f7ff fbc1 	bl	8001c88 <protocol_interface_send_data>
 8002506:	e007      	b.n	8002518 <protocol_s_interface_send_data+0x38>
  }
  else
  {
    // The sending address is the same as the local address and loops back directly internally.

    protocol_rcv_data(cur_send_node->p_data, cur_send_node->len, &protocol_local_info.interface[0]);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6898      	ldr	r0, [r3, #8]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	899b      	ldrh	r3, [r3, #12]
 8002510:	4a05      	ldr	r2, [pc, #20]	; (8002528 <protocol_s_interface_send_data+0x48>)
 8002512:	4619      	mov	r1, r3
 8002514:	f7ff fa66 	bl	80019e4 <protocol_rcv_data>
                           cur_send_node->len,
                           obj->interface);
  }
#endif

  return PROTOCOL_SUCCESS;
 8002518:	2300      	movs	r3, #0
}
 800251a:	4618      	mov	r0, r3
 800251c:	3708      	adds	r7, #8
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	200009b4 	.word	0x200009b4
 8002528:	20000f6c 	.word	0x20000f6c

0800252c <protocol_s_interface_normal_send_flush>:

// Clear sending list
uint32_t protocol_s_interface_normal_send_flush(struct perph_interface *obj)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b08e      	sub	sp, #56	; 0x38
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  list_t *cur_node;
  list_t *store_list;
  send_list_node_t *cur_send_node;
  uint32_t timeout;

  head_node = &(obj->send.normal_list_header);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	3348      	adds	r3, #72	; 0x48
 8002538:	62fb      	str	r3, [r7, #44]	; 0x2c
  list_for_each_prev_safe(cur_node, store_list, head_node)
 800253a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	637b      	str	r3, [r7, #52]	; 0x34
 8002540:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	633b      	str	r3, [r7, #48]	; 0x30
 8002546:	e0b2      	b.n	80026ae <protocol_s_interface_normal_send_flush+0x182>
  {

    cur_send_node = (send_list_node_t *)cur_node;
 8002548:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800254a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800254c:	f3ef 8310 	mrs	r3, PRIMASK
 8002550:	623b      	str	r3, [r7, #32]
  return(result);
 8002552:	6a3a      	ldr	r2, [r7, #32]

    MUTEX_LOCK(obj->send.mutex_lock);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	65da      	str	r2, [r3, #92]	; 0x5c
  __ASM volatile ("cpsid i" : : : "memory");
 8002558:	b672      	cpsid	i
}
 800255a:	bf00      	nop
    // Get ACK, delete
    if (cur_send_node->is_got_ack)
 800255c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800255e:	7bdb      	ldrb	r3, [r3, #15]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d01b      	beq.n	800259c <protocol_s_interface_normal_send_flush+0x70>
    {
      list_del(cur_node);
 8002564:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002566:	f7ff fcda 	bl	8001f1e <list_del>
      protocol_p_free(cur_send_node);
 800256a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800256c:	f7ff faa4 	bl	8001ab8 <protocol_p_free>
      obj->send.normal_node_num--;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 8002576:	3b01      	subs	r3, #1
 8002578:	b2da      	uxtb	r2, r3
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a

      protocol_release_session(obj, cur_send_node->session);
 8002580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002582:	7c5b      	ldrb	r3, [r3, #17]
 8002584:	4619      	mov	r1, r3
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	f7ff fcff 	bl	8001f8a <protocol_release_session>

      MUTEX_UNLOCK(obj->send.mutex_lock);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002590:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	f383 8810 	msr	PRIMASK, r3
}
 8002598:	bf00      	nop
      continue;
 800259a:	e083      	b.n	80026a4 <protocol_s_interface_normal_send_flush+0x178>
    }

    // Released after exceeding the number of retransmissions
    if (cur_send_node->is_ready_realse)
 800259c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800259e:	7c1b      	ldrb	r3, [r3, #16]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d025      	beq.n	80025f0 <protocol_s_interface_normal_send_flush+0xc4>
    {
      list_del(cur_node);
 80025a4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80025a6:	f7ff fcba 	bl	8001f1e <list_del>
      obj->send.normal_node_num--;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 80025b0:	3b01      	subs	r3, #1
 80025b2:	b2da      	uxtb	r2, r3
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a

      if (cur_send_node->no_ack_callback != NULL)
 80025ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d005      	beq.n	80025ce <protocol_s_interface_normal_send_flush+0xa2>
      {
        cur_send_node->no_ack_callback(cur_send_node->cmd);
 80025c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80025c8:	8a92      	ldrh	r2, [r2, #20]
 80025ca:	4610      	mov	r0, r2
 80025cc:	4798      	blx	r3
      }

      protocol_release_session(obj, cur_send_node->session);
 80025ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025d0:	7c5b      	ldrb	r3, [r3, #17]
 80025d2:	4619      	mov	r1, r3
 80025d4:	6878      	ldr	r0, [r7, #4]
 80025d6:	f7ff fcd8 	bl	8001f8a <protocol_release_session>

      protocol_p_free(cur_send_node);
 80025da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80025dc:	f7ff fa6c 	bl	8001ab8 <protocol_p_free>

      MUTEX_UNLOCK(obj->send.mutex_lock);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025e4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025e6:	69bb      	ldr	r3, [r7, #24]
 80025e8:	f383 8810 	msr	PRIMASK, r3
}
 80025ec:	bf00      	nop
      continue;
 80025ee:	e059      	b.n	80026a4 <protocol_s_interface_normal_send_flush+0x178>
    }
    else
    {
      MUTEX_UNLOCK(obj->send.mutex_lock);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025f4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	f383 8810 	msr	PRIMASK, r3
}
 80025fc:	bf00      	nop
    }

    timeout = protocol_p_get_time() - cur_send_node->pre_timestamp;
 80025fe:	f7ff fa66 	bl	8001ace <protocol_p_get_time>
 8002602:	4602      	mov	r2, r0
 8002604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002606:	69db      	ldr	r3, [r3, #28]
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	627b      	str	r3, [r7, #36]	; 0x24

    // Retransmit after timeout or send for the first time
    if ((timeout > cur_send_node->timeout || cur_send_node->is_first_send) &&
 800260c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800260e:	8b1b      	ldrh	r3, [r3, #24]
 8002610:	461a      	mov	r2, r3
 8002612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002614:	4293      	cmp	r3, r2
 8002616:	d804      	bhi.n	8002622 <protocol_s_interface_normal_send_flush+0xf6>
 8002618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800261a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d040      	beq.n	80026a4 <protocol_s_interface_normal_send_flush+0x178>
        cur_send_node->rest_cnt >= 1)
 8002622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002624:	7ddb      	ldrb	r3, [r3, #23]
    if ((timeout > cur_send_node->timeout || cur_send_node->is_first_send) &&
 8002626:	2b00      	cmp	r3, #0
 8002628:	d03c      	beq.n	80026a4 <protocol_s_interface_normal_send_flush+0x178>
    {
      cur_send_node->is_first_send = 0;
 800262a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800262c:	2200      	movs	r2, #0
 800262e:	f883 2020 	strb.w	r2, [r3, #32]

      cur_send_node->rest_cnt--;
 8002632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002634:	7ddb      	ldrb	r3, [r3, #23]
 8002636:	3b01      	subs	r3, #1
 8002638:	b2da      	uxtb	r2, r3
 800263a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800263c:	75da      	strb	r2, [r3, #23]

      // send data
      protocol_s_interface_send_data(cur_send_node, obj);
 800263e:	6879      	ldr	r1, [r7, #4]
 8002640:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002642:	f7ff ff4d 	bl	80024e0 <protocol_s_interface_send_data>

      if (cur_send_node->session == 0)
 8002646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002648:	7c5b      	ldrb	r3, [r3, #17]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d11d      	bne.n	800268a <protocol_s_interface_normal_send_flush+0x15e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800264e:	f3ef 8310 	mrs	r3, PRIMASK
 8002652:	60fb      	str	r3, [r7, #12]
  return(result);
 8002654:	68fa      	ldr	r2, [r7, #12]
      {
        // session is 0, no retransmission or ACK reply is required
        MUTEX_LOCK(obj->send.mutex_lock);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	65da      	str	r2, [r3, #92]	; 0x5c
  __ASM volatile ("cpsid i" : : : "memory");
 800265a:	b672      	cpsid	i
}
 800265c:	bf00      	nop
        list_del(cur_node);
 800265e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002660:	f7ff fc5d 	bl	8001f1e <list_del>
        obj->send.normal_node_num--;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 800266a:	3b01      	subs	r3, #1
 800266c:	b2da      	uxtb	r2, r3
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
        protocol_p_free(cur_send_node);
 8002674:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002676:	f7ff fa1f 	bl	8001ab8 <protocol_p_free>
        MUTEX_UNLOCK(obj->send.mutex_lock);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800267e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	f383 8810 	msr	PRIMASK, r3
}
 8002686:	bf00      	nop
        continue;
 8002688:	e00c      	b.n	80026a4 <protocol_s_interface_normal_send_flush+0x178>
      }
      else
      {
        // The session is not 0 and requires retransmission and ACK confirmation.
        if (cur_send_node->rest_cnt == 0)
 800268a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800268c:	7ddb      	ldrb	r3, [r3, #23]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d103      	bne.n	800269a <protocol_s_interface_normal_send_flush+0x16e>
        {
          // The number of sending times has been exhausted
          cur_send_node->is_ready_realse = 1;
 8002692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002694:	2201      	movs	r2, #1
 8002696:	741a      	strb	r2, [r3, #16]
 8002698:	e004      	b.n	80026a4 <protocol_s_interface_normal_send_flush+0x178>
        }
        else
        {
          cur_send_node->pre_timestamp = protocol_p_get_time();
 800269a:	f7ff fa18 	bl	8001ace <protocol_p_get_time>
 800269e:	4602      	mov	r2, r0
 80026a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026a2:	61da      	str	r2, [r3, #28]
  list_for_each_prev_safe(cur_node, store_list, head_node)
 80026a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026a6:	637b      	str	r3, [r7, #52]	; 0x34
 80026a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	633b      	str	r3, [r7, #48]	; 0x30
 80026ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80026b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026b2:	429a      	cmp	r2, r3
 80026b4:	f47f af48 	bne.w	8002548 <protocol_s_interface_normal_send_flush+0x1c>
        }
      }
    }
  }

  return 0;
 80026b8:	2300      	movs	r3, #0
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3738      	adds	r7, #56	; 0x38
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}

080026c2 <protocol_s_interface_ack_send_flush>:

// Clear the ACK frame sending list
uint32_t protocol_s_interface_ack_send_flush(struct perph_interface *obj)
{
 80026c2:	b580      	push	{r7, lr}
 80026c4:	b088      	sub	sp, #32
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	6078      	str	r0, [r7, #4]
  list_t *head_node;
  list_t *cur_node;
  list_t *store_list;
  send_list_node_t *cur_send_node;

  head_node = &(obj->send.ack_list_header);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	3350      	adds	r3, #80	; 0x50
 80026ce:	617b      	str	r3, [r7, #20]
  list_for_each_prev_safe(cur_node, store_list, head_node)
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	61fb      	str	r3, [r7, #28]
 80026d6:	69fb      	ldr	r3, [r7, #28]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	61bb      	str	r3, [r7, #24]
 80026dc:	e027      	b.n	800272e <protocol_s_interface_ack_send_flush+0x6c>
  {

    cur_send_node = (send_list_node_t *)cur_node;
 80026de:	69fb      	ldr	r3, [r7, #28]
 80026e0:	613b      	str	r3, [r7, #16]

    protocol_s_interface_send_data(cur_send_node, obj);
 80026e2:	6879      	ldr	r1, [r7, #4]
 80026e4:	6938      	ldr	r0, [r7, #16]
 80026e6:	f7ff fefb 	bl	80024e0 <protocol_s_interface_send_data>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80026ea:	f3ef 8310 	mrs	r3, PRIMASK
 80026ee:	60bb      	str	r3, [r7, #8]
  return(result);
 80026f0:	68ba      	ldr	r2, [r7, #8]

    //The packet is of ACK type and does not require retransmission or confirmation.
    MUTEX_LOCK(obj->send.mutex_lock);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	65da      	str	r2, [r3, #92]	; 0x5c
  __ASM volatile ("cpsid i" : : : "memory");
 80026f6:	b672      	cpsid	i
}
 80026f8:	bf00      	nop
    list_del(cur_node);
 80026fa:	69f8      	ldr	r0, [r7, #28]
 80026fc:	f7ff fc0f 	bl	8001f1e <list_del>
    obj->send.ack_node_num--;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 8002706:	3b01      	subs	r3, #1
 8002708:	b2da      	uxtb	r2, r3
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
    protocol_p_free(cur_send_node);
 8002710:	6938      	ldr	r0, [r7, #16]
 8002712:	f7ff f9d1 	bl	8001ab8 <protocol_p_free>
    MUTEX_UNLOCK(obj->send.mutex_lock);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800271a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	f383 8810 	msr	PRIMASK, r3
}
 8002722:	bf00      	nop
  list_for_each_prev_safe(cur_node, store_list, head_node)
 8002724:	69bb      	ldr	r3, [r7, #24]
 8002726:	61fb      	str	r3, [r7, #28]
 8002728:	69fb      	ldr	r3, [r7, #28]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	61bb      	str	r3, [r7, #24]
 800272e:	69fa      	ldr	r2, [r7, #28]
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	429a      	cmp	r2, r3
 8002734:	d1d3      	bne.n	80026de <protocol_s_interface_ack_send_flush+0x1c>
  }

  return 0;
 8002736:	2300      	movs	r3, #0
}
 8002738:	4618      	mov	r0, r3
 800273a:	3720      	adds	r7, #32
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}

08002740 <protocol_s_broadcast_send_flush>:

//Clear the broadcast packet sending list
uint32_t protocol_s_broadcast_send_flush(void)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b088      	sub	sp, #32
 8002744:	af00      	add	r7, sp, #0
  list_t *head_node;
  list_t *cur_node;
  list_t *store_list;
  send_list_node_t *cur_send_node;

  head_node = &(boardcast_object.send_list_header);
 8002746:	4b34      	ldr	r3, [pc, #208]	; (8002818 <protocol_s_broadcast_send_flush+0xd8>)
 8002748:	613b      	str	r3, [r7, #16]
  list_for_each_prev_safe(cur_node, store_list, head_node)
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	61fb      	str	r3, [r7, #28]
 8002750:	69fb      	ldr	r3, [r7, #28]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	61bb      	str	r3, [r7, #24]
 8002756:	e055      	b.n	8002804 <protocol_s_broadcast_send_flush+0xc4>
  {
    cur_send_node = (send_list_node_t *)cur_node;
 8002758:	69fb      	ldr	r3, [r7, #28]
 800275a:	60fb      	str	r3, [r7, #12]

    for (uint8_t i = 0; i < PROTOCOL_INTERFACE_MAX; i++)
 800275c:	2300      	movs	r3, #0
 800275e:	75fb      	strb	r3, [r7, #23]
 8002760:	e02d      	b.n	80027be <protocol_s_broadcast_send_flush+0x7e>
    {
      if (cur_send_node->forward_src_obj == protocol_local_info.interface + i)
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002766:	7dfb      	ldrb	r3, [r7, #23]
 8002768:	2194      	movs	r1, #148	; 0x94
 800276a:	fb01 f303 	mul.w	r3, r1, r3
 800276e:	492b      	ldr	r1, [pc, #172]	; (800281c <protocol_s_broadcast_send_flush+0xdc>)
 8002770:	440b      	add	r3, r1
 8002772:	429a      	cmp	r2, r3
 8002774:	d01b      	beq.n	80027ae <protocol_s_broadcast_send_flush+0x6e>
        continue;
      if (!cur_send_node->forward_src_obj->is_valid)
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800277a:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800277e:	2b00      	cmp	r3, #0
 8002780:	d017      	beq.n	80027b2 <protocol_s_broadcast_send_flush+0x72>
        continue;
      if (!protocol_local_info.interface[i].broadcast_output_enable)
 8002782:	7dfb      	ldrb	r3, [r7, #23]
 8002784:	4a26      	ldr	r2, [pc, #152]	; (8002820 <protocol_s_broadcast_send_flush+0xe0>)
 8002786:	2194      	movs	r1, #148	; 0x94
 8002788:	fb01 f303 	mul.w	r3, r1, r3
 800278c:	4413      	add	r3, r2
 800278e:	f203 631a 	addw	r3, r3, #1562	; 0x61a
 8002792:	781b      	ldrb	r3, [r3, #0]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d00e      	beq.n	80027b6 <protocol_s_broadcast_send_flush+0x76>
        continue;

      protocol_s_interface_send_data(cur_send_node, protocol_local_info.interface + i);
 8002798:	7dfb      	ldrb	r3, [r7, #23]
 800279a:	2294      	movs	r2, #148	; 0x94
 800279c:	fb02 f303 	mul.w	r3, r2, r3
 80027a0:	4a1e      	ldr	r2, [pc, #120]	; (800281c <protocol_s_broadcast_send_flush+0xdc>)
 80027a2:	4413      	add	r3, r2
 80027a4:	4619      	mov	r1, r3
 80027a6:	68f8      	ldr	r0, [r7, #12]
 80027a8:	f7ff fe9a 	bl	80024e0 <protocol_s_interface_send_data>
 80027ac:	e004      	b.n	80027b8 <protocol_s_broadcast_send_flush+0x78>
        continue;
 80027ae:	bf00      	nop
 80027b0:	e002      	b.n	80027b8 <protocol_s_broadcast_send_flush+0x78>
        continue;
 80027b2:	bf00      	nop
 80027b4:	e000      	b.n	80027b8 <protocol_s_broadcast_send_flush+0x78>
        continue;
 80027b6:	bf00      	nop
    for (uint8_t i = 0; i < PROTOCOL_INTERFACE_MAX; i++)
 80027b8:	7dfb      	ldrb	r3, [r7, #23]
 80027ba:	3301      	adds	r3, #1
 80027bc:	75fb      	strb	r3, [r7, #23]
 80027be:	7dfb      	ldrb	r3, [r7, #23]
 80027c0:	2b04      	cmp	r3, #4
 80027c2:	d9ce      	bls.n	8002762 <protocol_s_broadcast_send_flush+0x22>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80027c4:	f3ef 8310 	mrs	r3, PRIMASK
 80027c8:	607b      	str	r3, [r7, #4]
  return(result);
 80027ca:	687b      	ldr	r3, [r7, #4]
    }

    MUTEX_LOCK(boardcast_object.mutex_lock);
 80027cc:	4a12      	ldr	r2, [pc, #72]	; (8002818 <protocol_s_broadcast_send_flush+0xd8>)
 80027ce:	60d3      	str	r3, [r2, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 80027d0:	b672      	cpsid	i
}
 80027d2:	bf00      	nop
    list_del(cur_node);
 80027d4:	69f8      	ldr	r0, [r7, #28]
 80027d6:	f7ff fba2 	bl	8001f1e <list_del>
    boardcast_object.send_node_num--;
 80027da:	4b0f      	ldr	r3, [pc, #60]	; (8002818 <protocol_s_broadcast_send_flush+0xd8>)
 80027dc:	7a1b      	ldrb	r3, [r3, #8]
 80027de:	3b01      	subs	r3, #1
 80027e0:	b2da      	uxtb	r2, r3
 80027e2:	4b0d      	ldr	r3, [pc, #52]	; (8002818 <protocol_s_broadcast_send_flush+0xd8>)
 80027e4:	721a      	strb	r2, [r3, #8]
    protocol_p_free(cur_send_node);
 80027e6:	68f8      	ldr	r0, [r7, #12]
 80027e8:	f7ff f966 	bl	8001ab8 <protocol_p_free>
    MUTEX_UNLOCK(boardcast_object.mutex_lock);
 80027ec:	4b0a      	ldr	r3, [pc, #40]	; (8002818 <protocol_s_broadcast_send_flush+0xd8>)
 80027ee:	68db      	ldr	r3, [r3, #12]
 80027f0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	f383 8810 	msr	PRIMASK, r3
}
 80027f8:	bf00      	nop
  list_for_each_prev_safe(cur_node, store_list, head_node)
 80027fa:	69bb      	ldr	r3, [r7, #24]
 80027fc:	61fb      	str	r3, [r7, #28]
 80027fe:	69fb      	ldr	r3, [r7, #28]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	61bb      	str	r3, [r7, #24]
 8002804:	69fa      	ldr	r2, [r7, #28]
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	429a      	cmp	r2, r3
 800280a:	d1a5      	bne.n	8002758 <protocol_s_broadcast_send_flush+0x18>
  }

  return 0;
 800280c:	2300      	movs	r3, #0
}
 800280e:	4618      	mov	r0, r3
 8002810:	3720      	adds	r7, #32
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	200009a4 	.word	0x200009a4
 800281c:	20000f6c 	.word	0x20000f6c
 8002820:	200009b4 	.word	0x200009b4

08002824 <protocol_s_get_route>:

//Get route
struct perph_interface *protocol_s_get_route(uint8_t tar_add)
{
 8002824:	b480      	push	{r7}
 8002826:	b085      	sub	sp, #20
 8002828:	af00      	add	r7, sp, #0
 800282a:	4603      	mov	r3, r0
 800282c:	71fb      	strb	r3, [r7, #7]
  uint8_t int_obj_idx;

  int_obj_idx = protocol_local_info.route_table[tar_add]; 
 800282e:	79fb      	ldrb	r3, [r7, #7]
 8002830:	4a11      	ldr	r2, [pc, #68]	; (8002878 <protocol_s_get_route+0x54>)
 8002832:	4413      	add	r3, r2
 8002834:	785b      	ldrb	r3, [r3, #1]
 8002836:	73fb      	strb	r3, [r7, #15]
  if (int_obj_idx > PROTOCOL_INTERFACE_MAX)
 8002838:	7bfb      	ldrb	r3, [r7, #15]
 800283a:	2b05      	cmp	r3, #5
 800283c:	d901      	bls.n	8002842 <protocol_s_get_route+0x1e>
  {
    return NULL;
 800283e:	2300      	movs	r3, #0
 8002840:	e014      	b.n	800286c <protocol_s_get_route+0x48>
  }

  if (protocol_local_info.interface[int_obj_idx].is_valid) 
 8002842:	7bfb      	ldrb	r3, [r7, #15]
 8002844:	4a0c      	ldr	r2, [pc, #48]	; (8002878 <protocol_s_get_route+0x54>)
 8002846:	2194      	movs	r1, #148	; 0x94
 8002848:	fb01 f303 	mul.w	r3, r1, r3
 800284c:	4413      	add	r3, r2
 800284e:	f203 6319 	addw	r3, r3, #1561	; 0x619
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d008      	beq.n	800286a <protocol_s_get_route+0x46>
  {
    return &(protocol_local_info.interface[int_obj_idx]);
 8002858:	7bfb      	ldrb	r3, [r7, #15]
 800285a:	2294      	movs	r2, #148	; 0x94
 800285c:	fb02 f303 	mul.w	r3, r2, r3
 8002860:	f503 63b7 	add.w	r3, r3, #1464	; 0x5b8
 8002864:	4a04      	ldr	r2, [pc, #16]	; (8002878 <protocol_s_get_route+0x54>)
 8002866:	4413      	add	r3, r2
 8002868:	e000      	b.n	800286c <protocol_s_get_route+0x48>
  }
  else
  {
    return NULL;
 800286a:	2300      	movs	r3, #0
  }
}
 800286c:	4618      	mov	r0, r3
 800286e:	3714      	adds	r7, #20
 8002870:	46bd      	mov	sp, r7
 8002872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002876:	4770      	bx	lr
 8002878:	200009b4 	.word	0x200009b4

0800287c <protocol_s_session_get_node>:

//Get the node with the specified address and session
send_list_node_t *protocol_s_session_get_node(struct perph_interface *obj,
                                              uint8_t address, uint8_t session)
{
 800287c:	b480      	push	{r7}
 800287e:	b08b      	sub	sp, #44	; 0x2c
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
 8002884:	460b      	mov	r3, r1
 8002886:	70fb      	strb	r3, [r7, #3]
 8002888:	4613      	mov	r3, r2
 800288a:	70bb      	strb	r3, [r7, #2]
  list_t *head_node;
  list_t *cur_node;
  list_t *store_list;
  send_list_node_t *cur_send_node;

  head_node = &(obj->send.normal_list_header);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	3348      	adds	r3, #72	; 0x48
 8002890:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002892:	f3ef 8310 	mrs	r3, PRIMASK
 8002896:	617b      	str	r3, [r7, #20]
  return(result);
 8002898:	697b      	ldr	r3, [r7, #20]

  MUTEX_LOCK(protocol_local_info.mutex_lock);
 800289a:	4a1d      	ldr	r2, [pc, #116]	; (8002910 <protocol_s_session_get_node+0x94>)
 800289c:	f8c2 38a0 	str.w	r3, [r2, #2208]	; 0x8a0
  __ASM volatile ("cpsid i" : : : "memory");
 80028a0:	b672      	cpsid	i
}
 80028a2:	bf00      	nop
  list_for_each_prev_safe(cur_node, store_list, head_node)
 80028a4:	69fb      	ldr	r3, [r7, #28]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	627b      	str	r3, [r7, #36]	; 0x24
 80028aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	623b      	str	r3, [r7, #32]
 80028b0:	e01a      	b.n	80028e8 <protocol_s_session_get_node+0x6c>
  {
    cur_send_node = (send_list_node_t *)cur_node;
 80028b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b4:	61bb      	str	r3, [r7, #24]

    if ((cur_send_node->session == session) &&
 80028b6:	69bb      	ldr	r3, [r7, #24]
 80028b8:	7c5b      	ldrb	r3, [r3, #17]
 80028ba:	78ba      	ldrb	r2, [r7, #2]
 80028bc:	429a      	cmp	r2, r3
 80028be:	d10e      	bne.n	80028de <protocol_s_session_get_node+0x62>
        (cur_send_node->address == address))
 80028c0:	69bb      	ldr	r3, [r7, #24]
 80028c2:	7c9b      	ldrb	r3, [r3, #18]
    if ((cur_send_node->session == session) &&
 80028c4:	78fa      	ldrb	r2, [r7, #3]
 80028c6:	429a      	cmp	r2, r3
 80028c8:	d109      	bne.n	80028de <protocol_s_session_get_node+0x62>
    {
      MUTEX_UNLOCK(protocol_local_info.mutex_lock);
 80028ca:	4b11      	ldr	r3, [pc, #68]	; (8002910 <protocol_s_session_get_node+0x94>)
 80028cc:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	; 0x8a0
 80028d0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	f383 8810 	msr	PRIMASK, r3
}
 80028d8:	bf00      	nop
      return cur_send_node;
 80028da:	69bb      	ldr	r3, [r7, #24]
 80028dc:	e011      	b.n	8002902 <protocol_s_session_get_node+0x86>
  list_for_each_prev_safe(cur_node, store_list, head_node)
 80028de:	6a3b      	ldr	r3, [r7, #32]
 80028e0:	627b      	str	r3, [r7, #36]	; 0x24
 80028e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	623b      	str	r3, [r7, #32]
 80028e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d1e0      	bne.n	80028b2 <protocol_s_session_get_node+0x36>
    }
  }
  MUTEX_UNLOCK(protocol_local_info.mutex_lock);
 80028f0:	4b07      	ldr	r3, [pc, #28]	; (8002910 <protocol_s_session_get_node+0x94>)
 80028f2:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	; 0x8a0
 80028f6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	f383 8810 	msr	PRIMASK, r3
}
 80028fe:	bf00      	nop
  return NULL;
 8002900:	2300      	movs	r3, #0
}
 8002902:	4618      	mov	r0, r3
 8002904:	372c      	adds	r7, #44	; 0x2c
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr
 800290e:	bf00      	nop
 8002910:	200009b4 	.word	0x200009b4

08002914 <protocol_s_pack_forward>:

//Packet forwarding function
uint32_t protocol_s_pack_forward(protocol_pack_desc_t *p_pack, struct perph_interface *src_obj)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b08c      	sub	sp, #48	; 0x30
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
 800291c:	6039      	str	r1, [r7, #0]
  uint8_t *malloc_zone;
  uint32_t status;
  uint32_t pack_head_offset;
  send_list_node_t *send_node;

  status = PROTOCOL_SUCCESS;
 800291e:	2300      	movs	r3, #0
 8002920:	62bb      	str	r3, [r7, #40]	; 0x28

  //Find the destination of the package
  if (p_pack->reciver != PROTOCOL_BROADCAST_ADDR)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	795b      	ldrb	r3, [r3, #5]
 8002926:	2bff      	cmp	r3, #255	; 0xff
 8002928:	d00a      	beq.n	8002940 <protocol_s_pack_forward+0x2c>
  {
    tar_inter = protocol_s_get_route(p_pack->reciver);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	795b      	ldrb	r3, [r3, #5]
 800292e:	4618      	mov	r0, r3
 8002930:	f7ff ff78 	bl	8002824 <protocol_s_get_route>
 8002934:	62f8      	str	r0, [r7, #44]	; 0x2c

    if (tar_inter == NULL)
 8002936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002938:	2b00      	cmp	r3, #0
 800293a:	d101      	bne.n	8002940 <protocol_s_pack_forward+0x2c>
    {
      PROTOCOL_RCV_ERR_PRINTF("Pack forward error, Route to address 0x%02x does not exist.", p_pack->reciver);

      return PROTOCOL_ERR_ROUTE_NOT_FOUND;
 800293c:	2306      	movs	r3, #6
 800293e:	e09b      	b.n	8002a78 <protocol_s_pack_forward+0x164>
    }
  }

  // Allocate memory required to forward packets
  malloc_zone = protocol_p_malloc(p_pack->data_len + PROTOCOL_SEND_NODE_SIZE);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	785a      	ldrb	r2, [r3, #1]
 8002944:	789b      	ldrb	r3, [r3, #2]
 8002946:	f003 0303 	and.w	r3, r3, #3
 800294a:	021b      	lsls	r3, r3, #8
 800294c:	4313      	orrs	r3, r2
 800294e:	b29b      	uxth	r3, r3
 8002950:	3330      	adds	r3, #48	; 0x30
 8002952:	4618      	mov	r0, r3
 8002954:	f7ff f8a4 	bl	8001aa0 <protocol_p_malloc>
 8002958:	6278      	str	r0, [r7, #36]	; 0x24
  if (malloc_zone == NULL)
 800295a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800295c:	2b00      	cmp	r3, #0
 800295e:	d109      	bne.n	8002974 <protocol_s_pack_forward+0x60>
  {
    status = PROTOCOL_ERR_NOT_ENOUGH_MEM;
 8002960:	2302      	movs	r3, #2
 8002962:	62bb      	str	r3, [r7, #40]	; 0x28
    PROTOCOL_ERR_INFO_PRINTF(status, __FILE__, __LINE__);
 8002964:	f44f 7217 	mov.w	r2, #604	; 0x25c
 8002968:	4945      	ldr	r1, [pc, #276]	; (8002a80 <protocol_s_pack_forward+0x16c>)
 800296a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800296c:	f000 fa80 	bl	8002e70 <protocol_s_error_info_printf>
    return status;
 8002970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002972:	e081      	b.n	8002a78 <protocol_s_pack_forward+0x164>
  }

  pack_head_offset = PROTOCOL_SEND_NODE_SIZE;
 8002974:	2330      	movs	r3, #48	; 0x30
 8002976:	623b      	str	r3, [r7, #32]
  send_node = (send_list_node_t *)&malloc_zone[0];
 8002978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297a:	61fb      	str	r3, [r7, #28]

  send_node->session = 0;
 800297c:	69fb      	ldr	r3, [r7, #28]
 800297e:	2200      	movs	r2, #0
 8002980:	745a      	strb	r2, [r3, #17]
  send_node->p_data = &malloc_zone[pack_head_offset];
 8002982:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002984:	6a3b      	ldr	r3, [r7, #32]
 8002986:	441a      	add	r2, r3
 8002988:	69fb      	ldr	r3, [r7, #28]
 800298a:	609a      	str	r2, [r3, #8]
  send_node->len = p_pack->data_len;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	785a      	ldrb	r2, [r3, #1]
 8002990:	789b      	ldrb	r3, [r3, #2]
 8002992:	f003 0303 	and.w	r3, r3, #3
 8002996:	021b      	lsls	r3, r3, #8
 8002998:	4313      	orrs	r3, r2
 800299a:	b29b      	uxth	r3, r3
 800299c:	461a      	mov	r2, r3
 800299e:	69fb      	ldr	r3, [r7, #28]
 80029a0:	819a      	strh	r2, [r3, #12]
  send_node->rest_cnt = 1;
 80029a2:	69fb      	ldr	r3, [r7, #28]
 80029a4:	2201      	movs	r2, #1
 80029a6:	75da      	strb	r2, [r3, #23]
  send_node->pre_timestamp = 0;
 80029a8:	69fb      	ldr	r3, [r7, #28]
 80029aa:	2200      	movs	r2, #0
 80029ac:	61da      	str	r2, [r3, #28]
  send_node->timeout = 0;
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	2200      	movs	r2, #0
 80029b2:	831a      	strh	r2, [r3, #24]
  send_node->is_got_ack = 0;
 80029b4:	69fb      	ldr	r3, [r7, #28]
 80029b6:	2200      	movs	r2, #0
 80029b8:	73da      	strb	r2, [r3, #15]
  send_node->is_first_send = 1;
 80029ba:	69fb      	ldr	r3, [r7, #28]
 80029bc:	2201      	movs	r2, #1
 80029be:	f883 2020 	strb.w	r2, [r3, #32]
  send_node->address = p_pack->reciver;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	795a      	ldrb	r2, [r3, #5]
 80029c6:	69fb      	ldr	r3, [r7, #28]
 80029c8:	749a      	strb	r2, [r3, #18]
  send_node->pack_type = PROTOCOL_PACK_ACK; //It is faster to send forwarded packets as ACK packets
 80029ca:	69fb      	ldr	r3, [r7, #28]
 80029cc:	2201      	movs	r2, #1
 80029ce:	759a      	strb	r2, [r3, #22]
  send_node->is_ready_realse = 0;
 80029d0:	69fb      	ldr	r3, [r7, #28]
 80029d2:	2200      	movs	r2, #0
 80029d4:	741a      	strb	r2, [r3, #16]
  send_node->cmd = 0;
 80029d6:	69fb      	ldr	r3, [r7, #28]
 80029d8:	2200      	movs	r2, #0
 80029da:	829a      	strh	r2, [r3, #20]
  send_node->forward_src_obj = src_obj;
 80029dc:	69fb      	ldr	r3, [r7, #28]
 80029de:	683a      	ldr	r2, [r7, #0]
 80029e0:	625a      	str	r2, [r3, #36]	; 0x24

  memcpy(send_node->p_data, p_pack, p_pack->data_len);
 80029e2:	69fb      	ldr	r3, [r7, #28]
 80029e4:	6898      	ldr	r0, [r3, #8]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	785a      	ldrb	r2, [r3, #1]
 80029ea:	789b      	ldrb	r3, [r3, #2]
 80029ec:	f003 0303 	and.w	r3, r3, #3
 80029f0:	021b      	lsls	r3, r3, #8
 80029f2:	4313      	orrs	r3, r2
 80029f4:	b29b      	uxth	r3, r3
 80029f6:	461a      	mov	r2, r3
 80029f8:	6879      	ldr	r1, [r7, #4]
 80029fa:	f011 facd 	bl	8013f98 <memcpy>
  if (p_pack->reciver != PROTOCOL_BROADCAST_ADDR)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	795b      	ldrb	r3, [r3, #5]
 8002a02:	2bff      	cmp	r3, #255	; 0xff
 8002a04:	d01d      	beq.n	8002a42 <protocol_s_pack_forward+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002a06:	f3ef 8310 	mrs	r3, PRIMASK
 8002a0a:	617b      	str	r3, [r7, #20]
  return(result);
 8002a0c:	697a      	ldr	r2, [r7, #20]
  {
    // Non-broadcast packet handling
    MUTEX_LOCK(tar_inter->send.mutex_lock);
 8002a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a10:	65da      	str	r2, [r3, #92]	; 0x5c
  __ASM volatile ("cpsid i" : : : "memory");
 8002a12:	b672      	cpsid	i
}
 8002a14:	bf00      	nop
    list_add(&(send_node->send_list), &(tar_inter->send.ack_list_header)); //It is faster to send forwarded packets as ACK packets
 8002a16:	69fa      	ldr	r2, [r7, #28]
 8002a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a1a:	3350      	adds	r3, #80	; 0x50
 8002a1c:	4619      	mov	r1, r3
 8002a1e:	4610      	mov	r0, r2
 8002a20:	f7ff fa5c 	bl	8001edc <list_add>
    tar_inter->send.ack_node_num++;
 8002a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a26:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 8002a2a:	3301      	adds	r3, #1
 8002a2c:	b2da      	uxtb	r2, r3
 8002a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a30:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
    MUTEX_UNLOCK(tar_inter->send.mutex_lock);
 8002a34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a38:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a3a:	69bb      	ldr	r3, [r7, #24]
 8002a3c:	f383 8810 	msr	PRIMASK, r3
}
 8002a40:	e019      	b.n	8002a76 <protocol_s_pack_forward+0x162>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002a42:	f3ef 8310 	mrs	r3, PRIMASK
 8002a46:	60fb      	str	r3, [r7, #12]
  return(result);
 8002a48:	68fb      	ldr	r3, [r7, #12]
                             p_pack->reciver, tar_inter->object_name);
  }
  else
  {
    //Broadcast packet processing
    MUTEX_LOCK(boardcast_object.mutex_lock);
 8002a4a:	4a0e      	ldr	r2, [pc, #56]	; (8002a84 <protocol_s_pack_forward+0x170>)
 8002a4c:	60d3      	str	r3, [r2, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8002a4e:	b672      	cpsid	i
}
 8002a50:	bf00      	nop

    list_add(&(send_node->send_list), &(boardcast_object.send_list_header));
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	490b      	ldr	r1, [pc, #44]	; (8002a84 <protocol_s_pack_forward+0x170>)
 8002a56:	4618      	mov	r0, r3
 8002a58:	f7ff fa40 	bl	8001edc <list_add>
    boardcast_object.send_node_num++;
 8002a5c:	4b09      	ldr	r3, [pc, #36]	; (8002a84 <protocol_s_pack_forward+0x170>)
 8002a5e:	7a1b      	ldrb	r3, [r3, #8]
 8002a60:	3301      	adds	r3, #1
 8002a62:	b2da      	uxtb	r2, r3
 8002a64:	4b07      	ldr	r3, [pc, #28]	; (8002a84 <protocol_s_pack_forward+0x170>)
 8002a66:	721a      	strb	r2, [r3, #8]

    MUTEX_UNLOCK(boardcast_object.mutex_lock);
 8002a68:	4b06      	ldr	r3, [pc, #24]	; (8002a84 <protocol_s_pack_forward+0x170>)
 8002a6a:	68db      	ldr	r3, [r3, #12]
 8002a6c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	f383 8810 	msr	PRIMASK, r3
}
 8002a74:	bf00      	nop

    PROTOCOL_RCV_DBG_PRINTF("Broadcast pack forward.");
  }

  return status;
 8002a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	3730      	adds	r7, #48	; 0x30
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}
 8002a80:	080152ac 	.word	0x080152ac
 8002a84:	200009a4 	.word	0x200009a4

08002a88 <protocol_s_unpack_data_handle>:

//Unpack processing function
uint32_t protocol_s_unpack_data_handle(struct perph_interface *obj)
{
 8002a88:	b590      	push	{r4, r7, lr}
 8002a8a:	b087      	sub	sp, #28
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  uint32_t status;
  uint16_t cmd;
  protocol_pack_desc_t *p_pack;
  send_list_node_t *session_node;

  status = PROTOCOL_SUCCESS;
 8002a90:	2300      	movs	r3, #0
 8002a92:	617b      	str	r3, [r7, #20]
  p_pack = (protocol_pack_desc_t *)(obj->rcvd.p_data);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a98:	613b      	str	r3, [r7, #16]

#if PROTOCOL_ROUTE_FOWARD == PROTOCOL_ENABLE

  //If the receiving address does not match the local address, forward it
  if (p_pack->reciver != protocol_local_info.address)
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	795a      	ldrb	r2, [r3, #5]
 8002a9e:	4b2e      	ldr	r3, [pc, #184]	; (8002b58 <protocol_s_unpack_data_handle+0xd0>)
 8002aa0:	781b      	ldrb	r3, [r3, #0]
 8002aa2:	429a      	cmp	r2, r3
 8002aa4:	d00a      	beq.n	8002abc <protocol_s_unpack_data_handle+0x34>
  {
    status = protocol_s_pack_forward(p_pack, obj);
 8002aa6:	6879      	ldr	r1, [r7, #4]
 8002aa8:	6938      	ldr	r0, [r7, #16]
 8002aaa:	f7ff ff33 	bl	8002914 <protocol_s_pack_forward>
 8002aae:	6178      	str	r0, [r7, #20]
    if (p_pack->reciver != PROTOCOL_BROADCAST_ADDR)
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	795b      	ldrb	r3, [r3, #5]
 8002ab4:	2bff      	cmp	r3, #255	; 0xff
 8002ab6:	d001      	beq.n	8002abc <protocol_s_unpack_data_handle+0x34>
    {
      return status;
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	e049      	b.n	8002b50 <protocol_s_unpack_data_handle+0xc8>
    }
  }

#endif

  if (p_pack->pack_type == PROTOCOL_PACK_ACK)
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	78db      	ldrb	r3, [r3, #3]
 8002ac0:	f003 0320 	and.w	r3, r3, #32
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d02a      	beq.n	8002b20 <protocol_s_unpack_data_handle+0x98>
  {
    session_node = protocol_s_session_get_node(obj,
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	7919      	ldrb	r1, [r3, #4]
                                               p_pack->sender,
                                               p_pack->session);
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	78db      	ldrb	r3, [r3, #3]
 8002ad2:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8002ad6:	b2db      	uxtb	r3, r3
    session_node = protocol_s_session_get_node(obj,
 8002ad8:	461a      	mov	r2, r3
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f7ff fece 	bl	800287c <protocol_s_session_get_node>
 8002ae0:	60b8      	str	r0, [r7, #8]

    if (session_node == NULL)
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d109      	bne.n	8002afc <protocol_s_unpack_data_handle+0x74>
    {
      status = PROTOCOL_ERR_SESSION_NOT_FOUND;
 8002ae8:	2303      	movs	r3, #3
 8002aea:	617b      	str	r3, [r7, #20]
      PROTOCOL_ERR_INFO_PRINTF(status, __FILE__, __LINE__);
 8002aec:	f240 22af 	movw	r2, #687	; 0x2af
 8002af0:	491a      	ldr	r1, [pc, #104]	; (8002b5c <protocol_s_unpack_data_handle+0xd4>)
 8002af2:	6978      	ldr	r0, [r7, #20]
 8002af4:	f000 f9bc 	bl	8002e70 <protocol_s_error_info_printf>

      return status;
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	e029      	b.n	8002b50 <protocol_s_unpack_data_handle+0xc8>
    }
    session_node->is_got_ack = 1;
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	2201      	movs	r2, #1
 8002b00:	73da      	strb	r2, [r3, #15]

    cmd = session_node->cmd;
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	8a9b      	ldrh	r3, [r3, #20]
 8002b06:	81fb      	strh	r3, [r7, #14]

    PROTOCOL_RCV_DBG_PRINTF("Rcv pack, Address:0x%02X, Cmd:0x%04X, Session:%d Ack pack.",
                             p_pack->sender, cmd, p_pack->session);

    if (session_node->ack_callback != NULL)
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d01e      	beq.n	8002b4e <protocol_s_unpack_data_handle+0xc6>
    {
      session_node->ack_callback(*(int32_t *)(p_pack->pdata));
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b14:	693a      	ldr	r2, [r7, #16]
 8002b16:	320c      	adds	r2, #12
 8002b18:	6812      	ldr	r2, [r2, #0]
 8002b1a:	4610      	mov	r0, r2
 8002b1c:	4798      	blx	r3
 8002b1e:	e016      	b.n	8002b4e <protocol_s_unpack_data_handle+0xc6>
    }
  }
  else
  {
    cmd = *((uint16_t *)(p_pack->pdata));
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	330c      	adds	r3, #12
 8002b24:	881b      	ldrh	r3, [r3, #0]
 8002b26:	81fb      	strh	r3, [r7, #14]
    PROTOCOL_RCV_DBG_PRINTF("Rcv pack, Address:0x%02X, Cmd:0x%04X, Normal pack.",
                             p_pack->sender, cmd);
    if (protocol_local_info.rcv_nor_callBack != NULL)
 8002b28:	4b0b      	ldr	r3, [pc, #44]	; (8002b58 <protocol_s_unpack_data_handle+0xd0>)
 8002b2a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d00d      	beq.n	8002b4e <protocol_s_unpack_data_handle+0xc6>
    {
      protocol_local_info.rcv_nor_callBack((uint8_t *)p_pack,
 8002b32:	4b09      	ldr	r3, [pc, #36]	; (8002b58 <protocol_s_unpack_data_handle+0xd0>)
 8002b34:	f8d3 4100 	ldr.w	r4, [r3, #256]	; 0x100
                                           cmd,
                                           p_pack->session,
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	78db      	ldrb	r3, [r3, #3]
 8002b3c:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8002b40:	b2db      	uxtb	r3, r3
      protocol_local_info.rcv_nor_callBack((uint8_t *)p_pack,
 8002b42:	461a      	mov	r2, r3
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	791b      	ldrb	r3, [r3, #4]
 8002b48:	89f9      	ldrh	r1, [r7, #14]
 8002b4a:	6938      	ldr	r0, [r7, #16]
 8002b4c:	47a0      	blx	r4
                                           p_pack->sender);
    }
  }

  return status;
 8002b4e:	697b      	ldr	r3, [r7, #20]
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	371c      	adds	r7, #28
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd90      	pop	{r4, r7, pc}
 8002b58:	200009b4 	.word	0x200009b4
 8002b5c:	080152ac 	.word	0x080152ac

08002b60 <protocol_s_extract>:

//Unpack
uint32_t protocol_s_extract(struct perph_interface *obj)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b084      	sub	sp, #16
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  uint32_t status = 0;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	60fb      	str	r3, [r7, #12]
  rcvd_desc_t *rcvd;

  rcvd = &obj->rcvd;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	3320      	adds	r3, #32
 8002b70:	60bb      	str	r3, [r7, #8]
  if (fifo_s_isempty(&rcvd->fifo))
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	4618      	mov	r0, r3
 8002b76:	f010 fb99 	bl	80132ac <fifo_s_isempty>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d003      	beq.n	8002b88 <protocol_s_extract+0x28>
  {
    status = PROTOCOL_ERR_FIFO_EMPTY;
 8002b80:	2307      	movs	r3, #7
 8002b82:	60fb      	str	r3, [r7, #12]
    return status;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	e0af      	b.n	8002ce8 <protocol_s_extract+0x188>
  }

  while (1)
  {
    switch (rcvd->state)
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b8e:	2b04      	cmp	r3, #4
 8002b90:	f200 8098 	bhi.w	8002cc4 <protocol_s_extract+0x164>
 8002b94:	a201      	add	r2, pc, #4	; (adr r2, 8002b9c <protocol_s_extract+0x3c>)
 8002b96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b9a:	bf00      	nop
 8002b9c:	08002bb1 	.word	0x08002bb1
 8002ba0:	08002bcb 	.word	0x08002bcb
 8002ba4:	08002c37 	.word	0x08002c37
 8002ba8:	08002c69 	.word	0x08002c69
 8002bac:	08002ca9 	.word	0x08002ca9
    {
    case UNPACK_PACK_STAGE_FIND_SOF:

      status = protocol_s_find_pack_header(rcvd);
 8002bb0:	68b8      	ldr	r0, [r7, #8]
 8002bb2:	f000 f89f 	bl	8002cf4 <protocol_s_find_pack_header>
 8002bb6:	60f8      	str	r0, [r7, #12]
      if (status == PROTOCOL_SUCCESS)
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	f040 8084 	bne.w	8002cc8 <protocol_s_extract+0x168>
      {
        rcvd->state = UNPACK_PACK_STAGE_AUTH_HEADER;
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	f883 2020 	strb.w	r2, [r3, #32]
      }
      break;
 8002bc8:	e07e      	b.n	8002cc8 <protocol_s_extract+0x168>

    case UNPACK_PACK_STAGE_AUTH_HEADER:

      status = protocol_s_auth_pack_header(rcvd);
 8002bca:	68b8      	ldr	r0, [r7, #8]
 8002bcc:	f000 f8b4 	bl	8002d38 <protocol_s_auth_pack_header>
 8002bd0:	60f8      	str	r0, [r7, #12]

      if (status == PROTOCOL_SUCCESS)
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d122      	bne.n	8002c1e <protocol_s_extract+0xbe>
      { /* malloc memory size equal to header size adding data size */
        rcvd->state = UNPACK_PACK_STAGE_RECV_DATA;
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	2202      	movs	r2, #2
 8002bdc:	f883 2020 	strb.w	r2, [r3, #32]
        rcvd->p_data = protocol_p_malloc(rcvd->total_num);
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	8bdb      	ldrh	r3, [r3, #30]
 8002be4:	4618      	mov	r0, r3
 8002be6:	f7fe ff5b 	bl	8001aa0 <protocol_p_malloc>
 8002bea:	4602      	mov	r2, r0
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	619a      	str	r2, [r3, #24]
        if (rcvd->p_data == NULL)
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	699b      	ldr	r3, [r3, #24]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d109      	bne.n	8002c0c <protocol_s_extract+0xac>
        {
          status = PROTOCOL_ERR_NOT_ENOUGH_MEM;
 8002bf8:	2302      	movs	r3, #2
 8002bfa:	60fb      	str	r3, [r7, #12]
          PROTOCOL_ERR_INFO_PRINTF(status, __FILE__, __LINE__);
 8002bfc:	f240 22f5 	movw	r2, #757	; 0x2f5
 8002c00:	493b      	ldr	r1, [pc, #236]	; (8002cf0 <protocol_s_extract+0x190>)
 8002c02:	68f8      	ldr	r0, [r7, #12]
 8002c04:	f000 f934 	bl	8002e70 <protocol_s_error_info_printf>
          return status;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	e06d      	b.n	8002ce8 <protocol_s_extract+0x188>
        }
        memset(rcvd->p_data, 0, rcvd->rcvd_num);
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	6998      	ldr	r0, [r3, #24]
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	8b9b      	ldrh	r3, [r3, #28]
 8002c14:	461a      	mov	r2, r3
 8002c16:	2100      	movs	r1, #0
 8002c18:	f011 f939 	bl	8013e8e <memset>
        /* this is a pseudo header, remove this from fifo */
        rcvd->state = UNPACK_PACK_STAGE_FIND_SOF;

        PROTOCOL_RCV_ERR_PRINTF("Pack header auth failure.");
      }
      break;
 8002c1c:	e056      	b.n	8002ccc <protocol_s_extract+0x16c>
      else if (status == PROTOCOL_ERR_AUTH_FAILURE)
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2b08      	cmp	r3, #8
 8002c22:	d153      	bne.n	8002ccc <protocol_s_extract+0x16c>
        fifo_s_get(&rcvd->fifo);
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	4618      	mov	r0, r3
 8002c28:	f010 f987 	bl	8012f3a <fifo_s_get>
        rcvd->state = UNPACK_PACK_STAGE_FIND_SOF;
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	f883 2020 	strb.w	r2, [r3, #32]
      break;
 8002c34:	e04a      	b.n	8002ccc <protocol_s_extract+0x16c>

    case UNPACK_PACK_STAGE_RECV_DATA:

      if (rcvd->p_data)
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	699b      	ldr	r3, [r3, #24]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d004      	beq.n	8002c48 <protocol_s_extract+0xe8>
      {
        status = protocol_s_fetch_pack_data(rcvd);
 8002c3e:	68b8      	ldr	r0, [r7, #8]
 8002c40:	f000 f8c0 	bl	8002dc4 <protocol_s_fetch_pack_data>
 8002c44:	60f8      	str	r0, [r7, #12]
 8002c46:	e007      	b.n	8002c58 <protocol_s_extract+0xf8>
      }
      else
      {
        status = PROTOCOL_ERR_NOT_ENOUGH_MEM;
 8002c48:	2302      	movs	r3, #2
 8002c4a:	60fb      	str	r3, [r7, #12]
        PROTOCOL_ERR_INFO_PRINTF(status, __FILE__, __LINE__);
 8002c4c:	f240 320e 	movw	r2, #782	; 0x30e
 8002c50:	4927      	ldr	r1, [pc, #156]	; (8002cf0 <protocol_s_extract+0x190>)
 8002c52:	68f8      	ldr	r0, [r7, #12]
 8002c54:	f000 f90c 	bl	8002e70 <protocol_s_error_info_printf>
      }

      if (status == PROTOCOL_SUCCESS)
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d138      	bne.n	8002cd0 <protocol_s_extract+0x170>
      {
        rcvd->state = UNPACK_PACK_STAGE_AUTH_PACK;
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	2203      	movs	r2, #3
 8002c62:	f883 2020 	strb.w	r2, [r3, #32]
      }

      break;
 8002c66:	e033      	b.n	8002cd0 <protocol_s_extract+0x170>

    case UNPACK_PACK_STAGE_AUTH_PACK:

      if (verify_crc32(rcvd->p_data, rcvd->total_num))
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	699a      	ldr	r2, [r3, #24]
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	8bdb      	ldrh	r3, [r3, #30]
 8002c70:	4619      	mov	r1, r3
 8002c72:	4610      	mov	r0, r2
 8002c74:	f010 fe9a 	bl	80139ac <verify_crc32>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d004      	beq.n	8002c88 <protocol_s_extract+0x128>
      {
        rcvd->state = UNPACK_PACK_STAGE_DATA_HANDLE;
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	2204      	movs	r2, #4
 8002c82:	f883 2020 	strb.w	r2, [r3, #32]
        protocol_p_free(rcvd->p_data);
        rcvd->state = UNPACK_PACK_STAGE_FIND_SOF;

        PROTOCOL_RCV_ERR_PRINTF("Pack data auth failure.");
      }
      break;
 8002c86:	e024      	b.n	8002cd2 <protocol_s_extract+0x172>
        rcvd->rcvd_num = 0;
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	839a      	strh	r2, [r3, #28]
        rcvd->total_num = 0;
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	2200      	movs	r2, #0
 8002c92:	83da      	strh	r2, [r3, #30]
        protocol_p_free(rcvd->p_data);
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	699b      	ldr	r3, [r3, #24]
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f7fe ff0d 	bl	8001ab8 <protocol_p_free>
        rcvd->state = UNPACK_PACK_STAGE_FIND_SOF;
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	f883 2020 	strb.w	r2, [r3, #32]
      break;
 8002ca6:	e014      	b.n	8002cd2 <protocol_s_extract+0x172>

    case UNPACK_PACK_STAGE_DATA_HANDLE:

      status = protocol_s_unpack_data_handle(obj);
 8002ca8:	6878      	ldr	r0, [r7, #4]
 8002caa:	f7ff feed 	bl	8002a88 <protocol_s_unpack_data_handle>
 8002cae:	60f8      	str	r0, [r7, #12]

      protocol_p_free(rcvd->p_data);
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	699b      	ldr	r3, [r3, #24]
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f7fe feff 	bl	8001ab8 <protocol_p_free>
      rcvd->state = UNPACK_PACK_STAGE_FIND_SOF;
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	f883 2020 	strb.w	r2, [r3, #32]
      break;
 8002cc2:	e006      	b.n	8002cd2 <protocol_s_extract+0x172>

    default:
      break;
 8002cc4:	bf00      	nop
 8002cc6:	e004      	b.n	8002cd2 <protocol_s_extract+0x172>
      break;
 8002cc8:	bf00      	nop
 8002cca:	e002      	b.n	8002cd2 <protocol_s_extract+0x172>
      break;
 8002ccc:	bf00      	nop
 8002cce:	e000      	b.n	8002cd2 <protocol_s_extract+0x172>
      break;
 8002cd0:	bf00      	nop
    }

    if (status == PROTOCOL_ERR_DATA_NOT_ENOUGH ||
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	2b0a      	cmp	r3, #10
 8002cd6:	d006      	beq.n	8002ce6 <protocol_s_extract+0x186>
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2b02      	cmp	r3, #2
 8002cdc:	d003      	beq.n	8002ce6 <protocol_s_extract+0x186>
        status == PROTOCOL_ERR_NOT_ENOUGH_MEM ||
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	2b09      	cmp	r3, #9
 8002ce2:	d000      	beq.n	8002ce6 <protocol_s_extract+0x186>
    switch (rcvd->state)
 8002ce4:	e750      	b.n	8002b88 <protocol_s_extract+0x28>
    {
      break; /* break from while */
    }
  }

  return status;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	3710      	adds	r7, #16
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}
 8002cf0:	080152ac 	.word	0x080152ac

08002cf4 <protocol_s_find_pack_header>:

//Find frame header
uint32_t protocol_s_find_pack_header(rcvd_desc_t *rcvd)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b084      	sub	sp, #16
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  uint32_t status;

  while (fifo_s_isempty(&rcvd->fifo) == 0)
 8002cfc:	e00e      	b.n	8002d1c <protocol_s_find_pack_header+0x28>
  { // if fifo not empty, loop
    if ((uint8_t)(fifo_s_preread(&rcvd->fifo, 0)) == PROTOCOL_HEADER)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2100      	movs	r1, #0
 8002d02:	4618      	mov	r0, r3
 8002d04:	f010 fa36 	bl	8013174 <fifo_s_preread>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	2baa      	cmp	r3, #170	; 0xaa
 8002d0c:	d102      	bne.n	8002d14 <protocol_s_find_pack_header+0x20>
    {
      status = PROTOCOL_SUCCESS;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	60fb      	str	r3, [r7, #12]
      goto END;
 8002d12:	e00c      	b.n	8002d2e <protocol_s_find_pack_header+0x3a>
    }
    else
    {
      fifo_s_get(&rcvd->fifo); //remove one byte from fifo
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	4618      	mov	r0, r3
 8002d18:	f010 f90f 	bl	8012f3a <fifo_s_get>
  while (fifo_s_isempty(&rcvd->fifo) == 0)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f010 fac4 	bl	80132ac <fifo_s_isempty>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d0e9      	beq.n	8002cfe <protocol_s_find_pack_header+0xa>
    }
  }
  //if fifo not empty, loop

  status = PROTOCOL_ERR_NOT_FIND_HEADER;
 8002d2a:	2309      	movs	r3, #9
 8002d2c:	60fb      	str	r3, [r7, #12]

END:
  return status;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	3710      	adds	r7, #16
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}

08002d38 <protocol_s_auth_pack_header>:

//Verification header
uint32_t protocol_s_auth_pack_header(rcvd_desc_t *rcvd)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b088      	sub	sp, #32
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  uint32_t status;
  uint8_t auth_array[12];
  ver_data_len_t ver_len;

  if (fifo_s_prereads(&rcvd->fifo, (char *)auth_array, 0, 12) == 12)
 8002d40:	6878      	ldr	r0, [r7, #4]
 8002d42:	f107 0110 	add.w	r1, r7, #16
 8002d46:	230c      	movs	r3, #12
 8002d48:	2200      	movs	r2, #0
 8002d4a:	f010 fa3a 	bl	80131c2 <fifo_s_prereads>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	2b0c      	cmp	r3, #12
 8002d52:	d130      	bne.n	8002db6 <protocol_s_auth_pack_header+0x7e>
  {
    ver_len = protocol_s_get_ver_datalen(auth_array);
 8002d54:	f107 0310 	add.w	r3, r7, #16
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f000 f862 	bl	8002e22 <protocol_s_get_ver_datalen>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	81bb      	strh	r3, [r7, #12]
    if (ver_len.data_len - PROTOCOL_PACK_HEAD_TAIL_SIZE > PROTOCOL_MAX_DATA_LEN)
 8002d62:	89bb      	ldrh	r3, [r7, #12]
 8002d64:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d68:	b29b      	uxth	r3, r3
 8002d6a:	3b10      	subs	r3, #16
 8002d6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d70:	d902      	bls.n	8002d78 <protocol_s_auth_pack_header+0x40>
    {
      status = PROTOCOL_ERR_AUTH_FAILURE;
 8002d72:	2308      	movs	r3, #8
 8002d74:	61fb      	str	r3, [r7, #28]
 8002d76:	e020      	b.n	8002dba <protocol_s_auth_pack_header+0x82>
    }
    else
    {
      if ((ver_len.version == 0) && (verify_crc16(auth_array, 12) == 1))
 8002d78:	7b7b      	ldrb	r3, [r7, #13]
 8002d7a:	f023 0303 	bic.w	r3, r3, #3
 8002d7e:	b2db      	uxtb	r3, r3
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d115      	bne.n	8002db0 <protocol_s_auth_pack_header+0x78>
 8002d84:	f107 0310 	add.w	r3, r7, #16
 8002d88:	210c      	movs	r1, #12
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f010 fd84 	bl	8013898 <verify_crc16>
 8002d90:	4603      	mov	r3, r0
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d10c      	bne.n	8002db0 <protocol_s_auth_pack_header+0x78>
      {
        status = PROTOCOL_SUCCESS;
 8002d96:	2300      	movs	r3, #0
 8002d98:	61fb      	str	r3, [r7, #28]
        rcvd->total_num = ver_len.data_len;
 8002d9a:	89bb      	ldrh	r3, [r7, #12]
 8002d9c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002da0:	b29b      	uxth	r3, r3
 8002da2:	461a      	mov	r2, r3
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	83da      	strh	r2, [r3, #30]
        rcvd->rcvd_num = 0;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2200      	movs	r2, #0
 8002dac:	839a      	strh	r2, [r3, #28]
 8002dae:	e004      	b.n	8002dba <protocol_s_auth_pack_header+0x82>
      }
      else
      {
        status = PROTOCOL_ERR_AUTH_FAILURE;
 8002db0:	2308      	movs	r3, #8
 8002db2:	61fb      	str	r3, [r7, #28]
 8002db4:	e001      	b.n	8002dba <protocol_s_auth_pack_header+0x82>
      }
    }
  }
  else
  {
    status = PROTOCOL_ERR_DATA_NOT_ENOUGH;
 8002db6:	230a      	movs	r3, #10
 8002db8:	61fb      	str	r3, [r7, #28]
  }

  return status;
 8002dba:	69fb      	ldr	r3, [r7, #28]
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3720      	adds	r7, #32
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}

08002dc4 <protocol_s_fetch_pack_data>:

//Get package data
uint32_t protocol_s_fetch_pack_data(rcvd_desc_t *rcvd)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b086      	sub	sp, #24
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  uint32_t status;
  uint32_t length;
  uint32_t want_len;

  want_len = rcvd->total_num - rcvd->rcvd_num;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	8bdb      	ldrh	r3, [r3, #30]
 8002dd0:	461a      	mov	r2, r3
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	8b9b      	ldrh	r3, [r3, #28]
 8002dd6:	1ad3      	subs	r3, r2, r3
 8002dd8:	613b      	str	r3, [r7, #16]
  length = fifo_s_gets(&rcvd->fifo,
 8002dda:	6878      	ldr	r0, [r7, #4]
                       (char *)rcvd->p_data + rcvd->rcvd_num,
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	699b      	ldr	r3, [r3, #24]
 8002de0:	687a      	ldr	r2, [r7, #4]
 8002de2:	8b92      	ldrh	r2, [r2, #28]
  length = fifo_s_gets(&rcvd->fifo,
 8002de4:	4413      	add	r3, r2
 8002de6:	693a      	ldr	r2, [r7, #16]
 8002de8:	4619      	mov	r1, r3
 8002dea:	f010 f8db 	bl	8012fa4 <fifo_s_gets>
 8002dee:	4603      	mov	r3, r0
 8002df0:	60fb      	str	r3, [r7, #12]
                       want_len);
  rcvd->rcvd_num += length;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	8b9a      	ldrh	r2, [r3, #28]
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	b29b      	uxth	r3, r3
 8002dfa:	4413      	add	r3, r2
 8002dfc:	b29a      	uxth	r2, r3
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	839a      	strh	r2, [r3, #28]

  if (rcvd->rcvd_num < rcvd->total_num)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	8b9a      	ldrh	r2, [r3, #28]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	8bdb      	ldrh	r3, [r3, #30]
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	d202      	bcs.n	8002e14 <protocol_s_fetch_pack_data+0x50>
  {
    status = PROTOCOL_ERR_DATA_NOT_ENOUGH;
 8002e0e:	230a      	movs	r3, #10
 8002e10:	617b      	str	r3, [r7, #20]
 8002e12:	e001      	b.n	8002e18 <protocol_s_fetch_pack_data+0x54>
  }
  else
  {
    status = PROTOCOL_SUCCESS;
 8002e14:	2300      	movs	r3, #0
 8002e16:	617b      	str	r3, [r7, #20]
  }
  return status;
 8002e18:	697b      	ldr	r3, [r7, #20]
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3718      	adds	r7, #24
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}

08002e22 <protocol_s_get_ver_datalen>:

//Get version number and data length
ver_data_len_t protocol_s_get_ver_datalen(void *pack)

{
 8002e22:	b480      	push	{r7}
 8002e24:	b087      	sub	sp, #28
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	6078      	str	r0, [r7, #4]
  ver_data_len_t ver_len;
  uint16_t *tmp = (uint16_t *)&ver_len;
 8002e2a:	f107 0308 	add.w	r3, r7, #8
 8002e2e:	617b      	str	r3, [r7, #20]
  uint8_t *ptr = (uint8_t *)pack;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	613b      	str	r3, [r7, #16]

  *tmp = ptr[2] << 8 | ptr[1];
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	3302      	adds	r3, #2
 8002e38:	781b      	ldrb	r3, [r3, #0]
 8002e3a:	021b      	lsls	r3, r3, #8
 8002e3c:	b21a      	sxth	r2, r3
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	3301      	adds	r3, #1
 8002e42:	781b      	ldrb	r3, [r3, #0]
 8002e44:	b21b      	sxth	r3, r3
 8002e46:	4313      	orrs	r3, r2
 8002e48:	b21b      	sxth	r3, r3
 8002e4a:	b29a      	uxth	r2, r3
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	801a      	strh	r2, [r3, #0]

  return ver_len;
 8002e50:	893b      	ldrh	r3, [r7, #8]
 8002e52:	81bb      	strh	r3, [r7, #12]
 8002e54:	2300      	movs	r3, #0
 8002e56:	7b3a      	ldrb	r2, [r7, #12]
 8002e58:	f362 0307 	bfi	r3, r2, #0, #8
 8002e5c:	7b7a      	ldrb	r2, [r7, #13]
 8002e5e:	f362 230f 	bfi	r3, r2, #8, #8
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	371c      	adds	r7, #28
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr
	...

08002e70 <protocol_s_error_info_printf>:

//Accept error message
void protocol_s_error_info_printf(uint32_t status, char *file, int line)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b087      	sub	sp, #28
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	60f8      	str	r0, [r7, #12]
 8002e78:	60b9      	str	r1, [r7, #8]
 8002e7a:	607a      	str	r2, [r7, #4]
  char *err_info;
  switch (status)
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2b12      	cmp	r3, #18
 8002e80:	d861      	bhi.n	8002f46 <protocol_s_error_info_printf+0xd6>
 8002e82:	a201      	add	r2, pc, #4	; (adr r2, 8002e88 <protocol_s_error_info_printf+0x18>)
 8002e84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e88:	08002ed5 	.word	0x08002ed5
 8002e8c:	08002edb 	.word	0x08002edb
 8002e90:	08002ee1 	.word	0x08002ee1
 8002e94:	08002ee7 	.word	0x08002ee7
 8002e98:	08002eed 	.word	0x08002eed
 8002e9c:	08002ef3 	.word	0x08002ef3
 8002ea0:	08002ef9 	.word	0x08002ef9
 8002ea4:	08002eff 	.word	0x08002eff
 8002ea8:	08002f05 	.word	0x08002f05
 8002eac:	08002f0b 	.word	0x08002f0b
 8002eb0:	08002f11 	.word	0x08002f11
 8002eb4:	08002f17 	.word	0x08002f17
 8002eb8:	08002f1d 	.word	0x08002f1d
 8002ebc:	08002f23 	.word	0x08002f23
 8002ec0:	08002f29 	.word	0x08002f29
 8002ec4:	08002f2f 	.word	0x08002f2f
 8002ec8:	08002f35 	.word	0x08002f35
 8002ecc:	08002f3b 	.word	0x08002f3b
 8002ed0:	08002f41 	.word	0x08002f41
  {
  case PROTOCOL_SUCCESS:
    err_info = "PROTOCOL_SUCCESS";
 8002ed4:	4b20      	ldr	r3, [pc, #128]	; (8002f58 <protocol_s_error_info_printf+0xe8>)
 8002ed6:	617b      	str	r3, [r7, #20]
    break;
 8002ed8:	e037      	b.n	8002f4a <protocol_s_error_info_printf+0xda>
  case PROTOCOL_ERR_DATA_TOO_LONG:
    err_info = "PROTOCOL_ERR_DATA_TOO_LONG";
 8002eda:	4b20      	ldr	r3, [pc, #128]	; (8002f5c <protocol_s_error_info_printf+0xec>)
 8002edc:	617b      	str	r3, [r7, #20]
    break;
 8002ede:	e034      	b.n	8002f4a <protocol_s_error_info_printf+0xda>
  case PROTOCOL_ERR_NOT_ENOUGH_MEM:
    err_info = "PROTOCOL_ERR_NOT_ENOUGH_MEM";
 8002ee0:	4b1f      	ldr	r3, [pc, #124]	; (8002f60 <protocol_s_error_info_printf+0xf0>)
 8002ee2:	617b      	str	r3, [r7, #20]
    break;
 8002ee4:	e031      	b.n	8002f4a <protocol_s_error_info_printf+0xda>
  case PROTOCOL_ERR_SESSION_NOT_FOUND:
    err_info = "PROTOCOL_ERR_SESSION_NOT_FOUND";
 8002ee6:	4b1f      	ldr	r3, [pc, #124]	; (8002f64 <protocol_s_error_info_printf+0xf4>)
 8002ee8:	617b      	str	r3, [r7, #20]
    break;
 8002eea:	e02e      	b.n	8002f4a <protocol_s_error_info_printf+0xda>
  case PROTOCOL_ERR_SESSION_FULL:
    err_info = "PROTOCOL_ERR_SESSION_FULL";
 8002eec:	4b1e      	ldr	r3, [pc, #120]	; (8002f68 <protocol_s_error_info_printf+0xf8>)
 8002eee:	617b      	str	r3, [r7, #20]
    break;
 8002ef0:	e02b      	b.n	8002f4a <protocol_s_error_info_printf+0xda>
  case PROTOCOL_ERR_SESSION_IS_USE:
    err_info = "PROTOCOL_ERR_SESSION_IS_USE";
 8002ef2:	4b1e      	ldr	r3, [pc, #120]	; (8002f6c <protocol_s_error_info_printf+0xfc>)
 8002ef4:	617b      	str	r3, [r7, #20]
    break;
 8002ef6:	e028      	b.n	8002f4a <protocol_s_error_info_printf+0xda>
  case PROTOCOL_ERR_ROUTE_NOT_FOUND:
    err_info = "PROTOCOL_ERR_ROUTE_NOT_FOUND";
 8002ef8:	4b1d      	ldr	r3, [pc, #116]	; (8002f70 <protocol_s_error_info_printf+0x100>)
 8002efa:	617b      	str	r3, [r7, #20]
    break;
 8002efc:	e025      	b.n	8002f4a <protocol_s_error_info_printf+0xda>
  case PROTOCOL_ERR_FIFO_EMPTY:
    err_info = "PROTOCOL_ERR_FIFO_EMPTY";
 8002efe:	4b1d      	ldr	r3, [pc, #116]	; (8002f74 <protocol_s_error_info_printf+0x104>)
 8002f00:	617b      	str	r3, [r7, #20]
    break;
 8002f02:	e022      	b.n	8002f4a <protocol_s_error_info_printf+0xda>
  case PROTOCOL_ERR_AUTH_FAILURE:
    err_info = "PROTOCOL_ERR_AUTH_FAILURE";
 8002f04:	4b1c      	ldr	r3, [pc, #112]	; (8002f78 <protocol_s_error_info_printf+0x108>)
 8002f06:	617b      	str	r3, [r7, #20]
    break;
 8002f08:	e01f      	b.n	8002f4a <protocol_s_error_info_printf+0xda>
  case PROTOCOL_ERR_NOT_FIND_HEADER:
    err_info = "PROTOCOL_ERR_NOT_FIND_HEADER";
 8002f0a:	4b1c      	ldr	r3, [pc, #112]	; (8002f7c <protocol_s_error_info_printf+0x10c>)
 8002f0c:	617b      	str	r3, [r7, #20]
    break;
 8002f0e:	e01c      	b.n	8002f4a <protocol_s_error_info_printf+0xda>
  case PROTOCOL_ERR_DATA_NOT_ENOUGH:
    err_info = "PROTOCOL_ERR_DATA_NOT_ENOUGH";
 8002f10:	4b1b      	ldr	r3, [pc, #108]	; (8002f80 <protocol_s_error_info_printf+0x110>)
 8002f12:	617b      	str	r3, [r7, #20]
    break;
 8002f14:	e019      	b.n	8002f4a <protocol_s_error_info_printf+0xda>
  case PROTOCOL_ERR_FIFO_FULL:
    err_info = "PROTOCOL_ERR_FIFO_FULL";
 8002f16:	4b1b      	ldr	r3, [pc, #108]	; (8002f84 <protocol_s_error_info_printf+0x114>)
 8002f18:	617b      	str	r3, [r7, #20]
    break;
 8002f1a:	e016      	b.n	8002f4a <protocol_s_error_info_printf+0xda>
  case PROTOCOL_ERR_OBJECT_NOT_FOUND:
    err_info = "PROTOCOL_ERR_OBJECT_NOT_FOUND";
 8002f1c:	4b1a      	ldr	r3, [pc, #104]	; (8002f88 <protocol_s_error_info_printf+0x118>)
 8002f1e:	617b      	str	r3, [r7, #20]
    break;
 8002f20:	e013      	b.n	8002f4a <protocol_s_error_info_printf+0xda>
  case PROTOCOL_ERR_UNSUPPORT_CPU:
    err_info = "PROTOCOL_ERR_UNSUPPORT_CPU";
 8002f22:	4b1a      	ldr	r3, [pc, #104]	; (8002f8c <protocol_s_error_info_printf+0x11c>)
 8002f24:	617b      	str	r3, [r7, #20]
    break;
 8002f26:	e010      	b.n	8002f4a <protocol_s_error_info_printf+0xda>
  case PROTOCOL_ERR_ROUTEU_SET_BEYOND:
    err_info = "PROTOCOL_ERR_ROUTEU_SET_BEYOND";
 8002f28:	4b19      	ldr	r3, [pc, #100]	; (8002f90 <protocol_s_error_info_printf+0x120>)
 8002f2a:	617b      	str	r3, [r7, #20]
    break;
 8002f2c:	e00d      	b.n	8002f4a <protocol_s_error_info_printf+0xda>
  case PROTOCOL_ERR_INTER_NOT_FOUND:
    err_info = "PROTOCOL_ERR_INTER_NOT_FOUND";
 8002f2e:	4b19      	ldr	r3, [pc, #100]	; (8002f94 <protocol_s_error_info_printf+0x124>)
 8002f30:	617b      	str	r3, [r7, #20]
    break;
 8002f32:	e00a      	b.n	8002f4a <protocol_s_error_info_printf+0xda>
  case PROTOCOL_ERR_PROTOCOL_NOT_INIT:
    err_info = "PROTOCOL_ERR_PROTOCOL_NOT_INIT";
 8002f34:	4b18      	ldr	r3, [pc, #96]	; (8002f98 <protocol_s_error_info_printf+0x128>)
 8002f36:	617b      	str	r3, [r7, #20]
    break;
 8002f38:	e007      	b.n	8002f4a <protocol_s_error_info_printf+0xda>
  case PROTOCOL_ERR_SESSION_ERROR:
    err_info = "PROTOCOL_ERR_SESSION_ERROR(Boardcast session can only be 0)";
 8002f3a:	4b18      	ldr	r3, [pc, #96]	; (8002f9c <protocol_s_error_info_printf+0x12c>)
 8002f3c:	617b      	str	r3, [r7, #20]
    break;
 8002f3e:	e004      	b.n	8002f4a <protocol_s_error_info_printf+0xda>
  case PROTOCOL_ERR_REGISTER_FAILED:
    err_info = "PROTOCOL_ERR_REGISTER_FAILED";
 8002f40:	4b17      	ldr	r3, [pc, #92]	; (8002fa0 <protocol_s_error_info_printf+0x130>)
 8002f42:	617b      	str	r3, [r7, #20]
    break;
 8002f44:	e001      	b.n	8002f4a <protocol_s_error_info_printf+0xda>
  default:
    err_info = "PROTOCOL_ERR_NOT_FOUND";
 8002f46:	4b17      	ldr	r3, [pc, #92]	; (8002fa4 <protocol_s_error_info_printf+0x134>)
 8002f48:	617b      	str	r3, [r7, #20]
  }
  protocol_log_e("%s[%u].(File:%s,Line:%d)",
                 err_info, status, file, line);

  return;
 8002f4a:	bf00      	nop
}
 8002f4c:	371c      	adds	r7, #28
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f54:	4770      	bx	lr
 8002f56:	bf00      	nop
 8002f58:	080152d8 	.word	0x080152d8
 8002f5c:	080152ec 	.word	0x080152ec
 8002f60:	08015308 	.word	0x08015308
 8002f64:	08015324 	.word	0x08015324
 8002f68:	08015344 	.word	0x08015344
 8002f6c:	08015360 	.word	0x08015360
 8002f70:	0801537c 	.word	0x0801537c
 8002f74:	0801539c 	.word	0x0801539c
 8002f78:	080153b4 	.word	0x080153b4
 8002f7c:	080153d0 	.word	0x080153d0
 8002f80:	080153f0 	.word	0x080153f0
 8002f84:	08015410 	.word	0x08015410
 8002f88:	08015428 	.word	0x08015428
 8002f8c:	08015448 	.word	0x08015448
 8002f90:	08015464 	.word	0x08015464
 8002f94:	08015484 	.word	0x08015484
 8002f98:	080154a4 	.word	0x080154a4
 8002f9c:	080154c4 	.word	0x080154c4
 8002fa0:	08015500 	.word	0x08015500
 8002fa4:	08015520 	.word	0x08015520

08002fa8 <can1_motor_msg_rec>:
#include "communicate.h"
#include "timer_task.h"
#include "offline_check.h"

int32_t can1_motor_msg_rec(CAN_RxHeaderTypeDef *header, uint8_t *data)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b082      	sub	sp, #8
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
 8002fb0:	6039      	str	r1, [r7, #0]
  motor_device_data_update(DEVICE_CAN1, header->StdId, data);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	b29b      	uxth	r3, r3
 8002fb8:	683a      	ldr	r2, [r7, #0]
 8002fba:	4619      	mov	r1, r3
 8002fbc:	2000      	movs	r0, #0
 8002fbe:	f00f f94f 	bl	8012260 <motor_device_data_update>
  return 0;
 8002fc2:	2300      	movs	r3, #0
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	3708      	adds	r7, #8
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}

08002fcc <motor_canstd_send>:

int32_t motor_canstd_send(enum device_can can, struct can_msg msg)
{
 8002fcc:	b084      	sub	sp, #16
 8002fce:	b590      	push	{r4, r7, lr}
 8002fd0:	b083      	sub	sp, #12
 8002fd2:	af00      	add	r7, sp, #0
 8002fd4:	4604      	mov	r4, r0
 8002fd6:	f107 001c 	add.w	r0, r7, #28
 8002fda:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8002fde:	4623      	mov	r3, r4
 8002fe0:	71fb      	strb	r3, [r7, #7]
  if (can == DEVICE_CAN1)
 8002fe2:	79fb      	ldrb	r3, [r7, #7]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d10c      	bne.n	8003002 <motor_canstd_send+0x36>
    can_msg_bytes_send(&hcan1, msg.data, 8, msg.id);
 8002fe8:	69fb      	ldr	r3, [r7, #28]
 8002fea:	f3c3 031c 	ubfx	r3, r3, #0, #29
 8002fee:	b29a      	uxth	r2, r3
 8002ff0:	f107 031c 	add.w	r3, r7, #28
 8002ff4:	f103 0108 	add.w	r1, r3, #8
 8002ff8:	4613      	mov	r3, r2
 8002ffa:	2208      	movs	r2, #8
 8002ffc:	4805      	ldr	r0, [pc, #20]	; (8003014 <motor_canstd_send+0x48>)
 8002ffe:	f000 f8df 	bl	80031c0 <can_msg_bytes_send>
  return 0;
 8003002:	2300      	movs	r3, #0
}
 8003004:	4618      	mov	r0, r3
 8003006:	370c      	adds	r7, #12
 8003008:	46bd      	mov	sp, r7
 800300a:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800300e:	b004      	add	sp, #16
 8003010:	4770      	bx	lr
 8003012:	bf00      	nop
 8003014:	20001f30 	.word	0x20001f30

08003018 <get_time_us>:
//     }
//   }
// }

uint32_t get_time_us(void)
{
 8003018:	b480      	push	{r7}
 800301a:	af00      	add	r7, sp, #0
  return TIM5->CNT;
 800301c:	4b03      	ldr	r3, [pc, #12]	; (800302c <get_time_us+0x14>)
 800301e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8003020:	4618      	mov	r0, r3
 8003022:	46bd      	mov	sp, r7
 8003024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003028:	4770      	bx	lr
 800302a:	bf00      	nop
 800302c:	40000c00 	.word	0x40000c00

08003030 <get_time_ms>:

uint32_t get_time_ms(void)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8003034:	f002 f922 	bl	800527c <HAL_GetTick>
 8003038:	4603      	mov	r3, r0
}
 800303a:	4618      	mov	r0, r3
 800303c:	bd80      	pop	{r7, pc}
	...

08003040 <get_time_ms_us>:

float get_time_ms_us(void)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	ed2d 8b02 	vpush	{d8}
 8003046:	af00      	add	r7, sp, #0
  return get_time_ms() + get_time_us() / 1000.0f;
 8003048:	f7ff fff2 	bl	8003030 <get_time_ms>
 800304c:	ee07 0a90 	vmov	s15, r0
 8003050:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8003054:	f7ff ffe0 	bl	8003018 <get_time_us>
 8003058:	ee07 0a90 	vmov	s15, r0
 800305c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003060:	eddf 6a05 	vldr	s13, [pc, #20]	; 8003078 <get_time_ms_us+0x38>
 8003064:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003068:	ee78 7a27 	vadd.f32	s15, s16, s15
}
 800306c:	eeb0 0a67 	vmov.f32	s0, s15
 8003070:	46bd      	mov	sp, r7
 8003072:	ecbd 8b02 	vpop	{d8}
 8003076:	bd80      	pop	{r7, pc}
 8003078:	447a0000 	.word	0x447a0000

0800307c <motor_can1_output_1ms>:

int32_t motor_can1_output_1ms(void *argc)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b082      	sub	sp, #8
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  motor_device_can_output(DEVICE_CAN1);
 8003084:	2000      	movs	r0, #0
 8003086:	f00e fff5 	bl	8012074 <motor_device_can_output>
  return 0;
 800308a:	2300      	movs	r3, #0
}
 800308c:	4618      	mov	r0, r3
 800308e:	3708      	adds	r7, #8
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}

08003094 <board_config>:

void board_config(void)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	af00      	add	r7, sp, #0
  soft_timer_init();
 8003098:	f010 fd42 	bl	8013b20 <soft_timer_init>

  usart6_manage_init();
 800309c:	f000 ff0e 	bl	8003ebc <usart6_manage_init>
  can_manage_init();
 80030a0:	f000 f828 	bl	80030f4 <can_manage_init>
  pwm_device_init();
 80030a4:	f000 fe3c 	bl	8003d20 <pwm_device_init>
  mpu_device_init();
 80030a8:	f000 fc1a 	bl	80038e0 <mpu_device_init>

  soft_timer_register(motor_can1_output_1ms, NULL, 1);
 80030ac:	2201      	movs	r2, #1
 80030ae:	2100      	movs	r1, #0
 80030b0:	480a      	ldr	r0, [pc, #40]	; (80030dc <board_config+0x48>)
 80030b2:	f7fe fa03 	bl	80014bc <soft_timer_register>
  soft_timer_register(beep_ctrl_times, NULL, 1);  
 80030b6:	2201      	movs	r2, #1
 80030b8:	2100      	movs	r1, #0
 80030ba:	4809      	ldr	r0, [pc, #36]	; (80030e0 <board_config+0x4c>)
 80030bc:	f7fe f9fe 	bl	80014bc <soft_timer_register>
  soft_timer_register(led_toggle_300ms, NULL, 1); 
 80030c0:	2201      	movs	r2, #1
 80030c2:	2100      	movs	r1, #0
 80030c4:	4807      	ldr	r0, [pc, #28]	; (80030e4 <board_config+0x50>)
 80030c6:	f7fe f9f9 	bl	80014bc <soft_timer_register>

  motor_device_can_send_register(motor_canstd_send);
 80030ca:	4807      	ldr	r0, [pc, #28]	; (80030e8 <board_config+0x54>)
 80030cc:	f00e ff4e 	bl	8011f6c <motor_device_can_send_register>

  can_fifo0_rx_callback_register(&can1_manage, can1_motor_msg_rec);
 80030d0:	4906      	ldr	r1, [pc, #24]	; (80030ec <board_config+0x58>)
 80030d2:	4807      	ldr	r0, [pc, #28]	; (80030f0 <board_config+0x5c>)
 80030d4:	f000 f920 	bl	8003318 <can_fifo0_rx_callback_register>
}
 80030d8:	bf00      	nop
 80030da:	bd80      	pop	{r7, pc}
 80030dc:	0800307d 	.word	0x0800307d
 80030e0:	08003da5 	.word	0x08003da5
 80030e4:	08003e51 	.word	0x08003e51
 80030e8:	08002fcd 	.word	0x08002fcd
 80030ec:	08002fa9 	.word	0x08002fa9
 80030f0:	20001258 	.word	0x20001258

080030f4 <can_manage_init>:
struct can_manage_obj can1_manage;

static uint8_t can1_tx_fifo_buff[CAN1_TX_FIFO_SIZE];

void can_manage_init(void)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b08c      	sub	sp, #48	; 0x30
 80030f8:	af00      	add	r7, sp, #0
  can1_manage.is_sending = 0;
 80030fa:	4b2d      	ldr	r3, [pc, #180]	; (80031b0 <can_manage_init+0xbc>)
 80030fc:	2200      	movs	r2, #0
 80030fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  can1_manage.hcan = &hcan1;
 8003102:	4b2b      	ldr	r3, [pc, #172]	; (80031b0 <can_manage_init+0xbc>)
 8003104:	4a2b      	ldr	r2, [pc, #172]	; (80031b4 <can_manage_init+0xc0>)
 8003106:	601a      	str	r2, [r3, #0]

  for (int i = 0; i < MAX_CAN_REGISTER_NUM; i++)
 8003108:	2300      	movs	r3, #0
 800310a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800310c:	e008      	b.n	8003120 <can_manage_init+0x2c>
  {
    can1_manage.can_rec_callback[i] = NULL;
 800310e:	4a28      	ldr	r2, [pc, #160]	; (80031b0 <can_manage_init+0xbc>)
 8003110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003112:	330a      	adds	r3, #10
 8003114:	2100      	movs	r1, #0
 8003116:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (int i = 0; i < MAX_CAN_REGISTER_NUM; i++)
 800311a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800311c:	3301      	adds	r3, #1
 800311e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003122:	2b04      	cmp	r3, #4
 8003124:	ddf3      	ble.n	800310e <can_manage_init+0x1a>
  }

  fifo_init(&(can1_manage.tx_fifo),
 8003126:	2340      	movs	r3, #64	; 0x40
 8003128:	2210      	movs	r2, #16
 800312a:	4923      	ldr	r1, [pc, #140]	; (80031b8 <can_manage_init+0xc4>)
 800312c:	4823      	ldr	r0, [pc, #140]	; (80031bc <can_manage_init+0xc8>)
 800312e:	f010 f8ce 	bl	80132ce <fifo_init>
            can1_tx_fifo_buff,
            sizeof(struct can_std_msg),
            CAN1_TX_FIFO_UNIT_NUM);

  CAN_FilterTypeDef can_filter_st;
  can_filter_st.FilterActivation = ENABLE;
 8003132:	2301      	movs	r3, #1
 8003134:	627b      	str	r3, [r7, #36]	; 0x24
  can_filter_st.FilterMode = CAN_FILTERMODE_IDMASK;
 8003136:	2300      	movs	r3, #0
 8003138:	61fb      	str	r3, [r7, #28]
  can_filter_st.FilterScale = CAN_FILTERSCALE_32BIT;
 800313a:	2301      	movs	r3, #1
 800313c:	623b      	str	r3, [r7, #32]
  can_filter_st.FilterIdHigh = 0x0000;
 800313e:	2300      	movs	r3, #0
 8003140:	607b      	str	r3, [r7, #4]
  can_filter_st.FilterIdLow = 0x0000;
 8003142:	2300      	movs	r3, #0
 8003144:	60bb      	str	r3, [r7, #8]
  can_filter_st.FilterMaskIdHigh = 0x0000;
 8003146:	2300      	movs	r3, #0
 8003148:	60fb      	str	r3, [r7, #12]
  can_filter_st.FilterMaskIdLow = 0x0000;
 800314a:	2300      	movs	r3, #0
 800314c:	613b      	str	r3, [r7, #16]
  can_filter_st.FilterBank = 0;
 800314e:	2300      	movs	r3, #0
 8003150:	61bb      	str	r3, [r7, #24]
  can_filter_st.FilterFIFOAssignment = CAN_RX_FIFO0;
 8003152:	2300      	movs	r3, #0
 8003154:	617b      	str	r3, [r7, #20]
  HAL_CAN_ConfigFilter(&hcan1, &can_filter_st);
 8003156:	1d3b      	adds	r3, r7, #4
 8003158:	4619      	mov	r1, r3
 800315a:	4816      	ldr	r0, [pc, #88]	; (80031b4 <can_manage_init+0xc0>)
 800315c:	f002 f9ba 	bl	80054d4 <HAL_CAN_ConfigFilter>
  HAL_CAN_Start(&hcan1);
 8003160:	4814      	ldr	r0, [pc, #80]	; (80031b4 <can_manage_init+0xc0>)
 8003162:	f002 fa97 	bl	8005694 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8003166:	2102      	movs	r1, #2
 8003168:	4812      	ldr	r0, [pc, #72]	; (80031b4 <can_manage_init+0xc0>)
 800316a:	f002 fcfe 	bl	8005b6a <HAL_CAN_ActivateNotification>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_TX_MAILBOX_EMPTY);
 800316e:	2101      	movs	r1, #1
 8003170:	4810      	ldr	r0, [pc, #64]	; (80031b4 <can_manage_init+0xc0>)
 8003172:	f002 fcfa 	bl	8005b6a <HAL_CAN_ActivateNotification>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_ERROR);
 8003176:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800317a:	480e      	ldr	r0, [pc, #56]	; (80031b4 <can_manage_init+0xc0>)
 800317c:	f002 fcf5 	bl	8005b6a <HAL_CAN_ActivateNotification>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_ERROR_WARNING);
 8003180:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003184:	480b      	ldr	r0, [pc, #44]	; (80031b4 <can_manage_init+0xc0>)
 8003186:	f002 fcf0 	bl	8005b6a <HAL_CAN_ActivateNotification>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_BUSOFF);
 800318a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800318e:	4809      	ldr	r0, [pc, #36]	; (80031b4 <can_manage_init+0xc0>)
 8003190:	f002 fceb 	bl	8005b6a <HAL_CAN_ActivateNotification>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_ERROR_PASSIVE);
 8003194:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003198:	4806      	ldr	r0, [pc, #24]	; (80031b4 <can_manage_init+0xc0>)
 800319a:	f002 fce6 	bl	8005b6a <HAL_CAN_ActivateNotification>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_LAST_ERROR_CODE);
 800319e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80031a2:	4804      	ldr	r0, [pc, #16]	; (80031b4 <can_manage_init+0xc0>)
 80031a4:	f002 fce1 	bl	8005b6a <HAL_CAN_ActivateNotification>

  return;
 80031a8:	bf00      	nop
}
 80031aa:	3730      	adds	r7, #48	; 0x30
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}
 80031b0:	20001258 	.word	0x20001258
 80031b4:	20001f30 	.word	0x20001f30
 80031b8:	20001294 	.word	0x20001294
 80031bc:	2000125c 	.word	0x2000125c

080031c0 <can_msg_bytes_send>:

uint32_t can_msg_bytes_send(CAN_HandleTypeDef *hcan,
                            uint8_t *data, uint16_t len, uint16_t std_id)
{
 80031c0:	b590      	push	{r4, r7, lr}
 80031c2:	b093      	sub	sp, #76	; 0x4c
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	60f8      	str	r0, [r7, #12]
 80031c8:	60b9      	str	r1, [r7, #8]
 80031ca:	4611      	mov	r1, r2
 80031cc:	461a      	mov	r2, r3
 80031ce:	460b      	mov	r3, r1
 80031d0:	80fb      	strh	r3, [r7, #6]
 80031d2:	4613      	mov	r3, r2
 80031d4:	80bb      	strh	r3, [r7, #4]
  uint8_t *send_ptr;
  uint16_t send_num;
  can_manage_obj_t m_obj;
  struct can_std_msg msg;

  send_ptr = data;
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	647b      	str	r3, [r7, #68]	; 0x44
  msg.std_id = std_id;
 80031da:	88bb      	ldrh	r3, [r7, #4]
 80031dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  send_num = 0;
 80031de:	2300      	movs	r3, #0
 80031e0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  if (hcan == &hcan1)
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	4a4a      	ldr	r2, [pc, #296]	; (8003310 <can_msg_bytes_send+0x150>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d102      	bne.n	80031f2 <can_msg_bytes_send+0x32>
  {
    m_obj = &can1_manage;
 80031ec:	4b49      	ldr	r3, [pc, #292]	; (8003314 <can_msg_bytes_send+0x154>)
 80031ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  else
  {
    return 0;
  }

  while (send_num < len)
 80031f0:	e044      	b.n	800327c <can_msg_bytes_send+0xbc>
    return 0;
 80031f2:	2300      	movs	r3, #0
 80031f4:	e088      	b.n	8003308 <can_msg_bytes_send+0x148>
  {
    if (fifo_is_full(&(m_obj->tx_fifo)))
 80031f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031f8:	3304      	adds	r3, #4
 80031fa:	4618      	mov	r0, r3
 80031fc:	f010 f962 	bl	80134c4 <fifo_is_full>
 8003200:	4603      	mov	r3, r0
 8003202:	2b00      	cmp	r3, #0
 8003204:	d004      	beq.n	8003210 <can_msg_bytes_send+0x50>
    {
      //can is error
      m_obj->is_sending = 0;
 8003206:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003208:	2200      	movs	r2, #0
 800320a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      break;
 800320e:	e03a      	b.n	8003286 <can_msg_bytes_send+0xc6>
    }

    if (len - send_num >= 8)
 8003210:	88fa      	ldrh	r2, [r7, #6]
 8003212:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003216:	1ad3      	subs	r3, r2, r3
 8003218:	2b07      	cmp	r3, #7
 800321a:	dd03      	ble.n	8003224 <can_msg_bytes_send+0x64>
    {
      msg.dlc = 8;
 800321c:	2308      	movs	r3, #8
 800321e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 8003222:	e008      	b.n	8003236 <can_msg_bytes_send+0x76>
    }
    else
    {
      msg.dlc = len - send_num;
 8003224:	88fb      	ldrh	r3, [r7, #6]
 8003226:	b2da      	uxtb	r2, r3
 8003228:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800322c:	b2db      	uxtb	r3, r3
 800322e:	1ad3      	subs	r3, r2, r3
 8003230:	b2db      	uxtb	r3, r3
 8003232:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    }

    //memcpy(msg.data, data, msg.dlc);
    *((uint32_t *)(msg.data)) = *((uint32_t *)(send_ptr));
 8003236:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800323a:	3305      	adds	r3, #5
 800323c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800323e:	6812      	ldr	r2, [r2, #0]
 8003240:	601a      	str	r2, [r3, #0]
    *((uint32_t *)(msg.data + 4)) = *((uint32_t *)(send_ptr + 4));
 8003242:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003246:	3305      	adds	r3, #5
 8003248:	3304      	adds	r3, #4
 800324a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800324c:	6852      	ldr	r2, [r2, #4]
 800324e:	601a      	str	r2, [r3, #0]

    send_ptr += msg.dlc;
 8003250:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8003254:	461a      	mov	r2, r3
 8003256:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003258:	4413      	add	r3, r2
 800325a:	647b      	str	r3, [r7, #68]	; 0x44
    send_num += msg.dlc;
 800325c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8003260:	b29a      	uxth	r2, r3
 8003262:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003266:	4413      	add	r3, r2
 8003268:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

    fifo_put(&(m_obj->tx_fifo), &msg);
 800326c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800326e:	3304      	adds	r3, #4
 8003270:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8003274:	4611      	mov	r1, r2
 8003276:	4618      	mov	r0, r3
 8003278:	f010 f853 	bl	8013322 <fifo_put>
  while (send_num < len)
 800327c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8003280:	88fb      	ldrh	r3, [r7, #6]
 8003282:	429a      	cmp	r2, r3
 8003284:	d3b7      	bcc.n	80031f6 <can_msg_bytes_send+0x36>
  }

  if ((m_obj->is_sending) == 0 && (!(fifo_is_empty(&(m_obj->tx_fifo)))))
 8003286:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003288:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800328c:	2b00      	cmp	r3, #0
 800328e:	d139      	bne.n	8003304 <can_msg_bytes_send+0x144>
 8003290:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003292:	3304      	adds	r3, #4
 8003294:	4618      	mov	r0, r3
 8003296:	f010 f904 	bl	80134a2 <fifo_is_empty>
 800329a:	4603      	mov	r3, r0
 800329c:	2b00      	cmp	r3, #0
 800329e:	d131      	bne.n	8003304 <can_msg_bytes_send+0x144>
  {
    CAN_TxHeaderTypeDef header;
    uint32_t send_mail_box;

    header.StdId = std_id;
 80032a0:	88bb      	ldrh	r3, [r7, #4]
 80032a2:	617b      	str	r3, [r7, #20]
    header.IDE = CAN_ID_STD;
 80032a4:	2300      	movs	r3, #0
 80032a6:	61fb      	str	r3, [r7, #28]
    header.RTR = CAN_RTR_DATA;
 80032a8:	2300      	movs	r3, #0
 80032aa:	623b      	str	r3, [r7, #32]

    while (HAL_CAN_GetTxMailboxesFreeLevel(m_obj->hcan) && (!(fifo_is_empty(&(m_obj->tx_fifo)))))
 80032ac:	e01a      	b.n	80032e4 <can_msg_bytes_send+0x124>
    {
      fifo_get(&(m_obj->tx_fifo), &msg);
 80032ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032b0:	3304      	adds	r3, #4
 80032b2:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80032b6:	4611      	mov	r1, r2
 80032b8:	4618      	mov	r0, r3
 80032ba:	f010 f878 	bl	80133ae <fifo_get>
      header.DLC = msg.dlc;
 80032be:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80032c2:	627b      	str	r3, [r7, #36]	; 0x24
      HAL_CAN_AddTxMessage(m_obj->hcan, &header, msg.data, &send_mail_box);
 80032c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032c6:	6818      	ldr	r0, [r3, #0]
 80032c8:	f107 0410 	add.w	r4, r7, #16
 80032cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80032d0:	1d5a      	adds	r2, r3, #5
 80032d2:	f107 0114 	add.w	r1, r7, #20
 80032d6:	4623      	mov	r3, r4
 80032d8:	f002 fa20 	bl	800571c <HAL_CAN_AddTxMessage>

      m_obj->is_sending = 1;
 80032dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032de:	2201      	movs	r2, #1
 80032e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    while (HAL_CAN_GetTxMailboxesFreeLevel(m_obj->hcan) && (!(fifo_is_empty(&(m_obj->tx_fifo)))))
 80032e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4618      	mov	r0, r3
 80032ea:	f002 fae7 	bl	80058bc <HAL_CAN_GetTxMailboxesFreeLevel>
 80032ee:	4603      	mov	r3, r0
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d007      	beq.n	8003304 <can_msg_bytes_send+0x144>
 80032f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032f6:	3304      	adds	r3, #4
 80032f8:	4618      	mov	r0, r3
 80032fa:	f010 f8d2 	bl	80134a2 <fifo_is_empty>
 80032fe:	4603      	mov	r3, r0
 8003300:	2b00      	cmp	r3, #0
 8003302:	d0d4      	beq.n	80032ae <can_msg_bytes_send+0xee>
    }
  }

  return send_num;
 8003304:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
}
 8003308:	4618      	mov	r0, r3
 800330a:	374c      	adds	r7, #76	; 0x4c
 800330c:	46bd      	mov	sp, r7
 800330e:	bd90      	pop	{r4, r7, pc}
 8003310:	20001f30 	.word	0x20001f30
 8003314:	20001258 	.word	0x20001258

08003318 <can_fifo0_rx_callback_register>:

int32_t can_fifo0_rx_callback_register(can_manage_obj_t m_obj, can_stdmsg_rx_callback_t fun)
{
 8003318:	b480      	push	{r7}
 800331a:	b085      	sub	sp, #20
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
 8003320:	6039      	str	r1, [r7, #0]
  for (int i = 0; i < MAX_CAN_REGISTER_NUM; i++)
 8003322:	2300      	movs	r3, #0
 8003324:	60fb      	str	r3, [r7, #12]
 8003326:	e011      	b.n	800334c <can_fifo0_rx_callback_register+0x34>
  {
    if (m_obj->can_rec_callback[i] == NULL)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	68fa      	ldr	r2, [r7, #12]
 800332c:	320a      	adds	r2, #10
 800332e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d107      	bne.n	8003346 <can_fifo0_rx_callback_register+0x2e>
    {
      m_obj->can_rec_callback[i] = fun;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	68fa      	ldr	r2, [r7, #12]
 800333a:	320a      	adds	r2, #10
 800333c:	6839      	ldr	r1, [r7, #0]
 800333e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      return i;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	e007      	b.n	8003356 <can_fifo0_rx_callback_register+0x3e>
  for (int i = 0; i < MAX_CAN_REGISTER_NUM; i++)
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	3301      	adds	r3, #1
 800334a:	60fb      	str	r3, [r7, #12]
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2b04      	cmp	r3, #4
 8003350:	ddea      	ble.n	8003328 <can_fifo0_rx_callback_register+0x10>
    }
  }
  return -1;
 8003352:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003356:	4618      	mov	r0, r3
 8003358:	3714      	adds	r7, #20
 800335a:	46bd      	mov	sp, r7
 800335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003360:	4770      	bx	lr

08003362 <can_tx_mailbox_complete_hanle>:
static void can_tx_mailbox_complete_hanle(can_manage_obj_t m_obj)
{
 8003362:	b5b0      	push	{r4, r5, r7, lr}
 8003364:	b090      	sub	sp, #64	; 0x40
 8003366:	af00      	add	r7, sp, #0
 8003368:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800336a:	f3ef 8310 	mrs	r3, PRIMASK
 800336e:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8003370:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  struct can_std_msg msg;
  CAN_TxHeaderTypeDef header;
  uint32_t send_mail_box;

  FIFO_CPU_SR_TYPE cpu_sr;
  cpu_sr = FIFO_GET_CPU_SR();
 8003372:	461d      	mov	r5, r3
  __ASM volatile ("cpsid i" : : : "memory");
 8003374:	b672      	cpsid	i
}
 8003376:	bf00      	nop
  FIFO_ENTER_CRITICAL();

  if (!fifo_is_empty(&(m_obj->tx_fifo)))
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	3304      	adds	r3, #4
 800337c:	4618      	mov	r0, r3
 800337e:	f010 f890 	bl	80134a2 <fifo_is_empty>
 8003382:	4603      	mov	r3, r0
 8003384:	2b00      	cmp	r3, #0
 8003386:	d133      	bne.n	80033f0 <can_tx_mailbox_complete_hanle+0x8e>
  {
    while (!fifo_is_empty(&(m_obj->tx_fifo)))
 8003388:	e029      	b.n	80033de <can_tx_mailbox_complete_hanle+0x7c>
    {
      if (HAL_CAN_GetTxMailboxesFreeLevel(m_obj->hcan))
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4618      	mov	r0, r3
 8003390:	f002 fa94 	bl	80058bc <HAL_CAN_GetTxMailboxesFreeLevel>
 8003394:	4603      	mov	r3, r0
 8003396:	2b00      	cmp	r3, #0
 8003398:	d01d      	beq.n	80033d6 <can_tx_mailbox_complete_hanle+0x74>
      {

        fifo_get_noprotect(&(m_obj->tx_fifo), &msg);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	3304      	adds	r3, #4
 800339e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80033a2:	4611      	mov	r1, r2
 80033a4:	4618      	mov	r0, r3
 80033a6:	f010 f848 	bl	801343a <fifo_get_noprotect>

        header.StdId = msg.std_id;
 80033aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ac:	613b      	str	r3, [r7, #16]
        header.DLC = msg.dlc;
 80033ae:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80033b2:	623b      	str	r3, [r7, #32]
        header.IDE = CAN_ID_STD;
 80033b4:	2300      	movs	r3, #0
 80033b6:	61bb      	str	r3, [r7, #24]
        header.RTR = CAN_RTR_DATA;
 80033b8:	2300      	movs	r3, #0
 80033ba:	61fb      	str	r3, [r7, #28]

        HAL_CAN_AddTxMessage(m_obj->hcan, &header, msg.data, &send_mail_box);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6818      	ldr	r0, [r3, #0]
 80033c0:	f107 040c 	add.w	r4, r7, #12
 80033c4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80033c8:	1d5a      	adds	r2, r3, #5
 80033ca:	f107 0110 	add.w	r1, r7, #16
 80033ce:	4623      	mov	r3, r4
 80033d0:	f002 f9a4 	bl	800571c <HAL_CAN_AddTxMessage>
 80033d4:	e003      	b.n	80033de <can_tx_mailbox_complete_hanle+0x7c>
      }
      else
      {
        m_obj->is_sending = 0;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2200      	movs	r2, #0
 80033da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    while (!fifo_is_empty(&(m_obj->tx_fifo)))
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	3304      	adds	r3, #4
 80033e2:	4618      	mov	r0, r3
 80033e4:	f010 f85d 	bl	80134a2 <fifo_is_empty>
 80033e8:	4603      	mov	r3, r0
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d0cd      	beq.n	800338a <can_tx_mailbox_complete_hanle+0x28>
 80033ee:	e003      	b.n	80033f8 <can_tx_mailbox_complete_hanle+0x96>
      }
    }
  }
  else
  {
    m_obj->is_sending = 0;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2200      	movs	r2, #0
 80033f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80033f8:	63bd      	str	r5, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033fc:	f383 8810 	msr	PRIMASK, r3
}
 8003400:	bf00      	nop
  }

  FIFO_RESTORE_CPU_SR(cpu_sr);

  return;
 8003402:	bf00      	nop
}
 8003404:	3740      	adds	r7, #64	; 0x40
 8003406:	46bd      	mov	sp, r7
 8003408:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800340c <HAL_CAN_TxMailbox0CompleteCallback>:

void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b082      	sub	sp, #8
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  if (hcan == &hcan1)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	4a05      	ldr	r2, [pc, #20]	; (800342c <HAL_CAN_TxMailbox0CompleteCallback+0x20>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d102      	bne.n	8003422 <HAL_CAN_TxMailbox0CompleteCallback+0x16>
  {
    can_tx_mailbox_complete_hanle(&can1_manage);
 800341c:	4804      	ldr	r0, [pc, #16]	; (8003430 <HAL_CAN_TxMailbox0CompleteCallback+0x24>)
 800341e:	f7ff ffa0 	bl	8003362 <can_tx_mailbox_complete_hanle>
  }
}
 8003422:	bf00      	nop
 8003424:	3708      	adds	r7, #8
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}
 800342a:	bf00      	nop
 800342c:	20001f30 	.word	0x20001f30
 8003430:	20001258 	.word	0x20001258

08003434 <HAL_CAN_TxMailbox1CompleteCallback>:

void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b082      	sub	sp, #8
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  if (hcan == &hcan1)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	4a05      	ldr	r2, [pc, #20]	; (8003454 <HAL_CAN_TxMailbox1CompleteCallback+0x20>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d102      	bne.n	800344a <HAL_CAN_TxMailbox1CompleteCallback+0x16>
  {
    can_tx_mailbox_complete_hanle(&can1_manage);
 8003444:	4804      	ldr	r0, [pc, #16]	; (8003458 <HAL_CAN_TxMailbox1CompleteCallback+0x24>)
 8003446:	f7ff ff8c 	bl	8003362 <can_tx_mailbox_complete_hanle>
  }
}
 800344a:	bf00      	nop
 800344c:	3708      	adds	r7, #8
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}
 8003452:	bf00      	nop
 8003454:	20001f30 	.word	0x20001f30
 8003458:	20001258 	.word	0x20001258

0800345c <HAL_CAN_TxMailbox2CompleteCallback>:
void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b082      	sub	sp, #8
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  if (hcan == &hcan1)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	4a05      	ldr	r2, [pc, #20]	; (800347c <HAL_CAN_TxMailbox2CompleteCallback+0x20>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d102      	bne.n	8003472 <HAL_CAN_TxMailbox2CompleteCallback+0x16>
  {
    can_tx_mailbox_complete_hanle(&can1_manage);
 800346c:	4804      	ldr	r0, [pc, #16]	; (8003480 <HAL_CAN_TxMailbox2CompleteCallback+0x24>)
 800346e:	f7ff ff78 	bl	8003362 <can_tx_mailbox_complete_hanle>
  }
}
 8003472:	bf00      	nop
 8003474:	3708      	adds	r7, #8
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}
 800347a:	bf00      	nop
 800347c:	20001f30 	.word	0x20001f30
 8003480:	20001258 	.word	0x20001258

08003484 <HAL_CAN_ErrorCallback>:

void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b082      	sub	sp, #8
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  if (hcan == &hcan1)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	4a06      	ldr	r2, [pc, #24]	; (80034a8 <HAL_CAN_ErrorCallback+0x24>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d102      	bne.n	800349a <HAL_CAN_ErrorCallback+0x16>
  {
    can_tx_mailbox_complete_hanle(&can1_manage);
 8003494:	4805      	ldr	r0, [pc, #20]	; (80034ac <HAL_CAN_ErrorCallback+0x28>)
 8003496:	f7ff ff64 	bl	8003362 <can_tx_mailbox_complete_hanle>
  }
 HAL_CAN_ResetError(hcan);
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f002 fd92 	bl	8005fc4 <HAL_CAN_ResetError>
}
 80034a0:	bf00      	nop
 80034a2:	3708      	adds	r7, #8
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}
 80034a8:	20001f30 	.word	0x20001f30
 80034ac:	20001258 	.word	0x20001258

080034b0 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b08c      	sub	sp, #48	; 0x30
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  CAN_RxHeaderTypeDef rx_header;
  uint8_t rx_data[8];

  HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rx_header, rx_data);
 80034b8:	f107 0308 	add.w	r3, r7, #8
 80034bc:	f107 0210 	add.w	r2, r7, #16
 80034c0:	2100      	movs	r1, #0
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f002 fa2f 	bl	8005926 <HAL_CAN_GetRxMessage>

  if (hcan == &hcan1)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	4a11      	ldr	r2, [pc, #68]	; (8003510 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d11a      	bne.n	8003506 <HAL_CAN_RxFifo0MsgPendingCallback+0x56>
  {
    for (int i = 0; i < MAX_CAN_REGISTER_NUM; i++)
 80034d0:	2300      	movs	r3, #0
 80034d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034d4:	e014      	b.n	8003500 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>
    {
      if (can1_manage.can_rec_callback[i] != NULL)
 80034d6:	4a0f      	ldr	r2, [pc, #60]	; (8003514 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 80034d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034da:	330a      	adds	r3, #10
 80034dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d00a      	beq.n	80034fa <HAL_CAN_RxFifo0MsgPendingCallback+0x4a>
      {
        (*(can1_manage.can_rec_callback[i]))(&rx_header, rx_data);
 80034e4:	4a0b      	ldr	r2, [pc, #44]	; (8003514 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 80034e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034e8:	330a      	adds	r3, #10
 80034ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034ee:	f107 0108 	add.w	r1, r7, #8
 80034f2:	f107 0210 	add.w	r2, r7, #16
 80034f6:	4610      	mov	r0, r2
 80034f8:	4798      	blx	r3
    for (int i = 0; i < MAX_CAN_REGISTER_NUM; i++)
 80034fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034fc:	3301      	adds	r3, #1
 80034fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003502:	2b04      	cmp	r3, #4
 8003504:	dde7      	ble.n	80034d6 <HAL_CAN_RxFifo0MsgPendingCallback+0x26>
      }
    }
  }
}
 8003506:	bf00      	nop
 8003508:	3730      	adds	r7, #48	; 0x30
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}
 800350e:	bf00      	nop
 8003510:	20001f30 	.word	0x20001f30
 8003514:	20001258 	.word	0x20001258

08003518 <mpu_write_reg>:
static void get_mpu_gyro_offset(void);
static void get_mpu_acc_offset(void);
static void get_ist_mag_offset(void);

uint8_t mpu_write_reg(uint8_t const reg, uint8_t const data)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b084      	sub	sp, #16
 800351c:	af02      	add	r7, sp, #8
 800351e:	4603      	mov	r3, r0
 8003520:	460a      	mov	r2, r1
 8003522:	71fb      	strb	r3, [r7, #7]
 8003524:	4613      	mov	r3, r2
 8003526:	71bb      	strb	r3, [r7, #6]
  MPU_NSS_LOW();
 8003528:	2200      	movs	r2, #0
 800352a:	2140      	movs	r1, #64	; 0x40
 800352c:	4812      	ldr	r0, [pc, #72]	; (8003578 <mpu_write_reg+0x60>)
 800352e:	f003 fc15 	bl	8006d5c <HAL_GPIO_WritePin>
  tx = reg & 0x7F;
 8003532:	79fb      	ldrb	r3, [r7, #7]
 8003534:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003538:	b2da      	uxtb	r2, r3
 800353a:	4b10      	ldr	r3, [pc, #64]	; (800357c <mpu_write_reg+0x64>)
 800353c:	701a      	strb	r2, [r3, #0]
  HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 800353e:	2337      	movs	r3, #55	; 0x37
 8003540:	9300      	str	r3, [sp, #0]
 8003542:	2301      	movs	r3, #1
 8003544:	4a0e      	ldr	r2, [pc, #56]	; (8003580 <mpu_write_reg+0x68>)
 8003546:	490d      	ldr	r1, [pc, #52]	; (800357c <mpu_write_reg+0x64>)
 8003548:	480e      	ldr	r0, [pc, #56]	; (8003584 <mpu_write_reg+0x6c>)
 800354a:	f005 fb9e 	bl	8008c8a <HAL_SPI_TransmitReceive>
  tx = data;
 800354e:	4a0b      	ldr	r2, [pc, #44]	; (800357c <mpu_write_reg+0x64>)
 8003550:	79bb      	ldrb	r3, [r7, #6]
 8003552:	7013      	strb	r3, [r2, #0]
  HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 8003554:	2337      	movs	r3, #55	; 0x37
 8003556:	9300      	str	r3, [sp, #0]
 8003558:	2301      	movs	r3, #1
 800355a:	4a09      	ldr	r2, [pc, #36]	; (8003580 <mpu_write_reg+0x68>)
 800355c:	4907      	ldr	r1, [pc, #28]	; (800357c <mpu_write_reg+0x64>)
 800355e:	4809      	ldr	r0, [pc, #36]	; (8003584 <mpu_write_reg+0x6c>)
 8003560:	f005 fb93 	bl	8008c8a <HAL_SPI_TransmitReceive>
  MPU_NSS_HIGH();
 8003564:	2201      	movs	r2, #1
 8003566:	2140      	movs	r1, #64	; 0x40
 8003568:	4803      	ldr	r0, [pc, #12]	; (8003578 <mpu_write_reg+0x60>)
 800356a:	f003 fbf7 	bl	8006d5c <HAL_GPIO_WritePin>
  return 0;
 800356e:	2300      	movs	r3, #0
}
 8003570:	4618      	mov	r0, r3
 8003572:	3708      	adds	r7, #8
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}
 8003578:	40021400 	.word	0x40021400
 800357c:	20001694 	.word	0x20001694
 8003580:	20001695 	.word	0x20001695
 8003584:	20001f5c 	.word	0x20001f5c

08003588 <mpu_read_reg>:

uint8_t mpu_read_reg(uint8_t const reg)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b084      	sub	sp, #16
 800358c:	af02      	add	r7, sp, #8
 800358e:	4603      	mov	r3, r0
 8003590:	71fb      	strb	r3, [r7, #7]
  MPU_NSS_LOW();
 8003592:	2200      	movs	r2, #0
 8003594:	2140      	movs	r1, #64	; 0x40
 8003596:	4812      	ldr	r0, [pc, #72]	; (80035e0 <mpu_read_reg+0x58>)
 8003598:	f003 fbe0 	bl	8006d5c <HAL_GPIO_WritePin>
  tx = reg | 0x80;
 800359c:	79fb      	ldrb	r3, [r7, #7]
 800359e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80035a2:	b2da      	uxtb	r2, r3
 80035a4:	4b0f      	ldr	r3, [pc, #60]	; (80035e4 <mpu_read_reg+0x5c>)
 80035a6:	701a      	strb	r2, [r3, #0]
  HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 80035a8:	2337      	movs	r3, #55	; 0x37
 80035aa:	9300      	str	r3, [sp, #0]
 80035ac:	2301      	movs	r3, #1
 80035ae:	4a0e      	ldr	r2, [pc, #56]	; (80035e8 <mpu_read_reg+0x60>)
 80035b0:	490c      	ldr	r1, [pc, #48]	; (80035e4 <mpu_read_reg+0x5c>)
 80035b2:	480e      	ldr	r0, [pc, #56]	; (80035ec <mpu_read_reg+0x64>)
 80035b4:	f005 fb69 	bl	8008c8a <HAL_SPI_TransmitReceive>
  HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 80035b8:	2337      	movs	r3, #55	; 0x37
 80035ba:	9300      	str	r3, [sp, #0]
 80035bc:	2301      	movs	r3, #1
 80035be:	4a0a      	ldr	r2, [pc, #40]	; (80035e8 <mpu_read_reg+0x60>)
 80035c0:	4908      	ldr	r1, [pc, #32]	; (80035e4 <mpu_read_reg+0x5c>)
 80035c2:	480a      	ldr	r0, [pc, #40]	; (80035ec <mpu_read_reg+0x64>)
 80035c4:	f005 fb61 	bl	8008c8a <HAL_SPI_TransmitReceive>
  MPU_NSS_HIGH();
 80035c8:	2201      	movs	r2, #1
 80035ca:	2140      	movs	r1, #64	; 0x40
 80035cc:	4804      	ldr	r0, [pc, #16]	; (80035e0 <mpu_read_reg+0x58>)
 80035ce:	f003 fbc5 	bl	8006d5c <HAL_GPIO_WritePin>
  return rx;
 80035d2:	4b05      	ldr	r3, [pc, #20]	; (80035e8 <mpu_read_reg+0x60>)
 80035d4:	781b      	ldrb	r3, [r3, #0]
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3708      	adds	r7, #8
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}
 80035de:	bf00      	nop
 80035e0:	40021400 	.word	0x40021400
 80035e4:	20001694 	.word	0x20001694
 80035e8:	20001695 	.word	0x20001695
 80035ec:	20001f5c 	.word	0x20001f5c

080035f0 <mpu_read_regs>:

uint8_t mpu_read_regs(uint8_t const regAddr, uint8_t *pData, uint8_t len)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b084      	sub	sp, #16
 80035f4:	af02      	add	r7, sp, #8
 80035f6:	4603      	mov	r3, r0
 80035f8:	6039      	str	r1, [r7, #0]
 80035fa:	71fb      	strb	r3, [r7, #7]
 80035fc:	4613      	mov	r3, r2
 80035fe:	71bb      	strb	r3, [r7, #6]
  MPU_NSS_LOW();
 8003600:	2200      	movs	r2, #0
 8003602:	2140      	movs	r1, #64	; 0x40
 8003604:	4813      	ldr	r0, [pc, #76]	; (8003654 <mpu_read_regs+0x64>)
 8003606:	f003 fba9 	bl	8006d5c <HAL_GPIO_WritePin>
  tx = regAddr | 0x80;
 800360a:	79fb      	ldrb	r3, [r7, #7]
 800360c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003610:	b2da      	uxtb	r2, r3
 8003612:	4b11      	ldr	r3, [pc, #68]	; (8003658 <mpu_read_regs+0x68>)
 8003614:	701a      	strb	r2, [r3, #0]
  tx_buff[0] = tx;
 8003616:	4b10      	ldr	r3, [pc, #64]	; (8003658 <mpu_read_regs+0x68>)
 8003618:	781a      	ldrb	r2, [r3, #0]
 800361a:	4b10      	ldr	r3, [pc, #64]	; (800365c <mpu_read_regs+0x6c>)
 800361c:	701a      	strb	r2, [r3, #0]
  HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 55);
 800361e:	2337      	movs	r3, #55	; 0x37
 8003620:	9300      	str	r3, [sp, #0]
 8003622:	2301      	movs	r3, #1
 8003624:	4a0e      	ldr	r2, [pc, #56]	; (8003660 <mpu_read_regs+0x70>)
 8003626:	490c      	ldr	r1, [pc, #48]	; (8003658 <mpu_read_regs+0x68>)
 8003628:	480e      	ldr	r0, [pc, #56]	; (8003664 <mpu_read_regs+0x74>)
 800362a:	f005 fb2e 	bl	8008c8a <HAL_SPI_TransmitReceive>
  HAL_SPI_TransmitReceive(&MPU_HSPI, tx_buff, pData, len, 55);
 800362e:	79bb      	ldrb	r3, [r7, #6]
 8003630:	b29b      	uxth	r3, r3
 8003632:	2237      	movs	r2, #55	; 0x37
 8003634:	9200      	str	r2, [sp, #0]
 8003636:	683a      	ldr	r2, [r7, #0]
 8003638:	4908      	ldr	r1, [pc, #32]	; (800365c <mpu_read_regs+0x6c>)
 800363a:	480a      	ldr	r0, [pc, #40]	; (8003664 <mpu_read_regs+0x74>)
 800363c:	f005 fb25 	bl	8008c8a <HAL_SPI_TransmitReceive>
  MPU_NSS_HIGH();
 8003640:	2201      	movs	r2, #1
 8003642:	2140      	movs	r1, #64	; 0x40
 8003644:	4803      	ldr	r0, [pc, #12]	; (8003654 <mpu_read_regs+0x64>)
 8003646:	f003 fb89 	bl	8006d5c <HAL_GPIO_WritePin>
  return 0;
 800364a:	2300      	movs	r3, #0
}
 800364c:	4618      	mov	r0, r3
 800364e:	3708      	adds	r7, #8
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}
 8003654:	40021400 	.word	0x40021400
 8003658:	20001694 	.word	0x20001694
 800365c:	20001698 	.word	0x20001698
 8003660:	20001695 	.word	0x20001695
 8003664:	20001f5c 	.word	0x20001f5c

08003668 <ist_reg_write_by_mpu>:

static void ist_reg_write_by_mpu(uint8_t addr, uint8_t data)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b082      	sub	sp, #8
 800366c:	af00      	add	r7, sp, #0
 800366e:	4603      	mov	r3, r0
 8003670:	460a      	mov	r2, r1
 8003672:	71fb      	strb	r3, [r7, #7]
 8003674:	4613      	mov	r3, r2
 8003676:	71bb      	strb	r3, [r7, #6]
  //turn off slave 1 at first
  mpu_write_reg(MPU6500_I2C_SLV1_CTRL, 0x00);
 8003678:	2100      	movs	r1, #0
 800367a:	202a      	movs	r0, #42	; 0x2a
 800367c:	f7ff ff4c 	bl	8003518 <mpu_write_reg>
  MPU_DELAY(2);
 8003680:	2002      	movs	r0, #2
 8003682:	f001 fe07 	bl	8005294 <HAL_Delay>
  mpu_write_reg(MPU6500_I2C_SLV1_REG, addr);
 8003686:	79fb      	ldrb	r3, [r7, #7]
 8003688:	4619      	mov	r1, r3
 800368a:	2029      	movs	r0, #41	; 0x29
 800368c:	f7ff ff44 	bl	8003518 <mpu_write_reg>
  MPU_DELAY(2);
 8003690:	2002      	movs	r0, #2
 8003692:	f001 fdff 	bl	8005294 <HAL_Delay>
  mpu_write_reg(MPU6500_I2C_SLV1_DO, data);
 8003696:	79bb      	ldrb	r3, [r7, #6]
 8003698:	4619      	mov	r1, r3
 800369a:	2064      	movs	r0, #100	; 0x64
 800369c:	f7ff ff3c 	bl	8003518 <mpu_write_reg>
  MPU_DELAY(2);
 80036a0:	2002      	movs	r0, #2
 80036a2:	f001 fdf7 	bl	8005294 <HAL_Delay>
  //turn on slave 1 with one byte transmitting
  mpu_write_reg(MPU6500_I2C_SLV1_CTRL, 0x80 | 0x01);
 80036a6:	2181      	movs	r1, #129	; 0x81
 80036a8:	202a      	movs	r0, #42	; 0x2a
 80036aa:	f7ff ff35 	bl	8003518 <mpu_write_reg>
  MPU_DELAY(10);
 80036ae:	200a      	movs	r0, #10
 80036b0:	f001 fdf0 	bl	8005294 <HAL_Delay>
}
 80036b4:	bf00      	nop
 80036b6:	3708      	adds	r7, #8
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}

080036bc <ist_reg_read_by_mpu>:

static uint8_t ist_reg_read_by_mpu(uint8_t addr)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b084      	sub	sp, #16
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	4603      	mov	r3, r0
 80036c4:	71fb      	strb	r3, [r7, #7]
  uint8_t retval;
  mpu_write_reg(MPU6500_I2C_SLV4_REG, addr);
 80036c6:	79fb      	ldrb	r3, [r7, #7]
 80036c8:	4619      	mov	r1, r3
 80036ca:	2032      	movs	r0, #50	; 0x32
 80036cc:	f7ff ff24 	bl	8003518 <mpu_write_reg>
  MPU_DELAY(10);
 80036d0:	200a      	movs	r0, #10
 80036d2:	f001 fddf 	bl	8005294 <HAL_Delay>
  mpu_write_reg(MPU6500_I2C_SLV4_CTRL, 0x80);
 80036d6:	2180      	movs	r1, #128	; 0x80
 80036d8:	2034      	movs	r0, #52	; 0x34
 80036da:	f7ff ff1d 	bl	8003518 <mpu_write_reg>
  MPU_DELAY(10);
 80036de:	200a      	movs	r0, #10
 80036e0:	f001 fdd8 	bl	8005294 <HAL_Delay>
  retval = mpu_read_reg(MPU6500_I2C_SLV4_DI);
 80036e4:	2035      	movs	r0, #53	; 0x35
 80036e6:	f7ff ff4f 	bl	8003588 <mpu_read_reg>
 80036ea:	4603      	mov	r3, r0
 80036ec:	73fb      	strb	r3, [r7, #15]
  //turn off slave4 after read
  mpu_write_reg(MPU6500_I2C_SLV4_CTRL, 0x00);
 80036ee:	2100      	movs	r1, #0
 80036f0:	2034      	movs	r0, #52	; 0x34
 80036f2:	f7ff ff11 	bl	8003518 <mpu_write_reg>
  MPU_DELAY(10);
 80036f6:	200a      	movs	r0, #10
 80036f8:	f001 fdcc 	bl	8005294 <HAL_Delay>
  return retval;
 80036fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3710      	adds	r7, #16
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}

08003706 <mpu_mst_i2c_auto_read_config>:

static void mpu_mst_i2c_auto_read_config(uint8_t device_address, uint8_t reg_base_addr, uint8_t data_num)
{
 8003706:	b580      	push	{r7, lr}
 8003708:	b082      	sub	sp, #8
 800370a:	af00      	add	r7, sp, #0
 800370c:	4603      	mov	r3, r0
 800370e:	71fb      	strb	r3, [r7, #7]
 8003710:	460b      	mov	r3, r1
 8003712:	71bb      	strb	r3, [r7, #6]
 8003714:	4613      	mov	r3, r2
 8003716:	717b      	strb	r3, [r7, #5]
  //configure the device address of the IST8310
  //use slave1,auto transmit single measure mode.
  mpu_write_reg(MPU6500_I2C_SLV1_ADDR, device_address);
 8003718:	79fb      	ldrb	r3, [r7, #7]
 800371a:	4619      	mov	r1, r3
 800371c:	2028      	movs	r0, #40	; 0x28
 800371e:	f7ff fefb 	bl	8003518 <mpu_write_reg>
  MPU_DELAY(2);
 8003722:	2002      	movs	r0, #2
 8003724:	f001 fdb6 	bl	8005294 <HAL_Delay>
  mpu_write_reg(MPU6500_I2C_SLV1_REG, IST8310_R_CONFA);
 8003728:	210a      	movs	r1, #10
 800372a:	2029      	movs	r0, #41	; 0x29
 800372c:	f7ff fef4 	bl	8003518 <mpu_write_reg>
  MPU_DELAY(2);
 8003730:	2002      	movs	r0, #2
 8003732:	f001 fdaf 	bl	8005294 <HAL_Delay>
  mpu_write_reg(MPU6500_I2C_SLV1_DO, IST8310_ODR_MODE);
 8003736:	2101      	movs	r1, #1
 8003738:	2064      	movs	r0, #100	; 0x64
 800373a:	f7ff feed 	bl	8003518 <mpu_write_reg>
  MPU_DELAY(2);
 800373e:	2002      	movs	r0, #2
 8003740:	f001 fda8 	bl	8005294 <HAL_Delay>

  //use slave0,auto read data
  mpu_write_reg(MPU6500_I2C_SLV0_ADDR, 0x80 | device_address);
 8003744:	79fb      	ldrb	r3, [r7, #7]
 8003746:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800374a:	b2db      	uxtb	r3, r3
 800374c:	4619      	mov	r1, r3
 800374e:	2025      	movs	r0, #37	; 0x25
 8003750:	f7ff fee2 	bl	8003518 <mpu_write_reg>
  MPU_DELAY(2);
 8003754:	2002      	movs	r0, #2
 8003756:	f001 fd9d 	bl	8005294 <HAL_Delay>
  mpu_write_reg(MPU6500_I2C_SLV0_REG, reg_base_addr);
 800375a:	79bb      	ldrb	r3, [r7, #6]
 800375c:	4619      	mov	r1, r3
 800375e:	2026      	movs	r0, #38	; 0x26
 8003760:	f7ff feda 	bl	8003518 <mpu_write_reg>
  MPU_DELAY(2);
 8003764:	2002      	movs	r0, #2
 8003766:	f001 fd95 	bl	8005294 <HAL_Delay>

  //every eight mpu6500 internal samples one i2c master read
  mpu_write_reg(MPU6500_I2C_SLV4_CTRL, 0x03);
 800376a:	2103      	movs	r1, #3
 800376c:	2034      	movs	r0, #52	; 0x34
 800376e:	f7ff fed3 	bl	8003518 <mpu_write_reg>
  MPU_DELAY(2);
 8003772:	2002      	movs	r0, #2
 8003774:	f001 fd8e 	bl	8005294 <HAL_Delay>
  //enable slave 0 and 1 access delay
  mpu_write_reg(MPU6500_I2C_MST_DELAY_CTRL, 0x01 | 0x02);
 8003778:	2103      	movs	r1, #3
 800377a:	2067      	movs	r0, #103	; 0x67
 800377c:	f7ff fecc 	bl	8003518 <mpu_write_reg>
  MPU_DELAY(2);
 8003780:	2002      	movs	r0, #2
 8003782:	f001 fd87 	bl	8005294 <HAL_Delay>
  //enable slave 1 auto transmit
  mpu_write_reg(MPU6500_I2C_SLV1_CTRL, 0x80 | 0x01);
 8003786:	2181      	movs	r1, #129	; 0x81
 8003788:	202a      	movs	r0, #42	; 0x2a
 800378a:	f7ff fec5 	bl	8003518 <mpu_write_reg>
  MPU_DELAY(6); //Wait 6ms (minimum waiting time for 16 times internal average setup)
 800378e:	2006      	movs	r0, #6
 8003790:	f001 fd80 	bl	8005294 <HAL_Delay>
  //enable slave 0 with data_num bytes reading
  mpu_write_reg(MPU6500_I2C_SLV0_CTRL, 0x80 | data_num);
 8003794:	797b      	ldrb	r3, [r7, #5]
 8003796:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800379a:	b2db      	uxtb	r3, r3
 800379c:	4619      	mov	r1, r3
 800379e:	2027      	movs	r0, #39	; 0x27
 80037a0:	f7ff feba 	bl	8003518 <mpu_write_reg>
  MPU_DELAY(2);
 80037a4:	2002      	movs	r0, #2
 80037a6:	f001 fd75 	bl	8005294 <HAL_Delay>
}
 80037aa:	bf00      	nop
 80037ac:	3708      	adds	r7, #8
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}

080037b2 <ist8310_init>:

uint8_t ist8310_init(void)
{
 80037b2:	b580      	push	{r7, lr}
 80037b4:	af00      	add	r7, sp, #0
  //Enable I2C master mode, Reset I2C Slave module
  mpu_write_reg(MPU6500_USER_CTRL, 0x30);
 80037b6:	2130      	movs	r1, #48	; 0x30
 80037b8:	206a      	movs	r0, #106	; 0x6a
 80037ba:	f7ff fead 	bl	8003518 <mpu_write_reg>
  MPU_DELAY(10);
 80037be:	200a      	movs	r0, #10
 80037c0:	f001 fd68 	bl	8005294 <HAL_Delay>
  //I2C master clock 400kHz
  mpu_write_reg(MPU6500_I2C_MST_CTRL, 0x0d);
 80037c4:	210d      	movs	r1, #13
 80037c6:	2024      	movs	r0, #36	; 0x24
 80037c8:	f7ff fea6 	bl	8003518 <mpu_write_reg>
  MPU_DELAY(10);
 80037cc:	200a      	movs	r0, #10
 80037ce:	f001 fd61 	bl	8005294 <HAL_Delay>

  //turn on slave 1 for ist write and slave 4 for ist read
  mpu_write_reg(MPU6500_I2C_SLV1_ADDR, IST8310_ADDRESS); //write ist
 80037d2:	210e      	movs	r1, #14
 80037d4:	2028      	movs	r0, #40	; 0x28
 80037d6:	f7ff fe9f 	bl	8003518 <mpu_write_reg>
  MPU_DELAY(10);
 80037da:	200a      	movs	r0, #10
 80037dc:	f001 fd5a 	bl	8005294 <HAL_Delay>
  mpu_write_reg(MPU6500_I2C_SLV4_ADDR, 0x80 | IST8310_ADDRESS); //read ist
 80037e0:	218e      	movs	r1, #142	; 0x8e
 80037e2:	2031      	movs	r0, #49	; 0x31
 80037e4:	f7ff fe98 	bl	8003518 <mpu_write_reg>
  MPU_DELAY(10);
 80037e8:	200a      	movs	r0, #10
 80037ea:	f001 fd53 	bl	8005294 <HAL_Delay>

  //reset ist8310
  ist_reg_write_by_mpu(IST8310_R_CONFB, 0x01);
 80037ee:	2101      	movs	r1, #1
 80037f0:	200b      	movs	r0, #11
 80037f2:	f7ff ff39 	bl	8003668 <ist_reg_write_by_mpu>
  MPU_DELAY(10);
 80037f6:	200a      	movs	r0, #10
 80037f8:	f001 fd4c 	bl	8005294 <HAL_Delay>

  if (IST8310_DEVICE_ID_A != ist_reg_read_by_mpu(IST8310_WHO_AM_I))
 80037fc:	2000      	movs	r0, #0
 80037fe:	f7ff ff5d 	bl	80036bc <ist_reg_read_by_mpu>
 8003802:	4603      	mov	r3, r0
 8003804:	2b10      	cmp	r3, #16
 8003806:	d001      	beq.n	800380c <ist8310_init+0x5a>
    return 1;
 8003808:	2301      	movs	r3, #1
 800380a:	e059      	b.n	80038c0 <ist8310_init+0x10e>

  ist_reg_write_by_mpu(IST8310_R_CONFB, 0x01);
 800380c:	2101      	movs	r1, #1
 800380e:	200b      	movs	r0, #11
 8003810:	f7ff ff2a 	bl	8003668 <ist_reg_write_by_mpu>
  MPU_DELAY(10);
 8003814:	200a      	movs	r0, #10
 8003816:	f001 fd3d 	bl	8005294 <HAL_Delay>

  //config as ready mode to access reg
  ist_reg_write_by_mpu(IST8310_R_CONFA, 0x00);
 800381a:	2100      	movs	r1, #0
 800381c:	200a      	movs	r0, #10
 800381e:	f7ff ff23 	bl	8003668 <ist_reg_write_by_mpu>
  if (ist_reg_read_by_mpu(IST8310_R_CONFA) != 0x00)
 8003822:	200a      	movs	r0, #10
 8003824:	f7ff ff4a 	bl	80036bc <ist_reg_read_by_mpu>
 8003828:	4603      	mov	r3, r0
 800382a:	2b00      	cmp	r3, #0
 800382c:	d001      	beq.n	8003832 <ist8310_init+0x80>
    return 2;
 800382e:	2302      	movs	r3, #2
 8003830:	e046      	b.n	80038c0 <ist8310_init+0x10e>
  MPU_DELAY(10);
 8003832:	200a      	movs	r0, #10
 8003834:	f001 fd2e 	bl	8005294 <HAL_Delay>

  //normal state, no int
  ist_reg_write_by_mpu(IST8310_R_CONFB, 0x00);
 8003838:	2100      	movs	r1, #0
 800383a:	200b      	movs	r0, #11
 800383c:	f7ff ff14 	bl	8003668 <ist_reg_write_by_mpu>
  if (ist_reg_read_by_mpu(IST8310_R_CONFB) != 0x00)
 8003840:	200b      	movs	r0, #11
 8003842:	f7ff ff3b 	bl	80036bc <ist_reg_read_by_mpu>
 8003846:	4603      	mov	r3, r0
 8003848:	2b00      	cmp	r3, #0
 800384a:	d001      	beq.n	8003850 <ist8310_init+0x9e>
    return 3;
 800384c:	2303      	movs	r3, #3
 800384e:	e037      	b.n	80038c0 <ist8310_init+0x10e>
  MPU_DELAY(10);
 8003850:	200a      	movs	r0, #10
 8003852:	f001 fd1f 	bl	8005294 <HAL_Delay>

  //config  low noise mode, x,y,z axis 16 time 1 avg,
  ist_reg_write_by_mpu(IST8310_AVGCNTL, 0x24); //100100
 8003856:	2124      	movs	r1, #36	; 0x24
 8003858:	2041      	movs	r0, #65	; 0x41
 800385a:	f7ff ff05 	bl	8003668 <ist_reg_write_by_mpu>
  if (ist_reg_read_by_mpu(IST8310_AVGCNTL) != 0x24)
 800385e:	2041      	movs	r0, #65	; 0x41
 8003860:	f7ff ff2c 	bl	80036bc <ist_reg_read_by_mpu>
 8003864:	4603      	mov	r3, r0
 8003866:	2b24      	cmp	r3, #36	; 0x24
 8003868:	d001      	beq.n	800386e <ist8310_init+0xbc>
    return 4;
 800386a:	2304      	movs	r3, #4
 800386c:	e028      	b.n	80038c0 <ist8310_init+0x10e>
  MPU_DELAY(10);
 800386e:	200a      	movs	r0, #10
 8003870:	f001 fd10 	bl	8005294 <HAL_Delay>

  //Set/Reset pulse duration setup, normal mode
  ist_reg_write_by_mpu(IST8310_PDCNTL, 0xc0);
 8003874:	21c0      	movs	r1, #192	; 0xc0
 8003876:	2042      	movs	r0, #66	; 0x42
 8003878:	f7ff fef6 	bl	8003668 <ist_reg_write_by_mpu>
  if (ist_reg_read_by_mpu(IST8310_PDCNTL) != 0xc0)
 800387c:	2042      	movs	r0, #66	; 0x42
 800387e:	f7ff ff1d 	bl	80036bc <ist_reg_read_by_mpu>
 8003882:	4603      	mov	r3, r0
 8003884:	2bc0      	cmp	r3, #192	; 0xc0
 8003886:	d001      	beq.n	800388c <ist8310_init+0xda>
    return 5;
 8003888:	2305      	movs	r3, #5
 800388a:	e019      	b.n	80038c0 <ist8310_init+0x10e>
  MPU_DELAY(10);
 800388c:	200a      	movs	r0, #10
 800388e:	f001 fd01 	bl	8005294 <HAL_Delay>

  //turn off slave1 & slave 4
  mpu_write_reg(MPU6500_I2C_SLV1_CTRL, 0x00);
 8003892:	2100      	movs	r1, #0
 8003894:	202a      	movs	r0, #42	; 0x2a
 8003896:	f7ff fe3f 	bl	8003518 <mpu_write_reg>
  MPU_DELAY(10);
 800389a:	200a      	movs	r0, #10
 800389c:	f001 fcfa 	bl	8005294 <HAL_Delay>
  mpu_write_reg(MPU6500_I2C_SLV4_CTRL, 0x00);
 80038a0:	2100      	movs	r1, #0
 80038a2:	2034      	movs	r0, #52	; 0x34
 80038a4:	f7ff fe38 	bl	8003518 <mpu_write_reg>
  MPU_DELAY(10);
 80038a8:	200a      	movs	r0, #10
 80038aa:	f001 fcf3 	bl	8005294 <HAL_Delay>

  //configure and turn on slave 0
  mpu_mst_i2c_auto_read_config(IST8310_ADDRESS, IST8310_R_XL, 0x06);
 80038ae:	2206      	movs	r2, #6
 80038b0:	2103      	movs	r1, #3
 80038b2:	200e      	movs	r0, #14
 80038b4:	f7ff ff27 	bl	8003706 <mpu_mst_i2c_auto_read_config>
  MPU_DELAY(100);
 80038b8:	2064      	movs	r0, #100	; 0x64
 80038ba:	f001 fceb 	bl	8005294 <HAL_Delay>
  return 0;
 80038be:	2300      	movs	r3, #0
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	bd80      	pop	{r7, pc}

080038c4 <ist8310_get_data>:

void ist8310_get_data(uint8_t *buff)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b082      	sub	sp, #8
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  mpu_read_regs(MPU6500_EXT_SENS_DATA_00, buff, 6);
 80038cc:	2206      	movs	r2, #6
 80038ce:	6879      	ldr	r1, [r7, #4]
 80038d0:	2049      	movs	r0, #73	; 0x49
 80038d2:	f7ff fe8d 	bl	80035f0 <mpu_read_regs>
}
 80038d6:	bf00      	nop
 80038d8:	3708      	adds	r7, #8
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}
	...

080038e0 <mpu_device_init>:
{
  *tmp = 21 + mpu_data.temp / 333.87f;;
}

uint8_t mpu_device_init(void)
{
 80038e0:	b590      	push	{r4, r7, lr}
 80038e2:	b087      	sub	sp, #28
 80038e4:	af00      	add	r7, sp, #0
  // Reset the internal registers
  IST_ENABLE();
 80038e6:	2201      	movs	r2, #1
 80038e8:	2104      	movs	r1, #4
 80038ea:	4829      	ldr	r0, [pc, #164]	; (8003990 <mpu_device_init+0xb0>)
 80038ec:	f003 fa36 	bl	8006d5c <HAL_GPIO_WritePin>

  mpu_write_reg(MPU6500_PWR_MGMT_1, 0x80);
 80038f0:	2180      	movs	r1, #128	; 0x80
 80038f2:	206b      	movs	r0, #107	; 0x6b
 80038f4:	f7ff fe10 	bl	8003518 <mpu_write_reg>
  MPU_DELAY(100);
 80038f8:	2064      	movs	r0, #100	; 0x64
 80038fa:	f001 fccb 	bl	8005294 <HAL_Delay>
  // Reset gyro/accel/temp digital signal path
  mpu_write_reg(MPU6500_SIGNAL_PATH_RESET, 0x07);
 80038fe:	2107      	movs	r1, #7
 8003900:	2068      	movs	r0, #104	; 0x68
 8003902:	f7ff fe09 	bl	8003518 <mpu_write_reg>
  MPU_DELAY(100);
 8003906:	2064      	movs	r0, #100	; 0x64
 8003908:	f001 fcc4 	bl	8005294 <HAL_Delay>

  if (MPU6500_ID != mpu_read_reg(MPU6500_WHO_AM_I))
 800390c:	2075      	movs	r0, #117	; 0x75
 800390e:	f7ff fe3b 	bl	8003588 <mpu_read_reg>
 8003912:	4603      	mov	r3, r0
 8003914:	2b70      	cmp	r3, #112	; 0x70
 8003916:	d001      	beq.n	800391c <mpu_device_init+0x3c>
    return 1;
 8003918:	2301      	movs	r3, #1
 800391a:	e035      	b.n	8003988 <mpu_device_init+0xa8>
  //0: 250hz; 1: 184hz; 2: 92hz; 3: 41hz; 4: 20hz; 5: 10hz; 6: 5hz; 7: 3600hz
  uint8_t MPU6500_Init_Data[7][2] = {
 800391c:	4b1d      	ldr	r3, [pc, #116]	; (8003994 <mpu_device_init+0xb4>)
 800391e:	1d3c      	adds	r4, r7, #4
 8003920:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003922:	c407      	stmia	r4!, {r0, r1, r2}
 8003924:	8023      	strh	r3, [r4, #0]
      {MPU6500_USER_CTRL, 0x20},      // Enable the I2C Master I/F module
                                      // pins ES_DA and ES_SCL are isolated from
                                      // pins SDA/SDI and SCL/SCLK.
  };

  for (int i = 0; i < 7; i++)
 8003926:	2300      	movs	r3, #0
 8003928:	617b      	str	r3, [r7, #20]
 800392a:	e015      	b.n	8003958 <mpu_device_init+0x78>
  {
    mpu_write_reg(MPU6500_Init_Data[i][0], MPU6500_Init_Data[i][1]);
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	005b      	lsls	r3, r3, #1
 8003930:	3318      	adds	r3, #24
 8003932:	443b      	add	r3, r7
 8003934:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	005b      	lsls	r3, r3, #1
 800393c:	3318      	adds	r3, #24
 800393e:	443b      	add	r3, r7
 8003940:	f813 3c13 	ldrb.w	r3, [r3, #-19]
 8003944:	4619      	mov	r1, r3
 8003946:	4610      	mov	r0, r2
 8003948:	f7ff fde6 	bl	8003518 <mpu_write_reg>
    MPU_DELAY(1);
 800394c:	2001      	movs	r0, #1
 800394e:	f001 fca1 	bl	8005294 <HAL_Delay>
  for (int i = 0; i < 7; i++)
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	3301      	adds	r3, #1
 8003956:	617b      	str	r3, [r7, #20]
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	2b06      	cmp	r3, #6
 800395c:	dde6      	ble.n	800392c <mpu_device_init+0x4c>
  }

  ist8310_init();
 800395e:	f7ff ff28 	bl	80037b2 <ist8310_init>

  if (imu_cali.gyro_flag == 1)
 8003962:	4b0d      	ldr	r3, [pc, #52]	; (8003998 <mpu_device_init+0xb8>)
 8003964:	781b      	ldrb	r3, [r3, #0]
 8003966:	2b01      	cmp	r3, #1
 8003968:	d101      	bne.n	800396e <mpu_device_init+0x8e>
  {
    get_mpu_gyro_offset();
 800396a:	f000 f817 	bl	800399c <get_mpu_gyro_offset>
  }

  if (imu_cali.acc_flag == 1)
 800396e:	4b0a      	ldr	r3, [pc, #40]	; (8003998 <mpu_device_init+0xb8>)
 8003970:	785b      	ldrb	r3, [r3, #1]
 8003972:	2b01      	cmp	r3, #1
 8003974:	d101      	bne.n	800397a <mpu_device_init+0x9a>
  {
    get_mpu_acc_offset();
 8003976:	f000 f893 	bl	8003aa0 <get_mpu_acc_offset>
  }

  if (imu_cali.mag_flag == 1)
 800397a:	4b07      	ldr	r3, [pc, #28]	; (8003998 <mpu_device_init+0xb8>)
 800397c:	789b      	ldrb	r3, [r3, #2]
 800397e:	2b01      	cmp	r3, #1
 8003980:	d101      	bne.n	8003986 <mpu_device_init+0xa6>
  {
    get_ist_mag_offset();
 8003982:	f000 f913 	bl	8003bac <get_ist_mag_offset>
  }

  return 0;
 8003986:	2300      	movs	r3, #0
}
 8003988:	4618      	mov	r0, r3
 800398a:	371c      	adds	r7, #28
 800398c:	46bd      	mov	sp, r7
 800398e:	bd90      	pop	{r4, r7, pc}
 8003990:	40021000 	.word	0x40021000
 8003994:	08015538 	.word	0x08015538
 8003998:	20000000 	.word	0x20000000

0800399c <get_mpu_gyro_offset>:

static void get_mpu_gyro_offset(void)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b082      	sub	sp, #8
 80039a0:	af00      	add	r7, sp, #0
  int i;
  for (i = 0; i < 300; i++)
 80039a2:	2300      	movs	r3, #0
 80039a4:	607b      	str	r3, [r7, #4]
 80039a6:	e043      	b.n	8003a30 <get_mpu_gyro_offset+0x94>
  {
    mpu_read_regs(MPU6500_ACCEL_XOUT_H, mpu_buff, 14);
 80039a8:	220e      	movs	r2, #14
 80039aa:	4939      	ldr	r1, [pc, #228]	; (8003a90 <get_mpu_gyro_offset+0xf4>)
 80039ac:	203b      	movs	r0, #59	; 0x3b
 80039ae:	f7ff fe1f 	bl	80035f0 <mpu_read_regs>

    mpu_data.gx_offset += mpu_buff[8] << 8 | mpu_buff[9];
 80039b2:	4b38      	ldr	r3, [pc, #224]	; (8003a94 <get_mpu_gyro_offset+0xf8>)
 80039b4:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 80039b8:	b29a      	uxth	r2, r3
 80039ba:	4b35      	ldr	r3, [pc, #212]	; (8003a90 <get_mpu_gyro_offset+0xf4>)
 80039bc:	7a1b      	ldrb	r3, [r3, #8]
 80039be:	021b      	lsls	r3, r3, #8
 80039c0:	b219      	sxth	r1, r3
 80039c2:	4b33      	ldr	r3, [pc, #204]	; (8003a90 <get_mpu_gyro_offset+0xf4>)
 80039c4:	7a5b      	ldrb	r3, [r3, #9]
 80039c6:	b21b      	sxth	r3, r3
 80039c8:	430b      	orrs	r3, r1
 80039ca:	b21b      	sxth	r3, r3
 80039cc:	b29b      	uxth	r3, r3
 80039ce:	4413      	add	r3, r2
 80039d0:	b29b      	uxth	r3, r3
 80039d2:	b21a      	sxth	r2, r3
 80039d4:	4b2f      	ldr	r3, [pc, #188]	; (8003a94 <get_mpu_gyro_offset+0xf8>)
 80039d6:	835a      	strh	r2, [r3, #26]
    mpu_data.gy_offset += mpu_buff[10] << 8 | mpu_buff[11];
 80039d8:	4b2e      	ldr	r3, [pc, #184]	; (8003a94 <get_mpu_gyro_offset+0xf8>)
 80039da:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80039de:	b29a      	uxth	r2, r3
 80039e0:	4b2b      	ldr	r3, [pc, #172]	; (8003a90 <get_mpu_gyro_offset+0xf4>)
 80039e2:	7a9b      	ldrb	r3, [r3, #10]
 80039e4:	021b      	lsls	r3, r3, #8
 80039e6:	b219      	sxth	r1, r3
 80039e8:	4b29      	ldr	r3, [pc, #164]	; (8003a90 <get_mpu_gyro_offset+0xf4>)
 80039ea:	7adb      	ldrb	r3, [r3, #11]
 80039ec:	b21b      	sxth	r3, r3
 80039ee:	430b      	orrs	r3, r1
 80039f0:	b21b      	sxth	r3, r3
 80039f2:	b29b      	uxth	r3, r3
 80039f4:	4413      	add	r3, r2
 80039f6:	b29b      	uxth	r3, r3
 80039f8:	b21a      	sxth	r2, r3
 80039fa:	4b26      	ldr	r3, [pc, #152]	; (8003a94 <get_mpu_gyro_offset+0xf8>)
 80039fc:	839a      	strh	r2, [r3, #28]
    mpu_data.gz_offset += mpu_buff[12] << 8 | mpu_buff[13];
 80039fe:	4b25      	ldr	r3, [pc, #148]	; (8003a94 <get_mpu_gyro_offset+0xf8>)
 8003a00:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8003a04:	b29a      	uxth	r2, r3
 8003a06:	4b22      	ldr	r3, [pc, #136]	; (8003a90 <get_mpu_gyro_offset+0xf4>)
 8003a08:	7b1b      	ldrb	r3, [r3, #12]
 8003a0a:	021b      	lsls	r3, r3, #8
 8003a0c:	b219      	sxth	r1, r3
 8003a0e:	4b20      	ldr	r3, [pc, #128]	; (8003a90 <get_mpu_gyro_offset+0xf4>)
 8003a10:	7b5b      	ldrb	r3, [r3, #13]
 8003a12:	b21b      	sxth	r3, r3
 8003a14:	430b      	orrs	r3, r1
 8003a16:	b21b      	sxth	r3, r3
 8003a18:	b29b      	uxth	r3, r3
 8003a1a:	4413      	add	r3, r2
 8003a1c:	b29b      	uxth	r3, r3
 8003a1e:	b21a      	sxth	r2, r3
 8003a20:	4b1c      	ldr	r3, [pc, #112]	; (8003a94 <get_mpu_gyro_offset+0xf8>)
 8003a22:	83da      	strh	r2, [r3, #30]

    MPU_DELAY(2);
 8003a24:	2002      	movs	r0, #2
 8003a26:	f001 fc35 	bl	8005294 <HAL_Delay>
  for (i = 0; i < 300; i++)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	3301      	adds	r3, #1
 8003a2e:	607b      	str	r3, [r7, #4]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8003a36:	dbb7      	blt.n	80039a8 <get_mpu_gyro_offset+0xc>
  }

  mpu_data.gx_offset = mpu_data.gx_offset / 300;
 8003a38:	4b16      	ldr	r3, [pc, #88]	; (8003a94 <get_mpu_gyro_offset+0xf8>)
 8003a3a:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8003a3e:	4a16      	ldr	r2, [pc, #88]	; (8003a98 <get_mpu_gyro_offset+0xfc>)
 8003a40:	fb82 1203 	smull	r1, r2, r2, r3
 8003a44:	1152      	asrs	r2, r2, #5
 8003a46:	17db      	asrs	r3, r3, #31
 8003a48:	1ad3      	subs	r3, r2, r3
 8003a4a:	b21a      	sxth	r2, r3
 8003a4c:	4b11      	ldr	r3, [pc, #68]	; (8003a94 <get_mpu_gyro_offset+0xf8>)
 8003a4e:	835a      	strh	r2, [r3, #26]
  mpu_data.gy_offset = mpu_data.gy_offset / 300;
 8003a50:	4b10      	ldr	r3, [pc, #64]	; (8003a94 <get_mpu_gyro_offset+0xf8>)
 8003a52:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8003a56:	4a10      	ldr	r2, [pc, #64]	; (8003a98 <get_mpu_gyro_offset+0xfc>)
 8003a58:	fb82 1203 	smull	r1, r2, r2, r3
 8003a5c:	1152      	asrs	r2, r2, #5
 8003a5e:	17db      	asrs	r3, r3, #31
 8003a60:	1ad3      	subs	r3, r2, r3
 8003a62:	b21a      	sxth	r2, r3
 8003a64:	4b0b      	ldr	r3, [pc, #44]	; (8003a94 <get_mpu_gyro_offset+0xf8>)
 8003a66:	839a      	strh	r2, [r3, #28]
  mpu_data.gz_offset = mpu_data.gz_offset / 300;
 8003a68:	4b0a      	ldr	r3, [pc, #40]	; (8003a94 <get_mpu_gyro_offset+0xf8>)
 8003a6a:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8003a6e:	4a0a      	ldr	r2, [pc, #40]	; (8003a98 <get_mpu_gyro_offset+0xfc>)
 8003a70:	fb82 1203 	smull	r1, r2, r2, r3
 8003a74:	1152      	asrs	r2, r2, #5
 8003a76:	17db      	asrs	r3, r3, #31
 8003a78:	1ad3      	subs	r3, r2, r3
 8003a7a:	b21a      	sxth	r2, r3
 8003a7c:	4b05      	ldr	r3, [pc, #20]	; (8003a94 <get_mpu_gyro_offset+0xf8>)
 8003a7e:	83da      	strh	r2, [r3, #30]
  imu_cali.gyro_flag = 0;
 8003a80:	4b06      	ldr	r3, [pc, #24]	; (8003a9c <get_mpu_gyro_offset+0x100>)
 8003a82:	2200      	movs	r2, #0
 8003a84:	701a      	strb	r2, [r3, #0]
}
 8003a86:	bf00      	nop
 8003a88:	3708      	adds	r7, #8
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}
 8003a8e:	bf00      	nop
 8003a90:	200016a8 	.word	0x200016a8
 8003a94:	200016b8 	.word	0x200016b8
 8003a98:	1b4e81b5 	.word	0x1b4e81b5
 8003a9c:	20000000 	.word	0x20000000

08003aa0 <get_mpu_acc_offset>:

static void get_mpu_acc_offset(void)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b082      	sub	sp, #8
 8003aa4:	af00      	add	r7, sp, #0
  int i;
  for (i = 0; i < 300; i++)
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	607b      	str	r3, [r7, #4]
 8003aaa:	e047      	b.n	8003b3c <get_mpu_acc_offset+0x9c>
  {
    mpu_read_regs(MPU6500_ACCEL_XOUT_H, mpu_buff, 14);
 8003aac:	220e      	movs	r2, #14
 8003aae:	493b      	ldr	r1, [pc, #236]	; (8003b9c <get_mpu_acc_offset+0xfc>)
 8003ab0:	203b      	movs	r0, #59	; 0x3b
 8003ab2:	f7ff fd9d 	bl	80035f0 <mpu_read_regs>

    mpu_data.ax_offset += mpu_buff[0] << 8 | mpu_buff[1];
 8003ab6:	4b3a      	ldr	r3, [pc, #232]	; (8003ba0 <get_mpu_acc_offset+0x100>)
 8003ab8:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8003abc:	b29a      	uxth	r2, r3
 8003abe:	4b37      	ldr	r3, [pc, #220]	; (8003b9c <get_mpu_acc_offset+0xfc>)
 8003ac0:	781b      	ldrb	r3, [r3, #0]
 8003ac2:	021b      	lsls	r3, r3, #8
 8003ac4:	b219      	sxth	r1, r3
 8003ac6:	4b35      	ldr	r3, [pc, #212]	; (8003b9c <get_mpu_acc_offset+0xfc>)
 8003ac8:	785b      	ldrb	r3, [r3, #1]
 8003aca:	b21b      	sxth	r3, r3
 8003acc:	430b      	orrs	r3, r1
 8003ace:	b21b      	sxth	r3, r3
 8003ad0:	b29b      	uxth	r3, r3
 8003ad2:	4413      	add	r3, r2
 8003ad4:	b29b      	uxth	r3, r3
 8003ad6:	b21a      	sxth	r2, r3
 8003ad8:	4b31      	ldr	r3, [pc, #196]	; (8003ba0 <get_mpu_acc_offset+0x100>)
 8003ada:	829a      	strh	r2, [r3, #20]
    mpu_data.ay_offset += mpu_buff[2] << 8 | mpu_buff[3];
 8003adc:	4b30      	ldr	r3, [pc, #192]	; (8003ba0 <get_mpu_acc_offset+0x100>)
 8003ade:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8003ae2:	b29a      	uxth	r2, r3
 8003ae4:	4b2d      	ldr	r3, [pc, #180]	; (8003b9c <get_mpu_acc_offset+0xfc>)
 8003ae6:	789b      	ldrb	r3, [r3, #2]
 8003ae8:	021b      	lsls	r3, r3, #8
 8003aea:	b219      	sxth	r1, r3
 8003aec:	4b2b      	ldr	r3, [pc, #172]	; (8003b9c <get_mpu_acc_offset+0xfc>)
 8003aee:	78db      	ldrb	r3, [r3, #3]
 8003af0:	b21b      	sxth	r3, r3
 8003af2:	430b      	orrs	r3, r1
 8003af4:	b21b      	sxth	r3, r3
 8003af6:	b29b      	uxth	r3, r3
 8003af8:	4413      	add	r3, r2
 8003afa:	b29b      	uxth	r3, r3
 8003afc:	b21a      	sxth	r2, r3
 8003afe:	4b28      	ldr	r3, [pc, #160]	; (8003ba0 <get_mpu_acc_offset+0x100>)
 8003b00:	82da      	strh	r2, [r3, #22]
    mpu_data.az_offset += mpu_buff[4] << 8 | mpu_buff[5] - 4096;
 8003b02:	4b27      	ldr	r3, [pc, #156]	; (8003ba0 <get_mpu_acc_offset+0x100>)
 8003b04:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8003b08:	b29a      	uxth	r2, r3
 8003b0a:	4b24      	ldr	r3, [pc, #144]	; (8003b9c <get_mpu_acc_offset+0xfc>)
 8003b0c:	791b      	ldrb	r3, [r3, #4]
 8003b0e:	021b      	lsls	r3, r3, #8
 8003b10:	b219      	sxth	r1, r3
 8003b12:	4b22      	ldr	r3, [pc, #136]	; (8003b9c <get_mpu_acc_offset+0xfc>)
 8003b14:	795b      	ldrb	r3, [r3, #5]
 8003b16:	b29b      	uxth	r3, r3
 8003b18:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
 8003b1c:	b29b      	uxth	r3, r3
 8003b1e:	b21b      	sxth	r3, r3
 8003b20:	430b      	orrs	r3, r1
 8003b22:	b21b      	sxth	r3, r3
 8003b24:	b29b      	uxth	r3, r3
 8003b26:	4413      	add	r3, r2
 8003b28:	b29b      	uxth	r3, r3
 8003b2a:	b21a      	sxth	r2, r3
 8003b2c:	4b1c      	ldr	r3, [pc, #112]	; (8003ba0 <get_mpu_acc_offset+0x100>)
 8003b2e:	831a      	strh	r2, [r3, #24]

    MPU_DELAY(2);
 8003b30:	2002      	movs	r0, #2
 8003b32:	f001 fbaf 	bl	8005294 <HAL_Delay>
  for (i = 0; i < 300; i++)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	3301      	adds	r3, #1
 8003b3a:	607b      	str	r3, [r7, #4]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8003b42:	dbb3      	blt.n	8003aac <get_mpu_acc_offset+0xc>
  }

  mpu_data.ax_offset = mpu_data.ax_offset / 300;
 8003b44:	4b16      	ldr	r3, [pc, #88]	; (8003ba0 <get_mpu_acc_offset+0x100>)
 8003b46:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8003b4a:	4a16      	ldr	r2, [pc, #88]	; (8003ba4 <get_mpu_acc_offset+0x104>)
 8003b4c:	fb82 1203 	smull	r1, r2, r2, r3
 8003b50:	1152      	asrs	r2, r2, #5
 8003b52:	17db      	asrs	r3, r3, #31
 8003b54:	1ad3      	subs	r3, r2, r3
 8003b56:	b21a      	sxth	r2, r3
 8003b58:	4b11      	ldr	r3, [pc, #68]	; (8003ba0 <get_mpu_acc_offset+0x100>)
 8003b5a:	829a      	strh	r2, [r3, #20]
  mpu_data.ay_offset = mpu_data.ay_offset / 300;
 8003b5c:	4b10      	ldr	r3, [pc, #64]	; (8003ba0 <get_mpu_acc_offset+0x100>)
 8003b5e:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8003b62:	4a10      	ldr	r2, [pc, #64]	; (8003ba4 <get_mpu_acc_offset+0x104>)
 8003b64:	fb82 1203 	smull	r1, r2, r2, r3
 8003b68:	1152      	asrs	r2, r2, #5
 8003b6a:	17db      	asrs	r3, r3, #31
 8003b6c:	1ad3      	subs	r3, r2, r3
 8003b6e:	b21a      	sxth	r2, r3
 8003b70:	4b0b      	ldr	r3, [pc, #44]	; (8003ba0 <get_mpu_acc_offset+0x100>)
 8003b72:	82da      	strh	r2, [r3, #22]
  mpu_data.az_offset = mpu_data.az_offset / 300;
 8003b74:	4b0a      	ldr	r3, [pc, #40]	; (8003ba0 <get_mpu_acc_offset+0x100>)
 8003b76:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8003b7a:	4a0a      	ldr	r2, [pc, #40]	; (8003ba4 <get_mpu_acc_offset+0x104>)
 8003b7c:	fb82 1203 	smull	r1, r2, r2, r3
 8003b80:	1152      	asrs	r2, r2, #5
 8003b82:	17db      	asrs	r3, r3, #31
 8003b84:	1ad3      	subs	r3, r2, r3
 8003b86:	b21a      	sxth	r2, r3
 8003b88:	4b05      	ldr	r3, [pc, #20]	; (8003ba0 <get_mpu_acc_offset+0x100>)
 8003b8a:	831a      	strh	r2, [r3, #24]

  imu_cali.acc_flag = 0;
 8003b8c:	4b06      	ldr	r3, [pc, #24]	; (8003ba8 <get_mpu_acc_offset+0x108>)
 8003b8e:	2200      	movs	r2, #0
 8003b90:	705a      	strb	r2, [r3, #1]
}
 8003b92:	bf00      	nop
 8003b94:	3708      	adds	r7, #8
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}
 8003b9a:	bf00      	nop
 8003b9c:	200016a8 	.word	0x200016a8
 8003ba0:	200016b8 	.word	0x200016b8
 8003ba4:	1b4e81b5 	.word	0x1b4e81b5
 8003ba8:	20000000 	.word	0x20000000

08003bac <get_ist_mag_offset>:

static void get_ist_mag_offset(void)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b086      	sub	sp, #24
 8003bb0:	af00      	add	r7, sp, #0
  int16_t mag_max[3], mag_min[3];
  int i;
  for (i = 0; i < 5000; i++)
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	617b      	str	r3, [r7, #20]
 8003bb6:	e062      	b.n	8003c7e <get_ist_mag_offset+0xd2>
  {
    ist8310_get_data((uint8_t *)&mpu_data.mx);
 8003bb8:	4856      	ldr	r0, [pc, #344]	; (8003d14 <get_ist_mag_offset+0x168>)
 8003bba:	f7ff fe83 	bl	80038c4 <ist8310_get_data>
    if ((abs(mpu_data.mx) < 400) && (abs(mpu_data.my) < 400) && (abs(mpu_data.mz) < 400))
 8003bbe:	4b56      	ldr	r3, [pc, #344]	; (8003d18 <get_ist_mag_offset+0x16c>)
 8003bc0:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	bfb8      	it	lt
 8003bc8:	425b      	neglt	r3, r3
 8003bca:	b29b      	uxth	r3, r3
 8003bcc:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8003bd0:	d24f      	bcs.n	8003c72 <get_ist_mag_offset+0xc6>
 8003bd2:	4b51      	ldr	r3, [pc, #324]	; (8003d18 <get_ist_mag_offset+0x16c>)
 8003bd4:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	bfb8      	it	lt
 8003bdc:	425b      	neglt	r3, r3
 8003bde:	b29b      	uxth	r3, r3
 8003be0:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8003be4:	d245      	bcs.n	8003c72 <get_ist_mag_offset+0xc6>
 8003be6:	4b4c      	ldr	r3, [pc, #304]	; (8003d18 <get_ist_mag_offset+0x16c>)
 8003be8:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	bfb8      	it	lt
 8003bf0:	425b      	neglt	r3, r3
 8003bf2:	b29b      	uxth	r3, r3
 8003bf4:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8003bf8:	d23b      	bcs.n	8003c72 <get_ist_mag_offset+0xc6>
    {
      mag_max[0] = VAL_MAX(mag_max[0], mpu_data.mx);
 8003bfa:	4b47      	ldr	r3, [pc, #284]	; (8003d18 <get_ist_mag_offset+0x16c>)
 8003bfc:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8003c00:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003c04:	4293      	cmp	r3, r2
 8003c06:	bfb8      	it	lt
 8003c08:	4613      	movlt	r3, r2
 8003c0a:	b21b      	sxth	r3, r3
 8003c0c:	81bb      	strh	r3, [r7, #12]
      mag_min[0] = VAL_MIN(mag_min[0], mpu_data.mx);
 8003c0e:	4b42      	ldr	r3, [pc, #264]	; (8003d18 <get_ist_mag_offset+0x16c>)
 8003c10:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8003c14:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	bfa8      	it	ge
 8003c1c:	4613      	movge	r3, r2
 8003c1e:	b21b      	sxth	r3, r3
 8003c20:	80bb      	strh	r3, [r7, #4]

      mag_max[1] = VAL_MAX(mag_max[1], mpu_data.my);
 8003c22:	4b3d      	ldr	r3, [pc, #244]	; (8003d18 <get_ist_mag_offset+0x16c>)
 8003c24:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 8003c28:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	bfb8      	it	lt
 8003c30:	4613      	movlt	r3, r2
 8003c32:	b21b      	sxth	r3, r3
 8003c34:	81fb      	strh	r3, [r7, #14]
      mag_min[1] = VAL_MIN(mag_min[1], mpu_data.my);
 8003c36:	4b38      	ldr	r3, [pc, #224]	; (8003d18 <get_ist_mag_offset+0x16c>)
 8003c38:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 8003c3c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003c40:	4293      	cmp	r3, r2
 8003c42:	bfa8      	it	ge
 8003c44:	4613      	movge	r3, r2
 8003c46:	b21b      	sxth	r3, r3
 8003c48:	80fb      	strh	r3, [r7, #6]

      mag_max[2] = VAL_MAX(mag_max[2], mpu_data.mz);
 8003c4a:	4b33      	ldr	r3, [pc, #204]	; (8003d18 <get_ist_mag_offset+0x16c>)
 8003c4c:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 8003c50:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003c54:	4293      	cmp	r3, r2
 8003c56:	bfb8      	it	lt
 8003c58:	4613      	movlt	r3, r2
 8003c5a:	b21b      	sxth	r3, r3
 8003c5c:	823b      	strh	r3, [r7, #16]
      mag_min[2] = VAL_MIN(mag_min[2], mpu_data.mz);
 8003c5e:	4b2e      	ldr	r3, [pc, #184]	; (8003d18 <get_ist_mag_offset+0x16c>)
 8003c60:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 8003c64:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	bfa8      	it	ge
 8003c6c:	4613      	movge	r3, r2
 8003c6e:	b21b      	sxth	r3, r3
 8003c70:	813b      	strh	r3, [r7, #8]
    }
    MPU_DELAY(2);
 8003c72:	2002      	movs	r0, #2
 8003c74:	f001 fb0e 	bl	8005294 <HAL_Delay>
  for (i = 0; i < 5000; i++)
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	3301      	adds	r3, #1
 8003c7c:	617b      	str	r3, [r7, #20]
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	f241 3287 	movw	r2, #4999	; 0x1387
 8003c84:	4293      	cmp	r3, r2
 8003c86:	dd97      	ble.n	8003bb8 <get_ist_mag_offset+0xc>
  }
  mpu_data.mx_offset = (int16_t)((mag_max[0] + mag_min[0]) * 0.5f);
 8003c88:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003c8c:	461a      	mov	r2, r3
 8003c8e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003c92:	4413      	add	r3, r2
 8003c94:	ee07 3a90 	vmov	s15, r3
 8003c98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c9c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003ca0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003ca4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003ca8:	ee17 3a90 	vmov	r3, s15
 8003cac:	b21a      	sxth	r2, r3
 8003cae:	4b1a      	ldr	r3, [pc, #104]	; (8003d18 <get_ist_mag_offset+0x16c>)
 8003cb0:	841a      	strh	r2, [r3, #32]
  mpu_data.my_offset = (int16_t)((mag_max[1] + mag_min[1]) * 0.5f);
 8003cb2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003cb6:	461a      	mov	r2, r3
 8003cb8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003cbc:	4413      	add	r3, r2
 8003cbe:	ee07 3a90 	vmov	s15, r3
 8003cc2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003cc6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003cca:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003cce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003cd2:	ee17 3a90 	vmov	r3, s15
 8003cd6:	b21a      	sxth	r2, r3
 8003cd8:	4b0f      	ldr	r3, [pc, #60]	; (8003d18 <get_ist_mag_offset+0x16c>)
 8003cda:	845a      	strh	r2, [r3, #34]	; 0x22
  mpu_data.mz_offset = (int16_t)((mag_max[2] + mag_min[2]) * 0.5f);
 8003cdc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003ce0:	461a      	mov	r2, r3
 8003ce2:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8003ce6:	4413      	add	r3, r2
 8003ce8:	ee07 3a90 	vmov	s15, r3
 8003cec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003cf0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003cf4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003cf8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003cfc:	ee17 3a90 	vmov	r3, s15
 8003d00:	b21a      	sxth	r2, r3
 8003d02:	4b05      	ldr	r3, [pc, #20]	; (8003d18 <get_ist_mag_offset+0x16c>)
 8003d04:	849a      	strh	r2, [r3, #36]	; 0x24

  imu_cali.mag_flag = 0;
 8003d06:	4b05      	ldr	r3, [pc, #20]	; (8003d1c <get_ist_mag_offset+0x170>)
 8003d08:	2200      	movs	r2, #0
 8003d0a:	709a      	strb	r2, [r3, #2]
}
 8003d0c:	bf00      	nop
 8003d0e:	3718      	adds	r7, #24
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd80      	pop	{r7, pc}
 8003d14:	200016c4 	.word	0x200016c4
 8003d18:	200016b8 	.word	0x200016b8
 8003d1c:	20000000 	.word	0x20000000

08003d20 <pwm_device_init>:
#include "tim.h"
#include "sys.h"
#include "drv_io.h"

void pwm_device_init(void)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	af00      	add	r7, sp, #0
  HAL_TIM_PWM_Start(&htim3,  TIM_CHANNEL_2); // ctrl imu temperature
 8003d24:	2104      	movs	r1, #4
 8003d26:	4808      	ldr	r0, [pc, #32]	; (8003d48 <pwm_device_init+0x28>)
 8003d28:	f005 fb4c 	bl	80093c4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1); // beep
 8003d2c:	2100      	movs	r1, #0
 8003d2e:	4807      	ldr	r0, [pc, #28]	; (8003d4c <pwm_device_init+0x2c>)
 8003d30:	f005 fb48 	bl	80093c4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1,  TIM_CHANNEL_1); // friction wheel
 8003d34:	2100      	movs	r1, #0
 8003d36:	4806      	ldr	r0, [pc, #24]	; (8003d50 <pwm_device_init+0x30>)
 8003d38:	f005 fb44 	bl	80093c4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1,  TIM_CHANNEL_4);
 8003d3c:	210c      	movs	r1, #12
 8003d3e:	4804      	ldr	r0, [pc, #16]	; (8003d50 <pwm_device_init+0x30>)
 8003d40:	f005 fb40 	bl	80093c4 <HAL_TIM_PWM_Start>
}
 8003d44:	bf00      	nop
 8003d46:	bd80      	pop	{r7, pc}
 8003d48:	2000208c 	.word	0x2000208c
 8003d4c:	200020d4 	.word	0x200020d4
 8003d50:	20001ffc 	.word	0x20001ffc

08003d54 <beep_set_tune>:
  *fric_spd1 = LEFT_FRICTION;
  *fric_spd2 = RIGHT_FRICTION;
}

void beep_set_tune(uint16_t tune, uint16_t ctrl)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b083      	sub	sp, #12
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	460a      	mov	r2, r1
 8003d5e:	80fb      	strh	r3, [r7, #6]
 8003d60:	4613      	mov	r3, r2
 8003d62:	80bb      	strh	r3, [r7, #4]
  BEEP_TUNE = tune;
 8003d64:	4a05      	ldr	r2, [pc, #20]	; (8003d7c <beep_set_tune+0x28>)
 8003d66:	88fb      	ldrh	r3, [r7, #6]
 8003d68:	62d3      	str	r3, [r2, #44]	; 0x2c
  BEEP_CTRL = ctrl;
 8003d6a:	4a04      	ldr	r2, [pc, #16]	; (8003d7c <beep_set_tune+0x28>)
 8003d6c:	88bb      	ldrh	r3, [r7, #4]
 8003d6e:	6353      	str	r3, [r2, #52]	; 0x34
}
 8003d70:	bf00      	nop
 8003d72:	370c      	adds	r7, #12
 8003d74:	46bd      	mov	sp, r7
 8003d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7a:	4770      	bx	lr
 8003d7c:	40001800 	.word	0x40001800

08003d80 <beep_set_times>:
}

static uint8_t beep_times;

int32_t beep_set_times(uint8_t times)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b083      	sub	sp, #12
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	4603      	mov	r3, r0
 8003d88:	71fb      	strb	r3, [r7, #7]
  beep_times = times;
 8003d8a:	4a05      	ldr	r2, [pc, #20]	; (8003da0 <beep_set_times+0x20>)
 8003d8c:	79fb      	ldrb	r3, [r7, #7]
 8003d8e:	7013      	strb	r3, [r2, #0]
  return 0;
 8003d90:	2300      	movs	r3, #0
}
 8003d92:	4618      	mov	r0, r3
 8003d94:	370c      	adds	r7, #12
 8003d96:	46bd      	mov	sp, r7
 8003d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9c:	4770      	bx	lr
 8003d9e:	bf00      	nop
 8003da0:	200016de 	.word	0x200016de

08003da4 <beep_ctrl_times>:

int32_t beep_ctrl_times(void *argc)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b082      	sub	sp, #8
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  static uint32_t beep_tick;
  static uint32_t times_tick;
  static uint8_t times;

  if(get_time_ms() - beep_tick > 3500)
 8003dac:	f7ff f940 	bl	8003030 <get_time_ms>
 8003db0:	4602      	mov	r2, r0
 8003db2:	4b23      	ldr	r3, [pc, #140]	; (8003e40 <beep_ctrl_times+0x9c>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	1ad3      	subs	r3, r2, r3
 8003db8:	f640 52ac 	movw	r2, #3500	; 0xdac
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d90e      	bls.n	8003dde <beep_ctrl_times+0x3a>
  {
    times = beep_times;
 8003dc0:	4b20      	ldr	r3, [pc, #128]	; (8003e44 <beep_ctrl_times+0xa0>)
 8003dc2:	781a      	ldrb	r2, [r3, #0]
 8003dc4:	4b20      	ldr	r3, [pc, #128]	; (8003e48 <beep_ctrl_times+0xa4>)
 8003dc6:	701a      	strb	r2, [r3, #0]
    beep_tick = get_time_ms();
 8003dc8:	f7ff f932 	bl	8003030 <get_time_ms>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	4a1c      	ldr	r2, [pc, #112]	; (8003e40 <beep_ctrl_times+0x9c>)
 8003dd0:	6013      	str	r3, [r2, #0]
    times_tick = get_time_ms();
 8003dd2:	f7ff f92d 	bl	8003030 <get_time_ms>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	4a1c      	ldr	r2, [pc, #112]	; (8003e4c <beep_ctrl_times+0xa8>)
 8003dda:	6013      	str	r3, [r2, #0]
 8003ddc:	e02a      	b.n	8003e34 <beep_ctrl_times+0x90>
  }
  else if(times != 0)
 8003dde:	4b1a      	ldr	r3, [pc, #104]	; (8003e48 <beep_ctrl_times+0xa4>)
 8003de0:	781b      	ldrb	r3, [r3, #0]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d026      	beq.n	8003e34 <beep_ctrl_times+0x90>
  {
    if(get_time_ms() - times_tick < 100)
 8003de6:	f7ff f923 	bl	8003030 <get_time_ms>
 8003dea:	4602      	mov	r2, r0
 8003dec:	4b17      	ldr	r3, [pc, #92]	; (8003e4c <beep_ctrl_times+0xa8>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	1ad3      	subs	r3, r2, r3
 8003df2:	2b63      	cmp	r3, #99	; 0x63
 8003df4:	d805      	bhi.n	8003e02 <beep_ctrl_times+0x5e>
    {
      beep_set_tune(500, 150);
 8003df6:	2196      	movs	r1, #150	; 0x96
 8003df8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003dfc:	f7ff ffaa 	bl	8003d54 <beep_set_tune>
 8003e00:	e018      	b.n	8003e34 <beep_ctrl_times+0x90>
    }
    else if(get_time_ms() - times_tick < 300)
 8003e02:	f7ff f915 	bl	8003030 <get_time_ms>
 8003e06:	4602      	mov	r2, r0
 8003e08:	4b10      	ldr	r3, [pc, #64]	; (8003e4c <beep_ctrl_times+0xa8>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	1ad3      	subs	r3, r2, r3
 8003e0e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8003e12:	d204      	bcs.n	8003e1e <beep_ctrl_times+0x7a>
    {
      beep_set_tune(0, 0);
 8003e14:	2100      	movs	r1, #0
 8003e16:	2000      	movs	r0, #0
 8003e18:	f7ff ff9c 	bl	8003d54 <beep_set_tune>
 8003e1c:	e00a      	b.n	8003e34 <beep_ctrl_times+0x90>
    }
    else
    {
      times--;
 8003e1e:	4b0a      	ldr	r3, [pc, #40]	; (8003e48 <beep_ctrl_times+0xa4>)
 8003e20:	781b      	ldrb	r3, [r3, #0]
 8003e22:	3b01      	subs	r3, #1
 8003e24:	b2da      	uxtb	r2, r3
 8003e26:	4b08      	ldr	r3, [pc, #32]	; (8003e48 <beep_ctrl_times+0xa4>)
 8003e28:	701a      	strb	r2, [r3, #0]
      times_tick = get_time_ms();
 8003e2a:	f7ff f901 	bl	8003030 <get_time_ms>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	4a06      	ldr	r2, [pc, #24]	; (8003e4c <beep_ctrl_times+0xa8>)
 8003e32:	6013      	str	r3, [r2, #0]
    }
  }

  return 0;
 8003e34:	2300      	movs	r3, #0
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3708      	adds	r7, #8
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}
 8003e3e:	bf00      	nop
 8003e40:	200016e0 	.word	0x200016e0
 8003e44:	200016de 	.word	0x200016de
 8003e48:	200016e4 	.word	0x200016e4
 8003e4c:	200016e8 	.word	0x200016e8

08003e50 <led_toggle_300ms>:

int32_t led_toggle_300ms(void *argc)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b082      	sub	sp, #8
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  static uint32_t led_tick;

  if (get_time_ms() - led_tick > 300)
 8003e58:	f7ff f8ea 	bl	8003030 <get_time_ms>
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	4b0a      	ldr	r3, [pc, #40]	; (8003e88 <led_toggle_300ms+0x38>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	1ad3      	subs	r3, r2, r3
 8003e64:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8003e68:	d909      	bls.n	8003e7e <led_toggle_300ms+0x2e>
  {
    LED_GREEN_TOGGLE();
 8003e6a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003e6e:	4807      	ldr	r0, [pc, #28]	; (8003e8c <led_toggle_300ms+0x3c>)
 8003e70:	f002 ff8d 	bl	8006d8e <HAL_GPIO_TogglePin>
    led_tick = get_time_ms();
 8003e74:	f7ff f8dc 	bl	8003030 <get_time_ms>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	4a03      	ldr	r2, [pc, #12]	; (8003e88 <led_toggle_300ms+0x38>)
 8003e7c:	6013      	str	r3, [r2, #0]
  }

  return 0;
 8003e7e:	2300      	movs	r3, #0
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	3708      	adds	r7, #8
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}
 8003e88:	200016ec 	.word	0x200016ec
 8003e8c:	40021400 	.word	0x40021400

08003e90 <HAL_UART_RxHalfCpltCallback>:
  m_obj->call_back_f = fun;
  return;
}

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b082      	sub	sp, #8
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  if (huart == &huart6)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	4a06      	ldr	r2, [pc, #24]	; (8003eb4 <HAL_UART_RxHalfCpltCallback+0x24>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d104      	bne.n	8003eaa <HAL_UART_RxHalfCpltCallback+0x1a>
  {
    usart_rec_to_buff(&usart6_manage_obj, INTERRUPT_TYPE_DMA_HALF);
 8003ea0:	2101      	movs	r1, #1
 8003ea2:	4805      	ldr	r0, [pc, #20]	; (8003eb8 <HAL_UART_RxHalfCpltCallback+0x28>)
 8003ea4:	f000 f8c8 	bl	8004038 <usart_rec_to_buff>
  }

  return;
 8003ea8:	bf00      	nop
 8003eaa:	bf00      	nop
}
 8003eac:	3708      	adds	r7, #8
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}
 8003eb2:	bf00      	nop
 8003eb4:	2000211c 	.word	0x2000211c
 8003eb8:	20001ef0 	.word	0x20001ef0

08003ebc <usart6_manage_init>:
    usart_rec_to_buff(&usart6_manage_obj, INTERRUPT_TYPE_UART);
  }
}

void usart6_manage_init(void)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	af00      	add	r7, sp, #0
  usart6_manage_obj.rx_buffer = usart6_rx_buff;
 8003ec0:	4b1a      	ldr	r3, [pc, #104]	; (8003f2c <usart6_manage_init+0x70>)
 8003ec2:	4a1b      	ldr	r2, [pc, #108]	; (8003f30 <usart6_manage_init+0x74>)
 8003ec4:	60da      	str	r2, [r3, #12]
  usart6_manage_obj.rx_buffer_size = USART6_RX_BUFFER_SIZE;
 8003ec6:	4b19      	ldr	r3, [pc, #100]	; (8003f2c <usart6_manage_init+0x70>)
 8003ec8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ecc:	811a      	strh	r2, [r3, #8]
  usart6_manage_obj.dma_h = &hdma_usart6_rx;
 8003ece:	4b17      	ldr	r3, [pc, #92]	; (8003f2c <usart6_manage_init+0x70>)
 8003ed0:	4a18      	ldr	r2, [pc, #96]	; (8003f34 <usart6_manage_init+0x78>)
 8003ed2:	605a      	str	r2, [r3, #4]
  usart6_manage_obj.uart_h = &huart6;
 8003ed4:	4b15      	ldr	r3, [pc, #84]	; (8003f2c <usart6_manage_init+0x70>)
 8003ed6:	4a18      	ldr	r2, [pc, #96]	; (8003f38 <usart6_manage_init+0x7c>)
 8003ed8:	601a      	str	r2, [r3, #0]
  usart6_manage_obj.tx_fifo_buffer = usart6_tx_fifo_buff;
 8003eda:	4b14      	ldr	r3, [pc, #80]	; (8003f2c <usart6_manage_init+0x70>)
 8003edc:	4a17      	ldr	r2, [pc, #92]	; (8003f3c <usart6_manage_init+0x80>)
 8003ede:	639a      	str	r2, [r3, #56]	; 0x38
  usart6_manage_obj.tx_fifo_size = USART6_TX_FIFO_SIZE;
 8003ee0:	4b12      	ldr	r3, [pc, #72]	; (8003f2c <usart6_manage_init+0x70>)
 8003ee2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003ee6:	879a      	strh	r2, [r3, #60]	; 0x3c
  usart6_manage_obj.tx_buffer_size = USART6_TX_BUFFER_SIZE;
 8003ee8:	4b10      	ldr	r3, [pc, #64]	; (8003f2c <usart6_manage_init+0x70>)
 8003eea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003eee:	839a      	strh	r2, [r3, #28]
  usart6_manage_obj.tx_buffer = usart6_tx_buff;
 8003ef0:	4b0e      	ldr	r3, [pc, #56]	; (8003f2c <usart6_manage_init+0x70>)
 8003ef2:	4a13      	ldr	r2, [pc, #76]	; (8003f40 <usart6_manage_init+0x84>)
 8003ef4:	619a      	str	r2, [r3, #24]
  usart6_manage_obj.is_sending = 0;
 8003ef6:	4b0d      	ldr	r3, [pc, #52]	; (8003f2c <usart6_manage_init+0x70>)
 8003ef8:	2200      	movs	r2, #0
 8003efa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  fifo_s_init(&(usart6_manage_obj.tx_fifo), usart6_tx_fifo_buff, USART6_TX_FIFO_SIZE);
 8003efe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003f02:	490e      	ldr	r1, [pc, #56]	; (8003f3c <usart6_manage_init+0x80>)
 8003f04:	480f      	ldr	r0, [pc, #60]	; (8003f44 <usart6_manage_init+0x88>)
 8003f06:	f00e ff0e 	bl	8012d26 <fifo_s_init>

  HAL_UART_Receive_DMA(&huart6, usart6_rx_buff, USART6_RX_BUFFER_SIZE);
 8003f0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f0e:	4908      	ldr	r1, [pc, #32]	; (8003f30 <usart6_manage_init+0x74>)
 8003f10:	4809      	ldr	r0, [pc, #36]	; (8003f38 <usart6_manage_init+0x7c>)
 8003f12:	f006 fa7f 	bl	800a414 <HAL_UART_Receive_DMA>
  __HAL_UART_ENABLE_IT(&huart6, UART_IT_IDLE);
 8003f16:	4b08      	ldr	r3, [pc, #32]	; (8003f38 <usart6_manage_init+0x7c>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	68da      	ldr	r2, [r3, #12]
 8003f1c:	4b06      	ldr	r3, [pc, #24]	; (8003f38 <usart6_manage_init+0x7c>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f042 0210 	orr.w	r2, r2, #16
 8003f24:	60da      	str	r2, [r3, #12]
}
 8003f26:	bf00      	nop
 8003f28:	bd80      	pop	{r7, pc}
 8003f2a:	bf00      	nop
 8003f2c:	20001ef0 	.word	0x20001ef0
 8003f30:	200016f0 	.word	0x200016f0
 8003f34:	20002164 	.word	0x20002164
 8003f38:	2000211c 	.word	0x2000211c
 8003f3c:	20001af0 	.word	0x20001af0
 8003f40:	200018f0 	.word	0x200018f0
 8003f44:	20001f10 	.word	0x20001f10

08003f48 <usart6_transmit>:

  return 0;
}

void usart6_transmit(uint8_t *buff, uint16_t len)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b082      	sub	sp, #8
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
 8003f50:	460b      	mov	r3, r1
 8003f52:	807b      	strh	r3, [r7, #2]
  usart_transmit(&usart6_manage_obj, buff, len);
 8003f54:	887b      	ldrh	r3, [r7, #2]
 8003f56:	461a      	mov	r2, r3
 8003f58:	6879      	ldr	r1, [r7, #4]
 8003f5a:	4803      	ldr	r0, [pc, #12]	; (8003f68 <usart6_transmit+0x20>)
 8003f5c:	f000 f806 	bl	8003f6c <usart_transmit>
}
 8003f60:	bf00      	nop
 8003f62:	3708      	adds	r7, #8
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bd80      	pop	{r7, pc}
 8003f68:	20001ef0 	.word	0x20001ef0

08003f6c <usart_transmit>:

UART_Err usart_transmit(usart_manage_obj_t *m_obj, uint8_t *buf, uint16_t len)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b086      	sub	sp, #24
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	60f8      	str	r0, [r7, #12]
 8003f74:	60b9      	str	r1, [r7, #8]
 8003f76:	4613      	mov	r3, r2
 8003f78:	80fb      	strh	r3, [r7, #6]
  uint16_t to_send_len;
  uint16_t to_tx_fifo_len;

  if (m_obj->is_sending == 0)
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d122      	bne.n	8003fca <usart_transmit+0x5e>
  {
    if (len < m_obj->tx_buffer_size)
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	8b9b      	ldrh	r3, [r3, #28]
 8003f88:	88fa      	ldrh	r2, [r7, #6]
 8003f8a:	429a      	cmp	r2, r3
 8003f8c:	d204      	bcs.n	8003f98 <usart_transmit+0x2c>
    {
      to_send_len = len;
 8003f8e:	88fb      	ldrh	r3, [r7, #6]
 8003f90:	82fb      	strh	r3, [r7, #22]
      to_tx_fifo_len = 0;
 8003f92:	2300      	movs	r3, #0
 8003f94:	82bb      	strh	r3, [r7, #20]
 8003f96:	e027      	b.n	8003fe8 <usart_transmit+0x7c>
    }
    else if (len < m_obj->tx_buffer_size + m_obj->tx_fifo_size)
 8003f98:	88fa      	ldrh	r2, [r7, #6]
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	8b9b      	ldrh	r3, [r3, #28]
 8003f9e:	4619      	mov	r1, r3
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8003fa4:	440b      	add	r3, r1
 8003fa6:	429a      	cmp	r2, r3
 8003fa8:	da08      	bge.n	8003fbc <usart_transmit+0x50>
    {
      to_send_len = m_obj->tx_buffer_size;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	8b9b      	ldrh	r3, [r3, #28]
 8003fae:	82fb      	strh	r3, [r7, #22]
      to_tx_fifo_len = len - m_obj->tx_buffer_size;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	8b9b      	ldrh	r3, [r3, #28]
 8003fb4:	88fa      	ldrh	r2, [r7, #6]
 8003fb6:	1ad3      	subs	r3, r2, r3
 8003fb8:	82bb      	strh	r3, [r7, #20]
 8003fba:	e015      	b.n	8003fe8 <usart_transmit+0x7c>
    }
    else
    {
      to_send_len = m_obj->tx_buffer_size;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	8b9b      	ldrh	r3, [r3, #28]
 8003fc0:	82fb      	strh	r3, [r7, #22]
      to_tx_fifo_len = m_obj->tx_fifo_size;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8003fc6:	82bb      	strh	r3, [r7, #20]
 8003fc8:	e00e      	b.n	8003fe8 <usart_transmit+0x7c>
    }
  }
  else
  {
    if (len < m_obj->tx_fifo_size)
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8003fce:	88fa      	ldrh	r2, [r7, #6]
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d204      	bcs.n	8003fde <usart_transmit+0x72>
    {
      to_send_len = 0;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	82fb      	strh	r3, [r7, #22]
      to_tx_fifo_len = len;
 8003fd8:	88fb      	ldrh	r3, [r7, #6]
 8003fda:	82bb      	strh	r3, [r7, #20]
 8003fdc:	e004      	b.n	8003fe8 <usart_transmit+0x7c>
    }
    else
    {
      to_send_len = 0;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	82fb      	strh	r3, [r7, #22]
      to_tx_fifo_len = m_obj->tx_fifo_size;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8003fe6:	82bb      	strh	r3, [r7, #20]
    }
  }

  if (to_send_len > 0)
 8003fe8:	8afb      	ldrh	r3, [r7, #22]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d012      	beq.n	8004014 <usart_transmit+0xa8>
  {
    memcpy(m_obj->tx_buffer, buf, to_send_len);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	699b      	ldr	r3, [r3, #24]
 8003ff2:	8afa      	ldrh	r2, [r7, #22]
 8003ff4:	68b9      	ldr	r1, [r7, #8]
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f00f ffce 	bl	8013f98 <memcpy>
    m_obj->is_sending = 1;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2201      	movs	r2, #1
 8004000:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_UART_Transmit_DMA(m_obj->uart_h, m_obj->tx_buffer, to_send_len);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	6818      	ldr	r0, [r3, #0]
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	699b      	ldr	r3, [r3, #24]
 800400c:	8afa      	ldrh	r2, [r7, #22]
 800400e:	4619      	mov	r1, r3
 8004010:	f006 f990 	bl	800a334 <HAL_UART_Transmit_DMA>
  }
  if (to_tx_fifo_len > 0)
 8004014:	8abb      	ldrh	r3, [r7, #20]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d009      	beq.n	800402e <usart_transmit+0xc2>
  {
    fifo_s_puts(&(m_obj->tx_fifo), (char *)(buf) + to_send_len, to_tx_fifo_len);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	f103 0020 	add.w	r0, r3, #32
 8004020:	8afb      	ldrh	r3, [r7, #22]
 8004022:	68ba      	ldr	r2, [r7, #8]
 8004024:	4413      	add	r3, r2
 8004026:	8aba      	ldrh	r2, [r7, #20]
 8004028:	4619      	mov	r1, r3
 800402a:	f00e fe9e 	bl	8012d6a <fifo_s_puts>
  }

  return ERR_NORAML;
 800402e:	2300      	movs	r3, #0
}
 8004030:	4618      	mov	r0, r3
 8004032:	3718      	adds	r7, #24
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}

08004038 <usart_rec_to_buff>:
  }
  return;
}

static void usart_rec_to_buff(usart_manage_obj_t *m_obj, interrput_type int_type)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b088      	sub	sp, #32
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
 8004040:	460b      	mov	r3, r1
 8004042:	70fb      	strb	r3, [r7, #3]
  uint16_t read_end_ptr = 0;
 8004044:	2300      	movs	r3, #0
 8004046:	83fb      	strh	r3, [r7, #30]
  uint16_t read_length = 0;
 8004048:	2300      	movs	r3, #0
 800404a:	83bb      	strh	r3, [r7, #28]
  uint16_t read_success_length = 0;
 800404c:	2300      	movs	r3, #0
 800404e:	837b      	strh	r3, [r7, #26]
  uint16_t read_start_ptr = m_obj->read_start_index;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	8a1b      	ldrh	r3, [r3, #16]
 8004054:	833b      	strh	r3, [r7, #24]
  uint8_t *pdata = m_obj->rx_buffer;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	68db      	ldr	r3, [r3, #12]
 800405a:	617b      	str	r3, [r7, #20]

  UNUSED(read_success_length);

  uint16_t buff_left = m_obj->dma_h->Instance->NDTR;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	827b      	strh	r3, [r7, #18]

  if (int_type == INTERRUPT_TYPE_UART)
 8004066:	78fb      	ldrb	r3, [r7, #3]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d104      	bne.n	8004076 <usart_rec_to_buff+0x3e>
  {
    read_end_ptr = m_obj->rx_buffer_size - buff_left;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	891a      	ldrh	r2, [r3, #8]
 8004070:	8a7b      	ldrh	r3, [r7, #18]
 8004072:	1ad3      	subs	r3, r2, r3
 8004074:	83fb      	strh	r3, [r7, #30]
  }

  if (int_type == INTERRUPT_TYPE_DMA_HALF)
 8004076:	78fb      	ldrb	r3, [r7, #3]
 8004078:	2b01      	cmp	r3, #1
 800407a:	d103      	bne.n	8004084 <usart_rec_to_buff+0x4c>
  {
    read_end_ptr = m_obj->rx_buffer_size / 2;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	891b      	ldrh	r3, [r3, #8]
 8004080:	085b      	lsrs	r3, r3, #1
 8004082:	83fb      	strh	r3, [r7, #30]
  }

  if (int_type == INTERRUPT_TYPE_DMA_ALL)
 8004084:	78fb      	ldrb	r3, [r7, #3]
 8004086:	2b02      	cmp	r3, #2
 8004088:	d102      	bne.n	8004090 <usart_rec_to_buff+0x58>
  {
    read_end_ptr = m_obj->rx_buffer_size;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	891b      	ldrh	r3, [r3, #8]
 800408e:	83fb      	strh	r3, [r7, #30]
  }

  read_length = read_end_ptr - m_obj->read_start_index;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	8a1b      	ldrh	r3, [r3, #16]
 8004094:	8bfa      	ldrh	r2, [r7, #30]
 8004096:	1ad3      	subs	r3, r2, r3
 8004098:	83bb      	strh	r3, [r7, #28]

  if (m_obj->call_back_f != NULL)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	695b      	ldr	r3, [r3, #20]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d00b      	beq.n	80040ba <usart_rec_to_buff+0x82>
  {
    uint8_t *read_ptr = pdata + read_start_ptr;
 80040a2:	8b3b      	ldrh	r3, [r7, #24]
 80040a4:	697a      	ldr	r2, [r7, #20]
 80040a6:	4413      	add	r3, r2
 80040a8:	60fb      	str	r3, [r7, #12]
    read_success_length = m_obj->call_back_f(read_ptr, read_length);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	695b      	ldr	r3, [r3, #20]
 80040ae:	8bba      	ldrh	r2, [r7, #28]
 80040b0:	4611      	mov	r1, r2
 80040b2:	68f8      	ldr	r0, [r7, #12]
 80040b4:	4798      	blx	r3
 80040b6:	4603      	mov	r3, r0
 80040b8:	837b      	strh	r3, [r7, #26]
  }

  m_obj->read_start_index = (m_obj->read_start_index + read_length) % (m_obj->rx_buffer_size);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	8a1b      	ldrh	r3, [r3, #16]
 80040be:	461a      	mov	r2, r3
 80040c0:	8bbb      	ldrh	r3, [r7, #28]
 80040c2:	4413      	add	r3, r2
 80040c4:	687a      	ldr	r2, [r7, #4]
 80040c6:	8912      	ldrh	r2, [r2, #8]
 80040c8:	fb93 f1f2 	sdiv	r1, r3, r2
 80040cc:	fb01 f202 	mul.w	r2, r1, r2
 80040d0:	1a9b      	subs	r3, r3, r2
 80040d2:	b29a      	uxth	r2, r3
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	821a      	strh	r2, [r3, #16]

  return;
 80040d8:	bf00      	nop
}
 80040da:	3720      	adds	r7, #32
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}

080040e0 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80040e4:	4b17      	ldr	r3, [pc, #92]	; (8004144 <MX_CAN1_Init+0x64>)
 80040e6:	4a18      	ldr	r2, [pc, #96]	; (8004148 <MX_CAN1_Init+0x68>)
 80040e8:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 7;
 80040ea:	4b16      	ldr	r3, [pc, #88]	; (8004144 <MX_CAN1_Init+0x64>)
 80040ec:	2207      	movs	r2, #7
 80040ee:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80040f0:	4b14      	ldr	r3, [pc, #80]	; (8004144 <MX_CAN1_Init+0x64>)
 80040f2:	2200      	movs	r2, #0
 80040f4:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80040f6:	4b13      	ldr	r3, [pc, #76]	; (8004144 <MX_CAN1_Init+0x64>)
 80040f8:	2200      	movs	r2, #0
 80040fa:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 80040fc:	4b11      	ldr	r3, [pc, #68]	; (8004144 <MX_CAN1_Init+0x64>)
 80040fe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004102:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8004104:	4b0f      	ldr	r3, [pc, #60]	; (8004144 <MX_CAN1_Init+0x64>)
 8004106:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800410a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800410c:	4b0d      	ldr	r3, [pc, #52]	; (8004144 <MX_CAN1_Init+0x64>)
 800410e:	2200      	movs	r2, #0
 8004110:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8004112:	4b0c      	ldr	r3, [pc, #48]	; (8004144 <MX_CAN1_Init+0x64>)
 8004114:	2200      	movs	r2, #0
 8004116:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8004118:	4b0a      	ldr	r3, [pc, #40]	; (8004144 <MX_CAN1_Init+0x64>)
 800411a:	2200      	movs	r2, #0
 800411c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800411e:	4b09      	ldr	r3, [pc, #36]	; (8004144 <MX_CAN1_Init+0x64>)
 8004120:	2200      	movs	r2, #0
 8004122:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8004124:	4b07      	ldr	r3, [pc, #28]	; (8004144 <MX_CAN1_Init+0x64>)
 8004126:	2200      	movs	r2, #0
 8004128:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = ENABLE;
 800412a:	4b06      	ldr	r3, [pc, #24]	; (8004144 <MX_CAN1_Init+0x64>)
 800412c:	2201      	movs	r2, #1
 800412e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8004130:	4804      	ldr	r0, [pc, #16]	; (8004144 <MX_CAN1_Init+0x64>)
 8004132:	f001 f8d3 	bl	80052dc <HAL_CAN_Init>
 8004136:	4603      	mov	r3, r0
 8004138:	2b00      	cmp	r3, #0
 800413a:	d001      	beq.n	8004140 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 800413c:	f000 fb1e 	bl	800477c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8004140:	bf00      	nop
 8004142:	bd80      	pop	{r7, pc}
 8004144:	20001f30 	.word	0x20001f30
 8004148:	40006400 	.word	0x40006400

0800414c <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b08a      	sub	sp, #40	; 0x28
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004154:	f107 0314 	add.w	r3, r7, #20
 8004158:	2200      	movs	r2, #0
 800415a:	601a      	str	r2, [r3, #0]
 800415c:	605a      	str	r2, [r3, #4]
 800415e:	609a      	str	r2, [r3, #8]
 8004160:	60da      	str	r2, [r3, #12]
 8004162:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a21      	ldr	r2, [pc, #132]	; (80041f0 <HAL_CAN_MspInit+0xa4>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d13b      	bne.n	80041e6 <HAL_CAN_MspInit+0x9a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800416e:	2300      	movs	r3, #0
 8004170:	613b      	str	r3, [r7, #16]
 8004172:	4b20      	ldr	r3, [pc, #128]	; (80041f4 <HAL_CAN_MspInit+0xa8>)
 8004174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004176:	4a1f      	ldr	r2, [pc, #124]	; (80041f4 <HAL_CAN_MspInit+0xa8>)
 8004178:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800417c:	6413      	str	r3, [r2, #64]	; 0x40
 800417e:	4b1d      	ldr	r3, [pc, #116]	; (80041f4 <HAL_CAN_MspInit+0xa8>)
 8004180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004182:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004186:	613b      	str	r3, [r7, #16]
 8004188:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800418a:	2300      	movs	r3, #0
 800418c:	60fb      	str	r3, [r7, #12]
 800418e:	4b19      	ldr	r3, [pc, #100]	; (80041f4 <HAL_CAN_MspInit+0xa8>)
 8004190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004192:	4a18      	ldr	r2, [pc, #96]	; (80041f4 <HAL_CAN_MspInit+0xa8>)
 8004194:	f043 0308 	orr.w	r3, r3, #8
 8004198:	6313      	str	r3, [r2, #48]	; 0x30
 800419a:	4b16      	ldr	r3, [pc, #88]	; (80041f4 <HAL_CAN_MspInit+0xa8>)
 800419c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800419e:	f003 0308 	and.w	r3, r3, #8
 80041a2:	60fb      	str	r3, [r7, #12]
 80041a4:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80041a6:	2303      	movs	r3, #3
 80041a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041aa:	2302      	movs	r3, #2
 80041ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041ae:	2300      	movs	r3, #0
 80041b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041b2:	2303      	movs	r3, #3
 80041b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80041b6:	2309      	movs	r3, #9
 80041b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80041ba:	f107 0314 	add.w	r3, r7, #20
 80041be:	4619      	mov	r1, r3
 80041c0:	480d      	ldr	r0, [pc, #52]	; (80041f8 <HAL_CAN_MspInit+0xac>)
 80041c2:	f002 fc07 	bl	80069d4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 80041c6:	2200      	movs	r2, #0
 80041c8:	2105      	movs	r1, #5
 80041ca:	2013      	movs	r0, #19
 80041cc:	f001 ffd6 	bl	800617c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 80041d0:	2013      	movs	r0, #19
 80041d2:	f001 ffef 	bl	80061b4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 80041d6:	2200      	movs	r2, #0
 80041d8:	2105      	movs	r1, #5
 80041da:	2014      	movs	r0, #20
 80041dc:	f001 ffce 	bl	800617c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80041e0:	2014      	movs	r0, #20
 80041e2:	f001 ffe7 	bl	80061b4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80041e6:	bf00      	nop
 80041e8:	3728      	adds	r7, #40	; 0x28
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}
 80041ee:	bf00      	nop
 80041f0:	40006400 	.word	0x40006400
 80041f4:	40023800 	.word	0x40023800
 80041f8:	40020c00 	.word	0x40020c00

080041fc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b082      	sub	sp, #8
 8004200:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8004202:	2300      	movs	r3, #0
 8004204:	607b      	str	r3, [r7, #4]
 8004206:	4b10      	ldr	r3, [pc, #64]	; (8004248 <MX_DMA_Init+0x4c>)
 8004208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800420a:	4a0f      	ldr	r2, [pc, #60]	; (8004248 <MX_DMA_Init+0x4c>)
 800420c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004210:	6313      	str	r3, [r2, #48]	; 0x30
 8004212:	4b0d      	ldr	r3, [pc, #52]	; (8004248 <MX_DMA_Init+0x4c>)
 8004214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004216:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800421a:	607b      	str	r3, [r7, #4]
 800421c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 800421e:	2200      	movs	r2, #0
 8004220:	2105      	movs	r1, #5
 8004222:	2039      	movs	r0, #57	; 0x39
 8004224:	f001 ffaa 	bl	800617c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8004228:	2039      	movs	r0, #57	; 0x39
 800422a:	f001 ffc3 	bl	80061b4 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 800422e:	2200      	movs	r2, #0
 8004230:	2105      	movs	r1, #5
 8004232:	2045      	movs	r0, #69	; 0x45
 8004234:	f001 ffa2 	bl	800617c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8004238:	2045      	movs	r0, #69	; 0x45
 800423a:	f001 ffbb 	bl	80061b4 <HAL_NVIC_EnableIRQ>

}
 800423e:	bf00      	nop
 8004240:	3708      	adds	r7, #8
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}
 8004246:	bf00      	nop
 8004248:	40023800 	.word	0x40023800

0800424c <vApplicationStackOverflowHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 800424c:	b480      	push	{r7}
 800424e:	b083      	sub	sp, #12
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
 8004254:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8004256:	bf00      	nop
 8004258:	370c      	adds	r7, #12
 800425a:	46bd      	mov	sp, r7
 800425c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004260:	4770      	bx	lr

08004262 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8004262:	b480      	push	{r7}
 8004264:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8004266:	bf00      	nop
 8004268:	46bd      	mov	sp, r7
 800426a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426e:	4770      	bx	lr

08004270 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8004270:	b5b0      	push	{r4, r5, r7, lr}
 8004272:	b086      	sub	sp, #24
 8004274:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8004276:	4b09      	ldr	r3, [pc, #36]	; (800429c <MX_FREERTOS_Init+0x2c>)
 8004278:	1d3c      	adds	r4, r7, #4
 800427a:	461d      	mov	r5, r3
 800427c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800427e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004280:	682b      	ldr	r3, [r5, #0]
 8004282:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8004284:	1d3b      	adds	r3, r7, #4
 8004286:	2100      	movs	r1, #0
 8004288:	4618      	mov	r0, r3
 800428a:	f00a fd28 	bl	800ecde <osThreadCreate>
 800428e:	4603      	mov	r3, r0
 8004290:	4a03      	ldr	r2, [pc, #12]	; (80042a0 <MX_FREERTOS_Init+0x30>)
 8004292:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8004294:	bf00      	nop
 8004296:	3718      	adds	r7, #24
 8004298:	46bd      	mov	sp, r7
 800429a:	bdb0      	pop	{r4, r5, r7, pc}
 800429c:	08015554 	.word	0x08015554
 80042a0:	20001f58 	.word	0x20001f58

080042a4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b082      	sub	sp, #8
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80042ac:	f00c fa6a 	bl	8010784 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80042b0:	2001      	movs	r0, #1
 80042b2:	f00a fd3b 	bl	800ed2c <osDelay>
 80042b6:	e7fb      	b.n	80042b0 <StartDefaultTask+0xc>

080042b8 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b08e      	sub	sp, #56	; 0x38
 80042bc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80042c2:	2200      	movs	r2, #0
 80042c4:	601a      	str	r2, [r3, #0]
 80042c6:	605a      	str	r2, [r3, #4]
 80042c8:	609a      	str	r2, [r3, #8]
 80042ca:	60da      	str	r2, [r3, #12]
 80042cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80042ce:	2300      	movs	r3, #0
 80042d0:	623b      	str	r3, [r7, #32]
 80042d2:	4bb3      	ldr	r3, [pc, #716]	; (80045a0 <MX_GPIO_Init+0x2e8>)
 80042d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042d6:	4ab2      	ldr	r2, [pc, #712]	; (80045a0 <MX_GPIO_Init+0x2e8>)
 80042d8:	f043 0310 	orr.w	r3, r3, #16
 80042dc:	6313      	str	r3, [r2, #48]	; 0x30
 80042de:	4bb0      	ldr	r3, [pc, #704]	; (80045a0 <MX_GPIO_Init+0x2e8>)
 80042e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042e2:	f003 0310 	and.w	r3, r3, #16
 80042e6:	623b      	str	r3, [r7, #32]
 80042e8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80042ea:	2300      	movs	r3, #0
 80042ec:	61fb      	str	r3, [r7, #28]
 80042ee:	4bac      	ldr	r3, [pc, #688]	; (80045a0 <MX_GPIO_Init+0x2e8>)
 80042f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042f2:	4aab      	ldr	r2, [pc, #684]	; (80045a0 <MX_GPIO_Init+0x2e8>)
 80042f4:	f043 0302 	orr.w	r3, r3, #2
 80042f8:	6313      	str	r3, [r2, #48]	; 0x30
 80042fa:	4ba9      	ldr	r3, [pc, #676]	; (80045a0 <MX_GPIO_Init+0x2e8>)
 80042fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042fe:	f003 0302 	and.w	r3, r3, #2
 8004302:	61fb      	str	r3, [r7, #28]
 8004304:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8004306:	2300      	movs	r3, #0
 8004308:	61bb      	str	r3, [r7, #24]
 800430a:	4ba5      	ldr	r3, [pc, #660]	; (80045a0 <MX_GPIO_Init+0x2e8>)
 800430c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800430e:	4aa4      	ldr	r2, [pc, #656]	; (80045a0 <MX_GPIO_Init+0x2e8>)
 8004310:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004314:	6313      	str	r3, [r2, #48]	; 0x30
 8004316:	4ba2      	ldr	r3, [pc, #648]	; (80045a0 <MX_GPIO_Init+0x2e8>)
 8004318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800431a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800431e:	61bb      	str	r3, [r7, #24]
 8004320:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004322:	2300      	movs	r3, #0
 8004324:	617b      	str	r3, [r7, #20]
 8004326:	4b9e      	ldr	r3, [pc, #632]	; (80045a0 <MX_GPIO_Init+0x2e8>)
 8004328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800432a:	4a9d      	ldr	r2, [pc, #628]	; (80045a0 <MX_GPIO_Init+0x2e8>)
 800432c:	f043 0308 	orr.w	r3, r3, #8
 8004330:	6313      	str	r3, [r2, #48]	; 0x30
 8004332:	4b9b      	ldr	r3, [pc, #620]	; (80045a0 <MX_GPIO_Init+0x2e8>)
 8004334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004336:	f003 0308 	and.w	r3, r3, #8
 800433a:	617b      	str	r3, [r7, #20]
 800433c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800433e:	2300      	movs	r3, #0
 8004340:	613b      	str	r3, [r7, #16]
 8004342:	4b97      	ldr	r3, [pc, #604]	; (80045a0 <MX_GPIO_Init+0x2e8>)
 8004344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004346:	4a96      	ldr	r2, [pc, #600]	; (80045a0 <MX_GPIO_Init+0x2e8>)
 8004348:	f043 0304 	orr.w	r3, r3, #4
 800434c:	6313      	str	r3, [r2, #48]	; 0x30
 800434e:	4b94      	ldr	r3, [pc, #592]	; (80045a0 <MX_GPIO_Init+0x2e8>)
 8004350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004352:	f003 0304 	and.w	r3, r3, #4
 8004356:	613b      	str	r3, [r7, #16]
 8004358:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800435a:	2300      	movs	r3, #0
 800435c:	60fb      	str	r3, [r7, #12]
 800435e:	4b90      	ldr	r3, [pc, #576]	; (80045a0 <MX_GPIO_Init+0x2e8>)
 8004360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004362:	4a8f      	ldr	r2, [pc, #572]	; (80045a0 <MX_GPIO_Init+0x2e8>)
 8004364:	f043 0301 	orr.w	r3, r3, #1
 8004368:	6313      	str	r3, [r2, #48]	; 0x30
 800436a:	4b8d      	ldr	r3, [pc, #564]	; (80045a0 <MX_GPIO_Init+0x2e8>)
 800436c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800436e:	f003 0301 	and.w	r3, r3, #1
 8004372:	60fb      	str	r3, [r7, #12]
 8004374:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8004376:	2300      	movs	r3, #0
 8004378:	60bb      	str	r3, [r7, #8]
 800437a:	4b89      	ldr	r3, [pc, #548]	; (80045a0 <MX_GPIO_Init+0x2e8>)
 800437c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800437e:	4a88      	ldr	r2, [pc, #544]	; (80045a0 <MX_GPIO_Init+0x2e8>)
 8004380:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004384:	6313      	str	r3, [r2, #48]	; 0x30
 8004386:	4b86      	ldr	r3, [pc, #536]	; (80045a0 <MX_GPIO_Init+0x2e8>)
 8004388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800438a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800438e:	60bb      	str	r3, [r7, #8]
 8004390:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004392:	2300      	movs	r3, #0
 8004394:	607b      	str	r3, [r7, #4]
 8004396:	4b82      	ldr	r3, [pc, #520]	; (80045a0 <MX_GPIO_Init+0x2e8>)
 8004398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800439a:	4a81      	ldr	r2, [pc, #516]	; (80045a0 <MX_GPIO_Init+0x2e8>)
 800439c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043a0:	6313      	str	r3, [r2, #48]	; 0x30
 80043a2:	4b7f      	ldr	r3, [pc, #508]	; (80045a0 <MX_GPIO_Init+0x2e8>)
 80043a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043aa:	607b      	str	r3, [r7, #4]
 80043ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80043ae:	2300      	movs	r3, #0
 80043b0:	603b      	str	r3, [r7, #0]
 80043b2:	4b7b      	ldr	r3, [pc, #492]	; (80045a0 <MX_GPIO_Init+0x2e8>)
 80043b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043b6:	4a7a      	ldr	r2, [pc, #488]	; (80045a0 <MX_GPIO_Init+0x2e8>)
 80043b8:	f043 0320 	orr.w	r3, r3, #32
 80043bc:	6313      	str	r3, [r2, #48]	; 0x30
 80043be:	4b78      	ldr	r3, [pc, #480]	; (80045a0 <MX_GPIO_Init+0x2e8>)
 80043c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043c2:	f003 0320 	and.w	r3, r3, #32
 80043c6:	603b      	str	r3, [r7, #0]
 80043c8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, IST_RESET_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 80043ca:	2200      	movs	r2, #0
 80043cc:	f640 0104 	movw	r1, #2052	; 0x804
 80043d0:	4874      	ldr	r0, [pc, #464]	; (80045a4 <MX_GPIO_Init+0x2ec>)
 80043d2:	f002 fcc3 	bl	8006d5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, POWER1_CTRL_Pin|POWER2_CTRL_Pin|POWER3_CTRL_Pin|POWER4_CTRL_Pin, GPIO_PIN_RESET);
 80043d6:	2200      	movs	r2, #0
 80043d8:	213c      	movs	r1, #60	; 0x3c
 80043da:	4873      	ldr	r0, [pc, #460]	; (80045a8 <MX_GPIO_Init+0x2f0>)
 80043dc:	f002 fcbe 	bl	8006d5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LED_A_Pin|LED_B_Pin|LED_C_Pin|LED_D_Pin
 80043e0:	2200      	movs	r2, #0
 80043e2:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
 80043e6:	4871      	ldr	r0, [pc, #452]	; (80045ac <MX_GPIO_Init+0x2f4>)
 80043e8:	f002 fcb8 	bl	8006d5c <HAL_GPIO_WritePin>
                          |LED_E_Pin|LED_F_Pin|LED_G_Pin|LED_H_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, SPI5_NSS_Pin|LED_GREEN_Pin, GPIO_PIN_RESET);
 80043ec:	2200      	movs	r2, #0
 80043ee:	f244 0140 	movw	r1, #16448	; 0x4040
 80043f2:	486f      	ldr	r0, [pc, #444]	; (80045b0 <MX_GPIO_Init+0x2f8>)
 80043f4:	f002 fcb2 	bl	8006d5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IO_PROBE_GPIO_Port, IO_PROBE_Pin, GPIO_PIN_RESET);
 80043f8:	2200      	movs	r2, #0
 80043fa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80043fe:	486d      	ldr	r0, [pc, #436]	; (80045b4 <MX_GPIO_Init+0x2fc>)
 8004400:	f002 fcac 	bl	8006d5c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE3 PE1 PE0 PE4
                           PE5 PE6 PE13 PE8
                           PE9 PE7 PE10 PE12
                           PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_4
 8004404:	f24b 73fb 	movw	r3, #47099	; 0xb7fb
 8004408:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_13|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800440a:	2303      	movs	r3, #3
 800440c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800440e:	2300      	movs	r3, #0
 8004410:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004412:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004416:	4619      	mov	r1, r3
 8004418:	4862      	ldr	r0, [pc, #392]	; (80045a4 <MX_GPIO_Init+0x2ec>)
 800441a:	f002 fadb 	bl	80069d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = IST_RESET_Pin|LED_RED_Pin;
 800441e:	f640 0304 	movw	r3, #2052	; 0x804
 8004422:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004424:	2301      	movs	r3, #1
 8004426:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004428:	2300      	movs	r3, #0
 800442a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800442c:	2300      	movs	r3, #0
 800442e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004430:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004434:	4619      	mov	r1, r3
 8004436:	485b      	ldr	r0, [pc, #364]	; (80045a4 <MX_GPIO_Init+0x2ec>)
 8004438:	f002 facc 	bl	80069d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB4 PB3 PB9
                           PB7 PB6 PB12 PB13
                           PB1 PB0 PB10 PB11
                           PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_9
 800443c:	f64f 73db 	movw	r3, #65499	; 0xffdb
 8004440:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004442:	2303      	movs	r3, #3
 8004444:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004446:	2300      	movs	r3, #0
 8004448:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800444a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800444e:	4619      	mov	r1, r3
 8004450:	4859      	ldr	r0, [pc, #356]	; (80045b8 <MX_GPIO_Init+0x300>)
 8004452:	f002 fabf 	bl	80069d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG13 PG15 PG12 PG11
                           PG10 PG0 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_12|GPIO_PIN_11
 8004456:	f64b 4301 	movw	r3, #48129	; 0xbc01
 800445a:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_10|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800445c:	2303      	movs	r3, #3
 800445e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004460:	2300      	movs	r3, #0
 8004462:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004464:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004468:	4619      	mov	r1, r3
 800446a:	4850      	ldr	r0, [pc, #320]	; (80045ac <MX_GPIO_Init+0x2f4>)
 800446c:	f002 fab2 	bl	80069d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD7 PD5 PD4 PD3
                           PD2 PD15 PD14 PD13
                           PD11 PD10 PD9 PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_3
 8004470:	f64e 73bc 	movw	r3, #61372	; 0xefbc
 8004474:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_2|GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13
                          |GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004476:	2303      	movs	r3, #3
 8004478:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800447a:	2300      	movs	r3, #0
 800447c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800447e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004482:	4619      	mov	r1, r3
 8004484:	484b      	ldr	r0, [pc, #300]	; (80045b4 <MX_GPIO_Init+0x2fc>)
 8004486:	f002 faa5 	bl	80069d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC12 PC11 PC10 PC13
                           PC14 PC15 PC9 PC8
                           PC7 PC6 PC0 PC1
                           PC2 PC3 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_13
 800448a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800448e:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_9|GPIO_PIN_8
                          |GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004490:	2303      	movs	r3, #3
 8004492:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004494:	2300      	movs	r3, #0
 8004496:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004498:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800449c:	4619      	mov	r1, r3
 800449e:	4847      	ldr	r0, [pc, #284]	; (80045bc <MX_GPIO_Init+0x304>)
 80044a0:	f002 fa98 	bl	80069d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA15 PA10 PA9 PA4
                           PA6 PA5 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_4
 80044a4:	f248 63f0 	movw	r3, #34544	; 0x86f0
 80044a8:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80044aa:	2303      	movs	r3, #3
 80044ac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044ae:	2300      	movs	r3, #0
 80044b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80044b6:	4619      	mov	r1, r3
 80044b8:	4841      	ldr	r0, [pc, #260]	; (80045c0 <MX_GPIO_Init+0x308>)
 80044ba:	f002 fa8b 	bl	80069d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SYS_CFG_Pin;
 80044be:	2340      	movs	r3, #64	; 0x40
 80044c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80044c2:	2300      	movs	r3, #0
 80044c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044c6:	2300      	movs	r3, #0
 80044c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SYS_CFG_GPIO_Port, &GPIO_InitStruct);
 80044ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80044ce:	4619      	mov	r1, r3
 80044d0:	4838      	ldr	r0, [pc, #224]	; (80045b4 <MX_GPIO_Init+0x2fc>)
 80044d2:	f002 fa7f 	bl	80069d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = PIN_Y_Pin|PIN_X_Pin|PIN_V_Pin|PIN_Z_Pin;
 80044d6:	23e4      	movs	r3, #228	; 0xe4
 80044d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80044da:	2300      	movs	r3, #0
 80044dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044de:	2300      	movs	r3, #0
 80044e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80044e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80044e6:	4619      	mov	r1, r3
 80044e8:	4836      	ldr	r0, [pc, #216]	; (80045c4 <MX_GPIO_Init+0x30c>)
 80044ea:	f002 fa73 	bl	80069d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PI3 PI8 PI9 PI4
                           PI1 PI10 PI11 PI0 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_4
 80044ee:	f640 731b 	movw	r3, #3867	; 0xf1b
 80044f2:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80044f4:	2303      	movs	r3, #3
 80044f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044f8:	2300      	movs	r3, #0
 80044fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80044fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004500:	4619      	mov	r1, r3
 8004502:	4830      	ldr	r0, [pc, #192]	; (80045c4 <MX_GPIO_Init+0x30c>)
 8004504:	f002 fa66 	bl	80069d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH15 PH13 PH14 PH12
                           PH11 PH10 PH8 PH9
                           PH7 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_12
 8004508:	f64f 7380 	movw	r3, #65408	; 0xff80
 800450c:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800450e:	2303      	movs	r3, #3
 8004510:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004512:	2300      	movs	r3, #0
 8004514:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004516:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800451a:	4619      	mov	r1, r3
 800451c:	4822      	ldr	r0, [pc, #136]	; (80045a8 <MX_GPIO_Init+0x2f0>)
 800451e:	f002 fa59 	bl	80069d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF2 PF1 PF3
                           PF4 PF5 PF13 PF12
                           PF15 PF11 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_3
 8004522:	f64b 033f 	movw	r3, #47167	; 0xb83f
 8004526:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_13|GPIO_PIN_12
                          |GPIO_PIN_15|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004528:	2303      	movs	r3, #3
 800452a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800452c:	2300      	movs	r3, #0
 800452e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004530:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004534:	4619      	mov	r1, r3
 8004536:	481e      	ldr	r0, [pc, #120]	; (80045b0 <MX_GPIO_Init+0x2f8>)
 8004538:	f002 fa4c 	bl	80069d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin PHPin */
  GPIO_InitStruct.Pin = POWER1_CTRL_Pin|POWER2_CTRL_Pin|POWER3_CTRL_Pin|POWER4_CTRL_Pin;
 800453c:	233c      	movs	r3, #60	; 0x3c
 800453e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004540:	2301      	movs	r3, #1
 8004542:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004544:	2300      	movs	r3, #0
 8004546:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004548:	2300      	movs	r3, #0
 800454a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800454c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004550:	4619      	mov	r1, r3
 8004552:	4815      	ldr	r0, [pc, #84]	; (80045a8 <MX_GPIO_Init+0x2f0>)
 8004554:	f002 fa3e 	bl	80069d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = LED_A_Pin|LED_B_Pin|LED_C_Pin|LED_D_Pin
 8004558:	f44f 73ff 	mov.w	r3, #510	; 0x1fe
 800455c:	627b      	str	r3, [r7, #36]	; 0x24
                          |LED_E_Pin|LED_F_Pin|LED_G_Pin|LED_H_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800455e:	2301      	movs	r3, #1
 8004560:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004562:	2300      	movs	r3, #0
 8004564:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004566:	2300      	movs	r3, #0
 8004568:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800456a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800456e:	4619      	mov	r1, r3
 8004570:	480e      	ldr	r0, [pc, #56]	; (80045ac <MX_GPIO_Init+0x2f4>)
 8004572:	f002 fa2f 	bl	80069d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = SPI5_NSS_Pin|LED_GREEN_Pin;
 8004576:	f244 0340 	movw	r3, #16448	; 0x4040
 800457a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800457c:	2301      	movs	r3, #1
 800457e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004580:	2300      	movs	r3, #0
 8004582:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004584:	2300      	movs	r3, #0
 8004586:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004588:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800458c:	4619      	mov	r1, r3
 800458e:	4808      	ldr	r0, [pc, #32]	; (80045b0 <MX_GPIO_Init+0x2f8>)
 8004590:	f002 fa20 	bl	80069d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TRIG_Pin;
 8004594:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004598:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800459a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800459e:	e013      	b.n	80045c8 <MX_GPIO_Init+0x310>
 80045a0:	40023800 	.word	0x40023800
 80045a4:	40021000 	.word	0x40021000
 80045a8:	40021c00 	.word	0x40021c00
 80045ac:	40021800 	.word	0x40021800
 80045b0:	40021400 	.word	0x40021400
 80045b4:	40020c00 	.word	0x40020c00
 80045b8:	40020400 	.word	0x40020400
 80045bc:	40020800 	.word	0x40020800
 80045c0:	40020000 	.word	0x40020000
 80045c4:	40022000 	.word	0x40022000
 80045c8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80045ca:	2301      	movs	r3, #1
 80045cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TRIG_GPIO_Port, &GPIO_InitStruct);
 80045ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80045d2:	4619      	mov	r1, r3
 80045d4:	4816      	ldr	r0, [pc, #88]	; (8004630 <MX_GPIO_Init+0x378>)
 80045d6:	f002 f9fd 	bl	80069d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY_Pin;
 80045da:	2304      	movs	r3, #4
 80045dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80045de:	2300      	movs	r3, #0
 80045e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045e2:	2300      	movs	r3, #0
 80045e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(KEY_GPIO_Port, &GPIO_InitStruct);
 80045e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80045ea:	4619      	mov	r1, r3
 80045ec:	4811      	ldr	r0, [pc, #68]	; (8004634 <MX_GPIO_Init+0x37c>)
 80045ee:	f002 f9f1 	bl	80069d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = PIN_YA1_Pin|PIN_ZA0_Pin|PIN_XA2_Pin|PIN_W_Pin;
 80045f2:	230f      	movs	r3, #15
 80045f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80045f6:	2300      	movs	r3, #0
 80045f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045fa:	2300      	movs	r3, #0
 80045fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004602:	4619      	mov	r1, r3
 8004604:	480c      	ldr	r0, [pc, #48]	; (8004638 <MX_GPIO_Init+0x380>)
 8004606:	f002 f9e5 	bl	80069d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IO_PROBE_Pin;
 800460a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800460e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004610:	2301      	movs	r3, #1
 8004612:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004614:	2300      	movs	r3, #0
 8004616:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004618:	2300      	movs	r3, #0
 800461a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(IO_PROBE_GPIO_Port, &GPIO_InitStruct);
 800461c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004620:	4619      	mov	r1, r3
 8004622:	4806      	ldr	r0, [pc, #24]	; (800463c <MX_GPIO_Init+0x384>)
 8004624:	f002 f9d6 	bl	80069d4 <HAL_GPIO_Init>

}
 8004628:	bf00      	nop
 800462a:	3738      	adds	r7, #56	; 0x38
 800462c:	46bd      	mov	sp, r7
 800462e:	bd80      	pop	{r7, pc}
 8004630:	40021400 	.word	0x40021400
 8004634:	40020400 	.word	0x40020400
 8004638:	40020000 	.word	0x40020000
 800463c:	40020c00 	.word	0x40020c00

08004640 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004644:	f000 fde4 	bl	8005210 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004648:	f000 f81c 	bl	8004684 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800464c:	f7ff fe34 	bl	80042b8 <MX_GPIO_Init>
  MX_DMA_Init();
 8004650:	f7ff fdd4 	bl	80041fc <MX_DMA_Init>
  MX_SPI5_Init();
 8004654:	f000 f898 	bl	8004788 <MX_SPI5_Init>
  MX_CAN1_Init();
 8004658:	f7ff fd42 	bl	80040e0 <MX_CAN1_Init>
  MX_USART6_UART_Init();
 800465c:	f000 fcce 	bl	8004ffc <MX_USART6_UART_Init>
  MX_TIM1_Init();
 8004660:	f000 fa30 	bl	8004ac4 <MX_TIM1_Init>
  MX_TIM2_Init();
 8004664:	f000 fabe 	bl	8004be4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8004668:	f000 fb08 	bl	8004c7c <MX_TIM3_Init>
  MX_TIM12_Init();
 800466c:	f000 fb60 	bl	8004d30 <MX_TIM12_Init>
  /* USER CODE BEGIN 2 */
  hw_init();
 8004670:	f7fc fd7e 	bl	8001170 <hw_init>
  task_init();
 8004674:	f7fc fd9a 	bl	80011ac <task_init>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8004678:	f7ff fdfa 	bl	8004270 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800467c:	f00a fb18 	bl	800ecb0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8004680:	e7fe      	b.n	8004680 <main+0x40>
	...

08004684 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b094      	sub	sp, #80	; 0x50
 8004688:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800468a:	f107 0320 	add.w	r3, r7, #32
 800468e:	2230      	movs	r2, #48	; 0x30
 8004690:	2100      	movs	r1, #0
 8004692:	4618      	mov	r0, r3
 8004694:	f00f fbfb 	bl	8013e8e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004698:	f107 030c 	add.w	r3, r7, #12
 800469c:	2200      	movs	r2, #0
 800469e:	601a      	str	r2, [r3, #0]
 80046a0:	605a      	str	r2, [r3, #4]
 80046a2:	609a      	str	r2, [r3, #8]
 80046a4:	60da      	str	r2, [r3, #12]
 80046a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80046a8:	2300      	movs	r3, #0
 80046aa:	60bb      	str	r3, [r7, #8]
 80046ac:	4b28      	ldr	r3, [pc, #160]	; (8004750 <SystemClock_Config+0xcc>)
 80046ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b0:	4a27      	ldr	r2, [pc, #156]	; (8004750 <SystemClock_Config+0xcc>)
 80046b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046b6:	6413      	str	r3, [r2, #64]	; 0x40
 80046b8:	4b25      	ldr	r3, [pc, #148]	; (8004750 <SystemClock_Config+0xcc>)
 80046ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046c0:	60bb      	str	r3, [r7, #8]
 80046c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80046c4:	2300      	movs	r3, #0
 80046c6:	607b      	str	r3, [r7, #4]
 80046c8:	4b22      	ldr	r3, [pc, #136]	; (8004754 <SystemClock_Config+0xd0>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a21      	ldr	r2, [pc, #132]	; (8004754 <SystemClock_Config+0xd0>)
 80046ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80046d2:	6013      	str	r3, [r2, #0]
 80046d4:	4b1f      	ldr	r3, [pc, #124]	; (8004754 <SystemClock_Config+0xd0>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80046dc:	607b      	str	r3, [r7, #4]
 80046de:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80046e0:	2301      	movs	r3, #1
 80046e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80046e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80046e8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80046ea:	2302      	movs	r3, #2
 80046ec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80046ee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80046f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 80046f4:	2306      	movs	r3, #6
 80046f6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80046f8:	23a8      	movs	r3, #168	; 0xa8
 80046fa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80046fc:	2302      	movs	r3, #2
 80046fe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8004700:	2307      	movs	r3, #7
 8004702:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004704:	f107 0320 	add.w	r3, r7, #32
 8004708:	4618      	mov	r0, r3
 800470a:	f003 fdab 	bl	8008264 <HAL_RCC_OscConfig>
 800470e:	4603      	mov	r3, r0
 8004710:	2b00      	cmp	r3, #0
 8004712:	d001      	beq.n	8004718 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8004714:	f000 f832 	bl	800477c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004718:	230f      	movs	r3, #15
 800471a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800471c:	2302      	movs	r3, #2
 800471e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004720:	2300      	movs	r3, #0
 8004722:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004724:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004728:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800472a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800472e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004730:	f107 030c 	add.w	r3, r7, #12
 8004734:	2105      	movs	r1, #5
 8004736:	4618      	mov	r0, r3
 8004738:	f004 f80c 	bl	8008754 <HAL_RCC_ClockConfig>
 800473c:	4603      	mov	r3, r0
 800473e:	2b00      	cmp	r3, #0
 8004740:	d001      	beq.n	8004746 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8004742:	f000 f81b 	bl	800477c <Error_Handler>
  }
}
 8004746:	bf00      	nop
 8004748:	3750      	adds	r7, #80	; 0x50
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}
 800474e:	bf00      	nop
 8004750:	40023800 	.word	0x40023800
 8004754:	40007000 	.word	0x40007000

08004758 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b082      	sub	sp, #8
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a04      	ldr	r2, [pc, #16]	; (8004778 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d101      	bne.n	800476e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800476a:	f000 fd73 	bl	8005254 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800476e:	bf00      	nop
 8004770:	3708      	adds	r7, #8
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}
 8004776:	bf00      	nop
 8004778:	40000c00 	.word	0x40000c00

0800477c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800477c:	b480      	push	{r7}
 800477e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8004780:	b672      	cpsid	i
}
 8004782:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004784:	e7fe      	b.n	8004784 <Error_Handler+0x8>
	...

08004788 <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 800478c:	4b17      	ldr	r3, [pc, #92]	; (80047ec <MX_SPI5_Init+0x64>)
 800478e:	4a18      	ldr	r2, [pc, #96]	; (80047f0 <MX_SPI5_Init+0x68>)
 8004790:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8004792:	4b16      	ldr	r3, [pc, #88]	; (80047ec <MX_SPI5_Init+0x64>)
 8004794:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004798:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800479a:	4b14      	ldr	r3, [pc, #80]	; (80047ec <MX_SPI5_Init+0x64>)
 800479c:	2200      	movs	r2, #0
 800479e:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80047a0:	4b12      	ldr	r3, [pc, #72]	; (80047ec <MX_SPI5_Init+0x64>)
 80047a2:	2200      	movs	r2, #0
 80047a4:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80047a6:	4b11      	ldr	r3, [pc, #68]	; (80047ec <MX_SPI5_Init+0x64>)
 80047a8:	2200      	movs	r2, #0
 80047aa:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80047ac:	4b0f      	ldr	r3, [pc, #60]	; (80047ec <MX_SPI5_Init+0x64>)
 80047ae:	2200      	movs	r2, #0
 80047b0:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80047b2:	4b0e      	ldr	r3, [pc, #56]	; (80047ec <MX_SPI5_Init+0x64>)
 80047b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80047b8:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80047ba:	4b0c      	ldr	r3, [pc, #48]	; (80047ec <MX_SPI5_Init+0x64>)
 80047bc:	2230      	movs	r2, #48	; 0x30
 80047be:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80047c0:	4b0a      	ldr	r3, [pc, #40]	; (80047ec <MX_SPI5_Init+0x64>)
 80047c2:	2200      	movs	r2, #0
 80047c4:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80047c6:	4b09      	ldr	r3, [pc, #36]	; (80047ec <MX_SPI5_Init+0x64>)
 80047c8:	2200      	movs	r2, #0
 80047ca:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80047cc:	4b07      	ldr	r3, [pc, #28]	; (80047ec <MX_SPI5_Init+0x64>)
 80047ce:	2200      	movs	r2, #0
 80047d0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 80047d2:	4b06      	ldr	r3, [pc, #24]	; (80047ec <MX_SPI5_Init+0x64>)
 80047d4:	220a      	movs	r2, #10
 80047d6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80047d8:	4804      	ldr	r0, [pc, #16]	; (80047ec <MX_SPI5_Init+0x64>)
 80047da:	f004 f9cd 	bl	8008b78 <HAL_SPI_Init>
 80047de:	4603      	mov	r3, r0
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d001      	beq.n	80047e8 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 80047e4:	f7ff ffca 	bl	800477c <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80047e8:	bf00      	nop
 80047ea:	bd80      	pop	{r7, pc}
 80047ec:	20001f5c 	.word	0x20001f5c
 80047f0:	40015000 	.word	0x40015000

080047f4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b08a      	sub	sp, #40	; 0x28
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047fc:	f107 0314 	add.w	r3, r7, #20
 8004800:	2200      	movs	r2, #0
 8004802:	601a      	str	r2, [r3, #0]
 8004804:	605a      	str	r2, [r3, #4]
 8004806:	609a      	str	r2, [r3, #8]
 8004808:	60da      	str	r2, [r3, #12]
 800480a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a19      	ldr	r2, [pc, #100]	; (8004878 <HAL_SPI_MspInit+0x84>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d12c      	bne.n	8004870 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8004816:	2300      	movs	r3, #0
 8004818:	613b      	str	r3, [r7, #16]
 800481a:	4b18      	ldr	r3, [pc, #96]	; (800487c <HAL_SPI_MspInit+0x88>)
 800481c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800481e:	4a17      	ldr	r2, [pc, #92]	; (800487c <HAL_SPI_MspInit+0x88>)
 8004820:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004824:	6453      	str	r3, [r2, #68]	; 0x44
 8004826:	4b15      	ldr	r3, [pc, #84]	; (800487c <HAL_SPI_MspInit+0x88>)
 8004828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800482a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800482e:	613b      	str	r3, [r7, #16]
 8004830:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004832:	2300      	movs	r3, #0
 8004834:	60fb      	str	r3, [r7, #12]
 8004836:	4b11      	ldr	r3, [pc, #68]	; (800487c <HAL_SPI_MspInit+0x88>)
 8004838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800483a:	4a10      	ldr	r2, [pc, #64]	; (800487c <HAL_SPI_MspInit+0x88>)
 800483c:	f043 0320 	orr.w	r3, r3, #32
 8004840:	6313      	str	r3, [r2, #48]	; 0x30
 8004842:	4b0e      	ldr	r3, [pc, #56]	; (800487c <HAL_SPI_MspInit+0x88>)
 8004844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004846:	f003 0320 	and.w	r3, r3, #32
 800484a:	60fb      	str	r3, [r7, #12]
 800484c:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF9     ------> SPI5_MOSI
    PF8     ------> SPI5_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_8;
 800484e:	f44f 7360 	mov.w	r3, #896	; 0x380
 8004852:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004854:	2302      	movs	r3, #2
 8004856:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004858:	2300      	movs	r3, #0
 800485a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800485c:	2303      	movs	r3, #3
 800485e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8004860:	2305      	movs	r3, #5
 8004862:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004864:	f107 0314 	add.w	r3, r7, #20
 8004868:	4619      	mov	r1, r3
 800486a:	4805      	ldr	r0, [pc, #20]	; (8004880 <HAL_SPI_MspInit+0x8c>)
 800486c:	f002 f8b2 	bl	80069d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8004870:	bf00      	nop
 8004872:	3728      	adds	r7, #40	; 0x28
 8004874:	46bd      	mov	sp, r7
 8004876:	bd80      	pop	{r7, pc}
 8004878:	40015000 	.word	0x40015000
 800487c:	40023800 	.word	0x40023800
 8004880:	40021400 	.word	0x40021400

08004884 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b082      	sub	sp, #8
 8004888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800488a:	2300      	movs	r3, #0
 800488c:	607b      	str	r3, [r7, #4]
 800488e:	4b12      	ldr	r3, [pc, #72]	; (80048d8 <HAL_MspInit+0x54>)
 8004890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004892:	4a11      	ldr	r2, [pc, #68]	; (80048d8 <HAL_MspInit+0x54>)
 8004894:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004898:	6453      	str	r3, [r2, #68]	; 0x44
 800489a:	4b0f      	ldr	r3, [pc, #60]	; (80048d8 <HAL_MspInit+0x54>)
 800489c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800489e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048a2:	607b      	str	r3, [r7, #4]
 80048a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80048a6:	2300      	movs	r3, #0
 80048a8:	603b      	str	r3, [r7, #0]
 80048aa:	4b0b      	ldr	r3, [pc, #44]	; (80048d8 <HAL_MspInit+0x54>)
 80048ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ae:	4a0a      	ldr	r2, [pc, #40]	; (80048d8 <HAL_MspInit+0x54>)
 80048b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048b4:	6413      	str	r3, [r2, #64]	; 0x40
 80048b6:	4b08      	ldr	r3, [pc, #32]	; (80048d8 <HAL_MspInit+0x54>)
 80048b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048be:	603b      	str	r3, [r7, #0]
 80048c0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80048c2:	2200      	movs	r2, #0
 80048c4:	210f      	movs	r1, #15
 80048c6:	f06f 0001 	mvn.w	r0, #1
 80048ca:	f001 fc57 	bl	800617c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80048ce:	bf00      	nop
 80048d0:	3708      	adds	r7, #8
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bd80      	pop	{r7, pc}
 80048d6:	bf00      	nop
 80048d8:	40023800 	.word	0x40023800

080048dc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b08e      	sub	sp, #56	; 0x38
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80048e4:	2300      	movs	r3, #0
 80048e6:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80048e8:	2300      	movs	r3, #0
 80048ea:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 80048ec:	2300      	movs	r3, #0
 80048ee:	60fb      	str	r3, [r7, #12]
 80048f0:	4b33      	ldr	r3, [pc, #204]	; (80049c0 <HAL_InitTick+0xe4>)
 80048f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f4:	4a32      	ldr	r2, [pc, #200]	; (80049c0 <HAL_InitTick+0xe4>)
 80048f6:	f043 0308 	orr.w	r3, r3, #8
 80048fa:	6413      	str	r3, [r2, #64]	; 0x40
 80048fc:	4b30      	ldr	r3, [pc, #192]	; (80049c0 <HAL_InitTick+0xe4>)
 80048fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004900:	f003 0308 	and.w	r3, r3, #8
 8004904:	60fb      	str	r3, [r7, #12]
 8004906:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004908:	f107 0210 	add.w	r2, r7, #16
 800490c:	f107 0314 	add.w	r3, r7, #20
 8004910:	4611      	mov	r1, r2
 8004912:	4618      	mov	r0, r3
 8004914:	f004 f8fe 	bl	8008b14 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8004918:	6a3b      	ldr	r3, [r7, #32]
 800491a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800491c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800491e:	2b00      	cmp	r3, #0
 8004920:	d103      	bne.n	800492a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8004922:	f004 f8cf 	bl	8008ac4 <HAL_RCC_GetPCLK1Freq>
 8004926:	6378      	str	r0, [r7, #52]	; 0x34
 8004928:	e004      	b.n	8004934 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800492a:	f004 f8cb 	bl	8008ac4 <HAL_RCC_GetPCLK1Freq>
 800492e:	4603      	mov	r3, r0
 8004930:	005b      	lsls	r3, r3, #1
 8004932:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004934:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004936:	4a23      	ldr	r2, [pc, #140]	; (80049c4 <HAL_InitTick+0xe8>)
 8004938:	fba2 2303 	umull	r2, r3, r2, r3
 800493c:	0c9b      	lsrs	r3, r3, #18
 800493e:	3b01      	subs	r3, #1
 8004940:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8004942:	4b21      	ldr	r3, [pc, #132]	; (80049c8 <HAL_InitTick+0xec>)
 8004944:	4a21      	ldr	r2, [pc, #132]	; (80049cc <HAL_InitTick+0xf0>)
 8004946:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8004948:	4b1f      	ldr	r3, [pc, #124]	; (80049c8 <HAL_InitTick+0xec>)
 800494a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800494e:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8004950:	4a1d      	ldr	r2, [pc, #116]	; (80049c8 <HAL_InitTick+0xec>)
 8004952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004954:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8004956:	4b1c      	ldr	r3, [pc, #112]	; (80049c8 <HAL_InitTick+0xec>)
 8004958:	2200      	movs	r2, #0
 800495a:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800495c:	4b1a      	ldr	r3, [pc, #104]	; (80049c8 <HAL_InitTick+0xec>)
 800495e:	2200      	movs	r2, #0
 8004960:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004962:	4b19      	ldr	r3, [pc, #100]	; (80049c8 <HAL_InitTick+0xec>)
 8004964:	2200      	movs	r2, #0
 8004966:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 8004968:	4817      	ldr	r0, [pc, #92]	; (80049c8 <HAL_InitTick+0xec>)
 800496a:	f004 fc1b 	bl	80091a4 <HAL_TIM_Base_Init>
 800496e:	4603      	mov	r3, r0
 8004970:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8004974:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004978:	2b00      	cmp	r3, #0
 800497a:	d11b      	bne.n	80049b4 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 800497c:	4812      	ldr	r0, [pc, #72]	; (80049c8 <HAL_InitTick+0xec>)
 800497e:	f004 fc61 	bl	8009244 <HAL_TIM_Base_Start_IT>
 8004982:	4603      	mov	r3, r0
 8004984:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8004988:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800498c:	2b00      	cmp	r3, #0
 800498e:	d111      	bne.n	80049b4 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8004990:	2032      	movs	r0, #50	; 0x32
 8004992:	f001 fc0f 	bl	80061b4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2b0f      	cmp	r3, #15
 800499a:	d808      	bhi.n	80049ae <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 800499c:	2200      	movs	r2, #0
 800499e:	6879      	ldr	r1, [r7, #4]
 80049a0:	2032      	movs	r0, #50	; 0x32
 80049a2:	f001 fbeb 	bl	800617c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80049a6:	4a0a      	ldr	r2, [pc, #40]	; (80049d0 <HAL_InitTick+0xf4>)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6013      	str	r3, [r2, #0]
 80049ac:	e002      	b.n	80049b4 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80049b4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	3738      	adds	r7, #56	; 0x38
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}
 80049c0:	40023800 	.word	0x40023800
 80049c4:	431bde83 	.word	0x431bde83
 80049c8:	20001fb4 	.word	0x20001fb4
 80049cc:	40000c00 	.word	0x40000c00
 80049d0:	20000008 	.word	0x20000008

080049d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80049d4:	b480      	push	{r7}
 80049d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80049d8:	e7fe      	b.n	80049d8 <NMI_Handler+0x4>

080049da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80049da:	b480      	push	{r7}
 80049dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80049de:	e7fe      	b.n	80049de <HardFault_Handler+0x4>

080049e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80049e0:	b480      	push	{r7}
 80049e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80049e4:	e7fe      	b.n	80049e4 <MemManage_Handler+0x4>

080049e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80049e6:	b480      	push	{r7}
 80049e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80049ea:	e7fe      	b.n	80049ea <BusFault_Handler+0x4>

080049ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80049ec:	b480      	push	{r7}
 80049ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80049f0:	e7fe      	b.n	80049f0 <UsageFault_Handler+0x4>

080049f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80049f2:	b480      	push	{r7}
 80049f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80049f6:	bf00      	nop
 80049f8:	46bd      	mov	sp, r7
 80049fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fe:	4770      	bx	lr

08004a00 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8004a04:	4802      	ldr	r0, [pc, #8]	; (8004a10 <CAN1_TX_IRQHandler+0x10>)
 8004a06:	f001 f8d6 	bl	8005bb6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8004a0a:	bf00      	nop
 8004a0c:	bd80      	pop	{r7, pc}
 8004a0e:	bf00      	nop
 8004a10:	20001f30 	.word	0x20001f30

08004a14 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8004a18:	4802      	ldr	r0, [pc, #8]	; (8004a24 <CAN1_RX0_IRQHandler+0x10>)
 8004a1a:	f001 f8cc 	bl	8005bb6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8004a1e:	bf00      	nop
 8004a20:	bd80      	pop	{r7, pc}
 8004a22:	bf00      	nop
 8004a24:	20001f30 	.word	0x20001f30

08004a28 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004a2c:	4802      	ldr	r0, [pc, #8]	; (8004a38 <TIM2_IRQHandler+0x10>)
 8004a2e:	f004 fd91 	bl	8009554 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004a32:	bf00      	nop
 8004a34:	bd80      	pop	{r7, pc}
 8004a36:	bf00      	nop
 8004a38:	20002044 	.word	0x20002044

08004a3c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8004a40:	4802      	ldr	r0, [pc, #8]	; (8004a4c <TIM5_IRQHandler+0x10>)
 8004a42:	f004 fd87 	bl	8009554 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8004a46:	bf00      	nop
 8004a48:	bd80      	pop	{r7, pc}
 8004a4a:	bf00      	nop
 8004a4c:	20001fb4 	.word	0x20001fb4

08004a50 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8004a54:	4802      	ldr	r0, [pc, #8]	; (8004a60 <DMA2_Stream1_IRQHandler+0x10>)
 8004a56:	f001 fd53 	bl	8006500 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8004a5a:	bf00      	nop
 8004a5c:	bd80      	pop	{r7, pc}
 8004a5e:	bf00      	nop
 8004a60:	20002164 	.word	0x20002164

08004a64 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8004a68:	4802      	ldr	r0, [pc, #8]	; (8004a74 <OTG_FS_IRQHandler+0x10>)
 8004a6a:	f002 faee 	bl	800704a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8004a6e:	bf00      	nop
 8004a70:	bd80      	pop	{r7, pc}
 8004a72:	bf00      	nop
 8004a74:	20007c88 	.word	0x20007c88

08004a78 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8004a7c:	4802      	ldr	r0, [pc, #8]	; (8004a88 <DMA2_Stream6_IRQHandler+0x10>)
 8004a7e:	f001 fd3f 	bl	8006500 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8004a82:	bf00      	nop
 8004a84:	bd80      	pop	{r7, pc}
 8004a86:	bf00      	nop
 8004a88:	200021c4 	.word	0x200021c4

08004a8c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8004a90:	4802      	ldr	r0, [pc, #8]	; (8004a9c <USART6_IRQHandler+0x10>)
 8004a92:	f005 fce5 	bl	800a460 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8004a96:	bf00      	nop
 8004a98:	bd80      	pop	{r7, pc}
 8004a9a:	bf00      	nop
 8004a9c:	2000211c 	.word	0x2000211c

08004aa0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004aa4:	4b06      	ldr	r3, [pc, #24]	; (8004ac0 <SystemInit+0x20>)
 8004aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aaa:	4a05      	ldr	r2, [pc, #20]	; (8004ac0 <SystemInit+0x20>)
 8004aac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004ab0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004ab4:	bf00      	nop
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abc:	4770      	bx	lr
 8004abe:	bf00      	nop
 8004ac0:	e000ed00 	.word	0xe000ed00

08004ac4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim12;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b092      	sub	sp, #72	; 0x48
 8004ac8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004aca:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004ace:	2200      	movs	r2, #0
 8004ad0:	601a      	str	r2, [r3, #0]
 8004ad2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004ad4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004ad8:	2200      	movs	r2, #0
 8004ada:	601a      	str	r2, [r3, #0]
 8004adc:	605a      	str	r2, [r3, #4]
 8004ade:	609a      	str	r2, [r3, #8]
 8004ae0:	60da      	str	r2, [r3, #12]
 8004ae2:	611a      	str	r2, [r3, #16]
 8004ae4:	615a      	str	r2, [r3, #20]
 8004ae6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004ae8:	1d3b      	adds	r3, r7, #4
 8004aea:	2220      	movs	r2, #32
 8004aec:	2100      	movs	r1, #0
 8004aee:	4618      	mov	r0, r3
 8004af0:	f00f f9cd 	bl	8013e8e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004af4:	4b39      	ldr	r3, [pc, #228]	; (8004bdc <MX_TIM1_Init+0x118>)
 8004af6:	4a3a      	ldr	r2, [pc, #232]	; (8004be0 <MX_TIM1_Init+0x11c>)
 8004af8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16;
 8004afa:	4b38      	ldr	r3, [pc, #224]	; (8004bdc <MX_TIM1_Init+0x118>)
 8004afc:	2210      	movs	r2, #16
 8004afe:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004b00:	4b36      	ldr	r3, [pc, #216]	; (8004bdc <MX_TIM1_Init+0x118>)
 8004b02:	2200      	movs	r2, #0
 8004b04:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000-1;
 8004b06:	4b35      	ldr	r3, [pc, #212]	; (8004bdc <MX_TIM1_Init+0x118>)
 8004b08:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8004b0c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004b0e:	4b33      	ldr	r3, [pc, #204]	; (8004bdc <MX_TIM1_Init+0x118>)
 8004b10:	2200      	movs	r2, #0
 8004b12:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004b14:	4b31      	ldr	r3, [pc, #196]	; (8004bdc <MX_TIM1_Init+0x118>)
 8004b16:	2200      	movs	r2, #0
 8004b18:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004b1a:	4b30      	ldr	r3, [pc, #192]	; (8004bdc <MX_TIM1_Init+0x118>)
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004b20:	482e      	ldr	r0, [pc, #184]	; (8004bdc <MX_TIM1_Init+0x118>)
 8004b22:	f004 fbff 	bl	8009324 <HAL_TIM_PWM_Init>
 8004b26:	4603      	mov	r3, r0
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d001      	beq.n	8004b30 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8004b2c:	f7ff fe26 	bl	800477c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004b30:	2300      	movs	r3, #0
 8004b32:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004b34:	2300      	movs	r3, #0
 8004b36:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004b38:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004b3c:	4619      	mov	r1, r3
 8004b3e:	4827      	ldr	r0, [pc, #156]	; (8004bdc <MX_TIM1_Init+0x118>)
 8004b40:	f005 fac6 	bl	800a0d0 <HAL_TIMEx_MasterConfigSynchronization>
 8004b44:	4603      	mov	r3, r0
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d001      	beq.n	8004b4e <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8004b4a:	f7ff fe17 	bl	800477c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004b4e:	2360      	movs	r3, #96	; 0x60
 8004b50:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 1000;
 8004b52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004b56:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004b58:	2300      	movs	r3, #0
 8004b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004b60:	2300      	movs	r3, #0
 8004b62:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004b64:	2300      	movs	r3, #0
 8004b66:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004b6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b70:	2200      	movs	r2, #0
 8004b72:	4619      	mov	r1, r3
 8004b74:	4819      	ldr	r0, [pc, #100]	; (8004bdc <MX_TIM1_Init+0x118>)
 8004b76:	f004 fddd 	bl	8009734 <HAL_TIM_PWM_ConfigChannel>
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d001      	beq.n	8004b84 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8004b80:	f7ff fdfc 	bl	800477c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004b84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b88:	220c      	movs	r2, #12
 8004b8a:	4619      	mov	r1, r3
 8004b8c:	4813      	ldr	r0, [pc, #76]	; (8004bdc <MX_TIM1_Init+0x118>)
 8004b8e:	f004 fdd1 	bl	8009734 <HAL_TIM_PWM_ConfigChannel>
 8004b92:	4603      	mov	r3, r0
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d001      	beq.n	8004b9c <MX_TIM1_Init+0xd8>
  {
    Error_Handler();
 8004b98:	f7ff fdf0 	bl	800477c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004ba8:	2300      	movs	r3, #0
 8004baa:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004bac:	2300      	movs	r3, #0
 8004bae:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004bb0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004bb4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004bba:	1d3b      	adds	r3, r7, #4
 8004bbc:	4619      	mov	r1, r3
 8004bbe:	4807      	ldr	r0, [pc, #28]	; (8004bdc <MX_TIM1_Init+0x118>)
 8004bc0:	f005 fb02 	bl	800a1c8 <HAL_TIMEx_ConfigBreakDeadTime>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d001      	beq.n	8004bce <MX_TIM1_Init+0x10a>
  {
    Error_Handler();
 8004bca:	f7ff fdd7 	bl	800477c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004bce:	4803      	ldr	r0, [pc, #12]	; (8004bdc <MX_TIM1_Init+0x118>)
 8004bd0:	f000 f968 	bl	8004ea4 <HAL_TIM_MspPostInit>

}
 8004bd4:	bf00      	nop
 8004bd6:	3748      	adds	r7, #72	; 0x48
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bd80      	pop	{r7, pc}
 8004bdc:	20001ffc 	.word	0x20001ffc
 8004be0:	40010000 	.word	0x40010000

08004be4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b086      	sub	sp, #24
 8004be8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004bea:	f107 0308 	add.w	r3, r7, #8
 8004bee:	2200      	movs	r2, #0
 8004bf0:	601a      	str	r2, [r3, #0]
 8004bf2:	605a      	str	r2, [r3, #4]
 8004bf4:	609a      	str	r2, [r3, #8]
 8004bf6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004bf8:	463b      	mov	r3, r7
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	601a      	str	r2, [r3, #0]
 8004bfe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004c00:	4b1d      	ldr	r3, [pc, #116]	; (8004c78 <MX_TIM2_Init+0x94>)
 8004c02:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004c06:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8004c08:	4b1b      	ldr	r3, [pc, #108]	; (8004c78 <MX_TIM2_Init+0x94>)
 8004c0a:	2253      	movs	r2, #83	; 0x53
 8004c0c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004c0e:	4b1a      	ldr	r3, [pc, #104]	; (8004c78 <MX_TIM2_Init+0x94>)
 8004c10:	2200      	movs	r2, #0
 8004c12:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8004c14:	4b18      	ldr	r3, [pc, #96]	; (8004c78 <MX_TIM2_Init+0x94>)
 8004c16:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004c1a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004c1c:	4b16      	ldr	r3, [pc, #88]	; (8004c78 <MX_TIM2_Init+0x94>)
 8004c1e:	2200      	movs	r2, #0
 8004c20:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004c22:	4b15      	ldr	r3, [pc, #84]	; (8004c78 <MX_TIM2_Init+0x94>)
 8004c24:	2200      	movs	r2, #0
 8004c26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004c28:	4813      	ldr	r0, [pc, #76]	; (8004c78 <MX_TIM2_Init+0x94>)
 8004c2a:	f004 fabb 	bl	80091a4 <HAL_TIM_Base_Init>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d001      	beq.n	8004c38 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8004c34:	f7ff fda2 	bl	800477c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004c38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004c3c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004c3e:	f107 0308 	add.w	r3, r7, #8
 8004c42:	4619      	mov	r1, r3
 8004c44:	480c      	ldr	r0, [pc, #48]	; (8004c78 <MX_TIM2_Init+0x94>)
 8004c46:	f004 fe37 	bl	80098b8 <HAL_TIM_ConfigClockSource>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d001      	beq.n	8004c54 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8004c50:	f7ff fd94 	bl	800477c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004c54:	2300      	movs	r3, #0
 8004c56:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004c58:	2300      	movs	r3, #0
 8004c5a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004c5c:	463b      	mov	r3, r7
 8004c5e:	4619      	mov	r1, r3
 8004c60:	4805      	ldr	r0, [pc, #20]	; (8004c78 <MX_TIM2_Init+0x94>)
 8004c62:	f005 fa35 	bl	800a0d0 <HAL_TIMEx_MasterConfigSynchronization>
 8004c66:	4603      	mov	r3, r0
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d001      	beq.n	8004c70 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8004c6c:	f7ff fd86 	bl	800477c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004c70:	bf00      	nop
 8004c72:	3718      	adds	r7, #24
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}
 8004c78:	20002044 	.word	0x20002044

08004c7c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b08a      	sub	sp, #40	; 0x28
 8004c80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004c82:	f107 0320 	add.w	r3, r7, #32
 8004c86:	2200      	movs	r2, #0
 8004c88:	601a      	str	r2, [r3, #0]
 8004c8a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004c8c:	1d3b      	adds	r3, r7, #4
 8004c8e:	2200      	movs	r2, #0
 8004c90:	601a      	str	r2, [r3, #0]
 8004c92:	605a      	str	r2, [r3, #4]
 8004c94:	609a      	str	r2, [r3, #8]
 8004c96:	60da      	str	r2, [r3, #12]
 8004c98:	611a      	str	r2, [r3, #16]
 8004c9a:	615a      	str	r2, [r3, #20]
 8004c9c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004c9e:	4b22      	ldr	r3, [pc, #136]	; (8004d28 <MX_TIM3_Init+0xac>)
 8004ca0:	4a22      	ldr	r2, [pc, #136]	; (8004d2c <MX_TIM3_Init+0xb0>)
 8004ca2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 8004ca4:	4b20      	ldr	r3, [pc, #128]	; (8004d28 <MX_TIM3_Init+0xac>)
 8004ca6:	2253      	movs	r2, #83	; 0x53
 8004ca8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004caa:	4b1f      	ldr	r3, [pc, #124]	; (8004d28 <MX_TIM3_Init+0xac>)
 8004cac:	2200      	movs	r2, #0
 8004cae:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2000-1;
 8004cb0:	4b1d      	ldr	r3, [pc, #116]	; (8004d28 <MX_TIM3_Init+0xac>)
 8004cb2:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8004cb6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004cb8:	4b1b      	ldr	r3, [pc, #108]	; (8004d28 <MX_TIM3_Init+0xac>)
 8004cba:	2200      	movs	r2, #0
 8004cbc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004cbe:	4b1a      	ldr	r3, [pc, #104]	; (8004d28 <MX_TIM3_Init+0xac>)
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8004cc4:	4818      	ldr	r0, [pc, #96]	; (8004d28 <MX_TIM3_Init+0xac>)
 8004cc6:	f004 fb2d 	bl	8009324 <HAL_TIM_PWM_Init>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d001      	beq.n	8004cd4 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8004cd0:	f7ff fd54 	bl	800477c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004cd8:	2300      	movs	r3, #0
 8004cda:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004cdc:	f107 0320 	add.w	r3, r7, #32
 8004ce0:	4619      	mov	r1, r3
 8004ce2:	4811      	ldr	r0, [pc, #68]	; (8004d28 <MX_TIM3_Init+0xac>)
 8004ce4:	f005 f9f4 	bl	800a0d0 <HAL_TIMEx_MasterConfigSynchronization>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d001      	beq.n	8004cf2 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8004cee:	f7ff fd45 	bl	800477c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004cf2:	2360      	movs	r3, #96	; 0x60
 8004cf4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004cfe:	2300      	movs	r3, #0
 8004d00:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004d02:	1d3b      	adds	r3, r7, #4
 8004d04:	2204      	movs	r2, #4
 8004d06:	4619      	mov	r1, r3
 8004d08:	4807      	ldr	r0, [pc, #28]	; (8004d28 <MX_TIM3_Init+0xac>)
 8004d0a:	f004 fd13 	bl	8009734 <HAL_TIM_PWM_ConfigChannel>
 8004d0e:	4603      	mov	r3, r0
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d001      	beq.n	8004d18 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8004d14:	f7ff fd32 	bl	800477c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8004d18:	4803      	ldr	r0, [pc, #12]	; (8004d28 <MX_TIM3_Init+0xac>)
 8004d1a:	f000 f8c3 	bl	8004ea4 <HAL_TIM_MspPostInit>

}
 8004d1e:	bf00      	nop
 8004d20:	3728      	adds	r7, #40	; 0x28
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}
 8004d26:	bf00      	nop
 8004d28:	2000208c 	.word	0x2000208c
 8004d2c:	40000400 	.word	0x40000400

08004d30 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b088      	sub	sp, #32
 8004d34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8004d36:	1d3b      	adds	r3, r7, #4
 8004d38:	2200      	movs	r2, #0
 8004d3a:	601a      	str	r2, [r3, #0]
 8004d3c:	605a      	str	r2, [r3, #4]
 8004d3e:	609a      	str	r2, [r3, #8]
 8004d40:	60da      	str	r2, [r3, #12]
 8004d42:	611a      	str	r2, [r3, #16]
 8004d44:	615a      	str	r2, [r3, #20]
 8004d46:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8004d48:	4b1a      	ldr	r3, [pc, #104]	; (8004db4 <MX_TIM12_Init+0x84>)
 8004d4a:	4a1b      	ldr	r2, [pc, #108]	; (8004db8 <MX_TIM12_Init+0x88>)
 8004d4c:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 83;
 8004d4e:	4b19      	ldr	r3, [pc, #100]	; (8004db4 <MX_TIM12_Init+0x84>)
 8004d50:	2253      	movs	r2, #83	; 0x53
 8004d52:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004d54:	4b17      	ldr	r3, [pc, #92]	; (8004db4 <MX_TIM12_Init+0x84>)
 8004d56:	2200      	movs	r2, #0
 8004d58:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 20000-1;
 8004d5a:	4b16      	ldr	r3, [pc, #88]	; (8004db4 <MX_TIM12_Init+0x84>)
 8004d5c:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8004d60:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004d62:	4b14      	ldr	r3, [pc, #80]	; (8004db4 <MX_TIM12_Init+0x84>)
 8004d64:	2200      	movs	r2, #0
 8004d66:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004d68:	4b12      	ldr	r3, [pc, #72]	; (8004db4 <MX_TIM12_Init+0x84>)
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8004d6e:	4811      	ldr	r0, [pc, #68]	; (8004db4 <MX_TIM12_Init+0x84>)
 8004d70:	f004 fad8 	bl	8009324 <HAL_TIM_PWM_Init>
 8004d74:	4603      	mov	r3, r0
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d001      	beq.n	8004d7e <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8004d7a:	f7ff fcff 	bl	800477c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004d7e:	2360      	movs	r3, #96	; 0x60
 8004d80:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004d82:	2300      	movs	r3, #0
 8004d84:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004d86:	2300      	movs	r3, #0
 8004d88:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004d8e:	1d3b      	adds	r3, r7, #4
 8004d90:	2200      	movs	r2, #0
 8004d92:	4619      	mov	r1, r3
 8004d94:	4807      	ldr	r0, [pc, #28]	; (8004db4 <MX_TIM12_Init+0x84>)
 8004d96:	f004 fccd 	bl	8009734 <HAL_TIM_PWM_ConfigChannel>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d001      	beq.n	8004da4 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8004da0:	f7ff fcec 	bl	800477c <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8004da4:	4803      	ldr	r0, [pc, #12]	; (8004db4 <MX_TIM12_Init+0x84>)
 8004da6:	f000 f87d 	bl	8004ea4 <HAL_TIM_MspPostInit>

}
 8004daa:	bf00      	nop
 8004dac:	3720      	adds	r7, #32
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}
 8004db2:	bf00      	nop
 8004db4:	200020d4 	.word	0x200020d4
 8004db8:	40001800 	.word	0x40001800

08004dbc <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b087      	sub	sp, #28
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a1f      	ldr	r2, [pc, #124]	; (8004e48 <HAL_TIM_PWM_MspInit+0x8c>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d10e      	bne.n	8004dec <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004dce:	2300      	movs	r3, #0
 8004dd0:	617b      	str	r3, [r7, #20]
 8004dd2:	4b1e      	ldr	r3, [pc, #120]	; (8004e4c <HAL_TIM_PWM_MspInit+0x90>)
 8004dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dd6:	4a1d      	ldr	r2, [pc, #116]	; (8004e4c <HAL_TIM_PWM_MspInit+0x90>)
 8004dd8:	f043 0301 	orr.w	r3, r3, #1
 8004ddc:	6453      	str	r3, [r2, #68]	; 0x44
 8004dde:	4b1b      	ldr	r3, [pc, #108]	; (8004e4c <HAL_TIM_PWM_MspInit+0x90>)
 8004de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004de2:	f003 0301 	and.w	r3, r3, #1
 8004de6:	617b      	str	r3, [r7, #20]
 8004de8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM12_CLK_ENABLE();
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 8004dea:	e026      	b.n	8004e3a <HAL_TIM_PWM_MspInit+0x7e>
  else if(tim_pwmHandle->Instance==TIM3)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a17      	ldr	r2, [pc, #92]	; (8004e50 <HAL_TIM_PWM_MspInit+0x94>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d10e      	bne.n	8004e14 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004df6:	2300      	movs	r3, #0
 8004df8:	613b      	str	r3, [r7, #16]
 8004dfa:	4b14      	ldr	r3, [pc, #80]	; (8004e4c <HAL_TIM_PWM_MspInit+0x90>)
 8004dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dfe:	4a13      	ldr	r2, [pc, #76]	; (8004e4c <HAL_TIM_PWM_MspInit+0x90>)
 8004e00:	f043 0302 	orr.w	r3, r3, #2
 8004e04:	6413      	str	r3, [r2, #64]	; 0x40
 8004e06:	4b11      	ldr	r3, [pc, #68]	; (8004e4c <HAL_TIM_PWM_MspInit+0x90>)
 8004e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e0a:	f003 0302 	and.w	r3, r3, #2
 8004e0e:	613b      	str	r3, [r7, #16]
 8004e10:	693b      	ldr	r3, [r7, #16]
}
 8004e12:	e012      	b.n	8004e3a <HAL_TIM_PWM_MspInit+0x7e>
  else if(tim_pwmHandle->Instance==TIM12)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a0e      	ldr	r2, [pc, #56]	; (8004e54 <HAL_TIM_PWM_MspInit+0x98>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d10d      	bne.n	8004e3a <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8004e1e:	2300      	movs	r3, #0
 8004e20:	60fb      	str	r3, [r7, #12]
 8004e22:	4b0a      	ldr	r3, [pc, #40]	; (8004e4c <HAL_TIM_PWM_MspInit+0x90>)
 8004e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e26:	4a09      	ldr	r2, [pc, #36]	; (8004e4c <HAL_TIM_PWM_MspInit+0x90>)
 8004e28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e2c:	6413      	str	r3, [r2, #64]	; 0x40
 8004e2e:	4b07      	ldr	r3, [pc, #28]	; (8004e4c <HAL_TIM_PWM_MspInit+0x90>)
 8004e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e36:	60fb      	str	r3, [r7, #12]
 8004e38:	68fb      	ldr	r3, [r7, #12]
}
 8004e3a:	bf00      	nop
 8004e3c:	371c      	adds	r7, #28
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e44:	4770      	bx	lr
 8004e46:	bf00      	nop
 8004e48:	40010000 	.word	0x40010000
 8004e4c:	40023800 	.word	0x40023800
 8004e50:	40000400 	.word	0x40000400
 8004e54:	40001800 	.word	0x40001800

08004e58 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b084      	sub	sp, #16
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e68:	d115      	bne.n	8004e96 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	60fb      	str	r3, [r7, #12]
 8004e6e:	4b0c      	ldr	r3, [pc, #48]	; (8004ea0 <HAL_TIM_Base_MspInit+0x48>)
 8004e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e72:	4a0b      	ldr	r2, [pc, #44]	; (8004ea0 <HAL_TIM_Base_MspInit+0x48>)
 8004e74:	f043 0301 	orr.w	r3, r3, #1
 8004e78:	6413      	str	r3, [r2, #64]	; 0x40
 8004e7a:	4b09      	ldr	r3, [pc, #36]	; (8004ea0 <HAL_TIM_Base_MspInit+0x48>)
 8004e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e7e:	f003 0301 	and.w	r3, r3, #1
 8004e82:	60fb      	str	r3, [r7, #12]
 8004e84:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8004e86:	2200      	movs	r2, #0
 8004e88:	2105      	movs	r1, #5
 8004e8a:	201c      	movs	r0, #28
 8004e8c:	f001 f976 	bl	800617c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004e90:	201c      	movs	r0, #28
 8004e92:	f001 f98f 	bl	80061b4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8004e96:	bf00      	nop
 8004e98:	3710      	adds	r7, #16
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bd80      	pop	{r7, pc}
 8004e9e:	bf00      	nop
 8004ea0:	40023800 	.word	0x40023800

08004ea4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b08c      	sub	sp, #48	; 0x30
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004eac:	f107 031c 	add.w	r3, r7, #28
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	601a      	str	r2, [r3, #0]
 8004eb4:	605a      	str	r2, [r3, #4]
 8004eb6:	609a      	str	r2, [r3, #8]
 8004eb8:	60da      	str	r2, [r3, #12]
 8004eba:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a46      	ldr	r2, [pc, #280]	; (8004fdc <HAL_TIM_MspPostInit+0x138>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d13e      	bne.n	8004f44 <HAL_TIM_MspPostInit+0xa0>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	61bb      	str	r3, [r7, #24]
 8004eca:	4b45      	ldr	r3, [pc, #276]	; (8004fe0 <HAL_TIM_MspPostInit+0x13c>)
 8004ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ece:	4a44      	ldr	r2, [pc, #272]	; (8004fe0 <HAL_TIM_MspPostInit+0x13c>)
 8004ed0:	f043 0301 	orr.w	r3, r3, #1
 8004ed4:	6313      	str	r3, [r2, #48]	; 0x30
 8004ed6:	4b42      	ldr	r3, [pc, #264]	; (8004fe0 <HAL_TIM_MspPostInit+0x13c>)
 8004ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eda:	f003 0301 	and.w	r3, r3, #1
 8004ede:	61bb      	str	r3, [r7, #24]
 8004ee0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	617b      	str	r3, [r7, #20]
 8004ee6:	4b3e      	ldr	r3, [pc, #248]	; (8004fe0 <HAL_TIM_MspPostInit+0x13c>)
 8004ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eea:	4a3d      	ldr	r2, [pc, #244]	; (8004fe0 <HAL_TIM_MspPostInit+0x13c>)
 8004eec:	f043 0310 	orr.w	r3, r3, #16
 8004ef0:	6313      	str	r3, [r2, #48]	; 0x30
 8004ef2:	4b3b      	ldr	r3, [pc, #236]	; (8004fe0 <HAL_TIM_MspPostInit+0x13c>)
 8004ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ef6:	f003 0310 	and.w	r3, r3, #16
 8004efa:	617b      	str	r3, [r7, #20]
 8004efc:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004efe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004f02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f04:	2302      	movs	r3, #2
 8004f06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f08:	2300      	movs	r3, #0
 8004f0a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004f10:	2301      	movs	r3, #1
 8004f12:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f14:	f107 031c 	add.w	r3, r7, #28
 8004f18:	4619      	mov	r1, r3
 8004f1a:	4832      	ldr	r0, [pc, #200]	; (8004fe4 <HAL_TIM_MspPostInit+0x140>)
 8004f1c:	f001 fd5a 	bl	80069d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8004f20:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004f24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f26:	2302      	movs	r3, #2
 8004f28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f2e:	2300      	movs	r3, #0
 8004f30:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004f32:	2301      	movs	r3, #1
 8004f34:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004f36:	f107 031c 	add.w	r3, r7, #28
 8004f3a:	4619      	mov	r1, r3
 8004f3c:	482a      	ldr	r0, [pc, #168]	; (8004fe8 <HAL_TIM_MspPostInit+0x144>)
 8004f3e:	f001 fd49 	bl	80069d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8004f42:	e046      	b.n	8004fd2 <HAL_TIM_MspPostInit+0x12e>
  else if(timHandle->Instance==TIM3)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a28      	ldr	r2, [pc, #160]	; (8004fec <HAL_TIM_MspPostInit+0x148>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d11e      	bne.n	8004f8c <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f4e:	2300      	movs	r3, #0
 8004f50:	613b      	str	r3, [r7, #16]
 8004f52:	4b23      	ldr	r3, [pc, #140]	; (8004fe0 <HAL_TIM_MspPostInit+0x13c>)
 8004f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f56:	4a22      	ldr	r2, [pc, #136]	; (8004fe0 <HAL_TIM_MspPostInit+0x13c>)
 8004f58:	f043 0302 	orr.w	r3, r3, #2
 8004f5c:	6313      	str	r3, [r2, #48]	; 0x30
 8004f5e:	4b20      	ldr	r3, [pc, #128]	; (8004fe0 <HAL_TIM_MspPostInit+0x13c>)
 8004f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f62:	f003 0302 	and.w	r3, r3, #2
 8004f66:	613b      	str	r3, [r7, #16]
 8004f68:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8004f6a:	2320      	movs	r3, #32
 8004f6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f6e:	2302      	movs	r3, #2
 8004f70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f72:	2300      	movs	r3, #0
 8004f74:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f76:	2300      	movs	r3, #0
 8004f78:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004f7a:	2302      	movs	r3, #2
 8004f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f7e:	f107 031c 	add.w	r3, r7, #28
 8004f82:	4619      	mov	r1, r3
 8004f84:	481a      	ldr	r0, [pc, #104]	; (8004ff0 <HAL_TIM_MspPostInit+0x14c>)
 8004f86:	f001 fd25 	bl	80069d4 <HAL_GPIO_Init>
}
 8004f8a:	e022      	b.n	8004fd2 <HAL_TIM_MspPostInit+0x12e>
  else if(timHandle->Instance==TIM12)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a18      	ldr	r2, [pc, #96]	; (8004ff4 <HAL_TIM_MspPostInit+0x150>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d11d      	bne.n	8004fd2 <HAL_TIM_MspPostInit+0x12e>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8004f96:	2300      	movs	r3, #0
 8004f98:	60fb      	str	r3, [r7, #12]
 8004f9a:	4b11      	ldr	r3, [pc, #68]	; (8004fe0 <HAL_TIM_MspPostInit+0x13c>)
 8004f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f9e:	4a10      	ldr	r2, [pc, #64]	; (8004fe0 <HAL_TIM_MspPostInit+0x13c>)
 8004fa0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fa4:	6313      	str	r3, [r2, #48]	; 0x30
 8004fa6:	4b0e      	ldr	r3, [pc, #56]	; (8004fe0 <HAL_TIM_MspPostInit+0x13c>)
 8004fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004faa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fae:	60fb      	str	r3, [r7, #12]
 8004fb0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004fb2:	2340      	movs	r3, #64	; 0x40
 8004fb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fb6:	2302      	movs	r3, #2
 8004fb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8004fc2:	2309      	movs	r3, #9
 8004fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004fc6:	f107 031c 	add.w	r3, r7, #28
 8004fca:	4619      	mov	r1, r3
 8004fcc:	480a      	ldr	r0, [pc, #40]	; (8004ff8 <HAL_TIM_MspPostInit+0x154>)
 8004fce:	f001 fd01 	bl	80069d4 <HAL_GPIO_Init>
}
 8004fd2:	bf00      	nop
 8004fd4:	3730      	adds	r7, #48	; 0x30
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}
 8004fda:	bf00      	nop
 8004fdc:	40010000 	.word	0x40010000
 8004fe0:	40023800 	.word	0x40023800
 8004fe4:	40020000 	.word	0x40020000
 8004fe8:	40021000 	.word	0x40021000
 8004fec:	40000400 	.word	0x40000400
 8004ff0:	40020400 	.word	0x40020400
 8004ff4:	40001800 	.word	0x40001800
 8004ff8:	40021c00 	.word	0x40021c00

08004ffc <MX_USART6_UART_Init>:
DMA_HandleTypeDef hdma_usart6_tx;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8005000:	4b11      	ldr	r3, [pc, #68]	; (8005048 <MX_USART6_UART_Init+0x4c>)
 8005002:	4a12      	ldr	r2, [pc, #72]	; (800504c <MX_USART6_UART_Init+0x50>)
 8005004:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 921600;
 8005006:	4b10      	ldr	r3, [pc, #64]	; (8005048 <MX_USART6_UART_Init+0x4c>)
 8005008:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 800500c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800500e:	4b0e      	ldr	r3, [pc, #56]	; (8005048 <MX_USART6_UART_Init+0x4c>)
 8005010:	2200      	movs	r2, #0
 8005012:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8005014:	4b0c      	ldr	r3, [pc, #48]	; (8005048 <MX_USART6_UART_Init+0x4c>)
 8005016:	2200      	movs	r2, #0
 8005018:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800501a:	4b0b      	ldr	r3, [pc, #44]	; (8005048 <MX_USART6_UART_Init+0x4c>)
 800501c:	2200      	movs	r2, #0
 800501e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8005020:	4b09      	ldr	r3, [pc, #36]	; (8005048 <MX_USART6_UART_Init+0x4c>)
 8005022:	220c      	movs	r2, #12
 8005024:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005026:	4b08      	ldr	r3, [pc, #32]	; (8005048 <MX_USART6_UART_Init+0x4c>)
 8005028:	2200      	movs	r2, #0
 800502a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800502c:	4b06      	ldr	r3, [pc, #24]	; (8005048 <MX_USART6_UART_Init+0x4c>)
 800502e:	2200      	movs	r2, #0
 8005030:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8005032:	4805      	ldr	r0, [pc, #20]	; (8005048 <MX_USART6_UART_Init+0x4c>)
 8005034:	f005 f92e 	bl	800a294 <HAL_UART_Init>
 8005038:	4603      	mov	r3, r0
 800503a:	2b00      	cmp	r3, #0
 800503c:	d001      	beq.n	8005042 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800503e:	f7ff fb9d 	bl	800477c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8005042:	bf00      	nop
 8005044:	bd80      	pop	{r7, pc}
 8005046:	bf00      	nop
 8005048:	2000211c 	.word	0x2000211c
 800504c:	40011400 	.word	0x40011400

08005050 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b08a      	sub	sp, #40	; 0x28
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005058:	f107 0314 	add.w	r3, r7, #20
 800505c:	2200      	movs	r2, #0
 800505e:	601a      	str	r2, [r3, #0]
 8005060:	605a      	str	r2, [r3, #4]
 8005062:	609a      	str	r2, [r3, #8]
 8005064:	60da      	str	r2, [r3, #12]
 8005066:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART6)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a4c      	ldr	r2, [pc, #304]	; (80051a0 <HAL_UART_MspInit+0x150>)
 800506e:	4293      	cmp	r3, r2
 8005070:	f040 8092 	bne.w	8005198 <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8005074:	2300      	movs	r3, #0
 8005076:	613b      	str	r3, [r7, #16]
 8005078:	4b4a      	ldr	r3, [pc, #296]	; (80051a4 <HAL_UART_MspInit+0x154>)
 800507a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800507c:	4a49      	ldr	r2, [pc, #292]	; (80051a4 <HAL_UART_MspInit+0x154>)
 800507e:	f043 0320 	orr.w	r3, r3, #32
 8005082:	6453      	str	r3, [r2, #68]	; 0x44
 8005084:	4b47      	ldr	r3, [pc, #284]	; (80051a4 <HAL_UART_MspInit+0x154>)
 8005086:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005088:	f003 0320 	and.w	r3, r3, #32
 800508c:	613b      	str	r3, [r7, #16]
 800508e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8005090:	2300      	movs	r3, #0
 8005092:	60fb      	str	r3, [r7, #12]
 8005094:	4b43      	ldr	r3, [pc, #268]	; (80051a4 <HAL_UART_MspInit+0x154>)
 8005096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005098:	4a42      	ldr	r2, [pc, #264]	; (80051a4 <HAL_UART_MspInit+0x154>)
 800509a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800509e:	6313      	str	r3, [r2, #48]	; 0x30
 80050a0:	4b40      	ldr	r3, [pc, #256]	; (80051a4 <HAL_UART_MspInit+0x154>)
 80050a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050a8:	60fb      	str	r3, [r7, #12]
 80050aa:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PG14     ------> USART6_TX
    PG9     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_9;
 80050ac:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 80050b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050b2:	2302      	movs	r3, #2
 80050b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80050b6:	2301      	movs	r3, #1
 80050b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80050ba:	2303      	movs	r3, #3
 80050bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80050be:	2308      	movs	r3, #8
 80050c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80050c2:	f107 0314 	add.w	r3, r7, #20
 80050c6:	4619      	mov	r1, r3
 80050c8:	4837      	ldr	r0, [pc, #220]	; (80051a8 <HAL_UART_MspInit+0x158>)
 80050ca:	f001 fc83 	bl	80069d4 <HAL_GPIO_Init>

    /* USART6 DMA Init */
    /* USART6_RX Init */
    hdma_usart6_rx.Instance = DMA2_Stream1;
 80050ce:	4b37      	ldr	r3, [pc, #220]	; (80051ac <HAL_UART_MspInit+0x15c>)
 80050d0:	4a37      	ldr	r2, [pc, #220]	; (80051b0 <HAL_UART_MspInit+0x160>)
 80050d2:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 80050d4:	4b35      	ldr	r3, [pc, #212]	; (80051ac <HAL_UART_MspInit+0x15c>)
 80050d6:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80050da:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80050dc:	4b33      	ldr	r3, [pc, #204]	; (80051ac <HAL_UART_MspInit+0x15c>)
 80050de:	2200      	movs	r2, #0
 80050e0:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80050e2:	4b32      	ldr	r3, [pc, #200]	; (80051ac <HAL_UART_MspInit+0x15c>)
 80050e4:	2200      	movs	r2, #0
 80050e6:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 80050e8:	4b30      	ldr	r3, [pc, #192]	; (80051ac <HAL_UART_MspInit+0x15c>)
 80050ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80050ee:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80050f0:	4b2e      	ldr	r3, [pc, #184]	; (80051ac <HAL_UART_MspInit+0x15c>)
 80050f2:	2200      	movs	r2, #0
 80050f4:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80050f6:	4b2d      	ldr	r3, [pc, #180]	; (80051ac <HAL_UART_MspInit+0x15c>)
 80050f8:	2200      	movs	r2, #0
 80050fa:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 80050fc:	4b2b      	ldr	r3, [pc, #172]	; (80051ac <HAL_UART_MspInit+0x15c>)
 80050fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005102:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005104:	4b29      	ldr	r3, [pc, #164]	; (80051ac <HAL_UART_MspInit+0x15c>)
 8005106:	2200      	movs	r2, #0
 8005108:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800510a:	4b28      	ldr	r3, [pc, #160]	; (80051ac <HAL_UART_MspInit+0x15c>)
 800510c:	2200      	movs	r2, #0
 800510e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8005110:	4826      	ldr	r0, [pc, #152]	; (80051ac <HAL_UART_MspInit+0x15c>)
 8005112:	f001 f85d 	bl	80061d0 <HAL_DMA_Init>
 8005116:	4603      	mov	r3, r0
 8005118:	2b00      	cmp	r3, #0
 800511a:	d001      	beq.n	8005120 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 800511c:	f7ff fb2e 	bl	800477c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	4a22      	ldr	r2, [pc, #136]	; (80051ac <HAL_UART_MspInit+0x15c>)
 8005124:	63da      	str	r2, [r3, #60]	; 0x3c
 8005126:	4a21      	ldr	r2, [pc, #132]	; (80051ac <HAL_UART_MspInit+0x15c>)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART6_TX Init */
    hdma_usart6_tx.Instance = DMA2_Stream6;
 800512c:	4b21      	ldr	r3, [pc, #132]	; (80051b4 <HAL_UART_MspInit+0x164>)
 800512e:	4a22      	ldr	r2, [pc, #136]	; (80051b8 <HAL_UART_MspInit+0x168>)
 8005130:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8005132:	4b20      	ldr	r3, [pc, #128]	; (80051b4 <HAL_UART_MspInit+0x164>)
 8005134:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8005138:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800513a:	4b1e      	ldr	r3, [pc, #120]	; (80051b4 <HAL_UART_MspInit+0x164>)
 800513c:	2240      	movs	r2, #64	; 0x40
 800513e:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005140:	4b1c      	ldr	r3, [pc, #112]	; (80051b4 <HAL_UART_MspInit+0x164>)
 8005142:	2200      	movs	r2, #0
 8005144:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005146:	4b1b      	ldr	r3, [pc, #108]	; (80051b4 <HAL_UART_MspInit+0x164>)
 8005148:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800514c:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800514e:	4b19      	ldr	r3, [pc, #100]	; (80051b4 <HAL_UART_MspInit+0x164>)
 8005150:	2200      	movs	r2, #0
 8005152:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005154:	4b17      	ldr	r3, [pc, #92]	; (80051b4 <HAL_UART_MspInit+0x164>)
 8005156:	2200      	movs	r2, #0
 8005158:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 800515a:	4b16      	ldr	r3, [pc, #88]	; (80051b4 <HAL_UART_MspInit+0x164>)
 800515c:	2200      	movs	r2, #0
 800515e:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005160:	4b14      	ldr	r3, [pc, #80]	; (80051b4 <HAL_UART_MspInit+0x164>)
 8005162:	2200      	movs	r2, #0
 8005164:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005166:	4b13      	ldr	r3, [pc, #76]	; (80051b4 <HAL_UART_MspInit+0x164>)
 8005168:	2200      	movs	r2, #0
 800516a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 800516c:	4811      	ldr	r0, [pc, #68]	; (80051b4 <HAL_UART_MspInit+0x164>)
 800516e:	f001 f82f 	bl	80061d0 <HAL_DMA_Init>
 8005172:	4603      	mov	r3, r0
 8005174:	2b00      	cmp	r3, #0
 8005176:	d001      	beq.n	800517c <HAL_UART_MspInit+0x12c>
    {
      Error_Handler();
 8005178:	f7ff fb00 	bl	800477c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart6_tx);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	4a0d      	ldr	r2, [pc, #52]	; (80051b4 <HAL_UART_MspInit+0x164>)
 8005180:	639a      	str	r2, [r3, #56]	; 0x38
 8005182:	4a0c      	ldr	r2, [pc, #48]	; (80051b4 <HAL_UART_MspInit+0x164>)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8005188:	2200      	movs	r2, #0
 800518a:	2105      	movs	r1, #5
 800518c:	2047      	movs	r0, #71	; 0x47
 800518e:	f000 fff5 	bl	800617c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8005192:	2047      	movs	r0, #71	; 0x47
 8005194:	f001 f80e 	bl	80061b4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8005198:	bf00      	nop
 800519a:	3728      	adds	r7, #40	; 0x28
 800519c:	46bd      	mov	sp, r7
 800519e:	bd80      	pop	{r7, pc}
 80051a0:	40011400 	.word	0x40011400
 80051a4:	40023800 	.word	0x40023800
 80051a8:	40021800 	.word	0x40021800
 80051ac:	20002164 	.word	0x20002164
 80051b0:	40026428 	.word	0x40026428
 80051b4:	200021c4 	.word	0x200021c4
 80051b8:	400264a0 	.word	0x400264a0

080051bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80051bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80051f4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 80051c0:	f7ff fc6e 	bl	8004aa0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80051c4:	480c      	ldr	r0, [pc, #48]	; (80051f8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80051c6:	490d      	ldr	r1, [pc, #52]	; (80051fc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80051c8:	4a0d      	ldr	r2, [pc, #52]	; (8005200 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80051ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80051cc:	e002      	b.n	80051d4 <LoopCopyDataInit>

080051ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80051ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80051d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80051d2:	3304      	adds	r3, #4

080051d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80051d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80051d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80051d8:	d3f9      	bcc.n	80051ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80051da:	4a0a      	ldr	r2, [pc, #40]	; (8005204 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80051dc:	4c0a      	ldr	r4, [pc, #40]	; (8005208 <LoopFillZerobss+0x22>)
  movs r3, #0
 80051de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80051e0:	e001      	b.n	80051e6 <LoopFillZerobss>

080051e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80051e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80051e4:	3204      	adds	r2, #4

080051e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80051e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80051e8:	d3fb      	bcc.n	80051e2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80051ea:	f00e feaf 	bl	8013f4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80051ee:	f7ff fa27 	bl	8004640 <main>
  bx  lr    
 80051f2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80051f4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80051f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80051fc:	2000019c 	.word	0x2000019c
  ldr r2, =_sidata
 8005200:	08015e08 	.word	0x08015e08
  ldr r2, =_sbss
 8005204:	200001a0 	.word	0x200001a0
  ldr r4, =_ebss
 8005208:	200177d0 	.word	0x200177d0

0800520c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800520c:	e7fe      	b.n	800520c <ADC_IRQHandler>
	...

08005210 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005214:	4b0e      	ldr	r3, [pc, #56]	; (8005250 <HAL_Init+0x40>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4a0d      	ldr	r2, [pc, #52]	; (8005250 <HAL_Init+0x40>)
 800521a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800521e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005220:	4b0b      	ldr	r3, [pc, #44]	; (8005250 <HAL_Init+0x40>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a0a      	ldr	r2, [pc, #40]	; (8005250 <HAL_Init+0x40>)
 8005226:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800522a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800522c:	4b08      	ldr	r3, [pc, #32]	; (8005250 <HAL_Init+0x40>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a07      	ldr	r2, [pc, #28]	; (8005250 <HAL_Init+0x40>)
 8005232:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005236:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005238:	2003      	movs	r0, #3
 800523a:	f000 ff94 	bl	8006166 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800523e:	200f      	movs	r0, #15
 8005240:	f7ff fb4c 	bl	80048dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005244:	f7ff fb1e 	bl	8004884 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005248:	2300      	movs	r3, #0
}
 800524a:	4618      	mov	r0, r3
 800524c:	bd80      	pop	{r7, pc}
 800524e:	bf00      	nop
 8005250:	40023c00 	.word	0x40023c00

08005254 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005254:	b480      	push	{r7}
 8005256:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005258:	4b06      	ldr	r3, [pc, #24]	; (8005274 <HAL_IncTick+0x20>)
 800525a:	781b      	ldrb	r3, [r3, #0]
 800525c:	461a      	mov	r2, r3
 800525e:	4b06      	ldr	r3, [pc, #24]	; (8005278 <HAL_IncTick+0x24>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4413      	add	r3, r2
 8005264:	4a04      	ldr	r2, [pc, #16]	; (8005278 <HAL_IncTick+0x24>)
 8005266:	6013      	str	r3, [r2, #0]
}
 8005268:	bf00      	nop
 800526a:	46bd      	mov	sp, r7
 800526c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005270:	4770      	bx	lr
 8005272:	bf00      	nop
 8005274:	2000000c 	.word	0x2000000c
 8005278:	20002224 	.word	0x20002224

0800527c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800527c:	b480      	push	{r7}
 800527e:	af00      	add	r7, sp, #0
  return uwTick;
 8005280:	4b03      	ldr	r3, [pc, #12]	; (8005290 <HAL_GetTick+0x14>)
 8005282:	681b      	ldr	r3, [r3, #0]
}
 8005284:	4618      	mov	r0, r3
 8005286:	46bd      	mov	sp, r7
 8005288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528c:	4770      	bx	lr
 800528e:	bf00      	nop
 8005290:	20002224 	.word	0x20002224

08005294 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b084      	sub	sp, #16
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800529c:	f7ff ffee 	bl	800527c <HAL_GetTick>
 80052a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80052ac:	d005      	beq.n	80052ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80052ae:	4b0a      	ldr	r3, [pc, #40]	; (80052d8 <HAL_Delay+0x44>)
 80052b0:	781b      	ldrb	r3, [r3, #0]
 80052b2:	461a      	mov	r2, r3
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	4413      	add	r3, r2
 80052b8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80052ba:	bf00      	nop
 80052bc:	f7ff ffde 	bl	800527c <HAL_GetTick>
 80052c0:	4602      	mov	r2, r0
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	1ad3      	subs	r3, r2, r3
 80052c6:	68fa      	ldr	r2, [r7, #12]
 80052c8:	429a      	cmp	r2, r3
 80052ca:	d8f7      	bhi.n	80052bc <HAL_Delay+0x28>
  {
  }
}
 80052cc:	bf00      	nop
 80052ce:	bf00      	nop
 80052d0:	3710      	adds	r7, #16
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}
 80052d6:	bf00      	nop
 80052d8:	2000000c 	.word	0x2000000c

080052dc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b084      	sub	sp, #16
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d101      	bne.n	80052ee <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80052ea:	2301      	movs	r3, #1
 80052ec:	e0ed      	b.n	80054ca <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80052f4:	b2db      	uxtb	r3, r3
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d102      	bne.n	8005300 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	f7fe ff26 	bl	800414c <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	681a      	ldr	r2, [r3, #0]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f042 0201 	orr.w	r2, r2, #1
 800530e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005310:	f7ff ffb4 	bl	800527c <HAL_GetTick>
 8005314:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8005316:	e012      	b.n	800533e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005318:	f7ff ffb0 	bl	800527c <HAL_GetTick>
 800531c:	4602      	mov	r2, r0
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	1ad3      	subs	r3, r2, r3
 8005322:	2b0a      	cmp	r3, #10
 8005324:	d90b      	bls.n	800533e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800532a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2205      	movs	r2, #5
 8005336:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800533a:	2301      	movs	r3, #1
 800533c:	e0c5      	b.n	80054ca <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	f003 0301 	and.w	r3, r3, #1
 8005348:	2b00      	cmp	r3, #0
 800534a:	d0e5      	beq.n	8005318 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	681a      	ldr	r2, [r3, #0]
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f022 0202 	bic.w	r2, r2, #2
 800535a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800535c:	f7ff ff8e 	bl	800527c <HAL_GetTick>
 8005360:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8005362:	e012      	b.n	800538a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005364:	f7ff ff8a 	bl	800527c <HAL_GetTick>
 8005368:	4602      	mov	r2, r0
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	1ad3      	subs	r3, r2, r3
 800536e:	2b0a      	cmp	r3, #10
 8005370:	d90b      	bls.n	800538a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005376:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2205      	movs	r2, #5
 8005382:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8005386:	2301      	movs	r3, #1
 8005388:	e09f      	b.n	80054ca <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	f003 0302 	and.w	r3, r3, #2
 8005394:	2b00      	cmp	r3, #0
 8005396:	d1e5      	bne.n	8005364 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	7e1b      	ldrb	r3, [r3, #24]
 800539c:	2b01      	cmp	r3, #1
 800539e:	d108      	bne.n	80053b2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	681a      	ldr	r2, [r3, #0]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80053ae:	601a      	str	r2, [r3, #0]
 80053b0:	e007      	b.n	80053c2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	681a      	ldr	r2, [r3, #0]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80053c0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	7e5b      	ldrb	r3, [r3, #25]
 80053c6:	2b01      	cmp	r3, #1
 80053c8:	d108      	bne.n	80053dc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	681a      	ldr	r2, [r3, #0]
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80053d8:	601a      	str	r2, [r3, #0]
 80053da:	e007      	b.n	80053ec <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	681a      	ldr	r2, [r3, #0]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053ea:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	7e9b      	ldrb	r3, [r3, #26]
 80053f0:	2b01      	cmp	r3, #1
 80053f2:	d108      	bne.n	8005406 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	681a      	ldr	r2, [r3, #0]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f042 0220 	orr.w	r2, r2, #32
 8005402:	601a      	str	r2, [r3, #0]
 8005404:	e007      	b.n	8005416 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	681a      	ldr	r2, [r3, #0]
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f022 0220 	bic.w	r2, r2, #32
 8005414:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	7edb      	ldrb	r3, [r3, #27]
 800541a:	2b01      	cmp	r3, #1
 800541c:	d108      	bne.n	8005430 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	681a      	ldr	r2, [r3, #0]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f022 0210 	bic.w	r2, r2, #16
 800542c:	601a      	str	r2, [r3, #0]
 800542e:	e007      	b.n	8005440 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	681a      	ldr	r2, [r3, #0]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f042 0210 	orr.w	r2, r2, #16
 800543e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	7f1b      	ldrb	r3, [r3, #28]
 8005444:	2b01      	cmp	r3, #1
 8005446:	d108      	bne.n	800545a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	681a      	ldr	r2, [r3, #0]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f042 0208 	orr.w	r2, r2, #8
 8005456:	601a      	str	r2, [r3, #0]
 8005458:	e007      	b.n	800546a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	681a      	ldr	r2, [r3, #0]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f022 0208 	bic.w	r2, r2, #8
 8005468:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	7f5b      	ldrb	r3, [r3, #29]
 800546e:	2b01      	cmp	r3, #1
 8005470:	d108      	bne.n	8005484 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	681a      	ldr	r2, [r3, #0]
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f042 0204 	orr.w	r2, r2, #4
 8005480:	601a      	str	r2, [r3, #0]
 8005482:	e007      	b.n	8005494 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	681a      	ldr	r2, [r3, #0]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f022 0204 	bic.w	r2, r2, #4
 8005492:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	689a      	ldr	r2, [r3, #8]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	68db      	ldr	r3, [r3, #12]
 800549c:	431a      	orrs	r2, r3
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	691b      	ldr	r3, [r3, #16]
 80054a2:	431a      	orrs	r2, r3
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	695b      	ldr	r3, [r3, #20]
 80054a8:	ea42 0103 	orr.w	r1, r2, r3
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	1e5a      	subs	r2, r3, #1
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	430a      	orrs	r2, r1
 80054b8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2200      	movs	r2, #0
 80054be:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2201      	movs	r2, #1
 80054c4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80054c8:	2300      	movs	r3, #0
}
 80054ca:	4618      	mov	r0, r3
 80054cc:	3710      	adds	r7, #16
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd80      	pop	{r7, pc}
	...

080054d4 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80054d4:	b480      	push	{r7}
 80054d6:	b087      	sub	sp, #28
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
 80054dc:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80054ea:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80054ec:	7cfb      	ldrb	r3, [r7, #19]
 80054ee:	2b01      	cmp	r3, #1
 80054f0:	d003      	beq.n	80054fa <HAL_CAN_ConfigFilter+0x26>
 80054f2:	7cfb      	ldrb	r3, [r7, #19]
 80054f4:	2b02      	cmp	r3, #2
 80054f6:	f040 80be 	bne.w	8005676 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80054fa:	4b65      	ldr	r3, [pc, #404]	; (8005690 <HAL_CAN_ConfigFilter+0x1bc>)
 80054fc:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005504:	f043 0201 	orr.w	r2, r3, #1
 8005508:	697b      	ldr	r3, [r7, #20]
 800550a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005514:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8005518:	697b      	ldr	r3, [r7, #20]
 800551a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800551e:	697b      	ldr	r3, [r7, #20]
 8005520:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005528:	021b      	lsls	r3, r3, #8
 800552a:	431a      	orrs	r2, r3
 800552c:	697b      	ldr	r3, [r7, #20]
 800552e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	695b      	ldr	r3, [r3, #20]
 8005536:	f003 031f 	and.w	r3, r3, #31
 800553a:	2201      	movs	r2, #1
 800553c:	fa02 f303 	lsl.w	r3, r2, r3
 8005540:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	43db      	mvns	r3, r3
 800554c:	401a      	ands	r2, r3
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	69db      	ldr	r3, [r3, #28]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d123      	bne.n	80055a4 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800555c:	697b      	ldr	r3, [r7, #20]
 800555e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	43db      	mvns	r3, r3
 8005566:	401a      	ands	r2, r3
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	68db      	ldr	r3, [r3, #12]
 8005572:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800557a:	683a      	ldr	r2, [r7, #0]
 800557c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800557e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005580:	697b      	ldr	r3, [r7, #20]
 8005582:	3248      	adds	r2, #72	; 0x48
 8005584:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	689b      	ldr	r3, [r3, #8]
 800558c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005598:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800559a:	6979      	ldr	r1, [r7, #20]
 800559c:	3348      	adds	r3, #72	; 0x48
 800559e:	00db      	lsls	r3, r3, #3
 80055a0:	440b      	add	r3, r1
 80055a2:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	69db      	ldr	r3, [r3, #28]
 80055a8:	2b01      	cmp	r3, #1
 80055aa:	d122      	bne.n	80055f2 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	431a      	orrs	r2, r3
 80055b6:	697b      	ldr	r3, [r7, #20]
 80055b8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80055c8:	683a      	ldr	r2, [r7, #0]
 80055ca:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80055cc:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	3248      	adds	r2, #72	; 0x48
 80055d2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	689b      	ldr	r3, [r3, #8]
 80055da:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	68db      	ldr	r3, [r3, #12]
 80055e0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80055e6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80055e8:	6979      	ldr	r1, [r7, #20]
 80055ea:	3348      	adds	r3, #72	; 0x48
 80055ec:	00db      	lsls	r3, r3, #3
 80055ee:	440b      	add	r3, r1
 80055f0:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	699b      	ldr	r3, [r3, #24]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d109      	bne.n	800560e <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	43db      	mvns	r3, r3
 8005604:	401a      	ands	r2, r3
 8005606:	697b      	ldr	r3, [r7, #20]
 8005608:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800560c:	e007      	b.n	800561e <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800560e:	697b      	ldr	r3, [r7, #20]
 8005610:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	431a      	orrs	r2, r3
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	691b      	ldr	r3, [r3, #16]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d109      	bne.n	800563a <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8005626:	697b      	ldr	r3, [r7, #20]
 8005628:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	43db      	mvns	r3, r3
 8005630:	401a      	ands	r2, r3
 8005632:	697b      	ldr	r3, [r7, #20]
 8005634:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8005638:	e007      	b.n	800564a <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	431a      	orrs	r2, r3
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	6a1b      	ldr	r3, [r3, #32]
 800564e:	2b01      	cmp	r3, #1
 8005650:	d107      	bne.n	8005662 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	431a      	orrs	r2, r3
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005668:	f023 0201 	bic.w	r2, r3, #1
 800566c:	697b      	ldr	r3, [r7, #20]
 800566e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8005672:	2300      	movs	r3, #0
 8005674:	e006      	b.n	8005684 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800567a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005682:	2301      	movs	r3, #1
  }
}
 8005684:	4618      	mov	r0, r3
 8005686:	371c      	adds	r7, #28
 8005688:	46bd      	mov	sp, r7
 800568a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568e:	4770      	bx	lr
 8005690:	40006400 	.word	0x40006400

08005694 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b084      	sub	sp, #16
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	f893 3020 	ldrb.w	r3, [r3, #32]
 80056a2:	b2db      	uxtb	r3, r3
 80056a4:	2b01      	cmp	r3, #1
 80056a6:	d12e      	bne.n	8005706 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2202      	movs	r2, #2
 80056ac:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	681a      	ldr	r2, [r3, #0]
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f022 0201 	bic.w	r2, r2, #1
 80056be:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80056c0:	f7ff fddc 	bl	800527c <HAL_GetTick>
 80056c4:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80056c6:	e012      	b.n	80056ee <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80056c8:	f7ff fdd8 	bl	800527c <HAL_GetTick>
 80056cc:	4602      	mov	r2, r0
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	1ad3      	subs	r3, r2, r3
 80056d2:	2b0a      	cmp	r3, #10
 80056d4:	d90b      	bls.n	80056ee <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056da:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2205      	movs	r2, #5
 80056e6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80056ea:	2301      	movs	r3, #1
 80056ec:	e012      	b.n	8005714 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	f003 0301 	and.w	r3, r3, #1
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d1e5      	bne.n	80056c8 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2200      	movs	r2, #0
 8005700:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8005702:	2300      	movs	r3, #0
 8005704:	e006      	b.n	8005714 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800570a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005712:	2301      	movs	r3, #1
  }
}
 8005714:	4618      	mov	r0, r3
 8005716:	3710      	adds	r7, #16
 8005718:	46bd      	mov	sp, r7
 800571a:	bd80      	pop	{r7, pc}

0800571c <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800571c:	b480      	push	{r7}
 800571e:	b089      	sub	sp, #36	; 0x24
 8005720:	af00      	add	r7, sp, #0
 8005722:	60f8      	str	r0, [r7, #12]
 8005724:	60b9      	str	r1, [r7, #8]
 8005726:	607a      	str	r2, [r7, #4]
 8005728:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005730:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	689b      	ldr	r3, [r3, #8]
 8005738:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800573a:	7ffb      	ldrb	r3, [r7, #31]
 800573c:	2b01      	cmp	r3, #1
 800573e:	d003      	beq.n	8005748 <HAL_CAN_AddTxMessage+0x2c>
 8005740:	7ffb      	ldrb	r3, [r7, #31]
 8005742:	2b02      	cmp	r3, #2
 8005744:	f040 80ad 	bne.w	80058a2 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8005748:	69bb      	ldr	r3, [r7, #24]
 800574a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800574e:	2b00      	cmp	r3, #0
 8005750:	d10a      	bne.n	8005768 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8005752:	69bb      	ldr	r3, [r7, #24]
 8005754:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8005758:	2b00      	cmp	r3, #0
 800575a:	d105      	bne.n	8005768 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800575c:	69bb      	ldr	r3, [r7, #24]
 800575e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8005762:	2b00      	cmp	r3, #0
 8005764:	f000 8095 	beq.w	8005892 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8005768:	69bb      	ldr	r3, [r7, #24]
 800576a:	0e1b      	lsrs	r3, r3, #24
 800576c:	f003 0303 	and.w	r3, r3, #3
 8005770:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8005772:	2201      	movs	r2, #1
 8005774:	697b      	ldr	r3, [r7, #20]
 8005776:	409a      	lsls	r2, r3
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	689b      	ldr	r3, [r3, #8]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d10d      	bne.n	80057a0 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800578e:	68f9      	ldr	r1, [r7, #12]
 8005790:	6809      	ldr	r1, [r1, #0]
 8005792:	431a      	orrs	r2, r3
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	3318      	adds	r3, #24
 8005798:	011b      	lsls	r3, r3, #4
 800579a:	440b      	add	r3, r1
 800579c:	601a      	str	r2, [r3, #0]
 800579e:	e00f      	b.n	80057c0 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80057aa:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80057b0:	68f9      	ldr	r1, [r7, #12]
 80057b2:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80057b4:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	3318      	adds	r3, #24
 80057ba:	011b      	lsls	r3, r3, #4
 80057bc:	440b      	add	r3, r1
 80057be:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	6819      	ldr	r1, [r3, #0]
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	691a      	ldr	r2, [r3, #16]
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	3318      	adds	r3, #24
 80057cc:	011b      	lsls	r3, r3, #4
 80057ce:	440b      	add	r3, r1
 80057d0:	3304      	adds	r3, #4
 80057d2:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	7d1b      	ldrb	r3, [r3, #20]
 80057d8:	2b01      	cmp	r3, #1
 80057da:	d111      	bne.n	8005800 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681a      	ldr	r2, [r3, #0]
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	3318      	adds	r3, #24
 80057e4:	011b      	lsls	r3, r3, #4
 80057e6:	4413      	add	r3, r2
 80057e8:	3304      	adds	r3, #4
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	68fa      	ldr	r2, [r7, #12]
 80057ee:	6811      	ldr	r1, [r2, #0]
 80057f0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	3318      	adds	r3, #24
 80057f8:	011b      	lsls	r3, r3, #4
 80057fa:	440b      	add	r3, r1
 80057fc:	3304      	adds	r3, #4
 80057fe:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	3307      	adds	r3, #7
 8005804:	781b      	ldrb	r3, [r3, #0]
 8005806:	061a      	lsls	r2, r3, #24
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	3306      	adds	r3, #6
 800580c:	781b      	ldrb	r3, [r3, #0]
 800580e:	041b      	lsls	r3, r3, #16
 8005810:	431a      	orrs	r2, r3
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	3305      	adds	r3, #5
 8005816:	781b      	ldrb	r3, [r3, #0]
 8005818:	021b      	lsls	r3, r3, #8
 800581a:	4313      	orrs	r3, r2
 800581c:	687a      	ldr	r2, [r7, #4]
 800581e:	3204      	adds	r2, #4
 8005820:	7812      	ldrb	r2, [r2, #0]
 8005822:	4610      	mov	r0, r2
 8005824:	68fa      	ldr	r2, [r7, #12]
 8005826:	6811      	ldr	r1, [r2, #0]
 8005828:	ea43 0200 	orr.w	r2, r3, r0
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	011b      	lsls	r3, r3, #4
 8005830:	440b      	add	r3, r1
 8005832:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8005836:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	3303      	adds	r3, #3
 800583c:	781b      	ldrb	r3, [r3, #0]
 800583e:	061a      	lsls	r2, r3, #24
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	3302      	adds	r3, #2
 8005844:	781b      	ldrb	r3, [r3, #0]
 8005846:	041b      	lsls	r3, r3, #16
 8005848:	431a      	orrs	r2, r3
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	3301      	adds	r3, #1
 800584e:	781b      	ldrb	r3, [r3, #0]
 8005850:	021b      	lsls	r3, r3, #8
 8005852:	4313      	orrs	r3, r2
 8005854:	687a      	ldr	r2, [r7, #4]
 8005856:	7812      	ldrb	r2, [r2, #0]
 8005858:	4610      	mov	r0, r2
 800585a:	68fa      	ldr	r2, [r7, #12]
 800585c:	6811      	ldr	r1, [r2, #0]
 800585e:	ea43 0200 	orr.w	r2, r3, r0
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	011b      	lsls	r3, r3, #4
 8005866:	440b      	add	r3, r1
 8005868:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800586c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681a      	ldr	r2, [r3, #0]
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	3318      	adds	r3, #24
 8005876:	011b      	lsls	r3, r3, #4
 8005878:	4413      	add	r3, r2
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	68fa      	ldr	r2, [r7, #12]
 800587e:	6811      	ldr	r1, [r2, #0]
 8005880:	f043 0201 	orr.w	r2, r3, #1
 8005884:	697b      	ldr	r3, [r7, #20]
 8005886:	3318      	adds	r3, #24
 8005888:	011b      	lsls	r3, r3, #4
 800588a:	440b      	add	r3, r1
 800588c:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800588e:	2300      	movs	r3, #0
 8005890:	e00e      	b.n	80058b0 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005896:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800589e:	2301      	movs	r3, #1
 80058a0:	e006      	b.n	80058b0 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80058ae:	2301      	movs	r3, #1
  }
}
 80058b0:	4618      	mov	r0, r3
 80058b2:	3724      	adds	r7, #36	; 0x24
 80058b4:	46bd      	mov	sp, r7
 80058b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ba:	4770      	bx	lr

080058bc <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 80058bc:	b480      	push	{r7}
 80058be:	b085      	sub	sp, #20
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 80058c4:	2300      	movs	r3, #0
 80058c6:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80058ce:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 80058d0:	7afb      	ldrb	r3, [r7, #11]
 80058d2:	2b01      	cmp	r3, #1
 80058d4:	d002      	beq.n	80058dc <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 80058d6:	7afb      	ldrb	r3, [r7, #11]
 80058d8:	2b02      	cmp	r3, #2
 80058da:	d11d      	bne.n	8005918 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	689b      	ldr	r3, [r3, #8]
 80058e2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d002      	beq.n	80058f0 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	3301      	adds	r3, #1
 80058ee:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	689b      	ldr	r3, [r3, #8]
 80058f6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d002      	beq.n	8005904 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	3301      	adds	r3, #1
 8005902:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	689b      	ldr	r3, [r3, #8]
 800590a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800590e:	2b00      	cmp	r3, #0
 8005910:	d002      	beq.n	8005918 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	3301      	adds	r3, #1
 8005916:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8005918:	68fb      	ldr	r3, [r7, #12]
}
 800591a:	4618      	mov	r0, r3
 800591c:	3714      	adds	r7, #20
 800591e:	46bd      	mov	sp, r7
 8005920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005924:	4770      	bx	lr

08005926 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8005926:	b480      	push	{r7}
 8005928:	b087      	sub	sp, #28
 800592a:	af00      	add	r7, sp, #0
 800592c:	60f8      	str	r0, [r7, #12]
 800592e:	60b9      	str	r1, [r7, #8]
 8005930:	607a      	str	r2, [r7, #4]
 8005932:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	f893 3020 	ldrb.w	r3, [r3, #32]
 800593a:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800593c:	7dfb      	ldrb	r3, [r7, #23]
 800593e:	2b01      	cmp	r3, #1
 8005940:	d003      	beq.n	800594a <HAL_CAN_GetRxMessage+0x24>
 8005942:	7dfb      	ldrb	r3, [r7, #23]
 8005944:	2b02      	cmp	r3, #2
 8005946:	f040 8103 	bne.w	8005b50 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d10e      	bne.n	800596e <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	68db      	ldr	r3, [r3, #12]
 8005956:	f003 0303 	and.w	r3, r3, #3
 800595a:	2b00      	cmp	r3, #0
 800595c:	d116      	bne.n	800598c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005962:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800596a:	2301      	movs	r3, #1
 800596c:	e0f7      	b.n	8005b5e <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	691b      	ldr	r3, [r3, #16]
 8005974:	f003 0303 	and.w	r3, r3, #3
 8005978:	2b00      	cmp	r3, #0
 800597a:	d107      	bne.n	800598c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005980:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8005988:	2301      	movs	r3, #1
 800598a:	e0e8      	b.n	8005b5e <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681a      	ldr	r2, [r3, #0]
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	331b      	adds	r3, #27
 8005994:	011b      	lsls	r3, r3, #4
 8005996:	4413      	add	r3, r2
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f003 0204 	and.w	r2, r3, #4
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	689b      	ldr	r3, [r3, #8]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d10c      	bne.n	80059c4 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681a      	ldr	r2, [r3, #0]
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	331b      	adds	r3, #27
 80059b2:	011b      	lsls	r3, r3, #4
 80059b4:	4413      	add	r3, r2
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	0d5b      	lsrs	r3, r3, #21
 80059ba:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	601a      	str	r2, [r3, #0]
 80059c2:	e00b      	b.n	80059dc <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681a      	ldr	r2, [r3, #0]
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	331b      	adds	r3, #27
 80059cc:	011b      	lsls	r3, r3, #4
 80059ce:	4413      	add	r3, r2
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	08db      	lsrs	r3, r3, #3
 80059d4:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681a      	ldr	r2, [r3, #0]
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	331b      	adds	r3, #27
 80059e4:	011b      	lsls	r3, r3, #4
 80059e6:	4413      	add	r3, r2
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f003 0202 	and.w	r2, r3, #2
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681a      	ldr	r2, [r3, #0]
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	331b      	adds	r3, #27
 80059fa:	011b      	lsls	r3, r3, #4
 80059fc:	4413      	add	r3, r2
 80059fe:	3304      	adds	r3, #4
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f003 0308 	and.w	r3, r3, #8
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d003      	beq.n	8005a12 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2208      	movs	r2, #8
 8005a0e:	611a      	str	r2, [r3, #16]
 8005a10:	e00b      	b.n	8005a2a <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681a      	ldr	r2, [r3, #0]
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	331b      	adds	r3, #27
 8005a1a:	011b      	lsls	r3, r3, #4
 8005a1c:	4413      	add	r3, r2
 8005a1e:	3304      	adds	r3, #4
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f003 020f 	and.w	r2, r3, #15
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681a      	ldr	r2, [r3, #0]
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	331b      	adds	r3, #27
 8005a32:	011b      	lsls	r3, r3, #4
 8005a34:	4413      	add	r3, r2
 8005a36:	3304      	adds	r3, #4
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	0a1b      	lsrs	r3, r3, #8
 8005a3c:	b2da      	uxtb	r2, r3
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681a      	ldr	r2, [r3, #0]
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	331b      	adds	r3, #27
 8005a4a:	011b      	lsls	r3, r3, #4
 8005a4c:	4413      	add	r3, r2
 8005a4e:	3304      	adds	r3, #4
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	0c1b      	lsrs	r3, r3, #16
 8005a54:	b29a      	uxth	r2, r3
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681a      	ldr	r2, [r3, #0]
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	011b      	lsls	r3, r3, #4
 8005a62:	4413      	add	r3, r2
 8005a64:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	b2da      	uxtb	r2, r3
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681a      	ldr	r2, [r3, #0]
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	011b      	lsls	r3, r3, #4
 8005a78:	4413      	add	r3, r2
 8005a7a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	0a1a      	lsrs	r2, r3, #8
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	3301      	adds	r3, #1
 8005a86:	b2d2      	uxtb	r2, r2
 8005a88:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681a      	ldr	r2, [r3, #0]
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	011b      	lsls	r3, r3, #4
 8005a92:	4413      	add	r3, r2
 8005a94:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	0c1a      	lsrs	r2, r3, #16
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	3302      	adds	r3, #2
 8005aa0:	b2d2      	uxtb	r2, r2
 8005aa2:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681a      	ldr	r2, [r3, #0]
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	011b      	lsls	r3, r3, #4
 8005aac:	4413      	add	r3, r2
 8005aae:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	0e1a      	lsrs	r2, r3, #24
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	3303      	adds	r3, #3
 8005aba:	b2d2      	uxtb	r2, r2
 8005abc:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681a      	ldr	r2, [r3, #0]
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	011b      	lsls	r3, r3, #4
 8005ac6:	4413      	add	r3, r2
 8005ac8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005acc:	681a      	ldr	r2, [r3, #0]
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	3304      	adds	r3, #4
 8005ad2:	b2d2      	uxtb	r2, r2
 8005ad4:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681a      	ldr	r2, [r3, #0]
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	011b      	lsls	r3, r3, #4
 8005ade:	4413      	add	r3, r2
 8005ae0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	0a1a      	lsrs	r2, r3, #8
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	3305      	adds	r3, #5
 8005aec:	b2d2      	uxtb	r2, r2
 8005aee:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681a      	ldr	r2, [r3, #0]
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	011b      	lsls	r3, r3, #4
 8005af8:	4413      	add	r3, r2
 8005afa:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	0c1a      	lsrs	r2, r3, #16
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	3306      	adds	r3, #6
 8005b06:	b2d2      	uxtb	r2, r2
 8005b08:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681a      	ldr	r2, [r3, #0]
 8005b0e:	68bb      	ldr	r3, [r7, #8]
 8005b10:	011b      	lsls	r3, r3, #4
 8005b12:	4413      	add	r3, r2
 8005b14:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	0e1a      	lsrs	r2, r3, #24
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	3307      	adds	r3, #7
 8005b20:	b2d2      	uxtb	r2, r2
 8005b22:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d108      	bne.n	8005b3c <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	68da      	ldr	r2, [r3, #12]
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f042 0220 	orr.w	r2, r2, #32
 8005b38:	60da      	str	r2, [r3, #12]
 8005b3a:	e007      	b.n	8005b4c <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	691a      	ldr	r2, [r3, #16]
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f042 0220 	orr.w	r2, r2, #32
 8005b4a:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	e006      	b.n	8005b5e <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b54:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005b5c:	2301      	movs	r3, #1
  }
}
 8005b5e:	4618      	mov	r0, r3
 8005b60:	371c      	adds	r7, #28
 8005b62:	46bd      	mov	sp, r7
 8005b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b68:	4770      	bx	lr

08005b6a <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8005b6a:	b480      	push	{r7}
 8005b6c:	b085      	sub	sp, #20
 8005b6e:	af00      	add	r7, sp, #0
 8005b70:	6078      	str	r0, [r7, #4]
 8005b72:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005b7a:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8005b7c:	7bfb      	ldrb	r3, [r7, #15]
 8005b7e:	2b01      	cmp	r3, #1
 8005b80:	d002      	beq.n	8005b88 <HAL_CAN_ActivateNotification+0x1e>
 8005b82:	7bfb      	ldrb	r3, [r7, #15]
 8005b84:	2b02      	cmp	r3, #2
 8005b86:	d109      	bne.n	8005b9c <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	6959      	ldr	r1, [r3, #20]
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	683a      	ldr	r2, [r7, #0]
 8005b94:	430a      	orrs	r2, r1
 8005b96:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8005b98:	2300      	movs	r3, #0
 8005b9a:	e006      	b.n	8005baa <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005ba8:	2301      	movs	r3, #1
  }
}
 8005baa:	4618      	mov	r0, r3
 8005bac:	3714      	adds	r7, #20
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb4:	4770      	bx	lr

08005bb6 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8005bb6:	b580      	push	{r7, lr}
 8005bb8:	b08a      	sub	sp, #40	; 0x28
 8005bba:	af00      	add	r7, sp, #0
 8005bbc:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	695b      	ldr	r3, [r3, #20]
 8005bc8:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	685b      	ldr	r3, [r3, #4]
 8005bd0:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	689b      	ldr	r3, [r3, #8]
 8005bd8:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	68db      	ldr	r3, [r3, #12]
 8005be0:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	691b      	ldr	r3, [r3, #16]
 8005be8:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	699b      	ldr	r3, [r3, #24]
 8005bf0:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8005bf2:	6a3b      	ldr	r3, [r7, #32]
 8005bf4:	f003 0301 	and.w	r3, r3, #1
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d07c      	beq.n	8005cf6 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8005bfc:	69bb      	ldr	r3, [r7, #24]
 8005bfe:	f003 0301 	and.w	r3, r3, #1
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d023      	beq.n	8005c4e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	2201      	movs	r2, #1
 8005c0c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8005c0e:	69bb      	ldr	r3, [r7, #24]
 8005c10:	f003 0302 	and.w	r3, r3, #2
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d003      	beq.n	8005c20 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8005c18:	6878      	ldr	r0, [r7, #4]
 8005c1a:	f7fd fbf7 	bl	800340c <HAL_CAN_TxMailbox0CompleteCallback>
 8005c1e:	e016      	b.n	8005c4e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8005c20:	69bb      	ldr	r3, [r7, #24]
 8005c22:	f003 0304 	and.w	r3, r3, #4
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d004      	beq.n	8005c34 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8005c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c2c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005c30:	627b      	str	r3, [r7, #36]	; 0x24
 8005c32:	e00c      	b.n	8005c4e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8005c34:	69bb      	ldr	r3, [r7, #24]
 8005c36:	f003 0308 	and.w	r3, r3, #8
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d004      	beq.n	8005c48 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8005c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c40:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005c44:	627b      	str	r3, [r7, #36]	; 0x24
 8005c46:	e002      	b.n	8005c4e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8005c48:	6878      	ldr	r0, [r7, #4]
 8005c4a:	f000 f96b 	bl	8005f24 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8005c4e:	69bb      	ldr	r3, [r7, #24]
 8005c50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d024      	beq.n	8005ca2 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005c60:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8005c62:	69bb      	ldr	r3, [r7, #24]
 8005c64:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d003      	beq.n	8005c74 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8005c6c:	6878      	ldr	r0, [r7, #4]
 8005c6e:	f7fd fbe1 	bl	8003434 <HAL_CAN_TxMailbox1CompleteCallback>
 8005c72:	e016      	b.n	8005ca2 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8005c74:	69bb      	ldr	r3, [r7, #24]
 8005c76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d004      	beq.n	8005c88 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8005c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c80:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005c84:	627b      	str	r3, [r7, #36]	; 0x24
 8005c86:	e00c      	b.n	8005ca2 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8005c88:	69bb      	ldr	r3, [r7, #24]
 8005c8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d004      	beq.n	8005c9c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8005c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005c98:	627b      	str	r3, [r7, #36]	; 0x24
 8005c9a:	e002      	b.n	8005ca2 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8005c9c:	6878      	ldr	r0, [r7, #4]
 8005c9e:	f000 f94b 	bl	8005f38 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8005ca2:	69bb      	ldr	r3, [r7, #24]
 8005ca4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d024      	beq.n	8005cf6 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005cb4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8005cb6:	69bb      	ldr	r3, [r7, #24]
 8005cb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d003      	beq.n	8005cc8 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8005cc0:	6878      	ldr	r0, [r7, #4]
 8005cc2:	f7fd fbcb 	bl	800345c <HAL_CAN_TxMailbox2CompleteCallback>
 8005cc6:	e016      	b.n	8005cf6 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8005cc8:	69bb      	ldr	r3, [r7, #24]
 8005cca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d004      	beq.n	8005cdc <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8005cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cd8:	627b      	str	r3, [r7, #36]	; 0x24
 8005cda:	e00c      	b.n	8005cf6 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8005cdc:	69bb      	ldr	r3, [r7, #24]
 8005cde:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d004      	beq.n	8005cf0 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8005ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005cec:	627b      	str	r3, [r7, #36]	; 0x24
 8005cee:	e002      	b.n	8005cf6 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8005cf0:	6878      	ldr	r0, [r7, #4]
 8005cf2:	f000 f92b 	bl	8005f4c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8005cf6:	6a3b      	ldr	r3, [r7, #32]
 8005cf8:	f003 0308 	and.w	r3, r3, #8
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d00c      	beq.n	8005d1a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8005d00:	697b      	ldr	r3, [r7, #20]
 8005d02:	f003 0310 	and.w	r3, r3, #16
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d007      	beq.n	8005d1a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8005d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d0c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005d10:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	2210      	movs	r2, #16
 8005d18:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8005d1a:	6a3b      	ldr	r3, [r7, #32]
 8005d1c:	f003 0304 	and.w	r3, r3, #4
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d00b      	beq.n	8005d3c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	f003 0308 	and.w	r3, r3, #8
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d006      	beq.n	8005d3c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	2208      	movs	r2, #8
 8005d34:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8005d36:	6878      	ldr	r0, [r7, #4]
 8005d38:	f000 f912 	bl	8005f60 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8005d3c:	6a3b      	ldr	r3, [r7, #32]
 8005d3e:	f003 0302 	and.w	r3, r3, #2
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d009      	beq.n	8005d5a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	68db      	ldr	r3, [r3, #12]
 8005d4c:	f003 0303 	and.w	r3, r3, #3
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d002      	beq.n	8005d5a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8005d54:	6878      	ldr	r0, [r7, #4]
 8005d56:	f7fd fbab 	bl	80034b0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8005d5a:	6a3b      	ldr	r3, [r7, #32]
 8005d5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d00c      	beq.n	8005d7e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8005d64:	693b      	ldr	r3, [r7, #16]
 8005d66:	f003 0310 	and.w	r3, r3, #16
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d007      	beq.n	8005d7e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8005d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d70:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005d74:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	2210      	movs	r2, #16
 8005d7c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8005d7e:	6a3b      	ldr	r3, [r7, #32]
 8005d80:	f003 0320 	and.w	r3, r3, #32
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d00b      	beq.n	8005da0 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8005d88:	693b      	ldr	r3, [r7, #16]
 8005d8a:	f003 0308 	and.w	r3, r3, #8
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d006      	beq.n	8005da0 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	2208      	movs	r2, #8
 8005d98:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8005d9a:	6878      	ldr	r0, [r7, #4]
 8005d9c:	f000 f8f4 	bl	8005f88 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8005da0:	6a3b      	ldr	r3, [r7, #32]
 8005da2:	f003 0310 	and.w	r3, r3, #16
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d009      	beq.n	8005dbe <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	691b      	ldr	r3, [r3, #16]
 8005db0:	f003 0303 	and.w	r3, r3, #3
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d002      	beq.n	8005dbe <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8005db8:	6878      	ldr	r0, [r7, #4]
 8005dba:	f000 f8db 	bl	8005f74 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8005dbe:	6a3b      	ldr	r3, [r7, #32]
 8005dc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d00b      	beq.n	8005de0 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8005dc8:	69fb      	ldr	r3, [r7, #28]
 8005dca:	f003 0310 	and.w	r3, r3, #16
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d006      	beq.n	8005de0 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	2210      	movs	r2, #16
 8005dd8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	f000 f8de 	bl	8005f9c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8005de0:	6a3b      	ldr	r3, [r7, #32]
 8005de2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d00b      	beq.n	8005e02 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8005dea:	69fb      	ldr	r3, [r7, #28]
 8005dec:	f003 0308 	and.w	r3, r3, #8
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d006      	beq.n	8005e02 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	2208      	movs	r2, #8
 8005dfa:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8005dfc:	6878      	ldr	r0, [r7, #4]
 8005dfe:	f000 f8d7 	bl	8005fb0 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8005e02:	6a3b      	ldr	r3, [r7, #32]
 8005e04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d07b      	beq.n	8005f04 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8005e0c:	69fb      	ldr	r3, [r7, #28]
 8005e0e:	f003 0304 	and.w	r3, r3, #4
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d072      	beq.n	8005efc <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005e16:	6a3b      	ldr	r3, [r7, #32]
 8005e18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d008      	beq.n	8005e32 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d003      	beq.n	8005e32 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8005e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e2c:	f043 0301 	orr.w	r3, r3, #1
 8005e30:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005e32:	6a3b      	ldr	r3, [r7, #32]
 8005e34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d008      	beq.n	8005e4e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d003      	beq.n	8005e4e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8005e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e48:	f043 0302 	orr.w	r3, r3, #2
 8005e4c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005e4e:	6a3b      	ldr	r3, [r7, #32]
 8005e50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d008      	beq.n	8005e6a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d003      	beq.n	8005e6a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8005e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e64:	f043 0304 	orr.w	r3, r3, #4
 8005e68:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005e6a:	6a3b      	ldr	r3, [r7, #32]
 8005e6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d043      	beq.n	8005efc <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d03e      	beq.n	8005efc <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005e84:	2b60      	cmp	r3, #96	; 0x60
 8005e86:	d02b      	beq.n	8005ee0 <HAL_CAN_IRQHandler+0x32a>
 8005e88:	2b60      	cmp	r3, #96	; 0x60
 8005e8a:	d82e      	bhi.n	8005eea <HAL_CAN_IRQHandler+0x334>
 8005e8c:	2b50      	cmp	r3, #80	; 0x50
 8005e8e:	d022      	beq.n	8005ed6 <HAL_CAN_IRQHandler+0x320>
 8005e90:	2b50      	cmp	r3, #80	; 0x50
 8005e92:	d82a      	bhi.n	8005eea <HAL_CAN_IRQHandler+0x334>
 8005e94:	2b40      	cmp	r3, #64	; 0x40
 8005e96:	d019      	beq.n	8005ecc <HAL_CAN_IRQHandler+0x316>
 8005e98:	2b40      	cmp	r3, #64	; 0x40
 8005e9a:	d826      	bhi.n	8005eea <HAL_CAN_IRQHandler+0x334>
 8005e9c:	2b30      	cmp	r3, #48	; 0x30
 8005e9e:	d010      	beq.n	8005ec2 <HAL_CAN_IRQHandler+0x30c>
 8005ea0:	2b30      	cmp	r3, #48	; 0x30
 8005ea2:	d822      	bhi.n	8005eea <HAL_CAN_IRQHandler+0x334>
 8005ea4:	2b10      	cmp	r3, #16
 8005ea6:	d002      	beq.n	8005eae <HAL_CAN_IRQHandler+0x2f8>
 8005ea8:	2b20      	cmp	r3, #32
 8005eaa:	d005      	beq.n	8005eb8 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8005eac:	e01d      	b.n	8005eea <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8005eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb0:	f043 0308 	orr.w	r3, r3, #8
 8005eb4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005eb6:	e019      	b.n	8005eec <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8005eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eba:	f043 0310 	orr.w	r3, r3, #16
 8005ebe:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005ec0:	e014      	b.n	8005eec <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8005ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec4:	f043 0320 	orr.w	r3, r3, #32
 8005ec8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005eca:	e00f      	b.n	8005eec <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8005ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ece:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ed2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005ed4:	e00a      	b.n	8005eec <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8005ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005edc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005ede:	e005      	b.n	8005eec <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8005ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ee6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005ee8:	e000      	b.n	8005eec <HAL_CAN_IRQHandler+0x336>
            break;
 8005eea:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	699a      	ldr	r2, [r3, #24]
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005efa:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	2204      	movs	r2, #4
 8005f02:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8005f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d008      	beq.n	8005f1c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f10:	431a      	orrs	r2, r3
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8005f16:	6878      	ldr	r0, [r7, #4]
 8005f18:	f7fd fab4 	bl	8003484 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8005f1c:	bf00      	nop
 8005f1e:	3728      	adds	r7, #40	; 0x28
 8005f20:	46bd      	mov	sp, r7
 8005f22:	bd80      	pop	{r7, pc}

08005f24 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005f24:	b480      	push	{r7}
 8005f26:	b083      	sub	sp, #12
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8005f2c:	bf00      	nop
 8005f2e:	370c      	adds	r7, #12
 8005f30:	46bd      	mov	sp, r7
 8005f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f36:	4770      	bx	lr

08005f38 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b083      	sub	sp, #12
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8005f40:	bf00      	nop
 8005f42:	370c      	adds	r7, #12
 8005f44:	46bd      	mov	sp, r7
 8005f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4a:	4770      	bx	lr

08005f4c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b083      	sub	sp, #12
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8005f54:	bf00      	nop
 8005f56:	370c      	adds	r7, #12
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5e:	4770      	bx	lr

08005f60 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8005f60:	b480      	push	{r7}
 8005f62:	b083      	sub	sp, #12
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8005f68:	bf00      	nop
 8005f6a:	370c      	adds	r7, #12
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f72:	4770      	bx	lr

08005f74 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8005f74:	b480      	push	{r7}
 8005f76:	b083      	sub	sp, #12
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8005f7c:	bf00      	nop
 8005f7e:	370c      	adds	r7, #12
 8005f80:	46bd      	mov	sp, r7
 8005f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f86:	4770      	bx	lr

08005f88 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b083      	sub	sp, #12
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8005f90:	bf00      	nop
 8005f92:	370c      	adds	r7, #12
 8005f94:	46bd      	mov	sp, r7
 8005f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9a:	4770      	bx	lr

08005f9c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b083      	sub	sp, #12
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8005fa4:	bf00      	nop
 8005fa6:	370c      	adds	r7, #12
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fae:	4770      	bx	lr

08005fb0 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b083      	sub	sp, #12
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8005fb8:	bf00      	nop
 8005fba:	370c      	adds	r7, #12
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc2:	4770      	bx	lr

08005fc4 <HAL_CAN_ResetError>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ResetError(CAN_HandleTypeDef *hcan)
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b085      	sub	sp, #20
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005fcc:	2300      	movs	r3, #0
 8005fce:	73fb      	strb	r3, [r7, #15]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005fd6:	73bb      	strb	r3, [r7, #14]

  if ((state == HAL_CAN_STATE_READY) ||
 8005fd8:	7bbb      	ldrb	r3, [r7, #14]
 8005fda:	2b01      	cmp	r3, #1
 8005fdc:	d002      	beq.n	8005fe4 <HAL_CAN_ResetError+0x20>
 8005fde:	7bbb      	ldrb	r3, [r7, #14]
 8005fe0:	2b02      	cmp	r3, #2
 8005fe2:	d103      	bne.n	8005fec <HAL_CAN_ResetError+0x28>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Reset CAN error code */
    hcan->ErrorCode = 0U;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	625a      	str	r2, [r3, #36]	; 0x24
 8005fea:	e007      	b.n	8005ffc <HAL_CAN_ResetError+0x38>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ff0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	625a      	str	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the status */
  return status;
 8005ffc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ffe:	4618      	mov	r0, r3
 8006000:	3714      	adds	r7, #20
 8006002:	46bd      	mov	sp, r7
 8006004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006008:	4770      	bx	lr
	...

0800600c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800600c:	b480      	push	{r7}
 800600e:	b085      	sub	sp, #20
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	f003 0307 	and.w	r3, r3, #7
 800601a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800601c:	4b0c      	ldr	r3, [pc, #48]	; (8006050 <__NVIC_SetPriorityGrouping+0x44>)
 800601e:	68db      	ldr	r3, [r3, #12]
 8006020:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006022:	68ba      	ldr	r2, [r7, #8]
 8006024:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006028:	4013      	ands	r3, r2
 800602a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006034:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006038:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800603c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800603e:	4a04      	ldr	r2, [pc, #16]	; (8006050 <__NVIC_SetPriorityGrouping+0x44>)
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	60d3      	str	r3, [r2, #12]
}
 8006044:	bf00      	nop
 8006046:	3714      	adds	r7, #20
 8006048:	46bd      	mov	sp, r7
 800604a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604e:	4770      	bx	lr
 8006050:	e000ed00 	.word	0xe000ed00

08006054 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006054:	b480      	push	{r7}
 8006056:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006058:	4b04      	ldr	r3, [pc, #16]	; (800606c <__NVIC_GetPriorityGrouping+0x18>)
 800605a:	68db      	ldr	r3, [r3, #12]
 800605c:	0a1b      	lsrs	r3, r3, #8
 800605e:	f003 0307 	and.w	r3, r3, #7
}
 8006062:	4618      	mov	r0, r3
 8006064:	46bd      	mov	sp, r7
 8006066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606a:	4770      	bx	lr
 800606c:	e000ed00 	.word	0xe000ed00

08006070 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006070:	b480      	push	{r7}
 8006072:	b083      	sub	sp, #12
 8006074:	af00      	add	r7, sp, #0
 8006076:	4603      	mov	r3, r0
 8006078:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800607a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800607e:	2b00      	cmp	r3, #0
 8006080:	db0b      	blt.n	800609a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006082:	79fb      	ldrb	r3, [r7, #7]
 8006084:	f003 021f 	and.w	r2, r3, #31
 8006088:	4907      	ldr	r1, [pc, #28]	; (80060a8 <__NVIC_EnableIRQ+0x38>)
 800608a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800608e:	095b      	lsrs	r3, r3, #5
 8006090:	2001      	movs	r0, #1
 8006092:	fa00 f202 	lsl.w	r2, r0, r2
 8006096:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800609a:	bf00      	nop
 800609c:	370c      	adds	r7, #12
 800609e:	46bd      	mov	sp, r7
 80060a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a4:	4770      	bx	lr
 80060a6:	bf00      	nop
 80060a8:	e000e100 	.word	0xe000e100

080060ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80060ac:	b480      	push	{r7}
 80060ae:	b083      	sub	sp, #12
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	4603      	mov	r3, r0
 80060b4:	6039      	str	r1, [r7, #0]
 80060b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80060b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	db0a      	blt.n	80060d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	b2da      	uxtb	r2, r3
 80060c4:	490c      	ldr	r1, [pc, #48]	; (80060f8 <__NVIC_SetPriority+0x4c>)
 80060c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060ca:	0112      	lsls	r2, r2, #4
 80060cc:	b2d2      	uxtb	r2, r2
 80060ce:	440b      	add	r3, r1
 80060d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80060d4:	e00a      	b.n	80060ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	b2da      	uxtb	r2, r3
 80060da:	4908      	ldr	r1, [pc, #32]	; (80060fc <__NVIC_SetPriority+0x50>)
 80060dc:	79fb      	ldrb	r3, [r7, #7]
 80060de:	f003 030f 	and.w	r3, r3, #15
 80060e2:	3b04      	subs	r3, #4
 80060e4:	0112      	lsls	r2, r2, #4
 80060e6:	b2d2      	uxtb	r2, r2
 80060e8:	440b      	add	r3, r1
 80060ea:	761a      	strb	r2, [r3, #24]
}
 80060ec:	bf00      	nop
 80060ee:	370c      	adds	r7, #12
 80060f0:	46bd      	mov	sp, r7
 80060f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f6:	4770      	bx	lr
 80060f8:	e000e100 	.word	0xe000e100
 80060fc:	e000ed00 	.word	0xe000ed00

08006100 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006100:	b480      	push	{r7}
 8006102:	b089      	sub	sp, #36	; 0x24
 8006104:	af00      	add	r7, sp, #0
 8006106:	60f8      	str	r0, [r7, #12]
 8006108:	60b9      	str	r1, [r7, #8]
 800610a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	f003 0307 	and.w	r3, r3, #7
 8006112:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006114:	69fb      	ldr	r3, [r7, #28]
 8006116:	f1c3 0307 	rsb	r3, r3, #7
 800611a:	2b04      	cmp	r3, #4
 800611c:	bf28      	it	cs
 800611e:	2304      	movcs	r3, #4
 8006120:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006122:	69fb      	ldr	r3, [r7, #28]
 8006124:	3304      	adds	r3, #4
 8006126:	2b06      	cmp	r3, #6
 8006128:	d902      	bls.n	8006130 <NVIC_EncodePriority+0x30>
 800612a:	69fb      	ldr	r3, [r7, #28]
 800612c:	3b03      	subs	r3, #3
 800612e:	e000      	b.n	8006132 <NVIC_EncodePriority+0x32>
 8006130:	2300      	movs	r3, #0
 8006132:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006134:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006138:	69bb      	ldr	r3, [r7, #24]
 800613a:	fa02 f303 	lsl.w	r3, r2, r3
 800613e:	43da      	mvns	r2, r3
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	401a      	ands	r2, r3
 8006144:	697b      	ldr	r3, [r7, #20]
 8006146:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006148:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800614c:	697b      	ldr	r3, [r7, #20]
 800614e:	fa01 f303 	lsl.w	r3, r1, r3
 8006152:	43d9      	mvns	r1, r3
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006158:	4313      	orrs	r3, r2
         );
}
 800615a:	4618      	mov	r0, r3
 800615c:	3724      	adds	r7, #36	; 0x24
 800615e:	46bd      	mov	sp, r7
 8006160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006164:	4770      	bx	lr

08006166 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006166:	b580      	push	{r7, lr}
 8006168:	b082      	sub	sp, #8
 800616a:	af00      	add	r7, sp, #0
 800616c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	f7ff ff4c 	bl	800600c <__NVIC_SetPriorityGrouping>
}
 8006174:	bf00      	nop
 8006176:	3708      	adds	r7, #8
 8006178:	46bd      	mov	sp, r7
 800617a:	bd80      	pop	{r7, pc}

0800617c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800617c:	b580      	push	{r7, lr}
 800617e:	b086      	sub	sp, #24
 8006180:	af00      	add	r7, sp, #0
 8006182:	4603      	mov	r3, r0
 8006184:	60b9      	str	r1, [r7, #8]
 8006186:	607a      	str	r2, [r7, #4]
 8006188:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800618a:	2300      	movs	r3, #0
 800618c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800618e:	f7ff ff61 	bl	8006054 <__NVIC_GetPriorityGrouping>
 8006192:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006194:	687a      	ldr	r2, [r7, #4]
 8006196:	68b9      	ldr	r1, [r7, #8]
 8006198:	6978      	ldr	r0, [r7, #20]
 800619a:	f7ff ffb1 	bl	8006100 <NVIC_EncodePriority>
 800619e:	4602      	mov	r2, r0
 80061a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80061a4:	4611      	mov	r1, r2
 80061a6:	4618      	mov	r0, r3
 80061a8:	f7ff ff80 	bl	80060ac <__NVIC_SetPriority>
}
 80061ac:	bf00      	nop
 80061ae:	3718      	adds	r7, #24
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bd80      	pop	{r7, pc}

080061b4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b082      	sub	sp, #8
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	4603      	mov	r3, r0
 80061bc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80061be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061c2:	4618      	mov	r0, r3
 80061c4:	f7ff ff54 	bl	8006070 <__NVIC_EnableIRQ>
}
 80061c8:	bf00      	nop
 80061ca:	3708      	adds	r7, #8
 80061cc:	46bd      	mov	sp, r7
 80061ce:	bd80      	pop	{r7, pc}

080061d0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b086      	sub	sp, #24
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80061d8:	2300      	movs	r3, #0
 80061da:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80061dc:	f7ff f84e 	bl	800527c <HAL_GetTick>
 80061e0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d101      	bne.n	80061ec <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80061e8:	2301      	movs	r3, #1
 80061ea:	e099      	b.n	8006320 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2202      	movs	r2, #2
 80061f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2200      	movs	r2, #0
 80061f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	681a      	ldr	r2, [r3, #0]
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f022 0201 	bic.w	r2, r2, #1
 800620a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800620c:	e00f      	b.n	800622e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800620e:	f7ff f835 	bl	800527c <HAL_GetTick>
 8006212:	4602      	mov	r2, r0
 8006214:	693b      	ldr	r3, [r7, #16]
 8006216:	1ad3      	subs	r3, r2, r3
 8006218:	2b05      	cmp	r3, #5
 800621a:	d908      	bls.n	800622e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2220      	movs	r2, #32
 8006220:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2203      	movs	r2, #3
 8006226:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800622a:	2303      	movs	r3, #3
 800622c:	e078      	b.n	8006320 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f003 0301 	and.w	r3, r3, #1
 8006238:	2b00      	cmp	r3, #0
 800623a:	d1e8      	bne.n	800620e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006244:	697a      	ldr	r2, [r7, #20]
 8006246:	4b38      	ldr	r3, [pc, #224]	; (8006328 <HAL_DMA_Init+0x158>)
 8006248:	4013      	ands	r3, r2
 800624a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	685a      	ldr	r2, [r3, #4]
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	689b      	ldr	r3, [r3, #8]
 8006254:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800625a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	691b      	ldr	r3, [r3, #16]
 8006260:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006266:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	699b      	ldr	r3, [r3, #24]
 800626c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006272:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6a1b      	ldr	r3, [r3, #32]
 8006278:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800627a:	697a      	ldr	r2, [r7, #20]
 800627c:	4313      	orrs	r3, r2
 800627e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006284:	2b04      	cmp	r3, #4
 8006286:	d107      	bne.n	8006298 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006290:	4313      	orrs	r3, r2
 8006292:	697a      	ldr	r2, [r7, #20]
 8006294:	4313      	orrs	r3, r2
 8006296:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	697a      	ldr	r2, [r7, #20]
 800629e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	695b      	ldr	r3, [r3, #20]
 80062a6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80062a8:	697b      	ldr	r3, [r7, #20]
 80062aa:	f023 0307 	bic.w	r3, r3, #7
 80062ae:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062b4:	697a      	ldr	r2, [r7, #20]
 80062b6:	4313      	orrs	r3, r2
 80062b8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062be:	2b04      	cmp	r3, #4
 80062c0:	d117      	bne.n	80062f2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062c6:	697a      	ldr	r2, [r7, #20]
 80062c8:	4313      	orrs	r3, r2
 80062ca:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d00e      	beq.n	80062f2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80062d4:	6878      	ldr	r0, [r7, #4]
 80062d6:	f000 fb01 	bl	80068dc <DMA_CheckFifoParam>
 80062da:	4603      	mov	r3, r0
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d008      	beq.n	80062f2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2240      	movs	r2, #64	; 0x40
 80062e4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2201      	movs	r2, #1
 80062ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80062ee:	2301      	movs	r3, #1
 80062f0:	e016      	b.n	8006320 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	697a      	ldr	r2, [r7, #20]
 80062f8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80062fa:	6878      	ldr	r0, [r7, #4]
 80062fc:	f000 fab8 	bl	8006870 <DMA_CalcBaseAndBitshift>
 8006300:	4603      	mov	r3, r0
 8006302:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006308:	223f      	movs	r2, #63	; 0x3f
 800630a:	409a      	lsls	r2, r3
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2200      	movs	r2, #0
 8006314:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2201      	movs	r2, #1
 800631a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800631e:	2300      	movs	r3, #0
}
 8006320:	4618      	mov	r0, r3
 8006322:	3718      	adds	r7, #24
 8006324:	46bd      	mov	sp, r7
 8006326:	bd80      	pop	{r7, pc}
 8006328:	f010803f 	.word	0xf010803f

0800632c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b086      	sub	sp, #24
 8006330:	af00      	add	r7, sp, #0
 8006332:	60f8      	str	r0, [r7, #12]
 8006334:	60b9      	str	r1, [r7, #8]
 8006336:	607a      	str	r2, [r7, #4]
 8006338:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800633a:	2300      	movs	r3, #0
 800633c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006342:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800634a:	2b01      	cmp	r3, #1
 800634c:	d101      	bne.n	8006352 <HAL_DMA_Start_IT+0x26>
 800634e:	2302      	movs	r3, #2
 8006350:	e040      	b.n	80063d4 <HAL_DMA_Start_IT+0xa8>
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	2201      	movs	r2, #1
 8006356:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006360:	b2db      	uxtb	r3, r3
 8006362:	2b01      	cmp	r3, #1
 8006364:	d12f      	bne.n	80063c6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	2202      	movs	r2, #2
 800636a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	2200      	movs	r2, #0
 8006372:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	687a      	ldr	r2, [r7, #4]
 8006378:	68b9      	ldr	r1, [r7, #8]
 800637a:	68f8      	ldr	r0, [r7, #12]
 800637c:	f000 fa4a 	bl	8006814 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006384:	223f      	movs	r2, #63	; 0x3f
 8006386:	409a      	lsls	r2, r3
 8006388:	693b      	ldr	r3, [r7, #16]
 800638a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	681a      	ldr	r2, [r3, #0]
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f042 0216 	orr.w	r2, r2, #22
 800639a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d007      	beq.n	80063b4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	681a      	ldr	r2, [r3, #0]
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f042 0208 	orr.w	r2, r2, #8
 80063b2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	681a      	ldr	r2, [r3, #0]
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f042 0201 	orr.w	r2, r2, #1
 80063c2:	601a      	str	r2, [r3, #0]
 80063c4:	e005      	b.n	80063d2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	2200      	movs	r2, #0
 80063ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80063ce:	2302      	movs	r3, #2
 80063d0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80063d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80063d4:	4618      	mov	r0, r3
 80063d6:	3718      	adds	r7, #24
 80063d8:	46bd      	mov	sp, r7
 80063da:	bd80      	pop	{r7, pc}

080063dc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b084      	sub	sp, #16
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063e8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80063ea:	f7fe ff47 	bl	800527c <HAL_GetTick>
 80063ee:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80063f6:	b2db      	uxtb	r3, r3
 80063f8:	2b02      	cmp	r3, #2
 80063fa:	d008      	beq.n	800640e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2280      	movs	r2, #128	; 0x80
 8006400:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2200      	movs	r2, #0
 8006406:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800640a:	2301      	movs	r3, #1
 800640c:	e052      	b.n	80064b4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	681a      	ldr	r2, [r3, #0]
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f022 0216 	bic.w	r2, r2, #22
 800641c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	695a      	ldr	r2, [r3, #20]
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800642c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006432:	2b00      	cmp	r3, #0
 8006434:	d103      	bne.n	800643e <HAL_DMA_Abort+0x62>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800643a:	2b00      	cmp	r3, #0
 800643c:	d007      	beq.n	800644e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	681a      	ldr	r2, [r3, #0]
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f022 0208 	bic.w	r2, r2, #8
 800644c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	681a      	ldr	r2, [r3, #0]
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f022 0201 	bic.w	r2, r2, #1
 800645c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800645e:	e013      	b.n	8006488 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006460:	f7fe ff0c 	bl	800527c <HAL_GetTick>
 8006464:	4602      	mov	r2, r0
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	1ad3      	subs	r3, r2, r3
 800646a:	2b05      	cmp	r3, #5
 800646c:	d90c      	bls.n	8006488 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2220      	movs	r2, #32
 8006472:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2203      	movs	r2, #3
 8006478:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2200      	movs	r2, #0
 8006480:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8006484:	2303      	movs	r3, #3
 8006486:	e015      	b.n	80064b4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f003 0301 	and.w	r3, r3, #1
 8006492:	2b00      	cmp	r3, #0
 8006494:	d1e4      	bne.n	8006460 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800649a:	223f      	movs	r2, #63	; 0x3f
 800649c:	409a      	lsls	r2, r3
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2201      	movs	r2, #1
 80064a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2200      	movs	r2, #0
 80064ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80064b2:	2300      	movs	r3, #0
}
 80064b4:	4618      	mov	r0, r3
 80064b6:	3710      	adds	r7, #16
 80064b8:	46bd      	mov	sp, r7
 80064ba:	bd80      	pop	{r7, pc}

080064bc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80064bc:	b480      	push	{r7}
 80064be:	b083      	sub	sp, #12
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80064ca:	b2db      	uxtb	r3, r3
 80064cc:	2b02      	cmp	r3, #2
 80064ce:	d004      	beq.n	80064da <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2280      	movs	r2, #128	; 0x80
 80064d4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80064d6:	2301      	movs	r3, #1
 80064d8:	e00c      	b.n	80064f4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2205      	movs	r2, #5
 80064de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	681a      	ldr	r2, [r3, #0]
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f022 0201 	bic.w	r2, r2, #1
 80064f0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80064f2:	2300      	movs	r3, #0
}
 80064f4:	4618      	mov	r0, r3
 80064f6:	370c      	adds	r7, #12
 80064f8:	46bd      	mov	sp, r7
 80064fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fe:	4770      	bx	lr

08006500 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b086      	sub	sp, #24
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8006508:	2300      	movs	r3, #0
 800650a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800650c:	4b8e      	ldr	r3, [pc, #568]	; (8006748 <HAL_DMA_IRQHandler+0x248>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4a8e      	ldr	r2, [pc, #568]	; (800674c <HAL_DMA_IRQHandler+0x24c>)
 8006512:	fba2 2303 	umull	r2, r3, r2, r3
 8006516:	0a9b      	lsrs	r3, r3, #10
 8006518:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800651e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006520:	693b      	ldr	r3, [r7, #16]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800652a:	2208      	movs	r2, #8
 800652c:	409a      	lsls	r2, r3
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	4013      	ands	r3, r2
 8006532:	2b00      	cmp	r3, #0
 8006534:	d01a      	beq.n	800656c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f003 0304 	and.w	r3, r3, #4
 8006540:	2b00      	cmp	r3, #0
 8006542:	d013      	beq.n	800656c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	681a      	ldr	r2, [r3, #0]
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f022 0204 	bic.w	r2, r2, #4
 8006552:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006558:	2208      	movs	r2, #8
 800655a:	409a      	lsls	r2, r3
 800655c:	693b      	ldr	r3, [r7, #16]
 800655e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006564:	f043 0201 	orr.w	r2, r3, #1
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006570:	2201      	movs	r2, #1
 8006572:	409a      	lsls	r2, r3
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	4013      	ands	r3, r2
 8006578:	2b00      	cmp	r3, #0
 800657a:	d012      	beq.n	80065a2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	695b      	ldr	r3, [r3, #20]
 8006582:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006586:	2b00      	cmp	r3, #0
 8006588:	d00b      	beq.n	80065a2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800658e:	2201      	movs	r2, #1
 8006590:	409a      	lsls	r2, r3
 8006592:	693b      	ldr	r3, [r7, #16]
 8006594:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800659a:	f043 0202 	orr.w	r2, r3, #2
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065a6:	2204      	movs	r2, #4
 80065a8:	409a      	lsls	r2, r3
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	4013      	ands	r3, r2
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d012      	beq.n	80065d8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f003 0302 	and.w	r3, r3, #2
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d00b      	beq.n	80065d8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065c4:	2204      	movs	r2, #4
 80065c6:	409a      	lsls	r2, r3
 80065c8:	693b      	ldr	r3, [r7, #16]
 80065ca:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065d0:	f043 0204 	orr.w	r2, r3, #4
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065dc:	2210      	movs	r2, #16
 80065de:	409a      	lsls	r2, r3
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	4013      	ands	r3, r2
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d043      	beq.n	8006670 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f003 0308 	and.w	r3, r3, #8
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d03c      	beq.n	8006670 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065fa:	2210      	movs	r2, #16
 80065fc:	409a      	lsls	r2, r3
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800660c:	2b00      	cmp	r3, #0
 800660e:	d018      	beq.n	8006642 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800661a:	2b00      	cmp	r3, #0
 800661c:	d108      	bne.n	8006630 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006622:	2b00      	cmp	r3, #0
 8006624:	d024      	beq.n	8006670 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	4798      	blx	r3
 800662e:	e01f      	b.n	8006670 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006634:	2b00      	cmp	r3, #0
 8006636:	d01b      	beq.n	8006670 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800663c:	6878      	ldr	r0, [r7, #4]
 800663e:	4798      	blx	r3
 8006640:	e016      	b.n	8006670 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800664c:	2b00      	cmp	r3, #0
 800664e:	d107      	bne.n	8006660 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	681a      	ldr	r2, [r3, #0]
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f022 0208 	bic.w	r2, r2, #8
 800665e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006664:	2b00      	cmp	r3, #0
 8006666:	d003      	beq.n	8006670 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006674:	2220      	movs	r2, #32
 8006676:	409a      	lsls	r2, r3
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	4013      	ands	r3, r2
 800667c:	2b00      	cmp	r3, #0
 800667e:	f000 808f 	beq.w	80067a0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f003 0310 	and.w	r3, r3, #16
 800668c:	2b00      	cmp	r3, #0
 800668e:	f000 8087 	beq.w	80067a0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006696:	2220      	movs	r2, #32
 8006698:	409a      	lsls	r2, r3
 800669a:	693b      	ldr	r3, [r7, #16]
 800669c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80066a4:	b2db      	uxtb	r3, r3
 80066a6:	2b05      	cmp	r3, #5
 80066a8:	d136      	bne.n	8006718 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	681a      	ldr	r2, [r3, #0]
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f022 0216 	bic.w	r2, r2, #22
 80066b8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	695a      	ldr	r2, [r3, #20]
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80066c8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d103      	bne.n	80066da <HAL_DMA_IRQHandler+0x1da>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d007      	beq.n	80066ea <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	681a      	ldr	r2, [r3, #0]
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f022 0208 	bic.w	r2, r2, #8
 80066e8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066ee:	223f      	movs	r2, #63	; 0x3f
 80066f0:	409a      	lsls	r2, r3
 80066f2:	693b      	ldr	r3, [r7, #16]
 80066f4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2201      	movs	r2, #1
 80066fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2200      	movs	r2, #0
 8006702:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800670a:	2b00      	cmp	r3, #0
 800670c:	d07e      	beq.n	800680c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	4798      	blx	r3
        }
        return;
 8006716:	e079      	b.n	800680c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006722:	2b00      	cmp	r3, #0
 8006724:	d01d      	beq.n	8006762 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006730:	2b00      	cmp	r3, #0
 8006732:	d10d      	bne.n	8006750 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006738:	2b00      	cmp	r3, #0
 800673a:	d031      	beq.n	80067a0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006740:	6878      	ldr	r0, [r7, #4]
 8006742:	4798      	blx	r3
 8006744:	e02c      	b.n	80067a0 <HAL_DMA_IRQHandler+0x2a0>
 8006746:	bf00      	nop
 8006748:	20000004 	.word	0x20000004
 800674c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006754:	2b00      	cmp	r3, #0
 8006756:	d023      	beq.n	80067a0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800675c:	6878      	ldr	r0, [r7, #4]
 800675e:	4798      	blx	r3
 8006760:	e01e      	b.n	80067a0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800676c:	2b00      	cmp	r3, #0
 800676e:	d10f      	bne.n	8006790 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	681a      	ldr	r2, [r3, #0]
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f022 0210 	bic.w	r2, r2, #16
 800677e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2201      	movs	r2, #1
 8006784:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2200      	movs	r2, #0
 800678c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006794:	2b00      	cmp	r3, #0
 8006796:	d003      	beq.n	80067a0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800679c:	6878      	ldr	r0, [r7, #4]
 800679e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d032      	beq.n	800680e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067ac:	f003 0301 	and.w	r3, r3, #1
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d022      	beq.n	80067fa <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2205      	movs	r2, #5
 80067b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	681a      	ldr	r2, [r3, #0]
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f022 0201 	bic.w	r2, r2, #1
 80067ca:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	3301      	adds	r3, #1
 80067d0:	60bb      	str	r3, [r7, #8]
 80067d2:	697a      	ldr	r2, [r7, #20]
 80067d4:	429a      	cmp	r2, r3
 80067d6:	d307      	bcc.n	80067e8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f003 0301 	and.w	r3, r3, #1
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d1f2      	bne.n	80067cc <HAL_DMA_IRQHandler+0x2cc>
 80067e6:	e000      	b.n	80067ea <HAL_DMA_IRQHandler+0x2ea>
          break;
 80067e8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2201      	movs	r2, #1
 80067ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2200      	movs	r2, #0
 80067f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d005      	beq.n	800680e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006806:	6878      	ldr	r0, [r7, #4]
 8006808:	4798      	blx	r3
 800680a:	e000      	b.n	800680e <HAL_DMA_IRQHandler+0x30e>
        return;
 800680c:	bf00      	nop
    }
  }
}
 800680e:	3718      	adds	r7, #24
 8006810:	46bd      	mov	sp, r7
 8006812:	bd80      	pop	{r7, pc}

08006814 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006814:	b480      	push	{r7}
 8006816:	b085      	sub	sp, #20
 8006818:	af00      	add	r7, sp, #0
 800681a:	60f8      	str	r0, [r7, #12]
 800681c:	60b9      	str	r1, [r7, #8]
 800681e:	607a      	str	r2, [r7, #4]
 8006820:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	681a      	ldr	r2, [r3, #0]
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006830:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	683a      	ldr	r2, [r7, #0]
 8006838:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	689b      	ldr	r3, [r3, #8]
 800683e:	2b40      	cmp	r3, #64	; 0x40
 8006840:	d108      	bne.n	8006854 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	687a      	ldr	r2, [r7, #4]
 8006848:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	68ba      	ldr	r2, [r7, #8]
 8006850:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006852:	e007      	b.n	8006864 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	68ba      	ldr	r2, [r7, #8]
 800685a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	687a      	ldr	r2, [r7, #4]
 8006862:	60da      	str	r2, [r3, #12]
}
 8006864:	bf00      	nop
 8006866:	3714      	adds	r7, #20
 8006868:	46bd      	mov	sp, r7
 800686a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686e:	4770      	bx	lr

08006870 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006870:	b480      	push	{r7}
 8006872:	b085      	sub	sp, #20
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	b2db      	uxtb	r3, r3
 800687e:	3b10      	subs	r3, #16
 8006880:	4a14      	ldr	r2, [pc, #80]	; (80068d4 <DMA_CalcBaseAndBitshift+0x64>)
 8006882:	fba2 2303 	umull	r2, r3, r2, r3
 8006886:	091b      	lsrs	r3, r3, #4
 8006888:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800688a:	4a13      	ldr	r2, [pc, #76]	; (80068d8 <DMA_CalcBaseAndBitshift+0x68>)
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	4413      	add	r3, r2
 8006890:	781b      	ldrb	r3, [r3, #0]
 8006892:	461a      	mov	r2, r3
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	2b03      	cmp	r3, #3
 800689c:	d909      	bls.n	80068b2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80068a6:	f023 0303 	bic.w	r3, r3, #3
 80068aa:	1d1a      	adds	r2, r3, #4
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	659a      	str	r2, [r3, #88]	; 0x58
 80068b0:	e007      	b.n	80068c2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80068ba:	f023 0303 	bic.w	r3, r3, #3
 80068be:	687a      	ldr	r2, [r7, #4]
 80068c0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80068c6:	4618      	mov	r0, r3
 80068c8:	3714      	adds	r7, #20
 80068ca:	46bd      	mov	sp, r7
 80068cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d0:	4770      	bx	lr
 80068d2:	bf00      	nop
 80068d4:	aaaaaaab 	.word	0xaaaaaaab
 80068d8:	08015618 	.word	0x08015618

080068dc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80068dc:	b480      	push	{r7}
 80068de:	b085      	sub	sp, #20
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80068e4:	2300      	movs	r3, #0
 80068e6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068ec:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	699b      	ldr	r3, [r3, #24]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d11f      	bne.n	8006936 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	2b03      	cmp	r3, #3
 80068fa:	d856      	bhi.n	80069aa <DMA_CheckFifoParam+0xce>
 80068fc:	a201      	add	r2, pc, #4	; (adr r2, 8006904 <DMA_CheckFifoParam+0x28>)
 80068fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006902:	bf00      	nop
 8006904:	08006915 	.word	0x08006915
 8006908:	08006927 	.word	0x08006927
 800690c:	08006915 	.word	0x08006915
 8006910:	080069ab 	.word	0x080069ab
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006918:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800691c:	2b00      	cmp	r3, #0
 800691e:	d046      	beq.n	80069ae <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006920:	2301      	movs	r3, #1
 8006922:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006924:	e043      	b.n	80069ae <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800692a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800692e:	d140      	bne.n	80069b2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006930:	2301      	movs	r3, #1
 8006932:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006934:	e03d      	b.n	80069b2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	699b      	ldr	r3, [r3, #24]
 800693a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800693e:	d121      	bne.n	8006984 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	2b03      	cmp	r3, #3
 8006944:	d837      	bhi.n	80069b6 <DMA_CheckFifoParam+0xda>
 8006946:	a201      	add	r2, pc, #4	; (adr r2, 800694c <DMA_CheckFifoParam+0x70>)
 8006948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800694c:	0800695d 	.word	0x0800695d
 8006950:	08006963 	.word	0x08006963
 8006954:	0800695d 	.word	0x0800695d
 8006958:	08006975 	.word	0x08006975
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800695c:	2301      	movs	r3, #1
 800695e:	73fb      	strb	r3, [r7, #15]
      break;
 8006960:	e030      	b.n	80069c4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006966:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800696a:	2b00      	cmp	r3, #0
 800696c:	d025      	beq.n	80069ba <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800696e:	2301      	movs	r3, #1
 8006970:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006972:	e022      	b.n	80069ba <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006978:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800697c:	d11f      	bne.n	80069be <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800697e:	2301      	movs	r3, #1
 8006980:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006982:	e01c      	b.n	80069be <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006984:	68bb      	ldr	r3, [r7, #8]
 8006986:	2b02      	cmp	r3, #2
 8006988:	d903      	bls.n	8006992 <DMA_CheckFifoParam+0xb6>
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	2b03      	cmp	r3, #3
 800698e:	d003      	beq.n	8006998 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006990:	e018      	b.n	80069c4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006992:	2301      	movs	r3, #1
 8006994:	73fb      	strb	r3, [r7, #15]
      break;
 8006996:	e015      	b.n	80069c4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800699c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d00e      	beq.n	80069c2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80069a4:	2301      	movs	r3, #1
 80069a6:	73fb      	strb	r3, [r7, #15]
      break;
 80069a8:	e00b      	b.n	80069c2 <DMA_CheckFifoParam+0xe6>
      break;
 80069aa:	bf00      	nop
 80069ac:	e00a      	b.n	80069c4 <DMA_CheckFifoParam+0xe8>
      break;
 80069ae:	bf00      	nop
 80069b0:	e008      	b.n	80069c4 <DMA_CheckFifoParam+0xe8>
      break;
 80069b2:	bf00      	nop
 80069b4:	e006      	b.n	80069c4 <DMA_CheckFifoParam+0xe8>
      break;
 80069b6:	bf00      	nop
 80069b8:	e004      	b.n	80069c4 <DMA_CheckFifoParam+0xe8>
      break;
 80069ba:	bf00      	nop
 80069bc:	e002      	b.n	80069c4 <DMA_CheckFifoParam+0xe8>
      break;   
 80069be:	bf00      	nop
 80069c0:	e000      	b.n	80069c4 <DMA_CheckFifoParam+0xe8>
      break;
 80069c2:	bf00      	nop
    }
  } 
  
  return status; 
 80069c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80069c6:	4618      	mov	r0, r3
 80069c8:	3714      	adds	r7, #20
 80069ca:	46bd      	mov	sp, r7
 80069cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d0:	4770      	bx	lr
 80069d2:	bf00      	nop

080069d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80069d4:	b480      	push	{r7}
 80069d6:	b089      	sub	sp, #36	; 0x24
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
 80069dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80069de:	2300      	movs	r3, #0
 80069e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80069e2:	2300      	movs	r3, #0
 80069e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80069e6:	2300      	movs	r3, #0
 80069e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80069ea:	2300      	movs	r3, #0
 80069ec:	61fb      	str	r3, [r7, #28]
 80069ee:	e177      	b.n	8006ce0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80069f0:	2201      	movs	r2, #1
 80069f2:	69fb      	ldr	r3, [r7, #28]
 80069f4:	fa02 f303 	lsl.w	r3, r2, r3
 80069f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	697a      	ldr	r2, [r7, #20]
 8006a00:	4013      	ands	r3, r2
 8006a02:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006a04:	693a      	ldr	r2, [r7, #16]
 8006a06:	697b      	ldr	r3, [r7, #20]
 8006a08:	429a      	cmp	r2, r3
 8006a0a:	f040 8166 	bne.w	8006cda <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	685b      	ldr	r3, [r3, #4]
 8006a12:	f003 0303 	and.w	r3, r3, #3
 8006a16:	2b01      	cmp	r3, #1
 8006a18:	d005      	beq.n	8006a26 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	685b      	ldr	r3, [r3, #4]
 8006a1e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006a22:	2b02      	cmp	r3, #2
 8006a24:	d130      	bne.n	8006a88 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	689b      	ldr	r3, [r3, #8]
 8006a2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006a2c:	69fb      	ldr	r3, [r7, #28]
 8006a2e:	005b      	lsls	r3, r3, #1
 8006a30:	2203      	movs	r2, #3
 8006a32:	fa02 f303 	lsl.w	r3, r2, r3
 8006a36:	43db      	mvns	r3, r3
 8006a38:	69ba      	ldr	r2, [r7, #24]
 8006a3a:	4013      	ands	r3, r2
 8006a3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	68da      	ldr	r2, [r3, #12]
 8006a42:	69fb      	ldr	r3, [r7, #28]
 8006a44:	005b      	lsls	r3, r3, #1
 8006a46:	fa02 f303 	lsl.w	r3, r2, r3
 8006a4a:	69ba      	ldr	r2, [r7, #24]
 8006a4c:	4313      	orrs	r3, r2
 8006a4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	69ba      	ldr	r2, [r7, #24]
 8006a54:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	685b      	ldr	r3, [r3, #4]
 8006a5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006a5c:	2201      	movs	r2, #1
 8006a5e:	69fb      	ldr	r3, [r7, #28]
 8006a60:	fa02 f303 	lsl.w	r3, r2, r3
 8006a64:	43db      	mvns	r3, r3
 8006a66:	69ba      	ldr	r2, [r7, #24]
 8006a68:	4013      	ands	r3, r2
 8006a6a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	685b      	ldr	r3, [r3, #4]
 8006a70:	091b      	lsrs	r3, r3, #4
 8006a72:	f003 0201 	and.w	r2, r3, #1
 8006a76:	69fb      	ldr	r3, [r7, #28]
 8006a78:	fa02 f303 	lsl.w	r3, r2, r3
 8006a7c:	69ba      	ldr	r2, [r7, #24]
 8006a7e:	4313      	orrs	r3, r2
 8006a80:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	69ba      	ldr	r2, [r7, #24]
 8006a86:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	685b      	ldr	r3, [r3, #4]
 8006a8c:	f003 0303 	and.w	r3, r3, #3
 8006a90:	2b03      	cmp	r3, #3
 8006a92:	d017      	beq.n	8006ac4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	68db      	ldr	r3, [r3, #12]
 8006a98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006a9a:	69fb      	ldr	r3, [r7, #28]
 8006a9c:	005b      	lsls	r3, r3, #1
 8006a9e:	2203      	movs	r2, #3
 8006aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8006aa4:	43db      	mvns	r3, r3
 8006aa6:	69ba      	ldr	r2, [r7, #24]
 8006aa8:	4013      	ands	r3, r2
 8006aaa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	689a      	ldr	r2, [r3, #8]
 8006ab0:	69fb      	ldr	r3, [r7, #28]
 8006ab2:	005b      	lsls	r3, r3, #1
 8006ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8006ab8:	69ba      	ldr	r2, [r7, #24]
 8006aba:	4313      	orrs	r3, r2
 8006abc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	69ba      	ldr	r2, [r7, #24]
 8006ac2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	685b      	ldr	r3, [r3, #4]
 8006ac8:	f003 0303 	and.w	r3, r3, #3
 8006acc:	2b02      	cmp	r3, #2
 8006ace:	d123      	bne.n	8006b18 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006ad0:	69fb      	ldr	r3, [r7, #28]
 8006ad2:	08da      	lsrs	r2, r3, #3
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	3208      	adds	r2, #8
 8006ad8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006adc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006ade:	69fb      	ldr	r3, [r7, #28]
 8006ae0:	f003 0307 	and.w	r3, r3, #7
 8006ae4:	009b      	lsls	r3, r3, #2
 8006ae6:	220f      	movs	r2, #15
 8006ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8006aec:	43db      	mvns	r3, r3
 8006aee:	69ba      	ldr	r2, [r7, #24]
 8006af0:	4013      	ands	r3, r2
 8006af2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	691a      	ldr	r2, [r3, #16]
 8006af8:	69fb      	ldr	r3, [r7, #28]
 8006afa:	f003 0307 	and.w	r3, r3, #7
 8006afe:	009b      	lsls	r3, r3, #2
 8006b00:	fa02 f303 	lsl.w	r3, r2, r3
 8006b04:	69ba      	ldr	r2, [r7, #24]
 8006b06:	4313      	orrs	r3, r2
 8006b08:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006b0a:	69fb      	ldr	r3, [r7, #28]
 8006b0c:	08da      	lsrs	r2, r3, #3
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	3208      	adds	r2, #8
 8006b12:	69b9      	ldr	r1, [r7, #24]
 8006b14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006b1e:	69fb      	ldr	r3, [r7, #28]
 8006b20:	005b      	lsls	r3, r3, #1
 8006b22:	2203      	movs	r2, #3
 8006b24:	fa02 f303 	lsl.w	r3, r2, r3
 8006b28:	43db      	mvns	r3, r3
 8006b2a:	69ba      	ldr	r2, [r7, #24]
 8006b2c:	4013      	ands	r3, r2
 8006b2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	685b      	ldr	r3, [r3, #4]
 8006b34:	f003 0203 	and.w	r2, r3, #3
 8006b38:	69fb      	ldr	r3, [r7, #28]
 8006b3a:	005b      	lsls	r3, r3, #1
 8006b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8006b40:	69ba      	ldr	r2, [r7, #24]
 8006b42:	4313      	orrs	r3, r2
 8006b44:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	69ba      	ldr	r2, [r7, #24]
 8006b4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	685b      	ldr	r3, [r3, #4]
 8006b50:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	f000 80c0 	beq.w	8006cda <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	60fb      	str	r3, [r7, #12]
 8006b5e:	4b66      	ldr	r3, [pc, #408]	; (8006cf8 <HAL_GPIO_Init+0x324>)
 8006b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b62:	4a65      	ldr	r2, [pc, #404]	; (8006cf8 <HAL_GPIO_Init+0x324>)
 8006b64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006b68:	6453      	str	r3, [r2, #68]	; 0x44
 8006b6a:	4b63      	ldr	r3, [pc, #396]	; (8006cf8 <HAL_GPIO_Init+0x324>)
 8006b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b72:	60fb      	str	r3, [r7, #12]
 8006b74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006b76:	4a61      	ldr	r2, [pc, #388]	; (8006cfc <HAL_GPIO_Init+0x328>)
 8006b78:	69fb      	ldr	r3, [r7, #28]
 8006b7a:	089b      	lsrs	r3, r3, #2
 8006b7c:	3302      	adds	r3, #2
 8006b7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006b84:	69fb      	ldr	r3, [r7, #28]
 8006b86:	f003 0303 	and.w	r3, r3, #3
 8006b8a:	009b      	lsls	r3, r3, #2
 8006b8c:	220f      	movs	r2, #15
 8006b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8006b92:	43db      	mvns	r3, r3
 8006b94:	69ba      	ldr	r2, [r7, #24]
 8006b96:	4013      	ands	r3, r2
 8006b98:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	4a58      	ldr	r2, [pc, #352]	; (8006d00 <HAL_GPIO_Init+0x32c>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d037      	beq.n	8006c12 <HAL_GPIO_Init+0x23e>
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	4a57      	ldr	r2, [pc, #348]	; (8006d04 <HAL_GPIO_Init+0x330>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d031      	beq.n	8006c0e <HAL_GPIO_Init+0x23a>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	4a56      	ldr	r2, [pc, #344]	; (8006d08 <HAL_GPIO_Init+0x334>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d02b      	beq.n	8006c0a <HAL_GPIO_Init+0x236>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	4a55      	ldr	r2, [pc, #340]	; (8006d0c <HAL_GPIO_Init+0x338>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d025      	beq.n	8006c06 <HAL_GPIO_Init+0x232>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	4a54      	ldr	r2, [pc, #336]	; (8006d10 <HAL_GPIO_Init+0x33c>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d01f      	beq.n	8006c02 <HAL_GPIO_Init+0x22e>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	4a53      	ldr	r2, [pc, #332]	; (8006d14 <HAL_GPIO_Init+0x340>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d019      	beq.n	8006bfe <HAL_GPIO_Init+0x22a>
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	4a52      	ldr	r2, [pc, #328]	; (8006d18 <HAL_GPIO_Init+0x344>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d013      	beq.n	8006bfa <HAL_GPIO_Init+0x226>
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	4a51      	ldr	r2, [pc, #324]	; (8006d1c <HAL_GPIO_Init+0x348>)
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d00d      	beq.n	8006bf6 <HAL_GPIO_Init+0x222>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	4a50      	ldr	r2, [pc, #320]	; (8006d20 <HAL_GPIO_Init+0x34c>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d007      	beq.n	8006bf2 <HAL_GPIO_Init+0x21e>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	4a4f      	ldr	r2, [pc, #316]	; (8006d24 <HAL_GPIO_Init+0x350>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d101      	bne.n	8006bee <HAL_GPIO_Init+0x21a>
 8006bea:	2309      	movs	r3, #9
 8006bec:	e012      	b.n	8006c14 <HAL_GPIO_Init+0x240>
 8006bee:	230a      	movs	r3, #10
 8006bf0:	e010      	b.n	8006c14 <HAL_GPIO_Init+0x240>
 8006bf2:	2308      	movs	r3, #8
 8006bf4:	e00e      	b.n	8006c14 <HAL_GPIO_Init+0x240>
 8006bf6:	2307      	movs	r3, #7
 8006bf8:	e00c      	b.n	8006c14 <HAL_GPIO_Init+0x240>
 8006bfa:	2306      	movs	r3, #6
 8006bfc:	e00a      	b.n	8006c14 <HAL_GPIO_Init+0x240>
 8006bfe:	2305      	movs	r3, #5
 8006c00:	e008      	b.n	8006c14 <HAL_GPIO_Init+0x240>
 8006c02:	2304      	movs	r3, #4
 8006c04:	e006      	b.n	8006c14 <HAL_GPIO_Init+0x240>
 8006c06:	2303      	movs	r3, #3
 8006c08:	e004      	b.n	8006c14 <HAL_GPIO_Init+0x240>
 8006c0a:	2302      	movs	r3, #2
 8006c0c:	e002      	b.n	8006c14 <HAL_GPIO_Init+0x240>
 8006c0e:	2301      	movs	r3, #1
 8006c10:	e000      	b.n	8006c14 <HAL_GPIO_Init+0x240>
 8006c12:	2300      	movs	r3, #0
 8006c14:	69fa      	ldr	r2, [r7, #28]
 8006c16:	f002 0203 	and.w	r2, r2, #3
 8006c1a:	0092      	lsls	r2, r2, #2
 8006c1c:	4093      	lsls	r3, r2
 8006c1e:	69ba      	ldr	r2, [r7, #24]
 8006c20:	4313      	orrs	r3, r2
 8006c22:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006c24:	4935      	ldr	r1, [pc, #212]	; (8006cfc <HAL_GPIO_Init+0x328>)
 8006c26:	69fb      	ldr	r3, [r7, #28]
 8006c28:	089b      	lsrs	r3, r3, #2
 8006c2a:	3302      	adds	r3, #2
 8006c2c:	69ba      	ldr	r2, [r7, #24]
 8006c2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006c32:	4b3d      	ldr	r3, [pc, #244]	; (8006d28 <HAL_GPIO_Init+0x354>)
 8006c34:	689b      	ldr	r3, [r3, #8]
 8006c36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006c38:	693b      	ldr	r3, [r7, #16]
 8006c3a:	43db      	mvns	r3, r3
 8006c3c:	69ba      	ldr	r2, [r7, #24]
 8006c3e:	4013      	ands	r3, r2
 8006c40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	685b      	ldr	r3, [r3, #4]
 8006c46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d003      	beq.n	8006c56 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8006c4e:	69ba      	ldr	r2, [r7, #24]
 8006c50:	693b      	ldr	r3, [r7, #16]
 8006c52:	4313      	orrs	r3, r2
 8006c54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006c56:	4a34      	ldr	r2, [pc, #208]	; (8006d28 <HAL_GPIO_Init+0x354>)
 8006c58:	69bb      	ldr	r3, [r7, #24]
 8006c5a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006c5c:	4b32      	ldr	r3, [pc, #200]	; (8006d28 <HAL_GPIO_Init+0x354>)
 8006c5e:	68db      	ldr	r3, [r3, #12]
 8006c60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006c62:	693b      	ldr	r3, [r7, #16]
 8006c64:	43db      	mvns	r3, r3
 8006c66:	69ba      	ldr	r2, [r7, #24]
 8006c68:	4013      	ands	r3, r2
 8006c6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	685b      	ldr	r3, [r3, #4]
 8006c70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d003      	beq.n	8006c80 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8006c78:	69ba      	ldr	r2, [r7, #24]
 8006c7a:	693b      	ldr	r3, [r7, #16]
 8006c7c:	4313      	orrs	r3, r2
 8006c7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006c80:	4a29      	ldr	r2, [pc, #164]	; (8006d28 <HAL_GPIO_Init+0x354>)
 8006c82:	69bb      	ldr	r3, [r7, #24]
 8006c84:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006c86:	4b28      	ldr	r3, [pc, #160]	; (8006d28 <HAL_GPIO_Init+0x354>)
 8006c88:	685b      	ldr	r3, [r3, #4]
 8006c8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006c8c:	693b      	ldr	r3, [r7, #16]
 8006c8e:	43db      	mvns	r3, r3
 8006c90:	69ba      	ldr	r2, [r7, #24]
 8006c92:	4013      	ands	r3, r2
 8006c94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	685b      	ldr	r3, [r3, #4]
 8006c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d003      	beq.n	8006caa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8006ca2:	69ba      	ldr	r2, [r7, #24]
 8006ca4:	693b      	ldr	r3, [r7, #16]
 8006ca6:	4313      	orrs	r3, r2
 8006ca8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006caa:	4a1f      	ldr	r2, [pc, #124]	; (8006d28 <HAL_GPIO_Init+0x354>)
 8006cac:	69bb      	ldr	r3, [r7, #24]
 8006cae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006cb0:	4b1d      	ldr	r3, [pc, #116]	; (8006d28 <HAL_GPIO_Init+0x354>)
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006cb6:	693b      	ldr	r3, [r7, #16]
 8006cb8:	43db      	mvns	r3, r3
 8006cba:	69ba      	ldr	r2, [r7, #24]
 8006cbc:	4013      	ands	r3, r2
 8006cbe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	685b      	ldr	r3, [r3, #4]
 8006cc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d003      	beq.n	8006cd4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8006ccc:	69ba      	ldr	r2, [r7, #24]
 8006cce:	693b      	ldr	r3, [r7, #16]
 8006cd0:	4313      	orrs	r3, r2
 8006cd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006cd4:	4a14      	ldr	r2, [pc, #80]	; (8006d28 <HAL_GPIO_Init+0x354>)
 8006cd6:	69bb      	ldr	r3, [r7, #24]
 8006cd8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006cda:	69fb      	ldr	r3, [r7, #28]
 8006cdc:	3301      	adds	r3, #1
 8006cde:	61fb      	str	r3, [r7, #28]
 8006ce0:	69fb      	ldr	r3, [r7, #28]
 8006ce2:	2b0f      	cmp	r3, #15
 8006ce4:	f67f ae84 	bls.w	80069f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006ce8:	bf00      	nop
 8006cea:	bf00      	nop
 8006cec:	3724      	adds	r7, #36	; 0x24
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf4:	4770      	bx	lr
 8006cf6:	bf00      	nop
 8006cf8:	40023800 	.word	0x40023800
 8006cfc:	40013800 	.word	0x40013800
 8006d00:	40020000 	.word	0x40020000
 8006d04:	40020400 	.word	0x40020400
 8006d08:	40020800 	.word	0x40020800
 8006d0c:	40020c00 	.word	0x40020c00
 8006d10:	40021000 	.word	0x40021000
 8006d14:	40021400 	.word	0x40021400
 8006d18:	40021800 	.word	0x40021800
 8006d1c:	40021c00 	.word	0x40021c00
 8006d20:	40022000 	.word	0x40022000
 8006d24:	40022400 	.word	0x40022400
 8006d28:	40013c00 	.word	0x40013c00

08006d2c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006d2c:	b480      	push	{r7}
 8006d2e:	b085      	sub	sp, #20
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
 8006d34:	460b      	mov	r3, r1
 8006d36:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	691a      	ldr	r2, [r3, #16]
 8006d3c:	887b      	ldrh	r3, [r7, #2]
 8006d3e:	4013      	ands	r3, r2
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d002      	beq.n	8006d4a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006d44:	2301      	movs	r3, #1
 8006d46:	73fb      	strb	r3, [r7, #15]
 8006d48:	e001      	b.n	8006d4e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006d4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d50:	4618      	mov	r0, r3
 8006d52:	3714      	adds	r7, #20
 8006d54:	46bd      	mov	sp, r7
 8006d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5a:	4770      	bx	lr

08006d5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006d5c:	b480      	push	{r7}
 8006d5e:	b083      	sub	sp, #12
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
 8006d64:	460b      	mov	r3, r1
 8006d66:	807b      	strh	r3, [r7, #2]
 8006d68:	4613      	mov	r3, r2
 8006d6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006d6c:	787b      	ldrb	r3, [r7, #1]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d003      	beq.n	8006d7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006d72:	887a      	ldrh	r2, [r7, #2]
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006d78:	e003      	b.n	8006d82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006d7a:	887b      	ldrh	r3, [r7, #2]
 8006d7c:	041a      	lsls	r2, r3, #16
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	619a      	str	r2, [r3, #24]
}
 8006d82:	bf00      	nop
 8006d84:	370c      	adds	r7, #12
 8006d86:	46bd      	mov	sp, r7
 8006d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8c:	4770      	bx	lr

08006d8e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006d8e:	b480      	push	{r7}
 8006d90:	b085      	sub	sp, #20
 8006d92:	af00      	add	r7, sp, #0
 8006d94:	6078      	str	r0, [r7, #4]
 8006d96:	460b      	mov	r3, r1
 8006d98:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	695b      	ldr	r3, [r3, #20]
 8006d9e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006da0:	887a      	ldrh	r2, [r7, #2]
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	4013      	ands	r3, r2
 8006da6:	041a      	lsls	r2, r3, #16
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	43d9      	mvns	r1, r3
 8006dac:	887b      	ldrh	r3, [r7, #2]
 8006dae:	400b      	ands	r3, r1
 8006db0:	431a      	orrs	r2, r3
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	619a      	str	r2, [r3, #24]
}
 8006db6:	bf00      	nop
 8006db8:	3714      	adds	r7, #20
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc0:	4770      	bx	lr

08006dc2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006dc2:	b580      	push	{r7, lr}
 8006dc4:	b086      	sub	sp, #24
 8006dc6:	af02      	add	r7, sp, #8
 8006dc8:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d101      	bne.n	8006dd4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006dd0:	2301      	movs	r3, #1
 8006dd2:	e101      	b.n	8006fd8 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8006de0:	b2db      	uxtb	r3, r3
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d106      	bne.n	8006df4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2200      	movs	r2, #0
 8006dea:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	f009 ff28 	bl	8010c44 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2203      	movs	r2, #3
 8006df8:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8006dfc:	68bb      	ldr	r3, [r7, #8]
 8006dfe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006e02:	d102      	bne.n	8006e0a <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2200      	movs	r2, #0
 8006e08:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	4618      	mov	r0, r3
 8006e10:	f004 fd31 	bl	800b876 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	6818      	ldr	r0, [r3, #0]
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	7c1a      	ldrb	r2, [r3, #16]
 8006e1c:	f88d 2000 	strb.w	r2, [sp]
 8006e20:	3304      	adds	r3, #4
 8006e22:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006e24:	f004 fc10 	bl	800b648 <USB_CoreInit>
 8006e28:	4603      	mov	r3, r0
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d005      	beq.n	8006e3a <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2202      	movs	r2, #2
 8006e32:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8006e36:	2301      	movs	r3, #1
 8006e38:	e0ce      	b.n	8006fd8 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	2100      	movs	r1, #0
 8006e40:	4618      	mov	r0, r3
 8006e42:	f004 fd29 	bl	800b898 <USB_SetCurrentMode>
 8006e46:	4603      	mov	r3, r0
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d005      	beq.n	8006e58 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2202      	movs	r2, #2
 8006e50:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8006e54:	2301      	movs	r3, #1
 8006e56:	e0bf      	b.n	8006fd8 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006e58:	2300      	movs	r3, #0
 8006e5a:	73fb      	strb	r3, [r7, #15]
 8006e5c:	e04a      	b.n	8006ef4 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006e5e:	7bfa      	ldrb	r2, [r7, #15]
 8006e60:	6879      	ldr	r1, [r7, #4]
 8006e62:	4613      	mov	r3, r2
 8006e64:	00db      	lsls	r3, r3, #3
 8006e66:	4413      	add	r3, r2
 8006e68:	009b      	lsls	r3, r3, #2
 8006e6a:	440b      	add	r3, r1
 8006e6c:	3315      	adds	r3, #21
 8006e6e:	2201      	movs	r2, #1
 8006e70:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006e72:	7bfa      	ldrb	r2, [r7, #15]
 8006e74:	6879      	ldr	r1, [r7, #4]
 8006e76:	4613      	mov	r3, r2
 8006e78:	00db      	lsls	r3, r3, #3
 8006e7a:	4413      	add	r3, r2
 8006e7c:	009b      	lsls	r3, r3, #2
 8006e7e:	440b      	add	r3, r1
 8006e80:	3314      	adds	r3, #20
 8006e82:	7bfa      	ldrb	r2, [r7, #15]
 8006e84:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006e86:	7bfa      	ldrb	r2, [r7, #15]
 8006e88:	7bfb      	ldrb	r3, [r7, #15]
 8006e8a:	b298      	uxth	r0, r3
 8006e8c:	6879      	ldr	r1, [r7, #4]
 8006e8e:	4613      	mov	r3, r2
 8006e90:	00db      	lsls	r3, r3, #3
 8006e92:	4413      	add	r3, r2
 8006e94:	009b      	lsls	r3, r3, #2
 8006e96:	440b      	add	r3, r1
 8006e98:	332e      	adds	r3, #46	; 0x2e
 8006e9a:	4602      	mov	r2, r0
 8006e9c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006e9e:	7bfa      	ldrb	r2, [r7, #15]
 8006ea0:	6879      	ldr	r1, [r7, #4]
 8006ea2:	4613      	mov	r3, r2
 8006ea4:	00db      	lsls	r3, r3, #3
 8006ea6:	4413      	add	r3, r2
 8006ea8:	009b      	lsls	r3, r3, #2
 8006eaa:	440b      	add	r3, r1
 8006eac:	3318      	adds	r3, #24
 8006eae:	2200      	movs	r2, #0
 8006eb0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006eb2:	7bfa      	ldrb	r2, [r7, #15]
 8006eb4:	6879      	ldr	r1, [r7, #4]
 8006eb6:	4613      	mov	r3, r2
 8006eb8:	00db      	lsls	r3, r3, #3
 8006eba:	4413      	add	r3, r2
 8006ebc:	009b      	lsls	r3, r3, #2
 8006ebe:	440b      	add	r3, r1
 8006ec0:	331c      	adds	r3, #28
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006ec6:	7bfa      	ldrb	r2, [r7, #15]
 8006ec8:	6879      	ldr	r1, [r7, #4]
 8006eca:	4613      	mov	r3, r2
 8006ecc:	00db      	lsls	r3, r3, #3
 8006ece:	4413      	add	r3, r2
 8006ed0:	009b      	lsls	r3, r3, #2
 8006ed2:	440b      	add	r3, r1
 8006ed4:	3320      	adds	r3, #32
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006eda:	7bfa      	ldrb	r2, [r7, #15]
 8006edc:	6879      	ldr	r1, [r7, #4]
 8006ede:	4613      	mov	r3, r2
 8006ee0:	00db      	lsls	r3, r3, #3
 8006ee2:	4413      	add	r3, r2
 8006ee4:	009b      	lsls	r3, r3, #2
 8006ee6:	440b      	add	r3, r1
 8006ee8:	3324      	adds	r3, #36	; 0x24
 8006eea:	2200      	movs	r2, #0
 8006eec:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006eee:	7bfb      	ldrb	r3, [r7, #15]
 8006ef0:	3301      	adds	r3, #1
 8006ef2:	73fb      	strb	r3, [r7, #15]
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	791b      	ldrb	r3, [r3, #4]
 8006ef8:	7bfa      	ldrb	r2, [r7, #15]
 8006efa:	429a      	cmp	r2, r3
 8006efc:	d3af      	bcc.n	8006e5e <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006efe:	2300      	movs	r3, #0
 8006f00:	73fb      	strb	r3, [r7, #15]
 8006f02:	e044      	b.n	8006f8e <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006f04:	7bfa      	ldrb	r2, [r7, #15]
 8006f06:	6879      	ldr	r1, [r7, #4]
 8006f08:	4613      	mov	r3, r2
 8006f0a:	00db      	lsls	r3, r3, #3
 8006f0c:	4413      	add	r3, r2
 8006f0e:	009b      	lsls	r3, r3, #2
 8006f10:	440b      	add	r3, r1
 8006f12:	f203 2355 	addw	r3, r3, #597	; 0x255
 8006f16:	2200      	movs	r2, #0
 8006f18:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006f1a:	7bfa      	ldrb	r2, [r7, #15]
 8006f1c:	6879      	ldr	r1, [r7, #4]
 8006f1e:	4613      	mov	r3, r2
 8006f20:	00db      	lsls	r3, r3, #3
 8006f22:	4413      	add	r3, r2
 8006f24:	009b      	lsls	r3, r3, #2
 8006f26:	440b      	add	r3, r1
 8006f28:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8006f2c:	7bfa      	ldrb	r2, [r7, #15]
 8006f2e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006f30:	7bfa      	ldrb	r2, [r7, #15]
 8006f32:	6879      	ldr	r1, [r7, #4]
 8006f34:	4613      	mov	r3, r2
 8006f36:	00db      	lsls	r3, r3, #3
 8006f38:	4413      	add	r3, r2
 8006f3a:	009b      	lsls	r3, r3, #2
 8006f3c:	440b      	add	r3, r1
 8006f3e:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8006f42:	2200      	movs	r2, #0
 8006f44:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006f46:	7bfa      	ldrb	r2, [r7, #15]
 8006f48:	6879      	ldr	r1, [r7, #4]
 8006f4a:	4613      	mov	r3, r2
 8006f4c:	00db      	lsls	r3, r3, #3
 8006f4e:	4413      	add	r3, r2
 8006f50:	009b      	lsls	r3, r3, #2
 8006f52:	440b      	add	r3, r1
 8006f54:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8006f58:	2200      	movs	r2, #0
 8006f5a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006f5c:	7bfa      	ldrb	r2, [r7, #15]
 8006f5e:	6879      	ldr	r1, [r7, #4]
 8006f60:	4613      	mov	r3, r2
 8006f62:	00db      	lsls	r3, r3, #3
 8006f64:	4413      	add	r3, r2
 8006f66:	009b      	lsls	r3, r3, #2
 8006f68:	440b      	add	r3, r1
 8006f6a:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8006f6e:	2200      	movs	r2, #0
 8006f70:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006f72:	7bfa      	ldrb	r2, [r7, #15]
 8006f74:	6879      	ldr	r1, [r7, #4]
 8006f76:	4613      	mov	r3, r2
 8006f78:	00db      	lsls	r3, r3, #3
 8006f7a:	4413      	add	r3, r2
 8006f7c:	009b      	lsls	r3, r3, #2
 8006f7e:	440b      	add	r3, r1
 8006f80:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8006f84:	2200      	movs	r2, #0
 8006f86:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006f88:	7bfb      	ldrb	r3, [r7, #15]
 8006f8a:	3301      	adds	r3, #1
 8006f8c:	73fb      	strb	r3, [r7, #15]
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	791b      	ldrb	r3, [r3, #4]
 8006f92:	7bfa      	ldrb	r2, [r7, #15]
 8006f94:	429a      	cmp	r2, r3
 8006f96:	d3b5      	bcc.n	8006f04 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6818      	ldr	r0, [r3, #0]
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	7c1a      	ldrb	r2, [r3, #16]
 8006fa0:	f88d 2000 	strb.w	r2, [sp]
 8006fa4:	3304      	adds	r3, #4
 8006fa6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006fa8:	f004 fcc2 	bl	800b930 <USB_DevInit>
 8006fac:	4603      	mov	r3, r0
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d005      	beq.n	8006fbe <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2202      	movs	r2, #2
 8006fb6:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8006fba:	2301      	movs	r3, #1
 8006fbc:	e00c      	b.n	8006fd8 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2201      	movs	r2, #1
 8006fc8:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	f005 fd06 	bl	800c9e2 <USB_DevDisconnect>

  return HAL_OK;
 8006fd6:	2300      	movs	r3, #0
}
 8006fd8:	4618      	mov	r0, r3
 8006fda:	3710      	adds	r7, #16
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	bd80      	pop	{r7, pc}

08006fe0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b084      	sub	sp, #16
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8006ff4:	2b01      	cmp	r3, #1
 8006ff6:	d101      	bne.n	8006ffc <HAL_PCD_Start+0x1c>
 8006ff8:	2302      	movs	r3, #2
 8006ffa:	e022      	b.n	8007042 <HAL_PCD_Start+0x62>
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2201      	movs	r2, #1
 8007000:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	68db      	ldr	r3, [r3, #12]
 8007008:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800700c:	2b00      	cmp	r3, #0
 800700e:	d009      	beq.n	8007024 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8007014:	2b01      	cmp	r3, #1
 8007016:	d105      	bne.n	8007024 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800701c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	4618      	mov	r0, r3
 800702a:	f004 fc13 	bl	800b854 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	4618      	mov	r0, r3
 8007034:	f005 fcb4 	bl	800c9a0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2200      	movs	r2, #0
 800703c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8007040:	2300      	movs	r3, #0
}
 8007042:	4618      	mov	r0, r3
 8007044:	3710      	adds	r7, #16
 8007046:	46bd      	mov	sp, r7
 8007048:	bd80      	pop	{r7, pc}

0800704a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800704a:	b590      	push	{r4, r7, lr}
 800704c:	b08d      	sub	sp, #52	; 0x34
 800704e:	af00      	add	r7, sp, #0
 8007050:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007058:	6a3b      	ldr	r3, [r7, #32]
 800705a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	4618      	mov	r0, r3
 8007062:	f005 fd72 	bl	800cb4a <USB_GetMode>
 8007066:	4603      	mov	r3, r0
 8007068:	2b00      	cmp	r3, #0
 800706a:	f040 848c 	bne.w	8007986 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	4618      	mov	r0, r3
 8007074:	f005 fcd6 	bl	800ca24 <USB_ReadInterrupts>
 8007078:	4603      	mov	r3, r0
 800707a:	2b00      	cmp	r3, #0
 800707c:	f000 8482 	beq.w	8007984 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8007080:	69fb      	ldr	r3, [r7, #28]
 8007082:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007086:	689b      	ldr	r3, [r3, #8]
 8007088:	0a1b      	lsrs	r3, r3, #8
 800708a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	4618      	mov	r0, r3
 800709a:	f005 fcc3 	bl	800ca24 <USB_ReadInterrupts>
 800709e:	4603      	mov	r3, r0
 80070a0:	f003 0302 	and.w	r3, r3, #2
 80070a4:	2b02      	cmp	r3, #2
 80070a6:	d107      	bne.n	80070b8 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	695a      	ldr	r2, [r3, #20]
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f002 0202 	and.w	r2, r2, #2
 80070b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	4618      	mov	r0, r3
 80070be:	f005 fcb1 	bl	800ca24 <USB_ReadInterrupts>
 80070c2:	4603      	mov	r3, r0
 80070c4:	f003 0310 	and.w	r3, r3, #16
 80070c8:	2b10      	cmp	r3, #16
 80070ca:	d161      	bne.n	8007190 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	699a      	ldr	r2, [r3, #24]
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f022 0210 	bic.w	r2, r2, #16
 80070da:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80070dc:	6a3b      	ldr	r3, [r7, #32]
 80070de:	6a1b      	ldr	r3, [r3, #32]
 80070e0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80070e2:	69bb      	ldr	r3, [r7, #24]
 80070e4:	f003 020f 	and.w	r2, r3, #15
 80070e8:	4613      	mov	r3, r2
 80070ea:	00db      	lsls	r3, r3, #3
 80070ec:	4413      	add	r3, r2
 80070ee:	009b      	lsls	r3, r3, #2
 80070f0:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80070f4:	687a      	ldr	r2, [r7, #4]
 80070f6:	4413      	add	r3, r2
 80070f8:	3304      	adds	r3, #4
 80070fa:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80070fc:	69bb      	ldr	r3, [r7, #24]
 80070fe:	0c5b      	lsrs	r3, r3, #17
 8007100:	f003 030f 	and.w	r3, r3, #15
 8007104:	2b02      	cmp	r3, #2
 8007106:	d124      	bne.n	8007152 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8007108:	69ba      	ldr	r2, [r7, #24]
 800710a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800710e:	4013      	ands	r3, r2
 8007110:	2b00      	cmp	r3, #0
 8007112:	d035      	beq.n	8007180 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007114:	697b      	ldr	r3, [r7, #20]
 8007116:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8007118:	69bb      	ldr	r3, [r7, #24]
 800711a:	091b      	lsrs	r3, r3, #4
 800711c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800711e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007122:	b29b      	uxth	r3, r3
 8007124:	461a      	mov	r2, r3
 8007126:	6a38      	ldr	r0, [r7, #32]
 8007128:	f005 fae8 	bl	800c6fc <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800712c:	697b      	ldr	r3, [r7, #20]
 800712e:	68da      	ldr	r2, [r3, #12]
 8007130:	69bb      	ldr	r3, [r7, #24]
 8007132:	091b      	lsrs	r3, r3, #4
 8007134:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007138:	441a      	add	r2, r3
 800713a:	697b      	ldr	r3, [r7, #20]
 800713c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800713e:	697b      	ldr	r3, [r7, #20]
 8007140:	695a      	ldr	r2, [r3, #20]
 8007142:	69bb      	ldr	r3, [r7, #24]
 8007144:	091b      	lsrs	r3, r3, #4
 8007146:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800714a:	441a      	add	r2, r3
 800714c:	697b      	ldr	r3, [r7, #20]
 800714e:	615a      	str	r2, [r3, #20]
 8007150:	e016      	b.n	8007180 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8007152:	69bb      	ldr	r3, [r7, #24]
 8007154:	0c5b      	lsrs	r3, r3, #17
 8007156:	f003 030f 	and.w	r3, r3, #15
 800715a:	2b06      	cmp	r3, #6
 800715c:	d110      	bne.n	8007180 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8007164:	2208      	movs	r2, #8
 8007166:	4619      	mov	r1, r3
 8007168:	6a38      	ldr	r0, [r7, #32]
 800716a:	f005 fac7 	bl	800c6fc <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800716e:	697b      	ldr	r3, [r7, #20]
 8007170:	695a      	ldr	r2, [r3, #20]
 8007172:	69bb      	ldr	r3, [r7, #24]
 8007174:	091b      	lsrs	r3, r3, #4
 8007176:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800717a:	441a      	add	r2, r3
 800717c:	697b      	ldr	r3, [r7, #20]
 800717e:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	699a      	ldr	r2, [r3, #24]
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f042 0210 	orr.w	r2, r2, #16
 800718e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	4618      	mov	r0, r3
 8007196:	f005 fc45 	bl	800ca24 <USB_ReadInterrupts>
 800719a:	4603      	mov	r3, r0
 800719c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80071a0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80071a4:	f040 80a7 	bne.w	80072f6 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80071a8:	2300      	movs	r3, #0
 80071aa:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	4618      	mov	r0, r3
 80071b2:	f005 fc4a 	bl	800ca4a <USB_ReadDevAllOutEpInterrupt>
 80071b6:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80071b8:	e099      	b.n	80072ee <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80071ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071bc:	f003 0301 	and.w	r3, r3, #1
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	f000 808e 	beq.w	80072e2 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071cc:	b2d2      	uxtb	r2, r2
 80071ce:	4611      	mov	r1, r2
 80071d0:	4618      	mov	r0, r3
 80071d2:	f005 fc6e 	bl	800cab2 <USB_ReadDevOutEPInterrupt>
 80071d6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80071d8:	693b      	ldr	r3, [r7, #16]
 80071da:	f003 0301 	and.w	r3, r3, #1
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d00c      	beq.n	80071fc <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80071e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071e4:	015a      	lsls	r2, r3, #5
 80071e6:	69fb      	ldr	r3, [r7, #28]
 80071e8:	4413      	add	r3, r2
 80071ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071ee:	461a      	mov	r2, r3
 80071f0:	2301      	movs	r3, #1
 80071f2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80071f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80071f6:	6878      	ldr	r0, [r7, #4]
 80071f8:	f000 fea2 	bl	8007f40 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80071fc:	693b      	ldr	r3, [r7, #16]
 80071fe:	f003 0308 	and.w	r3, r3, #8
 8007202:	2b00      	cmp	r3, #0
 8007204:	d00c      	beq.n	8007220 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8007206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007208:	015a      	lsls	r2, r3, #5
 800720a:	69fb      	ldr	r3, [r7, #28]
 800720c:	4413      	add	r3, r2
 800720e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007212:	461a      	mov	r2, r3
 8007214:	2308      	movs	r3, #8
 8007216:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8007218:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	f000 ff78 	bl	8008110 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8007220:	693b      	ldr	r3, [r7, #16]
 8007222:	f003 0310 	and.w	r3, r3, #16
 8007226:	2b00      	cmp	r3, #0
 8007228:	d008      	beq.n	800723c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800722a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800722c:	015a      	lsls	r2, r3, #5
 800722e:	69fb      	ldr	r3, [r7, #28]
 8007230:	4413      	add	r3, r2
 8007232:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007236:	461a      	mov	r2, r3
 8007238:	2310      	movs	r3, #16
 800723a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800723c:	693b      	ldr	r3, [r7, #16]
 800723e:	f003 0302 	and.w	r3, r3, #2
 8007242:	2b00      	cmp	r3, #0
 8007244:	d030      	beq.n	80072a8 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8007246:	6a3b      	ldr	r3, [r7, #32]
 8007248:	695b      	ldr	r3, [r3, #20]
 800724a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800724e:	2b80      	cmp	r3, #128	; 0x80
 8007250:	d109      	bne.n	8007266 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8007252:	69fb      	ldr	r3, [r7, #28]
 8007254:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007258:	685b      	ldr	r3, [r3, #4]
 800725a:	69fa      	ldr	r2, [r7, #28]
 800725c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007260:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007264:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8007266:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007268:	4613      	mov	r3, r2
 800726a:	00db      	lsls	r3, r3, #3
 800726c:	4413      	add	r3, r2
 800726e:	009b      	lsls	r3, r3, #2
 8007270:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8007274:	687a      	ldr	r2, [r7, #4]
 8007276:	4413      	add	r3, r2
 8007278:	3304      	adds	r3, #4
 800727a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800727c:	697b      	ldr	r3, [r7, #20]
 800727e:	78db      	ldrb	r3, [r3, #3]
 8007280:	2b01      	cmp	r3, #1
 8007282:	d108      	bne.n	8007296 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8007284:	697b      	ldr	r3, [r7, #20]
 8007286:	2200      	movs	r2, #0
 8007288:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800728a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800728c:	b2db      	uxtb	r3, r3
 800728e:	4619      	mov	r1, r3
 8007290:	6878      	ldr	r0, [r7, #4]
 8007292:	f009 fddd 	bl	8010e50 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8007296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007298:	015a      	lsls	r2, r3, #5
 800729a:	69fb      	ldr	r3, [r7, #28]
 800729c:	4413      	add	r3, r2
 800729e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072a2:	461a      	mov	r2, r3
 80072a4:	2302      	movs	r3, #2
 80072a6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80072a8:	693b      	ldr	r3, [r7, #16]
 80072aa:	f003 0320 	and.w	r3, r3, #32
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d008      	beq.n	80072c4 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80072b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072b4:	015a      	lsls	r2, r3, #5
 80072b6:	69fb      	ldr	r3, [r7, #28]
 80072b8:	4413      	add	r3, r2
 80072ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072be:	461a      	mov	r2, r3
 80072c0:	2320      	movs	r3, #32
 80072c2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80072c4:	693b      	ldr	r3, [r7, #16]
 80072c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d009      	beq.n	80072e2 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80072ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072d0:	015a      	lsls	r2, r3, #5
 80072d2:	69fb      	ldr	r3, [r7, #28]
 80072d4:	4413      	add	r3, r2
 80072d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072da:	461a      	mov	r2, r3
 80072dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80072e0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80072e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072e4:	3301      	adds	r3, #1
 80072e6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80072e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072ea:	085b      	lsrs	r3, r3, #1
 80072ec:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80072ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	f47f af62 	bne.w	80071ba <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	4618      	mov	r0, r3
 80072fc:	f005 fb92 	bl	800ca24 <USB_ReadInterrupts>
 8007300:	4603      	mov	r3, r0
 8007302:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007306:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800730a:	f040 80db 	bne.w	80074c4 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	4618      	mov	r0, r3
 8007314:	f005 fbb3 	bl	800ca7e <USB_ReadDevAllInEpInterrupt>
 8007318:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800731a:	2300      	movs	r3, #0
 800731c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800731e:	e0cd      	b.n	80074bc <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8007320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007322:	f003 0301 	and.w	r3, r3, #1
 8007326:	2b00      	cmp	r3, #0
 8007328:	f000 80c2 	beq.w	80074b0 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007332:	b2d2      	uxtb	r2, r2
 8007334:	4611      	mov	r1, r2
 8007336:	4618      	mov	r0, r3
 8007338:	f005 fbd9 	bl	800caee <USB_ReadDevInEPInterrupt>
 800733c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800733e:	693b      	ldr	r3, [r7, #16]
 8007340:	f003 0301 	and.w	r3, r3, #1
 8007344:	2b00      	cmp	r3, #0
 8007346:	d057      	beq.n	80073f8 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800734a:	f003 030f 	and.w	r3, r3, #15
 800734e:	2201      	movs	r2, #1
 8007350:	fa02 f303 	lsl.w	r3, r2, r3
 8007354:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007356:	69fb      	ldr	r3, [r7, #28]
 8007358:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800735c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	43db      	mvns	r3, r3
 8007362:	69f9      	ldr	r1, [r7, #28]
 8007364:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007368:	4013      	ands	r3, r2
 800736a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800736c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800736e:	015a      	lsls	r2, r3, #5
 8007370:	69fb      	ldr	r3, [r7, #28]
 8007372:	4413      	add	r3, r2
 8007374:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007378:	461a      	mov	r2, r3
 800737a:	2301      	movs	r3, #1
 800737c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	799b      	ldrb	r3, [r3, #6]
 8007382:	2b01      	cmp	r3, #1
 8007384:	d132      	bne.n	80073ec <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8007386:	6879      	ldr	r1, [r7, #4]
 8007388:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800738a:	4613      	mov	r3, r2
 800738c:	00db      	lsls	r3, r3, #3
 800738e:	4413      	add	r3, r2
 8007390:	009b      	lsls	r3, r3, #2
 8007392:	440b      	add	r3, r1
 8007394:	3320      	adds	r3, #32
 8007396:	6819      	ldr	r1, [r3, #0]
 8007398:	6878      	ldr	r0, [r7, #4]
 800739a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800739c:	4613      	mov	r3, r2
 800739e:	00db      	lsls	r3, r3, #3
 80073a0:	4413      	add	r3, r2
 80073a2:	009b      	lsls	r3, r3, #2
 80073a4:	4403      	add	r3, r0
 80073a6:	331c      	adds	r3, #28
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	4419      	add	r1, r3
 80073ac:	6878      	ldr	r0, [r7, #4]
 80073ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073b0:	4613      	mov	r3, r2
 80073b2:	00db      	lsls	r3, r3, #3
 80073b4:	4413      	add	r3, r2
 80073b6:	009b      	lsls	r3, r3, #2
 80073b8:	4403      	add	r3, r0
 80073ba:	3320      	adds	r3, #32
 80073bc:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80073be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d113      	bne.n	80073ec <HAL_PCD_IRQHandler+0x3a2>
 80073c4:	6879      	ldr	r1, [r7, #4]
 80073c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073c8:	4613      	mov	r3, r2
 80073ca:	00db      	lsls	r3, r3, #3
 80073cc:	4413      	add	r3, r2
 80073ce:	009b      	lsls	r3, r3, #2
 80073d0:	440b      	add	r3, r1
 80073d2:	3324      	adds	r3, #36	; 0x24
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d108      	bne.n	80073ec <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6818      	ldr	r0, [r3, #0]
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80073e4:	461a      	mov	r2, r3
 80073e6:	2101      	movs	r1, #1
 80073e8:	f005 fbe0 	bl	800cbac <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80073ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ee:	b2db      	uxtb	r3, r3
 80073f0:	4619      	mov	r1, r3
 80073f2:	6878      	ldr	r0, [r7, #4]
 80073f4:	f009 fca7 	bl	8010d46 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80073f8:	693b      	ldr	r3, [r7, #16]
 80073fa:	f003 0308 	and.w	r3, r3, #8
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d008      	beq.n	8007414 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8007402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007404:	015a      	lsls	r2, r3, #5
 8007406:	69fb      	ldr	r3, [r7, #28]
 8007408:	4413      	add	r3, r2
 800740a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800740e:	461a      	mov	r2, r3
 8007410:	2308      	movs	r3, #8
 8007412:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8007414:	693b      	ldr	r3, [r7, #16]
 8007416:	f003 0310 	and.w	r3, r3, #16
 800741a:	2b00      	cmp	r3, #0
 800741c:	d008      	beq.n	8007430 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800741e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007420:	015a      	lsls	r2, r3, #5
 8007422:	69fb      	ldr	r3, [r7, #28]
 8007424:	4413      	add	r3, r2
 8007426:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800742a:	461a      	mov	r2, r3
 800742c:	2310      	movs	r3, #16
 800742e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8007430:	693b      	ldr	r3, [r7, #16]
 8007432:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007436:	2b00      	cmp	r3, #0
 8007438:	d008      	beq.n	800744c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800743a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800743c:	015a      	lsls	r2, r3, #5
 800743e:	69fb      	ldr	r3, [r7, #28]
 8007440:	4413      	add	r3, r2
 8007442:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007446:	461a      	mov	r2, r3
 8007448:	2340      	movs	r3, #64	; 0x40
 800744a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800744c:	693b      	ldr	r3, [r7, #16]
 800744e:	f003 0302 	and.w	r3, r3, #2
 8007452:	2b00      	cmp	r3, #0
 8007454:	d023      	beq.n	800749e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8007456:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007458:	6a38      	ldr	r0, [r7, #32]
 800745a:	f004 fbcd 	bl	800bbf8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800745e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007460:	4613      	mov	r3, r2
 8007462:	00db      	lsls	r3, r3, #3
 8007464:	4413      	add	r3, r2
 8007466:	009b      	lsls	r3, r3, #2
 8007468:	3310      	adds	r3, #16
 800746a:	687a      	ldr	r2, [r7, #4]
 800746c:	4413      	add	r3, r2
 800746e:	3304      	adds	r3, #4
 8007470:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8007472:	697b      	ldr	r3, [r7, #20]
 8007474:	78db      	ldrb	r3, [r3, #3]
 8007476:	2b01      	cmp	r3, #1
 8007478:	d108      	bne.n	800748c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800747a:	697b      	ldr	r3, [r7, #20]
 800747c:	2200      	movs	r2, #0
 800747e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8007480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007482:	b2db      	uxtb	r3, r3
 8007484:	4619      	mov	r1, r3
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f009 fcf4 	bl	8010e74 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800748c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800748e:	015a      	lsls	r2, r3, #5
 8007490:	69fb      	ldr	r3, [r7, #28]
 8007492:	4413      	add	r3, r2
 8007494:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007498:	461a      	mov	r2, r3
 800749a:	2302      	movs	r3, #2
 800749c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800749e:	693b      	ldr	r3, [r7, #16]
 80074a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d003      	beq.n	80074b0 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80074a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80074aa:	6878      	ldr	r0, [r7, #4]
 80074ac:	f000 fcbb 	bl	8007e26 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80074b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074b2:	3301      	adds	r3, #1
 80074b4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80074b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074b8:	085b      	lsrs	r3, r3, #1
 80074ba:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80074bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074be:	2b00      	cmp	r3, #0
 80074c0:	f47f af2e 	bne.w	8007320 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	4618      	mov	r0, r3
 80074ca:	f005 faab 	bl	800ca24 <USB_ReadInterrupts>
 80074ce:	4603      	mov	r3, r0
 80074d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80074d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80074d8:	d122      	bne.n	8007520 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80074da:	69fb      	ldr	r3, [r7, #28]
 80074dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074e0:	685b      	ldr	r3, [r3, #4]
 80074e2:	69fa      	ldr	r2, [r7, #28]
 80074e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80074e8:	f023 0301 	bic.w	r3, r3, #1
 80074ec:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 80074f4:	2b01      	cmp	r3, #1
 80074f6:	d108      	bne.n	800750a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2200      	movs	r2, #0
 80074fc:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8007500:	2100      	movs	r1, #0
 8007502:	6878      	ldr	r0, [r7, #4]
 8007504:	f000 fea2 	bl	800824c <HAL_PCDEx_LPM_Callback>
 8007508:	e002      	b.n	8007510 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800750a:	6878      	ldr	r0, [r7, #4]
 800750c:	f009 fc92 	bl	8010e34 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	695a      	ldr	r2, [r3, #20]
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800751e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	4618      	mov	r0, r3
 8007526:	f005 fa7d 	bl	800ca24 <USB_ReadInterrupts>
 800752a:	4603      	mov	r3, r0
 800752c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007530:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007534:	d112      	bne.n	800755c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8007536:	69fb      	ldr	r3, [r7, #28]
 8007538:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800753c:	689b      	ldr	r3, [r3, #8]
 800753e:	f003 0301 	and.w	r3, r3, #1
 8007542:	2b01      	cmp	r3, #1
 8007544:	d102      	bne.n	800754c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8007546:	6878      	ldr	r0, [r7, #4]
 8007548:	f009 fc4e 	bl	8010de8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	695a      	ldr	r2, [r3, #20]
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800755a:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	4618      	mov	r0, r3
 8007562:	f005 fa5f 	bl	800ca24 <USB_ReadInterrupts>
 8007566:	4603      	mov	r3, r0
 8007568:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800756c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007570:	f040 80b7 	bne.w	80076e2 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007574:	69fb      	ldr	r3, [r7, #28]
 8007576:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800757a:	685b      	ldr	r3, [r3, #4]
 800757c:	69fa      	ldr	r2, [r7, #28]
 800757e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007582:	f023 0301 	bic.w	r3, r3, #1
 8007586:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	2110      	movs	r1, #16
 800758e:	4618      	mov	r0, r3
 8007590:	f004 fb32 	bl	800bbf8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007594:	2300      	movs	r3, #0
 8007596:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007598:	e046      	b.n	8007628 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800759a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800759c:	015a      	lsls	r2, r3, #5
 800759e:	69fb      	ldr	r3, [r7, #28]
 80075a0:	4413      	add	r3, r2
 80075a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075a6:	461a      	mov	r2, r3
 80075a8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80075ac:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80075ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075b0:	015a      	lsls	r2, r3, #5
 80075b2:	69fb      	ldr	r3, [r7, #28]
 80075b4:	4413      	add	r3, r2
 80075b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80075be:	0151      	lsls	r1, r2, #5
 80075c0:	69fa      	ldr	r2, [r7, #28]
 80075c2:	440a      	add	r2, r1
 80075c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075c8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80075cc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80075ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075d0:	015a      	lsls	r2, r3, #5
 80075d2:	69fb      	ldr	r3, [r7, #28]
 80075d4:	4413      	add	r3, r2
 80075d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075da:	461a      	mov	r2, r3
 80075dc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80075e0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80075e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075e4:	015a      	lsls	r2, r3, #5
 80075e6:	69fb      	ldr	r3, [r7, #28]
 80075e8:	4413      	add	r3, r2
 80075ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80075f2:	0151      	lsls	r1, r2, #5
 80075f4:	69fa      	ldr	r2, [r7, #28]
 80075f6:	440a      	add	r2, r1
 80075f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80075fc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007600:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007604:	015a      	lsls	r2, r3, #5
 8007606:	69fb      	ldr	r3, [r7, #28]
 8007608:	4413      	add	r3, r2
 800760a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007612:	0151      	lsls	r1, r2, #5
 8007614:	69fa      	ldr	r2, [r7, #28]
 8007616:	440a      	add	r2, r1
 8007618:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800761c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007620:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007624:	3301      	adds	r3, #1
 8007626:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	791b      	ldrb	r3, [r3, #4]
 800762c:	461a      	mov	r2, r3
 800762e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007630:	4293      	cmp	r3, r2
 8007632:	d3b2      	bcc.n	800759a <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8007634:	69fb      	ldr	r3, [r7, #28]
 8007636:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800763a:	69db      	ldr	r3, [r3, #28]
 800763c:	69fa      	ldr	r2, [r7, #28]
 800763e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007642:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8007646:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	7bdb      	ldrb	r3, [r3, #15]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d016      	beq.n	800767e <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8007650:	69fb      	ldr	r3, [r7, #28]
 8007652:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007656:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800765a:	69fa      	ldr	r2, [r7, #28]
 800765c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007660:	f043 030b 	orr.w	r3, r3, #11
 8007664:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8007668:	69fb      	ldr	r3, [r7, #28]
 800766a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800766e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007670:	69fa      	ldr	r2, [r7, #28]
 8007672:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007676:	f043 030b 	orr.w	r3, r3, #11
 800767a:	6453      	str	r3, [r2, #68]	; 0x44
 800767c:	e015      	b.n	80076aa <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800767e:	69fb      	ldr	r3, [r7, #28]
 8007680:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007684:	695b      	ldr	r3, [r3, #20]
 8007686:	69fa      	ldr	r2, [r7, #28]
 8007688:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800768c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007690:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8007694:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8007696:	69fb      	ldr	r3, [r7, #28]
 8007698:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800769c:	691b      	ldr	r3, [r3, #16]
 800769e:	69fa      	ldr	r2, [r7, #28]
 80076a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80076a4:	f043 030b 	orr.w	r3, r3, #11
 80076a8:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80076aa:	69fb      	ldr	r3, [r7, #28]
 80076ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	69fa      	ldr	r2, [r7, #28]
 80076b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80076b8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80076bc:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6818      	ldr	r0, [r3, #0]
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	f203 439c 	addw	r3, r3, #1180	; 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80076cc:	461a      	mov	r2, r3
 80076ce:	f005 fa6d 	bl	800cbac <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	695a      	ldr	r2, [r3, #20]
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80076e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	4618      	mov	r0, r3
 80076e8:	f005 f99c 	bl	800ca24 <USB_ReadInterrupts>
 80076ec:	4603      	mov	r3, r0
 80076ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80076f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80076f6:	d123      	bne.n	8007740 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	4618      	mov	r0, r3
 80076fe:	f005 fa32 	bl	800cb66 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	4618      	mov	r0, r3
 8007708:	f004 faef 	bl	800bcea <USB_GetDevSpeed>
 800770c:	4603      	mov	r3, r0
 800770e:	461a      	mov	r2, r3
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681c      	ldr	r4, [r3, #0]
 8007718:	f001 f9c8 	bl	8008aac <HAL_RCC_GetHCLKFreq>
 800771c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007722:	461a      	mov	r2, r3
 8007724:	4620      	mov	r0, r4
 8007726:	f003 fff3 	bl	800b710 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800772a:	6878      	ldr	r0, [r7, #4]
 800772c:	f009 fb33 	bl	8010d96 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	695a      	ldr	r2, [r3, #20]
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800773e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	4618      	mov	r0, r3
 8007746:	f005 f96d 	bl	800ca24 <USB_ReadInterrupts>
 800774a:	4603      	mov	r3, r0
 800774c:	f003 0308 	and.w	r3, r3, #8
 8007750:	2b08      	cmp	r3, #8
 8007752:	d10a      	bne.n	800776a <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8007754:	6878      	ldr	r0, [r7, #4]
 8007756:	f009 fb10 	bl	8010d7a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	695a      	ldr	r2, [r3, #20]
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f002 0208 	and.w	r2, r2, #8
 8007768:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	4618      	mov	r0, r3
 8007770:	f005 f958 	bl	800ca24 <USB_ReadInterrupts>
 8007774:	4603      	mov	r3, r0
 8007776:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800777a:	2b80      	cmp	r3, #128	; 0x80
 800777c:	d123      	bne.n	80077c6 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800777e:	6a3b      	ldr	r3, [r7, #32]
 8007780:	699b      	ldr	r3, [r3, #24]
 8007782:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007786:	6a3b      	ldr	r3, [r7, #32]
 8007788:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800778a:	2301      	movs	r3, #1
 800778c:	627b      	str	r3, [r7, #36]	; 0x24
 800778e:	e014      	b.n	80077ba <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8007790:	6879      	ldr	r1, [r7, #4]
 8007792:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007794:	4613      	mov	r3, r2
 8007796:	00db      	lsls	r3, r3, #3
 8007798:	4413      	add	r3, r2
 800779a:	009b      	lsls	r3, r3, #2
 800779c:	440b      	add	r3, r1
 800779e:	f203 2357 	addw	r3, r3, #599	; 0x257
 80077a2:	781b      	ldrb	r3, [r3, #0]
 80077a4:	2b01      	cmp	r3, #1
 80077a6:	d105      	bne.n	80077b4 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80077a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077aa:	b2db      	uxtb	r3, r3
 80077ac:	4619      	mov	r1, r3
 80077ae:	6878      	ldr	r0, [r7, #4]
 80077b0:	f000 fb08 	bl	8007dc4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80077b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077b6:	3301      	adds	r3, #1
 80077b8:	627b      	str	r3, [r7, #36]	; 0x24
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	791b      	ldrb	r3, [r3, #4]
 80077be:	461a      	mov	r2, r3
 80077c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077c2:	4293      	cmp	r3, r2
 80077c4:	d3e4      	bcc.n	8007790 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	4618      	mov	r0, r3
 80077cc:	f005 f92a 	bl	800ca24 <USB_ReadInterrupts>
 80077d0:	4603      	mov	r3, r0
 80077d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80077d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80077da:	d13c      	bne.n	8007856 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80077dc:	2301      	movs	r3, #1
 80077de:	627b      	str	r3, [r7, #36]	; 0x24
 80077e0:	e02b      	b.n	800783a <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80077e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077e4:	015a      	lsls	r2, r3, #5
 80077e6:	69fb      	ldr	r3, [r7, #28]
 80077e8:	4413      	add	r3, r2
 80077ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80077f2:	6879      	ldr	r1, [r7, #4]
 80077f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077f6:	4613      	mov	r3, r2
 80077f8:	00db      	lsls	r3, r3, #3
 80077fa:	4413      	add	r3, r2
 80077fc:	009b      	lsls	r3, r3, #2
 80077fe:	440b      	add	r3, r1
 8007800:	3318      	adds	r3, #24
 8007802:	781b      	ldrb	r3, [r3, #0]
 8007804:	2b01      	cmp	r3, #1
 8007806:	d115      	bne.n	8007834 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8007808:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800780a:	2b00      	cmp	r3, #0
 800780c:	da12      	bge.n	8007834 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800780e:	6879      	ldr	r1, [r7, #4]
 8007810:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007812:	4613      	mov	r3, r2
 8007814:	00db      	lsls	r3, r3, #3
 8007816:	4413      	add	r3, r2
 8007818:	009b      	lsls	r3, r3, #2
 800781a:	440b      	add	r3, r1
 800781c:	3317      	adds	r3, #23
 800781e:	2201      	movs	r2, #1
 8007820:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8007822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007824:	b2db      	uxtb	r3, r3
 8007826:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800782a:	b2db      	uxtb	r3, r3
 800782c:	4619      	mov	r1, r3
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	f000 fac8 	bl	8007dc4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007836:	3301      	adds	r3, #1
 8007838:	627b      	str	r3, [r7, #36]	; 0x24
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	791b      	ldrb	r3, [r3, #4]
 800783e:	461a      	mov	r2, r3
 8007840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007842:	4293      	cmp	r3, r2
 8007844:	d3cd      	bcc.n	80077e2 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	695a      	ldr	r2, [r3, #20]
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8007854:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	4618      	mov	r0, r3
 800785c:	f005 f8e2 	bl	800ca24 <USB_ReadInterrupts>
 8007860:	4603      	mov	r3, r0
 8007862:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007866:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800786a:	d156      	bne.n	800791a <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800786c:	2301      	movs	r3, #1
 800786e:	627b      	str	r3, [r7, #36]	; 0x24
 8007870:	e045      	b.n	80078fe <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8007872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007874:	015a      	lsls	r2, r3, #5
 8007876:	69fb      	ldr	r3, [r7, #28]
 8007878:	4413      	add	r3, r2
 800787a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8007882:	6879      	ldr	r1, [r7, #4]
 8007884:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007886:	4613      	mov	r3, r2
 8007888:	00db      	lsls	r3, r3, #3
 800788a:	4413      	add	r3, r2
 800788c:	009b      	lsls	r3, r3, #2
 800788e:	440b      	add	r3, r1
 8007890:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8007894:	781b      	ldrb	r3, [r3, #0]
 8007896:	2b01      	cmp	r3, #1
 8007898:	d12e      	bne.n	80078f8 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800789a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800789c:	2b00      	cmp	r3, #0
 800789e:	da2b      	bge.n	80078f8 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80078a0:	69bb      	ldr	r3, [r7, #24]
 80078a2:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 80078ac:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80078b0:	429a      	cmp	r2, r3
 80078b2:	d121      	bne.n	80078f8 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80078b4:	6879      	ldr	r1, [r7, #4]
 80078b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078b8:	4613      	mov	r3, r2
 80078ba:	00db      	lsls	r3, r3, #3
 80078bc:	4413      	add	r3, r2
 80078be:	009b      	lsls	r3, r3, #2
 80078c0:	440b      	add	r3, r1
 80078c2:	f203 2357 	addw	r3, r3, #599	; 0x257
 80078c6:	2201      	movs	r2, #1
 80078c8:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80078ca:	6a3b      	ldr	r3, [r7, #32]
 80078cc:	699b      	ldr	r3, [r3, #24]
 80078ce:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80078d2:	6a3b      	ldr	r3, [r7, #32]
 80078d4:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80078d6:	6a3b      	ldr	r3, [r7, #32]
 80078d8:	695b      	ldr	r3, [r3, #20]
 80078da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d10a      	bne.n	80078f8 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80078e2:	69fb      	ldr	r3, [r7, #28]
 80078e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078e8:	685b      	ldr	r3, [r3, #4]
 80078ea:	69fa      	ldr	r2, [r7, #28]
 80078ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80078f0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80078f4:	6053      	str	r3, [r2, #4]
            break;
 80078f6:	e008      	b.n	800790a <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80078f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078fa:	3301      	adds	r3, #1
 80078fc:	627b      	str	r3, [r7, #36]	; 0x24
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	791b      	ldrb	r3, [r3, #4]
 8007902:	461a      	mov	r2, r3
 8007904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007906:	4293      	cmp	r3, r2
 8007908:	d3b3      	bcc.n	8007872 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	695a      	ldr	r2, [r3, #20]
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8007918:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	4618      	mov	r0, r3
 8007920:	f005 f880 	bl	800ca24 <USB_ReadInterrupts>
 8007924:	4603      	mov	r3, r0
 8007926:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800792a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800792e:	d10a      	bne.n	8007946 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8007930:	6878      	ldr	r0, [r7, #4]
 8007932:	f009 fab1 	bl	8010e98 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	695a      	ldr	r2, [r3, #20]
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8007944:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	4618      	mov	r0, r3
 800794c:	f005 f86a 	bl	800ca24 <USB_ReadInterrupts>
 8007950:	4603      	mov	r3, r0
 8007952:	f003 0304 	and.w	r3, r3, #4
 8007956:	2b04      	cmp	r3, #4
 8007958:	d115      	bne.n	8007986 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	685b      	ldr	r3, [r3, #4]
 8007960:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8007962:	69bb      	ldr	r3, [r7, #24]
 8007964:	f003 0304 	and.w	r3, r3, #4
 8007968:	2b00      	cmp	r3, #0
 800796a:	d002      	beq.n	8007972 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800796c:	6878      	ldr	r0, [r7, #4]
 800796e:	f009 faa1 	bl	8010eb4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	6859      	ldr	r1, [r3, #4]
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	69ba      	ldr	r2, [r7, #24]
 800797e:	430a      	orrs	r2, r1
 8007980:	605a      	str	r2, [r3, #4]
 8007982:	e000      	b.n	8007986 <HAL_PCD_IRQHandler+0x93c>
      return;
 8007984:	bf00      	nop
    }
  }
}
 8007986:	3734      	adds	r7, #52	; 0x34
 8007988:	46bd      	mov	sp, r7
 800798a:	bd90      	pop	{r4, r7, pc}

0800798c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b082      	sub	sp, #8
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
 8007994:	460b      	mov	r3, r1
 8007996:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800799e:	2b01      	cmp	r3, #1
 80079a0:	d101      	bne.n	80079a6 <HAL_PCD_SetAddress+0x1a>
 80079a2:	2302      	movs	r3, #2
 80079a4:	e012      	b.n	80079cc <HAL_PCD_SetAddress+0x40>
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2201      	movs	r2, #1
 80079aa:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  hpcd->USB_Address = address;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	78fa      	ldrb	r2, [r7, #3]
 80079b2:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	78fa      	ldrb	r2, [r7, #3]
 80079ba:	4611      	mov	r1, r2
 80079bc:	4618      	mov	r0, r3
 80079be:	f004 ffc9 	bl	800c954 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2200      	movs	r2, #0
 80079c6:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 80079ca:	2300      	movs	r3, #0
}
 80079cc:	4618      	mov	r0, r3
 80079ce:	3708      	adds	r7, #8
 80079d0:	46bd      	mov	sp, r7
 80079d2:	bd80      	pop	{r7, pc}

080079d4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b084      	sub	sp, #16
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
 80079dc:	4608      	mov	r0, r1
 80079de:	4611      	mov	r1, r2
 80079e0:	461a      	mov	r2, r3
 80079e2:	4603      	mov	r3, r0
 80079e4:	70fb      	strb	r3, [r7, #3]
 80079e6:	460b      	mov	r3, r1
 80079e8:	803b      	strh	r3, [r7, #0]
 80079ea:	4613      	mov	r3, r2
 80079ec:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80079ee:	2300      	movs	r3, #0
 80079f0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80079f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	da0f      	bge.n	8007a1a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80079fa:	78fb      	ldrb	r3, [r7, #3]
 80079fc:	f003 020f 	and.w	r2, r3, #15
 8007a00:	4613      	mov	r3, r2
 8007a02:	00db      	lsls	r3, r3, #3
 8007a04:	4413      	add	r3, r2
 8007a06:	009b      	lsls	r3, r3, #2
 8007a08:	3310      	adds	r3, #16
 8007a0a:	687a      	ldr	r2, [r7, #4]
 8007a0c:	4413      	add	r3, r2
 8007a0e:	3304      	adds	r3, #4
 8007a10:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	2201      	movs	r2, #1
 8007a16:	705a      	strb	r2, [r3, #1]
 8007a18:	e00f      	b.n	8007a3a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007a1a:	78fb      	ldrb	r3, [r7, #3]
 8007a1c:	f003 020f 	and.w	r2, r3, #15
 8007a20:	4613      	mov	r3, r2
 8007a22:	00db      	lsls	r3, r3, #3
 8007a24:	4413      	add	r3, r2
 8007a26:	009b      	lsls	r3, r3, #2
 8007a28:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8007a2c:	687a      	ldr	r2, [r7, #4]
 8007a2e:	4413      	add	r3, r2
 8007a30:	3304      	adds	r3, #4
 8007a32:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	2200      	movs	r2, #0
 8007a38:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8007a3a:	78fb      	ldrb	r3, [r7, #3]
 8007a3c:	f003 030f 	and.w	r3, r3, #15
 8007a40:	b2da      	uxtb	r2, r3
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8007a46:	883a      	ldrh	r2, [r7, #0]
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	78ba      	ldrb	r2, [r7, #2]
 8007a50:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	785b      	ldrb	r3, [r3, #1]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d004      	beq.n	8007a64 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	781b      	ldrb	r3, [r3, #0]
 8007a5e:	b29a      	uxth	r2, r3
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8007a64:	78bb      	ldrb	r3, [r7, #2]
 8007a66:	2b02      	cmp	r3, #2
 8007a68:	d102      	bne.n	8007a70 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8007a76:	2b01      	cmp	r3, #1
 8007a78:	d101      	bne.n	8007a7e <HAL_PCD_EP_Open+0xaa>
 8007a7a:	2302      	movs	r3, #2
 8007a7c:	e00e      	b.n	8007a9c <HAL_PCD_EP_Open+0xc8>
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2201      	movs	r2, #1
 8007a82:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	68f9      	ldr	r1, [r7, #12]
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	f004 f951 	bl	800bd34 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	2200      	movs	r2, #0
 8007a96:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return ret;
 8007a9a:	7afb      	ldrb	r3, [r7, #11]
}
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	3710      	adds	r7, #16
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	bd80      	pop	{r7, pc}

08007aa4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b084      	sub	sp, #16
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
 8007aac:	460b      	mov	r3, r1
 8007aae:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007ab0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	da0f      	bge.n	8007ad8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007ab8:	78fb      	ldrb	r3, [r7, #3]
 8007aba:	f003 020f 	and.w	r2, r3, #15
 8007abe:	4613      	mov	r3, r2
 8007ac0:	00db      	lsls	r3, r3, #3
 8007ac2:	4413      	add	r3, r2
 8007ac4:	009b      	lsls	r3, r3, #2
 8007ac6:	3310      	adds	r3, #16
 8007ac8:	687a      	ldr	r2, [r7, #4]
 8007aca:	4413      	add	r3, r2
 8007acc:	3304      	adds	r3, #4
 8007ace:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	2201      	movs	r2, #1
 8007ad4:	705a      	strb	r2, [r3, #1]
 8007ad6:	e00f      	b.n	8007af8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007ad8:	78fb      	ldrb	r3, [r7, #3]
 8007ada:	f003 020f 	and.w	r2, r3, #15
 8007ade:	4613      	mov	r3, r2
 8007ae0:	00db      	lsls	r3, r3, #3
 8007ae2:	4413      	add	r3, r2
 8007ae4:	009b      	lsls	r3, r3, #2
 8007ae6:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8007aea:	687a      	ldr	r2, [r7, #4]
 8007aec:	4413      	add	r3, r2
 8007aee:	3304      	adds	r3, #4
 8007af0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	2200      	movs	r2, #0
 8007af6:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8007af8:	78fb      	ldrb	r3, [r7, #3]
 8007afa:	f003 030f 	and.w	r3, r3, #15
 8007afe:	b2da      	uxtb	r2, r3
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8007b0a:	2b01      	cmp	r3, #1
 8007b0c:	d101      	bne.n	8007b12 <HAL_PCD_EP_Close+0x6e>
 8007b0e:	2302      	movs	r3, #2
 8007b10:	e00e      	b.n	8007b30 <HAL_PCD_EP_Close+0x8c>
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	2201      	movs	r2, #1
 8007b16:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	68f9      	ldr	r1, [r7, #12]
 8007b20:	4618      	mov	r0, r3
 8007b22:	f004 f98f 	bl	800be44 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	2200      	movs	r2, #0
 8007b2a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  return HAL_OK;
 8007b2e:	2300      	movs	r3, #0
}
 8007b30:	4618      	mov	r0, r3
 8007b32:	3710      	adds	r7, #16
 8007b34:	46bd      	mov	sp, r7
 8007b36:	bd80      	pop	{r7, pc}

08007b38 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b086      	sub	sp, #24
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	60f8      	str	r0, [r7, #12]
 8007b40:	607a      	str	r2, [r7, #4]
 8007b42:	603b      	str	r3, [r7, #0]
 8007b44:	460b      	mov	r3, r1
 8007b46:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007b48:	7afb      	ldrb	r3, [r7, #11]
 8007b4a:	f003 020f 	and.w	r2, r3, #15
 8007b4e:	4613      	mov	r3, r2
 8007b50:	00db      	lsls	r3, r3, #3
 8007b52:	4413      	add	r3, r2
 8007b54:	009b      	lsls	r3, r3, #2
 8007b56:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8007b5a:	68fa      	ldr	r2, [r7, #12]
 8007b5c:	4413      	add	r3, r2
 8007b5e:	3304      	adds	r3, #4
 8007b60:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007b62:	697b      	ldr	r3, [r7, #20]
 8007b64:	687a      	ldr	r2, [r7, #4]
 8007b66:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8007b68:	697b      	ldr	r3, [r7, #20]
 8007b6a:	683a      	ldr	r2, [r7, #0]
 8007b6c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8007b6e:	697b      	ldr	r3, [r7, #20]
 8007b70:	2200      	movs	r2, #0
 8007b72:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8007b74:	697b      	ldr	r3, [r7, #20]
 8007b76:	2200      	movs	r2, #0
 8007b78:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007b7a:	7afb      	ldrb	r3, [r7, #11]
 8007b7c:	f003 030f 	and.w	r3, r3, #15
 8007b80:	b2da      	uxtb	r2, r3
 8007b82:	697b      	ldr	r3, [r7, #20]
 8007b84:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	799b      	ldrb	r3, [r3, #6]
 8007b8a:	2b01      	cmp	r3, #1
 8007b8c:	d102      	bne.n	8007b94 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007b8e:	687a      	ldr	r2, [r7, #4]
 8007b90:	697b      	ldr	r3, [r7, #20]
 8007b92:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	6818      	ldr	r0, [r3, #0]
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	799b      	ldrb	r3, [r3, #6]
 8007b9c:	461a      	mov	r2, r3
 8007b9e:	6979      	ldr	r1, [r7, #20]
 8007ba0:	f004 fa2c 	bl	800bffc <USB_EPStartXfer>

  return HAL_OK;
 8007ba4:	2300      	movs	r3, #0
}
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	3718      	adds	r7, #24
 8007baa:	46bd      	mov	sp, r7
 8007bac:	bd80      	pop	{r7, pc}

08007bae <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8007bae:	b480      	push	{r7}
 8007bb0:	b083      	sub	sp, #12
 8007bb2:	af00      	add	r7, sp, #0
 8007bb4:	6078      	str	r0, [r7, #4]
 8007bb6:	460b      	mov	r3, r1
 8007bb8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8007bba:	78fb      	ldrb	r3, [r7, #3]
 8007bbc:	f003 020f 	and.w	r2, r3, #15
 8007bc0:	6879      	ldr	r1, [r7, #4]
 8007bc2:	4613      	mov	r3, r2
 8007bc4:	00db      	lsls	r3, r3, #3
 8007bc6:	4413      	add	r3, r2
 8007bc8:	009b      	lsls	r3, r3, #2
 8007bca:	440b      	add	r3, r1
 8007bcc:	f503 731a 	add.w	r3, r3, #616	; 0x268
 8007bd0:	681b      	ldr	r3, [r3, #0]
}
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	370c      	adds	r7, #12
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bdc:	4770      	bx	lr

08007bde <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007bde:	b580      	push	{r7, lr}
 8007be0:	b086      	sub	sp, #24
 8007be2:	af00      	add	r7, sp, #0
 8007be4:	60f8      	str	r0, [r7, #12]
 8007be6:	607a      	str	r2, [r7, #4]
 8007be8:	603b      	str	r3, [r7, #0]
 8007bea:	460b      	mov	r3, r1
 8007bec:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007bee:	7afb      	ldrb	r3, [r7, #11]
 8007bf0:	f003 020f 	and.w	r2, r3, #15
 8007bf4:	4613      	mov	r3, r2
 8007bf6:	00db      	lsls	r3, r3, #3
 8007bf8:	4413      	add	r3, r2
 8007bfa:	009b      	lsls	r3, r3, #2
 8007bfc:	3310      	adds	r3, #16
 8007bfe:	68fa      	ldr	r2, [r7, #12]
 8007c00:	4413      	add	r3, r2
 8007c02:	3304      	adds	r3, #4
 8007c04:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007c06:	697b      	ldr	r3, [r7, #20]
 8007c08:	687a      	ldr	r2, [r7, #4]
 8007c0a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8007c0c:	697b      	ldr	r3, [r7, #20]
 8007c0e:	683a      	ldr	r2, [r7, #0]
 8007c10:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8007c12:	697b      	ldr	r3, [r7, #20]
 8007c14:	2200      	movs	r2, #0
 8007c16:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8007c18:	697b      	ldr	r3, [r7, #20]
 8007c1a:	2201      	movs	r2, #1
 8007c1c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007c1e:	7afb      	ldrb	r3, [r7, #11]
 8007c20:	f003 030f 	and.w	r3, r3, #15
 8007c24:	b2da      	uxtb	r2, r3
 8007c26:	697b      	ldr	r3, [r7, #20]
 8007c28:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	799b      	ldrb	r3, [r3, #6]
 8007c2e:	2b01      	cmp	r3, #1
 8007c30:	d102      	bne.n	8007c38 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007c32:	687a      	ldr	r2, [r7, #4]
 8007c34:	697b      	ldr	r3, [r7, #20]
 8007c36:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	6818      	ldr	r0, [r3, #0]
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	799b      	ldrb	r3, [r3, #6]
 8007c40:	461a      	mov	r2, r3
 8007c42:	6979      	ldr	r1, [r7, #20]
 8007c44:	f004 f9da 	bl	800bffc <USB_EPStartXfer>

  return HAL_OK;
 8007c48:	2300      	movs	r3, #0
}
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	3718      	adds	r7, #24
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	bd80      	pop	{r7, pc}

08007c52 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007c52:	b580      	push	{r7, lr}
 8007c54:	b084      	sub	sp, #16
 8007c56:	af00      	add	r7, sp, #0
 8007c58:	6078      	str	r0, [r7, #4]
 8007c5a:	460b      	mov	r3, r1
 8007c5c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8007c5e:	78fb      	ldrb	r3, [r7, #3]
 8007c60:	f003 030f 	and.w	r3, r3, #15
 8007c64:	687a      	ldr	r2, [r7, #4]
 8007c66:	7912      	ldrb	r2, [r2, #4]
 8007c68:	4293      	cmp	r3, r2
 8007c6a:	d901      	bls.n	8007c70 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8007c6c:	2301      	movs	r3, #1
 8007c6e:	e04f      	b.n	8007d10 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007c70:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	da0f      	bge.n	8007c98 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007c78:	78fb      	ldrb	r3, [r7, #3]
 8007c7a:	f003 020f 	and.w	r2, r3, #15
 8007c7e:	4613      	mov	r3, r2
 8007c80:	00db      	lsls	r3, r3, #3
 8007c82:	4413      	add	r3, r2
 8007c84:	009b      	lsls	r3, r3, #2
 8007c86:	3310      	adds	r3, #16
 8007c88:	687a      	ldr	r2, [r7, #4]
 8007c8a:	4413      	add	r3, r2
 8007c8c:	3304      	adds	r3, #4
 8007c8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	2201      	movs	r2, #1
 8007c94:	705a      	strb	r2, [r3, #1]
 8007c96:	e00d      	b.n	8007cb4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007c98:	78fa      	ldrb	r2, [r7, #3]
 8007c9a:	4613      	mov	r3, r2
 8007c9c:	00db      	lsls	r3, r3, #3
 8007c9e:	4413      	add	r3, r2
 8007ca0:	009b      	lsls	r3, r3, #2
 8007ca2:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8007ca6:	687a      	ldr	r2, [r7, #4]
 8007ca8:	4413      	add	r3, r2
 8007caa:	3304      	adds	r3, #4
 8007cac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	2201      	movs	r2, #1
 8007cb8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007cba:	78fb      	ldrb	r3, [r7, #3]
 8007cbc:	f003 030f 	and.w	r3, r3, #15
 8007cc0:	b2da      	uxtb	r2, r3
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8007ccc:	2b01      	cmp	r3, #1
 8007cce:	d101      	bne.n	8007cd4 <HAL_PCD_EP_SetStall+0x82>
 8007cd0:	2302      	movs	r3, #2
 8007cd2:	e01d      	b.n	8007d10 <HAL_PCD_EP_SetStall+0xbe>
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2201      	movs	r2, #1
 8007cd8:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	68f9      	ldr	r1, [r7, #12]
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	f004 fd62 	bl	800c7ac <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007ce8:	78fb      	ldrb	r3, [r7, #3]
 8007cea:	f003 030f 	and.w	r3, r3, #15
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d109      	bne.n	8007d06 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	6818      	ldr	r0, [r3, #0]
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	7999      	ldrb	r1, [r3, #6]
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8007d00:	461a      	mov	r2, r3
 8007d02:	f004 ff53 	bl	800cbac <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2200      	movs	r2, #0
 8007d0a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8007d0e:	2300      	movs	r3, #0
}
 8007d10:	4618      	mov	r0, r3
 8007d12:	3710      	adds	r7, #16
 8007d14:	46bd      	mov	sp, r7
 8007d16:	bd80      	pop	{r7, pc}

08007d18 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b084      	sub	sp, #16
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
 8007d20:	460b      	mov	r3, r1
 8007d22:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8007d24:	78fb      	ldrb	r3, [r7, #3]
 8007d26:	f003 030f 	and.w	r3, r3, #15
 8007d2a:	687a      	ldr	r2, [r7, #4]
 8007d2c:	7912      	ldrb	r2, [r2, #4]
 8007d2e:	4293      	cmp	r3, r2
 8007d30:	d901      	bls.n	8007d36 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8007d32:	2301      	movs	r3, #1
 8007d34:	e042      	b.n	8007dbc <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007d36:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	da0f      	bge.n	8007d5e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007d3e:	78fb      	ldrb	r3, [r7, #3]
 8007d40:	f003 020f 	and.w	r2, r3, #15
 8007d44:	4613      	mov	r3, r2
 8007d46:	00db      	lsls	r3, r3, #3
 8007d48:	4413      	add	r3, r2
 8007d4a:	009b      	lsls	r3, r3, #2
 8007d4c:	3310      	adds	r3, #16
 8007d4e:	687a      	ldr	r2, [r7, #4]
 8007d50:	4413      	add	r3, r2
 8007d52:	3304      	adds	r3, #4
 8007d54:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	2201      	movs	r2, #1
 8007d5a:	705a      	strb	r2, [r3, #1]
 8007d5c:	e00f      	b.n	8007d7e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007d5e:	78fb      	ldrb	r3, [r7, #3]
 8007d60:	f003 020f 	and.w	r2, r3, #15
 8007d64:	4613      	mov	r3, r2
 8007d66:	00db      	lsls	r3, r3, #3
 8007d68:	4413      	add	r3, r2
 8007d6a:	009b      	lsls	r3, r3, #2
 8007d6c:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8007d70:	687a      	ldr	r2, [r7, #4]
 8007d72:	4413      	add	r3, r2
 8007d74:	3304      	adds	r3, #4
 8007d76:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	2200      	movs	r2, #0
 8007d82:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007d84:	78fb      	ldrb	r3, [r7, #3]
 8007d86:	f003 030f 	and.w	r3, r3, #15
 8007d8a:	b2da      	uxtb	r2, r3
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8007d96:	2b01      	cmp	r3, #1
 8007d98:	d101      	bne.n	8007d9e <HAL_PCD_EP_ClrStall+0x86>
 8007d9a:	2302      	movs	r3, #2
 8007d9c:	e00e      	b.n	8007dbc <HAL_PCD_EP_ClrStall+0xa4>
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2201      	movs	r2, #1
 8007da2:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	68f9      	ldr	r1, [r7, #12]
 8007dac:	4618      	mov	r0, r3
 8007dae:	f004 fd6b 	bl	800c888 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	2200      	movs	r2, #0
 8007db6:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8007dba:	2300      	movs	r3, #0
}
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	3710      	adds	r7, #16
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	bd80      	pop	{r7, pc}

08007dc4 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b084      	sub	sp, #16
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
 8007dcc:	460b      	mov	r3, r1
 8007dce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8007dd0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	da0c      	bge.n	8007df2 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007dd8:	78fb      	ldrb	r3, [r7, #3]
 8007dda:	f003 020f 	and.w	r2, r3, #15
 8007dde:	4613      	mov	r3, r2
 8007de0:	00db      	lsls	r3, r3, #3
 8007de2:	4413      	add	r3, r2
 8007de4:	009b      	lsls	r3, r3, #2
 8007de6:	3310      	adds	r3, #16
 8007de8:	687a      	ldr	r2, [r7, #4]
 8007dea:	4413      	add	r3, r2
 8007dec:	3304      	adds	r3, #4
 8007dee:	60fb      	str	r3, [r7, #12]
 8007df0:	e00c      	b.n	8007e0c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007df2:	78fb      	ldrb	r3, [r7, #3]
 8007df4:	f003 020f 	and.w	r2, r3, #15
 8007df8:	4613      	mov	r3, r2
 8007dfa:	00db      	lsls	r3, r3, #3
 8007dfc:	4413      	add	r3, r2
 8007dfe:	009b      	lsls	r3, r3, #2
 8007e00:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8007e04:	687a      	ldr	r2, [r7, #4]
 8007e06:	4413      	add	r3, r2
 8007e08:	3304      	adds	r3, #4
 8007e0a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	68f9      	ldr	r1, [r7, #12]
 8007e12:	4618      	mov	r0, r3
 8007e14:	f004 fb8a 	bl	800c52c <USB_EPStopXfer>
 8007e18:	4603      	mov	r3, r0
 8007e1a:	72fb      	strb	r3, [r7, #11]

  return ret;
 8007e1c:	7afb      	ldrb	r3, [r7, #11]
}
 8007e1e:	4618      	mov	r0, r3
 8007e20:	3710      	adds	r7, #16
 8007e22:	46bd      	mov	sp, r7
 8007e24:	bd80      	pop	{r7, pc}

08007e26 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007e26:	b580      	push	{r7, lr}
 8007e28:	b08a      	sub	sp, #40	; 0x28
 8007e2a:	af02      	add	r7, sp, #8
 8007e2c:	6078      	str	r0, [r7, #4]
 8007e2e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e36:	697b      	ldr	r3, [r7, #20]
 8007e38:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8007e3a:	683a      	ldr	r2, [r7, #0]
 8007e3c:	4613      	mov	r3, r2
 8007e3e:	00db      	lsls	r3, r3, #3
 8007e40:	4413      	add	r3, r2
 8007e42:	009b      	lsls	r3, r3, #2
 8007e44:	3310      	adds	r3, #16
 8007e46:	687a      	ldr	r2, [r7, #4]
 8007e48:	4413      	add	r3, r2
 8007e4a:	3304      	adds	r3, #4
 8007e4c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	695a      	ldr	r2, [r3, #20]
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	691b      	ldr	r3, [r3, #16]
 8007e56:	429a      	cmp	r2, r3
 8007e58:	d901      	bls.n	8007e5e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8007e5a:	2301      	movs	r3, #1
 8007e5c:	e06b      	b.n	8007f36 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	691a      	ldr	r2, [r3, #16]
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	695b      	ldr	r3, [r3, #20]
 8007e66:	1ad3      	subs	r3, r2, r3
 8007e68:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	689b      	ldr	r3, [r3, #8]
 8007e6e:	69fa      	ldr	r2, [r7, #28]
 8007e70:	429a      	cmp	r2, r3
 8007e72:	d902      	bls.n	8007e7a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	689b      	ldr	r3, [r3, #8]
 8007e78:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8007e7a:	69fb      	ldr	r3, [r7, #28]
 8007e7c:	3303      	adds	r3, #3
 8007e7e:	089b      	lsrs	r3, r3, #2
 8007e80:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007e82:	e02a      	b.n	8007eda <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	691a      	ldr	r2, [r3, #16]
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	695b      	ldr	r3, [r3, #20]
 8007e8c:	1ad3      	subs	r3, r2, r3
 8007e8e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	689b      	ldr	r3, [r3, #8]
 8007e94:	69fa      	ldr	r2, [r7, #28]
 8007e96:	429a      	cmp	r2, r3
 8007e98:	d902      	bls.n	8007ea0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	689b      	ldr	r3, [r3, #8]
 8007e9e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8007ea0:	69fb      	ldr	r3, [r7, #28]
 8007ea2:	3303      	adds	r3, #3
 8007ea4:	089b      	lsrs	r3, r3, #2
 8007ea6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	68d9      	ldr	r1, [r3, #12]
 8007eac:	683b      	ldr	r3, [r7, #0]
 8007eae:	b2da      	uxtb	r2, r3
 8007eb0:	69fb      	ldr	r3, [r7, #28]
 8007eb2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007eb8:	9300      	str	r3, [sp, #0]
 8007eba:	4603      	mov	r3, r0
 8007ebc:	6978      	ldr	r0, [r7, #20]
 8007ebe:	f004 fbdf 	bl	800c680 <USB_WritePacket>

    ep->xfer_buff  += len;
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	68da      	ldr	r2, [r3, #12]
 8007ec6:	69fb      	ldr	r3, [r7, #28]
 8007ec8:	441a      	add	r2, r3
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	695a      	ldr	r2, [r3, #20]
 8007ed2:	69fb      	ldr	r3, [r7, #28]
 8007ed4:	441a      	add	r2, r3
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	015a      	lsls	r2, r3, #5
 8007ede:	693b      	ldr	r3, [r7, #16]
 8007ee0:	4413      	add	r3, r2
 8007ee2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ee6:	699b      	ldr	r3, [r3, #24]
 8007ee8:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007eea:	69ba      	ldr	r2, [r7, #24]
 8007eec:	429a      	cmp	r2, r3
 8007eee:	d809      	bhi.n	8007f04 <PCD_WriteEmptyTxFifo+0xde>
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	695a      	ldr	r2, [r3, #20]
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007ef8:	429a      	cmp	r2, r3
 8007efa:	d203      	bcs.n	8007f04 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	691b      	ldr	r3, [r3, #16]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d1bf      	bne.n	8007e84 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	691a      	ldr	r2, [r3, #16]
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	695b      	ldr	r3, [r3, #20]
 8007f0c:	429a      	cmp	r2, r3
 8007f0e:	d811      	bhi.n	8007f34 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007f10:	683b      	ldr	r3, [r7, #0]
 8007f12:	f003 030f 	and.w	r3, r3, #15
 8007f16:	2201      	movs	r2, #1
 8007f18:	fa02 f303 	lsl.w	r3, r2, r3
 8007f1c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007f1e:	693b      	ldr	r3, [r7, #16]
 8007f20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007f26:	68bb      	ldr	r3, [r7, #8]
 8007f28:	43db      	mvns	r3, r3
 8007f2a:	6939      	ldr	r1, [r7, #16]
 8007f2c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007f30:	4013      	ands	r3, r2
 8007f32:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8007f34:	2300      	movs	r3, #0
}
 8007f36:	4618      	mov	r0, r3
 8007f38:	3720      	adds	r7, #32
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	bd80      	pop	{r7, pc}
	...

08007f40 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b088      	sub	sp, #32
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
 8007f48:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f50:	69fb      	ldr	r3, [r7, #28]
 8007f52:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8007f54:	69fb      	ldr	r3, [r7, #28]
 8007f56:	333c      	adds	r3, #60	; 0x3c
 8007f58:	3304      	adds	r3, #4
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	015a      	lsls	r2, r3, #5
 8007f62:	69bb      	ldr	r3, [r7, #24]
 8007f64:	4413      	add	r3, r2
 8007f66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f6a:	689b      	ldr	r3, [r3, #8]
 8007f6c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	799b      	ldrb	r3, [r3, #6]
 8007f72:	2b01      	cmp	r3, #1
 8007f74:	d17b      	bne.n	800806e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8007f76:	693b      	ldr	r3, [r7, #16]
 8007f78:	f003 0308 	and.w	r3, r3, #8
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d015      	beq.n	8007fac <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007f80:	697b      	ldr	r3, [r7, #20]
 8007f82:	4a61      	ldr	r2, [pc, #388]	; (8008108 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8007f84:	4293      	cmp	r3, r2
 8007f86:	f240 80b9 	bls.w	80080fc <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007f8a:	693b      	ldr	r3, [r7, #16]
 8007f8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	f000 80b3 	beq.w	80080fc <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	015a      	lsls	r2, r3, #5
 8007f9a:	69bb      	ldr	r3, [r7, #24]
 8007f9c:	4413      	add	r3, r2
 8007f9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fa2:	461a      	mov	r2, r3
 8007fa4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007fa8:	6093      	str	r3, [r2, #8]
 8007faa:	e0a7      	b.n	80080fc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8007fac:	693b      	ldr	r3, [r7, #16]
 8007fae:	f003 0320 	and.w	r3, r3, #32
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d009      	beq.n	8007fca <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	015a      	lsls	r2, r3, #5
 8007fba:	69bb      	ldr	r3, [r7, #24]
 8007fbc:	4413      	add	r3, r2
 8007fbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fc2:	461a      	mov	r2, r3
 8007fc4:	2320      	movs	r3, #32
 8007fc6:	6093      	str	r3, [r2, #8]
 8007fc8:	e098      	b.n	80080fc <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8007fca:	693b      	ldr	r3, [r7, #16]
 8007fcc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	f040 8093 	bne.w	80080fc <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007fd6:	697b      	ldr	r3, [r7, #20]
 8007fd8:	4a4b      	ldr	r2, [pc, #300]	; (8008108 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	d90f      	bls.n	8007ffe <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007fde:	693b      	ldr	r3, [r7, #16]
 8007fe0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d00a      	beq.n	8007ffe <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	015a      	lsls	r2, r3, #5
 8007fec:	69bb      	ldr	r3, [r7, #24]
 8007fee:	4413      	add	r3, r2
 8007ff0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ff4:	461a      	mov	r2, r3
 8007ff6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007ffa:	6093      	str	r3, [r2, #8]
 8007ffc:	e07e      	b.n	80080fc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8007ffe:	683a      	ldr	r2, [r7, #0]
 8008000:	4613      	mov	r3, r2
 8008002:	00db      	lsls	r3, r3, #3
 8008004:	4413      	add	r3, r2
 8008006:	009b      	lsls	r3, r3, #2
 8008008:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800800c:	687a      	ldr	r2, [r7, #4]
 800800e:	4413      	add	r3, r2
 8008010:	3304      	adds	r3, #4
 8008012:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	6a1a      	ldr	r2, [r3, #32]
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	0159      	lsls	r1, r3, #5
 800801c:	69bb      	ldr	r3, [r7, #24]
 800801e:	440b      	add	r3, r1
 8008020:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008024:	691b      	ldr	r3, [r3, #16]
 8008026:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800802a:	1ad2      	subs	r2, r2, r3
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d114      	bne.n	8008060 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	691b      	ldr	r3, [r3, #16]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d109      	bne.n	8008052 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	6818      	ldr	r0, [r3, #0]
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8008048:	461a      	mov	r2, r3
 800804a:	2101      	movs	r1, #1
 800804c:	f004 fdae 	bl	800cbac <USB_EP0_OutStart>
 8008050:	e006      	b.n	8008060 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	68da      	ldr	r2, [r3, #12]
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	695b      	ldr	r3, [r3, #20]
 800805a:	441a      	add	r2, r3
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	b2db      	uxtb	r3, r3
 8008064:	4619      	mov	r1, r3
 8008066:	6878      	ldr	r0, [r7, #4]
 8008068:	f008 fe52 	bl	8010d10 <HAL_PCD_DataOutStageCallback>
 800806c:	e046      	b.n	80080fc <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800806e:	697b      	ldr	r3, [r7, #20]
 8008070:	4a26      	ldr	r2, [pc, #152]	; (800810c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8008072:	4293      	cmp	r3, r2
 8008074:	d124      	bne.n	80080c0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8008076:	693b      	ldr	r3, [r7, #16]
 8008078:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800807c:	2b00      	cmp	r3, #0
 800807e:	d00a      	beq.n	8008096 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	015a      	lsls	r2, r3, #5
 8008084:	69bb      	ldr	r3, [r7, #24]
 8008086:	4413      	add	r3, r2
 8008088:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800808c:	461a      	mov	r2, r3
 800808e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008092:	6093      	str	r3, [r2, #8]
 8008094:	e032      	b.n	80080fc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008096:	693b      	ldr	r3, [r7, #16]
 8008098:	f003 0320 	and.w	r3, r3, #32
 800809c:	2b00      	cmp	r3, #0
 800809e:	d008      	beq.n	80080b2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80080a0:	683b      	ldr	r3, [r7, #0]
 80080a2:	015a      	lsls	r2, r3, #5
 80080a4:	69bb      	ldr	r3, [r7, #24]
 80080a6:	4413      	add	r3, r2
 80080a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080ac:	461a      	mov	r2, r3
 80080ae:	2320      	movs	r3, #32
 80080b0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	b2db      	uxtb	r3, r3
 80080b6:	4619      	mov	r1, r3
 80080b8:	6878      	ldr	r0, [r7, #4]
 80080ba:	f008 fe29 	bl	8010d10 <HAL_PCD_DataOutStageCallback>
 80080be:	e01d      	b.n	80080fc <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d114      	bne.n	80080f0 <PCD_EP_OutXfrComplete_int+0x1b0>
 80080c6:	6879      	ldr	r1, [r7, #4]
 80080c8:	683a      	ldr	r2, [r7, #0]
 80080ca:	4613      	mov	r3, r2
 80080cc:	00db      	lsls	r3, r3, #3
 80080ce:	4413      	add	r3, r2
 80080d0:	009b      	lsls	r3, r3, #2
 80080d2:	440b      	add	r3, r1
 80080d4:	f503 7319 	add.w	r3, r3, #612	; 0x264
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d108      	bne.n	80080f0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6818      	ldr	r0, [r3, #0]
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80080e8:	461a      	mov	r2, r3
 80080ea:	2100      	movs	r1, #0
 80080ec:	f004 fd5e 	bl	800cbac <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	b2db      	uxtb	r3, r3
 80080f4:	4619      	mov	r1, r3
 80080f6:	6878      	ldr	r0, [r7, #4]
 80080f8:	f008 fe0a 	bl	8010d10 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80080fc:	2300      	movs	r3, #0
}
 80080fe:	4618      	mov	r0, r3
 8008100:	3720      	adds	r7, #32
 8008102:	46bd      	mov	sp, r7
 8008104:	bd80      	pop	{r7, pc}
 8008106:	bf00      	nop
 8008108:	4f54300a 	.word	0x4f54300a
 800810c:	4f54310a 	.word	0x4f54310a

08008110 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008110:	b580      	push	{r7, lr}
 8008112:	b086      	sub	sp, #24
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
 8008118:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008120:	697b      	ldr	r3, [r7, #20]
 8008122:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8008124:	697b      	ldr	r3, [r7, #20]
 8008126:	333c      	adds	r3, #60	; 0x3c
 8008128:	3304      	adds	r3, #4
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	015a      	lsls	r2, r3, #5
 8008132:	693b      	ldr	r3, [r7, #16]
 8008134:	4413      	add	r3, r2
 8008136:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800813a:	689b      	ldr	r3, [r3, #8]
 800813c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	4a15      	ldr	r2, [pc, #84]	; (8008198 <PCD_EP_OutSetupPacket_int+0x88>)
 8008142:	4293      	cmp	r3, r2
 8008144:	d90e      	bls.n	8008164 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008146:	68bb      	ldr	r3, [r7, #8]
 8008148:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800814c:	2b00      	cmp	r3, #0
 800814e:	d009      	beq.n	8008164 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	015a      	lsls	r2, r3, #5
 8008154:	693b      	ldr	r3, [r7, #16]
 8008156:	4413      	add	r3, r2
 8008158:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800815c:	461a      	mov	r2, r3
 800815e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008162:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8008164:	6878      	ldr	r0, [r7, #4]
 8008166:	f008 fdc1 	bl	8010cec <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	4a0a      	ldr	r2, [pc, #40]	; (8008198 <PCD_EP_OutSetupPacket_int+0x88>)
 800816e:	4293      	cmp	r3, r2
 8008170:	d90c      	bls.n	800818c <PCD_EP_OutSetupPacket_int+0x7c>
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	799b      	ldrb	r3, [r3, #6]
 8008176:	2b01      	cmp	r3, #1
 8008178:	d108      	bne.n	800818c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	6818      	ldr	r0, [r3, #0]
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8008184:	461a      	mov	r2, r3
 8008186:	2101      	movs	r1, #1
 8008188:	f004 fd10 	bl	800cbac <USB_EP0_OutStart>
  }

  return HAL_OK;
 800818c:	2300      	movs	r3, #0
}
 800818e:	4618      	mov	r0, r3
 8008190:	3718      	adds	r7, #24
 8008192:	46bd      	mov	sp, r7
 8008194:	bd80      	pop	{r7, pc}
 8008196:	bf00      	nop
 8008198:	4f54300a 	.word	0x4f54300a

0800819c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800819c:	b480      	push	{r7}
 800819e:	b085      	sub	sp, #20
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
 80081a4:	460b      	mov	r3, r1
 80081a6:	70fb      	strb	r3, [r7, #3]
 80081a8:	4613      	mov	r3, r2
 80081aa:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081b2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80081b4:	78fb      	ldrb	r3, [r7, #3]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d107      	bne.n	80081ca <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80081ba:	883b      	ldrh	r3, [r7, #0]
 80081bc:	0419      	lsls	r1, r3, #16
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	68ba      	ldr	r2, [r7, #8]
 80081c4:	430a      	orrs	r2, r1
 80081c6:	629a      	str	r2, [r3, #40]	; 0x28
 80081c8:	e028      	b.n	800821c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081d0:	0c1b      	lsrs	r3, r3, #16
 80081d2:	68ba      	ldr	r2, [r7, #8]
 80081d4:	4413      	add	r3, r2
 80081d6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80081d8:	2300      	movs	r3, #0
 80081da:	73fb      	strb	r3, [r7, #15]
 80081dc:	e00d      	b.n	80081fa <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681a      	ldr	r2, [r3, #0]
 80081e2:	7bfb      	ldrb	r3, [r7, #15]
 80081e4:	3340      	adds	r3, #64	; 0x40
 80081e6:	009b      	lsls	r3, r3, #2
 80081e8:	4413      	add	r3, r2
 80081ea:	685b      	ldr	r3, [r3, #4]
 80081ec:	0c1b      	lsrs	r3, r3, #16
 80081ee:	68ba      	ldr	r2, [r7, #8]
 80081f0:	4413      	add	r3, r2
 80081f2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80081f4:	7bfb      	ldrb	r3, [r7, #15]
 80081f6:	3301      	adds	r3, #1
 80081f8:	73fb      	strb	r3, [r7, #15]
 80081fa:	7bfa      	ldrb	r2, [r7, #15]
 80081fc:	78fb      	ldrb	r3, [r7, #3]
 80081fe:	3b01      	subs	r3, #1
 8008200:	429a      	cmp	r2, r3
 8008202:	d3ec      	bcc.n	80081de <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8008204:	883b      	ldrh	r3, [r7, #0]
 8008206:	0418      	lsls	r0, r3, #16
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	6819      	ldr	r1, [r3, #0]
 800820c:	78fb      	ldrb	r3, [r7, #3]
 800820e:	3b01      	subs	r3, #1
 8008210:	68ba      	ldr	r2, [r7, #8]
 8008212:	4302      	orrs	r2, r0
 8008214:	3340      	adds	r3, #64	; 0x40
 8008216:	009b      	lsls	r3, r3, #2
 8008218:	440b      	add	r3, r1
 800821a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800821c:	2300      	movs	r3, #0
}
 800821e:	4618      	mov	r0, r3
 8008220:	3714      	adds	r7, #20
 8008222:	46bd      	mov	sp, r7
 8008224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008228:	4770      	bx	lr

0800822a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800822a:	b480      	push	{r7}
 800822c:	b083      	sub	sp, #12
 800822e:	af00      	add	r7, sp, #0
 8008230:	6078      	str	r0, [r7, #4]
 8008232:	460b      	mov	r3, r1
 8008234:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	887a      	ldrh	r2, [r7, #2]
 800823c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800823e:	2300      	movs	r3, #0
}
 8008240:	4618      	mov	r0, r3
 8008242:	370c      	adds	r7, #12
 8008244:	46bd      	mov	sp, r7
 8008246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824a:	4770      	bx	lr

0800824c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800824c:	b480      	push	{r7}
 800824e:	b083      	sub	sp, #12
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
 8008254:	460b      	mov	r3, r1
 8008256:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8008258:	bf00      	nop
 800825a:	370c      	adds	r7, #12
 800825c:	46bd      	mov	sp, r7
 800825e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008262:	4770      	bx	lr

08008264 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b086      	sub	sp, #24
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d101      	bne.n	8008276 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008272:	2301      	movs	r3, #1
 8008274:	e267      	b.n	8008746 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	f003 0301 	and.w	r3, r3, #1
 800827e:	2b00      	cmp	r3, #0
 8008280:	d075      	beq.n	800836e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008282:	4b88      	ldr	r3, [pc, #544]	; (80084a4 <HAL_RCC_OscConfig+0x240>)
 8008284:	689b      	ldr	r3, [r3, #8]
 8008286:	f003 030c 	and.w	r3, r3, #12
 800828a:	2b04      	cmp	r3, #4
 800828c:	d00c      	beq.n	80082a8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800828e:	4b85      	ldr	r3, [pc, #532]	; (80084a4 <HAL_RCC_OscConfig+0x240>)
 8008290:	689b      	ldr	r3, [r3, #8]
 8008292:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008296:	2b08      	cmp	r3, #8
 8008298:	d112      	bne.n	80082c0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800829a:	4b82      	ldr	r3, [pc, #520]	; (80084a4 <HAL_RCC_OscConfig+0x240>)
 800829c:	685b      	ldr	r3, [r3, #4]
 800829e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80082a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80082a6:	d10b      	bne.n	80082c0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80082a8:	4b7e      	ldr	r3, [pc, #504]	; (80084a4 <HAL_RCC_OscConfig+0x240>)
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d05b      	beq.n	800836c <HAL_RCC_OscConfig+0x108>
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	685b      	ldr	r3, [r3, #4]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d157      	bne.n	800836c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80082bc:	2301      	movs	r3, #1
 80082be:	e242      	b.n	8008746 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	685b      	ldr	r3, [r3, #4]
 80082c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80082c8:	d106      	bne.n	80082d8 <HAL_RCC_OscConfig+0x74>
 80082ca:	4b76      	ldr	r3, [pc, #472]	; (80084a4 <HAL_RCC_OscConfig+0x240>)
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	4a75      	ldr	r2, [pc, #468]	; (80084a4 <HAL_RCC_OscConfig+0x240>)
 80082d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80082d4:	6013      	str	r3, [r2, #0]
 80082d6:	e01d      	b.n	8008314 <HAL_RCC_OscConfig+0xb0>
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	685b      	ldr	r3, [r3, #4]
 80082dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80082e0:	d10c      	bne.n	80082fc <HAL_RCC_OscConfig+0x98>
 80082e2:	4b70      	ldr	r3, [pc, #448]	; (80084a4 <HAL_RCC_OscConfig+0x240>)
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	4a6f      	ldr	r2, [pc, #444]	; (80084a4 <HAL_RCC_OscConfig+0x240>)
 80082e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80082ec:	6013      	str	r3, [r2, #0]
 80082ee:	4b6d      	ldr	r3, [pc, #436]	; (80084a4 <HAL_RCC_OscConfig+0x240>)
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	4a6c      	ldr	r2, [pc, #432]	; (80084a4 <HAL_RCC_OscConfig+0x240>)
 80082f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80082f8:	6013      	str	r3, [r2, #0]
 80082fa:	e00b      	b.n	8008314 <HAL_RCC_OscConfig+0xb0>
 80082fc:	4b69      	ldr	r3, [pc, #420]	; (80084a4 <HAL_RCC_OscConfig+0x240>)
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	4a68      	ldr	r2, [pc, #416]	; (80084a4 <HAL_RCC_OscConfig+0x240>)
 8008302:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008306:	6013      	str	r3, [r2, #0]
 8008308:	4b66      	ldr	r3, [pc, #408]	; (80084a4 <HAL_RCC_OscConfig+0x240>)
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	4a65      	ldr	r2, [pc, #404]	; (80084a4 <HAL_RCC_OscConfig+0x240>)
 800830e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008312:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	685b      	ldr	r3, [r3, #4]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d013      	beq.n	8008344 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800831c:	f7fc ffae 	bl	800527c <HAL_GetTick>
 8008320:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008322:	e008      	b.n	8008336 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008324:	f7fc ffaa 	bl	800527c <HAL_GetTick>
 8008328:	4602      	mov	r2, r0
 800832a:	693b      	ldr	r3, [r7, #16]
 800832c:	1ad3      	subs	r3, r2, r3
 800832e:	2b64      	cmp	r3, #100	; 0x64
 8008330:	d901      	bls.n	8008336 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008332:	2303      	movs	r3, #3
 8008334:	e207      	b.n	8008746 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008336:	4b5b      	ldr	r3, [pc, #364]	; (80084a4 <HAL_RCC_OscConfig+0x240>)
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800833e:	2b00      	cmp	r3, #0
 8008340:	d0f0      	beq.n	8008324 <HAL_RCC_OscConfig+0xc0>
 8008342:	e014      	b.n	800836e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008344:	f7fc ff9a 	bl	800527c <HAL_GetTick>
 8008348:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800834a:	e008      	b.n	800835e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800834c:	f7fc ff96 	bl	800527c <HAL_GetTick>
 8008350:	4602      	mov	r2, r0
 8008352:	693b      	ldr	r3, [r7, #16]
 8008354:	1ad3      	subs	r3, r2, r3
 8008356:	2b64      	cmp	r3, #100	; 0x64
 8008358:	d901      	bls.n	800835e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800835a:	2303      	movs	r3, #3
 800835c:	e1f3      	b.n	8008746 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800835e:	4b51      	ldr	r3, [pc, #324]	; (80084a4 <HAL_RCC_OscConfig+0x240>)
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008366:	2b00      	cmp	r3, #0
 8008368:	d1f0      	bne.n	800834c <HAL_RCC_OscConfig+0xe8>
 800836a:	e000      	b.n	800836e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800836c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	f003 0302 	and.w	r3, r3, #2
 8008376:	2b00      	cmp	r3, #0
 8008378:	d063      	beq.n	8008442 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800837a:	4b4a      	ldr	r3, [pc, #296]	; (80084a4 <HAL_RCC_OscConfig+0x240>)
 800837c:	689b      	ldr	r3, [r3, #8]
 800837e:	f003 030c 	and.w	r3, r3, #12
 8008382:	2b00      	cmp	r3, #0
 8008384:	d00b      	beq.n	800839e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008386:	4b47      	ldr	r3, [pc, #284]	; (80084a4 <HAL_RCC_OscConfig+0x240>)
 8008388:	689b      	ldr	r3, [r3, #8]
 800838a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800838e:	2b08      	cmp	r3, #8
 8008390:	d11c      	bne.n	80083cc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008392:	4b44      	ldr	r3, [pc, #272]	; (80084a4 <HAL_RCC_OscConfig+0x240>)
 8008394:	685b      	ldr	r3, [r3, #4]
 8008396:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800839a:	2b00      	cmp	r3, #0
 800839c:	d116      	bne.n	80083cc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800839e:	4b41      	ldr	r3, [pc, #260]	; (80084a4 <HAL_RCC_OscConfig+0x240>)
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	f003 0302 	and.w	r3, r3, #2
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d005      	beq.n	80083b6 <HAL_RCC_OscConfig+0x152>
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	68db      	ldr	r3, [r3, #12]
 80083ae:	2b01      	cmp	r3, #1
 80083b0:	d001      	beq.n	80083b6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80083b2:	2301      	movs	r3, #1
 80083b4:	e1c7      	b.n	8008746 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80083b6:	4b3b      	ldr	r3, [pc, #236]	; (80084a4 <HAL_RCC_OscConfig+0x240>)
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	691b      	ldr	r3, [r3, #16]
 80083c2:	00db      	lsls	r3, r3, #3
 80083c4:	4937      	ldr	r1, [pc, #220]	; (80084a4 <HAL_RCC_OscConfig+0x240>)
 80083c6:	4313      	orrs	r3, r2
 80083c8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80083ca:	e03a      	b.n	8008442 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	68db      	ldr	r3, [r3, #12]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d020      	beq.n	8008416 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80083d4:	4b34      	ldr	r3, [pc, #208]	; (80084a8 <HAL_RCC_OscConfig+0x244>)
 80083d6:	2201      	movs	r2, #1
 80083d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083da:	f7fc ff4f 	bl	800527c <HAL_GetTick>
 80083de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80083e0:	e008      	b.n	80083f4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80083e2:	f7fc ff4b 	bl	800527c <HAL_GetTick>
 80083e6:	4602      	mov	r2, r0
 80083e8:	693b      	ldr	r3, [r7, #16]
 80083ea:	1ad3      	subs	r3, r2, r3
 80083ec:	2b02      	cmp	r3, #2
 80083ee:	d901      	bls.n	80083f4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80083f0:	2303      	movs	r3, #3
 80083f2:	e1a8      	b.n	8008746 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80083f4:	4b2b      	ldr	r3, [pc, #172]	; (80084a4 <HAL_RCC_OscConfig+0x240>)
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	f003 0302 	and.w	r3, r3, #2
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d0f0      	beq.n	80083e2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008400:	4b28      	ldr	r3, [pc, #160]	; (80084a4 <HAL_RCC_OscConfig+0x240>)
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	691b      	ldr	r3, [r3, #16]
 800840c:	00db      	lsls	r3, r3, #3
 800840e:	4925      	ldr	r1, [pc, #148]	; (80084a4 <HAL_RCC_OscConfig+0x240>)
 8008410:	4313      	orrs	r3, r2
 8008412:	600b      	str	r3, [r1, #0]
 8008414:	e015      	b.n	8008442 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008416:	4b24      	ldr	r3, [pc, #144]	; (80084a8 <HAL_RCC_OscConfig+0x244>)
 8008418:	2200      	movs	r2, #0
 800841a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800841c:	f7fc ff2e 	bl	800527c <HAL_GetTick>
 8008420:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008422:	e008      	b.n	8008436 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008424:	f7fc ff2a 	bl	800527c <HAL_GetTick>
 8008428:	4602      	mov	r2, r0
 800842a:	693b      	ldr	r3, [r7, #16]
 800842c:	1ad3      	subs	r3, r2, r3
 800842e:	2b02      	cmp	r3, #2
 8008430:	d901      	bls.n	8008436 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008432:	2303      	movs	r3, #3
 8008434:	e187      	b.n	8008746 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008436:	4b1b      	ldr	r3, [pc, #108]	; (80084a4 <HAL_RCC_OscConfig+0x240>)
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	f003 0302 	and.w	r3, r3, #2
 800843e:	2b00      	cmp	r3, #0
 8008440:	d1f0      	bne.n	8008424 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	f003 0308 	and.w	r3, r3, #8
 800844a:	2b00      	cmp	r3, #0
 800844c:	d036      	beq.n	80084bc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	695b      	ldr	r3, [r3, #20]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d016      	beq.n	8008484 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008456:	4b15      	ldr	r3, [pc, #84]	; (80084ac <HAL_RCC_OscConfig+0x248>)
 8008458:	2201      	movs	r2, #1
 800845a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800845c:	f7fc ff0e 	bl	800527c <HAL_GetTick>
 8008460:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008462:	e008      	b.n	8008476 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008464:	f7fc ff0a 	bl	800527c <HAL_GetTick>
 8008468:	4602      	mov	r2, r0
 800846a:	693b      	ldr	r3, [r7, #16]
 800846c:	1ad3      	subs	r3, r2, r3
 800846e:	2b02      	cmp	r3, #2
 8008470:	d901      	bls.n	8008476 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008472:	2303      	movs	r3, #3
 8008474:	e167      	b.n	8008746 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008476:	4b0b      	ldr	r3, [pc, #44]	; (80084a4 <HAL_RCC_OscConfig+0x240>)
 8008478:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800847a:	f003 0302 	and.w	r3, r3, #2
 800847e:	2b00      	cmp	r3, #0
 8008480:	d0f0      	beq.n	8008464 <HAL_RCC_OscConfig+0x200>
 8008482:	e01b      	b.n	80084bc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008484:	4b09      	ldr	r3, [pc, #36]	; (80084ac <HAL_RCC_OscConfig+0x248>)
 8008486:	2200      	movs	r2, #0
 8008488:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800848a:	f7fc fef7 	bl	800527c <HAL_GetTick>
 800848e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008490:	e00e      	b.n	80084b0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008492:	f7fc fef3 	bl	800527c <HAL_GetTick>
 8008496:	4602      	mov	r2, r0
 8008498:	693b      	ldr	r3, [r7, #16]
 800849a:	1ad3      	subs	r3, r2, r3
 800849c:	2b02      	cmp	r3, #2
 800849e:	d907      	bls.n	80084b0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80084a0:	2303      	movs	r3, #3
 80084a2:	e150      	b.n	8008746 <HAL_RCC_OscConfig+0x4e2>
 80084a4:	40023800 	.word	0x40023800
 80084a8:	42470000 	.word	0x42470000
 80084ac:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80084b0:	4b88      	ldr	r3, [pc, #544]	; (80086d4 <HAL_RCC_OscConfig+0x470>)
 80084b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80084b4:	f003 0302 	and.w	r3, r3, #2
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d1ea      	bne.n	8008492 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	f003 0304 	and.w	r3, r3, #4
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	f000 8097 	beq.w	80085f8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80084ca:	2300      	movs	r3, #0
 80084cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80084ce:	4b81      	ldr	r3, [pc, #516]	; (80086d4 <HAL_RCC_OscConfig+0x470>)
 80084d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d10f      	bne.n	80084fa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80084da:	2300      	movs	r3, #0
 80084dc:	60bb      	str	r3, [r7, #8]
 80084de:	4b7d      	ldr	r3, [pc, #500]	; (80086d4 <HAL_RCC_OscConfig+0x470>)
 80084e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084e2:	4a7c      	ldr	r2, [pc, #496]	; (80086d4 <HAL_RCC_OscConfig+0x470>)
 80084e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80084e8:	6413      	str	r3, [r2, #64]	; 0x40
 80084ea:	4b7a      	ldr	r3, [pc, #488]	; (80086d4 <HAL_RCC_OscConfig+0x470>)
 80084ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80084f2:	60bb      	str	r3, [r7, #8]
 80084f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80084f6:	2301      	movs	r3, #1
 80084f8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80084fa:	4b77      	ldr	r3, [pc, #476]	; (80086d8 <HAL_RCC_OscConfig+0x474>)
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008502:	2b00      	cmp	r3, #0
 8008504:	d118      	bne.n	8008538 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008506:	4b74      	ldr	r3, [pc, #464]	; (80086d8 <HAL_RCC_OscConfig+0x474>)
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	4a73      	ldr	r2, [pc, #460]	; (80086d8 <HAL_RCC_OscConfig+0x474>)
 800850c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008510:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008512:	f7fc feb3 	bl	800527c <HAL_GetTick>
 8008516:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008518:	e008      	b.n	800852c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800851a:	f7fc feaf 	bl	800527c <HAL_GetTick>
 800851e:	4602      	mov	r2, r0
 8008520:	693b      	ldr	r3, [r7, #16]
 8008522:	1ad3      	subs	r3, r2, r3
 8008524:	2b02      	cmp	r3, #2
 8008526:	d901      	bls.n	800852c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008528:	2303      	movs	r3, #3
 800852a:	e10c      	b.n	8008746 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800852c:	4b6a      	ldr	r3, [pc, #424]	; (80086d8 <HAL_RCC_OscConfig+0x474>)
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008534:	2b00      	cmp	r3, #0
 8008536:	d0f0      	beq.n	800851a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	689b      	ldr	r3, [r3, #8]
 800853c:	2b01      	cmp	r3, #1
 800853e:	d106      	bne.n	800854e <HAL_RCC_OscConfig+0x2ea>
 8008540:	4b64      	ldr	r3, [pc, #400]	; (80086d4 <HAL_RCC_OscConfig+0x470>)
 8008542:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008544:	4a63      	ldr	r2, [pc, #396]	; (80086d4 <HAL_RCC_OscConfig+0x470>)
 8008546:	f043 0301 	orr.w	r3, r3, #1
 800854a:	6713      	str	r3, [r2, #112]	; 0x70
 800854c:	e01c      	b.n	8008588 <HAL_RCC_OscConfig+0x324>
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	689b      	ldr	r3, [r3, #8]
 8008552:	2b05      	cmp	r3, #5
 8008554:	d10c      	bne.n	8008570 <HAL_RCC_OscConfig+0x30c>
 8008556:	4b5f      	ldr	r3, [pc, #380]	; (80086d4 <HAL_RCC_OscConfig+0x470>)
 8008558:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800855a:	4a5e      	ldr	r2, [pc, #376]	; (80086d4 <HAL_RCC_OscConfig+0x470>)
 800855c:	f043 0304 	orr.w	r3, r3, #4
 8008560:	6713      	str	r3, [r2, #112]	; 0x70
 8008562:	4b5c      	ldr	r3, [pc, #368]	; (80086d4 <HAL_RCC_OscConfig+0x470>)
 8008564:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008566:	4a5b      	ldr	r2, [pc, #364]	; (80086d4 <HAL_RCC_OscConfig+0x470>)
 8008568:	f043 0301 	orr.w	r3, r3, #1
 800856c:	6713      	str	r3, [r2, #112]	; 0x70
 800856e:	e00b      	b.n	8008588 <HAL_RCC_OscConfig+0x324>
 8008570:	4b58      	ldr	r3, [pc, #352]	; (80086d4 <HAL_RCC_OscConfig+0x470>)
 8008572:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008574:	4a57      	ldr	r2, [pc, #348]	; (80086d4 <HAL_RCC_OscConfig+0x470>)
 8008576:	f023 0301 	bic.w	r3, r3, #1
 800857a:	6713      	str	r3, [r2, #112]	; 0x70
 800857c:	4b55      	ldr	r3, [pc, #340]	; (80086d4 <HAL_RCC_OscConfig+0x470>)
 800857e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008580:	4a54      	ldr	r2, [pc, #336]	; (80086d4 <HAL_RCC_OscConfig+0x470>)
 8008582:	f023 0304 	bic.w	r3, r3, #4
 8008586:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	689b      	ldr	r3, [r3, #8]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d015      	beq.n	80085bc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008590:	f7fc fe74 	bl	800527c <HAL_GetTick>
 8008594:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008596:	e00a      	b.n	80085ae <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008598:	f7fc fe70 	bl	800527c <HAL_GetTick>
 800859c:	4602      	mov	r2, r0
 800859e:	693b      	ldr	r3, [r7, #16]
 80085a0:	1ad3      	subs	r3, r2, r3
 80085a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80085a6:	4293      	cmp	r3, r2
 80085a8:	d901      	bls.n	80085ae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80085aa:	2303      	movs	r3, #3
 80085ac:	e0cb      	b.n	8008746 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80085ae:	4b49      	ldr	r3, [pc, #292]	; (80086d4 <HAL_RCC_OscConfig+0x470>)
 80085b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085b2:	f003 0302 	and.w	r3, r3, #2
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d0ee      	beq.n	8008598 <HAL_RCC_OscConfig+0x334>
 80085ba:	e014      	b.n	80085e6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80085bc:	f7fc fe5e 	bl	800527c <HAL_GetTick>
 80085c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80085c2:	e00a      	b.n	80085da <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80085c4:	f7fc fe5a 	bl	800527c <HAL_GetTick>
 80085c8:	4602      	mov	r2, r0
 80085ca:	693b      	ldr	r3, [r7, #16]
 80085cc:	1ad3      	subs	r3, r2, r3
 80085ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80085d2:	4293      	cmp	r3, r2
 80085d4:	d901      	bls.n	80085da <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80085d6:	2303      	movs	r3, #3
 80085d8:	e0b5      	b.n	8008746 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80085da:	4b3e      	ldr	r3, [pc, #248]	; (80086d4 <HAL_RCC_OscConfig+0x470>)
 80085dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085de:	f003 0302 	and.w	r3, r3, #2
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d1ee      	bne.n	80085c4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80085e6:	7dfb      	ldrb	r3, [r7, #23]
 80085e8:	2b01      	cmp	r3, #1
 80085ea:	d105      	bne.n	80085f8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80085ec:	4b39      	ldr	r3, [pc, #228]	; (80086d4 <HAL_RCC_OscConfig+0x470>)
 80085ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085f0:	4a38      	ldr	r2, [pc, #224]	; (80086d4 <HAL_RCC_OscConfig+0x470>)
 80085f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80085f6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	699b      	ldr	r3, [r3, #24]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	f000 80a1 	beq.w	8008744 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008602:	4b34      	ldr	r3, [pc, #208]	; (80086d4 <HAL_RCC_OscConfig+0x470>)
 8008604:	689b      	ldr	r3, [r3, #8]
 8008606:	f003 030c 	and.w	r3, r3, #12
 800860a:	2b08      	cmp	r3, #8
 800860c:	d05c      	beq.n	80086c8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	699b      	ldr	r3, [r3, #24]
 8008612:	2b02      	cmp	r3, #2
 8008614:	d141      	bne.n	800869a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008616:	4b31      	ldr	r3, [pc, #196]	; (80086dc <HAL_RCC_OscConfig+0x478>)
 8008618:	2200      	movs	r2, #0
 800861a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800861c:	f7fc fe2e 	bl	800527c <HAL_GetTick>
 8008620:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008622:	e008      	b.n	8008636 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008624:	f7fc fe2a 	bl	800527c <HAL_GetTick>
 8008628:	4602      	mov	r2, r0
 800862a:	693b      	ldr	r3, [r7, #16]
 800862c:	1ad3      	subs	r3, r2, r3
 800862e:	2b02      	cmp	r3, #2
 8008630:	d901      	bls.n	8008636 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008632:	2303      	movs	r3, #3
 8008634:	e087      	b.n	8008746 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008636:	4b27      	ldr	r3, [pc, #156]	; (80086d4 <HAL_RCC_OscConfig+0x470>)
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800863e:	2b00      	cmp	r3, #0
 8008640:	d1f0      	bne.n	8008624 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	69da      	ldr	r2, [r3, #28]
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	6a1b      	ldr	r3, [r3, #32]
 800864a:	431a      	orrs	r2, r3
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008650:	019b      	lsls	r3, r3, #6
 8008652:	431a      	orrs	r2, r3
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008658:	085b      	lsrs	r3, r3, #1
 800865a:	3b01      	subs	r3, #1
 800865c:	041b      	lsls	r3, r3, #16
 800865e:	431a      	orrs	r2, r3
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008664:	061b      	lsls	r3, r3, #24
 8008666:	491b      	ldr	r1, [pc, #108]	; (80086d4 <HAL_RCC_OscConfig+0x470>)
 8008668:	4313      	orrs	r3, r2
 800866a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800866c:	4b1b      	ldr	r3, [pc, #108]	; (80086dc <HAL_RCC_OscConfig+0x478>)
 800866e:	2201      	movs	r2, #1
 8008670:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008672:	f7fc fe03 	bl	800527c <HAL_GetTick>
 8008676:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008678:	e008      	b.n	800868c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800867a:	f7fc fdff 	bl	800527c <HAL_GetTick>
 800867e:	4602      	mov	r2, r0
 8008680:	693b      	ldr	r3, [r7, #16]
 8008682:	1ad3      	subs	r3, r2, r3
 8008684:	2b02      	cmp	r3, #2
 8008686:	d901      	bls.n	800868c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008688:	2303      	movs	r3, #3
 800868a:	e05c      	b.n	8008746 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800868c:	4b11      	ldr	r3, [pc, #68]	; (80086d4 <HAL_RCC_OscConfig+0x470>)
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008694:	2b00      	cmp	r3, #0
 8008696:	d0f0      	beq.n	800867a <HAL_RCC_OscConfig+0x416>
 8008698:	e054      	b.n	8008744 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800869a:	4b10      	ldr	r3, [pc, #64]	; (80086dc <HAL_RCC_OscConfig+0x478>)
 800869c:	2200      	movs	r2, #0
 800869e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80086a0:	f7fc fdec 	bl	800527c <HAL_GetTick>
 80086a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80086a6:	e008      	b.n	80086ba <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80086a8:	f7fc fde8 	bl	800527c <HAL_GetTick>
 80086ac:	4602      	mov	r2, r0
 80086ae:	693b      	ldr	r3, [r7, #16]
 80086b0:	1ad3      	subs	r3, r2, r3
 80086b2:	2b02      	cmp	r3, #2
 80086b4:	d901      	bls.n	80086ba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80086b6:	2303      	movs	r3, #3
 80086b8:	e045      	b.n	8008746 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80086ba:	4b06      	ldr	r3, [pc, #24]	; (80086d4 <HAL_RCC_OscConfig+0x470>)
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d1f0      	bne.n	80086a8 <HAL_RCC_OscConfig+0x444>
 80086c6:	e03d      	b.n	8008744 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	699b      	ldr	r3, [r3, #24]
 80086cc:	2b01      	cmp	r3, #1
 80086ce:	d107      	bne.n	80086e0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80086d0:	2301      	movs	r3, #1
 80086d2:	e038      	b.n	8008746 <HAL_RCC_OscConfig+0x4e2>
 80086d4:	40023800 	.word	0x40023800
 80086d8:	40007000 	.word	0x40007000
 80086dc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80086e0:	4b1b      	ldr	r3, [pc, #108]	; (8008750 <HAL_RCC_OscConfig+0x4ec>)
 80086e2:	685b      	ldr	r3, [r3, #4]
 80086e4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	699b      	ldr	r3, [r3, #24]
 80086ea:	2b01      	cmp	r3, #1
 80086ec:	d028      	beq.n	8008740 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80086f8:	429a      	cmp	r2, r3
 80086fa:	d121      	bne.n	8008740 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008706:	429a      	cmp	r2, r3
 8008708:	d11a      	bne.n	8008740 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800870a:	68fa      	ldr	r2, [r7, #12]
 800870c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008710:	4013      	ands	r3, r2
 8008712:	687a      	ldr	r2, [r7, #4]
 8008714:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008716:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008718:	4293      	cmp	r3, r2
 800871a:	d111      	bne.n	8008740 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008726:	085b      	lsrs	r3, r3, #1
 8008728:	3b01      	subs	r3, #1
 800872a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800872c:	429a      	cmp	r2, r3
 800872e:	d107      	bne.n	8008740 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800873a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800873c:	429a      	cmp	r2, r3
 800873e:	d001      	beq.n	8008744 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8008740:	2301      	movs	r3, #1
 8008742:	e000      	b.n	8008746 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008744:	2300      	movs	r3, #0
}
 8008746:	4618      	mov	r0, r3
 8008748:	3718      	adds	r7, #24
 800874a:	46bd      	mov	sp, r7
 800874c:	bd80      	pop	{r7, pc}
 800874e:	bf00      	nop
 8008750:	40023800 	.word	0x40023800

08008754 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008754:	b580      	push	{r7, lr}
 8008756:	b084      	sub	sp, #16
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
 800875c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d101      	bne.n	8008768 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008764:	2301      	movs	r3, #1
 8008766:	e0cc      	b.n	8008902 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008768:	4b68      	ldr	r3, [pc, #416]	; (800890c <HAL_RCC_ClockConfig+0x1b8>)
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	f003 030f 	and.w	r3, r3, #15
 8008770:	683a      	ldr	r2, [r7, #0]
 8008772:	429a      	cmp	r2, r3
 8008774:	d90c      	bls.n	8008790 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008776:	4b65      	ldr	r3, [pc, #404]	; (800890c <HAL_RCC_ClockConfig+0x1b8>)
 8008778:	683a      	ldr	r2, [r7, #0]
 800877a:	b2d2      	uxtb	r2, r2
 800877c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800877e:	4b63      	ldr	r3, [pc, #396]	; (800890c <HAL_RCC_ClockConfig+0x1b8>)
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	f003 030f 	and.w	r3, r3, #15
 8008786:	683a      	ldr	r2, [r7, #0]
 8008788:	429a      	cmp	r2, r3
 800878a:	d001      	beq.n	8008790 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800878c:	2301      	movs	r3, #1
 800878e:	e0b8      	b.n	8008902 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	f003 0302 	and.w	r3, r3, #2
 8008798:	2b00      	cmp	r3, #0
 800879a:	d020      	beq.n	80087de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	f003 0304 	and.w	r3, r3, #4
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d005      	beq.n	80087b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80087a8:	4b59      	ldr	r3, [pc, #356]	; (8008910 <HAL_RCC_ClockConfig+0x1bc>)
 80087aa:	689b      	ldr	r3, [r3, #8]
 80087ac:	4a58      	ldr	r2, [pc, #352]	; (8008910 <HAL_RCC_ClockConfig+0x1bc>)
 80087ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80087b2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	f003 0308 	and.w	r3, r3, #8
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d005      	beq.n	80087cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80087c0:	4b53      	ldr	r3, [pc, #332]	; (8008910 <HAL_RCC_ClockConfig+0x1bc>)
 80087c2:	689b      	ldr	r3, [r3, #8]
 80087c4:	4a52      	ldr	r2, [pc, #328]	; (8008910 <HAL_RCC_ClockConfig+0x1bc>)
 80087c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80087ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80087cc:	4b50      	ldr	r3, [pc, #320]	; (8008910 <HAL_RCC_ClockConfig+0x1bc>)
 80087ce:	689b      	ldr	r3, [r3, #8]
 80087d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	689b      	ldr	r3, [r3, #8]
 80087d8:	494d      	ldr	r1, [pc, #308]	; (8008910 <HAL_RCC_ClockConfig+0x1bc>)
 80087da:	4313      	orrs	r3, r2
 80087dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	f003 0301 	and.w	r3, r3, #1
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d044      	beq.n	8008874 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	685b      	ldr	r3, [r3, #4]
 80087ee:	2b01      	cmp	r3, #1
 80087f0:	d107      	bne.n	8008802 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80087f2:	4b47      	ldr	r3, [pc, #284]	; (8008910 <HAL_RCC_ClockConfig+0x1bc>)
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d119      	bne.n	8008832 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80087fe:	2301      	movs	r3, #1
 8008800:	e07f      	b.n	8008902 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	685b      	ldr	r3, [r3, #4]
 8008806:	2b02      	cmp	r3, #2
 8008808:	d003      	beq.n	8008812 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800880e:	2b03      	cmp	r3, #3
 8008810:	d107      	bne.n	8008822 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008812:	4b3f      	ldr	r3, [pc, #252]	; (8008910 <HAL_RCC_ClockConfig+0x1bc>)
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800881a:	2b00      	cmp	r3, #0
 800881c:	d109      	bne.n	8008832 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800881e:	2301      	movs	r3, #1
 8008820:	e06f      	b.n	8008902 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008822:	4b3b      	ldr	r3, [pc, #236]	; (8008910 <HAL_RCC_ClockConfig+0x1bc>)
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f003 0302 	and.w	r3, r3, #2
 800882a:	2b00      	cmp	r3, #0
 800882c:	d101      	bne.n	8008832 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800882e:	2301      	movs	r3, #1
 8008830:	e067      	b.n	8008902 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008832:	4b37      	ldr	r3, [pc, #220]	; (8008910 <HAL_RCC_ClockConfig+0x1bc>)
 8008834:	689b      	ldr	r3, [r3, #8]
 8008836:	f023 0203 	bic.w	r2, r3, #3
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	685b      	ldr	r3, [r3, #4]
 800883e:	4934      	ldr	r1, [pc, #208]	; (8008910 <HAL_RCC_ClockConfig+0x1bc>)
 8008840:	4313      	orrs	r3, r2
 8008842:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008844:	f7fc fd1a 	bl	800527c <HAL_GetTick>
 8008848:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800884a:	e00a      	b.n	8008862 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800884c:	f7fc fd16 	bl	800527c <HAL_GetTick>
 8008850:	4602      	mov	r2, r0
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	1ad3      	subs	r3, r2, r3
 8008856:	f241 3288 	movw	r2, #5000	; 0x1388
 800885a:	4293      	cmp	r3, r2
 800885c:	d901      	bls.n	8008862 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800885e:	2303      	movs	r3, #3
 8008860:	e04f      	b.n	8008902 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008862:	4b2b      	ldr	r3, [pc, #172]	; (8008910 <HAL_RCC_ClockConfig+0x1bc>)
 8008864:	689b      	ldr	r3, [r3, #8]
 8008866:	f003 020c 	and.w	r2, r3, #12
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	685b      	ldr	r3, [r3, #4]
 800886e:	009b      	lsls	r3, r3, #2
 8008870:	429a      	cmp	r2, r3
 8008872:	d1eb      	bne.n	800884c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008874:	4b25      	ldr	r3, [pc, #148]	; (800890c <HAL_RCC_ClockConfig+0x1b8>)
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	f003 030f 	and.w	r3, r3, #15
 800887c:	683a      	ldr	r2, [r7, #0]
 800887e:	429a      	cmp	r2, r3
 8008880:	d20c      	bcs.n	800889c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008882:	4b22      	ldr	r3, [pc, #136]	; (800890c <HAL_RCC_ClockConfig+0x1b8>)
 8008884:	683a      	ldr	r2, [r7, #0]
 8008886:	b2d2      	uxtb	r2, r2
 8008888:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800888a:	4b20      	ldr	r3, [pc, #128]	; (800890c <HAL_RCC_ClockConfig+0x1b8>)
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	f003 030f 	and.w	r3, r3, #15
 8008892:	683a      	ldr	r2, [r7, #0]
 8008894:	429a      	cmp	r2, r3
 8008896:	d001      	beq.n	800889c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008898:	2301      	movs	r3, #1
 800889a:	e032      	b.n	8008902 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	f003 0304 	and.w	r3, r3, #4
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d008      	beq.n	80088ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80088a8:	4b19      	ldr	r3, [pc, #100]	; (8008910 <HAL_RCC_ClockConfig+0x1bc>)
 80088aa:	689b      	ldr	r3, [r3, #8]
 80088ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	68db      	ldr	r3, [r3, #12]
 80088b4:	4916      	ldr	r1, [pc, #88]	; (8008910 <HAL_RCC_ClockConfig+0x1bc>)
 80088b6:	4313      	orrs	r3, r2
 80088b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	f003 0308 	and.w	r3, r3, #8
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d009      	beq.n	80088da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80088c6:	4b12      	ldr	r3, [pc, #72]	; (8008910 <HAL_RCC_ClockConfig+0x1bc>)
 80088c8:	689b      	ldr	r3, [r3, #8]
 80088ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	691b      	ldr	r3, [r3, #16]
 80088d2:	00db      	lsls	r3, r3, #3
 80088d4:	490e      	ldr	r1, [pc, #56]	; (8008910 <HAL_RCC_ClockConfig+0x1bc>)
 80088d6:	4313      	orrs	r3, r2
 80088d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80088da:	f000 f821 	bl	8008920 <HAL_RCC_GetSysClockFreq>
 80088de:	4602      	mov	r2, r0
 80088e0:	4b0b      	ldr	r3, [pc, #44]	; (8008910 <HAL_RCC_ClockConfig+0x1bc>)
 80088e2:	689b      	ldr	r3, [r3, #8]
 80088e4:	091b      	lsrs	r3, r3, #4
 80088e6:	f003 030f 	and.w	r3, r3, #15
 80088ea:	490a      	ldr	r1, [pc, #40]	; (8008914 <HAL_RCC_ClockConfig+0x1c0>)
 80088ec:	5ccb      	ldrb	r3, [r1, r3]
 80088ee:	fa22 f303 	lsr.w	r3, r2, r3
 80088f2:	4a09      	ldr	r2, [pc, #36]	; (8008918 <HAL_RCC_ClockConfig+0x1c4>)
 80088f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80088f6:	4b09      	ldr	r3, [pc, #36]	; (800891c <HAL_RCC_ClockConfig+0x1c8>)
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	4618      	mov	r0, r3
 80088fc:	f7fb ffee 	bl	80048dc <HAL_InitTick>

  return HAL_OK;
 8008900:	2300      	movs	r3, #0
}
 8008902:	4618      	mov	r0, r3
 8008904:	3710      	adds	r7, #16
 8008906:	46bd      	mov	sp, r7
 8008908:	bd80      	pop	{r7, pc}
 800890a:	bf00      	nop
 800890c:	40023c00 	.word	0x40023c00
 8008910:	40023800 	.word	0x40023800
 8008914:	08015600 	.word	0x08015600
 8008918:	20000004 	.word	0x20000004
 800891c:	20000008 	.word	0x20000008

08008920 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008920:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008924:	b090      	sub	sp, #64	; 0x40
 8008926:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008928:	2300      	movs	r3, #0
 800892a:	637b      	str	r3, [r7, #52]	; 0x34
 800892c:	2300      	movs	r3, #0
 800892e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008930:	2300      	movs	r3, #0
 8008932:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8008934:	2300      	movs	r3, #0
 8008936:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008938:	4b59      	ldr	r3, [pc, #356]	; (8008aa0 <HAL_RCC_GetSysClockFreq+0x180>)
 800893a:	689b      	ldr	r3, [r3, #8]
 800893c:	f003 030c 	and.w	r3, r3, #12
 8008940:	2b08      	cmp	r3, #8
 8008942:	d00d      	beq.n	8008960 <HAL_RCC_GetSysClockFreq+0x40>
 8008944:	2b08      	cmp	r3, #8
 8008946:	f200 80a1 	bhi.w	8008a8c <HAL_RCC_GetSysClockFreq+0x16c>
 800894a:	2b00      	cmp	r3, #0
 800894c:	d002      	beq.n	8008954 <HAL_RCC_GetSysClockFreq+0x34>
 800894e:	2b04      	cmp	r3, #4
 8008950:	d003      	beq.n	800895a <HAL_RCC_GetSysClockFreq+0x3a>
 8008952:	e09b      	b.n	8008a8c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008954:	4b53      	ldr	r3, [pc, #332]	; (8008aa4 <HAL_RCC_GetSysClockFreq+0x184>)
 8008956:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8008958:	e09b      	b.n	8008a92 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800895a:	4b53      	ldr	r3, [pc, #332]	; (8008aa8 <HAL_RCC_GetSysClockFreq+0x188>)
 800895c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800895e:	e098      	b.n	8008a92 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008960:	4b4f      	ldr	r3, [pc, #316]	; (8008aa0 <HAL_RCC_GetSysClockFreq+0x180>)
 8008962:	685b      	ldr	r3, [r3, #4]
 8008964:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008968:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800896a:	4b4d      	ldr	r3, [pc, #308]	; (8008aa0 <HAL_RCC_GetSysClockFreq+0x180>)
 800896c:	685b      	ldr	r3, [r3, #4]
 800896e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008972:	2b00      	cmp	r3, #0
 8008974:	d028      	beq.n	80089c8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008976:	4b4a      	ldr	r3, [pc, #296]	; (8008aa0 <HAL_RCC_GetSysClockFreq+0x180>)
 8008978:	685b      	ldr	r3, [r3, #4]
 800897a:	099b      	lsrs	r3, r3, #6
 800897c:	2200      	movs	r2, #0
 800897e:	623b      	str	r3, [r7, #32]
 8008980:	627a      	str	r2, [r7, #36]	; 0x24
 8008982:	6a3b      	ldr	r3, [r7, #32]
 8008984:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8008988:	2100      	movs	r1, #0
 800898a:	4b47      	ldr	r3, [pc, #284]	; (8008aa8 <HAL_RCC_GetSysClockFreq+0x188>)
 800898c:	fb03 f201 	mul.w	r2, r3, r1
 8008990:	2300      	movs	r3, #0
 8008992:	fb00 f303 	mul.w	r3, r0, r3
 8008996:	4413      	add	r3, r2
 8008998:	4a43      	ldr	r2, [pc, #268]	; (8008aa8 <HAL_RCC_GetSysClockFreq+0x188>)
 800899a:	fba0 1202 	umull	r1, r2, r0, r2
 800899e:	62fa      	str	r2, [r7, #44]	; 0x2c
 80089a0:	460a      	mov	r2, r1
 80089a2:	62ba      	str	r2, [r7, #40]	; 0x28
 80089a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80089a6:	4413      	add	r3, r2
 80089a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80089aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089ac:	2200      	movs	r2, #0
 80089ae:	61bb      	str	r3, [r7, #24]
 80089b0:	61fa      	str	r2, [r7, #28]
 80089b2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80089b6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80089ba:	f7f8 f8ef 	bl	8000b9c <__aeabi_uldivmod>
 80089be:	4602      	mov	r2, r0
 80089c0:	460b      	mov	r3, r1
 80089c2:	4613      	mov	r3, r2
 80089c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80089c6:	e053      	b.n	8008a70 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80089c8:	4b35      	ldr	r3, [pc, #212]	; (8008aa0 <HAL_RCC_GetSysClockFreq+0x180>)
 80089ca:	685b      	ldr	r3, [r3, #4]
 80089cc:	099b      	lsrs	r3, r3, #6
 80089ce:	2200      	movs	r2, #0
 80089d0:	613b      	str	r3, [r7, #16]
 80089d2:	617a      	str	r2, [r7, #20]
 80089d4:	693b      	ldr	r3, [r7, #16]
 80089d6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80089da:	f04f 0b00 	mov.w	fp, #0
 80089de:	4652      	mov	r2, sl
 80089e0:	465b      	mov	r3, fp
 80089e2:	f04f 0000 	mov.w	r0, #0
 80089e6:	f04f 0100 	mov.w	r1, #0
 80089ea:	0159      	lsls	r1, r3, #5
 80089ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80089f0:	0150      	lsls	r0, r2, #5
 80089f2:	4602      	mov	r2, r0
 80089f4:	460b      	mov	r3, r1
 80089f6:	ebb2 080a 	subs.w	r8, r2, sl
 80089fa:	eb63 090b 	sbc.w	r9, r3, fp
 80089fe:	f04f 0200 	mov.w	r2, #0
 8008a02:	f04f 0300 	mov.w	r3, #0
 8008a06:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8008a0a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8008a0e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8008a12:	ebb2 0408 	subs.w	r4, r2, r8
 8008a16:	eb63 0509 	sbc.w	r5, r3, r9
 8008a1a:	f04f 0200 	mov.w	r2, #0
 8008a1e:	f04f 0300 	mov.w	r3, #0
 8008a22:	00eb      	lsls	r3, r5, #3
 8008a24:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008a28:	00e2      	lsls	r2, r4, #3
 8008a2a:	4614      	mov	r4, r2
 8008a2c:	461d      	mov	r5, r3
 8008a2e:	eb14 030a 	adds.w	r3, r4, sl
 8008a32:	603b      	str	r3, [r7, #0]
 8008a34:	eb45 030b 	adc.w	r3, r5, fp
 8008a38:	607b      	str	r3, [r7, #4]
 8008a3a:	f04f 0200 	mov.w	r2, #0
 8008a3e:	f04f 0300 	mov.w	r3, #0
 8008a42:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008a46:	4629      	mov	r1, r5
 8008a48:	028b      	lsls	r3, r1, #10
 8008a4a:	4621      	mov	r1, r4
 8008a4c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008a50:	4621      	mov	r1, r4
 8008a52:	028a      	lsls	r2, r1, #10
 8008a54:	4610      	mov	r0, r2
 8008a56:	4619      	mov	r1, r3
 8008a58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	60bb      	str	r3, [r7, #8]
 8008a5e:	60fa      	str	r2, [r7, #12]
 8008a60:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008a64:	f7f8 f89a 	bl	8000b9c <__aeabi_uldivmod>
 8008a68:	4602      	mov	r2, r0
 8008a6a:	460b      	mov	r3, r1
 8008a6c:	4613      	mov	r3, r2
 8008a6e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008a70:	4b0b      	ldr	r3, [pc, #44]	; (8008aa0 <HAL_RCC_GetSysClockFreq+0x180>)
 8008a72:	685b      	ldr	r3, [r3, #4]
 8008a74:	0c1b      	lsrs	r3, r3, #16
 8008a76:	f003 0303 	and.w	r3, r3, #3
 8008a7a:	3301      	adds	r3, #1
 8008a7c:	005b      	lsls	r3, r3, #1
 8008a7e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8008a80:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a84:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a88:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8008a8a:	e002      	b.n	8008a92 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008a8c:	4b05      	ldr	r3, [pc, #20]	; (8008aa4 <HAL_RCC_GetSysClockFreq+0x184>)
 8008a8e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8008a90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008a92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8008a94:	4618      	mov	r0, r3
 8008a96:	3740      	adds	r7, #64	; 0x40
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008a9e:	bf00      	nop
 8008aa0:	40023800 	.word	0x40023800
 8008aa4:	00f42400 	.word	0x00f42400
 8008aa8:	00b71b00 	.word	0x00b71b00

08008aac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008aac:	b480      	push	{r7}
 8008aae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008ab0:	4b03      	ldr	r3, [pc, #12]	; (8008ac0 <HAL_RCC_GetHCLKFreq+0x14>)
 8008ab2:	681b      	ldr	r3, [r3, #0]
}
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008abc:	4770      	bx	lr
 8008abe:	bf00      	nop
 8008ac0:	20000004 	.word	0x20000004

08008ac4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008ac8:	f7ff fff0 	bl	8008aac <HAL_RCC_GetHCLKFreq>
 8008acc:	4602      	mov	r2, r0
 8008ace:	4b05      	ldr	r3, [pc, #20]	; (8008ae4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008ad0:	689b      	ldr	r3, [r3, #8]
 8008ad2:	0a9b      	lsrs	r3, r3, #10
 8008ad4:	f003 0307 	and.w	r3, r3, #7
 8008ad8:	4903      	ldr	r1, [pc, #12]	; (8008ae8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008ada:	5ccb      	ldrb	r3, [r1, r3]
 8008adc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	bd80      	pop	{r7, pc}
 8008ae4:	40023800 	.word	0x40023800
 8008ae8:	08015610 	.word	0x08015610

08008aec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008af0:	f7ff ffdc 	bl	8008aac <HAL_RCC_GetHCLKFreq>
 8008af4:	4602      	mov	r2, r0
 8008af6:	4b05      	ldr	r3, [pc, #20]	; (8008b0c <HAL_RCC_GetPCLK2Freq+0x20>)
 8008af8:	689b      	ldr	r3, [r3, #8]
 8008afa:	0b5b      	lsrs	r3, r3, #13
 8008afc:	f003 0307 	and.w	r3, r3, #7
 8008b00:	4903      	ldr	r1, [pc, #12]	; (8008b10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008b02:	5ccb      	ldrb	r3, [r1, r3]
 8008b04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008b08:	4618      	mov	r0, r3
 8008b0a:	bd80      	pop	{r7, pc}
 8008b0c:	40023800 	.word	0x40023800
 8008b10:	08015610 	.word	0x08015610

08008b14 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008b14:	b480      	push	{r7}
 8008b16:	b083      	sub	sp, #12
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
 8008b1c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	220f      	movs	r2, #15
 8008b22:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008b24:	4b12      	ldr	r3, [pc, #72]	; (8008b70 <HAL_RCC_GetClockConfig+0x5c>)
 8008b26:	689b      	ldr	r3, [r3, #8]
 8008b28:	f003 0203 	and.w	r2, r3, #3
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008b30:	4b0f      	ldr	r3, [pc, #60]	; (8008b70 <HAL_RCC_GetClockConfig+0x5c>)
 8008b32:	689b      	ldr	r3, [r3, #8]
 8008b34:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008b3c:	4b0c      	ldr	r3, [pc, #48]	; (8008b70 <HAL_RCC_GetClockConfig+0x5c>)
 8008b3e:	689b      	ldr	r3, [r3, #8]
 8008b40:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8008b48:	4b09      	ldr	r3, [pc, #36]	; (8008b70 <HAL_RCC_GetClockConfig+0x5c>)
 8008b4a:	689b      	ldr	r3, [r3, #8]
 8008b4c:	08db      	lsrs	r3, r3, #3
 8008b4e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008b56:	4b07      	ldr	r3, [pc, #28]	; (8008b74 <HAL_RCC_GetClockConfig+0x60>)
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	f003 020f 	and.w	r2, r3, #15
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	601a      	str	r2, [r3, #0]
}
 8008b62:	bf00      	nop
 8008b64:	370c      	adds	r7, #12
 8008b66:	46bd      	mov	sp, r7
 8008b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6c:	4770      	bx	lr
 8008b6e:	bf00      	nop
 8008b70:	40023800 	.word	0x40023800
 8008b74:	40023c00 	.word	0x40023c00

08008b78 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b082      	sub	sp, #8
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d101      	bne.n	8008b8a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008b86:	2301      	movs	r3, #1
 8008b88:	e07b      	b.n	8008c82 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d108      	bne.n	8008ba4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	685b      	ldr	r3, [r3, #4]
 8008b96:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008b9a:	d009      	beq.n	8008bb0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	61da      	str	r2, [r3, #28]
 8008ba2:	e005      	b.n	8008bb0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	2200      	movs	r2, #0
 8008bae:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008bbc:	b2db      	uxtb	r3, r3
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d106      	bne.n	8008bd0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008bca:	6878      	ldr	r0, [r7, #4]
 8008bcc:	f7fb fe12 	bl	80047f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	2202      	movs	r2, #2
 8008bd4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	681a      	ldr	r2, [r3, #0]
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008be6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	685b      	ldr	r3, [r3, #4]
 8008bec:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	689b      	ldr	r3, [r3, #8]
 8008bf4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008bf8:	431a      	orrs	r2, r3
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	68db      	ldr	r3, [r3, #12]
 8008bfe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008c02:	431a      	orrs	r2, r3
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	691b      	ldr	r3, [r3, #16]
 8008c08:	f003 0302 	and.w	r3, r3, #2
 8008c0c:	431a      	orrs	r2, r3
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	695b      	ldr	r3, [r3, #20]
 8008c12:	f003 0301 	and.w	r3, r3, #1
 8008c16:	431a      	orrs	r2, r3
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	699b      	ldr	r3, [r3, #24]
 8008c1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008c20:	431a      	orrs	r2, r3
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	69db      	ldr	r3, [r3, #28]
 8008c26:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008c2a:	431a      	orrs	r2, r3
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	6a1b      	ldr	r3, [r3, #32]
 8008c30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c34:	ea42 0103 	orr.w	r1, r2, r3
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c3c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	430a      	orrs	r2, r1
 8008c46:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	699b      	ldr	r3, [r3, #24]
 8008c4c:	0c1b      	lsrs	r3, r3, #16
 8008c4e:	f003 0104 	and.w	r1, r3, #4
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c56:	f003 0210 	and.w	r2, r3, #16
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	430a      	orrs	r2, r1
 8008c60:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	69da      	ldr	r2, [r3, #28]
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008c70:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	2200      	movs	r2, #0
 8008c76:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	2201      	movs	r2, #1
 8008c7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008c80:	2300      	movs	r3, #0
}
 8008c82:	4618      	mov	r0, r3
 8008c84:	3708      	adds	r7, #8
 8008c86:	46bd      	mov	sp, r7
 8008c88:	bd80      	pop	{r7, pc}

08008c8a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008c8a:	b580      	push	{r7, lr}
 8008c8c:	b08c      	sub	sp, #48	; 0x30
 8008c8e:	af00      	add	r7, sp, #0
 8008c90:	60f8      	str	r0, [r7, #12]
 8008c92:	60b9      	str	r1, [r7, #8]
 8008c94:	607a      	str	r2, [r7, #4]
 8008c96:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008c98:	2301      	movs	r3, #1
 8008c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008ca8:	2b01      	cmp	r3, #1
 8008caa:	d101      	bne.n	8008cb0 <HAL_SPI_TransmitReceive+0x26>
 8008cac:	2302      	movs	r3, #2
 8008cae:	e198      	b.n	8008fe2 <HAL_SPI_TransmitReceive+0x358>
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	2201      	movs	r2, #1
 8008cb4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008cb8:	f7fc fae0 	bl	800527c <HAL_GetTick>
 8008cbc:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008cc4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	685b      	ldr	r3, [r3, #4]
 8008ccc:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8008cce:	887b      	ldrh	r3, [r7, #2]
 8008cd0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008cd2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008cd6:	2b01      	cmp	r3, #1
 8008cd8:	d00f      	beq.n	8008cfa <HAL_SPI_TransmitReceive+0x70>
 8008cda:	69fb      	ldr	r3, [r7, #28]
 8008cdc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008ce0:	d107      	bne.n	8008cf2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	689b      	ldr	r3, [r3, #8]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d103      	bne.n	8008cf2 <HAL_SPI_TransmitReceive+0x68>
 8008cea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008cee:	2b04      	cmp	r3, #4
 8008cf0:	d003      	beq.n	8008cfa <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8008cf2:	2302      	movs	r3, #2
 8008cf4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008cf8:	e16d      	b.n	8008fd6 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008cfa:	68bb      	ldr	r3, [r7, #8]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d005      	beq.n	8008d0c <HAL_SPI_TransmitReceive+0x82>
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d002      	beq.n	8008d0c <HAL_SPI_TransmitReceive+0x82>
 8008d06:	887b      	ldrh	r3, [r7, #2]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d103      	bne.n	8008d14 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8008d0c:	2301      	movs	r3, #1
 8008d0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008d12:	e160      	b.n	8008fd6 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008d1a:	b2db      	uxtb	r3, r3
 8008d1c:	2b04      	cmp	r3, #4
 8008d1e:	d003      	beq.n	8008d28 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	2205      	movs	r2, #5
 8008d24:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	687a      	ldr	r2, [r7, #4]
 8008d32:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	887a      	ldrh	r2, [r7, #2]
 8008d38:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	887a      	ldrh	r2, [r7, #2]
 8008d3e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	68ba      	ldr	r2, [r7, #8]
 8008d44:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	887a      	ldrh	r2, [r7, #2]
 8008d4a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	887a      	ldrh	r2, [r7, #2]
 8008d50:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	2200      	movs	r2, #0
 8008d56:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	2200      	movs	r2, #0
 8008d5c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d68:	2b40      	cmp	r3, #64	; 0x40
 8008d6a:	d007      	beq.n	8008d7c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	681a      	ldr	r2, [r3, #0]
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008d7a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	68db      	ldr	r3, [r3, #12]
 8008d80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008d84:	d17c      	bne.n	8008e80 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	685b      	ldr	r3, [r3, #4]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d002      	beq.n	8008d94 <HAL_SPI_TransmitReceive+0x10a>
 8008d8e:	8b7b      	ldrh	r3, [r7, #26]
 8008d90:	2b01      	cmp	r3, #1
 8008d92:	d16a      	bne.n	8008e6a <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d98:	881a      	ldrh	r2, [r3, #0]
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008da4:	1c9a      	adds	r2, r3, #2
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008dae:	b29b      	uxth	r3, r3
 8008db0:	3b01      	subs	r3, #1
 8008db2:	b29a      	uxth	r2, r3
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008db8:	e057      	b.n	8008e6a <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	689b      	ldr	r3, [r3, #8]
 8008dc0:	f003 0302 	and.w	r3, r3, #2
 8008dc4:	2b02      	cmp	r3, #2
 8008dc6:	d11b      	bne.n	8008e00 <HAL_SPI_TransmitReceive+0x176>
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008dcc:	b29b      	uxth	r3, r3
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d016      	beq.n	8008e00 <HAL_SPI_TransmitReceive+0x176>
 8008dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dd4:	2b01      	cmp	r3, #1
 8008dd6:	d113      	bne.n	8008e00 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ddc:	881a      	ldrh	r2, [r3, #0]
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008de8:	1c9a      	adds	r2, r3, #2
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008df2:	b29b      	uxth	r3, r3
 8008df4:	3b01      	subs	r3, #1
 8008df6:	b29a      	uxth	r2, r3
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	689b      	ldr	r3, [r3, #8]
 8008e06:	f003 0301 	and.w	r3, r3, #1
 8008e0a:	2b01      	cmp	r3, #1
 8008e0c:	d119      	bne.n	8008e42 <HAL_SPI_TransmitReceive+0x1b8>
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008e12:	b29b      	uxth	r3, r3
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d014      	beq.n	8008e42 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	68da      	ldr	r2, [r3, #12]
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e22:	b292      	uxth	r2, r2
 8008e24:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e2a:	1c9a      	adds	r2, r3, #2
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008e34:	b29b      	uxth	r3, r3
 8008e36:	3b01      	subs	r3, #1
 8008e38:	b29a      	uxth	r2, r3
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008e3e:	2301      	movs	r3, #1
 8008e40:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008e42:	f7fc fa1b 	bl	800527c <HAL_GetTick>
 8008e46:	4602      	mov	r2, r0
 8008e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e4a:	1ad3      	subs	r3, r2, r3
 8008e4c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008e4e:	429a      	cmp	r2, r3
 8008e50:	d80b      	bhi.n	8008e6a <HAL_SPI_TransmitReceive+0x1e0>
 8008e52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008e58:	d007      	beq.n	8008e6a <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8008e5a:	2303      	movs	r3, #3
 8008e5c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	2201      	movs	r2, #1
 8008e64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8008e68:	e0b5      	b.n	8008fd6 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008e6e:	b29b      	uxth	r3, r3
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d1a2      	bne.n	8008dba <HAL_SPI_TransmitReceive+0x130>
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008e78:	b29b      	uxth	r3, r3
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d19d      	bne.n	8008dba <HAL_SPI_TransmitReceive+0x130>
 8008e7e:	e080      	b.n	8008f82 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	685b      	ldr	r3, [r3, #4]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d002      	beq.n	8008e8e <HAL_SPI_TransmitReceive+0x204>
 8008e88:	8b7b      	ldrh	r3, [r7, #26]
 8008e8a:	2b01      	cmp	r3, #1
 8008e8c:	d16f      	bne.n	8008f6e <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	330c      	adds	r3, #12
 8008e98:	7812      	ldrb	r2, [r2, #0]
 8008e9a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ea0:	1c5a      	adds	r2, r3, #1
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008eaa:	b29b      	uxth	r3, r3
 8008eac:	3b01      	subs	r3, #1
 8008eae:	b29a      	uxth	r2, r3
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008eb4:	e05b      	b.n	8008f6e <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	689b      	ldr	r3, [r3, #8]
 8008ebc:	f003 0302 	and.w	r3, r3, #2
 8008ec0:	2b02      	cmp	r3, #2
 8008ec2:	d11c      	bne.n	8008efe <HAL_SPI_TransmitReceive+0x274>
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008ec8:	b29b      	uxth	r3, r3
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d017      	beq.n	8008efe <HAL_SPI_TransmitReceive+0x274>
 8008ece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ed0:	2b01      	cmp	r3, #1
 8008ed2:	d114      	bne.n	8008efe <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	330c      	adds	r3, #12
 8008ede:	7812      	ldrb	r2, [r2, #0]
 8008ee0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ee6:	1c5a      	adds	r2, r3, #1
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008ef0:	b29b      	uxth	r3, r3
 8008ef2:	3b01      	subs	r3, #1
 8008ef4:	b29a      	uxth	r2, r3
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008efa:	2300      	movs	r3, #0
 8008efc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	689b      	ldr	r3, [r3, #8]
 8008f04:	f003 0301 	and.w	r3, r3, #1
 8008f08:	2b01      	cmp	r3, #1
 8008f0a:	d119      	bne.n	8008f40 <HAL_SPI_TransmitReceive+0x2b6>
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008f10:	b29b      	uxth	r3, r3
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d014      	beq.n	8008f40 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	68da      	ldr	r2, [r3, #12]
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f20:	b2d2      	uxtb	r2, r2
 8008f22:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f28:	1c5a      	adds	r2, r3, #1
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008f32:	b29b      	uxth	r3, r3
 8008f34:	3b01      	subs	r3, #1
 8008f36:	b29a      	uxth	r2, r3
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008f3c:	2301      	movs	r3, #1
 8008f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008f40:	f7fc f99c 	bl	800527c <HAL_GetTick>
 8008f44:	4602      	mov	r2, r0
 8008f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f48:	1ad3      	subs	r3, r2, r3
 8008f4a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008f4c:	429a      	cmp	r2, r3
 8008f4e:	d803      	bhi.n	8008f58 <HAL_SPI_TransmitReceive+0x2ce>
 8008f50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008f56:	d102      	bne.n	8008f5e <HAL_SPI_TransmitReceive+0x2d4>
 8008f58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d107      	bne.n	8008f6e <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8008f5e:	2303      	movs	r3, #3
 8008f60:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	2201      	movs	r2, #1
 8008f68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8008f6c:	e033      	b.n	8008fd6 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008f72:	b29b      	uxth	r3, r3
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d19e      	bne.n	8008eb6 <HAL_SPI_TransmitReceive+0x22c>
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008f7c:	b29b      	uxth	r3, r3
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d199      	bne.n	8008eb6 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008f82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f84:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008f86:	68f8      	ldr	r0, [r7, #12]
 8008f88:	f000 f8b8 	bl	80090fc <SPI_EndRxTxTransaction>
 8008f8c:	4603      	mov	r3, r0
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d006      	beq.n	8008fa0 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8008f92:	2301      	movs	r3, #1
 8008f94:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	2220      	movs	r2, #32
 8008f9c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8008f9e:	e01a      	b.n	8008fd6 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	689b      	ldr	r3, [r3, #8]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d10a      	bne.n	8008fbe <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008fa8:	2300      	movs	r3, #0
 8008faa:	617b      	str	r3, [r7, #20]
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	68db      	ldr	r3, [r3, #12]
 8008fb2:	617b      	str	r3, [r7, #20]
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	689b      	ldr	r3, [r3, #8]
 8008fba:	617b      	str	r3, [r7, #20]
 8008fbc:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d003      	beq.n	8008fce <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8008fc6:	2301      	movs	r3, #1
 8008fc8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008fcc:	e003      	b.n	8008fd6 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	2201      	movs	r2, #1
 8008fd2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	2200      	movs	r2, #0
 8008fda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008fde:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	3730      	adds	r7, #48	; 0x30
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	bd80      	pop	{r7, pc}
	...

08008fec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008fec:	b580      	push	{r7, lr}
 8008fee:	b088      	sub	sp, #32
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	60f8      	str	r0, [r7, #12]
 8008ff4:	60b9      	str	r1, [r7, #8]
 8008ff6:	603b      	str	r3, [r7, #0]
 8008ff8:	4613      	mov	r3, r2
 8008ffa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008ffc:	f7fc f93e 	bl	800527c <HAL_GetTick>
 8009000:	4602      	mov	r2, r0
 8009002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009004:	1a9b      	subs	r3, r3, r2
 8009006:	683a      	ldr	r2, [r7, #0]
 8009008:	4413      	add	r3, r2
 800900a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800900c:	f7fc f936 	bl	800527c <HAL_GetTick>
 8009010:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009012:	4b39      	ldr	r3, [pc, #228]	; (80090f8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	015b      	lsls	r3, r3, #5
 8009018:	0d1b      	lsrs	r3, r3, #20
 800901a:	69fa      	ldr	r2, [r7, #28]
 800901c:	fb02 f303 	mul.w	r3, r2, r3
 8009020:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009022:	e054      	b.n	80090ce <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009024:	683b      	ldr	r3, [r7, #0]
 8009026:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800902a:	d050      	beq.n	80090ce <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800902c:	f7fc f926 	bl	800527c <HAL_GetTick>
 8009030:	4602      	mov	r2, r0
 8009032:	69bb      	ldr	r3, [r7, #24]
 8009034:	1ad3      	subs	r3, r2, r3
 8009036:	69fa      	ldr	r2, [r7, #28]
 8009038:	429a      	cmp	r2, r3
 800903a:	d902      	bls.n	8009042 <SPI_WaitFlagStateUntilTimeout+0x56>
 800903c:	69fb      	ldr	r3, [r7, #28]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d13d      	bne.n	80090be <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	685a      	ldr	r2, [r3, #4]
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009050:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	685b      	ldr	r3, [r3, #4]
 8009056:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800905a:	d111      	bne.n	8009080 <SPI_WaitFlagStateUntilTimeout+0x94>
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	689b      	ldr	r3, [r3, #8]
 8009060:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009064:	d004      	beq.n	8009070 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	689b      	ldr	r3, [r3, #8]
 800906a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800906e:	d107      	bne.n	8009080 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	681a      	ldr	r2, [r3, #0]
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800907e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009084:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009088:	d10f      	bne.n	80090aa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	681a      	ldr	r2, [r3, #0]
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009098:	601a      	str	r2, [r3, #0]
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	681a      	ldr	r2, [r3, #0]
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80090a8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	2201      	movs	r2, #1
 80090ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	2200      	movs	r2, #0
 80090b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80090ba:	2303      	movs	r3, #3
 80090bc:	e017      	b.n	80090ee <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80090be:	697b      	ldr	r3, [r7, #20]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d101      	bne.n	80090c8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80090c4:	2300      	movs	r3, #0
 80090c6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80090c8:	697b      	ldr	r3, [r7, #20]
 80090ca:	3b01      	subs	r3, #1
 80090cc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	689a      	ldr	r2, [r3, #8]
 80090d4:	68bb      	ldr	r3, [r7, #8]
 80090d6:	4013      	ands	r3, r2
 80090d8:	68ba      	ldr	r2, [r7, #8]
 80090da:	429a      	cmp	r2, r3
 80090dc:	bf0c      	ite	eq
 80090de:	2301      	moveq	r3, #1
 80090e0:	2300      	movne	r3, #0
 80090e2:	b2db      	uxtb	r3, r3
 80090e4:	461a      	mov	r2, r3
 80090e6:	79fb      	ldrb	r3, [r7, #7]
 80090e8:	429a      	cmp	r2, r3
 80090ea:	d19b      	bne.n	8009024 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80090ec:	2300      	movs	r3, #0
}
 80090ee:	4618      	mov	r0, r3
 80090f0:	3720      	adds	r7, #32
 80090f2:	46bd      	mov	sp, r7
 80090f4:	bd80      	pop	{r7, pc}
 80090f6:	bf00      	nop
 80090f8:	20000004 	.word	0x20000004

080090fc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80090fc:	b580      	push	{r7, lr}
 80090fe:	b088      	sub	sp, #32
 8009100:	af02      	add	r7, sp, #8
 8009102:	60f8      	str	r0, [r7, #12]
 8009104:	60b9      	str	r1, [r7, #8]
 8009106:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	9300      	str	r3, [sp, #0]
 800910c:	68bb      	ldr	r3, [r7, #8]
 800910e:	2201      	movs	r2, #1
 8009110:	2102      	movs	r1, #2
 8009112:	68f8      	ldr	r0, [r7, #12]
 8009114:	f7ff ff6a 	bl	8008fec <SPI_WaitFlagStateUntilTimeout>
 8009118:	4603      	mov	r3, r0
 800911a:	2b00      	cmp	r3, #0
 800911c:	d007      	beq.n	800912e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009122:	f043 0220 	orr.w	r2, r3, #32
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800912a:	2303      	movs	r3, #3
 800912c:	e032      	b.n	8009194 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800912e:	4b1b      	ldr	r3, [pc, #108]	; (800919c <SPI_EndRxTxTransaction+0xa0>)
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	4a1b      	ldr	r2, [pc, #108]	; (80091a0 <SPI_EndRxTxTransaction+0xa4>)
 8009134:	fba2 2303 	umull	r2, r3, r2, r3
 8009138:	0d5b      	lsrs	r3, r3, #21
 800913a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800913e:	fb02 f303 	mul.w	r3, r2, r3
 8009142:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	685b      	ldr	r3, [r3, #4]
 8009148:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800914c:	d112      	bne.n	8009174 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	9300      	str	r3, [sp, #0]
 8009152:	68bb      	ldr	r3, [r7, #8]
 8009154:	2200      	movs	r2, #0
 8009156:	2180      	movs	r1, #128	; 0x80
 8009158:	68f8      	ldr	r0, [r7, #12]
 800915a:	f7ff ff47 	bl	8008fec <SPI_WaitFlagStateUntilTimeout>
 800915e:	4603      	mov	r3, r0
 8009160:	2b00      	cmp	r3, #0
 8009162:	d016      	beq.n	8009192 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009168:	f043 0220 	orr.w	r2, r3, #32
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009170:	2303      	movs	r3, #3
 8009172:	e00f      	b.n	8009194 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009174:	697b      	ldr	r3, [r7, #20]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d00a      	beq.n	8009190 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800917a:	697b      	ldr	r3, [r7, #20]
 800917c:	3b01      	subs	r3, #1
 800917e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	689b      	ldr	r3, [r3, #8]
 8009186:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800918a:	2b80      	cmp	r3, #128	; 0x80
 800918c:	d0f2      	beq.n	8009174 <SPI_EndRxTxTransaction+0x78>
 800918e:	e000      	b.n	8009192 <SPI_EndRxTxTransaction+0x96>
        break;
 8009190:	bf00      	nop
  }

  return HAL_OK;
 8009192:	2300      	movs	r3, #0
}
 8009194:	4618      	mov	r0, r3
 8009196:	3718      	adds	r7, #24
 8009198:	46bd      	mov	sp, r7
 800919a:	bd80      	pop	{r7, pc}
 800919c:	20000004 	.word	0x20000004
 80091a0:	165e9f81 	.word	0x165e9f81

080091a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80091a4:	b580      	push	{r7, lr}
 80091a6:	b082      	sub	sp, #8
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d101      	bne.n	80091b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80091b2:	2301      	movs	r3, #1
 80091b4:	e041      	b.n	800923a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80091bc:	b2db      	uxtb	r3, r3
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d106      	bne.n	80091d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	2200      	movs	r2, #0
 80091c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80091ca:	6878      	ldr	r0, [r7, #4]
 80091cc:	f7fb fe44 	bl	8004e58 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	2202      	movs	r2, #2
 80091d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681a      	ldr	r2, [r3, #0]
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	3304      	adds	r3, #4
 80091e0:	4619      	mov	r1, r3
 80091e2:	4610      	mov	r0, r2
 80091e4:	f000 fc58 	bl	8009a98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	2201      	movs	r2, #1
 80091ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	2201      	movs	r2, #1
 80091f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	2201      	movs	r2, #1
 80091fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	2201      	movs	r2, #1
 8009204:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	2201      	movs	r2, #1
 800920c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	2201      	movs	r2, #1
 8009214:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	2201      	movs	r2, #1
 800921c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	2201      	movs	r2, #1
 8009224:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	2201      	movs	r2, #1
 800922c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	2201      	movs	r2, #1
 8009234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009238:	2300      	movs	r3, #0
}
 800923a:	4618      	mov	r0, r3
 800923c:	3708      	adds	r7, #8
 800923e:	46bd      	mov	sp, r7
 8009240:	bd80      	pop	{r7, pc}
	...

08009244 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009244:	b480      	push	{r7}
 8009246:	b085      	sub	sp, #20
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009252:	b2db      	uxtb	r3, r3
 8009254:	2b01      	cmp	r3, #1
 8009256:	d001      	beq.n	800925c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009258:	2301      	movs	r3, #1
 800925a:	e04e      	b.n	80092fa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	2202      	movs	r2, #2
 8009260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	68da      	ldr	r2, [r3, #12]
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	f042 0201 	orr.w	r2, r2, #1
 8009272:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	4a23      	ldr	r2, [pc, #140]	; (8009308 <HAL_TIM_Base_Start_IT+0xc4>)
 800927a:	4293      	cmp	r3, r2
 800927c:	d022      	beq.n	80092c4 <HAL_TIM_Base_Start_IT+0x80>
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009286:	d01d      	beq.n	80092c4 <HAL_TIM_Base_Start_IT+0x80>
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	4a1f      	ldr	r2, [pc, #124]	; (800930c <HAL_TIM_Base_Start_IT+0xc8>)
 800928e:	4293      	cmp	r3, r2
 8009290:	d018      	beq.n	80092c4 <HAL_TIM_Base_Start_IT+0x80>
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	4a1e      	ldr	r2, [pc, #120]	; (8009310 <HAL_TIM_Base_Start_IT+0xcc>)
 8009298:	4293      	cmp	r3, r2
 800929a:	d013      	beq.n	80092c4 <HAL_TIM_Base_Start_IT+0x80>
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	4a1c      	ldr	r2, [pc, #112]	; (8009314 <HAL_TIM_Base_Start_IT+0xd0>)
 80092a2:	4293      	cmp	r3, r2
 80092a4:	d00e      	beq.n	80092c4 <HAL_TIM_Base_Start_IT+0x80>
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	4a1b      	ldr	r2, [pc, #108]	; (8009318 <HAL_TIM_Base_Start_IT+0xd4>)
 80092ac:	4293      	cmp	r3, r2
 80092ae:	d009      	beq.n	80092c4 <HAL_TIM_Base_Start_IT+0x80>
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	4a19      	ldr	r2, [pc, #100]	; (800931c <HAL_TIM_Base_Start_IT+0xd8>)
 80092b6:	4293      	cmp	r3, r2
 80092b8:	d004      	beq.n	80092c4 <HAL_TIM_Base_Start_IT+0x80>
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	4a18      	ldr	r2, [pc, #96]	; (8009320 <HAL_TIM_Base_Start_IT+0xdc>)
 80092c0:	4293      	cmp	r3, r2
 80092c2:	d111      	bne.n	80092e8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	689b      	ldr	r3, [r3, #8]
 80092ca:	f003 0307 	and.w	r3, r3, #7
 80092ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	2b06      	cmp	r3, #6
 80092d4:	d010      	beq.n	80092f8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	681a      	ldr	r2, [r3, #0]
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	f042 0201 	orr.w	r2, r2, #1
 80092e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80092e6:	e007      	b.n	80092f8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	681a      	ldr	r2, [r3, #0]
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	f042 0201 	orr.w	r2, r2, #1
 80092f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80092f8:	2300      	movs	r3, #0
}
 80092fa:	4618      	mov	r0, r3
 80092fc:	3714      	adds	r7, #20
 80092fe:	46bd      	mov	sp, r7
 8009300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009304:	4770      	bx	lr
 8009306:	bf00      	nop
 8009308:	40010000 	.word	0x40010000
 800930c:	40000400 	.word	0x40000400
 8009310:	40000800 	.word	0x40000800
 8009314:	40000c00 	.word	0x40000c00
 8009318:	40010400 	.word	0x40010400
 800931c:	40014000 	.word	0x40014000
 8009320:	40001800 	.word	0x40001800

08009324 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009324:	b580      	push	{r7, lr}
 8009326:	b082      	sub	sp, #8
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	2b00      	cmp	r3, #0
 8009330:	d101      	bne.n	8009336 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009332:	2301      	movs	r3, #1
 8009334:	e041      	b.n	80093ba <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800933c:	b2db      	uxtb	r3, r3
 800933e:	2b00      	cmp	r3, #0
 8009340:	d106      	bne.n	8009350 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	2200      	movs	r2, #0
 8009346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800934a:	6878      	ldr	r0, [r7, #4]
 800934c:	f7fb fd36 	bl	8004dbc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	2202      	movs	r2, #2
 8009354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681a      	ldr	r2, [r3, #0]
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	3304      	adds	r3, #4
 8009360:	4619      	mov	r1, r3
 8009362:	4610      	mov	r0, r2
 8009364:	f000 fb98 	bl	8009a98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	2201      	movs	r2, #1
 800936c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	2201      	movs	r2, #1
 8009374:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	2201      	movs	r2, #1
 800937c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	2201      	movs	r2, #1
 8009384:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	2201      	movs	r2, #1
 800938c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	2201      	movs	r2, #1
 8009394:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	2201      	movs	r2, #1
 800939c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	2201      	movs	r2, #1
 80093a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	2201      	movs	r2, #1
 80093ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	2201      	movs	r2, #1
 80093b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80093b8:	2300      	movs	r3, #0
}
 80093ba:	4618      	mov	r0, r3
 80093bc:	3708      	adds	r7, #8
 80093be:	46bd      	mov	sp, r7
 80093c0:	bd80      	pop	{r7, pc}
	...

080093c4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80093c4:	b580      	push	{r7, lr}
 80093c6:	b084      	sub	sp, #16
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	6078      	str	r0, [r7, #4]
 80093cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80093ce:	683b      	ldr	r3, [r7, #0]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d109      	bne.n	80093e8 <HAL_TIM_PWM_Start+0x24>
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80093da:	b2db      	uxtb	r3, r3
 80093dc:	2b01      	cmp	r3, #1
 80093de:	bf14      	ite	ne
 80093e0:	2301      	movne	r3, #1
 80093e2:	2300      	moveq	r3, #0
 80093e4:	b2db      	uxtb	r3, r3
 80093e6:	e022      	b.n	800942e <HAL_TIM_PWM_Start+0x6a>
 80093e8:	683b      	ldr	r3, [r7, #0]
 80093ea:	2b04      	cmp	r3, #4
 80093ec:	d109      	bne.n	8009402 <HAL_TIM_PWM_Start+0x3e>
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80093f4:	b2db      	uxtb	r3, r3
 80093f6:	2b01      	cmp	r3, #1
 80093f8:	bf14      	ite	ne
 80093fa:	2301      	movne	r3, #1
 80093fc:	2300      	moveq	r3, #0
 80093fe:	b2db      	uxtb	r3, r3
 8009400:	e015      	b.n	800942e <HAL_TIM_PWM_Start+0x6a>
 8009402:	683b      	ldr	r3, [r7, #0]
 8009404:	2b08      	cmp	r3, #8
 8009406:	d109      	bne.n	800941c <HAL_TIM_PWM_Start+0x58>
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800940e:	b2db      	uxtb	r3, r3
 8009410:	2b01      	cmp	r3, #1
 8009412:	bf14      	ite	ne
 8009414:	2301      	movne	r3, #1
 8009416:	2300      	moveq	r3, #0
 8009418:	b2db      	uxtb	r3, r3
 800941a:	e008      	b.n	800942e <HAL_TIM_PWM_Start+0x6a>
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009422:	b2db      	uxtb	r3, r3
 8009424:	2b01      	cmp	r3, #1
 8009426:	bf14      	ite	ne
 8009428:	2301      	movne	r3, #1
 800942a:	2300      	moveq	r3, #0
 800942c:	b2db      	uxtb	r3, r3
 800942e:	2b00      	cmp	r3, #0
 8009430:	d001      	beq.n	8009436 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8009432:	2301      	movs	r3, #1
 8009434:	e07c      	b.n	8009530 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009436:	683b      	ldr	r3, [r7, #0]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d104      	bne.n	8009446 <HAL_TIM_PWM_Start+0x82>
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	2202      	movs	r2, #2
 8009440:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009444:	e013      	b.n	800946e <HAL_TIM_PWM_Start+0xaa>
 8009446:	683b      	ldr	r3, [r7, #0]
 8009448:	2b04      	cmp	r3, #4
 800944a:	d104      	bne.n	8009456 <HAL_TIM_PWM_Start+0x92>
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	2202      	movs	r2, #2
 8009450:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009454:	e00b      	b.n	800946e <HAL_TIM_PWM_Start+0xaa>
 8009456:	683b      	ldr	r3, [r7, #0]
 8009458:	2b08      	cmp	r3, #8
 800945a:	d104      	bne.n	8009466 <HAL_TIM_PWM_Start+0xa2>
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	2202      	movs	r2, #2
 8009460:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009464:	e003      	b.n	800946e <HAL_TIM_PWM_Start+0xaa>
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	2202      	movs	r2, #2
 800946a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	2201      	movs	r2, #1
 8009474:	6839      	ldr	r1, [r7, #0]
 8009476:	4618      	mov	r0, r3
 8009478:	f000 fe04 	bl	800a084 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	4a2d      	ldr	r2, [pc, #180]	; (8009538 <HAL_TIM_PWM_Start+0x174>)
 8009482:	4293      	cmp	r3, r2
 8009484:	d004      	beq.n	8009490 <HAL_TIM_PWM_Start+0xcc>
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	4a2c      	ldr	r2, [pc, #176]	; (800953c <HAL_TIM_PWM_Start+0x178>)
 800948c:	4293      	cmp	r3, r2
 800948e:	d101      	bne.n	8009494 <HAL_TIM_PWM_Start+0xd0>
 8009490:	2301      	movs	r3, #1
 8009492:	e000      	b.n	8009496 <HAL_TIM_PWM_Start+0xd2>
 8009494:	2300      	movs	r3, #0
 8009496:	2b00      	cmp	r3, #0
 8009498:	d007      	beq.n	80094aa <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80094a8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	4a22      	ldr	r2, [pc, #136]	; (8009538 <HAL_TIM_PWM_Start+0x174>)
 80094b0:	4293      	cmp	r3, r2
 80094b2:	d022      	beq.n	80094fa <HAL_TIM_PWM_Start+0x136>
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80094bc:	d01d      	beq.n	80094fa <HAL_TIM_PWM_Start+0x136>
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	4a1f      	ldr	r2, [pc, #124]	; (8009540 <HAL_TIM_PWM_Start+0x17c>)
 80094c4:	4293      	cmp	r3, r2
 80094c6:	d018      	beq.n	80094fa <HAL_TIM_PWM_Start+0x136>
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	4a1d      	ldr	r2, [pc, #116]	; (8009544 <HAL_TIM_PWM_Start+0x180>)
 80094ce:	4293      	cmp	r3, r2
 80094d0:	d013      	beq.n	80094fa <HAL_TIM_PWM_Start+0x136>
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	4a1c      	ldr	r2, [pc, #112]	; (8009548 <HAL_TIM_PWM_Start+0x184>)
 80094d8:	4293      	cmp	r3, r2
 80094da:	d00e      	beq.n	80094fa <HAL_TIM_PWM_Start+0x136>
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	4a16      	ldr	r2, [pc, #88]	; (800953c <HAL_TIM_PWM_Start+0x178>)
 80094e2:	4293      	cmp	r3, r2
 80094e4:	d009      	beq.n	80094fa <HAL_TIM_PWM_Start+0x136>
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	4a18      	ldr	r2, [pc, #96]	; (800954c <HAL_TIM_PWM_Start+0x188>)
 80094ec:	4293      	cmp	r3, r2
 80094ee:	d004      	beq.n	80094fa <HAL_TIM_PWM_Start+0x136>
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	4a16      	ldr	r2, [pc, #88]	; (8009550 <HAL_TIM_PWM_Start+0x18c>)
 80094f6:	4293      	cmp	r3, r2
 80094f8:	d111      	bne.n	800951e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	689b      	ldr	r3, [r3, #8]
 8009500:	f003 0307 	and.w	r3, r3, #7
 8009504:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	2b06      	cmp	r3, #6
 800950a:	d010      	beq.n	800952e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	681a      	ldr	r2, [r3, #0]
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	f042 0201 	orr.w	r2, r2, #1
 800951a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800951c:	e007      	b.n	800952e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	681a      	ldr	r2, [r3, #0]
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	f042 0201 	orr.w	r2, r2, #1
 800952c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800952e:	2300      	movs	r3, #0
}
 8009530:	4618      	mov	r0, r3
 8009532:	3710      	adds	r7, #16
 8009534:	46bd      	mov	sp, r7
 8009536:	bd80      	pop	{r7, pc}
 8009538:	40010000 	.word	0x40010000
 800953c:	40010400 	.word	0x40010400
 8009540:	40000400 	.word	0x40000400
 8009544:	40000800 	.word	0x40000800
 8009548:	40000c00 	.word	0x40000c00
 800954c:	40014000 	.word	0x40014000
 8009550:	40001800 	.word	0x40001800

08009554 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009554:	b580      	push	{r7, lr}
 8009556:	b084      	sub	sp, #16
 8009558:	af00      	add	r7, sp, #0
 800955a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	68db      	ldr	r3, [r3, #12]
 8009562:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	691b      	ldr	r3, [r3, #16]
 800956a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800956c:	68bb      	ldr	r3, [r7, #8]
 800956e:	f003 0302 	and.w	r3, r3, #2
 8009572:	2b00      	cmp	r3, #0
 8009574:	d020      	beq.n	80095b8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	f003 0302 	and.w	r3, r3, #2
 800957c:	2b00      	cmp	r3, #0
 800957e:	d01b      	beq.n	80095b8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	f06f 0202 	mvn.w	r2, #2
 8009588:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	2201      	movs	r2, #1
 800958e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	699b      	ldr	r3, [r3, #24]
 8009596:	f003 0303 	and.w	r3, r3, #3
 800959a:	2b00      	cmp	r3, #0
 800959c:	d003      	beq.n	80095a6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800959e:	6878      	ldr	r0, [r7, #4]
 80095a0:	f000 fa5b 	bl	8009a5a <HAL_TIM_IC_CaptureCallback>
 80095a4:	e005      	b.n	80095b2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80095a6:	6878      	ldr	r0, [r7, #4]
 80095a8:	f000 fa4d 	bl	8009a46 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80095ac:	6878      	ldr	r0, [r7, #4]
 80095ae:	f000 fa5e 	bl	8009a6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	2200      	movs	r2, #0
 80095b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80095b8:	68bb      	ldr	r3, [r7, #8]
 80095ba:	f003 0304 	and.w	r3, r3, #4
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d020      	beq.n	8009604 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	f003 0304 	and.w	r3, r3, #4
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d01b      	beq.n	8009604 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	f06f 0204 	mvn.w	r2, #4
 80095d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	2202      	movs	r2, #2
 80095da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	699b      	ldr	r3, [r3, #24]
 80095e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d003      	beq.n	80095f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80095ea:	6878      	ldr	r0, [r7, #4]
 80095ec:	f000 fa35 	bl	8009a5a <HAL_TIM_IC_CaptureCallback>
 80095f0:	e005      	b.n	80095fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80095f2:	6878      	ldr	r0, [r7, #4]
 80095f4:	f000 fa27 	bl	8009a46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80095f8:	6878      	ldr	r0, [r7, #4]
 80095fa:	f000 fa38 	bl	8009a6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	2200      	movs	r2, #0
 8009602:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009604:	68bb      	ldr	r3, [r7, #8]
 8009606:	f003 0308 	and.w	r3, r3, #8
 800960a:	2b00      	cmp	r3, #0
 800960c:	d020      	beq.n	8009650 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	f003 0308 	and.w	r3, r3, #8
 8009614:	2b00      	cmp	r3, #0
 8009616:	d01b      	beq.n	8009650 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	f06f 0208 	mvn.w	r2, #8
 8009620:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	2204      	movs	r2, #4
 8009626:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	69db      	ldr	r3, [r3, #28]
 800962e:	f003 0303 	and.w	r3, r3, #3
 8009632:	2b00      	cmp	r3, #0
 8009634:	d003      	beq.n	800963e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009636:	6878      	ldr	r0, [r7, #4]
 8009638:	f000 fa0f 	bl	8009a5a <HAL_TIM_IC_CaptureCallback>
 800963c:	e005      	b.n	800964a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800963e:	6878      	ldr	r0, [r7, #4]
 8009640:	f000 fa01 	bl	8009a46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009644:	6878      	ldr	r0, [r7, #4]
 8009646:	f000 fa12 	bl	8009a6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	2200      	movs	r2, #0
 800964e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009650:	68bb      	ldr	r3, [r7, #8]
 8009652:	f003 0310 	and.w	r3, r3, #16
 8009656:	2b00      	cmp	r3, #0
 8009658:	d020      	beq.n	800969c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	f003 0310 	and.w	r3, r3, #16
 8009660:	2b00      	cmp	r3, #0
 8009662:	d01b      	beq.n	800969c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	f06f 0210 	mvn.w	r2, #16
 800966c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	2208      	movs	r2, #8
 8009672:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	69db      	ldr	r3, [r3, #28]
 800967a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800967e:	2b00      	cmp	r3, #0
 8009680:	d003      	beq.n	800968a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009682:	6878      	ldr	r0, [r7, #4]
 8009684:	f000 f9e9 	bl	8009a5a <HAL_TIM_IC_CaptureCallback>
 8009688:	e005      	b.n	8009696 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800968a:	6878      	ldr	r0, [r7, #4]
 800968c:	f000 f9db 	bl	8009a46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009690:	6878      	ldr	r0, [r7, #4]
 8009692:	f000 f9ec 	bl	8009a6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	2200      	movs	r2, #0
 800969a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800969c:	68bb      	ldr	r3, [r7, #8]
 800969e:	f003 0301 	and.w	r3, r3, #1
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d00c      	beq.n	80096c0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	f003 0301 	and.w	r3, r3, #1
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d007      	beq.n	80096c0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	f06f 0201 	mvn.w	r2, #1
 80096b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80096ba:	6878      	ldr	r0, [r7, #4]
 80096bc:	f7fb f84c 	bl	8004758 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80096c0:	68bb      	ldr	r3, [r7, #8]
 80096c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d00c      	beq.n	80096e4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d007      	beq.n	80096e4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80096dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80096de:	6878      	ldr	r0, [r7, #4]
 80096e0:	f000 fdce 	bl	800a280 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80096e4:	68bb      	ldr	r3, [r7, #8]
 80096e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d00c      	beq.n	8009708 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d007      	beq.n	8009708 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009700:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009702:	6878      	ldr	r0, [r7, #4]
 8009704:	f000 f9bd 	bl	8009a82 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009708:	68bb      	ldr	r3, [r7, #8]
 800970a:	f003 0320 	and.w	r3, r3, #32
 800970e:	2b00      	cmp	r3, #0
 8009710:	d00c      	beq.n	800972c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	f003 0320 	and.w	r3, r3, #32
 8009718:	2b00      	cmp	r3, #0
 800971a:	d007      	beq.n	800972c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	f06f 0220 	mvn.w	r2, #32
 8009724:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009726:	6878      	ldr	r0, [r7, #4]
 8009728:	f000 fda0 	bl	800a26c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800972c:	bf00      	nop
 800972e:	3710      	adds	r7, #16
 8009730:	46bd      	mov	sp, r7
 8009732:	bd80      	pop	{r7, pc}

08009734 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009734:	b580      	push	{r7, lr}
 8009736:	b086      	sub	sp, #24
 8009738:	af00      	add	r7, sp, #0
 800973a:	60f8      	str	r0, [r7, #12]
 800973c:	60b9      	str	r1, [r7, #8]
 800973e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009740:	2300      	movs	r3, #0
 8009742:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800974a:	2b01      	cmp	r3, #1
 800974c:	d101      	bne.n	8009752 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800974e:	2302      	movs	r3, #2
 8009750:	e0ae      	b.n	80098b0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	2201      	movs	r2, #1
 8009756:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	2b0c      	cmp	r3, #12
 800975e:	f200 809f 	bhi.w	80098a0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8009762:	a201      	add	r2, pc, #4	; (adr r2, 8009768 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009768:	0800979d 	.word	0x0800979d
 800976c:	080098a1 	.word	0x080098a1
 8009770:	080098a1 	.word	0x080098a1
 8009774:	080098a1 	.word	0x080098a1
 8009778:	080097dd 	.word	0x080097dd
 800977c:	080098a1 	.word	0x080098a1
 8009780:	080098a1 	.word	0x080098a1
 8009784:	080098a1 	.word	0x080098a1
 8009788:	0800981f 	.word	0x0800981f
 800978c:	080098a1 	.word	0x080098a1
 8009790:	080098a1 	.word	0x080098a1
 8009794:	080098a1 	.word	0x080098a1
 8009798:	0800985f 	.word	0x0800985f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	68b9      	ldr	r1, [r7, #8]
 80097a2:	4618      	mov	r0, r3
 80097a4:	f000 fa24 	bl	8009bf0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	699a      	ldr	r2, [r3, #24]
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	f042 0208 	orr.w	r2, r2, #8
 80097b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	699a      	ldr	r2, [r3, #24]
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	f022 0204 	bic.w	r2, r2, #4
 80097c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	6999      	ldr	r1, [r3, #24]
 80097ce:	68bb      	ldr	r3, [r7, #8]
 80097d0:	691a      	ldr	r2, [r3, #16]
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	430a      	orrs	r2, r1
 80097d8:	619a      	str	r2, [r3, #24]
      break;
 80097da:	e064      	b.n	80098a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	68b9      	ldr	r1, [r7, #8]
 80097e2:	4618      	mov	r0, r3
 80097e4:	f000 fa74 	bl	8009cd0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	699a      	ldr	r2, [r3, #24]
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80097f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	699a      	ldr	r2, [r3, #24]
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009806:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	6999      	ldr	r1, [r3, #24]
 800980e:	68bb      	ldr	r3, [r7, #8]
 8009810:	691b      	ldr	r3, [r3, #16]
 8009812:	021a      	lsls	r2, r3, #8
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	430a      	orrs	r2, r1
 800981a:	619a      	str	r2, [r3, #24]
      break;
 800981c:	e043      	b.n	80098a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	68b9      	ldr	r1, [r7, #8]
 8009824:	4618      	mov	r0, r3
 8009826:	f000 fac9 	bl	8009dbc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	69da      	ldr	r2, [r3, #28]
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	f042 0208 	orr.w	r2, r2, #8
 8009838:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	69da      	ldr	r2, [r3, #28]
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	f022 0204 	bic.w	r2, r2, #4
 8009848:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	69d9      	ldr	r1, [r3, #28]
 8009850:	68bb      	ldr	r3, [r7, #8]
 8009852:	691a      	ldr	r2, [r3, #16]
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	430a      	orrs	r2, r1
 800985a:	61da      	str	r2, [r3, #28]
      break;
 800985c:	e023      	b.n	80098a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	68b9      	ldr	r1, [r7, #8]
 8009864:	4618      	mov	r0, r3
 8009866:	f000 fb1d 	bl	8009ea4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	69da      	ldr	r2, [r3, #28]
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009878:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	69da      	ldr	r2, [r3, #28]
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009888:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	69d9      	ldr	r1, [r3, #28]
 8009890:	68bb      	ldr	r3, [r7, #8]
 8009892:	691b      	ldr	r3, [r3, #16]
 8009894:	021a      	lsls	r2, r3, #8
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	430a      	orrs	r2, r1
 800989c:	61da      	str	r2, [r3, #28]
      break;
 800989e:	e002      	b.n	80098a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80098a0:	2301      	movs	r3, #1
 80098a2:	75fb      	strb	r3, [r7, #23]
      break;
 80098a4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	2200      	movs	r2, #0
 80098aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80098ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80098b0:	4618      	mov	r0, r3
 80098b2:	3718      	adds	r7, #24
 80098b4:	46bd      	mov	sp, r7
 80098b6:	bd80      	pop	{r7, pc}

080098b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b084      	sub	sp, #16
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
 80098c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80098c2:	2300      	movs	r3, #0
 80098c4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80098cc:	2b01      	cmp	r3, #1
 80098ce:	d101      	bne.n	80098d4 <HAL_TIM_ConfigClockSource+0x1c>
 80098d0:	2302      	movs	r3, #2
 80098d2:	e0b4      	b.n	8009a3e <HAL_TIM_ConfigClockSource+0x186>
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	2201      	movs	r2, #1
 80098d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	2202      	movs	r2, #2
 80098e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	689b      	ldr	r3, [r3, #8]
 80098ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80098ec:	68bb      	ldr	r3, [r7, #8]
 80098ee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80098f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80098f4:	68bb      	ldr	r3, [r7, #8]
 80098f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80098fa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	68ba      	ldr	r2, [r7, #8]
 8009902:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009904:	683b      	ldr	r3, [r7, #0]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800990c:	d03e      	beq.n	800998c <HAL_TIM_ConfigClockSource+0xd4>
 800990e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009912:	f200 8087 	bhi.w	8009a24 <HAL_TIM_ConfigClockSource+0x16c>
 8009916:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800991a:	f000 8086 	beq.w	8009a2a <HAL_TIM_ConfigClockSource+0x172>
 800991e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009922:	d87f      	bhi.n	8009a24 <HAL_TIM_ConfigClockSource+0x16c>
 8009924:	2b70      	cmp	r3, #112	; 0x70
 8009926:	d01a      	beq.n	800995e <HAL_TIM_ConfigClockSource+0xa6>
 8009928:	2b70      	cmp	r3, #112	; 0x70
 800992a:	d87b      	bhi.n	8009a24 <HAL_TIM_ConfigClockSource+0x16c>
 800992c:	2b60      	cmp	r3, #96	; 0x60
 800992e:	d050      	beq.n	80099d2 <HAL_TIM_ConfigClockSource+0x11a>
 8009930:	2b60      	cmp	r3, #96	; 0x60
 8009932:	d877      	bhi.n	8009a24 <HAL_TIM_ConfigClockSource+0x16c>
 8009934:	2b50      	cmp	r3, #80	; 0x50
 8009936:	d03c      	beq.n	80099b2 <HAL_TIM_ConfigClockSource+0xfa>
 8009938:	2b50      	cmp	r3, #80	; 0x50
 800993a:	d873      	bhi.n	8009a24 <HAL_TIM_ConfigClockSource+0x16c>
 800993c:	2b40      	cmp	r3, #64	; 0x40
 800993e:	d058      	beq.n	80099f2 <HAL_TIM_ConfigClockSource+0x13a>
 8009940:	2b40      	cmp	r3, #64	; 0x40
 8009942:	d86f      	bhi.n	8009a24 <HAL_TIM_ConfigClockSource+0x16c>
 8009944:	2b30      	cmp	r3, #48	; 0x30
 8009946:	d064      	beq.n	8009a12 <HAL_TIM_ConfigClockSource+0x15a>
 8009948:	2b30      	cmp	r3, #48	; 0x30
 800994a:	d86b      	bhi.n	8009a24 <HAL_TIM_ConfigClockSource+0x16c>
 800994c:	2b20      	cmp	r3, #32
 800994e:	d060      	beq.n	8009a12 <HAL_TIM_ConfigClockSource+0x15a>
 8009950:	2b20      	cmp	r3, #32
 8009952:	d867      	bhi.n	8009a24 <HAL_TIM_ConfigClockSource+0x16c>
 8009954:	2b00      	cmp	r3, #0
 8009956:	d05c      	beq.n	8009a12 <HAL_TIM_ConfigClockSource+0x15a>
 8009958:	2b10      	cmp	r3, #16
 800995a:	d05a      	beq.n	8009a12 <HAL_TIM_ConfigClockSource+0x15a>
 800995c:	e062      	b.n	8009a24 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009962:	683b      	ldr	r3, [r7, #0]
 8009964:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009966:	683b      	ldr	r3, [r7, #0]
 8009968:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800996a:	683b      	ldr	r3, [r7, #0]
 800996c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800996e:	f000 fb69 	bl	800a044 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	689b      	ldr	r3, [r3, #8]
 8009978:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800997a:	68bb      	ldr	r3, [r7, #8]
 800997c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009980:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	68ba      	ldr	r2, [r7, #8]
 8009988:	609a      	str	r2, [r3, #8]
      break;
 800998a:	e04f      	b.n	8009a2c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009990:	683b      	ldr	r3, [r7, #0]
 8009992:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009994:	683b      	ldr	r3, [r7, #0]
 8009996:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009998:	683b      	ldr	r3, [r7, #0]
 800999a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800999c:	f000 fb52 	bl	800a044 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	689a      	ldr	r2, [r3, #8]
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80099ae:	609a      	str	r2, [r3, #8]
      break;
 80099b0:	e03c      	b.n	8009a2c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80099b6:	683b      	ldr	r3, [r7, #0]
 80099b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80099ba:	683b      	ldr	r3, [r7, #0]
 80099bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80099be:	461a      	mov	r2, r3
 80099c0:	f000 fac6 	bl	8009f50 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	2150      	movs	r1, #80	; 0x50
 80099ca:	4618      	mov	r0, r3
 80099cc:	f000 fb1f 	bl	800a00e <TIM_ITRx_SetConfig>
      break;
 80099d0:	e02c      	b.n	8009a2c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80099d6:	683b      	ldr	r3, [r7, #0]
 80099d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80099da:	683b      	ldr	r3, [r7, #0]
 80099dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80099de:	461a      	mov	r2, r3
 80099e0:	f000 fae5 	bl	8009fae <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	2160      	movs	r1, #96	; 0x60
 80099ea:	4618      	mov	r0, r3
 80099ec:	f000 fb0f 	bl	800a00e <TIM_ITRx_SetConfig>
      break;
 80099f0:	e01c      	b.n	8009a2c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80099f6:	683b      	ldr	r3, [r7, #0]
 80099f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80099fa:	683b      	ldr	r3, [r7, #0]
 80099fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80099fe:	461a      	mov	r2, r3
 8009a00:	f000 faa6 	bl	8009f50 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	2140      	movs	r1, #64	; 0x40
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	f000 faff 	bl	800a00e <TIM_ITRx_SetConfig>
      break;
 8009a10:	e00c      	b.n	8009a2c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681a      	ldr	r2, [r3, #0]
 8009a16:	683b      	ldr	r3, [r7, #0]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	4619      	mov	r1, r3
 8009a1c:	4610      	mov	r0, r2
 8009a1e:	f000 faf6 	bl	800a00e <TIM_ITRx_SetConfig>
      break;
 8009a22:	e003      	b.n	8009a2c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009a24:	2301      	movs	r3, #1
 8009a26:	73fb      	strb	r3, [r7, #15]
      break;
 8009a28:	e000      	b.n	8009a2c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009a2a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	2201      	movs	r2, #1
 8009a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	2200      	movs	r2, #0
 8009a38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009a3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a3e:	4618      	mov	r0, r3
 8009a40:	3710      	adds	r7, #16
 8009a42:	46bd      	mov	sp, r7
 8009a44:	bd80      	pop	{r7, pc}

08009a46 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009a46:	b480      	push	{r7}
 8009a48:	b083      	sub	sp, #12
 8009a4a:	af00      	add	r7, sp, #0
 8009a4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009a4e:	bf00      	nop
 8009a50:	370c      	adds	r7, #12
 8009a52:	46bd      	mov	sp, r7
 8009a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a58:	4770      	bx	lr

08009a5a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009a5a:	b480      	push	{r7}
 8009a5c:	b083      	sub	sp, #12
 8009a5e:	af00      	add	r7, sp, #0
 8009a60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009a62:	bf00      	nop
 8009a64:	370c      	adds	r7, #12
 8009a66:	46bd      	mov	sp, r7
 8009a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6c:	4770      	bx	lr

08009a6e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009a6e:	b480      	push	{r7}
 8009a70:	b083      	sub	sp, #12
 8009a72:	af00      	add	r7, sp, #0
 8009a74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009a76:	bf00      	nop
 8009a78:	370c      	adds	r7, #12
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a80:	4770      	bx	lr

08009a82 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009a82:	b480      	push	{r7}
 8009a84:	b083      	sub	sp, #12
 8009a86:	af00      	add	r7, sp, #0
 8009a88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009a8a:	bf00      	nop
 8009a8c:	370c      	adds	r7, #12
 8009a8e:	46bd      	mov	sp, r7
 8009a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a94:	4770      	bx	lr
	...

08009a98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009a98:	b480      	push	{r7}
 8009a9a:	b085      	sub	sp, #20
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	6078      	str	r0, [r7, #4]
 8009aa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	4a46      	ldr	r2, [pc, #280]	; (8009bc4 <TIM_Base_SetConfig+0x12c>)
 8009aac:	4293      	cmp	r3, r2
 8009aae:	d013      	beq.n	8009ad8 <TIM_Base_SetConfig+0x40>
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ab6:	d00f      	beq.n	8009ad8 <TIM_Base_SetConfig+0x40>
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	4a43      	ldr	r2, [pc, #268]	; (8009bc8 <TIM_Base_SetConfig+0x130>)
 8009abc:	4293      	cmp	r3, r2
 8009abe:	d00b      	beq.n	8009ad8 <TIM_Base_SetConfig+0x40>
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	4a42      	ldr	r2, [pc, #264]	; (8009bcc <TIM_Base_SetConfig+0x134>)
 8009ac4:	4293      	cmp	r3, r2
 8009ac6:	d007      	beq.n	8009ad8 <TIM_Base_SetConfig+0x40>
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	4a41      	ldr	r2, [pc, #260]	; (8009bd0 <TIM_Base_SetConfig+0x138>)
 8009acc:	4293      	cmp	r3, r2
 8009ace:	d003      	beq.n	8009ad8 <TIM_Base_SetConfig+0x40>
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	4a40      	ldr	r2, [pc, #256]	; (8009bd4 <TIM_Base_SetConfig+0x13c>)
 8009ad4:	4293      	cmp	r3, r2
 8009ad6:	d108      	bne.n	8009aea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ade:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009ae0:	683b      	ldr	r3, [r7, #0]
 8009ae2:	685b      	ldr	r3, [r3, #4]
 8009ae4:	68fa      	ldr	r2, [r7, #12]
 8009ae6:	4313      	orrs	r3, r2
 8009ae8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	4a35      	ldr	r2, [pc, #212]	; (8009bc4 <TIM_Base_SetConfig+0x12c>)
 8009aee:	4293      	cmp	r3, r2
 8009af0:	d02b      	beq.n	8009b4a <TIM_Base_SetConfig+0xb2>
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009af8:	d027      	beq.n	8009b4a <TIM_Base_SetConfig+0xb2>
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	4a32      	ldr	r2, [pc, #200]	; (8009bc8 <TIM_Base_SetConfig+0x130>)
 8009afe:	4293      	cmp	r3, r2
 8009b00:	d023      	beq.n	8009b4a <TIM_Base_SetConfig+0xb2>
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	4a31      	ldr	r2, [pc, #196]	; (8009bcc <TIM_Base_SetConfig+0x134>)
 8009b06:	4293      	cmp	r3, r2
 8009b08:	d01f      	beq.n	8009b4a <TIM_Base_SetConfig+0xb2>
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	4a30      	ldr	r2, [pc, #192]	; (8009bd0 <TIM_Base_SetConfig+0x138>)
 8009b0e:	4293      	cmp	r3, r2
 8009b10:	d01b      	beq.n	8009b4a <TIM_Base_SetConfig+0xb2>
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	4a2f      	ldr	r2, [pc, #188]	; (8009bd4 <TIM_Base_SetConfig+0x13c>)
 8009b16:	4293      	cmp	r3, r2
 8009b18:	d017      	beq.n	8009b4a <TIM_Base_SetConfig+0xb2>
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	4a2e      	ldr	r2, [pc, #184]	; (8009bd8 <TIM_Base_SetConfig+0x140>)
 8009b1e:	4293      	cmp	r3, r2
 8009b20:	d013      	beq.n	8009b4a <TIM_Base_SetConfig+0xb2>
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	4a2d      	ldr	r2, [pc, #180]	; (8009bdc <TIM_Base_SetConfig+0x144>)
 8009b26:	4293      	cmp	r3, r2
 8009b28:	d00f      	beq.n	8009b4a <TIM_Base_SetConfig+0xb2>
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	4a2c      	ldr	r2, [pc, #176]	; (8009be0 <TIM_Base_SetConfig+0x148>)
 8009b2e:	4293      	cmp	r3, r2
 8009b30:	d00b      	beq.n	8009b4a <TIM_Base_SetConfig+0xb2>
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	4a2b      	ldr	r2, [pc, #172]	; (8009be4 <TIM_Base_SetConfig+0x14c>)
 8009b36:	4293      	cmp	r3, r2
 8009b38:	d007      	beq.n	8009b4a <TIM_Base_SetConfig+0xb2>
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	4a2a      	ldr	r2, [pc, #168]	; (8009be8 <TIM_Base_SetConfig+0x150>)
 8009b3e:	4293      	cmp	r3, r2
 8009b40:	d003      	beq.n	8009b4a <TIM_Base_SetConfig+0xb2>
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	4a29      	ldr	r2, [pc, #164]	; (8009bec <TIM_Base_SetConfig+0x154>)
 8009b46:	4293      	cmp	r3, r2
 8009b48:	d108      	bne.n	8009b5c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009b50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009b52:	683b      	ldr	r3, [r7, #0]
 8009b54:	68db      	ldr	r3, [r3, #12]
 8009b56:	68fa      	ldr	r2, [r7, #12]
 8009b58:	4313      	orrs	r3, r2
 8009b5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009b62:	683b      	ldr	r3, [r7, #0]
 8009b64:	695b      	ldr	r3, [r3, #20]
 8009b66:	4313      	orrs	r3, r2
 8009b68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	68fa      	ldr	r2, [r7, #12]
 8009b6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009b70:	683b      	ldr	r3, [r7, #0]
 8009b72:	689a      	ldr	r2, [r3, #8]
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009b78:	683b      	ldr	r3, [r7, #0]
 8009b7a:	681a      	ldr	r2, [r3, #0]
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	4a10      	ldr	r2, [pc, #64]	; (8009bc4 <TIM_Base_SetConfig+0x12c>)
 8009b84:	4293      	cmp	r3, r2
 8009b86:	d003      	beq.n	8009b90 <TIM_Base_SetConfig+0xf8>
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	4a12      	ldr	r2, [pc, #72]	; (8009bd4 <TIM_Base_SetConfig+0x13c>)
 8009b8c:	4293      	cmp	r3, r2
 8009b8e:	d103      	bne.n	8009b98 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009b90:	683b      	ldr	r3, [r7, #0]
 8009b92:	691a      	ldr	r2, [r3, #16]
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	2201      	movs	r2, #1
 8009b9c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	691b      	ldr	r3, [r3, #16]
 8009ba2:	f003 0301 	and.w	r3, r3, #1
 8009ba6:	2b01      	cmp	r3, #1
 8009ba8:	d105      	bne.n	8009bb6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	691b      	ldr	r3, [r3, #16]
 8009bae:	f023 0201 	bic.w	r2, r3, #1
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	611a      	str	r2, [r3, #16]
  }
}
 8009bb6:	bf00      	nop
 8009bb8:	3714      	adds	r7, #20
 8009bba:	46bd      	mov	sp, r7
 8009bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc0:	4770      	bx	lr
 8009bc2:	bf00      	nop
 8009bc4:	40010000 	.word	0x40010000
 8009bc8:	40000400 	.word	0x40000400
 8009bcc:	40000800 	.word	0x40000800
 8009bd0:	40000c00 	.word	0x40000c00
 8009bd4:	40010400 	.word	0x40010400
 8009bd8:	40014000 	.word	0x40014000
 8009bdc:	40014400 	.word	0x40014400
 8009be0:	40014800 	.word	0x40014800
 8009be4:	40001800 	.word	0x40001800
 8009be8:	40001c00 	.word	0x40001c00
 8009bec:	40002000 	.word	0x40002000

08009bf0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009bf0:	b480      	push	{r7}
 8009bf2:	b087      	sub	sp, #28
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
 8009bf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	6a1b      	ldr	r3, [r3, #32]
 8009bfe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	6a1b      	ldr	r3, [r3, #32]
 8009c04:	f023 0201 	bic.w	r2, r3, #1
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	685b      	ldr	r3, [r3, #4]
 8009c10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	699b      	ldr	r3, [r3, #24]
 8009c16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	f023 0303 	bic.w	r3, r3, #3
 8009c26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009c28:	683b      	ldr	r3, [r7, #0]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	68fa      	ldr	r2, [r7, #12]
 8009c2e:	4313      	orrs	r3, r2
 8009c30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009c32:	697b      	ldr	r3, [r7, #20]
 8009c34:	f023 0302 	bic.w	r3, r3, #2
 8009c38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009c3a:	683b      	ldr	r3, [r7, #0]
 8009c3c:	689b      	ldr	r3, [r3, #8]
 8009c3e:	697a      	ldr	r2, [r7, #20]
 8009c40:	4313      	orrs	r3, r2
 8009c42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	4a20      	ldr	r2, [pc, #128]	; (8009cc8 <TIM_OC1_SetConfig+0xd8>)
 8009c48:	4293      	cmp	r3, r2
 8009c4a:	d003      	beq.n	8009c54 <TIM_OC1_SetConfig+0x64>
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	4a1f      	ldr	r2, [pc, #124]	; (8009ccc <TIM_OC1_SetConfig+0xdc>)
 8009c50:	4293      	cmp	r3, r2
 8009c52:	d10c      	bne.n	8009c6e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009c54:	697b      	ldr	r3, [r7, #20]
 8009c56:	f023 0308 	bic.w	r3, r3, #8
 8009c5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009c5c:	683b      	ldr	r3, [r7, #0]
 8009c5e:	68db      	ldr	r3, [r3, #12]
 8009c60:	697a      	ldr	r2, [r7, #20]
 8009c62:	4313      	orrs	r3, r2
 8009c64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009c66:	697b      	ldr	r3, [r7, #20]
 8009c68:	f023 0304 	bic.w	r3, r3, #4
 8009c6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	4a15      	ldr	r2, [pc, #84]	; (8009cc8 <TIM_OC1_SetConfig+0xd8>)
 8009c72:	4293      	cmp	r3, r2
 8009c74:	d003      	beq.n	8009c7e <TIM_OC1_SetConfig+0x8e>
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	4a14      	ldr	r2, [pc, #80]	; (8009ccc <TIM_OC1_SetConfig+0xdc>)
 8009c7a:	4293      	cmp	r3, r2
 8009c7c:	d111      	bne.n	8009ca2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009c7e:	693b      	ldr	r3, [r7, #16]
 8009c80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009c84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009c86:	693b      	ldr	r3, [r7, #16]
 8009c88:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009c8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009c8e:	683b      	ldr	r3, [r7, #0]
 8009c90:	695b      	ldr	r3, [r3, #20]
 8009c92:	693a      	ldr	r2, [r7, #16]
 8009c94:	4313      	orrs	r3, r2
 8009c96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009c98:	683b      	ldr	r3, [r7, #0]
 8009c9a:	699b      	ldr	r3, [r3, #24]
 8009c9c:	693a      	ldr	r2, [r7, #16]
 8009c9e:	4313      	orrs	r3, r2
 8009ca0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	693a      	ldr	r2, [r7, #16]
 8009ca6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	68fa      	ldr	r2, [r7, #12]
 8009cac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009cae:	683b      	ldr	r3, [r7, #0]
 8009cb0:	685a      	ldr	r2, [r3, #4]
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	697a      	ldr	r2, [r7, #20]
 8009cba:	621a      	str	r2, [r3, #32]
}
 8009cbc:	bf00      	nop
 8009cbe:	371c      	adds	r7, #28
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc6:	4770      	bx	lr
 8009cc8:	40010000 	.word	0x40010000
 8009ccc:	40010400 	.word	0x40010400

08009cd0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009cd0:	b480      	push	{r7}
 8009cd2:	b087      	sub	sp, #28
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	6078      	str	r0, [r7, #4]
 8009cd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	6a1b      	ldr	r3, [r3, #32]
 8009cde:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	6a1b      	ldr	r3, [r3, #32]
 8009ce4:	f023 0210 	bic.w	r2, r3, #16
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	685b      	ldr	r3, [r3, #4]
 8009cf0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	699b      	ldr	r3, [r3, #24]
 8009cf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009cfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009d06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009d08:	683b      	ldr	r3, [r7, #0]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	021b      	lsls	r3, r3, #8
 8009d0e:	68fa      	ldr	r2, [r7, #12]
 8009d10:	4313      	orrs	r3, r2
 8009d12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009d14:	697b      	ldr	r3, [r7, #20]
 8009d16:	f023 0320 	bic.w	r3, r3, #32
 8009d1a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009d1c:	683b      	ldr	r3, [r7, #0]
 8009d1e:	689b      	ldr	r3, [r3, #8]
 8009d20:	011b      	lsls	r3, r3, #4
 8009d22:	697a      	ldr	r2, [r7, #20]
 8009d24:	4313      	orrs	r3, r2
 8009d26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	4a22      	ldr	r2, [pc, #136]	; (8009db4 <TIM_OC2_SetConfig+0xe4>)
 8009d2c:	4293      	cmp	r3, r2
 8009d2e:	d003      	beq.n	8009d38 <TIM_OC2_SetConfig+0x68>
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	4a21      	ldr	r2, [pc, #132]	; (8009db8 <TIM_OC2_SetConfig+0xe8>)
 8009d34:	4293      	cmp	r3, r2
 8009d36:	d10d      	bne.n	8009d54 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009d38:	697b      	ldr	r3, [r7, #20]
 8009d3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009d3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009d40:	683b      	ldr	r3, [r7, #0]
 8009d42:	68db      	ldr	r3, [r3, #12]
 8009d44:	011b      	lsls	r3, r3, #4
 8009d46:	697a      	ldr	r2, [r7, #20]
 8009d48:	4313      	orrs	r3, r2
 8009d4a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009d4c:	697b      	ldr	r3, [r7, #20]
 8009d4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009d52:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	4a17      	ldr	r2, [pc, #92]	; (8009db4 <TIM_OC2_SetConfig+0xe4>)
 8009d58:	4293      	cmp	r3, r2
 8009d5a:	d003      	beq.n	8009d64 <TIM_OC2_SetConfig+0x94>
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	4a16      	ldr	r2, [pc, #88]	; (8009db8 <TIM_OC2_SetConfig+0xe8>)
 8009d60:	4293      	cmp	r3, r2
 8009d62:	d113      	bne.n	8009d8c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009d64:	693b      	ldr	r3, [r7, #16]
 8009d66:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009d6a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009d6c:	693b      	ldr	r3, [r7, #16]
 8009d6e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009d72:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009d74:	683b      	ldr	r3, [r7, #0]
 8009d76:	695b      	ldr	r3, [r3, #20]
 8009d78:	009b      	lsls	r3, r3, #2
 8009d7a:	693a      	ldr	r2, [r7, #16]
 8009d7c:	4313      	orrs	r3, r2
 8009d7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009d80:	683b      	ldr	r3, [r7, #0]
 8009d82:	699b      	ldr	r3, [r3, #24]
 8009d84:	009b      	lsls	r3, r3, #2
 8009d86:	693a      	ldr	r2, [r7, #16]
 8009d88:	4313      	orrs	r3, r2
 8009d8a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	693a      	ldr	r2, [r7, #16]
 8009d90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	68fa      	ldr	r2, [r7, #12]
 8009d96:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009d98:	683b      	ldr	r3, [r7, #0]
 8009d9a:	685a      	ldr	r2, [r3, #4]
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	697a      	ldr	r2, [r7, #20]
 8009da4:	621a      	str	r2, [r3, #32]
}
 8009da6:	bf00      	nop
 8009da8:	371c      	adds	r7, #28
 8009daa:	46bd      	mov	sp, r7
 8009dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db0:	4770      	bx	lr
 8009db2:	bf00      	nop
 8009db4:	40010000 	.word	0x40010000
 8009db8:	40010400 	.word	0x40010400

08009dbc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009dbc:	b480      	push	{r7}
 8009dbe:	b087      	sub	sp, #28
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	6078      	str	r0, [r7, #4]
 8009dc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	6a1b      	ldr	r3, [r3, #32]
 8009dca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	6a1b      	ldr	r3, [r3, #32]
 8009dd0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	685b      	ldr	r3, [r3, #4]
 8009ddc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	69db      	ldr	r3, [r3, #28]
 8009de2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009dea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	f023 0303 	bic.w	r3, r3, #3
 8009df2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009df4:	683b      	ldr	r3, [r7, #0]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	68fa      	ldr	r2, [r7, #12]
 8009dfa:	4313      	orrs	r3, r2
 8009dfc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009dfe:	697b      	ldr	r3, [r7, #20]
 8009e00:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009e04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009e06:	683b      	ldr	r3, [r7, #0]
 8009e08:	689b      	ldr	r3, [r3, #8]
 8009e0a:	021b      	lsls	r3, r3, #8
 8009e0c:	697a      	ldr	r2, [r7, #20]
 8009e0e:	4313      	orrs	r3, r2
 8009e10:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	4a21      	ldr	r2, [pc, #132]	; (8009e9c <TIM_OC3_SetConfig+0xe0>)
 8009e16:	4293      	cmp	r3, r2
 8009e18:	d003      	beq.n	8009e22 <TIM_OC3_SetConfig+0x66>
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	4a20      	ldr	r2, [pc, #128]	; (8009ea0 <TIM_OC3_SetConfig+0xe4>)
 8009e1e:	4293      	cmp	r3, r2
 8009e20:	d10d      	bne.n	8009e3e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009e22:	697b      	ldr	r3, [r7, #20]
 8009e24:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009e28:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009e2a:	683b      	ldr	r3, [r7, #0]
 8009e2c:	68db      	ldr	r3, [r3, #12]
 8009e2e:	021b      	lsls	r3, r3, #8
 8009e30:	697a      	ldr	r2, [r7, #20]
 8009e32:	4313      	orrs	r3, r2
 8009e34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009e36:	697b      	ldr	r3, [r7, #20]
 8009e38:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009e3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	4a16      	ldr	r2, [pc, #88]	; (8009e9c <TIM_OC3_SetConfig+0xe0>)
 8009e42:	4293      	cmp	r3, r2
 8009e44:	d003      	beq.n	8009e4e <TIM_OC3_SetConfig+0x92>
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	4a15      	ldr	r2, [pc, #84]	; (8009ea0 <TIM_OC3_SetConfig+0xe4>)
 8009e4a:	4293      	cmp	r3, r2
 8009e4c:	d113      	bne.n	8009e76 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009e4e:	693b      	ldr	r3, [r7, #16]
 8009e50:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009e54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009e56:	693b      	ldr	r3, [r7, #16]
 8009e58:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009e5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009e5e:	683b      	ldr	r3, [r7, #0]
 8009e60:	695b      	ldr	r3, [r3, #20]
 8009e62:	011b      	lsls	r3, r3, #4
 8009e64:	693a      	ldr	r2, [r7, #16]
 8009e66:	4313      	orrs	r3, r2
 8009e68:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009e6a:	683b      	ldr	r3, [r7, #0]
 8009e6c:	699b      	ldr	r3, [r3, #24]
 8009e6e:	011b      	lsls	r3, r3, #4
 8009e70:	693a      	ldr	r2, [r7, #16]
 8009e72:	4313      	orrs	r3, r2
 8009e74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	693a      	ldr	r2, [r7, #16]
 8009e7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	68fa      	ldr	r2, [r7, #12]
 8009e80:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009e82:	683b      	ldr	r3, [r7, #0]
 8009e84:	685a      	ldr	r2, [r3, #4]
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	697a      	ldr	r2, [r7, #20]
 8009e8e:	621a      	str	r2, [r3, #32]
}
 8009e90:	bf00      	nop
 8009e92:	371c      	adds	r7, #28
 8009e94:	46bd      	mov	sp, r7
 8009e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9a:	4770      	bx	lr
 8009e9c:	40010000 	.word	0x40010000
 8009ea0:	40010400 	.word	0x40010400

08009ea4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009ea4:	b480      	push	{r7}
 8009ea6:	b087      	sub	sp, #28
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	6078      	str	r0, [r7, #4]
 8009eac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	6a1b      	ldr	r3, [r3, #32]
 8009eb2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	6a1b      	ldr	r3, [r3, #32]
 8009eb8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	685b      	ldr	r3, [r3, #4]
 8009ec4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	69db      	ldr	r3, [r3, #28]
 8009eca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009ed2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009eda:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009edc:	683b      	ldr	r3, [r7, #0]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	021b      	lsls	r3, r3, #8
 8009ee2:	68fa      	ldr	r2, [r7, #12]
 8009ee4:	4313      	orrs	r3, r2
 8009ee6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009ee8:	693b      	ldr	r3, [r7, #16]
 8009eea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009eee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009ef0:	683b      	ldr	r3, [r7, #0]
 8009ef2:	689b      	ldr	r3, [r3, #8]
 8009ef4:	031b      	lsls	r3, r3, #12
 8009ef6:	693a      	ldr	r2, [r7, #16]
 8009ef8:	4313      	orrs	r3, r2
 8009efa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	4a12      	ldr	r2, [pc, #72]	; (8009f48 <TIM_OC4_SetConfig+0xa4>)
 8009f00:	4293      	cmp	r3, r2
 8009f02:	d003      	beq.n	8009f0c <TIM_OC4_SetConfig+0x68>
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	4a11      	ldr	r2, [pc, #68]	; (8009f4c <TIM_OC4_SetConfig+0xa8>)
 8009f08:	4293      	cmp	r3, r2
 8009f0a:	d109      	bne.n	8009f20 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009f0c:	697b      	ldr	r3, [r7, #20]
 8009f0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009f12:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009f14:	683b      	ldr	r3, [r7, #0]
 8009f16:	695b      	ldr	r3, [r3, #20]
 8009f18:	019b      	lsls	r3, r3, #6
 8009f1a:	697a      	ldr	r2, [r7, #20]
 8009f1c:	4313      	orrs	r3, r2
 8009f1e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	697a      	ldr	r2, [r7, #20]
 8009f24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	68fa      	ldr	r2, [r7, #12]
 8009f2a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009f2c:	683b      	ldr	r3, [r7, #0]
 8009f2e:	685a      	ldr	r2, [r3, #4]
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	693a      	ldr	r2, [r7, #16]
 8009f38:	621a      	str	r2, [r3, #32]
}
 8009f3a:	bf00      	nop
 8009f3c:	371c      	adds	r7, #28
 8009f3e:	46bd      	mov	sp, r7
 8009f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f44:	4770      	bx	lr
 8009f46:	bf00      	nop
 8009f48:	40010000 	.word	0x40010000
 8009f4c:	40010400 	.word	0x40010400

08009f50 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009f50:	b480      	push	{r7}
 8009f52:	b087      	sub	sp, #28
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	60f8      	str	r0, [r7, #12]
 8009f58:	60b9      	str	r1, [r7, #8]
 8009f5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	6a1b      	ldr	r3, [r3, #32]
 8009f60:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	6a1b      	ldr	r3, [r3, #32]
 8009f66:	f023 0201 	bic.w	r2, r3, #1
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	699b      	ldr	r3, [r3, #24]
 8009f72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009f74:	693b      	ldr	r3, [r7, #16]
 8009f76:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009f7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	011b      	lsls	r3, r3, #4
 8009f80:	693a      	ldr	r2, [r7, #16]
 8009f82:	4313      	orrs	r3, r2
 8009f84:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009f86:	697b      	ldr	r3, [r7, #20]
 8009f88:	f023 030a 	bic.w	r3, r3, #10
 8009f8c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009f8e:	697a      	ldr	r2, [r7, #20]
 8009f90:	68bb      	ldr	r3, [r7, #8]
 8009f92:	4313      	orrs	r3, r2
 8009f94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	693a      	ldr	r2, [r7, #16]
 8009f9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	697a      	ldr	r2, [r7, #20]
 8009fa0:	621a      	str	r2, [r3, #32]
}
 8009fa2:	bf00      	nop
 8009fa4:	371c      	adds	r7, #28
 8009fa6:	46bd      	mov	sp, r7
 8009fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fac:	4770      	bx	lr

08009fae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009fae:	b480      	push	{r7}
 8009fb0:	b087      	sub	sp, #28
 8009fb2:	af00      	add	r7, sp, #0
 8009fb4:	60f8      	str	r0, [r7, #12]
 8009fb6:	60b9      	str	r1, [r7, #8]
 8009fb8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	6a1b      	ldr	r3, [r3, #32]
 8009fbe:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	6a1b      	ldr	r3, [r3, #32]
 8009fc4:	f023 0210 	bic.w	r2, r3, #16
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	699b      	ldr	r3, [r3, #24]
 8009fd0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009fd2:	693b      	ldr	r3, [r7, #16]
 8009fd4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009fd8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	031b      	lsls	r3, r3, #12
 8009fde:	693a      	ldr	r2, [r7, #16]
 8009fe0:	4313      	orrs	r3, r2
 8009fe2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009fe4:	697b      	ldr	r3, [r7, #20]
 8009fe6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009fea:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009fec:	68bb      	ldr	r3, [r7, #8]
 8009fee:	011b      	lsls	r3, r3, #4
 8009ff0:	697a      	ldr	r2, [r7, #20]
 8009ff2:	4313      	orrs	r3, r2
 8009ff4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	693a      	ldr	r2, [r7, #16]
 8009ffa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	697a      	ldr	r2, [r7, #20]
 800a000:	621a      	str	r2, [r3, #32]
}
 800a002:	bf00      	nop
 800a004:	371c      	adds	r7, #28
 800a006:	46bd      	mov	sp, r7
 800a008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a00c:	4770      	bx	lr

0800a00e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a00e:	b480      	push	{r7}
 800a010:	b085      	sub	sp, #20
 800a012:	af00      	add	r7, sp, #0
 800a014:	6078      	str	r0, [r7, #4]
 800a016:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	689b      	ldr	r3, [r3, #8]
 800a01c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a024:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a026:	683a      	ldr	r2, [r7, #0]
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	4313      	orrs	r3, r2
 800a02c:	f043 0307 	orr.w	r3, r3, #7
 800a030:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	68fa      	ldr	r2, [r7, #12]
 800a036:	609a      	str	r2, [r3, #8]
}
 800a038:	bf00      	nop
 800a03a:	3714      	adds	r7, #20
 800a03c:	46bd      	mov	sp, r7
 800a03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a042:	4770      	bx	lr

0800a044 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a044:	b480      	push	{r7}
 800a046:	b087      	sub	sp, #28
 800a048:	af00      	add	r7, sp, #0
 800a04a:	60f8      	str	r0, [r7, #12]
 800a04c:	60b9      	str	r1, [r7, #8]
 800a04e:	607a      	str	r2, [r7, #4]
 800a050:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	689b      	ldr	r3, [r3, #8]
 800a056:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a058:	697b      	ldr	r3, [r7, #20]
 800a05a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a05e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a060:	683b      	ldr	r3, [r7, #0]
 800a062:	021a      	lsls	r2, r3, #8
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	431a      	orrs	r2, r3
 800a068:	68bb      	ldr	r3, [r7, #8]
 800a06a:	4313      	orrs	r3, r2
 800a06c:	697a      	ldr	r2, [r7, #20]
 800a06e:	4313      	orrs	r3, r2
 800a070:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	697a      	ldr	r2, [r7, #20]
 800a076:	609a      	str	r2, [r3, #8]
}
 800a078:	bf00      	nop
 800a07a:	371c      	adds	r7, #28
 800a07c:	46bd      	mov	sp, r7
 800a07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a082:	4770      	bx	lr

0800a084 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a084:	b480      	push	{r7}
 800a086:	b087      	sub	sp, #28
 800a088:	af00      	add	r7, sp, #0
 800a08a:	60f8      	str	r0, [r7, #12]
 800a08c:	60b9      	str	r1, [r7, #8]
 800a08e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a090:	68bb      	ldr	r3, [r7, #8]
 800a092:	f003 031f 	and.w	r3, r3, #31
 800a096:	2201      	movs	r2, #1
 800a098:	fa02 f303 	lsl.w	r3, r2, r3
 800a09c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	6a1a      	ldr	r2, [r3, #32]
 800a0a2:	697b      	ldr	r3, [r7, #20]
 800a0a4:	43db      	mvns	r3, r3
 800a0a6:	401a      	ands	r2, r3
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	6a1a      	ldr	r2, [r3, #32]
 800a0b0:	68bb      	ldr	r3, [r7, #8]
 800a0b2:	f003 031f 	and.w	r3, r3, #31
 800a0b6:	6879      	ldr	r1, [r7, #4]
 800a0b8:	fa01 f303 	lsl.w	r3, r1, r3
 800a0bc:	431a      	orrs	r2, r3
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	621a      	str	r2, [r3, #32]
}
 800a0c2:	bf00      	nop
 800a0c4:	371c      	adds	r7, #28
 800a0c6:	46bd      	mov	sp, r7
 800a0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0cc:	4770      	bx	lr
	...

0800a0d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a0d0:	b480      	push	{r7}
 800a0d2:	b085      	sub	sp, #20
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	6078      	str	r0, [r7, #4]
 800a0d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a0e0:	2b01      	cmp	r3, #1
 800a0e2:	d101      	bne.n	800a0e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a0e4:	2302      	movs	r3, #2
 800a0e6:	e05a      	b.n	800a19e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	2201      	movs	r2, #1
 800a0ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	2202      	movs	r2, #2
 800a0f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	685b      	ldr	r3, [r3, #4]
 800a0fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	689b      	ldr	r3, [r3, #8]
 800a106:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a10e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a110:	683b      	ldr	r3, [r7, #0]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	68fa      	ldr	r2, [r7, #12]
 800a116:	4313      	orrs	r3, r2
 800a118:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	68fa      	ldr	r2, [r7, #12]
 800a120:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	4a21      	ldr	r2, [pc, #132]	; (800a1ac <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800a128:	4293      	cmp	r3, r2
 800a12a:	d022      	beq.n	800a172 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a134:	d01d      	beq.n	800a172 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	4a1d      	ldr	r2, [pc, #116]	; (800a1b0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800a13c:	4293      	cmp	r3, r2
 800a13e:	d018      	beq.n	800a172 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	4a1b      	ldr	r2, [pc, #108]	; (800a1b4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800a146:	4293      	cmp	r3, r2
 800a148:	d013      	beq.n	800a172 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	4a1a      	ldr	r2, [pc, #104]	; (800a1b8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800a150:	4293      	cmp	r3, r2
 800a152:	d00e      	beq.n	800a172 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	4a18      	ldr	r2, [pc, #96]	; (800a1bc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a15a:	4293      	cmp	r3, r2
 800a15c:	d009      	beq.n	800a172 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	4a17      	ldr	r2, [pc, #92]	; (800a1c0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a164:	4293      	cmp	r3, r2
 800a166:	d004      	beq.n	800a172 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	4a15      	ldr	r2, [pc, #84]	; (800a1c4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a16e:	4293      	cmp	r3, r2
 800a170:	d10c      	bne.n	800a18c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a172:	68bb      	ldr	r3, [r7, #8]
 800a174:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a178:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a17a:	683b      	ldr	r3, [r7, #0]
 800a17c:	685b      	ldr	r3, [r3, #4]
 800a17e:	68ba      	ldr	r2, [r7, #8]
 800a180:	4313      	orrs	r3, r2
 800a182:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	68ba      	ldr	r2, [r7, #8]
 800a18a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	2201      	movs	r2, #1
 800a190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	2200      	movs	r2, #0
 800a198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a19c:	2300      	movs	r3, #0
}
 800a19e:	4618      	mov	r0, r3
 800a1a0:	3714      	adds	r7, #20
 800a1a2:	46bd      	mov	sp, r7
 800a1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a8:	4770      	bx	lr
 800a1aa:	bf00      	nop
 800a1ac:	40010000 	.word	0x40010000
 800a1b0:	40000400 	.word	0x40000400
 800a1b4:	40000800 	.word	0x40000800
 800a1b8:	40000c00 	.word	0x40000c00
 800a1bc:	40010400 	.word	0x40010400
 800a1c0:	40014000 	.word	0x40014000
 800a1c4:	40001800 	.word	0x40001800

0800a1c8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a1c8:	b480      	push	{r7}
 800a1ca:	b085      	sub	sp, #20
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	6078      	str	r0, [r7, #4]
 800a1d0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a1d2:	2300      	movs	r3, #0
 800a1d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a1dc:	2b01      	cmp	r3, #1
 800a1de:	d101      	bne.n	800a1e4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a1e0:	2302      	movs	r3, #2
 800a1e2:	e03d      	b.n	800a260 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	2201      	movs	r2, #1
 800a1e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a1f2:	683b      	ldr	r3, [r7, #0]
 800a1f4:	68db      	ldr	r3, [r3, #12]
 800a1f6:	4313      	orrs	r3, r2
 800a1f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a200:	683b      	ldr	r3, [r7, #0]
 800a202:	689b      	ldr	r3, [r3, #8]
 800a204:	4313      	orrs	r3, r2
 800a206:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a20e:	683b      	ldr	r3, [r7, #0]
 800a210:	685b      	ldr	r3, [r3, #4]
 800a212:	4313      	orrs	r3, r2
 800a214:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a21c:	683b      	ldr	r3, [r7, #0]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	4313      	orrs	r3, r2
 800a222:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a22a:	683b      	ldr	r3, [r7, #0]
 800a22c:	691b      	ldr	r3, [r3, #16]
 800a22e:	4313      	orrs	r3, r2
 800a230:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a238:	683b      	ldr	r3, [r7, #0]
 800a23a:	695b      	ldr	r3, [r3, #20]
 800a23c:	4313      	orrs	r3, r2
 800a23e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a246:	683b      	ldr	r3, [r7, #0]
 800a248:	69db      	ldr	r3, [r3, #28]
 800a24a:	4313      	orrs	r3, r2
 800a24c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	68fa      	ldr	r2, [r7, #12]
 800a254:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	2200      	movs	r2, #0
 800a25a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a25e:	2300      	movs	r3, #0
}
 800a260:	4618      	mov	r0, r3
 800a262:	3714      	adds	r7, #20
 800a264:	46bd      	mov	sp, r7
 800a266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26a:	4770      	bx	lr

0800a26c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a26c:	b480      	push	{r7}
 800a26e:	b083      	sub	sp, #12
 800a270:	af00      	add	r7, sp, #0
 800a272:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a274:	bf00      	nop
 800a276:	370c      	adds	r7, #12
 800a278:	46bd      	mov	sp, r7
 800a27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a27e:	4770      	bx	lr

0800a280 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a280:	b480      	push	{r7}
 800a282:	b083      	sub	sp, #12
 800a284:	af00      	add	r7, sp, #0
 800a286:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a288:	bf00      	nop
 800a28a:	370c      	adds	r7, #12
 800a28c:	46bd      	mov	sp, r7
 800a28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a292:	4770      	bx	lr

0800a294 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a294:	b580      	push	{r7, lr}
 800a296:	b082      	sub	sp, #8
 800a298:	af00      	add	r7, sp, #0
 800a29a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d101      	bne.n	800a2a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a2a2:	2301      	movs	r3, #1
 800a2a4:	e042      	b.n	800a32c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a2ac:	b2db      	uxtb	r3, r3
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d106      	bne.n	800a2c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	2200      	movs	r2, #0
 800a2b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a2ba:	6878      	ldr	r0, [r7, #4]
 800a2bc:	f7fa fec8 	bl	8005050 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	2224      	movs	r2, #36	; 0x24
 800a2c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	68da      	ldr	r2, [r3, #12]
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a2d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a2d8:	6878      	ldr	r0, [r7, #4]
 800a2da:	f000 ff41 	bl	800b160 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	691a      	ldr	r2, [r3, #16]
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a2ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	695a      	ldr	r2, [r3, #20]
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a2fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	68da      	ldr	r2, [r3, #12]
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a30c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	2200      	movs	r2, #0
 800a312:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	2220      	movs	r2, #32
 800a318:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	2220      	movs	r2, #32
 800a320:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	2200      	movs	r2, #0
 800a328:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800a32a:	2300      	movs	r3, #0
}
 800a32c:	4618      	mov	r0, r3
 800a32e:	3708      	adds	r7, #8
 800a330:	46bd      	mov	sp, r7
 800a332:	bd80      	pop	{r7, pc}

0800a334 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800a334:	b580      	push	{r7, lr}
 800a336:	b08c      	sub	sp, #48	; 0x30
 800a338:	af00      	add	r7, sp, #0
 800a33a:	60f8      	str	r0, [r7, #12]
 800a33c:	60b9      	str	r1, [r7, #8]
 800a33e:	4613      	mov	r3, r2
 800a340:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a348:	b2db      	uxtb	r3, r3
 800a34a:	2b20      	cmp	r3, #32
 800a34c:	d156      	bne.n	800a3fc <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 800a34e:	68bb      	ldr	r3, [r7, #8]
 800a350:	2b00      	cmp	r3, #0
 800a352:	d002      	beq.n	800a35a <HAL_UART_Transmit_DMA+0x26>
 800a354:	88fb      	ldrh	r3, [r7, #6]
 800a356:	2b00      	cmp	r3, #0
 800a358:	d101      	bne.n	800a35e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800a35a:	2301      	movs	r3, #1
 800a35c:	e04f      	b.n	800a3fe <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 800a35e:	68ba      	ldr	r2, [r7, #8]
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	88fa      	ldrh	r2, [r7, #6]
 800a368:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	88fa      	ldrh	r2, [r7, #6]
 800a36e:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	2200      	movs	r2, #0
 800a374:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	2221      	movs	r2, #33	; 0x21
 800a37a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a382:	4a21      	ldr	r2, [pc, #132]	; (800a408 <HAL_UART_Transmit_DMA+0xd4>)
 800a384:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a38a:	4a20      	ldr	r2, [pc, #128]	; (800a40c <HAL_UART_Transmit_DMA+0xd8>)
 800a38c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a392:	4a1f      	ldr	r2, [pc, #124]	; (800a410 <HAL_UART_Transmit_DMA+0xdc>)
 800a394:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a39a:	2200      	movs	r2, #0
 800a39c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800a39e:	f107 0308 	add.w	r3, r7, #8
 800a3a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800a3a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3aa:	6819      	ldr	r1, [r3, #0]
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	3304      	adds	r3, #4
 800a3b2:	461a      	mov	r2, r3
 800a3b4:	88fb      	ldrh	r3, [r7, #6]
 800a3b6:	f7fb ffb9 	bl	800632c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a3c2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	3314      	adds	r3, #20
 800a3ca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3cc:	69bb      	ldr	r3, [r7, #24]
 800a3ce:	e853 3f00 	ldrex	r3, [r3]
 800a3d2:	617b      	str	r3, [r7, #20]
   return(result);
 800a3d4:	697b      	ldr	r3, [r7, #20]
 800a3d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a3da:	62bb      	str	r3, [r7, #40]	; 0x28
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	3314      	adds	r3, #20
 800a3e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a3e4:	627a      	str	r2, [r7, #36]	; 0x24
 800a3e6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3e8:	6a39      	ldr	r1, [r7, #32]
 800a3ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a3ec:	e841 2300 	strex	r3, r2, [r1]
 800a3f0:	61fb      	str	r3, [r7, #28]
   return(result);
 800a3f2:	69fb      	ldr	r3, [r7, #28]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d1e5      	bne.n	800a3c4 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 800a3f8:	2300      	movs	r3, #0
 800a3fa:	e000      	b.n	800a3fe <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 800a3fc:	2302      	movs	r3, #2
  }
}
 800a3fe:	4618      	mov	r0, r3
 800a400:	3730      	adds	r7, #48	; 0x30
 800a402:	46bd      	mov	sp, r7
 800a404:	bd80      	pop	{r7, pc}
 800a406:	bf00      	nop
 800a408:	0800a9ed 	.word	0x0800a9ed
 800a40c:	0800aa87 	.word	0x0800aa87
 800a410:	0800ac0b 	.word	0x0800ac0b

0800a414 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a414:	b580      	push	{r7, lr}
 800a416:	b084      	sub	sp, #16
 800a418:	af00      	add	r7, sp, #0
 800a41a:	60f8      	str	r0, [r7, #12]
 800a41c:	60b9      	str	r1, [r7, #8]
 800a41e:	4613      	mov	r3, r2
 800a420:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a428:	b2db      	uxtb	r3, r3
 800a42a:	2b20      	cmp	r3, #32
 800a42c:	d112      	bne.n	800a454 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800a42e:	68bb      	ldr	r3, [r7, #8]
 800a430:	2b00      	cmp	r3, #0
 800a432:	d002      	beq.n	800a43a <HAL_UART_Receive_DMA+0x26>
 800a434:	88fb      	ldrh	r3, [r7, #6]
 800a436:	2b00      	cmp	r3, #0
 800a438:	d101      	bne.n	800a43e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800a43a:	2301      	movs	r3, #1
 800a43c:	e00b      	b.n	800a456 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	2200      	movs	r2, #0
 800a442:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800a444:	88fb      	ldrh	r3, [r7, #6]
 800a446:	461a      	mov	r2, r3
 800a448:	68b9      	ldr	r1, [r7, #8]
 800a44a:	68f8      	ldr	r0, [r7, #12]
 800a44c:	f000 fc28 	bl	800aca0 <UART_Start_Receive_DMA>
 800a450:	4603      	mov	r3, r0
 800a452:	e000      	b.n	800a456 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 800a454:	2302      	movs	r3, #2
  }
}
 800a456:	4618      	mov	r0, r3
 800a458:	3710      	adds	r7, #16
 800a45a:	46bd      	mov	sp, r7
 800a45c:	bd80      	pop	{r7, pc}
	...

0800a460 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a460:	b580      	push	{r7, lr}
 800a462:	b0ba      	sub	sp, #232	; 0xe8
 800a464:	af00      	add	r7, sp, #0
 800a466:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	68db      	ldr	r3, [r3, #12]
 800a478:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	695b      	ldr	r3, [r3, #20]
 800a482:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800a486:	2300      	movs	r3, #0
 800a488:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800a48c:	2300      	movs	r3, #0
 800a48e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a492:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a496:	f003 030f 	and.w	r3, r3, #15
 800a49a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800a49e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d10f      	bne.n	800a4c6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a4a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a4aa:	f003 0320 	and.w	r3, r3, #32
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d009      	beq.n	800a4c6 <HAL_UART_IRQHandler+0x66>
 800a4b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a4b6:	f003 0320 	and.w	r3, r3, #32
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d003      	beq.n	800a4c6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800a4be:	6878      	ldr	r0, [r7, #4]
 800a4c0:	f000 fd8f 	bl	800afe2 <UART_Receive_IT>
      return;
 800a4c4:	e25b      	b.n	800a97e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800a4c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	f000 80de 	beq.w	800a68c <HAL_UART_IRQHandler+0x22c>
 800a4d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a4d4:	f003 0301 	and.w	r3, r3, #1
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d106      	bne.n	800a4ea <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a4dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a4e0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	f000 80d1 	beq.w	800a68c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a4ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a4ee:	f003 0301 	and.w	r3, r3, #1
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d00b      	beq.n	800a50e <HAL_UART_IRQHandler+0xae>
 800a4f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a4fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d005      	beq.n	800a50e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a506:	f043 0201 	orr.w	r2, r3, #1
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a50e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a512:	f003 0304 	and.w	r3, r3, #4
 800a516:	2b00      	cmp	r3, #0
 800a518:	d00b      	beq.n	800a532 <HAL_UART_IRQHandler+0xd2>
 800a51a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a51e:	f003 0301 	and.w	r3, r3, #1
 800a522:	2b00      	cmp	r3, #0
 800a524:	d005      	beq.n	800a532 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a52a:	f043 0202 	orr.w	r2, r3, #2
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a532:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a536:	f003 0302 	and.w	r3, r3, #2
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d00b      	beq.n	800a556 <HAL_UART_IRQHandler+0xf6>
 800a53e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a542:	f003 0301 	and.w	r3, r3, #1
 800a546:	2b00      	cmp	r3, #0
 800a548:	d005      	beq.n	800a556 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a54e:	f043 0204 	orr.w	r2, r3, #4
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800a556:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a55a:	f003 0308 	and.w	r3, r3, #8
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d011      	beq.n	800a586 <HAL_UART_IRQHandler+0x126>
 800a562:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a566:	f003 0320 	and.w	r3, r3, #32
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d105      	bne.n	800a57a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800a56e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a572:	f003 0301 	and.w	r3, r3, #1
 800a576:	2b00      	cmp	r3, #0
 800a578:	d005      	beq.n	800a586 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a57e:	f043 0208 	orr.w	r2, r3, #8
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	f000 81f2 	beq.w	800a974 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a590:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a594:	f003 0320 	and.w	r3, r3, #32
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d008      	beq.n	800a5ae <HAL_UART_IRQHandler+0x14e>
 800a59c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a5a0:	f003 0320 	and.w	r3, r3, #32
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d002      	beq.n	800a5ae <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800a5a8:	6878      	ldr	r0, [r7, #4]
 800a5aa:	f000 fd1a 	bl	800afe2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	695b      	ldr	r3, [r3, #20]
 800a5b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5b8:	2b40      	cmp	r3, #64	; 0x40
 800a5ba:	bf0c      	ite	eq
 800a5bc:	2301      	moveq	r3, #1
 800a5be:	2300      	movne	r3, #0
 800a5c0:	b2db      	uxtb	r3, r3
 800a5c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a5ca:	f003 0308 	and.w	r3, r3, #8
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d103      	bne.n	800a5da <HAL_UART_IRQHandler+0x17a>
 800a5d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d04f      	beq.n	800a67a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a5da:	6878      	ldr	r0, [r7, #4]
 800a5dc:	f000 fc22 	bl	800ae24 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	695b      	ldr	r3, [r3, #20]
 800a5e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5ea:	2b40      	cmp	r3, #64	; 0x40
 800a5ec:	d141      	bne.n	800a672 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	3314      	adds	r3, #20
 800a5f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a5fc:	e853 3f00 	ldrex	r3, [r3]
 800a600:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a604:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a608:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a60c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	3314      	adds	r3, #20
 800a616:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a61a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a61e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a622:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a626:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a62a:	e841 2300 	strex	r3, r2, [r1]
 800a62e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a632:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a636:	2b00      	cmp	r3, #0
 800a638:	d1d9      	bne.n	800a5ee <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d013      	beq.n	800a66a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a646:	4a7e      	ldr	r2, [pc, #504]	; (800a840 <HAL_UART_IRQHandler+0x3e0>)
 800a648:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a64e:	4618      	mov	r0, r3
 800a650:	f7fb ff34 	bl	80064bc <HAL_DMA_Abort_IT>
 800a654:	4603      	mov	r3, r0
 800a656:	2b00      	cmp	r3, #0
 800a658:	d016      	beq.n	800a688 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a65e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a660:	687a      	ldr	r2, [r7, #4]
 800a662:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800a664:	4610      	mov	r0, r2
 800a666:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a668:	e00e      	b.n	800a688 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a66a:	6878      	ldr	r0, [r7, #4]
 800a66c:	f000 f9a8 	bl	800a9c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a670:	e00a      	b.n	800a688 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a672:	6878      	ldr	r0, [r7, #4]
 800a674:	f000 f9a4 	bl	800a9c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a678:	e006      	b.n	800a688 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a67a:	6878      	ldr	r0, [r7, #4]
 800a67c:	f000 f9a0 	bl	800a9c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	2200      	movs	r2, #0
 800a684:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800a686:	e175      	b.n	800a974 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a688:	bf00      	nop
    return;
 800a68a:	e173      	b.n	800a974 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a690:	2b01      	cmp	r3, #1
 800a692:	f040 814f 	bne.w	800a934 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800a696:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a69a:	f003 0310 	and.w	r3, r3, #16
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	f000 8148 	beq.w	800a934 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800a6a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a6a8:	f003 0310 	and.w	r3, r3, #16
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	f000 8141 	beq.w	800a934 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	60bb      	str	r3, [r7, #8]
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	60bb      	str	r3, [r7, #8]
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	685b      	ldr	r3, [r3, #4]
 800a6c4:	60bb      	str	r3, [r7, #8]
 800a6c6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	695b      	ldr	r3, [r3, #20]
 800a6ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6d2:	2b40      	cmp	r3, #64	; 0x40
 800a6d4:	f040 80b6 	bne.w	800a844 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	685b      	ldr	r3, [r3, #4]
 800a6e0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a6e4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	f000 8145 	beq.w	800a978 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a6f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a6f6:	429a      	cmp	r2, r3
 800a6f8:	f080 813e 	bcs.w	800a978 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a702:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a708:	69db      	ldr	r3, [r3, #28]
 800a70a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a70e:	f000 8088 	beq.w	800a822 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	330c      	adds	r3, #12
 800a718:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a71c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a720:	e853 3f00 	ldrex	r3, [r3]
 800a724:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a728:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a72c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a730:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	330c      	adds	r3, #12
 800a73a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800a73e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a742:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a746:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a74a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a74e:	e841 2300 	strex	r3, r2, [r1]
 800a752:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a756:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d1d9      	bne.n	800a712 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	3314      	adds	r3, #20
 800a764:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a766:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a768:	e853 3f00 	ldrex	r3, [r3]
 800a76c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a76e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a770:	f023 0301 	bic.w	r3, r3, #1
 800a774:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	3314      	adds	r3, #20
 800a77e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a782:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a786:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a788:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a78a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a78e:	e841 2300 	strex	r3, r2, [r1]
 800a792:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a794:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a796:	2b00      	cmp	r3, #0
 800a798:	d1e1      	bne.n	800a75e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	3314      	adds	r3, #20
 800a7a0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a7a4:	e853 3f00 	ldrex	r3, [r3]
 800a7a8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a7aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a7ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a7b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	3314      	adds	r3, #20
 800a7ba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a7be:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a7c0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7c2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a7c4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a7c6:	e841 2300 	strex	r3, r2, [r1]
 800a7ca:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a7cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d1e3      	bne.n	800a79a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	2220      	movs	r2, #32
 800a7d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	2200      	movs	r2, #0
 800a7de:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	330c      	adds	r3, #12
 800a7e6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a7ea:	e853 3f00 	ldrex	r3, [r3]
 800a7ee:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a7f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a7f2:	f023 0310 	bic.w	r3, r3, #16
 800a7f6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	330c      	adds	r3, #12
 800a800:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800a804:	65ba      	str	r2, [r7, #88]	; 0x58
 800a806:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a808:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a80a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a80c:	e841 2300 	strex	r3, r2, [r1]
 800a810:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a812:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a814:	2b00      	cmp	r3, #0
 800a816:	d1e3      	bne.n	800a7e0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a81c:	4618      	mov	r0, r3
 800a81e:	f7fb fddd 	bl	80063dc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	2202      	movs	r2, #2
 800a826:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a830:	b29b      	uxth	r3, r3
 800a832:	1ad3      	subs	r3, r2, r3
 800a834:	b29b      	uxth	r3, r3
 800a836:	4619      	mov	r1, r3
 800a838:	6878      	ldr	r0, [r7, #4]
 800a83a:	f000 f8cb 	bl	800a9d4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a83e:	e09b      	b.n	800a978 <HAL_UART_IRQHandler+0x518>
 800a840:	0800aeeb 	.word	0x0800aeeb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a84c:	b29b      	uxth	r3, r3
 800a84e:	1ad3      	subs	r3, r2, r3
 800a850:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a858:	b29b      	uxth	r3, r3
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	f000 808e 	beq.w	800a97c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800a860:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a864:	2b00      	cmp	r3, #0
 800a866:	f000 8089 	beq.w	800a97c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	330c      	adds	r3, #12
 800a870:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a874:	e853 3f00 	ldrex	r3, [r3]
 800a878:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a87a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a87c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a880:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	330c      	adds	r3, #12
 800a88a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800a88e:	647a      	str	r2, [r7, #68]	; 0x44
 800a890:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a892:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a894:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a896:	e841 2300 	strex	r3, r2, [r1]
 800a89a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a89c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d1e3      	bne.n	800a86a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	3314      	adds	r3, #20
 800a8a8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8ac:	e853 3f00 	ldrex	r3, [r3]
 800a8b0:	623b      	str	r3, [r7, #32]
   return(result);
 800a8b2:	6a3b      	ldr	r3, [r7, #32]
 800a8b4:	f023 0301 	bic.w	r3, r3, #1
 800a8b8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	3314      	adds	r3, #20
 800a8c2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a8c6:	633a      	str	r2, [r7, #48]	; 0x30
 800a8c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a8cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a8ce:	e841 2300 	strex	r3, r2, [r1]
 800a8d2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a8d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d1e3      	bne.n	800a8a2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	2220      	movs	r2, #32
 800a8de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	2200      	movs	r2, #0
 800a8e6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	330c      	adds	r3, #12
 800a8ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8f0:	693b      	ldr	r3, [r7, #16]
 800a8f2:	e853 3f00 	ldrex	r3, [r3]
 800a8f6:	60fb      	str	r3, [r7, #12]
   return(result);
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	f023 0310 	bic.w	r3, r3, #16
 800a8fe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	330c      	adds	r3, #12
 800a908:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800a90c:	61fa      	str	r2, [r7, #28]
 800a90e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a910:	69b9      	ldr	r1, [r7, #24]
 800a912:	69fa      	ldr	r2, [r7, #28]
 800a914:	e841 2300 	strex	r3, r2, [r1]
 800a918:	617b      	str	r3, [r7, #20]
   return(result);
 800a91a:	697b      	ldr	r3, [r7, #20]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d1e3      	bne.n	800a8e8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	2202      	movs	r2, #2
 800a924:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a926:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a92a:	4619      	mov	r1, r3
 800a92c:	6878      	ldr	r0, [r7, #4]
 800a92e:	f000 f851 	bl	800a9d4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a932:	e023      	b.n	800a97c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a934:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a938:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d009      	beq.n	800a954 <HAL_UART_IRQHandler+0x4f4>
 800a940:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a944:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d003      	beq.n	800a954 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800a94c:	6878      	ldr	r0, [r7, #4]
 800a94e:	f000 fae0 	bl	800af12 <UART_Transmit_IT>
    return;
 800a952:	e014      	b.n	800a97e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a954:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a958:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d00e      	beq.n	800a97e <HAL_UART_IRQHandler+0x51e>
 800a960:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a964:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d008      	beq.n	800a97e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800a96c:	6878      	ldr	r0, [r7, #4]
 800a96e:	f000 fb20 	bl	800afb2 <UART_EndTransmit_IT>
    return;
 800a972:	e004      	b.n	800a97e <HAL_UART_IRQHandler+0x51e>
    return;
 800a974:	bf00      	nop
 800a976:	e002      	b.n	800a97e <HAL_UART_IRQHandler+0x51e>
      return;
 800a978:	bf00      	nop
 800a97a:	e000      	b.n	800a97e <HAL_UART_IRQHandler+0x51e>
      return;
 800a97c:	bf00      	nop
  }
}
 800a97e:	37e8      	adds	r7, #232	; 0xe8
 800a980:	46bd      	mov	sp, r7
 800a982:	bd80      	pop	{r7, pc}

0800a984 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a984:	b480      	push	{r7}
 800a986:	b083      	sub	sp, #12
 800a988:	af00      	add	r7, sp, #0
 800a98a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a98c:	bf00      	nop
 800a98e:	370c      	adds	r7, #12
 800a990:	46bd      	mov	sp, r7
 800a992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a996:	4770      	bx	lr

0800a998 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a998:	b480      	push	{r7}
 800a99a:	b083      	sub	sp, #12
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800a9a0:	bf00      	nop
 800a9a2:	370c      	adds	r7, #12
 800a9a4:	46bd      	mov	sp, r7
 800a9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9aa:	4770      	bx	lr

0800a9ac <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a9ac:	b480      	push	{r7}
 800a9ae:	b083      	sub	sp, #12
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800a9b4:	bf00      	nop
 800a9b6:	370c      	adds	r7, #12
 800a9b8:	46bd      	mov	sp, r7
 800a9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9be:	4770      	bx	lr

0800a9c0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a9c0:	b480      	push	{r7}
 800a9c2:	b083      	sub	sp, #12
 800a9c4:	af00      	add	r7, sp, #0
 800a9c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a9c8:	bf00      	nop
 800a9ca:	370c      	adds	r7, #12
 800a9cc:	46bd      	mov	sp, r7
 800a9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d2:	4770      	bx	lr

0800a9d4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a9d4:	b480      	push	{r7}
 800a9d6:	b083      	sub	sp, #12
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	6078      	str	r0, [r7, #4]
 800a9dc:	460b      	mov	r3, r1
 800a9de:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a9e0:	bf00      	nop
 800a9e2:	370c      	adds	r7, #12
 800a9e4:	46bd      	mov	sp, r7
 800a9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ea:	4770      	bx	lr

0800a9ec <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a9ec:	b580      	push	{r7, lr}
 800a9ee:	b090      	sub	sp, #64	; 0x40
 800a9f0:	af00      	add	r7, sp, #0
 800a9f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d137      	bne.n	800aa78 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800aa08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa0a:	2200      	movs	r2, #0
 800aa0c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800aa0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	3314      	adds	r3, #20
 800aa14:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa18:	e853 3f00 	ldrex	r3, [r3]
 800aa1c:	623b      	str	r3, [r7, #32]
   return(result);
 800aa1e:	6a3b      	ldr	r3, [r7, #32]
 800aa20:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aa24:	63bb      	str	r3, [r7, #56]	; 0x38
 800aa26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	3314      	adds	r3, #20
 800aa2c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aa2e:	633a      	str	r2, [r7, #48]	; 0x30
 800aa30:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa32:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800aa34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aa36:	e841 2300 	strex	r3, r2, [r1]
 800aa3a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800aa3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d1e5      	bne.n	800aa0e <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800aa42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	330c      	adds	r3, #12
 800aa48:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa4a:	693b      	ldr	r3, [r7, #16]
 800aa4c:	e853 3f00 	ldrex	r3, [r3]
 800aa50:	60fb      	str	r3, [r7, #12]
   return(result);
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa58:	637b      	str	r3, [r7, #52]	; 0x34
 800aa5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	330c      	adds	r3, #12
 800aa60:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aa62:	61fa      	str	r2, [r7, #28]
 800aa64:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa66:	69b9      	ldr	r1, [r7, #24]
 800aa68:	69fa      	ldr	r2, [r7, #28]
 800aa6a:	e841 2300 	strex	r3, r2, [r1]
 800aa6e:	617b      	str	r3, [r7, #20]
   return(result);
 800aa70:	697b      	ldr	r3, [r7, #20]
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d1e5      	bne.n	800aa42 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800aa76:	e002      	b.n	800aa7e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800aa78:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800aa7a:	f7ff ff83 	bl	800a984 <HAL_UART_TxCpltCallback>
}
 800aa7e:	bf00      	nop
 800aa80:	3740      	adds	r7, #64	; 0x40
 800aa82:	46bd      	mov	sp, r7
 800aa84:	bd80      	pop	{r7, pc}

0800aa86 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800aa86:	b580      	push	{r7, lr}
 800aa88:	b084      	sub	sp, #16
 800aa8a:	af00      	add	r7, sp, #0
 800aa8c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa92:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800aa94:	68f8      	ldr	r0, [r7, #12]
 800aa96:	f7ff ff7f 	bl	800a998 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aa9a:	bf00      	nop
 800aa9c:	3710      	adds	r7, #16
 800aa9e:	46bd      	mov	sp, r7
 800aaa0:	bd80      	pop	{r7, pc}

0800aaa2 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800aaa2:	b580      	push	{r7, lr}
 800aaa4:	b09c      	sub	sp, #112	; 0x70
 800aaa6:	af00      	add	r7, sp, #0
 800aaa8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aaae:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d172      	bne.n	800aba4 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800aabe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aac0:	2200      	movs	r2, #0
 800aac2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800aac4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	330c      	adds	r3, #12
 800aaca:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aacc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aace:	e853 3f00 	ldrex	r3, [r3]
 800aad2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800aad4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aad6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aada:	66bb      	str	r3, [r7, #104]	; 0x68
 800aadc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	330c      	adds	r3, #12
 800aae2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800aae4:	65ba      	str	r2, [r7, #88]	; 0x58
 800aae6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aae8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800aaea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800aaec:	e841 2300 	strex	r3, r2, [r1]
 800aaf0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800aaf2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d1e5      	bne.n	800aac4 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aaf8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	3314      	adds	r3, #20
 800aafe:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab02:	e853 3f00 	ldrex	r3, [r3]
 800ab06:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ab08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab0a:	f023 0301 	bic.w	r3, r3, #1
 800ab0e:	667b      	str	r3, [r7, #100]	; 0x64
 800ab10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	3314      	adds	r3, #20
 800ab16:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ab18:	647a      	str	r2, [r7, #68]	; 0x44
 800ab1a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab1c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ab1e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ab20:	e841 2300 	strex	r3, r2, [r1]
 800ab24:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ab26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d1e5      	bne.n	800aaf8 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ab2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	3314      	adds	r3, #20
 800ab32:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab36:	e853 3f00 	ldrex	r3, [r3]
 800ab3a:	623b      	str	r3, [r7, #32]
   return(result);
 800ab3c:	6a3b      	ldr	r3, [r7, #32]
 800ab3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ab42:	663b      	str	r3, [r7, #96]	; 0x60
 800ab44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	3314      	adds	r3, #20
 800ab4a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ab4c:	633a      	str	r2, [r7, #48]	; 0x30
 800ab4e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab50:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ab52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ab54:	e841 2300 	strex	r3, r2, [r1]
 800ab58:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ab5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d1e5      	bne.n	800ab2c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ab60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab62:	2220      	movs	r2, #32
 800ab64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ab68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab6c:	2b01      	cmp	r3, #1
 800ab6e:	d119      	bne.n	800aba4 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ab70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	330c      	adds	r3, #12
 800ab76:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab78:	693b      	ldr	r3, [r7, #16]
 800ab7a:	e853 3f00 	ldrex	r3, [r3]
 800ab7e:	60fb      	str	r3, [r7, #12]
   return(result);
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	f023 0310 	bic.w	r3, r3, #16
 800ab86:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ab88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	330c      	adds	r3, #12
 800ab8e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ab90:	61fa      	str	r2, [r7, #28]
 800ab92:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab94:	69b9      	ldr	r1, [r7, #24]
 800ab96:	69fa      	ldr	r2, [r7, #28]
 800ab98:	e841 2300 	strex	r3, r2, [r1]
 800ab9c:	617b      	str	r3, [r7, #20]
   return(result);
 800ab9e:	697b      	ldr	r3, [r7, #20]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d1e5      	bne.n	800ab70 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800aba4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aba6:	2200      	movs	r2, #0
 800aba8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800abaa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800abac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abae:	2b01      	cmp	r3, #1
 800abb0:	d106      	bne.n	800abc0 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800abb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800abb4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800abb6:	4619      	mov	r1, r3
 800abb8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800abba:	f7ff ff0b 	bl	800a9d4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800abbe:	e002      	b.n	800abc6 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800abc0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800abc2:	f7ff fef3 	bl	800a9ac <HAL_UART_RxCpltCallback>
}
 800abc6:	bf00      	nop
 800abc8:	3770      	adds	r7, #112	; 0x70
 800abca:	46bd      	mov	sp, r7
 800abcc:	bd80      	pop	{r7, pc}

0800abce <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800abce:	b580      	push	{r7, lr}
 800abd0:	b084      	sub	sp, #16
 800abd2:	af00      	add	r7, sp, #0
 800abd4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abda:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	2201      	movs	r2, #1
 800abe0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abe6:	2b01      	cmp	r3, #1
 800abe8:	d108      	bne.n	800abfc <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800abee:	085b      	lsrs	r3, r3, #1
 800abf0:	b29b      	uxth	r3, r3
 800abf2:	4619      	mov	r1, r3
 800abf4:	68f8      	ldr	r0, [r7, #12]
 800abf6:	f7ff feed 	bl	800a9d4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800abfa:	e002      	b.n	800ac02 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800abfc:	68f8      	ldr	r0, [r7, #12]
 800abfe:	f7f9 f947 	bl	8003e90 <HAL_UART_RxHalfCpltCallback>
}
 800ac02:	bf00      	nop
 800ac04:	3710      	adds	r7, #16
 800ac06:	46bd      	mov	sp, r7
 800ac08:	bd80      	pop	{r7, pc}

0800ac0a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800ac0a:	b580      	push	{r7, lr}
 800ac0c:	b084      	sub	sp, #16
 800ac0e:	af00      	add	r7, sp, #0
 800ac10:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800ac12:	2300      	movs	r3, #0
 800ac14:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac1a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800ac1c:	68bb      	ldr	r3, [r7, #8]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	695b      	ldr	r3, [r3, #20]
 800ac22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac26:	2b80      	cmp	r3, #128	; 0x80
 800ac28:	bf0c      	ite	eq
 800ac2a:	2301      	moveq	r3, #1
 800ac2c:	2300      	movne	r3, #0
 800ac2e:	b2db      	uxtb	r3, r3
 800ac30:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800ac32:	68bb      	ldr	r3, [r7, #8]
 800ac34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ac38:	b2db      	uxtb	r3, r3
 800ac3a:	2b21      	cmp	r3, #33	; 0x21
 800ac3c:	d108      	bne.n	800ac50 <UART_DMAError+0x46>
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d005      	beq.n	800ac50 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800ac44:	68bb      	ldr	r3, [r7, #8]
 800ac46:	2200      	movs	r2, #0
 800ac48:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800ac4a:	68b8      	ldr	r0, [r7, #8]
 800ac4c:	f000 f8c2 	bl	800add4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800ac50:	68bb      	ldr	r3, [r7, #8]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	695b      	ldr	r3, [r3, #20]
 800ac56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac5a:	2b40      	cmp	r3, #64	; 0x40
 800ac5c:	bf0c      	ite	eq
 800ac5e:	2301      	moveq	r3, #1
 800ac60:	2300      	movne	r3, #0
 800ac62:	b2db      	uxtb	r3, r3
 800ac64:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800ac66:	68bb      	ldr	r3, [r7, #8]
 800ac68:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ac6c:	b2db      	uxtb	r3, r3
 800ac6e:	2b22      	cmp	r3, #34	; 0x22
 800ac70:	d108      	bne.n	800ac84 <UART_DMAError+0x7a>
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d005      	beq.n	800ac84 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800ac78:	68bb      	ldr	r3, [r7, #8]
 800ac7a:	2200      	movs	r2, #0
 800ac7c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800ac7e:	68b8      	ldr	r0, [r7, #8]
 800ac80:	f000 f8d0 	bl	800ae24 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ac84:	68bb      	ldr	r3, [r7, #8]
 800ac86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac88:	f043 0210 	orr.w	r2, r3, #16
 800ac8c:	68bb      	ldr	r3, [r7, #8]
 800ac8e:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ac90:	68b8      	ldr	r0, [r7, #8]
 800ac92:	f7ff fe95 	bl	800a9c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ac96:	bf00      	nop
 800ac98:	3710      	adds	r7, #16
 800ac9a:	46bd      	mov	sp, r7
 800ac9c:	bd80      	pop	{r7, pc}
	...

0800aca0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800aca0:	b580      	push	{r7, lr}
 800aca2:	b098      	sub	sp, #96	; 0x60
 800aca4:	af00      	add	r7, sp, #0
 800aca6:	60f8      	str	r0, [r7, #12]
 800aca8:	60b9      	str	r1, [r7, #8]
 800acaa:	4613      	mov	r3, r2
 800acac:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800acae:	68ba      	ldr	r2, [r7, #8]
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	88fa      	ldrh	r2, [r7, #6]
 800acb8:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	2200      	movs	r2, #0
 800acbe:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	2222      	movs	r2, #34	; 0x22
 800acc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800accc:	4a3e      	ldr	r2, [pc, #248]	; (800adc8 <UART_Start_Receive_DMA+0x128>)
 800acce:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800acd4:	4a3d      	ldr	r2, [pc, #244]	; (800adcc <UART_Start_Receive_DMA+0x12c>)
 800acd6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800acdc:	4a3c      	ldr	r2, [pc, #240]	; (800add0 <UART_Start_Receive_DMA+0x130>)
 800acde:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ace4:	2200      	movs	r2, #0
 800ace6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800ace8:	f107 0308 	add.w	r3, r7, #8
 800acec:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	3304      	adds	r3, #4
 800acf8:	4619      	mov	r1, r3
 800acfa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800acfc:	681a      	ldr	r2, [r3, #0]
 800acfe:	88fb      	ldrh	r3, [r7, #6]
 800ad00:	f7fb fb14 	bl	800632c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800ad04:	2300      	movs	r3, #0
 800ad06:	613b      	str	r3, [r7, #16]
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	613b      	str	r3, [r7, #16]
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	685b      	ldr	r3, [r3, #4]
 800ad16:	613b      	str	r3, [r7, #16]
 800ad18:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	691b      	ldr	r3, [r3, #16]
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d019      	beq.n	800ad56 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	330c      	adds	r3, #12
 800ad28:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad2c:	e853 3f00 	ldrex	r3, [r3]
 800ad30:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ad32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ad38:	65bb      	str	r3, [r7, #88]	; 0x58
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	330c      	adds	r3, #12
 800ad40:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ad42:	64fa      	str	r2, [r7, #76]	; 0x4c
 800ad44:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad46:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800ad48:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ad4a:	e841 2300 	strex	r3, r2, [r1]
 800ad4e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800ad50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d1e5      	bne.n	800ad22 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	3314      	adds	r3, #20
 800ad5c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad60:	e853 3f00 	ldrex	r3, [r3]
 800ad64:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ad66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad68:	f043 0301 	orr.w	r3, r3, #1
 800ad6c:	657b      	str	r3, [r7, #84]	; 0x54
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	3314      	adds	r3, #20
 800ad74:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ad76:	63ba      	str	r2, [r7, #56]	; 0x38
 800ad78:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad7a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ad7c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ad7e:	e841 2300 	strex	r3, r2, [r1]
 800ad82:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ad84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d1e5      	bne.n	800ad56 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	3314      	adds	r3, #20
 800ad90:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad92:	69bb      	ldr	r3, [r7, #24]
 800ad94:	e853 3f00 	ldrex	r3, [r3]
 800ad98:	617b      	str	r3, [r7, #20]
   return(result);
 800ad9a:	697b      	ldr	r3, [r7, #20]
 800ad9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ada0:	653b      	str	r3, [r7, #80]	; 0x50
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	3314      	adds	r3, #20
 800ada8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800adaa:	627a      	str	r2, [r7, #36]	; 0x24
 800adac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adae:	6a39      	ldr	r1, [r7, #32]
 800adb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800adb2:	e841 2300 	strex	r3, r2, [r1]
 800adb6:	61fb      	str	r3, [r7, #28]
   return(result);
 800adb8:	69fb      	ldr	r3, [r7, #28]
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d1e5      	bne.n	800ad8a <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800adbe:	2300      	movs	r3, #0
}
 800adc0:	4618      	mov	r0, r3
 800adc2:	3760      	adds	r7, #96	; 0x60
 800adc4:	46bd      	mov	sp, r7
 800adc6:	bd80      	pop	{r7, pc}
 800adc8:	0800aaa3 	.word	0x0800aaa3
 800adcc:	0800abcf 	.word	0x0800abcf
 800add0:	0800ac0b 	.word	0x0800ac0b

0800add4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800add4:	b480      	push	{r7}
 800add6:	b089      	sub	sp, #36	; 0x24
 800add8:	af00      	add	r7, sp, #0
 800adda:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	330c      	adds	r3, #12
 800ade2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	e853 3f00 	ldrex	r3, [r3]
 800adea:	60bb      	str	r3, [r7, #8]
   return(result);
 800adec:	68bb      	ldr	r3, [r7, #8]
 800adee:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800adf2:	61fb      	str	r3, [r7, #28]
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	330c      	adds	r3, #12
 800adfa:	69fa      	ldr	r2, [r7, #28]
 800adfc:	61ba      	str	r2, [r7, #24]
 800adfe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae00:	6979      	ldr	r1, [r7, #20]
 800ae02:	69ba      	ldr	r2, [r7, #24]
 800ae04:	e841 2300 	strex	r3, r2, [r1]
 800ae08:	613b      	str	r3, [r7, #16]
   return(result);
 800ae0a:	693b      	ldr	r3, [r7, #16]
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d1e5      	bne.n	800addc <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	2220      	movs	r2, #32
 800ae14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 800ae18:	bf00      	nop
 800ae1a:	3724      	adds	r7, #36	; 0x24
 800ae1c:	46bd      	mov	sp, r7
 800ae1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae22:	4770      	bx	lr

0800ae24 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ae24:	b480      	push	{r7}
 800ae26:	b095      	sub	sp, #84	; 0x54
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	330c      	adds	r3, #12
 800ae32:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae36:	e853 3f00 	ldrex	r3, [r3]
 800ae3a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ae3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae3e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ae42:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	330c      	adds	r3, #12
 800ae4a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ae4c:	643a      	str	r2, [r7, #64]	; 0x40
 800ae4e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae50:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ae52:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ae54:	e841 2300 	strex	r3, r2, [r1]
 800ae58:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ae5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d1e5      	bne.n	800ae2c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	3314      	adds	r3, #20
 800ae66:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae68:	6a3b      	ldr	r3, [r7, #32]
 800ae6a:	e853 3f00 	ldrex	r3, [r3]
 800ae6e:	61fb      	str	r3, [r7, #28]
   return(result);
 800ae70:	69fb      	ldr	r3, [r7, #28]
 800ae72:	f023 0301 	bic.w	r3, r3, #1
 800ae76:	64bb      	str	r3, [r7, #72]	; 0x48
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	3314      	adds	r3, #20
 800ae7e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ae80:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ae82:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae84:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ae86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ae88:	e841 2300 	strex	r3, r2, [r1]
 800ae8c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ae8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d1e5      	bne.n	800ae60 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae98:	2b01      	cmp	r3, #1
 800ae9a:	d119      	bne.n	800aed0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	330c      	adds	r3, #12
 800aea2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	e853 3f00 	ldrex	r3, [r3]
 800aeaa:	60bb      	str	r3, [r7, #8]
   return(result);
 800aeac:	68bb      	ldr	r3, [r7, #8]
 800aeae:	f023 0310 	bic.w	r3, r3, #16
 800aeb2:	647b      	str	r3, [r7, #68]	; 0x44
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	330c      	adds	r3, #12
 800aeba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800aebc:	61ba      	str	r2, [r7, #24]
 800aebe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aec0:	6979      	ldr	r1, [r7, #20]
 800aec2:	69ba      	ldr	r2, [r7, #24]
 800aec4:	e841 2300 	strex	r3, r2, [r1]
 800aec8:	613b      	str	r3, [r7, #16]
   return(result);
 800aeca:	693b      	ldr	r3, [r7, #16]
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d1e5      	bne.n	800ae9c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	2220      	movs	r2, #32
 800aed4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	2200      	movs	r2, #0
 800aedc:	631a      	str	r2, [r3, #48]	; 0x30
}
 800aede:	bf00      	nop
 800aee0:	3754      	adds	r7, #84	; 0x54
 800aee2:	46bd      	mov	sp, r7
 800aee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee8:	4770      	bx	lr

0800aeea <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800aeea:	b580      	push	{r7, lr}
 800aeec:	b084      	sub	sp, #16
 800aeee:	af00      	add	r7, sp, #0
 800aef0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aef6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	2200      	movs	r2, #0
 800aefc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	2200      	movs	r2, #0
 800af02:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800af04:	68f8      	ldr	r0, [r7, #12]
 800af06:	f7ff fd5b 	bl	800a9c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800af0a:	bf00      	nop
 800af0c:	3710      	adds	r7, #16
 800af0e:	46bd      	mov	sp, r7
 800af10:	bd80      	pop	{r7, pc}

0800af12 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800af12:	b480      	push	{r7}
 800af14:	b085      	sub	sp, #20
 800af16:	af00      	add	r7, sp, #0
 800af18:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800af20:	b2db      	uxtb	r3, r3
 800af22:	2b21      	cmp	r3, #33	; 0x21
 800af24:	d13e      	bne.n	800afa4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	689b      	ldr	r3, [r3, #8]
 800af2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800af2e:	d114      	bne.n	800af5a <UART_Transmit_IT+0x48>
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	691b      	ldr	r3, [r3, #16]
 800af34:	2b00      	cmp	r3, #0
 800af36:	d110      	bne.n	800af5a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	6a1b      	ldr	r3, [r3, #32]
 800af3c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	881b      	ldrh	r3, [r3, #0]
 800af42:	461a      	mov	r2, r3
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800af4c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	6a1b      	ldr	r3, [r3, #32]
 800af52:	1c9a      	adds	r2, r3, #2
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	621a      	str	r2, [r3, #32]
 800af58:	e008      	b.n	800af6c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	6a1b      	ldr	r3, [r3, #32]
 800af5e:	1c59      	adds	r1, r3, #1
 800af60:	687a      	ldr	r2, [r7, #4]
 800af62:	6211      	str	r1, [r2, #32]
 800af64:	781a      	ldrb	r2, [r3, #0]
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800af70:	b29b      	uxth	r3, r3
 800af72:	3b01      	subs	r3, #1
 800af74:	b29b      	uxth	r3, r3
 800af76:	687a      	ldr	r2, [r7, #4]
 800af78:	4619      	mov	r1, r3
 800af7a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d10f      	bne.n	800afa0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	68da      	ldr	r2, [r3, #12]
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800af8e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	68da      	ldr	r2, [r3, #12]
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800af9e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800afa0:	2300      	movs	r3, #0
 800afa2:	e000      	b.n	800afa6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800afa4:	2302      	movs	r3, #2
  }
}
 800afa6:	4618      	mov	r0, r3
 800afa8:	3714      	adds	r7, #20
 800afaa:	46bd      	mov	sp, r7
 800afac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb0:	4770      	bx	lr

0800afb2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800afb2:	b580      	push	{r7, lr}
 800afb4:	b082      	sub	sp, #8
 800afb6:	af00      	add	r7, sp, #0
 800afb8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	68da      	ldr	r2, [r3, #12]
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800afc8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	2220      	movs	r2, #32
 800afce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800afd2:	6878      	ldr	r0, [r7, #4]
 800afd4:	f7ff fcd6 	bl	800a984 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800afd8:	2300      	movs	r3, #0
}
 800afda:	4618      	mov	r0, r3
 800afdc:	3708      	adds	r7, #8
 800afde:	46bd      	mov	sp, r7
 800afe0:	bd80      	pop	{r7, pc}

0800afe2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800afe2:	b580      	push	{r7, lr}
 800afe4:	b08c      	sub	sp, #48	; 0x30
 800afe6:	af00      	add	r7, sp, #0
 800afe8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800aff0:	b2db      	uxtb	r3, r3
 800aff2:	2b22      	cmp	r3, #34	; 0x22
 800aff4:	f040 80ae 	bne.w	800b154 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	689b      	ldr	r3, [r3, #8]
 800affc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b000:	d117      	bne.n	800b032 <UART_Receive_IT+0x50>
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	691b      	ldr	r3, [r3, #16]
 800b006:	2b00      	cmp	r3, #0
 800b008:	d113      	bne.n	800b032 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800b00a:	2300      	movs	r3, #0
 800b00c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b012:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	685b      	ldr	r3, [r3, #4]
 800b01a:	b29b      	uxth	r3, r3
 800b01c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b020:	b29a      	uxth	r2, r3
 800b022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b024:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b02a:	1c9a      	adds	r2, r3, #2
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	629a      	str	r2, [r3, #40]	; 0x28
 800b030:	e026      	b.n	800b080 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b036:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800b038:	2300      	movs	r3, #0
 800b03a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	689b      	ldr	r3, [r3, #8]
 800b040:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b044:	d007      	beq.n	800b056 <UART_Receive_IT+0x74>
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	689b      	ldr	r3, [r3, #8]
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d10a      	bne.n	800b064 <UART_Receive_IT+0x82>
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	691b      	ldr	r3, [r3, #16]
 800b052:	2b00      	cmp	r3, #0
 800b054:	d106      	bne.n	800b064 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	685b      	ldr	r3, [r3, #4]
 800b05c:	b2da      	uxtb	r2, r3
 800b05e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b060:	701a      	strb	r2, [r3, #0]
 800b062:	e008      	b.n	800b076 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	685b      	ldr	r3, [r3, #4]
 800b06a:	b2db      	uxtb	r3, r3
 800b06c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b070:	b2da      	uxtb	r2, r3
 800b072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b074:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b07a:	1c5a      	adds	r2, r3, #1
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b084:	b29b      	uxth	r3, r3
 800b086:	3b01      	subs	r3, #1
 800b088:	b29b      	uxth	r3, r3
 800b08a:	687a      	ldr	r2, [r7, #4]
 800b08c:	4619      	mov	r1, r3
 800b08e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800b090:	2b00      	cmp	r3, #0
 800b092:	d15d      	bne.n	800b150 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	68da      	ldr	r2, [r3, #12]
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	f022 0220 	bic.w	r2, r2, #32
 800b0a2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	68da      	ldr	r2, [r3, #12]
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b0b2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	695a      	ldr	r2, [r3, #20]
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	f022 0201 	bic.w	r2, r2, #1
 800b0c2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	2220      	movs	r2, #32
 800b0c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	2200      	movs	r2, #0
 800b0d0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0d6:	2b01      	cmp	r3, #1
 800b0d8:	d135      	bne.n	800b146 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	2200      	movs	r2, #0
 800b0de:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	330c      	adds	r3, #12
 800b0e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0e8:	697b      	ldr	r3, [r7, #20]
 800b0ea:	e853 3f00 	ldrex	r3, [r3]
 800b0ee:	613b      	str	r3, [r7, #16]
   return(result);
 800b0f0:	693b      	ldr	r3, [r7, #16]
 800b0f2:	f023 0310 	bic.w	r3, r3, #16
 800b0f6:	627b      	str	r3, [r7, #36]	; 0x24
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	330c      	adds	r3, #12
 800b0fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b100:	623a      	str	r2, [r7, #32]
 800b102:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b104:	69f9      	ldr	r1, [r7, #28]
 800b106:	6a3a      	ldr	r2, [r7, #32]
 800b108:	e841 2300 	strex	r3, r2, [r1]
 800b10c:	61bb      	str	r3, [r7, #24]
   return(result);
 800b10e:	69bb      	ldr	r3, [r7, #24]
 800b110:	2b00      	cmp	r3, #0
 800b112:	d1e5      	bne.n	800b0e0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	f003 0310 	and.w	r3, r3, #16
 800b11e:	2b10      	cmp	r3, #16
 800b120:	d10a      	bne.n	800b138 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b122:	2300      	movs	r3, #0
 800b124:	60fb      	str	r3, [r7, #12]
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	60fb      	str	r3, [r7, #12]
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	685b      	ldr	r3, [r3, #4]
 800b134:	60fb      	str	r3, [r7, #12]
 800b136:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b13c:	4619      	mov	r1, r3
 800b13e:	6878      	ldr	r0, [r7, #4]
 800b140:	f7ff fc48 	bl	800a9d4 <HAL_UARTEx_RxEventCallback>
 800b144:	e002      	b.n	800b14c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800b146:	6878      	ldr	r0, [r7, #4]
 800b148:	f7ff fc30 	bl	800a9ac <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800b14c:	2300      	movs	r3, #0
 800b14e:	e002      	b.n	800b156 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800b150:	2300      	movs	r3, #0
 800b152:	e000      	b.n	800b156 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800b154:	2302      	movs	r3, #2
  }
}
 800b156:	4618      	mov	r0, r3
 800b158:	3730      	adds	r7, #48	; 0x30
 800b15a:	46bd      	mov	sp, r7
 800b15c:	bd80      	pop	{r7, pc}
	...

0800b160 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b160:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b164:	b0c0      	sub	sp, #256	; 0x100
 800b166:	af00      	add	r7, sp, #0
 800b168:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b16c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	691b      	ldr	r3, [r3, #16]
 800b174:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800b178:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b17c:	68d9      	ldr	r1, [r3, #12]
 800b17e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b182:	681a      	ldr	r2, [r3, #0]
 800b184:	ea40 0301 	orr.w	r3, r0, r1
 800b188:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b18a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b18e:	689a      	ldr	r2, [r3, #8]
 800b190:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b194:	691b      	ldr	r3, [r3, #16]
 800b196:	431a      	orrs	r2, r3
 800b198:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b19c:	695b      	ldr	r3, [r3, #20]
 800b19e:	431a      	orrs	r2, r3
 800b1a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b1a4:	69db      	ldr	r3, [r3, #28]
 800b1a6:	4313      	orrs	r3, r2
 800b1a8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800b1ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	68db      	ldr	r3, [r3, #12]
 800b1b4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800b1b8:	f021 010c 	bic.w	r1, r1, #12
 800b1bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b1c0:	681a      	ldr	r2, [r3, #0]
 800b1c2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b1c6:	430b      	orrs	r3, r1
 800b1c8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b1ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	695b      	ldr	r3, [r3, #20]
 800b1d2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800b1d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b1da:	6999      	ldr	r1, [r3, #24]
 800b1dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b1e0:	681a      	ldr	r2, [r3, #0]
 800b1e2:	ea40 0301 	orr.w	r3, r0, r1
 800b1e6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b1e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b1ec:	681a      	ldr	r2, [r3, #0]
 800b1ee:	4b8f      	ldr	r3, [pc, #572]	; (800b42c <UART_SetConfig+0x2cc>)
 800b1f0:	429a      	cmp	r2, r3
 800b1f2:	d005      	beq.n	800b200 <UART_SetConfig+0xa0>
 800b1f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b1f8:	681a      	ldr	r2, [r3, #0]
 800b1fa:	4b8d      	ldr	r3, [pc, #564]	; (800b430 <UART_SetConfig+0x2d0>)
 800b1fc:	429a      	cmp	r2, r3
 800b1fe:	d104      	bne.n	800b20a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b200:	f7fd fc74 	bl	8008aec <HAL_RCC_GetPCLK2Freq>
 800b204:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800b208:	e003      	b.n	800b212 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b20a:	f7fd fc5b 	bl	8008ac4 <HAL_RCC_GetPCLK1Freq>
 800b20e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b212:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b216:	69db      	ldr	r3, [r3, #28]
 800b218:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b21c:	f040 810c 	bne.w	800b438 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b220:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b224:	2200      	movs	r2, #0
 800b226:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b22a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800b22e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800b232:	4622      	mov	r2, r4
 800b234:	462b      	mov	r3, r5
 800b236:	1891      	adds	r1, r2, r2
 800b238:	65b9      	str	r1, [r7, #88]	; 0x58
 800b23a:	415b      	adcs	r3, r3
 800b23c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b23e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800b242:	4621      	mov	r1, r4
 800b244:	eb12 0801 	adds.w	r8, r2, r1
 800b248:	4629      	mov	r1, r5
 800b24a:	eb43 0901 	adc.w	r9, r3, r1
 800b24e:	f04f 0200 	mov.w	r2, #0
 800b252:	f04f 0300 	mov.w	r3, #0
 800b256:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b25a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b25e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b262:	4690      	mov	r8, r2
 800b264:	4699      	mov	r9, r3
 800b266:	4623      	mov	r3, r4
 800b268:	eb18 0303 	adds.w	r3, r8, r3
 800b26c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b270:	462b      	mov	r3, r5
 800b272:	eb49 0303 	adc.w	r3, r9, r3
 800b276:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b27a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b27e:	685b      	ldr	r3, [r3, #4]
 800b280:	2200      	movs	r2, #0
 800b282:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b286:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800b28a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b28e:	460b      	mov	r3, r1
 800b290:	18db      	adds	r3, r3, r3
 800b292:	653b      	str	r3, [r7, #80]	; 0x50
 800b294:	4613      	mov	r3, r2
 800b296:	eb42 0303 	adc.w	r3, r2, r3
 800b29a:	657b      	str	r3, [r7, #84]	; 0x54
 800b29c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800b2a0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800b2a4:	f7f5 fc7a 	bl	8000b9c <__aeabi_uldivmod>
 800b2a8:	4602      	mov	r2, r0
 800b2aa:	460b      	mov	r3, r1
 800b2ac:	4b61      	ldr	r3, [pc, #388]	; (800b434 <UART_SetConfig+0x2d4>)
 800b2ae:	fba3 2302 	umull	r2, r3, r3, r2
 800b2b2:	095b      	lsrs	r3, r3, #5
 800b2b4:	011c      	lsls	r4, r3, #4
 800b2b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b2ba:	2200      	movs	r2, #0
 800b2bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b2c0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800b2c4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800b2c8:	4642      	mov	r2, r8
 800b2ca:	464b      	mov	r3, r9
 800b2cc:	1891      	adds	r1, r2, r2
 800b2ce:	64b9      	str	r1, [r7, #72]	; 0x48
 800b2d0:	415b      	adcs	r3, r3
 800b2d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b2d4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800b2d8:	4641      	mov	r1, r8
 800b2da:	eb12 0a01 	adds.w	sl, r2, r1
 800b2de:	4649      	mov	r1, r9
 800b2e0:	eb43 0b01 	adc.w	fp, r3, r1
 800b2e4:	f04f 0200 	mov.w	r2, #0
 800b2e8:	f04f 0300 	mov.w	r3, #0
 800b2ec:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b2f0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b2f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b2f8:	4692      	mov	sl, r2
 800b2fa:	469b      	mov	fp, r3
 800b2fc:	4643      	mov	r3, r8
 800b2fe:	eb1a 0303 	adds.w	r3, sl, r3
 800b302:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b306:	464b      	mov	r3, r9
 800b308:	eb4b 0303 	adc.w	r3, fp, r3
 800b30c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b310:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b314:	685b      	ldr	r3, [r3, #4]
 800b316:	2200      	movs	r2, #0
 800b318:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b31c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800b320:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b324:	460b      	mov	r3, r1
 800b326:	18db      	adds	r3, r3, r3
 800b328:	643b      	str	r3, [r7, #64]	; 0x40
 800b32a:	4613      	mov	r3, r2
 800b32c:	eb42 0303 	adc.w	r3, r2, r3
 800b330:	647b      	str	r3, [r7, #68]	; 0x44
 800b332:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b336:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800b33a:	f7f5 fc2f 	bl	8000b9c <__aeabi_uldivmod>
 800b33e:	4602      	mov	r2, r0
 800b340:	460b      	mov	r3, r1
 800b342:	4611      	mov	r1, r2
 800b344:	4b3b      	ldr	r3, [pc, #236]	; (800b434 <UART_SetConfig+0x2d4>)
 800b346:	fba3 2301 	umull	r2, r3, r3, r1
 800b34a:	095b      	lsrs	r3, r3, #5
 800b34c:	2264      	movs	r2, #100	; 0x64
 800b34e:	fb02 f303 	mul.w	r3, r2, r3
 800b352:	1acb      	subs	r3, r1, r3
 800b354:	00db      	lsls	r3, r3, #3
 800b356:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800b35a:	4b36      	ldr	r3, [pc, #216]	; (800b434 <UART_SetConfig+0x2d4>)
 800b35c:	fba3 2302 	umull	r2, r3, r3, r2
 800b360:	095b      	lsrs	r3, r3, #5
 800b362:	005b      	lsls	r3, r3, #1
 800b364:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b368:	441c      	add	r4, r3
 800b36a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b36e:	2200      	movs	r2, #0
 800b370:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b374:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800b378:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800b37c:	4642      	mov	r2, r8
 800b37e:	464b      	mov	r3, r9
 800b380:	1891      	adds	r1, r2, r2
 800b382:	63b9      	str	r1, [r7, #56]	; 0x38
 800b384:	415b      	adcs	r3, r3
 800b386:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b388:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800b38c:	4641      	mov	r1, r8
 800b38e:	1851      	adds	r1, r2, r1
 800b390:	6339      	str	r1, [r7, #48]	; 0x30
 800b392:	4649      	mov	r1, r9
 800b394:	414b      	adcs	r3, r1
 800b396:	637b      	str	r3, [r7, #52]	; 0x34
 800b398:	f04f 0200 	mov.w	r2, #0
 800b39c:	f04f 0300 	mov.w	r3, #0
 800b3a0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800b3a4:	4659      	mov	r1, fp
 800b3a6:	00cb      	lsls	r3, r1, #3
 800b3a8:	4651      	mov	r1, sl
 800b3aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b3ae:	4651      	mov	r1, sl
 800b3b0:	00ca      	lsls	r2, r1, #3
 800b3b2:	4610      	mov	r0, r2
 800b3b4:	4619      	mov	r1, r3
 800b3b6:	4603      	mov	r3, r0
 800b3b8:	4642      	mov	r2, r8
 800b3ba:	189b      	adds	r3, r3, r2
 800b3bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b3c0:	464b      	mov	r3, r9
 800b3c2:	460a      	mov	r2, r1
 800b3c4:	eb42 0303 	adc.w	r3, r2, r3
 800b3c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b3cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b3d0:	685b      	ldr	r3, [r3, #4]
 800b3d2:	2200      	movs	r2, #0
 800b3d4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b3d8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800b3dc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b3e0:	460b      	mov	r3, r1
 800b3e2:	18db      	adds	r3, r3, r3
 800b3e4:	62bb      	str	r3, [r7, #40]	; 0x28
 800b3e6:	4613      	mov	r3, r2
 800b3e8:	eb42 0303 	adc.w	r3, r2, r3
 800b3ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b3ee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b3f2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800b3f6:	f7f5 fbd1 	bl	8000b9c <__aeabi_uldivmod>
 800b3fa:	4602      	mov	r2, r0
 800b3fc:	460b      	mov	r3, r1
 800b3fe:	4b0d      	ldr	r3, [pc, #52]	; (800b434 <UART_SetConfig+0x2d4>)
 800b400:	fba3 1302 	umull	r1, r3, r3, r2
 800b404:	095b      	lsrs	r3, r3, #5
 800b406:	2164      	movs	r1, #100	; 0x64
 800b408:	fb01 f303 	mul.w	r3, r1, r3
 800b40c:	1ad3      	subs	r3, r2, r3
 800b40e:	00db      	lsls	r3, r3, #3
 800b410:	3332      	adds	r3, #50	; 0x32
 800b412:	4a08      	ldr	r2, [pc, #32]	; (800b434 <UART_SetConfig+0x2d4>)
 800b414:	fba2 2303 	umull	r2, r3, r2, r3
 800b418:	095b      	lsrs	r3, r3, #5
 800b41a:	f003 0207 	and.w	r2, r3, #7
 800b41e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	4422      	add	r2, r4
 800b426:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b428:	e106      	b.n	800b638 <UART_SetConfig+0x4d8>
 800b42a:	bf00      	nop
 800b42c:	40011000 	.word	0x40011000
 800b430:	40011400 	.word	0x40011400
 800b434:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b438:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b43c:	2200      	movs	r2, #0
 800b43e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b442:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b446:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800b44a:	4642      	mov	r2, r8
 800b44c:	464b      	mov	r3, r9
 800b44e:	1891      	adds	r1, r2, r2
 800b450:	6239      	str	r1, [r7, #32]
 800b452:	415b      	adcs	r3, r3
 800b454:	627b      	str	r3, [r7, #36]	; 0x24
 800b456:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b45a:	4641      	mov	r1, r8
 800b45c:	1854      	adds	r4, r2, r1
 800b45e:	4649      	mov	r1, r9
 800b460:	eb43 0501 	adc.w	r5, r3, r1
 800b464:	f04f 0200 	mov.w	r2, #0
 800b468:	f04f 0300 	mov.w	r3, #0
 800b46c:	00eb      	lsls	r3, r5, #3
 800b46e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b472:	00e2      	lsls	r2, r4, #3
 800b474:	4614      	mov	r4, r2
 800b476:	461d      	mov	r5, r3
 800b478:	4643      	mov	r3, r8
 800b47a:	18e3      	adds	r3, r4, r3
 800b47c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b480:	464b      	mov	r3, r9
 800b482:	eb45 0303 	adc.w	r3, r5, r3
 800b486:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b48a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b48e:	685b      	ldr	r3, [r3, #4]
 800b490:	2200      	movs	r2, #0
 800b492:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b496:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b49a:	f04f 0200 	mov.w	r2, #0
 800b49e:	f04f 0300 	mov.w	r3, #0
 800b4a2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800b4a6:	4629      	mov	r1, r5
 800b4a8:	008b      	lsls	r3, r1, #2
 800b4aa:	4621      	mov	r1, r4
 800b4ac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b4b0:	4621      	mov	r1, r4
 800b4b2:	008a      	lsls	r2, r1, #2
 800b4b4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800b4b8:	f7f5 fb70 	bl	8000b9c <__aeabi_uldivmod>
 800b4bc:	4602      	mov	r2, r0
 800b4be:	460b      	mov	r3, r1
 800b4c0:	4b60      	ldr	r3, [pc, #384]	; (800b644 <UART_SetConfig+0x4e4>)
 800b4c2:	fba3 2302 	umull	r2, r3, r3, r2
 800b4c6:	095b      	lsrs	r3, r3, #5
 800b4c8:	011c      	lsls	r4, r3, #4
 800b4ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b4ce:	2200      	movs	r2, #0
 800b4d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b4d4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b4d8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800b4dc:	4642      	mov	r2, r8
 800b4de:	464b      	mov	r3, r9
 800b4e0:	1891      	adds	r1, r2, r2
 800b4e2:	61b9      	str	r1, [r7, #24]
 800b4e4:	415b      	adcs	r3, r3
 800b4e6:	61fb      	str	r3, [r7, #28]
 800b4e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b4ec:	4641      	mov	r1, r8
 800b4ee:	1851      	adds	r1, r2, r1
 800b4f0:	6139      	str	r1, [r7, #16]
 800b4f2:	4649      	mov	r1, r9
 800b4f4:	414b      	adcs	r3, r1
 800b4f6:	617b      	str	r3, [r7, #20]
 800b4f8:	f04f 0200 	mov.w	r2, #0
 800b4fc:	f04f 0300 	mov.w	r3, #0
 800b500:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b504:	4659      	mov	r1, fp
 800b506:	00cb      	lsls	r3, r1, #3
 800b508:	4651      	mov	r1, sl
 800b50a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b50e:	4651      	mov	r1, sl
 800b510:	00ca      	lsls	r2, r1, #3
 800b512:	4610      	mov	r0, r2
 800b514:	4619      	mov	r1, r3
 800b516:	4603      	mov	r3, r0
 800b518:	4642      	mov	r2, r8
 800b51a:	189b      	adds	r3, r3, r2
 800b51c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b520:	464b      	mov	r3, r9
 800b522:	460a      	mov	r2, r1
 800b524:	eb42 0303 	adc.w	r3, r2, r3
 800b528:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b52c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b530:	685b      	ldr	r3, [r3, #4]
 800b532:	2200      	movs	r2, #0
 800b534:	67bb      	str	r3, [r7, #120]	; 0x78
 800b536:	67fa      	str	r2, [r7, #124]	; 0x7c
 800b538:	f04f 0200 	mov.w	r2, #0
 800b53c:	f04f 0300 	mov.w	r3, #0
 800b540:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800b544:	4649      	mov	r1, r9
 800b546:	008b      	lsls	r3, r1, #2
 800b548:	4641      	mov	r1, r8
 800b54a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b54e:	4641      	mov	r1, r8
 800b550:	008a      	lsls	r2, r1, #2
 800b552:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800b556:	f7f5 fb21 	bl	8000b9c <__aeabi_uldivmod>
 800b55a:	4602      	mov	r2, r0
 800b55c:	460b      	mov	r3, r1
 800b55e:	4611      	mov	r1, r2
 800b560:	4b38      	ldr	r3, [pc, #224]	; (800b644 <UART_SetConfig+0x4e4>)
 800b562:	fba3 2301 	umull	r2, r3, r3, r1
 800b566:	095b      	lsrs	r3, r3, #5
 800b568:	2264      	movs	r2, #100	; 0x64
 800b56a:	fb02 f303 	mul.w	r3, r2, r3
 800b56e:	1acb      	subs	r3, r1, r3
 800b570:	011b      	lsls	r3, r3, #4
 800b572:	3332      	adds	r3, #50	; 0x32
 800b574:	4a33      	ldr	r2, [pc, #204]	; (800b644 <UART_SetConfig+0x4e4>)
 800b576:	fba2 2303 	umull	r2, r3, r2, r3
 800b57a:	095b      	lsrs	r3, r3, #5
 800b57c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b580:	441c      	add	r4, r3
 800b582:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b586:	2200      	movs	r2, #0
 800b588:	673b      	str	r3, [r7, #112]	; 0x70
 800b58a:	677a      	str	r2, [r7, #116]	; 0x74
 800b58c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800b590:	4642      	mov	r2, r8
 800b592:	464b      	mov	r3, r9
 800b594:	1891      	adds	r1, r2, r2
 800b596:	60b9      	str	r1, [r7, #8]
 800b598:	415b      	adcs	r3, r3
 800b59a:	60fb      	str	r3, [r7, #12]
 800b59c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b5a0:	4641      	mov	r1, r8
 800b5a2:	1851      	adds	r1, r2, r1
 800b5a4:	6039      	str	r1, [r7, #0]
 800b5a6:	4649      	mov	r1, r9
 800b5a8:	414b      	adcs	r3, r1
 800b5aa:	607b      	str	r3, [r7, #4]
 800b5ac:	f04f 0200 	mov.w	r2, #0
 800b5b0:	f04f 0300 	mov.w	r3, #0
 800b5b4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800b5b8:	4659      	mov	r1, fp
 800b5ba:	00cb      	lsls	r3, r1, #3
 800b5bc:	4651      	mov	r1, sl
 800b5be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b5c2:	4651      	mov	r1, sl
 800b5c4:	00ca      	lsls	r2, r1, #3
 800b5c6:	4610      	mov	r0, r2
 800b5c8:	4619      	mov	r1, r3
 800b5ca:	4603      	mov	r3, r0
 800b5cc:	4642      	mov	r2, r8
 800b5ce:	189b      	adds	r3, r3, r2
 800b5d0:	66bb      	str	r3, [r7, #104]	; 0x68
 800b5d2:	464b      	mov	r3, r9
 800b5d4:	460a      	mov	r2, r1
 800b5d6:	eb42 0303 	adc.w	r3, r2, r3
 800b5da:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b5dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b5e0:	685b      	ldr	r3, [r3, #4]
 800b5e2:	2200      	movs	r2, #0
 800b5e4:	663b      	str	r3, [r7, #96]	; 0x60
 800b5e6:	667a      	str	r2, [r7, #100]	; 0x64
 800b5e8:	f04f 0200 	mov.w	r2, #0
 800b5ec:	f04f 0300 	mov.w	r3, #0
 800b5f0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800b5f4:	4649      	mov	r1, r9
 800b5f6:	008b      	lsls	r3, r1, #2
 800b5f8:	4641      	mov	r1, r8
 800b5fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b5fe:	4641      	mov	r1, r8
 800b600:	008a      	lsls	r2, r1, #2
 800b602:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800b606:	f7f5 fac9 	bl	8000b9c <__aeabi_uldivmod>
 800b60a:	4602      	mov	r2, r0
 800b60c:	460b      	mov	r3, r1
 800b60e:	4b0d      	ldr	r3, [pc, #52]	; (800b644 <UART_SetConfig+0x4e4>)
 800b610:	fba3 1302 	umull	r1, r3, r3, r2
 800b614:	095b      	lsrs	r3, r3, #5
 800b616:	2164      	movs	r1, #100	; 0x64
 800b618:	fb01 f303 	mul.w	r3, r1, r3
 800b61c:	1ad3      	subs	r3, r2, r3
 800b61e:	011b      	lsls	r3, r3, #4
 800b620:	3332      	adds	r3, #50	; 0x32
 800b622:	4a08      	ldr	r2, [pc, #32]	; (800b644 <UART_SetConfig+0x4e4>)
 800b624:	fba2 2303 	umull	r2, r3, r2, r3
 800b628:	095b      	lsrs	r3, r3, #5
 800b62a:	f003 020f 	and.w	r2, r3, #15
 800b62e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	4422      	add	r2, r4
 800b636:	609a      	str	r2, [r3, #8]
}
 800b638:	bf00      	nop
 800b63a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800b63e:	46bd      	mov	sp, r7
 800b640:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b644:	51eb851f 	.word	0x51eb851f

0800b648 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b648:	b084      	sub	sp, #16
 800b64a:	b580      	push	{r7, lr}
 800b64c:	b084      	sub	sp, #16
 800b64e:	af00      	add	r7, sp, #0
 800b650:	6078      	str	r0, [r7, #4]
 800b652:	f107 001c 	add.w	r0, r7, #28
 800b656:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b65a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800b65e:	2b01      	cmp	r3, #1
 800b660:	d123      	bne.n	800b6aa <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b666:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	68db      	ldr	r3, [r3, #12]
 800b672:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800b676:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b67a:	687a      	ldr	r2, [r7, #4]
 800b67c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	68db      	ldr	r3, [r3, #12]
 800b682:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800b68a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b68e:	2b01      	cmp	r3, #1
 800b690:	d105      	bne.n	800b69e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	68db      	ldr	r3, [r3, #12]
 800b696:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b69e:	6878      	ldr	r0, [r7, #4]
 800b6a0:	f001 fae2 	bl	800cc68 <USB_CoreReset>
 800b6a4:	4603      	mov	r3, r0
 800b6a6:	73fb      	strb	r3, [r7, #15]
 800b6a8:	e01b      	b.n	800b6e2 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	68db      	ldr	r3, [r3, #12]
 800b6ae:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b6b6:	6878      	ldr	r0, [r7, #4]
 800b6b8:	f001 fad6 	bl	800cc68 <USB_CoreReset>
 800b6bc:	4603      	mov	r3, r0
 800b6be:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800b6c0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d106      	bne.n	800b6d6 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6cc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	639a      	str	r2, [r3, #56]	; 0x38
 800b6d4:	e005      	b.n	800b6e2 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6da:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800b6e2:	7fbb      	ldrb	r3, [r7, #30]
 800b6e4:	2b01      	cmp	r3, #1
 800b6e6:	d10b      	bne.n	800b700 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	689b      	ldr	r3, [r3, #8]
 800b6ec:	f043 0206 	orr.w	r2, r3, #6
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	689b      	ldr	r3, [r3, #8]
 800b6f8:	f043 0220 	orr.w	r2, r3, #32
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800b700:	7bfb      	ldrb	r3, [r7, #15]
}
 800b702:	4618      	mov	r0, r3
 800b704:	3710      	adds	r7, #16
 800b706:	46bd      	mov	sp, r7
 800b708:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b70c:	b004      	add	sp, #16
 800b70e:	4770      	bx	lr

0800b710 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800b710:	b480      	push	{r7}
 800b712:	b087      	sub	sp, #28
 800b714:	af00      	add	r7, sp, #0
 800b716:	60f8      	str	r0, [r7, #12]
 800b718:	60b9      	str	r1, [r7, #8]
 800b71a:	4613      	mov	r3, r2
 800b71c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800b71e:	79fb      	ldrb	r3, [r7, #7]
 800b720:	2b02      	cmp	r3, #2
 800b722:	d165      	bne.n	800b7f0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800b724:	68bb      	ldr	r3, [r7, #8]
 800b726:	4a41      	ldr	r2, [pc, #260]	; (800b82c <USB_SetTurnaroundTime+0x11c>)
 800b728:	4293      	cmp	r3, r2
 800b72a:	d906      	bls.n	800b73a <USB_SetTurnaroundTime+0x2a>
 800b72c:	68bb      	ldr	r3, [r7, #8]
 800b72e:	4a40      	ldr	r2, [pc, #256]	; (800b830 <USB_SetTurnaroundTime+0x120>)
 800b730:	4293      	cmp	r3, r2
 800b732:	d202      	bcs.n	800b73a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800b734:	230f      	movs	r3, #15
 800b736:	617b      	str	r3, [r7, #20]
 800b738:	e062      	b.n	800b800 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800b73a:	68bb      	ldr	r3, [r7, #8]
 800b73c:	4a3c      	ldr	r2, [pc, #240]	; (800b830 <USB_SetTurnaroundTime+0x120>)
 800b73e:	4293      	cmp	r3, r2
 800b740:	d306      	bcc.n	800b750 <USB_SetTurnaroundTime+0x40>
 800b742:	68bb      	ldr	r3, [r7, #8]
 800b744:	4a3b      	ldr	r2, [pc, #236]	; (800b834 <USB_SetTurnaroundTime+0x124>)
 800b746:	4293      	cmp	r3, r2
 800b748:	d202      	bcs.n	800b750 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800b74a:	230e      	movs	r3, #14
 800b74c:	617b      	str	r3, [r7, #20]
 800b74e:	e057      	b.n	800b800 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800b750:	68bb      	ldr	r3, [r7, #8]
 800b752:	4a38      	ldr	r2, [pc, #224]	; (800b834 <USB_SetTurnaroundTime+0x124>)
 800b754:	4293      	cmp	r3, r2
 800b756:	d306      	bcc.n	800b766 <USB_SetTurnaroundTime+0x56>
 800b758:	68bb      	ldr	r3, [r7, #8]
 800b75a:	4a37      	ldr	r2, [pc, #220]	; (800b838 <USB_SetTurnaroundTime+0x128>)
 800b75c:	4293      	cmp	r3, r2
 800b75e:	d202      	bcs.n	800b766 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800b760:	230d      	movs	r3, #13
 800b762:	617b      	str	r3, [r7, #20]
 800b764:	e04c      	b.n	800b800 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800b766:	68bb      	ldr	r3, [r7, #8]
 800b768:	4a33      	ldr	r2, [pc, #204]	; (800b838 <USB_SetTurnaroundTime+0x128>)
 800b76a:	4293      	cmp	r3, r2
 800b76c:	d306      	bcc.n	800b77c <USB_SetTurnaroundTime+0x6c>
 800b76e:	68bb      	ldr	r3, [r7, #8]
 800b770:	4a32      	ldr	r2, [pc, #200]	; (800b83c <USB_SetTurnaroundTime+0x12c>)
 800b772:	4293      	cmp	r3, r2
 800b774:	d802      	bhi.n	800b77c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800b776:	230c      	movs	r3, #12
 800b778:	617b      	str	r3, [r7, #20]
 800b77a:	e041      	b.n	800b800 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800b77c:	68bb      	ldr	r3, [r7, #8]
 800b77e:	4a2f      	ldr	r2, [pc, #188]	; (800b83c <USB_SetTurnaroundTime+0x12c>)
 800b780:	4293      	cmp	r3, r2
 800b782:	d906      	bls.n	800b792 <USB_SetTurnaroundTime+0x82>
 800b784:	68bb      	ldr	r3, [r7, #8]
 800b786:	4a2e      	ldr	r2, [pc, #184]	; (800b840 <USB_SetTurnaroundTime+0x130>)
 800b788:	4293      	cmp	r3, r2
 800b78a:	d802      	bhi.n	800b792 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800b78c:	230b      	movs	r3, #11
 800b78e:	617b      	str	r3, [r7, #20]
 800b790:	e036      	b.n	800b800 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800b792:	68bb      	ldr	r3, [r7, #8]
 800b794:	4a2a      	ldr	r2, [pc, #168]	; (800b840 <USB_SetTurnaroundTime+0x130>)
 800b796:	4293      	cmp	r3, r2
 800b798:	d906      	bls.n	800b7a8 <USB_SetTurnaroundTime+0x98>
 800b79a:	68bb      	ldr	r3, [r7, #8]
 800b79c:	4a29      	ldr	r2, [pc, #164]	; (800b844 <USB_SetTurnaroundTime+0x134>)
 800b79e:	4293      	cmp	r3, r2
 800b7a0:	d802      	bhi.n	800b7a8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800b7a2:	230a      	movs	r3, #10
 800b7a4:	617b      	str	r3, [r7, #20]
 800b7a6:	e02b      	b.n	800b800 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800b7a8:	68bb      	ldr	r3, [r7, #8]
 800b7aa:	4a26      	ldr	r2, [pc, #152]	; (800b844 <USB_SetTurnaroundTime+0x134>)
 800b7ac:	4293      	cmp	r3, r2
 800b7ae:	d906      	bls.n	800b7be <USB_SetTurnaroundTime+0xae>
 800b7b0:	68bb      	ldr	r3, [r7, #8]
 800b7b2:	4a25      	ldr	r2, [pc, #148]	; (800b848 <USB_SetTurnaroundTime+0x138>)
 800b7b4:	4293      	cmp	r3, r2
 800b7b6:	d202      	bcs.n	800b7be <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800b7b8:	2309      	movs	r3, #9
 800b7ba:	617b      	str	r3, [r7, #20]
 800b7bc:	e020      	b.n	800b800 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800b7be:	68bb      	ldr	r3, [r7, #8]
 800b7c0:	4a21      	ldr	r2, [pc, #132]	; (800b848 <USB_SetTurnaroundTime+0x138>)
 800b7c2:	4293      	cmp	r3, r2
 800b7c4:	d306      	bcc.n	800b7d4 <USB_SetTurnaroundTime+0xc4>
 800b7c6:	68bb      	ldr	r3, [r7, #8]
 800b7c8:	4a20      	ldr	r2, [pc, #128]	; (800b84c <USB_SetTurnaroundTime+0x13c>)
 800b7ca:	4293      	cmp	r3, r2
 800b7cc:	d802      	bhi.n	800b7d4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800b7ce:	2308      	movs	r3, #8
 800b7d0:	617b      	str	r3, [r7, #20]
 800b7d2:	e015      	b.n	800b800 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800b7d4:	68bb      	ldr	r3, [r7, #8]
 800b7d6:	4a1d      	ldr	r2, [pc, #116]	; (800b84c <USB_SetTurnaroundTime+0x13c>)
 800b7d8:	4293      	cmp	r3, r2
 800b7da:	d906      	bls.n	800b7ea <USB_SetTurnaroundTime+0xda>
 800b7dc:	68bb      	ldr	r3, [r7, #8]
 800b7de:	4a1c      	ldr	r2, [pc, #112]	; (800b850 <USB_SetTurnaroundTime+0x140>)
 800b7e0:	4293      	cmp	r3, r2
 800b7e2:	d202      	bcs.n	800b7ea <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800b7e4:	2307      	movs	r3, #7
 800b7e6:	617b      	str	r3, [r7, #20]
 800b7e8:	e00a      	b.n	800b800 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800b7ea:	2306      	movs	r3, #6
 800b7ec:	617b      	str	r3, [r7, #20]
 800b7ee:	e007      	b.n	800b800 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800b7f0:	79fb      	ldrb	r3, [r7, #7]
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d102      	bne.n	800b7fc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800b7f6:	2309      	movs	r3, #9
 800b7f8:	617b      	str	r3, [r7, #20]
 800b7fa:	e001      	b.n	800b800 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800b7fc:	2309      	movs	r3, #9
 800b7fe:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	68db      	ldr	r3, [r3, #12]
 800b804:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	68da      	ldr	r2, [r3, #12]
 800b810:	697b      	ldr	r3, [r7, #20]
 800b812:	029b      	lsls	r3, r3, #10
 800b814:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800b818:	431a      	orrs	r2, r3
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b81e:	2300      	movs	r3, #0
}
 800b820:	4618      	mov	r0, r3
 800b822:	371c      	adds	r7, #28
 800b824:	46bd      	mov	sp, r7
 800b826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b82a:	4770      	bx	lr
 800b82c:	00d8acbf 	.word	0x00d8acbf
 800b830:	00e4e1c0 	.word	0x00e4e1c0
 800b834:	00f42400 	.word	0x00f42400
 800b838:	01067380 	.word	0x01067380
 800b83c:	011a499f 	.word	0x011a499f
 800b840:	01312cff 	.word	0x01312cff
 800b844:	014ca43f 	.word	0x014ca43f
 800b848:	016e3600 	.word	0x016e3600
 800b84c:	01a6ab1f 	.word	0x01a6ab1f
 800b850:	01e84800 	.word	0x01e84800

0800b854 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b854:	b480      	push	{r7}
 800b856:	b083      	sub	sp, #12
 800b858:	af00      	add	r7, sp, #0
 800b85a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	689b      	ldr	r3, [r3, #8]
 800b860:	f043 0201 	orr.w	r2, r3, #1
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b868:	2300      	movs	r3, #0
}
 800b86a:	4618      	mov	r0, r3
 800b86c:	370c      	adds	r7, #12
 800b86e:	46bd      	mov	sp, r7
 800b870:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b874:	4770      	bx	lr

0800b876 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b876:	b480      	push	{r7}
 800b878:	b083      	sub	sp, #12
 800b87a:	af00      	add	r7, sp, #0
 800b87c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	689b      	ldr	r3, [r3, #8]
 800b882:	f023 0201 	bic.w	r2, r3, #1
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b88a:	2300      	movs	r3, #0
}
 800b88c:	4618      	mov	r0, r3
 800b88e:	370c      	adds	r7, #12
 800b890:	46bd      	mov	sp, r7
 800b892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b896:	4770      	bx	lr

0800b898 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800b898:	b580      	push	{r7, lr}
 800b89a:	b084      	sub	sp, #16
 800b89c:	af00      	add	r7, sp, #0
 800b89e:	6078      	str	r0, [r7, #4]
 800b8a0:	460b      	mov	r3, r1
 800b8a2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800b8a4:	2300      	movs	r3, #0
 800b8a6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	68db      	ldr	r3, [r3, #12]
 800b8ac:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b8b4:	78fb      	ldrb	r3, [r7, #3]
 800b8b6:	2b01      	cmp	r3, #1
 800b8b8:	d115      	bne.n	800b8e6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	68db      	ldr	r3, [r3, #12]
 800b8be:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800b8c6:	200a      	movs	r0, #10
 800b8c8:	f7f9 fce4 	bl	8005294 <HAL_Delay>
      ms += 10U;
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	330a      	adds	r3, #10
 800b8d0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800b8d2:	6878      	ldr	r0, [r7, #4]
 800b8d4:	f001 f939 	bl	800cb4a <USB_GetMode>
 800b8d8:	4603      	mov	r3, r0
 800b8da:	2b01      	cmp	r3, #1
 800b8dc:	d01e      	beq.n	800b91c <USB_SetCurrentMode+0x84>
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	2bc7      	cmp	r3, #199	; 0xc7
 800b8e2:	d9f0      	bls.n	800b8c6 <USB_SetCurrentMode+0x2e>
 800b8e4:	e01a      	b.n	800b91c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800b8e6:	78fb      	ldrb	r3, [r7, #3]
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d115      	bne.n	800b918 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	68db      	ldr	r3, [r3, #12]
 800b8f0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800b8f8:	200a      	movs	r0, #10
 800b8fa:	f7f9 fccb 	bl	8005294 <HAL_Delay>
      ms += 10U;
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	330a      	adds	r3, #10
 800b902:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800b904:	6878      	ldr	r0, [r7, #4]
 800b906:	f001 f920 	bl	800cb4a <USB_GetMode>
 800b90a:	4603      	mov	r3, r0
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d005      	beq.n	800b91c <USB_SetCurrentMode+0x84>
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	2bc7      	cmp	r3, #199	; 0xc7
 800b914:	d9f0      	bls.n	800b8f8 <USB_SetCurrentMode+0x60>
 800b916:	e001      	b.n	800b91c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800b918:	2301      	movs	r3, #1
 800b91a:	e005      	b.n	800b928 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	2bc8      	cmp	r3, #200	; 0xc8
 800b920:	d101      	bne.n	800b926 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800b922:	2301      	movs	r3, #1
 800b924:	e000      	b.n	800b928 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800b926:	2300      	movs	r3, #0
}
 800b928:	4618      	mov	r0, r3
 800b92a:	3710      	adds	r7, #16
 800b92c:	46bd      	mov	sp, r7
 800b92e:	bd80      	pop	{r7, pc}

0800b930 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b930:	b084      	sub	sp, #16
 800b932:	b580      	push	{r7, lr}
 800b934:	b086      	sub	sp, #24
 800b936:	af00      	add	r7, sp, #0
 800b938:	6078      	str	r0, [r7, #4]
 800b93a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800b93e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800b942:	2300      	movs	r3, #0
 800b944:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800b94a:	2300      	movs	r3, #0
 800b94c:	613b      	str	r3, [r7, #16]
 800b94e:	e009      	b.n	800b964 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800b950:	687a      	ldr	r2, [r7, #4]
 800b952:	693b      	ldr	r3, [r7, #16]
 800b954:	3340      	adds	r3, #64	; 0x40
 800b956:	009b      	lsls	r3, r3, #2
 800b958:	4413      	add	r3, r2
 800b95a:	2200      	movs	r2, #0
 800b95c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800b95e:	693b      	ldr	r3, [r7, #16]
 800b960:	3301      	adds	r3, #1
 800b962:	613b      	str	r3, [r7, #16]
 800b964:	693b      	ldr	r3, [r7, #16]
 800b966:	2b0e      	cmp	r3, #14
 800b968:	d9f2      	bls.n	800b950 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800b96a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d11c      	bne.n	800b9ac <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b978:	685b      	ldr	r3, [r3, #4]
 800b97a:	68fa      	ldr	r2, [r7, #12]
 800b97c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b980:	f043 0302 	orr.w	r3, r3, #2
 800b984:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b98a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b996:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9a2:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	639a      	str	r2, [r3, #56]	; 0x38
 800b9aa:	e00b      	b.n	800b9c4 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9b0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9bc:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b9ca:	461a      	mov	r2, r3
 800b9cc:	2300      	movs	r3, #0
 800b9ce:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b9d0:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800b9d4:	2b01      	cmp	r3, #1
 800b9d6:	d10d      	bne.n	800b9f4 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800b9d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d104      	bne.n	800b9ea <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800b9e0:	2100      	movs	r1, #0
 800b9e2:	6878      	ldr	r0, [r7, #4]
 800b9e4:	f000 f968 	bl	800bcb8 <USB_SetDevSpeed>
 800b9e8:	e008      	b.n	800b9fc <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800b9ea:	2101      	movs	r1, #1
 800b9ec:	6878      	ldr	r0, [r7, #4]
 800b9ee:	f000 f963 	bl	800bcb8 <USB_SetDevSpeed>
 800b9f2:	e003      	b.n	800b9fc <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800b9f4:	2103      	movs	r1, #3
 800b9f6:	6878      	ldr	r0, [r7, #4]
 800b9f8:	f000 f95e 	bl	800bcb8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b9fc:	2110      	movs	r1, #16
 800b9fe:	6878      	ldr	r0, [r7, #4]
 800ba00:	f000 f8fa 	bl	800bbf8 <USB_FlushTxFifo>
 800ba04:	4603      	mov	r3, r0
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d001      	beq.n	800ba0e <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800ba0a:	2301      	movs	r3, #1
 800ba0c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800ba0e:	6878      	ldr	r0, [r7, #4]
 800ba10:	f000 f924 	bl	800bc5c <USB_FlushRxFifo>
 800ba14:	4603      	mov	r3, r0
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d001      	beq.n	800ba1e <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800ba1a:	2301      	movs	r3, #1
 800ba1c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba24:	461a      	mov	r2, r3
 800ba26:	2300      	movs	r3, #0
 800ba28:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba30:	461a      	mov	r2, r3
 800ba32:	2300      	movs	r3, #0
 800ba34:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba3c:	461a      	mov	r2, r3
 800ba3e:	2300      	movs	r3, #0
 800ba40:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ba42:	2300      	movs	r3, #0
 800ba44:	613b      	str	r3, [r7, #16]
 800ba46:	e043      	b.n	800bad0 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ba48:	693b      	ldr	r3, [r7, #16]
 800ba4a:	015a      	lsls	r2, r3, #5
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	4413      	add	r3, r2
 800ba50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ba5a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ba5e:	d118      	bne.n	800ba92 <USB_DevInit+0x162>
    {
      if (i == 0U)
 800ba60:	693b      	ldr	r3, [r7, #16]
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d10a      	bne.n	800ba7c <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800ba66:	693b      	ldr	r3, [r7, #16]
 800ba68:	015a      	lsls	r2, r3, #5
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	4413      	add	r3, r2
 800ba6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba72:	461a      	mov	r2, r3
 800ba74:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ba78:	6013      	str	r3, [r2, #0]
 800ba7a:	e013      	b.n	800baa4 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800ba7c:	693b      	ldr	r3, [r7, #16]
 800ba7e:	015a      	lsls	r2, r3, #5
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	4413      	add	r3, r2
 800ba84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba88:	461a      	mov	r2, r3
 800ba8a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ba8e:	6013      	str	r3, [r2, #0]
 800ba90:	e008      	b.n	800baa4 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800ba92:	693b      	ldr	r3, [r7, #16]
 800ba94:	015a      	lsls	r2, r3, #5
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	4413      	add	r3, r2
 800ba9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba9e:	461a      	mov	r2, r3
 800baa0:	2300      	movs	r3, #0
 800baa2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800baa4:	693b      	ldr	r3, [r7, #16]
 800baa6:	015a      	lsls	r2, r3, #5
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	4413      	add	r3, r2
 800baac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bab0:	461a      	mov	r2, r3
 800bab2:	2300      	movs	r3, #0
 800bab4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800bab6:	693b      	ldr	r3, [r7, #16]
 800bab8:	015a      	lsls	r2, r3, #5
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	4413      	add	r3, r2
 800babe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bac2:	461a      	mov	r2, r3
 800bac4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800bac8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800baca:	693b      	ldr	r3, [r7, #16]
 800bacc:	3301      	adds	r3, #1
 800bace:	613b      	str	r3, [r7, #16]
 800bad0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800bad4:	461a      	mov	r2, r3
 800bad6:	693b      	ldr	r3, [r7, #16]
 800bad8:	4293      	cmp	r3, r2
 800bada:	d3b5      	bcc.n	800ba48 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800badc:	2300      	movs	r3, #0
 800bade:	613b      	str	r3, [r7, #16]
 800bae0:	e043      	b.n	800bb6a <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bae2:	693b      	ldr	r3, [r7, #16]
 800bae4:	015a      	lsls	r2, r3, #5
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	4413      	add	r3, r2
 800baea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800baf4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800baf8:	d118      	bne.n	800bb2c <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800bafa:	693b      	ldr	r3, [r7, #16]
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d10a      	bne.n	800bb16 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800bb00:	693b      	ldr	r3, [r7, #16]
 800bb02:	015a      	lsls	r2, r3, #5
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	4413      	add	r3, r2
 800bb08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb0c:	461a      	mov	r2, r3
 800bb0e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800bb12:	6013      	str	r3, [r2, #0]
 800bb14:	e013      	b.n	800bb3e <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800bb16:	693b      	ldr	r3, [r7, #16]
 800bb18:	015a      	lsls	r2, r3, #5
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	4413      	add	r3, r2
 800bb1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb22:	461a      	mov	r2, r3
 800bb24:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800bb28:	6013      	str	r3, [r2, #0]
 800bb2a:	e008      	b.n	800bb3e <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800bb2c:	693b      	ldr	r3, [r7, #16]
 800bb2e:	015a      	lsls	r2, r3, #5
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	4413      	add	r3, r2
 800bb34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb38:	461a      	mov	r2, r3
 800bb3a:	2300      	movs	r3, #0
 800bb3c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800bb3e:	693b      	ldr	r3, [r7, #16]
 800bb40:	015a      	lsls	r2, r3, #5
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	4413      	add	r3, r2
 800bb46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb4a:	461a      	mov	r2, r3
 800bb4c:	2300      	movs	r3, #0
 800bb4e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800bb50:	693b      	ldr	r3, [r7, #16]
 800bb52:	015a      	lsls	r2, r3, #5
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	4413      	add	r3, r2
 800bb58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb5c:	461a      	mov	r2, r3
 800bb5e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800bb62:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bb64:	693b      	ldr	r3, [r7, #16]
 800bb66:	3301      	adds	r3, #1
 800bb68:	613b      	str	r3, [r7, #16]
 800bb6a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800bb6e:	461a      	mov	r2, r3
 800bb70:	693b      	ldr	r3, [r7, #16]
 800bb72:	4293      	cmp	r3, r2
 800bb74:	d3b5      	bcc.n	800bae2 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb7c:	691b      	ldr	r3, [r3, #16]
 800bb7e:	68fa      	ldr	r2, [r7, #12]
 800bb80:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bb84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bb88:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	2200      	movs	r2, #0
 800bb8e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800bb96:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800bb98:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d105      	bne.n	800bbac <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	699b      	ldr	r3, [r3, #24]
 800bba4:	f043 0210 	orr.w	r2, r3, #16
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	699a      	ldr	r2, [r3, #24]
 800bbb0:	4b10      	ldr	r3, [pc, #64]	; (800bbf4 <USB_DevInit+0x2c4>)
 800bbb2:	4313      	orrs	r3, r2
 800bbb4:	687a      	ldr	r2, [r7, #4]
 800bbb6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800bbb8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d005      	beq.n	800bbcc <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	699b      	ldr	r3, [r3, #24]
 800bbc4:	f043 0208 	orr.w	r2, r3, #8
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800bbcc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800bbd0:	2b01      	cmp	r3, #1
 800bbd2:	d107      	bne.n	800bbe4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	699b      	ldr	r3, [r3, #24]
 800bbd8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bbdc:	f043 0304 	orr.w	r3, r3, #4
 800bbe0:	687a      	ldr	r2, [r7, #4]
 800bbe2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800bbe4:	7dfb      	ldrb	r3, [r7, #23]
}
 800bbe6:	4618      	mov	r0, r3
 800bbe8:	3718      	adds	r7, #24
 800bbea:	46bd      	mov	sp, r7
 800bbec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bbf0:	b004      	add	sp, #16
 800bbf2:	4770      	bx	lr
 800bbf4:	803c3800 	.word	0x803c3800

0800bbf8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800bbf8:	b480      	push	{r7}
 800bbfa:	b085      	sub	sp, #20
 800bbfc:	af00      	add	r7, sp, #0
 800bbfe:	6078      	str	r0, [r7, #4]
 800bc00:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800bc02:	2300      	movs	r3, #0
 800bc04:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	3301      	adds	r3, #1
 800bc0a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800bc12:	d901      	bls.n	800bc18 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800bc14:	2303      	movs	r3, #3
 800bc16:	e01b      	b.n	800bc50 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	691b      	ldr	r3, [r3, #16]
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	daf2      	bge.n	800bc06 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800bc20:	2300      	movs	r3, #0
 800bc22:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800bc24:	683b      	ldr	r3, [r7, #0]
 800bc26:	019b      	lsls	r3, r3, #6
 800bc28:	f043 0220 	orr.w	r2, r3, #32
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	3301      	adds	r3, #1
 800bc34:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800bc3c:	d901      	bls.n	800bc42 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800bc3e:	2303      	movs	r3, #3
 800bc40:	e006      	b.n	800bc50 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	691b      	ldr	r3, [r3, #16]
 800bc46:	f003 0320 	and.w	r3, r3, #32
 800bc4a:	2b20      	cmp	r3, #32
 800bc4c:	d0f0      	beq.n	800bc30 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800bc4e:	2300      	movs	r3, #0
}
 800bc50:	4618      	mov	r0, r3
 800bc52:	3714      	adds	r7, #20
 800bc54:	46bd      	mov	sp, r7
 800bc56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc5a:	4770      	bx	lr

0800bc5c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800bc5c:	b480      	push	{r7}
 800bc5e:	b085      	sub	sp, #20
 800bc60:	af00      	add	r7, sp, #0
 800bc62:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800bc64:	2300      	movs	r3, #0
 800bc66:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	3301      	adds	r3, #1
 800bc6c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800bc74:	d901      	bls.n	800bc7a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800bc76:	2303      	movs	r3, #3
 800bc78:	e018      	b.n	800bcac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	691b      	ldr	r3, [r3, #16]
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	daf2      	bge.n	800bc68 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800bc82:	2300      	movs	r3, #0
 800bc84:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	2210      	movs	r2, #16
 800bc8a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	3301      	adds	r3, #1
 800bc90:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800bc98:	d901      	bls.n	800bc9e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800bc9a:	2303      	movs	r3, #3
 800bc9c:	e006      	b.n	800bcac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	691b      	ldr	r3, [r3, #16]
 800bca2:	f003 0310 	and.w	r3, r3, #16
 800bca6:	2b10      	cmp	r3, #16
 800bca8:	d0f0      	beq.n	800bc8c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800bcaa:	2300      	movs	r3, #0
}
 800bcac:	4618      	mov	r0, r3
 800bcae:	3714      	adds	r7, #20
 800bcb0:	46bd      	mov	sp, r7
 800bcb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb6:	4770      	bx	lr

0800bcb8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800bcb8:	b480      	push	{r7}
 800bcba:	b085      	sub	sp, #20
 800bcbc:	af00      	add	r7, sp, #0
 800bcbe:	6078      	str	r0, [r7, #4]
 800bcc0:	460b      	mov	r3, r1
 800bcc2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bcce:	681a      	ldr	r2, [r3, #0]
 800bcd0:	78fb      	ldrb	r3, [r7, #3]
 800bcd2:	68f9      	ldr	r1, [r7, #12]
 800bcd4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bcd8:	4313      	orrs	r3, r2
 800bcda:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800bcdc:	2300      	movs	r3, #0
}
 800bcde:	4618      	mov	r0, r3
 800bce0:	3714      	adds	r7, #20
 800bce2:	46bd      	mov	sp, r7
 800bce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce8:	4770      	bx	lr

0800bcea <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800bcea:	b480      	push	{r7}
 800bcec:	b087      	sub	sp, #28
 800bcee:	af00      	add	r7, sp, #0
 800bcf0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800bcf6:	693b      	ldr	r3, [r7, #16]
 800bcf8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bcfc:	689b      	ldr	r3, [r3, #8]
 800bcfe:	f003 0306 	and.w	r3, r3, #6
 800bd02:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d102      	bne.n	800bd10 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800bd0a:	2300      	movs	r3, #0
 800bd0c:	75fb      	strb	r3, [r7, #23]
 800bd0e:	e00a      	b.n	800bd26 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	2b02      	cmp	r3, #2
 800bd14:	d002      	beq.n	800bd1c <USB_GetDevSpeed+0x32>
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	2b06      	cmp	r3, #6
 800bd1a:	d102      	bne.n	800bd22 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800bd1c:	2302      	movs	r3, #2
 800bd1e:	75fb      	strb	r3, [r7, #23]
 800bd20:	e001      	b.n	800bd26 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800bd22:	230f      	movs	r3, #15
 800bd24:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800bd26:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd28:	4618      	mov	r0, r3
 800bd2a:	371c      	adds	r7, #28
 800bd2c:	46bd      	mov	sp, r7
 800bd2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd32:	4770      	bx	lr

0800bd34 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800bd34:	b480      	push	{r7}
 800bd36:	b085      	sub	sp, #20
 800bd38:	af00      	add	r7, sp, #0
 800bd3a:	6078      	str	r0, [r7, #4]
 800bd3c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800bd42:	683b      	ldr	r3, [r7, #0]
 800bd44:	781b      	ldrb	r3, [r3, #0]
 800bd46:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800bd48:	683b      	ldr	r3, [r7, #0]
 800bd4a:	785b      	ldrb	r3, [r3, #1]
 800bd4c:	2b01      	cmp	r3, #1
 800bd4e:	d13a      	bne.n	800bdc6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd56:	69da      	ldr	r2, [r3, #28]
 800bd58:	683b      	ldr	r3, [r7, #0]
 800bd5a:	781b      	ldrb	r3, [r3, #0]
 800bd5c:	f003 030f 	and.w	r3, r3, #15
 800bd60:	2101      	movs	r1, #1
 800bd62:	fa01 f303 	lsl.w	r3, r1, r3
 800bd66:	b29b      	uxth	r3, r3
 800bd68:	68f9      	ldr	r1, [r7, #12]
 800bd6a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bd6e:	4313      	orrs	r3, r2
 800bd70:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800bd72:	68bb      	ldr	r3, [r7, #8]
 800bd74:	015a      	lsls	r2, r3, #5
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	4413      	add	r3, r2
 800bd7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d155      	bne.n	800be34 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800bd88:	68bb      	ldr	r3, [r7, #8]
 800bd8a:	015a      	lsls	r2, r3, #5
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	4413      	add	r3, r2
 800bd90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd94:	681a      	ldr	r2, [r3, #0]
 800bd96:	683b      	ldr	r3, [r7, #0]
 800bd98:	689b      	ldr	r3, [r3, #8]
 800bd9a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800bd9e:	683b      	ldr	r3, [r7, #0]
 800bda0:	791b      	ldrb	r3, [r3, #4]
 800bda2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800bda4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800bda6:	68bb      	ldr	r3, [r7, #8]
 800bda8:	059b      	lsls	r3, r3, #22
 800bdaa:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800bdac:	4313      	orrs	r3, r2
 800bdae:	68ba      	ldr	r2, [r7, #8]
 800bdb0:	0151      	lsls	r1, r2, #5
 800bdb2:	68fa      	ldr	r2, [r7, #12]
 800bdb4:	440a      	add	r2, r1
 800bdb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bdba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bdbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bdc2:	6013      	str	r3, [r2, #0]
 800bdc4:	e036      	b.n	800be34 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bdcc:	69da      	ldr	r2, [r3, #28]
 800bdce:	683b      	ldr	r3, [r7, #0]
 800bdd0:	781b      	ldrb	r3, [r3, #0]
 800bdd2:	f003 030f 	and.w	r3, r3, #15
 800bdd6:	2101      	movs	r1, #1
 800bdd8:	fa01 f303 	lsl.w	r3, r1, r3
 800bddc:	041b      	lsls	r3, r3, #16
 800bdde:	68f9      	ldr	r1, [r7, #12]
 800bde0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bde4:	4313      	orrs	r3, r2
 800bde6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800bde8:	68bb      	ldr	r3, [r7, #8]
 800bdea:	015a      	lsls	r2, r3, #5
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	4413      	add	r3, r2
 800bdf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d11a      	bne.n	800be34 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800bdfe:	68bb      	ldr	r3, [r7, #8]
 800be00:	015a      	lsls	r2, r3, #5
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	4413      	add	r3, r2
 800be06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be0a:	681a      	ldr	r2, [r3, #0]
 800be0c:	683b      	ldr	r3, [r7, #0]
 800be0e:	689b      	ldr	r3, [r3, #8]
 800be10:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800be14:	683b      	ldr	r3, [r7, #0]
 800be16:	791b      	ldrb	r3, [r3, #4]
 800be18:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800be1a:	430b      	orrs	r3, r1
 800be1c:	4313      	orrs	r3, r2
 800be1e:	68ba      	ldr	r2, [r7, #8]
 800be20:	0151      	lsls	r1, r2, #5
 800be22:	68fa      	ldr	r2, [r7, #12]
 800be24:	440a      	add	r2, r1
 800be26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800be2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800be2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800be32:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800be34:	2300      	movs	r3, #0
}
 800be36:	4618      	mov	r0, r3
 800be38:	3714      	adds	r7, #20
 800be3a:	46bd      	mov	sp, r7
 800be3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be40:	4770      	bx	lr
	...

0800be44 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800be44:	b480      	push	{r7}
 800be46:	b085      	sub	sp, #20
 800be48:	af00      	add	r7, sp, #0
 800be4a:	6078      	str	r0, [r7, #4]
 800be4c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800be52:	683b      	ldr	r3, [r7, #0]
 800be54:	781b      	ldrb	r3, [r3, #0]
 800be56:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800be58:	683b      	ldr	r3, [r7, #0]
 800be5a:	785b      	ldrb	r3, [r3, #1]
 800be5c:	2b01      	cmp	r3, #1
 800be5e:	d161      	bne.n	800bf24 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800be60:	68bb      	ldr	r3, [r7, #8]
 800be62:	015a      	lsls	r2, r3, #5
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	4413      	add	r3, r2
 800be68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800be72:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800be76:	d11f      	bne.n	800beb8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800be78:	68bb      	ldr	r3, [r7, #8]
 800be7a:	015a      	lsls	r2, r3, #5
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	4413      	add	r3, r2
 800be80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	68ba      	ldr	r2, [r7, #8]
 800be88:	0151      	lsls	r1, r2, #5
 800be8a:	68fa      	ldr	r2, [r7, #12]
 800be8c:	440a      	add	r2, r1
 800be8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800be92:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800be96:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800be98:	68bb      	ldr	r3, [r7, #8]
 800be9a:	015a      	lsls	r2, r3, #5
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	4413      	add	r3, r2
 800bea0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	68ba      	ldr	r2, [r7, #8]
 800bea8:	0151      	lsls	r1, r2, #5
 800beaa:	68fa      	ldr	r2, [r7, #12]
 800beac:	440a      	add	r2, r1
 800beae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800beb2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800beb6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bebe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bec0:	683b      	ldr	r3, [r7, #0]
 800bec2:	781b      	ldrb	r3, [r3, #0]
 800bec4:	f003 030f 	and.w	r3, r3, #15
 800bec8:	2101      	movs	r1, #1
 800beca:	fa01 f303 	lsl.w	r3, r1, r3
 800bece:	b29b      	uxth	r3, r3
 800bed0:	43db      	mvns	r3, r3
 800bed2:	68f9      	ldr	r1, [r7, #12]
 800bed4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bed8:	4013      	ands	r3, r2
 800beda:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bee2:	69da      	ldr	r2, [r3, #28]
 800bee4:	683b      	ldr	r3, [r7, #0]
 800bee6:	781b      	ldrb	r3, [r3, #0]
 800bee8:	f003 030f 	and.w	r3, r3, #15
 800beec:	2101      	movs	r1, #1
 800beee:	fa01 f303 	lsl.w	r3, r1, r3
 800bef2:	b29b      	uxth	r3, r3
 800bef4:	43db      	mvns	r3, r3
 800bef6:	68f9      	ldr	r1, [r7, #12]
 800bef8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800befc:	4013      	ands	r3, r2
 800befe:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800bf00:	68bb      	ldr	r3, [r7, #8]
 800bf02:	015a      	lsls	r2, r3, #5
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	4413      	add	r3, r2
 800bf08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf0c:	681a      	ldr	r2, [r3, #0]
 800bf0e:	68bb      	ldr	r3, [r7, #8]
 800bf10:	0159      	lsls	r1, r3, #5
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	440b      	add	r3, r1
 800bf16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf1a:	4619      	mov	r1, r3
 800bf1c:	4b35      	ldr	r3, [pc, #212]	; (800bff4 <USB_DeactivateEndpoint+0x1b0>)
 800bf1e:	4013      	ands	r3, r2
 800bf20:	600b      	str	r3, [r1, #0]
 800bf22:	e060      	b.n	800bfe6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bf24:	68bb      	ldr	r3, [r7, #8]
 800bf26:	015a      	lsls	r2, r3, #5
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	4413      	add	r3, r2
 800bf2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bf36:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bf3a:	d11f      	bne.n	800bf7c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800bf3c:	68bb      	ldr	r3, [r7, #8]
 800bf3e:	015a      	lsls	r2, r3, #5
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	4413      	add	r3, r2
 800bf44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	68ba      	ldr	r2, [r7, #8]
 800bf4c:	0151      	lsls	r1, r2, #5
 800bf4e:	68fa      	ldr	r2, [r7, #12]
 800bf50:	440a      	add	r2, r1
 800bf52:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bf56:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800bf5a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800bf5c:	68bb      	ldr	r3, [r7, #8]
 800bf5e:	015a      	lsls	r2, r3, #5
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	4413      	add	r3, r2
 800bf64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	68ba      	ldr	r2, [r7, #8]
 800bf6c:	0151      	lsls	r1, r2, #5
 800bf6e:	68fa      	ldr	r2, [r7, #12]
 800bf70:	440a      	add	r2, r1
 800bf72:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bf76:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bf7a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bf82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bf84:	683b      	ldr	r3, [r7, #0]
 800bf86:	781b      	ldrb	r3, [r3, #0]
 800bf88:	f003 030f 	and.w	r3, r3, #15
 800bf8c:	2101      	movs	r1, #1
 800bf8e:	fa01 f303 	lsl.w	r3, r1, r3
 800bf92:	041b      	lsls	r3, r3, #16
 800bf94:	43db      	mvns	r3, r3
 800bf96:	68f9      	ldr	r1, [r7, #12]
 800bf98:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bf9c:	4013      	ands	r3, r2
 800bf9e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bfa6:	69da      	ldr	r2, [r3, #28]
 800bfa8:	683b      	ldr	r3, [r7, #0]
 800bfaa:	781b      	ldrb	r3, [r3, #0]
 800bfac:	f003 030f 	and.w	r3, r3, #15
 800bfb0:	2101      	movs	r1, #1
 800bfb2:	fa01 f303 	lsl.w	r3, r1, r3
 800bfb6:	041b      	lsls	r3, r3, #16
 800bfb8:	43db      	mvns	r3, r3
 800bfba:	68f9      	ldr	r1, [r7, #12]
 800bfbc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bfc0:	4013      	ands	r3, r2
 800bfc2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800bfc4:	68bb      	ldr	r3, [r7, #8]
 800bfc6:	015a      	lsls	r2, r3, #5
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	4413      	add	r3, r2
 800bfcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bfd0:	681a      	ldr	r2, [r3, #0]
 800bfd2:	68bb      	ldr	r3, [r7, #8]
 800bfd4:	0159      	lsls	r1, r3, #5
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	440b      	add	r3, r1
 800bfda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bfde:	4619      	mov	r1, r3
 800bfe0:	4b05      	ldr	r3, [pc, #20]	; (800bff8 <USB_DeactivateEndpoint+0x1b4>)
 800bfe2:	4013      	ands	r3, r2
 800bfe4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800bfe6:	2300      	movs	r3, #0
}
 800bfe8:	4618      	mov	r0, r3
 800bfea:	3714      	adds	r7, #20
 800bfec:	46bd      	mov	sp, r7
 800bfee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bff2:	4770      	bx	lr
 800bff4:	ec337800 	.word	0xec337800
 800bff8:	eff37800 	.word	0xeff37800

0800bffc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800bffc:	b580      	push	{r7, lr}
 800bffe:	b08a      	sub	sp, #40	; 0x28
 800c000:	af02      	add	r7, sp, #8
 800c002:	60f8      	str	r0, [r7, #12]
 800c004:	60b9      	str	r1, [r7, #8]
 800c006:	4613      	mov	r3, r2
 800c008:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800c00e:	68bb      	ldr	r3, [r7, #8]
 800c010:	781b      	ldrb	r3, [r3, #0]
 800c012:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c014:	68bb      	ldr	r3, [r7, #8]
 800c016:	785b      	ldrb	r3, [r3, #1]
 800c018:	2b01      	cmp	r3, #1
 800c01a:	f040 817a 	bne.w	800c312 <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800c01e:	68bb      	ldr	r3, [r7, #8]
 800c020:	691b      	ldr	r3, [r3, #16]
 800c022:	2b00      	cmp	r3, #0
 800c024:	d132      	bne.n	800c08c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c026:	69bb      	ldr	r3, [r7, #24]
 800c028:	015a      	lsls	r2, r3, #5
 800c02a:	69fb      	ldr	r3, [r7, #28]
 800c02c:	4413      	add	r3, r2
 800c02e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c032:	691b      	ldr	r3, [r3, #16]
 800c034:	69ba      	ldr	r2, [r7, #24]
 800c036:	0151      	lsls	r1, r2, #5
 800c038:	69fa      	ldr	r2, [r7, #28]
 800c03a:	440a      	add	r2, r1
 800c03c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c040:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c044:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c048:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c04a:	69bb      	ldr	r3, [r7, #24]
 800c04c:	015a      	lsls	r2, r3, #5
 800c04e:	69fb      	ldr	r3, [r7, #28]
 800c050:	4413      	add	r3, r2
 800c052:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c056:	691b      	ldr	r3, [r3, #16]
 800c058:	69ba      	ldr	r2, [r7, #24]
 800c05a:	0151      	lsls	r1, r2, #5
 800c05c:	69fa      	ldr	r2, [r7, #28]
 800c05e:	440a      	add	r2, r1
 800c060:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c064:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c068:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c06a:	69bb      	ldr	r3, [r7, #24]
 800c06c:	015a      	lsls	r2, r3, #5
 800c06e:	69fb      	ldr	r3, [r7, #28]
 800c070:	4413      	add	r3, r2
 800c072:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c076:	691b      	ldr	r3, [r3, #16]
 800c078:	69ba      	ldr	r2, [r7, #24]
 800c07a:	0151      	lsls	r1, r2, #5
 800c07c:	69fa      	ldr	r2, [r7, #28]
 800c07e:	440a      	add	r2, r1
 800c080:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c084:	0cdb      	lsrs	r3, r3, #19
 800c086:	04db      	lsls	r3, r3, #19
 800c088:	6113      	str	r3, [r2, #16]
 800c08a:	e092      	b.n	800c1b2 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c08c:	69bb      	ldr	r3, [r7, #24]
 800c08e:	015a      	lsls	r2, r3, #5
 800c090:	69fb      	ldr	r3, [r7, #28]
 800c092:	4413      	add	r3, r2
 800c094:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c098:	691b      	ldr	r3, [r3, #16]
 800c09a:	69ba      	ldr	r2, [r7, #24]
 800c09c:	0151      	lsls	r1, r2, #5
 800c09e:	69fa      	ldr	r2, [r7, #28]
 800c0a0:	440a      	add	r2, r1
 800c0a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c0a6:	0cdb      	lsrs	r3, r3, #19
 800c0a8:	04db      	lsls	r3, r3, #19
 800c0aa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c0ac:	69bb      	ldr	r3, [r7, #24]
 800c0ae:	015a      	lsls	r2, r3, #5
 800c0b0:	69fb      	ldr	r3, [r7, #28]
 800c0b2:	4413      	add	r3, r2
 800c0b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c0b8:	691b      	ldr	r3, [r3, #16]
 800c0ba:	69ba      	ldr	r2, [r7, #24]
 800c0bc:	0151      	lsls	r1, r2, #5
 800c0be:	69fa      	ldr	r2, [r7, #28]
 800c0c0:	440a      	add	r2, r1
 800c0c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c0c6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c0ca:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c0ce:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800c0d0:	69bb      	ldr	r3, [r7, #24]
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d11a      	bne.n	800c10c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800c0d6:	68bb      	ldr	r3, [r7, #8]
 800c0d8:	691a      	ldr	r2, [r3, #16]
 800c0da:	68bb      	ldr	r3, [r7, #8]
 800c0dc:	689b      	ldr	r3, [r3, #8]
 800c0de:	429a      	cmp	r2, r3
 800c0e0:	d903      	bls.n	800c0ea <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800c0e2:	68bb      	ldr	r3, [r7, #8]
 800c0e4:	689a      	ldr	r2, [r3, #8]
 800c0e6:	68bb      	ldr	r3, [r7, #8]
 800c0e8:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c0ea:	69bb      	ldr	r3, [r7, #24]
 800c0ec:	015a      	lsls	r2, r3, #5
 800c0ee:	69fb      	ldr	r3, [r7, #28]
 800c0f0:	4413      	add	r3, r2
 800c0f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c0f6:	691b      	ldr	r3, [r3, #16]
 800c0f8:	69ba      	ldr	r2, [r7, #24]
 800c0fa:	0151      	lsls	r1, r2, #5
 800c0fc:	69fa      	ldr	r2, [r7, #28]
 800c0fe:	440a      	add	r2, r1
 800c100:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c104:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c108:	6113      	str	r3, [r2, #16]
 800c10a:	e01b      	b.n	800c144 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800c10c:	69bb      	ldr	r3, [r7, #24]
 800c10e:	015a      	lsls	r2, r3, #5
 800c110:	69fb      	ldr	r3, [r7, #28]
 800c112:	4413      	add	r3, r2
 800c114:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c118:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800c11a:	68bb      	ldr	r3, [r7, #8]
 800c11c:	6919      	ldr	r1, [r3, #16]
 800c11e:	68bb      	ldr	r3, [r7, #8]
 800c120:	689b      	ldr	r3, [r3, #8]
 800c122:	440b      	add	r3, r1
 800c124:	1e59      	subs	r1, r3, #1
 800c126:	68bb      	ldr	r3, [r7, #8]
 800c128:	689b      	ldr	r3, [r3, #8]
 800c12a:	fbb1 f3f3 	udiv	r3, r1, r3
 800c12e:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800c130:	4ba2      	ldr	r3, [pc, #648]	; (800c3bc <USB_EPStartXfer+0x3c0>)
 800c132:	400b      	ands	r3, r1
 800c134:	69b9      	ldr	r1, [r7, #24]
 800c136:	0148      	lsls	r0, r1, #5
 800c138:	69f9      	ldr	r1, [r7, #28]
 800c13a:	4401      	add	r1, r0
 800c13c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c140:	4313      	orrs	r3, r2
 800c142:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800c144:	69bb      	ldr	r3, [r7, #24]
 800c146:	015a      	lsls	r2, r3, #5
 800c148:	69fb      	ldr	r3, [r7, #28]
 800c14a:	4413      	add	r3, r2
 800c14c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c150:	691a      	ldr	r2, [r3, #16]
 800c152:	68bb      	ldr	r3, [r7, #8]
 800c154:	691b      	ldr	r3, [r3, #16]
 800c156:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c15a:	69b9      	ldr	r1, [r7, #24]
 800c15c:	0148      	lsls	r0, r1, #5
 800c15e:	69f9      	ldr	r1, [r7, #28]
 800c160:	4401      	add	r1, r0
 800c162:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c166:	4313      	orrs	r3, r2
 800c168:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800c16a:	68bb      	ldr	r3, [r7, #8]
 800c16c:	791b      	ldrb	r3, [r3, #4]
 800c16e:	2b01      	cmp	r3, #1
 800c170:	d11f      	bne.n	800c1b2 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800c172:	69bb      	ldr	r3, [r7, #24]
 800c174:	015a      	lsls	r2, r3, #5
 800c176:	69fb      	ldr	r3, [r7, #28]
 800c178:	4413      	add	r3, r2
 800c17a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c17e:	691b      	ldr	r3, [r3, #16]
 800c180:	69ba      	ldr	r2, [r7, #24]
 800c182:	0151      	lsls	r1, r2, #5
 800c184:	69fa      	ldr	r2, [r7, #28]
 800c186:	440a      	add	r2, r1
 800c188:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c18c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800c190:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800c192:	69bb      	ldr	r3, [r7, #24]
 800c194:	015a      	lsls	r2, r3, #5
 800c196:	69fb      	ldr	r3, [r7, #28]
 800c198:	4413      	add	r3, r2
 800c19a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c19e:	691b      	ldr	r3, [r3, #16]
 800c1a0:	69ba      	ldr	r2, [r7, #24]
 800c1a2:	0151      	lsls	r1, r2, #5
 800c1a4:	69fa      	ldr	r2, [r7, #28]
 800c1a6:	440a      	add	r2, r1
 800c1a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c1ac:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c1b0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800c1b2:	79fb      	ldrb	r3, [r7, #7]
 800c1b4:	2b01      	cmp	r3, #1
 800c1b6:	d14b      	bne.n	800c250 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800c1b8:	68bb      	ldr	r3, [r7, #8]
 800c1ba:	69db      	ldr	r3, [r3, #28]
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d009      	beq.n	800c1d4 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800c1c0:	69bb      	ldr	r3, [r7, #24]
 800c1c2:	015a      	lsls	r2, r3, #5
 800c1c4:	69fb      	ldr	r3, [r7, #28]
 800c1c6:	4413      	add	r3, r2
 800c1c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c1cc:	461a      	mov	r2, r3
 800c1ce:	68bb      	ldr	r3, [r7, #8]
 800c1d0:	69db      	ldr	r3, [r3, #28]
 800c1d2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800c1d4:	68bb      	ldr	r3, [r7, #8]
 800c1d6:	791b      	ldrb	r3, [r3, #4]
 800c1d8:	2b01      	cmp	r3, #1
 800c1da:	d128      	bne.n	800c22e <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c1dc:	69fb      	ldr	r3, [r7, #28]
 800c1de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c1e2:	689b      	ldr	r3, [r3, #8]
 800c1e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d110      	bne.n	800c20e <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c1ec:	69bb      	ldr	r3, [r7, #24]
 800c1ee:	015a      	lsls	r2, r3, #5
 800c1f0:	69fb      	ldr	r3, [r7, #28]
 800c1f2:	4413      	add	r3, r2
 800c1f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	69ba      	ldr	r2, [r7, #24]
 800c1fc:	0151      	lsls	r1, r2, #5
 800c1fe:	69fa      	ldr	r2, [r7, #28]
 800c200:	440a      	add	r2, r1
 800c202:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c206:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c20a:	6013      	str	r3, [r2, #0]
 800c20c:	e00f      	b.n	800c22e <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c20e:	69bb      	ldr	r3, [r7, #24]
 800c210:	015a      	lsls	r2, r3, #5
 800c212:	69fb      	ldr	r3, [r7, #28]
 800c214:	4413      	add	r3, r2
 800c216:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	69ba      	ldr	r2, [r7, #24]
 800c21e:	0151      	lsls	r1, r2, #5
 800c220:	69fa      	ldr	r2, [r7, #28]
 800c222:	440a      	add	r2, r1
 800c224:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c228:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c22c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c22e:	69bb      	ldr	r3, [r7, #24]
 800c230:	015a      	lsls	r2, r3, #5
 800c232:	69fb      	ldr	r3, [r7, #28]
 800c234:	4413      	add	r3, r2
 800c236:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	69ba      	ldr	r2, [r7, #24]
 800c23e:	0151      	lsls	r1, r2, #5
 800c240:	69fa      	ldr	r2, [r7, #28]
 800c242:	440a      	add	r2, r1
 800c244:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c248:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c24c:	6013      	str	r3, [r2, #0]
 800c24e:	e165      	b.n	800c51c <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c250:	69bb      	ldr	r3, [r7, #24]
 800c252:	015a      	lsls	r2, r3, #5
 800c254:	69fb      	ldr	r3, [r7, #28]
 800c256:	4413      	add	r3, r2
 800c258:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	69ba      	ldr	r2, [r7, #24]
 800c260:	0151      	lsls	r1, r2, #5
 800c262:	69fa      	ldr	r2, [r7, #28]
 800c264:	440a      	add	r2, r1
 800c266:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c26a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c26e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c270:	68bb      	ldr	r3, [r7, #8]
 800c272:	791b      	ldrb	r3, [r3, #4]
 800c274:	2b01      	cmp	r3, #1
 800c276:	d015      	beq.n	800c2a4 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800c278:	68bb      	ldr	r3, [r7, #8]
 800c27a:	691b      	ldr	r3, [r3, #16]
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	f000 814d 	beq.w	800c51c <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800c282:	69fb      	ldr	r3, [r7, #28]
 800c284:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c288:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c28a:	68bb      	ldr	r3, [r7, #8]
 800c28c:	781b      	ldrb	r3, [r3, #0]
 800c28e:	f003 030f 	and.w	r3, r3, #15
 800c292:	2101      	movs	r1, #1
 800c294:	fa01 f303 	lsl.w	r3, r1, r3
 800c298:	69f9      	ldr	r1, [r7, #28]
 800c29a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c29e:	4313      	orrs	r3, r2
 800c2a0:	634b      	str	r3, [r1, #52]	; 0x34
 800c2a2:	e13b      	b.n	800c51c <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c2a4:	69fb      	ldr	r3, [r7, #28]
 800c2a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c2aa:	689b      	ldr	r3, [r3, #8]
 800c2ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d110      	bne.n	800c2d6 <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c2b4:	69bb      	ldr	r3, [r7, #24]
 800c2b6:	015a      	lsls	r2, r3, #5
 800c2b8:	69fb      	ldr	r3, [r7, #28]
 800c2ba:	4413      	add	r3, r2
 800c2bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	69ba      	ldr	r2, [r7, #24]
 800c2c4:	0151      	lsls	r1, r2, #5
 800c2c6:	69fa      	ldr	r2, [r7, #28]
 800c2c8:	440a      	add	r2, r1
 800c2ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c2ce:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c2d2:	6013      	str	r3, [r2, #0]
 800c2d4:	e00f      	b.n	800c2f6 <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c2d6:	69bb      	ldr	r3, [r7, #24]
 800c2d8:	015a      	lsls	r2, r3, #5
 800c2da:	69fb      	ldr	r3, [r7, #28]
 800c2dc:	4413      	add	r3, r2
 800c2de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	69ba      	ldr	r2, [r7, #24]
 800c2e6:	0151      	lsls	r1, r2, #5
 800c2e8:	69fa      	ldr	r2, [r7, #28]
 800c2ea:	440a      	add	r2, r1
 800c2ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c2f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c2f4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800c2f6:	68bb      	ldr	r3, [r7, #8]
 800c2f8:	68d9      	ldr	r1, [r3, #12]
 800c2fa:	68bb      	ldr	r3, [r7, #8]
 800c2fc:	781a      	ldrb	r2, [r3, #0]
 800c2fe:	68bb      	ldr	r3, [r7, #8]
 800c300:	691b      	ldr	r3, [r3, #16]
 800c302:	b298      	uxth	r0, r3
 800c304:	79fb      	ldrb	r3, [r7, #7]
 800c306:	9300      	str	r3, [sp, #0]
 800c308:	4603      	mov	r3, r0
 800c30a:	68f8      	ldr	r0, [r7, #12]
 800c30c:	f000 f9b8 	bl	800c680 <USB_WritePacket>
 800c310:	e104      	b.n	800c51c <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800c312:	69bb      	ldr	r3, [r7, #24]
 800c314:	015a      	lsls	r2, r3, #5
 800c316:	69fb      	ldr	r3, [r7, #28]
 800c318:	4413      	add	r3, r2
 800c31a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c31e:	691b      	ldr	r3, [r3, #16]
 800c320:	69ba      	ldr	r2, [r7, #24]
 800c322:	0151      	lsls	r1, r2, #5
 800c324:	69fa      	ldr	r2, [r7, #28]
 800c326:	440a      	add	r2, r1
 800c328:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c32c:	0cdb      	lsrs	r3, r3, #19
 800c32e:	04db      	lsls	r3, r3, #19
 800c330:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800c332:	69bb      	ldr	r3, [r7, #24]
 800c334:	015a      	lsls	r2, r3, #5
 800c336:	69fb      	ldr	r3, [r7, #28]
 800c338:	4413      	add	r3, r2
 800c33a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c33e:	691b      	ldr	r3, [r3, #16]
 800c340:	69ba      	ldr	r2, [r7, #24]
 800c342:	0151      	lsls	r1, r2, #5
 800c344:	69fa      	ldr	r2, [r7, #28]
 800c346:	440a      	add	r2, r1
 800c348:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c34c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c350:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c354:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800c356:	69bb      	ldr	r3, [r7, #24]
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d131      	bne.n	800c3c0 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 800c35c:	68bb      	ldr	r3, [r7, #8]
 800c35e:	691b      	ldr	r3, [r3, #16]
 800c360:	2b00      	cmp	r3, #0
 800c362:	d003      	beq.n	800c36c <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 800c364:	68bb      	ldr	r3, [r7, #8]
 800c366:	689a      	ldr	r2, [r3, #8]
 800c368:	68bb      	ldr	r3, [r7, #8]
 800c36a:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800c36c:	68bb      	ldr	r3, [r7, #8]
 800c36e:	689a      	ldr	r2, [r3, #8]
 800c370:	68bb      	ldr	r3, [r7, #8]
 800c372:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800c374:	69bb      	ldr	r3, [r7, #24]
 800c376:	015a      	lsls	r2, r3, #5
 800c378:	69fb      	ldr	r3, [r7, #28]
 800c37a:	4413      	add	r3, r2
 800c37c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c380:	691a      	ldr	r2, [r3, #16]
 800c382:	68bb      	ldr	r3, [r7, #8]
 800c384:	6a1b      	ldr	r3, [r3, #32]
 800c386:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c38a:	69b9      	ldr	r1, [r7, #24]
 800c38c:	0148      	lsls	r0, r1, #5
 800c38e:	69f9      	ldr	r1, [r7, #28]
 800c390:	4401      	add	r1, r0
 800c392:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c396:	4313      	orrs	r3, r2
 800c398:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c39a:	69bb      	ldr	r3, [r7, #24]
 800c39c:	015a      	lsls	r2, r3, #5
 800c39e:	69fb      	ldr	r3, [r7, #28]
 800c3a0:	4413      	add	r3, r2
 800c3a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c3a6:	691b      	ldr	r3, [r3, #16]
 800c3a8:	69ba      	ldr	r2, [r7, #24]
 800c3aa:	0151      	lsls	r1, r2, #5
 800c3ac:	69fa      	ldr	r2, [r7, #28]
 800c3ae:	440a      	add	r2, r1
 800c3b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c3b4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c3b8:	6113      	str	r3, [r2, #16]
 800c3ba:	e061      	b.n	800c480 <USB_EPStartXfer+0x484>
 800c3bc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800c3c0:	68bb      	ldr	r3, [r7, #8]
 800c3c2:	691b      	ldr	r3, [r3, #16]
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d123      	bne.n	800c410 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800c3c8:	69bb      	ldr	r3, [r7, #24]
 800c3ca:	015a      	lsls	r2, r3, #5
 800c3cc:	69fb      	ldr	r3, [r7, #28]
 800c3ce:	4413      	add	r3, r2
 800c3d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c3d4:	691a      	ldr	r2, [r3, #16]
 800c3d6:	68bb      	ldr	r3, [r7, #8]
 800c3d8:	689b      	ldr	r3, [r3, #8]
 800c3da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c3de:	69b9      	ldr	r1, [r7, #24]
 800c3e0:	0148      	lsls	r0, r1, #5
 800c3e2:	69f9      	ldr	r1, [r7, #28]
 800c3e4:	4401      	add	r1, r0
 800c3e6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c3ea:	4313      	orrs	r3, r2
 800c3ec:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c3ee:	69bb      	ldr	r3, [r7, #24]
 800c3f0:	015a      	lsls	r2, r3, #5
 800c3f2:	69fb      	ldr	r3, [r7, #28]
 800c3f4:	4413      	add	r3, r2
 800c3f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c3fa:	691b      	ldr	r3, [r3, #16]
 800c3fc:	69ba      	ldr	r2, [r7, #24]
 800c3fe:	0151      	lsls	r1, r2, #5
 800c400:	69fa      	ldr	r2, [r7, #28]
 800c402:	440a      	add	r2, r1
 800c404:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c408:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c40c:	6113      	str	r3, [r2, #16]
 800c40e:	e037      	b.n	800c480 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800c410:	68bb      	ldr	r3, [r7, #8]
 800c412:	691a      	ldr	r2, [r3, #16]
 800c414:	68bb      	ldr	r3, [r7, #8]
 800c416:	689b      	ldr	r3, [r3, #8]
 800c418:	4413      	add	r3, r2
 800c41a:	1e5a      	subs	r2, r3, #1
 800c41c:	68bb      	ldr	r3, [r7, #8]
 800c41e:	689b      	ldr	r3, [r3, #8]
 800c420:	fbb2 f3f3 	udiv	r3, r2, r3
 800c424:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800c426:	68bb      	ldr	r3, [r7, #8]
 800c428:	689b      	ldr	r3, [r3, #8]
 800c42a:	8afa      	ldrh	r2, [r7, #22]
 800c42c:	fb03 f202 	mul.w	r2, r3, r2
 800c430:	68bb      	ldr	r3, [r7, #8]
 800c432:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800c434:	69bb      	ldr	r3, [r7, #24]
 800c436:	015a      	lsls	r2, r3, #5
 800c438:	69fb      	ldr	r3, [r7, #28]
 800c43a:	4413      	add	r3, r2
 800c43c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c440:	691a      	ldr	r2, [r3, #16]
 800c442:	8afb      	ldrh	r3, [r7, #22]
 800c444:	04d9      	lsls	r1, r3, #19
 800c446:	4b38      	ldr	r3, [pc, #224]	; (800c528 <USB_EPStartXfer+0x52c>)
 800c448:	400b      	ands	r3, r1
 800c44a:	69b9      	ldr	r1, [r7, #24]
 800c44c:	0148      	lsls	r0, r1, #5
 800c44e:	69f9      	ldr	r1, [r7, #28]
 800c450:	4401      	add	r1, r0
 800c452:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c456:	4313      	orrs	r3, r2
 800c458:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800c45a:	69bb      	ldr	r3, [r7, #24]
 800c45c:	015a      	lsls	r2, r3, #5
 800c45e:	69fb      	ldr	r3, [r7, #28]
 800c460:	4413      	add	r3, r2
 800c462:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c466:	691a      	ldr	r2, [r3, #16]
 800c468:	68bb      	ldr	r3, [r7, #8]
 800c46a:	6a1b      	ldr	r3, [r3, #32]
 800c46c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c470:	69b9      	ldr	r1, [r7, #24]
 800c472:	0148      	lsls	r0, r1, #5
 800c474:	69f9      	ldr	r1, [r7, #28]
 800c476:	4401      	add	r1, r0
 800c478:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c47c:	4313      	orrs	r3, r2
 800c47e:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800c480:	79fb      	ldrb	r3, [r7, #7]
 800c482:	2b01      	cmp	r3, #1
 800c484:	d10d      	bne.n	800c4a2 <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800c486:	68bb      	ldr	r3, [r7, #8]
 800c488:	68db      	ldr	r3, [r3, #12]
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d009      	beq.n	800c4a2 <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800c48e:	68bb      	ldr	r3, [r7, #8]
 800c490:	68d9      	ldr	r1, [r3, #12]
 800c492:	69bb      	ldr	r3, [r7, #24]
 800c494:	015a      	lsls	r2, r3, #5
 800c496:	69fb      	ldr	r3, [r7, #28]
 800c498:	4413      	add	r3, r2
 800c49a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c49e:	460a      	mov	r2, r1
 800c4a0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800c4a2:	68bb      	ldr	r3, [r7, #8]
 800c4a4:	791b      	ldrb	r3, [r3, #4]
 800c4a6:	2b01      	cmp	r3, #1
 800c4a8:	d128      	bne.n	800c4fc <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c4aa:	69fb      	ldr	r3, [r7, #28]
 800c4ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c4b0:	689b      	ldr	r3, [r3, #8]
 800c4b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d110      	bne.n	800c4dc <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800c4ba:	69bb      	ldr	r3, [r7, #24]
 800c4bc:	015a      	lsls	r2, r3, #5
 800c4be:	69fb      	ldr	r3, [r7, #28]
 800c4c0:	4413      	add	r3, r2
 800c4c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	69ba      	ldr	r2, [r7, #24]
 800c4ca:	0151      	lsls	r1, r2, #5
 800c4cc:	69fa      	ldr	r2, [r7, #28]
 800c4ce:	440a      	add	r2, r1
 800c4d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c4d4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c4d8:	6013      	str	r3, [r2, #0]
 800c4da:	e00f      	b.n	800c4fc <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800c4dc:	69bb      	ldr	r3, [r7, #24]
 800c4de:	015a      	lsls	r2, r3, #5
 800c4e0:	69fb      	ldr	r3, [r7, #28]
 800c4e2:	4413      	add	r3, r2
 800c4e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	69ba      	ldr	r2, [r7, #24]
 800c4ec:	0151      	lsls	r1, r2, #5
 800c4ee:	69fa      	ldr	r2, [r7, #28]
 800c4f0:	440a      	add	r2, r1
 800c4f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c4f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c4fa:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800c4fc:	69bb      	ldr	r3, [r7, #24]
 800c4fe:	015a      	lsls	r2, r3, #5
 800c500:	69fb      	ldr	r3, [r7, #28]
 800c502:	4413      	add	r3, r2
 800c504:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	69ba      	ldr	r2, [r7, #24]
 800c50c:	0151      	lsls	r1, r2, #5
 800c50e:	69fa      	ldr	r2, [r7, #28]
 800c510:	440a      	add	r2, r1
 800c512:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c516:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c51a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c51c:	2300      	movs	r3, #0
}
 800c51e:	4618      	mov	r0, r3
 800c520:	3720      	adds	r7, #32
 800c522:	46bd      	mov	sp, r7
 800c524:	bd80      	pop	{r7, pc}
 800c526:	bf00      	nop
 800c528:	1ff80000 	.word	0x1ff80000

0800c52c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c52c:	b480      	push	{r7}
 800c52e:	b087      	sub	sp, #28
 800c530:	af00      	add	r7, sp, #0
 800c532:	6078      	str	r0, [r7, #4]
 800c534:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800c536:	2300      	movs	r3, #0
 800c538:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800c53a:	2300      	movs	r3, #0
 800c53c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c542:	683b      	ldr	r3, [r7, #0]
 800c544:	785b      	ldrb	r3, [r3, #1]
 800c546:	2b01      	cmp	r3, #1
 800c548:	d14a      	bne.n	800c5e0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c54a:	683b      	ldr	r3, [r7, #0]
 800c54c:	781b      	ldrb	r3, [r3, #0]
 800c54e:	015a      	lsls	r2, r3, #5
 800c550:	693b      	ldr	r3, [r7, #16]
 800c552:	4413      	add	r3, r2
 800c554:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c55e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c562:	f040 8086 	bne.w	800c672 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800c566:	683b      	ldr	r3, [r7, #0]
 800c568:	781b      	ldrb	r3, [r3, #0]
 800c56a:	015a      	lsls	r2, r3, #5
 800c56c:	693b      	ldr	r3, [r7, #16]
 800c56e:	4413      	add	r3, r2
 800c570:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	683a      	ldr	r2, [r7, #0]
 800c578:	7812      	ldrb	r2, [r2, #0]
 800c57a:	0151      	lsls	r1, r2, #5
 800c57c:	693a      	ldr	r2, [r7, #16]
 800c57e:	440a      	add	r2, r1
 800c580:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c584:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c588:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800c58a:	683b      	ldr	r3, [r7, #0]
 800c58c:	781b      	ldrb	r3, [r3, #0]
 800c58e:	015a      	lsls	r2, r3, #5
 800c590:	693b      	ldr	r3, [r7, #16]
 800c592:	4413      	add	r3, r2
 800c594:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	683a      	ldr	r2, [r7, #0]
 800c59c:	7812      	ldrb	r2, [r2, #0]
 800c59e:	0151      	lsls	r1, r2, #5
 800c5a0:	693a      	ldr	r2, [r7, #16]
 800c5a2:	440a      	add	r2, r1
 800c5a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c5a8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c5ac:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	3301      	adds	r3, #1
 800c5b2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	f242 7210 	movw	r2, #10000	; 0x2710
 800c5ba:	4293      	cmp	r3, r2
 800c5bc:	d902      	bls.n	800c5c4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800c5be:	2301      	movs	r3, #1
 800c5c0:	75fb      	strb	r3, [r7, #23]
          break;
 800c5c2:	e056      	b.n	800c672 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800c5c4:	683b      	ldr	r3, [r7, #0]
 800c5c6:	781b      	ldrb	r3, [r3, #0]
 800c5c8:	015a      	lsls	r2, r3, #5
 800c5ca:	693b      	ldr	r3, [r7, #16]
 800c5cc:	4413      	add	r3, r2
 800c5ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c5d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c5dc:	d0e7      	beq.n	800c5ae <USB_EPStopXfer+0x82>
 800c5de:	e048      	b.n	800c672 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c5e0:	683b      	ldr	r3, [r7, #0]
 800c5e2:	781b      	ldrb	r3, [r3, #0]
 800c5e4:	015a      	lsls	r2, r3, #5
 800c5e6:	693b      	ldr	r3, [r7, #16]
 800c5e8:	4413      	add	r3, r2
 800c5ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c5f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c5f8:	d13b      	bne.n	800c672 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800c5fa:	683b      	ldr	r3, [r7, #0]
 800c5fc:	781b      	ldrb	r3, [r3, #0]
 800c5fe:	015a      	lsls	r2, r3, #5
 800c600:	693b      	ldr	r3, [r7, #16]
 800c602:	4413      	add	r3, r2
 800c604:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	683a      	ldr	r2, [r7, #0]
 800c60c:	7812      	ldrb	r2, [r2, #0]
 800c60e:	0151      	lsls	r1, r2, #5
 800c610:	693a      	ldr	r2, [r7, #16]
 800c612:	440a      	add	r2, r1
 800c614:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c618:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c61c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800c61e:	683b      	ldr	r3, [r7, #0]
 800c620:	781b      	ldrb	r3, [r3, #0]
 800c622:	015a      	lsls	r2, r3, #5
 800c624:	693b      	ldr	r3, [r7, #16]
 800c626:	4413      	add	r3, r2
 800c628:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	683a      	ldr	r2, [r7, #0]
 800c630:	7812      	ldrb	r2, [r2, #0]
 800c632:	0151      	lsls	r1, r2, #5
 800c634:	693a      	ldr	r2, [r7, #16]
 800c636:	440a      	add	r2, r1
 800c638:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c63c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c640:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800c642:	68fb      	ldr	r3, [r7, #12]
 800c644:	3301      	adds	r3, #1
 800c646:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	f242 7210 	movw	r2, #10000	; 0x2710
 800c64e:	4293      	cmp	r3, r2
 800c650:	d902      	bls.n	800c658 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800c652:	2301      	movs	r3, #1
 800c654:	75fb      	strb	r3, [r7, #23]
          break;
 800c656:	e00c      	b.n	800c672 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800c658:	683b      	ldr	r3, [r7, #0]
 800c65a:	781b      	ldrb	r3, [r3, #0]
 800c65c:	015a      	lsls	r2, r3, #5
 800c65e:	693b      	ldr	r3, [r7, #16]
 800c660:	4413      	add	r3, r2
 800c662:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c66c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c670:	d0e7      	beq.n	800c642 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800c672:	7dfb      	ldrb	r3, [r7, #23]
}
 800c674:	4618      	mov	r0, r3
 800c676:	371c      	adds	r7, #28
 800c678:	46bd      	mov	sp, r7
 800c67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c67e:	4770      	bx	lr

0800c680 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800c680:	b480      	push	{r7}
 800c682:	b089      	sub	sp, #36	; 0x24
 800c684:	af00      	add	r7, sp, #0
 800c686:	60f8      	str	r0, [r7, #12]
 800c688:	60b9      	str	r1, [r7, #8]
 800c68a:	4611      	mov	r1, r2
 800c68c:	461a      	mov	r2, r3
 800c68e:	460b      	mov	r3, r1
 800c690:	71fb      	strb	r3, [r7, #7]
 800c692:	4613      	mov	r3, r2
 800c694:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800c69a:	68bb      	ldr	r3, [r7, #8]
 800c69c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800c69e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d123      	bne.n	800c6ee <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800c6a6:	88bb      	ldrh	r3, [r7, #4]
 800c6a8:	3303      	adds	r3, #3
 800c6aa:	089b      	lsrs	r3, r3, #2
 800c6ac:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800c6ae:	2300      	movs	r3, #0
 800c6b0:	61bb      	str	r3, [r7, #24]
 800c6b2:	e018      	b.n	800c6e6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800c6b4:	79fb      	ldrb	r3, [r7, #7]
 800c6b6:	031a      	lsls	r2, r3, #12
 800c6b8:	697b      	ldr	r3, [r7, #20]
 800c6ba:	4413      	add	r3, r2
 800c6bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c6c0:	461a      	mov	r2, r3
 800c6c2:	69fb      	ldr	r3, [r7, #28]
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	6013      	str	r3, [r2, #0]
      pSrc++;
 800c6c8:	69fb      	ldr	r3, [r7, #28]
 800c6ca:	3301      	adds	r3, #1
 800c6cc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c6ce:	69fb      	ldr	r3, [r7, #28]
 800c6d0:	3301      	adds	r3, #1
 800c6d2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c6d4:	69fb      	ldr	r3, [r7, #28]
 800c6d6:	3301      	adds	r3, #1
 800c6d8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c6da:	69fb      	ldr	r3, [r7, #28]
 800c6dc:	3301      	adds	r3, #1
 800c6de:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800c6e0:	69bb      	ldr	r3, [r7, #24]
 800c6e2:	3301      	adds	r3, #1
 800c6e4:	61bb      	str	r3, [r7, #24]
 800c6e6:	69ba      	ldr	r2, [r7, #24]
 800c6e8:	693b      	ldr	r3, [r7, #16]
 800c6ea:	429a      	cmp	r2, r3
 800c6ec:	d3e2      	bcc.n	800c6b4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800c6ee:	2300      	movs	r3, #0
}
 800c6f0:	4618      	mov	r0, r3
 800c6f2:	3724      	adds	r7, #36	; 0x24
 800c6f4:	46bd      	mov	sp, r7
 800c6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6fa:	4770      	bx	lr

0800c6fc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800c6fc:	b480      	push	{r7}
 800c6fe:	b08b      	sub	sp, #44	; 0x2c
 800c700:	af00      	add	r7, sp, #0
 800c702:	60f8      	str	r0, [r7, #12]
 800c704:	60b9      	str	r1, [r7, #8]
 800c706:	4613      	mov	r3, r2
 800c708:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800c70e:	68bb      	ldr	r3, [r7, #8]
 800c710:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800c712:	88fb      	ldrh	r3, [r7, #6]
 800c714:	089b      	lsrs	r3, r3, #2
 800c716:	b29b      	uxth	r3, r3
 800c718:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800c71a:	88fb      	ldrh	r3, [r7, #6]
 800c71c:	f003 0303 	and.w	r3, r3, #3
 800c720:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800c722:	2300      	movs	r3, #0
 800c724:	623b      	str	r3, [r7, #32]
 800c726:	e014      	b.n	800c752 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800c728:	69bb      	ldr	r3, [r7, #24]
 800c72a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c72e:	681a      	ldr	r2, [r3, #0]
 800c730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c732:	601a      	str	r2, [r3, #0]
    pDest++;
 800c734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c736:	3301      	adds	r3, #1
 800c738:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800c73a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c73c:	3301      	adds	r3, #1
 800c73e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800c740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c742:	3301      	adds	r3, #1
 800c744:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800c746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c748:	3301      	adds	r3, #1
 800c74a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800c74c:	6a3b      	ldr	r3, [r7, #32]
 800c74e:	3301      	adds	r3, #1
 800c750:	623b      	str	r3, [r7, #32]
 800c752:	6a3a      	ldr	r2, [r7, #32]
 800c754:	697b      	ldr	r3, [r7, #20]
 800c756:	429a      	cmp	r2, r3
 800c758:	d3e6      	bcc.n	800c728 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800c75a:	8bfb      	ldrh	r3, [r7, #30]
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d01e      	beq.n	800c79e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800c760:	2300      	movs	r3, #0
 800c762:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800c764:	69bb      	ldr	r3, [r7, #24]
 800c766:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c76a:	461a      	mov	r2, r3
 800c76c:	f107 0310 	add.w	r3, r7, #16
 800c770:	6812      	ldr	r2, [r2, #0]
 800c772:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800c774:	693a      	ldr	r2, [r7, #16]
 800c776:	6a3b      	ldr	r3, [r7, #32]
 800c778:	b2db      	uxtb	r3, r3
 800c77a:	00db      	lsls	r3, r3, #3
 800c77c:	fa22 f303 	lsr.w	r3, r2, r3
 800c780:	b2da      	uxtb	r2, r3
 800c782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c784:	701a      	strb	r2, [r3, #0]
      i++;
 800c786:	6a3b      	ldr	r3, [r7, #32]
 800c788:	3301      	adds	r3, #1
 800c78a:	623b      	str	r3, [r7, #32]
      pDest++;
 800c78c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c78e:	3301      	adds	r3, #1
 800c790:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800c792:	8bfb      	ldrh	r3, [r7, #30]
 800c794:	3b01      	subs	r3, #1
 800c796:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800c798:	8bfb      	ldrh	r3, [r7, #30]
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d1ea      	bne.n	800c774 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800c79e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c7a0:	4618      	mov	r0, r3
 800c7a2:	372c      	adds	r7, #44	; 0x2c
 800c7a4:	46bd      	mov	sp, r7
 800c7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7aa:	4770      	bx	lr

0800c7ac <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800c7ac:	b480      	push	{r7}
 800c7ae:	b085      	sub	sp, #20
 800c7b0:	af00      	add	r7, sp, #0
 800c7b2:	6078      	str	r0, [r7, #4]
 800c7b4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c7ba:	683b      	ldr	r3, [r7, #0]
 800c7bc:	781b      	ldrb	r3, [r3, #0]
 800c7be:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c7c0:	683b      	ldr	r3, [r7, #0]
 800c7c2:	785b      	ldrb	r3, [r3, #1]
 800c7c4:	2b01      	cmp	r3, #1
 800c7c6:	d12c      	bne.n	800c822 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c7c8:	68bb      	ldr	r3, [r7, #8]
 800c7ca:	015a      	lsls	r2, r3, #5
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	4413      	add	r3, r2
 800c7d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	db12      	blt.n	800c800 <USB_EPSetStall+0x54>
 800c7da:	68bb      	ldr	r3, [r7, #8]
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d00f      	beq.n	800c800 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800c7e0:	68bb      	ldr	r3, [r7, #8]
 800c7e2:	015a      	lsls	r2, r3, #5
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	4413      	add	r3, r2
 800c7e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	68ba      	ldr	r2, [r7, #8]
 800c7f0:	0151      	lsls	r1, r2, #5
 800c7f2:	68fa      	ldr	r2, [r7, #12]
 800c7f4:	440a      	add	r2, r1
 800c7f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c7fa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c7fe:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800c800:	68bb      	ldr	r3, [r7, #8]
 800c802:	015a      	lsls	r2, r3, #5
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	4413      	add	r3, r2
 800c808:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	68ba      	ldr	r2, [r7, #8]
 800c810:	0151      	lsls	r1, r2, #5
 800c812:	68fa      	ldr	r2, [r7, #12]
 800c814:	440a      	add	r2, r1
 800c816:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c81a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c81e:	6013      	str	r3, [r2, #0]
 800c820:	e02b      	b.n	800c87a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c822:	68bb      	ldr	r3, [r7, #8]
 800c824:	015a      	lsls	r2, r3, #5
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	4413      	add	r3, r2
 800c82a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	2b00      	cmp	r3, #0
 800c832:	db12      	blt.n	800c85a <USB_EPSetStall+0xae>
 800c834:	68bb      	ldr	r3, [r7, #8]
 800c836:	2b00      	cmp	r3, #0
 800c838:	d00f      	beq.n	800c85a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800c83a:	68bb      	ldr	r3, [r7, #8]
 800c83c:	015a      	lsls	r2, r3, #5
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	4413      	add	r3, r2
 800c842:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	68ba      	ldr	r2, [r7, #8]
 800c84a:	0151      	lsls	r1, r2, #5
 800c84c:	68fa      	ldr	r2, [r7, #12]
 800c84e:	440a      	add	r2, r1
 800c850:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c854:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c858:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800c85a:	68bb      	ldr	r3, [r7, #8]
 800c85c:	015a      	lsls	r2, r3, #5
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	4413      	add	r3, r2
 800c862:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	68ba      	ldr	r2, [r7, #8]
 800c86a:	0151      	lsls	r1, r2, #5
 800c86c:	68fa      	ldr	r2, [r7, #12]
 800c86e:	440a      	add	r2, r1
 800c870:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c874:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c878:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c87a:	2300      	movs	r3, #0
}
 800c87c:	4618      	mov	r0, r3
 800c87e:	3714      	adds	r7, #20
 800c880:	46bd      	mov	sp, r7
 800c882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c886:	4770      	bx	lr

0800c888 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800c888:	b480      	push	{r7}
 800c88a:	b085      	sub	sp, #20
 800c88c:	af00      	add	r7, sp, #0
 800c88e:	6078      	str	r0, [r7, #4]
 800c890:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c896:	683b      	ldr	r3, [r7, #0]
 800c898:	781b      	ldrb	r3, [r3, #0]
 800c89a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c89c:	683b      	ldr	r3, [r7, #0]
 800c89e:	785b      	ldrb	r3, [r3, #1]
 800c8a0:	2b01      	cmp	r3, #1
 800c8a2:	d128      	bne.n	800c8f6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800c8a4:	68bb      	ldr	r3, [r7, #8]
 800c8a6:	015a      	lsls	r2, r3, #5
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	4413      	add	r3, r2
 800c8ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	68ba      	ldr	r2, [r7, #8]
 800c8b4:	0151      	lsls	r1, r2, #5
 800c8b6:	68fa      	ldr	r2, [r7, #12]
 800c8b8:	440a      	add	r2, r1
 800c8ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c8be:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c8c2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c8c4:	683b      	ldr	r3, [r7, #0]
 800c8c6:	791b      	ldrb	r3, [r3, #4]
 800c8c8:	2b03      	cmp	r3, #3
 800c8ca:	d003      	beq.n	800c8d4 <USB_EPClearStall+0x4c>
 800c8cc:	683b      	ldr	r3, [r7, #0]
 800c8ce:	791b      	ldrb	r3, [r3, #4]
 800c8d0:	2b02      	cmp	r3, #2
 800c8d2:	d138      	bne.n	800c946 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c8d4:	68bb      	ldr	r3, [r7, #8]
 800c8d6:	015a      	lsls	r2, r3, #5
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	4413      	add	r3, r2
 800c8dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	68ba      	ldr	r2, [r7, #8]
 800c8e4:	0151      	lsls	r1, r2, #5
 800c8e6:	68fa      	ldr	r2, [r7, #12]
 800c8e8:	440a      	add	r2, r1
 800c8ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c8ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c8f2:	6013      	str	r3, [r2, #0]
 800c8f4:	e027      	b.n	800c946 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800c8f6:	68bb      	ldr	r3, [r7, #8]
 800c8f8:	015a      	lsls	r2, r3, #5
 800c8fa:	68fb      	ldr	r3, [r7, #12]
 800c8fc:	4413      	add	r3, r2
 800c8fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	68ba      	ldr	r2, [r7, #8]
 800c906:	0151      	lsls	r1, r2, #5
 800c908:	68fa      	ldr	r2, [r7, #12]
 800c90a:	440a      	add	r2, r1
 800c90c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c910:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c914:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c916:	683b      	ldr	r3, [r7, #0]
 800c918:	791b      	ldrb	r3, [r3, #4]
 800c91a:	2b03      	cmp	r3, #3
 800c91c:	d003      	beq.n	800c926 <USB_EPClearStall+0x9e>
 800c91e:	683b      	ldr	r3, [r7, #0]
 800c920:	791b      	ldrb	r3, [r3, #4]
 800c922:	2b02      	cmp	r3, #2
 800c924:	d10f      	bne.n	800c946 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c926:	68bb      	ldr	r3, [r7, #8]
 800c928:	015a      	lsls	r2, r3, #5
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	4413      	add	r3, r2
 800c92e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	68ba      	ldr	r2, [r7, #8]
 800c936:	0151      	lsls	r1, r2, #5
 800c938:	68fa      	ldr	r2, [r7, #12]
 800c93a:	440a      	add	r2, r1
 800c93c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c940:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c944:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800c946:	2300      	movs	r3, #0
}
 800c948:	4618      	mov	r0, r3
 800c94a:	3714      	adds	r7, #20
 800c94c:	46bd      	mov	sp, r7
 800c94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c952:	4770      	bx	lr

0800c954 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800c954:	b480      	push	{r7}
 800c956:	b085      	sub	sp, #20
 800c958:	af00      	add	r7, sp, #0
 800c95a:	6078      	str	r0, [r7, #4]
 800c95c:	460b      	mov	r3, r1
 800c95e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	68fa      	ldr	r2, [r7, #12]
 800c96e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c972:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800c976:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c97e:	681a      	ldr	r2, [r3, #0]
 800c980:	78fb      	ldrb	r3, [r7, #3]
 800c982:	011b      	lsls	r3, r3, #4
 800c984:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800c988:	68f9      	ldr	r1, [r7, #12]
 800c98a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c98e:	4313      	orrs	r3, r2
 800c990:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800c992:	2300      	movs	r3, #0
}
 800c994:	4618      	mov	r0, r3
 800c996:	3714      	adds	r7, #20
 800c998:	46bd      	mov	sp, r7
 800c99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c99e:	4770      	bx	lr

0800c9a0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800c9a0:	b480      	push	{r7}
 800c9a2:	b085      	sub	sp, #20
 800c9a4:	af00      	add	r7, sp, #0
 800c9a6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	68fa      	ldr	r2, [r7, #12]
 800c9b6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c9ba:	f023 0303 	bic.w	r3, r3, #3
 800c9be:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c9c6:	685b      	ldr	r3, [r3, #4]
 800c9c8:	68fa      	ldr	r2, [r7, #12]
 800c9ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c9ce:	f023 0302 	bic.w	r3, r3, #2
 800c9d2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c9d4:	2300      	movs	r3, #0
}
 800c9d6:	4618      	mov	r0, r3
 800c9d8:	3714      	adds	r7, #20
 800c9da:	46bd      	mov	sp, r7
 800c9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9e0:	4770      	bx	lr

0800c9e2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800c9e2:	b480      	push	{r7}
 800c9e4:	b085      	sub	sp, #20
 800c9e6:	af00      	add	r7, sp, #0
 800c9e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	68fa      	ldr	r2, [r7, #12]
 800c9f8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c9fc:	f023 0303 	bic.w	r3, r3, #3
 800ca00:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca08:	685b      	ldr	r3, [r3, #4]
 800ca0a:	68fa      	ldr	r2, [r7, #12]
 800ca0c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ca10:	f043 0302 	orr.w	r3, r3, #2
 800ca14:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ca16:	2300      	movs	r3, #0
}
 800ca18:	4618      	mov	r0, r3
 800ca1a:	3714      	adds	r7, #20
 800ca1c:	46bd      	mov	sp, r7
 800ca1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca22:	4770      	bx	lr

0800ca24 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800ca24:	b480      	push	{r7}
 800ca26:	b085      	sub	sp, #20
 800ca28:	af00      	add	r7, sp, #0
 800ca2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	695b      	ldr	r3, [r3, #20]
 800ca30:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	699b      	ldr	r3, [r3, #24]
 800ca36:	68fa      	ldr	r2, [r7, #12]
 800ca38:	4013      	ands	r3, r2
 800ca3a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800ca3c:	68fb      	ldr	r3, [r7, #12]
}
 800ca3e:	4618      	mov	r0, r3
 800ca40:	3714      	adds	r7, #20
 800ca42:	46bd      	mov	sp, r7
 800ca44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca48:	4770      	bx	lr

0800ca4a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800ca4a:	b480      	push	{r7}
 800ca4c:	b085      	sub	sp, #20
 800ca4e:	af00      	add	r7, sp, #0
 800ca50:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca5c:	699b      	ldr	r3, [r3, #24]
 800ca5e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca66:	69db      	ldr	r3, [r3, #28]
 800ca68:	68ba      	ldr	r2, [r7, #8]
 800ca6a:	4013      	ands	r3, r2
 800ca6c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800ca6e:	68bb      	ldr	r3, [r7, #8]
 800ca70:	0c1b      	lsrs	r3, r3, #16
}
 800ca72:	4618      	mov	r0, r3
 800ca74:	3714      	adds	r7, #20
 800ca76:	46bd      	mov	sp, r7
 800ca78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca7c:	4770      	bx	lr

0800ca7e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800ca7e:	b480      	push	{r7}
 800ca80:	b085      	sub	sp, #20
 800ca82:	af00      	add	r7, sp, #0
 800ca84:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca90:	699b      	ldr	r3, [r3, #24]
 800ca92:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca9a:	69db      	ldr	r3, [r3, #28]
 800ca9c:	68ba      	ldr	r2, [r7, #8]
 800ca9e:	4013      	ands	r3, r2
 800caa0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800caa2:	68bb      	ldr	r3, [r7, #8]
 800caa4:	b29b      	uxth	r3, r3
}
 800caa6:	4618      	mov	r0, r3
 800caa8:	3714      	adds	r7, #20
 800caaa:	46bd      	mov	sp, r7
 800caac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cab0:	4770      	bx	lr

0800cab2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800cab2:	b480      	push	{r7}
 800cab4:	b085      	sub	sp, #20
 800cab6:	af00      	add	r7, sp, #0
 800cab8:	6078      	str	r0, [r7, #4]
 800caba:	460b      	mov	r3, r1
 800cabc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800cac2:	78fb      	ldrb	r3, [r7, #3]
 800cac4:	015a      	lsls	r2, r3, #5
 800cac6:	68fb      	ldr	r3, [r7, #12]
 800cac8:	4413      	add	r3, r2
 800caca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cace:	689b      	ldr	r3, [r3, #8]
 800cad0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cad8:	695b      	ldr	r3, [r3, #20]
 800cada:	68ba      	ldr	r2, [r7, #8]
 800cadc:	4013      	ands	r3, r2
 800cade:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800cae0:	68bb      	ldr	r3, [r7, #8]
}
 800cae2:	4618      	mov	r0, r3
 800cae4:	3714      	adds	r7, #20
 800cae6:	46bd      	mov	sp, r7
 800cae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caec:	4770      	bx	lr

0800caee <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800caee:	b480      	push	{r7}
 800caf0:	b087      	sub	sp, #28
 800caf2:	af00      	add	r7, sp, #0
 800caf4:	6078      	str	r0, [r7, #4]
 800caf6:	460b      	mov	r3, r1
 800caf8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800cafe:	697b      	ldr	r3, [r7, #20]
 800cb00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cb04:	691b      	ldr	r3, [r3, #16]
 800cb06:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800cb08:	697b      	ldr	r3, [r7, #20]
 800cb0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cb0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb10:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800cb12:	78fb      	ldrb	r3, [r7, #3]
 800cb14:	f003 030f 	and.w	r3, r3, #15
 800cb18:	68fa      	ldr	r2, [r7, #12]
 800cb1a:	fa22 f303 	lsr.w	r3, r2, r3
 800cb1e:	01db      	lsls	r3, r3, #7
 800cb20:	b2db      	uxtb	r3, r3
 800cb22:	693a      	ldr	r2, [r7, #16]
 800cb24:	4313      	orrs	r3, r2
 800cb26:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800cb28:	78fb      	ldrb	r3, [r7, #3]
 800cb2a:	015a      	lsls	r2, r3, #5
 800cb2c:	697b      	ldr	r3, [r7, #20]
 800cb2e:	4413      	add	r3, r2
 800cb30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb34:	689b      	ldr	r3, [r3, #8]
 800cb36:	693a      	ldr	r2, [r7, #16]
 800cb38:	4013      	ands	r3, r2
 800cb3a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800cb3c:	68bb      	ldr	r3, [r7, #8]
}
 800cb3e:	4618      	mov	r0, r3
 800cb40:	371c      	adds	r7, #28
 800cb42:	46bd      	mov	sp, r7
 800cb44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb48:	4770      	bx	lr

0800cb4a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800cb4a:	b480      	push	{r7}
 800cb4c:	b083      	sub	sp, #12
 800cb4e:	af00      	add	r7, sp, #0
 800cb50:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	695b      	ldr	r3, [r3, #20]
 800cb56:	f003 0301 	and.w	r3, r3, #1
}
 800cb5a:	4618      	mov	r0, r3
 800cb5c:	370c      	adds	r7, #12
 800cb5e:	46bd      	mov	sp, r7
 800cb60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb64:	4770      	bx	lr

0800cb66 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800cb66:	b480      	push	{r7}
 800cb68:	b085      	sub	sp, #20
 800cb6a:	af00      	add	r7, sp, #0
 800cb6c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	68fa      	ldr	r2, [r7, #12]
 800cb7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cb80:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800cb84:	f023 0307 	bic.w	r3, r3, #7
 800cb88:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800cb8a:	68fb      	ldr	r3, [r7, #12]
 800cb8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cb90:	685b      	ldr	r3, [r3, #4]
 800cb92:	68fa      	ldr	r2, [r7, #12]
 800cb94:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cb98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cb9c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800cb9e:	2300      	movs	r3, #0
}
 800cba0:	4618      	mov	r0, r3
 800cba2:	3714      	adds	r7, #20
 800cba4:	46bd      	mov	sp, r7
 800cba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbaa:	4770      	bx	lr

0800cbac <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800cbac:	b480      	push	{r7}
 800cbae:	b087      	sub	sp, #28
 800cbb0:	af00      	add	r7, sp, #0
 800cbb2:	60f8      	str	r0, [r7, #12]
 800cbb4:	460b      	mov	r3, r1
 800cbb6:	607a      	str	r2, [r7, #4]
 800cbb8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	333c      	adds	r3, #60	; 0x3c
 800cbc2:	3304      	adds	r3, #4
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800cbc8:	693b      	ldr	r3, [r7, #16]
 800cbca:	4a26      	ldr	r2, [pc, #152]	; (800cc64 <USB_EP0_OutStart+0xb8>)
 800cbcc:	4293      	cmp	r3, r2
 800cbce:	d90a      	bls.n	800cbe6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800cbd0:	697b      	ldr	r3, [r7, #20]
 800cbd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cbdc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cbe0:	d101      	bne.n	800cbe6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800cbe2:	2300      	movs	r3, #0
 800cbe4:	e037      	b.n	800cc56 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800cbe6:	697b      	ldr	r3, [r7, #20]
 800cbe8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cbec:	461a      	mov	r2, r3
 800cbee:	2300      	movs	r3, #0
 800cbf0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800cbf2:	697b      	ldr	r3, [r7, #20]
 800cbf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cbf8:	691b      	ldr	r3, [r3, #16]
 800cbfa:	697a      	ldr	r2, [r7, #20]
 800cbfc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cc00:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cc04:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800cc06:	697b      	ldr	r3, [r7, #20]
 800cc08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc0c:	691b      	ldr	r3, [r3, #16]
 800cc0e:	697a      	ldr	r2, [r7, #20]
 800cc10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cc14:	f043 0318 	orr.w	r3, r3, #24
 800cc18:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800cc1a:	697b      	ldr	r3, [r7, #20]
 800cc1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc20:	691b      	ldr	r3, [r3, #16]
 800cc22:	697a      	ldr	r2, [r7, #20]
 800cc24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cc28:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800cc2c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800cc2e:	7afb      	ldrb	r3, [r7, #11]
 800cc30:	2b01      	cmp	r3, #1
 800cc32:	d10f      	bne.n	800cc54 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800cc34:	697b      	ldr	r3, [r7, #20]
 800cc36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc3a:	461a      	mov	r2, r3
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800cc40:	697b      	ldr	r3, [r7, #20]
 800cc42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	697a      	ldr	r2, [r7, #20]
 800cc4a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cc4e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800cc52:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800cc54:	2300      	movs	r3, #0
}
 800cc56:	4618      	mov	r0, r3
 800cc58:	371c      	adds	r7, #28
 800cc5a:	46bd      	mov	sp, r7
 800cc5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc60:	4770      	bx	lr
 800cc62:	bf00      	nop
 800cc64:	4f54300a 	.word	0x4f54300a

0800cc68 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800cc68:	b480      	push	{r7}
 800cc6a:	b085      	sub	sp, #20
 800cc6c:	af00      	add	r7, sp, #0
 800cc6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800cc70:	2300      	movs	r3, #0
 800cc72:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	3301      	adds	r3, #1
 800cc78:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800cc80:	d901      	bls.n	800cc86 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800cc82:	2303      	movs	r3, #3
 800cc84:	e01b      	b.n	800ccbe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	691b      	ldr	r3, [r3, #16]
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	daf2      	bge.n	800cc74 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800cc8e:	2300      	movs	r3, #0
 800cc90:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	691b      	ldr	r3, [r3, #16]
 800cc96:	f043 0201 	orr.w	r2, r3, #1
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	3301      	adds	r3, #1
 800cca2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800ccaa:	d901      	bls.n	800ccb0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800ccac:	2303      	movs	r3, #3
 800ccae:	e006      	b.n	800ccbe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	691b      	ldr	r3, [r3, #16]
 800ccb4:	f003 0301 	and.w	r3, r3, #1
 800ccb8:	2b01      	cmp	r3, #1
 800ccba:	d0f0      	beq.n	800cc9e <USB_CoreReset+0x36>

  return HAL_OK;
 800ccbc:	2300      	movs	r3, #0
}
 800ccbe:	4618      	mov	r0, r3
 800ccc0:	3714      	adds	r7, #20
 800ccc2:	46bd      	mov	sp, r7
 800ccc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccc8:	4770      	bx	lr
	...

0800cccc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cccc:	b580      	push	{r7, lr}
 800ccce:	b084      	sub	sp, #16
 800ccd0:	af00      	add	r7, sp, #0
 800ccd2:	6078      	str	r0, [r7, #4]
 800ccd4:	460b      	mov	r3, r1
 800ccd6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800ccd8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800ccdc:	f004 fa82 	bl	80111e4 <USBD_static_malloc>
 800cce0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d109      	bne.n	800ccfc <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	32b0      	adds	r2, #176	; 0xb0
 800ccf2:	2100      	movs	r1, #0
 800ccf4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800ccf8:	2302      	movs	r3, #2
 800ccfa:	e0d4      	b.n	800cea6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800ccfc:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800cd00:	2100      	movs	r1, #0
 800cd02:	68f8      	ldr	r0, [r7, #12]
 800cd04:	f007 f8c3 	bl	8013e8e <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	32b0      	adds	r2, #176	; 0xb0
 800cd12:	68f9      	ldr	r1, [r7, #12]
 800cd14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	32b0      	adds	r2, #176	; 0xb0
 800cd22:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	7c1b      	ldrb	r3, [r3, #16]
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	d138      	bne.n	800cda6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800cd34:	4b5e      	ldr	r3, [pc, #376]	; (800ceb0 <USBD_CDC_Init+0x1e4>)
 800cd36:	7819      	ldrb	r1, [r3, #0]
 800cd38:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cd3c:	2202      	movs	r2, #2
 800cd3e:	6878      	ldr	r0, [r7, #4]
 800cd40:	f004 f92d 	bl	8010f9e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800cd44:	4b5a      	ldr	r3, [pc, #360]	; (800ceb0 <USBD_CDC_Init+0x1e4>)
 800cd46:	781b      	ldrb	r3, [r3, #0]
 800cd48:	f003 020f 	and.w	r2, r3, #15
 800cd4c:	6879      	ldr	r1, [r7, #4]
 800cd4e:	4613      	mov	r3, r2
 800cd50:	009b      	lsls	r3, r3, #2
 800cd52:	4413      	add	r3, r2
 800cd54:	009b      	lsls	r3, r3, #2
 800cd56:	440b      	add	r3, r1
 800cd58:	3324      	adds	r3, #36	; 0x24
 800cd5a:	2201      	movs	r2, #1
 800cd5c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800cd5e:	4b55      	ldr	r3, [pc, #340]	; (800ceb4 <USBD_CDC_Init+0x1e8>)
 800cd60:	7819      	ldrb	r1, [r3, #0]
 800cd62:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cd66:	2202      	movs	r2, #2
 800cd68:	6878      	ldr	r0, [r7, #4]
 800cd6a:	f004 f918 	bl	8010f9e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800cd6e:	4b51      	ldr	r3, [pc, #324]	; (800ceb4 <USBD_CDC_Init+0x1e8>)
 800cd70:	781b      	ldrb	r3, [r3, #0]
 800cd72:	f003 020f 	and.w	r2, r3, #15
 800cd76:	6879      	ldr	r1, [r7, #4]
 800cd78:	4613      	mov	r3, r2
 800cd7a:	009b      	lsls	r3, r3, #2
 800cd7c:	4413      	add	r3, r2
 800cd7e:	009b      	lsls	r3, r3, #2
 800cd80:	440b      	add	r3, r1
 800cd82:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800cd86:	2201      	movs	r2, #1
 800cd88:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800cd8a:	4b4b      	ldr	r3, [pc, #300]	; (800ceb8 <USBD_CDC_Init+0x1ec>)
 800cd8c:	781b      	ldrb	r3, [r3, #0]
 800cd8e:	f003 020f 	and.w	r2, r3, #15
 800cd92:	6879      	ldr	r1, [r7, #4]
 800cd94:	4613      	mov	r3, r2
 800cd96:	009b      	lsls	r3, r3, #2
 800cd98:	4413      	add	r3, r2
 800cd9a:	009b      	lsls	r3, r3, #2
 800cd9c:	440b      	add	r3, r1
 800cd9e:	3326      	adds	r3, #38	; 0x26
 800cda0:	2210      	movs	r2, #16
 800cda2:	801a      	strh	r2, [r3, #0]
 800cda4:	e035      	b.n	800ce12 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800cda6:	4b42      	ldr	r3, [pc, #264]	; (800ceb0 <USBD_CDC_Init+0x1e4>)
 800cda8:	7819      	ldrb	r1, [r3, #0]
 800cdaa:	2340      	movs	r3, #64	; 0x40
 800cdac:	2202      	movs	r2, #2
 800cdae:	6878      	ldr	r0, [r7, #4]
 800cdb0:	f004 f8f5 	bl	8010f9e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800cdb4:	4b3e      	ldr	r3, [pc, #248]	; (800ceb0 <USBD_CDC_Init+0x1e4>)
 800cdb6:	781b      	ldrb	r3, [r3, #0]
 800cdb8:	f003 020f 	and.w	r2, r3, #15
 800cdbc:	6879      	ldr	r1, [r7, #4]
 800cdbe:	4613      	mov	r3, r2
 800cdc0:	009b      	lsls	r3, r3, #2
 800cdc2:	4413      	add	r3, r2
 800cdc4:	009b      	lsls	r3, r3, #2
 800cdc6:	440b      	add	r3, r1
 800cdc8:	3324      	adds	r3, #36	; 0x24
 800cdca:	2201      	movs	r2, #1
 800cdcc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800cdce:	4b39      	ldr	r3, [pc, #228]	; (800ceb4 <USBD_CDC_Init+0x1e8>)
 800cdd0:	7819      	ldrb	r1, [r3, #0]
 800cdd2:	2340      	movs	r3, #64	; 0x40
 800cdd4:	2202      	movs	r2, #2
 800cdd6:	6878      	ldr	r0, [r7, #4]
 800cdd8:	f004 f8e1 	bl	8010f9e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800cddc:	4b35      	ldr	r3, [pc, #212]	; (800ceb4 <USBD_CDC_Init+0x1e8>)
 800cdde:	781b      	ldrb	r3, [r3, #0]
 800cde0:	f003 020f 	and.w	r2, r3, #15
 800cde4:	6879      	ldr	r1, [r7, #4]
 800cde6:	4613      	mov	r3, r2
 800cde8:	009b      	lsls	r3, r3, #2
 800cdea:	4413      	add	r3, r2
 800cdec:	009b      	lsls	r3, r3, #2
 800cdee:	440b      	add	r3, r1
 800cdf0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800cdf4:	2201      	movs	r2, #1
 800cdf6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800cdf8:	4b2f      	ldr	r3, [pc, #188]	; (800ceb8 <USBD_CDC_Init+0x1ec>)
 800cdfa:	781b      	ldrb	r3, [r3, #0]
 800cdfc:	f003 020f 	and.w	r2, r3, #15
 800ce00:	6879      	ldr	r1, [r7, #4]
 800ce02:	4613      	mov	r3, r2
 800ce04:	009b      	lsls	r3, r3, #2
 800ce06:	4413      	add	r3, r2
 800ce08:	009b      	lsls	r3, r3, #2
 800ce0a:	440b      	add	r3, r1
 800ce0c:	3326      	adds	r3, #38	; 0x26
 800ce0e:	2210      	movs	r2, #16
 800ce10:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800ce12:	4b29      	ldr	r3, [pc, #164]	; (800ceb8 <USBD_CDC_Init+0x1ec>)
 800ce14:	7819      	ldrb	r1, [r3, #0]
 800ce16:	2308      	movs	r3, #8
 800ce18:	2203      	movs	r2, #3
 800ce1a:	6878      	ldr	r0, [r7, #4]
 800ce1c:	f004 f8bf 	bl	8010f9e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800ce20:	4b25      	ldr	r3, [pc, #148]	; (800ceb8 <USBD_CDC_Init+0x1ec>)
 800ce22:	781b      	ldrb	r3, [r3, #0]
 800ce24:	f003 020f 	and.w	r2, r3, #15
 800ce28:	6879      	ldr	r1, [r7, #4]
 800ce2a:	4613      	mov	r3, r2
 800ce2c:	009b      	lsls	r3, r3, #2
 800ce2e:	4413      	add	r3, r2
 800ce30:	009b      	lsls	r3, r3, #2
 800ce32:	440b      	add	r3, r1
 800ce34:	3324      	adds	r3, #36	; 0x24
 800ce36:	2201      	movs	r2, #1
 800ce38:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800ce3a:	68fb      	ldr	r3, [r7, #12]
 800ce3c:	2200      	movs	r2, #0
 800ce3e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ce48:	687a      	ldr	r2, [r7, #4]
 800ce4a:	33b0      	adds	r3, #176	; 0xb0
 800ce4c:	009b      	lsls	r3, r3, #2
 800ce4e:	4413      	add	r3, r2
 800ce50:	685b      	ldr	r3, [r3, #4]
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	2200      	movs	r2, #0
 800ce5a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	2200      	movs	r2, #0
 800ce62:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d101      	bne.n	800ce74 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800ce70:	2302      	movs	r3, #2
 800ce72:	e018      	b.n	800cea6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	7c1b      	ldrb	r3, [r3, #16]
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d10a      	bne.n	800ce92 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ce7c:	4b0d      	ldr	r3, [pc, #52]	; (800ceb4 <USBD_CDC_Init+0x1e8>)
 800ce7e:	7819      	ldrb	r1, [r3, #0]
 800ce80:	68fb      	ldr	r3, [r7, #12]
 800ce82:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ce86:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ce8a:	6878      	ldr	r0, [r7, #4]
 800ce8c:	f004 f976 	bl	801117c <USBD_LL_PrepareReceive>
 800ce90:	e008      	b.n	800cea4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ce92:	4b08      	ldr	r3, [pc, #32]	; (800ceb4 <USBD_CDC_Init+0x1e8>)
 800ce94:	7819      	ldrb	r1, [r3, #0]
 800ce96:	68fb      	ldr	r3, [r7, #12]
 800ce98:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ce9c:	2340      	movs	r3, #64	; 0x40
 800ce9e:	6878      	ldr	r0, [r7, #4]
 800cea0:	f004 f96c 	bl	801117c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800cea4:	2300      	movs	r3, #0
}
 800cea6:	4618      	mov	r0, r3
 800cea8:	3710      	adds	r7, #16
 800ceaa:	46bd      	mov	sp, r7
 800ceac:	bd80      	pop	{r7, pc}
 800ceae:	bf00      	nop
 800ceb0:	20000097 	.word	0x20000097
 800ceb4:	20000098 	.word	0x20000098
 800ceb8:	20000099 	.word	0x20000099

0800cebc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cebc:	b580      	push	{r7, lr}
 800cebe:	b082      	sub	sp, #8
 800cec0:	af00      	add	r7, sp, #0
 800cec2:	6078      	str	r0, [r7, #4]
 800cec4:	460b      	mov	r3, r1
 800cec6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800cec8:	4b3a      	ldr	r3, [pc, #232]	; (800cfb4 <USBD_CDC_DeInit+0xf8>)
 800ceca:	781b      	ldrb	r3, [r3, #0]
 800cecc:	4619      	mov	r1, r3
 800cece:	6878      	ldr	r0, [r7, #4]
 800ced0:	f004 f88b 	bl	8010fea <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800ced4:	4b37      	ldr	r3, [pc, #220]	; (800cfb4 <USBD_CDC_DeInit+0xf8>)
 800ced6:	781b      	ldrb	r3, [r3, #0]
 800ced8:	f003 020f 	and.w	r2, r3, #15
 800cedc:	6879      	ldr	r1, [r7, #4]
 800cede:	4613      	mov	r3, r2
 800cee0:	009b      	lsls	r3, r3, #2
 800cee2:	4413      	add	r3, r2
 800cee4:	009b      	lsls	r3, r3, #2
 800cee6:	440b      	add	r3, r1
 800cee8:	3324      	adds	r3, #36	; 0x24
 800ceea:	2200      	movs	r2, #0
 800ceec:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800ceee:	4b32      	ldr	r3, [pc, #200]	; (800cfb8 <USBD_CDC_DeInit+0xfc>)
 800cef0:	781b      	ldrb	r3, [r3, #0]
 800cef2:	4619      	mov	r1, r3
 800cef4:	6878      	ldr	r0, [r7, #4]
 800cef6:	f004 f878 	bl	8010fea <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800cefa:	4b2f      	ldr	r3, [pc, #188]	; (800cfb8 <USBD_CDC_DeInit+0xfc>)
 800cefc:	781b      	ldrb	r3, [r3, #0]
 800cefe:	f003 020f 	and.w	r2, r3, #15
 800cf02:	6879      	ldr	r1, [r7, #4]
 800cf04:	4613      	mov	r3, r2
 800cf06:	009b      	lsls	r3, r3, #2
 800cf08:	4413      	add	r3, r2
 800cf0a:	009b      	lsls	r3, r3, #2
 800cf0c:	440b      	add	r3, r1
 800cf0e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800cf12:	2200      	movs	r2, #0
 800cf14:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800cf16:	4b29      	ldr	r3, [pc, #164]	; (800cfbc <USBD_CDC_DeInit+0x100>)
 800cf18:	781b      	ldrb	r3, [r3, #0]
 800cf1a:	4619      	mov	r1, r3
 800cf1c:	6878      	ldr	r0, [r7, #4]
 800cf1e:	f004 f864 	bl	8010fea <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800cf22:	4b26      	ldr	r3, [pc, #152]	; (800cfbc <USBD_CDC_DeInit+0x100>)
 800cf24:	781b      	ldrb	r3, [r3, #0]
 800cf26:	f003 020f 	and.w	r2, r3, #15
 800cf2a:	6879      	ldr	r1, [r7, #4]
 800cf2c:	4613      	mov	r3, r2
 800cf2e:	009b      	lsls	r3, r3, #2
 800cf30:	4413      	add	r3, r2
 800cf32:	009b      	lsls	r3, r3, #2
 800cf34:	440b      	add	r3, r1
 800cf36:	3324      	adds	r3, #36	; 0x24
 800cf38:	2200      	movs	r2, #0
 800cf3a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800cf3c:	4b1f      	ldr	r3, [pc, #124]	; (800cfbc <USBD_CDC_DeInit+0x100>)
 800cf3e:	781b      	ldrb	r3, [r3, #0]
 800cf40:	f003 020f 	and.w	r2, r3, #15
 800cf44:	6879      	ldr	r1, [r7, #4]
 800cf46:	4613      	mov	r3, r2
 800cf48:	009b      	lsls	r3, r3, #2
 800cf4a:	4413      	add	r3, r2
 800cf4c:	009b      	lsls	r3, r3, #2
 800cf4e:	440b      	add	r3, r1
 800cf50:	3326      	adds	r3, #38	; 0x26
 800cf52:	2200      	movs	r2, #0
 800cf54:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	32b0      	adds	r2, #176	; 0xb0
 800cf60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d01f      	beq.n	800cfa8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cf6e:	687a      	ldr	r2, [r7, #4]
 800cf70:	33b0      	adds	r3, #176	; 0xb0
 800cf72:	009b      	lsls	r3, r3, #2
 800cf74:	4413      	add	r3, r2
 800cf76:	685b      	ldr	r3, [r3, #4]
 800cf78:	685b      	ldr	r3, [r3, #4]
 800cf7a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	32b0      	adds	r2, #176	; 0xb0
 800cf86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf8a:	4618      	mov	r0, r3
 800cf8c:	f004 f938 	bl	8011200 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	32b0      	adds	r2, #176	; 0xb0
 800cf9a:	2100      	movs	r1, #0
 800cf9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	2200      	movs	r2, #0
 800cfa4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800cfa8:	2300      	movs	r3, #0
}
 800cfaa:	4618      	mov	r0, r3
 800cfac:	3708      	adds	r7, #8
 800cfae:	46bd      	mov	sp, r7
 800cfb0:	bd80      	pop	{r7, pc}
 800cfb2:	bf00      	nop
 800cfb4:	20000097 	.word	0x20000097
 800cfb8:	20000098 	.word	0x20000098
 800cfbc:	20000099 	.word	0x20000099

0800cfc0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800cfc0:	b580      	push	{r7, lr}
 800cfc2:	b086      	sub	sp, #24
 800cfc4:	af00      	add	r7, sp, #0
 800cfc6:	6078      	str	r0, [r7, #4]
 800cfc8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	32b0      	adds	r2, #176	; 0xb0
 800cfd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cfd8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800cfda:	2300      	movs	r3, #0
 800cfdc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800cfde:	2300      	movs	r3, #0
 800cfe0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800cfe2:	2300      	movs	r3, #0
 800cfe4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800cfe6:	693b      	ldr	r3, [r7, #16]
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d101      	bne.n	800cff0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800cfec:	2303      	movs	r3, #3
 800cfee:	e0bf      	b.n	800d170 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cff0:	683b      	ldr	r3, [r7, #0]
 800cff2:	781b      	ldrb	r3, [r3, #0]
 800cff4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d050      	beq.n	800d09e <USBD_CDC_Setup+0xde>
 800cffc:	2b20      	cmp	r3, #32
 800cffe:	f040 80af 	bne.w	800d160 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800d002:	683b      	ldr	r3, [r7, #0]
 800d004:	88db      	ldrh	r3, [r3, #6]
 800d006:	2b00      	cmp	r3, #0
 800d008:	d03a      	beq.n	800d080 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800d00a:	683b      	ldr	r3, [r7, #0]
 800d00c:	781b      	ldrb	r3, [r3, #0]
 800d00e:	b25b      	sxtb	r3, r3
 800d010:	2b00      	cmp	r3, #0
 800d012:	da1b      	bge.n	800d04c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d01a:	687a      	ldr	r2, [r7, #4]
 800d01c:	33b0      	adds	r3, #176	; 0xb0
 800d01e:	009b      	lsls	r3, r3, #2
 800d020:	4413      	add	r3, r2
 800d022:	685b      	ldr	r3, [r3, #4]
 800d024:	689b      	ldr	r3, [r3, #8]
 800d026:	683a      	ldr	r2, [r7, #0]
 800d028:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800d02a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d02c:	683a      	ldr	r2, [r7, #0]
 800d02e:	88d2      	ldrh	r2, [r2, #6]
 800d030:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800d032:	683b      	ldr	r3, [r7, #0]
 800d034:	88db      	ldrh	r3, [r3, #6]
 800d036:	2b07      	cmp	r3, #7
 800d038:	bf28      	it	cs
 800d03a:	2307      	movcs	r3, #7
 800d03c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800d03e:	693b      	ldr	r3, [r7, #16]
 800d040:	89fa      	ldrh	r2, [r7, #14]
 800d042:	4619      	mov	r1, r3
 800d044:	6878      	ldr	r0, [r7, #4]
 800d046:	f001 fd89 	bl	800eb5c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800d04a:	e090      	b.n	800d16e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800d04c:	683b      	ldr	r3, [r7, #0]
 800d04e:	785a      	ldrb	r2, [r3, #1]
 800d050:	693b      	ldr	r3, [r7, #16]
 800d052:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800d056:	683b      	ldr	r3, [r7, #0]
 800d058:	88db      	ldrh	r3, [r3, #6]
 800d05a:	2b3f      	cmp	r3, #63	; 0x3f
 800d05c:	d803      	bhi.n	800d066 <USBD_CDC_Setup+0xa6>
 800d05e:	683b      	ldr	r3, [r7, #0]
 800d060:	88db      	ldrh	r3, [r3, #6]
 800d062:	b2da      	uxtb	r2, r3
 800d064:	e000      	b.n	800d068 <USBD_CDC_Setup+0xa8>
 800d066:	2240      	movs	r2, #64	; 0x40
 800d068:	693b      	ldr	r3, [r7, #16]
 800d06a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800d06e:	6939      	ldr	r1, [r7, #16]
 800d070:	693b      	ldr	r3, [r7, #16]
 800d072:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800d076:	461a      	mov	r2, r3
 800d078:	6878      	ldr	r0, [r7, #4]
 800d07a:	f001 fd9b 	bl	800ebb4 <USBD_CtlPrepareRx>
      break;
 800d07e:	e076      	b.n	800d16e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d086:	687a      	ldr	r2, [r7, #4]
 800d088:	33b0      	adds	r3, #176	; 0xb0
 800d08a:	009b      	lsls	r3, r3, #2
 800d08c:	4413      	add	r3, r2
 800d08e:	685b      	ldr	r3, [r3, #4]
 800d090:	689b      	ldr	r3, [r3, #8]
 800d092:	683a      	ldr	r2, [r7, #0]
 800d094:	7850      	ldrb	r0, [r2, #1]
 800d096:	2200      	movs	r2, #0
 800d098:	6839      	ldr	r1, [r7, #0]
 800d09a:	4798      	blx	r3
      break;
 800d09c:	e067      	b.n	800d16e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d09e:	683b      	ldr	r3, [r7, #0]
 800d0a0:	785b      	ldrb	r3, [r3, #1]
 800d0a2:	2b0b      	cmp	r3, #11
 800d0a4:	d851      	bhi.n	800d14a <USBD_CDC_Setup+0x18a>
 800d0a6:	a201      	add	r2, pc, #4	; (adr r2, 800d0ac <USBD_CDC_Setup+0xec>)
 800d0a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0ac:	0800d0dd 	.word	0x0800d0dd
 800d0b0:	0800d159 	.word	0x0800d159
 800d0b4:	0800d14b 	.word	0x0800d14b
 800d0b8:	0800d14b 	.word	0x0800d14b
 800d0bc:	0800d14b 	.word	0x0800d14b
 800d0c0:	0800d14b 	.word	0x0800d14b
 800d0c4:	0800d14b 	.word	0x0800d14b
 800d0c8:	0800d14b 	.word	0x0800d14b
 800d0cc:	0800d14b 	.word	0x0800d14b
 800d0d0:	0800d14b 	.word	0x0800d14b
 800d0d4:	0800d107 	.word	0x0800d107
 800d0d8:	0800d131 	.word	0x0800d131
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d0e2:	b2db      	uxtb	r3, r3
 800d0e4:	2b03      	cmp	r3, #3
 800d0e6:	d107      	bne.n	800d0f8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800d0e8:	f107 030a 	add.w	r3, r7, #10
 800d0ec:	2202      	movs	r2, #2
 800d0ee:	4619      	mov	r1, r3
 800d0f0:	6878      	ldr	r0, [r7, #4]
 800d0f2:	f001 fd33 	bl	800eb5c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d0f6:	e032      	b.n	800d15e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800d0f8:	6839      	ldr	r1, [r7, #0]
 800d0fa:	6878      	ldr	r0, [r7, #4]
 800d0fc:	f001 fcbd 	bl	800ea7a <USBD_CtlError>
            ret = USBD_FAIL;
 800d100:	2303      	movs	r3, #3
 800d102:	75fb      	strb	r3, [r7, #23]
          break;
 800d104:	e02b      	b.n	800d15e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d10c:	b2db      	uxtb	r3, r3
 800d10e:	2b03      	cmp	r3, #3
 800d110:	d107      	bne.n	800d122 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800d112:	f107 030d 	add.w	r3, r7, #13
 800d116:	2201      	movs	r2, #1
 800d118:	4619      	mov	r1, r3
 800d11a:	6878      	ldr	r0, [r7, #4]
 800d11c:	f001 fd1e 	bl	800eb5c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d120:	e01d      	b.n	800d15e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800d122:	6839      	ldr	r1, [r7, #0]
 800d124:	6878      	ldr	r0, [r7, #4]
 800d126:	f001 fca8 	bl	800ea7a <USBD_CtlError>
            ret = USBD_FAIL;
 800d12a:	2303      	movs	r3, #3
 800d12c:	75fb      	strb	r3, [r7, #23]
          break;
 800d12e:	e016      	b.n	800d15e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d136:	b2db      	uxtb	r3, r3
 800d138:	2b03      	cmp	r3, #3
 800d13a:	d00f      	beq.n	800d15c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800d13c:	6839      	ldr	r1, [r7, #0]
 800d13e:	6878      	ldr	r0, [r7, #4]
 800d140:	f001 fc9b 	bl	800ea7a <USBD_CtlError>
            ret = USBD_FAIL;
 800d144:	2303      	movs	r3, #3
 800d146:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800d148:	e008      	b.n	800d15c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800d14a:	6839      	ldr	r1, [r7, #0]
 800d14c:	6878      	ldr	r0, [r7, #4]
 800d14e:	f001 fc94 	bl	800ea7a <USBD_CtlError>
          ret = USBD_FAIL;
 800d152:	2303      	movs	r3, #3
 800d154:	75fb      	strb	r3, [r7, #23]
          break;
 800d156:	e002      	b.n	800d15e <USBD_CDC_Setup+0x19e>
          break;
 800d158:	bf00      	nop
 800d15a:	e008      	b.n	800d16e <USBD_CDC_Setup+0x1ae>
          break;
 800d15c:	bf00      	nop
      }
      break;
 800d15e:	e006      	b.n	800d16e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800d160:	6839      	ldr	r1, [r7, #0]
 800d162:	6878      	ldr	r0, [r7, #4]
 800d164:	f001 fc89 	bl	800ea7a <USBD_CtlError>
      ret = USBD_FAIL;
 800d168:	2303      	movs	r3, #3
 800d16a:	75fb      	strb	r3, [r7, #23]
      break;
 800d16c:	bf00      	nop
  }

  return (uint8_t)ret;
 800d16e:	7dfb      	ldrb	r3, [r7, #23]
}
 800d170:	4618      	mov	r0, r3
 800d172:	3718      	adds	r7, #24
 800d174:	46bd      	mov	sp, r7
 800d176:	bd80      	pop	{r7, pc}

0800d178 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d178:	b580      	push	{r7, lr}
 800d17a:	b084      	sub	sp, #16
 800d17c:	af00      	add	r7, sp, #0
 800d17e:	6078      	str	r0, [r7, #4]
 800d180:	460b      	mov	r3, r1
 800d182:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d18a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	32b0      	adds	r2, #176	; 0xb0
 800d196:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d101      	bne.n	800d1a2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800d19e:	2303      	movs	r3, #3
 800d1a0:	e065      	b.n	800d26e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	32b0      	adds	r2, #176	; 0xb0
 800d1ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d1b0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800d1b2:	78fb      	ldrb	r3, [r7, #3]
 800d1b4:	f003 020f 	and.w	r2, r3, #15
 800d1b8:	6879      	ldr	r1, [r7, #4]
 800d1ba:	4613      	mov	r3, r2
 800d1bc:	009b      	lsls	r3, r3, #2
 800d1be:	4413      	add	r3, r2
 800d1c0:	009b      	lsls	r3, r3, #2
 800d1c2:	440b      	add	r3, r1
 800d1c4:	3318      	adds	r3, #24
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d02f      	beq.n	800d22c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800d1cc:	78fb      	ldrb	r3, [r7, #3]
 800d1ce:	f003 020f 	and.w	r2, r3, #15
 800d1d2:	6879      	ldr	r1, [r7, #4]
 800d1d4:	4613      	mov	r3, r2
 800d1d6:	009b      	lsls	r3, r3, #2
 800d1d8:	4413      	add	r3, r2
 800d1da:	009b      	lsls	r3, r3, #2
 800d1dc:	440b      	add	r3, r1
 800d1de:	3318      	adds	r3, #24
 800d1e0:	681a      	ldr	r2, [r3, #0]
 800d1e2:	78fb      	ldrb	r3, [r7, #3]
 800d1e4:	f003 010f 	and.w	r1, r3, #15
 800d1e8:	68f8      	ldr	r0, [r7, #12]
 800d1ea:	460b      	mov	r3, r1
 800d1ec:	00db      	lsls	r3, r3, #3
 800d1ee:	440b      	add	r3, r1
 800d1f0:	009b      	lsls	r3, r3, #2
 800d1f2:	4403      	add	r3, r0
 800d1f4:	331c      	adds	r3, #28
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	fbb2 f1f3 	udiv	r1, r2, r3
 800d1fc:	fb01 f303 	mul.w	r3, r1, r3
 800d200:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800d202:	2b00      	cmp	r3, #0
 800d204:	d112      	bne.n	800d22c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800d206:	78fb      	ldrb	r3, [r7, #3]
 800d208:	f003 020f 	and.w	r2, r3, #15
 800d20c:	6879      	ldr	r1, [r7, #4]
 800d20e:	4613      	mov	r3, r2
 800d210:	009b      	lsls	r3, r3, #2
 800d212:	4413      	add	r3, r2
 800d214:	009b      	lsls	r3, r3, #2
 800d216:	440b      	add	r3, r1
 800d218:	3318      	adds	r3, #24
 800d21a:	2200      	movs	r2, #0
 800d21c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800d21e:	78f9      	ldrb	r1, [r7, #3]
 800d220:	2300      	movs	r3, #0
 800d222:	2200      	movs	r2, #0
 800d224:	6878      	ldr	r0, [r7, #4]
 800d226:	f003 ff88 	bl	801113a <USBD_LL_Transmit>
 800d22a:	e01f      	b.n	800d26c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800d22c:	68bb      	ldr	r3, [r7, #8]
 800d22e:	2200      	movs	r2, #0
 800d230:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d23a:	687a      	ldr	r2, [r7, #4]
 800d23c:	33b0      	adds	r3, #176	; 0xb0
 800d23e:	009b      	lsls	r3, r3, #2
 800d240:	4413      	add	r3, r2
 800d242:	685b      	ldr	r3, [r3, #4]
 800d244:	691b      	ldr	r3, [r3, #16]
 800d246:	2b00      	cmp	r3, #0
 800d248:	d010      	beq.n	800d26c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d250:	687a      	ldr	r2, [r7, #4]
 800d252:	33b0      	adds	r3, #176	; 0xb0
 800d254:	009b      	lsls	r3, r3, #2
 800d256:	4413      	add	r3, r2
 800d258:	685b      	ldr	r3, [r3, #4]
 800d25a:	691b      	ldr	r3, [r3, #16]
 800d25c:	68ba      	ldr	r2, [r7, #8]
 800d25e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800d262:	68ba      	ldr	r2, [r7, #8]
 800d264:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800d268:	78fa      	ldrb	r2, [r7, #3]
 800d26a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800d26c:	2300      	movs	r3, #0
}
 800d26e:	4618      	mov	r0, r3
 800d270:	3710      	adds	r7, #16
 800d272:	46bd      	mov	sp, r7
 800d274:	bd80      	pop	{r7, pc}

0800d276 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d276:	b580      	push	{r7, lr}
 800d278:	b084      	sub	sp, #16
 800d27a:	af00      	add	r7, sp, #0
 800d27c:	6078      	str	r0, [r7, #4]
 800d27e:	460b      	mov	r3, r1
 800d280:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	32b0      	adds	r2, #176	; 0xb0
 800d28c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d290:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	32b0      	adds	r2, #176	; 0xb0
 800d29c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d101      	bne.n	800d2a8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800d2a4:	2303      	movs	r3, #3
 800d2a6:	e01a      	b.n	800d2de <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800d2a8:	78fb      	ldrb	r3, [r7, #3]
 800d2aa:	4619      	mov	r1, r3
 800d2ac:	6878      	ldr	r0, [r7, #4]
 800d2ae:	f003 ff86 	bl	80111be <USBD_LL_GetRxDataSize>
 800d2b2:	4602      	mov	r2, r0
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d2c0:	687a      	ldr	r2, [r7, #4]
 800d2c2:	33b0      	adds	r3, #176	; 0xb0
 800d2c4:	009b      	lsls	r3, r3, #2
 800d2c6:	4413      	add	r3, r2
 800d2c8:	685b      	ldr	r3, [r3, #4]
 800d2ca:	68db      	ldr	r3, [r3, #12]
 800d2cc:	68fa      	ldr	r2, [r7, #12]
 800d2ce:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800d2d2:	68fa      	ldr	r2, [r7, #12]
 800d2d4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800d2d8:	4611      	mov	r1, r2
 800d2da:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800d2dc:	2300      	movs	r3, #0
}
 800d2de:	4618      	mov	r0, r3
 800d2e0:	3710      	adds	r7, #16
 800d2e2:	46bd      	mov	sp, r7
 800d2e4:	bd80      	pop	{r7, pc}

0800d2e6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800d2e6:	b580      	push	{r7, lr}
 800d2e8:	b084      	sub	sp, #16
 800d2ea:	af00      	add	r7, sp, #0
 800d2ec:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	32b0      	adds	r2, #176	; 0xb0
 800d2f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d2fc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	2b00      	cmp	r3, #0
 800d302:	d101      	bne.n	800d308 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800d304:	2303      	movs	r3, #3
 800d306:	e025      	b.n	800d354 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d30e:	687a      	ldr	r2, [r7, #4]
 800d310:	33b0      	adds	r3, #176	; 0xb0
 800d312:	009b      	lsls	r3, r3, #2
 800d314:	4413      	add	r3, r2
 800d316:	685b      	ldr	r3, [r3, #4]
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d01a      	beq.n	800d352 <USBD_CDC_EP0_RxReady+0x6c>
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800d322:	2bff      	cmp	r3, #255	; 0xff
 800d324:	d015      	beq.n	800d352 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d32c:	687a      	ldr	r2, [r7, #4]
 800d32e:	33b0      	adds	r3, #176	; 0xb0
 800d330:	009b      	lsls	r3, r3, #2
 800d332:	4413      	add	r3, r2
 800d334:	685b      	ldr	r3, [r3, #4]
 800d336:	689b      	ldr	r3, [r3, #8]
 800d338:	68fa      	ldr	r2, [r7, #12]
 800d33a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800d33e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800d340:	68fa      	ldr	r2, [r7, #12]
 800d342:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800d346:	b292      	uxth	r2, r2
 800d348:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800d34a:	68fb      	ldr	r3, [r7, #12]
 800d34c:	22ff      	movs	r2, #255	; 0xff
 800d34e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800d352:	2300      	movs	r3, #0
}
 800d354:	4618      	mov	r0, r3
 800d356:	3710      	adds	r7, #16
 800d358:	46bd      	mov	sp, r7
 800d35a:	bd80      	pop	{r7, pc}

0800d35c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800d35c:	b580      	push	{r7, lr}
 800d35e:	b086      	sub	sp, #24
 800d360:	af00      	add	r7, sp, #0
 800d362:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d364:	2182      	movs	r1, #130	; 0x82
 800d366:	4818      	ldr	r0, [pc, #96]	; (800d3c8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d368:	f000 fd4f 	bl	800de0a <USBD_GetEpDesc>
 800d36c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d36e:	2101      	movs	r1, #1
 800d370:	4815      	ldr	r0, [pc, #84]	; (800d3c8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d372:	f000 fd4a 	bl	800de0a <USBD_GetEpDesc>
 800d376:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d378:	2181      	movs	r1, #129	; 0x81
 800d37a:	4813      	ldr	r0, [pc, #76]	; (800d3c8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d37c:	f000 fd45 	bl	800de0a <USBD_GetEpDesc>
 800d380:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d382:	697b      	ldr	r3, [r7, #20]
 800d384:	2b00      	cmp	r3, #0
 800d386:	d002      	beq.n	800d38e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800d388:	697b      	ldr	r3, [r7, #20]
 800d38a:	2210      	movs	r2, #16
 800d38c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d38e:	693b      	ldr	r3, [r7, #16]
 800d390:	2b00      	cmp	r3, #0
 800d392:	d006      	beq.n	800d3a2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d394:	693b      	ldr	r3, [r7, #16]
 800d396:	2200      	movs	r2, #0
 800d398:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d39c:	711a      	strb	r2, [r3, #4]
 800d39e:	2200      	movs	r2, #0
 800d3a0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d006      	beq.n	800d3b6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	2200      	movs	r2, #0
 800d3ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d3b0:	711a      	strb	r2, [r3, #4]
 800d3b2:	2200      	movs	r2, #0
 800d3b4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	2243      	movs	r2, #67	; 0x43
 800d3ba:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d3bc:	4b02      	ldr	r3, [pc, #8]	; (800d3c8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800d3be:	4618      	mov	r0, r3
 800d3c0:	3718      	adds	r7, #24
 800d3c2:	46bd      	mov	sp, r7
 800d3c4:	bd80      	pop	{r7, pc}
 800d3c6:	bf00      	nop
 800d3c8:	20000054 	.word	0x20000054

0800d3cc <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800d3cc:	b580      	push	{r7, lr}
 800d3ce:	b086      	sub	sp, #24
 800d3d0:	af00      	add	r7, sp, #0
 800d3d2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d3d4:	2182      	movs	r1, #130	; 0x82
 800d3d6:	4818      	ldr	r0, [pc, #96]	; (800d438 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d3d8:	f000 fd17 	bl	800de0a <USBD_GetEpDesc>
 800d3dc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d3de:	2101      	movs	r1, #1
 800d3e0:	4815      	ldr	r0, [pc, #84]	; (800d438 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d3e2:	f000 fd12 	bl	800de0a <USBD_GetEpDesc>
 800d3e6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d3e8:	2181      	movs	r1, #129	; 0x81
 800d3ea:	4813      	ldr	r0, [pc, #76]	; (800d438 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d3ec:	f000 fd0d 	bl	800de0a <USBD_GetEpDesc>
 800d3f0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d3f2:	697b      	ldr	r3, [r7, #20]
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d002      	beq.n	800d3fe <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800d3f8:	697b      	ldr	r3, [r7, #20]
 800d3fa:	2210      	movs	r2, #16
 800d3fc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d3fe:	693b      	ldr	r3, [r7, #16]
 800d400:	2b00      	cmp	r3, #0
 800d402:	d006      	beq.n	800d412 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800d404:	693b      	ldr	r3, [r7, #16]
 800d406:	2200      	movs	r2, #0
 800d408:	711a      	strb	r2, [r3, #4]
 800d40a:	2200      	movs	r2, #0
 800d40c:	f042 0202 	orr.w	r2, r2, #2
 800d410:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d412:	68fb      	ldr	r3, [r7, #12]
 800d414:	2b00      	cmp	r3, #0
 800d416:	d006      	beq.n	800d426 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800d418:	68fb      	ldr	r3, [r7, #12]
 800d41a:	2200      	movs	r2, #0
 800d41c:	711a      	strb	r2, [r3, #4]
 800d41e:	2200      	movs	r2, #0
 800d420:	f042 0202 	orr.w	r2, r2, #2
 800d424:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	2243      	movs	r2, #67	; 0x43
 800d42a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d42c:	4b02      	ldr	r3, [pc, #8]	; (800d438 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800d42e:	4618      	mov	r0, r3
 800d430:	3718      	adds	r7, #24
 800d432:	46bd      	mov	sp, r7
 800d434:	bd80      	pop	{r7, pc}
 800d436:	bf00      	nop
 800d438:	20000054 	.word	0x20000054

0800d43c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800d43c:	b580      	push	{r7, lr}
 800d43e:	b086      	sub	sp, #24
 800d440:	af00      	add	r7, sp, #0
 800d442:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d444:	2182      	movs	r1, #130	; 0x82
 800d446:	4818      	ldr	r0, [pc, #96]	; (800d4a8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d448:	f000 fcdf 	bl	800de0a <USBD_GetEpDesc>
 800d44c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d44e:	2101      	movs	r1, #1
 800d450:	4815      	ldr	r0, [pc, #84]	; (800d4a8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d452:	f000 fcda 	bl	800de0a <USBD_GetEpDesc>
 800d456:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d458:	2181      	movs	r1, #129	; 0x81
 800d45a:	4813      	ldr	r0, [pc, #76]	; (800d4a8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d45c:	f000 fcd5 	bl	800de0a <USBD_GetEpDesc>
 800d460:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d462:	697b      	ldr	r3, [r7, #20]
 800d464:	2b00      	cmp	r3, #0
 800d466:	d002      	beq.n	800d46e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800d468:	697b      	ldr	r3, [r7, #20]
 800d46a:	2210      	movs	r2, #16
 800d46c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d46e:	693b      	ldr	r3, [r7, #16]
 800d470:	2b00      	cmp	r3, #0
 800d472:	d006      	beq.n	800d482 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d474:	693b      	ldr	r3, [r7, #16]
 800d476:	2200      	movs	r2, #0
 800d478:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d47c:	711a      	strb	r2, [r3, #4]
 800d47e:	2200      	movs	r2, #0
 800d480:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d482:	68fb      	ldr	r3, [r7, #12]
 800d484:	2b00      	cmp	r3, #0
 800d486:	d006      	beq.n	800d496 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d488:	68fb      	ldr	r3, [r7, #12]
 800d48a:	2200      	movs	r2, #0
 800d48c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d490:	711a      	strb	r2, [r3, #4]
 800d492:	2200      	movs	r2, #0
 800d494:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	2243      	movs	r2, #67	; 0x43
 800d49a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d49c:	4b02      	ldr	r3, [pc, #8]	; (800d4a8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800d49e:	4618      	mov	r0, r3
 800d4a0:	3718      	adds	r7, #24
 800d4a2:	46bd      	mov	sp, r7
 800d4a4:	bd80      	pop	{r7, pc}
 800d4a6:	bf00      	nop
 800d4a8:	20000054 	.word	0x20000054

0800d4ac <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800d4ac:	b480      	push	{r7}
 800d4ae:	b083      	sub	sp, #12
 800d4b0:	af00      	add	r7, sp, #0
 800d4b2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	220a      	movs	r2, #10
 800d4b8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800d4ba:	4b03      	ldr	r3, [pc, #12]	; (800d4c8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800d4bc:	4618      	mov	r0, r3
 800d4be:	370c      	adds	r7, #12
 800d4c0:	46bd      	mov	sp, r7
 800d4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4c6:	4770      	bx	lr
 800d4c8:	20000010 	.word	0x20000010

0800d4cc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800d4cc:	b480      	push	{r7}
 800d4ce:	b083      	sub	sp, #12
 800d4d0:	af00      	add	r7, sp, #0
 800d4d2:	6078      	str	r0, [r7, #4]
 800d4d4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800d4d6:	683b      	ldr	r3, [r7, #0]
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d101      	bne.n	800d4e0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800d4dc:	2303      	movs	r3, #3
 800d4de:	e009      	b.n	800d4f4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d4e6:	687a      	ldr	r2, [r7, #4]
 800d4e8:	33b0      	adds	r3, #176	; 0xb0
 800d4ea:	009b      	lsls	r3, r3, #2
 800d4ec:	4413      	add	r3, r2
 800d4ee:	683a      	ldr	r2, [r7, #0]
 800d4f0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800d4f2:	2300      	movs	r3, #0
}
 800d4f4:	4618      	mov	r0, r3
 800d4f6:	370c      	adds	r7, #12
 800d4f8:	46bd      	mov	sp, r7
 800d4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4fe:	4770      	bx	lr

0800d500 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800d500:	b480      	push	{r7}
 800d502:	b087      	sub	sp, #28
 800d504:	af00      	add	r7, sp, #0
 800d506:	60f8      	str	r0, [r7, #12]
 800d508:	60b9      	str	r1, [r7, #8]
 800d50a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	32b0      	adds	r2, #176	; 0xb0
 800d516:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d51a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800d51c:	697b      	ldr	r3, [r7, #20]
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d101      	bne.n	800d526 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800d522:	2303      	movs	r3, #3
 800d524:	e008      	b.n	800d538 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800d526:	697b      	ldr	r3, [r7, #20]
 800d528:	68ba      	ldr	r2, [r7, #8]
 800d52a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800d52e:	697b      	ldr	r3, [r7, #20]
 800d530:	687a      	ldr	r2, [r7, #4]
 800d532:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800d536:	2300      	movs	r3, #0
}
 800d538:	4618      	mov	r0, r3
 800d53a:	371c      	adds	r7, #28
 800d53c:	46bd      	mov	sp, r7
 800d53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d542:	4770      	bx	lr

0800d544 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800d544:	b480      	push	{r7}
 800d546:	b085      	sub	sp, #20
 800d548:	af00      	add	r7, sp, #0
 800d54a:	6078      	str	r0, [r7, #4]
 800d54c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	32b0      	adds	r2, #176	; 0xb0
 800d558:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d55c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	2b00      	cmp	r3, #0
 800d562:	d101      	bne.n	800d568 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800d564:	2303      	movs	r3, #3
 800d566:	e004      	b.n	800d572 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800d568:	68fb      	ldr	r3, [r7, #12]
 800d56a:	683a      	ldr	r2, [r7, #0]
 800d56c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800d570:	2300      	movs	r3, #0
}
 800d572:	4618      	mov	r0, r3
 800d574:	3714      	adds	r7, #20
 800d576:	46bd      	mov	sp, r7
 800d578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d57c:	4770      	bx	lr
	...

0800d580 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800d580:	b580      	push	{r7, lr}
 800d582:	b084      	sub	sp, #16
 800d584:	af00      	add	r7, sp, #0
 800d586:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	32b0      	adds	r2, #176	; 0xb0
 800d592:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d596:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800d598:	2301      	movs	r3, #1
 800d59a:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800d59c:	68bb      	ldr	r3, [r7, #8]
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d101      	bne.n	800d5a6 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800d5a2:	2303      	movs	r3, #3
 800d5a4:	e025      	b.n	800d5f2 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800d5a6:	68bb      	ldr	r3, [r7, #8]
 800d5a8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d11f      	bne.n	800d5f0 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800d5b0:	68bb      	ldr	r3, [r7, #8]
 800d5b2:	2201      	movs	r2, #1
 800d5b4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800d5b8:	4b10      	ldr	r3, [pc, #64]	; (800d5fc <USBD_CDC_TransmitPacket+0x7c>)
 800d5ba:	781b      	ldrb	r3, [r3, #0]
 800d5bc:	f003 020f 	and.w	r2, r3, #15
 800d5c0:	68bb      	ldr	r3, [r7, #8]
 800d5c2:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800d5c6:	6878      	ldr	r0, [r7, #4]
 800d5c8:	4613      	mov	r3, r2
 800d5ca:	009b      	lsls	r3, r3, #2
 800d5cc:	4413      	add	r3, r2
 800d5ce:	009b      	lsls	r3, r3, #2
 800d5d0:	4403      	add	r3, r0
 800d5d2:	3318      	adds	r3, #24
 800d5d4:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800d5d6:	4b09      	ldr	r3, [pc, #36]	; (800d5fc <USBD_CDC_TransmitPacket+0x7c>)
 800d5d8:	7819      	ldrb	r1, [r3, #0]
 800d5da:	68bb      	ldr	r3, [r7, #8]
 800d5dc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800d5e0:	68bb      	ldr	r3, [r7, #8]
 800d5e2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800d5e6:	6878      	ldr	r0, [r7, #4]
 800d5e8:	f003 fda7 	bl	801113a <USBD_LL_Transmit>

    ret = USBD_OK;
 800d5ec:	2300      	movs	r3, #0
 800d5ee:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800d5f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d5f2:	4618      	mov	r0, r3
 800d5f4:	3710      	adds	r7, #16
 800d5f6:	46bd      	mov	sp, r7
 800d5f8:	bd80      	pop	{r7, pc}
 800d5fa:	bf00      	nop
 800d5fc:	20000097 	.word	0x20000097

0800d600 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800d600:	b580      	push	{r7, lr}
 800d602:	b084      	sub	sp, #16
 800d604:	af00      	add	r7, sp, #0
 800d606:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	32b0      	adds	r2, #176	; 0xb0
 800d612:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d616:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	32b0      	adds	r2, #176	; 0xb0
 800d622:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d626:	2b00      	cmp	r3, #0
 800d628:	d101      	bne.n	800d62e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800d62a:	2303      	movs	r3, #3
 800d62c:	e018      	b.n	800d660 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	7c1b      	ldrb	r3, [r3, #16]
 800d632:	2b00      	cmp	r3, #0
 800d634:	d10a      	bne.n	800d64c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d636:	4b0c      	ldr	r3, [pc, #48]	; (800d668 <USBD_CDC_ReceivePacket+0x68>)
 800d638:	7819      	ldrb	r1, [r3, #0]
 800d63a:	68fb      	ldr	r3, [r7, #12]
 800d63c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d640:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d644:	6878      	ldr	r0, [r7, #4]
 800d646:	f003 fd99 	bl	801117c <USBD_LL_PrepareReceive>
 800d64a:	e008      	b.n	800d65e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d64c:	4b06      	ldr	r3, [pc, #24]	; (800d668 <USBD_CDC_ReceivePacket+0x68>)
 800d64e:	7819      	ldrb	r1, [r3, #0]
 800d650:	68fb      	ldr	r3, [r7, #12]
 800d652:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d656:	2340      	movs	r3, #64	; 0x40
 800d658:	6878      	ldr	r0, [r7, #4]
 800d65a:	f003 fd8f 	bl	801117c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d65e:	2300      	movs	r3, #0
}
 800d660:	4618      	mov	r0, r3
 800d662:	3710      	adds	r7, #16
 800d664:	46bd      	mov	sp, r7
 800d666:	bd80      	pop	{r7, pc}
 800d668:	20000098 	.word	0x20000098

0800d66c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800d66c:	b580      	push	{r7, lr}
 800d66e:	b086      	sub	sp, #24
 800d670:	af00      	add	r7, sp, #0
 800d672:	60f8      	str	r0, [r7, #12]
 800d674:	60b9      	str	r1, [r7, #8]
 800d676:	4613      	mov	r3, r2
 800d678:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800d67a:	68fb      	ldr	r3, [r7, #12]
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d101      	bne.n	800d684 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800d680:	2303      	movs	r3, #3
 800d682:	e01f      	b.n	800d6c4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	2200      	movs	r2, #0
 800d688:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800d68c:	68fb      	ldr	r3, [r7, #12]
 800d68e:	2200      	movs	r2, #0
 800d690:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	2200      	movs	r2, #0
 800d698:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800d69c:	68bb      	ldr	r3, [r7, #8]
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d003      	beq.n	800d6aa <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	68ba      	ldr	r2, [r7, #8]
 800d6a6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d6aa:	68fb      	ldr	r3, [r7, #12]
 800d6ac:	2201      	movs	r2, #1
 800d6ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	79fa      	ldrb	r2, [r7, #7]
 800d6b6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800d6b8:	68f8      	ldr	r0, [r7, #12]
 800d6ba:	f003 fc09 	bl	8010ed0 <USBD_LL_Init>
 800d6be:	4603      	mov	r3, r0
 800d6c0:	75fb      	strb	r3, [r7, #23]

  return ret;
 800d6c2:	7dfb      	ldrb	r3, [r7, #23]
}
 800d6c4:	4618      	mov	r0, r3
 800d6c6:	3718      	adds	r7, #24
 800d6c8:	46bd      	mov	sp, r7
 800d6ca:	bd80      	pop	{r7, pc}

0800d6cc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800d6cc:	b580      	push	{r7, lr}
 800d6ce:	b084      	sub	sp, #16
 800d6d0:	af00      	add	r7, sp, #0
 800d6d2:	6078      	str	r0, [r7, #4]
 800d6d4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d6d6:	2300      	movs	r3, #0
 800d6d8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800d6da:	683b      	ldr	r3, [r7, #0]
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d101      	bne.n	800d6e4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800d6e0:	2303      	movs	r3, #3
 800d6e2:	e025      	b.n	800d730 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	683a      	ldr	r2, [r7, #0]
 800d6e8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	32ae      	adds	r2, #174	; 0xae
 800d6f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d6fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d00f      	beq.n	800d720 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	32ae      	adds	r2, #174	; 0xae
 800d70a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d70e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d710:	f107 020e 	add.w	r2, r7, #14
 800d714:	4610      	mov	r0, r2
 800d716:	4798      	blx	r3
 800d718:	4602      	mov	r2, r0
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800d726:	1c5a      	adds	r2, r3, #1
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800d72e:	2300      	movs	r3, #0
}
 800d730:	4618      	mov	r0, r3
 800d732:	3710      	adds	r7, #16
 800d734:	46bd      	mov	sp, r7
 800d736:	bd80      	pop	{r7, pc}

0800d738 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800d738:	b580      	push	{r7, lr}
 800d73a:	b082      	sub	sp, #8
 800d73c:	af00      	add	r7, sp, #0
 800d73e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800d740:	6878      	ldr	r0, [r7, #4]
 800d742:	f003 fc11 	bl	8010f68 <USBD_LL_Start>
 800d746:	4603      	mov	r3, r0
}
 800d748:	4618      	mov	r0, r3
 800d74a:	3708      	adds	r7, #8
 800d74c:	46bd      	mov	sp, r7
 800d74e:	bd80      	pop	{r7, pc}

0800d750 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800d750:	b480      	push	{r7}
 800d752:	b083      	sub	sp, #12
 800d754:	af00      	add	r7, sp, #0
 800d756:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d758:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800d75a:	4618      	mov	r0, r3
 800d75c:	370c      	adds	r7, #12
 800d75e:	46bd      	mov	sp, r7
 800d760:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d764:	4770      	bx	lr

0800d766 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d766:	b580      	push	{r7, lr}
 800d768:	b084      	sub	sp, #16
 800d76a:	af00      	add	r7, sp, #0
 800d76c:	6078      	str	r0, [r7, #4]
 800d76e:	460b      	mov	r3, r1
 800d770:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800d772:	2300      	movs	r3, #0
 800d774:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d009      	beq.n	800d794 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d786:	681b      	ldr	r3, [r3, #0]
 800d788:	78fa      	ldrb	r2, [r7, #3]
 800d78a:	4611      	mov	r1, r2
 800d78c:	6878      	ldr	r0, [r7, #4]
 800d78e:	4798      	blx	r3
 800d790:	4603      	mov	r3, r0
 800d792:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d794:	7bfb      	ldrb	r3, [r7, #15]
}
 800d796:	4618      	mov	r0, r3
 800d798:	3710      	adds	r7, #16
 800d79a:	46bd      	mov	sp, r7
 800d79c:	bd80      	pop	{r7, pc}

0800d79e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d79e:	b580      	push	{r7, lr}
 800d7a0:	b084      	sub	sp, #16
 800d7a2:	af00      	add	r7, sp, #0
 800d7a4:	6078      	str	r0, [r7, #4]
 800d7a6:	460b      	mov	r3, r1
 800d7a8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800d7aa:	2300      	movs	r3, #0
 800d7ac:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d7b4:	685b      	ldr	r3, [r3, #4]
 800d7b6:	78fa      	ldrb	r2, [r7, #3]
 800d7b8:	4611      	mov	r1, r2
 800d7ba:	6878      	ldr	r0, [r7, #4]
 800d7bc:	4798      	blx	r3
 800d7be:	4603      	mov	r3, r0
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d001      	beq.n	800d7c8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800d7c4:	2303      	movs	r3, #3
 800d7c6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d7c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7ca:	4618      	mov	r0, r3
 800d7cc:	3710      	adds	r7, #16
 800d7ce:	46bd      	mov	sp, r7
 800d7d0:	bd80      	pop	{r7, pc}

0800d7d2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800d7d2:	b580      	push	{r7, lr}
 800d7d4:	b084      	sub	sp, #16
 800d7d6:	af00      	add	r7, sp, #0
 800d7d8:	6078      	str	r0, [r7, #4]
 800d7da:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d7e2:	6839      	ldr	r1, [r7, #0]
 800d7e4:	4618      	mov	r0, r3
 800d7e6:	f001 f90e 	bl	800ea06 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	2201      	movs	r2, #1
 800d7ee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800d7f8:	461a      	mov	r2, r3
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d806:	f003 031f 	and.w	r3, r3, #31
 800d80a:	2b02      	cmp	r3, #2
 800d80c:	d01a      	beq.n	800d844 <USBD_LL_SetupStage+0x72>
 800d80e:	2b02      	cmp	r3, #2
 800d810:	d822      	bhi.n	800d858 <USBD_LL_SetupStage+0x86>
 800d812:	2b00      	cmp	r3, #0
 800d814:	d002      	beq.n	800d81c <USBD_LL_SetupStage+0x4a>
 800d816:	2b01      	cmp	r3, #1
 800d818:	d00a      	beq.n	800d830 <USBD_LL_SetupStage+0x5e>
 800d81a:	e01d      	b.n	800d858 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d822:	4619      	mov	r1, r3
 800d824:	6878      	ldr	r0, [r7, #4]
 800d826:	f000 fb65 	bl	800def4 <USBD_StdDevReq>
 800d82a:	4603      	mov	r3, r0
 800d82c:	73fb      	strb	r3, [r7, #15]
      break;
 800d82e:	e020      	b.n	800d872 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d836:	4619      	mov	r1, r3
 800d838:	6878      	ldr	r0, [r7, #4]
 800d83a:	f000 fbcd 	bl	800dfd8 <USBD_StdItfReq>
 800d83e:	4603      	mov	r3, r0
 800d840:	73fb      	strb	r3, [r7, #15]
      break;
 800d842:	e016      	b.n	800d872 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d84a:	4619      	mov	r1, r3
 800d84c:	6878      	ldr	r0, [r7, #4]
 800d84e:	f000 fc2f 	bl	800e0b0 <USBD_StdEPReq>
 800d852:	4603      	mov	r3, r0
 800d854:	73fb      	strb	r3, [r7, #15]
      break;
 800d856:	e00c      	b.n	800d872 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d85e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d862:	b2db      	uxtb	r3, r3
 800d864:	4619      	mov	r1, r3
 800d866:	6878      	ldr	r0, [r7, #4]
 800d868:	f003 fbde 	bl	8011028 <USBD_LL_StallEP>
 800d86c:	4603      	mov	r3, r0
 800d86e:	73fb      	strb	r3, [r7, #15]
      break;
 800d870:	bf00      	nop
  }

  return ret;
 800d872:	7bfb      	ldrb	r3, [r7, #15]
}
 800d874:	4618      	mov	r0, r3
 800d876:	3710      	adds	r7, #16
 800d878:	46bd      	mov	sp, r7
 800d87a:	bd80      	pop	{r7, pc}

0800d87c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800d87c:	b580      	push	{r7, lr}
 800d87e:	b086      	sub	sp, #24
 800d880:	af00      	add	r7, sp, #0
 800d882:	60f8      	str	r0, [r7, #12]
 800d884:	460b      	mov	r3, r1
 800d886:	607a      	str	r2, [r7, #4]
 800d888:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800d88a:	2300      	movs	r3, #0
 800d88c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800d88e:	7afb      	ldrb	r3, [r7, #11]
 800d890:	2b00      	cmp	r3, #0
 800d892:	d16e      	bne.n	800d972 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800d894:	68fb      	ldr	r3, [r7, #12]
 800d896:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800d89a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d8a2:	2b03      	cmp	r3, #3
 800d8a4:	f040 8098 	bne.w	800d9d8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800d8a8:	693b      	ldr	r3, [r7, #16]
 800d8aa:	689a      	ldr	r2, [r3, #8]
 800d8ac:	693b      	ldr	r3, [r7, #16]
 800d8ae:	68db      	ldr	r3, [r3, #12]
 800d8b0:	429a      	cmp	r2, r3
 800d8b2:	d913      	bls.n	800d8dc <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800d8b4:	693b      	ldr	r3, [r7, #16]
 800d8b6:	689a      	ldr	r2, [r3, #8]
 800d8b8:	693b      	ldr	r3, [r7, #16]
 800d8ba:	68db      	ldr	r3, [r3, #12]
 800d8bc:	1ad2      	subs	r2, r2, r3
 800d8be:	693b      	ldr	r3, [r7, #16]
 800d8c0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800d8c2:	693b      	ldr	r3, [r7, #16]
 800d8c4:	68da      	ldr	r2, [r3, #12]
 800d8c6:	693b      	ldr	r3, [r7, #16]
 800d8c8:	689b      	ldr	r3, [r3, #8]
 800d8ca:	4293      	cmp	r3, r2
 800d8cc:	bf28      	it	cs
 800d8ce:	4613      	movcs	r3, r2
 800d8d0:	461a      	mov	r2, r3
 800d8d2:	6879      	ldr	r1, [r7, #4]
 800d8d4:	68f8      	ldr	r0, [r7, #12]
 800d8d6:	f001 f98a 	bl	800ebee <USBD_CtlContinueRx>
 800d8da:	e07d      	b.n	800d9d8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800d8dc:	68fb      	ldr	r3, [r7, #12]
 800d8de:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d8e2:	f003 031f 	and.w	r3, r3, #31
 800d8e6:	2b02      	cmp	r3, #2
 800d8e8:	d014      	beq.n	800d914 <USBD_LL_DataOutStage+0x98>
 800d8ea:	2b02      	cmp	r3, #2
 800d8ec:	d81d      	bhi.n	800d92a <USBD_LL_DataOutStage+0xae>
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d002      	beq.n	800d8f8 <USBD_LL_DataOutStage+0x7c>
 800d8f2:	2b01      	cmp	r3, #1
 800d8f4:	d003      	beq.n	800d8fe <USBD_LL_DataOutStage+0x82>
 800d8f6:	e018      	b.n	800d92a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800d8f8:	2300      	movs	r3, #0
 800d8fa:	75bb      	strb	r3, [r7, #22]
            break;
 800d8fc:	e018      	b.n	800d930 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800d8fe:	68fb      	ldr	r3, [r7, #12]
 800d900:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800d904:	b2db      	uxtb	r3, r3
 800d906:	4619      	mov	r1, r3
 800d908:	68f8      	ldr	r0, [r7, #12]
 800d90a:	f000 fa64 	bl	800ddd6 <USBD_CoreFindIF>
 800d90e:	4603      	mov	r3, r0
 800d910:	75bb      	strb	r3, [r7, #22]
            break;
 800d912:	e00d      	b.n	800d930 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800d914:	68fb      	ldr	r3, [r7, #12]
 800d916:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800d91a:	b2db      	uxtb	r3, r3
 800d91c:	4619      	mov	r1, r3
 800d91e:	68f8      	ldr	r0, [r7, #12]
 800d920:	f000 fa66 	bl	800ddf0 <USBD_CoreFindEP>
 800d924:	4603      	mov	r3, r0
 800d926:	75bb      	strb	r3, [r7, #22]
            break;
 800d928:	e002      	b.n	800d930 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800d92a:	2300      	movs	r3, #0
 800d92c:	75bb      	strb	r3, [r7, #22]
            break;
 800d92e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800d930:	7dbb      	ldrb	r3, [r7, #22]
 800d932:	2b00      	cmp	r3, #0
 800d934:	d119      	bne.n	800d96a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d936:	68fb      	ldr	r3, [r7, #12]
 800d938:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d93c:	b2db      	uxtb	r3, r3
 800d93e:	2b03      	cmp	r3, #3
 800d940:	d113      	bne.n	800d96a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800d942:	7dba      	ldrb	r2, [r7, #22]
 800d944:	68fb      	ldr	r3, [r7, #12]
 800d946:	32ae      	adds	r2, #174	; 0xae
 800d948:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d94c:	691b      	ldr	r3, [r3, #16]
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d00b      	beq.n	800d96a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800d952:	7dba      	ldrb	r2, [r7, #22]
 800d954:	68fb      	ldr	r3, [r7, #12]
 800d956:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800d95a:	7dba      	ldrb	r2, [r7, #22]
 800d95c:	68fb      	ldr	r3, [r7, #12]
 800d95e:	32ae      	adds	r2, #174	; 0xae
 800d960:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d964:	691b      	ldr	r3, [r3, #16]
 800d966:	68f8      	ldr	r0, [r7, #12]
 800d968:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800d96a:	68f8      	ldr	r0, [r7, #12]
 800d96c:	f001 f950 	bl	800ec10 <USBD_CtlSendStatus>
 800d970:	e032      	b.n	800d9d8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800d972:	7afb      	ldrb	r3, [r7, #11]
 800d974:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d978:	b2db      	uxtb	r3, r3
 800d97a:	4619      	mov	r1, r3
 800d97c:	68f8      	ldr	r0, [r7, #12]
 800d97e:	f000 fa37 	bl	800ddf0 <USBD_CoreFindEP>
 800d982:	4603      	mov	r3, r0
 800d984:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d986:	7dbb      	ldrb	r3, [r7, #22]
 800d988:	2bff      	cmp	r3, #255	; 0xff
 800d98a:	d025      	beq.n	800d9d8 <USBD_LL_DataOutStage+0x15c>
 800d98c:	7dbb      	ldrb	r3, [r7, #22]
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d122      	bne.n	800d9d8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d992:	68fb      	ldr	r3, [r7, #12]
 800d994:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d998:	b2db      	uxtb	r3, r3
 800d99a:	2b03      	cmp	r3, #3
 800d99c:	d117      	bne.n	800d9ce <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800d99e:	7dba      	ldrb	r2, [r7, #22]
 800d9a0:	68fb      	ldr	r3, [r7, #12]
 800d9a2:	32ae      	adds	r2, #174	; 0xae
 800d9a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d9a8:	699b      	ldr	r3, [r3, #24]
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	d00f      	beq.n	800d9ce <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800d9ae:	7dba      	ldrb	r2, [r7, #22]
 800d9b0:	68fb      	ldr	r3, [r7, #12]
 800d9b2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800d9b6:	7dba      	ldrb	r2, [r7, #22]
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	32ae      	adds	r2, #174	; 0xae
 800d9bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d9c0:	699b      	ldr	r3, [r3, #24]
 800d9c2:	7afa      	ldrb	r2, [r7, #11]
 800d9c4:	4611      	mov	r1, r2
 800d9c6:	68f8      	ldr	r0, [r7, #12]
 800d9c8:	4798      	blx	r3
 800d9ca:	4603      	mov	r3, r0
 800d9cc:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800d9ce:	7dfb      	ldrb	r3, [r7, #23]
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d001      	beq.n	800d9d8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800d9d4:	7dfb      	ldrb	r3, [r7, #23]
 800d9d6:	e000      	b.n	800d9da <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800d9d8:	2300      	movs	r3, #0
}
 800d9da:	4618      	mov	r0, r3
 800d9dc:	3718      	adds	r7, #24
 800d9de:	46bd      	mov	sp, r7
 800d9e0:	bd80      	pop	{r7, pc}

0800d9e2 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800d9e2:	b580      	push	{r7, lr}
 800d9e4:	b086      	sub	sp, #24
 800d9e6:	af00      	add	r7, sp, #0
 800d9e8:	60f8      	str	r0, [r7, #12]
 800d9ea:	460b      	mov	r3, r1
 800d9ec:	607a      	str	r2, [r7, #4]
 800d9ee:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800d9f0:	7afb      	ldrb	r3, [r7, #11]
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	d16f      	bne.n	800dad6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800d9f6:	68fb      	ldr	r3, [r7, #12]
 800d9f8:	3314      	adds	r3, #20
 800d9fa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800d9fc:	68fb      	ldr	r3, [r7, #12]
 800d9fe:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800da02:	2b02      	cmp	r3, #2
 800da04:	d15a      	bne.n	800dabc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800da06:	693b      	ldr	r3, [r7, #16]
 800da08:	689a      	ldr	r2, [r3, #8]
 800da0a:	693b      	ldr	r3, [r7, #16]
 800da0c:	68db      	ldr	r3, [r3, #12]
 800da0e:	429a      	cmp	r2, r3
 800da10:	d914      	bls.n	800da3c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800da12:	693b      	ldr	r3, [r7, #16]
 800da14:	689a      	ldr	r2, [r3, #8]
 800da16:	693b      	ldr	r3, [r7, #16]
 800da18:	68db      	ldr	r3, [r3, #12]
 800da1a:	1ad2      	subs	r2, r2, r3
 800da1c:	693b      	ldr	r3, [r7, #16]
 800da1e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800da20:	693b      	ldr	r3, [r7, #16]
 800da22:	689b      	ldr	r3, [r3, #8]
 800da24:	461a      	mov	r2, r3
 800da26:	6879      	ldr	r1, [r7, #4]
 800da28:	68f8      	ldr	r0, [r7, #12]
 800da2a:	f001 f8b2 	bl	800eb92 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800da2e:	2300      	movs	r3, #0
 800da30:	2200      	movs	r2, #0
 800da32:	2100      	movs	r1, #0
 800da34:	68f8      	ldr	r0, [r7, #12]
 800da36:	f003 fba1 	bl	801117c <USBD_LL_PrepareReceive>
 800da3a:	e03f      	b.n	800dabc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800da3c:	693b      	ldr	r3, [r7, #16]
 800da3e:	68da      	ldr	r2, [r3, #12]
 800da40:	693b      	ldr	r3, [r7, #16]
 800da42:	689b      	ldr	r3, [r3, #8]
 800da44:	429a      	cmp	r2, r3
 800da46:	d11c      	bne.n	800da82 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800da48:	693b      	ldr	r3, [r7, #16]
 800da4a:	685a      	ldr	r2, [r3, #4]
 800da4c:	693b      	ldr	r3, [r7, #16]
 800da4e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800da50:	429a      	cmp	r2, r3
 800da52:	d316      	bcc.n	800da82 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800da54:	693b      	ldr	r3, [r7, #16]
 800da56:	685a      	ldr	r2, [r3, #4]
 800da58:	68fb      	ldr	r3, [r7, #12]
 800da5a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800da5e:	429a      	cmp	r2, r3
 800da60:	d20f      	bcs.n	800da82 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800da62:	2200      	movs	r2, #0
 800da64:	2100      	movs	r1, #0
 800da66:	68f8      	ldr	r0, [r7, #12]
 800da68:	f001 f893 	bl	800eb92 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800da6c:	68fb      	ldr	r3, [r7, #12]
 800da6e:	2200      	movs	r2, #0
 800da70:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800da74:	2300      	movs	r3, #0
 800da76:	2200      	movs	r2, #0
 800da78:	2100      	movs	r1, #0
 800da7a:	68f8      	ldr	r0, [r7, #12]
 800da7c:	f003 fb7e 	bl	801117c <USBD_LL_PrepareReceive>
 800da80:	e01c      	b.n	800dabc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800da82:	68fb      	ldr	r3, [r7, #12]
 800da84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800da88:	b2db      	uxtb	r3, r3
 800da8a:	2b03      	cmp	r3, #3
 800da8c:	d10f      	bne.n	800daae <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800da8e:	68fb      	ldr	r3, [r7, #12]
 800da90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800da94:	68db      	ldr	r3, [r3, #12]
 800da96:	2b00      	cmp	r3, #0
 800da98:	d009      	beq.n	800daae <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	2200      	movs	r2, #0
 800da9e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800daa8:	68db      	ldr	r3, [r3, #12]
 800daaa:	68f8      	ldr	r0, [r7, #12]
 800daac:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800daae:	2180      	movs	r1, #128	; 0x80
 800dab0:	68f8      	ldr	r0, [r7, #12]
 800dab2:	f003 fab9 	bl	8011028 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800dab6:	68f8      	ldr	r0, [r7, #12]
 800dab8:	f001 f8bd 	bl	800ec36 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800dabc:	68fb      	ldr	r3, [r7, #12]
 800dabe:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d03a      	beq.n	800db3c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800dac6:	68f8      	ldr	r0, [r7, #12]
 800dac8:	f7ff fe42 	bl	800d750 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	2200      	movs	r2, #0
 800dad0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800dad4:	e032      	b.n	800db3c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800dad6:	7afb      	ldrb	r3, [r7, #11]
 800dad8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800dadc:	b2db      	uxtb	r3, r3
 800dade:	4619      	mov	r1, r3
 800dae0:	68f8      	ldr	r0, [r7, #12]
 800dae2:	f000 f985 	bl	800ddf0 <USBD_CoreFindEP>
 800dae6:	4603      	mov	r3, r0
 800dae8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800daea:	7dfb      	ldrb	r3, [r7, #23]
 800daec:	2bff      	cmp	r3, #255	; 0xff
 800daee:	d025      	beq.n	800db3c <USBD_LL_DataInStage+0x15a>
 800daf0:	7dfb      	ldrb	r3, [r7, #23]
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d122      	bne.n	800db3c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800daf6:	68fb      	ldr	r3, [r7, #12]
 800daf8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dafc:	b2db      	uxtb	r3, r3
 800dafe:	2b03      	cmp	r3, #3
 800db00:	d11c      	bne.n	800db3c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800db02:	7dfa      	ldrb	r2, [r7, #23]
 800db04:	68fb      	ldr	r3, [r7, #12]
 800db06:	32ae      	adds	r2, #174	; 0xae
 800db08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800db0c:	695b      	ldr	r3, [r3, #20]
 800db0e:	2b00      	cmp	r3, #0
 800db10:	d014      	beq.n	800db3c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800db12:	7dfa      	ldrb	r2, [r7, #23]
 800db14:	68fb      	ldr	r3, [r7, #12]
 800db16:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800db1a:	7dfa      	ldrb	r2, [r7, #23]
 800db1c:	68fb      	ldr	r3, [r7, #12]
 800db1e:	32ae      	adds	r2, #174	; 0xae
 800db20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800db24:	695b      	ldr	r3, [r3, #20]
 800db26:	7afa      	ldrb	r2, [r7, #11]
 800db28:	4611      	mov	r1, r2
 800db2a:	68f8      	ldr	r0, [r7, #12]
 800db2c:	4798      	blx	r3
 800db2e:	4603      	mov	r3, r0
 800db30:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800db32:	7dbb      	ldrb	r3, [r7, #22]
 800db34:	2b00      	cmp	r3, #0
 800db36:	d001      	beq.n	800db3c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800db38:	7dbb      	ldrb	r3, [r7, #22]
 800db3a:	e000      	b.n	800db3e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800db3c:	2300      	movs	r3, #0
}
 800db3e:	4618      	mov	r0, r3
 800db40:	3718      	adds	r7, #24
 800db42:	46bd      	mov	sp, r7
 800db44:	bd80      	pop	{r7, pc}

0800db46 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800db46:	b580      	push	{r7, lr}
 800db48:	b084      	sub	sp, #16
 800db4a:	af00      	add	r7, sp, #0
 800db4c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800db4e:	2300      	movs	r3, #0
 800db50:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	2201      	movs	r2, #1
 800db56:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	2200      	movs	r2, #0
 800db5e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	2200      	movs	r2, #0
 800db66:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	2200      	movs	r2, #0
 800db6c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	2200      	movs	r2, #0
 800db74:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d014      	beq.n	800dbac <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800db88:	685b      	ldr	r3, [r3, #4]
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d00e      	beq.n	800dbac <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800db94:	685b      	ldr	r3, [r3, #4]
 800db96:	687a      	ldr	r2, [r7, #4]
 800db98:	6852      	ldr	r2, [r2, #4]
 800db9a:	b2d2      	uxtb	r2, r2
 800db9c:	4611      	mov	r1, r2
 800db9e:	6878      	ldr	r0, [r7, #4]
 800dba0:	4798      	blx	r3
 800dba2:	4603      	mov	r3, r0
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d001      	beq.n	800dbac <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800dba8:	2303      	movs	r3, #3
 800dbaa:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800dbac:	2340      	movs	r3, #64	; 0x40
 800dbae:	2200      	movs	r2, #0
 800dbb0:	2100      	movs	r1, #0
 800dbb2:	6878      	ldr	r0, [r7, #4]
 800dbb4:	f003 f9f3 	bl	8010f9e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	2201      	movs	r2, #1
 800dbbc:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	2240      	movs	r2, #64	; 0x40
 800dbc4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800dbc8:	2340      	movs	r3, #64	; 0x40
 800dbca:	2200      	movs	r2, #0
 800dbcc:	2180      	movs	r1, #128	; 0x80
 800dbce:	6878      	ldr	r0, [r7, #4]
 800dbd0:	f003 f9e5 	bl	8010f9e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	2201      	movs	r2, #1
 800dbd8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	2240      	movs	r2, #64	; 0x40
 800dbde:	621a      	str	r2, [r3, #32]

  return ret;
 800dbe0:	7bfb      	ldrb	r3, [r7, #15]
}
 800dbe2:	4618      	mov	r0, r3
 800dbe4:	3710      	adds	r7, #16
 800dbe6:	46bd      	mov	sp, r7
 800dbe8:	bd80      	pop	{r7, pc}

0800dbea <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800dbea:	b480      	push	{r7}
 800dbec:	b083      	sub	sp, #12
 800dbee:	af00      	add	r7, sp, #0
 800dbf0:	6078      	str	r0, [r7, #4]
 800dbf2:	460b      	mov	r3, r1
 800dbf4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	78fa      	ldrb	r2, [r7, #3]
 800dbfa:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800dbfc:	2300      	movs	r3, #0
}
 800dbfe:	4618      	mov	r0, r3
 800dc00:	370c      	adds	r7, #12
 800dc02:	46bd      	mov	sp, r7
 800dc04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc08:	4770      	bx	lr

0800dc0a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800dc0a:	b480      	push	{r7}
 800dc0c:	b083      	sub	sp, #12
 800dc0e:	af00      	add	r7, sp, #0
 800dc10:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dc18:	b2db      	uxtb	r3, r3
 800dc1a:	2b04      	cmp	r3, #4
 800dc1c:	d006      	beq.n	800dc2c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dc24:	b2da      	uxtb	r2, r3
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	2204      	movs	r2, #4
 800dc30:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800dc34:	2300      	movs	r3, #0
}
 800dc36:	4618      	mov	r0, r3
 800dc38:	370c      	adds	r7, #12
 800dc3a:	46bd      	mov	sp, r7
 800dc3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc40:	4770      	bx	lr

0800dc42 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800dc42:	b480      	push	{r7}
 800dc44:	b083      	sub	sp, #12
 800dc46:	af00      	add	r7, sp, #0
 800dc48:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dc50:	b2db      	uxtb	r3, r3
 800dc52:	2b04      	cmp	r3, #4
 800dc54:	d106      	bne.n	800dc64 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800dc5c:	b2da      	uxtb	r2, r3
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800dc64:	2300      	movs	r3, #0
}
 800dc66:	4618      	mov	r0, r3
 800dc68:	370c      	adds	r7, #12
 800dc6a:	46bd      	mov	sp, r7
 800dc6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc70:	4770      	bx	lr

0800dc72 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800dc72:	b580      	push	{r7, lr}
 800dc74:	b082      	sub	sp, #8
 800dc76:	af00      	add	r7, sp, #0
 800dc78:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dc80:	b2db      	uxtb	r3, r3
 800dc82:	2b03      	cmp	r3, #3
 800dc84:	d110      	bne.n	800dca8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d00b      	beq.n	800dca8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dc96:	69db      	ldr	r3, [r3, #28]
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d005      	beq.n	800dca8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dca2:	69db      	ldr	r3, [r3, #28]
 800dca4:	6878      	ldr	r0, [r7, #4]
 800dca6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800dca8:	2300      	movs	r3, #0
}
 800dcaa:	4618      	mov	r0, r3
 800dcac:	3708      	adds	r7, #8
 800dcae:	46bd      	mov	sp, r7
 800dcb0:	bd80      	pop	{r7, pc}

0800dcb2 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800dcb2:	b580      	push	{r7, lr}
 800dcb4:	b082      	sub	sp, #8
 800dcb6:	af00      	add	r7, sp, #0
 800dcb8:	6078      	str	r0, [r7, #4]
 800dcba:	460b      	mov	r3, r1
 800dcbc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	32ae      	adds	r2, #174	; 0xae
 800dcc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d101      	bne.n	800dcd4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800dcd0:	2303      	movs	r3, #3
 800dcd2:	e01c      	b.n	800dd0e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dcda:	b2db      	uxtb	r3, r3
 800dcdc:	2b03      	cmp	r3, #3
 800dcde:	d115      	bne.n	800dd0c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	32ae      	adds	r2, #174	; 0xae
 800dcea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dcee:	6a1b      	ldr	r3, [r3, #32]
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d00b      	beq.n	800dd0c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	32ae      	adds	r2, #174	; 0xae
 800dcfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd02:	6a1b      	ldr	r3, [r3, #32]
 800dd04:	78fa      	ldrb	r2, [r7, #3]
 800dd06:	4611      	mov	r1, r2
 800dd08:	6878      	ldr	r0, [r7, #4]
 800dd0a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800dd0c:	2300      	movs	r3, #0
}
 800dd0e:	4618      	mov	r0, r3
 800dd10:	3708      	adds	r7, #8
 800dd12:	46bd      	mov	sp, r7
 800dd14:	bd80      	pop	{r7, pc}

0800dd16 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800dd16:	b580      	push	{r7, lr}
 800dd18:	b082      	sub	sp, #8
 800dd1a:	af00      	add	r7, sp, #0
 800dd1c:	6078      	str	r0, [r7, #4]
 800dd1e:	460b      	mov	r3, r1
 800dd20:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	32ae      	adds	r2, #174	; 0xae
 800dd2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d101      	bne.n	800dd38 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800dd34:	2303      	movs	r3, #3
 800dd36:	e01c      	b.n	800dd72 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dd3e:	b2db      	uxtb	r3, r3
 800dd40:	2b03      	cmp	r3, #3
 800dd42:	d115      	bne.n	800dd70 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	32ae      	adds	r2, #174	; 0xae
 800dd4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d00b      	beq.n	800dd70 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	32ae      	adds	r2, #174	; 0xae
 800dd62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd68:	78fa      	ldrb	r2, [r7, #3]
 800dd6a:	4611      	mov	r1, r2
 800dd6c:	6878      	ldr	r0, [r7, #4]
 800dd6e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800dd70:	2300      	movs	r3, #0
}
 800dd72:	4618      	mov	r0, r3
 800dd74:	3708      	adds	r7, #8
 800dd76:	46bd      	mov	sp, r7
 800dd78:	bd80      	pop	{r7, pc}

0800dd7a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800dd7a:	b480      	push	{r7}
 800dd7c:	b083      	sub	sp, #12
 800dd7e:	af00      	add	r7, sp, #0
 800dd80:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800dd82:	2300      	movs	r3, #0
}
 800dd84:	4618      	mov	r0, r3
 800dd86:	370c      	adds	r7, #12
 800dd88:	46bd      	mov	sp, r7
 800dd8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd8e:	4770      	bx	lr

0800dd90 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800dd90:	b580      	push	{r7, lr}
 800dd92:	b084      	sub	sp, #16
 800dd94:	af00      	add	r7, sp, #0
 800dd96:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800dd98:	2300      	movs	r3, #0
 800dd9a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	2201      	movs	r2, #1
 800dda0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d00e      	beq.n	800ddcc <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ddb4:	685b      	ldr	r3, [r3, #4]
 800ddb6:	687a      	ldr	r2, [r7, #4]
 800ddb8:	6852      	ldr	r2, [r2, #4]
 800ddba:	b2d2      	uxtb	r2, r2
 800ddbc:	4611      	mov	r1, r2
 800ddbe:	6878      	ldr	r0, [r7, #4]
 800ddc0:	4798      	blx	r3
 800ddc2:	4603      	mov	r3, r0
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d001      	beq.n	800ddcc <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800ddc8:	2303      	movs	r3, #3
 800ddca:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ddcc:	7bfb      	ldrb	r3, [r7, #15]
}
 800ddce:	4618      	mov	r0, r3
 800ddd0:	3710      	adds	r7, #16
 800ddd2:	46bd      	mov	sp, r7
 800ddd4:	bd80      	pop	{r7, pc}

0800ddd6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ddd6:	b480      	push	{r7}
 800ddd8:	b083      	sub	sp, #12
 800ddda:	af00      	add	r7, sp, #0
 800dddc:	6078      	str	r0, [r7, #4]
 800ddde:	460b      	mov	r3, r1
 800dde0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800dde2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800dde4:	4618      	mov	r0, r3
 800dde6:	370c      	adds	r7, #12
 800dde8:	46bd      	mov	sp, r7
 800ddea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddee:	4770      	bx	lr

0800ddf0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ddf0:	b480      	push	{r7}
 800ddf2:	b083      	sub	sp, #12
 800ddf4:	af00      	add	r7, sp, #0
 800ddf6:	6078      	str	r0, [r7, #4]
 800ddf8:	460b      	mov	r3, r1
 800ddfa:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ddfc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ddfe:	4618      	mov	r0, r3
 800de00:	370c      	adds	r7, #12
 800de02:	46bd      	mov	sp, r7
 800de04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de08:	4770      	bx	lr

0800de0a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800de0a:	b580      	push	{r7, lr}
 800de0c:	b086      	sub	sp, #24
 800de0e:	af00      	add	r7, sp, #0
 800de10:	6078      	str	r0, [r7, #4]
 800de12:	460b      	mov	r3, r1
 800de14:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800de1e:	2300      	movs	r3, #0
 800de20:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800de22:	68fb      	ldr	r3, [r7, #12]
 800de24:	885b      	ldrh	r3, [r3, #2]
 800de26:	b29a      	uxth	r2, r3
 800de28:	68fb      	ldr	r3, [r7, #12]
 800de2a:	781b      	ldrb	r3, [r3, #0]
 800de2c:	b29b      	uxth	r3, r3
 800de2e:	429a      	cmp	r2, r3
 800de30:	d920      	bls.n	800de74 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800de32:	68fb      	ldr	r3, [r7, #12]
 800de34:	781b      	ldrb	r3, [r3, #0]
 800de36:	b29b      	uxth	r3, r3
 800de38:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800de3a:	e013      	b.n	800de64 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800de3c:	f107 030a 	add.w	r3, r7, #10
 800de40:	4619      	mov	r1, r3
 800de42:	6978      	ldr	r0, [r7, #20]
 800de44:	f000 f81b 	bl	800de7e <USBD_GetNextDesc>
 800de48:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800de4a:	697b      	ldr	r3, [r7, #20]
 800de4c:	785b      	ldrb	r3, [r3, #1]
 800de4e:	2b05      	cmp	r3, #5
 800de50:	d108      	bne.n	800de64 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800de52:	697b      	ldr	r3, [r7, #20]
 800de54:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800de56:	693b      	ldr	r3, [r7, #16]
 800de58:	789b      	ldrb	r3, [r3, #2]
 800de5a:	78fa      	ldrb	r2, [r7, #3]
 800de5c:	429a      	cmp	r2, r3
 800de5e:	d008      	beq.n	800de72 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800de60:	2300      	movs	r3, #0
 800de62:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800de64:	68fb      	ldr	r3, [r7, #12]
 800de66:	885b      	ldrh	r3, [r3, #2]
 800de68:	b29a      	uxth	r2, r3
 800de6a:	897b      	ldrh	r3, [r7, #10]
 800de6c:	429a      	cmp	r2, r3
 800de6e:	d8e5      	bhi.n	800de3c <USBD_GetEpDesc+0x32>
 800de70:	e000      	b.n	800de74 <USBD_GetEpDesc+0x6a>
          break;
 800de72:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800de74:	693b      	ldr	r3, [r7, #16]
}
 800de76:	4618      	mov	r0, r3
 800de78:	3718      	adds	r7, #24
 800de7a:	46bd      	mov	sp, r7
 800de7c:	bd80      	pop	{r7, pc}

0800de7e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800de7e:	b480      	push	{r7}
 800de80:	b085      	sub	sp, #20
 800de82:	af00      	add	r7, sp, #0
 800de84:	6078      	str	r0, [r7, #4]
 800de86:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800de8c:	683b      	ldr	r3, [r7, #0]
 800de8e:	881a      	ldrh	r2, [r3, #0]
 800de90:	68fb      	ldr	r3, [r7, #12]
 800de92:	781b      	ldrb	r3, [r3, #0]
 800de94:	b29b      	uxth	r3, r3
 800de96:	4413      	add	r3, r2
 800de98:	b29a      	uxth	r2, r3
 800de9a:	683b      	ldr	r3, [r7, #0]
 800de9c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	781b      	ldrb	r3, [r3, #0]
 800dea2:	461a      	mov	r2, r3
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	4413      	add	r3, r2
 800dea8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800deaa:	68fb      	ldr	r3, [r7, #12]
}
 800deac:	4618      	mov	r0, r3
 800deae:	3714      	adds	r7, #20
 800deb0:	46bd      	mov	sp, r7
 800deb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deb6:	4770      	bx	lr

0800deb8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800deb8:	b480      	push	{r7}
 800deba:	b087      	sub	sp, #28
 800debc:	af00      	add	r7, sp, #0
 800debe:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800dec4:	697b      	ldr	r3, [r7, #20]
 800dec6:	781b      	ldrb	r3, [r3, #0]
 800dec8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800deca:	697b      	ldr	r3, [r7, #20]
 800decc:	3301      	adds	r3, #1
 800dece:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800ded0:	697b      	ldr	r3, [r7, #20]
 800ded2:	781b      	ldrb	r3, [r3, #0]
 800ded4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800ded6:	8a3b      	ldrh	r3, [r7, #16]
 800ded8:	021b      	lsls	r3, r3, #8
 800deda:	b21a      	sxth	r2, r3
 800dedc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800dee0:	4313      	orrs	r3, r2
 800dee2:	b21b      	sxth	r3, r3
 800dee4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800dee6:	89fb      	ldrh	r3, [r7, #14]
}
 800dee8:	4618      	mov	r0, r3
 800deea:	371c      	adds	r7, #28
 800deec:	46bd      	mov	sp, r7
 800deee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800def2:	4770      	bx	lr

0800def4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800def4:	b580      	push	{r7, lr}
 800def6:	b084      	sub	sp, #16
 800def8:	af00      	add	r7, sp, #0
 800defa:	6078      	str	r0, [r7, #4]
 800defc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800defe:	2300      	movs	r3, #0
 800df00:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800df02:	683b      	ldr	r3, [r7, #0]
 800df04:	781b      	ldrb	r3, [r3, #0]
 800df06:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800df0a:	2b40      	cmp	r3, #64	; 0x40
 800df0c:	d005      	beq.n	800df1a <USBD_StdDevReq+0x26>
 800df0e:	2b40      	cmp	r3, #64	; 0x40
 800df10:	d857      	bhi.n	800dfc2 <USBD_StdDevReq+0xce>
 800df12:	2b00      	cmp	r3, #0
 800df14:	d00f      	beq.n	800df36 <USBD_StdDevReq+0x42>
 800df16:	2b20      	cmp	r3, #32
 800df18:	d153      	bne.n	800dfc2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	32ae      	adds	r2, #174	; 0xae
 800df24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800df28:	689b      	ldr	r3, [r3, #8]
 800df2a:	6839      	ldr	r1, [r7, #0]
 800df2c:	6878      	ldr	r0, [r7, #4]
 800df2e:	4798      	blx	r3
 800df30:	4603      	mov	r3, r0
 800df32:	73fb      	strb	r3, [r7, #15]
      break;
 800df34:	e04a      	b.n	800dfcc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800df36:	683b      	ldr	r3, [r7, #0]
 800df38:	785b      	ldrb	r3, [r3, #1]
 800df3a:	2b09      	cmp	r3, #9
 800df3c:	d83b      	bhi.n	800dfb6 <USBD_StdDevReq+0xc2>
 800df3e:	a201      	add	r2, pc, #4	; (adr r2, 800df44 <USBD_StdDevReq+0x50>)
 800df40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df44:	0800df99 	.word	0x0800df99
 800df48:	0800dfad 	.word	0x0800dfad
 800df4c:	0800dfb7 	.word	0x0800dfb7
 800df50:	0800dfa3 	.word	0x0800dfa3
 800df54:	0800dfb7 	.word	0x0800dfb7
 800df58:	0800df77 	.word	0x0800df77
 800df5c:	0800df6d 	.word	0x0800df6d
 800df60:	0800dfb7 	.word	0x0800dfb7
 800df64:	0800df8f 	.word	0x0800df8f
 800df68:	0800df81 	.word	0x0800df81
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800df6c:	6839      	ldr	r1, [r7, #0]
 800df6e:	6878      	ldr	r0, [r7, #4]
 800df70:	f000 fa3c 	bl	800e3ec <USBD_GetDescriptor>
          break;
 800df74:	e024      	b.n	800dfc0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800df76:	6839      	ldr	r1, [r7, #0]
 800df78:	6878      	ldr	r0, [r7, #4]
 800df7a:	f000 fba1 	bl	800e6c0 <USBD_SetAddress>
          break;
 800df7e:	e01f      	b.n	800dfc0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800df80:	6839      	ldr	r1, [r7, #0]
 800df82:	6878      	ldr	r0, [r7, #4]
 800df84:	f000 fbe0 	bl	800e748 <USBD_SetConfig>
 800df88:	4603      	mov	r3, r0
 800df8a:	73fb      	strb	r3, [r7, #15]
          break;
 800df8c:	e018      	b.n	800dfc0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800df8e:	6839      	ldr	r1, [r7, #0]
 800df90:	6878      	ldr	r0, [r7, #4]
 800df92:	f000 fc83 	bl	800e89c <USBD_GetConfig>
          break;
 800df96:	e013      	b.n	800dfc0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800df98:	6839      	ldr	r1, [r7, #0]
 800df9a:	6878      	ldr	r0, [r7, #4]
 800df9c:	f000 fcb4 	bl	800e908 <USBD_GetStatus>
          break;
 800dfa0:	e00e      	b.n	800dfc0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800dfa2:	6839      	ldr	r1, [r7, #0]
 800dfa4:	6878      	ldr	r0, [r7, #4]
 800dfa6:	f000 fce3 	bl	800e970 <USBD_SetFeature>
          break;
 800dfaa:	e009      	b.n	800dfc0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800dfac:	6839      	ldr	r1, [r7, #0]
 800dfae:	6878      	ldr	r0, [r7, #4]
 800dfb0:	f000 fd07 	bl	800e9c2 <USBD_ClrFeature>
          break;
 800dfb4:	e004      	b.n	800dfc0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800dfb6:	6839      	ldr	r1, [r7, #0]
 800dfb8:	6878      	ldr	r0, [r7, #4]
 800dfba:	f000 fd5e 	bl	800ea7a <USBD_CtlError>
          break;
 800dfbe:	bf00      	nop
      }
      break;
 800dfc0:	e004      	b.n	800dfcc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800dfc2:	6839      	ldr	r1, [r7, #0]
 800dfc4:	6878      	ldr	r0, [r7, #4]
 800dfc6:	f000 fd58 	bl	800ea7a <USBD_CtlError>
      break;
 800dfca:	bf00      	nop
  }

  return ret;
 800dfcc:	7bfb      	ldrb	r3, [r7, #15]
}
 800dfce:	4618      	mov	r0, r3
 800dfd0:	3710      	adds	r7, #16
 800dfd2:	46bd      	mov	sp, r7
 800dfd4:	bd80      	pop	{r7, pc}
 800dfd6:	bf00      	nop

0800dfd8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dfd8:	b580      	push	{r7, lr}
 800dfda:	b084      	sub	sp, #16
 800dfdc:	af00      	add	r7, sp, #0
 800dfde:	6078      	str	r0, [r7, #4]
 800dfe0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800dfe2:	2300      	movs	r3, #0
 800dfe4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dfe6:	683b      	ldr	r3, [r7, #0]
 800dfe8:	781b      	ldrb	r3, [r3, #0]
 800dfea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800dfee:	2b40      	cmp	r3, #64	; 0x40
 800dff0:	d005      	beq.n	800dffe <USBD_StdItfReq+0x26>
 800dff2:	2b40      	cmp	r3, #64	; 0x40
 800dff4:	d852      	bhi.n	800e09c <USBD_StdItfReq+0xc4>
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d001      	beq.n	800dffe <USBD_StdItfReq+0x26>
 800dffa:	2b20      	cmp	r3, #32
 800dffc:	d14e      	bne.n	800e09c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e004:	b2db      	uxtb	r3, r3
 800e006:	3b01      	subs	r3, #1
 800e008:	2b02      	cmp	r3, #2
 800e00a:	d840      	bhi.n	800e08e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800e00c:	683b      	ldr	r3, [r7, #0]
 800e00e:	889b      	ldrh	r3, [r3, #4]
 800e010:	b2db      	uxtb	r3, r3
 800e012:	2b01      	cmp	r3, #1
 800e014:	d836      	bhi.n	800e084 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800e016:	683b      	ldr	r3, [r7, #0]
 800e018:	889b      	ldrh	r3, [r3, #4]
 800e01a:	b2db      	uxtb	r3, r3
 800e01c:	4619      	mov	r1, r3
 800e01e:	6878      	ldr	r0, [r7, #4]
 800e020:	f7ff fed9 	bl	800ddd6 <USBD_CoreFindIF>
 800e024:	4603      	mov	r3, r0
 800e026:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e028:	7bbb      	ldrb	r3, [r7, #14]
 800e02a:	2bff      	cmp	r3, #255	; 0xff
 800e02c:	d01d      	beq.n	800e06a <USBD_StdItfReq+0x92>
 800e02e:	7bbb      	ldrb	r3, [r7, #14]
 800e030:	2b00      	cmp	r3, #0
 800e032:	d11a      	bne.n	800e06a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800e034:	7bba      	ldrb	r2, [r7, #14]
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	32ae      	adds	r2, #174	; 0xae
 800e03a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e03e:	689b      	ldr	r3, [r3, #8]
 800e040:	2b00      	cmp	r3, #0
 800e042:	d00f      	beq.n	800e064 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800e044:	7bba      	ldrb	r2, [r7, #14]
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800e04c:	7bba      	ldrb	r2, [r7, #14]
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	32ae      	adds	r2, #174	; 0xae
 800e052:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e056:	689b      	ldr	r3, [r3, #8]
 800e058:	6839      	ldr	r1, [r7, #0]
 800e05a:	6878      	ldr	r0, [r7, #4]
 800e05c:	4798      	blx	r3
 800e05e:	4603      	mov	r3, r0
 800e060:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800e062:	e004      	b.n	800e06e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800e064:	2303      	movs	r3, #3
 800e066:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800e068:	e001      	b.n	800e06e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800e06a:	2303      	movs	r3, #3
 800e06c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800e06e:	683b      	ldr	r3, [r7, #0]
 800e070:	88db      	ldrh	r3, [r3, #6]
 800e072:	2b00      	cmp	r3, #0
 800e074:	d110      	bne.n	800e098 <USBD_StdItfReq+0xc0>
 800e076:	7bfb      	ldrb	r3, [r7, #15]
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d10d      	bne.n	800e098 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800e07c:	6878      	ldr	r0, [r7, #4]
 800e07e:	f000 fdc7 	bl	800ec10 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800e082:	e009      	b.n	800e098 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800e084:	6839      	ldr	r1, [r7, #0]
 800e086:	6878      	ldr	r0, [r7, #4]
 800e088:	f000 fcf7 	bl	800ea7a <USBD_CtlError>
          break;
 800e08c:	e004      	b.n	800e098 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800e08e:	6839      	ldr	r1, [r7, #0]
 800e090:	6878      	ldr	r0, [r7, #4]
 800e092:	f000 fcf2 	bl	800ea7a <USBD_CtlError>
          break;
 800e096:	e000      	b.n	800e09a <USBD_StdItfReq+0xc2>
          break;
 800e098:	bf00      	nop
      }
      break;
 800e09a:	e004      	b.n	800e0a6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800e09c:	6839      	ldr	r1, [r7, #0]
 800e09e:	6878      	ldr	r0, [r7, #4]
 800e0a0:	f000 fceb 	bl	800ea7a <USBD_CtlError>
      break;
 800e0a4:	bf00      	nop
  }

  return ret;
 800e0a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800e0a8:	4618      	mov	r0, r3
 800e0aa:	3710      	adds	r7, #16
 800e0ac:	46bd      	mov	sp, r7
 800e0ae:	bd80      	pop	{r7, pc}

0800e0b0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e0b0:	b580      	push	{r7, lr}
 800e0b2:	b084      	sub	sp, #16
 800e0b4:	af00      	add	r7, sp, #0
 800e0b6:	6078      	str	r0, [r7, #4]
 800e0b8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800e0ba:	2300      	movs	r3, #0
 800e0bc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800e0be:	683b      	ldr	r3, [r7, #0]
 800e0c0:	889b      	ldrh	r3, [r3, #4]
 800e0c2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e0c4:	683b      	ldr	r3, [r7, #0]
 800e0c6:	781b      	ldrb	r3, [r3, #0]
 800e0c8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e0cc:	2b40      	cmp	r3, #64	; 0x40
 800e0ce:	d007      	beq.n	800e0e0 <USBD_StdEPReq+0x30>
 800e0d0:	2b40      	cmp	r3, #64	; 0x40
 800e0d2:	f200 817f 	bhi.w	800e3d4 <USBD_StdEPReq+0x324>
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	d02a      	beq.n	800e130 <USBD_StdEPReq+0x80>
 800e0da:	2b20      	cmp	r3, #32
 800e0dc:	f040 817a 	bne.w	800e3d4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800e0e0:	7bbb      	ldrb	r3, [r7, #14]
 800e0e2:	4619      	mov	r1, r3
 800e0e4:	6878      	ldr	r0, [r7, #4]
 800e0e6:	f7ff fe83 	bl	800ddf0 <USBD_CoreFindEP>
 800e0ea:	4603      	mov	r3, r0
 800e0ec:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e0ee:	7b7b      	ldrb	r3, [r7, #13]
 800e0f0:	2bff      	cmp	r3, #255	; 0xff
 800e0f2:	f000 8174 	beq.w	800e3de <USBD_StdEPReq+0x32e>
 800e0f6:	7b7b      	ldrb	r3, [r7, #13]
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	f040 8170 	bne.w	800e3de <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800e0fe:	7b7a      	ldrb	r2, [r7, #13]
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800e106:	7b7a      	ldrb	r2, [r7, #13]
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	32ae      	adds	r2, #174	; 0xae
 800e10c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e110:	689b      	ldr	r3, [r3, #8]
 800e112:	2b00      	cmp	r3, #0
 800e114:	f000 8163 	beq.w	800e3de <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800e118:	7b7a      	ldrb	r2, [r7, #13]
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	32ae      	adds	r2, #174	; 0xae
 800e11e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e122:	689b      	ldr	r3, [r3, #8]
 800e124:	6839      	ldr	r1, [r7, #0]
 800e126:	6878      	ldr	r0, [r7, #4]
 800e128:	4798      	blx	r3
 800e12a:	4603      	mov	r3, r0
 800e12c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800e12e:	e156      	b.n	800e3de <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e130:	683b      	ldr	r3, [r7, #0]
 800e132:	785b      	ldrb	r3, [r3, #1]
 800e134:	2b03      	cmp	r3, #3
 800e136:	d008      	beq.n	800e14a <USBD_StdEPReq+0x9a>
 800e138:	2b03      	cmp	r3, #3
 800e13a:	f300 8145 	bgt.w	800e3c8 <USBD_StdEPReq+0x318>
 800e13e:	2b00      	cmp	r3, #0
 800e140:	f000 809b 	beq.w	800e27a <USBD_StdEPReq+0x1ca>
 800e144:	2b01      	cmp	r3, #1
 800e146:	d03c      	beq.n	800e1c2 <USBD_StdEPReq+0x112>
 800e148:	e13e      	b.n	800e3c8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e150:	b2db      	uxtb	r3, r3
 800e152:	2b02      	cmp	r3, #2
 800e154:	d002      	beq.n	800e15c <USBD_StdEPReq+0xac>
 800e156:	2b03      	cmp	r3, #3
 800e158:	d016      	beq.n	800e188 <USBD_StdEPReq+0xd8>
 800e15a:	e02c      	b.n	800e1b6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e15c:	7bbb      	ldrb	r3, [r7, #14]
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d00d      	beq.n	800e17e <USBD_StdEPReq+0xce>
 800e162:	7bbb      	ldrb	r3, [r7, #14]
 800e164:	2b80      	cmp	r3, #128	; 0x80
 800e166:	d00a      	beq.n	800e17e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e168:	7bbb      	ldrb	r3, [r7, #14]
 800e16a:	4619      	mov	r1, r3
 800e16c:	6878      	ldr	r0, [r7, #4]
 800e16e:	f002 ff5b 	bl	8011028 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e172:	2180      	movs	r1, #128	; 0x80
 800e174:	6878      	ldr	r0, [r7, #4]
 800e176:	f002 ff57 	bl	8011028 <USBD_LL_StallEP>
 800e17a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e17c:	e020      	b.n	800e1c0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800e17e:	6839      	ldr	r1, [r7, #0]
 800e180:	6878      	ldr	r0, [r7, #4]
 800e182:	f000 fc7a 	bl	800ea7a <USBD_CtlError>
              break;
 800e186:	e01b      	b.n	800e1c0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e188:	683b      	ldr	r3, [r7, #0]
 800e18a:	885b      	ldrh	r3, [r3, #2]
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	d10e      	bne.n	800e1ae <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800e190:	7bbb      	ldrb	r3, [r7, #14]
 800e192:	2b00      	cmp	r3, #0
 800e194:	d00b      	beq.n	800e1ae <USBD_StdEPReq+0xfe>
 800e196:	7bbb      	ldrb	r3, [r7, #14]
 800e198:	2b80      	cmp	r3, #128	; 0x80
 800e19a:	d008      	beq.n	800e1ae <USBD_StdEPReq+0xfe>
 800e19c:	683b      	ldr	r3, [r7, #0]
 800e19e:	88db      	ldrh	r3, [r3, #6]
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	d104      	bne.n	800e1ae <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800e1a4:	7bbb      	ldrb	r3, [r7, #14]
 800e1a6:	4619      	mov	r1, r3
 800e1a8:	6878      	ldr	r0, [r7, #4]
 800e1aa:	f002 ff3d 	bl	8011028 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800e1ae:	6878      	ldr	r0, [r7, #4]
 800e1b0:	f000 fd2e 	bl	800ec10 <USBD_CtlSendStatus>

              break;
 800e1b4:	e004      	b.n	800e1c0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800e1b6:	6839      	ldr	r1, [r7, #0]
 800e1b8:	6878      	ldr	r0, [r7, #4]
 800e1ba:	f000 fc5e 	bl	800ea7a <USBD_CtlError>
              break;
 800e1be:	bf00      	nop
          }
          break;
 800e1c0:	e107      	b.n	800e3d2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e1c8:	b2db      	uxtb	r3, r3
 800e1ca:	2b02      	cmp	r3, #2
 800e1cc:	d002      	beq.n	800e1d4 <USBD_StdEPReq+0x124>
 800e1ce:	2b03      	cmp	r3, #3
 800e1d0:	d016      	beq.n	800e200 <USBD_StdEPReq+0x150>
 800e1d2:	e04b      	b.n	800e26c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e1d4:	7bbb      	ldrb	r3, [r7, #14]
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	d00d      	beq.n	800e1f6 <USBD_StdEPReq+0x146>
 800e1da:	7bbb      	ldrb	r3, [r7, #14]
 800e1dc:	2b80      	cmp	r3, #128	; 0x80
 800e1de:	d00a      	beq.n	800e1f6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e1e0:	7bbb      	ldrb	r3, [r7, #14]
 800e1e2:	4619      	mov	r1, r3
 800e1e4:	6878      	ldr	r0, [r7, #4]
 800e1e6:	f002 ff1f 	bl	8011028 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e1ea:	2180      	movs	r1, #128	; 0x80
 800e1ec:	6878      	ldr	r0, [r7, #4]
 800e1ee:	f002 ff1b 	bl	8011028 <USBD_LL_StallEP>
 800e1f2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e1f4:	e040      	b.n	800e278 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800e1f6:	6839      	ldr	r1, [r7, #0]
 800e1f8:	6878      	ldr	r0, [r7, #4]
 800e1fa:	f000 fc3e 	bl	800ea7a <USBD_CtlError>
              break;
 800e1fe:	e03b      	b.n	800e278 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e200:	683b      	ldr	r3, [r7, #0]
 800e202:	885b      	ldrh	r3, [r3, #2]
 800e204:	2b00      	cmp	r3, #0
 800e206:	d136      	bne.n	800e276 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800e208:	7bbb      	ldrb	r3, [r7, #14]
 800e20a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d004      	beq.n	800e21c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800e212:	7bbb      	ldrb	r3, [r7, #14]
 800e214:	4619      	mov	r1, r3
 800e216:	6878      	ldr	r0, [r7, #4]
 800e218:	f002 ff25 	bl	8011066 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800e21c:	6878      	ldr	r0, [r7, #4]
 800e21e:	f000 fcf7 	bl	800ec10 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800e222:	7bbb      	ldrb	r3, [r7, #14]
 800e224:	4619      	mov	r1, r3
 800e226:	6878      	ldr	r0, [r7, #4]
 800e228:	f7ff fde2 	bl	800ddf0 <USBD_CoreFindEP>
 800e22c:	4603      	mov	r3, r0
 800e22e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e230:	7b7b      	ldrb	r3, [r7, #13]
 800e232:	2bff      	cmp	r3, #255	; 0xff
 800e234:	d01f      	beq.n	800e276 <USBD_StdEPReq+0x1c6>
 800e236:	7b7b      	ldrb	r3, [r7, #13]
 800e238:	2b00      	cmp	r3, #0
 800e23a:	d11c      	bne.n	800e276 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800e23c:	7b7a      	ldrb	r2, [r7, #13]
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800e244:	7b7a      	ldrb	r2, [r7, #13]
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	32ae      	adds	r2, #174	; 0xae
 800e24a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e24e:	689b      	ldr	r3, [r3, #8]
 800e250:	2b00      	cmp	r3, #0
 800e252:	d010      	beq.n	800e276 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800e254:	7b7a      	ldrb	r2, [r7, #13]
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	32ae      	adds	r2, #174	; 0xae
 800e25a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e25e:	689b      	ldr	r3, [r3, #8]
 800e260:	6839      	ldr	r1, [r7, #0]
 800e262:	6878      	ldr	r0, [r7, #4]
 800e264:	4798      	blx	r3
 800e266:	4603      	mov	r3, r0
 800e268:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800e26a:	e004      	b.n	800e276 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800e26c:	6839      	ldr	r1, [r7, #0]
 800e26e:	6878      	ldr	r0, [r7, #4]
 800e270:	f000 fc03 	bl	800ea7a <USBD_CtlError>
              break;
 800e274:	e000      	b.n	800e278 <USBD_StdEPReq+0x1c8>
              break;
 800e276:	bf00      	nop
          }
          break;
 800e278:	e0ab      	b.n	800e3d2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e280:	b2db      	uxtb	r3, r3
 800e282:	2b02      	cmp	r3, #2
 800e284:	d002      	beq.n	800e28c <USBD_StdEPReq+0x1dc>
 800e286:	2b03      	cmp	r3, #3
 800e288:	d032      	beq.n	800e2f0 <USBD_StdEPReq+0x240>
 800e28a:	e097      	b.n	800e3bc <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e28c:	7bbb      	ldrb	r3, [r7, #14]
 800e28e:	2b00      	cmp	r3, #0
 800e290:	d007      	beq.n	800e2a2 <USBD_StdEPReq+0x1f2>
 800e292:	7bbb      	ldrb	r3, [r7, #14]
 800e294:	2b80      	cmp	r3, #128	; 0x80
 800e296:	d004      	beq.n	800e2a2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800e298:	6839      	ldr	r1, [r7, #0]
 800e29a:	6878      	ldr	r0, [r7, #4]
 800e29c:	f000 fbed 	bl	800ea7a <USBD_CtlError>
                break;
 800e2a0:	e091      	b.n	800e3c6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e2a2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	da0b      	bge.n	800e2c2 <USBD_StdEPReq+0x212>
 800e2aa:	7bbb      	ldrb	r3, [r7, #14]
 800e2ac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e2b0:	4613      	mov	r3, r2
 800e2b2:	009b      	lsls	r3, r3, #2
 800e2b4:	4413      	add	r3, r2
 800e2b6:	009b      	lsls	r3, r3, #2
 800e2b8:	3310      	adds	r3, #16
 800e2ba:	687a      	ldr	r2, [r7, #4]
 800e2bc:	4413      	add	r3, r2
 800e2be:	3304      	adds	r3, #4
 800e2c0:	e00b      	b.n	800e2da <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e2c2:	7bbb      	ldrb	r3, [r7, #14]
 800e2c4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e2c8:	4613      	mov	r3, r2
 800e2ca:	009b      	lsls	r3, r3, #2
 800e2cc:	4413      	add	r3, r2
 800e2ce:	009b      	lsls	r3, r3, #2
 800e2d0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800e2d4:	687a      	ldr	r2, [r7, #4]
 800e2d6:	4413      	add	r3, r2
 800e2d8:	3304      	adds	r3, #4
 800e2da:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800e2dc:	68bb      	ldr	r3, [r7, #8]
 800e2de:	2200      	movs	r2, #0
 800e2e0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e2e2:	68bb      	ldr	r3, [r7, #8]
 800e2e4:	2202      	movs	r2, #2
 800e2e6:	4619      	mov	r1, r3
 800e2e8:	6878      	ldr	r0, [r7, #4]
 800e2ea:	f000 fc37 	bl	800eb5c <USBD_CtlSendData>
              break;
 800e2ee:	e06a      	b.n	800e3c6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800e2f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	da11      	bge.n	800e31c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800e2f8:	7bbb      	ldrb	r3, [r7, #14]
 800e2fa:	f003 020f 	and.w	r2, r3, #15
 800e2fe:	6879      	ldr	r1, [r7, #4]
 800e300:	4613      	mov	r3, r2
 800e302:	009b      	lsls	r3, r3, #2
 800e304:	4413      	add	r3, r2
 800e306:	009b      	lsls	r3, r3, #2
 800e308:	440b      	add	r3, r1
 800e30a:	3324      	adds	r3, #36	; 0x24
 800e30c:	881b      	ldrh	r3, [r3, #0]
 800e30e:	2b00      	cmp	r3, #0
 800e310:	d117      	bne.n	800e342 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800e312:	6839      	ldr	r1, [r7, #0]
 800e314:	6878      	ldr	r0, [r7, #4]
 800e316:	f000 fbb0 	bl	800ea7a <USBD_CtlError>
                  break;
 800e31a:	e054      	b.n	800e3c6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800e31c:	7bbb      	ldrb	r3, [r7, #14]
 800e31e:	f003 020f 	and.w	r2, r3, #15
 800e322:	6879      	ldr	r1, [r7, #4]
 800e324:	4613      	mov	r3, r2
 800e326:	009b      	lsls	r3, r3, #2
 800e328:	4413      	add	r3, r2
 800e32a:	009b      	lsls	r3, r3, #2
 800e32c:	440b      	add	r3, r1
 800e32e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800e332:	881b      	ldrh	r3, [r3, #0]
 800e334:	2b00      	cmp	r3, #0
 800e336:	d104      	bne.n	800e342 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800e338:	6839      	ldr	r1, [r7, #0]
 800e33a:	6878      	ldr	r0, [r7, #4]
 800e33c:	f000 fb9d 	bl	800ea7a <USBD_CtlError>
                  break;
 800e340:	e041      	b.n	800e3c6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e342:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e346:	2b00      	cmp	r3, #0
 800e348:	da0b      	bge.n	800e362 <USBD_StdEPReq+0x2b2>
 800e34a:	7bbb      	ldrb	r3, [r7, #14]
 800e34c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e350:	4613      	mov	r3, r2
 800e352:	009b      	lsls	r3, r3, #2
 800e354:	4413      	add	r3, r2
 800e356:	009b      	lsls	r3, r3, #2
 800e358:	3310      	adds	r3, #16
 800e35a:	687a      	ldr	r2, [r7, #4]
 800e35c:	4413      	add	r3, r2
 800e35e:	3304      	adds	r3, #4
 800e360:	e00b      	b.n	800e37a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e362:	7bbb      	ldrb	r3, [r7, #14]
 800e364:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e368:	4613      	mov	r3, r2
 800e36a:	009b      	lsls	r3, r3, #2
 800e36c:	4413      	add	r3, r2
 800e36e:	009b      	lsls	r3, r3, #2
 800e370:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800e374:	687a      	ldr	r2, [r7, #4]
 800e376:	4413      	add	r3, r2
 800e378:	3304      	adds	r3, #4
 800e37a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800e37c:	7bbb      	ldrb	r3, [r7, #14]
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d002      	beq.n	800e388 <USBD_StdEPReq+0x2d8>
 800e382:	7bbb      	ldrb	r3, [r7, #14]
 800e384:	2b80      	cmp	r3, #128	; 0x80
 800e386:	d103      	bne.n	800e390 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800e388:	68bb      	ldr	r3, [r7, #8]
 800e38a:	2200      	movs	r2, #0
 800e38c:	601a      	str	r2, [r3, #0]
 800e38e:	e00e      	b.n	800e3ae <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800e390:	7bbb      	ldrb	r3, [r7, #14]
 800e392:	4619      	mov	r1, r3
 800e394:	6878      	ldr	r0, [r7, #4]
 800e396:	f002 fe85 	bl	80110a4 <USBD_LL_IsStallEP>
 800e39a:	4603      	mov	r3, r0
 800e39c:	2b00      	cmp	r3, #0
 800e39e:	d003      	beq.n	800e3a8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800e3a0:	68bb      	ldr	r3, [r7, #8]
 800e3a2:	2201      	movs	r2, #1
 800e3a4:	601a      	str	r2, [r3, #0]
 800e3a6:	e002      	b.n	800e3ae <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800e3a8:	68bb      	ldr	r3, [r7, #8]
 800e3aa:	2200      	movs	r2, #0
 800e3ac:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e3ae:	68bb      	ldr	r3, [r7, #8]
 800e3b0:	2202      	movs	r2, #2
 800e3b2:	4619      	mov	r1, r3
 800e3b4:	6878      	ldr	r0, [r7, #4]
 800e3b6:	f000 fbd1 	bl	800eb5c <USBD_CtlSendData>
              break;
 800e3ba:	e004      	b.n	800e3c6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800e3bc:	6839      	ldr	r1, [r7, #0]
 800e3be:	6878      	ldr	r0, [r7, #4]
 800e3c0:	f000 fb5b 	bl	800ea7a <USBD_CtlError>
              break;
 800e3c4:	bf00      	nop
          }
          break;
 800e3c6:	e004      	b.n	800e3d2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800e3c8:	6839      	ldr	r1, [r7, #0]
 800e3ca:	6878      	ldr	r0, [r7, #4]
 800e3cc:	f000 fb55 	bl	800ea7a <USBD_CtlError>
          break;
 800e3d0:	bf00      	nop
      }
      break;
 800e3d2:	e005      	b.n	800e3e0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800e3d4:	6839      	ldr	r1, [r7, #0]
 800e3d6:	6878      	ldr	r0, [r7, #4]
 800e3d8:	f000 fb4f 	bl	800ea7a <USBD_CtlError>
      break;
 800e3dc:	e000      	b.n	800e3e0 <USBD_StdEPReq+0x330>
      break;
 800e3de:	bf00      	nop
  }

  return ret;
 800e3e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800e3e2:	4618      	mov	r0, r3
 800e3e4:	3710      	adds	r7, #16
 800e3e6:	46bd      	mov	sp, r7
 800e3e8:	bd80      	pop	{r7, pc}
	...

0800e3ec <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e3ec:	b580      	push	{r7, lr}
 800e3ee:	b084      	sub	sp, #16
 800e3f0:	af00      	add	r7, sp, #0
 800e3f2:	6078      	str	r0, [r7, #4]
 800e3f4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e3f6:	2300      	movs	r3, #0
 800e3f8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800e3fa:	2300      	movs	r3, #0
 800e3fc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800e3fe:	2300      	movs	r3, #0
 800e400:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800e402:	683b      	ldr	r3, [r7, #0]
 800e404:	885b      	ldrh	r3, [r3, #2]
 800e406:	0a1b      	lsrs	r3, r3, #8
 800e408:	b29b      	uxth	r3, r3
 800e40a:	3b01      	subs	r3, #1
 800e40c:	2b06      	cmp	r3, #6
 800e40e:	f200 8128 	bhi.w	800e662 <USBD_GetDescriptor+0x276>
 800e412:	a201      	add	r2, pc, #4	; (adr r2, 800e418 <USBD_GetDescriptor+0x2c>)
 800e414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e418:	0800e435 	.word	0x0800e435
 800e41c:	0800e44d 	.word	0x0800e44d
 800e420:	0800e48d 	.word	0x0800e48d
 800e424:	0800e663 	.word	0x0800e663
 800e428:	0800e663 	.word	0x0800e663
 800e42c:	0800e603 	.word	0x0800e603
 800e430:	0800e62f 	.word	0x0800e62f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e43a:	681b      	ldr	r3, [r3, #0]
 800e43c:	687a      	ldr	r2, [r7, #4]
 800e43e:	7c12      	ldrb	r2, [r2, #16]
 800e440:	f107 0108 	add.w	r1, r7, #8
 800e444:	4610      	mov	r0, r2
 800e446:	4798      	blx	r3
 800e448:	60f8      	str	r0, [r7, #12]
      break;
 800e44a:	e112      	b.n	800e672 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	7c1b      	ldrb	r3, [r3, #16]
 800e450:	2b00      	cmp	r3, #0
 800e452:	d10d      	bne.n	800e470 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e45a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e45c:	f107 0208 	add.w	r2, r7, #8
 800e460:	4610      	mov	r0, r2
 800e462:	4798      	blx	r3
 800e464:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e466:	68fb      	ldr	r3, [r7, #12]
 800e468:	3301      	adds	r3, #1
 800e46a:	2202      	movs	r2, #2
 800e46c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800e46e:	e100      	b.n	800e672 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e478:	f107 0208 	add.w	r2, r7, #8
 800e47c:	4610      	mov	r0, r2
 800e47e:	4798      	blx	r3
 800e480:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e482:	68fb      	ldr	r3, [r7, #12]
 800e484:	3301      	adds	r3, #1
 800e486:	2202      	movs	r2, #2
 800e488:	701a      	strb	r2, [r3, #0]
      break;
 800e48a:	e0f2      	b.n	800e672 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800e48c:	683b      	ldr	r3, [r7, #0]
 800e48e:	885b      	ldrh	r3, [r3, #2]
 800e490:	b2db      	uxtb	r3, r3
 800e492:	2b05      	cmp	r3, #5
 800e494:	f200 80ac 	bhi.w	800e5f0 <USBD_GetDescriptor+0x204>
 800e498:	a201      	add	r2, pc, #4	; (adr r2, 800e4a0 <USBD_GetDescriptor+0xb4>)
 800e49a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e49e:	bf00      	nop
 800e4a0:	0800e4b9 	.word	0x0800e4b9
 800e4a4:	0800e4ed 	.word	0x0800e4ed
 800e4a8:	0800e521 	.word	0x0800e521
 800e4ac:	0800e555 	.word	0x0800e555
 800e4b0:	0800e589 	.word	0x0800e589
 800e4b4:	0800e5bd 	.word	0x0800e5bd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e4be:	685b      	ldr	r3, [r3, #4]
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d00b      	beq.n	800e4dc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e4ca:	685b      	ldr	r3, [r3, #4]
 800e4cc:	687a      	ldr	r2, [r7, #4]
 800e4ce:	7c12      	ldrb	r2, [r2, #16]
 800e4d0:	f107 0108 	add.w	r1, r7, #8
 800e4d4:	4610      	mov	r0, r2
 800e4d6:	4798      	blx	r3
 800e4d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e4da:	e091      	b.n	800e600 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e4dc:	6839      	ldr	r1, [r7, #0]
 800e4de:	6878      	ldr	r0, [r7, #4]
 800e4e0:	f000 facb 	bl	800ea7a <USBD_CtlError>
            err++;
 800e4e4:	7afb      	ldrb	r3, [r7, #11]
 800e4e6:	3301      	adds	r3, #1
 800e4e8:	72fb      	strb	r3, [r7, #11]
          break;
 800e4ea:	e089      	b.n	800e600 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e4f2:	689b      	ldr	r3, [r3, #8]
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	d00b      	beq.n	800e510 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e4fe:	689b      	ldr	r3, [r3, #8]
 800e500:	687a      	ldr	r2, [r7, #4]
 800e502:	7c12      	ldrb	r2, [r2, #16]
 800e504:	f107 0108 	add.w	r1, r7, #8
 800e508:	4610      	mov	r0, r2
 800e50a:	4798      	blx	r3
 800e50c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e50e:	e077      	b.n	800e600 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e510:	6839      	ldr	r1, [r7, #0]
 800e512:	6878      	ldr	r0, [r7, #4]
 800e514:	f000 fab1 	bl	800ea7a <USBD_CtlError>
            err++;
 800e518:	7afb      	ldrb	r3, [r7, #11]
 800e51a:	3301      	adds	r3, #1
 800e51c:	72fb      	strb	r3, [r7, #11]
          break;
 800e51e:	e06f      	b.n	800e600 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e526:	68db      	ldr	r3, [r3, #12]
 800e528:	2b00      	cmp	r3, #0
 800e52a:	d00b      	beq.n	800e544 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e532:	68db      	ldr	r3, [r3, #12]
 800e534:	687a      	ldr	r2, [r7, #4]
 800e536:	7c12      	ldrb	r2, [r2, #16]
 800e538:	f107 0108 	add.w	r1, r7, #8
 800e53c:	4610      	mov	r0, r2
 800e53e:	4798      	blx	r3
 800e540:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e542:	e05d      	b.n	800e600 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e544:	6839      	ldr	r1, [r7, #0]
 800e546:	6878      	ldr	r0, [r7, #4]
 800e548:	f000 fa97 	bl	800ea7a <USBD_CtlError>
            err++;
 800e54c:	7afb      	ldrb	r3, [r7, #11]
 800e54e:	3301      	adds	r3, #1
 800e550:	72fb      	strb	r3, [r7, #11]
          break;
 800e552:	e055      	b.n	800e600 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e55a:	691b      	ldr	r3, [r3, #16]
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	d00b      	beq.n	800e578 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e566:	691b      	ldr	r3, [r3, #16]
 800e568:	687a      	ldr	r2, [r7, #4]
 800e56a:	7c12      	ldrb	r2, [r2, #16]
 800e56c:	f107 0108 	add.w	r1, r7, #8
 800e570:	4610      	mov	r0, r2
 800e572:	4798      	blx	r3
 800e574:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e576:	e043      	b.n	800e600 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e578:	6839      	ldr	r1, [r7, #0]
 800e57a:	6878      	ldr	r0, [r7, #4]
 800e57c:	f000 fa7d 	bl	800ea7a <USBD_CtlError>
            err++;
 800e580:	7afb      	ldrb	r3, [r7, #11]
 800e582:	3301      	adds	r3, #1
 800e584:	72fb      	strb	r3, [r7, #11]
          break;
 800e586:	e03b      	b.n	800e600 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e58e:	695b      	ldr	r3, [r3, #20]
 800e590:	2b00      	cmp	r3, #0
 800e592:	d00b      	beq.n	800e5ac <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e59a:	695b      	ldr	r3, [r3, #20]
 800e59c:	687a      	ldr	r2, [r7, #4]
 800e59e:	7c12      	ldrb	r2, [r2, #16]
 800e5a0:	f107 0108 	add.w	r1, r7, #8
 800e5a4:	4610      	mov	r0, r2
 800e5a6:	4798      	blx	r3
 800e5a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e5aa:	e029      	b.n	800e600 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e5ac:	6839      	ldr	r1, [r7, #0]
 800e5ae:	6878      	ldr	r0, [r7, #4]
 800e5b0:	f000 fa63 	bl	800ea7a <USBD_CtlError>
            err++;
 800e5b4:	7afb      	ldrb	r3, [r7, #11]
 800e5b6:	3301      	adds	r3, #1
 800e5b8:	72fb      	strb	r3, [r7, #11]
          break;
 800e5ba:	e021      	b.n	800e600 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e5c2:	699b      	ldr	r3, [r3, #24]
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	d00b      	beq.n	800e5e0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e5ce:	699b      	ldr	r3, [r3, #24]
 800e5d0:	687a      	ldr	r2, [r7, #4]
 800e5d2:	7c12      	ldrb	r2, [r2, #16]
 800e5d4:	f107 0108 	add.w	r1, r7, #8
 800e5d8:	4610      	mov	r0, r2
 800e5da:	4798      	blx	r3
 800e5dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e5de:	e00f      	b.n	800e600 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e5e0:	6839      	ldr	r1, [r7, #0]
 800e5e2:	6878      	ldr	r0, [r7, #4]
 800e5e4:	f000 fa49 	bl	800ea7a <USBD_CtlError>
            err++;
 800e5e8:	7afb      	ldrb	r3, [r7, #11]
 800e5ea:	3301      	adds	r3, #1
 800e5ec:	72fb      	strb	r3, [r7, #11]
          break;
 800e5ee:	e007      	b.n	800e600 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800e5f0:	6839      	ldr	r1, [r7, #0]
 800e5f2:	6878      	ldr	r0, [r7, #4]
 800e5f4:	f000 fa41 	bl	800ea7a <USBD_CtlError>
          err++;
 800e5f8:	7afb      	ldrb	r3, [r7, #11]
 800e5fa:	3301      	adds	r3, #1
 800e5fc:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800e5fe:	bf00      	nop
      }
      break;
 800e600:	e037      	b.n	800e672 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	7c1b      	ldrb	r3, [r3, #16]
 800e606:	2b00      	cmp	r3, #0
 800e608:	d109      	bne.n	800e61e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e610:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e612:	f107 0208 	add.w	r2, r7, #8
 800e616:	4610      	mov	r0, r2
 800e618:	4798      	blx	r3
 800e61a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e61c:	e029      	b.n	800e672 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800e61e:	6839      	ldr	r1, [r7, #0]
 800e620:	6878      	ldr	r0, [r7, #4]
 800e622:	f000 fa2a 	bl	800ea7a <USBD_CtlError>
        err++;
 800e626:	7afb      	ldrb	r3, [r7, #11]
 800e628:	3301      	adds	r3, #1
 800e62a:	72fb      	strb	r3, [r7, #11]
      break;
 800e62c:	e021      	b.n	800e672 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	7c1b      	ldrb	r3, [r3, #16]
 800e632:	2b00      	cmp	r3, #0
 800e634:	d10d      	bne.n	800e652 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e63c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e63e:	f107 0208 	add.w	r2, r7, #8
 800e642:	4610      	mov	r0, r2
 800e644:	4798      	blx	r3
 800e646:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800e648:	68fb      	ldr	r3, [r7, #12]
 800e64a:	3301      	adds	r3, #1
 800e64c:	2207      	movs	r2, #7
 800e64e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e650:	e00f      	b.n	800e672 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800e652:	6839      	ldr	r1, [r7, #0]
 800e654:	6878      	ldr	r0, [r7, #4]
 800e656:	f000 fa10 	bl	800ea7a <USBD_CtlError>
        err++;
 800e65a:	7afb      	ldrb	r3, [r7, #11]
 800e65c:	3301      	adds	r3, #1
 800e65e:	72fb      	strb	r3, [r7, #11]
      break;
 800e660:	e007      	b.n	800e672 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800e662:	6839      	ldr	r1, [r7, #0]
 800e664:	6878      	ldr	r0, [r7, #4]
 800e666:	f000 fa08 	bl	800ea7a <USBD_CtlError>
      err++;
 800e66a:	7afb      	ldrb	r3, [r7, #11]
 800e66c:	3301      	adds	r3, #1
 800e66e:	72fb      	strb	r3, [r7, #11]
      break;
 800e670:	bf00      	nop
  }

  if (err != 0U)
 800e672:	7afb      	ldrb	r3, [r7, #11]
 800e674:	2b00      	cmp	r3, #0
 800e676:	d11e      	bne.n	800e6b6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800e678:	683b      	ldr	r3, [r7, #0]
 800e67a:	88db      	ldrh	r3, [r3, #6]
 800e67c:	2b00      	cmp	r3, #0
 800e67e:	d016      	beq.n	800e6ae <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800e680:	893b      	ldrh	r3, [r7, #8]
 800e682:	2b00      	cmp	r3, #0
 800e684:	d00e      	beq.n	800e6a4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800e686:	683b      	ldr	r3, [r7, #0]
 800e688:	88da      	ldrh	r2, [r3, #6]
 800e68a:	893b      	ldrh	r3, [r7, #8]
 800e68c:	4293      	cmp	r3, r2
 800e68e:	bf28      	it	cs
 800e690:	4613      	movcs	r3, r2
 800e692:	b29b      	uxth	r3, r3
 800e694:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800e696:	893b      	ldrh	r3, [r7, #8]
 800e698:	461a      	mov	r2, r3
 800e69a:	68f9      	ldr	r1, [r7, #12]
 800e69c:	6878      	ldr	r0, [r7, #4]
 800e69e:	f000 fa5d 	bl	800eb5c <USBD_CtlSendData>
 800e6a2:	e009      	b.n	800e6b8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800e6a4:	6839      	ldr	r1, [r7, #0]
 800e6a6:	6878      	ldr	r0, [r7, #4]
 800e6a8:	f000 f9e7 	bl	800ea7a <USBD_CtlError>
 800e6ac:	e004      	b.n	800e6b8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800e6ae:	6878      	ldr	r0, [r7, #4]
 800e6b0:	f000 faae 	bl	800ec10 <USBD_CtlSendStatus>
 800e6b4:	e000      	b.n	800e6b8 <USBD_GetDescriptor+0x2cc>
    return;
 800e6b6:	bf00      	nop
  }
}
 800e6b8:	3710      	adds	r7, #16
 800e6ba:	46bd      	mov	sp, r7
 800e6bc:	bd80      	pop	{r7, pc}
 800e6be:	bf00      	nop

0800e6c0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e6c0:	b580      	push	{r7, lr}
 800e6c2:	b084      	sub	sp, #16
 800e6c4:	af00      	add	r7, sp, #0
 800e6c6:	6078      	str	r0, [r7, #4]
 800e6c8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800e6ca:	683b      	ldr	r3, [r7, #0]
 800e6cc:	889b      	ldrh	r3, [r3, #4]
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	d131      	bne.n	800e736 <USBD_SetAddress+0x76>
 800e6d2:	683b      	ldr	r3, [r7, #0]
 800e6d4:	88db      	ldrh	r3, [r3, #6]
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	d12d      	bne.n	800e736 <USBD_SetAddress+0x76>
 800e6da:	683b      	ldr	r3, [r7, #0]
 800e6dc:	885b      	ldrh	r3, [r3, #2]
 800e6de:	2b7f      	cmp	r3, #127	; 0x7f
 800e6e0:	d829      	bhi.n	800e736 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800e6e2:	683b      	ldr	r3, [r7, #0]
 800e6e4:	885b      	ldrh	r3, [r3, #2]
 800e6e6:	b2db      	uxtb	r3, r3
 800e6e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e6ec:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e6f4:	b2db      	uxtb	r3, r3
 800e6f6:	2b03      	cmp	r3, #3
 800e6f8:	d104      	bne.n	800e704 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800e6fa:	6839      	ldr	r1, [r7, #0]
 800e6fc:	6878      	ldr	r0, [r7, #4]
 800e6fe:	f000 f9bc 	bl	800ea7a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e702:	e01d      	b.n	800e740 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	7bfa      	ldrb	r2, [r7, #15]
 800e708:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800e70c:	7bfb      	ldrb	r3, [r7, #15]
 800e70e:	4619      	mov	r1, r3
 800e710:	6878      	ldr	r0, [r7, #4]
 800e712:	f002 fcf3 	bl	80110fc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800e716:	6878      	ldr	r0, [r7, #4]
 800e718:	f000 fa7a 	bl	800ec10 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800e71c:	7bfb      	ldrb	r3, [r7, #15]
 800e71e:	2b00      	cmp	r3, #0
 800e720:	d004      	beq.n	800e72c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	2202      	movs	r2, #2
 800e726:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e72a:	e009      	b.n	800e740 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	2201      	movs	r2, #1
 800e730:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e734:	e004      	b.n	800e740 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800e736:	6839      	ldr	r1, [r7, #0]
 800e738:	6878      	ldr	r0, [r7, #4]
 800e73a:	f000 f99e 	bl	800ea7a <USBD_CtlError>
  }
}
 800e73e:	bf00      	nop
 800e740:	bf00      	nop
 800e742:	3710      	adds	r7, #16
 800e744:	46bd      	mov	sp, r7
 800e746:	bd80      	pop	{r7, pc}

0800e748 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e748:	b580      	push	{r7, lr}
 800e74a:	b084      	sub	sp, #16
 800e74c:	af00      	add	r7, sp, #0
 800e74e:	6078      	str	r0, [r7, #4]
 800e750:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e752:	2300      	movs	r3, #0
 800e754:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800e756:	683b      	ldr	r3, [r7, #0]
 800e758:	885b      	ldrh	r3, [r3, #2]
 800e75a:	b2da      	uxtb	r2, r3
 800e75c:	4b4e      	ldr	r3, [pc, #312]	; (800e898 <USBD_SetConfig+0x150>)
 800e75e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800e760:	4b4d      	ldr	r3, [pc, #308]	; (800e898 <USBD_SetConfig+0x150>)
 800e762:	781b      	ldrb	r3, [r3, #0]
 800e764:	2b01      	cmp	r3, #1
 800e766:	d905      	bls.n	800e774 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800e768:	6839      	ldr	r1, [r7, #0]
 800e76a:	6878      	ldr	r0, [r7, #4]
 800e76c:	f000 f985 	bl	800ea7a <USBD_CtlError>
    return USBD_FAIL;
 800e770:	2303      	movs	r3, #3
 800e772:	e08c      	b.n	800e88e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e77a:	b2db      	uxtb	r3, r3
 800e77c:	2b02      	cmp	r3, #2
 800e77e:	d002      	beq.n	800e786 <USBD_SetConfig+0x3e>
 800e780:	2b03      	cmp	r3, #3
 800e782:	d029      	beq.n	800e7d8 <USBD_SetConfig+0x90>
 800e784:	e075      	b.n	800e872 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800e786:	4b44      	ldr	r3, [pc, #272]	; (800e898 <USBD_SetConfig+0x150>)
 800e788:	781b      	ldrb	r3, [r3, #0]
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	d020      	beq.n	800e7d0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800e78e:	4b42      	ldr	r3, [pc, #264]	; (800e898 <USBD_SetConfig+0x150>)
 800e790:	781b      	ldrb	r3, [r3, #0]
 800e792:	461a      	mov	r2, r3
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e798:	4b3f      	ldr	r3, [pc, #252]	; (800e898 <USBD_SetConfig+0x150>)
 800e79a:	781b      	ldrb	r3, [r3, #0]
 800e79c:	4619      	mov	r1, r3
 800e79e:	6878      	ldr	r0, [r7, #4]
 800e7a0:	f7fe ffe1 	bl	800d766 <USBD_SetClassConfig>
 800e7a4:	4603      	mov	r3, r0
 800e7a6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800e7a8:	7bfb      	ldrb	r3, [r7, #15]
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	d008      	beq.n	800e7c0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800e7ae:	6839      	ldr	r1, [r7, #0]
 800e7b0:	6878      	ldr	r0, [r7, #4]
 800e7b2:	f000 f962 	bl	800ea7a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	2202      	movs	r2, #2
 800e7ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e7be:	e065      	b.n	800e88c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800e7c0:	6878      	ldr	r0, [r7, #4]
 800e7c2:	f000 fa25 	bl	800ec10 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	2203      	movs	r2, #3
 800e7ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800e7ce:	e05d      	b.n	800e88c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800e7d0:	6878      	ldr	r0, [r7, #4]
 800e7d2:	f000 fa1d 	bl	800ec10 <USBD_CtlSendStatus>
      break;
 800e7d6:	e059      	b.n	800e88c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800e7d8:	4b2f      	ldr	r3, [pc, #188]	; (800e898 <USBD_SetConfig+0x150>)
 800e7da:	781b      	ldrb	r3, [r3, #0]
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	d112      	bne.n	800e806 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	2202      	movs	r2, #2
 800e7e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800e7e8:	4b2b      	ldr	r3, [pc, #172]	; (800e898 <USBD_SetConfig+0x150>)
 800e7ea:	781b      	ldrb	r3, [r3, #0]
 800e7ec:	461a      	mov	r2, r3
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e7f2:	4b29      	ldr	r3, [pc, #164]	; (800e898 <USBD_SetConfig+0x150>)
 800e7f4:	781b      	ldrb	r3, [r3, #0]
 800e7f6:	4619      	mov	r1, r3
 800e7f8:	6878      	ldr	r0, [r7, #4]
 800e7fa:	f7fe ffd0 	bl	800d79e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800e7fe:	6878      	ldr	r0, [r7, #4]
 800e800:	f000 fa06 	bl	800ec10 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e804:	e042      	b.n	800e88c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800e806:	4b24      	ldr	r3, [pc, #144]	; (800e898 <USBD_SetConfig+0x150>)
 800e808:	781b      	ldrb	r3, [r3, #0]
 800e80a:	461a      	mov	r2, r3
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	685b      	ldr	r3, [r3, #4]
 800e810:	429a      	cmp	r2, r3
 800e812:	d02a      	beq.n	800e86a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	685b      	ldr	r3, [r3, #4]
 800e818:	b2db      	uxtb	r3, r3
 800e81a:	4619      	mov	r1, r3
 800e81c:	6878      	ldr	r0, [r7, #4]
 800e81e:	f7fe ffbe 	bl	800d79e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800e822:	4b1d      	ldr	r3, [pc, #116]	; (800e898 <USBD_SetConfig+0x150>)
 800e824:	781b      	ldrb	r3, [r3, #0]
 800e826:	461a      	mov	r2, r3
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e82c:	4b1a      	ldr	r3, [pc, #104]	; (800e898 <USBD_SetConfig+0x150>)
 800e82e:	781b      	ldrb	r3, [r3, #0]
 800e830:	4619      	mov	r1, r3
 800e832:	6878      	ldr	r0, [r7, #4]
 800e834:	f7fe ff97 	bl	800d766 <USBD_SetClassConfig>
 800e838:	4603      	mov	r3, r0
 800e83a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800e83c:	7bfb      	ldrb	r3, [r7, #15]
 800e83e:	2b00      	cmp	r3, #0
 800e840:	d00f      	beq.n	800e862 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800e842:	6839      	ldr	r1, [r7, #0]
 800e844:	6878      	ldr	r0, [r7, #4]
 800e846:	f000 f918 	bl	800ea7a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	685b      	ldr	r3, [r3, #4]
 800e84e:	b2db      	uxtb	r3, r3
 800e850:	4619      	mov	r1, r3
 800e852:	6878      	ldr	r0, [r7, #4]
 800e854:	f7fe ffa3 	bl	800d79e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	2202      	movs	r2, #2
 800e85c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800e860:	e014      	b.n	800e88c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800e862:	6878      	ldr	r0, [r7, #4]
 800e864:	f000 f9d4 	bl	800ec10 <USBD_CtlSendStatus>
      break;
 800e868:	e010      	b.n	800e88c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800e86a:	6878      	ldr	r0, [r7, #4]
 800e86c:	f000 f9d0 	bl	800ec10 <USBD_CtlSendStatus>
      break;
 800e870:	e00c      	b.n	800e88c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800e872:	6839      	ldr	r1, [r7, #0]
 800e874:	6878      	ldr	r0, [r7, #4]
 800e876:	f000 f900 	bl	800ea7a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e87a:	4b07      	ldr	r3, [pc, #28]	; (800e898 <USBD_SetConfig+0x150>)
 800e87c:	781b      	ldrb	r3, [r3, #0]
 800e87e:	4619      	mov	r1, r3
 800e880:	6878      	ldr	r0, [r7, #4]
 800e882:	f7fe ff8c 	bl	800d79e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800e886:	2303      	movs	r3, #3
 800e888:	73fb      	strb	r3, [r7, #15]
      break;
 800e88a:	bf00      	nop
  }

  return ret;
 800e88c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e88e:	4618      	mov	r0, r3
 800e890:	3710      	adds	r7, #16
 800e892:	46bd      	mov	sp, r7
 800e894:	bd80      	pop	{r7, pc}
 800e896:	bf00      	nop
 800e898:	20002228 	.word	0x20002228

0800e89c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e89c:	b580      	push	{r7, lr}
 800e89e:	b082      	sub	sp, #8
 800e8a0:	af00      	add	r7, sp, #0
 800e8a2:	6078      	str	r0, [r7, #4]
 800e8a4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800e8a6:	683b      	ldr	r3, [r7, #0]
 800e8a8:	88db      	ldrh	r3, [r3, #6]
 800e8aa:	2b01      	cmp	r3, #1
 800e8ac:	d004      	beq.n	800e8b8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800e8ae:	6839      	ldr	r1, [r7, #0]
 800e8b0:	6878      	ldr	r0, [r7, #4]
 800e8b2:	f000 f8e2 	bl	800ea7a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800e8b6:	e023      	b.n	800e900 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e8be:	b2db      	uxtb	r3, r3
 800e8c0:	2b02      	cmp	r3, #2
 800e8c2:	dc02      	bgt.n	800e8ca <USBD_GetConfig+0x2e>
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	dc03      	bgt.n	800e8d0 <USBD_GetConfig+0x34>
 800e8c8:	e015      	b.n	800e8f6 <USBD_GetConfig+0x5a>
 800e8ca:	2b03      	cmp	r3, #3
 800e8cc:	d00b      	beq.n	800e8e6 <USBD_GetConfig+0x4a>
 800e8ce:	e012      	b.n	800e8f6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	2200      	movs	r2, #0
 800e8d4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	3308      	adds	r3, #8
 800e8da:	2201      	movs	r2, #1
 800e8dc:	4619      	mov	r1, r3
 800e8de:	6878      	ldr	r0, [r7, #4]
 800e8e0:	f000 f93c 	bl	800eb5c <USBD_CtlSendData>
        break;
 800e8e4:	e00c      	b.n	800e900 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	3304      	adds	r3, #4
 800e8ea:	2201      	movs	r2, #1
 800e8ec:	4619      	mov	r1, r3
 800e8ee:	6878      	ldr	r0, [r7, #4]
 800e8f0:	f000 f934 	bl	800eb5c <USBD_CtlSendData>
        break;
 800e8f4:	e004      	b.n	800e900 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800e8f6:	6839      	ldr	r1, [r7, #0]
 800e8f8:	6878      	ldr	r0, [r7, #4]
 800e8fa:	f000 f8be 	bl	800ea7a <USBD_CtlError>
        break;
 800e8fe:	bf00      	nop
}
 800e900:	bf00      	nop
 800e902:	3708      	adds	r7, #8
 800e904:	46bd      	mov	sp, r7
 800e906:	bd80      	pop	{r7, pc}

0800e908 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e908:	b580      	push	{r7, lr}
 800e90a:	b082      	sub	sp, #8
 800e90c:	af00      	add	r7, sp, #0
 800e90e:	6078      	str	r0, [r7, #4]
 800e910:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e918:	b2db      	uxtb	r3, r3
 800e91a:	3b01      	subs	r3, #1
 800e91c:	2b02      	cmp	r3, #2
 800e91e:	d81e      	bhi.n	800e95e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800e920:	683b      	ldr	r3, [r7, #0]
 800e922:	88db      	ldrh	r3, [r3, #6]
 800e924:	2b02      	cmp	r3, #2
 800e926:	d004      	beq.n	800e932 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800e928:	6839      	ldr	r1, [r7, #0]
 800e92a:	6878      	ldr	r0, [r7, #4]
 800e92c:	f000 f8a5 	bl	800ea7a <USBD_CtlError>
        break;
 800e930:	e01a      	b.n	800e968 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	2201      	movs	r2, #1
 800e936:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800e93e:	2b00      	cmp	r3, #0
 800e940:	d005      	beq.n	800e94e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	68db      	ldr	r3, [r3, #12]
 800e946:	f043 0202 	orr.w	r2, r3, #2
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	330c      	adds	r3, #12
 800e952:	2202      	movs	r2, #2
 800e954:	4619      	mov	r1, r3
 800e956:	6878      	ldr	r0, [r7, #4]
 800e958:	f000 f900 	bl	800eb5c <USBD_CtlSendData>
      break;
 800e95c:	e004      	b.n	800e968 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800e95e:	6839      	ldr	r1, [r7, #0]
 800e960:	6878      	ldr	r0, [r7, #4]
 800e962:	f000 f88a 	bl	800ea7a <USBD_CtlError>
      break;
 800e966:	bf00      	nop
  }
}
 800e968:	bf00      	nop
 800e96a:	3708      	adds	r7, #8
 800e96c:	46bd      	mov	sp, r7
 800e96e:	bd80      	pop	{r7, pc}

0800e970 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e970:	b580      	push	{r7, lr}
 800e972:	b082      	sub	sp, #8
 800e974:	af00      	add	r7, sp, #0
 800e976:	6078      	str	r0, [r7, #4]
 800e978:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e97a:	683b      	ldr	r3, [r7, #0]
 800e97c:	885b      	ldrh	r3, [r3, #2]
 800e97e:	2b01      	cmp	r3, #1
 800e980:	d107      	bne.n	800e992 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	2201      	movs	r2, #1
 800e986:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800e98a:	6878      	ldr	r0, [r7, #4]
 800e98c:	f000 f940 	bl	800ec10 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800e990:	e013      	b.n	800e9ba <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800e992:	683b      	ldr	r3, [r7, #0]
 800e994:	885b      	ldrh	r3, [r3, #2]
 800e996:	2b02      	cmp	r3, #2
 800e998:	d10b      	bne.n	800e9b2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800e99a:	683b      	ldr	r3, [r7, #0]
 800e99c:	889b      	ldrh	r3, [r3, #4]
 800e99e:	0a1b      	lsrs	r3, r3, #8
 800e9a0:	b29b      	uxth	r3, r3
 800e9a2:	b2da      	uxtb	r2, r3
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800e9aa:	6878      	ldr	r0, [r7, #4]
 800e9ac:	f000 f930 	bl	800ec10 <USBD_CtlSendStatus>
}
 800e9b0:	e003      	b.n	800e9ba <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800e9b2:	6839      	ldr	r1, [r7, #0]
 800e9b4:	6878      	ldr	r0, [r7, #4]
 800e9b6:	f000 f860 	bl	800ea7a <USBD_CtlError>
}
 800e9ba:	bf00      	nop
 800e9bc:	3708      	adds	r7, #8
 800e9be:	46bd      	mov	sp, r7
 800e9c0:	bd80      	pop	{r7, pc}

0800e9c2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e9c2:	b580      	push	{r7, lr}
 800e9c4:	b082      	sub	sp, #8
 800e9c6:	af00      	add	r7, sp, #0
 800e9c8:	6078      	str	r0, [r7, #4]
 800e9ca:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e9d2:	b2db      	uxtb	r3, r3
 800e9d4:	3b01      	subs	r3, #1
 800e9d6:	2b02      	cmp	r3, #2
 800e9d8:	d80b      	bhi.n	800e9f2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e9da:	683b      	ldr	r3, [r7, #0]
 800e9dc:	885b      	ldrh	r3, [r3, #2]
 800e9de:	2b01      	cmp	r3, #1
 800e9e0:	d10c      	bne.n	800e9fc <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	2200      	movs	r2, #0
 800e9e6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800e9ea:	6878      	ldr	r0, [r7, #4]
 800e9ec:	f000 f910 	bl	800ec10 <USBD_CtlSendStatus>
      }
      break;
 800e9f0:	e004      	b.n	800e9fc <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800e9f2:	6839      	ldr	r1, [r7, #0]
 800e9f4:	6878      	ldr	r0, [r7, #4]
 800e9f6:	f000 f840 	bl	800ea7a <USBD_CtlError>
      break;
 800e9fa:	e000      	b.n	800e9fe <USBD_ClrFeature+0x3c>
      break;
 800e9fc:	bf00      	nop
  }
}
 800e9fe:	bf00      	nop
 800ea00:	3708      	adds	r7, #8
 800ea02:	46bd      	mov	sp, r7
 800ea04:	bd80      	pop	{r7, pc}

0800ea06 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ea06:	b580      	push	{r7, lr}
 800ea08:	b084      	sub	sp, #16
 800ea0a:	af00      	add	r7, sp, #0
 800ea0c:	6078      	str	r0, [r7, #4]
 800ea0e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800ea10:	683b      	ldr	r3, [r7, #0]
 800ea12:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800ea14:	68fb      	ldr	r3, [r7, #12]
 800ea16:	781a      	ldrb	r2, [r3, #0]
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800ea1c:	68fb      	ldr	r3, [r7, #12]
 800ea1e:	3301      	adds	r3, #1
 800ea20:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800ea22:	68fb      	ldr	r3, [r7, #12]
 800ea24:	781a      	ldrb	r2, [r3, #0]
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800ea2a:	68fb      	ldr	r3, [r7, #12]
 800ea2c:	3301      	adds	r3, #1
 800ea2e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800ea30:	68f8      	ldr	r0, [r7, #12]
 800ea32:	f7ff fa41 	bl	800deb8 <SWAPBYTE>
 800ea36:	4603      	mov	r3, r0
 800ea38:	461a      	mov	r2, r3
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800ea3e:	68fb      	ldr	r3, [r7, #12]
 800ea40:	3301      	adds	r3, #1
 800ea42:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ea44:	68fb      	ldr	r3, [r7, #12]
 800ea46:	3301      	adds	r3, #1
 800ea48:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800ea4a:	68f8      	ldr	r0, [r7, #12]
 800ea4c:	f7ff fa34 	bl	800deb8 <SWAPBYTE>
 800ea50:	4603      	mov	r3, r0
 800ea52:	461a      	mov	r2, r3
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800ea58:	68fb      	ldr	r3, [r7, #12]
 800ea5a:	3301      	adds	r3, #1
 800ea5c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ea5e:	68fb      	ldr	r3, [r7, #12]
 800ea60:	3301      	adds	r3, #1
 800ea62:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800ea64:	68f8      	ldr	r0, [r7, #12]
 800ea66:	f7ff fa27 	bl	800deb8 <SWAPBYTE>
 800ea6a:	4603      	mov	r3, r0
 800ea6c:	461a      	mov	r2, r3
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	80da      	strh	r2, [r3, #6]
}
 800ea72:	bf00      	nop
 800ea74:	3710      	adds	r7, #16
 800ea76:	46bd      	mov	sp, r7
 800ea78:	bd80      	pop	{r7, pc}

0800ea7a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ea7a:	b580      	push	{r7, lr}
 800ea7c:	b082      	sub	sp, #8
 800ea7e:	af00      	add	r7, sp, #0
 800ea80:	6078      	str	r0, [r7, #4]
 800ea82:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ea84:	2180      	movs	r1, #128	; 0x80
 800ea86:	6878      	ldr	r0, [r7, #4]
 800ea88:	f002 face 	bl	8011028 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ea8c:	2100      	movs	r1, #0
 800ea8e:	6878      	ldr	r0, [r7, #4]
 800ea90:	f002 faca 	bl	8011028 <USBD_LL_StallEP>
}
 800ea94:	bf00      	nop
 800ea96:	3708      	adds	r7, #8
 800ea98:	46bd      	mov	sp, r7
 800ea9a:	bd80      	pop	{r7, pc}

0800ea9c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ea9c:	b580      	push	{r7, lr}
 800ea9e:	b086      	sub	sp, #24
 800eaa0:	af00      	add	r7, sp, #0
 800eaa2:	60f8      	str	r0, [r7, #12]
 800eaa4:	60b9      	str	r1, [r7, #8]
 800eaa6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800eaa8:	2300      	movs	r3, #0
 800eaaa:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800eaac:	68fb      	ldr	r3, [r7, #12]
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	d036      	beq.n	800eb20 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800eab2:	68fb      	ldr	r3, [r7, #12]
 800eab4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800eab6:	6938      	ldr	r0, [r7, #16]
 800eab8:	f000 f836 	bl	800eb28 <USBD_GetLen>
 800eabc:	4603      	mov	r3, r0
 800eabe:	3301      	adds	r3, #1
 800eac0:	b29b      	uxth	r3, r3
 800eac2:	005b      	lsls	r3, r3, #1
 800eac4:	b29a      	uxth	r2, r3
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800eaca:	7dfb      	ldrb	r3, [r7, #23]
 800eacc:	68ba      	ldr	r2, [r7, #8]
 800eace:	4413      	add	r3, r2
 800ead0:	687a      	ldr	r2, [r7, #4]
 800ead2:	7812      	ldrb	r2, [r2, #0]
 800ead4:	701a      	strb	r2, [r3, #0]
  idx++;
 800ead6:	7dfb      	ldrb	r3, [r7, #23]
 800ead8:	3301      	adds	r3, #1
 800eada:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800eadc:	7dfb      	ldrb	r3, [r7, #23]
 800eade:	68ba      	ldr	r2, [r7, #8]
 800eae0:	4413      	add	r3, r2
 800eae2:	2203      	movs	r2, #3
 800eae4:	701a      	strb	r2, [r3, #0]
  idx++;
 800eae6:	7dfb      	ldrb	r3, [r7, #23]
 800eae8:	3301      	adds	r3, #1
 800eaea:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800eaec:	e013      	b.n	800eb16 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800eaee:	7dfb      	ldrb	r3, [r7, #23]
 800eaf0:	68ba      	ldr	r2, [r7, #8]
 800eaf2:	4413      	add	r3, r2
 800eaf4:	693a      	ldr	r2, [r7, #16]
 800eaf6:	7812      	ldrb	r2, [r2, #0]
 800eaf8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800eafa:	693b      	ldr	r3, [r7, #16]
 800eafc:	3301      	adds	r3, #1
 800eafe:	613b      	str	r3, [r7, #16]
    idx++;
 800eb00:	7dfb      	ldrb	r3, [r7, #23]
 800eb02:	3301      	adds	r3, #1
 800eb04:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800eb06:	7dfb      	ldrb	r3, [r7, #23]
 800eb08:	68ba      	ldr	r2, [r7, #8]
 800eb0a:	4413      	add	r3, r2
 800eb0c:	2200      	movs	r2, #0
 800eb0e:	701a      	strb	r2, [r3, #0]
    idx++;
 800eb10:	7dfb      	ldrb	r3, [r7, #23]
 800eb12:	3301      	adds	r3, #1
 800eb14:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800eb16:	693b      	ldr	r3, [r7, #16]
 800eb18:	781b      	ldrb	r3, [r3, #0]
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	d1e7      	bne.n	800eaee <USBD_GetString+0x52>
 800eb1e:	e000      	b.n	800eb22 <USBD_GetString+0x86>
    return;
 800eb20:	bf00      	nop
  }
}
 800eb22:	3718      	adds	r7, #24
 800eb24:	46bd      	mov	sp, r7
 800eb26:	bd80      	pop	{r7, pc}

0800eb28 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800eb28:	b480      	push	{r7}
 800eb2a:	b085      	sub	sp, #20
 800eb2c:	af00      	add	r7, sp, #0
 800eb2e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800eb30:	2300      	movs	r3, #0
 800eb32:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800eb38:	e005      	b.n	800eb46 <USBD_GetLen+0x1e>
  {
    len++;
 800eb3a:	7bfb      	ldrb	r3, [r7, #15]
 800eb3c:	3301      	adds	r3, #1
 800eb3e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800eb40:	68bb      	ldr	r3, [r7, #8]
 800eb42:	3301      	adds	r3, #1
 800eb44:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800eb46:	68bb      	ldr	r3, [r7, #8]
 800eb48:	781b      	ldrb	r3, [r3, #0]
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	d1f5      	bne.n	800eb3a <USBD_GetLen+0x12>
  }

  return len;
 800eb4e:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb50:	4618      	mov	r0, r3
 800eb52:	3714      	adds	r7, #20
 800eb54:	46bd      	mov	sp, r7
 800eb56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb5a:	4770      	bx	lr

0800eb5c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800eb5c:	b580      	push	{r7, lr}
 800eb5e:	b084      	sub	sp, #16
 800eb60:	af00      	add	r7, sp, #0
 800eb62:	60f8      	str	r0, [r7, #12]
 800eb64:	60b9      	str	r1, [r7, #8]
 800eb66:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800eb68:	68fb      	ldr	r3, [r7, #12]
 800eb6a:	2202      	movs	r2, #2
 800eb6c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800eb70:	68fb      	ldr	r3, [r7, #12]
 800eb72:	687a      	ldr	r2, [r7, #4]
 800eb74:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800eb76:	68fb      	ldr	r3, [r7, #12]
 800eb78:	687a      	ldr	r2, [r7, #4]
 800eb7a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	68ba      	ldr	r2, [r7, #8]
 800eb80:	2100      	movs	r1, #0
 800eb82:	68f8      	ldr	r0, [r7, #12]
 800eb84:	f002 fad9 	bl	801113a <USBD_LL_Transmit>

  return USBD_OK;
 800eb88:	2300      	movs	r3, #0
}
 800eb8a:	4618      	mov	r0, r3
 800eb8c:	3710      	adds	r7, #16
 800eb8e:	46bd      	mov	sp, r7
 800eb90:	bd80      	pop	{r7, pc}

0800eb92 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800eb92:	b580      	push	{r7, lr}
 800eb94:	b084      	sub	sp, #16
 800eb96:	af00      	add	r7, sp, #0
 800eb98:	60f8      	str	r0, [r7, #12]
 800eb9a:	60b9      	str	r1, [r7, #8]
 800eb9c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	68ba      	ldr	r2, [r7, #8]
 800eba2:	2100      	movs	r1, #0
 800eba4:	68f8      	ldr	r0, [r7, #12]
 800eba6:	f002 fac8 	bl	801113a <USBD_LL_Transmit>

  return USBD_OK;
 800ebaa:	2300      	movs	r3, #0
}
 800ebac:	4618      	mov	r0, r3
 800ebae:	3710      	adds	r7, #16
 800ebb0:	46bd      	mov	sp, r7
 800ebb2:	bd80      	pop	{r7, pc}

0800ebb4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800ebb4:	b580      	push	{r7, lr}
 800ebb6:	b084      	sub	sp, #16
 800ebb8:	af00      	add	r7, sp, #0
 800ebba:	60f8      	str	r0, [r7, #12]
 800ebbc:	60b9      	str	r1, [r7, #8]
 800ebbe:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ebc0:	68fb      	ldr	r3, [r7, #12]
 800ebc2:	2203      	movs	r2, #3
 800ebc4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800ebc8:	68fb      	ldr	r3, [r7, #12]
 800ebca:	687a      	ldr	r2, [r7, #4]
 800ebcc:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800ebd0:	68fb      	ldr	r3, [r7, #12]
 800ebd2:	687a      	ldr	r2, [r7, #4]
 800ebd4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	68ba      	ldr	r2, [r7, #8]
 800ebdc:	2100      	movs	r1, #0
 800ebde:	68f8      	ldr	r0, [r7, #12]
 800ebe0:	f002 facc 	bl	801117c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ebe4:	2300      	movs	r3, #0
}
 800ebe6:	4618      	mov	r0, r3
 800ebe8:	3710      	adds	r7, #16
 800ebea:	46bd      	mov	sp, r7
 800ebec:	bd80      	pop	{r7, pc}

0800ebee <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800ebee:	b580      	push	{r7, lr}
 800ebf0:	b084      	sub	sp, #16
 800ebf2:	af00      	add	r7, sp, #0
 800ebf4:	60f8      	str	r0, [r7, #12]
 800ebf6:	60b9      	str	r1, [r7, #8]
 800ebf8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	68ba      	ldr	r2, [r7, #8]
 800ebfe:	2100      	movs	r1, #0
 800ec00:	68f8      	ldr	r0, [r7, #12]
 800ec02:	f002 fabb 	bl	801117c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ec06:	2300      	movs	r3, #0
}
 800ec08:	4618      	mov	r0, r3
 800ec0a:	3710      	adds	r7, #16
 800ec0c:	46bd      	mov	sp, r7
 800ec0e:	bd80      	pop	{r7, pc}

0800ec10 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ec10:	b580      	push	{r7, lr}
 800ec12:	b082      	sub	sp, #8
 800ec14:	af00      	add	r7, sp, #0
 800ec16:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	2204      	movs	r2, #4
 800ec1c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ec20:	2300      	movs	r3, #0
 800ec22:	2200      	movs	r2, #0
 800ec24:	2100      	movs	r1, #0
 800ec26:	6878      	ldr	r0, [r7, #4]
 800ec28:	f002 fa87 	bl	801113a <USBD_LL_Transmit>

  return USBD_OK;
 800ec2c:	2300      	movs	r3, #0
}
 800ec2e:	4618      	mov	r0, r3
 800ec30:	3708      	adds	r7, #8
 800ec32:	46bd      	mov	sp, r7
 800ec34:	bd80      	pop	{r7, pc}

0800ec36 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ec36:	b580      	push	{r7, lr}
 800ec38:	b082      	sub	sp, #8
 800ec3a:	af00      	add	r7, sp, #0
 800ec3c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	2205      	movs	r2, #5
 800ec42:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ec46:	2300      	movs	r3, #0
 800ec48:	2200      	movs	r2, #0
 800ec4a:	2100      	movs	r1, #0
 800ec4c:	6878      	ldr	r0, [r7, #4]
 800ec4e:	f002 fa95 	bl	801117c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ec52:	2300      	movs	r3, #0
}
 800ec54:	4618      	mov	r0, r3
 800ec56:	3708      	adds	r7, #8
 800ec58:	46bd      	mov	sp, r7
 800ec5a:	bd80      	pop	{r7, pc}

0800ec5c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800ec5c:	b480      	push	{r7}
 800ec5e:	b085      	sub	sp, #20
 800ec60:	af00      	add	r7, sp, #0
 800ec62:	4603      	mov	r3, r0
 800ec64:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800ec66:	2300      	movs	r3, #0
 800ec68:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800ec6a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ec6e:	2b84      	cmp	r3, #132	; 0x84
 800ec70:	d005      	beq.n	800ec7e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800ec72:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800ec76:	68fb      	ldr	r3, [r7, #12]
 800ec78:	4413      	add	r3, r2
 800ec7a:	3303      	adds	r3, #3
 800ec7c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800ec7e:	68fb      	ldr	r3, [r7, #12]
}
 800ec80:	4618      	mov	r0, r3
 800ec82:	3714      	adds	r7, #20
 800ec84:	46bd      	mov	sp, r7
 800ec86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec8a:	4770      	bx	lr

0800ec8c <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800ec8c:	b480      	push	{r7}
 800ec8e:	b083      	sub	sp, #12
 800ec90:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ec92:	f3ef 8305 	mrs	r3, IPSR
 800ec96:	607b      	str	r3, [r7, #4]
  return(result);
 800ec98:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800ec9a:	2b00      	cmp	r3, #0
 800ec9c:	bf14      	ite	ne
 800ec9e:	2301      	movne	r3, #1
 800eca0:	2300      	moveq	r3, #0
 800eca2:	b2db      	uxtb	r3, r3
}
 800eca4:	4618      	mov	r0, r3
 800eca6:	370c      	adds	r7, #12
 800eca8:	46bd      	mov	sp, r7
 800ecaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecae:	4770      	bx	lr

0800ecb0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800ecb0:	b580      	push	{r7, lr}
 800ecb2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800ecb4:	f000 fba8 	bl	800f408 <vTaskStartScheduler>
  
  return osOK;
 800ecb8:	2300      	movs	r3, #0
}
 800ecba:	4618      	mov	r0, r3
 800ecbc:	bd80      	pop	{r7, pc}

0800ecbe <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800ecbe:	b580      	push	{r7, lr}
 800ecc0:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800ecc2:	f7ff ffe3 	bl	800ec8c <inHandlerMode>
 800ecc6:	4603      	mov	r3, r0
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	d003      	beq.n	800ecd4 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800eccc:	f000 fca6 	bl	800f61c <xTaskGetTickCountFromISR>
 800ecd0:	4603      	mov	r3, r0
 800ecd2:	e002      	b.n	800ecda <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800ecd4:	f000 fc92 	bl	800f5fc <xTaskGetTickCount>
 800ecd8:	4603      	mov	r3, r0
  }
}
 800ecda:	4618      	mov	r0, r3
 800ecdc:	bd80      	pop	{r7, pc}

0800ecde <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800ecde:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ece0:	b087      	sub	sp, #28
 800ece2:	af02      	add	r7, sp, #8
 800ece4:	6078      	str	r0, [r7, #4]
 800ece6:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	685c      	ldr	r4, [r3, #4]
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ecf4:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ecfc:	4618      	mov	r0, r3
 800ecfe:	f7ff ffad 	bl	800ec5c <makeFreeRtosPriority>
 800ed02:	4602      	mov	r2, r0
 800ed04:	f107 030c 	add.w	r3, r7, #12
 800ed08:	9301      	str	r3, [sp, #4]
 800ed0a:	9200      	str	r2, [sp, #0]
 800ed0c:	683b      	ldr	r3, [r7, #0]
 800ed0e:	4632      	mov	r2, r6
 800ed10:	4629      	mov	r1, r5
 800ed12:	4620      	mov	r0, r4
 800ed14:	f000 f974 	bl	800f000 <xTaskCreate>
 800ed18:	4603      	mov	r3, r0
 800ed1a:	2b01      	cmp	r3, #1
 800ed1c:	d001      	beq.n	800ed22 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 800ed1e:	2300      	movs	r3, #0
 800ed20:	e000      	b.n	800ed24 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 800ed22:	68fb      	ldr	r3, [r7, #12]
}
 800ed24:	4618      	mov	r0, r3
 800ed26:	3714      	adds	r7, #20
 800ed28:	46bd      	mov	sp, r7
 800ed2a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ed2c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800ed2c:	b580      	push	{r7, lr}
 800ed2e:	b084      	sub	sp, #16
 800ed30:	af00      	add	r7, sp, #0
 800ed32:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800ed38:	68fb      	ldr	r3, [r7, #12]
 800ed3a:	2b00      	cmp	r3, #0
 800ed3c:	d001      	beq.n	800ed42 <osDelay+0x16>
 800ed3e:	68fb      	ldr	r3, [r7, #12]
 800ed40:	e000      	b.n	800ed44 <osDelay+0x18>
 800ed42:	2301      	movs	r3, #1
 800ed44:	4618      	mov	r0, r3
 800ed46:	f000 fb2b 	bl	800f3a0 <vTaskDelay>
  
  return osOK;
 800ed4a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800ed4c:	4618      	mov	r0, r3
 800ed4e:	3710      	adds	r7, #16
 800ed50:	46bd      	mov	sp, r7
 800ed52:	bd80      	pop	{r7, pc}

0800ed54 <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 800ed54:	b580      	push	{r7, lr}
 800ed56:	b086      	sub	sp, #24
 800ed58:	af02      	add	r7, sp, #8
 800ed5a:	6078      	str	r0, [r7, #4]
 800ed5c:	6039      	str	r1, [r7, #0]
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800ed5e:	2300      	movs	r3, #0
 800ed60:	60fb      	str	r3, [r7, #12]
  uint32_t ulPreviousNotificationValue = 0;
 800ed62:	2300      	movs	r3, #0
 800ed64:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode())
 800ed66:	f7ff ff91 	bl	800ec8c <inHandlerMode>
 800ed6a:	4603      	mov	r3, r0
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	d01c      	beq.n	800edaa <osSignalSet+0x56>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 800ed70:	6839      	ldr	r1, [r7, #0]
 800ed72:	f107 0208 	add.w	r2, r7, #8
 800ed76:	f107 030c 	add.w	r3, r7, #12
 800ed7a:	9300      	str	r3, [sp, #0]
 800ed7c:	4613      	mov	r3, r2
 800ed7e:	2201      	movs	r2, #1
 800ed80:	6878      	ldr	r0, [r7, #4]
 800ed82:	f000 ff77 	bl	800fc74 <xTaskGenericNotifyFromISR>
 800ed86:	4603      	mov	r3, r0
 800ed88:	2b01      	cmp	r3, #1
 800ed8a:	d002      	beq.n	800ed92 <osSignalSet+0x3e>
      return 0x80000000;
 800ed8c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ed90:	e019      	b.n	800edc6 <osSignalSet+0x72>
    
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800ed92:	68fb      	ldr	r3, [r7, #12]
 800ed94:	2b00      	cmp	r3, #0
 800ed96:	d015      	beq.n	800edc4 <osSignalSet+0x70>
 800ed98:	4b0d      	ldr	r3, [pc, #52]	; (800edd0 <osSignalSet+0x7c>)
 800ed9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ed9e:	601a      	str	r2, [r3, #0]
 800eda0:	f3bf 8f4f 	dsb	sy
 800eda4:	f3bf 8f6f 	isb	sy
 800eda8:	e00c      	b.n	800edc4 <osSignalSet+0x70>
  }  
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 800edaa:	6839      	ldr	r1, [r7, #0]
 800edac:	f107 0308 	add.w	r3, r7, #8
 800edb0:	2201      	movs	r2, #1
 800edb2:	6878      	ldr	r0, [r7, #4]
 800edb4:	f000 fea0 	bl	800faf8 <xTaskGenericNotify>
 800edb8:	4603      	mov	r3, r0
 800edba:	2b01      	cmp	r3, #1
 800edbc:	d002      	beq.n	800edc4 <osSignalSet+0x70>
    return 0x80000000;
 800edbe:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800edc2:	e000      	b.n	800edc6 <osSignalSet+0x72>
  
  return ulPreviousNotificationValue;
 800edc4:	68bb      	ldr	r3, [r7, #8]
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 800edc6:	4618      	mov	r0, r3
 800edc8:	3710      	adds	r7, #16
 800edca:	46bd      	mov	sp, r7
 800edcc:	bd80      	pop	{r7, pc}
 800edce:	bf00      	nop
 800edd0:	e000ed04 	.word	0xe000ed04

0800edd4 <osSignalWait>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval  event flag information or error code.
* @note   MUST REMAIN UNCHANGED: \b osSignalWait shall be consistent in every CMSIS-RTOS.
*/
osEvent osSignalWait (int32_t signals, uint32_t millisec)
{
 800edd4:	b590      	push	{r4, r7, lr}
 800edd6:	b089      	sub	sp, #36	; 0x24
 800edd8:	af00      	add	r7, sp, #0
 800edda:	60f8      	str	r0, [r7, #12]
 800eddc:	60b9      	str	r1, [r7, #8]
 800edde:	607a      	str	r2, [r7, #4]

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 800ede0:	2300      	movs	r3, #0
 800ede2:	617b      	str	r3, [r7, #20]
  ticks = 0;
 800ede4:	2300      	movs	r3, #0
 800ede6:	61fb      	str	r3, [r7, #28]
  if (millisec == osWaitForever) {
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800edee:	d103      	bne.n	800edf8 <osSignalWait+0x24>
    ticks = portMAX_DELAY;
 800edf0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800edf4:	61fb      	str	r3, [r7, #28]
 800edf6:	e009      	b.n	800ee0c <osSignalWait+0x38>
  }
  else if (millisec != 0) {
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	d006      	beq.n	800ee0c <osSignalWait+0x38>
    ticks = millisec / portTICK_PERIOD_MS;
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	61fb      	str	r3, [r7, #28]
    if (ticks == 0) {
 800ee02:	69fb      	ldr	r3, [r7, #28]
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	d101      	bne.n	800ee0c <osSignalWait+0x38>
      ticks = 1;
 800ee08:	2301      	movs	r3, #1
 800ee0a:	61fb      	str	r3, [r7, #28]
    }
  }  
  
  if (inHandlerMode())
 800ee0c:	f7ff ff3e 	bl	800ec8c <inHandlerMode>
 800ee10:	4603      	mov	r3, r0
 800ee12:	2b00      	cmp	r3, #0
 800ee14:	d002      	beq.n	800ee1c <osSignalWait+0x48>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 800ee16:	2382      	movs	r3, #130	; 0x82
 800ee18:	613b      	str	r3, [r7, #16]
 800ee1a:	e01b      	b.n	800ee54 <osSignalWait+0x80>
  }
  else
  {
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 800ee1c:	68b9      	ldr	r1, [r7, #8]
 800ee1e:	f107 0310 	add.w	r3, r7, #16
 800ee22:	1d1a      	adds	r2, r3, #4
 800ee24:	69fb      	ldr	r3, [r7, #28]
 800ee26:	2000      	movs	r0, #0
 800ee28:	f000 fe06 	bl	800fa38 <xTaskNotifyWait>
 800ee2c:	4603      	mov	r3, r0
 800ee2e:	2b01      	cmp	r3, #1
 800ee30:	d008      	beq.n	800ee44 <osSignalWait+0x70>
    {
      if(ticks == 0)  ret.status = osOK;
 800ee32:	69fb      	ldr	r3, [r7, #28]
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	d102      	bne.n	800ee3e <osSignalWait+0x6a>
 800ee38:	2300      	movs	r3, #0
 800ee3a:	613b      	str	r3, [r7, #16]
 800ee3c:	e00a      	b.n	800ee54 <osSignalWait+0x80>
      else  ret.status = osEventTimeout;
 800ee3e:	2340      	movs	r3, #64	; 0x40
 800ee40:	613b      	str	r3, [r7, #16]
 800ee42:	e007      	b.n	800ee54 <osSignalWait+0x80>
    }
    else if(ret.value.signals < 0)
 800ee44:	697b      	ldr	r3, [r7, #20]
 800ee46:	2b00      	cmp	r3, #0
 800ee48:	da02      	bge.n	800ee50 <osSignalWait+0x7c>
    {
      ret.status =  osErrorValue;     
 800ee4a:	2386      	movs	r3, #134	; 0x86
 800ee4c:	613b      	str	r3, [r7, #16]
 800ee4e:	e001      	b.n	800ee54 <osSignalWait+0x80>
    }
    else  ret.status =  osEventSignal;
 800ee50:	2308      	movs	r3, #8
 800ee52:	613b      	str	r3, [r7, #16]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 800ee54:	68fb      	ldr	r3, [r7, #12]
 800ee56:	461c      	mov	r4, r3
 800ee58:	f107 0310 	add.w	r3, r7, #16
 800ee5c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ee60:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800ee64:	68f8      	ldr	r0, [r7, #12]
 800ee66:	3724      	adds	r7, #36	; 0x24
 800ee68:	46bd      	mov	sp, r7
 800ee6a:	bd90      	pop	{r4, r7, pc}

0800ee6c <osDelayUntil>:
*          prior to its first use (PreviousWakeTime = osKernelSysTick() )
* @param   millisec    time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelayUntil (uint32_t *PreviousWakeTime, uint32_t millisec)
{
 800ee6c:	b580      	push	{r7, lr}
 800ee6e:	b084      	sub	sp, #16
 800ee70:	af00      	add	r7, sp, #0
 800ee72:	6078      	str	r0, [r7, #4]
 800ee74:	6039      	str	r1, [r7, #0]
#if INCLUDE_vTaskDelayUntil
  TickType_t ticks = (millisec / portTICK_PERIOD_MS);
 800ee76:	683b      	ldr	r3, [r7, #0]
 800ee78:	60fb      	str	r3, [r7, #12]
  vTaskDelayUntil((TickType_t *) PreviousWakeTime, ticks ? ticks : 1);
 800ee7a:	68fb      	ldr	r3, [r7, #12]
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	d001      	beq.n	800ee84 <osDelayUntil+0x18>
 800ee80:	68fb      	ldr	r3, [r7, #12]
 800ee82:	e000      	b.n	800ee86 <osDelayUntil+0x1a>
 800ee84:	2301      	movs	r3, #1
 800ee86:	4619      	mov	r1, r3
 800ee88:	6878      	ldr	r0, [r7, #4]
 800ee8a:	f000 fa0b 	bl	800f2a4 <vTaskDelayUntil>
  
  return osOK;
 800ee8e:	2300      	movs	r3, #0
  (void) millisec;
  (void) PreviousWakeTime;
  
  return osErrorResource;
#endif
}
 800ee90:	4618      	mov	r0, r3
 800ee92:	3710      	adds	r7, #16
 800ee94:	46bd      	mov	sp, r7
 800ee96:	bd80      	pop	{r7, pc}

0800ee98 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ee98:	b480      	push	{r7}
 800ee9a:	b083      	sub	sp, #12
 800ee9c:	af00      	add	r7, sp, #0
 800ee9e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	f103 0208 	add.w	r2, r3, #8
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800eeb0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	f103 0208 	add.w	r2, r3, #8
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	f103 0208 	add.w	r2, r3, #8
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	2200      	movs	r2, #0
 800eeca:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800eecc:	bf00      	nop
 800eece:	370c      	adds	r7, #12
 800eed0:	46bd      	mov	sp, r7
 800eed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eed6:	4770      	bx	lr

0800eed8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800eed8:	b480      	push	{r7}
 800eeda:	b083      	sub	sp, #12
 800eedc:	af00      	add	r7, sp, #0
 800eede:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	2200      	movs	r2, #0
 800eee4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800eee6:	bf00      	nop
 800eee8:	370c      	adds	r7, #12
 800eeea:	46bd      	mov	sp, r7
 800eeec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eef0:	4770      	bx	lr

0800eef2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800eef2:	b480      	push	{r7}
 800eef4:	b085      	sub	sp, #20
 800eef6:	af00      	add	r7, sp, #0
 800eef8:	6078      	str	r0, [r7, #4]
 800eefa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	685b      	ldr	r3, [r3, #4]
 800ef00:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ef02:	683b      	ldr	r3, [r7, #0]
 800ef04:	68fa      	ldr	r2, [r7, #12]
 800ef06:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ef08:	68fb      	ldr	r3, [r7, #12]
 800ef0a:	689a      	ldr	r2, [r3, #8]
 800ef0c:	683b      	ldr	r3, [r7, #0]
 800ef0e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ef10:	68fb      	ldr	r3, [r7, #12]
 800ef12:	689b      	ldr	r3, [r3, #8]
 800ef14:	683a      	ldr	r2, [r7, #0]
 800ef16:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ef18:	68fb      	ldr	r3, [r7, #12]
 800ef1a:	683a      	ldr	r2, [r7, #0]
 800ef1c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ef1e:	683b      	ldr	r3, [r7, #0]
 800ef20:	687a      	ldr	r2, [r7, #4]
 800ef22:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	681b      	ldr	r3, [r3, #0]
 800ef28:	1c5a      	adds	r2, r3, #1
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	601a      	str	r2, [r3, #0]
}
 800ef2e:	bf00      	nop
 800ef30:	3714      	adds	r7, #20
 800ef32:	46bd      	mov	sp, r7
 800ef34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef38:	4770      	bx	lr

0800ef3a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ef3a:	b480      	push	{r7}
 800ef3c:	b085      	sub	sp, #20
 800ef3e:	af00      	add	r7, sp, #0
 800ef40:	6078      	str	r0, [r7, #4]
 800ef42:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ef44:	683b      	ldr	r3, [r7, #0]
 800ef46:	681b      	ldr	r3, [r3, #0]
 800ef48:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ef4a:	68bb      	ldr	r3, [r7, #8]
 800ef4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ef50:	d103      	bne.n	800ef5a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	691b      	ldr	r3, [r3, #16]
 800ef56:	60fb      	str	r3, [r7, #12]
 800ef58:	e00c      	b.n	800ef74 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	3308      	adds	r3, #8
 800ef5e:	60fb      	str	r3, [r7, #12]
 800ef60:	e002      	b.n	800ef68 <vListInsert+0x2e>
 800ef62:	68fb      	ldr	r3, [r7, #12]
 800ef64:	685b      	ldr	r3, [r3, #4]
 800ef66:	60fb      	str	r3, [r7, #12]
 800ef68:	68fb      	ldr	r3, [r7, #12]
 800ef6a:	685b      	ldr	r3, [r3, #4]
 800ef6c:	681b      	ldr	r3, [r3, #0]
 800ef6e:	68ba      	ldr	r2, [r7, #8]
 800ef70:	429a      	cmp	r2, r3
 800ef72:	d2f6      	bcs.n	800ef62 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ef74:	68fb      	ldr	r3, [r7, #12]
 800ef76:	685a      	ldr	r2, [r3, #4]
 800ef78:	683b      	ldr	r3, [r7, #0]
 800ef7a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ef7c:	683b      	ldr	r3, [r7, #0]
 800ef7e:	685b      	ldr	r3, [r3, #4]
 800ef80:	683a      	ldr	r2, [r7, #0]
 800ef82:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ef84:	683b      	ldr	r3, [r7, #0]
 800ef86:	68fa      	ldr	r2, [r7, #12]
 800ef88:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ef8a:	68fb      	ldr	r3, [r7, #12]
 800ef8c:	683a      	ldr	r2, [r7, #0]
 800ef8e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800ef90:	683b      	ldr	r3, [r7, #0]
 800ef92:	687a      	ldr	r2, [r7, #4]
 800ef94:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	681b      	ldr	r3, [r3, #0]
 800ef9a:	1c5a      	adds	r2, r3, #1
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	601a      	str	r2, [r3, #0]
}
 800efa0:	bf00      	nop
 800efa2:	3714      	adds	r7, #20
 800efa4:	46bd      	mov	sp, r7
 800efa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efaa:	4770      	bx	lr

0800efac <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800efac:	b480      	push	{r7}
 800efae:	b085      	sub	sp, #20
 800efb0:	af00      	add	r7, sp, #0
 800efb2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	691b      	ldr	r3, [r3, #16]
 800efb8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	685b      	ldr	r3, [r3, #4]
 800efbe:	687a      	ldr	r2, [r7, #4]
 800efc0:	6892      	ldr	r2, [r2, #8]
 800efc2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	689b      	ldr	r3, [r3, #8]
 800efc8:	687a      	ldr	r2, [r7, #4]
 800efca:	6852      	ldr	r2, [r2, #4]
 800efcc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800efce:	68fb      	ldr	r3, [r7, #12]
 800efd0:	685b      	ldr	r3, [r3, #4]
 800efd2:	687a      	ldr	r2, [r7, #4]
 800efd4:	429a      	cmp	r2, r3
 800efd6:	d103      	bne.n	800efe0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	689a      	ldr	r2, [r3, #8]
 800efdc:	68fb      	ldr	r3, [r7, #12]
 800efde:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	2200      	movs	r2, #0
 800efe4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800efe6:	68fb      	ldr	r3, [r7, #12]
 800efe8:	681b      	ldr	r3, [r3, #0]
 800efea:	1e5a      	subs	r2, r3, #1
 800efec:	68fb      	ldr	r3, [r7, #12]
 800efee:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800eff0:	68fb      	ldr	r3, [r7, #12]
 800eff2:	681b      	ldr	r3, [r3, #0]
}
 800eff4:	4618      	mov	r0, r3
 800eff6:	3714      	adds	r7, #20
 800eff8:	46bd      	mov	sp, r7
 800effa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800effe:	4770      	bx	lr

0800f000 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800f000:	b580      	push	{r7, lr}
 800f002:	b08c      	sub	sp, #48	; 0x30
 800f004:	af04      	add	r7, sp, #16
 800f006:	60f8      	str	r0, [r7, #12]
 800f008:	60b9      	str	r1, [r7, #8]
 800f00a:	603b      	str	r3, [r7, #0]
 800f00c:	4613      	mov	r3, r2
 800f00e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800f010:	88fb      	ldrh	r3, [r7, #6]
 800f012:	009b      	lsls	r3, r3, #2
 800f014:	4618      	mov	r0, r3
 800f016:	f001 f9c7 	bl	80103a8 <pvPortMalloc>
 800f01a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800f01c:	697b      	ldr	r3, [r7, #20]
 800f01e:	2b00      	cmp	r3, #0
 800f020:	d00e      	beq.n	800f040 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800f022:	20a0      	movs	r0, #160	; 0xa0
 800f024:	f001 f9c0 	bl	80103a8 <pvPortMalloc>
 800f028:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800f02a:	69fb      	ldr	r3, [r7, #28]
 800f02c:	2b00      	cmp	r3, #0
 800f02e:	d003      	beq.n	800f038 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800f030:	69fb      	ldr	r3, [r7, #28]
 800f032:	697a      	ldr	r2, [r7, #20]
 800f034:	631a      	str	r2, [r3, #48]	; 0x30
 800f036:	e005      	b.n	800f044 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800f038:	6978      	ldr	r0, [r7, #20]
 800f03a:	f001 fa85 	bl	8010548 <vPortFree>
 800f03e:	e001      	b.n	800f044 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800f040:	2300      	movs	r3, #0
 800f042:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800f044:	69fb      	ldr	r3, [r7, #28]
 800f046:	2b00      	cmp	r3, #0
 800f048:	d013      	beq.n	800f072 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800f04a:	88fa      	ldrh	r2, [r7, #6]
 800f04c:	2300      	movs	r3, #0
 800f04e:	9303      	str	r3, [sp, #12]
 800f050:	69fb      	ldr	r3, [r7, #28]
 800f052:	9302      	str	r3, [sp, #8]
 800f054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f056:	9301      	str	r3, [sp, #4]
 800f058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f05a:	9300      	str	r3, [sp, #0]
 800f05c:	683b      	ldr	r3, [r7, #0]
 800f05e:	68b9      	ldr	r1, [r7, #8]
 800f060:	68f8      	ldr	r0, [r7, #12]
 800f062:	f000 f80f 	bl	800f084 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f066:	69f8      	ldr	r0, [r7, #28]
 800f068:	f000 f8b2 	bl	800f1d0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800f06c:	2301      	movs	r3, #1
 800f06e:	61bb      	str	r3, [r7, #24]
 800f070:	e002      	b.n	800f078 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f072:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f076:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800f078:	69bb      	ldr	r3, [r7, #24]
	}
 800f07a:	4618      	mov	r0, r3
 800f07c:	3720      	adds	r7, #32
 800f07e:	46bd      	mov	sp, r7
 800f080:	bd80      	pop	{r7, pc}
	...

0800f084 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800f084:	b580      	push	{r7, lr}
 800f086:	b088      	sub	sp, #32
 800f088:	af00      	add	r7, sp, #0
 800f08a:	60f8      	str	r0, [r7, #12]
 800f08c:	60b9      	str	r1, [r7, #8]
 800f08e:	607a      	str	r2, [r7, #4]
 800f090:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800f092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f094:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	009b      	lsls	r3, r3, #2
 800f09a:	461a      	mov	r2, r3
 800f09c:	21a5      	movs	r1, #165	; 0xa5
 800f09e:	f004 fef6 	bl	8013e8e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800f0a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800f0ac:	3b01      	subs	r3, #1
 800f0ae:	009b      	lsls	r3, r3, #2
 800f0b0:	4413      	add	r3, r2
 800f0b2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800f0b4:	69bb      	ldr	r3, [r7, #24]
 800f0b6:	f023 0307 	bic.w	r3, r3, #7
 800f0ba:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800f0bc:	69bb      	ldr	r3, [r7, #24]
 800f0be:	f003 0307 	and.w	r3, r3, #7
 800f0c2:	2b00      	cmp	r3, #0
 800f0c4:	d00a      	beq.n	800f0dc <prvInitialiseNewTask+0x58>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800f0c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0ca:	f383 8811 	msr	BASEPRI, r3
 800f0ce:	f3bf 8f6f 	isb	sy
 800f0d2:	f3bf 8f4f 	dsb	sy
 800f0d6:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800f0d8:	bf00      	nop
 800f0da:	e7fe      	b.n	800f0da <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800f0dc:	68bb      	ldr	r3, [r7, #8]
 800f0de:	2b00      	cmp	r3, #0
 800f0e0:	d01f      	beq.n	800f122 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f0e2:	2300      	movs	r3, #0
 800f0e4:	61fb      	str	r3, [r7, #28]
 800f0e6:	e012      	b.n	800f10e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800f0e8:	68ba      	ldr	r2, [r7, #8]
 800f0ea:	69fb      	ldr	r3, [r7, #28]
 800f0ec:	4413      	add	r3, r2
 800f0ee:	7819      	ldrb	r1, [r3, #0]
 800f0f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f0f2:	69fb      	ldr	r3, [r7, #28]
 800f0f4:	4413      	add	r3, r2
 800f0f6:	3334      	adds	r3, #52	; 0x34
 800f0f8:	460a      	mov	r2, r1
 800f0fa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800f0fc:	68ba      	ldr	r2, [r7, #8]
 800f0fe:	69fb      	ldr	r3, [r7, #28]
 800f100:	4413      	add	r3, r2
 800f102:	781b      	ldrb	r3, [r3, #0]
 800f104:	2b00      	cmp	r3, #0
 800f106:	d006      	beq.n	800f116 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f108:	69fb      	ldr	r3, [r7, #28]
 800f10a:	3301      	adds	r3, #1
 800f10c:	61fb      	str	r3, [r7, #28]
 800f10e:	69fb      	ldr	r3, [r7, #28]
 800f110:	2b0f      	cmp	r3, #15
 800f112:	d9e9      	bls.n	800f0e8 <prvInitialiseNewTask+0x64>
 800f114:	e000      	b.n	800f118 <prvInitialiseNewTask+0x94>
			{
				break;
 800f116:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800f118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f11a:	2200      	movs	r2, #0
 800f11c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f120:	e003      	b.n	800f12a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800f122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f124:	2200      	movs	r2, #0
 800f126:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800f12a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f12c:	2b06      	cmp	r3, #6
 800f12e:	d901      	bls.n	800f134 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800f130:	2306      	movs	r3, #6
 800f132:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800f134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f136:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f138:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800f13a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f13c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f13e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800f140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f142:	2200      	movs	r2, #0
 800f144:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800f146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f148:	3304      	adds	r3, #4
 800f14a:	4618      	mov	r0, r3
 800f14c:	f7ff fec4 	bl	800eed8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800f150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f152:	3318      	adds	r3, #24
 800f154:	4618      	mov	r0, r3
 800f156:	f7ff febf 	bl	800eed8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800f15a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f15c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f15e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f162:	f1c3 0207 	rsb	r2, r3, #7
 800f166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f168:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800f16a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f16c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f16e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800f170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f172:	2200      	movs	r2, #0
 800f174:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f17a:	2200      	movs	r2, #0
 800f17c:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800f180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f182:	334c      	adds	r3, #76	; 0x4c
 800f184:	224c      	movs	r2, #76	; 0x4c
 800f186:	2100      	movs	r1, #0
 800f188:	4618      	mov	r0, r3
 800f18a:	f004 fe80 	bl	8013e8e <memset>
 800f18e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f190:	4a0c      	ldr	r2, [pc, #48]	; (800f1c4 <prvInitialiseNewTask+0x140>)
 800f192:	651a      	str	r2, [r3, #80]	; 0x50
 800f194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f196:	4a0c      	ldr	r2, [pc, #48]	; (800f1c8 <prvInitialiseNewTask+0x144>)
 800f198:	655a      	str	r2, [r3, #84]	; 0x54
 800f19a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f19c:	4a0b      	ldr	r2, [pc, #44]	; (800f1cc <prvInitialiseNewTask+0x148>)
 800f19e:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800f1a0:	683a      	ldr	r2, [r7, #0]
 800f1a2:	68f9      	ldr	r1, [r7, #12]
 800f1a4:	69b8      	ldr	r0, [r7, #24]
 800f1a6:	f000 feaf 	bl	800ff08 <pxPortInitialiseStack>
 800f1aa:	4602      	mov	r2, r0
 800f1ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1ae:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800f1b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	d002      	beq.n	800f1bc <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800f1b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f1ba:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f1bc:	bf00      	nop
 800f1be:	3720      	adds	r7, #32
 800f1c0:	46bd      	mov	sp, r7
 800f1c2:	bd80      	pop	{r7, pc}
 800f1c4:	20017694 	.word	0x20017694
 800f1c8:	200176fc 	.word	0x200176fc
 800f1cc:	20017764 	.word	0x20017764

0800f1d0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800f1d0:	b580      	push	{r7, lr}
 800f1d2:	b082      	sub	sp, #8
 800f1d4:	af00      	add	r7, sp, #0
 800f1d6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800f1d8:	f000 ffc4 	bl	8010164 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800f1dc:	4b2a      	ldr	r3, [pc, #168]	; (800f288 <prvAddNewTaskToReadyList+0xb8>)
 800f1de:	681b      	ldr	r3, [r3, #0]
 800f1e0:	3301      	adds	r3, #1
 800f1e2:	4a29      	ldr	r2, [pc, #164]	; (800f288 <prvAddNewTaskToReadyList+0xb8>)
 800f1e4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800f1e6:	4b29      	ldr	r3, [pc, #164]	; (800f28c <prvAddNewTaskToReadyList+0xbc>)
 800f1e8:	681b      	ldr	r3, [r3, #0]
 800f1ea:	2b00      	cmp	r3, #0
 800f1ec:	d109      	bne.n	800f202 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800f1ee:	4a27      	ldr	r2, [pc, #156]	; (800f28c <prvAddNewTaskToReadyList+0xbc>)
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800f1f4:	4b24      	ldr	r3, [pc, #144]	; (800f288 <prvAddNewTaskToReadyList+0xb8>)
 800f1f6:	681b      	ldr	r3, [r3, #0]
 800f1f8:	2b01      	cmp	r3, #1
 800f1fa:	d110      	bne.n	800f21e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800f1fc:	f000 fb78 	bl	800f8f0 <prvInitialiseTaskLists>
 800f200:	e00d      	b.n	800f21e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800f202:	4b23      	ldr	r3, [pc, #140]	; (800f290 <prvAddNewTaskToReadyList+0xc0>)
 800f204:	681b      	ldr	r3, [r3, #0]
 800f206:	2b00      	cmp	r3, #0
 800f208:	d109      	bne.n	800f21e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800f20a:	4b20      	ldr	r3, [pc, #128]	; (800f28c <prvAddNewTaskToReadyList+0xbc>)
 800f20c:	681b      	ldr	r3, [r3, #0]
 800f20e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f214:	429a      	cmp	r2, r3
 800f216:	d802      	bhi.n	800f21e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800f218:	4a1c      	ldr	r2, [pc, #112]	; (800f28c <prvAddNewTaskToReadyList+0xbc>)
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800f21e:	4b1d      	ldr	r3, [pc, #116]	; (800f294 <prvAddNewTaskToReadyList+0xc4>)
 800f220:	681b      	ldr	r3, [r3, #0]
 800f222:	3301      	adds	r3, #1
 800f224:	4a1b      	ldr	r2, [pc, #108]	; (800f294 <prvAddNewTaskToReadyList+0xc4>)
 800f226:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f22c:	2201      	movs	r2, #1
 800f22e:	409a      	lsls	r2, r3
 800f230:	4b19      	ldr	r3, [pc, #100]	; (800f298 <prvAddNewTaskToReadyList+0xc8>)
 800f232:	681b      	ldr	r3, [r3, #0]
 800f234:	4313      	orrs	r3, r2
 800f236:	4a18      	ldr	r2, [pc, #96]	; (800f298 <prvAddNewTaskToReadyList+0xc8>)
 800f238:	6013      	str	r3, [r2, #0]
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f23e:	4613      	mov	r3, r2
 800f240:	009b      	lsls	r3, r3, #2
 800f242:	4413      	add	r3, r2
 800f244:	009b      	lsls	r3, r3, #2
 800f246:	4a15      	ldr	r2, [pc, #84]	; (800f29c <prvAddNewTaskToReadyList+0xcc>)
 800f248:	441a      	add	r2, r3
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	3304      	adds	r3, #4
 800f24e:	4619      	mov	r1, r3
 800f250:	4610      	mov	r0, r2
 800f252:	f7ff fe4e 	bl	800eef2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800f256:	f000 ffb5 	bl	80101c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800f25a:	4b0d      	ldr	r3, [pc, #52]	; (800f290 <prvAddNewTaskToReadyList+0xc0>)
 800f25c:	681b      	ldr	r3, [r3, #0]
 800f25e:	2b00      	cmp	r3, #0
 800f260:	d00e      	beq.n	800f280 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800f262:	4b0a      	ldr	r3, [pc, #40]	; (800f28c <prvAddNewTaskToReadyList+0xbc>)
 800f264:	681b      	ldr	r3, [r3, #0]
 800f266:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f26c:	429a      	cmp	r2, r3
 800f26e:	d207      	bcs.n	800f280 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800f270:	4b0b      	ldr	r3, [pc, #44]	; (800f2a0 <prvAddNewTaskToReadyList+0xd0>)
 800f272:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f276:	601a      	str	r2, [r3, #0]
 800f278:	f3bf 8f4f 	dsb	sy
 800f27c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f280:	bf00      	nop
 800f282:	3708      	adds	r7, #8
 800f284:	46bd      	mov	sp, r7
 800f286:	bd80      	pop	{r7, pc}
 800f288:	2000232c 	.word	0x2000232c
 800f28c:	2000222c 	.word	0x2000222c
 800f290:	20002338 	.word	0x20002338
 800f294:	20002348 	.word	0x20002348
 800f298:	20002334 	.word	0x20002334
 800f29c:	20002230 	.word	0x20002230
 800f2a0:	e000ed04 	.word	0xe000ed04

0800f2a4 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800f2a4:	b580      	push	{r7, lr}
 800f2a6:	b08a      	sub	sp, #40	; 0x28
 800f2a8:	af00      	add	r7, sp, #0
 800f2aa:	6078      	str	r0, [r7, #4]
 800f2ac:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800f2ae:	2300      	movs	r3, #0
 800f2b0:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	d10a      	bne.n	800f2ce <vTaskDelayUntil+0x2a>
	__asm volatile
 800f2b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2bc:	f383 8811 	msr	BASEPRI, r3
 800f2c0:	f3bf 8f6f 	isb	sy
 800f2c4:	f3bf 8f4f 	dsb	sy
 800f2c8:	617b      	str	r3, [r7, #20]
}
 800f2ca:	bf00      	nop
 800f2cc:	e7fe      	b.n	800f2cc <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800f2ce:	683b      	ldr	r3, [r7, #0]
 800f2d0:	2b00      	cmp	r3, #0
 800f2d2:	d10a      	bne.n	800f2ea <vTaskDelayUntil+0x46>
	__asm volatile
 800f2d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2d8:	f383 8811 	msr	BASEPRI, r3
 800f2dc:	f3bf 8f6f 	isb	sy
 800f2e0:	f3bf 8f4f 	dsb	sy
 800f2e4:	613b      	str	r3, [r7, #16]
}
 800f2e6:	bf00      	nop
 800f2e8:	e7fe      	b.n	800f2e8 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800f2ea:	4b2a      	ldr	r3, [pc, #168]	; (800f394 <vTaskDelayUntil+0xf0>)
 800f2ec:	681b      	ldr	r3, [r3, #0]
 800f2ee:	2b00      	cmp	r3, #0
 800f2f0:	d00a      	beq.n	800f308 <vTaskDelayUntil+0x64>
	__asm volatile
 800f2f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2f6:	f383 8811 	msr	BASEPRI, r3
 800f2fa:	f3bf 8f6f 	isb	sy
 800f2fe:	f3bf 8f4f 	dsb	sy
 800f302:	60fb      	str	r3, [r7, #12]
}
 800f304:	bf00      	nop
 800f306:	e7fe      	b.n	800f306 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 800f308:	f000 f8ce 	bl	800f4a8 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800f30c:	4b22      	ldr	r3, [pc, #136]	; (800f398 <vTaskDelayUntil+0xf4>)
 800f30e:	681b      	ldr	r3, [r3, #0]
 800f310:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	681b      	ldr	r3, [r3, #0]
 800f316:	683a      	ldr	r2, [r7, #0]
 800f318:	4413      	add	r3, r2
 800f31a:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	681b      	ldr	r3, [r3, #0]
 800f320:	6a3a      	ldr	r2, [r7, #32]
 800f322:	429a      	cmp	r2, r3
 800f324:	d20b      	bcs.n	800f33e <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	681b      	ldr	r3, [r3, #0]
 800f32a:	69fa      	ldr	r2, [r7, #28]
 800f32c:	429a      	cmp	r2, r3
 800f32e:	d211      	bcs.n	800f354 <vTaskDelayUntil+0xb0>
 800f330:	69fa      	ldr	r2, [r7, #28]
 800f332:	6a3b      	ldr	r3, [r7, #32]
 800f334:	429a      	cmp	r2, r3
 800f336:	d90d      	bls.n	800f354 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800f338:	2301      	movs	r3, #1
 800f33a:	627b      	str	r3, [r7, #36]	; 0x24
 800f33c:	e00a      	b.n	800f354 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	681b      	ldr	r3, [r3, #0]
 800f342:	69fa      	ldr	r2, [r7, #28]
 800f344:	429a      	cmp	r2, r3
 800f346:	d303      	bcc.n	800f350 <vTaskDelayUntil+0xac>
 800f348:	69fa      	ldr	r2, [r7, #28]
 800f34a:	6a3b      	ldr	r3, [r7, #32]
 800f34c:	429a      	cmp	r2, r3
 800f34e:	d901      	bls.n	800f354 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800f350:	2301      	movs	r3, #1
 800f352:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	69fa      	ldr	r2, [r7, #28]
 800f358:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800f35a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f35c:	2b00      	cmp	r3, #0
 800f35e:	d006      	beq.n	800f36e <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800f360:	69fa      	ldr	r2, [r7, #28]
 800f362:	6a3b      	ldr	r3, [r7, #32]
 800f364:	1ad3      	subs	r3, r2, r3
 800f366:	2100      	movs	r1, #0
 800f368:	4618      	mov	r0, r3
 800f36a:	f000 fd67 	bl	800fe3c <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800f36e:	f000 f8a9 	bl	800f4c4 <xTaskResumeAll>
 800f372:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800f374:	69bb      	ldr	r3, [r7, #24]
 800f376:	2b00      	cmp	r3, #0
 800f378:	d107      	bne.n	800f38a <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800f37a:	4b08      	ldr	r3, [pc, #32]	; (800f39c <vTaskDelayUntil+0xf8>)
 800f37c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f380:	601a      	str	r2, [r3, #0]
 800f382:	f3bf 8f4f 	dsb	sy
 800f386:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f38a:	bf00      	nop
 800f38c:	3728      	adds	r7, #40	; 0x28
 800f38e:	46bd      	mov	sp, r7
 800f390:	bd80      	pop	{r7, pc}
 800f392:	bf00      	nop
 800f394:	20002354 	.word	0x20002354
 800f398:	20002330 	.word	0x20002330
 800f39c:	e000ed04 	.word	0xe000ed04

0800f3a0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800f3a0:	b580      	push	{r7, lr}
 800f3a2:	b084      	sub	sp, #16
 800f3a4:	af00      	add	r7, sp, #0
 800f3a6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800f3a8:	2300      	movs	r3, #0
 800f3aa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	2b00      	cmp	r3, #0
 800f3b0:	d017      	beq.n	800f3e2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800f3b2:	4b13      	ldr	r3, [pc, #76]	; (800f400 <vTaskDelay+0x60>)
 800f3b4:	681b      	ldr	r3, [r3, #0]
 800f3b6:	2b00      	cmp	r3, #0
 800f3b8:	d00a      	beq.n	800f3d0 <vTaskDelay+0x30>
	__asm volatile
 800f3ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3be:	f383 8811 	msr	BASEPRI, r3
 800f3c2:	f3bf 8f6f 	isb	sy
 800f3c6:	f3bf 8f4f 	dsb	sy
 800f3ca:	60bb      	str	r3, [r7, #8]
}
 800f3cc:	bf00      	nop
 800f3ce:	e7fe      	b.n	800f3ce <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800f3d0:	f000 f86a 	bl	800f4a8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800f3d4:	2100      	movs	r1, #0
 800f3d6:	6878      	ldr	r0, [r7, #4]
 800f3d8:	f000 fd30 	bl	800fe3c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800f3dc:	f000 f872 	bl	800f4c4 <xTaskResumeAll>
 800f3e0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800f3e2:	68fb      	ldr	r3, [r7, #12]
 800f3e4:	2b00      	cmp	r3, #0
 800f3e6:	d107      	bne.n	800f3f8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800f3e8:	4b06      	ldr	r3, [pc, #24]	; (800f404 <vTaskDelay+0x64>)
 800f3ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f3ee:	601a      	str	r2, [r3, #0]
 800f3f0:	f3bf 8f4f 	dsb	sy
 800f3f4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f3f8:	bf00      	nop
 800f3fa:	3710      	adds	r7, #16
 800f3fc:	46bd      	mov	sp, r7
 800f3fe:	bd80      	pop	{r7, pc}
 800f400:	20002354 	.word	0x20002354
 800f404:	e000ed04 	.word	0xe000ed04

0800f408 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800f408:	b580      	push	{r7, lr}
 800f40a:	b086      	sub	sp, #24
 800f40c:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800f40e:	4b1e      	ldr	r3, [pc, #120]	; (800f488 <vTaskStartScheduler+0x80>)
 800f410:	9301      	str	r3, [sp, #4]
 800f412:	2300      	movs	r3, #0
 800f414:	9300      	str	r3, [sp, #0]
 800f416:	2300      	movs	r3, #0
 800f418:	2280      	movs	r2, #128	; 0x80
 800f41a:	491c      	ldr	r1, [pc, #112]	; (800f48c <vTaskStartScheduler+0x84>)
 800f41c:	481c      	ldr	r0, [pc, #112]	; (800f490 <vTaskStartScheduler+0x88>)
 800f41e:	f7ff fdef 	bl	800f000 <xTaskCreate>
 800f422:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800f424:	68fb      	ldr	r3, [r7, #12]
 800f426:	2b01      	cmp	r3, #1
 800f428:	d11b      	bne.n	800f462 <vTaskStartScheduler+0x5a>
	__asm volatile
 800f42a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f42e:	f383 8811 	msr	BASEPRI, r3
 800f432:	f3bf 8f6f 	isb	sy
 800f436:	f3bf 8f4f 	dsb	sy
 800f43a:	60bb      	str	r3, [r7, #8]
}
 800f43c:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f43e:	4b15      	ldr	r3, [pc, #84]	; (800f494 <vTaskStartScheduler+0x8c>)
 800f440:	681b      	ldr	r3, [r3, #0]
 800f442:	334c      	adds	r3, #76	; 0x4c
 800f444:	4a14      	ldr	r2, [pc, #80]	; (800f498 <vTaskStartScheduler+0x90>)
 800f446:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800f448:	4b14      	ldr	r3, [pc, #80]	; (800f49c <vTaskStartScheduler+0x94>)
 800f44a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f44e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800f450:	4b13      	ldr	r3, [pc, #76]	; (800f4a0 <vTaskStartScheduler+0x98>)
 800f452:	2201      	movs	r2, #1
 800f454:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800f456:	4b13      	ldr	r3, [pc, #76]	; (800f4a4 <vTaskStartScheduler+0x9c>)
 800f458:	2200      	movs	r2, #0
 800f45a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800f45c:	f000 fde0 	bl	8010020 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800f460:	e00e      	b.n	800f480 <vTaskStartScheduler+0x78>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800f462:	68fb      	ldr	r3, [r7, #12]
 800f464:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f468:	d10a      	bne.n	800f480 <vTaskStartScheduler+0x78>
	__asm volatile
 800f46a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f46e:	f383 8811 	msr	BASEPRI, r3
 800f472:	f3bf 8f6f 	isb	sy
 800f476:	f3bf 8f4f 	dsb	sy
 800f47a:	607b      	str	r3, [r7, #4]
}
 800f47c:	bf00      	nop
 800f47e:	e7fe      	b.n	800f47e <vTaskStartScheduler+0x76>
}
 800f480:	bf00      	nop
 800f482:	3710      	adds	r7, #16
 800f484:	46bd      	mov	sp, r7
 800f486:	bd80      	pop	{r7, pc}
 800f488:	20002350 	.word	0x20002350
 800f48c:	08015568 	.word	0x08015568
 800f490:	0800f8c1 	.word	0x0800f8c1
 800f494:	2000222c 	.word	0x2000222c
 800f498:	20000198 	.word	0x20000198
 800f49c:	2000234c 	.word	0x2000234c
 800f4a0:	20002338 	.word	0x20002338
 800f4a4:	20002330 	.word	0x20002330

0800f4a8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800f4a8:	b480      	push	{r7}
 800f4aa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800f4ac:	4b04      	ldr	r3, [pc, #16]	; (800f4c0 <vTaskSuspendAll+0x18>)
 800f4ae:	681b      	ldr	r3, [r3, #0]
 800f4b0:	3301      	adds	r3, #1
 800f4b2:	4a03      	ldr	r2, [pc, #12]	; (800f4c0 <vTaskSuspendAll+0x18>)
 800f4b4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800f4b6:	bf00      	nop
 800f4b8:	46bd      	mov	sp, r7
 800f4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4be:	4770      	bx	lr
 800f4c0:	20002354 	.word	0x20002354

0800f4c4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800f4c4:	b580      	push	{r7, lr}
 800f4c6:	b084      	sub	sp, #16
 800f4c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800f4ca:	2300      	movs	r3, #0
 800f4cc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800f4ce:	2300      	movs	r3, #0
 800f4d0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800f4d2:	4b41      	ldr	r3, [pc, #260]	; (800f5d8 <xTaskResumeAll+0x114>)
 800f4d4:	681b      	ldr	r3, [r3, #0]
 800f4d6:	2b00      	cmp	r3, #0
 800f4d8:	d10a      	bne.n	800f4f0 <xTaskResumeAll+0x2c>
	__asm volatile
 800f4da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4de:	f383 8811 	msr	BASEPRI, r3
 800f4e2:	f3bf 8f6f 	isb	sy
 800f4e6:	f3bf 8f4f 	dsb	sy
 800f4ea:	603b      	str	r3, [r7, #0]
}
 800f4ec:	bf00      	nop
 800f4ee:	e7fe      	b.n	800f4ee <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800f4f0:	f000 fe38 	bl	8010164 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800f4f4:	4b38      	ldr	r3, [pc, #224]	; (800f5d8 <xTaskResumeAll+0x114>)
 800f4f6:	681b      	ldr	r3, [r3, #0]
 800f4f8:	3b01      	subs	r3, #1
 800f4fa:	4a37      	ldr	r2, [pc, #220]	; (800f5d8 <xTaskResumeAll+0x114>)
 800f4fc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f4fe:	4b36      	ldr	r3, [pc, #216]	; (800f5d8 <xTaskResumeAll+0x114>)
 800f500:	681b      	ldr	r3, [r3, #0]
 800f502:	2b00      	cmp	r3, #0
 800f504:	d161      	bne.n	800f5ca <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f506:	4b35      	ldr	r3, [pc, #212]	; (800f5dc <xTaskResumeAll+0x118>)
 800f508:	681b      	ldr	r3, [r3, #0]
 800f50a:	2b00      	cmp	r3, #0
 800f50c:	d05d      	beq.n	800f5ca <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f50e:	e02e      	b.n	800f56e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f510:	4b33      	ldr	r3, [pc, #204]	; (800f5e0 <xTaskResumeAll+0x11c>)
 800f512:	68db      	ldr	r3, [r3, #12]
 800f514:	68db      	ldr	r3, [r3, #12]
 800f516:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f518:	68fb      	ldr	r3, [r7, #12]
 800f51a:	3318      	adds	r3, #24
 800f51c:	4618      	mov	r0, r3
 800f51e:	f7ff fd45 	bl	800efac <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f522:	68fb      	ldr	r3, [r7, #12]
 800f524:	3304      	adds	r3, #4
 800f526:	4618      	mov	r0, r3
 800f528:	f7ff fd40 	bl	800efac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f52c:	68fb      	ldr	r3, [r7, #12]
 800f52e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f530:	2201      	movs	r2, #1
 800f532:	409a      	lsls	r2, r3
 800f534:	4b2b      	ldr	r3, [pc, #172]	; (800f5e4 <xTaskResumeAll+0x120>)
 800f536:	681b      	ldr	r3, [r3, #0]
 800f538:	4313      	orrs	r3, r2
 800f53a:	4a2a      	ldr	r2, [pc, #168]	; (800f5e4 <xTaskResumeAll+0x120>)
 800f53c:	6013      	str	r3, [r2, #0]
 800f53e:	68fb      	ldr	r3, [r7, #12]
 800f540:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f542:	4613      	mov	r3, r2
 800f544:	009b      	lsls	r3, r3, #2
 800f546:	4413      	add	r3, r2
 800f548:	009b      	lsls	r3, r3, #2
 800f54a:	4a27      	ldr	r2, [pc, #156]	; (800f5e8 <xTaskResumeAll+0x124>)
 800f54c:	441a      	add	r2, r3
 800f54e:	68fb      	ldr	r3, [r7, #12]
 800f550:	3304      	adds	r3, #4
 800f552:	4619      	mov	r1, r3
 800f554:	4610      	mov	r0, r2
 800f556:	f7ff fccc 	bl	800eef2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f55a:	68fb      	ldr	r3, [r7, #12]
 800f55c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f55e:	4b23      	ldr	r3, [pc, #140]	; (800f5ec <xTaskResumeAll+0x128>)
 800f560:	681b      	ldr	r3, [r3, #0]
 800f562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f564:	429a      	cmp	r2, r3
 800f566:	d302      	bcc.n	800f56e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800f568:	4b21      	ldr	r3, [pc, #132]	; (800f5f0 <xTaskResumeAll+0x12c>)
 800f56a:	2201      	movs	r2, #1
 800f56c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f56e:	4b1c      	ldr	r3, [pc, #112]	; (800f5e0 <xTaskResumeAll+0x11c>)
 800f570:	681b      	ldr	r3, [r3, #0]
 800f572:	2b00      	cmp	r3, #0
 800f574:	d1cc      	bne.n	800f510 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800f576:	68fb      	ldr	r3, [r7, #12]
 800f578:	2b00      	cmp	r3, #0
 800f57a:	d001      	beq.n	800f580 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800f57c:	f000 fa3c 	bl	800f9f8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800f580:	4b1c      	ldr	r3, [pc, #112]	; (800f5f4 <xTaskResumeAll+0x130>)
 800f582:	681b      	ldr	r3, [r3, #0]
 800f584:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	2b00      	cmp	r3, #0
 800f58a:	d010      	beq.n	800f5ae <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800f58c:	f000 f858 	bl	800f640 <xTaskIncrementTick>
 800f590:	4603      	mov	r3, r0
 800f592:	2b00      	cmp	r3, #0
 800f594:	d002      	beq.n	800f59c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800f596:	4b16      	ldr	r3, [pc, #88]	; (800f5f0 <xTaskResumeAll+0x12c>)
 800f598:	2201      	movs	r2, #1
 800f59a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	3b01      	subs	r3, #1
 800f5a0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	2b00      	cmp	r3, #0
 800f5a6:	d1f1      	bne.n	800f58c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800f5a8:	4b12      	ldr	r3, [pc, #72]	; (800f5f4 <xTaskResumeAll+0x130>)
 800f5aa:	2200      	movs	r2, #0
 800f5ac:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800f5ae:	4b10      	ldr	r3, [pc, #64]	; (800f5f0 <xTaskResumeAll+0x12c>)
 800f5b0:	681b      	ldr	r3, [r3, #0]
 800f5b2:	2b00      	cmp	r3, #0
 800f5b4:	d009      	beq.n	800f5ca <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800f5b6:	2301      	movs	r3, #1
 800f5b8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800f5ba:	4b0f      	ldr	r3, [pc, #60]	; (800f5f8 <xTaskResumeAll+0x134>)
 800f5bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f5c0:	601a      	str	r2, [r3, #0]
 800f5c2:	f3bf 8f4f 	dsb	sy
 800f5c6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f5ca:	f000 fdfb 	bl	80101c4 <vPortExitCritical>

	return xAlreadyYielded;
 800f5ce:	68bb      	ldr	r3, [r7, #8]
}
 800f5d0:	4618      	mov	r0, r3
 800f5d2:	3710      	adds	r7, #16
 800f5d4:	46bd      	mov	sp, r7
 800f5d6:	bd80      	pop	{r7, pc}
 800f5d8:	20002354 	.word	0x20002354
 800f5dc:	2000232c 	.word	0x2000232c
 800f5e0:	200022ec 	.word	0x200022ec
 800f5e4:	20002334 	.word	0x20002334
 800f5e8:	20002230 	.word	0x20002230
 800f5ec:	2000222c 	.word	0x2000222c
 800f5f0:	20002340 	.word	0x20002340
 800f5f4:	2000233c 	.word	0x2000233c
 800f5f8:	e000ed04 	.word	0xe000ed04

0800f5fc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800f5fc:	b480      	push	{r7}
 800f5fe:	b083      	sub	sp, #12
 800f600:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800f602:	4b05      	ldr	r3, [pc, #20]	; (800f618 <xTaskGetTickCount+0x1c>)
 800f604:	681b      	ldr	r3, [r3, #0]
 800f606:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800f608:	687b      	ldr	r3, [r7, #4]
}
 800f60a:	4618      	mov	r0, r3
 800f60c:	370c      	adds	r7, #12
 800f60e:	46bd      	mov	sp, r7
 800f610:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f614:	4770      	bx	lr
 800f616:	bf00      	nop
 800f618:	20002330 	.word	0x20002330

0800f61c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800f61c:	b580      	push	{r7, lr}
 800f61e:	b082      	sub	sp, #8
 800f620:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f622:	f000 fe81 	bl	8010328 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800f626:	2300      	movs	r3, #0
 800f628:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800f62a:	4b04      	ldr	r3, [pc, #16]	; (800f63c <xTaskGetTickCountFromISR+0x20>)
 800f62c:	681b      	ldr	r3, [r3, #0]
 800f62e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f630:	683b      	ldr	r3, [r7, #0]
}
 800f632:	4618      	mov	r0, r3
 800f634:	3708      	adds	r7, #8
 800f636:	46bd      	mov	sp, r7
 800f638:	bd80      	pop	{r7, pc}
 800f63a:	bf00      	nop
 800f63c:	20002330 	.word	0x20002330

0800f640 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800f640:	b580      	push	{r7, lr}
 800f642:	b086      	sub	sp, #24
 800f644:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800f646:	2300      	movs	r3, #0
 800f648:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f64a:	4b4e      	ldr	r3, [pc, #312]	; (800f784 <xTaskIncrementTick+0x144>)
 800f64c:	681b      	ldr	r3, [r3, #0]
 800f64e:	2b00      	cmp	r3, #0
 800f650:	f040 808e 	bne.w	800f770 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800f654:	4b4c      	ldr	r3, [pc, #304]	; (800f788 <xTaskIncrementTick+0x148>)
 800f656:	681b      	ldr	r3, [r3, #0]
 800f658:	3301      	adds	r3, #1
 800f65a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800f65c:	4a4a      	ldr	r2, [pc, #296]	; (800f788 <xTaskIncrementTick+0x148>)
 800f65e:	693b      	ldr	r3, [r7, #16]
 800f660:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800f662:	693b      	ldr	r3, [r7, #16]
 800f664:	2b00      	cmp	r3, #0
 800f666:	d120      	bne.n	800f6aa <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800f668:	4b48      	ldr	r3, [pc, #288]	; (800f78c <xTaskIncrementTick+0x14c>)
 800f66a:	681b      	ldr	r3, [r3, #0]
 800f66c:	681b      	ldr	r3, [r3, #0]
 800f66e:	2b00      	cmp	r3, #0
 800f670:	d00a      	beq.n	800f688 <xTaskIncrementTick+0x48>
	__asm volatile
 800f672:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f676:	f383 8811 	msr	BASEPRI, r3
 800f67a:	f3bf 8f6f 	isb	sy
 800f67e:	f3bf 8f4f 	dsb	sy
 800f682:	603b      	str	r3, [r7, #0]
}
 800f684:	bf00      	nop
 800f686:	e7fe      	b.n	800f686 <xTaskIncrementTick+0x46>
 800f688:	4b40      	ldr	r3, [pc, #256]	; (800f78c <xTaskIncrementTick+0x14c>)
 800f68a:	681b      	ldr	r3, [r3, #0]
 800f68c:	60fb      	str	r3, [r7, #12]
 800f68e:	4b40      	ldr	r3, [pc, #256]	; (800f790 <xTaskIncrementTick+0x150>)
 800f690:	681b      	ldr	r3, [r3, #0]
 800f692:	4a3e      	ldr	r2, [pc, #248]	; (800f78c <xTaskIncrementTick+0x14c>)
 800f694:	6013      	str	r3, [r2, #0]
 800f696:	4a3e      	ldr	r2, [pc, #248]	; (800f790 <xTaskIncrementTick+0x150>)
 800f698:	68fb      	ldr	r3, [r7, #12]
 800f69a:	6013      	str	r3, [r2, #0]
 800f69c:	4b3d      	ldr	r3, [pc, #244]	; (800f794 <xTaskIncrementTick+0x154>)
 800f69e:	681b      	ldr	r3, [r3, #0]
 800f6a0:	3301      	adds	r3, #1
 800f6a2:	4a3c      	ldr	r2, [pc, #240]	; (800f794 <xTaskIncrementTick+0x154>)
 800f6a4:	6013      	str	r3, [r2, #0]
 800f6a6:	f000 f9a7 	bl	800f9f8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800f6aa:	4b3b      	ldr	r3, [pc, #236]	; (800f798 <xTaskIncrementTick+0x158>)
 800f6ac:	681b      	ldr	r3, [r3, #0]
 800f6ae:	693a      	ldr	r2, [r7, #16]
 800f6b0:	429a      	cmp	r2, r3
 800f6b2:	d348      	bcc.n	800f746 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f6b4:	4b35      	ldr	r3, [pc, #212]	; (800f78c <xTaskIncrementTick+0x14c>)
 800f6b6:	681b      	ldr	r3, [r3, #0]
 800f6b8:	681b      	ldr	r3, [r3, #0]
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	d104      	bne.n	800f6c8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f6be:	4b36      	ldr	r3, [pc, #216]	; (800f798 <xTaskIncrementTick+0x158>)
 800f6c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f6c4:	601a      	str	r2, [r3, #0]
					break;
 800f6c6:	e03e      	b.n	800f746 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f6c8:	4b30      	ldr	r3, [pc, #192]	; (800f78c <xTaskIncrementTick+0x14c>)
 800f6ca:	681b      	ldr	r3, [r3, #0]
 800f6cc:	68db      	ldr	r3, [r3, #12]
 800f6ce:	68db      	ldr	r3, [r3, #12]
 800f6d0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800f6d2:	68bb      	ldr	r3, [r7, #8]
 800f6d4:	685b      	ldr	r3, [r3, #4]
 800f6d6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800f6d8:	693a      	ldr	r2, [r7, #16]
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	429a      	cmp	r2, r3
 800f6de:	d203      	bcs.n	800f6e8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800f6e0:	4a2d      	ldr	r2, [pc, #180]	; (800f798 <xTaskIncrementTick+0x158>)
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800f6e6:	e02e      	b.n	800f746 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f6e8:	68bb      	ldr	r3, [r7, #8]
 800f6ea:	3304      	adds	r3, #4
 800f6ec:	4618      	mov	r0, r3
 800f6ee:	f7ff fc5d 	bl	800efac <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f6f2:	68bb      	ldr	r3, [r7, #8]
 800f6f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f6f6:	2b00      	cmp	r3, #0
 800f6f8:	d004      	beq.n	800f704 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f6fa:	68bb      	ldr	r3, [r7, #8]
 800f6fc:	3318      	adds	r3, #24
 800f6fe:	4618      	mov	r0, r3
 800f700:	f7ff fc54 	bl	800efac <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800f704:	68bb      	ldr	r3, [r7, #8]
 800f706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f708:	2201      	movs	r2, #1
 800f70a:	409a      	lsls	r2, r3
 800f70c:	4b23      	ldr	r3, [pc, #140]	; (800f79c <xTaskIncrementTick+0x15c>)
 800f70e:	681b      	ldr	r3, [r3, #0]
 800f710:	4313      	orrs	r3, r2
 800f712:	4a22      	ldr	r2, [pc, #136]	; (800f79c <xTaskIncrementTick+0x15c>)
 800f714:	6013      	str	r3, [r2, #0]
 800f716:	68bb      	ldr	r3, [r7, #8]
 800f718:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f71a:	4613      	mov	r3, r2
 800f71c:	009b      	lsls	r3, r3, #2
 800f71e:	4413      	add	r3, r2
 800f720:	009b      	lsls	r3, r3, #2
 800f722:	4a1f      	ldr	r2, [pc, #124]	; (800f7a0 <xTaskIncrementTick+0x160>)
 800f724:	441a      	add	r2, r3
 800f726:	68bb      	ldr	r3, [r7, #8]
 800f728:	3304      	adds	r3, #4
 800f72a:	4619      	mov	r1, r3
 800f72c:	4610      	mov	r0, r2
 800f72e:	f7ff fbe0 	bl	800eef2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f732:	68bb      	ldr	r3, [r7, #8]
 800f734:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f736:	4b1b      	ldr	r3, [pc, #108]	; (800f7a4 <xTaskIncrementTick+0x164>)
 800f738:	681b      	ldr	r3, [r3, #0]
 800f73a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f73c:	429a      	cmp	r2, r3
 800f73e:	d3b9      	bcc.n	800f6b4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800f740:	2301      	movs	r3, #1
 800f742:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f744:	e7b6      	b.n	800f6b4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800f746:	4b17      	ldr	r3, [pc, #92]	; (800f7a4 <xTaskIncrementTick+0x164>)
 800f748:	681b      	ldr	r3, [r3, #0]
 800f74a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f74c:	4914      	ldr	r1, [pc, #80]	; (800f7a0 <xTaskIncrementTick+0x160>)
 800f74e:	4613      	mov	r3, r2
 800f750:	009b      	lsls	r3, r3, #2
 800f752:	4413      	add	r3, r2
 800f754:	009b      	lsls	r3, r3, #2
 800f756:	440b      	add	r3, r1
 800f758:	681b      	ldr	r3, [r3, #0]
 800f75a:	2b01      	cmp	r3, #1
 800f75c:	d901      	bls.n	800f762 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800f75e:	2301      	movs	r3, #1
 800f760:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800f762:	4b11      	ldr	r3, [pc, #68]	; (800f7a8 <xTaskIncrementTick+0x168>)
 800f764:	681b      	ldr	r3, [r3, #0]
 800f766:	2b00      	cmp	r3, #0
 800f768:	d007      	beq.n	800f77a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800f76a:	2301      	movs	r3, #1
 800f76c:	617b      	str	r3, [r7, #20]
 800f76e:	e004      	b.n	800f77a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800f770:	4b0e      	ldr	r3, [pc, #56]	; (800f7ac <xTaskIncrementTick+0x16c>)
 800f772:	681b      	ldr	r3, [r3, #0]
 800f774:	3301      	adds	r3, #1
 800f776:	4a0d      	ldr	r2, [pc, #52]	; (800f7ac <xTaskIncrementTick+0x16c>)
 800f778:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800f77a:	697b      	ldr	r3, [r7, #20]
}
 800f77c:	4618      	mov	r0, r3
 800f77e:	3718      	adds	r7, #24
 800f780:	46bd      	mov	sp, r7
 800f782:	bd80      	pop	{r7, pc}
 800f784:	20002354 	.word	0x20002354
 800f788:	20002330 	.word	0x20002330
 800f78c:	200022e4 	.word	0x200022e4
 800f790:	200022e8 	.word	0x200022e8
 800f794:	20002344 	.word	0x20002344
 800f798:	2000234c 	.word	0x2000234c
 800f79c:	20002334 	.word	0x20002334
 800f7a0:	20002230 	.word	0x20002230
 800f7a4:	2000222c 	.word	0x2000222c
 800f7a8:	20002340 	.word	0x20002340
 800f7ac:	2000233c 	.word	0x2000233c

0800f7b0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800f7b0:	b580      	push	{r7, lr}
 800f7b2:	b088      	sub	sp, #32
 800f7b4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800f7b6:	4b3c      	ldr	r3, [pc, #240]	; (800f8a8 <vTaskSwitchContext+0xf8>)
 800f7b8:	681b      	ldr	r3, [r3, #0]
 800f7ba:	2b00      	cmp	r3, #0
 800f7bc:	d003      	beq.n	800f7c6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800f7be:	4b3b      	ldr	r3, [pc, #236]	; (800f8ac <vTaskSwitchContext+0xfc>)
 800f7c0:	2201      	movs	r2, #1
 800f7c2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800f7c4:	e06b      	b.n	800f89e <vTaskSwitchContext+0xee>
		xYieldPending = pdFALSE;
 800f7c6:	4b39      	ldr	r3, [pc, #228]	; (800f8ac <vTaskSwitchContext+0xfc>)
 800f7c8:	2200      	movs	r2, #0
 800f7ca:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800f7cc:	4b38      	ldr	r3, [pc, #224]	; (800f8b0 <vTaskSwitchContext+0x100>)
 800f7ce:	681b      	ldr	r3, [r3, #0]
 800f7d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f7d2:	61fb      	str	r3, [r7, #28]
 800f7d4:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800f7d8:	61bb      	str	r3, [r7, #24]
 800f7da:	69fb      	ldr	r3, [r7, #28]
 800f7dc:	681b      	ldr	r3, [r3, #0]
 800f7de:	69ba      	ldr	r2, [r7, #24]
 800f7e0:	429a      	cmp	r2, r3
 800f7e2:	d111      	bne.n	800f808 <vTaskSwitchContext+0x58>
 800f7e4:	69fb      	ldr	r3, [r7, #28]
 800f7e6:	3304      	adds	r3, #4
 800f7e8:	681b      	ldr	r3, [r3, #0]
 800f7ea:	69ba      	ldr	r2, [r7, #24]
 800f7ec:	429a      	cmp	r2, r3
 800f7ee:	d10b      	bne.n	800f808 <vTaskSwitchContext+0x58>
 800f7f0:	69fb      	ldr	r3, [r7, #28]
 800f7f2:	3308      	adds	r3, #8
 800f7f4:	681b      	ldr	r3, [r3, #0]
 800f7f6:	69ba      	ldr	r2, [r7, #24]
 800f7f8:	429a      	cmp	r2, r3
 800f7fa:	d105      	bne.n	800f808 <vTaskSwitchContext+0x58>
 800f7fc:	69fb      	ldr	r3, [r7, #28]
 800f7fe:	330c      	adds	r3, #12
 800f800:	681b      	ldr	r3, [r3, #0]
 800f802:	69ba      	ldr	r2, [r7, #24]
 800f804:	429a      	cmp	r2, r3
 800f806:	d008      	beq.n	800f81a <vTaskSwitchContext+0x6a>
 800f808:	4b29      	ldr	r3, [pc, #164]	; (800f8b0 <vTaskSwitchContext+0x100>)
 800f80a:	681a      	ldr	r2, [r3, #0]
 800f80c:	4b28      	ldr	r3, [pc, #160]	; (800f8b0 <vTaskSwitchContext+0x100>)
 800f80e:	681b      	ldr	r3, [r3, #0]
 800f810:	3334      	adds	r3, #52	; 0x34
 800f812:	4619      	mov	r1, r3
 800f814:	4610      	mov	r0, r2
 800f816:	f7f4 fd19 	bl	800424c <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f81a:	4b26      	ldr	r3, [pc, #152]	; (800f8b4 <vTaskSwitchContext+0x104>)
 800f81c:	681b      	ldr	r3, [r3, #0]
 800f81e:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800f820:	68fb      	ldr	r3, [r7, #12]
 800f822:	fab3 f383 	clz	r3, r3
 800f826:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800f828:	7afb      	ldrb	r3, [r7, #11]
 800f82a:	f1c3 031f 	rsb	r3, r3, #31
 800f82e:	617b      	str	r3, [r7, #20]
 800f830:	4921      	ldr	r1, [pc, #132]	; (800f8b8 <vTaskSwitchContext+0x108>)
 800f832:	697a      	ldr	r2, [r7, #20]
 800f834:	4613      	mov	r3, r2
 800f836:	009b      	lsls	r3, r3, #2
 800f838:	4413      	add	r3, r2
 800f83a:	009b      	lsls	r3, r3, #2
 800f83c:	440b      	add	r3, r1
 800f83e:	681b      	ldr	r3, [r3, #0]
 800f840:	2b00      	cmp	r3, #0
 800f842:	d10a      	bne.n	800f85a <vTaskSwitchContext+0xaa>
	__asm volatile
 800f844:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f848:	f383 8811 	msr	BASEPRI, r3
 800f84c:	f3bf 8f6f 	isb	sy
 800f850:	f3bf 8f4f 	dsb	sy
 800f854:	607b      	str	r3, [r7, #4]
}
 800f856:	bf00      	nop
 800f858:	e7fe      	b.n	800f858 <vTaskSwitchContext+0xa8>
 800f85a:	697a      	ldr	r2, [r7, #20]
 800f85c:	4613      	mov	r3, r2
 800f85e:	009b      	lsls	r3, r3, #2
 800f860:	4413      	add	r3, r2
 800f862:	009b      	lsls	r3, r3, #2
 800f864:	4a14      	ldr	r2, [pc, #80]	; (800f8b8 <vTaskSwitchContext+0x108>)
 800f866:	4413      	add	r3, r2
 800f868:	613b      	str	r3, [r7, #16]
 800f86a:	693b      	ldr	r3, [r7, #16]
 800f86c:	685b      	ldr	r3, [r3, #4]
 800f86e:	685a      	ldr	r2, [r3, #4]
 800f870:	693b      	ldr	r3, [r7, #16]
 800f872:	605a      	str	r2, [r3, #4]
 800f874:	693b      	ldr	r3, [r7, #16]
 800f876:	685a      	ldr	r2, [r3, #4]
 800f878:	693b      	ldr	r3, [r7, #16]
 800f87a:	3308      	adds	r3, #8
 800f87c:	429a      	cmp	r2, r3
 800f87e:	d104      	bne.n	800f88a <vTaskSwitchContext+0xda>
 800f880:	693b      	ldr	r3, [r7, #16]
 800f882:	685b      	ldr	r3, [r3, #4]
 800f884:	685a      	ldr	r2, [r3, #4]
 800f886:	693b      	ldr	r3, [r7, #16]
 800f888:	605a      	str	r2, [r3, #4]
 800f88a:	693b      	ldr	r3, [r7, #16]
 800f88c:	685b      	ldr	r3, [r3, #4]
 800f88e:	68db      	ldr	r3, [r3, #12]
 800f890:	4a07      	ldr	r2, [pc, #28]	; (800f8b0 <vTaskSwitchContext+0x100>)
 800f892:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f894:	4b06      	ldr	r3, [pc, #24]	; (800f8b0 <vTaskSwitchContext+0x100>)
 800f896:	681b      	ldr	r3, [r3, #0]
 800f898:	334c      	adds	r3, #76	; 0x4c
 800f89a:	4a08      	ldr	r2, [pc, #32]	; (800f8bc <vTaskSwitchContext+0x10c>)
 800f89c:	6013      	str	r3, [r2, #0]
}
 800f89e:	bf00      	nop
 800f8a0:	3720      	adds	r7, #32
 800f8a2:	46bd      	mov	sp, r7
 800f8a4:	bd80      	pop	{r7, pc}
 800f8a6:	bf00      	nop
 800f8a8:	20002354 	.word	0x20002354
 800f8ac:	20002340 	.word	0x20002340
 800f8b0:	2000222c 	.word	0x2000222c
 800f8b4:	20002334 	.word	0x20002334
 800f8b8:	20002230 	.word	0x20002230
 800f8bc:	20000198 	.word	0x20000198

0800f8c0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800f8c0:	b580      	push	{r7, lr}
 800f8c2:	b082      	sub	sp, #8
 800f8c4:	af00      	add	r7, sp, #0
 800f8c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800f8c8:	f000 f852 	bl	800f970 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800f8cc:	4b06      	ldr	r3, [pc, #24]	; (800f8e8 <prvIdleTask+0x28>)
 800f8ce:	681b      	ldr	r3, [r3, #0]
 800f8d0:	2b01      	cmp	r3, #1
 800f8d2:	d9f9      	bls.n	800f8c8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800f8d4:	4b05      	ldr	r3, [pc, #20]	; (800f8ec <prvIdleTask+0x2c>)
 800f8d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f8da:	601a      	str	r2, [r3, #0]
 800f8dc:	f3bf 8f4f 	dsb	sy
 800f8e0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800f8e4:	e7f0      	b.n	800f8c8 <prvIdleTask+0x8>
 800f8e6:	bf00      	nop
 800f8e8:	20002230 	.word	0x20002230
 800f8ec:	e000ed04 	.word	0xe000ed04

0800f8f0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800f8f0:	b580      	push	{r7, lr}
 800f8f2:	b082      	sub	sp, #8
 800f8f4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f8f6:	2300      	movs	r3, #0
 800f8f8:	607b      	str	r3, [r7, #4]
 800f8fa:	e00c      	b.n	800f916 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800f8fc:	687a      	ldr	r2, [r7, #4]
 800f8fe:	4613      	mov	r3, r2
 800f900:	009b      	lsls	r3, r3, #2
 800f902:	4413      	add	r3, r2
 800f904:	009b      	lsls	r3, r3, #2
 800f906:	4a12      	ldr	r2, [pc, #72]	; (800f950 <prvInitialiseTaskLists+0x60>)
 800f908:	4413      	add	r3, r2
 800f90a:	4618      	mov	r0, r3
 800f90c:	f7ff fac4 	bl	800ee98 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	3301      	adds	r3, #1
 800f914:	607b      	str	r3, [r7, #4]
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	2b06      	cmp	r3, #6
 800f91a:	d9ef      	bls.n	800f8fc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800f91c:	480d      	ldr	r0, [pc, #52]	; (800f954 <prvInitialiseTaskLists+0x64>)
 800f91e:	f7ff fabb 	bl	800ee98 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800f922:	480d      	ldr	r0, [pc, #52]	; (800f958 <prvInitialiseTaskLists+0x68>)
 800f924:	f7ff fab8 	bl	800ee98 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800f928:	480c      	ldr	r0, [pc, #48]	; (800f95c <prvInitialiseTaskLists+0x6c>)
 800f92a:	f7ff fab5 	bl	800ee98 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800f92e:	480c      	ldr	r0, [pc, #48]	; (800f960 <prvInitialiseTaskLists+0x70>)
 800f930:	f7ff fab2 	bl	800ee98 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800f934:	480b      	ldr	r0, [pc, #44]	; (800f964 <prvInitialiseTaskLists+0x74>)
 800f936:	f7ff faaf 	bl	800ee98 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800f93a:	4b0b      	ldr	r3, [pc, #44]	; (800f968 <prvInitialiseTaskLists+0x78>)
 800f93c:	4a05      	ldr	r2, [pc, #20]	; (800f954 <prvInitialiseTaskLists+0x64>)
 800f93e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800f940:	4b0a      	ldr	r3, [pc, #40]	; (800f96c <prvInitialiseTaskLists+0x7c>)
 800f942:	4a05      	ldr	r2, [pc, #20]	; (800f958 <prvInitialiseTaskLists+0x68>)
 800f944:	601a      	str	r2, [r3, #0]
}
 800f946:	bf00      	nop
 800f948:	3708      	adds	r7, #8
 800f94a:	46bd      	mov	sp, r7
 800f94c:	bd80      	pop	{r7, pc}
 800f94e:	bf00      	nop
 800f950:	20002230 	.word	0x20002230
 800f954:	200022bc 	.word	0x200022bc
 800f958:	200022d0 	.word	0x200022d0
 800f95c:	200022ec 	.word	0x200022ec
 800f960:	20002300 	.word	0x20002300
 800f964:	20002318 	.word	0x20002318
 800f968:	200022e4 	.word	0x200022e4
 800f96c:	200022e8 	.word	0x200022e8

0800f970 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800f970:	b580      	push	{r7, lr}
 800f972:	b082      	sub	sp, #8
 800f974:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f976:	e019      	b.n	800f9ac <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800f978:	f000 fbf4 	bl	8010164 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f97c:	4b10      	ldr	r3, [pc, #64]	; (800f9c0 <prvCheckTasksWaitingTermination+0x50>)
 800f97e:	68db      	ldr	r3, [r3, #12]
 800f980:	68db      	ldr	r3, [r3, #12]
 800f982:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	3304      	adds	r3, #4
 800f988:	4618      	mov	r0, r3
 800f98a:	f7ff fb0f 	bl	800efac <uxListRemove>
				--uxCurrentNumberOfTasks;
 800f98e:	4b0d      	ldr	r3, [pc, #52]	; (800f9c4 <prvCheckTasksWaitingTermination+0x54>)
 800f990:	681b      	ldr	r3, [r3, #0]
 800f992:	3b01      	subs	r3, #1
 800f994:	4a0b      	ldr	r2, [pc, #44]	; (800f9c4 <prvCheckTasksWaitingTermination+0x54>)
 800f996:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800f998:	4b0b      	ldr	r3, [pc, #44]	; (800f9c8 <prvCheckTasksWaitingTermination+0x58>)
 800f99a:	681b      	ldr	r3, [r3, #0]
 800f99c:	3b01      	subs	r3, #1
 800f99e:	4a0a      	ldr	r2, [pc, #40]	; (800f9c8 <prvCheckTasksWaitingTermination+0x58>)
 800f9a0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800f9a2:	f000 fc0f 	bl	80101c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800f9a6:	6878      	ldr	r0, [r7, #4]
 800f9a8:	f000 f810 	bl	800f9cc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f9ac:	4b06      	ldr	r3, [pc, #24]	; (800f9c8 <prvCheckTasksWaitingTermination+0x58>)
 800f9ae:	681b      	ldr	r3, [r3, #0]
 800f9b0:	2b00      	cmp	r3, #0
 800f9b2:	d1e1      	bne.n	800f978 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800f9b4:	bf00      	nop
 800f9b6:	bf00      	nop
 800f9b8:	3708      	adds	r7, #8
 800f9ba:	46bd      	mov	sp, r7
 800f9bc:	bd80      	pop	{r7, pc}
 800f9be:	bf00      	nop
 800f9c0:	20002300 	.word	0x20002300
 800f9c4:	2000232c 	.word	0x2000232c
 800f9c8:	20002314 	.word	0x20002314

0800f9cc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800f9cc:	b580      	push	{r7, lr}
 800f9ce:	b082      	sub	sp, #8
 800f9d0:	af00      	add	r7, sp, #0
 800f9d2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	334c      	adds	r3, #76	; 0x4c
 800f9d8:	4618      	mov	r0, r3
 800f9da:	f004 fa61 	bl	8013ea0 <_reclaim_reent>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f9e2:	4618      	mov	r0, r3
 800f9e4:	f000 fdb0 	bl	8010548 <vPortFree>
			vPortFree( pxTCB );
 800f9e8:	6878      	ldr	r0, [r7, #4]
 800f9ea:	f000 fdad 	bl	8010548 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800f9ee:	bf00      	nop
 800f9f0:	3708      	adds	r7, #8
 800f9f2:	46bd      	mov	sp, r7
 800f9f4:	bd80      	pop	{r7, pc}
	...

0800f9f8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800f9f8:	b480      	push	{r7}
 800f9fa:	b083      	sub	sp, #12
 800f9fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f9fe:	4b0c      	ldr	r3, [pc, #48]	; (800fa30 <prvResetNextTaskUnblockTime+0x38>)
 800fa00:	681b      	ldr	r3, [r3, #0]
 800fa02:	681b      	ldr	r3, [r3, #0]
 800fa04:	2b00      	cmp	r3, #0
 800fa06:	d104      	bne.n	800fa12 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800fa08:	4b0a      	ldr	r3, [pc, #40]	; (800fa34 <prvResetNextTaskUnblockTime+0x3c>)
 800fa0a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fa0e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800fa10:	e008      	b.n	800fa24 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fa12:	4b07      	ldr	r3, [pc, #28]	; (800fa30 <prvResetNextTaskUnblockTime+0x38>)
 800fa14:	681b      	ldr	r3, [r3, #0]
 800fa16:	68db      	ldr	r3, [r3, #12]
 800fa18:	68db      	ldr	r3, [r3, #12]
 800fa1a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	685b      	ldr	r3, [r3, #4]
 800fa20:	4a04      	ldr	r2, [pc, #16]	; (800fa34 <prvResetNextTaskUnblockTime+0x3c>)
 800fa22:	6013      	str	r3, [r2, #0]
}
 800fa24:	bf00      	nop
 800fa26:	370c      	adds	r7, #12
 800fa28:	46bd      	mov	sp, r7
 800fa2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa2e:	4770      	bx	lr
 800fa30:	200022e4 	.word	0x200022e4
 800fa34:	2000234c 	.word	0x2000234c

0800fa38 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800fa38:	b580      	push	{r7, lr}
 800fa3a:	b086      	sub	sp, #24
 800fa3c:	af00      	add	r7, sp, #0
 800fa3e:	60f8      	str	r0, [r7, #12]
 800fa40:	60b9      	str	r1, [r7, #8]
 800fa42:	607a      	str	r2, [r7, #4]
 800fa44:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800fa46:	f000 fb8d 	bl	8010164 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800fa4a:	4b29      	ldr	r3, [pc, #164]	; (800faf0 <xTaskNotifyWait+0xb8>)
 800fa4c:	681b      	ldr	r3, [r3, #0]
 800fa4e:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800fa52:	b2db      	uxtb	r3, r3
 800fa54:	2b02      	cmp	r3, #2
 800fa56:	d01c      	beq.n	800fa92 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800fa58:	4b25      	ldr	r3, [pc, #148]	; (800faf0 <xTaskNotifyWait+0xb8>)
 800fa5a:	681b      	ldr	r3, [r3, #0]
 800fa5c:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 800fa60:	68fa      	ldr	r2, [r7, #12]
 800fa62:	43d2      	mvns	r2, r2
 800fa64:	400a      	ands	r2, r1
 800fa66:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800fa6a:	4b21      	ldr	r3, [pc, #132]	; (800faf0 <xTaskNotifyWait+0xb8>)
 800fa6c:	681b      	ldr	r3, [r3, #0]
 800fa6e:	2201      	movs	r2, #1
 800fa70:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c

				if( xTicksToWait > ( TickType_t ) 0 )
 800fa74:	683b      	ldr	r3, [r7, #0]
 800fa76:	2b00      	cmp	r3, #0
 800fa78:	d00b      	beq.n	800fa92 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800fa7a:	2101      	movs	r1, #1
 800fa7c:	6838      	ldr	r0, [r7, #0]
 800fa7e:	f000 f9dd 	bl	800fe3c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800fa82:	4b1c      	ldr	r3, [pc, #112]	; (800faf4 <xTaskNotifyWait+0xbc>)
 800fa84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fa88:	601a      	str	r2, [r3, #0]
 800fa8a:	f3bf 8f4f 	dsb	sy
 800fa8e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800fa92:	f000 fb97 	bl	80101c4 <vPortExitCritical>

		taskENTER_CRITICAL();
 800fa96:	f000 fb65 	bl	8010164 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	d005      	beq.n	800faac <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800faa0:	4b13      	ldr	r3, [pc, #76]	; (800faf0 <xTaskNotifyWait+0xb8>)
 800faa2:	681b      	ldr	r3, [r3, #0]
 800faa4:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800faac:	4b10      	ldr	r3, [pc, #64]	; (800faf0 <xTaskNotifyWait+0xb8>)
 800faae:	681b      	ldr	r3, [r3, #0]
 800fab0:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800fab4:	b2db      	uxtb	r3, r3
 800fab6:	2b02      	cmp	r3, #2
 800fab8:	d002      	beq.n	800fac0 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800faba:	2300      	movs	r3, #0
 800fabc:	617b      	str	r3, [r7, #20]
 800fabe:	e00a      	b.n	800fad6 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800fac0:	4b0b      	ldr	r3, [pc, #44]	; (800faf0 <xTaskNotifyWait+0xb8>)
 800fac2:	681b      	ldr	r3, [r3, #0]
 800fac4:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 800fac8:	68ba      	ldr	r2, [r7, #8]
 800faca:	43d2      	mvns	r2, r2
 800facc:	400a      	ands	r2, r1
 800face:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
				xReturn = pdTRUE;
 800fad2:	2301      	movs	r3, #1
 800fad4:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800fad6:	4b06      	ldr	r3, [pc, #24]	; (800faf0 <xTaskNotifyWait+0xb8>)
 800fad8:	681b      	ldr	r3, [r3, #0]
 800fada:	2200      	movs	r2, #0
 800fadc:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
		}
		taskEXIT_CRITICAL();
 800fae0:	f000 fb70 	bl	80101c4 <vPortExitCritical>

		return xReturn;
 800fae4:	697b      	ldr	r3, [r7, #20]
	}
 800fae6:	4618      	mov	r0, r3
 800fae8:	3718      	adds	r7, #24
 800faea:	46bd      	mov	sp, r7
 800faec:	bd80      	pop	{r7, pc}
 800faee:	bf00      	nop
 800faf0:	2000222c 	.word	0x2000222c
 800faf4:	e000ed04 	.word	0xe000ed04

0800faf8 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800faf8:	b580      	push	{r7, lr}
 800fafa:	b08a      	sub	sp, #40	; 0x28
 800fafc:	af00      	add	r7, sp, #0
 800fafe:	60f8      	str	r0, [r7, #12]
 800fb00:	60b9      	str	r1, [r7, #8]
 800fb02:	603b      	str	r3, [r7, #0]
 800fb04:	4613      	mov	r3, r2
 800fb06:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800fb08:	2301      	movs	r3, #1
 800fb0a:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800fb0c:	68fb      	ldr	r3, [r7, #12]
 800fb0e:	2b00      	cmp	r3, #0
 800fb10:	d10a      	bne.n	800fb28 <xTaskGenericNotify+0x30>
	__asm volatile
 800fb12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb16:	f383 8811 	msr	BASEPRI, r3
 800fb1a:	f3bf 8f6f 	isb	sy
 800fb1e:	f3bf 8f4f 	dsb	sy
 800fb22:	61bb      	str	r3, [r7, #24]
}
 800fb24:	bf00      	nop
 800fb26:	e7fe      	b.n	800fb26 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800fb28:	68fb      	ldr	r3, [r7, #12]
 800fb2a:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800fb2c:	f000 fb1a 	bl	8010164 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800fb30:	683b      	ldr	r3, [r7, #0]
 800fb32:	2b00      	cmp	r3, #0
 800fb34:	d004      	beq.n	800fb40 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800fb36:	6a3b      	ldr	r3, [r7, #32]
 800fb38:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800fb3c:	683b      	ldr	r3, [r7, #0]
 800fb3e:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800fb40:	6a3b      	ldr	r3, [r7, #32]
 800fb42:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800fb46:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800fb48:	6a3b      	ldr	r3, [r7, #32]
 800fb4a:	2202      	movs	r2, #2
 800fb4c:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c

			switch( eAction )
 800fb50:	79fb      	ldrb	r3, [r7, #7]
 800fb52:	2b04      	cmp	r3, #4
 800fb54:	d82d      	bhi.n	800fbb2 <xTaskGenericNotify+0xba>
 800fb56:	a201      	add	r2, pc, #4	; (adr r2, 800fb5c <xTaskGenericNotify+0x64>)
 800fb58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb5c:	0800fbd5 	.word	0x0800fbd5
 800fb60:	0800fb71 	.word	0x0800fb71
 800fb64:	0800fb83 	.word	0x0800fb83
 800fb68:	0800fb93 	.word	0x0800fb93
 800fb6c:	0800fb9d 	.word	0x0800fb9d
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800fb70:	6a3b      	ldr	r3, [r7, #32]
 800fb72:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800fb76:	68bb      	ldr	r3, [r7, #8]
 800fb78:	431a      	orrs	r2, r3
 800fb7a:	6a3b      	ldr	r3, [r7, #32]
 800fb7c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					break;
 800fb80:	e02b      	b.n	800fbda <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800fb82:	6a3b      	ldr	r3, [r7, #32]
 800fb84:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800fb88:	1c5a      	adds	r2, r3, #1
 800fb8a:	6a3b      	ldr	r3, [r7, #32]
 800fb8c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					break;
 800fb90:	e023      	b.n	800fbda <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800fb92:	6a3b      	ldr	r3, [r7, #32]
 800fb94:	68ba      	ldr	r2, [r7, #8]
 800fb96:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					break;
 800fb9a:	e01e      	b.n	800fbda <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800fb9c:	7ffb      	ldrb	r3, [r7, #31]
 800fb9e:	2b02      	cmp	r3, #2
 800fba0:	d004      	beq.n	800fbac <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800fba2:	6a3b      	ldr	r3, [r7, #32]
 800fba4:	68ba      	ldr	r2, [r7, #8]
 800fba6:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800fbaa:	e016      	b.n	800fbda <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 800fbac:	2300      	movs	r3, #0
 800fbae:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800fbb0:	e013      	b.n	800fbda <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800fbb2:	6a3b      	ldr	r3, [r7, #32]
 800fbb4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800fbb8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fbbc:	d00c      	beq.n	800fbd8 <xTaskGenericNotify+0xe0>
	__asm volatile
 800fbbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbc2:	f383 8811 	msr	BASEPRI, r3
 800fbc6:	f3bf 8f6f 	isb	sy
 800fbca:	f3bf 8f4f 	dsb	sy
 800fbce:	617b      	str	r3, [r7, #20]
}
 800fbd0:	bf00      	nop
 800fbd2:	e7fe      	b.n	800fbd2 <xTaskGenericNotify+0xda>
					break;
 800fbd4:	bf00      	nop
 800fbd6:	e000      	b.n	800fbda <xTaskGenericNotify+0xe2>

					break;
 800fbd8:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800fbda:	7ffb      	ldrb	r3, [r7, #31]
 800fbdc:	2b01      	cmp	r3, #1
 800fbde:	d139      	bne.n	800fc54 <xTaskGenericNotify+0x15c>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fbe0:	6a3b      	ldr	r3, [r7, #32]
 800fbe2:	3304      	adds	r3, #4
 800fbe4:	4618      	mov	r0, r3
 800fbe6:	f7ff f9e1 	bl	800efac <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800fbea:	6a3b      	ldr	r3, [r7, #32]
 800fbec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fbee:	2201      	movs	r2, #1
 800fbf0:	409a      	lsls	r2, r3
 800fbf2:	4b1c      	ldr	r3, [pc, #112]	; (800fc64 <xTaskGenericNotify+0x16c>)
 800fbf4:	681b      	ldr	r3, [r3, #0]
 800fbf6:	4313      	orrs	r3, r2
 800fbf8:	4a1a      	ldr	r2, [pc, #104]	; (800fc64 <xTaskGenericNotify+0x16c>)
 800fbfa:	6013      	str	r3, [r2, #0]
 800fbfc:	6a3b      	ldr	r3, [r7, #32]
 800fbfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fc00:	4613      	mov	r3, r2
 800fc02:	009b      	lsls	r3, r3, #2
 800fc04:	4413      	add	r3, r2
 800fc06:	009b      	lsls	r3, r3, #2
 800fc08:	4a17      	ldr	r2, [pc, #92]	; (800fc68 <xTaskGenericNotify+0x170>)
 800fc0a:	441a      	add	r2, r3
 800fc0c:	6a3b      	ldr	r3, [r7, #32]
 800fc0e:	3304      	adds	r3, #4
 800fc10:	4619      	mov	r1, r3
 800fc12:	4610      	mov	r0, r2
 800fc14:	f7ff f96d 	bl	800eef2 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800fc18:	6a3b      	ldr	r3, [r7, #32]
 800fc1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fc1c:	2b00      	cmp	r3, #0
 800fc1e:	d00a      	beq.n	800fc36 <xTaskGenericNotify+0x13e>
	__asm volatile
 800fc20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc24:	f383 8811 	msr	BASEPRI, r3
 800fc28:	f3bf 8f6f 	isb	sy
 800fc2c:	f3bf 8f4f 	dsb	sy
 800fc30:	613b      	str	r3, [r7, #16]
}
 800fc32:	bf00      	nop
 800fc34:	e7fe      	b.n	800fc34 <xTaskGenericNotify+0x13c>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800fc36:	6a3b      	ldr	r3, [r7, #32]
 800fc38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fc3a:	4b0c      	ldr	r3, [pc, #48]	; (800fc6c <xTaskGenericNotify+0x174>)
 800fc3c:	681b      	ldr	r3, [r3, #0]
 800fc3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc40:	429a      	cmp	r2, r3
 800fc42:	d907      	bls.n	800fc54 <xTaskGenericNotify+0x15c>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800fc44:	4b0a      	ldr	r3, [pc, #40]	; (800fc70 <xTaskGenericNotify+0x178>)
 800fc46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fc4a:	601a      	str	r2, [r3, #0]
 800fc4c:	f3bf 8f4f 	dsb	sy
 800fc50:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800fc54:	f000 fab6 	bl	80101c4 <vPortExitCritical>

		return xReturn;
 800fc58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800fc5a:	4618      	mov	r0, r3
 800fc5c:	3728      	adds	r7, #40	; 0x28
 800fc5e:	46bd      	mov	sp, r7
 800fc60:	bd80      	pop	{r7, pc}
 800fc62:	bf00      	nop
 800fc64:	20002334 	.word	0x20002334
 800fc68:	20002230 	.word	0x20002230
 800fc6c:	2000222c 	.word	0x2000222c
 800fc70:	e000ed04 	.word	0xe000ed04

0800fc74 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800fc74:	b580      	push	{r7, lr}
 800fc76:	b08e      	sub	sp, #56	; 0x38
 800fc78:	af00      	add	r7, sp, #0
 800fc7a:	60f8      	str	r0, [r7, #12]
 800fc7c:	60b9      	str	r1, [r7, #8]
 800fc7e:	603b      	str	r3, [r7, #0]
 800fc80:	4613      	mov	r3, r2
 800fc82:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800fc84:	2301      	movs	r3, #1
 800fc86:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800fc88:	68fb      	ldr	r3, [r7, #12]
 800fc8a:	2b00      	cmp	r3, #0
 800fc8c:	d10a      	bne.n	800fca4 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 800fc8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc92:	f383 8811 	msr	BASEPRI, r3
 800fc96:	f3bf 8f6f 	isb	sy
 800fc9a:	f3bf 8f4f 	dsb	sy
 800fc9e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800fca0:	bf00      	nop
 800fca2:	e7fe      	b.n	800fca2 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800fca4:	f000 fb40 	bl	8010328 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800fca8:	68fb      	ldr	r3, [r7, #12]
 800fcaa:	633b      	str	r3, [r7, #48]	; 0x30

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800fcac:	f3ef 8211 	mrs	r2, BASEPRI
 800fcb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcb4:	f383 8811 	msr	BASEPRI, r3
 800fcb8:	f3bf 8f6f 	isb	sy
 800fcbc:	f3bf 8f4f 	dsb	sy
 800fcc0:	623a      	str	r2, [r7, #32]
 800fcc2:	61fb      	str	r3, [r7, #28]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800fcc4:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800fcc6:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800fcc8:	683b      	ldr	r3, [r7, #0]
 800fcca:	2b00      	cmp	r3, #0
 800fccc:	d004      	beq.n	800fcd8 <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800fcce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcd0:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800fcd4:	683b      	ldr	r3, [r7, #0]
 800fcd6:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800fcd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcda:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800fcde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800fce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fce4:	2202      	movs	r2, #2
 800fce6:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c

			switch( eAction )
 800fcea:	79fb      	ldrb	r3, [r7, #7]
 800fcec:	2b04      	cmp	r3, #4
 800fcee:	d82f      	bhi.n	800fd50 <xTaskGenericNotifyFromISR+0xdc>
 800fcf0:	a201      	add	r2, pc, #4	; (adr r2, 800fcf8 <xTaskGenericNotifyFromISR+0x84>)
 800fcf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fcf6:	bf00      	nop
 800fcf8:	0800fd73 	.word	0x0800fd73
 800fcfc:	0800fd0d 	.word	0x0800fd0d
 800fd00:	0800fd1f 	.word	0x0800fd1f
 800fd04:	0800fd2f 	.word	0x0800fd2f
 800fd08:	0800fd39 	.word	0x0800fd39
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800fd0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd0e:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800fd12:	68bb      	ldr	r3, [r7, #8]
 800fd14:	431a      	orrs	r2, r3
 800fd16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd18:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					break;
 800fd1c:	e02c      	b.n	800fd78 <xTaskGenericNotifyFromISR+0x104>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800fd1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd20:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800fd24:	1c5a      	adds	r2, r3, #1
 800fd26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd28:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					break;
 800fd2c:	e024      	b.n	800fd78 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800fd2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd30:	68ba      	ldr	r2, [r7, #8]
 800fd32:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					break;
 800fd36:	e01f      	b.n	800fd78 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800fd38:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800fd3c:	2b02      	cmp	r3, #2
 800fd3e:	d004      	beq.n	800fd4a <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800fd40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd42:	68ba      	ldr	r2, [r7, #8]
 800fd44:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800fd48:	e016      	b.n	800fd78 <xTaskGenericNotifyFromISR+0x104>
						xReturn = pdFAIL;
 800fd4a:	2300      	movs	r3, #0
 800fd4c:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800fd4e:	e013      	b.n	800fd78 <xTaskGenericNotifyFromISR+0x104>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800fd50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd52:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800fd56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fd5a:	d00c      	beq.n	800fd76 <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 800fd5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd60:	f383 8811 	msr	BASEPRI, r3
 800fd64:	f3bf 8f6f 	isb	sy
 800fd68:	f3bf 8f4f 	dsb	sy
 800fd6c:	61bb      	str	r3, [r7, #24]
}
 800fd6e:	bf00      	nop
 800fd70:	e7fe      	b.n	800fd70 <xTaskGenericNotifyFromISR+0xfc>
					break;
 800fd72:	bf00      	nop
 800fd74:	e000      	b.n	800fd78 <xTaskGenericNotifyFromISR+0x104>
					break;
 800fd76:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800fd78:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800fd7c:	2b01      	cmp	r3, #1
 800fd7e:	d145      	bne.n	800fe0c <xTaskGenericNotifyFromISR+0x198>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800fd80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fd84:	2b00      	cmp	r3, #0
 800fd86:	d00a      	beq.n	800fd9e <xTaskGenericNotifyFromISR+0x12a>
	__asm volatile
 800fd88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd8c:	f383 8811 	msr	BASEPRI, r3
 800fd90:	f3bf 8f6f 	isb	sy
 800fd94:	f3bf 8f4f 	dsb	sy
 800fd98:	617b      	str	r3, [r7, #20]
}
 800fd9a:	bf00      	nop
 800fd9c:	e7fe      	b.n	800fd9c <xTaskGenericNotifyFromISR+0x128>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fd9e:	4b21      	ldr	r3, [pc, #132]	; (800fe24 <xTaskGenericNotifyFromISR+0x1b0>)
 800fda0:	681b      	ldr	r3, [r3, #0]
 800fda2:	2b00      	cmp	r3, #0
 800fda4:	d11c      	bne.n	800fde0 <xTaskGenericNotifyFromISR+0x16c>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fda6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fda8:	3304      	adds	r3, #4
 800fdaa:	4618      	mov	r0, r3
 800fdac:	f7ff f8fe 	bl	800efac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800fdb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fdb4:	2201      	movs	r2, #1
 800fdb6:	409a      	lsls	r2, r3
 800fdb8:	4b1b      	ldr	r3, [pc, #108]	; (800fe28 <xTaskGenericNotifyFromISR+0x1b4>)
 800fdba:	681b      	ldr	r3, [r3, #0]
 800fdbc:	4313      	orrs	r3, r2
 800fdbe:	4a1a      	ldr	r2, [pc, #104]	; (800fe28 <xTaskGenericNotifyFromISR+0x1b4>)
 800fdc0:	6013      	str	r3, [r2, #0]
 800fdc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fdc6:	4613      	mov	r3, r2
 800fdc8:	009b      	lsls	r3, r3, #2
 800fdca:	4413      	add	r3, r2
 800fdcc:	009b      	lsls	r3, r3, #2
 800fdce:	4a17      	ldr	r2, [pc, #92]	; (800fe2c <xTaskGenericNotifyFromISR+0x1b8>)
 800fdd0:	441a      	add	r2, r3
 800fdd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdd4:	3304      	adds	r3, #4
 800fdd6:	4619      	mov	r1, r3
 800fdd8:	4610      	mov	r0, r2
 800fdda:	f7ff f88a 	bl	800eef2 <vListInsertEnd>
 800fdde:	e005      	b.n	800fdec <xTaskGenericNotifyFromISR+0x178>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800fde0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fde2:	3318      	adds	r3, #24
 800fde4:	4619      	mov	r1, r3
 800fde6:	4812      	ldr	r0, [pc, #72]	; (800fe30 <xTaskGenericNotifyFromISR+0x1bc>)
 800fde8:	f7ff f883 	bl	800eef2 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800fdec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fdf0:	4b10      	ldr	r3, [pc, #64]	; (800fe34 <xTaskGenericNotifyFromISR+0x1c0>)
 800fdf2:	681b      	ldr	r3, [r3, #0]
 800fdf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fdf6:	429a      	cmp	r2, r3
 800fdf8:	d908      	bls.n	800fe0c <xTaskGenericNotifyFromISR+0x198>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800fdfa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fdfc:	2b00      	cmp	r3, #0
 800fdfe:	d002      	beq.n	800fe06 <xTaskGenericNotifyFromISR+0x192>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800fe00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fe02:	2201      	movs	r2, #1
 800fe04:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800fe06:	4b0c      	ldr	r3, [pc, #48]	; (800fe38 <xTaskGenericNotifyFromISR+0x1c4>)
 800fe08:	2201      	movs	r2, #1
 800fe0a:	601a      	str	r2, [r3, #0]
 800fe0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe0e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800fe10:	693b      	ldr	r3, [r7, #16]
 800fe12:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800fe16:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800fe18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800fe1a:	4618      	mov	r0, r3
 800fe1c:	3738      	adds	r7, #56	; 0x38
 800fe1e:	46bd      	mov	sp, r7
 800fe20:	bd80      	pop	{r7, pc}
 800fe22:	bf00      	nop
 800fe24:	20002354 	.word	0x20002354
 800fe28:	20002334 	.word	0x20002334
 800fe2c:	20002230 	.word	0x20002230
 800fe30:	200022ec 	.word	0x200022ec
 800fe34:	2000222c 	.word	0x2000222c
 800fe38:	20002340 	.word	0x20002340

0800fe3c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800fe3c:	b580      	push	{r7, lr}
 800fe3e:	b084      	sub	sp, #16
 800fe40:	af00      	add	r7, sp, #0
 800fe42:	6078      	str	r0, [r7, #4]
 800fe44:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800fe46:	4b29      	ldr	r3, [pc, #164]	; (800feec <prvAddCurrentTaskToDelayedList+0xb0>)
 800fe48:	681b      	ldr	r3, [r3, #0]
 800fe4a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fe4c:	4b28      	ldr	r3, [pc, #160]	; (800fef0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800fe4e:	681b      	ldr	r3, [r3, #0]
 800fe50:	3304      	adds	r3, #4
 800fe52:	4618      	mov	r0, r3
 800fe54:	f7ff f8aa 	bl	800efac <uxListRemove>
 800fe58:	4603      	mov	r3, r0
 800fe5a:	2b00      	cmp	r3, #0
 800fe5c:	d10b      	bne.n	800fe76 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800fe5e:	4b24      	ldr	r3, [pc, #144]	; (800fef0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800fe60:	681b      	ldr	r3, [r3, #0]
 800fe62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe64:	2201      	movs	r2, #1
 800fe66:	fa02 f303 	lsl.w	r3, r2, r3
 800fe6a:	43da      	mvns	r2, r3
 800fe6c:	4b21      	ldr	r3, [pc, #132]	; (800fef4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800fe6e:	681b      	ldr	r3, [r3, #0]
 800fe70:	4013      	ands	r3, r2
 800fe72:	4a20      	ldr	r2, [pc, #128]	; (800fef4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800fe74:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fe7c:	d10a      	bne.n	800fe94 <prvAddCurrentTaskToDelayedList+0x58>
 800fe7e:	683b      	ldr	r3, [r7, #0]
 800fe80:	2b00      	cmp	r3, #0
 800fe82:	d007      	beq.n	800fe94 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800fe84:	4b1a      	ldr	r3, [pc, #104]	; (800fef0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800fe86:	681b      	ldr	r3, [r3, #0]
 800fe88:	3304      	adds	r3, #4
 800fe8a:	4619      	mov	r1, r3
 800fe8c:	481a      	ldr	r0, [pc, #104]	; (800fef8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800fe8e:	f7ff f830 	bl	800eef2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800fe92:	e026      	b.n	800fee2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800fe94:	68fa      	ldr	r2, [r7, #12]
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	4413      	add	r3, r2
 800fe9a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800fe9c:	4b14      	ldr	r3, [pc, #80]	; (800fef0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800fe9e:	681b      	ldr	r3, [r3, #0]
 800fea0:	68ba      	ldr	r2, [r7, #8]
 800fea2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800fea4:	68ba      	ldr	r2, [r7, #8]
 800fea6:	68fb      	ldr	r3, [r7, #12]
 800fea8:	429a      	cmp	r2, r3
 800feaa:	d209      	bcs.n	800fec0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800feac:	4b13      	ldr	r3, [pc, #76]	; (800fefc <prvAddCurrentTaskToDelayedList+0xc0>)
 800feae:	681a      	ldr	r2, [r3, #0]
 800feb0:	4b0f      	ldr	r3, [pc, #60]	; (800fef0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800feb2:	681b      	ldr	r3, [r3, #0]
 800feb4:	3304      	adds	r3, #4
 800feb6:	4619      	mov	r1, r3
 800feb8:	4610      	mov	r0, r2
 800feba:	f7ff f83e 	bl	800ef3a <vListInsert>
}
 800febe:	e010      	b.n	800fee2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800fec0:	4b0f      	ldr	r3, [pc, #60]	; (800ff00 <prvAddCurrentTaskToDelayedList+0xc4>)
 800fec2:	681a      	ldr	r2, [r3, #0]
 800fec4:	4b0a      	ldr	r3, [pc, #40]	; (800fef0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800fec6:	681b      	ldr	r3, [r3, #0]
 800fec8:	3304      	adds	r3, #4
 800feca:	4619      	mov	r1, r3
 800fecc:	4610      	mov	r0, r2
 800fece:	f7ff f834 	bl	800ef3a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800fed2:	4b0c      	ldr	r3, [pc, #48]	; (800ff04 <prvAddCurrentTaskToDelayedList+0xc8>)
 800fed4:	681b      	ldr	r3, [r3, #0]
 800fed6:	68ba      	ldr	r2, [r7, #8]
 800fed8:	429a      	cmp	r2, r3
 800feda:	d202      	bcs.n	800fee2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800fedc:	4a09      	ldr	r2, [pc, #36]	; (800ff04 <prvAddCurrentTaskToDelayedList+0xc8>)
 800fede:	68bb      	ldr	r3, [r7, #8]
 800fee0:	6013      	str	r3, [r2, #0]
}
 800fee2:	bf00      	nop
 800fee4:	3710      	adds	r7, #16
 800fee6:	46bd      	mov	sp, r7
 800fee8:	bd80      	pop	{r7, pc}
 800feea:	bf00      	nop
 800feec:	20002330 	.word	0x20002330
 800fef0:	2000222c 	.word	0x2000222c
 800fef4:	20002334 	.word	0x20002334
 800fef8:	20002318 	.word	0x20002318
 800fefc:	200022e8 	.word	0x200022e8
 800ff00:	200022e4 	.word	0x200022e4
 800ff04:	2000234c 	.word	0x2000234c

0800ff08 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ff08:	b480      	push	{r7}
 800ff0a:	b085      	sub	sp, #20
 800ff0c:	af00      	add	r7, sp, #0
 800ff0e:	60f8      	str	r0, [r7, #12]
 800ff10:	60b9      	str	r1, [r7, #8]
 800ff12:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ff14:	68fb      	ldr	r3, [r7, #12]
 800ff16:	3b04      	subs	r3, #4
 800ff18:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ff1a:	68fb      	ldr	r3, [r7, #12]
 800ff1c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ff20:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ff22:	68fb      	ldr	r3, [r7, #12]
 800ff24:	3b04      	subs	r3, #4
 800ff26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ff28:	68bb      	ldr	r3, [r7, #8]
 800ff2a:	f023 0201 	bic.w	r2, r3, #1
 800ff2e:	68fb      	ldr	r3, [r7, #12]
 800ff30:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ff32:	68fb      	ldr	r3, [r7, #12]
 800ff34:	3b04      	subs	r3, #4
 800ff36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ff38:	4a0c      	ldr	r2, [pc, #48]	; (800ff6c <pxPortInitialiseStack+0x64>)
 800ff3a:	68fb      	ldr	r3, [r7, #12]
 800ff3c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ff3e:	68fb      	ldr	r3, [r7, #12]
 800ff40:	3b14      	subs	r3, #20
 800ff42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ff44:	687a      	ldr	r2, [r7, #4]
 800ff46:	68fb      	ldr	r3, [r7, #12]
 800ff48:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ff4a:	68fb      	ldr	r3, [r7, #12]
 800ff4c:	3b04      	subs	r3, #4
 800ff4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ff50:	68fb      	ldr	r3, [r7, #12]
 800ff52:	f06f 0202 	mvn.w	r2, #2
 800ff56:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ff58:	68fb      	ldr	r3, [r7, #12]
 800ff5a:	3b20      	subs	r3, #32
 800ff5c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ff5e:	68fb      	ldr	r3, [r7, #12]
}
 800ff60:	4618      	mov	r0, r3
 800ff62:	3714      	adds	r7, #20
 800ff64:	46bd      	mov	sp, r7
 800ff66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff6a:	4770      	bx	lr
 800ff6c:	0800ff71 	.word	0x0800ff71

0800ff70 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ff70:	b480      	push	{r7}
 800ff72:	b085      	sub	sp, #20
 800ff74:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ff76:	2300      	movs	r3, #0
 800ff78:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ff7a:	4b12      	ldr	r3, [pc, #72]	; (800ffc4 <prvTaskExitError+0x54>)
 800ff7c:	681b      	ldr	r3, [r3, #0]
 800ff7e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ff82:	d00a      	beq.n	800ff9a <prvTaskExitError+0x2a>
	__asm volatile
 800ff84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff88:	f383 8811 	msr	BASEPRI, r3
 800ff8c:	f3bf 8f6f 	isb	sy
 800ff90:	f3bf 8f4f 	dsb	sy
 800ff94:	60fb      	str	r3, [r7, #12]
}
 800ff96:	bf00      	nop
 800ff98:	e7fe      	b.n	800ff98 <prvTaskExitError+0x28>
	__asm volatile
 800ff9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff9e:	f383 8811 	msr	BASEPRI, r3
 800ffa2:	f3bf 8f6f 	isb	sy
 800ffa6:	f3bf 8f4f 	dsb	sy
 800ffaa:	60bb      	str	r3, [r7, #8]
}
 800ffac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ffae:	bf00      	nop
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	2b00      	cmp	r3, #0
 800ffb4:	d0fc      	beq.n	800ffb0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ffb6:	bf00      	nop
 800ffb8:	bf00      	nop
 800ffba:	3714      	adds	r7, #20
 800ffbc:	46bd      	mov	sp, r7
 800ffbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffc2:	4770      	bx	lr
 800ffc4:	2000009c 	.word	0x2000009c
	...

0800ffd0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ffd0:	4b07      	ldr	r3, [pc, #28]	; (800fff0 <pxCurrentTCBConst2>)
 800ffd2:	6819      	ldr	r1, [r3, #0]
 800ffd4:	6808      	ldr	r0, [r1, #0]
 800ffd6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ffda:	f380 8809 	msr	PSP, r0
 800ffde:	f3bf 8f6f 	isb	sy
 800ffe2:	f04f 0000 	mov.w	r0, #0
 800ffe6:	f380 8811 	msr	BASEPRI, r0
 800ffea:	4770      	bx	lr
 800ffec:	f3af 8000 	nop.w

0800fff0 <pxCurrentTCBConst2>:
 800fff0:	2000222c 	.word	0x2000222c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800fff4:	bf00      	nop
 800fff6:	bf00      	nop

0800fff8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800fff8:	4808      	ldr	r0, [pc, #32]	; (801001c <prvPortStartFirstTask+0x24>)
 800fffa:	6800      	ldr	r0, [r0, #0]
 800fffc:	6800      	ldr	r0, [r0, #0]
 800fffe:	f380 8808 	msr	MSP, r0
 8010002:	f04f 0000 	mov.w	r0, #0
 8010006:	f380 8814 	msr	CONTROL, r0
 801000a:	b662      	cpsie	i
 801000c:	b661      	cpsie	f
 801000e:	f3bf 8f4f 	dsb	sy
 8010012:	f3bf 8f6f 	isb	sy
 8010016:	df00      	svc	0
 8010018:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801001a:	bf00      	nop
 801001c:	e000ed08 	.word	0xe000ed08

08010020 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010020:	b580      	push	{r7, lr}
 8010022:	b086      	sub	sp, #24
 8010024:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8010026:	4b46      	ldr	r3, [pc, #280]	; (8010140 <xPortStartScheduler+0x120>)
 8010028:	681b      	ldr	r3, [r3, #0]
 801002a:	4a46      	ldr	r2, [pc, #280]	; (8010144 <xPortStartScheduler+0x124>)
 801002c:	4293      	cmp	r3, r2
 801002e:	d10a      	bne.n	8010046 <xPortStartScheduler+0x26>
	__asm volatile
 8010030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010034:	f383 8811 	msr	BASEPRI, r3
 8010038:	f3bf 8f6f 	isb	sy
 801003c:	f3bf 8f4f 	dsb	sy
 8010040:	613b      	str	r3, [r7, #16]
}
 8010042:	bf00      	nop
 8010044:	e7fe      	b.n	8010044 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8010046:	4b3e      	ldr	r3, [pc, #248]	; (8010140 <xPortStartScheduler+0x120>)
 8010048:	681b      	ldr	r3, [r3, #0]
 801004a:	4a3f      	ldr	r2, [pc, #252]	; (8010148 <xPortStartScheduler+0x128>)
 801004c:	4293      	cmp	r3, r2
 801004e:	d10a      	bne.n	8010066 <xPortStartScheduler+0x46>
	__asm volatile
 8010050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010054:	f383 8811 	msr	BASEPRI, r3
 8010058:	f3bf 8f6f 	isb	sy
 801005c:	f3bf 8f4f 	dsb	sy
 8010060:	60fb      	str	r3, [r7, #12]
}
 8010062:	bf00      	nop
 8010064:	e7fe      	b.n	8010064 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8010066:	4b39      	ldr	r3, [pc, #228]	; (801014c <xPortStartScheduler+0x12c>)
 8010068:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801006a:	697b      	ldr	r3, [r7, #20]
 801006c:	781b      	ldrb	r3, [r3, #0]
 801006e:	b2db      	uxtb	r3, r3
 8010070:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8010072:	697b      	ldr	r3, [r7, #20]
 8010074:	22ff      	movs	r2, #255	; 0xff
 8010076:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8010078:	697b      	ldr	r3, [r7, #20]
 801007a:	781b      	ldrb	r3, [r3, #0]
 801007c:	b2db      	uxtb	r3, r3
 801007e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8010080:	78fb      	ldrb	r3, [r7, #3]
 8010082:	b2db      	uxtb	r3, r3
 8010084:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8010088:	b2da      	uxtb	r2, r3
 801008a:	4b31      	ldr	r3, [pc, #196]	; (8010150 <xPortStartScheduler+0x130>)
 801008c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801008e:	4b31      	ldr	r3, [pc, #196]	; (8010154 <xPortStartScheduler+0x134>)
 8010090:	2207      	movs	r2, #7
 8010092:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010094:	e009      	b.n	80100aa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8010096:	4b2f      	ldr	r3, [pc, #188]	; (8010154 <xPortStartScheduler+0x134>)
 8010098:	681b      	ldr	r3, [r3, #0]
 801009a:	3b01      	subs	r3, #1
 801009c:	4a2d      	ldr	r2, [pc, #180]	; (8010154 <xPortStartScheduler+0x134>)
 801009e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80100a0:	78fb      	ldrb	r3, [r7, #3]
 80100a2:	b2db      	uxtb	r3, r3
 80100a4:	005b      	lsls	r3, r3, #1
 80100a6:	b2db      	uxtb	r3, r3
 80100a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80100aa:	78fb      	ldrb	r3, [r7, #3]
 80100ac:	b2db      	uxtb	r3, r3
 80100ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80100b2:	2b80      	cmp	r3, #128	; 0x80
 80100b4:	d0ef      	beq.n	8010096 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80100b6:	4b27      	ldr	r3, [pc, #156]	; (8010154 <xPortStartScheduler+0x134>)
 80100b8:	681b      	ldr	r3, [r3, #0]
 80100ba:	f1c3 0307 	rsb	r3, r3, #7
 80100be:	2b04      	cmp	r3, #4
 80100c0:	d00a      	beq.n	80100d8 <xPortStartScheduler+0xb8>
	__asm volatile
 80100c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100c6:	f383 8811 	msr	BASEPRI, r3
 80100ca:	f3bf 8f6f 	isb	sy
 80100ce:	f3bf 8f4f 	dsb	sy
 80100d2:	60bb      	str	r3, [r7, #8]
}
 80100d4:	bf00      	nop
 80100d6:	e7fe      	b.n	80100d6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80100d8:	4b1e      	ldr	r3, [pc, #120]	; (8010154 <xPortStartScheduler+0x134>)
 80100da:	681b      	ldr	r3, [r3, #0]
 80100dc:	021b      	lsls	r3, r3, #8
 80100de:	4a1d      	ldr	r2, [pc, #116]	; (8010154 <xPortStartScheduler+0x134>)
 80100e0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80100e2:	4b1c      	ldr	r3, [pc, #112]	; (8010154 <xPortStartScheduler+0x134>)
 80100e4:	681b      	ldr	r3, [r3, #0]
 80100e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80100ea:	4a1a      	ldr	r2, [pc, #104]	; (8010154 <xPortStartScheduler+0x134>)
 80100ec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80100ee:	687b      	ldr	r3, [r7, #4]
 80100f0:	b2da      	uxtb	r2, r3
 80100f2:	697b      	ldr	r3, [r7, #20]
 80100f4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80100f6:	4b18      	ldr	r3, [pc, #96]	; (8010158 <xPortStartScheduler+0x138>)
 80100f8:	681b      	ldr	r3, [r3, #0]
 80100fa:	4a17      	ldr	r2, [pc, #92]	; (8010158 <xPortStartScheduler+0x138>)
 80100fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8010100:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8010102:	4b15      	ldr	r3, [pc, #84]	; (8010158 <xPortStartScheduler+0x138>)
 8010104:	681b      	ldr	r3, [r3, #0]
 8010106:	4a14      	ldr	r2, [pc, #80]	; (8010158 <xPortStartScheduler+0x138>)
 8010108:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801010c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801010e:	f000 f8dd 	bl	80102cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8010112:	4b12      	ldr	r3, [pc, #72]	; (801015c <xPortStartScheduler+0x13c>)
 8010114:	2200      	movs	r2, #0
 8010116:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8010118:	f000 f8fc 	bl	8010314 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801011c:	4b10      	ldr	r3, [pc, #64]	; (8010160 <xPortStartScheduler+0x140>)
 801011e:	681b      	ldr	r3, [r3, #0]
 8010120:	4a0f      	ldr	r2, [pc, #60]	; (8010160 <xPortStartScheduler+0x140>)
 8010122:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8010126:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8010128:	f7ff ff66 	bl	800fff8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801012c:	f7ff fb40 	bl	800f7b0 <vTaskSwitchContext>
	prvTaskExitError();
 8010130:	f7ff ff1e 	bl	800ff70 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8010134:	2300      	movs	r3, #0
}
 8010136:	4618      	mov	r0, r3
 8010138:	3718      	adds	r7, #24
 801013a:	46bd      	mov	sp, r7
 801013c:	bd80      	pop	{r7, pc}
 801013e:	bf00      	nop
 8010140:	e000ed00 	.word	0xe000ed00
 8010144:	410fc271 	.word	0x410fc271
 8010148:	410fc270 	.word	0x410fc270
 801014c:	e000e400 	.word	0xe000e400
 8010150:	20002358 	.word	0x20002358
 8010154:	2000235c 	.word	0x2000235c
 8010158:	e000ed20 	.word	0xe000ed20
 801015c:	2000009c 	.word	0x2000009c
 8010160:	e000ef34 	.word	0xe000ef34

08010164 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8010164:	b480      	push	{r7}
 8010166:	b083      	sub	sp, #12
 8010168:	af00      	add	r7, sp, #0
	__asm volatile
 801016a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801016e:	f383 8811 	msr	BASEPRI, r3
 8010172:	f3bf 8f6f 	isb	sy
 8010176:	f3bf 8f4f 	dsb	sy
 801017a:	607b      	str	r3, [r7, #4]
}
 801017c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801017e:	4b0f      	ldr	r3, [pc, #60]	; (80101bc <vPortEnterCritical+0x58>)
 8010180:	681b      	ldr	r3, [r3, #0]
 8010182:	3301      	adds	r3, #1
 8010184:	4a0d      	ldr	r2, [pc, #52]	; (80101bc <vPortEnterCritical+0x58>)
 8010186:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8010188:	4b0c      	ldr	r3, [pc, #48]	; (80101bc <vPortEnterCritical+0x58>)
 801018a:	681b      	ldr	r3, [r3, #0]
 801018c:	2b01      	cmp	r3, #1
 801018e:	d10f      	bne.n	80101b0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8010190:	4b0b      	ldr	r3, [pc, #44]	; (80101c0 <vPortEnterCritical+0x5c>)
 8010192:	681b      	ldr	r3, [r3, #0]
 8010194:	b2db      	uxtb	r3, r3
 8010196:	2b00      	cmp	r3, #0
 8010198:	d00a      	beq.n	80101b0 <vPortEnterCritical+0x4c>
	__asm volatile
 801019a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801019e:	f383 8811 	msr	BASEPRI, r3
 80101a2:	f3bf 8f6f 	isb	sy
 80101a6:	f3bf 8f4f 	dsb	sy
 80101aa:	603b      	str	r3, [r7, #0]
}
 80101ac:	bf00      	nop
 80101ae:	e7fe      	b.n	80101ae <vPortEnterCritical+0x4a>
	}
}
 80101b0:	bf00      	nop
 80101b2:	370c      	adds	r7, #12
 80101b4:	46bd      	mov	sp, r7
 80101b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101ba:	4770      	bx	lr
 80101bc:	2000009c 	.word	0x2000009c
 80101c0:	e000ed04 	.word	0xe000ed04

080101c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80101c4:	b480      	push	{r7}
 80101c6:	b083      	sub	sp, #12
 80101c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80101ca:	4b12      	ldr	r3, [pc, #72]	; (8010214 <vPortExitCritical+0x50>)
 80101cc:	681b      	ldr	r3, [r3, #0]
 80101ce:	2b00      	cmp	r3, #0
 80101d0:	d10a      	bne.n	80101e8 <vPortExitCritical+0x24>
	__asm volatile
 80101d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101d6:	f383 8811 	msr	BASEPRI, r3
 80101da:	f3bf 8f6f 	isb	sy
 80101de:	f3bf 8f4f 	dsb	sy
 80101e2:	607b      	str	r3, [r7, #4]
}
 80101e4:	bf00      	nop
 80101e6:	e7fe      	b.n	80101e6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80101e8:	4b0a      	ldr	r3, [pc, #40]	; (8010214 <vPortExitCritical+0x50>)
 80101ea:	681b      	ldr	r3, [r3, #0]
 80101ec:	3b01      	subs	r3, #1
 80101ee:	4a09      	ldr	r2, [pc, #36]	; (8010214 <vPortExitCritical+0x50>)
 80101f0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80101f2:	4b08      	ldr	r3, [pc, #32]	; (8010214 <vPortExitCritical+0x50>)
 80101f4:	681b      	ldr	r3, [r3, #0]
 80101f6:	2b00      	cmp	r3, #0
 80101f8:	d105      	bne.n	8010206 <vPortExitCritical+0x42>
 80101fa:	2300      	movs	r3, #0
 80101fc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80101fe:	683b      	ldr	r3, [r7, #0]
 8010200:	f383 8811 	msr	BASEPRI, r3
}
 8010204:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8010206:	bf00      	nop
 8010208:	370c      	adds	r7, #12
 801020a:	46bd      	mov	sp, r7
 801020c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010210:	4770      	bx	lr
 8010212:	bf00      	nop
 8010214:	2000009c 	.word	0x2000009c
	...

08010220 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8010220:	f3ef 8009 	mrs	r0, PSP
 8010224:	f3bf 8f6f 	isb	sy
 8010228:	4b15      	ldr	r3, [pc, #84]	; (8010280 <pxCurrentTCBConst>)
 801022a:	681a      	ldr	r2, [r3, #0]
 801022c:	f01e 0f10 	tst.w	lr, #16
 8010230:	bf08      	it	eq
 8010232:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8010236:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801023a:	6010      	str	r0, [r2, #0]
 801023c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8010240:	f04f 0050 	mov.w	r0, #80	; 0x50
 8010244:	f380 8811 	msr	BASEPRI, r0
 8010248:	f3bf 8f4f 	dsb	sy
 801024c:	f3bf 8f6f 	isb	sy
 8010250:	f7ff faae 	bl	800f7b0 <vTaskSwitchContext>
 8010254:	f04f 0000 	mov.w	r0, #0
 8010258:	f380 8811 	msr	BASEPRI, r0
 801025c:	bc09      	pop	{r0, r3}
 801025e:	6819      	ldr	r1, [r3, #0]
 8010260:	6808      	ldr	r0, [r1, #0]
 8010262:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010266:	f01e 0f10 	tst.w	lr, #16
 801026a:	bf08      	it	eq
 801026c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8010270:	f380 8809 	msr	PSP, r0
 8010274:	f3bf 8f6f 	isb	sy
 8010278:	4770      	bx	lr
 801027a:	bf00      	nop
 801027c:	f3af 8000 	nop.w

08010280 <pxCurrentTCBConst>:
 8010280:	2000222c 	.word	0x2000222c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8010284:	bf00      	nop
 8010286:	bf00      	nop

08010288 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010288:	b580      	push	{r7, lr}
 801028a:	b082      	sub	sp, #8
 801028c:	af00      	add	r7, sp, #0
	__asm volatile
 801028e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010292:	f383 8811 	msr	BASEPRI, r3
 8010296:	f3bf 8f6f 	isb	sy
 801029a:	f3bf 8f4f 	dsb	sy
 801029e:	607b      	str	r3, [r7, #4]
}
 80102a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80102a2:	f7ff f9cd 	bl	800f640 <xTaskIncrementTick>
 80102a6:	4603      	mov	r3, r0
 80102a8:	2b00      	cmp	r3, #0
 80102aa:	d003      	beq.n	80102b4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80102ac:	4b06      	ldr	r3, [pc, #24]	; (80102c8 <SysTick_Handler+0x40>)
 80102ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80102b2:	601a      	str	r2, [r3, #0]
 80102b4:	2300      	movs	r3, #0
 80102b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80102b8:	683b      	ldr	r3, [r7, #0]
 80102ba:	f383 8811 	msr	BASEPRI, r3
}
 80102be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80102c0:	bf00      	nop
 80102c2:	3708      	adds	r7, #8
 80102c4:	46bd      	mov	sp, r7
 80102c6:	bd80      	pop	{r7, pc}
 80102c8:	e000ed04 	.word	0xe000ed04

080102cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80102cc:	b480      	push	{r7}
 80102ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80102d0:	4b0b      	ldr	r3, [pc, #44]	; (8010300 <vPortSetupTimerInterrupt+0x34>)
 80102d2:	2200      	movs	r2, #0
 80102d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80102d6:	4b0b      	ldr	r3, [pc, #44]	; (8010304 <vPortSetupTimerInterrupt+0x38>)
 80102d8:	2200      	movs	r2, #0
 80102da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80102dc:	4b0a      	ldr	r3, [pc, #40]	; (8010308 <vPortSetupTimerInterrupt+0x3c>)
 80102de:	681b      	ldr	r3, [r3, #0]
 80102e0:	4a0a      	ldr	r2, [pc, #40]	; (801030c <vPortSetupTimerInterrupt+0x40>)
 80102e2:	fba2 2303 	umull	r2, r3, r2, r3
 80102e6:	099b      	lsrs	r3, r3, #6
 80102e8:	4a09      	ldr	r2, [pc, #36]	; (8010310 <vPortSetupTimerInterrupt+0x44>)
 80102ea:	3b01      	subs	r3, #1
 80102ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80102ee:	4b04      	ldr	r3, [pc, #16]	; (8010300 <vPortSetupTimerInterrupt+0x34>)
 80102f0:	2207      	movs	r2, #7
 80102f2:	601a      	str	r2, [r3, #0]
}
 80102f4:	bf00      	nop
 80102f6:	46bd      	mov	sp, r7
 80102f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102fc:	4770      	bx	lr
 80102fe:	bf00      	nop
 8010300:	e000e010 	.word	0xe000e010
 8010304:	e000e018 	.word	0xe000e018
 8010308:	20000004 	.word	0x20000004
 801030c:	10624dd3 	.word	0x10624dd3
 8010310:	e000e014 	.word	0xe000e014

08010314 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8010314:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8010324 <vPortEnableVFP+0x10>
 8010318:	6801      	ldr	r1, [r0, #0]
 801031a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801031e:	6001      	str	r1, [r0, #0]
 8010320:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8010322:	bf00      	nop
 8010324:	e000ed88 	.word	0xe000ed88

08010328 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8010328:	b480      	push	{r7}
 801032a:	b085      	sub	sp, #20
 801032c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801032e:	f3ef 8305 	mrs	r3, IPSR
 8010332:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8010334:	68fb      	ldr	r3, [r7, #12]
 8010336:	2b0f      	cmp	r3, #15
 8010338:	d914      	bls.n	8010364 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801033a:	4a17      	ldr	r2, [pc, #92]	; (8010398 <vPortValidateInterruptPriority+0x70>)
 801033c:	68fb      	ldr	r3, [r7, #12]
 801033e:	4413      	add	r3, r2
 8010340:	781b      	ldrb	r3, [r3, #0]
 8010342:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8010344:	4b15      	ldr	r3, [pc, #84]	; (801039c <vPortValidateInterruptPriority+0x74>)
 8010346:	781b      	ldrb	r3, [r3, #0]
 8010348:	7afa      	ldrb	r2, [r7, #11]
 801034a:	429a      	cmp	r2, r3
 801034c:	d20a      	bcs.n	8010364 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801034e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010352:	f383 8811 	msr	BASEPRI, r3
 8010356:	f3bf 8f6f 	isb	sy
 801035a:	f3bf 8f4f 	dsb	sy
 801035e:	607b      	str	r3, [r7, #4]
}
 8010360:	bf00      	nop
 8010362:	e7fe      	b.n	8010362 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8010364:	4b0e      	ldr	r3, [pc, #56]	; (80103a0 <vPortValidateInterruptPriority+0x78>)
 8010366:	681b      	ldr	r3, [r3, #0]
 8010368:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801036c:	4b0d      	ldr	r3, [pc, #52]	; (80103a4 <vPortValidateInterruptPriority+0x7c>)
 801036e:	681b      	ldr	r3, [r3, #0]
 8010370:	429a      	cmp	r2, r3
 8010372:	d90a      	bls.n	801038a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8010374:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010378:	f383 8811 	msr	BASEPRI, r3
 801037c:	f3bf 8f6f 	isb	sy
 8010380:	f3bf 8f4f 	dsb	sy
 8010384:	603b      	str	r3, [r7, #0]
}
 8010386:	bf00      	nop
 8010388:	e7fe      	b.n	8010388 <vPortValidateInterruptPriority+0x60>
	}
 801038a:	bf00      	nop
 801038c:	3714      	adds	r7, #20
 801038e:	46bd      	mov	sp, r7
 8010390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010394:	4770      	bx	lr
 8010396:	bf00      	nop
 8010398:	e000e3f0 	.word	0xe000e3f0
 801039c:	20002358 	.word	0x20002358
 80103a0:	e000ed0c 	.word	0xe000ed0c
 80103a4:	2000235c 	.word	0x2000235c

080103a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80103a8:	b580      	push	{r7, lr}
 80103aa:	b08a      	sub	sp, #40	; 0x28
 80103ac:	af00      	add	r7, sp, #0
 80103ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80103b0:	2300      	movs	r3, #0
 80103b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80103b4:	f7ff f878 	bl	800f4a8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80103b8:	4b5d      	ldr	r3, [pc, #372]	; (8010530 <pvPortMalloc+0x188>)
 80103ba:	681b      	ldr	r3, [r3, #0]
 80103bc:	2b00      	cmp	r3, #0
 80103be:	d101      	bne.n	80103c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80103c0:	f000 f924 	bl	801060c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80103c4:	4b5b      	ldr	r3, [pc, #364]	; (8010534 <pvPortMalloc+0x18c>)
 80103c6:	681a      	ldr	r2, [r3, #0]
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	4013      	ands	r3, r2
 80103cc:	2b00      	cmp	r3, #0
 80103ce:	f040 8093 	bne.w	80104f8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	2b00      	cmp	r3, #0
 80103d6:	d01d      	beq.n	8010414 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80103d8:	2208      	movs	r2, #8
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	4413      	add	r3, r2
 80103de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	f003 0307 	and.w	r3, r3, #7
 80103e6:	2b00      	cmp	r3, #0
 80103e8:	d014      	beq.n	8010414 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	f023 0307 	bic.w	r3, r3, #7
 80103f0:	3308      	adds	r3, #8
 80103f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	f003 0307 	and.w	r3, r3, #7
 80103fa:	2b00      	cmp	r3, #0
 80103fc:	d00a      	beq.n	8010414 <pvPortMalloc+0x6c>
	__asm volatile
 80103fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010402:	f383 8811 	msr	BASEPRI, r3
 8010406:	f3bf 8f6f 	isb	sy
 801040a:	f3bf 8f4f 	dsb	sy
 801040e:	617b      	str	r3, [r7, #20]
}
 8010410:	bf00      	nop
 8010412:	e7fe      	b.n	8010412 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	2b00      	cmp	r3, #0
 8010418:	d06e      	beq.n	80104f8 <pvPortMalloc+0x150>
 801041a:	4b47      	ldr	r3, [pc, #284]	; (8010538 <pvPortMalloc+0x190>)
 801041c:	681b      	ldr	r3, [r3, #0]
 801041e:	687a      	ldr	r2, [r7, #4]
 8010420:	429a      	cmp	r2, r3
 8010422:	d869      	bhi.n	80104f8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8010424:	4b45      	ldr	r3, [pc, #276]	; (801053c <pvPortMalloc+0x194>)
 8010426:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8010428:	4b44      	ldr	r3, [pc, #272]	; (801053c <pvPortMalloc+0x194>)
 801042a:	681b      	ldr	r3, [r3, #0]
 801042c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801042e:	e004      	b.n	801043a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8010430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010432:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8010434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010436:	681b      	ldr	r3, [r3, #0]
 8010438:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801043a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801043c:	685b      	ldr	r3, [r3, #4]
 801043e:	687a      	ldr	r2, [r7, #4]
 8010440:	429a      	cmp	r2, r3
 8010442:	d903      	bls.n	801044c <pvPortMalloc+0xa4>
 8010444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010446:	681b      	ldr	r3, [r3, #0]
 8010448:	2b00      	cmp	r3, #0
 801044a:	d1f1      	bne.n	8010430 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801044c:	4b38      	ldr	r3, [pc, #224]	; (8010530 <pvPortMalloc+0x188>)
 801044e:	681b      	ldr	r3, [r3, #0]
 8010450:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010452:	429a      	cmp	r2, r3
 8010454:	d050      	beq.n	80104f8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8010456:	6a3b      	ldr	r3, [r7, #32]
 8010458:	681b      	ldr	r3, [r3, #0]
 801045a:	2208      	movs	r2, #8
 801045c:	4413      	add	r3, r2
 801045e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010462:	681a      	ldr	r2, [r3, #0]
 8010464:	6a3b      	ldr	r3, [r7, #32]
 8010466:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8010468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801046a:	685a      	ldr	r2, [r3, #4]
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	1ad2      	subs	r2, r2, r3
 8010470:	2308      	movs	r3, #8
 8010472:	005b      	lsls	r3, r3, #1
 8010474:	429a      	cmp	r2, r3
 8010476:	d91f      	bls.n	80104b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8010478:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	4413      	add	r3, r2
 801047e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010480:	69bb      	ldr	r3, [r7, #24]
 8010482:	f003 0307 	and.w	r3, r3, #7
 8010486:	2b00      	cmp	r3, #0
 8010488:	d00a      	beq.n	80104a0 <pvPortMalloc+0xf8>
	__asm volatile
 801048a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801048e:	f383 8811 	msr	BASEPRI, r3
 8010492:	f3bf 8f6f 	isb	sy
 8010496:	f3bf 8f4f 	dsb	sy
 801049a:	613b      	str	r3, [r7, #16]
}
 801049c:	bf00      	nop
 801049e:	e7fe      	b.n	801049e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80104a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104a2:	685a      	ldr	r2, [r3, #4]
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	1ad2      	subs	r2, r2, r3
 80104a8:	69bb      	ldr	r3, [r7, #24]
 80104aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80104ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104ae:	687a      	ldr	r2, [r7, #4]
 80104b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80104b2:	69b8      	ldr	r0, [r7, #24]
 80104b4:	f000 f90c 	bl	80106d0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80104b8:	4b1f      	ldr	r3, [pc, #124]	; (8010538 <pvPortMalloc+0x190>)
 80104ba:	681a      	ldr	r2, [r3, #0]
 80104bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104be:	685b      	ldr	r3, [r3, #4]
 80104c0:	1ad3      	subs	r3, r2, r3
 80104c2:	4a1d      	ldr	r2, [pc, #116]	; (8010538 <pvPortMalloc+0x190>)
 80104c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80104c6:	4b1c      	ldr	r3, [pc, #112]	; (8010538 <pvPortMalloc+0x190>)
 80104c8:	681a      	ldr	r2, [r3, #0]
 80104ca:	4b1d      	ldr	r3, [pc, #116]	; (8010540 <pvPortMalloc+0x198>)
 80104cc:	681b      	ldr	r3, [r3, #0]
 80104ce:	429a      	cmp	r2, r3
 80104d0:	d203      	bcs.n	80104da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80104d2:	4b19      	ldr	r3, [pc, #100]	; (8010538 <pvPortMalloc+0x190>)
 80104d4:	681b      	ldr	r3, [r3, #0]
 80104d6:	4a1a      	ldr	r2, [pc, #104]	; (8010540 <pvPortMalloc+0x198>)
 80104d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80104da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104dc:	685a      	ldr	r2, [r3, #4]
 80104de:	4b15      	ldr	r3, [pc, #84]	; (8010534 <pvPortMalloc+0x18c>)
 80104e0:	681b      	ldr	r3, [r3, #0]
 80104e2:	431a      	orrs	r2, r3
 80104e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80104e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104ea:	2200      	movs	r2, #0
 80104ec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80104ee:	4b15      	ldr	r3, [pc, #84]	; (8010544 <pvPortMalloc+0x19c>)
 80104f0:	681b      	ldr	r3, [r3, #0]
 80104f2:	3301      	adds	r3, #1
 80104f4:	4a13      	ldr	r2, [pc, #76]	; (8010544 <pvPortMalloc+0x19c>)
 80104f6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80104f8:	f7fe ffe4 	bl	800f4c4 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 80104fc:	69fb      	ldr	r3, [r7, #28]
 80104fe:	2b00      	cmp	r3, #0
 8010500:	d101      	bne.n	8010506 <pvPortMalloc+0x15e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8010502:	f7f3 feae 	bl	8004262 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8010506:	69fb      	ldr	r3, [r7, #28]
 8010508:	f003 0307 	and.w	r3, r3, #7
 801050c:	2b00      	cmp	r3, #0
 801050e:	d00a      	beq.n	8010526 <pvPortMalloc+0x17e>
	__asm volatile
 8010510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010514:	f383 8811 	msr	BASEPRI, r3
 8010518:	f3bf 8f6f 	isb	sy
 801051c:	f3bf 8f4f 	dsb	sy
 8010520:	60fb      	str	r3, [r7, #12]
}
 8010522:	bf00      	nop
 8010524:	e7fe      	b.n	8010524 <pvPortMalloc+0x17c>
	return pvReturn;
 8010526:	69fb      	ldr	r3, [r7, #28]
}
 8010528:	4618      	mov	r0, r3
 801052a:	3728      	adds	r7, #40	; 0x28
 801052c:	46bd      	mov	sp, r7
 801052e:	bd80      	pop	{r7, pc}
 8010530:	20005f68 	.word	0x20005f68
 8010534:	20005f7c 	.word	0x20005f7c
 8010538:	20005f6c 	.word	0x20005f6c
 801053c:	20005f60 	.word	0x20005f60
 8010540:	20005f70 	.word	0x20005f70
 8010544:	20005f74 	.word	0x20005f74

08010548 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010548:	b580      	push	{r7, lr}
 801054a:	b086      	sub	sp, #24
 801054c:	af00      	add	r7, sp, #0
 801054e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	2b00      	cmp	r3, #0
 8010558:	d04d      	beq.n	80105f6 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801055a:	2308      	movs	r3, #8
 801055c:	425b      	negs	r3, r3
 801055e:	697a      	ldr	r2, [r7, #20]
 8010560:	4413      	add	r3, r2
 8010562:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8010564:	697b      	ldr	r3, [r7, #20]
 8010566:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010568:	693b      	ldr	r3, [r7, #16]
 801056a:	685a      	ldr	r2, [r3, #4]
 801056c:	4b24      	ldr	r3, [pc, #144]	; (8010600 <vPortFree+0xb8>)
 801056e:	681b      	ldr	r3, [r3, #0]
 8010570:	4013      	ands	r3, r2
 8010572:	2b00      	cmp	r3, #0
 8010574:	d10a      	bne.n	801058c <vPortFree+0x44>
	__asm volatile
 8010576:	f04f 0350 	mov.w	r3, #80	; 0x50
 801057a:	f383 8811 	msr	BASEPRI, r3
 801057e:	f3bf 8f6f 	isb	sy
 8010582:	f3bf 8f4f 	dsb	sy
 8010586:	60fb      	str	r3, [r7, #12]
}
 8010588:	bf00      	nop
 801058a:	e7fe      	b.n	801058a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801058c:	693b      	ldr	r3, [r7, #16]
 801058e:	681b      	ldr	r3, [r3, #0]
 8010590:	2b00      	cmp	r3, #0
 8010592:	d00a      	beq.n	80105aa <vPortFree+0x62>
	__asm volatile
 8010594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010598:	f383 8811 	msr	BASEPRI, r3
 801059c:	f3bf 8f6f 	isb	sy
 80105a0:	f3bf 8f4f 	dsb	sy
 80105a4:	60bb      	str	r3, [r7, #8]
}
 80105a6:	bf00      	nop
 80105a8:	e7fe      	b.n	80105a8 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80105aa:	693b      	ldr	r3, [r7, #16]
 80105ac:	685a      	ldr	r2, [r3, #4]
 80105ae:	4b14      	ldr	r3, [pc, #80]	; (8010600 <vPortFree+0xb8>)
 80105b0:	681b      	ldr	r3, [r3, #0]
 80105b2:	4013      	ands	r3, r2
 80105b4:	2b00      	cmp	r3, #0
 80105b6:	d01e      	beq.n	80105f6 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80105b8:	693b      	ldr	r3, [r7, #16]
 80105ba:	681b      	ldr	r3, [r3, #0]
 80105bc:	2b00      	cmp	r3, #0
 80105be:	d11a      	bne.n	80105f6 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80105c0:	693b      	ldr	r3, [r7, #16]
 80105c2:	685a      	ldr	r2, [r3, #4]
 80105c4:	4b0e      	ldr	r3, [pc, #56]	; (8010600 <vPortFree+0xb8>)
 80105c6:	681b      	ldr	r3, [r3, #0]
 80105c8:	43db      	mvns	r3, r3
 80105ca:	401a      	ands	r2, r3
 80105cc:	693b      	ldr	r3, [r7, #16]
 80105ce:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80105d0:	f7fe ff6a 	bl	800f4a8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80105d4:	693b      	ldr	r3, [r7, #16]
 80105d6:	685a      	ldr	r2, [r3, #4]
 80105d8:	4b0a      	ldr	r3, [pc, #40]	; (8010604 <vPortFree+0xbc>)
 80105da:	681b      	ldr	r3, [r3, #0]
 80105dc:	4413      	add	r3, r2
 80105de:	4a09      	ldr	r2, [pc, #36]	; (8010604 <vPortFree+0xbc>)
 80105e0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80105e2:	6938      	ldr	r0, [r7, #16]
 80105e4:	f000 f874 	bl	80106d0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80105e8:	4b07      	ldr	r3, [pc, #28]	; (8010608 <vPortFree+0xc0>)
 80105ea:	681b      	ldr	r3, [r3, #0]
 80105ec:	3301      	adds	r3, #1
 80105ee:	4a06      	ldr	r2, [pc, #24]	; (8010608 <vPortFree+0xc0>)
 80105f0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80105f2:	f7fe ff67 	bl	800f4c4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80105f6:	bf00      	nop
 80105f8:	3718      	adds	r7, #24
 80105fa:	46bd      	mov	sp, r7
 80105fc:	bd80      	pop	{r7, pc}
 80105fe:	bf00      	nop
 8010600:	20005f7c 	.word	0x20005f7c
 8010604:	20005f6c 	.word	0x20005f6c
 8010608:	20005f78 	.word	0x20005f78

0801060c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 801060c:	b480      	push	{r7}
 801060e:	b085      	sub	sp, #20
 8010610:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8010612:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8010616:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8010618:	4b27      	ldr	r3, [pc, #156]	; (80106b8 <prvHeapInit+0xac>)
 801061a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801061c:	68fb      	ldr	r3, [r7, #12]
 801061e:	f003 0307 	and.w	r3, r3, #7
 8010622:	2b00      	cmp	r3, #0
 8010624:	d00c      	beq.n	8010640 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8010626:	68fb      	ldr	r3, [r7, #12]
 8010628:	3307      	adds	r3, #7
 801062a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801062c:	68fb      	ldr	r3, [r7, #12]
 801062e:	f023 0307 	bic.w	r3, r3, #7
 8010632:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8010634:	68ba      	ldr	r2, [r7, #8]
 8010636:	68fb      	ldr	r3, [r7, #12]
 8010638:	1ad3      	subs	r3, r2, r3
 801063a:	4a1f      	ldr	r2, [pc, #124]	; (80106b8 <prvHeapInit+0xac>)
 801063c:	4413      	add	r3, r2
 801063e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8010640:	68fb      	ldr	r3, [r7, #12]
 8010642:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8010644:	4a1d      	ldr	r2, [pc, #116]	; (80106bc <prvHeapInit+0xb0>)
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801064a:	4b1c      	ldr	r3, [pc, #112]	; (80106bc <prvHeapInit+0xb0>)
 801064c:	2200      	movs	r2, #0
 801064e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	68ba      	ldr	r2, [r7, #8]
 8010654:	4413      	add	r3, r2
 8010656:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8010658:	2208      	movs	r2, #8
 801065a:	68fb      	ldr	r3, [r7, #12]
 801065c:	1a9b      	subs	r3, r3, r2
 801065e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010660:	68fb      	ldr	r3, [r7, #12]
 8010662:	f023 0307 	bic.w	r3, r3, #7
 8010666:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8010668:	68fb      	ldr	r3, [r7, #12]
 801066a:	4a15      	ldr	r2, [pc, #84]	; (80106c0 <prvHeapInit+0xb4>)
 801066c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 801066e:	4b14      	ldr	r3, [pc, #80]	; (80106c0 <prvHeapInit+0xb4>)
 8010670:	681b      	ldr	r3, [r3, #0]
 8010672:	2200      	movs	r2, #0
 8010674:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8010676:	4b12      	ldr	r3, [pc, #72]	; (80106c0 <prvHeapInit+0xb4>)
 8010678:	681b      	ldr	r3, [r3, #0]
 801067a:	2200      	movs	r2, #0
 801067c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8010682:	683b      	ldr	r3, [r7, #0]
 8010684:	68fa      	ldr	r2, [r7, #12]
 8010686:	1ad2      	subs	r2, r2, r3
 8010688:	683b      	ldr	r3, [r7, #0]
 801068a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801068c:	4b0c      	ldr	r3, [pc, #48]	; (80106c0 <prvHeapInit+0xb4>)
 801068e:	681a      	ldr	r2, [r3, #0]
 8010690:	683b      	ldr	r3, [r7, #0]
 8010692:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010694:	683b      	ldr	r3, [r7, #0]
 8010696:	685b      	ldr	r3, [r3, #4]
 8010698:	4a0a      	ldr	r2, [pc, #40]	; (80106c4 <prvHeapInit+0xb8>)
 801069a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801069c:	683b      	ldr	r3, [r7, #0]
 801069e:	685b      	ldr	r3, [r3, #4]
 80106a0:	4a09      	ldr	r2, [pc, #36]	; (80106c8 <prvHeapInit+0xbc>)
 80106a2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80106a4:	4b09      	ldr	r3, [pc, #36]	; (80106cc <prvHeapInit+0xc0>)
 80106a6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80106aa:	601a      	str	r2, [r3, #0]
}
 80106ac:	bf00      	nop
 80106ae:	3714      	adds	r7, #20
 80106b0:	46bd      	mov	sp, r7
 80106b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106b6:	4770      	bx	lr
 80106b8:	20002360 	.word	0x20002360
 80106bc:	20005f60 	.word	0x20005f60
 80106c0:	20005f68 	.word	0x20005f68
 80106c4:	20005f70 	.word	0x20005f70
 80106c8:	20005f6c 	.word	0x20005f6c
 80106cc:	20005f7c 	.word	0x20005f7c

080106d0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80106d0:	b480      	push	{r7}
 80106d2:	b085      	sub	sp, #20
 80106d4:	af00      	add	r7, sp, #0
 80106d6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80106d8:	4b28      	ldr	r3, [pc, #160]	; (801077c <prvInsertBlockIntoFreeList+0xac>)
 80106da:	60fb      	str	r3, [r7, #12]
 80106dc:	e002      	b.n	80106e4 <prvInsertBlockIntoFreeList+0x14>
 80106de:	68fb      	ldr	r3, [r7, #12]
 80106e0:	681b      	ldr	r3, [r3, #0]
 80106e2:	60fb      	str	r3, [r7, #12]
 80106e4:	68fb      	ldr	r3, [r7, #12]
 80106e6:	681b      	ldr	r3, [r3, #0]
 80106e8:	687a      	ldr	r2, [r7, #4]
 80106ea:	429a      	cmp	r2, r3
 80106ec:	d8f7      	bhi.n	80106de <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80106ee:	68fb      	ldr	r3, [r7, #12]
 80106f0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80106f2:	68fb      	ldr	r3, [r7, #12]
 80106f4:	685b      	ldr	r3, [r3, #4]
 80106f6:	68ba      	ldr	r2, [r7, #8]
 80106f8:	4413      	add	r3, r2
 80106fa:	687a      	ldr	r2, [r7, #4]
 80106fc:	429a      	cmp	r2, r3
 80106fe:	d108      	bne.n	8010712 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010700:	68fb      	ldr	r3, [r7, #12]
 8010702:	685a      	ldr	r2, [r3, #4]
 8010704:	687b      	ldr	r3, [r7, #4]
 8010706:	685b      	ldr	r3, [r3, #4]
 8010708:	441a      	add	r2, r3
 801070a:	68fb      	ldr	r3, [r7, #12]
 801070c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801070e:	68fb      	ldr	r3, [r7, #12]
 8010710:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8010712:	687b      	ldr	r3, [r7, #4]
 8010714:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	685b      	ldr	r3, [r3, #4]
 801071a:	68ba      	ldr	r2, [r7, #8]
 801071c:	441a      	add	r2, r3
 801071e:	68fb      	ldr	r3, [r7, #12]
 8010720:	681b      	ldr	r3, [r3, #0]
 8010722:	429a      	cmp	r2, r3
 8010724:	d118      	bne.n	8010758 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8010726:	68fb      	ldr	r3, [r7, #12]
 8010728:	681a      	ldr	r2, [r3, #0]
 801072a:	4b15      	ldr	r3, [pc, #84]	; (8010780 <prvInsertBlockIntoFreeList+0xb0>)
 801072c:	681b      	ldr	r3, [r3, #0]
 801072e:	429a      	cmp	r2, r3
 8010730:	d00d      	beq.n	801074e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8010732:	687b      	ldr	r3, [r7, #4]
 8010734:	685a      	ldr	r2, [r3, #4]
 8010736:	68fb      	ldr	r3, [r7, #12]
 8010738:	681b      	ldr	r3, [r3, #0]
 801073a:	685b      	ldr	r3, [r3, #4]
 801073c:	441a      	add	r2, r3
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8010742:	68fb      	ldr	r3, [r7, #12]
 8010744:	681b      	ldr	r3, [r3, #0]
 8010746:	681a      	ldr	r2, [r3, #0]
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	601a      	str	r2, [r3, #0]
 801074c:	e008      	b.n	8010760 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801074e:	4b0c      	ldr	r3, [pc, #48]	; (8010780 <prvInsertBlockIntoFreeList+0xb0>)
 8010750:	681a      	ldr	r2, [r3, #0]
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	601a      	str	r2, [r3, #0]
 8010756:	e003      	b.n	8010760 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8010758:	68fb      	ldr	r3, [r7, #12]
 801075a:	681a      	ldr	r2, [r3, #0]
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010760:	68fa      	ldr	r2, [r7, #12]
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	429a      	cmp	r2, r3
 8010766:	d002      	beq.n	801076e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8010768:	68fb      	ldr	r3, [r7, #12]
 801076a:	687a      	ldr	r2, [r7, #4]
 801076c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801076e:	bf00      	nop
 8010770:	3714      	adds	r7, #20
 8010772:	46bd      	mov	sp, r7
 8010774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010778:	4770      	bx	lr
 801077a:	bf00      	nop
 801077c:	20005f60 	.word	0x20005f60
 8010780:	20005f68 	.word	0x20005f68

08010784 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8010784:	b580      	push	{r7, lr}
 8010786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8010788:	2200      	movs	r2, #0
 801078a:	4912      	ldr	r1, [pc, #72]	; (80107d4 <MX_USB_DEVICE_Init+0x50>)
 801078c:	4812      	ldr	r0, [pc, #72]	; (80107d8 <MX_USB_DEVICE_Init+0x54>)
 801078e:	f7fc ff6d 	bl	800d66c <USBD_Init>
 8010792:	4603      	mov	r3, r0
 8010794:	2b00      	cmp	r3, #0
 8010796:	d001      	beq.n	801079c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8010798:	f7f3 fff0 	bl	800477c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 801079c:	490f      	ldr	r1, [pc, #60]	; (80107dc <MX_USB_DEVICE_Init+0x58>)
 801079e:	480e      	ldr	r0, [pc, #56]	; (80107d8 <MX_USB_DEVICE_Init+0x54>)
 80107a0:	f7fc ff94 	bl	800d6cc <USBD_RegisterClass>
 80107a4:	4603      	mov	r3, r0
 80107a6:	2b00      	cmp	r3, #0
 80107a8:	d001      	beq.n	80107ae <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80107aa:	f7f3 ffe7 	bl	800477c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80107ae:	490c      	ldr	r1, [pc, #48]	; (80107e0 <MX_USB_DEVICE_Init+0x5c>)
 80107b0:	4809      	ldr	r0, [pc, #36]	; (80107d8 <MX_USB_DEVICE_Init+0x54>)
 80107b2:	f7fc fe8b 	bl	800d4cc <USBD_CDC_RegisterInterface>
 80107b6:	4603      	mov	r3, r0
 80107b8:	2b00      	cmp	r3, #0
 80107ba:	d001      	beq.n	80107c0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80107bc:	f7f3 ffde 	bl	800477c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80107c0:	4805      	ldr	r0, [pc, #20]	; (80107d8 <MX_USB_DEVICE_Init+0x54>)
 80107c2:	f7fc ffb9 	bl	800d738 <USBD_Start>
 80107c6:	4603      	mov	r3, r0
 80107c8:	2b00      	cmp	r3, #0
 80107ca:	d001      	beq.n	80107d0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80107cc:	f7f3 ffd6 	bl	800477c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80107d0:	bf00      	nop
 80107d2:	bd80      	pop	{r7, pc}
 80107d4:	200000b4 	.word	0x200000b4
 80107d8:	20005f80 	.word	0x20005f80
 80107dc:	2000001c 	.word	0x2000001c
 80107e0:	200000a0 	.word	0x200000a0

080107e4 <CDC_Init_FS>:
#include "fifo.h"
fifo_s_t usb_tx_fifo;
uint8_t usb_tx_fifo_buff[APP_TX_DATA_SIZE];

static int8_t CDC_Init_FS(void)
{
 80107e4:	b580      	push	{r7, lr}
 80107e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80107e8:	2200      	movs	r2, #0
 80107ea:	4908      	ldr	r1, [pc, #32]	; (801080c <CDC_Init_FS+0x28>)
 80107ec:	4808      	ldr	r0, [pc, #32]	; (8010810 <CDC_Init_FS+0x2c>)
 80107ee:	f7fc fe87 	bl	800d500 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80107f2:	4908      	ldr	r1, [pc, #32]	; (8010814 <CDC_Init_FS+0x30>)
 80107f4:	4806      	ldr	r0, [pc, #24]	; (8010810 <CDC_Init_FS+0x2c>)
 80107f6:	f7fc fea5 	bl	800d544 <USBD_CDC_SetRxBuffer>
  fifo_s_init(&usb_tx_fifo, usb_tx_fifo_buff, 4096);
 80107fa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80107fe:	4906      	ldr	r1, [pc, #24]	; (8010818 <CDC_Init_FS+0x34>)
 8010800:	4806      	ldr	r0, [pc, #24]	; (801081c <CDC_Init_FS+0x38>)
 8010802:	f002 fa90 	bl	8012d26 <fifo_s_init>
  return (USBD_OK);
 8010806:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8010808:	4618      	mov	r0, r3
 801080a:	bd80      	pop	{r7, pc}
 801080c:	20006a70 	.word	0x20006a70
 8010810:	20005f80 	.word	0x20005f80
 8010814:	20006270 	.word	0x20006270
 8010818:	20007288 	.word	0x20007288
 801081c:	20007270 	.word	0x20007270

08010820 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8010820:	b480      	push	{r7}
 8010822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8010824:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8010826:	4618      	mov	r0, r3
 8010828:	46bd      	mov	sp, r7
 801082a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801082e:	4770      	bx	lr

08010830 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8010830:	b480      	push	{r7}
 8010832:	b083      	sub	sp, #12
 8010834:	af00      	add	r7, sp, #0
 8010836:	4603      	mov	r3, r0
 8010838:	6039      	str	r1, [r7, #0]
 801083a:	71fb      	strb	r3, [r7, #7]
 801083c:	4613      	mov	r3, r2
 801083e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8010840:	79fb      	ldrb	r3, [r7, #7]
 8010842:	2b23      	cmp	r3, #35	; 0x23
 8010844:	d84a      	bhi.n	80108dc <CDC_Control_FS+0xac>
 8010846:	a201      	add	r2, pc, #4	; (adr r2, 801084c <CDC_Control_FS+0x1c>)
 8010848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801084c:	080108dd 	.word	0x080108dd
 8010850:	080108dd 	.word	0x080108dd
 8010854:	080108dd 	.word	0x080108dd
 8010858:	080108dd 	.word	0x080108dd
 801085c:	080108dd 	.word	0x080108dd
 8010860:	080108dd 	.word	0x080108dd
 8010864:	080108dd 	.word	0x080108dd
 8010868:	080108dd 	.word	0x080108dd
 801086c:	080108dd 	.word	0x080108dd
 8010870:	080108dd 	.word	0x080108dd
 8010874:	080108dd 	.word	0x080108dd
 8010878:	080108dd 	.word	0x080108dd
 801087c:	080108dd 	.word	0x080108dd
 8010880:	080108dd 	.word	0x080108dd
 8010884:	080108dd 	.word	0x080108dd
 8010888:	080108dd 	.word	0x080108dd
 801088c:	080108dd 	.word	0x080108dd
 8010890:	080108dd 	.word	0x080108dd
 8010894:	080108dd 	.word	0x080108dd
 8010898:	080108dd 	.word	0x080108dd
 801089c:	080108dd 	.word	0x080108dd
 80108a0:	080108dd 	.word	0x080108dd
 80108a4:	080108dd 	.word	0x080108dd
 80108a8:	080108dd 	.word	0x080108dd
 80108ac:	080108dd 	.word	0x080108dd
 80108b0:	080108dd 	.word	0x080108dd
 80108b4:	080108dd 	.word	0x080108dd
 80108b8:	080108dd 	.word	0x080108dd
 80108bc:	080108dd 	.word	0x080108dd
 80108c0:	080108dd 	.word	0x080108dd
 80108c4:	080108dd 	.word	0x080108dd
 80108c8:	080108dd 	.word	0x080108dd
 80108cc:	080108dd 	.word	0x080108dd
 80108d0:	080108dd 	.word	0x080108dd
 80108d4:	080108dd 	.word	0x080108dd
 80108d8:	080108dd 	.word	0x080108dd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80108dc:	bf00      	nop
  }

  return (USBD_OK);
 80108de:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80108e0:	4618      	mov	r0, r3
 80108e2:	370c      	adds	r7, #12
 80108e4:	46bd      	mov	sp, r7
 80108e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108ea:	4770      	bx	lr

080108ec <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80108ec:	b580      	push	{r7, lr}
 80108ee:	b082      	sub	sp, #8
 80108f0:	af00      	add	r7, sp, #0
 80108f2:	6078      	str	r0, [r7, #4]
 80108f4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80108f6:	6879      	ldr	r1, [r7, #4]
 80108f8:	4805      	ldr	r0, [pc, #20]	; (8010910 <CDC_Receive_FS+0x24>)
 80108fa:	f7fc fe23 	bl	800d544 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80108fe:	4804      	ldr	r0, [pc, #16]	; (8010910 <CDC_Receive_FS+0x24>)
 8010900:	f7fc fe7e 	bl	800d600 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8010904:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8010906:	4618      	mov	r0, r3
 8010908:	3708      	adds	r7, #8
 801090a:	46bd      	mov	sp, r7
 801090c:	bd80      	pop	{r7, pc}
 801090e:	bf00      	nop
 8010910:	20005f80 	.word	0x20005f80

08010914 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8010914:	b580      	push	{r7, lr}
 8010916:	b084      	sub	sp, #16
 8010918:	af00      	add	r7, sp, #0
 801091a:	6078      	str	r0, [r7, #4]
 801091c:	460b      	mov	r3, r1
 801091e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8010920:	2300      	movs	r3, #0
 8010922:	73fb      	strb	r3, [r7, #15]
  // if (hcdc->TxState != 0){
  //   return USBD_BUSY;
  // }
  // USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
  // result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
  fifo_s_puts(&usb_tx_fifo, (char*)Buf, Len);
 8010924:	887b      	ldrh	r3, [r7, #2]
 8010926:	461a      	mov	r2, r3
 8010928:	6879      	ldr	r1, [r7, #4]
 801092a:	4804      	ldr	r0, [pc, #16]	; (801093c <CDC_Transmit_FS+0x28>)
 801092c:	f002 fa1d 	bl	8012d6a <fifo_s_puts>
  return result;
 8010930:	7bfb      	ldrb	r3, [r7, #15]
}
 8010932:	4618      	mov	r0, r3
 8010934:	3710      	adds	r7, #16
 8010936:	46bd      	mov	sp, r7
 8010938:	bd80      	pop	{r7, pc}
 801093a:	bf00      	nop
 801093c:	20007270 	.word	0x20007270

08010940 <usb_tx_flush>:

int32_t usb_tx_flush(void* argc)
{
 8010940:	b590      	push	{r4, r7, lr}
 8010942:	b089      	sub	sp, #36	; 0x24
 8010944:	af00      	add	r7, sp, #0
 8010946:	6078      	str	r0, [r7, #4]
	uint8_t result = USBD_OK;
 8010948:	2300      	movs	r3, #0
 801094a:	77fb      	strb	r3, [r7, #31]
	USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 801094c:	4b17      	ldr	r3, [pc, #92]	; (80109ac <usb_tx_flush+0x6c>)
 801094e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010952:	61bb      	str	r3, [r7, #24]
	
	if (hcdc->TxState != 0){
 8010954:	69bb      	ldr	r3, [r7, #24]
 8010956:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801095a:	2b00      	cmp	r3, #0
 801095c:	d001      	beq.n	8010962 <usb_tx_flush+0x22>
    return USBD_BUSY;
 801095e:	2301      	movs	r3, #1
 8010960:	e01f      	b.n	80109a2 <usb_tx_flush+0x62>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8010962:	f3ef 8310 	mrs	r3, PRIMASK
 8010966:	60fb      	str	r3, [r7, #12]
  return(result);
 8010968:	68fb      	ldr	r3, [r7, #12]
  }
	else
	{
		FIFO_CPU_SR_TYPE cpu_sr;
		uint32_t send_num;
    cpu_sr = FIFO_GET_CPU_SR();
 801096a:	461c      	mov	r4, r3
  __ASM volatile ("cpsid i" : : : "memory");
 801096c:	b672      	cpsid	i
}
 801096e:	bf00      	nop

    FIFO_ENTER_CRITICAL(); 
		send_num = usb_tx_fifo.used_num;
 8010970:	4b0f      	ldr	r3, [pc, #60]	; (80109b0 <usb_tx_flush+0x70>)
 8010972:	68db      	ldr	r3, [r3, #12]
 8010974:	617b      	str	r3, [r7, #20]
		fifo_s_gets_noprotect(&usb_tx_fifo, (char*)UserTxBufferFS, send_num);
 8010976:	697b      	ldr	r3, [r7, #20]
 8010978:	461a      	mov	r2, r3
 801097a:	490e      	ldr	r1, [pc, #56]	; (80109b4 <usb_tx_flush+0x74>)
 801097c:	480c      	ldr	r0, [pc, #48]	; (80109b0 <usb_tx_flush+0x70>)
 801097e:	f002 fb8e 	bl	801309e <fifo_s_gets_noprotect>
 8010982:	613c      	str	r4, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010984:	693b      	ldr	r3, [r7, #16]
 8010986:	f383 8810 	msr	PRIMASK, r3
}
 801098a:	bf00      	nop
		FIFO_RESTORE_CPU_SR(cpu_sr);

		USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, send_num);
 801098c:	697a      	ldr	r2, [r7, #20]
 801098e:	4909      	ldr	r1, [pc, #36]	; (80109b4 <usb_tx_flush+0x74>)
 8010990:	4806      	ldr	r0, [pc, #24]	; (80109ac <usb_tx_flush+0x6c>)
 8010992:	f7fc fdb5 	bl	800d500 <USBD_CDC_SetTxBuffer>
    result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8010996:	4805      	ldr	r0, [pc, #20]	; (80109ac <usb_tx_flush+0x6c>)
 8010998:	f7fc fdf2 	bl	800d580 <USBD_CDC_TransmitPacket>
 801099c:	4603      	mov	r3, r0
 801099e:	77fb      	strb	r3, [r7, #31]
		return result;
 80109a0:	7ffb      	ldrb	r3, [r7, #31]
	}
}
 80109a2:	4618      	mov	r0, r3
 80109a4:	3724      	adds	r7, #36	; 0x24
 80109a6:	46bd      	mov	sp, r7
 80109a8:	bd90      	pop	{r4, r7, pc}
 80109aa:	bf00      	nop
 80109ac:	20005f80 	.word	0x20005f80
 80109b0:	20007270 	.word	0x20007270
 80109b4:	20006a70 	.word	0x20006a70

080109b8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80109b8:	b480      	push	{r7}
 80109ba:	b087      	sub	sp, #28
 80109bc:	af00      	add	r7, sp, #0
 80109be:	60f8      	str	r0, [r7, #12]
 80109c0:	60b9      	str	r1, [r7, #8]
 80109c2:	4613      	mov	r3, r2
 80109c4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80109c6:	2300      	movs	r3, #0
 80109c8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80109ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80109ce:	4618      	mov	r0, r3
 80109d0:	371c      	adds	r7, #28
 80109d2:	46bd      	mov	sp, r7
 80109d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109d8:	4770      	bx	lr
	...

080109dc <usb_vcp_rx_callback_register>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
int32_t usb_vcp_rx_callback_register(usb_vcp_call_back_f fun)
{
 80109dc:	b480      	push	{r7}
 80109de:	b085      	sub	sp, #20
 80109e0:	af00      	add	r7, sp, #0
 80109e2:	6078      	str	r0, [r7, #4]
    
  for (int i = 0; i < USB_REC_MAX_NUM; i++)
 80109e4:	2300      	movs	r3, #0
 80109e6:	60fb      	str	r3, [r7, #12]
 80109e8:	e00f      	b.n	8010a0a <usb_vcp_rx_callback_register+0x2e>
  {
    if(usb_vcp_call_back[i] == NULL)
 80109ea:	4a0d      	ldr	r2, [pc, #52]	; (8010a20 <usb_vcp_rx_callback_register+0x44>)
 80109ec:	68fb      	ldr	r3, [r7, #12]
 80109ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80109f2:	2b00      	cmp	r3, #0
 80109f4:	d106      	bne.n	8010a04 <usb_vcp_rx_callback_register+0x28>
    {
      usb_vcp_call_back[i] = fun;
 80109f6:	490a      	ldr	r1, [pc, #40]	; (8010a20 <usb_vcp_rx_callback_register+0x44>)
 80109f8:	68fb      	ldr	r3, [r7, #12]
 80109fa:	687a      	ldr	r2, [r7, #4]
 80109fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      return USBD_OK;
 8010a00:	2300      	movs	r3, #0
 8010a02:	e006      	b.n	8010a12 <usb_vcp_rx_callback_register+0x36>
  for (int i = 0; i < USB_REC_MAX_NUM; i++)
 8010a04:	68fb      	ldr	r3, [r7, #12]
 8010a06:	3301      	adds	r3, #1
 8010a08:	60fb      	str	r3, [r7, #12]
 8010a0a:	68fb      	ldr	r3, [r7, #12]
 8010a0c:	2b04      	cmp	r3, #4
 8010a0e:	ddec      	ble.n	80109ea <usb_vcp_rx_callback_register+0xe>
    }
  }
    
  return USBD_FAIL;
 8010a10:	2303      	movs	r3, #3
}
 8010a12:	4618      	mov	r0, r3
 8010a14:	3714      	adds	r7, #20
 8010a16:	46bd      	mov	sp, r7
 8010a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a1c:	4770      	bx	lr
 8010a1e:	bf00      	nop
 8010a20:	2000625c 	.word	0x2000625c

08010a24 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010a24:	b480      	push	{r7}
 8010a26:	b083      	sub	sp, #12
 8010a28:	af00      	add	r7, sp, #0
 8010a2a:	4603      	mov	r3, r0
 8010a2c:	6039      	str	r1, [r7, #0]
 8010a2e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8010a30:	683b      	ldr	r3, [r7, #0]
 8010a32:	2212      	movs	r2, #18
 8010a34:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8010a36:	4b03      	ldr	r3, [pc, #12]	; (8010a44 <USBD_FS_DeviceDescriptor+0x20>)
}
 8010a38:	4618      	mov	r0, r3
 8010a3a:	370c      	adds	r7, #12
 8010a3c:	46bd      	mov	sp, r7
 8010a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a42:	4770      	bx	lr
 8010a44:	200000d0 	.word	0x200000d0

08010a48 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010a48:	b480      	push	{r7}
 8010a4a:	b083      	sub	sp, #12
 8010a4c:	af00      	add	r7, sp, #0
 8010a4e:	4603      	mov	r3, r0
 8010a50:	6039      	str	r1, [r7, #0]
 8010a52:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8010a54:	683b      	ldr	r3, [r7, #0]
 8010a56:	2204      	movs	r2, #4
 8010a58:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8010a5a:	4b03      	ldr	r3, [pc, #12]	; (8010a68 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8010a5c:	4618      	mov	r0, r3
 8010a5e:	370c      	adds	r7, #12
 8010a60:	46bd      	mov	sp, r7
 8010a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a66:	4770      	bx	lr
 8010a68:	200000e4 	.word	0x200000e4

08010a6c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010a6c:	b580      	push	{r7, lr}
 8010a6e:	b082      	sub	sp, #8
 8010a70:	af00      	add	r7, sp, #0
 8010a72:	4603      	mov	r3, r0
 8010a74:	6039      	str	r1, [r7, #0]
 8010a76:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010a78:	79fb      	ldrb	r3, [r7, #7]
 8010a7a:	2b00      	cmp	r3, #0
 8010a7c:	d105      	bne.n	8010a8a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8010a7e:	683a      	ldr	r2, [r7, #0]
 8010a80:	4907      	ldr	r1, [pc, #28]	; (8010aa0 <USBD_FS_ProductStrDescriptor+0x34>)
 8010a82:	4808      	ldr	r0, [pc, #32]	; (8010aa4 <USBD_FS_ProductStrDescriptor+0x38>)
 8010a84:	f7fe f80a 	bl	800ea9c <USBD_GetString>
 8010a88:	e004      	b.n	8010a94 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8010a8a:	683a      	ldr	r2, [r7, #0]
 8010a8c:	4904      	ldr	r1, [pc, #16]	; (8010aa0 <USBD_FS_ProductStrDescriptor+0x34>)
 8010a8e:	4805      	ldr	r0, [pc, #20]	; (8010aa4 <USBD_FS_ProductStrDescriptor+0x38>)
 8010a90:	f7fe f804 	bl	800ea9c <USBD_GetString>
  }
  return USBD_StrDesc;
 8010a94:	4b02      	ldr	r3, [pc, #8]	; (8010aa0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8010a96:	4618      	mov	r0, r3
 8010a98:	3708      	adds	r7, #8
 8010a9a:	46bd      	mov	sp, r7
 8010a9c:	bd80      	pop	{r7, pc}
 8010a9e:	bf00      	nop
 8010aa0:	20007a88 	.word	0x20007a88
 8010aa4:	08015570 	.word	0x08015570

08010aa8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010aa8:	b580      	push	{r7, lr}
 8010aaa:	b082      	sub	sp, #8
 8010aac:	af00      	add	r7, sp, #0
 8010aae:	4603      	mov	r3, r0
 8010ab0:	6039      	str	r1, [r7, #0]
 8010ab2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8010ab4:	683a      	ldr	r2, [r7, #0]
 8010ab6:	4904      	ldr	r1, [pc, #16]	; (8010ac8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8010ab8:	4804      	ldr	r0, [pc, #16]	; (8010acc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8010aba:	f7fd ffef 	bl	800ea9c <USBD_GetString>
  return USBD_StrDesc;
 8010abe:	4b02      	ldr	r3, [pc, #8]	; (8010ac8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8010ac0:	4618      	mov	r0, r3
 8010ac2:	3708      	adds	r7, #8
 8010ac4:	46bd      	mov	sp, r7
 8010ac6:	bd80      	pop	{r7, pc}
 8010ac8:	20007a88 	.word	0x20007a88
 8010acc:	08015588 	.word	0x08015588

08010ad0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010ad0:	b580      	push	{r7, lr}
 8010ad2:	b082      	sub	sp, #8
 8010ad4:	af00      	add	r7, sp, #0
 8010ad6:	4603      	mov	r3, r0
 8010ad8:	6039      	str	r1, [r7, #0]
 8010ada:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8010adc:	683b      	ldr	r3, [r7, #0]
 8010ade:	221a      	movs	r2, #26
 8010ae0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8010ae2:	f000 f843 	bl	8010b6c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8010ae6:	4b02      	ldr	r3, [pc, #8]	; (8010af0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8010ae8:	4618      	mov	r0, r3
 8010aea:	3708      	adds	r7, #8
 8010aec:	46bd      	mov	sp, r7
 8010aee:	bd80      	pop	{r7, pc}
 8010af0:	200000e8 	.word	0x200000e8

08010af4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010af4:	b580      	push	{r7, lr}
 8010af6:	b082      	sub	sp, #8
 8010af8:	af00      	add	r7, sp, #0
 8010afa:	4603      	mov	r3, r0
 8010afc:	6039      	str	r1, [r7, #0]
 8010afe:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8010b00:	79fb      	ldrb	r3, [r7, #7]
 8010b02:	2b00      	cmp	r3, #0
 8010b04:	d105      	bne.n	8010b12 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8010b06:	683a      	ldr	r2, [r7, #0]
 8010b08:	4907      	ldr	r1, [pc, #28]	; (8010b28 <USBD_FS_ConfigStrDescriptor+0x34>)
 8010b0a:	4808      	ldr	r0, [pc, #32]	; (8010b2c <USBD_FS_ConfigStrDescriptor+0x38>)
 8010b0c:	f7fd ffc6 	bl	800ea9c <USBD_GetString>
 8010b10:	e004      	b.n	8010b1c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8010b12:	683a      	ldr	r2, [r7, #0]
 8010b14:	4904      	ldr	r1, [pc, #16]	; (8010b28 <USBD_FS_ConfigStrDescriptor+0x34>)
 8010b16:	4805      	ldr	r0, [pc, #20]	; (8010b2c <USBD_FS_ConfigStrDescriptor+0x38>)
 8010b18:	f7fd ffc0 	bl	800ea9c <USBD_GetString>
  }
  return USBD_StrDesc;
 8010b1c:	4b02      	ldr	r3, [pc, #8]	; (8010b28 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8010b1e:	4618      	mov	r0, r3
 8010b20:	3708      	adds	r7, #8
 8010b22:	46bd      	mov	sp, r7
 8010b24:	bd80      	pop	{r7, pc}
 8010b26:	bf00      	nop
 8010b28:	20007a88 	.word	0x20007a88
 8010b2c:	0801559c 	.word	0x0801559c

08010b30 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010b30:	b580      	push	{r7, lr}
 8010b32:	b082      	sub	sp, #8
 8010b34:	af00      	add	r7, sp, #0
 8010b36:	4603      	mov	r3, r0
 8010b38:	6039      	str	r1, [r7, #0]
 8010b3a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010b3c:	79fb      	ldrb	r3, [r7, #7]
 8010b3e:	2b00      	cmp	r3, #0
 8010b40:	d105      	bne.n	8010b4e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8010b42:	683a      	ldr	r2, [r7, #0]
 8010b44:	4907      	ldr	r1, [pc, #28]	; (8010b64 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8010b46:	4808      	ldr	r0, [pc, #32]	; (8010b68 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8010b48:	f7fd ffa8 	bl	800ea9c <USBD_GetString>
 8010b4c:	e004      	b.n	8010b58 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8010b4e:	683a      	ldr	r2, [r7, #0]
 8010b50:	4904      	ldr	r1, [pc, #16]	; (8010b64 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8010b52:	4805      	ldr	r0, [pc, #20]	; (8010b68 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8010b54:	f7fd ffa2 	bl	800ea9c <USBD_GetString>
  }
  return USBD_StrDesc;
 8010b58:	4b02      	ldr	r3, [pc, #8]	; (8010b64 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8010b5a:	4618      	mov	r0, r3
 8010b5c:	3708      	adds	r7, #8
 8010b5e:	46bd      	mov	sp, r7
 8010b60:	bd80      	pop	{r7, pc}
 8010b62:	bf00      	nop
 8010b64:	20007a88 	.word	0x20007a88
 8010b68:	080155a8 	.word	0x080155a8

08010b6c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8010b6c:	b580      	push	{r7, lr}
 8010b6e:	b084      	sub	sp, #16
 8010b70:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8010b72:	4b0f      	ldr	r3, [pc, #60]	; (8010bb0 <Get_SerialNum+0x44>)
 8010b74:	681b      	ldr	r3, [r3, #0]
 8010b76:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8010b78:	4b0e      	ldr	r3, [pc, #56]	; (8010bb4 <Get_SerialNum+0x48>)
 8010b7a:	681b      	ldr	r3, [r3, #0]
 8010b7c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8010b7e:	4b0e      	ldr	r3, [pc, #56]	; (8010bb8 <Get_SerialNum+0x4c>)
 8010b80:	681b      	ldr	r3, [r3, #0]
 8010b82:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8010b84:	68fa      	ldr	r2, [r7, #12]
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	4413      	add	r3, r2
 8010b8a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8010b8c:	68fb      	ldr	r3, [r7, #12]
 8010b8e:	2b00      	cmp	r3, #0
 8010b90:	d009      	beq.n	8010ba6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8010b92:	2208      	movs	r2, #8
 8010b94:	4909      	ldr	r1, [pc, #36]	; (8010bbc <Get_SerialNum+0x50>)
 8010b96:	68f8      	ldr	r0, [r7, #12]
 8010b98:	f000 f814 	bl	8010bc4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8010b9c:	2204      	movs	r2, #4
 8010b9e:	4908      	ldr	r1, [pc, #32]	; (8010bc0 <Get_SerialNum+0x54>)
 8010ba0:	68b8      	ldr	r0, [r7, #8]
 8010ba2:	f000 f80f 	bl	8010bc4 <IntToUnicode>
  }
}
 8010ba6:	bf00      	nop
 8010ba8:	3710      	adds	r7, #16
 8010baa:	46bd      	mov	sp, r7
 8010bac:	bd80      	pop	{r7, pc}
 8010bae:	bf00      	nop
 8010bb0:	1fff7a10 	.word	0x1fff7a10
 8010bb4:	1fff7a14 	.word	0x1fff7a14
 8010bb8:	1fff7a18 	.word	0x1fff7a18
 8010bbc:	200000ea 	.word	0x200000ea
 8010bc0:	200000fa 	.word	0x200000fa

08010bc4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8010bc4:	b480      	push	{r7}
 8010bc6:	b087      	sub	sp, #28
 8010bc8:	af00      	add	r7, sp, #0
 8010bca:	60f8      	str	r0, [r7, #12]
 8010bcc:	60b9      	str	r1, [r7, #8]
 8010bce:	4613      	mov	r3, r2
 8010bd0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8010bd2:	2300      	movs	r3, #0
 8010bd4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8010bd6:	2300      	movs	r3, #0
 8010bd8:	75fb      	strb	r3, [r7, #23]
 8010bda:	e027      	b.n	8010c2c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8010bdc:	68fb      	ldr	r3, [r7, #12]
 8010bde:	0f1b      	lsrs	r3, r3, #28
 8010be0:	2b09      	cmp	r3, #9
 8010be2:	d80b      	bhi.n	8010bfc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8010be4:	68fb      	ldr	r3, [r7, #12]
 8010be6:	0f1b      	lsrs	r3, r3, #28
 8010be8:	b2da      	uxtb	r2, r3
 8010bea:	7dfb      	ldrb	r3, [r7, #23]
 8010bec:	005b      	lsls	r3, r3, #1
 8010bee:	4619      	mov	r1, r3
 8010bf0:	68bb      	ldr	r3, [r7, #8]
 8010bf2:	440b      	add	r3, r1
 8010bf4:	3230      	adds	r2, #48	; 0x30
 8010bf6:	b2d2      	uxtb	r2, r2
 8010bf8:	701a      	strb	r2, [r3, #0]
 8010bfa:	e00a      	b.n	8010c12 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8010bfc:	68fb      	ldr	r3, [r7, #12]
 8010bfe:	0f1b      	lsrs	r3, r3, #28
 8010c00:	b2da      	uxtb	r2, r3
 8010c02:	7dfb      	ldrb	r3, [r7, #23]
 8010c04:	005b      	lsls	r3, r3, #1
 8010c06:	4619      	mov	r1, r3
 8010c08:	68bb      	ldr	r3, [r7, #8]
 8010c0a:	440b      	add	r3, r1
 8010c0c:	3237      	adds	r2, #55	; 0x37
 8010c0e:	b2d2      	uxtb	r2, r2
 8010c10:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8010c12:	68fb      	ldr	r3, [r7, #12]
 8010c14:	011b      	lsls	r3, r3, #4
 8010c16:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8010c18:	7dfb      	ldrb	r3, [r7, #23]
 8010c1a:	005b      	lsls	r3, r3, #1
 8010c1c:	3301      	adds	r3, #1
 8010c1e:	68ba      	ldr	r2, [r7, #8]
 8010c20:	4413      	add	r3, r2
 8010c22:	2200      	movs	r2, #0
 8010c24:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8010c26:	7dfb      	ldrb	r3, [r7, #23]
 8010c28:	3301      	adds	r3, #1
 8010c2a:	75fb      	strb	r3, [r7, #23]
 8010c2c:	7dfa      	ldrb	r2, [r7, #23]
 8010c2e:	79fb      	ldrb	r3, [r7, #7]
 8010c30:	429a      	cmp	r2, r3
 8010c32:	d3d3      	bcc.n	8010bdc <IntToUnicode+0x18>
  }
}
 8010c34:	bf00      	nop
 8010c36:	bf00      	nop
 8010c38:	371c      	adds	r7, #28
 8010c3a:	46bd      	mov	sp, r7
 8010c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c40:	4770      	bx	lr
	...

08010c44 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8010c44:	b580      	push	{r7, lr}
 8010c46:	b08a      	sub	sp, #40	; 0x28
 8010c48:	af00      	add	r7, sp, #0
 8010c4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010c4c:	f107 0314 	add.w	r3, r7, #20
 8010c50:	2200      	movs	r2, #0
 8010c52:	601a      	str	r2, [r3, #0]
 8010c54:	605a      	str	r2, [r3, #4]
 8010c56:	609a      	str	r2, [r3, #8]
 8010c58:	60da      	str	r2, [r3, #12]
 8010c5a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8010c5c:	687b      	ldr	r3, [r7, #4]
 8010c5e:	681b      	ldr	r3, [r3, #0]
 8010c60:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8010c64:	d13a      	bne.n	8010cdc <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010c66:	2300      	movs	r3, #0
 8010c68:	613b      	str	r3, [r7, #16]
 8010c6a:	4b1e      	ldr	r3, [pc, #120]	; (8010ce4 <HAL_PCD_MspInit+0xa0>)
 8010c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010c6e:	4a1d      	ldr	r2, [pc, #116]	; (8010ce4 <HAL_PCD_MspInit+0xa0>)
 8010c70:	f043 0301 	orr.w	r3, r3, #1
 8010c74:	6313      	str	r3, [r2, #48]	; 0x30
 8010c76:	4b1b      	ldr	r3, [pc, #108]	; (8010ce4 <HAL_PCD_MspInit+0xa0>)
 8010c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010c7a:	f003 0301 	and.w	r3, r3, #1
 8010c7e:	613b      	str	r3, [r7, #16]
 8010c80:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 8010c82:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8010c86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010c88:	2302      	movs	r3, #2
 8010c8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010c8c:	2300      	movs	r3, #0
 8010c8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010c90:	2303      	movs	r3, #3
 8010c92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8010c94:	230a      	movs	r3, #10
 8010c96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010c98:	f107 0314 	add.w	r3, r7, #20
 8010c9c:	4619      	mov	r1, r3
 8010c9e:	4812      	ldr	r0, [pc, #72]	; (8010ce8 <HAL_PCD_MspInit+0xa4>)
 8010ca0:	f7f5 fe98 	bl	80069d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8010ca4:	4b0f      	ldr	r3, [pc, #60]	; (8010ce4 <HAL_PCD_MspInit+0xa0>)
 8010ca6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010ca8:	4a0e      	ldr	r2, [pc, #56]	; (8010ce4 <HAL_PCD_MspInit+0xa0>)
 8010caa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010cae:	6353      	str	r3, [r2, #52]	; 0x34
 8010cb0:	2300      	movs	r3, #0
 8010cb2:	60fb      	str	r3, [r7, #12]
 8010cb4:	4b0b      	ldr	r3, [pc, #44]	; (8010ce4 <HAL_PCD_MspInit+0xa0>)
 8010cb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010cb8:	4a0a      	ldr	r2, [pc, #40]	; (8010ce4 <HAL_PCD_MspInit+0xa0>)
 8010cba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8010cbe:	6453      	str	r3, [r2, #68]	; 0x44
 8010cc0:	4b08      	ldr	r3, [pc, #32]	; (8010ce4 <HAL_PCD_MspInit+0xa0>)
 8010cc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010cc4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010cc8:	60fb      	str	r3, [r7, #12]
 8010cca:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8010ccc:	2200      	movs	r2, #0
 8010cce:	2105      	movs	r1, #5
 8010cd0:	2043      	movs	r0, #67	; 0x43
 8010cd2:	f7f5 fa53 	bl	800617c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8010cd6:	2043      	movs	r0, #67	; 0x43
 8010cd8:	f7f5 fa6c 	bl	80061b4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8010cdc:	bf00      	nop
 8010cde:	3728      	adds	r7, #40	; 0x28
 8010ce0:	46bd      	mov	sp, r7
 8010ce2:	bd80      	pop	{r7, pc}
 8010ce4:	40023800 	.word	0x40023800
 8010ce8:	40020000 	.word	0x40020000

08010cec <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010cec:	b580      	push	{r7, lr}
 8010cee:	b082      	sub	sp, #8
 8010cf0:	af00      	add	r7, sp, #0
 8010cf2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	; 0x4e0
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8010d00:	4619      	mov	r1, r3
 8010d02:	4610      	mov	r0, r2
 8010d04:	f7fc fd65 	bl	800d7d2 <USBD_LL_SetupStage>
}
 8010d08:	bf00      	nop
 8010d0a:	3708      	adds	r7, #8
 8010d0c:	46bd      	mov	sp, r7
 8010d0e:	bd80      	pop	{r7, pc}

08010d10 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010d10:	b580      	push	{r7, lr}
 8010d12:	b082      	sub	sp, #8
 8010d14:	af00      	add	r7, sp, #0
 8010d16:	6078      	str	r0, [r7, #4]
 8010d18:	460b      	mov	r3, r1
 8010d1a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 8010d22:	78fa      	ldrb	r2, [r7, #3]
 8010d24:	6879      	ldr	r1, [r7, #4]
 8010d26:	4613      	mov	r3, r2
 8010d28:	00db      	lsls	r3, r3, #3
 8010d2a:	4413      	add	r3, r2
 8010d2c:	009b      	lsls	r3, r3, #2
 8010d2e:	440b      	add	r3, r1
 8010d30:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8010d34:	681a      	ldr	r2, [r3, #0]
 8010d36:	78fb      	ldrb	r3, [r7, #3]
 8010d38:	4619      	mov	r1, r3
 8010d3a:	f7fc fd9f 	bl	800d87c <USBD_LL_DataOutStage>
}
 8010d3e:	bf00      	nop
 8010d40:	3708      	adds	r7, #8
 8010d42:	46bd      	mov	sp, r7
 8010d44:	bd80      	pop	{r7, pc}

08010d46 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010d46:	b580      	push	{r7, lr}
 8010d48:	b082      	sub	sp, #8
 8010d4a:	af00      	add	r7, sp, #0
 8010d4c:	6078      	str	r0, [r7, #4]
 8010d4e:	460b      	mov	r3, r1
 8010d50:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8010d52:	687b      	ldr	r3, [r7, #4]
 8010d54:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 8010d58:	78fa      	ldrb	r2, [r7, #3]
 8010d5a:	6879      	ldr	r1, [r7, #4]
 8010d5c:	4613      	mov	r3, r2
 8010d5e:	00db      	lsls	r3, r3, #3
 8010d60:	4413      	add	r3, r2
 8010d62:	009b      	lsls	r3, r3, #2
 8010d64:	440b      	add	r3, r1
 8010d66:	3320      	adds	r3, #32
 8010d68:	681a      	ldr	r2, [r3, #0]
 8010d6a:	78fb      	ldrb	r3, [r7, #3]
 8010d6c:	4619      	mov	r1, r3
 8010d6e:	f7fc fe38 	bl	800d9e2 <USBD_LL_DataInStage>
}
 8010d72:	bf00      	nop
 8010d74:	3708      	adds	r7, #8
 8010d76:	46bd      	mov	sp, r7
 8010d78:	bd80      	pop	{r7, pc}

08010d7a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010d7a:	b580      	push	{r7, lr}
 8010d7c:	b082      	sub	sp, #8
 8010d7e:	af00      	add	r7, sp, #0
 8010d80:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8010d82:	687b      	ldr	r3, [r7, #4]
 8010d84:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8010d88:	4618      	mov	r0, r3
 8010d8a:	f7fc ff72 	bl	800dc72 <USBD_LL_SOF>
}
 8010d8e:	bf00      	nop
 8010d90:	3708      	adds	r7, #8
 8010d92:	46bd      	mov	sp, r7
 8010d94:	bd80      	pop	{r7, pc}

08010d96 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010d96:	b580      	push	{r7, lr}
 8010d98:	b084      	sub	sp, #16
 8010d9a:	af00      	add	r7, sp, #0
 8010d9c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8010d9e:	2301      	movs	r3, #1
 8010da0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	79db      	ldrb	r3, [r3, #7]
 8010da6:	2b00      	cmp	r3, #0
 8010da8:	d102      	bne.n	8010db0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8010daa:	2300      	movs	r3, #0
 8010dac:	73fb      	strb	r3, [r7, #15]
 8010dae:	e008      	b.n	8010dc2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8010db0:	687b      	ldr	r3, [r7, #4]
 8010db2:	79db      	ldrb	r3, [r3, #7]
 8010db4:	2b02      	cmp	r3, #2
 8010db6:	d102      	bne.n	8010dbe <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8010db8:	2301      	movs	r3, #1
 8010dba:	73fb      	strb	r3, [r7, #15]
 8010dbc:	e001      	b.n	8010dc2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8010dbe:	f7f3 fcdd 	bl	800477c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8010dc2:	687b      	ldr	r3, [r7, #4]
 8010dc4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8010dc8:	7bfa      	ldrb	r2, [r7, #15]
 8010dca:	4611      	mov	r1, r2
 8010dcc:	4618      	mov	r0, r3
 8010dce:	f7fc ff0c 	bl	800dbea <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8010dd8:	4618      	mov	r0, r3
 8010dda:	f7fc feb4 	bl	800db46 <USBD_LL_Reset>
}
 8010dde:	bf00      	nop
 8010de0:	3710      	adds	r7, #16
 8010de2:	46bd      	mov	sp, r7
 8010de4:	bd80      	pop	{r7, pc}
	...

08010de8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010de8:	b580      	push	{r7, lr}
 8010dea:	b082      	sub	sp, #8
 8010dec:	af00      	add	r7, sp, #0
 8010dee:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8010df0:	687b      	ldr	r3, [r7, #4]
 8010df2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8010df6:	4618      	mov	r0, r3
 8010df8:	f7fc ff07 	bl	800dc0a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	681b      	ldr	r3, [r3, #0]
 8010e00:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010e04:	681b      	ldr	r3, [r3, #0]
 8010e06:	687a      	ldr	r2, [r7, #4]
 8010e08:	6812      	ldr	r2, [r2, #0]
 8010e0a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010e0e:	f043 0301 	orr.w	r3, r3, #1
 8010e12:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	7adb      	ldrb	r3, [r3, #11]
 8010e18:	2b00      	cmp	r3, #0
 8010e1a:	d005      	beq.n	8010e28 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010e1c:	4b04      	ldr	r3, [pc, #16]	; (8010e30 <HAL_PCD_SuspendCallback+0x48>)
 8010e1e:	691b      	ldr	r3, [r3, #16]
 8010e20:	4a03      	ldr	r2, [pc, #12]	; (8010e30 <HAL_PCD_SuspendCallback+0x48>)
 8010e22:	f043 0306 	orr.w	r3, r3, #6
 8010e26:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8010e28:	bf00      	nop
 8010e2a:	3708      	adds	r7, #8
 8010e2c:	46bd      	mov	sp, r7
 8010e2e:	bd80      	pop	{r7, pc}
 8010e30:	e000ed00 	.word	0xe000ed00

08010e34 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010e34:	b580      	push	{r7, lr}
 8010e36:	b082      	sub	sp, #8
 8010e38:	af00      	add	r7, sp, #0
 8010e3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8010e42:	4618      	mov	r0, r3
 8010e44:	f7fc fefd 	bl	800dc42 <USBD_LL_Resume>
}
 8010e48:	bf00      	nop
 8010e4a:	3708      	adds	r7, #8
 8010e4c:	46bd      	mov	sp, r7
 8010e4e:	bd80      	pop	{r7, pc}

08010e50 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010e50:	b580      	push	{r7, lr}
 8010e52:	b082      	sub	sp, #8
 8010e54:	af00      	add	r7, sp, #0
 8010e56:	6078      	str	r0, [r7, #4]
 8010e58:	460b      	mov	r3, r1
 8010e5a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8010e5c:	687b      	ldr	r3, [r7, #4]
 8010e5e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8010e62:	78fa      	ldrb	r2, [r7, #3]
 8010e64:	4611      	mov	r1, r2
 8010e66:	4618      	mov	r0, r3
 8010e68:	f7fc ff55 	bl	800dd16 <USBD_LL_IsoOUTIncomplete>
}
 8010e6c:	bf00      	nop
 8010e6e:	3708      	adds	r7, #8
 8010e70:	46bd      	mov	sp, r7
 8010e72:	bd80      	pop	{r7, pc}

08010e74 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010e74:	b580      	push	{r7, lr}
 8010e76:	b082      	sub	sp, #8
 8010e78:	af00      	add	r7, sp, #0
 8010e7a:	6078      	str	r0, [r7, #4]
 8010e7c:	460b      	mov	r3, r1
 8010e7e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8010e86:	78fa      	ldrb	r2, [r7, #3]
 8010e88:	4611      	mov	r1, r2
 8010e8a:	4618      	mov	r0, r3
 8010e8c:	f7fc ff11 	bl	800dcb2 <USBD_LL_IsoINIncomplete>
}
 8010e90:	bf00      	nop
 8010e92:	3708      	adds	r7, #8
 8010e94:	46bd      	mov	sp, r7
 8010e96:	bd80      	pop	{r7, pc}

08010e98 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010e98:	b580      	push	{r7, lr}
 8010e9a:	b082      	sub	sp, #8
 8010e9c:	af00      	add	r7, sp, #0
 8010e9e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8010ea0:	687b      	ldr	r3, [r7, #4]
 8010ea2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8010ea6:	4618      	mov	r0, r3
 8010ea8:	f7fc ff67 	bl	800dd7a <USBD_LL_DevConnected>
}
 8010eac:	bf00      	nop
 8010eae:	3708      	adds	r7, #8
 8010eb0:	46bd      	mov	sp, r7
 8010eb2:	bd80      	pop	{r7, pc}

08010eb4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010eb4:	b580      	push	{r7, lr}
 8010eb6:	b082      	sub	sp, #8
 8010eb8:	af00      	add	r7, sp, #0
 8010eba:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8010ebc:	687b      	ldr	r3, [r7, #4]
 8010ebe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8010ec2:	4618      	mov	r0, r3
 8010ec4:	f7fc ff64 	bl	800dd90 <USBD_LL_DevDisconnected>
}
 8010ec8:	bf00      	nop
 8010eca:	3708      	adds	r7, #8
 8010ecc:	46bd      	mov	sp, r7
 8010ece:	bd80      	pop	{r7, pc}

08010ed0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8010ed0:	b580      	push	{r7, lr}
 8010ed2:	b082      	sub	sp, #8
 8010ed4:	af00      	add	r7, sp, #0
 8010ed6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8010ed8:	687b      	ldr	r3, [r7, #4]
 8010eda:	781b      	ldrb	r3, [r3, #0]
 8010edc:	2b00      	cmp	r3, #0
 8010ede:	d13c      	bne.n	8010f5a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8010ee0:	4a20      	ldr	r2, [pc, #128]	; (8010f64 <USBD_LL_Init+0x94>)
 8010ee2:	687b      	ldr	r3, [r7, #4]
 8010ee4:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8010ee8:	687b      	ldr	r3, [r7, #4]
 8010eea:	4a1e      	ldr	r2, [pc, #120]	; (8010f64 <USBD_LL_Init+0x94>)
 8010eec:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8010ef0:	4b1c      	ldr	r3, [pc, #112]	; (8010f64 <USBD_LL_Init+0x94>)
 8010ef2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8010ef6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8010ef8:	4b1a      	ldr	r3, [pc, #104]	; (8010f64 <USBD_LL_Init+0x94>)
 8010efa:	2204      	movs	r2, #4
 8010efc:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8010efe:	4b19      	ldr	r3, [pc, #100]	; (8010f64 <USBD_LL_Init+0x94>)
 8010f00:	2202      	movs	r2, #2
 8010f02:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8010f04:	4b17      	ldr	r3, [pc, #92]	; (8010f64 <USBD_LL_Init+0x94>)
 8010f06:	2200      	movs	r2, #0
 8010f08:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8010f0a:	4b16      	ldr	r3, [pc, #88]	; (8010f64 <USBD_LL_Init+0x94>)
 8010f0c:	2202      	movs	r2, #2
 8010f0e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8010f10:	4b14      	ldr	r3, [pc, #80]	; (8010f64 <USBD_LL_Init+0x94>)
 8010f12:	2200      	movs	r2, #0
 8010f14:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8010f16:	4b13      	ldr	r3, [pc, #76]	; (8010f64 <USBD_LL_Init+0x94>)
 8010f18:	2200      	movs	r2, #0
 8010f1a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8010f1c:	4b11      	ldr	r3, [pc, #68]	; (8010f64 <USBD_LL_Init+0x94>)
 8010f1e:	2200      	movs	r2, #0
 8010f20:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8010f22:	4b10      	ldr	r3, [pc, #64]	; (8010f64 <USBD_LL_Init+0x94>)
 8010f24:	2200      	movs	r2, #0
 8010f26:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8010f28:	4b0e      	ldr	r3, [pc, #56]	; (8010f64 <USBD_LL_Init+0x94>)
 8010f2a:	2200      	movs	r2, #0
 8010f2c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8010f2e:	480d      	ldr	r0, [pc, #52]	; (8010f64 <USBD_LL_Init+0x94>)
 8010f30:	f7f5 ff47 	bl	8006dc2 <HAL_PCD_Init>
 8010f34:	4603      	mov	r3, r0
 8010f36:	2b00      	cmp	r3, #0
 8010f38:	d001      	beq.n	8010f3e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8010f3a:	f7f3 fc1f 	bl	800477c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8010f3e:	2180      	movs	r1, #128	; 0x80
 8010f40:	4808      	ldr	r0, [pc, #32]	; (8010f64 <USBD_LL_Init+0x94>)
 8010f42:	f7f7 f972 	bl	800822a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8010f46:	2240      	movs	r2, #64	; 0x40
 8010f48:	2100      	movs	r1, #0
 8010f4a:	4806      	ldr	r0, [pc, #24]	; (8010f64 <USBD_LL_Init+0x94>)
 8010f4c:	f7f7 f926 	bl	800819c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8010f50:	2280      	movs	r2, #128	; 0x80
 8010f52:	2101      	movs	r1, #1
 8010f54:	4803      	ldr	r0, [pc, #12]	; (8010f64 <USBD_LL_Init+0x94>)
 8010f56:	f7f7 f921 	bl	800819c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8010f5a:	2300      	movs	r3, #0
}
 8010f5c:	4618      	mov	r0, r3
 8010f5e:	3708      	adds	r7, #8
 8010f60:	46bd      	mov	sp, r7
 8010f62:	bd80      	pop	{r7, pc}
 8010f64:	20007c88 	.word	0x20007c88

08010f68 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8010f68:	b580      	push	{r7, lr}
 8010f6a:	b084      	sub	sp, #16
 8010f6c:	af00      	add	r7, sp, #0
 8010f6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010f70:	2300      	movs	r3, #0
 8010f72:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010f74:	2300      	movs	r3, #0
 8010f76:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010f7e:	4618      	mov	r0, r3
 8010f80:	f7f6 f82e 	bl	8006fe0 <HAL_PCD_Start>
 8010f84:	4603      	mov	r3, r0
 8010f86:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010f88:	7bfb      	ldrb	r3, [r7, #15]
 8010f8a:	4618      	mov	r0, r3
 8010f8c:	f000 f942 	bl	8011214 <USBD_Get_USB_Status>
 8010f90:	4603      	mov	r3, r0
 8010f92:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010f94:	7bbb      	ldrb	r3, [r7, #14]
}
 8010f96:	4618      	mov	r0, r3
 8010f98:	3710      	adds	r7, #16
 8010f9a:	46bd      	mov	sp, r7
 8010f9c:	bd80      	pop	{r7, pc}

08010f9e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8010f9e:	b580      	push	{r7, lr}
 8010fa0:	b084      	sub	sp, #16
 8010fa2:	af00      	add	r7, sp, #0
 8010fa4:	6078      	str	r0, [r7, #4]
 8010fa6:	4608      	mov	r0, r1
 8010fa8:	4611      	mov	r1, r2
 8010faa:	461a      	mov	r2, r3
 8010fac:	4603      	mov	r3, r0
 8010fae:	70fb      	strb	r3, [r7, #3]
 8010fb0:	460b      	mov	r3, r1
 8010fb2:	70bb      	strb	r3, [r7, #2]
 8010fb4:	4613      	mov	r3, r2
 8010fb6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010fb8:	2300      	movs	r3, #0
 8010fba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010fbc:	2300      	movs	r3, #0
 8010fbe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8010fc6:	78bb      	ldrb	r3, [r7, #2]
 8010fc8:	883a      	ldrh	r2, [r7, #0]
 8010fca:	78f9      	ldrb	r1, [r7, #3]
 8010fcc:	f7f6 fd02 	bl	80079d4 <HAL_PCD_EP_Open>
 8010fd0:	4603      	mov	r3, r0
 8010fd2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010fd4:	7bfb      	ldrb	r3, [r7, #15]
 8010fd6:	4618      	mov	r0, r3
 8010fd8:	f000 f91c 	bl	8011214 <USBD_Get_USB_Status>
 8010fdc:	4603      	mov	r3, r0
 8010fde:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010fe0:	7bbb      	ldrb	r3, [r7, #14]
}
 8010fe2:	4618      	mov	r0, r3
 8010fe4:	3710      	adds	r7, #16
 8010fe6:	46bd      	mov	sp, r7
 8010fe8:	bd80      	pop	{r7, pc}

08010fea <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010fea:	b580      	push	{r7, lr}
 8010fec:	b084      	sub	sp, #16
 8010fee:	af00      	add	r7, sp, #0
 8010ff0:	6078      	str	r0, [r7, #4]
 8010ff2:	460b      	mov	r3, r1
 8010ff4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010ff6:	2300      	movs	r3, #0
 8010ff8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010ffa:	2300      	movs	r3, #0
 8010ffc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8010ffe:	687b      	ldr	r3, [r7, #4]
 8011000:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011004:	78fa      	ldrb	r2, [r7, #3]
 8011006:	4611      	mov	r1, r2
 8011008:	4618      	mov	r0, r3
 801100a:	f7f6 fd4b 	bl	8007aa4 <HAL_PCD_EP_Close>
 801100e:	4603      	mov	r3, r0
 8011010:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011012:	7bfb      	ldrb	r3, [r7, #15]
 8011014:	4618      	mov	r0, r3
 8011016:	f000 f8fd 	bl	8011214 <USBD_Get_USB_Status>
 801101a:	4603      	mov	r3, r0
 801101c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801101e:	7bbb      	ldrb	r3, [r7, #14]
}
 8011020:	4618      	mov	r0, r3
 8011022:	3710      	adds	r7, #16
 8011024:	46bd      	mov	sp, r7
 8011026:	bd80      	pop	{r7, pc}

08011028 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011028:	b580      	push	{r7, lr}
 801102a:	b084      	sub	sp, #16
 801102c:	af00      	add	r7, sp, #0
 801102e:	6078      	str	r0, [r7, #4]
 8011030:	460b      	mov	r3, r1
 8011032:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011034:	2300      	movs	r3, #0
 8011036:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011038:	2300      	movs	r3, #0
 801103a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801103c:	687b      	ldr	r3, [r7, #4]
 801103e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011042:	78fa      	ldrb	r2, [r7, #3]
 8011044:	4611      	mov	r1, r2
 8011046:	4618      	mov	r0, r3
 8011048:	f7f6 fe03 	bl	8007c52 <HAL_PCD_EP_SetStall>
 801104c:	4603      	mov	r3, r0
 801104e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011050:	7bfb      	ldrb	r3, [r7, #15]
 8011052:	4618      	mov	r0, r3
 8011054:	f000 f8de 	bl	8011214 <USBD_Get_USB_Status>
 8011058:	4603      	mov	r3, r0
 801105a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801105c:	7bbb      	ldrb	r3, [r7, #14]
}
 801105e:	4618      	mov	r0, r3
 8011060:	3710      	adds	r7, #16
 8011062:	46bd      	mov	sp, r7
 8011064:	bd80      	pop	{r7, pc}

08011066 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011066:	b580      	push	{r7, lr}
 8011068:	b084      	sub	sp, #16
 801106a:	af00      	add	r7, sp, #0
 801106c:	6078      	str	r0, [r7, #4]
 801106e:	460b      	mov	r3, r1
 8011070:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011072:	2300      	movs	r3, #0
 8011074:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011076:	2300      	movs	r3, #0
 8011078:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011080:	78fa      	ldrb	r2, [r7, #3]
 8011082:	4611      	mov	r1, r2
 8011084:	4618      	mov	r0, r3
 8011086:	f7f6 fe47 	bl	8007d18 <HAL_PCD_EP_ClrStall>
 801108a:	4603      	mov	r3, r0
 801108c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801108e:	7bfb      	ldrb	r3, [r7, #15]
 8011090:	4618      	mov	r0, r3
 8011092:	f000 f8bf 	bl	8011214 <USBD_Get_USB_Status>
 8011096:	4603      	mov	r3, r0
 8011098:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801109a:	7bbb      	ldrb	r3, [r7, #14]
}
 801109c:	4618      	mov	r0, r3
 801109e:	3710      	adds	r7, #16
 80110a0:	46bd      	mov	sp, r7
 80110a2:	bd80      	pop	{r7, pc}

080110a4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80110a4:	b480      	push	{r7}
 80110a6:	b085      	sub	sp, #20
 80110a8:	af00      	add	r7, sp, #0
 80110aa:	6078      	str	r0, [r7, #4]
 80110ac:	460b      	mov	r3, r1
 80110ae:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80110b6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80110b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80110bc:	2b00      	cmp	r3, #0
 80110be:	da0b      	bge.n	80110d8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80110c0:	78fb      	ldrb	r3, [r7, #3]
 80110c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80110c6:	68f9      	ldr	r1, [r7, #12]
 80110c8:	4613      	mov	r3, r2
 80110ca:	00db      	lsls	r3, r3, #3
 80110cc:	4413      	add	r3, r2
 80110ce:	009b      	lsls	r3, r3, #2
 80110d0:	440b      	add	r3, r1
 80110d2:	3316      	adds	r3, #22
 80110d4:	781b      	ldrb	r3, [r3, #0]
 80110d6:	e00b      	b.n	80110f0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80110d8:	78fb      	ldrb	r3, [r7, #3]
 80110da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80110de:	68f9      	ldr	r1, [r7, #12]
 80110e0:	4613      	mov	r3, r2
 80110e2:	00db      	lsls	r3, r3, #3
 80110e4:	4413      	add	r3, r2
 80110e6:	009b      	lsls	r3, r3, #2
 80110e8:	440b      	add	r3, r1
 80110ea:	f203 2356 	addw	r3, r3, #598	; 0x256
 80110ee:	781b      	ldrb	r3, [r3, #0]
  }
}
 80110f0:	4618      	mov	r0, r3
 80110f2:	3714      	adds	r7, #20
 80110f4:	46bd      	mov	sp, r7
 80110f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110fa:	4770      	bx	lr

080110fc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80110fc:	b580      	push	{r7, lr}
 80110fe:	b084      	sub	sp, #16
 8011100:	af00      	add	r7, sp, #0
 8011102:	6078      	str	r0, [r7, #4]
 8011104:	460b      	mov	r3, r1
 8011106:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011108:	2300      	movs	r3, #0
 801110a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801110c:	2300      	movs	r3, #0
 801110e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8011110:	687b      	ldr	r3, [r7, #4]
 8011112:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011116:	78fa      	ldrb	r2, [r7, #3]
 8011118:	4611      	mov	r1, r2
 801111a:	4618      	mov	r0, r3
 801111c:	f7f6 fc36 	bl	800798c <HAL_PCD_SetAddress>
 8011120:	4603      	mov	r3, r0
 8011122:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011124:	7bfb      	ldrb	r3, [r7, #15]
 8011126:	4618      	mov	r0, r3
 8011128:	f000 f874 	bl	8011214 <USBD_Get_USB_Status>
 801112c:	4603      	mov	r3, r0
 801112e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011130:	7bbb      	ldrb	r3, [r7, #14]
}
 8011132:	4618      	mov	r0, r3
 8011134:	3710      	adds	r7, #16
 8011136:	46bd      	mov	sp, r7
 8011138:	bd80      	pop	{r7, pc}

0801113a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801113a:	b580      	push	{r7, lr}
 801113c:	b086      	sub	sp, #24
 801113e:	af00      	add	r7, sp, #0
 8011140:	60f8      	str	r0, [r7, #12]
 8011142:	607a      	str	r2, [r7, #4]
 8011144:	603b      	str	r3, [r7, #0]
 8011146:	460b      	mov	r3, r1
 8011148:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801114a:	2300      	movs	r3, #0
 801114c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801114e:	2300      	movs	r3, #0
 8011150:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8011152:	68fb      	ldr	r3, [r7, #12]
 8011154:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8011158:	7af9      	ldrb	r1, [r7, #11]
 801115a:	683b      	ldr	r3, [r7, #0]
 801115c:	687a      	ldr	r2, [r7, #4]
 801115e:	f7f6 fd3e 	bl	8007bde <HAL_PCD_EP_Transmit>
 8011162:	4603      	mov	r3, r0
 8011164:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011166:	7dfb      	ldrb	r3, [r7, #23]
 8011168:	4618      	mov	r0, r3
 801116a:	f000 f853 	bl	8011214 <USBD_Get_USB_Status>
 801116e:	4603      	mov	r3, r0
 8011170:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8011172:	7dbb      	ldrb	r3, [r7, #22]
}
 8011174:	4618      	mov	r0, r3
 8011176:	3718      	adds	r7, #24
 8011178:	46bd      	mov	sp, r7
 801117a:	bd80      	pop	{r7, pc}

0801117c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801117c:	b580      	push	{r7, lr}
 801117e:	b086      	sub	sp, #24
 8011180:	af00      	add	r7, sp, #0
 8011182:	60f8      	str	r0, [r7, #12]
 8011184:	607a      	str	r2, [r7, #4]
 8011186:	603b      	str	r3, [r7, #0]
 8011188:	460b      	mov	r3, r1
 801118a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801118c:	2300      	movs	r3, #0
 801118e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011190:	2300      	movs	r3, #0
 8011192:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8011194:	68fb      	ldr	r3, [r7, #12]
 8011196:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801119a:	7af9      	ldrb	r1, [r7, #11]
 801119c:	683b      	ldr	r3, [r7, #0]
 801119e:	687a      	ldr	r2, [r7, #4]
 80111a0:	f7f6 fcca 	bl	8007b38 <HAL_PCD_EP_Receive>
 80111a4:	4603      	mov	r3, r0
 80111a6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80111a8:	7dfb      	ldrb	r3, [r7, #23]
 80111aa:	4618      	mov	r0, r3
 80111ac:	f000 f832 	bl	8011214 <USBD_Get_USB_Status>
 80111b0:	4603      	mov	r3, r0
 80111b2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80111b4:	7dbb      	ldrb	r3, [r7, #22]
}
 80111b6:	4618      	mov	r0, r3
 80111b8:	3718      	adds	r7, #24
 80111ba:	46bd      	mov	sp, r7
 80111bc:	bd80      	pop	{r7, pc}

080111be <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80111be:	b580      	push	{r7, lr}
 80111c0:	b082      	sub	sp, #8
 80111c2:	af00      	add	r7, sp, #0
 80111c4:	6078      	str	r0, [r7, #4]
 80111c6:	460b      	mov	r3, r1
 80111c8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80111ca:	687b      	ldr	r3, [r7, #4]
 80111cc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80111d0:	78fa      	ldrb	r2, [r7, #3]
 80111d2:	4611      	mov	r1, r2
 80111d4:	4618      	mov	r0, r3
 80111d6:	f7f6 fcea 	bl	8007bae <HAL_PCD_EP_GetRxCount>
 80111da:	4603      	mov	r3, r0
}
 80111dc:	4618      	mov	r0, r3
 80111de:	3708      	adds	r7, #8
 80111e0:	46bd      	mov	sp, r7
 80111e2:	bd80      	pop	{r7, pc}

080111e4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80111e4:	b480      	push	{r7}
 80111e6:	b083      	sub	sp, #12
 80111e8:	af00      	add	r7, sp, #0
 80111ea:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80111ec:	4b03      	ldr	r3, [pc, #12]	; (80111fc <USBD_static_malloc+0x18>)
}
 80111ee:	4618      	mov	r0, r3
 80111f0:	370c      	adds	r7, #12
 80111f2:	46bd      	mov	sp, r7
 80111f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111f8:	4770      	bx	lr
 80111fa:	bf00      	nop
 80111fc:	2000816c 	.word	0x2000816c

08011200 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8011200:	b480      	push	{r7}
 8011202:	b083      	sub	sp, #12
 8011204:	af00      	add	r7, sp, #0
 8011206:	6078      	str	r0, [r7, #4]

}
 8011208:	bf00      	nop
 801120a:	370c      	adds	r7, #12
 801120c:	46bd      	mov	sp, r7
 801120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011212:	4770      	bx	lr

08011214 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8011214:	b480      	push	{r7}
 8011216:	b085      	sub	sp, #20
 8011218:	af00      	add	r7, sp, #0
 801121a:	4603      	mov	r3, r0
 801121c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801121e:	2300      	movs	r3, #0
 8011220:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8011222:	79fb      	ldrb	r3, [r7, #7]
 8011224:	2b03      	cmp	r3, #3
 8011226:	d817      	bhi.n	8011258 <USBD_Get_USB_Status+0x44>
 8011228:	a201      	add	r2, pc, #4	; (adr r2, 8011230 <USBD_Get_USB_Status+0x1c>)
 801122a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801122e:	bf00      	nop
 8011230:	08011241 	.word	0x08011241
 8011234:	08011247 	.word	0x08011247
 8011238:	0801124d 	.word	0x0801124d
 801123c:	08011253 	.word	0x08011253
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8011240:	2300      	movs	r3, #0
 8011242:	73fb      	strb	r3, [r7, #15]
    break;
 8011244:	e00b      	b.n	801125e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8011246:	2303      	movs	r3, #3
 8011248:	73fb      	strb	r3, [r7, #15]
    break;
 801124a:	e008      	b.n	801125e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801124c:	2301      	movs	r3, #1
 801124e:	73fb      	strb	r3, [r7, #15]
    break;
 8011250:	e005      	b.n	801125e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8011252:	2303      	movs	r3, #3
 8011254:	73fb      	strb	r3, [r7, #15]
    break;
 8011256:	e002      	b.n	801125e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8011258:	2303      	movs	r3, #3
 801125a:	73fb      	strb	r3, [r7, #15]
    break;
 801125c:	bf00      	nop
  }
  return usb_status;
 801125e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011260:	4618      	mov	r0, r3
 8011262:	3714      	adds	r7, #20
 8011264:	46bd      	mov	sp, r7
 8011266:	f85d 7b04 	ldr.w	r7, [sp], #4
 801126a:	4770      	bx	lr

0801126c <abs_limit>:

#include "sys.h"
#include "pid.h"

void abs_limit(float *a, float ABS_MAX)
{
 801126c:	b480      	push	{r7}
 801126e:	b083      	sub	sp, #12
 8011270:	af00      	add	r7, sp, #0
 8011272:	6078      	str	r0, [r7, #4]
 8011274:	ed87 0a00 	vstr	s0, [r7]
  if (*a > ABS_MAX)
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	edd3 7a00 	vldr	s15, [r3]
 801127e:	ed97 7a00 	vldr	s14, [r7]
 8011282:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011286:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801128a:	d502      	bpl.n	8011292 <abs_limit+0x26>
    *a = ABS_MAX;
 801128c:	687b      	ldr	r3, [r7, #4]
 801128e:	683a      	ldr	r2, [r7, #0]
 8011290:	601a      	str	r2, [r3, #0]
  if (*a < -ABS_MAX)
 8011292:	687b      	ldr	r3, [r7, #4]
 8011294:	ed93 7a00 	vldr	s14, [r3]
 8011298:	edd7 7a00 	vldr	s15, [r7]
 801129c:	eef1 7a67 	vneg.f32	s15, s15
 80112a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80112a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80112a8:	d400      	bmi.n	80112ac <abs_limit+0x40>
    *a = -ABS_MAX;
}
 80112aa:	e006      	b.n	80112ba <abs_limit+0x4e>
    *a = -ABS_MAX;
 80112ac:	edd7 7a00 	vldr	s15, [r7]
 80112b0:	eef1 7a67 	vneg.f32	s15, s15
 80112b4:	687b      	ldr	r3, [r7, #4]
 80112b6:	edc3 7a00 	vstr	s15, [r3]
}
 80112ba:	bf00      	nop
 80112bc:	370c      	adds	r7, #12
 80112be:	46bd      	mov	sp, r7
 80112c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112c4:	4770      	bx	lr

080112c6 <pid_param_init>:
    float maxout,
    float inte_limit,
    float kp,
    float ki,
    float kd)
{
 80112c6:	b480      	push	{r7}
 80112c8:	b087      	sub	sp, #28
 80112ca:	af00      	add	r7, sp, #0
 80112cc:	6178      	str	r0, [r7, #20]
 80112ce:	ed87 0a04 	vstr	s0, [r7, #16]
 80112d2:	edc7 0a03 	vstr	s1, [r7, #12]
 80112d6:	ed87 1a02 	vstr	s2, [r7, #8]
 80112da:	edc7 1a01 	vstr	s3, [r7, #4]
 80112de:	ed87 2a00 	vstr	s4, [r7]

  pid->param.inte_limit = inte_limit;
 80112e2:	697b      	ldr	r3, [r7, #20]
 80112e4:	68fa      	ldr	r2, [r7, #12]
 80112e6:	615a      	str	r2, [r3, #20]
  pid->param.max_out = maxout;
 80112e8:	697b      	ldr	r3, [r7, #20]
 80112ea:	693a      	ldr	r2, [r7, #16]
 80112ec:	611a      	str	r2, [r3, #16]

  pid->param.p = kp;
 80112ee:	697b      	ldr	r3, [r7, #20]
 80112f0:	68ba      	ldr	r2, [r7, #8]
 80112f2:	601a      	str	r2, [r3, #0]
  pid->param.i = ki;
 80112f4:	697b      	ldr	r3, [r7, #20]
 80112f6:	687a      	ldr	r2, [r7, #4]
 80112f8:	605a      	str	r2, [r3, #4]
  pid->param.d = kd;
 80112fa:	697b      	ldr	r3, [r7, #20]
 80112fc:	683a      	ldr	r2, [r7, #0]
 80112fe:	609a      	str	r2, [r3, #8]
}
 8011300:	bf00      	nop
 8011302:	371c      	adds	r7, #28
 8011304:	46bd      	mov	sp, r7
 8011306:	f85d 7b04 	ldr.w	r7, [sp], #4
 801130a:	4770      	bx	lr

0801130c <pid_reset>:
  * @param[in] pid: control pid struct
  * @param[in] p/i/d: pid parameter
  * @retval    none
  */
static void pid_reset(struct pid *pid, float kp, float ki, float kd)
{
 801130c:	b480      	push	{r7}
 801130e:	b085      	sub	sp, #20
 8011310:	af00      	add	r7, sp, #0
 8011312:	60f8      	str	r0, [r7, #12]
 8011314:	ed87 0a02 	vstr	s0, [r7, #8]
 8011318:	edc7 0a01 	vstr	s1, [r7, #4]
 801131c:	ed87 1a00 	vstr	s2, [r7]
  pid->param.p = kp;
 8011320:	68fb      	ldr	r3, [r7, #12]
 8011322:	68ba      	ldr	r2, [r7, #8]
 8011324:	601a      	str	r2, [r3, #0]
  pid->param.i = ki;
 8011326:	68fb      	ldr	r3, [r7, #12]
 8011328:	687a      	ldr	r2, [r7, #4]
 801132a:	605a      	str	r2, [r3, #4]
  pid->param.d = kd;
 801132c:	68fb      	ldr	r3, [r7, #12]
 801132e:	683a      	ldr	r2, [r7, #0]
 8011330:	609a      	str	r2, [r3, #8]

  pid->pout = 0;
 8011332:	68fb      	ldr	r3, [r7, #12]
 8011334:	f04f 0200 	mov.w	r2, #0
 8011338:	629a      	str	r2, [r3, #40]	; 0x28
  pid->iout = 0;
 801133a:	68fb      	ldr	r3, [r7, #12]
 801133c:	f04f 0200 	mov.w	r2, #0
 8011340:	62da      	str	r2, [r3, #44]	; 0x2c
  pid->dout = 0;
 8011342:	68fb      	ldr	r3, [r7, #12]
 8011344:	f04f 0200 	mov.w	r2, #0
 8011348:	631a      	str	r2, [r3, #48]	; 0x30
  pid->out = 0;
 801134a:	68fb      	ldr	r3, [r7, #12]
 801134c:	f04f 0200 	mov.w	r2, #0
 8011350:	635a      	str	r2, [r3, #52]	; 0x34
}
 8011352:	bf00      	nop
 8011354:	3714      	adds	r7, #20
 8011356:	46bd      	mov	sp, r7
 8011358:	f85d 7b04 	ldr.w	r7, [sp], #4
 801135c:	4770      	bx	lr

0801135e <pid_calculate>:
  * @param[in] get: measure feedback value
  * @param[in] set: target value
  * @retval    pid calculate output 
  */
float pid_calculate(struct pid *pid, float get, float set)
{
 801135e:	b580      	push	{r7, lr}
 8011360:	b084      	sub	sp, #16
 8011362:	af00      	add	r7, sp, #0
 8011364:	60f8      	str	r0, [r7, #12]
 8011366:	ed87 0a02 	vstr	s0, [r7, #8]
 801136a:	edc7 0a01 	vstr	s1, [r7, #4]
  pid->get = get;
 801136e:	68fb      	ldr	r3, [r7, #12]
 8011370:	68ba      	ldr	r2, [r7, #8]
 8011372:	61da      	str	r2, [r3, #28]
  pid->set = set;
 8011374:	68fb      	ldr	r3, [r7, #12]
 8011376:	687a      	ldr	r2, [r7, #4]
 8011378:	619a      	str	r2, [r3, #24]
  pid->err = set - get;
 801137a:	ed97 7a01 	vldr	s14, [r7, #4]
 801137e:	edd7 7a02 	vldr	s15, [r7, #8]
 8011382:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011386:	68fb      	ldr	r3, [r7, #12]
 8011388:	edc3 7a08 	vstr	s15, [r3, #32]
  if ((pid->param.input_max_err != 0) && (fabs(pid->err) > pid->param.input_max_err))
 801138c:	68fb      	ldr	r3, [r7, #12]
 801138e:	edd3 7a03 	vldr	s15, [r3, #12]
 8011392:	eef5 7a40 	vcmp.f32	s15, #0.0
 8011396:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801139a:	d00f      	beq.n	80113bc <pid_calculate+0x5e>
 801139c:	68fb      	ldr	r3, [r7, #12]
 801139e:	edd3 7a08 	vldr	s15, [r3, #32]
 80113a2:	eeb0 7ae7 	vabs.f32	s14, s15
 80113a6:	68fb      	ldr	r3, [r7, #12]
 80113a8:	edd3 7a03 	vldr	s15, [r3, #12]
 80113ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80113b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80113b4:	dd02      	ble.n	80113bc <pid_calculate+0x5e>
    return 0;
 80113b6:	f04f 0300 	mov.w	r3, #0
 80113ba:	e052      	b.n	8011462 <pid_calculate+0x104>

  pid->pout = pid->param.p * pid->err;
 80113bc:	68fb      	ldr	r3, [r7, #12]
 80113be:	ed93 7a00 	vldr	s14, [r3]
 80113c2:	68fb      	ldr	r3, [r7, #12]
 80113c4:	edd3 7a08 	vldr	s15, [r3, #32]
 80113c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80113cc:	68fb      	ldr	r3, [r7, #12]
 80113ce:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
  pid->iout += pid->param.i * pid->err;
 80113d2:	68fb      	ldr	r3, [r7, #12]
 80113d4:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 80113d8:	68fb      	ldr	r3, [r7, #12]
 80113da:	edd3 6a01 	vldr	s13, [r3, #4]
 80113de:	68fb      	ldr	r3, [r7, #12]
 80113e0:	edd3 7a08 	vldr	s15, [r3, #32]
 80113e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80113e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80113ec:	68fb      	ldr	r3, [r7, #12]
 80113ee:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
  pid->dout = pid->param.d * (pid->err - pid->last_err);
 80113f2:	68fb      	ldr	r3, [r7, #12]
 80113f4:	ed93 7a02 	vldr	s14, [r3, #8]
 80113f8:	68fb      	ldr	r3, [r7, #12]
 80113fa:	edd3 6a08 	vldr	s13, [r3, #32]
 80113fe:	68fb      	ldr	r3, [r7, #12]
 8011400:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8011404:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8011408:	ee67 7a27 	vmul.f32	s15, s14, s15
 801140c:	68fb      	ldr	r3, [r7, #12]
 801140e:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30

  abs_limit(&(pid->iout), pid->param.inte_limit);
 8011412:	68fb      	ldr	r3, [r7, #12]
 8011414:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8011418:	68fb      	ldr	r3, [r7, #12]
 801141a:	edd3 7a05 	vldr	s15, [r3, #20]
 801141e:	eeb0 0a67 	vmov.f32	s0, s15
 8011422:	4610      	mov	r0, r2
 8011424:	f7ff ff22 	bl	801126c <abs_limit>
  pid->out = pid->pout + pid->iout + pid->dout;
 8011428:	68fb      	ldr	r3, [r7, #12]
 801142a:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 801142e:	68fb      	ldr	r3, [r7, #12]
 8011430:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8011434:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011438:	68fb      	ldr	r3, [r7, #12]
 801143a:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 801143e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011442:	68fb      	ldr	r3, [r7, #12]
 8011444:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
  abs_limit(&(pid->out), pid->param.max_out);
 8011448:	68fb      	ldr	r3, [r7, #12]
 801144a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801144e:	68fb      	ldr	r3, [r7, #12]
 8011450:	edd3 7a04 	vldr	s15, [r3, #16]
 8011454:	eeb0 0a67 	vmov.f32	s0, s15
 8011458:	4610      	mov	r0, r2
 801145a:	f7ff ff07 	bl	801126c <abs_limit>

  return pid->out;
 801145e:	68fb      	ldr	r3, [r7, #12]
 8011460:	6b5b      	ldr	r3, [r3, #52]	; 0x34
}
 8011462:	ee07 3a90 	vmov	s15, r3
 8011466:	eeb0 0a67 	vmov.f32	s0, s15
 801146a:	3710      	adds	r7, #16
 801146c:	46bd      	mov	sp, r7
 801146e:	bd80      	pop	{r7, pc}

08011470 <pid_struct_init>:
    float inte_limit,

    float kp,
    float ki,
    float kd)
{
 8011470:	b580      	push	{r7, lr}
 8011472:	b086      	sub	sp, #24
 8011474:	af00      	add	r7, sp, #0
 8011476:	6178      	str	r0, [r7, #20]
 8011478:	ed87 0a04 	vstr	s0, [r7, #16]
 801147c:	edc7 0a03 	vstr	s1, [r7, #12]
 8011480:	ed87 1a02 	vstr	s2, [r7, #8]
 8011484:	edc7 1a01 	vstr	s3, [r7, #4]
 8011488:	ed87 2a00 	vstr	s4, [r7]
  pid->f_param_init = pid_param_init;
 801148c:	697b      	ldr	r3, [r7, #20]
 801148e:	4a10      	ldr	r2, [pc, #64]	; (80114d0 <pid_struct_init+0x60>)
 8011490:	639a      	str	r2, [r3, #56]	; 0x38
  pid->f_pid_reset = pid_reset;
 8011492:	697b      	ldr	r3, [r7, #20]
 8011494:	4a0f      	ldr	r2, [pc, #60]	; (80114d4 <pid_struct_init+0x64>)
 8011496:	63da      	str	r2, [r3, #60]	; 0x3c

  pid->f_param_init(pid, maxout, inte_limit, kp, ki, kd);
 8011498:	697b      	ldr	r3, [r7, #20]
 801149a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801149c:	ed97 2a00 	vldr	s4, [r7]
 80114a0:	edd7 1a01 	vldr	s3, [r7, #4]
 80114a4:	ed97 1a02 	vldr	s2, [r7, #8]
 80114a8:	edd7 0a03 	vldr	s1, [r7, #12]
 80114ac:	ed97 0a04 	vldr	s0, [r7, #16]
 80114b0:	6978      	ldr	r0, [r7, #20]
 80114b2:	4798      	blx	r3
  pid->f_pid_reset(pid, kp, ki, kd);
 80114b4:	697b      	ldr	r3, [r7, #20]
 80114b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80114b8:	ed97 1a00 	vldr	s2, [r7]
 80114bc:	edd7 0a01 	vldr	s1, [r7, #4]
 80114c0:	ed97 0a02 	vldr	s0, [r7, #8]
 80114c4:	6978      	ldr	r0, [r7, #20]
 80114c6:	4798      	blx	r3
}
 80114c8:	bf00      	nop
 80114ca:	3718      	adds	r7, #24
 80114cc:	46bd      	mov	sp, r7
 80114ce:	bd80      	pop	{r7, pc}
 80114d0:	080112c7 	.word	0x080112c7
 80114d4:	0801130d 	.word	0x0801130d

080114d8 <skid_steer_calculate>:
  * @param input : ccx=+vx(mm/s)  ccw=+vw(deg/s)
  * @param output: every wheel speed(rpm)
  * @note  1=FR 2=FL 3=BL 4=BR
  */
void skid_steer_calculate(struct skid_steer *ss)
{
 80114d8:	b580      	push	{r7, lr}
 80114da:	b08a      	sub	sp, #40	; 0x28
 80114dc:	af00      	add	r7, sp, #0
 80114de:	6078      	str	r0, [r7, #4]

  MEC_VAL_LIMIT(ss->speed.vx, -MAX_CHASSIS_VX_SPEED, MAX_CHASSIS_VX_SPEED); //mm/s
 80114e0:	687b      	ldr	r3, [r7, #4]
 80114e2:	edd3 7a03 	vldr	s15, [r3, #12]
 80114e6:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 80116e0 <skid_steer_calculate+0x208>
 80114ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80114ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80114f2:	d803      	bhi.n	80114fc <skid_steer_calculate+0x24>
 80114f4:	687b      	ldr	r3, [r7, #4]
 80114f6:	4a7b      	ldr	r2, [pc, #492]	; (80116e4 <skid_steer_calculate+0x20c>)
 80114f8:	60da      	str	r2, [r3, #12]
 80114fa:	e00c      	b.n	8011516 <skid_steer_calculate+0x3e>
 80114fc:	687b      	ldr	r3, [r7, #4]
 80114fe:	edd3 7a03 	vldr	s15, [r3, #12]
 8011502:	ed9f 7a79 	vldr	s14, [pc, #484]	; 80116e8 <skid_steer_calculate+0x210>
 8011506:	eef4 7ac7 	vcmpe.f32	s15, s14
 801150a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801150e:	db02      	blt.n	8011516 <skid_steer_calculate+0x3e>
 8011510:	687b      	ldr	r3, [r7, #4]
 8011512:	4a76      	ldr	r2, [pc, #472]	; (80116ec <skid_steer_calculate+0x214>)
 8011514:	60da      	str	r2, [r3, #12]
  MEC_VAL_LIMIT(ss->speed.vw, -MAX_CHASSIS_VW_SPEED, MAX_CHASSIS_VW_SPEED); //deg/s
 8011516:	687b      	ldr	r3, [r7, #4]
 8011518:	edd3 7a04 	vldr	s15, [r3, #16]
 801151c:	ed9f 7a74 	vldr	s14, [pc, #464]	; 80116f0 <skid_steer_calculate+0x218>
 8011520:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011524:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011528:	d803      	bhi.n	8011532 <skid_steer_calculate+0x5a>
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	4a71      	ldr	r2, [pc, #452]	; (80116f4 <skid_steer_calculate+0x21c>)
 801152e:	611a      	str	r2, [r3, #16]
 8011530:	e00c      	b.n	801154c <skid_steer_calculate+0x74>
 8011532:	687b      	ldr	r3, [r7, #4]
 8011534:	edd3 7a04 	vldr	s15, [r3, #16]
 8011538:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 80116f8 <skid_steer_calculate+0x220>
 801153c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011540:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011544:	db02      	blt.n	801154c <skid_steer_calculate+0x74>
 8011546:	687b      	ldr	r3, [r7, #4]
 8011548:	4a6c      	ldr	r2, [pc, #432]	; (80116fc <skid_steer_calculate+0x224>)
 801154a:	611a      	str	r2, [r3, #16]

  float wheel_rpm[4];
  float max = 0;
 801154c:	f04f 0300 	mov.w	r3, #0
 8011550:	627b      	str	r3, [r7, #36]	; 0x24

  // RIGHT
  wheel_rpm[0] = (ss->speed.vx + ss->speed.vw * WHEELTRACK) / RADIUS / M_PI * 60;
 8011552:	687b      	ldr	r3, [r7, #4]
 8011554:	ed93 7a03 	vldr	s14, [r3, #12]
 8011558:	687b      	ldr	r3, [r7, #4]
 801155a:	edd3 7a04 	vldr	s15, [r3, #16]
 801155e:	eddf 6a68 	vldr	s13, [pc, #416]	; 8011700 <skid_steer_calculate+0x228>
 8011562:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8011566:	ee77 7a27 	vadd.f32	s15, s14, s15
 801156a:	ed9f 7a66 	vldr	s14, [pc, #408]	; 8011704 <skid_steer_calculate+0x22c>
 801156e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8011572:	ee16 0a90 	vmov	r0, s13
 8011576:	f7ee ffa7 	bl	80004c8 <__aeabi_f2d>
 801157a:	a357      	add	r3, pc, #348	; (adr r3, 80116d8 <skid_steer_calculate+0x200>)
 801157c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011580:	f7ef f924 	bl	80007cc <__aeabi_ddiv>
 8011584:	4602      	mov	r2, r0
 8011586:	460b      	mov	r3, r1
 8011588:	4610      	mov	r0, r2
 801158a:	4619      	mov	r1, r3
 801158c:	f04f 0200 	mov.w	r2, #0
 8011590:	4b5d      	ldr	r3, [pc, #372]	; (8011708 <skid_steer_calculate+0x230>)
 8011592:	f7ee fff1 	bl	8000578 <__aeabi_dmul>
 8011596:	4602      	mov	r2, r0
 8011598:	460b      	mov	r3, r1
 801159a:	4610      	mov	r0, r2
 801159c:	4619      	mov	r1, r3
 801159e:	f7ef faad 	bl	8000afc <__aeabi_d2f>
 80115a2:	4603      	mov	r3, r0
 80115a4:	60fb      	str	r3, [r7, #12]
  wheel_rpm[3] = wheel_rpm[0];
 80115a6:	68fb      	ldr	r3, [r7, #12]
 80115a8:	61bb      	str	r3, [r7, #24]
  // LEFT
  wheel_rpm[1] = (ss->speed.vx - ss->speed.vw * WHEELTRACK) / RADIUS / M_PI * 60;
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	ed93 7a03 	vldr	s14, [r3, #12]
 80115b0:	687b      	ldr	r3, [r7, #4]
 80115b2:	edd3 7a04 	vldr	s15, [r3, #16]
 80115b6:	eddf 6a52 	vldr	s13, [pc, #328]	; 8011700 <skid_steer_calculate+0x228>
 80115ba:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80115be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80115c2:	ed9f 7a50 	vldr	s14, [pc, #320]	; 8011704 <skid_steer_calculate+0x22c>
 80115c6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80115ca:	ee16 0a90 	vmov	r0, s13
 80115ce:	f7ee ff7b 	bl	80004c8 <__aeabi_f2d>
 80115d2:	a341      	add	r3, pc, #260	; (adr r3, 80116d8 <skid_steer_calculate+0x200>)
 80115d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115d8:	f7ef f8f8 	bl	80007cc <__aeabi_ddiv>
 80115dc:	4602      	mov	r2, r0
 80115de:	460b      	mov	r3, r1
 80115e0:	4610      	mov	r0, r2
 80115e2:	4619      	mov	r1, r3
 80115e4:	f04f 0200 	mov.w	r2, #0
 80115e8:	4b47      	ldr	r3, [pc, #284]	; (8011708 <skid_steer_calculate+0x230>)
 80115ea:	f7ee ffc5 	bl	8000578 <__aeabi_dmul>
 80115ee:	4602      	mov	r2, r0
 80115f0:	460b      	mov	r3, r1
 80115f2:	4610      	mov	r0, r2
 80115f4:	4619      	mov	r1, r3
 80115f6:	f7ef fa81 	bl	8000afc <__aeabi_d2f>
 80115fa:	4603      	mov	r3, r0
 80115fc:	613b      	str	r3, [r7, #16]
  wheel_rpm[2] = wheel_rpm[1];
 80115fe:	693b      	ldr	r3, [r7, #16]
 8011600:	617b      	str	r3, [r7, #20]
  
  //find max item
  for (uint8_t i = 0; i < 4; i++)
 8011602:	2300      	movs	r3, #0
 8011604:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8011608:	e021      	b.n	801164e <skid_steer_calculate+0x176>
  {
    if (fabs(wheel_rpm[i]) > max)
 801160a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801160e:	009b      	lsls	r3, r3, #2
 8011610:	3328      	adds	r3, #40	; 0x28
 8011612:	443b      	add	r3, r7
 8011614:	3b1c      	subs	r3, #28
 8011616:	edd3 7a00 	vldr	s15, [r3]
 801161a:	eef0 7ae7 	vabs.f32	s15, s15
 801161e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8011622:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011626:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801162a:	d50b      	bpl.n	8011644 <skid_steer_calculate+0x16c>
      max = fabs(wheel_rpm[i]);
 801162c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8011630:	009b      	lsls	r3, r3, #2
 8011632:	3328      	adds	r3, #40	; 0x28
 8011634:	443b      	add	r3, r7
 8011636:	3b1c      	subs	r3, #28
 8011638:	edd3 7a00 	vldr	s15, [r3]
 801163c:	eef0 7ae7 	vabs.f32	s15, s15
 8011640:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
  for (uint8_t i = 0; i < 4; i++)
 8011644:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8011648:	3301      	adds	r3, #1
 801164a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 801164e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8011652:	2b03      	cmp	r3, #3
 8011654:	d9d9      	bls.n	801160a <skid_steer_calculate+0x132>
  }

  // equal proportion
  if (max > MAX_WHEEL_RPM)
 8011656:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 801165a:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 801170c <skid_steer_calculate+0x234>
 801165e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011662:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011666:	dd28      	ble.n	80116ba <skid_steer_calculate+0x1e2>
  {
    float rate = MAX_WHEEL_RPM / max;
 8011668:	eddf 6a28 	vldr	s13, [pc, #160]	; 801170c <skid_steer_calculate+0x234>
 801166c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8011670:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011674:	edc7 7a07 	vstr	s15, [r7, #28]
    for (uint8_t i = 0; i < 4; i++)
 8011678:	2300      	movs	r3, #0
 801167a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 801167e:	e018      	b.n	80116b2 <skid_steer_calculate+0x1da>
      wheel_rpm[i] *= rate;
 8011680:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8011684:	009b      	lsls	r3, r3, #2
 8011686:	3328      	adds	r3, #40	; 0x28
 8011688:	443b      	add	r3, r7
 801168a:	3b1c      	subs	r3, #28
 801168c:	ed93 7a00 	vldr	s14, [r3]
 8011690:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8011694:	edd7 7a07 	vldr	s15, [r7, #28]
 8011698:	ee67 7a27 	vmul.f32	s15, s14, s15
 801169c:	009b      	lsls	r3, r3, #2
 801169e:	3328      	adds	r3, #40	; 0x28
 80116a0:	443b      	add	r3, r7
 80116a2:	3b1c      	subs	r3, #28
 80116a4:	edc3 7a00 	vstr	s15, [r3]
    for (uint8_t i = 0; i < 4; i++)
 80116a8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80116ac:	3301      	adds	r3, #1
 80116ae:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80116b2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80116b6:	2b03      	cmp	r3, #3
 80116b8:	d9e2      	bls.n	8011680 <skid_steer_calculate+0x1a8>
  }
  
  memcpy(ss->wheel_rpm, wheel_rpm, 4 * sizeof(float));
 80116ba:	687b      	ldr	r3, [r7, #4]
 80116bc:	3334      	adds	r3, #52	; 0x34
 80116be:	f107 010c 	add.w	r1, r7, #12
 80116c2:	2210      	movs	r2, #16
 80116c4:	4618      	mov	r0, r3
 80116c6:	f002 fc67 	bl	8013f98 <memcpy>
}
 80116ca:	bf00      	nop
 80116cc:	3728      	adds	r7, #40	; 0x28
 80116ce:	46bd      	mov	sp, r7
 80116d0:	bd80      	pop	{r7, pc}
 80116d2:	bf00      	nop
 80116d4:	f3af 8000 	nop.w
 80116d8:	54442d18 	.word	0x54442d18
 80116dc:	400921fb 	.word	0x400921fb
 80116e0:	c54e4000 	.word	0xc54e4000
 80116e4:	c54e4000 	.word	0xc54e4000
 80116e8:	454e4000 	.word	0x454e4000
 80116ec:	454e4000 	.word	0x454e4000
 80116f0:	c3960000 	.word	0xc3960000
 80116f4:	c3960000 	.word	0xc3960000
 80116f8:	43960000 	.word	0x43960000
 80116fc:	43960000 	.word	0x43960000
 8011700:	43c50000 	.word	0x43c50000
 8011704:	42980000 	.word	0x42980000
 8011708:	404e0000 	.word	0x404e0000
 801170c:	4604d000 	.word	0x4604d000

08011710 <skid_steer_position_measure>:

void skid_steer_position_measure(struct skid_steer *ss, struct skid_steer_motor_fdb wheel_fdb[])
{
 8011710:	b5b0      	push	{r4, r5, r7, lr}
 8011712:	b082      	sub	sp, #8
 8011714:	af00      	add	r7, sp, #0
 8011716:	6078      	str	r0, [r7, #4]
 8011718:	6039      	str	r1, [r7, #0]
  static double skid_steer_angle;
  static double last_d_x, last_d_y, last_d_w, d_x, d_y, d_w, diff_d_x, diff_d_y, diff_d_w;
  static double position_x, position_y, angle_w;
  static double v_x, v_y, v_w;

  rpm_ratio = ss->param.wheel_perimeter * MOTOR_DECELE_RATIO / (4 * 60.0f);
 801171a:	687b      	ldr	r3, [r7, #4]
 801171c:	edd3 7a00 	vldr	s15, [r3]
 8011720:	ed9f 7abd 	vldr	s14, [pc, #756]	; 8011a18 <skid_steer_position_measure+0x308>
 8011724:	ee27 7a87 	vmul.f32	s14, s15, s14
 8011728:	eddf 6abc 	vldr	s13, [pc, #752]	; 8011a1c <skid_steer_position_measure+0x30c>
 801172c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8011730:	4bbb      	ldr	r3, [pc, #748]	; (8011a20 <skid_steer_position_measure+0x310>)
 8011732:	edc3 7a00 	vstr	s15, [r3]
  ecd_ratio = ss->param.wheel_perimeter * MOTOR_DECELE_RATIO / (4 * MOTOR_ENCODER_ACCURACY);
 8011736:	687b      	ldr	r3, [r7, #4]
 8011738:	edd3 7a00 	vldr	s15, [r3]
 801173c:	ed9f 7ab6 	vldr	s14, [pc, #728]	; 8011a18 <skid_steer_position_measure+0x308>
 8011740:	ee27 7a87 	vmul.f32	s14, s15, s14
 8011744:	eddf 6ab7 	vldr	s13, [pc, #732]	; 8011a24 <skid_steer_position_measure+0x314>
 8011748:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801174c:	4bb6      	ldr	r3, [pc, #728]	; (8011a28 <skid_steer_position_measure+0x318>)
 801174e:	edc3 7a00 	vstr	s15, [r3]

  last_d_x = d_x;
 8011752:	4bb6      	ldr	r3, [pc, #728]	; (8011a2c <skid_steer_position_measure+0x31c>)
 8011754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011758:	49b5      	ldr	r1, [pc, #724]	; (8011a30 <skid_steer_position_measure+0x320>)
 801175a:	e9c1 2300 	strd	r2, r3, [r1]
  last_d_w = d_w;
 801175e:	4bb5      	ldr	r3, [pc, #724]	; (8011a34 <skid_steer_position_measure+0x324>)
 8011760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011764:	49b4      	ldr	r1, [pc, #720]	; (8011a38 <skid_steer_position_measure+0x328>)
 8011766:	e9c1 2300 	strd	r2, r3, [r1]
  d_x = ecd_ratio * ((wheel_fdb[0].total_ecd + wheel_fdb[1].total_ecd + wheel_fdb[2].total_ecd + wheel_fdb[3].total_ecd)/4);
 801176a:	683b      	ldr	r3, [r7, #0]
 801176c:	ed93 7a00 	vldr	s14, [r3]
 8011770:	683b      	ldr	r3, [r7, #0]
 8011772:	3308      	adds	r3, #8
 8011774:	edd3 7a00 	vldr	s15, [r3]
 8011778:	ee37 7a27 	vadd.f32	s14, s14, s15
 801177c:	683b      	ldr	r3, [r7, #0]
 801177e:	3310      	adds	r3, #16
 8011780:	edd3 7a00 	vldr	s15, [r3]
 8011784:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011788:	683b      	ldr	r3, [r7, #0]
 801178a:	3318      	adds	r3, #24
 801178c:	edd3 7a00 	vldr	s15, [r3]
 8011790:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011794:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8011798:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801179c:	4ba2      	ldr	r3, [pc, #648]	; (8011a28 <skid_steer_position_measure+0x318>)
 801179e:	edd3 7a00 	vldr	s15, [r3]
 80117a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80117a6:	ee17 0a90 	vmov	r0, s15
 80117aa:	f7ee fe8d 	bl	80004c8 <__aeabi_f2d>
 80117ae:	4602      	mov	r2, r0
 80117b0:	460b      	mov	r3, r1
 80117b2:	499e      	ldr	r1, [pc, #632]	; (8011a2c <skid_steer_position_measure+0x31c>)
 80117b4:	e9c1 2300 	strd	r2, r3, [r1]
  d_w = ecd_ratio * ((wheel_fdb[0].total_ecd + wheel_fdb[3].total_ecd)/2 - (wheel_fdb[1].total_ecd + wheel_fdb[2].total_ecd)/2);
 80117b8:	683b      	ldr	r3, [r7, #0]
 80117ba:	ed93 7a00 	vldr	s14, [r3]
 80117be:	683b      	ldr	r3, [r7, #0]
 80117c0:	3318      	adds	r3, #24
 80117c2:	edd3 7a00 	vldr	s15, [r3]
 80117c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80117ca:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80117ce:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80117d2:	683b      	ldr	r3, [r7, #0]
 80117d4:	3308      	adds	r3, #8
 80117d6:	edd3 6a00 	vldr	s13, [r3]
 80117da:	683b      	ldr	r3, [r7, #0]
 80117dc:	3310      	adds	r3, #16
 80117de:	edd3 7a00 	vldr	s15, [r3]
 80117e2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80117e6:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80117ea:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80117ee:	ee37 7a67 	vsub.f32	s14, s14, s15
 80117f2:	4b8d      	ldr	r3, [pc, #564]	; (8011a28 <skid_steer_position_measure+0x318>)
 80117f4:	edd3 7a00 	vldr	s15, [r3]
 80117f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80117fc:	ee17 0a90 	vmov	r0, s15
 8011800:	f7ee fe62 	bl	80004c8 <__aeabi_f2d>
 8011804:	4602      	mov	r2, r0
 8011806:	460b      	mov	r3, r1
 8011808:	498a      	ldr	r1, [pc, #552]	; (8011a34 <skid_steer_position_measure+0x324>)
 801180a:	e9c1 2300 	strd	r2, r3, [r1]

  diff_d_x = d_x - last_d_x;
 801180e:	4b87      	ldr	r3, [pc, #540]	; (8011a2c <skid_steer_position_measure+0x31c>)
 8011810:	e9d3 0100 	ldrd	r0, r1, [r3]
 8011814:	4b86      	ldr	r3, [pc, #536]	; (8011a30 <skid_steer_position_measure+0x320>)
 8011816:	e9d3 2300 	ldrd	r2, r3, [r3]
 801181a:	f7ee fcf5 	bl	8000208 <__aeabi_dsub>
 801181e:	4602      	mov	r2, r0
 8011820:	460b      	mov	r3, r1
 8011822:	4986      	ldr	r1, [pc, #536]	; (8011a3c <skid_steer_position_measure+0x32c>)
 8011824:	e9c1 2300 	strd	r2, r3, [r1]
  diff_d_y = d_y - last_d_y;
 8011828:	4b85      	ldr	r3, [pc, #532]	; (8011a40 <skid_steer_position_measure+0x330>)
 801182a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801182e:	4b85      	ldr	r3, [pc, #532]	; (8011a44 <skid_steer_position_measure+0x334>)
 8011830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011834:	f7ee fce8 	bl	8000208 <__aeabi_dsub>
 8011838:	4602      	mov	r2, r0
 801183a:	460b      	mov	r3, r1
 801183c:	4982      	ldr	r1, [pc, #520]	; (8011a48 <skid_steer_position_measure+0x338>)
 801183e:	e9c1 2300 	strd	r2, r3, [r1]
  diff_d_w = d_w - last_d_w;
 8011842:	4b7c      	ldr	r3, [pc, #496]	; (8011a34 <skid_steer_position_measure+0x324>)
 8011844:	e9d3 0100 	ldrd	r0, r1, [r3]
 8011848:	4b7b      	ldr	r3, [pc, #492]	; (8011a38 <skid_steer_position_measure+0x328>)
 801184a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801184e:	f7ee fcdb 	bl	8000208 <__aeabi_dsub>
 8011852:	4602      	mov	r2, r0
 8011854:	460b      	mov	r3, r1
 8011856:	497d      	ldr	r1, [pc, #500]	; (8011a4c <skid_steer_position_measure+0x33c>)
 8011858:	e9c1 2300 	strd	r2, r3, [r1]

  /* use glb_chassis gyro angle data */
  skid_steer_angle = ss->gyro.yaw_gyro_angle / RADIAN_COEF; // [degree]
 801185c:	687b      	ldr	r3, [r7, #4]
 801185e:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8011862:	ed9f 7a7b 	vldr	s14, [pc, #492]	; 8011a50 <skid_steer_position_measure+0x340>
 8011866:	eec7 6a87 	vdiv.f32	s13, s15, s14
 801186a:	ee16 0a90 	vmov	r0, s13
 801186e:	f7ee fe2b 	bl	80004c8 <__aeabi_f2d>
 8011872:	4602      	mov	r2, r0
 8011874:	460b      	mov	r3, r1
 8011876:	4977      	ldr	r1, [pc, #476]	; (8011a54 <skid_steer_position_measure+0x344>)
 8011878:	e9c1 2300 	strd	r2, r3, [r1]

  position_x += diff_d_x * cos(skid_steer_angle) - diff_d_y * sin(skid_steer_angle);
 801187c:	4b75      	ldr	r3, [pc, #468]	; (8011a54 <skid_steer_position_measure+0x344>)
 801187e:	ed93 7b00 	vldr	d7, [r3]
 8011882:	eeb0 0a47 	vmov.f32	s0, s14
 8011886:	eef0 0a67 	vmov.f32	s1, s15
 801188a:	f002 fbe1 	bl	8014050 <cos>
 801188e:	ec51 0b10 	vmov	r0, r1, d0
 8011892:	4b6a      	ldr	r3, [pc, #424]	; (8011a3c <skid_steer_position_measure+0x32c>)
 8011894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011898:	f7ee fe6e 	bl	8000578 <__aeabi_dmul>
 801189c:	4602      	mov	r2, r0
 801189e:	460b      	mov	r3, r1
 80118a0:	4614      	mov	r4, r2
 80118a2:	461d      	mov	r5, r3
 80118a4:	4b6b      	ldr	r3, [pc, #428]	; (8011a54 <skid_steer_position_measure+0x344>)
 80118a6:	ed93 7b00 	vldr	d7, [r3]
 80118aa:	eeb0 0a47 	vmov.f32	s0, s14
 80118ae:	eef0 0a67 	vmov.f32	s1, s15
 80118b2:	f002 fc2d 	bl	8014110 <sin>
 80118b6:	ec51 0b10 	vmov	r0, r1, d0
 80118ba:	4b63      	ldr	r3, [pc, #396]	; (8011a48 <skid_steer_position_measure+0x338>)
 80118bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118c0:	f7ee fe5a 	bl	8000578 <__aeabi_dmul>
 80118c4:	4602      	mov	r2, r0
 80118c6:	460b      	mov	r3, r1
 80118c8:	4620      	mov	r0, r4
 80118ca:	4629      	mov	r1, r5
 80118cc:	f7ee fc9c 	bl	8000208 <__aeabi_dsub>
 80118d0:	4602      	mov	r2, r0
 80118d2:	460b      	mov	r3, r1
 80118d4:	4610      	mov	r0, r2
 80118d6:	4619      	mov	r1, r3
 80118d8:	4b5f      	ldr	r3, [pc, #380]	; (8011a58 <skid_steer_position_measure+0x348>)
 80118da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118de:	f7ee fc95 	bl	800020c <__adddf3>
 80118e2:	4602      	mov	r2, r0
 80118e4:	460b      	mov	r3, r1
 80118e6:	495c      	ldr	r1, [pc, #368]	; (8011a58 <skid_steer_position_measure+0x348>)
 80118e8:	e9c1 2300 	strd	r2, r3, [r1]
  position_y += diff_d_x * sin(skid_steer_angle) + diff_d_y * cos(skid_steer_angle);
 80118ec:	4b59      	ldr	r3, [pc, #356]	; (8011a54 <skid_steer_position_measure+0x344>)
 80118ee:	ed93 7b00 	vldr	d7, [r3]
 80118f2:	eeb0 0a47 	vmov.f32	s0, s14
 80118f6:	eef0 0a67 	vmov.f32	s1, s15
 80118fa:	f002 fc09 	bl	8014110 <sin>
 80118fe:	ec51 0b10 	vmov	r0, r1, d0
 8011902:	4b4e      	ldr	r3, [pc, #312]	; (8011a3c <skid_steer_position_measure+0x32c>)
 8011904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011908:	f7ee fe36 	bl	8000578 <__aeabi_dmul>
 801190c:	4602      	mov	r2, r0
 801190e:	460b      	mov	r3, r1
 8011910:	4614      	mov	r4, r2
 8011912:	461d      	mov	r5, r3
 8011914:	4b4f      	ldr	r3, [pc, #316]	; (8011a54 <skid_steer_position_measure+0x344>)
 8011916:	ed93 7b00 	vldr	d7, [r3]
 801191a:	eeb0 0a47 	vmov.f32	s0, s14
 801191e:	eef0 0a67 	vmov.f32	s1, s15
 8011922:	f002 fb95 	bl	8014050 <cos>
 8011926:	ec51 0b10 	vmov	r0, r1, d0
 801192a:	4b47      	ldr	r3, [pc, #284]	; (8011a48 <skid_steer_position_measure+0x338>)
 801192c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011930:	f7ee fe22 	bl	8000578 <__aeabi_dmul>
 8011934:	4602      	mov	r2, r0
 8011936:	460b      	mov	r3, r1
 8011938:	4620      	mov	r0, r4
 801193a:	4629      	mov	r1, r5
 801193c:	f7ee fc66 	bl	800020c <__adddf3>
 8011940:	4602      	mov	r2, r0
 8011942:	460b      	mov	r3, r1
 8011944:	4610      	mov	r0, r2
 8011946:	4619      	mov	r1, r3
 8011948:	4b44      	ldr	r3, [pc, #272]	; (8011a5c <skid_steer_position_measure+0x34c>)
 801194a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801194e:	f7ee fc5d 	bl	800020c <__adddf3>
 8011952:	4602      	mov	r2, r0
 8011954:	460b      	mov	r3, r1
 8011956:	4941      	ldr	r1, [pc, #260]	; (8011a5c <skid_steer_position_measure+0x34c>)
 8011958:	e9c1 2300 	strd	r2, r3, [r1]

  angle_w += diff_d_w;
 801195c:	4b40      	ldr	r3, [pc, #256]	; (8011a60 <skid_steer_position_measure+0x350>)
 801195e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8011962:	4b3a      	ldr	r3, [pc, #232]	; (8011a4c <skid_steer_position_measure+0x33c>)
 8011964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011968:	f7ee fc50 	bl	800020c <__adddf3>
 801196c:	4602      	mov	r2, r0
 801196e:	460b      	mov	r3, r1
 8011970:	493b      	ldr	r1, [pc, #236]	; (8011a60 <skid_steer_position_measure+0x350>)
 8011972:	e9c1 2300 	strd	r2, r3, [r1]

  ss->position.position_x_mm = position_x;        //mm
 8011976:	4b38      	ldr	r3, [pc, #224]	; (8011a58 <skid_steer_position_measure+0x348>)
 8011978:	e9d3 2300 	ldrd	r2, r3, [r3]
 801197c:	4610      	mov	r0, r2
 801197e:	4619      	mov	r1, r3
 8011980:	f7ef f8bc 	bl	8000afc <__aeabi_d2f>
 8011984:	4602      	mov	r2, r0
 8011986:	687b      	ldr	r3, [r7, #4]
 8011988:	621a      	str	r2, [r3, #32]
  ss->position.position_y_mm = position_y;        //mm
 801198a:	4b34      	ldr	r3, [pc, #208]	; (8011a5c <skid_steer_position_measure+0x34c>)
 801198c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011990:	4610      	mov	r0, r2
 8011992:	4619      	mov	r1, r3
 8011994:	f7ef f8b2 	bl	8000afc <__aeabi_d2f>
 8011998:	4602      	mov	r2, r0
 801199a:	687b      	ldr	r3, [r7, #4]
 801199c:	625a      	str	r2, [r3, #36]	; 0x24
  ss->position.angle_deg = angle_w * RADIAN_COEF; //degree
 801199e:	4b30      	ldr	r3, [pc, #192]	; (8011a60 <skid_steer_position_measure+0x350>)
 80119a0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80119a4:	a31a      	add	r3, pc, #104	; (adr r3, 8011a10 <skid_steer_position_measure+0x300>)
 80119a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119aa:	f7ee fde5 	bl	8000578 <__aeabi_dmul>
 80119ae:	4602      	mov	r2, r0
 80119b0:	460b      	mov	r3, r1
 80119b2:	4610      	mov	r0, r2
 80119b4:	4619      	mov	r1, r3
 80119b6:	f7ef f8a1 	bl	8000afc <__aeabi_d2f>
 80119ba:	4602      	mov	r2, r0
 80119bc:	687b      	ldr	r3, [r7, #4]
 80119be:	629a      	str	r2, [r3, #40]	; 0x28

  v_x = rpm_ratio * (wheel_fdb[0].speed_rpm + wheel_fdb[1].speed_rpm + wheel_fdb[2].speed_rpm + wheel_fdb[3].speed_rpm)/4;
 80119c0:	683b      	ldr	r3, [r7, #0]
 80119c2:	ed93 7a01 	vldr	s14, [r3, #4]
 80119c6:	683b      	ldr	r3, [r7, #0]
 80119c8:	3308      	adds	r3, #8
 80119ca:	edd3 7a01 	vldr	s15, [r3, #4]
 80119ce:	ee37 7a27 	vadd.f32	s14, s14, s15
 80119d2:	683b      	ldr	r3, [r7, #0]
 80119d4:	3310      	adds	r3, #16
 80119d6:	edd3 7a01 	vldr	s15, [r3, #4]
 80119da:	ee37 7a27 	vadd.f32	s14, s14, s15
 80119de:	683b      	ldr	r3, [r7, #0]
 80119e0:	3318      	adds	r3, #24
 80119e2:	edd3 7a01 	vldr	s15, [r3, #4]
 80119e6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80119ea:	4b0d      	ldr	r3, [pc, #52]	; (8011a20 <skid_steer_position_measure+0x310>)
 80119ec:	edd3 7a00 	vldr	s15, [r3]
 80119f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80119f4:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80119f8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80119fc:	ee16 0a90 	vmov	r0, s13
 8011a00:	f7ee fd62 	bl	80004c8 <__aeabi_f2d>
 8011a04:	4602      	mov	r2, r0
 8011a06:	460b      	mov	r3, r1
 8011a08:	4916      	ldr	r1, [pc, #88]	; (8011a64 <skid_steer_position_measure+0x354>)
 8011a0a:	e9c1 2300 	strd	r2, r3, [r1]
 8011a0e:	e02b      	b.n	8011a68 <skid_steer_position_measure+0x358>
 8011a10:	60000000 	.word	0x60000000
 8011a14:	404ca666 	.word	0x404ca666
 8011a18:	3d554c35 	.word	0x3d554c35
 8011a1c:	43700000 	.word	0x43700000
 8011a20:	2000838c 	.word	0x2000838c
 8011a24:	47000000 	.word	0x47000000
 8011a28:	20008390 	.word	0x20008390
 8011a2c:	20008398 	.word	0x20008398
 8011a30:	200083a0 	.word	0x200083a0
 8011a34:	200083a8 	.word	0x200083a8
 8011a38:	200083b0 	.word	0x200083b0
 8011a3c:	200083b8 	.word	0x200083b8
 8011a40:	200083c0 	.word	0x200083c0
 8011a44:	200083c8 	.word	0x200083c8
 8011a48:	200083d0 	.word	0x200083d0
 8011a4c:	200083d8 	.word	0x200083d8
 8011a50:	42653333 	.word	0x42653333
 8011a54:	200083e0 	.word	0x200083e0
 8011a58:	200083e8 	.word	0x200083e8
 8011a5c:	200083f0 	.word	0x200083f0
 8011a60:	200083f8 	.word	0x200083f8
 8011a64:	20008400 	.word	0x20008400
  v_w = rpm_ratio * ((wheel_fdb[0].speed_rpm + wheel_fdb[3].speed_rpm)/2 - (wheel_fdb[1].speed_rpm + wheel_fdb[2].speed_rpm)/2);
 8011a68:	683b      	ldr	r3, [r7, #0]
 8011a6a:	ed93 7a01 	vldr	s14, [r3, #4]
 8011a6e:	683b      	ldr	r3, [r7, #0]
 8011a70:	3318      	adds	r3, #24
 8011a72:	edd3 7a01 	vldr	s15, [r3, #4]
 8011a76:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011a7a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8011a7e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8011a82:	683b      	ldr	r3, [r7, #0]
 8011a84:	3308      	adds	r3, #8
 8011a86:	edd3 6a01 	vldr	s13, [r3, #4]
 8011a8a:	683b      	ldr	r3, [r7, #0]
 8011a8c:	3310      	adds	r3, #16
 8011a8e:	edd3 7a01 	vldr	s15, [r3, #4]
 8011a92:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8011a96:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8011a9a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8011a9e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8011aa2:	4b19      	ldr	r3, [pc, #100]	; (8011b08 <skid_steer_position_measure+0x3f8>)
 8011aa4:	edd3 7a00 	vldr	s15, [r3]
 8011aa8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011aac:	ee17 0a90 	vmov	r0, s15
 8011ab0:	f7ee fd0a 	bl	80004c8 <__aeabi_f2d>
 8011ab4:	4602      	mov	r2, r0
 8011ab6:	460b      	mov	r3, r1
 8011ab8:	4914      	ldr	r1, [pc, #80]	; (8011b0c <skid_steer_position_measure+0x3fc>)
 8011aba:	e9c1 2300 	strd	r2, r3, [r1]

  ss->position.v_x_mm = v_x;                 //mm/s
 8011abe:	4b14      	ldr	r3, [pc, #80]	; (8011b10 <skid_steer_position_measure+0x400>)
 8011ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ac4:	4610      	mov	r0, r2
 8011ac6:	4619      	mov	r1, r3
 8011ac8:	f7ef f818 	bl	8000afc <__aeabi_d2f>
 8011acc:	4602      	mov	r2, r0
 8011ace:	687b      	ldr	r3, [r7, #4]
 8011ad0:	615a      	str	r2, [r3, #20]
  ss->position.rate_deg = v_w * RADIAN_COEF; //degree/s
 8011ad2:	4b0e      	ldr	r3, [pc, #56]	; (8011b0c <skid_steer_position_measure+0x3fc>)
 8011ad4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8011ad8:	a309      	add	r3, pc, #36	; (adr r3, 8011b00 <skid_steer_position_measure+0x3f0>)
 8011ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ade:	f7ee fd4b 	bl	8000578 <__aeabi_dmul>
 8011ae2:	4602      	mov	r2, r0
 8011ae4:	460b      	mov	r3, r1
 8011ae6:	4610      	mov	r0, r2
 8011ae8:	4619      	mov	r1, r3
 8011aea:	f7ef f807 	bl	8000afc <__aeabi_d2f>
 8011aee:	4602      	mov	r2, r0
 8011af0:	687b      	ldr	r3, [r7, #4]
 8011af2:	61da      	str	r2, [r3, #28]
}
 8011af4:	bf00      	nop
 8011af6:	3708      	adds	r7, #8
 8011af8:	46bd      	mov	sp, r7
 8011afa:	bdb0      	pop	{r4, r5, r7, pc}
 8011afc:	f3af 8000 	nop.w
 8011b00:	60000000 	.word	0x60000000
 8011b04:	404ca666 	.word	0x404ca666
 8011b08:	2000838c 	.word	0x2000838c
 8011b0c:	20008408 	.word	0x20008408
 8011b10:	20008400 	.word	0x20008400

08011b14 <controller_register>:
                            const char *name,
                            enum controller_type type,
                            void *param,
                            void *feedback,
                            uint8_t enable)
{
 8011b14:	b580      	push	{r7, lr}
 8011b16:	b084      	sub	sp, #16
 8011b18:	af00      	add	r7, sp, #0
 8011b1a:	60f8      	str	r0, [r7, #12]
 8011b1c:	60b9      	str	r1, [r7, #8]
 8011b1e:	603b      	str	r3, [r7, #0]
 8011b20:	4613      	mov	r3, r2
 8011b22:	71fb      	strb	r3, [r7, #7]
  if (ctrl == NULL)
 8011b24:	68fb      	ldr	r3, [r7, #12]
 8011b26:	2b00      	cmp	r3, #0
 8011b28:	d102      	bne.n	8011b30 <controller_register+0x1c>
    return -RM_INVAL;
 8011b2a:	f06f 0301 	mvn.w	r3, #1
 8011b2e:	e01d      	b.n	8011b6c <controller_register+0x58>
  if (controller_find(name) != NULL)
 8011b30:	68b8      	ldr	r0, [r7, #8]
 8011b32:	f000 f81f 	bl	8011b74 <controller_find>
 8011b36:	4603      	mov	r3, r0
 8011b38:	2b00      	cmp	r3, #0
 8011b3a:	d002      	beq.n	8011b42 <controller_register+0x2e>
    return -RM_EXISTED;
 8011b3c:	f06f 0302 	mvn.w	r3, #2
 8011b40:	e014      	b.n	8011b6c <controller_register+0x58>

  object_init(&(ctrl->parent), Object_Class_Controller, name);
 8011b42:	68fb      	ldr	r3, [r7, #12]
 8011b44:	68ba      	ldr	r2, [r7, #8]
 8011b46:	2102      	movs	r1, #2
 8011b48:	4618      	mov	r0, r3
 8011b4a:	f001 f847 	bl	8012bdc <object_init>

  ctrl->type = type;
 8011b4e:	68fb      	ldr	r3, [r7, #12]
 8011b50:	79fa      	ldrb	r2, [r7, #7]
 8011b52:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  ctrl->enable = enable;
 8011b56:	68fb      	ldr	r3, [r7, #12]
 8011b58:	7f3a      	ldrb	r2, [r7, #28]
 8011b5a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  ctrl->param = param;
 8011b5e:	68fb      	ldr	r3, [r7, #12]
 8011b60:	683a      	ldr	r2, [r7, #0]
 8011b62:	631a      	str	r2, [r3, #48]	; 0x30
  ctrl->feedback = feedback;
 8011b64:	68fb      	ldr	r3, [r7, #12]
 8011b66:	69ba      	ldr	r2, [r7, #24]
 8011b68:	635a      	str	r2, [r3, #52]	; 0x34

  return RM_OK;
 8011b6a:	2300      	movs	r3, #0
}
 8011b6c:	4618      	mov	r0, r3
 8011b6e:	3710      	adds	r7, #16
 8011b70:	46bd      	mov	sp, r7
 8011b72:	bd80      	pop	{r7, pc}

08011b74 <controller_find>:

  return RM_OK;
}

controller_t controller_find(const char *name)
{
 8011b74:	b580      	push	{r7, lr}
 8011b76:	b084      	sub	sp, #16
 8011b78:	af00      	add	r7, sp, #0
 8011b7a:	6078      	str	r0, [r7, #4]
  struct object *object;

  object = object_find(name, Object_Class_Controller);
 8011b7c:	2102      	movs	r1, #2
 8011b7e:	6878      	ldr	r0, [r7, #4]
 8011b80:	f001 f868 	bl	8012c54 <object_find>
 8011b84:	60f8      	str	r0, [r7, #12]

  return (controller_t)object;
 8011b86:	68fb      	ldr	r3, [r7, #12]
}
 8011b88:	4618      	mov	r0, r3
 8011b8a:	3710      	adds	r7, #16
 8011b8c:	46bd      	mov	sp, r7
 8011b8e:	bd80      	pop	{r7, pc}

08011b90 <controller_execute>:

  return RM_OK;
}

int32_t controller_execute(struct controller *ctrl, void *feedback)
{
 8011b90:	b580      	push	{r7, lr}
 8011b92:	b082      	sub	sp, #8
 8011b94:	af00      	add	r7, sp, #0
 8011b96:	6078      	str	r0, [r7, #4]
 8011b98:	6039      	str	r1, [r7, #0]
  if (ctrl == NULL)
 8011b9a:	687b      	ldr	r3, [r7, #4]
 8011b9c:	2b00      	cmp	r3, #0
 8011b9e:	d102      	bne.n	8011ba6 <controller_execute+0x16>
    return -RM_INVAL;
 8011ba0:	f06f 0301 	mvn.w	r3, #1
 8011ba4:	e029      	b.n	8011bfa <controller_execute+0x6a>

  if (feedback == NULL)
 8011ba6:	683b      	ldr	r3, [r7, #0]
 8011ba8:	2b00      	cmp	r3, #0
 8011baa:	d102      	bne.n	8011bb2 <controller_execute+0x22>
    return -RM_INVAL;
 8011bac:	f06f 0301 	mvn.w	r3, #1
 8011bb0:	e023      	b.n	8011bfa <controller_execute+0x6a>

  if (ctrl->convert_feedback == NULL)
 8011bb2:	687b      	ldr	r3, [r7, #4]
 8011bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011bb6:	2b00      	cmp	r3, #0
 8011bb8:	d102      	bne.n	8011bc0 <controller_execute+0x30>
  {
    return -RM_INVAL;
 8011bba:	f06f 0301 	mvn.w	r3, #1
 8011bbe:	e01c      	b.n	8011bfa <controller_execute+0x6a>
  }
  else
  {
    ctrl->convert_feedback(ctrl, feedback);
 8011bc0:	687b      	ldr	r3, [r7, #4]
 8011bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011bc4:	6839      	ldr	r1, [r7, #0]
 8011bc6:	6878      	ldr	r0, [r7, #4]
 8011bc8:	4798      	blx	r3
  }

  if ((ctrl->control != NULL) && (ctrl->enable == 1))
 8011bca:	687b      	ldr	r3, [r7, #4]
 8011bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011bce:	2b00      	cmp	r3, #0
 8011bd0:	d012      	beq.n	8011bf8 <controller_execute+0x68>
 8011bd2:	687b      	ldr	r3, [r7, #4]
 8011bd4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011bd8:	2b01      	cmp	r3, #1
 8011bda:	d10d      	bne.n	8011bf8 <controller_execute+0x68>
  {
    ctrl->control(ctrl, ctrl->param, ctrl->feedback, ctrl->input);
 8011bdc:	687b      	ldr	r3, [r7, #4]
 8011bde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011be0:	687a      	ldr	r2, [r7, #4]
 8011be2:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8011be4:	687a      	ldr	r2, [r7, #4]
 8011be6:	6b50      	ldr	r0, [r2, #52]	; 0x34
 8011be8:	687a      	ldr	r2, [r7, #4]
 8011bea:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 8011bee:	eeb0 0a67 	vmov.f32	s0, s15
 8011bf2:	4602      	mov	r2, r0
 8011bf4:	6878      	ldr	r0, [r7, #4]
 8011bf6:	4798      	blx	r3
  }

  return RM_OK;
 8011bf8:	2300      	movs	r3, #0
}
 8011bfa:	4618      	mov	r0, r3
 8011bfc:	3708      	adds	r7, #8
 8011bfe:	46bd      	mov	sp, r7
 8011c00:	bd80      	pop	{r7, pc}

08011c02 <controller_set_input>:

int32_t controller_set_input(struct controller *ctrl, float input)
{
 8011c02:	b480      	push	{r7}
 8011c04:	b083      	sub	sp, #12
 8011c06:	af00      	add	r7, sp, #0
 8011c08:	6078      	str	r0, [r7, #4]
 8011c0a:	ed87 0a00 	vstr	s0, [r7]
  if (ctrl == NULL)
 8011c0e:	687b      	ldr	r3, [r7, #4]
 8011c10:	2b00      	cmp	r3, #0
 8011c12:	d101      	bne.n	8011c18 <controller_set_input+0x16>
    return 0;
 8011c14:	2300      	movs	r3, #0
 8011c16:	e003      	b.n	8011c20 <controller_set_input+0x1e>
  ctrl->input = input;
 8011c18:	687b      	ldr	r3, [r7, #4]
 8011c1a:	683a      	ldr	r2, [r7, #0]
 8011c1c:	639a      	str	r2, [r3, #56]	; 0x38
  return RM_OK;
 8011c1e:	2300      	movs	r3, #0
}
 8011c20:	4618      	mov	r0, r3
 8011c22:	370c      	adds	r7, #12
 8011c24:	46bd      	mov	sp, r7
 8011c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c2a:	4770      	bx	lr

08011c2c <controller_get_output>:

float controller_get_output(struct controller *ctrl, float *out)
{
 8011c2c:	b480      	push	{r7}
 8011c2e:	b083      	sub	sp, #12
 8011c30:	af00      	add	r7, sp, #0
 8011c32:	6078      	str	r0, [r7, #4]
 8011c34:	6039      	str	r1, [r7, #0]
  if (ctrl == NULL)
 8011c36:	687b      	ldr	r3, [r7, #4]
 8011c38:	2b00      	cmp	r3, #0
 8011c3a:	d102      	bne.n	8011c42 <controller_get_output+0x16>
    return 0;
 8011c3c:	f04f 0300 	mov.w	r3, #0
 8011c40:	e005      	b.n	8011c4e <controller_get_output+0x22>
  *out = ctrl->output;
 8011c42:	687b      	ldr	r3, [r7, #4]
 8011c44:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8011c46:	683b      	ldr	r3, [r7, #0]
 8011c48:	601a      	str	r2, [r3, #0]
  return ctrl->output;
 8011c4a:	687b      	ldr	r3, [r7, #4]
 8011c4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 8011c4e:	ee07 3a90 	vmov	s15, r3
 8011c52:	eeb0 0a67 	vmov.f32	s0, s15
 8011c56:	370c      	adds	r7, #12
 8011c58:	46bd      	mov	sp, r7
 8011c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c5e:	4770      	bx	lr

08011c60 <controller_disable>:
  ctrl->enable = 1;
  return RM_OK;
}

int32_t controller_disable(struct controller *ctrl)
{
 8011c60:	b480      	push	{r7}
 8011c62:	b083      	sub	sp, #12
 8011c64:	af00      	add	r7, sp, #0
 8011c66:	6078      	str	r0, [r7, #4]
  if (ctrl == NULL)
 8011c68:	687b      	ldr	r3, [r7, #4]
 8011c6a:	2b00      	cmp	r3, #0
 8011c6c:	d101      	bne.n	8011c72 <controller_disable+0x12>
    return RM_INVAL;
 8011c6e:	2302      	movs	r3, #2
 8011c70:	e00c      	b.n	8011c8c <controller_disable+0x2c>
  ctrl->enable = 0;
 8011c72:	687b      	ldr	r3, [r7, #4]
 8011c74:	2200      	movs	r2, #0
 8011c76:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  ctrl->output = 0;
 8011c7a:	687b      	ldr	r3, [r7, #4]
 8011c7c:	f04f 0200 	mov.w	r2, #0
 8011c80:	63da      	str	r2, [r3, #60]	; 0x3c
  ctrl->input = 0;
 8011c82:	687b      	ldr	r3, [r7, #4]
 8011c84:	f04f 0200 	mov.w	r2, #0
 8011c88:	639a      	str	r2, [r3, #56]	; 0x38
  return RM_OK;
 8011c8a:	2300      	movs	r3, #0
}
 8011c8c:	4618      	mov	r0, r3
 8011c8e:	370c      	adds	r7, #12
 8011c90:	46bd      	mov	sp, r7
 8011c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c96:	4770      	bx	lr

08011c98 <pid_controller_register>:
int32_t pid_controller_register(struct controller *ctrl,
                                const char *name,
                                struct pid *param,
                                struct pid_feedback *feedback,
                                uint8_t enable)
{
 8011c98:	b580      	push	{r7, lr}
 8011c9a:	b086      	sub	sp, #24
 8011c9c:	af02      	add	r7, sp, #8
 8011c9e:	60f8      	str	r0, [r7, #12]
 8011ca0:	60b9      	str	r1, [r7, #8]
 8011ca2:	607a      	str	r2, [r7, #4]
 8011ca4:	603b      	str	r3, [r7, #0]
  if (ctrl == NULL)
 8011ca6:	68fb      	ldr	r3, [r7, #12]
 8011ca8:	2b00      	cmp	r3, #0
 8011caa:	d102      	bne.n	8011cb2 <pid_controller_register+0x1a>
    return -RM_INVAL;
 8011cac:	f06f 0301 	mvn.w	r3, #1
 8011cb0:	e00d      	b.n	8011cce <pid_controller_register+0x36>
  
  ctrl->control = pid_control;
 8011cb2:	68fb      	ldr	r3, [r7, #12]
 8011cb4:	4a08      	ldr	r2, [pc, #32]	; (8011cd8 <pid_controller_register+0x40>)
 8011cb6:	645a      	str	r2, [r3, #68]	; 0x44
  controller_register(ctrl, name, Controller_Class_PID, (void *)param, (void *)feedback, enable);
 8011cb8:	7e3b      	ldrb	r3, [r7, #24]
 8011cba:	9301      	str	r3, [sp, #4]
 8011cbc:	683b      	ldr	r3, [r7, #0]
 8011cbe:	9300      	str	r3, [sp, #0]
 8011cc0:	687b      	ldr	r3, [r7, #4]
 8011cc2:	2200      	movs	r2, #0
 8011cc4:	68b9      	ldr	r1, [r7, #8]
 8011cc6:	68f8      	ldr	r0, [r7, #12]
 8011cc8:	f7ff ff24 	bl	8011b14 <controller_register>

  return RM_OK;
 8011ccc:	2300      	movs	r3, #0
}              
 8011cce:	4618      	mov	r0, r3
 8011cd0:	3710      	adds	r7, #16
 8011cd2:	46bd      	mov	sp, r7
 8011cd4:	bd80      	pop	{r7, pc}
 8011cd6:	bf00      	nop
 8011cd8:	08011cdd 	.word	0x08011cdd

08011cdc <pid_control>:

int32_t pid_control(struct controller *ctrl, void *param, void *feedback, float input)
{
 8011cdc:	b580      	push	{r7, lr}
 8011cde:	b086      	sub	sp, #24
 8011ce0:	af00      	add	r7, sp, #0
 8011ce2:	60f8      	str	r0, [r7, #12]
 8011ce4:	60b9      	str	r1, [r7, #8]
 8011ce6:	607a      	str	r2, [r7, #4]
 8011ce8:	ed87 0a00 	vstr	s0, [r7]
  pid_t pid_param = (pid_t)param;
 8011cec:	68bb      	ldr	r3, [r7, #8]
 8011cee:	617b      	str	r3, [r7, #20]
  pid_feedback_t pid_feedback = (pid_feedback_t)feedback;
 8011cf0:	687b      	ldr	r3, [r7, #4]
 8011cf2:	613b      	str	r3, [r7, #16]
  
  pid_calculate(pid_param, pid_feedback->feedback, input);
 8011cf4:	693b      	ldr	r3, [r7, #16]
 8011cf6:	edd3 7a00 	vldr	s15, [r3]
 8011cfa:	edd7 0a00 	vldr	s1, [r7]
 8011cfe:	eeb0 0a67 	vmov.f32	s0, s15
 8011d02:	6978      	ldr	r0, [r7, #20]
 8011d04:	f7ff fb2b 	bl	801135e <pid_calculate>
  
  ctrl->output = pid_param->out;
 8011d08:	697b      	ldr	r3, [r7, #20]
 8011d0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011d0c:	68fb      	ldr	r3, [r7, #12]
 8011d0e:	63da      	str	r2, [r3, #60]	; 0x3c

  return RM_OK; 
 8011d10:	2300      	movs	r3, #0
}
 8011d12:	4618      	mov	r0, r3
 8011d14:	3718      	adds	r7, #24
 8011d16:	46bd      	mov	sp, r7
 8011d18:	bd80      	pop	{r7, pc}

08011d1a <detect_device_register>:

int32_t detect_device_register(detect_device_t detect_dev,
                               const char *name,
                               uint16_t flags,
                               uint8_t callback_mode)
{
 8011d1a:	b580      	push	{r7, lr}
 8011d1c:	b084      	sub	sp, #16
 8011d1e:	af00      	add	r7, sp, #0
 8011d20:	60f8      	str	r0, [r7, #12]
 8011d22:	60b9      	str	r1, [r7, #8]
 8011d24:	4611      	mov	r1, r2
 8011d26:	461a      	mov	r2, r3
 8011d28:	460b      	mov	r3, r1
 8011d2a:	80fb      	strh	r3, [r7, #6]
 8011d2c:	4613      	mov	r3, r2
 8011d2e:	717b      	strb	r3, [r7, #5]
  if (detect_dev == NULL)
 8011d30:	68fb      	ldr	r3, [r7, #12]
 8011d32:	2b00      	cmp	r3, #0
 8011d34:	d102      	bne.n	8011d3c <detect_device_register+0x22>
    return -RM_INVAL;
 8011d36:	f06f 0301 	mvn.w	r3, #1
 8011d3a:	e017      	b.n	8011d6c <detect_device_register+0x52>

  if (device_find(name) != NULL)
 8011d3c:	68b8      	ldr	r0, [r7, #8]
 8011d3e:	f000 f8bd 	bl	8011ebc <device_find>
 8011d42:	4603      	mov	r3, r0
 8011d44:	2b00      	cmp	r3, #0
 8011d46:	d002      	beq.n	8011d4e <detect_device_register+0x34>
    return -RM_EXISTED;
 8011d48:	f06f 0302 	mvn.w	r3, #2
 8011d4c:	e00e      	b.n	8011d6c <detect_device_register+0x52>

  ((device_t)detect_dev)->type = Device_Class_Detect;
 8011d4e:	68fb      	ldr	r3, [r7, #12]
 8011d50:	2202      	movs	r2, #2
 8011d52:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  detect_dev->callback_mode = callback_mode;
 8011d56:	68fb      	ldr	r3, [r7, #12]
 8011d58:	797a      	ldrb	r2, [r7, #5]
 8011d5a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  device_register(&(detect_dev->parent), name, flags);
 8011d5e:	68fb      	ldr	r3, [r7, #12]
 8011d60:	88fa      	ldrh	r2, [r7, #6]
 8011d62:	68b9      	ldr	r1, [r7, #8]
 8011d64:	4618      	mov	r0, r3
 8011d66:	f000 f87e 	bl	8011e66 <device_register>

  return RM_OK;
 8011d6a:	2300      	movs	r3, #0
}
 8011d6c:	4618      	mov	r0, r3
 8011d6e:	3710      	adds	r7, #16
 8011d70:	46bd      	mov	sp, r7
 8011d72:	bd80      	pop	{r7, pc}

08011d74 <detect_device_update>:

int32_t detect_device_update(detect_device_t detect_dev, uint32_t event)
{
 8011d74:	b580      	push	{r7, lr}
 8011d76:	b084      	sub	sp, #16
 8011d78:	af00      	add	r7, sp, #0
 8011d7a:	6078      	str	r0, [r7, #4]
 8011d7c:	6039      	str	r1, [r7, #0]
  if (detect_dev == NULL)
 8011d7e:	687b      	ldr	r3, [r7, #4]
 8011d80:	2b00      	cmp	r3, #0
 8011d82:	d102      	bne.n	8011d8a <detect_device_update+0x16>
    return -RM_INVAL;
 8011d84:	f06f 0301 	mvn.w	r3, #1
 8011d88:	e024      	b.n	8011dd4 <detect_device_update+0x60>

  uint32_t temp = 1;
 8011d8a:	2301      	movs	r3, #1
 8011d8c:	60bb      	str	r3, [r7, #8]

  event &= detect_dev->enable;
 8011d8e:	687b      	ldr	r3, [r7, #4]
 8011d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011d92:	683a      	ldr	r2, [r7, #0]
 8011d94:	4013      	ands	r3, r2
 8011d96:	603b      	str	r3, [r7, #0]

  for (int i = 0; i < 32; i++)
 8011d98:	2300      	movs	r3, #0
 8011d9a:	60fb      	str	r3, [r7, #12]
 8011d9c:	e016      	b.n	8011dcc <detect_device_update+0x58>
  {
    temp = 1 << i;
 8011d9e:	2201      	movs	r2, #1
 8011da0:	68fb      	ldr	r3, [r7, #12]
 8011da2:	fa02 f303 	lsl.w	r3, r2, r3
 8011da6:	60bb      	str	r3, [r7, #8]
    if ((event & temp) == temp)
 8011da8:	683a      	ldr	r2, [r7, #0]
 8011daa:	68bb      	ldr	r3, [r7, #8]
 8011dac:	4013      	ands	r3, r2
 8011dae:	68ba      	ldr	r2, [r7, #8]
 8011db0:	429a      	cmp	r2, r3
 8011db2:	d108      	bne.n	8011dc6 <detect_device_update+0x52>
    {
      detect_dev->last_time[i] = offline_get_ms();
 8011db4:	f7f3 fa62 	bl	800527c <HAL_GetTick>
 8011db8:	4601      	mov	r1, r0
 8011dba:	687a      	ldr	r2, [r7, #4]
 8011dbc:	68fb      	ldr	r3, [r7, #12]
 8011dbe:	3310      	adds	r3, #16
 8011dc0:	009b      	lsls	r3, r3, #2
 8011dc2:	4413      	add	r3, r2
 8011dc4:	6059      	str	r1, [r3, #4]
  for (int i = 0; i < 32; i++)
 8011dc6:	68fb      	ldr	r3, [r7, #12]
 8011dc8:	3301      	adds	r3, #1
 8011dca:	60fb      	str	r3, [r7, #12]
 8011dcc:	68fb      	ldr	r3, [r7, #12]
 8011dce:	2b1f      	cmp	r3, #31
 8011dd0:	dde5      	ble.n	8011d9e <detect_device_update+0x2a>
    }
  }

  return RM_OK;
 8011dd2:	2300      	movs	r3, #0
}
 8011dd4:	4618      	mov	r0, r3
 8011dd6:	3710      	adds	r7, #16
 8011dd8:	46bd      	mov	sp, r7
 8011dda:	bd80      	pop	{r7, pc}

08011ddc <detect_device_add_event>:
int32_t detect_device_add_event(detect_device_t detect_dev,
                                uint32_t event,
                                uint32_t timeout,
                                int32_t (*offline_callback)(void *argc),
                                void *argc)
{
 8011ddc:	b480      	push	{r7}
 8011dde:	b087      	sub	sp, #28
 8011de0:	af00      	add	r7, sp, #0
 8011de2:	60f8      	str	r0, [r7, #12]
 8011de4:	60b9      	str	r1, [r7, #8]
 8011de6:	607a      	str	r2, [r7, #4]
 8011de8:	603b      	str	r3, [r7, #0]
  if (detect_dev == NULL)
 8011dea:	68fb      	ldr	r3, [r7, #12]
 8011dec:	2b00      	cmp	r3, #0
 8011dee:	d102      	bne.n	8011df6 <detect_device_add_event+0x1a>
    return -RM_INVAL;
 8011df0:	f06f 0301 	mvn.w	r3, #1
 8011df4:	e031      	b.n	8011e5a <detect_device_add_event+0x7e>

  uint32_t temp = 1;
 8011df6:	2301      	movs	r3, #1
 8011df8:	613b      	str	r3, [r7, #16]
  detect_dev->enable |= event;
 8011dfa:	68fb      	ldr	r3, [r7, #12]
 8011dfc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8011dfe:	68bb      	ldr	r3, [r7, #8]
 8011e00:	431a      	orrs	r2, r3
 8011e02:	68fb      	ldr	r3, [r7, #12]
 8011e04:	641a      	str	r2, [r3, #64]	; 0x40

  for (int i = 0; i < 32; i++)
 8011e06:	2300      	movs	r3, #0
 8011e08:	617b      	str	r3, [r7, #20]
 8011e0a:	e022      	b.n	8011e52 <detect_device_add_event+0x76>
  {
    temp = 1 << i;
 8011e0c:	2201      	movs	r2, #1
 8011e0e:	697b      	ldr	r3, [r7, #20]
 8011e10:	fa02 f303 	lsl.w	r3, r2, r3
 8011e14:	613b      	str	r3, [r7, #16]
    if ((event & temp) == temp)
 8011e16:	68ba      	ldr	r2, [r7, #8]
 8011e18:	693b      	ldr	r3, [r7, #16]
 8011e1a:	4013      	ands	r3, r2
 8011e1c:	693a      	ldr	r2, [r7, #16]
 8011e1e:	429a      	cmp	r2, r3
 8011e20:	d114      	bne.n	8011e4c <detect_device_add_event+0x70>
    {
      detect_dev->timeout[i] = timeout;
 8011e22:	68fa      	ldr	r2, [r7, #12]
 8011e24:	697b      	ldr	r3, [r7, #20]
 8011e26:	3330      	adds	r3, #48	; 0x30
 8011e28:	009b      	lsls	r3, r3, #2
 8011e2a:	4413      	add	r3, r2
 8011e2c:	687a      	ldr	r2, [r7, #4]
 8011e2e:	605a      	str	r2, [r3, #4]
      detect_dev->argc[i] = argc;
 8011e30:	68fa      	ldr	r2, [r7, #12]
 8011e32:	697b      	ldr	r3, [r7, #20]
 8011e34:	3350      	adds	r3, #80	; 0x50
 8011e36:	009b      	lsls	r3, r3, #2
 8011e38:	4413      	add	r3, r2
 8011e3a:	6a3a      	ldr	r2, [r7, #32]
 8011e3c:	605a      	str	r2, [r3, #4]
      detect_dev->offline_callback[i] = offline_callback;
 8011e3e:	68fa      	ldr	r2, [r7, #12]
 8011e40:	697b      	ldr	r3, [r7, #20]
 8011e42:	3370      	adds	r3, #112	; 0x70
 8011e44:	009b      	lsls	r3, r3, #2
 8011e46:	4413      	add	r3, r2
 8011e48:	683a      	ldr	r2, [r7, #0]
 8011e4a:	605a      	str	r2, [r3, #4]
  for (int i = 0; i < 32; i++)
 8011e4c:	697b      	ldr	r3, [r7, #20]
 8011e4e:	3301      	adds	r3, #1
 8011e50:	617b      	str	r3, [r7, #20]
 8011e52:	697b      	ldr	r3, [r7, #20]
 8011e54:	2b1f      	cmp	r3, #31
 8011e56:	ddd9      	ble.n	8011e0c <detect_device_add_event+0x30>
    }
  }

  return RM_OK;
 8011e58:	2300      	movs	r3, #0
}
 8011e5a:	4618      	mov	r0, r3
 8011e5c:	371c      	adds	r7, #28
 8011e5e:	46bd      	mov	sp, r7
 8011e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e64:	4770      	bx	lr

08011e66 <device_register>:
#include "device.h"

int32_t device_register(struct device *dev,
                        const char *name,
                        uint16_t flags)
{
 8011e66:	b580      	push	{r7, lr}
 8011e68:	b084      	sub	sp, #16
 8011e6a:	af00      	add	r7, sp, #0
 8011e6c:	60f8      	str	r0, [r7, #12]
 8011e6e:	60b9      	str	r1, [r7, #8]
 8011e70:	4613      	mov	r3, r2
 8011e72:	80fb      	strh	r3, [r7, #6]
  if (dev == NULL)
 8011e74:	68fb      	ldr	r3, [r7, #12]
 8011e76:	2b00      	cmp	r3, #0
 8011e78:	d102      	bne.n	8011e80 <device_register+0x1a>
    return -RM_INVAL;
 8011e7a:	f06f 0301 	mvn.w	r3, #1
 8011e7e:	e019      	b.n	8011eb4 <device_register+0x4e>
  if (device_find(name) != NULL)
 8011e80:	68b8      	ldr	r0, [r7, #8]
 8011e82:	f000 f81b 	bl	8011ebc <device_find>
 8011e86:	4603      	mov	r3, r0
 8011e88:	2b00      	cmp	r3, #0
 8011e8a:	d002      	beq.n	8011e92 <device_register+0x2c>
    return -RM_EXISTED;
 8011e8c:	f06f 0302 	mvn.w	r3, #2
 8011e90:	e010      	b.n	8011eb4 <device_register+0x4e>

  object_init(&(dev->parent), Object_Class_Device, name);
 8011e92:	68fb      	ldr	r3, [r7, #12]
 8011e94:	68ba      	ldr	r2, [r7, #8]
 8011e96:	2100      	movs	r1, #0
 8011e98:	4618      	mov	r0, r3
 8011e9a:	f000 fe9f 	bl	8012bdc <object_init>

  dev->flag = flags;
 8011e9e:	68fb      	ldr	r3, [r7, #12]
 8011ea0:	88fa      	ldrh	r2, [r7, #6]
 8011ea2:	85da      	strh	r2, [r3, #46]	; 0x2e
  dev->ref_count = 0;
 8011ea4:	68fb      	ldr	r3, [r7, #12]
 8011ea6:	2200      	movs	r2, #0
 8011ea8:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  dev->open_flag = 0;
 8011eac:	68fb      	ldr	r3, [r7, #12]
 8011eae:	2200      	movs	r2, #0
 8011eb0:	861a      	strh	r2, [r3, #48]	; 0x30

  return RM_OK;
 8011eb2:	2300      	movs	r3, #0
}
 8011eb4:	4618      	mov	r0, r3
 8011eb6:	3710      	adds	r7, #16
 8011eb8:	46bd      	mov	sp, r7
 8011eba:	bd80      	pop	{r7, pc}

08011ebc <device_find>:

  return RM_OK;
}

device_t device_find(const char *name)
{
 8011ebc:	b580      	push	{r7, lr}
 8011ebe:	b084      	sub	sp, #16
 8011ec0:	af00      	add	r7, sp, #0
 8011ec2:	6078      	str	r0, [r7, #4]
  struct object *object;

  object = object_find(name, Object_Class_Device);
 8011ec4:	2100      	movs	r1, #0
 8011ec6:	6878      	ldr	r0, [r7, #4]
 8011ec8:	f000 fec4 	bl	8012c54 <object_find>
 8011ecc:	60f8      	str	r0, [r7, #12]

  return (device_t)object;
 8011ece:	68fb      	ldr	r3, [r7, #12]
}
 8011ed0:	4618      	mov	r0, r3
 8011ed2:	3710      	adds	r7, #16
 8011ed4:	46bd      	mov	sp, r7
 8011ed6:	bd80      	pop	{r7, pc}

08011ed8 <motor_device_register>:
static fn_can_send motor_can_send = NULL;

int32_t motor_device_register(motor_device_t motor_dev,
                              const char *name,
                              uint16_t flags)
{
 8011ed8:	b580      	push	{r7, lr}
 8011eda:	b084      	sub	sp, #16
 8011edc:	af00      	add	r7, sp, #0
 8011ede:	60f8      	str	r0, [r7, #12]
 8011ee0:	60b9      	str	r1, [r7, #8]
 8011ee2:	4613      	mov	r3, r2
 8011ee4:	80fb      	strh	r3, [r7, #6]
  if (motor_dev == NULL)
 8011ee6:	68fb      	ldr	r3, [r7, #12]
 8011ee8:	2b00      	cmp	r3, #0
 8011eea:	d102      	bne.n	8011ef2 <motor_device_register+0x1a>
    return -RM_INVAL;
 8011eec:	f06f 0301 	mvn.w	r3, #1
 8011ef0:	e035      	b.n	8011f5e <motor_device_register+0x86>

  if (device_find(name) != NULL)
 8011ef2:	68b8      	ldr	r0, [r7, #8]
 8011ef4:	f7ff ffe2 	bl	8011ebc <device_find>
 8011ef8:	4603      	mov	r3, r0
 8011efa:	2b00      	cmp	r3, #0
 8011efc:	d002      	beq.n	8011f04 <motor_device_register+0x2c>
    return -RM_EXISTED;
 8011efe:	f06f 0302 	mvn.w	r3, #2
 8011f02:	e02c      	b.n	8011f5e <motor_device_register+0x86>

  if (motor_device_find_by_canid(motor_dev->can_periph, motor_dev->can_id) != NULL)
 8011f04:	68fb      	ldr	r3, [r7, #12]
 8011f06:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8011f0a:	68fb      	ldr	r3, [r7, #12]
 8011f0c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8011f10:	4619      	mov	r1, r3
 8011f12:	4610      	mov	r0, r2
 8011f14:	f000 f864 	bl	8011fe0 <motor_device_find_by_canid>
 8011f18:	4603      	mov	r3, r0
 8011f1a:	2b00      	cmp	r3, #0
 8011f1c:	d002      	beq.n	8011f24 <motor_device_register+0x4c>
    return -RM_EXISTED;
 8011f1e:	f06f 0302 	mvn.w	r3, #2
 8011f22:	e01c      	b.n	8011f5e <motor_device_register+0x86>

  if ((motor_dev->can_id < 0x201) && (motor_dev->can_id > 0x208))
 8011f24:	68fb      	ldr	r3, [r7, #12]
 8011f26:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8011f2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011f2e:	d808      	bhi.n	8011f42 <motor_device_register+0x6a>
 8011f30:	68fb      	ldr	r3, [r7, #12]
 8011f32:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8011f36:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 8011f3a:	d902      	bls.n	8011f42 <motor_device_register+0x6a>
    return -RM_ERROR;
 8011f3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011f40:	e00d      	b.n	8011f5e <motor_device_register+0x86>

  motor_dev->parent.type = Device_Class_Motor;
 8011f42:	68fb      	ldr	r3, [r7, #12]
 8011f44:	2200      	movs	r2, #0
 8011f46:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  motor_dev->get_data = get_encoder_data;
 8011f4a:	68fb      	ldr	r3, [r7, #12]
 8011f4c:	4a06      	ldr	r2, [pc, #24]	; (8011f68 <motor_device_register+0x90>)
 8011f4e:	661a      	str	r2, [r3, #96]	; 0x60

  device_register( &(motor_dev->parent), name, flags);
 8011f50:	68fb      	ldr	r3, [r7, #12]
 8011f52:	88fa      	ldrh	r2, [r7, #6]
 8011f54:	68b9      	ldr	r1, [r7, #8]
 8011f56:	4618      	mov	r0, r3
 8011f58:	f7ff ff85 	bl	8011e66 <device_register>

  return RM_OK;
 8011f5c:	2300      	movs	r3, #0
}
 8011f5e:	4618      	mov	r0, r3
 8011f60:	3710      	adds	r7, #16
 8011f62:	46bd      	mov	sp, r7
 8011f64:	bd80      	pop	{r7, pc}
 8011f66:	bf00      	nop
 8011f68:	080122a1 	.word	0x080122a1

08011f6c <motor_device_can_send_register>:

void motor_device_can_send_register(fn_can_send fn)
{
 8011f6c:	b480      	push	{r7}
 8011f6e:	b083      	sub	sp, #12
 8011f70:	af00      	add	r7, sp, #0
 8011f72:	6078      	str	r0, [r7, #4]
  if (fn != NULL)
 8011f74:	687b      	ldr	r3, [r7, #4]
 8011f76:	2b00      	cmp	r3, #0
 8011f78:	d002      	beq.n	8011f80 <motor_device_can_send_register+0x14>
    motor_can_send = fn;
 8011f7a:	4a04      	ldr	r2, [pc, #16]	; (8011f8c <motor_device_can_send_register+0x20>)
 8011f7c:	687b      	ldr	r3, [r7, #4]
 8011f7e:	6013      	str	r3, [r2, #0]
}
 8011f80:	bf00      	nop
 8011f82:	370c      	adds	r7, #12
 8011f84:	46bd      	mov	sp, r7
 8011f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f8a:	4770      	bx	lr
 8011f8c:	20008410 	.word	0x20008410

08011f90 <motor_device_get_data>:
    return NULL;
  }
}

motor_data_t motor_device_get_data(motor_device_t motor_dev)
{
 8011f90:	b480      	push	{r7}
 8011f92:	b083      	sub	sp, #12
 8011f94:	af00      	add	r7, sp, #0
 8011f96:	6078      	str	r0, [r7, #4]
  if (motor_dev != NULL)
 8011f98:	687b      	ldr	r3, [r7, #4]
 8011f9a:	2b00      	cmp	r3, #0
 8011f9c:	d002      	beq.n	8011fa4 <motor_device_get_data+0x14>
  {
    return &(motor_dev->data);
 8011f9e:	687b      	ldr	r3, [r7, #4]
 8011fa0:	3338      	adds	r3, #56	; 0x38
 8011fa2:	e000      	b.n	8011fa6 <motor_device_get_data+0x16>
  }
  return NULL;
 8011fa4:	2300      	movs	r3, #0
}
 8011fa6:	4618      	mov	r0, r3
 8011fa8:	370c      	adds	r7, #12
 8011faa:	46bd      	mov	sp, r7
 8011fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fb0:	4770      	bx	lr

08011fb2 <motor_device_set_current>:

int32_t motor_device_set_current(motor_device_t motor_dev, int16_t current)
{
 8011fb2:	b480      	push	{r7}
 8011fb4:	b083      	sub	sp, #12
 8011fb6:	af00      	add	r7, sp, #0
 8011fb8:	6078      	str	r0, [r7, #4]
 8011fba:	460b      	mov	r3, r1
 8011fbc:	807b      	strh	r3, [r7, #2]

  if (motor_dev != NULL)
 8011fbe:	687b      	ldr	r3, [r7, #4]
 8011fc0:	2b00      	cmp	r3, #0
 8011fc2:	d005      	beq.n	8011fd0 <motor_device_set_current+0x1e>
  {
    motor_dev->current = current;
 8011fc4:	687b      	ldr	r3, [r7, #4]
 8011fc6:	887a      	ldrh	r2, [r7, #2]
 8011fc8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    return RM_OK;
 8011fcc:	2300      	movs	r3, #0
 8011fce:	e001      	b.n	8011fd4 <motor_device_set_current+0x22>
  }
  return -RM_ERROR;
 8011fd0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8011fd4:	4618      	mov	r0, r3
 8011fd6:	370c      	adds	r7, #12
 8011fd8:	46bd      	mov	sp, r7
 8011fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fde:	4770      	bx	lr

08011fe0 <motor_device_find_by_canid>:

motor_device_t motor_device_find_by_canid(enum device_can can, uint16_t can_id)
{
 8011fe0:	b590      	push	{r4, r7, lr}
 8011fe2:	b08b      	sub	sp, #44	; 0x2c
 8011fe4:	af00      	add	r7, sp, #0
 8011fe6:	4603      	mov	r3, r0
 8011fe8:	460a      	mov	r2, r1
 8011fea:	71fb      	strb	r3, [r7, #7]
 8011fec:	4613      	mov	r3, r2
 8011fee:	80bb      	strh	r3, [r7, #4]
  struct object *object;
  list_t *node = NULL;
 8011ff0:	2300      	movs	r3, #0
 8011ff2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8011ff4:	f3ef 8310 	mrs	r3, PRIMASK
 8011ff8:	617b      	str	r3, [r7, #20]
  return(result);
 8011ffa:	697b      	ldr	r3, [r7, #20]
  enum device_type type;

  var_cpu_sr();
  
  /* enter critical */
  enter_critical();
 8011ffc:	461c      	mov	r4, r3
  __ASM volatile ("cpsid i" : : : "memory");
 8011ffe:	b672      	cpsid	i
}
 8012000:	bf00      	nop

  /* try to find device object */
  information = object_get_information(Object_Class_Device);
 8012002:	2000      	movs	r0, #0
 8012004:	f000 fdc0 	bl	8012b88 <object_get_information>
 8012008:	6238      	str	r0, [r7, #32]

  for (node = information->object_list.next;
 801200a:	6a3b      	ldr	r3, [r7, #32]
 801200c:	685b      	ldr	r3, [r3, #4]
 801200e:	627b      	str	r3, [r7, #36]	; 0x24
 8012010:	e020      	b.n	8012054 <motor_device_find_by_canid+0x74>
       node != &(information->object_list);
       node = node->next)
  {
    object = list_entry(node, struct object, list);
 8012012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012014:	3b24      	subs	r3, #36	; 0x24
 8012016:	61fb      	str	r3, [r7, #28]

    type = (enum device_type)(((device_t)object)->type);
 8012018:	69fb      	ldr	r3, [r7, #28]
 801201a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801201e:	76fb      	strb	r3, [r7, #27]

    if (type != Device_Class_Motor)
 8012020:	7efb      	ldrb	r3, [r7, #27]
 8012022:	2b00      	cmp	r3, #0
 8012024:	d112      	bne.n	801204c <motor_device_find_by_canid+0x6c>
    {
      continue;
    }  
    else if ((((motor_device_t)object)->can_id == can_id) && (((motor_device_t)object)->can_periph == can))
 8012026:	69fb      	ldr	r3, [r7, #28]
 8012028:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 801202c:	88ba      	ldrh	r2, [r7, #4]
 801202e:	429a      	cmp	r2, r3
 8012030:	d10d      	bne.n	801204e <motor_device_find_by_canid+0x6e>
 8012032:	69fb      	ldr	r3, [r7, #28]
 8012034:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8012038:	79fa      	ldrb	r2, [r7, #7]
 801203a:	429a      	cmp	r2, r3
 801203c:	d107      	bne.n	801204e <motor_device_find_by_canid+0x6e>
 801203e:	613c      	str	r4, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012040:	693b      	ldr	r3, [r7, #16]
 8012042:	f383 8810 	msr	PRIMASK, r3
}
 8012046:	bf00      	nop
    {
      /* leave critical */
      exit_critical();
      return (motor_device_t)object;
 8012048:	69fb      	ldr	r3, [r7, #28]
 801204a:	e00e      	b.n	801206a <motor_device_find_by_canid+0x8a>
      continue;
 801204c:	bf00      	nop
       node = node->next)
 801204e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012050:	681b      	ldr	r3, [r3, #0]
 8012052:	627b      	str	r3, [r7, #36]	; 0x24
       node != &(information->object_list);
 8012054:	6a3b      	ldr	r3, [r7, #32]
 8012056:	3304      	adds	r3, #4
 8012058:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801205a:	429a      	cmp	r2, r3
 801205c:	d1d9      	bne.n	8012012 <motor_device_find_by_canid+0x32>
 801205e:	60fc      	str	r4, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012060:	68fb      	ldr	r3, [r7, #12]
 8012062:	f383 8810 	msr	PRIMASK, r3
}
 8012066:	bf00      	nop

  /* leave critical */
  exit_critical();

  /* not found */
  return NULL;
 8012068:	2300      	movs	r3, #0
}
 801206a:	4618      	mov	r0, r3
 801206c:	372c      	adds	r7, #44	; 0x2c
 801206e:	46bd      	mov	sp, r7
 8012070:	bd90      	pop	{r4, r7, pc}
	...

08012074 <motor_device_can_output>:

static uint8_t motor_send_flag[DEVICE_CAN_NUM][2];
static struct can_msg motor_msg[DEVICE_CAN_NUM][2];

int32_t motor_device_can_output(enum device_can m_can)
{
 8012074:	b590      	push	{r4, r7, lr}
 8012076:	b08d      	sub	sp, #52	; 0x34
 8012078:	af02      	add	r7, sp, #8
 801207a:	4603      	mov	r3, r0
 801207c:	71fb      	strb	r3, [r7, #7]
  struct object *object;
  list_t *node = NULL;
 801207e:	2300      	movs	r3, #0
 8012080:	627b      	str	r3, [r7, #36]	; 0x24
  struct object_information *information;
  motor_device_t motor_dev;

  memset(motor_msg, 0, sizeof(motor_msg));
 8012082:	2240      	movs	r2, #64	; 0x40
 8012084:	2100      	movs	r1, #0
 8012086:	4873      	ldr	r0, [pc, #460]	; (8012254 <motor_device_can_output+0x1e0>)
 8012088:	f001 ff01 	bl	8013e8e <memset>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801208c:	f3ef 8310 	mrs	r3, PRIMASK
 8012090:	613b      	str	r3, [r7, #16]
  return(result);
 8012092:	693b      	ldr	r3, [r7, #16]

  var_cpu_sr();
   
  /* enter critical */
  enter_critical();
 8012094:	461c      	mov	r4, r3
  __ASM volatile ("cpsid i" : : : "memory");
 8012096:	b672      	cpsid	i
}
 8012098:	bf00      	nop

  /* try to find device object */
  information = object_get_information(Object_Class_Device);
 801209a:	2000      	movs	r0, #0
 801209c:	f000 fd74 	bl	8012b88 <object_get_information>
 80120a0:	61f8      	str	r0, [r7, #28]

  for (node = information->object_list.next;
 80120a2:	69fb      	ldr	r3, [r7, #28]
 80120a4:	685b      	ldr	r3, [r3, #4]
 80120a6:	627b      	str	r3, [r7, #36]	; 0x24
 80120a8:	e098      	b.n	80121dc <motor_device_can_output+0x168>
       node != &(information->object_list);
       node = node->next)
  {
    object = list_entry(node, struct object, list);
 80120aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120ac:	3b24      	subs	r3, #36	; 0x24
 80120ae:	61bb      	str	r3, [r7, #24]
    motor_dev = (motor_device_t)object;
 80120b0:	69bb      	ldr	r3, [r7, #24]
 80120b2:	617b      	str	r3, [r7, #20]
    if(motor_dev->parent.type == Device_Class_Motor)
 80120b4:	697b      	ldr	r3, [r7, #20]
 80120b6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80120ba:	2b00      	cmp	r3, #0
 80120bc:	f040 808b 	bne.w	80121d6 <motor_device_can_output+0x162>
    {
      if (((motor_device_t)object)->can_id < 0x205)
 80120c0:	69bb      	ldr	r3, [r7, #24]
 80120c2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80120c6:	f5b3 7f01 	cmp.w	r3, #516	; 0x204
 80120ca:	d841      	bhi.n	8012150 <motor_device_can_output+0xdc>
      {
        motor_msg[motor_dev->can_periph][0].id = 0x200;
 80120cc:	697b      	ldr	r3, [r7, #20]
 80120ce:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80120d2:	4a60      	ldr	r2, [pc, #384]	; (8012254 <motor_device_can_output+0x1e0>)
 80120d4:	015b      	lsls	r3, r3, #5
 80120d6:	441a      	add	r2, r3
 80120d8:	6813      	ldr	r3, [r2, #0]
 80120da:	f44f 7100 	mov.w	r1, #512	; 0x200
 80120de:	f361 031c 	bfi	r3, r1, #0, #29
 80120e2:	6013      	str	r3, [r2, #0]
        motor_msg[motor_dev->can_periph][0].data[(motor_dev->can_id - 0x201) * 2] = motor_dev->current >> 8;
 80120e4:	697b      	ldr	r3, [r7, #20]
 80120e6:	f9b3 305e 	ldrsh.w	r3, [r3, #94]	; 0x5e
 80120ea:	121b      	asrs	r3, r3, #8
 80120ec:	b219      	sxth	r1, r3
 80120ee:	697b      	ldr	r3, [r7, #20]
 80120f0:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80120f4:	461a      	mov	r2, r3
 80120f6:	697b      	ldr	r3, [r7, #20]
 80120f8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80120fc:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 8012100:	005b      	lsls	r3, r3, #1
 8012102:	b2c8      	uxtb	r0, r1
 8012104:	4953      	ldr	r1, [pc, #332]	; (8012254 <motor_device_can_output+0x1e0>)
 8012106:	0152      	lsls	r2, r2, #5
 8012108:	440a      	add	r2, r1
 801210a:	4413      	add	r3, r2
 801210c:	3308      	adds	r3, #8
 801210e:	4602      	mov	r2, r0
 8012110:	701a      	strb	r2, [r3, #0]
        motor_msg[motor_dev->can_periph][0].data[(motor_dev->can_id - 0x201) * 2 + 1] = motor_dev->current;
 8012112:	697b      	ldr	r3, [r7, #20]
 8012114:	f9b3 105e 	ldrsh.w	r1, [r3, #94]	; 0x5e
 8012118:	697b      	ldr	r3, [r7, #20]
 801211a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 801211e:	461a      	mov	r2, r3
 8012120:	697b      	ldr	r3, [r7, #20]
 8012122:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8012126:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 801212a:	005b      	lsls	r3, r3, #1
 801212c:	3301      	adds	r3, #1
 801212e:	b2c8      	uxtb	r0, r1
 8012130:	4948      	ldr	r1, [pc, #288]	; (8012254 <motor_device_can_output+0x1e0>)
 8012132:	0152      	lsls	r2, r2, #5
 8012134:	440a      	add	r2, r1
 8012136:	4413      	add	r3, r2
 8012138:	3308      	adds	r3, #8
 801213a:	4602      	mov	r2, r0
 801213c:	701a      	strb	r2, [r3, #0]
        motor_send_flag[motor_dev->can_periph][0] = 1;
 801213e:	697b      	ldr	r3, [r7, #20]
 8012140:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8012144:	461a      	mov	r2, r3
 8012146:	4b44      	ldr	r3, [pc, #272]	; (8012258 <motor_device_can_output+0x1e4>)
 8012148:	2101      	movs	r1, #1
 801214a:	f803 1012 	strb.w	r1, [r3, r2, lsl #1]
 801214e:	e042      	b.n	80121d6 <motor_device_can_output+0x162>
      }
      else
      {
        motor_msg[motor_dev->can_periph][1].id = 0x1FF;
 8012150:	697b      	ldr	r3, [r7, #20]
 8012152:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8012156:	4a3f      	ldr	r2, [pc, #252]	; (8012254 <motor_device_can_output+0x1e0>)
 8012158:	015b      	lsls	r3, r3, #5
 801215a:	4413      	add	r3, r2
 801215c:	f103 0210 	add.w	r2, r3, #16
 8012160:	6813      	ldr	r3, [r2, #0]
 8012162:	f240 11ff 	movw	r1, #511	; 0x1ff
 8012166:	f361 031c 	bfi	r3, r1, #0, #29
 801216a:	6013      	str	r3, [r2, #0]
        motor_msg[motor_dev->can_periph][1].data[(motor_dev->can_id - 0x205) * 2] = motor_dev->current >> 8;
 801216c:	697b      	ldr	r3, [r7, #20]
 801216e:	f9b3 305e 	ldrsh.w	r3, [r3, #94]	; 0x5e
 8012172:	121b      	asrs	r3, r3, #8
 8012174:	b219      	sxth	r1, r3
 8012176:	697b      	ldr	r3, [r7, #20]
 8012178:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 801217c:	461a      	mov	r2, r3
 801217e:	697b      	ldr	r3, [r7, #20]
 8012180:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8012184:	f2a3 2305 	subw	r3, r3, #517	; 0x205
 8012188:	005b      	lsls	r3, r3, #1
 801218a:	b2c8      	uxtb	r0, r1
 801218c:	4931      	ldr	r1, [pc, #196]	; (8012254 <motor_device_can_output+0x1e0>)
 801218e:	0152      	lsls	r2, r2, #5
 8012190:	440a      	add	r2, r1
 8012192:	4413      	add	r3, r2
 8012194:	3318      	adds	r3, #24
 8012196:	4602      	mov	r2, r0
 8012198:	701a      	strb	r2, [r3, #0]
        motor_msg[motor_dev->can_periph][1].data[(motor_dev->can_id - 0x205) * 2 + 1] = motor_dev->current;
 801219a:	697b      	ldr	r3, [r7, #20]
 801219c:	f9b3 105e 	ldrsh.w	r1, [r3, #94]	; 0x5e
 80121a0:	697b      	ldr	r3, [r7, #20]
 80121a2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80121a6:	461a      	mov	r2, r3
 80121a8:	697b      	ldr	r3, [r7, #20]
 80121aa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80121ae:	f2a3 2305 	subw	r3, r3, #517	; 0x205
 80121b2:	005b      	lsls	r3, r3, #1
 80121b4:	3301      	adds	r3, #1
 80121b6:	b2c8      	uxtb	r0, r1
 80121b8:	4926      	ldr	r1, [pc, #152]	; (8012254 <motor_device_can_output+0x1e0>)
 80121ba:	0152      	lsls	r2, r2, #5
 80121bc:	440a      	add	r2, r1
 80121be:	4413      	add	r3, r2
 80121c0:	3318      	adds	r3, #24
 80121c2:	4602      	mov	r2, r0
 80121c4:	701a      	strb	r2, [r3, #0]
        motor_send_flag[motor_dev->can_periph][1] = 1;
 80121c6:	697b      	ldr	r3, [r7, #20]
 80121c8:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80121cc:	4a22      	ldr	r2, [pc, #136]	; (8012258 <motor_device_can_output+0x1e4>)
 80121ce:	005b      	lsls	r3, r3, #1
 80121d0:	4413      	add	r3, r2
 80121d2:	2201      	movs	r2, #1
 80121d4:	705a      	strb	r2, [r3, #1]
       node = node->next)
 80121d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121d8:	681b      	ldr	r3, [r3, #0]
 80121da:	627b      	str	r3, [r7, #36]	; 0x24
       node != &(information->object_list);
 80121dc:	69fb      	ldr	r3, [r7, #28]
 80121de:	3304      	adds	r3, #4
 80121e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80121e2:	429a      	cmp	r2, r3
 80121e4:	f47f af61 	bne.w	80120aa <motor_device_can_output+0x36>
 80121e8:	60fc      	str	r4, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80121ea:	68fb      	ldr	r3, [r7, #12]
 80121ec:	f383 8810 	msr	PRIMASK, r3
}
 80121f0:	bf00      	nop
  }

  /* leave critical */
  exit_critical();
  
  for (int j = 0; j < 2; j++)
 80121f2:	2300      	movs	r3, #0
 80121f4:	623b      	str	r3, [r7, #32]
 80121f6:	e025      	b.n	8012244 <motor_device_can_output+0x1d0>
  {
    if (motor_send_flag[m_can][j] == 1)
 80121f8:	79fb      	ldrb	r3, [r7, #7]
 80121fa:	4a17      	ldr	r2, [pc, #92]	; (8012258 <motor_device_can_output+0x1e4>)
 80121fc:	005b      	lsls	r3, r3, #1
 80121fe:	441a      	add	r2, r3
 8012200:	6a3b      	ldr	r3, [r7, #32]
 8012202:	4413      	add	r3, r2
 8012204:	781b      	ldrb	r3, [r3, #0]
 8012206:	2b01      	cmp	r3, #1
 8012208:	d119      	bne.n	801223e <motor_device_can_output+0x1ca>
    {
      if (motor_can_send != NULL)
 801220a:	4b14      	ldr	r3, [pc, #80]	; (801225c <motor_device_can_output+0x1e8>)
 801220c:	681b      	ldr	r3, [r3, #0]
 801220e:	2b00      	cmp	r3, #0
 8012210:	d00d      	beq.n	801222e <motor_device_can_output+0x1ba>
        motor_can_send(m_can, motor_msg[m_can][j]);
 8012212:	4b12      	ldr	r3, [pc, #72]	; (801225c <motor_device_can_output+0x1e8>)
 8012214:	681c      	ldr	r4, [r3, #0]
 8012216:	79fb      	ldrb	r3, [r7, #7]
 8012218:	490e      	ldr	r1, [pc, #56]	; (8012254 <motor_device_can_output+0x1e0>)
 801221a:	005a      	lsls	r2, r3, #1
 801221c:	6a3b      	ldr	r3, [r7, #32]
 801221e:	4413      	add	r3, r2
 8012220:	011b      	lsls	r3, r3, #4
 8012222:	440b      	add	r3, r1
 8012224:	79f8      	ldrb	r0, [r7, #7]
 8012226:	68da      	ldr	r2, [r3, #12]
 8012228:	9200      	str	r2, [sp, #0]
 801222a:	cb0e      	ldmia	r3, {r1, r2, r3}
 801222c:	47a0      	blx	r4
      motor_send_flag[m_can][j] = 0;
 801222e:	79fb      	ldrb	r3, [r7, #7]
 8012230:	4a09      	ldr	r2, [pc, #36]	; (8012258 <motor_device_can_output+0x1e4>)
 8012232:	005b      	lsls	r3, r3, #1
 8012234:	441a      	add	r2, r3
 8012236:	6a3b      	ldr	r3, [r7, #32]
 8012238:	4413      	add	r3, r2
 801223a:	2200      	movs	r2, #0
 801223c:	701a      	strb	r2, [r3, #0]
  for (int j = 0; j < 2; j++)
 801223e:	6a3b      	ldr	r3, [r7, #32]
 8012240:	3301      	adds	r3, #1
 8012242:	623b      	str	r3, [r7, #32]
 8012244:	6a3b      	ldr	r3, [r7, #32]
 8012246:	2b01      	cmp	r3, #1
 8012248:	ddd6      	ble.n	80121f8 <motor_device_can_output+0x184>
    }
  }

  /* not found */
  return RM_OK;
 801224a:	2300      	movs	r3, #0
}
 801224c:	4618      	mov	r0, r3
 801224e:	372c      	adds	r7, #44	; 0x2c
 8012250:	46bd      	mov	sp, r7
 8012252:	bd90      	pop	{r4, r7, pc}
 8012254:	20008418 	.word	0x20008418
 8012258:	20008414 	.word	0x20008414
 801225c:	20008410 	.word	0x20008410

08012260 <motor_device_data_update>:

int32_t motor_device_data_update(enum device_can can, uint16_t can_id, uint8_t can_rx_data[])
{
 8012260:	b580      	push	{r7, lr}
 8012262:	b084      	sub	sp, #16
 8012264:	af00      	add	r7, sp, #0
 8012266:	4603      	mov	r3, r0
 8012268:	603a      	str	r2, [r7, #0]
 801226a:	71fb      	strb	r3, [r7, #7]
 801226c:	460b      	mov	r3, r1
 801226e:	80bb      	strh	r3, [r7, #4]
  motor_device_t motor_dev;
  motor_dev = motor_device_find_by_canid(can, can_id);
 8012270:	88ba      	ldrh	r2, [r7, #4]
 8012272:	79fb      	ldrb	r3, [r7, #7]
 8012274:	4611      	mov	r1, r2
 8012276:	4618      	mov	r0, r3
 8012278:	f7ff feb2 	bl	8011fe0 <motor_device_find_by_canid>
 801227c:	60f8      	str	r0, [r7, #12]
  if (motor_dev != NULL)
 801227e:	68fb      	ldr	r3, [r7, #12]
 8012280:	2b00      	cmp	r3, #0
 8012282:	d006      	beq.n	8012292 <motor_device_data_update+0x32>
  {
    motor_dev->get_data(motor_dev, can_rx_data);
 8012284:	68fb      	ldr	r3, [r7, #12]
 8012286:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012288:	6839      	ldr	r1, [r7, #0]
 801228a:	68f8      	ldr	r0, [r7, #12]
 801228c:	4798      	blx	r3
    return RM_OK;
 801228e:	2300      	movs	r3, #0
 8012290:	e001      	b.n	8012296 <motor_device_data_update+0x36>
  }
  return -RM_UNREGISTERED;
 8012292:	f06f 0303 	mvn.w	r3, #3
}
 8012296:	4618      	mov	r0, r3
 8012298:	3710      	adds	r7, #16
 801229a:	46bd      	mov	sp, r7
 801229c:	bd80      	pop	{r7, pc}
	...

080122a0 <get_encoder_data>:

static void get_encoder_data(motor_device_t motor, uint8_t can_rx_data[])
{
 80122a0:	b580      	push	{r7, lr}
 80122a2:	b084      	sub	sp, #16
 80122a4:	af00      	add	r7, sp, #0
 80122a6:	6078      	str	r0, [r7, #4]
 80122a8:	6039      	str	r1, [r7, #0]
  motor_data_t ptr = &(motor->data);
 80122aa:	687b      	ldr	r3, [r7, #4]
 80122ac:	3338      	adds	r3, #56	; 0x38
 80122ae:	60fb      	str	r3, [r7, #12]
  ptr->msg_cnt++;
 80122b0:	68fb      	ldr	r3, [r7, #12]
 80122b2:	699b      	ldr	r3, [r3, #24]
 80122b4:	1c5a      	adds	r2, r3, #1
 80122b6:	68fb      	ldr	r3, [r7, #12]
 80122b8:	619a      	str	r2, [r3, #24]

  if (ptr->msg_cnt > 50)
 80122ba:	68fb      	ldr	r3, [r7, #12]
 80122bc:	699b      	ldr	r3, [r3, #24]
 80122be:	2b32      	cmp	r3, #50	; 0x32
 80122c0:	d903      	bls.n	80122ca <get_encoder_data+0x2a>
  {
    motor->init_offset_f = 0;
 80122c2:	687b      	ldr	r3, [r7, #4]
 80122c4:	2200      	movs	r2, #0
 80122c6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  }

  if (motor->init_offset_f == 1)
 80122ca:	687b      	ldr	r3, [r7, #4]
 80122cc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80122d0:	2b01      	cmp	r3, #1
 80122d2:	d104      	bne.n	80122de <get_encoder_data+0x3e>
  {
    get_motor_offset(ptr, can_rx_data);
 80122d4:	6839      	ldr	r1, [r7, #0]
 80122d6:	68f8      	ldr	r0, [r7, #12]
 80122d8:	f000 f886 	bl	80123e8 <get_motor_offset>
    return;
 80122dc:	e07f      	b.n	80123de <get_encoder_data+0x13e>
  }

  ptr->last_ecd = ptr->ecd;
 80122de:	68fb      	ldr	r3, [r7, #12]
 80122e0:	881a      	ldrh	r2, [r3, #0]
 80122e2:	68fb      	ldr	r3, [r7, #12]
 80122e4:	805a      	strh	r2, [r3, #2]
  ptr->ecd = (uint16_t)(can_rx_data[0] << 8 | can_rx_data[1]);
 80122e6:	683b      	ldr	r3, [r7, #0]
 80122e8:	781b      	ldrb	r3, [r3, #0]
 80122ea:	021b      	lsls	r3, r3, #8
 80122ec:	b21a      	sxth	r2, r3
 80122ee:	683b      	ldr	r3, [r7, #0]
 80122f0:	3301      	adds	r3, #1
 80122f2:	781b      	ldrb	r3, [r3, #0]
 80122f4:	b21b      	sxth	r3, r3
 80122f6:	4313      	orrs	r3, r2
 80122f8:	b21b      	sxth	r3, r3
 80122fa:	b29a      	uxth	r2, r3
 80122fc:	68fb      	ldr	r3, [r7, #12]
 80122fe:	801a      	strh	r2, [r3, #0]

  if (ptr->ecd - ptr->last_ecd > 4096)
 8012300:	68fb      	ldr	r3, [r7, #12]
 8012302:	881b      	ldrh	r3, [r3, #0]
 8012304:	461a      	mov	r2, r3
 8012306:	68fb      	ldr	r3, [r7, #12]
 8012308:	885b      	ldrh	r3, [r3, #2]
 801230a:	1ad3      	subs	r3, r2, r3
 801230c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012310:	dd0f      	ble.n	8012332 <get_encoder_data+0x92>
  {
    ptr->round_cnt--;
 8012312:	68fb      	ldr	r3, [r7, #12]
 8012314:	689b      	ldr	r3, [r3, #8]
 8012316:	1e5a      	subs	r2, r3, #1
 8012318:	68fb      	ldr	r3, [r7, #12]
 801231a:	609a      	str	r2, [r3, #8]
    ptr->ecd_raw_rate = ptr->ecd - ptr->last_ecd - 8192;
 801231c:	68fb      	ldr	r3, [r7, #12]
 801231e:	881b      	ldrh	r3, [r3, #0]
 8012320:	461a      	mov	r2, r3
 8012322:	68fb      	ldr	r3, [r7, #12]
 8012324:	885b      	ldrh	r3, [r3, #2]
 8012326:	1ad3      	subs	r3, r2, r3
 8012328:	f5a3 5200 	sub.w	r2, r3, #8192	; 0x2000
 801232c:	68fb      	ldr	r3, [r7, #12]
 801232e:	615a      	str	r2, [r3, #20]
 8012330:	e020      	b.n	8012374 <get_encoder_data+0xd4>
  }
  else if (ptr->ecd - ptr->last_ecd < -4096)
 8012332:	68fb      	ldr	r3, [r7, #12]
 8012334:	881b      	ldrh	r3, [r3, #0]
 8012336:	461a      	mov	r2, r3
 8012338:	68fb      	ldr	r3, [r7, #12]
 801233a:	885b      	ldrh	r3, [r3, #2]
 801233c:	1ad3      	subs	r3, r2, r3
 801233e:	f513 5f80 	cmn.w	r3, #4096	; 0x1000
 8012342:	da0f      	bge.n	8012364 <get_encoder_data+0xc4>
  {
    ptr->round_cnt++;
 8012344:	68fb      	ldr	r3, [r7, #12]
 8012346:	689b      	ldr	r3, [r3, #8]
 8012348:	1c5a      	adds	r2, r3, #1
 801234a:	68fb      	ldr	r3, [r7, #12]
 801234c:	609a      	str	r2, [r3, #8]
    ptr->ecd_raw_rate = ptr->ecd - ptr->last_ecd + 8192;
 801234e:	68fb      	ldr	r3, [r7, #12]
 8012350:	881b      	ldrh	r3, [r3, #0]
 8012352:	461a      	mov	r2, r3
 8012354:	68fb      	ldr	r3, [r7, #12]
 8012356:	885b      	ldrh	r3, [r3, #2]
 8012358:	1ad3      	subs	r3, r2, r3
 801235a:	f503 5200 	add.w	r2, r3, #8192	; 0x2000
 801235e:	68fb      	ldr	r3, [r7, #12]
 8012360:	615a      	str	r2, [r3, #20]
 8012362:	e007      	b.n	8012374 <get_encoder_data+0xd4>
  }
  else
  {
    ptr->ecd_raw_rate = ptr->ecd - ptr->last_ecd;
 8012364:	68fb      	ldr	r3, [r7, #12]
 8012366:	881b      	ldrh	r3, [r3, #0]
 8012368:	461a      	mov	r2, r3
 801236a:	68fb      	ldr	r3, [r7, #12]
 801236c:	885b      	ldrh	r3, [r3, #2]
 801236e:	1ad2      	subs	r2, r2, r3
 8012370:	68fb      	ldr	r3, [r7, #12]
 8012372:	615a      	str	r2, [r3, #20]
  }

  ptr->total_ecd = ptr->round_cnt * 8192 + ptr->ecd - ptr->offset_ecd;
 8012374:	68fb      	ldr	r3, [r7, #12]
 8012376:	689b      	ldr	r3, [r3, #8]
 8012378:	035b      	lsls	r3, r3, #13
 801237a:	68fa      	ldr	r2, [r7, #12]
 801237c:	8812      	ldrh	r2, [r2, #0]
 801237e:	4413      	add	r3, r2
 8012380:	68fa      	ldr	r2, [r7, #12]
 8012382:	8b92      	ldrh	r2, [r2, #28]
 8012384:	1a9a      	subs	r2, r3, r2
 8012386:	68fb      	ldr	r3, [r7, #12]
 8012388:	60da      	str	r2, [r3, #12]
  /* total angle, unit is degree */
  ptr->total_angle = ptr->total_ecd / ENCODER_ANGLE_RATIO;
 801238a:	68fb      	ldr	r3, [r7, #12]
 801238c:	68db      	ldr	r3, [r3, #12]
 801238e:	ee07 3a90 	vmov	s15, r3
 8012392:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8012396:	eddf 6a13 	vldr	s13, [pc, #76]	; 80123e4 <get_encoder_data+0x144>
 801239a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801239e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80123a2:	ee17 2a90 	vmov	r2, s15
 80123a6:	68fb      	ldr	r3, [r7, #12]
 80123a8:	611a      	str	r2, [r3, #16]

  ptr->speed_rpm = (int16_t)(can_rx_data[2] << 8 | can_rx_data[3]);
 80123aa:	683b      	ldr	r3, [r7, #0]
 80123ac:	3302      	adds	r3, #2
 80123ae:	781b      	ldrb	r3, [r3, #0]
 80123b0:	021b      	lsls	r3, r3, #8
 80123b2:	b21a      	sxth	r2, r3
 80123b4:	683b      	ldr	r3, [r7, #0]
 80123b6:	3303      	adds	r3, #3
 80123b8:	781b      	ldrb	r3, [r3, #0]
 80123ba:	b21b      	sxth	r3, r3
 80123bc:	4313      	orrs	r3, r2
 80123be:	b21a      	sxth	r2, r3
 80123c0:	68fb      	ldr	r3, [r7, #12]
 80123c2:	809a      	strh	r2, [r3, #4]
  ptr->given_current = (int16_t)(can_rx_data[4] << 8 | can_rx_data[5]);
 80123c4:	683b      	ldr	r3, [r7, #0]
 80123c6:	3304      	adds	r3, #4
 80123c8:	781b      	ldrb	r3, [r3, #0]
 80123ca:	021b      	lsls	r3, r3, #8
 80123cc:	b21a      	sxth	r2, r3
 80123ce:	683b      	ldr	r3, [r7, #0]
 80123d0:	3305      	adds	r3, #5
 80123d2:	781b      	ldrb	r3, [r3, #0]
 80123d4:	b21b      	sxth	r3, r3
 80123d6:	4313      	orrs	r3, r2
 80123d8:	b21a      	sxth	r2, r3
 80123da:	68fb      	ldr	r3, [r7, #12]
 80123dc:	80da      	strh	r2, [r3, #6]
}
 80123de:	3710      	adds	r7, #16
 80123e0:	46bd      	mov	sp, r7
 80123e2:	bd80      	pop	{r7, pc}
 80123e4:	41b60b61 	.word	0x41b60b61

080123e8 <get_motor_offset>:

static void get_motor_offset(motor_data_t ptr, uint8_t can_rx_data[])
{
 80123e8:	b480      	push	{r7}
 80123ea:	b083      	sub	sp, #12
 80123ec:	af00      	add	r7, sp, #0
 80123ee:	6078      	str	r0, [r7, #4]
 80123f0:	6039      	str	r1, [r7, #0]
  ptr->ecd = (uint16_t)(can_rx_data[0] << 8 | can_rx_data[1]);
 80123f2:	683b      	ldr	r3, [r7, #0]
 80123f4:	781b      	ldrb	r3, [r3, #0]
 80123f6:	021b      	lsls	r3, r3, #8
 80123f8:	b21a      	sxth	r2, r3
 80123fa:	683b      	ldr	r3, [r7, #0]
 80123fc:	3301      	adds	r3, #1
 80123fe:	781b      	ldrb	r3, [r3, #0]
 8012400:	b21b      	sxth	r3, r3
 8012402:	4313      	orrs	r3, r2
 8012404:	b21b      	sxth	r3, r3
 8012406:	b29a      	uxth	r2, r3
 8012408:	687b      	ldr	r3, [r7, #4]
 801240a:	801a      	strh	r2, [r3, #0]
  ptr->offset_ecd = ptr->ecd;
 801240c:	687b      	ldr	r3, [r7, #4]
 801240e:	881a      	ldrh	r2, [r3, #0]
 8012410:	687b      	ldr	r3, [r7, #4]
 8012412:	839a      	strh	r2, [r3, #28]
}
 8012414:	bf00      	nop
 8012416:	370c      	adds	r7, #12
 8012418:	46bd      	mov	sp, r7
 801241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801241e:	4770      	bx	lr

08012420 <chassis_pid_register>:
 * Initialises the chassis device with the given name and CAN bus.
 * Registers the four motors and their PID controllers.
 * Sets the parameters of the skid steer.
*/
int32_t chassis_pid_register(struct chassis *chassis, const char *name, enum device_can can)
{
 8012420:	b590      	push	{r4, r7, lr}
 8012422:	b0ad      	sub	sp, #180	; 0xb4
 8012424:	af02      	add	r7, sp, #8
 8012426:	60f8      	str	r0, [r7, #12]
 8012428:	60b9      	str	r1, [r7, #8]
 801242a:	4613      	mov	r3, r2
 801242c:	71fb      	strb	r3, [r7, #7]
  char motor_name[4][OBJECT_NAME_MAX_LEN] = {0};
 801242e:	f107 0314 	add.w	r3, r7, #20
 8012432:	2280      	movs	r2, #128	; 0x80
 8012434:	2100      	movs	r1, #0
 8012436:	4618      	mov	r0, r3
 8012438:	f001 fd29 	bl	8013e8e <memset>
  uint8_t name_len;

  int32_t err;

  if (chassis == NULL)
 801243c:	68fb      	ldr	r3, [r7, #12]
 801243e:	2b00      	cmp	r3, #0
 8012440:	d102      	bne.n	8012448 <chassis_pid_register+0x28>
    return -RM_INVAL;
 8012442:	f06f 0301 	mvn.w	r3, #1
 8012446:	e137      	b.n	80126b8 <chassis_pid_register+0x298>
  if (chassis_find(name) != NULL)
 8012448:	68b8      	ldr	r0, [r7, #8]
 801244a:	f000 fb05 	bl	8012a58 <chassis_find>
 801244e:	4603      	mov	r3, r0
 8012450:	2b00      	cmp	r3, #0
 8012452:	d002      	beq.n	801245a <chassis_pid_register+0x3a>
    return -RM_EXISTED;
 8012454:	f06f 0302 	mvn.w	r3, #2
 8012458:	e12e      	b.n	80126b8 <chassis_pid_register+0x298>

  object_init(&(chassis->parent), Object_Class_Chassis, name);
 801245a:	68fb      	ldr	r3, [r7, #12]
 801245c:	68ba      	ldr	r2, [r7, #8]
 801245e:	2103      	movs	r1, #3
 8012460:	4618      	mov	r0, r3
 8012462:	f000 fbbb 	bl	8012bdc <object_init>

  name_len = strlen(name);
 8012466:	68b8      	ldr	r0, [r7, #8]
 8012468:	f7ed fec2 	bl	80001f0 <strlen>
 801246c:	4603      	mov	r3, r0
 801246e:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7

  if (name_len > OBJECT_NAME_MAX_LEN / 2)
 8012472:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8012476:	2b10      	cmp	r3, #16
 8012478:	d902      	bls.n	8012480 <chassis_pid_register+0x60>
  {
    name_len = OBJECT_NAME_MAX_LEN / 2;
 801247a:	2310      	movs	r3, #16
 801247c:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
  }

  for (int i = 0; i < 4; i++)
 8012480:	2300      	movs	r3, #0
 8012482:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8012486:	e04b      	b.n	8012520 <chassis_pid_register+0x100>
  {
    memcpy(&motor_name[i], name, name_len);
 8012488:	f107 0214 	add.w	r2, r7, #20
 801248c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8012490:	015b      	lsls	r3, r3, #5
 8012492:	4413      	add	r3, r2
 8012494:	f897 20a7 	ldrb.w	r2, [r7, #167]	; 0xa7
 8012498:	68b9      	ldr	r1, [r7, #8]
 801249a:	4618      	mov	r0, r3
 801249c:	f001 fd7c 	bl	8013f98 <memcpy>
    chassis->motor[i].can_periph = can;
 80124a0:	68fa      	ldr	r2, [r7, #12]
 80124a2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80124a6:	2164      	movs	r1, #100	; 0x64
 80124a8:	fb01 f303 	mul.w	r3, r1, r3
 80124ac:	4413      	add	r3, r2
 80124ae:	33d4      	adds	r3, #212	; 0xd4
 80124b0:	79fa      	ldrb	r2, [r7, #7]
 80124b2:	701a      	strb	r2, [r3, #0]
    chassis->motor[i].can_id = 0x201 + i;
 80124b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80124b8:	b29b      	uxth	r3, r3
 80124ba:	f203 2301 	addw	r3, r3, #513	; 0x201
 80124be:	b298      	uxth	r0, r3
 80124c0:	68fa      	ldr	r2, [r7, #12]
 80124c2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80124c6:	2164      	movs	r1, #100	; 0x64
 80124c8:	fb01 f303 	mul.w	r3, r1, r3
 80124cc:	4413      	add	r3, r2
 80124ce:	33d6      	adds	r3, #214	; 0xd6
 80124d0:	4602      	mov	r2, r0
 80124d2:	801a      	strh	r2, [r3, #0]
    // chassis->motor[i].init_offset_f = 1;

    chassis->ctrl[i].convert_feedback = motor_pid_input_convert;
 80124d4:	68f9      	ldr	r1, [r7, #12]
 80124d6:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80124da:	4613      	mov	r3, r2
 80124dc:	00db      	lsls	r3, r3, #3
 80124de:	4413      	add	r3, r2
 80124e0:	00db      	lsls	r3, r3, #3
 80124e2:	440b      	add	r3, r1
 80124e4:	f503 7357 	add.w	r3, r3, #860	; 0x35c
 80124e8:	4a75      	ldr	r2, [pc, #468]	; (80126c0 <chassis_pid_register+0x2a0>)
 80124ea:	601a      	str	r2, [r3, #0]
    pid_struct_init(&chassis->motor_pid[i], 15000, 500, 6.5f, 0.1, 0);
 80124ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80124f0:	019b      	lsls	r3, r3, #6
 80124f2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80124f6:	68fa      	ldr	r2, [r7, #12]
 80124f8:	4413      	add	r3, r2
 80124fa:	3304      	adds	r3, #4
 80124fc:	ed9f 2a71 	vldr	s4, [pc, #452]	; 80126c4 <chassis_pid_register+0x2a4>
 8012500:	eddf 1a71 	vldr	s3, [pc, #452]	; 80126c8 <chassis_pid_register+0x2a8>
 8012504:	eeb1 1a0a 	vmov.f32	s2, #26	; 0x40d00000  6.5
 8012508:	eddf 0a70 	vldr	s1, [pc, #448]	; 80126cc <chassis_pid_register+0x2ac>
 801250c:	ed9f 0a70 	vldr	s0, [pc, #448]	; 80126d0 <chassis_pid_register+0x2b0>
 8012510:	4618      	mov	r0, r3
 8012512:	f7fe ffad 	bl	8011470 <pid_struct_init>
  for (int i = 0; i < 4; i++)
 8012516:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801251a:	3301      	adds	r3, #1
 801251c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8012520:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8012524:	2b03      	cmp	r3, #3
 8012526:	ddaf      	ble.n	8012488 <chassis_pid_register+0x68>
  }

  chassis->skid_steer.param.wheel_perimeter = PERIMETER;
 8012528:	68fb      	ldr	r3, [r7, #12]
 801252a:	4a6a      	ldr	r2, [pc, #424]	; (80126d4 <chassis_pid_register+0x2b4>)
 801252c:	62da      	str	r2, [r3, #44]	; 0x2c
  chassis->skid_steer.param.wheeltrack = WHEELTRACK;
 801252e:	68fb      	ldr	r3, [r7, #12]
 8012530:	4a69      	ldr	r2, [pc, #420]	; (80126d8 <chassis_pid_register+0x2b8>)
 8012532:	631a      	str	r2, [r3, #48]	; 0x30
  chassis->skid_steer.param.wheelbase = WHEELBASE;
 8012534:	68fb      	ldr	r3, [r7, #12]
 8012536:	4a69      	ldr	r2, [pc, #420]	; (80126dc <chassis_pid_register+0x2bc>)
 8012538:	635a      	str	r2, [r3, #52]	; 0x34
  // chassis->skid_steer.param.rotate_x_offset = ROTATE_X_OFFSET;
  // chassis->skid_steer.param.rotate_y_offset = ROTATE_Y_OFFSET;

  memcpy(&motor_name[0][name_len], "_FR\0", 4);
 801253a:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 801253e:	f107 0214 	add.w	r2, r7, #20
 8012542:	4413      	add	r3, r2
 8012544:	2204      	movs	r2, #4
 8012546:	4966      	ldr	r1, [pc, #408]	; (80126e0 <chassis_pid_register+0x2c0>)
 8012548:	4618      	mov	r0, r3
 801254a:	f001 fd25 	bl	8013f98 <memcpy>
  memcpy(&motor_name[1][name_len], "_FL\0", 4);
 801254e:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8012552:	f107 0214 	add.w	r2, r7, #20
 8012556:	3320      	adds	r3, #32
 8012558:	4413      	add	r3, r2
 801255a:	2204      	movs	r2, #4
 801255c:	4961      	ldr	r1, [pc, #388]	; (80126e4 <chassis_pid_register+0x2c4>)
 801255e:	4618      	mov	r0, r3
 8012560:	f001 fd1a 	bl	8013f98 <memcpy>
  memcpy(&motor_name[2][name_len], "_BL\0", 4);
 8012564:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8012568:	f107 0214 	add.w	r2, r7, #20
 801256c:	3340      	adds	r3, #64	; 0x40
 801256e:	4413      	add	r3, r2
 8012570:	2204      	movs	r2, #4
 8012572:	495d      	ldr	r1, [pc, #372]	; (80126e8 <chassis_pid_register+0x2c8>)
 8012574:	4618      	mov	r0, r3
 8012576:	f001 fd0f 	bl	8013f98 <memcpy>
  memcpy(&motor_name[3][name_len], "_BR\0", 4);
 801257a:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 801257e:	f107 0214 	add.w	r2, r7, #20
 8012582:	3360      	adds	r3, #96	; 0x60
 8012584:	4413      	add	r3, r2
 8012586:	2204      	movs	r2, #4
 8012588:	4958      	ldr	r1, [pc, #352]	; (80126ec <chassis_pid_register+0x2cc>)
 801258a:	4618      	mov	r0, r3
 801258c:	f001 fd04 	bl	8013f98 <memcpy>

  for (int i = 0; i < 4; i++)
 8012590:	2300      	movs	r3, #0
 8012592:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8012596:	e01d      	b.n	80125d4 <chassis_pid_register+0x1b4>
  {
    err = motor_device_register(&(chassis->motor[i]), motor_name[i], 0);
 8012598:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801259c:	2264      	movs	r2, #100	; 0x64
 801259e:	fb02 f303 	mul.w	r3, r2, r3
 80125a2:	3378      	adds	r3, #120	; 0x78
 80125a4:	68fa      	ldr	r2, [r7, #12]
 80125a6:	4413      	add	r3, r2
 80125a8:	1d18      	adds	r0, r3, #4
 80125aa:	f107 0214 	add.w	r2, r7, #20
 80125ae:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80125b2:	015b      	lsls	r3, r3, #5
 80125b4:	4413      	add	r3, r2
 80125b6:	2200      	movs	r2, #0
 80125b8:	4619      	mov	r1, r3
 80125ba:	f7ff fc8d 	bl	8011ed8 <motor_device_register>
 80125be:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
    if (err != RM_OK)
 80125c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80125c6:	2b00      	cmp	r3, #0
 80125c8:	d16d      	bne.n	80126a6 <chassis_pid_register+0x286>
  for (int i = 0; i < 4; i++)
 80125ca:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80125ce:	3301      	adds	r3, #1
 80125d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80125d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80125d8:	2b03      	cmp	r3, #3
 80125da:	dddd      	ble.n	8012598 <chassis_pid_register+0x178>
      goto end;
  }

  memcpy(&motor_name[0][name_len], "_CTLFR\0", 7);
 80125dc:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80125e0:	f107 0214 	add.w	r2, r7, #20
 80125e4:	4413      	add	r3, r2
 80125e6:	2207      	movs	r2, #7
 80125e8:	4941      	ldr	r1, [pc, #260]	; (80126f0 <chassis_pid_register+0x2d0>)
 80125ea:	4618      	mov	r0, r3
 80125ec:	f001 fcd4 	bl	8013f98 <memcpy>
  memcpy(&motor_name[1][name_len], "_CTLFL\0", 7);
 80125f0:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80125f4:	f107 0214 	add.w	r2, r7, #20
 80125f8:	3320      	adds	r3, #32
 80125fa:	4413      	add	r3, r2
 80125fc:	2207      	movs	r2, #7
 80125fe:	493d      	ldr	r1, [pc, #244]	; (80126f4 <chassis_pid_register+0x2d4>)
 8012600:	4618      	mov	r0, r3
 8012602:	f001 fcc9 	bl	8013f98 <memcpy>
  memcpy(&motor_name[2][name_len], "_CTLBL\0", 7);
 8012606:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 801260a:	f107 0214 	add.w	r2, r7, #20
 801260e:	3340      	adds	r3, #64	; 0x40
 8012610:	4413      	add	r3, r2
 8012612:	2207      	movs	r2, #7
 8012614:	4938      	ldr	r1, [pc, #224]	; (80126f8 <chassis_pid_register+0x2d8>)
 8012616:	4618      	mov	r0, r3
 8012618:	f001 fcbe 	bl	8013f98 <memcpy>
  memcpy(&motor_name[3][name_len], "_CTLBR\0", 7);
 801261c:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8012620:	f107 0214 	add.w	r2, r7, #20
 8012624:	3360      	adds	r3, #96	; 0x60
 8012626:	4413      	add	r3, r2
 8012628:	2207      	movs	r2, #7
 801262a:	4934      	ldr	r1, [pc, #208]	; (80126fc <chassis_pid_register+0x2dc>)
 801262c:	4618      	mov	r0, r3
 801262e:	f001 fcb3 	bl	8013f98 <memcpy>

  for (int i = 0; i < 4; i++)
 8012632:	2300      	movs	r3, #0
 8012634:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8012638:	e02f      	b.n	801269a <chassis_pid_register+0x27a>
  {
    err = pid_controller_register(&(chassis->ctrl[i]), motor_name[i], &(chassis->motor_pid[i]), &(chassis->motor_feedback[i]), 1);
 801263a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801263e:	4613      	mov	r3, r2
 8012640:	00db      	lsls	r3, r3, #3
 8012642:	4413      	add	r3, r2
 8012644:	00db      	lsls	r3, r3, #3
 8012646:	f503 7346 	add.w	r3, r3, #792	; 0x318
 801264a:	68fa      	ldr	r2, [r7, #12]
 801264c:	4413      	add	r3, r2
 801264e:	1d18      	adds	r0, r3, #4
 8012650:	f107 0214 	add.w	r2, r7, #20
 8012654:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8012658:	015b      	lsls	r3, r3, #5
 801265a:	18d1      	adds	r1, r2, r3
 801265c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8012660:	019b      	lsls	r3, r3, #6
 8012662:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8012666:	68fa      	ldr	r2, [r7, #12]
 8012668:	4413      	add	r3, r2
 801266a:	1d1c      	adds	r4, r3, #4
 801266c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8012670:	33c2      	adds	r3, #194	; 0xc2
 8012672:	009b      	lsls	r3, r3, #2
 8012674:	68fa      	ldr	r2, [r7, #12]
 8012676:	4413      	add	r3, r2
 8012678:	3304      	adds	r3, #4
 801267a:	2201      	movs	r2, #1
 801267c:	9200      	str	r2, [sp, #0]
 801267e:	4622      	mov	r2, r4
 8012680:	f7ff fb0a 	bl	8011c98 <pid_controller_register>
 8012684:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
    if (err != RM_OK)
 8012688:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801268c:	2b00      	cmp	r3, #0
 801268e:	d10c      	bne.n	80126aa <chassis_pid_register+0x28a>
  for (int i = 0; i < 4; i++)
 8012690:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8012694:	3301      	adds	r3, #1
 8012696:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801269a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801269e:	2b03      	cmp	r3, #3
 80126a0:	ddcb      	ble.n	801263a <chassis_pid_register+0x21a>
      goto end;
  }

  return RM_OK;
 80126a2:	2300      	movs	r3, #0
 80126a4:	e008      	b.n	80126b8 <chassis_pid_register+0x298>
      goto end;
 80126a6:	bf00      	nop
 80126a8:	e000      	b.n	80126ac <chassis_pid_register+0x28c>
      goto end;
 80126aa:	bf00      	nop
end:
  object_detach(&(chassis->parent));
 80126ac:	68fb      	ldr	r3, [r7, #12]
 80126ae:	4618      	mov	r0, r3
 80126b0:	f000 fb1c 	bl	8012cec <object_detach>

  return err;
 80126b4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
}
 80126b8:	4618      	mov	r0, r3
 80126ba:	37ac      	adds	r7, #172	; 0xac
 80126bc:	46bd      	mov	sp, r7
 80126be:	bd90      	pop	{r4, r7, pc}
 80126c0:	08012abf 	.word	0x08012abf
 80126c4:	00000000 	.word	0x00000000
 80126c8:	3dcccccd 	.word	0x3dcccccd
 80126cc:	43fa0000 	.word	0x43fa0000
 80126d0:	466a6000 	.word	0x466a6000
 80126d4:	43ef0000 	.word	0x43ef0000
 80126d8:	43c50000 	.word	0x43c50000
 80126dc:	43cf8000 	.word	0x43cf8000
 80126e0:	080155b8 	.word	0x080155b8
 80126e4:	080155c0 	.word	0x080155c0
 80126e8:	080155c8 	.word	0x080155c8
 80126ec:	080155d0 	.word	0x080155d0
 80126f0:	080155d8 	.word	0x080155d8
 80126f4:	080155e0 	.word	0x080155e0
 80126f8:	080155e8 	.word	0x080155e8
 80126fc:	080155f0 	.word	0x080155f0

08012700 <chassis_execute>:
 * Sets the speed of each wheel to the calculated value.
 * Sets the PID controller input to the speed of each wheel.
 * Sets the current of each motor to the output of the PID controller.
*/
int32_t chassis_execute(struct chassis *chassis)
{
 8012700:	b580      	push	{r7, lr}
 8012702:	b08e      	sub	sp, #56	; 0x38
 8012704:	af00      	add	r7, sp, #0
 8012706:	6078      	str	r0, [r7, #4]
  struct skid_steer_motor_fdb wheel_fdb[4];

  static uint8_t init_f = 0;
  static float last_time, period;
  
  if (chassis == NULL)
 8012708:	687b      	ldr	r3, [r7, #4]
 801270a:	2b00      	cmp	r3, #0
 801270c:	d102      	bne.n	8012714 <chassis_execute+0x14>
    return -RM_INVAL;
 801270e:	f06f 0301 	mvn.w	r3, #1
 8012712:	e0d3      	b.n	80128bc <chassis_execute+0x1bc>
  
	period  = get_time_ms_us() - last_time;
 8012714:	f7f0 fc94 	bl	8003040 <get_time_ms_us>
 8012718:	eeb0 7a40 	vmov.f32	s14, s0
 801271c:	4b69      	ldr	r3, [pc, #420]	; (80128c4 <chassis_execute+0x1c4>)
 801271e:	edd3 7a00 	vldr	s15, [r3]
 8012722:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012726:	4b68      	ldr	r3, [pc, #416]	; (80128c8 <chassis_execute+0x1c8>)
 8012728:	edc3 7a00 	vstr	s15, [r3]

  if(!init_f)
 801272c:	4b67      	ldr	r3, [pc, #412]	; (80128cc <chassis_execute+0x1cc>)
 801272e:	781b      	ldrb	r3, [r3, #0]
 8012730:	2b00      	cmp	r3, #0
 8012732:	d10e      	bne.n	8012752 <chassis_execute+0x52>
  {
    period = 0;
 8012734:	4b64      	ldr	r3, [pc, #400]	; (80128c8 <chassis_execute+0x1c8>)
 8012736:	f04f 0200 	mov.w	r2, #0
 801273a:	601a      	str	r2, [r3, #0]
		last_time = get_time_ms_us();
 801273c:	f7f0 fc80 	bl	8003040 <get_time_ms_us>
 8012740:	eef0 7a40 	vmov.f32	s15, s0
 8012744:	4b5f      	ldr	r3, [pc, #380]	; (80128c4 <chassis_execute+0x1c4>)
 8012746:	edc3 7a00 	vstr	s15, [r3]
    init_f = 1;
 801274a:	4b60      	ldr	r3, [pc, #384]	; (80128cc <chassis_execute+0x1cc>)
 801274c:	2201      	movs	r2, #1
 801274e:	701a      	strb	r2, [r3, #0]
 8012750:	e02e      	b.n	80127b0 <chassis_execute+0xb0>
  }
  else
  {
    last_time = get_time_ms_us();
 8012752:	f7f0 fc75 	bl	8003040 <get_time_ms_us>
 8012756:	eef0 7a40 	vmov.f32	s15, s0
 801275a:	4b5a      	ldr	r3, [pc, #360]	; (80128c4 <chassis_execute+0x1c4>)
 801275c:	edc3 7a00 	vstr	s15, [r3]

    chassis->skid_steer.speed.vx += chassis->acc.ax/1000.0f*period;
 8012760:	687b      	ldr	r3, [r7, #4]
 8012762:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8012766:	687b      	ldr	r3, [r7, #4]
 8012768:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 801276c:	ed9f 6a58 	vldr	s12, [pc, #352]	; 80128d0 <chassis_execute+0x1d0>
 8012770:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8012774:	4b54      	ldr	r3, [pc, #336]	; (80128c8 <chassis_execute+0x1c8>)
 8012776:	edd3 7a00 	vldr	s15, [r3]
 801277a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801277e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012782:	687b      	ldr	r3, [r7, #4]
 8012784:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
    chassis->skid_steer.speed.vw += chassis->acc.wz/1000.0f*period;
 8012788:	687b      	ldr	r3, [r7, #4]
 801278a:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 801278e:	687b      	ldr	r3, [r7, #4]
 8012790:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 8012794:	ed9f 6a4e 	vldr	s12, [pc, #312]	; 80128d0 <chassis_execute+0x1d0>
 8012798:	eec7 6a86 	vdiv.f32	s13, s15, s12
 801279c:	4b4a      	ldr	r3, [pc, #296]	; (80128c8 <chassis_execute+0x1c8>)
 801279e:	edd3 7a00 	vldr	s15, [r3]
 80127a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80127a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80127aa:	687b      	ldr	r3, [r7, #4]
 80127ac:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
  }
  
  skid_steer_calculate(&(chassis->skid_steer));
 80127b0:	687b      	ldr	r3, [r7, #4]
 80127b2:	332c      	adds	r3, #44	; 0x2c
 80127b4:	4618      	mov	r0, r3
 80127b6:	f7fe fe8f 	bl	80114d8 <skid_steer_calculate>

  for (int i = 0; i < 4; i++)
 80127ba:	2300      	movs	r3, #0
 80127bc:	637b      	str	r3, [r7, #52]	; 0x34
 80127be:	e071      	b.n	80128a4 <chassis_execute+0x1a4>
  {
    pdata = motor_device_get_data(&(chassis->motor[i]));
 80127c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80127c2:	2264      	movs	r2, #100	; 0x64
 80127c4:	fb02 f303 	mul.w	r3, r2, r3
 80127c8:	3378      	adds	r3, #120	; 0x78
 80127ca:	687a      	ldr	r2, [r7, #4]
 80127cc:	4413      	add	r3, r2
 80127ce:	3304      	adds	r3, #4
 80127d0:	4618      	mov	r0, r3
 80127d2:	f7ff fbdd 	bl	8011f90 <motor_device_get_data>
 80127d6:	6338      	str	r0, [r7, #48]	; 0x30

    wheel_fdb[i].total_ecd = pdata->total_ecd;
 80127d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127da:	68db      	ldr	r3, [r3, #12]
 80127dc:	ee07 3a90 	vmov	s15, r3
 80127e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80127e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80127e6:	00db      	lsls	r3, r3, #3
 80127e8:	3338      	adds	r3, #56	; 0x38
 80127ea:	443b      	add	r3, r7
 80127ec:	3b2c      	subs	r3, #44	; 0x2c
 80127ee:	edc3 7a00 	vstr	s15, [r3]
    wheel_fdb[i].speed_rpm = pdata->speed_rpm;
 80127f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127f4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80127f8:	ee07 3a90 	vmov	s15, r3
 80127fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012800:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012802:	00db      	lsls	r3, r3, #3
 8012804:	3338      	adds	r3, #56	; 0x38
 8012806:	443b      	add	r3, r7
 8012808:	3b28      	subs	r3, #40	; 0x28
 801280a:	edc3 7a00 	vstr	s15, [r3]

    controller_set_input(&chassis->ctrl[i], chassis->skid_steer.wheel_rpm[i]);
 801280e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012810:	4613      	mov	r3, r2
 8012812:	00db      	lsls	r3, r3, #3
 8012814:	4413      	add	r3, r2
 8012816:	00db      	lsls	r3, r3, #3
 8012818:	f503 7346 	add.w	r3, r3, #792	; 0x318
 801281c:	687a      	ldr	r2, [r7, #4]
 801281e:	4413      	add	r3, r2
 8012820:	1d19      	adds	r1, r3, #4
 8012822:	687a      	ldr	r2, [r7, #4]
 8012824:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012826:	3316      	adds	r3, #22
 8012828:	009b      	lsls	r3, r3, #2
 801282a:	4413      	add	r3, r2
 801282c:	3308      	adds	r3, #8
 801282e:	edd3 7a00 	vldr	s15, [r3]
 8012832:	eeb0 0a67 	vmov.f32	s0, s15
 8012836:	4608      	mov	r0, r1
 8012838:	f7ff f9e3 	bl	8011c02 <controller_set_input>
    controller_execute(&chassis->ctrl[i], (void *)pdata);
 801283c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801283e:	4613      	mov	r3, r2
 8012840:	00db      	lsls	r3, r3, #3
 8012842:	4413      	add	r3, r2
 8012844:	00db      	lsls	r3, r3, #3
 8012846:	f503 7346 	add.w	r3, r3, #792	; 0x318
 801284a:	687a      	ldr	r2, [r7, #4]
 801284c:	4413      	add	r3, r2
 801284e:	3304      	adds	r3, #4
 8012850:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8012852:	4618      	mov	r0, r3
 8012854:	f7ff f99c 	bl	8011b90 <controller_execute>
    controller_get_output(&chassis->ctrl[i], &motor_out);
 8012858:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801285a:	4613      	mov	r3, r2
 801285c:	00db      	lsls	r3, r3, #3
 801285e:	4413      	add	r3, r2
 8012860:	00db      	lsls	r3, r3, #3
 8012862:	f503 7346 	add.w	r3, r3, #792	; 0x318
 8012866:	687a      	ldr	r2, [r7, #4]
 8012868:	4413      	add	r3, r2
 801286a:	3304      	adds	r3, #4
 801286c:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8012870:	4611      	mov	r1, r2
 8012872:	4618      	mov	r0, r3
 8012874:	f7ff f9da 	bl	8011c2c <controller_get_output>

    motor_device_set_current(&chassis->motor[i], (int16_t)motor_out);
 8012878:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801287a:	2264      	movs	r2, #100	; 0x64
 801287c:	fb02 f303 	mul.w	r3, r2, r3
 8012880:	3378      	adds	r3, #120	; 0x78
 8012882:	687a      	ldr	r2, [r7, #4]
 8012884:	4413      	add	r3, r2
 8012886:	3304      	adds	r3, #4
 8012888:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 801288c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012890:	ee17 2a90 	vmov	r2, s15
 8012894:	b212      	sxth	r2, r2
 8012896:	4611      	mov	r1, r2
 8012898:	4618      	mov	r0, r3
 801289a:	f7ff fb8a 	bl	8011fb2 <motor_device_set_current>
  for (int i = 0; i < 4; i++)
 801289e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80128a0:	3301      	adds	r3, #1
 80128a2:	637b      	str	r3, [r7, #52]	; 0x34
 80128a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80128a6:	2b03      	cmp	r3, #3
 80128a8:	dd8a      	ble.n	80127c0 <chassis_execute+0xc0>
  }

  skid_steer_position_measure(&(chassis->skid_steer), wheel_fdb);
 80128aa:	687b      	ldr	r3, [r7, #4]
 80128ac:	332c      	adds	r3, #44	; 0x2c
 80128ae:	f107 020c 	add.w	r2, r7, #12
 80128b2:	4611      	mov	r1, r2
 80128b4:	4618      	mov	r0, r3
 80128b6:	f7fe ff2b 	bl	8011710 <skid_steer_position_measure>

  return RM_OK;
 80128ba:	2300      	movs	r3, #0
}
 80128bc:	4618      	mov	r0, r3
 80128be:	3738      	adds	r7, #56	; 0x38
 80128c0:	46bd      	mov	sp, r7
 80128c2:	bd80      	pop	{r7, pc}
 80128c4:	20008458 	.word	0x20008458
 80128c8:	2000845c 	.word	0x2000845c
 80128cc:	20008460 	.word	0x20008460
 80128d0:	447a0000 	.word	0x447a0000

080128d4 <chassis_get_info>:

//   return RM_OK;
// }

int32_t chassis_get_info(struct chassis *chassis, struct chassis_info *info)
{
 80128d4:	b580      	push	{r7, lr}
 80128d6:	b084      	sub	sp, #16
 80128d8:	af00      	add	r7, sp, #0
 80128da:	6078      	str	r0, [r7, #4]
 80128dc:	6039      	str	r1, [r7, #0]
  if (chassis == NULL)
 80128de:	687b      	ldr	r3, [r7, #4]
 80128e0:	2b00      	cmp	r3, #0
 80128e2:	d101      	bne.n	80128e8 <chassis_get_info+0x14>
    return NULL;
 80128e4:	2300      	movs	r3, #0
 80128e6:	e0ab      	b.n	8012a40 <chassis_get_info+0x16c>

  memcpy(info, &(chassis->skid_steer.position), sizeof(struct skid_steer_position));
 80128e8:	687b      	ldr	r3, [r7, #4]
 80128ea:	3340      	adds	r3, #64	; 0x40
 80128ec:	2218      	movs	r2, #24
 80128ee:	4619      	mov	r1, r3
 80128f0:	6838      	ldr	r0, [r7, #0]
 80128f2:	f001 fb51 	bl	8013f98 <memcpy>
  ANGLE_LIMIT_360(info->angle_deg, chassis->skid_steer.position.angle_deg);
 80128f6:	687b      	ldr	r3, [r7, #4]
 80128f8:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 80128fc:	687b      	ldr	r3, [r7, #4]
 80128fe:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8012902:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012906:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801290a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801290e:	683b      	ldr	r3, [r7, #0]
 8012910:	edc3 7a05 	vstr	s15, [r3, #20]
 8012914:	683b      	ldr	r3, [r7, #0]
 8012916:	ed93 7a05 	vldr	s14, [r3, #20]
 801291a:	687b      	ldr	r3, [r7, #4]
 801291c:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8012920:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012924:	ee17 3a90 	vmov	r3, s15
 8012928:	4a47      	ldr	r2, [pc, #284]	; (8012a48 <chassis_get_info+0x174>)
 801292a:	fb82 1203 	smull	r1, r2, r2, r3
 801292e:	441a      	add	r2, r3
 8012930:	1211      	asrs	r1, r2, #8
 8012932:	17da      	asrs	r2, r3, #31
 8012934:	1a8a      	subs	r2, r1, r2
 8012936:	f44f 71b4 	mov.w	r1, #360	; 0x168
 801293a:	fb01 f202 	mul.w	r2, r1, r2
 801293e:	1a9a      	subs	r2, r3, r2
 8012940:	ee07 2a90 	vmov	s15, r2
 8012944:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012948:	ee77 7a27 	vadd.f32	s15, s14, s15
 801294c:	683b      	ldr	r3, [r7, #0]
 801294e:	edc3 7a05 	vstr	s15, [r3, #20]
  ANGLE_LIMIT_360_TO_180(info->angle_deg);
 8012952:	683b      	ldr	r3, [r7, #0]
 8012954:	edd3 7a05 	vldr	s15, [r3, #20]
 8012958:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8012a4c <chassis_get_info+0x178>
 801295c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8012960:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012964:	dd09      	ble.n	801297a <chassis_get_info+0xa6>
 8012966:	683b      	ldr	r3, [r7, #0]
 8012968:	edd3 7a05 	vldr	s15, [r3, #20]
 801296c:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8012a50 <chassis_get_info+0x17c>
 8012970:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012974:	683b      	ldr	r3, [r7, #0]
 8012976:	edc3 7a05 	vstr	s15, [r3, #20]
  ANGLE_LIMIT_360(info->yaw_gyro_angle, chassis->skid_steer.gyro.yaw_gyro_angle);
 801297a:	687b      	ldr	r3, [r7, #4]
 801297c:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 8012980:	687b      	ldr	r3, [r7, #4]
 8012982:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8012986:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801298a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801298e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012992:	683b      	ldr	r3, [r7, #0]
 8012994:	edc3 7a06 	vstr	s15, [r3, #24]
 8012998:	683b      	ldr	r3, [r7, #0]
 801299a:	ed93 7a06 	vldr	s14, [r3, #24]
 801299e:	687b      	ldr	r3, [r7, #4]
 80129a0:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80129a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80129a8:	ee17 3a90 	vmov	r3, s15
 80129ac:	4a26      	ldr	r2, [pc, #152]	; (8012a48 <chassis_get_info+0x174>)
 80129ae:	fb82 1203 	smull	r1, r2, r2, r3
 80129b2:	441a      	add	r2, r3
 80129b4:	1211      	asrs	r1, r2, #8
 80129b6:	17da      	asrs	r2, r3, #31
 80129b8:	1a8a      	subs	r2, r1, r2
 80129ba:	f44f 71b4 	mov.w	r1, #360	; 0x168
 80129be:	fb01 f202 	mul.w	r2, r1, r2
 80129c2:	1a9a      	subs	r2, r3, r2
 80129c4:	ee07 2a90 	vmov	s15, r2
 80129c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80129cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80129d0:	683b      	ldr	r3, [r7, #0]
 80129d2:	edc3 7a06 	vstr	s15, [r3, #24]
  ANGLE_LIMIT_360_TO_180(info->yaw_gyro_angle);
 80129d6:	683b      	ldr	r3, [r7, #0]
 80129d8:	edd3 7a06 	vldr	s15, [r3, #24]
 80129dc:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8012a4c <chassis_get_info+0x178>
 80129e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80129e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129e8:	dd09      	ble.n	80129fe <chassis_get_info+0x12a>
 80129ea:	683b      	ldr	r3, [r7, #0]
 80129ec:	edd3 7a06 	vldr	s15, [r3, #24]
 80129f0:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8012a50 <chassis_get_info+0x17c>
 80129f4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80129f8:	683b      	ldr	r3, [r7, #0]
 80129fa:	edc3 7a06 	vstr	s15, [r3, #24]
  info->yaw_gyro_rate = chassis->skid_steer.gyro.yaw_gyro_rate;
 80129fe:	687b      	ldr	r3, [r7, #4]
 8012a00:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8012a02:	683b      	ldr	r3, [r7, #0]
 8012a04:	61da      	str	r2, [r3, #28]

  for (int i = 0; i < 4; i++)
 8012a06:	2300      	movs	r3, #0
 8012a08:	60fb      	str	r3, [r7, #12]
 8012a0a:	e015      	b.n	8012a38 <chassis_get_info+0x164>
  {
    info->wheel_rpm[i] = chassis->skid_steer.wheel_rpm[i] * MOTOR_DECELE_RATIO;
 8012a0c:	687a      	ldr	r2, [r7, #4]
 8012a0e:	68fb      	ldr	r3, [r7, #12]
 8012a10:	3316      	adds	r3, #22
 8012a12:	009b      	lsls	r3, r3, #2
 8012a14:	4413      	add	r3, r2
 8012a16:	3308      	adds	r3, #8
 8012a18:	edd3 7a00 	vldr	s15, [r3]
 8012a1c:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8012a54 <chassis_get_info+0x180>
 8012a20:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012a24:	683a      	ldr	r2, [r7, #0]
 8012a26:	68fb      	ldr	r3, [r7, #12]
 8012a28:	3308      	adds	r3, #8
 8012a2a:	009b      	lsls	r3, r3, #2
 8012a2c:	4413      	add	r3, r2
 8012a2e:	edc3 7a00 	vstr	s15, [r3]
  for (int i = 0; i < 4; i++)
 8012a32:	68fb      	ldr	r3, [r7, #12]
 8012a34:	3301      	adds	r3, #1
 8012a36:	60fb      	str	r3, [r7, #12]
 8012a38:	68fb      	ldr	r3, [r7, #12]
 8012a3a:	2b03      	cmp	r3, #3
 8012a3c:	dde6      	ble.n	8012a0c <chassis_get_info+0x138>
  }

  return RM_OK;
 8012a3e:	2300      	movs	r3, #0
}
 8012a40:	4618      	mov	r0, r3
 8012a42:	3710      	adds	r7, #16
 8012a44:	46bd      	mov	sp, r7
 8012a46:	bd80      	pop	{r7, pc}
 8012a48:	b60b60b7 	.word	0xb60b60b7
 8012a4c:	43340000 	.word	0x43340000
 8012a50:	43b40000 	.word	0x43b40000
 8012a54:	3d554c35 	.word	0x3d554c35

08012a58 <chassis_find>:

chassis_t chassis_find(const char *name)
{
 8012a58:	b580      	push	{r7, lr}
 8012a5a:	b084      	sub	sp, #16
 8012a5c:	af00      	add	r7, sp, #0
 8012a5e:	6078      	str	r0, [r7, #4]
  struct object *object;

  object = object_find(name, Object_Class_Chassis);
 8012a60:	2103      	movs	r1, #3
 8012a62:	6878      	ldr	r0, [r7, #4]
 8012a64:	f000 f8f6 	bl	8012c54 <object_find>
 8012a68:	60f8      	str	r0, [r7, #12]

  return (chassis_t)object;
 8012a6a:	68fb      	ldr	r3, [r7, #12]
}
 8012a6c:	4618      	mov	r0, r3
 8012a6e:	3710      	adds	r7, #16
 8012a70:	46bd      	mov	sp, r7
 8012a72:	bd80      	pop	{r7, pc}

08012a74 <chassis_disable>:

  return RM_OK;
}

int32_t chassis_disable(struct chassis *chassis)
{
 8012a74:	b580      	push	{r7, lr}
 8012a76:	b084      	sub	sp, #16
 8012a78:	af00      	add	r7, sp, #0
 8012a7a:	6078      	str	r0, [r7, #4]
  if (chassis == NULL)
 8012a7c:	687b      	ldr	r3, [r7, #4]
 8012a7e:	2b00      	cmp	r3, #0
 8012a80:	d102      	bne.n	8012a88 <chassis_disable+0x14>
    return -RM_INVAL;
 8012a82:	f06f 0301 	mvn.w	r3, #1
 8012a86:	e016      	b.n	8012ab6 <chassis_disable+0x42>

  for (int i = 0; i < 4; i++)
 8012a88:	2300      	movs	r3, #0
 8012a8a:	60fb      	str	r3, [r7, #12]
 8012a8c:	e00f      	b.n	8012aae <chassis_disable+0x3a>
  {
    controller_disable(&(chassis->ctrl[i])); 
 8012a8e:	68fa      	ldr	r2, [r7, #12]
 8012a90:	4613      	mov	r3, r2
 8012a92:	00db      	lsls	r3, r3, #3
 8012a94:	4413      	add	r3, r2
 8012a96:	00db      	lsls	r3, r3, #3
 8012a98:	f503 7346 	add.w	r3, r3, #792	; 0x318
 8012a9c:	687a      	ldr	r2, [r7, #4]
 8012a9e:	4413      	add	r3, r2
 8012aa0:	3304      	adds	r3, #4
 8012aa2:	4618      	mov	r0, r3
 8012aa4:	f7ff f8dc 	bl	8011c60 <controller_disable>
  for (int i = 0; i < 4; i++)
 8012aa8:	68fb      	ldr	r3, [r7, #12]
 8012aaa:	3301      	adds	r3, #1
 8012aac:	60fb      	str	r3, [r7, #12]
 8012aae:	68fb      	ldr	r3, [r7, #12]
 8012ab0:	2b03      	cmp	r3, #3
 8012ab2:	ddec      	ble.n	8012a8e <chassis_disable+0x1a>
  }

  return RM_OK;
 8012ab4:	2300      	movs	r3, #0
}
 8012ab6:	4618      	mov	r0, r3
 8012ab8:	3710      	adds	r7, #16
 8012aba:	46bd      	mov	sp, r7
 8012abc:	bd80      	pop	{r7, pc}

08012abe <motor_pid_input_convert>:

static int32_t motor_pid_input_convert(struct controller *ctrl, void *input)
{
 8012abe:	b480      	push	{r7}
 8012ac0:	b085      	sub	sp, #20
 8012ac2:	af00      	add	r7, sp, #0
 8012ac4:	6078      	str	r0, [r7, #4]
 8012ac6:	6039      	str	r1, [r7, #0]
  pid_feedback_t pid_fdb = (pid_feedback_t)(ctrl->feedback);
 8012ac8:	687b      	ldr	r3, [r7, #4]
 8012aca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012acc:	60fb      	str	r3, [r7, #12]
  motor_data_t data = (motor_data_t)input;
 8012ace:	683b      	ldr	r3, [r7, #0]
 8012ad0:	60bb      	str	r3, [r7, #8]
  pid_fdb->feedback = data->speed_rpm;
 8012ad2:	68bb      	ldr	r3, [r7, #8]
 8012ad4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8012ad8:	ee07 3a90 	vmov	s15, r3
 8012adc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012ae0:	68fb      	ldr	r3, [r7, #12]
 8012ae2:	edc3 7a00 	vstr	s15, [r3]

  return RM_OK;
 8012ae6:	2300      	movs	r3, #0
}
 8012ae8:	4618      	mov	r0, r3
 8012aea:	3714      	adds	r7, #20
 8012aec:	46bd      	mov	sp, r7
 8012aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012af2:	4770      	bx	lr

08012af4 <__list_add>:
{
 8012af4:	b480      	push	{r7}
 8012af6:	b085      	sub	sp, #20
 8012af8:	af00      	add	r7, sp, #0
 8012afa:	60f8      	str	r0, [r7, #12]
 8012afc:	60b9      	str	r1, [r7, #8]
 8012afe:	607a      	str	r2, [r7, #4]
  next->prev = new;
 8012b00:	687b      	ldr	r3, [r7, #4]
 8012b02:	68fa      	ldr	r2, [r7, #12]
 8012b04:	605a      	str	r2, [r3, #4]
  new->next = next;
 8012b06:	68fb      	ldr	r3, [r7, #12]
 8012b08:	687a      	ldr	r2, [r7, #4]
 8012b0a:	601a      	str	r2, [r3, #0]
  new->prev = prev;
 8012b0c:	68fb      	ldr	r3, [r7, #12]
 8012b0e:	68ba      	ldr	r2, [r7, #8]
 8012b10:	605a      	str	r2, [r3, #4]
  prev->next = new;
 8012b12:	68bb      	ldr	r3, [r7, #8]
 8012b14:	68fa      	ldr	r2, [r7, #12]
 8012b16:	601a      	str	r2, [r3, #0]
}
 8012b18:	bf00      	nop
 8012b1a:	3714      	adds	r7, #20
 8012b1c:	46bd      	mov	sp, r7
 8012b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b22:	4770      	bx	lr

08012b24 <list_add>:
{
 8012b24:	b580      	push	{r7, lr}
 8012b26:	b082      	sub	sp, #8
 8012b28:	af00      	add	r7, sp, #0
 8012b2a:	6078      	str	r0, [r7, #4]
 8012b2c:	6039      	str	r1, [r7, #0]
  __list_add(new, head, head->next);
 8012b2e:	683b      	ldr	r3, [r7, #0]
 8012b30:	681b      	ldr	r3, [r3, #0]
 8012b32:	461a      	mov	r2, r3
 8012b34:	6839      	ldr	r1, [r7, #0]
 8012b36:	6878      	ldr	r0, [r7, #4]
 8012b38:	f7ff ffdc 	bl	8012af4 <__list_add>
}
 8012b3c:	bf00      	nop
 8012b3e:	3708      	adds	r7, #8
 8012b40:	46bd      	mov	sp, r7
 8012b42:	bd80      	pop	{r7, pc}

08012b44 <__list_del>:
{
 8012b44:	b480      	push	{r7}
 8012b46:	b083      	sub	sp, #12
 8012b48:	af00      	add	r7, sp, #0
 8012b4a:	6078      	str	r0, [r7, #4]
 8012b4c:	6039      	str	r1, [r7, #0]
  next->prev = prev;
 8012b4e:	683b      	ldr	r3, [r7, #0]
 8012b50:	687a      	ldr	r2, [r7, #4]
 8012b52:	605a      	str	r2, [r3, #4]
  prev->next = next;
 8012b54:	687b      	ldr	r3, [r7, #4]
 8012b56:	683a      	ldr	r2, [r7, #0]
 8012b58:	601a      	str	r2, [r3, #0]
}
 8012b5a:	bf00      	nop
 8012b5c:	370c      	adds	r7, #12
 8012b5e:	46bd      	mov	sp, r7
 8012b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b64:	4770      	bx	lr

08012b66 <list_del>:
{
 8012b66:	b580      	push	{r7, lr}
 8012b68:	b082      	sub	sp, #8
 8012b6a:	af00      	add	r7, sp, #0
 8012b6c:	6078      	str	r0, [r7, #4]
  __list_del(entry->prev, entry->next);
 8012b6e:	687b      	ldr	r3, [r7, #4]
 8012b70:	685a      	ldr	r2, [r3, #4]
 8012b72:	687b      	ldr	r3, [r7, #4]
 8012b74:	681b      	ldr	r3, [r3, #0]
 8012b76:	4619      	mov	r1, r3
 8012b78:	4610      	mov	r0, r2
 8012b7a:	f7ff ffe3 	bl	8012b44 <__list_del>
}
 8012b7e:	bf00      	nop
 8012b80:	3708      	adds	r7, #8
 8012b82:	46bd      	mov	sp, r7
 8012b84:	bd80      	pop	{r7, pc}
	...

08012b88 <object_get_information>:
        {Object_Class_Shoot, _OBJ_CONTAINER_LIST_INIT(Object_Info_Shoot)},
};

struct object_information *
object_get_information(enum object_class_type type)
{
 8012b88:	b480      	push	{r7}
 8012b8a:	b085      	sub	sp, #20
 8012b8c:	af00      	add	r7, sp, #0
 8012b8e:	4603      	mov	r3, r0
 8012b90:	71fb      	strb	r3, [r7, #7]
  int index;

  for (index = 0; index < Object_Info_Unknown; index++)
 8012b92:	2300      	movs	r3, #0
 8012b94:	60fb      	str	r3, [r7, #12]
 8012b96:	e015      	b.n	8012bc4 <object_get_information+0x3c>
    if (object_container[index].type == type)
 8012b98:	490f      	ldr	r1, [pc, #60]	; (8012bd8 <object_get_information+0x50>)
 8012b9a:	68fa      	ldr	r2, [r7, #12]
 8012b9c:	4613      	mov	r3, r2
 8012b9e:	005b      	lsls	r3, r3, #1
 8012ba0:	4413      	add	r3, r2
 8012ba2:	009b      	lsls	r3, r3, #2
 8012ba4:	440b      	add	r3, r1
 8012ba6:	781b      	ldrb	r3, [r3, #0]
 8012ba8:	79fa      	ldrb	r2, [r7, #7]
 8012baa:	429a      	cmp	r2, r3
 8012bac:	d107      	bne.n	8012bbe <object_get_information+0x36>
      return &object_container[index];
 8012bae:	68fa      	ldr	r2, [r7, #12]
 8012bb0:	4613      	mov	r3, r2
 8012bb2:	005b      	lsls	r3, r3, #1
 8012bb4:	4413      	add	r3, r2
 8012bb6:	009b      	lsls	r3, r3, #2
 8012bb8:	4a07      	ldr	r2, [pc, #28]	; (8012bd8 <object_get_information+0x50>)
 8012bba:	4413      	add	r3, r2
 8012bbc:	e006      	b.n	8012bcc <object_get_information+0x44>
  for (index = 0; index < Object_Info_Unknown; index++)
 8012bbe:	68fb      	ldr	r3, [r7, #12]
 8012bc0:	3301      	adds	r3, #1
 8012bc2:	60fb      	str	r3, [r7, #12]
 8012bc4:	68fb      	ldr	r3, [r7, #12]
 8012bc6:	2b05      	cmp	r3, #5
 8012bc8:	dde6      	ble.n	8012b98 <object_get_information+0x10>

  return NULL;
 8012bca:	2300      	movs	r3, #0
}
 8012bcc:	4618      	mov	r0, r3
 8012bce:	3714      	adds	r7, #20
 8012bd0:	46bd      	mov	sp, r7
 8012bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bd6:	4770      	bx	lr
 8012bd8:	20000104 	.word	0x20000104

08012bdc <object_init>:

int32_t object_init(struct object *object,
                    enum object_class_type type,
                    const char *name)
{
 8012bdc:	b590      	push	{r4, r7, lr}
 8012bde:	b089      	sub	sp, #36	; 0x24
 8012be0:	af00      	add	r7, sp, #0
 8012be2:	60f8      	str	r0, [r7, #12]
 8012be4:	460b      	mov	r3, r1
 8012be6:	607a      	str	r2, [r7, #4]
 8012be8:	72fb      	strb	r3, [r7, #11]
  struct object_information *information;

  var_cpu_sr();

  /* get object information */
  information = object_get_information(type);
 8012bea:	7afb      	ldrb	r3, [r7, #11]
 8012bec:	4618      	mov	r0, r3
 8012bee:	f7ff ffcb 	bl	8012b88 <object_get_information>
 8012bf2:	61f8      	str	r0, [r7, #28]
  assert_param_obj(information != NULL);

  /* initialize object's parameters */
  object->type = type;
 8012bf4:	68fb      	ldr	r3, [r7, #12]
 8012bf6:	7afa      	ldrb	r2, [r7, #11]
 8012bf8:	f883 2020 	strb.w	r2, [r3, #32]

  /* copy name */
  if (strlen(name) > OBJECT_NAME_MAX_LEN - 1)
 8012bfc:	6878      	ldr	r0, [r7, #4]
 8012bfe:	f7ed faf7 	bl	80001f0 <strlen>
 8012c02:	4603      	mov	r3, r0
 8012c04:	2b1f      	cmp	r3, #31
 8012c06:	d902      	bls.n	8012c0e <object_init+0x32>
  {
    return -1;
 8012c08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012c0c:	e01e      	b.n	8012c4c <object_init+0x70>
  }

  strncpy(object->name, name, OBJECT_NAME_MAX_LEN);
 8012c0e:	68fb      	ldr	r3, [r7, #12]
 8012c10:	2220      	movs	r2, #32
 8012c12:	6879      	ldr	r1, [r7, #4]
 8012c14:	4618      	mov	r0, r3
 8012c16:	f001 f927 	bl	8013e68 <strncpy>
  object->name[OBJECT_NAME_MAX_LEN - 1] = '\0';
 8012c1a:	68fb      	ldr	r3, [r7, #12]
 8012c1c:	2200      	movs	r2, #0
 8012c1e:	77da      	strb	r2, [r3, #31]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8012c20:	f3ef 8310 	mrs	r3, PRIMASK
 8012c24:	617b      	str	r3, [r7, #20]
  return(result);
 8012c26:	697b      	ldr	r3, [r7, #20]

  /* lock interrupt */
  enter_critical();
 8012c28:	461c      	mov	r4, r3
  __ASM volatile ("cpsid i" : : : "memory");
 8012c2a:	b672      	cpsid	i
}
 8012c2c:	bf00      	nop

  {
    /* insert object into information object list */
    list_add(&(object->list), &(information->object_list));
 8012c2e:	68fb      	ldr	r3, [r7, #12]
 8012c30:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8012c34:	69fb      	ldr	r3, [r7, #28]
 8012c36:	3304      	adds	r3, #4
 8012c38:	4619      	mov	r1, r3
 8012c3a:	4610      	mov	r0, r2
 8012c3c:	f7ff ff72 	bl	8012b24 <list_add>
 8012c40:	61bc      	str	r4, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012c42:	69bb      	ldr	r3, [r7, #24]
 8012c44:	f383 8810 	msr	PRIMASK, r3
}
 8012c48:	bf00      	nop
  }

  /* unlock interrupt */
  exit_critical();
  return 0;
 8012c4a:	2300      	movs	r3, #0
}
 8012c4c:	4618      	mov	r0, r3
 8012c4e:	3724      	adds	r7, #36	; 0x24
 8012c50:	46bd      	mov	sp, r7
 8012c52:	bd90      	pop	{r4, r7, pc}

08012c54 <object_find>:

object_t object_find(const char *name, enum object_class_type type)
{
 8012c54:	b590      	push	{r4, r7, lr}
 8012c56:	b089      	sub	sp, #36	; 0x24
 8012c58:	af00      	add	r7, sp, #0
 8012c5a:	6078      	str	r0, [r7, #4]
 8012c5c:	460b      	mov	r3, r1
 8012c5e:	70fb      	strb	r3, [r7, #3]
  struct object *object = NULL;
 8012c60:	2300      	movs	r3, #0
 8012c62:	617b      	str	r3, [r7, #20]
  struct object_information *information = NULL;
 8012c64:	2300      	movs	r3, #0
 8012c66:	61fb      	str	r3, [r7, #28]
  list_t *node = NULL;
 8012c68:	2300      	movs	r3, #0
 8012c6a:	61bb      	str	r3, [r7, #24]

  var_cpu_sr();

  /* parameter check */
  if ((name == NULL) || (type >= Object_Class_Unknown))
 8012c6c:	687b      	ldr	r3, [r7, #4]
 8012c6e:	2b00      	cmp	r3, #0
 8012c70:	d002      	beq.n	8012c78 <object_find+0x24>
 8012c72:	78fb      	ldrb	r3, [r7, #3]
 8012c74:	2b05      	cmp	r3, #5
 8012c76:	d901      	bls.n	8012c7c <object_find+0x28>
    return NULL;
 8012c78:	2300      	movs	r3, #0
 8012c7a:	e033      	b.n	8012ce4 <object_find+0x90>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8012c7c:	f3ef 8310 	mrs	r3, PRIMASK
 8012c80:	613b      	str	r3, [r7, #16]
  return(result);
 8012c82:	693b      	ldr	r3, [r7, #16]

  /* enter critical */
  enter_critical();
 8012c84:	461c      	mov	r4, r3
  __ASM volatile ("cpsid i" : : : "memory");
 8012c86:	b672      	cpsid	i
}
 8012c88:	bf00      	nop

  /* try to find object */
  if (information == NULL)
 8012c8a:	69fb      	ldr	r3, [r7, #28]
 8012c8c:	2b00      	cmp	r3, #0
 8012c8e:	d104      	bne.n	8012c9a <object_find+0x46>
  {
    information = object_get_information(type);
 8012c90:	78fb      	ldrb	r3, [r7, #3]
 8012c92:	4618      	mov	r0, r3
 8012c94:	f7ff ff78 	bl	8012b88 <object_get_information>
 8012c98:	61f8      	str	r0, [r7, #28]
    assert_param_obj(information != NULL);
  }
  for (node = information->object_list.next;
 8012c9a:	69fb      	ldr	r3, [r7, #28]
 8012c9c:	685b      	ldr	r3, [r3, #4]
 8012c9e:	61bb      	str	r3, [r7, #24]
 8012ca0:	e015      	b.n	8012cce <object_find+0x7a>
       node != &(information->object_list);
       node = node->next)
  {
    object = list_entry(node, struct object, list);
 8012ca2:	69bb      	ldr	r3, [r7, #24]
 8012ca4:	3b24      	subs	r3, #36	; 0x24
 8012ca6:	617b      	str	r3, [r7, #20]
    if (strncmp(object->name, name, OBJECT_NAME_MAX_LEN) == 0)
 8012ca8:	697b      	ldr	r3, [r7, #20]
 8012caa:	2220      	movs	r2, #32
 8012cac:	6879      	ldr	r1, [r7, #4]
 8012cae:	4618      	mov	r0, r3
 8012cb0:	f001 f8c8 	bl	8013e44 <strncmp>
 8012cb4:	4603      	mov	r3, r0
 8012cb6:	2b00      	cmp	r3, #0
 8012cb8:	d106      	bne.n	8012cc8 <object_find+0x74>
 8012cba:	60fc      	str	r4, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012cbc:	68fb      	ldr	r3, [r7, #12]
 8012cbe:	f383 8810 	msr	PRIMASK, r3
}
 8012cc2:	bf00      	nop
    {
      /* leave critical */
      exit_critical();

      return object;
 8012cc4:	697b      	ldr	r3, [r7, #20]
 8012cc6:	e00d      	b.n	8012ce4 <object_find+0x90>
       node = node->next)
 8012cc8:	69bb      	ldr	r3, [r7, #24]
 8012cca:	681b      	ldr	r3, [r3, #0]
 8012ccc:	61bb      	str	r3, [r7, #24]
       node != &(information->object_list);
 8012cce:	69fb      	ldr	r3, [r7, #28]
 8012cd0:	3304      	adds	r3, #4
 8012cd2:	69ba      	ldr	r2, [r7, #24]
 8012cd4:	429a      	cmp	r2, r3
 8012cd6:	d1e4      	bne.n	8012ca2 <object_find+0x4e>
 8012cd8:	60bc      	str	r4, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012cda:	68bb      	ldr	r3, [r7, #8]
 8012cdc:	f383 8810 	msr	PRIMASK, r3
}
 8012ce0:	bf00      	nop
  }

  /* leave critical */
  exit_critical();

  return NULL;
 8012ce2:	2300      	movs	r3, #0
}
 8012ce4:	4618      	mov	r0, r3
 8012ce6:	3724      	adds	r7, #36	; 0x24
 8012ce8:	46bd      	mov	sp, r7
 8012cea:	bd90      	pop	{r4, r7, pc}

08012cec <object_detach>:

void object_detach(object_t object)
{
 8012cec:	b590      	push	{r4, r7, lr}
 8012cee:	b085      	sub	sp, #20
 8012cf0:	af00      	add	r7, sp, #0
 8012cf2:	6078      	str	r0, [r7, #4]

  /* object check */
  assert_param_obj(object != NULL);

  /* reset object type */
  object->type = Object_Class_Unknown;
 8012cf4:	687b      	ldr	r3, [r7, #4]
 8012cf6:	2206      	movs	r2, #6
 8012cf8:	f883 2020 	strb.w	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8012cfc:	f3ef 8310 	mrs	r3, PRIMASK
 8012d00:	60bb      	str	r3, [r7, #8]
  return(result);
 8012d02:	68bb      	ldr	r3, [r7, #8]

  /* lock interrupt */
  enter_critical();
 8012d04:	461c      	mov	r4, r3
  __ASM volatile ("cpsid i" : : : "memory");
 8012d06:	b672      	cpsid	i
}
 8012d08:	bf00      	nop

  /* remove from old list */
  list_del(&(object->list));
 8012d0a:	687b      	ldr	r3, [r7, #4]
 8012d0c:	3324      	adds	r3, #36	; 0x24
 8012d0e:	4618      	mov	r0, r3
 8012d10:	f7ff ff29 	bl	8012b66 <list_del>
 8012d14:	60fc      	str	r4, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012d16:	68fb      	ldr	r3, [r7, #12]
 8012d18:	f383 8810 	msr	PRIMASK, r3
}
 8012d1c:	bf00      	nop

  /* unlock interrupt */
  exit_critical();
}
 8012d1e:	bf00      	nop
 8012d20:	3714      	adds	r7, #20
 8012d22:	46bd      	mov	sp, r7
 8012d24:	bd90      	pop	{r4, r7, pc}

08012d26 <fifo_s_init>:
//! \param  [in] uint_cnt is count of fifo elements.
//! \retval 0 if initialize successfully, otherwise return -1.
//
//******************************************************************************************
int fifo_s_init(fifo_s_t *p_fifo, void *p_base_addr, int uint_cnt)
{
 8012d26:	b480      	push	{r7}
 8012d28:	b085      	sub	sp, #20
 8012d2a:	af00      	add	r7, sp, #0
 8012d2c:	60f8      	str	r0, [r7, #12]
 8012d2e:	60b9      	str	r1, [r7, #8]
 8012d30:	607a      	str	r2, [r7, #4]
  ASSERT(p_fifo);
  ASSERT(p_base_addr);
  ASSERT(uint_cnt);

  //! Initialize FIFO Control Block.
  p_fifo->p_start_addr = (char *)p_base_addr;
 8012d32:	68fb      	ldr	r3, [r7, #12]
 8012d34:	68ba      	ldr	r2, [r7, #8]
 8012d36:	601a      	str	r2, [r3, #0]
  p_fifo->p_end_addr = (char *)p_base_addr + uint_cnt - 1;
 8012d38:	687b      	ldr	r3, [r7, #4]
 8012d3a:	3b01      	subs	r3, #1
 8012d3c:	68ba      	ldr	r2, [r7, #8]
 8012d3e:	441a      	add	r2, r3
 8012d40:	68fb      	ldr	r3, [r7, #12]
 8012d42:	605a      	str	r2, [r3, #4]
  p_fifo->free_num = uint_cnt;
 8012d44:	68fb      	ldr	r3, [r7, #12]
 8012d46:	687a      	ldr	r2, [r7, #4]
 8012d48:	609a      	str	r2, [r3, #8]
  p_fifo->used_num = 0;
 8012d4a:	68fb      	ldr	r3, [r7, #12]
 8012d4c:	2200      	movs	r2, #0
 8012d4e:	60da      	str	r2, [r3, #12]
  p_fifo->p_read_addr = (char *)p_base_addr;
 8012d50:	68fb      	ldr	r3, [r7, #12]
 8012d52:	68ba      	ldr	r2, [r7, #8]
 8012d54:	611a      	str	r2, [r3, #16]
  p_fifo->p_write_addr = (char *)p_base_addr;
 8012d56:	68fb      	ldr	r3, [r7, #12]
 8012d58:	68ba      	ldr	r2, [r7, #8]
 8012d5a:	615a      	str	r2, [r3, #20]

  return (0);
 8012d5c:	2300      	movs	r3, #0
}
 8012d5e:	4618      	mov	r0, r3
 8012d60:	3714      	adds	r7, #20
 8012d62:	46bd      	mov	sp, r7
 8012d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d68:	4770      	bx	lr

08012d6a <fifo_s_puts>:
//! \param  [in]  the number of elements
//! \retval the number of really write data, otherwise return -1.
//
//******************************************************************************************
int fifo_s_puts(fifo_s_t *p_fifo, char *p_source, int len)
{
 8012d6a:	b590      	push	{r4, r7, lr}
 8012d6c:	b08b      	sub	sp, #44	; 0x2c
 8012d6e:	af00      	add	r7, sp, #0
 8012d70:	60f8      	str	r0, [r7, #12]
 8012d72:	60b9      	str	r1, [r7, #8]
 8012d74:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8012d76:	f3ef 8310 	mrs	r3, PRIMASK
 8012d7a:	61bb      	str	r3, [r7, #24]
  return(result);
 8012d7c:	69bb      	ldr	r3, [r7, #24]
  int len_from_start;

  ASSERT(p_fifo);
  
  //Interrupt Off;
  cpu_sr = FIFO_GET_CPU_SR();
 8012d7e:	461c      	mov	r4, r3
  __ASM volatile ("cpsid i" : : : "memory");
 8012d80:	b672      	cpsid	i
}
 8012d82:	bf00      	nop
  FIFO_ENTER_CRITICAL();

  if (NULL == p_source)
 8012d84:	68bb      	ldr	r3, [r7, #8]
 8012d86:	2b00      	cmp	r3, #0
 8012d88:	d05e      	beq.n	8012e48 <fifo_s_puts+0xde>
  {
      goto end;
  }

  if (0 == p_fifo->free_num)
 8012d8a:	68fb      	ldr	r3, [r7, #12]
 8012d8c:	689b      	ldr	r3, [r3, #8]
 8012d8e:	2b00      	cmp	r3, #0
 8012d90:	d05c      	beq.n	8012e4c <fifo_s_puts+0xe2>
  {
      goto end;
  }

  if (p_fifo->p_write_addr > p_fifo->p_end_addr)
 8012d92:	68fb      	ldr	r3, [r7, #12]
 8012d94:	695a      	ldr	r2, [r3, #20]
 8012d96:	68fb      	ldr	r3, [r7, #12]
 8012d98:	685b      	ldr	r3, [r3, #4]
 8012d9a:	429a      	cmp	r2, r3
 8012d9c:	d903      	bls.n	8012da6 <fifo_s_puts+0x3c>
    p_fifo->p_write_addr = p_fifo->p_start_addr;
 8012d9e:	68fb      	ldr	r3, [r7, #12]
 8012da0:	681a      	ldr	r2, [r3, #0]
 8012da2:	68fb      	ldr	r3, [r7, #12]
 8012da4:	615a      	str	r2, [r3, #20]

  len = (len < p_fifo->free_num) ? len : p_fifo->free_num;
 8012da6:	68fb      	ldr	r3, [r7, #12]
 8012da8:	689b      	ldr	r3, [r3, #8]
 8012daa:	687a      	ldr	r2, [r7, #4]
 8012dac:	4293      	cmp	r3, r2
 8012dae:	bfa8      	it	ge
 8012db0:	4613      	movge	r3, r2
 8012db2:	607b      	str	r3, [r7, #4]
  len_to_end = p_fifo->p_end_addr - p_fifo->p_write_addr + 1;
 8012db4:	68fb      	ldr	r3, [r7, #12]
 8012db6:	685a      	ldr	r2, [r3, #4]
 8012db8:	68fb      	ldr	r3, [r7, #12]
 8012dba:	695b      	ldr	r3, [r3, #20]
 8012dbc:	1ad3      	subs	r3, r2, r3
 8012dbe:	3301      	adds	r3, #1
 8012dc0:	627b      	str	r3, [r7, #36]	; 0x24

  if (len_to_end >= len) //no rollback
 8012dc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012dc4:	687b      	ldr	r3, [r7, #4]
 8012dc6:	429a      	cmp	r2, r3
 8012dc8:	db0f      	blt.n	8012dea <fifo_s_puts+0x80>
  {
    len_to_end = len;
 8012dca:	687b      	ldr	r3, [r7, #4]
 8012dcc:	627b      	str	r3, [r7, #36]	; 0x24
    memcpy(p_fifo->p_write_addr, p_source, len_to_end);
 8012dce:	68fb      	ldr	r3, [r7, #12]
 8012dd0:	695b      	ldr	r3, [r3, #20]
 8012dd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012dd4:	68b9      	ldr	r1, [r7, #8]
 8012dd6:	4618      	mov	r0, r3
 8012dd8:	f001 f8de 	bl	8013f98 <memcpy>
    p_fifo->p_write_addr += len_to_end;
 8012ddc:	68fb      	ldr	r3, [r7, #12]
 8012dde:	695a      	ldr	r2, [r3, #20]
 8012de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012de2:	441a      	add	r2, r3
 8012de4:	68fb      	ldr	r3, [r7, #12]
 8012de6:	615a      	str	r2, [r3, #20]
 8012de8:	e019      	b.n	8012e1e <fifo_s_puts+0xb4>
  }
  else //rollback
  {
    len_from_start = len - len_to_end;
 8012dea:	687a      	ldr	r2, [r7, #4]
 8012dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012dee:	1ad3      	subs	r3, r2, r3
 8012df0:	623b      	str	r3, [r7, #32]
    memcpy(p_fifo->p_write_addr, p_source, len_to_end);
 8012df2:	68fb      	ldr	r3, [r7, #12]
 8012df4:	695b      	ldr	r3, [r3, #20]
 8012df6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012df8:	68b9      	ldr	r1, [r7, #8]
 8012dfa:	4618      	mov	r0, r3
 8012dfc:	f001 f8cc 	bl	8013f98 <memcpy>
    memcpy(p_fifo->p_start_addr, p_source + len_to_end, len_from_start);
 8012e00:	68fb      	ldr	r3, [r7, #12]
 8012e02:	6818      	ldr	r0, [r3, #0]
 8012e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e06:	68ba      	ldr	r2, [r7, #8]
 8012e08:	4413      	add	r3, r2
 8012e0a:	6a3a      	ldr	r2, [r7, #32]
 8012e0c:	4619      	mov	r1, r3
 8012e0e:	f001 f8c3 	bl	8013f98 <memcpy>
    p_fifo->p_write_addr = p_fifo->p_start_addr + len_from_start;
 8012e12:	68fb      	ldr	r3, [r7, #12]
 8012e14:	681a      	ldr	r2, [r3, #0]
 8012e16:	6a3b      	ldr	r3, [r7, #32]
 8012e18:	441a      	add	r2, r3
 8012e1a:	68fb      	ldr	r3, [r7, #12]
 8012e1c:	615a      	str	r2, [r3, #20]
  }

  p_fifo->free_num -= len;
 8012e1e:	68fb      	ldr	r3, [r7, #12]
 8012e20:	689a      	ldr	r2, [r3, #8]
 8012e22:	687b      	ldr	r3, [r7, #4]
 8012e24:	1ad2      	subs	r2, r2, r3
 8012e26:	68fb      	ldr	r3, [r7, #12]
 8012e28:	609a      	str	r2, [r3, #8]
  p_fifo->used_num += len;
 8012e2a:	68fb      	ldr	r3, [r7, #12]
 8012e2c:	68da      	ldr	r2, [r3, #12]
 8012e2e:	687b      	ldr	r3, [r7, #4]
 8012e30:	441a      	add	r2, r3
 8012e32:	68fb      	ldr	r3, [r7, #12]
 8012e34:	60da      	str	r2, [r3, #12]
  retval = len;
 8012e36:	687b      	ldr	r3, [r7, #4]
 8012e38:	61fb      	str	r3, [r7, #28]
 8012e3a:	617c      	str	r4, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012e3c:	697b      	ldr	r3, [r7, #20]
 8012e3e:	f383 8810 	msr	PRIMASK, r3
}
 8012e42:	bf00      	nop

  //Interrupt On
  FIFO_RESTORE_CPU_SR(cpu_sr);

  return retval;
 8012e44:	69fb      	ldr	r3, [r7, #28]
 8012e46:	e009      	b.n	8012e5c <fifo_s_puts+0xf2>
      goto end;
 8012e48:	bf00      	nop
 8012e4a:	e000      	b.n	8012e4e <fifo_s_puts+0xe4>
      goto end;
 8012e4c:	bf00      	nop
 8012e4e:	613c      	str	r4, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012e50:	693b      	ldr	r3, [r7, #16]
 8012e52:	f383 8810 	msr	PRIMASK, r3
}
 8012e56:	bf00      	nop
end:
  //Interrupt On
  FIFO_RESTORE_CPU_SR(cpu_sr);
  return (-1);
 8012e58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8012e5c:	4618      	mov	r0, r3
 8012e5e:	372c      	adds	r7, #44	; 0x2c
 8012e60:	46bd      	mov	sp, r7
 8012e62:	bd90      	pop	{r4, r7, pc}

08012e64 <fifo_s_puts_noprotect>:
//! \param  [in]  the number of elements
//! \retval the number of really write data, otherwise return -1.
//
//******************************************************************************************
int fifo_s_puts_noprotect(fifo_s_t *p_fifo, char *p_source, int len)
{
 8012e64:	b580      	push	{r7, lr}
 8012e66:	b088      	sub	sp, #32
 8012e68:	af00      	add	r7, sp, #0
 8012e6a:	60f8      	str	r0, [r7, #12]
 8012e6c:	60b9      	str	r1, [r7, #8]
 8012e6e:	607a      	str	r2, [r7, #4]
  int len_to_end;
  int len_from_start;

  ASSERT(p_fifo);

  if (NULL == p_source)
 8012e70:	68bb      	ldr	r3, [r7, #8]
 8012e72:	2b00      	cmp	r3, #0
 8012e74:	d102      	bne.n	8012e7c <fifo_s_puts_noprotect+0x18>
    return -1;
 8012e76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012e7a:	e05a      	b.n	8012f32 <fifo_s_puts_noprotect+0xce>

  if (0 == p_fifo->free_num)
 8012e7c:	68fb      	ldr	r3, [r7, #12]
 8012e7e:	689b      	ldr	r3, [r3, #8]
 8012e80:	2b00      	cmp	r3, #0
 8012e82:	d101      	bne.n	8012e88 <fifo_s_puts_noprotect+0x24>
    return 0;
 8012e84:	2300      	movs	r3, #0
 8012e86:	e054      	b.n	8012f32 <fifo_s_puts_noprotect+0xce>

  if (p_fifo->p_write_addr > p_fifo->p_end_addr)
 8012e88:	68fb      	ldr	r3, [r7, #12]
 8012e8a:	695a      	ldr	r2, [r3, #20]
 8012e8c:	68fb      	ldr	r3, [r7, #12]
 8012e8e:	685b      	ldr	r3, [r3, #4]
 8012e90:	429a      	cmp	r2, r3
 8012e92:	d903      	bls.n	8012e9c <fifo_s_puts_noprotect+0x38>
    p_fifo->p_write_addr = p_fifo->p_start_addr;
 8012e94:	68fb      	ldr	r3, [r7, #12]
 8012e96:	681a      	ldr	r2, [r3, #0]
 8012e98:	68fb      	ldr	r3, [r7, #12]
 8012e9a:	615a      	str	r2, [r3, #20]

  len = (len < p_fifo->free_num) ? len : p_fifo->free_num;
 8012e9c:	68fb      	ldr	r3, [r7, #12]
 8012e9e:	689b      	ldr	r3, [r3, #8]
 8012ea0:	687a      	ldr	r2, [r7, #4]
 8012ea2:	4293      	cmp	r3, r2
 8012ea4:	bfa8      	it	ge
 8012ea6:	4613      	movge	r3, r2
 8012ea8:	607b      	str	r3, [r7, #4]
  len_to_end = p_fifo->p_end_addr - p_fifo->p_write_addr + 1;
 8012eaa:	68fb      	ldr	r3, [r7, #12]
 8012eac:	685a      	ldr	r2, [r3, #4]
 8012eae:	68fb      	ldr	r3, [r7, #12]
 8012eb0:	695b      	ldr	r3, [r3, #20]
 8012eb2:	1ad3      	subs	r3, r2, r3
 8012eb4:	3301      	adds	r3, #1
 8012eb6:	61fb      	str	r3, [r7, #28]

  if (len_to_end >= len) //no rollback
 8012eb8:	69fa      	ldr	r2, [r7, #28]
 8012eba:	687b      	ldr	r3, [r7, #4]
 8012ebc:	429a      	cmp	r2, r3
 8012ebe:	db0f      	blt.n	8012ee0 <fifo_s_puts_noprotect+0x7c>
  {
    len_to_end = len;
 8012ec0:	687b      	ldr	r3, [r7, #4]
 8012ec2:	61fb      	str	r3, [r7, #28]
    memcpy(p_fifo->p_write_addr, p_source, len_to_end);
 8012ec4:	68fb      	ldr	r3, [r7, #12]
 8012ec6:	695b      	ldr	r3, [r3, #20]
 8012ec8:	69fa      	ldr	r2, [r7, #28]
 8012eca:	68b9      	ldr	r1, [r7, #8]
 8012ecc:	4618      	mov	r0, r3
 8012ece:	f001 f863 	bl	8013f98 <memcpy>
    p_fifo->p_write_addr += len_to_end;
 8012ed2:	68fb      	ldr	r3, [r7, #12]
 8012ed4:	695a      	ldr	r2, [r3, #20]
 8012ed6:	69fb      	ldr	r3, [r7, #28]
 8012ed8:	441a      	add	r2, r3
 8012eda:	68fb      	ldr	r3, [r7, #12]
 8012edc:	615a      	str	r2, [r3, #20]
 8012ede:	e019      	b.n	8012f14 <fifo_s_puts_noprotect+0xb0>
  }
  else //rollback
  {
    len_from_start = len - len_to_end;
 8012ee0:	687a      	ldr	r2, [r7, #4]
 8012ee2:	69fb      	ldr	r3, [r7, #28]
 8012ee4:	1ad3      	subs	r3, r2, r3
 8012ee6:	61bb      	str	r3, [r7, #24]
    memcpy(p_fifo->p_write_addr, p_source, len_to_end);
 8012ee8:	68fb      	ldr	r3, [r7, #12]
 8012eea:	695b      	ldr	r3, [r3, #20]
 8012eec:	69fa      	ldr	r2, [r7, #28]
 8012eee:	68b9      	ldr	r1, [r7, #8]
 8012ef0:	4618      	mov	r0, r3
 8012ef2:	f001 f851 	bl	8013f98 <memcpy>
    memcpy(p_fifo->p_start_addr, p_source + len_to_end, len_from_start);
 8012ef6:	68fb      	ldr	r3, [r7, #12]
 8012ef8:	6818      	ldr	r0, [r3, #0]
 8012efa:	69fb      	ldr	r3, [r7, #28]
 8012efc:	68ba      	ldr	r2, [r7, #8]
 8012efe:	4413      	add	r3, r2
 8012f00:	69ba      	ldr	r2, [r7, #24]
 8012f02:	4619      	mov	r1, r3
 8012f04:	f001 f848 	bl	8013f98 <memcpy>
    p_fifo->p_write_addr = p_fifo->p_start_addr + len_from_start;
 8012f08:	68fb      	ldr	r3, [r7, #12]
 8012f0a:	681a      	ldr	r2, [r3, #0]
 8012f0c:	69bb      	ldr	r3, [r7, #24]
 8012f0e:	441a      	add	r2, r3
 8012f10:	68fb      	ldr	r3, [r7, #12]
 8012f12:	615a      	str	r2, [r3, #20]
  }

  p_fifo->free_num -= len;
 8012f14:	68fb      	ldr	r3, [r7, #12]
 8012f16:	689a      	ldr	r2, [r3, #8]
 8012f18:	687b      	ldr	r3, [r7, #4]
 8012f1a:	1ad2      	subs	r2, r2, r3
 8012f1c:	68fb      	ldr	r3, [r7, #12]
 8012f1e:	609a      	str	r2, [r3, #8]
  p_fifo->used_num += len;
 8012f20:	68fb      	ldr	r3, [r7, #12]
 8012f22:	68da      	ldr	r2, [r3, #12]
 8012f24:	687b      	ldr	r3, [r7, #4]
 8012f26:	441a      	add	r2, r3
 8012f28:	68fb      	ldr	r3, [r7, #12]
 8012f2a:	60da      	str	r2, [r3, #12]
  retval = len;
 8012f2c:	687b      	ldr	r3, [r7, #4]
 8012f2e:	617b      	str	r3, [r7, #20]

  return retval;
 8012f30:	697b      	ldr	r3, [r7, #20]
}
 8012f32:	4618      	mov	r0, r3
 8012f34:	3720      	adds	r7, #32
 8012f36:	46bd      	mov	sp, r7
 8012f38:	bd80      	pop	{r7, pc}

08012f3a <fifo_s_get>:
//!
//! \retval the data element of FIFO.
//
//******************************************************************************************
char fifo_s_get(fifo_s_t *p_fifo)
{
 8012f3a:	b490      	push	{r4, r7}
 8012f3c:	b086      	sub	sp, #24
 8012f3e:	af00      	add	r7, sp, #0
 8012f40:	6078      	str	r0, [r7, #4]
  FIFO_CPU_SR_TYPE cpu_sr;
  char retval = 0;
 8012f42:	2300      	movs	r3, #0
 8012f44:	75fb      	strb	r3, [r7, #23]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8012f46:	f3ef 8310 	mrs	r3, PRIMASK
 8012f4a:	613b      	str	r3, [r7, #16]
  return(result);
 8012f4c:	693b      	ldr	r3, [r7, #16]

  //! Check input parameters.
  ASSERT(p_fifo);

  //Interrupt Off;
  cpu_sr = FIFO_GET_CPU_SR();
 8012f4e:	461c      	mov	r4, r3
  __ASM volatile ("cpsid i" : : : "memory");
 8012f50:	b672      	cpsid	i
}
 8012f52:	bf00      	nop
  FIFO_ENTER_CRITICAL();

  if (p_fifo->p_read_addr > p_fifo->p_end_addr)
 8012f54:	687b      	ldr	r3, [r7, #4]
 8012f56:	691a      	ldr	r2, [r3, #16]
 8012f58:	687b      	ldr	r3, [r7, #4]
 8012f5a:	685b      	ldr	r3, [r3, #4]
 8012f5c:	429a      	cmp	r2, r3
 8012f5e:	d903      	bls.n	8012f68 <fifo_s_get+0x2e>
    p_fifo->p_read_addr = p_fifo->p_start_addr;
 8012f60:	687b      	ldr	r3, [r7, #4]
 8012f62:	681a      	ldr	r2, [r3, #0]
 8012f64:	687b      	ldr	r3, [r7, #4]
 8012f66:	611a      	str	r2, [r3, #16]

  retval = *p_fifo->p_read_addr;
 8012f68:	687b      	ldr	r3, [r7, #4]
 8012f6a:	691b      	ldr	r3, [r3, #16]
 8012f6c:	781b      	ldrb	r3, [r3, #0]
 8012f6e:	75fb      	strb	r3, [r7, #23]
  // Update information
  p_fifo->p_read_addr++;
 8012f70:	687b      	ldr	r3, [r7, #4]
 8012f72:	691b      	ldr	r3, [r3, #16]
 8012f74:	1c5a      	adds	r2, r3, #1
 8012f76:	687b      	ldr	r3, [r7, #4]
 8012f78:	611a      	str	r2, [r3, #16]
  p_fifo->free_num++;
 8012f7a:	687b      	ldr	r3, [r7, #4]
 8012f7c:	689b      	ldr	r3, [r3, #8]
 8012f7e:	1c5a      	adds	r2, r3, #1
 8012f80:	687b      	ldr	r3, [r7, #4]
 8012f82:	609a      	str	r2, [r3, #8]
  p_fifo->used_num--;
 8012f84:	687b      	ldr	r3, [r7, #4]
 8012f86:	68db      	ldr	r3, [r3, #12]
 8012f88:	1e5a      	subs	r2, r3, #1
 8012f8a:	687b      	ldr	r3, [r7, #4]
 8012f8c:	60da      	str	r2, [r3, #12]
 8012f8e:	60fc      	str	r4, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012f90:	68fb      	ldr	r3, [r7, #12]
 8012f92:	f383 8810 	msr	PRIMASK, r3
}
 8012f96:	bf00      	nop
  //Interrupt On
  FIFO_RESTORE_CPU_SR(cpu_sr);
  return (retval);
 8012f98:	7dfb      	ldrb	r3, [r7, #23]
}
 8012f9a:	4618      	mov	r0, r3
 8012f9c:	3718      	adds	r7, #24
 8012f9e:	46bd      	mov	sp, r7
 8012fa0:	bc90      	pop	{r4, r7}
 8012fa2:	4770      	bx	lr

08012fa4 <fifo_s_gets>:
//!
//! \retval the number of really read data.
//
//******************************************************************************************
int fifo_s_gets(fifo_s_t *p_fifo, char *p_dest, int len)
{
 8012fa4:	b590      	push	{r4, r7, lr}
 8012fa6:	b08b      	sub	sp, #44	; 0x2c
 8012fa8:	af00      	add	r7, sp, #0
 8012faa:	60f8      	str	r0, [r7, #12]
 8012fac:	60b9      	str	r1, [r7, #8]
 8012fae:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8012fb0:	f3ef 8310 	mrs	r3, PRIMASK
 8012fb4:	61bb      	str	r3, [r7, #24]
  return(result);
 8012fb6:	69bb      	ldr	r3, [r7, #24]
  int len_from_start;

  ASSERT(p_fifo);

  //Interrupt Off;
  cpu_sr = FIFO_GET_CPU_SR();
 8012fb8:	461c      	mov	r4, r3
  __ASM volatile ("cpsid i" : : : "memory");
 8012fba:	b672      	cpsid	i
}
 8012fbc:	bf00      	nop
  FIFO_ENTER_CRITICAL();

  if (NULL == p_dest)
 8012fbe:	68bb      	ldr	r3, [r7, #8]
 8012fc0:	2b00      	cmp	r3, #0
 8012fc2:	d05e      	beq.n	8013082 <fifo_s_gets+0xde>
  {
    goto end;
  }

  if (0 == p_fifo->used_num)
 8012fc4:	68fb      	ldr	r3, [r7, #12]
 8012fc6:	68db      	ldr	r3, [r3, #12]
 8012fc8:	2b00      	cmp	r3, #0
 8012fca:	d05c      	beq.n	8013086 <fifo_s_gets+0xe2>
  {
    goto end;
  }

  if (p_fifo->p_read_addr > p_fifo->p_end_addr)
 8012fcc:	68fb      	ldr	r3, [r7, #12]
 8012fce:	691a      	ldr	r2, [r3, #16]
 8012fd0:	68fb      	ldr	r3, [r7, #12]
 8012fd2:	685b      	ldr	r3, [r3, #4]
 8012fd4:	429a      	cmp	r2, r3
 8012fd6:	d903      	bls.n	8012fe0 <fifo_s_gets+0x3c>
    p_fifo->p_read_addr = p_fifo->p_start_addr;
 8012fd8:	68fb      	ldr	r3, [r7, #12]
 8012fda:	681a      	ldr	r2, [r3, #0]
 8012fdc:	68fb      	ldr	r3, [r7, #12]
 8012fde:	611a      	str	r2, [r3, #16]

  len = (len < p_fifo->used_num) ? len : p_fifo->used_num;
 8012fe0:	68fb      	ldr	r3, [r7, #12]
 8012fe2:	68db      	ldr	r3, [r3, #12]
 8012fe4:	687a      	ldr	r2, [r7, #4]
 8012fe6:	4293      	cmp	r3, r2
 8012fe8:	bfa8      	it	ge
 8012fea:	4613      	movge	r3, r2
 8012fec:	607b      	str	r3, [r7, #4]
  len_to_end = p_fifo->p_end_addr - p_fifo->p_read_addr + 1;
 8012fee:	68fb      	ldr	r3, [r7, #12]
 8012ff0:	685a      	ldr	r2, [r3, #4]
 8012ff2:	68fb      	ldr	r3, [r7, #12]
 8012ff4:	691b      	ldr	r3, [r3, #16]
 8012ff6:	1ad3      	subs	r3, r2, r3
 8012ff8:	3301      	adds	r3, #1
 8012ffa:	627b      	str	r3, [r7, #36]	; 0x24

  if (len_to_end >= len) //no rollback
 8012ffc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012ffe:	687b      	ldr	r3, [r7, #4]
 8013000:	429a      	cmp	r2, r3
 8013002:	db0f      	blt.n	8013024 <fifo_s_gets+0x80>
  {
    len_to_end = len;
 8013004:	687b      	ldr	r3, [r7, #4]
 8013006:	627b      	str	r3, [r7, #36]	; 0x24
    memcpy(p_dest, p_fifo->p_read_addr, len_to_end);
 8013008:	68fb      	ldr	r3, [r7, #12]
 801300a:	691b      	ldr	r3, [r3, #16]
 801300c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801300e:	4619      	mov	r1, r3
 8013010:	68b8      	ldr	r0, [r7, #8]
 8013012:	f000 ffc1 	bl	8013f98 <memcpy>
    p_fifo->p_read_addr += len_to_end;
 8013016:	68fb      	ldr	r3, [r7, #12]
 8013018:	691a      	ldr	r2, [r3, #16]
 801301a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801301c:	441a      	add	r2, r3
 801301e:	68fb      	ldr	r3, [r7, #12]
 8013020:	611a      	str	r2, [r3, #16]
 8013022:	e019      	b.n	8013058 <fifo_s_gets+0xb4>
  }
  else //rollback
  {
    len_from_start = len - len_to_end;
 8013024:	687a      	ldr	r2, [r7, #4]
 8013026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013028:	1ad3      	subs	r3, r2, r3
 801302a:	623b      	str	r3, [r7, #32]
    memcpy(p_dest, p_fifo->p_read_addr, len_to_end);
 801302c:	68fb      	ldr	r3, [r7, #12]
 801302e:	691b      	ldr	r3, [r3, #16]
 8013030:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013032:	4619      	mov	r1, r3
 8013034:	68b8      	ldr	r0, [r7, #8]
 8013036:	f000 ffaf 	bl	8013f98 <memcpy>
    memcpy(p_dest + len_to_end, p_fifo->p_start_addr, len_from_start);
 801303a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801303c:	68ba      	ldr	r2, [r7, #8]
 801303e:	18d0      	adds	r0, r2, r3
 8013040:	68fb      	ldr	r3, [r7, #12]
 8013042:	681b      	ldr	r3, [r3, #0]
 8013044:	6a3a      	ldr	r2, [r7, #32]
 8013046:	4619      	mov	r1, r3
 8013048:	f000 ffa6 	bl	8013f98 <memcpy>
    p_fifo->p_read_addr = p_fifo->p_start_addr + len_from_start;
 801304c:	68fb      	ldr	r3, [r7, #12]
 801304e:	681a      	ldr	r2, [r3, #0]
 8013050:	6a3b      	ldr	r3, [r7, #32]
 8013052:	441a      	add	r2, r3
 8013054:	68fb      	ldr	r3, [r7, #12]
 8013056:	611a      	str	r2, [r3, #16]
  }

  p_fifo->free_num += len;
 8013058:	68fb      	ldr	r3, [r7, #12]
 801305a:	689a      	ldr	r2, [r3, #8]
 801305c:	687b      	ldr	r3, [r7, #4]
 801305e:	441a      	add	r2, r3
 8013060:	68fb      	ldr	r3, [r7, #12]
 8013062:	609a      	str	r2, [r3, #8]
  p_fifo->used_num -= len;
 8013064:	68fb      	ldr	r3, [r7, #12]
 8013066:	68da      	ldr	r2, [r3, #12]
 8013068:	687b      	ldr	r3, [r7, #4]
 801306a:	1ad2      	subs	r2, r2, r3
 801306c:	68fb      	ldr	r3, [r7, #12]
 801306e:	60da      	str	r2, [r3, #12]
  retval = len;
 8013070:	687b      	ldr	r3, [r7, #4]
 8013072:	61fb      	str	r3, [r7, #28]
 8013074:	617c      	str	r4, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013076:	697b      	ldr	r3, [r7, #20]
 8013078:	f383 8810 	msr	PRIMASK, r3
}
 801307c:	bf00      	nop
  //Interrupt On
  FIFO_RESTORE_CPU_SR(cpu_sr);

  return retval;
 801307e:	69fb      	ldr	r3, [r7, #28]
 8013080:	e009      	b.n	8013096 <fifo_s_gets+0xf2>
    goto end;
 8013082:	bf00      	nop
 8013084:	e000      	b.n	8013088 <fifo_s_gets+0xe4>
    goto end;
 8013086:	bf00      	nop
 8013088:	613c      	str	r4, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801308a:	693b      	ldr	r3, [r7, #16]
 801308c:	f383 8810 	msr	PRIMASK, r3
}
 8013090:	bf00      	nop
end:
  //Interrupt On
  FIFO_RESTORE_CPU_SR(cpu_sr);
  return (-1);
 8013092:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8013096:	4618      	mov	r0, r3
 8013098:	372c      	adds	r7, #44	; 0x2c
 801309a:	46bd      	mov	sp, r7
 801309c:	bd90      	pop	{r4, r7, pc}

0801309e <fifo_s_gets_noprotect>:
//!
//! \retval the number of really read data.
//
//******************************************************************************************
int fifo_s_gets_noprotect(fifo_s_t *p_fifo, char *p_dest, int len)
{
 801309e:	b580      	push	{r7, lr}
 80130a0:	b088      	sub	sp, #32
 80130a2:	af00      	add	r7, sp, #0
 80130a4:	60f8      	str	r0, [r7, #12]
 80130a6:	60b9      	str	r1, [r7, #8]
 80130a8:	607a      	str	r2, [r7, #4]
  int len_to_end;
  int len_from_start;

  ASSERT(p_fifo);

  if (NULL == p_dest)
 80130aa:	68bb      	ldr	r3, [r7, #8]
 80130ac:	2b00      	cmp	r3, #0
 80130ae:	d102      	bne.n	80130b6 <fifo_s_gets_noprotect+0x18>
    return -1;
 80130b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80130b4:	e05a      	b.n	801316c <fifo_s_gets_noprotect+0xce>

  if (0 == p_fifo->used_num)
 80130b6:	68fb      	ldr	r3, [r7, #12]
 80130b8:	68db      	ldr	r3, [r3, #12]
 80130ba:	2b00      	cmp	r3, #0
 80130bc:	d101      	bne.n	80130c2 <fifo_s_gets_noprotect+0x24>
    return 0;
 80130be:	2300      	movs	r3, #0
 80130c0:	e054      	b.n	801316c <fifo_s_gets_noprotect+0xce>

  if (p_fifo->p_read_addr > p_fifo->p_end_addr)
 80130c2:	68fb      	ldr	r3, [r7, #12]
 80130c4:	691a      	ldr	r2, [r3, #16]
 80130c6:	68fb      	ldr	r3, [r7, #12]
 80130c8:	685b      	ldr	r3, [r3, #4]
 80130ca:	429a      	cmp	r2, r3
 80130cc:	d903      	bls.n	80130d6 <fifo_s_gets_noprotect+0x38>
    p_fifo->p_read_addr = p_fifo->p_start_addr;
 80130ce:	68fb      	ldr	r3, [r7, #12]
 80130d0:	681a      	ldr	r2, [r3, #0]
 80130d2:	68fb      	ldr	r3, [r7, #12]
 80130d4:	611a      	str	r2, [r3, #16]

  len = (len < p_fifo->used_num) ? len : p_fifo->used_num;
 80130d6:	68fb      	ldr	r3, [r7, #12]
 80130d8:	68db      	ldr	r3, [r3, #12]
 80130da:	687a      	ldr	r2, [r7, #4]
 80130dc:	4293      	cmp	r3, r2
 80130de:	bfa8      	it	ge
 80130e0:	4613      	movge	r3, r2
 80130e2:	607b      	str	r3, [r7, #4]
  len_to_end = p_fifo->p_end_addr - p_fifo->p_read_addr + 1;
 80130e4:	68fb      	ldr	r3, [r7, #12]
 80130e6:	685a      	ldr	r2, [r3, #4]
 80130e8:	68fb      	ldr	r3, [r7, #12]
 80130ea:	691b      	ldr	r3, [r3, #16]
 80130ec:	1ad3      	subs	r3, r2, r3
 80130ee:	3301      	adds	r3, #1
 80130f0:	61fb      	str	r3, [r7, #28]

  if (len_to_end >= len) //no rollback
 80130f2:	69fa      	ldr	r2, [r7, #28]
 80130f4:	687b      	ldr	r3, [r7, #4]
 80130f6:	429a      	cmp	r2, r3
 80130f8:	db0f      	blt.n	801311a <fifo_s_gets_noprotect+0x7c>
  {
    len_to_end = len;
 80130fa:	687b      	ldr	r3, [r7, #4]
 80130fc:	61fb      	str	r3, [r7, #28]
    memcpy(p_dest, p_fifo->p_read_addr, len_to_end);
 80130fe:	68fb      	ldr	r3, [r7, #12]
 8013100:	691b      	ldr	r3, [r3, #16]
 8013102:	69fa      	ldr	r2, [r7, #28]
 8013104:	4619      	mov	r1, r3
 8013106:	68b8      	ldr	r0, [r7, #8]
 8013108:	f000 ff46 	bl	8013f98 <memcpy>
    p_fifo->p_read_addr += len_to_end;
 801310c:	68fb      	ldr	r3, [r7, #12]
 801310e:	691a      	ldr	r2, [r3, #16]
 8013110:	69fb      	ldr	r3, [r7, #28]
 8013112:	441a      	add	r2, r3
 8013114:	68fb      	ldr	r3, [r7, #12]
 8013116:	611a      	str	r2, [r3, #16]
 8013118:	e019      	b.n	801314e <fifo_s_gets_noprotect+0xb0>
  }
  else //rollback
  {
    len_from_start = len - len_to_end;
 801311a:	687a      	ldr	r2, [r7, #4]
 801311c:	69fb      	ldr	r3, [r7, #28]
 801311e:	1ad3      	subs	r3, r2, r3
 8013120:	61bb      	str	r3, [r7, #24]
    memcpy(p_dest, p_fifo->p_read_addr, len_to_end);
 8013122:	68fb      	ldr	r3, [r7, #12]
 8013124:	691b      	ldr	r3, [r3, #16]
 8013126:	69fa      	ldr	r2, [r7, #28]
 8013128:	4619      	mov	r1, r3
 801312a:	68b8      	ldr	r0, [r7, #8]
 801312c:	f000 ff34 	bl	8013f98 <memcpy>
    memcpy(p_dest + len_to_end, p_fifo->p_start_addr, len_from_start);
 8013130:	69fb      	ldr	r3, [r7, #28]
 8013132:	68ba      	ldr	r2, [r7, #8]
 8013134:	18d0      	adds	r0, r2, r3
 8013136:	68fb      	ldr	r3, [r7, #12]
 8013138:	681b      	ldr	r3, [r3, #0]
 801313a:	69ba      	ldr	r2, [r7, #24]
 801313c:	4619      	mov	r1, r3
 801313e:	f000 ff2b 	bl	8013f98 <memcpy>
    p_fifo->p_read_addr = p_fifo->p_start_addr + len_from_start;
 8013142:	68fb      	ldr	r3, [r7, #12]
 8013144:	681a      	ldr	r2, [r3, #0]
 8013146:	69bb      	ldr	r3, [r7, #24]
 8013148:	441a      	add	r2, r3
 801314a:	68fb      	ldr	r3, [r7, #12]
 801314c:	611a      	str	r2, [r3, #16]
  }

  p_fifo->free_num += len;
 801314e:	68fb      	ldr	r3, [r7, #12]
 8013150:	689a      	ldr	r2, [r3, #8]
 8013152:	687b      	ldr	r3, [r7, #4]
 8013154:	441a      	add	r2, r3
 8013156:	68fb      	ldr	r3, [r7, #12]
 8013158:	609a      	str	r2, [r3, #8]
  p_fifo->used_num -= len;
 801315a:	68fb      	ldr	r3, [r7, #12]
 801315c:	68da      	ldr	r2, [r3, #12]
 801315e:	687b      	ldr	r3, [r7, #4]
 8013160:	1ad2      	subs	r2, r2, r3
 8013162:	68fb      	ldr	r3, [r7, #12]
 8013164:	60da      	str	r2, [r3, #12]
  retval = len;
 8013166:	687b      	ldr	r3, [r7, #4]
 8013168:	617b      	str	r3, [r7, #20]

  return retval;
 801316a:	697b      	ldr	r3, [r7, #20]
}
 801316c:	4618      	mov	r0, r3
 801316e:	3720      	adds	r7, #32
 8013170:	46bd      	mov	sp, r7
 8013172:	bd80      	pop	{r7, pc}

08013174 <fifo_s_preread>:
//!
//! \retval the data element of FIFO.
//
//******************************************************************************************
char fifo_s_preread(fifo_s_t *p_fifo, int offset)
{
 8013174:	b480      	push	{r7}
 8013176:	b085      	sub	sp, #20
 8013178:	af00      	add	r7, sp, #0
 801317a:	6078      	str	r0, [r7, #4]
 801317c:	6039      	str	r1, [r7, #0]
  char *tmp_read_addr;

  //! Check input parameters.
  ASSERT(p_fifo);

  if (offset > p_fifo->used_num)
 801317e:	687b      	ldr	r3, [r7, #4]
 8013180:	68db      	ldr	r3, [r3, #12]
 8013182:	683a      	ldr	r2, [r7, #0]
 8013184:	429a      	cmp	r2, r3
 8013186:	dd01      	ble.n	801318c <fifo_s_preread+0x18>
  {
    return 0;
 8013188:	2300      	movs	r3, #0
 801318a:	e014      	b.n	80131b6 <fifo_s_preread+0x42>
  }
  else
  {
    // Move Read Pointer to right position
    tmp_read_addr = p_fifo->p_read_addr + offset;
 801318c:	687b      	ldr	r3, [r7, #4]
 801318e:	691a      	ldr	r2, [r3, #16]
 8013190:	683b      	ldr	r3, [r7, #0]
 8013192:	4413      	add	r3, r2
 8013194:	60fb      	str	r3, [r7, #12]
    if (tmp_read_addr > p_fifo->p_end_addr)
 8013196:	687b      	ldr	r3, [r7, #4]
 8013198:	685b      	ldr	r3, [r3, #4]
 801319a:	68fa      	ldr	r2, [r7, #12]
 801319c:	429a      	cmp	r2, r3
 801319e:	d908      	bls.n	80131b2 <fifo_s_preread+0x3e>
      tmp_read_addr = tmp_read_addr - p_fifo->p_end_addr + p_fifo->p_start_addr - 1;
 80131a0:	687b      	ldr	r3, [r7, #4]
 80131a2:	681a      	ldr	r2, [r3, #0]
 80131a4:	687b      	ldr	r3, [r7, #4]
 80131a6:	685b      	ldr	r3, [r3, #4]
 80131a8:	68f9      	ldr	r1, [r7, #12]
 80131aa:	1acb      	subs	r3, r1, r3
 80131ac:	3b01      	subs	r3, #1
 80131ae:	4413      	add	r3, r2
 80131b0:	60fb      	str	r3, [r7, #12]

    return *tmp_read_addr;
 80131b2:	68fb      	ldr	r3, [r7, #12]
 80131b4:	781b      	ldrb	r3, [r3, #0]
  }
}
 80131b6:	4618      	mov	r0, r3
 80131b8:	3714      	adds	r7, #20
 80131ba:	46bd      	mov	sp, r7
 80131bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131c0:	4770      	bx	lr

080131c2 <fifo_s_prereads>:
 *
 *
 *
 */
int fifo_s_prereads(fifo_s_t *p_fifo, char *p_dest, int offset, int len)
{
 80131c2:	b590      	push	{r4, r7, lr}
 80131c4:	b08d      	sub	sp, #52	; 0x34
 80131c6:	af00      	add	r7, sp, #0
 80131c8:	60f8      	str	r0, [r7, #12]
 80131ca:	60b9      	str	r1, [r7, #8]
 80131cc:	607a      	str	r2, [r7, #4]
 80131ce:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80131d0:	f3ef 8310 	mrs	r3, PRIMASK
 80131d4:	61fb      	str	r3, [r7, #28]
  return(result);
 80131d6:	69fb      	ldr	r3, [r7, #28]
  int len_from_start;

  ASSERT(p_fifo);

  //Interrupt Off;
  cpu_sr = FIFO_GET_CPU_SR();
 80131d8:	461c      	mov	r4, r3
  __ASM volatile ("cpsid i" : : : "memory");
 80131da:	b672      	cpsid	i
}
 80131dc:	bf00      	nop
  FIFO_ENTER_CRITICAL();

  if (NULL == p_dest)
 80131de:	68bb      	ldr	r3, [r7, #8]
 80131e0:	2b00      	cmp	r3, #0
 80131e2:	d053      	beq.n	801328c <fifo_s_prereads+0xca>
    goto end;

  if (0 == p_fifo->used_num)
 80131e4:	68fb      	ldr	r3, [r7, #12]
 80131e6:	68db      	ldr	r3, [r3, #12]
 80131e8:	2b00      	cmp	r3, #0
 80131ea:	d051      	beq.n	8013290 <fifo_s_prereads+0xce>
    goto end;

  if (offset >= p_fifo->used_num)
 80131ec:	68fb      	ldr	r3, [r7, #12]
 80131ee:	68db      	ldr	r3, [r3, #12]
 80131f0:	687a      	ldr	r2, [r7, #4]
 80131f2:	429a      	cmp	r2, r3
 80131f4:	da4e      	bge.n	8013294 <fifo_s_prereads+0xd2>
    goto end;

  tmp_read_addr = p_fifo->p_read_addr + offset;
 80131f6:	68fb      	ldr	r3, [r7, #12]
 80131f8:	691a      	ldr	r2, [r3, #16]
 80131fa:	687b      	ldr	r3, [r7, #4]
 80131fc:	4413      	add	r3, r2
 80131fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (tmp_read_addr > p_fifo->p_end_addr)
 8013200:	68fb      	ldr	r3, [r7, #12]
 8013202:	685b      	ldr	r3, [r3, #4]
 8013204:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013206:	429a      	cmp	r2, r3
 8013208:	d908      	bls.n	801321c <fifo_s_prereads+0x5a>
    tmp_read_addr = tmp_read_addr - p_fifo->p_end_addr + p_fifo->p_start_addr - 1;
 801320a:	68fb      	ldr	r3, [r7, #12]
 801320c:	681a      	ldr	r2, [r3, #0]
 801320e:	68fb      	ldr	r3, [r7, #12]
 8013210:	685b      	ldr	r3, [r3, #4]
 8013212:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013214:	1acb      	subs	r3, r1, r3
 8013216:	3b01      	subs	r3, #1
 8013218:	4413      	add	r3, r2
 801321a:	62fb      	str	r3, [r7, #44]	; 0x2c

  len = (len < (p_fifo->used_num - offset)) ? len : (p_fifo->used_num - offset);
 801321c:	68fb      	ldr	r3, [r7, #12]
 801321e:	68da      	ldr	r2, [r3, #12]
 8013220:	687b      	ldr	r3, [r7, #4]
 8013222:	1ad3      	subs	r3, r2, r3
 8013224:	683a      	ldr	r2, [r7, #0]
 8013226:	4293      	cmp	r3, r2
 8013228:	bfa8      	it	ge
 801322a:	4613      	movge	r3, r2
 801322c:	603b      	str	r3, [r7, #0]
  len_to_end = p_fifo->p_end_addr - tmp_read_addr + 1;
 801322e:	68fb      	ldr	r3, [r7, #12]
 8013230:	685a      	ldr	r2, [r3, #4]
 8013232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013234:	1ad3      	subs	r3, r2, r3
 8013236:	3301      	adds	r3, #1
 8013238:	62bb      	str	r3, [r7, #40]	; 0x28

  if (len_to_end >= len) //no rollback
 801323a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801323c:	683b      	ldr	r3, [r7, #0]
 801323e:	429a      	cmp	r2, r3
 8013240:	db08      	blt.n	8013254 <fifo_s_prereads+0x92>
  {
    len_to_end = len;
 8013242:	683b      	ldr	r3, [r7, #0]
 8013244:	62bb      	str	r3, [r7, #40]	; 0x28
    memcpy(p_dest, tmp_read_addr, len_to_end);
 8013246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013248:	461a      	mov	r2, r3
 801324a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801324c:	68b8      	ldr	r0, [r7, #8]
 801324e:	f000 fea3 	bl	8013f98 <memcpy>
 8013252:	e012      	b.n	801327a <fifo_s_prereads+0xb8>
  }
  else //rollback
  {
    len_from_start = len - len_to_end;
 8013254:	683a      	ldr	r2, [r7, #0]
 8013256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013258:	1ad3      	subs	r3, r2, r3
 801325a:	627b      	str	r3, [r7, #36]	; 0x24
    memcpy(p_dest, tmp_read_addr, len_to_end);
 801325c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801325e:	461a      	mov	r2, r3
 8013260:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013262:	68b8      	ldr	r0, [r7, #8]
 8013264:	f000 fe98 	bl	8013f98 <memcpy>
    memcpy(p_dest + len_to_end, p_fifo->p_start_addr, len_from_start);
 8013268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801326a:	68ba      	ldr	r2, [r7, #8]
 801326c:	18d0      	adds	r0, r2, r3
 801326e:	68fb      	ldr	r3, [r7, #12]
 8013270:	681b      	ldr	r3, [r3, #0]
 8013272:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013274:	4619      	mov	r1, r3
 8013276:	f000 fe8f 	bl	8013f98 <memcpy>
  }

  retval = len;
 801327a:	683b      	ldr	r3, [r7, #0]
 801327c:	623b      	str	r3, [r7, #32]
 801327e:	61bc      	str	r4, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013280:	69bb      	ldr	r3, [r7, #24]
 8013282:	f383 8810 	msr	PRIMASK, r3
}
 8013286:	bf00      	nop
  //Interrupt On
  FIFO_RESTORE_CPU_SR(cpu_sr);

  return retval;
 8013288:	6a3b      	ldr	r3, [r7, #32]
 801328a:	e00b      	b.n	80132a4 <fifo_s_prereads+0xe2>
    goto end;
 801328c:	bf00      	nop
 801328e:	e002      	b.n	8013296 <fifo_s_prereads+0xd4>
    goto end;
 8013290:	bf00      	nop
 8013292:	e000      	b.n	8013296 <fifo_s_prereads+0xd4>
    goto end;
 8013294:	bf00      	nop
 8013296:	617c      	str	r4, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013298:	697b      	ldr	r3, [r7, #20]
 801329a:	f383 8810 	msr	PRIMASK, r3
}
 801329e:	bf00      	nop
end:
  //Interrupt On
  FIFO_RESTORE_CPU_SR(cpu_sr);
  return (-1);
 80132a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80132a4:	4618      	mov	r0, r3
 80132a6:	3734      	adds	r7, #52	; 0x34
 80132a8:	46bd      	mov	sp, r7
 80132aa:	bd90      	pop	{r4, r7, pc}

080132ac <fifo_s_isempty>:
//! \retval - None-zero(true) if empty.
//!         - Zero(false) if not empty.
//
//******************************************************************************************
char fifo_s_isempty(fifo_s_t *p_fifo)
{
 80132ac:	b480      	push	{r7}
 80132ae:	b083      	sub	sp, #12
 80132b0:	af00      	add	r7, sp, #0
 80132b2:	6078      	str	r0, [r7, #4]
  //! Check input parameter.
  ASSERT(p_fifo);
  return (p_fifo->used_num ? 0 : 1);
 80132b4:	687b      	ldr	r3, [r7, #4]
 80132b6:	68db      	ldr	r3, [r3, #12]
 80132b8:	2b00      	cmp	r3, #0
 80132ba:	bf0c      	ite	eq
 80132bc:	2301      	moveq	r3, #1
 80132be:	2300      	movne	r3, #0
 80132c0:	b2db      	uxtb	r3, r3
}
 80132c2:	4618      	mov	r0, r3
 80132c4:	370c      	adds	r7, #12
 80132c6:	46bd      	mov	sp, r7
 80132c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132cc:	4770      	bx	lr

080132ce <fifo_init>:
//! \param  [in] UnitCnt is count of fifo elements.
//! \retval 0 if initialize successfully, otherwise return -1.
//
//******************************************************************************************
int fifo_init(fifo_t *p_fifo, void *p_base_addr, char unit_size, int unit_cnt)
{
 80132ce:	b480      	push	{r7}
 80132d0:	b085      	sub	sp, #20
 80132d2:	af00      	add	r7, sp, #0
 80132d4:	60f8      	str	r0, [r7, #12]
 80132d6:	60b9      	str	r1, [r7, #8]
 80132d8:	603b      	str	r3, [r7, #0]
 80132da:	4613      	mov	r3, r2
 80132dc:	71fb      	strb	r3, [r7, #7]
  ASSERT(p_base_addr);
  ASSERT(unit_size);
  ASSERT(unit_cnt);

  //! Initialize FIFO Control Block.
  p_fifo->p_start_addr = (char *)p_base_addr;
 80132de:	68fb      	ldr	r3, [r7, #12]
 80132e0:	68ba      	ldr	r2, [r7, #8]
 80132e2:	601a      	str	r2, [r3, #0]
  p_fifo->p_end_addr = (char *)p_base_addr + unit_size * unit_cnt - 1;
 80132e4:	79fb      	ldrb	r3, [r7, #7]
 80132e6:	683a      	ldr	r2, [r7, #0]
 80132e8:	fb02 f303 	mul.w	r3, r2, r3
 80132ec:	3b01      	subs	r3, #1
 80132ee:	68ba      	ldr	r2, [r7, #8]
 80132f0:	441a      	add	r2, r3
 80132f2:	68fb      	ldr	r3, [r7, #12]
 80132f4:	605a      	str	r2, [r3, #4]
  p_fifo->free_num = unit_cnt;
 80132f6:	68fb      	ldr	r3, [r7, #12]
 80132f8:	683a      	ldr	r2, [r7, #0]
 80132fa:	609a      	str	r2, [r3, #8]
  p_fifo->used_num = 0;
 80132fc:	68fb      	ldr	r3, [r7, #12]
 80132fe:	2200      	movs	r2, #0
 8013300:	60da      	str	r2, [r3, #12]
  p_fifo->unit_size = unit_size;
 8013302:	79fa      	ldrb	r2, [r7, #7]
 8013304:	68fb      	ldr	r3, [r7, #12]
 8013306:	611a      	str	r2, [r3, #16]
  p_fifo->p_read_addr = (char *)p_base_addr;
 8013308:	68fb      	ldr	r3, [r7, #12]
 801330a:	68ba      	ldr	r2, [r7, #8]
 801330c:	615a      	str	r2, [r3, #20]
  p_fifo->p_write_addr = (char *)p_base_addr;
 801330e:	68fb      	ldr	r3, [r7, #12]
 8013310:	68ba      	ldr	r2, [r7, #8]
 8013312:	619a      	str	r2, [r3, #24]

  return (0);
 8013314:	2300      	movs	r3, #0
}
 8013316:	4618      	mov	r0, r3
 8013318:	3714      	adds	r7, #20
 801331a:	46bd      	mov	sp, r7
 801331c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013320:	4770      	bx	lr

08013322 <fifo_put>:
//!
//! \retval 0 if operate successfully, otherwise return -1.
//
//******************************************************************************************
int fifo_put(fifo_t *p_fifo, void *p_element)
{
 8013322:	b590      	push	{r4, r7, lr}
 8013324:	b087      	sub	sp, #28
 8013326:	af00      	add	r7, sp, #0
 8013328:	6078      	str	r0, [r7, #4]
 801332a:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801332c:	f3ef 8310 	mrs	r3, PRIMASK
 8013330:	617b      	str	r3, [r7, #20]
  return(result);
 8013332:	697b      	ldr	r3, [r7, #20]
  FIFO_CPU_SR_TYPE cpu_sr;
  ASSERT(p_fifo);
  ASSERT(p_element);

    //Interrupt Off;
  cpu_sr = FIFO_GET_CPU_SR();
 8013334:	461c      	mov	r4, r3
  __ASM volatile ("cpsid i" : : : "memory");
 8013336:	b672      	cpsid	i
}
 8013338:	bf00      	nop
  FIFO_ENTER_CRITICAL();

  // Full ?
  if (0 == p_fifo->free_num)
 801333a:	687b      	ldr	r3, [r7, #4]
 801333c:	689b      	ldr	r3, [r3, #8]
 801333e:	2b00      	cmp	r3, #0
 8013340:	d029      	beq.n	8013396 <fifo_put+0x74>
    goto end;
  }

  //! Copy Data

  if (p_fifo->p_write_addr > p_fifo->p_end_addr)
 8013342:	687b      	ldr	r3, [r7, #4]
 8013344:	699a      	ldr	r2, [r3, #24]
 8013346:	687b      	ldr	r3, [r7, #4]
 8013348:	685b      	ldr	r3, [r3, #4]
 801334a:	429a      	cmp	r2, r3
 801334c:	d903      	bls.n	8013356 <fifo_put+0x34>
    p_fifo->p_write_addr = p_fifo->p_start_addr;
 801334e:	687b      	ldr	r3, [r7, #4]
 8013350:	681a      	ldr	r2, [r3, #0]
 8013352:	687b      	ldr	r3, [r7, #4]
 8013354:	619a      	str	r2, [r3, #24]

  memcpy(p_fifo->p_write_addr, p_element, p_fifo->unit_size);
 8013356:	687b      	ldr	r3, [r7, #4]
 8013358:	6998      	ldr	r0, [r3, #24]
 801335a:	687b      	ldr	r3, [r7, #4]
 801335c:	691b      	ldr	r3, [r3, #16]
 801335e:	461a      	mov	r2, r3
 8013360:	6839      	ldr	r1, [r7, #0]
 8013362:	f000 fe19 	bl	8013f98 <memcpy>
  p_fifo->p_write_addr += p_fifo->unit_size;
 8013366:	687b      	ldr	r3, [r7, #4]
 8013368:	699b      	ldr	r3, [r3, #24]
 801336a:	687a      	ldr	r2, [r7, #4]
 801336c:	6912      	ldr	r2, [r2, #16]
 801336e:	441a      	add	r2, r3
 8013370:	687b      	ldr	r3, [r7, #4]
 8013372:	619a      	str	r2, [r3, #24]
  p_fifo->free_num--;
 8013374:	687b      	ldr	r3, [r7, #4]
 8013376:	689b      	ldr	r3, [r3, #8]
 8013378:	1e5a      	subs	r2, r3, #1
 801337a:	687b      	ldr	r3, [r7, #4]
 801337c:	609a      	str	r2, [r3, #8]
  p_fifo->used_num++;
 801337e:	687b      	ldr	r3, [r7, #4]
 8013380:	68db      	ldr	r3, [r3, #12]
 8013382:	1c5a      	adds	r2, r3, #1
 8013384:	687b      	ldr	r3, [r7, #4]
 8013386:	60da      	str	r2, [r3, #12]
 8013388:	613c      	str	r4, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801338a:	693b      	ldr	r3, [r7, #16]
 801338c:	f383 8810 	msr	PRIMASK, r3
}
 8013390:	bf00      	nop
  //Interrupt On
  FIFO_RESTORE_CPU_SR(cpu_sr);
  return (0);
 8013392:	2300      	movs	r3, #0
 8013394:	e007      	b.n	80133a6 <fifo_put+0x84>
    goto end;
 8013396:	bf00      	nop
 8013398:	60fc      	str	r4, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801339a:	68fb      	ldr	r3, [r7, #12]
 801339c:	f383 8810 	msr	PRIMASK, r3
}
 80133a0:	bf00      	nop
end:
  //Interrupt On
  FIFO_RESTORE_CPU_SR(cpu_sr);
  return (-1);
 80133a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80133a6:	4618      	mov	r0, r3
 80133a8:	371c      	adds	r7, #28
 80133aa:	46bd      	mov	sp, r7
 80133ac:	bd90      	pop	{r4, r7, pc}

080133ae <fifo_get>:
//!
//! \retval 0 if operate successfully, otherwise return -1.
//
//******************************************************************************************
int fifo_get(fifo_t *p_fifo, void *p_element)
{
 80133ae:	b590      	push	{r4, r7, lr}
 80133b0:	b087      	sub	sp, #28
 80133b2:	af00      	add	r7, sp, #0
 80133b4:	6078      	str	r0, [r7, #4]
 80133b6:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80133b8:	f3ef 8310 	mrs	r3, PRIMASK
 80133bc:	617b      	str	r3, [r7, #20]
  return(result);
 80133be:	697b      	ldr	r3, [r7, #20]
  //! Check input parameters.
  ASSERT(p_fifo);
  ASSERT(p_element);
  
      //Interrupt Off;
  cpu_sr = FIFO_GET_CPU_SR();
 80133c0:	461c      	mov	r4, r3
  __ASM volatile ("cpsid i" : : : "memory");
 80133c2:	b672      	cpsid	i
}
 80133c4:	bf00      	nop
  FIFO_ENTER_CRITICAL();

  // Empty ?
  if (0 == p_fifo->used_num)
 80133c6:	687b      	ldr	r3, [r7, #4]
 80133c8:	68db      	ldr	r3, [r3, #12]
 80133ca:	2b00      	cmp	r3, #0
 80133cc:	d029      	beq.n	8013422 <fifo_get+0x74>
    goto end;
  }

  //! Copy Data

  if (p_fifo->p_read_addr > p_fifo->p_end_addr)
 80133ce:	687b      	ldr	r3, [r7, #4]
 80133d0:	695a      	ldr	r2, [r3, #20]
 80133d2:	687b      	ldr	r3, [r7, #4]
 80133d4:	685b      	ldr	r3, [r3, #4]
 80133d6:	429a      	cmp	r2, r3
 80133d8:	d903      	bls.n	80133e2 <fifo_get+0x34>
  {
    p_fifo->p_read_addr = p_fifo->p_start_addr;
 80133da:	687b      	ldr	r3, [r7, #4]
 80133dc:	681a      	ldr	r2, [r3, #0]
 80133de:	687b      	ldr	r3, [r7, #4]
 80133e0:	615a      	str	r2, [r3, #20]
  }
  memcpy(p_element, p_fifo->p_read_addr, p_fifo->unit_size);
 80133e2:	687b      	ldr	r3, [r7, #4]
 80133e4:	6959      	ldr	r1, [r3, #20]
 80133e6:	687b      	ldr	r3, [r7, #4]
 80133e8:	691b      	ldr	r3, [r3, #16]
 80133ea:	461a      	mov	r2, r3
 80133ec:	6838      	ldr	r0, [r7, #0]
 80133ee:	f000 fdd3 	bl	8013f98 <memcpy>
  p_fifo->p_read_addr += p_fifo->unit_size;
 80133f2:	687b      	ldr	r3, [r7, #4]
 80133f4:	695b      	ldr	r3, [r3, #20]
 80133f6:	687a      	ldr	r2, [r7, #4]
 80133f8:	6912      	ldr	r2, [r2, #16]
 80133fa:	441a      	add	r2, r3
 80133fc:	687b      	ldr	r3, [r7, #4]
 80133fe:	615a      	str	r2, [r3, #20]
  p_fifo->free_num++;
 8013400:	687b      	ldr	r3, [r7, #4]
 8013402:	689b      	ldr	r3, [r3, #8]
 8013404:	1c5a      	adds	r2, r3, #1
 8013406:	687b      	ldr	r3, [r7, #4]
 8013408:	609a      	str	r2, [r3, #8]
  p_fifo->used_num--;
 801340a:	687b      	ldr	r3, [r7, #4]
 801340c:	68db      	ldr	r3, [r3, #12]
 801340e:	1e5a      	subs	r2, r3, #1
 8013410:	687b      	ldr	r3, [r7, #4]
 8013412:	60da      	str	r2, [r3, #12]
 8013414:	613c      	str	r4, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013416:	693b      	ldr	r3, [r7, #16]
 8013418:	f383 8810 	msr	PRIMASK, r3
}
 801341c:	bf00      	nop
  //Interrupt On
  FIFO_RESTORE_CPU_SR(cpu_sr);
  return (0);
 801341e:	2300      	movs	r3, #0
 8013420:	e007      	b.n	8013432 <fifo_get+0x84>
    goto end;
 8013422:	bf00      	nop
 8013424:	60fc      	str	r4, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013426:	68fb      	ldr	r3, [r7, #12]
 8013428:	f383 8810 	msr	PRIMASK, r3
}
 801342c:	bf00      	nop
end:
  //Interrupt On
  FIFO_RESTORE_CPU_SR(cpu_sr);
  return (-1);
 801342e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8013432:	4618      	mov	r0, r3
 8013434:	371c      	adds	r7, #28
 8013436:	46bd      	mov	sp, r7
 8013438:	bd90      	pop	{r4, r7, pc}

0801343a <fifo_get_noprotect>:
//!
//! \retval 0 if operate successfully, otherwise return -1.
//
//******************************************************************************************
int fifo_get_noprotect(fifo_t *p_fifo, void *p_element)
{
 801343a:	b580      	push	{r7, lr}
 801343c:	b082      	sub	sp, #8
 801343e:	af00      	add	r7, sp, #0
 8013440:	6078      	str	r0, [r7, #4]
 8013442:	6039      	str	r1, [r7, #0]
  //! Check input parameters.
  ASSERT(p_fifo);
  ASSERT(p_element);

  // Empty ?
  if (0 == p_fifo->used_num)
 8013444:	687b      	ldr	r3, [r7, #4]
 8013446:	68db      	ldr	r3, [r3, #12]
 8013448:	2b00      	cmp	r3, #0
 801344a:	d102      	bne.n	8013452 <fifo_get_noprotect+0x18>
  {
    //! Error, FIFO is Empty!
    return (-1);
 801344c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013450:	e023      	b.n	801349a <fifo_get_noprotect+0x60>
  }

  //! Copy Data
  if (p_fifo->p_read_addr > p_fifo->p_end_addr)
 8013452:	687b      	ldr	r3, [r7, #4]
 8013454:	695a      	ldr	r2, [r3, #20]
 8013456:	687b      	ldr	r3, [r7, #4]
 8013458:	685b      	ldr	r3, [r3, #4]
 801345a:	429a      	cmp	r2, r3
 801345c:	d903      	bls.n	8013466 <fifo_get_noprotect+0x2c>
  {
    p_fifo->p_read_addr = p_fifo->p_start_addr;
 801345e:	687b      	ldr	r3, [r7, #4]
 8013460:	681a      	ldr	r2, [r3, #0]
 8013462:	687b      	ldr	r3, [r7, #4]
 8013464:	615a      	str	r2, [r3, #20]
  }
  memcpy(p_element, p_fifo->p_read_addr, p_fifo->unit_size);
 8013466:	687b      	ldr	r3, [r7, #4]
 8013468:	6959      	ldr	r1, [r3, #20]
 801346a:	687b      	ldr	r3, [r7, #4]
 801346c:	691b      	ldr	r3, [r3, #16]
 801346e:	461a      	mov	r2, r3
 8013470:	6838      	ldr	r0, [r7, #0]
 8013472:	f000 fd91 	bl	8013f98 <memcpy>
  p_fifo->p_read_addr += p_fifo->unit_size;
 8013476:	687b      	ldr	r3, [r7, #4]
 8013478:	695b      	ldr	r3, [r3, #20]
 801347a:	687a      	ldr	r2, [r7, #4]
 801347c:	6912      	ldr	r2, [r2, #16]
 801347e:	441a      	add	r2, r3
 8013480:	687b      	ldr	r3, [r7, #4]
 8013482:	615a      	str	r2, [r3, #20]
  p_fifo->free_num++;
 8013484:	687b      	ldr	r3, [r7, #4]
 8013486:	689b      	ldr	r3, [r3, #8]
 8013488:	1c5a      	adds	r2, r3, #1
 801348a:	687b      	ldr	r3, [r7, #4]
 801348c:	609a      	str	r2, [r3, #8]
  p_fifo->used_num--;
 801348e:	687b      	ldr	r3, [r7, #4]
 8013490:	68db      	ldr	r3, [r3, #12]
 8013492:	1e5a      	subs	r2, r3, #1
 8013494:	687b      	ldr	r3, [r7, #4]
 8013496:	60da      	str	r2, [r3, #12]

  return (0);
 8013498:	2300      	movs	r3, #0
}
 801349a:	4618      	mov	r0, r3
 801349c:	3708      	adds	r7, #8
 801349e:	46bd      	mov	sp, r7
 80134a0:	bd80      	pop	{r7, pc}

080134a2 <fifo_is_empty>:
//! \retval - None-zero(true) if empty.
//!         - Zero(false) if not empty.
//
//******************************************************************************************
int fifo_is_empty(fifo_t *p_fifo)
{
 80134a2:	b480      	push	{r7}
 80134a4:	b083      	sub	sp, #12
 80134a6:	af00      	add	r7, sp, #0
 80134a8:	6078      	str	r0, [r7, #4]
  //! Check input parameter.
  ASSERT(p_fifo);

  return (0 == p_fifo->used_num);
 80134aa:	687b      	ldr	r3, [r7, #4]
 80134ac:	68db      	ldr	r3, [r3, #12]
 80134ae:	2b00      	cmp	r3, #0
 80134b0:	bf0c      	ite	eq
 80134b2:	2301      	moveq	r3, #1
 80134b4:	2300      	movne	r3, #0
 80134b6:	b2db      	uxtb	r3, r3
}
 80134b8:	4618      	mov	r0, r3
 80134ba:	370c      	adds	r7, #12
 80134bc:	46bd      	mov	sp, r7
 80134be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134c2:	4770      	bx	lr

080134c4 <fifo_is_full>:
//! \retval - None-zero(true) if full.
//!         - Zero(false) if not full.
//
//******************************************************************************************
int fifo_is_full(fifo_t *p_fifo)
{
 80134c4:	b480      	push	{r7}
 80134c6:	b083      	sub	sp, #12
 80134c8:	af00      	add	r7, sp, #0
 80134ca:	6078      	str	r0, [r7, #4]
  //! Check input parameter.
  ASSERT(p_fifo);

  return (0 == p_fifo->free_num);
 80134cc:	687b      	ldr	r3, [r7, #4]
 80134ce:	689b      	ldr	r3, [r3, #8]
 80134d0:	2b00      	cmp	r3, #0
 80134d2:	bf0c      	ite	eq
 80134d4:	2301      	moveq	r3, #1
 80134d6:	2300      	movne	r3, #0
 80134d8:	b2db      	uxtb	r3, r3
}
 80134da:	4618      	mov	r0, r3
 80134dc:	370c      	adds	r7, #12
 80134de:	46bd      	mov	sp, r7
 80134e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134e4:	4770      	bx	lr
	...

080134e8 <heap_malloc>:
static uint32_t block_allocated_bit = 0;

/*-----------------------------------------------------------*/

void *heap_malloc(uint32_t wanted_size)
{
 80134e8:	b580      	push	{r7, lr}
 80134ea:	b088      	sub	sp, #32
 80134ec:	af00      	add	r7, sp, #0
 80134ee:	6078      	str	r0, [r7, #4]
  block_link_t *block, *prev_block, *new_block;
  void *reval = NULL;
 80134f0:	2300      	movs	r3, #0
 80134f2:	617b      	str	r3, [r7, #20]

  if (mutex_init == 0)
 80134f4:	4b4a      	ldr	r3, [pc, #296]	; (8013620 <heap_malloc+0x138>)
 80134f6:	781b      	ldrb	r3, [r3, #0]
 80134f8:	2b00      	cmp	r3, #0
 80134fa:	d102      	bne.n	8013502 <heap_malloc+0x1a>
  {
    mutex_init = 1;
 80134fc:	4b48      	ldr	r3, [pc, #288]	; (8013620 <heap_malloc+0x138>)
 80134fe:	2201      	movs	r2, #1
 8013500:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8013502:	f3ef 8310 	mrs	r3, PRIMASK
 8013506:	60fb      	str	r3, [r7, #12]
  return(result);
 8013508:	68fb      	ldr	r3, [r7, #12]
    MUTEX_INIT(mem_mutex);
  }

  MUTEX_LOCK(mem_mutex);
 801350a:	4a46      	ldr	r2, [pc, #280]	; (8013624 <heap_malloc+0x13c>)
 801350c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 801350e:	b672      	cpsid	i
}
 8013510:	bf00      	nop
  {
    /* If this is the first call to malloc then the heap will require
        initialisation to setup the list of free blocks. */
    if (end == NULL)
 8013512:	4b45      	ldr	r3, [pc, #276]	; (8013628 <heap_malloc+0x140>)
 8013514:	681b      	ldr	r3, [r3, #0]
 8013516:	2b00      	cmp	r3, #0
 8013518:	d101      	bne.n	801351e <heap_malloc+0x36>
    {
      heap_init();
 801351a:	f000 f8d5 	bl	80136c8 <heap_init>

    /* Check the requested block size is not so large that the top bit is
        set.  The top bit of the block size member of the block_link_t structure
        is used to determine who owns the block - the application or the
        kernel, so it must be free. */
    if ((wanted_size & block_allocated_bit) == 0)
 801351e:	4b43      	ldr	r3, [pc, #268]	; (801362c <heap_malloc+0x144>)
 8013520:	681a      	ldr	r2, [r3, #0]
 8013522:	687b      	ldr	r3, [r7, #4]
 8013524:	4013      	ands	r3, r2
 8013526:	2b00      	cmp	r3, #0
 8013528:	d16d      	bne.n	8013606 <heap_malloc+0x11e>
    {
      /* The wanted size is increased so it can contain a block_link_t
            structure in addition to the requested amount of bytes. */
      if (wanted_size > 0)
 801352a:	687b      	ldr	r3, [r7, #4]
 801352c:	2b00      	cmp	r3, #0
 801352e:	d00d      	beq.n	801354c <heap_malloc+0x64>
      {
        wanted_size += STRUCT_SIZE;
 8013530:	2208      	movs	r2, #8
 8013532:	687b      	ldr	r3, [r7, #4]
 8013534:	4413      	add	r3, r2
 8013536:	607b      	str	r3, [r7, #4]

        /* Ensure that blocks are always aligned to the required number
                of bytes. */
        if ((wanted_size & BYTE_ALIGNMENT_MASK) != 0x00)
 8013538:	687b      	ldr	r3, [r7, #4]
 801353a:	f003 0307 	and.w	r3, r3, #7
 801353e:	2b00      	cmp	r3, #0
 8013540:	d004      	beq.n	801354c <heap_malloc+0x64>
        {
          /* Byte alignment required. */
          wanted_size += (BYTE_ALIGNMENT - (wanted_size & BYTE_ALIGNMENT_MASK));
 8013542:	687b      	ldr	r3, [r7, #4]
 8013544:	f023 0307 	bic.w	r3, r3, #7
 8013548:	3308      	adds	r3, #8
 801354a:	607b      	str	r3, [r7, #4]
          HEAP_ASSERT((wanted_size & BYTE_ALIGNMENT_MASK) == 0);
        }
      }

      if ((wanted_size > 0) && (wanted_size <= free_bytes_remain))
 801354c:	687b      	ldr	r3, [r7, #4]
 801354e:	2b00      	cmp	r3, #0
 8013550:	d059      	beq.n	8013606 <heap_malloc+0x11e>
 8013552:	4b37      	ldr	r3, [pc, #220]	; (8013630 <heap_malloc+0x148>)
 8013554:	681b      	ldr	r3, [r3, #0]
 8013556:	687a      	ldr	r2, [r7, #4]
 8013558:	429a      	cmp	r2, r3
 801355a:	d854      	bhi.n	8013606 <heap_malloc+0x11e>
      {
        /* Traverse the list from the start    (lowest address) block until
                one    of adequate size is found. */
        prev_block = &start;
 801355c:	4b35      	ldr	r3, [pc, #212]	; (8013634 <heap_malloc+0x14c>)
 801355e:	61bb      	str	r3, [r7, #24]
        block = start.next_free;
 8013560:	4b34      	ldr	r3, [pc, #208]	; (8013634 <heap_malloc+0x14c>)
 8013562:	681b      	ldr	r3, [r3, #0]
 8013564:	61fb      	str	r3, [r7, #28]
        while ((block->block_size < wanted_size) && (block->next_free != NULL))
 8013566:	e004      	b.n	8013572 <heap_malloc+0x8a>
        {
          prev_block = block;
 8013568:	69fb      	ldr	r3, [r7, #28]
 801356a:	61bb      	str	r3, [r7, #24]
          block = block->next_free;
 801356c:	69fb      	ldr	r3, [r7, #28]
 801356e:	681b      	ldr	r3, [r3, #0]
 8013570:	61fb      	str	r3, [r7, #28]
        while ((block->block_size < wanted_size) && (block->next_free != NULL))
 8013572:	69fb      	ldr	r3, [r7, #28]
 8013574:	685b      	ldr	r3, [r3, #4]
 8013576:	687a      	ldr	r2, [r7, #4]
 8013578:	429a      	cmp	r2, r3
 801357a:	d903      	bls.n	8013584 <heap_malloc+0x9c>
 801357c:	69fb      	ldr	r3, [r7, #28]
 801357e:	681b      	ldr	r3, [r3, #0]
 8013580:	2b00      	cmp	r3, #0
 8013582:	d1f1      	bne.n	8013568 <heap_malloc+0x80>
        }

        /* If the end marker was reached then a block of adequate size
                was    not found. */
        if (block != end)
 8013584:	4b28      	ldr	r3, [pc, #160]	; (8013628 <heap_malloc+0x140>)
 8013586:	681b      	ldr	r3, [r3, #0]
 8013588:	69fa      	ldr	r2, [r7, #28]
 801358a:	429a      	cmp	r2, r3
 801358c:	d03b      	beq.n	8013606 <heap_malloc+0x11e>
        {
          /* Return the memory space pointed to - jumping over the
                    block_link_t structure at its start. */
          reval = (void *)(((uint8_t *)prev_block->next_free) + STRUCT_SIZE);
 801358e:	69bb      	ldr	r3, [r7, #24]
 8013590:	681b      	ldr	r3, [r3, #0]
 8013592:	2208      	movs	r2, #8
 8013594:	4413      	add	r3, r2
 8013596:	617b      	str	r3, [r7, #20]

          /* This block is being returned for use so must be taken out
                    of the list of free blocks. */
          prev_block->next_free = block->next_free;
 8013598:	69fb      	ldr	r3, [r7, #28]
 801359a:	681a      	ldr	r2, [r3, #0]
 801359c:	69bb      	ldr	r3, [r7, #24]
 801359e:	601a      	str	r2, [r3, #0]

          /* If the block is larger than required it can be split into
                    two. */
          if ((block->block_size - wanted_size) > MINIMUM_BLOCK_SIZE)
 80135a0:	69fb      	ldr	r3, [r7, #28]
 80135a2:	685a      	ldr	r2, [r3, #4]
 80135a4:	687b      	ldr	r3, [r7, #4]
 80135a6:	1ad2      	subs	r2, r2, r3
 80135a8:	2308      	movs	r3, #8
 80135aa:	005b      	lsls	r3, r3, #1
 80135ac:	429a      	cmp	r2, r3
 80135ae:	d90f      	bls.n	80135d0 <heap_malloc+0xe8>
          {
            /* This block is to be split into two.  Create a new
                        block following the number of bytes requested. The void
                        cast is used to prevent byte alignment warnings from the
                        compiler. */
            new_block = (void *)(((uint8_t *)block) + wanted_size);
 80135b0:	69fa      	ldr	r2, [r7, #28]
 80135b2:	687b      	ldr	r3, [r7, #4]
 80135b4:	4413      	add	r3, r2
 80135b6:	613b      	str	r3, [r7, #16]
            HEAP_ASSERT((((uint32_t)new_block) & BYTE_ALIGNMENT_MASK) == 0);

            /* Calculate the sizes of two blocks split from the
                        single block. */
            new_block->block_size = block->block_size - wanted_size;
 80135b8:	69fb      	ldr	r3, [r7, #28]
 80135ba:	685a      	ldr	r2, [r3, #4]
 80135bc:	687b      	ldr	r3, [r7, #4]
 80135be:	1ad2      	subs	r2, r2, r3
 80135c0:	693b      	ldr	r3, [r7, #16]
 80135c2:	605a      	str	r2, [r3, #4]
            block->block_size = wanted_size;
 80135c4:	69fb      	ldr	r3, [r7, #28]
 80135c6:	687a      	ldr	r2, [r7, #4]
 80135c8:	605a      	str	r2, [r3, #4]

            /* Insert the new block into the list of free blocks. */
            insert_into_free_list(new_block);
 80135ca:	6938      	ldr	r0, [r7, #16]
 80135cc:	f000 f8de 	bl	801378c <insert_into_free_list>
          }

          free_bytes_remain -= block->block_size;
 80135d0:	4b17      	ldr	r3, [pc, #92]	; (8013630 <heap_malloc+0x148>)
 80135d2:	681a      	ldr	r2, [r3, #0]
 80135d4:	69fb      	ldr	r3, [r7, #28]
 80135d6:	685b      	ldr	r3, [r3, #4]
 80135d8:	1ad3      	subs	r3, r2, r3
 80135da:	4a15      	ldr	r2, [pc, #84]	; (8013630 <heap_malloc+0x148>)
 80135dc:	6013      	str	r3, [r2, #0]

          if (free_bytes_remain < ever_free_bytes_remain)
 80135de:	4b14      	ldr	r3, [pc, #80]	; (8013630 <heap_malloc+0x148>)
 80135e0:	681a      	ldr	r2, [r3, #0]
 80135e2:	4b15      	ldr	r3, [pc, #84]	; (8013638 <heap_malloc+0x150>)
 80135e4:	681b      	ldr	r3, [r3, #0]
 80135e6:	429a      	cmp	r2, r3
 80135e8:	d203      	bcs.n	80135f2 <heap_malloc+0x10a>
          {
            ever_free_bytes_remain = free_bytes_remain;
 80135ea:	4b11      	ldr	r3, [pc, #68]	; (8013630 <heap_malloc+0x148>)
 80135ec:	681b      	ldr	r3, [r3, #0]
 80135ee:	4a12      	ldr	r2, [pc, #72]	; (8013638 <heap_malloc+0x150>)
 80135f0:	6013      	str	r3, [r2, #0]
          }

          /* The block is being returned - it is allocated and owned
                    by the application and has no "next" block. */
          block->block_size |= block_allocated_bit;
 80135f2:	69fb      	ldr	r3, [r7, #28]
 80135f4:	685a      	ldr	r2, [r3, #4]
 80135f6:	4b0d      	ldr	r3, [pc, #52]	; (801362c <heap_malloc+0x144>)
 80135f8:	681b      	ldr	r3, [r3, #0]
 80135fa:	431a      	orrs	r2, r3
 80135fc:	69fb      	ldr	r3, [r7, #28]
 80135fe:	605a      	str	r2, [r3, #4]
          block->next_free = NULL;
 8013600:	69fb      	ldr	r3, [r7, #28]
 8013602:	2200      	movs	r2, #0
 8013604:	601a      	str	r2, [r3, #0]
        }
      }
    }
  }
  MUTEX_UNLOCK(mem_mutex);
 8013606:	4b07      	ldr	r3, [pc, #28]	; (8013624 <heap_malloc+0x13c>)
 8013608:	681b      	ldr	r3, [r3, #0]
 801360a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801360c:	68bb      	ldr	r3, [r7, #8]
 801360e:	f383 8810 	msr	PRIMASK, r3
}
 8013612:	bf00      	nop

  HEAP_ASSERT((((uint32_t)reval) & (uint32_t)BYTE_ALIGNMENT_MASK) == 0);
  return reval;
 8013614:	697b      	ldr	r3, [r7, #20]
}
 8013616:	4618      	mov	r0, r3
 8013618:	3720      	adds	r7, #32
 801361a:	46bd      	mov	sp, r7
 801361c:	bd80      	pop	{r7, pc}
 801361e:	bf00      	nop
 8013620:	20017468 	.word	0x20017468
 8013624:	20008464 	.word	0x20008464
 8013628:	20017474 	.word	0x20017474
 801362c:	20017480 	.word	0x20017480
 8013630:	20017478 	.word	0x20017478
 8013634:	2001746c 	.word	0x2001746c
 8013638:	2001747c 	.word	0x2001747c

0801363c <heap_free>:
/*-----------------------------------------------------------*/

void heap_free(void *pv)
{
 801363c:	b580      	push	{r7, lr}
 801363e:	b086      	sub	sp, #24
 8013640:	af00      	add	r7, sp, #0
 8013642:	6078      	str	r0, [r7, #4]
  uint8_t *puc = (uint8_t *)pv;
 8013644:	687b      	ldr	r3, [r7, #4]
 8013646:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8013648:	f3ef 8310 	mrs	r3, PRIMASK
 801364c:	60fb      	str	r3, [r7, #12]
  return(result);
 801364e:	68fb      	ldr	r3, [r7, #12]
  block_link_t *block;

  MUTEX_LOCK(mem_mutex);
 8013650:	4a1a      	ldr	r2, [pc, #104]	; (80136bc <heap_free+0x80>)
 8013652:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8013654:	b672      	cpsid	i
}
 8013656:	bf00      	nop

  if (pv != NULL)
 8013658:	687b      	ldr	r3, [r7, #4]
 801365a:	2b00      	cmp	r3, #0
 801365c:	d023      	beq.n	80136a6 <heap_free+0x6a>
  {
    /* The memory being freed will have an block_link_t structure immediately
        before it. */
    puc -= STRUCT_SIZE;
 801365e:	2308      	movs	r3, #8
 8013660:	425b      	negs	r3, r3
 8013662:	697a      	ldr	r2, [r7, #20]
 8013664:	4413      	add	r3, r2
 8013666:	617b      	str	r3, [r7, #20]

    /* This casting is to keep the compiler from issuing warnings. */
    block = (void *)puc;
 8013668:	697b      	ldr	r3, [r7, #20]
 801366a:	613b      	str	r3, [r7, #16]

    /* Check the block is actually allocated. */
    HEAP_ASSERT((block->block_size & block_allocated_bit) != 0);
    HEAP_ASSERT(block->next_free == NULL);

    if ((block->block_size & block_allocated_bit) != 0)
 801366c:	693b      	ldr	r3, [r7, #16]
 801366e:	685a      	ldr	r2, [r3, #4]
 8013670:	4b13      	ldr	r3, [pc, #76]	; (80136c0 <heap_free+0x84>)
 8013672:	681b      	ldr	r3, [r3, #0]
 8013674:	4013      	ands	r3, r2
 8013676:	2b00      	cmp	r3, #0
 8013678:	d015      	beq.n	80136a6 <heap_free+0x6a>
    {
      if (block->next_free == NULL)
 801367a:	693b      	ldr	r3, [r7, #16]
 801367c:	681b      	ldr	r3, [r3, #0]
 801367e:	2b00      	cmp	r3, #0
 8013680:	d111      	bne.n	80136a6 <heap_free+0x6a>
      {
        /* The block is being returned to the heap - it is no longer
                allocated. */
        block->block_size &= ~block_allocated_bit;
 8013682:	693b      	ldr	r3, [r7, #16]
 8013684:	685a      	ldr	r2, [r3, #4]
 8013686:	4b0e      	ldr	r3, [pc, #56]	; (80136c0 <heap_free+0x84>)
 8013688:	681b      	ldr	r3, [r3, #0]
 801368a:	43db      	mvns	r3, r3
 801368c:	401a      	ands	r2, r3
 801368e:	693b      	ldr	r3, [r7, #16]
 8013690:	605a      	str	r2, [r3, #4]

        {
          /* Add this block to the list of free blocks. */
          free_bytes_remain += block->block_size;
 8013692:	693b      	ldr	r3, [r7, #16]
 8013694:	685a      	ldr	r2, [r3, #4]
 8013696:	4b0b      	ldr	r3, [pc, #44]	; (80136c4 <heap_free+0x88>)
 8013698:	681b      	ldr	r3, [r3, #0]
 801369a:	4413      	add	r3, r2
 801369c:	4a09      	ldr	r2, [pc, #36]	; (80136c4 <heap_free+0x88>)
 801369e:	6013      	str	r3, [r2, #0]
          insert_into_free_list(((block_link_t *)block));
 80136a0:	6938      	ldr	r0, [r7, #16]
 80136a2:	f000 f873 	bl	801378c <insert_into_free_list>
        }
      }
    }
  }
  MUTEX_UNLOCK(mem_mutex);
 80136a6:	4b05      	ldr	r3, [pc, #20]	; (80136bc <heap_free+0x80>)
 80136a8:	681b      	ldr	r3, [r3, #0]
 80136aa:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80136ac:	68bb      	ldr	r3, [r7, #8]
 80136ae:	f383 8810 	msr	PRIMASK, r3
}
 80136b2:	bf00      	nop
}
 80136b4:	bf00      	nop
 80136b6:	3718      	adds	r7, #24
 80136b8:	46bd      	mov	sp, r7
 80136ba:	bd80      	pop	{r7, pc}
 80136bc:	20008464 	.word	0x20008464
 80136c0:	20017480 	.word	0x20017480
 80136c4:	20017478 	.word	0x20017478

080136c8 <heap_init>:
  return ever_free_bytes_remain;
}
/*-----------------------------------------------------------*/

static void heap_init(void)
{
 80136c8:	b480      	push	{r7}
 80136ca:	b085      	sub	sp, #20
 80136cc:	af00      	add	r7, sp, #0
  block_link_t *first_free_block;
  uint8_t *aligned_heap;
  uint32_t address;
  uint32_t total_heap_size = TOTAL_HEAP_SIZE;
 80136ce:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80136d2:	60bb      	str	r3, [r7, #8]

  /* Ensure the heap starts on a correctly aligned boundary. */
  address = (uint32_t)heap;
 80136d4:	4b27      	ldr	r3, [pc, #156]	; (8013774 <heap_init+0xac>)
 80136d6:	60fb      	str	r3, [r7, #12]

  if ((address & BYTE_ALIGNMENT_MASK) != 0)
 80136d8:	68fb      	ldr	r3, [r7, #12]
 80136da:	f003 0307 	and.w	r3, r3, #7
 80136de:	2b00      	cmp	r3, #0
 80136e0:	d00c      	beq.n	80136fc <heap_init+0x34>
  {
    address += (BYTE_ALIGNMENT - 1);
 80136e2:	68fb      	ldr	r3, [r7, #12]
 80136e4:	3307      	adds	r3, #7
 80136e6:	60fb      	str	r3, [r7, #12]
    address &= ~((uint32_t)BYTE_ALIGNMENT_MASK);
 80136e8:	68fb      	ldr	r3, [r7, #12]
 80136ea:	f023 0307 	bic.w	r3, r3, #7
 80136ee:	60fb      	str	r3, [r7, #12]
    total_heap_size -= address - (uint32_t)heap;
 80136f0:	68ba      	ldr	r2, [r7, #8]
 80136f2:	68fb      	ldr	r3, [r7, #12]
 80136f4:	1ad3      	subs	r3, r2, r3
 80136f6:	4a1f      	ldr	r2, [pc, #124]	; (8013774 <heap_init+0xac>)
 80136f8:	4413      	add	r3, r2
 80136fa:	60bb      	str	r3, [r7, #8]
  }

  aligned_heap = (uint8_t *)address;
 80136fc:	68fb      	ldr	r3, [r7, #12]
 80136fe:	607b      	str	r3, [r7, #4]

  /* start is used to hold a pointer to the first item in the list of free
    blocks.  The void cast is used to prevent compiler warnings. */
  start.next_free = (void *)aligned_heap;
 8013700:	4a1d      	ldr	r2, [pc, #116]	; (8013778 <heap_init+0xb0>)
 8013702:	687b      	ldr	r3, [r7, #4]
 8013704:	6013      	str	r3, [r2, #0]
  start.block_size = (uint32_t)0;
 8013706:	4b1c      	ldr	r3, [pc, #112]	; (8013778 <heap_init+0xb0>)
 8013708:	2200      	movs	r2, #0
 801370a:	605a      	str	r2, [r3, #4]

  /* end is used to mark the end of the list of free blocks and is inserted
    at the end of the heap space. */
  address = ((uint32_t)aligned_heap) + total_heap_size;
 801370c:	687b      	ldr	r3, [r7, #4]
 801370e:	68ba      	ldr	r2, [r7, #8]
 8013710:	4413      	add	r3, r2
 8013712:	60fb      	str	r3, [r7, #12]
  address -= STRUCT_SIZE;
 8013714:	2208      	movs	r2, #8
 8013716:	68fb      	ldr	r3, [r7, #12]
 8013718:	1a9b      	subs	r3, r3, r2
 801371a:	60fb      	str	r3, [r7, #12]
  address &= ~((uint32_t)BYTE_ALIGNMENT_MASK);
 801371c:	68fb      	ldr	r3, [r7, #12]
 801371e:	f023 0307 	bic.w	r3, r3, #7
 8013722:	60fb      	str	r3, [r7, #12]
  end = (void *)address;
 8013724:	68fb      	ldr	r3, [r7, #12]
 8013726:	4a15      	ldr	r2, [pc, #84]	; (801377c <heap_init+0xb4>)
 8013728:	6013      	str	r3, [r2, #0]
  end->block_size = 0;
 801372a:	4b14      	ldr	r3, [pc, #80]	; (801377c <heap_init+0xb4>)
 801372c:	681b      	ldr	r3, [r3, #0]
 801372e:	2200      	movs	r2, #0
 8013730:	605a      	str	r2, [r3, #4]
  end->next_free = NULL;
 8013732:	4b12      	ldr	r3, [pc, #72]	; (801377c <heap_init+0xb4>)
 8013734:	681b      	ldr	r3, [r3, #0]
 8013736:	2200      	movs	r2, #0
 8013738:	601a      	str	r2, [r3, #0]

  /* To start with there is a single free block that is sized to take up the
    entire heap space, minus the space taken by end. */
  first_free_block = (void *)aligned_heap;
 801373a:	687b      	ldr	r3, [r7, #4]
 801373c:	603b      	str	r3, [r7, #0]
  first_free_block->block_size = address - (uint32_t)first_free_block;
 801373e:	683b      	ldr	r3, [r7, #0]
 8013740:	68fa      	ldr	r2, [r7, #12]
 8013742:	1ad2      	subs	r2, r2, r3
 8013744:	683b      	ldr	r3, [r7, #0]
 8013746:	605a      	str	r2, [r3, #4]
  first_free_block->next_free = end;
 8013748:	4b0c      	ldr	r3, [pc, #48]	; (801377c <heap_init+0xb4>)
 801374a:	681a      	ldr	r2, [r3, #0]
 801374c:	683b      	ldr	r3, [r7, #0]
 801374e:	601a      	str	r2, [r3, #0]

  /* Only one block exists - and it covers the entire usable heap space. */
  ever_free_bytes_remain = first_free_block->block_size;
 8013750:	683b      	ldr	r3, [r7, #0]
 8013752:	685b      	ldr	r3, [r3, #4]
 8013754:	4a0a      	ldr	r2, [pc, #40]	; (8013780 <heap_init+0xb8>)
 8013756:	6013      	str	r3, [r2, #0]
  free_bytes_remain = first_free_block->block_size;
 8013758:	683b      	ldr	r3, [r7, #0]
 801375a:	685b      	ldr	r3, [r3, #4]
 801375c:	4a09      	ldr	r2, [pc, #36]	; (8013784 <heap_init+0xbc>)
 801375e:	6013      	str	r3, [r2, #0]

  /* Work out the position of the top bit in a uint32_t variable. */
  block_allocated_bit = ((uint32_t)1) << ((sizeof(uint32_t) * BITS_PER_BYTE) - 1);
 8013760:	4b09      	ldr	r3, [pc, #36]	; (8013788 <heap_init+0xc0>)
 8013762:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8013766:	601a      	str	r2, [r3, #0]
}
 8013768:	bf00      	nop
 801376a:	3714      	adds	r7, #20
 801376c:	46bd      	mov	sp, r7
 801376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013772:	4770      	bx	lr
 8013774:	20008468 	.word	0x20008468
 8013778:	2001746c 	.word	0x2001746c
 801377c:	20017474 	.word	0x20017474
 8013780:	2001747c 	.word	0x2001747c
 8013784:	20017478 	.word	0x20017478
 8013788:	20017480 	.word	0x20017480

0801378c <insert_into_free_list>:
/*-----------------------------------------------------------*/

static void insert_into_free_list(block_link_t *block_to_insert)
{
 801378c:	b480      	push	{r7}
 801378e:	b085      	sub	sp, #20
 8013790:	af00      	add	r7, sp, #0
 8013792:	6078      	str	r0, [r7, #4]
  block_link_t *iterator;
  uint8_t *puc;

  /* Iterate through the list until a block is found that has a higher address
    than the block being inserted. */
  for (iterator = &start; iterator->next_free < block_to_insert; iterator = iterator->next_free)
 8013794:	4b28      	ldr	r3, [pc, #160]	; (8013838 <insert_into_free_list+0xac>)
 8013796:	60fb      	str	r3, [r7, #12]
 8013798:	e002      	b.n	80137a0 <insert_into_free_list+0x14>
 801379a:	68fb      	ldr	r3, [r7, #12]
 801379c:	681b      	ldr	r3, [r3, #0]
 801379e:	60fb      	str	r3, [r7, #12]
 80137a0:	68fb      	ldr	r3, [r7, #12]
 80137a2:	681b      	ldr	r3, [r3, #0]
 80137a4:	687a      	ldr	r2, [r7, #4]
 80137a6:	429a      	cmp	r2, r3
 80137a8:	d8f7      	bhi.n	801379a <insert_into_free_list+0xe>
    /* Nothing to do here, just iterate to the right position. */
  }

  /* Do the block being inserted, and the block it is being inserted after
    make a contiguous block of memory? */
  puc = (uint8_t *)iterator;
 80137aa:	68fb      	ldr	r3, [r7, #12]
 80137ac:	60bb      	str	r3, [r7, #8]
  if ((puc + iterator->block_size) == (uint8_t *)block_to_insert)
 80137ae:	68fb      	ldr	r3, [r7, #12]
 80137b0:	685b      	ldr	r3, [r3, #4]
 80137b2:	68ba      	ldr	r2, [r7, #8]
 80137b4:	4413      	add	r3, r2
 80137b6:	687a      	ldr	r2, [r7, #4]
 80137b8:	429a      	cmp	r2, r3
 80137ba:	d108      	bne.n	80137ce <insert_into_free_list+0x42>
  {
    iterator->block_size += block_to_insert->block_size;
 80137bc:	68fb      	ldr	r3, [r7, #12]
 80137be:	685a      	ldr	r2, [r3, #4]
 80137c0:	687b      	ldr	r3, [r7, #4]
 80137c2:	685b      	ldr	r3, [r3, #4]
 80137c4:	441a      	add	r2, r3
 80137c6:	68fb      	ldr	r3, [r7, #12]
 80137c8:	605a      	str	r2, [r3, #4]
    block_to_insert = iterator;
 80137ca:	68fb      	ldr	r3, [r7, #12]
 80137cc:	607b      	str	r3, [r7, #4]
  }

  /* Do the block being inserted, and the block it is being inserted before
    make a contiguous block of memory? */
  puc = (uint8_t *)block_to_insert;
 80137ce:	687b      	ldr	r3, [r7, #4]
 80137d0:	60bb      	str	r3, [r7, #8]
  if ((puc + block_to_insert->block_size) == (uint8_t *)iterator->next_free)
 80137d2:	687b      	ldr	r3, [r7, #4]
 80137d4:	685b      	ldr	r3, [r3, #4]
 80137d6:	68ba      	ldr	r2, [r7, #8]
 80137d8:	441a      	add	r2, r3
 80137da:	68fb      	ldr	r3, [r7, #12]
 80137dc:	681b      	ldr	r3, [r3, #0]
 80137de:	429a      	cmp	r2, r3
 80137e0:	d118      	bne.n	8013814 <insert_into_free_list+0x88>
  {
    if (iterator->next_free != end)
 80137e2:	68fb      	ldr	r3, [r7, #12]
 80137e4:	681a      	ldr	r2, [r3, #0]
 80137e6:	4b15      	ldr	r3, [pc, #84]	; (801383c <insert_into_free_list+0xb0>)
 80137e8:	681b      	ldr	r3, [r3, #0]
 80137ea:	429a      	cmp	r2, r3
 80137ec:	d00d      	beq.n	801380a <insert_into_free_list+0x7e>
    {
      /* Form one big block from the two blocks. */
      block_to_insert->block_size += iterator->next_free->block_size;
 80137ee:	687b      	ldr	r3, [r7, #4]
 80137f0:	685a      	ldr	r2, [r3, #4]
 80137f2:	68fb      	ldr	r3, [r7, #12]
 80137f4:	681b      	ldr	r3, [r3, #0]
 80137f6:	685b      	ldr	r3, [r3, #4]
 80137f8:	441a      	add	r2, r3
 80137fa:	687b      	ldr	r3, [r7, #4]
 80137fc:	605a      	str	r2, [r3, #4]
      block_to_insert->next_free = iterator->next_free->next_free;
 80137fe:	68fb      	ldr	r3, [r7, #12]
 8013800:	681b      	ldr	r3, [r3, #0]
 8013802:	681a      	ldr	r2, [r3, #0]
 8013804:	687b      	ldr	r3, [r7, #4]
 8013806:	601a      	str	r2, [r3, #0]
 8013808:	e008      	b.n	801381c <insert_into_free_list+0x90>
    }
    else
    {
      block_to_insert->next_free = end;
 801380a:	4b0c      	ldr	r3, [pc, #48]	; (801383c <insert_into_free_list+0xb0>)
 801380c:	681a      	ldr	r2, [r3, #0]
 801380e:	687b      	ldr	r3, [r7, #4]
 8013810:	601a      	str	r2, [r3, #0]
 8013812:	e003      	b.n	801381c <insert_into_free_list+0x90>
    }
  }
  else
  {
    block_to_insert->next_free = iterator->next_free;
 8013814:	68fb      	ldr	r3, [r7, #12]
 8013816:	681a      	ldr	r2, [r3, #0]
 8013818:	687b      	ldr	r3, [r7, #4]
 801381a:	601a      	str	r2, [r3, #0]

  /* If the block being inserted plugged a gab, so was merged with the block
    before and the block after, then it's next_free pointer will have
    already been set, and should not be set here as that would make it point
    to itself. */
  if (iterator != block_to_insert)
 801381c:	68fa      	ldr	r2, [r7, #12]
 801381e:	687b      	ldr	r3, [r7, #4]
 8013820:	429a      	cmp	r2, r3
 8013822:	d002      	beq.n	801382a <insert_into_free_list+0x9e>
  {
    iterator->next_free = block_to_insert;
 8013824:	68fb      	ldr	r3, [r7, #12]
 8013826:	687a      	ldr	r2, [r7, #4]
 8013828:	601a      	str	r2, [r3, #0]
  }
}
 801382a:	bf00      	nop
 801382c:	3714      	adds	r7, #20
 801382e:	46bd      	mov	sp, r7
 8013830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013834:	4770      	bx	lr
 8013836:	bf00      	nop
 8013838:	2001746c 	.word	0x2001746c
 801383c:	20017474 	.word	0x20017474

08013840 <get_crc16>:
**  Descriptions: CRC16 checksum function
**  Input:        Data to check,Stream length, initialized checksum
**  Output:       CRC checksum
*/
uint16_t get_crc16(uint8_t *pchMessage,uint32_t dwLength,uint16_t wCRC)
{
 8013840:	b480      	push	{r7}
 8013842:	b087      	sub	sp, #28
 8013844:	af00      	add	r7, sp, #0
 8013846:	60f8      	str	r0, [r7, #12]
 8013848:	60b9      	str	r1, [r7, #8]
 801384a:	4613      	mov	r3, r2
 801384c:	80fb      	strh	r3, [r7, #6]
    uint8_t chData;
    if (pchMessage == NULL)
 801384e:	68fb      	ldr	r3, [r7, #12]
 8013850:	2b00      	cmp	r3, #0
 8013852:	d113      	bne.n	801387c <get_crc16+0x3c>
    {
        return 0xFFFF;
 8013854:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013858:	e016      	b.n	8013888 <get_crc16+0x48>
    }

    while(dwLength--)
    {
        chData = *pchMessage++;
 801385a:	68fb      	ldr	r3, [r7, #12]
 801385c:	1c5a      	adds	r2, r3, #1
 801385e:	60fa      	str	r2, [r7, #12]
 8013860:	781b      	ldrb	r3, [r3, #0]
 8013862:	75fb      	strb	r3, [r7, #23]
        (wCRC) = ((uint16_t)(wCRC) >> 8)  ^ wCRC_Table[((uint16_t)(wCRC) ^ (uint16_t)(chData)) & 0x00ff];
 8013864:	88fb      	ldrh	r3, [r7, #6]
 8013866:	0a1b      	lsrs	r3, r3, #8
 8013868:	b29a      	uxth	r2, r3
 801386a:	88f9      	ldrh	r1, [r7, #6]
 801386c:	7dfb      	ldrb	r3, [r7, #23]
 801386e:	404b      	eors	r3, r1
 8013870:	b2db      	uxtb	r3, r3
 8013872:	4908      	ldr	r1, [pc, #32]	; (8013894 <get_crc16+0x54>)
 8013874:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8013878:	4053      	eors	r3, r2
 801387a:	80fb      	strh	r3, [r7, #6]
    while(dwLength--)
 801387c:	68bb      	ldr	r3, [r7, #8]
 801387e:	1e5a      	subs	r2, r3, #1
 8013880:	60ba      	str	r2, [r7, #8]
 8013882:	2b00      	cmp	r3, #0
 8013884:	d1e9      	bne.n	801385a <get_crc16+0x1a>
    }

    return wCRC;
 8013886:	88fb      	ldrh	r3, [r7, #6]
}
 8013888:	4618      	mov	r0, r3
 801388a:	371c      	adds	r7, #28
 801388c:	46bd      	mov	sp, r7
 801388e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013892:	4770      	bx	lr
 8013894:	08015620 	.word	0x08015620

08013898 <verify_crc16>:
**  Input:        Data to Verify,Stream length = Data + checksum
**  Output:       True or False (CRC Verify Result)
*/
//CRC 的验证方法也可以是看append后的字节流经过CRC运算后结果是否为零来判断
uint32_t verify_crc16(uint8_t *pchMessage, uint32_t dwLength)
{
 8013898:	b580      	push	{r7, lr}
 801389a:	b084      	sub	sp, #16
 801389c:	af00      	add	r7, sp, #0
 801389e:	6078      	str	r0, [r7, #4]
 80138a0:	6039      	str	r1, [r7, #0]
    uint16_t wExpected = 0;
 80138a2:	2300      	movs	r3, #0
 80138a4:	81fb      	strh	r3, [r7, #14]

    if ((pchMessage == NULL) || (dwLength <= 2))
 80138a6:	687b      	ldr	r3, [r7, #4]
 80138a8:	2b00      	cmp	r3, #0
 80138aa:	d002      	beq.n	80138b2 <verify_crc16+0x1a>
 80138ac:	683b      	ldr	r3, [r7, #0]
 80138ae:	2b02      	cmp	r3, #2
 80138b0:	d801      	bhi.n	80138b6 <verify_crc16+0x1e>
    {
        return __FALSE;
 80138b2:	2300      	movs	r3, #0
 80138b4:	e020      	b.n	80138f8 <verify_crc16+0x60>
    }
    wExpected = get_crc16(pchMessage, dwLength - 2, CRC16_INIT);
 80138b6:	683b      	ldr	r3, [r7, #0]
 80138b8:	3b02      	subs	r3, #2
 80138ba:	f643 22a3 	movw	r2, #15011	; 0x3aa3
 80138be:	4619      	mov	r1, r3
 80138c0:	6878      	ldr	r0, [r7, #4]
 80138c2:	f7ff ffbd 	bl	8013840 <get_crc16>
 80138c6:	4603      	mov	r3, r0
 80138c8:	81fb      	strh	r3, [r7, #14]

    return ((wExpected & 0xff) == pchMessage[dwLength - 2] && ((wExpected >> 8) & 0xff) == pchMessage[dwLength - 1]);
 80138ca:	89fb      	ldrh	r3, [r7, #14]
 80138cc:	b2db      	uxtb	r3, r3
 80138ce:	683a      	ldr	r2, [r7, #0]
 80138d0:	3a02      	subs	r2, #2
 80138d2:	6879      	ldr	r1, [r7, #4]
 80138d4:	440a      	add	r2, r1
 80138d6:	7812      	ldrb	r2, [r2, #0]
 80138d8:	4293      	cmp	r3, r2
 80138da:	d10c      	bne.n	80138f6 <verify_crc16+0x5e>
 80138dc:	89fb      	ldrh	r3, [r7, #14]
 80138de:	0a1b      	lsrs	r3, r3, #8
 80138e0:	b29b      	uxth	r3, r3
 80138e2:	b2db      	uxtb	r3, r3
 80138e4:	683a      	ldr	r2, [r7, #0]
 80138e6:	3a01      	subs	r2, #1
 80138e8:	6879      	ldr	r1, [r7, #4]
 80138ea:	440a      	add	r2, r1
 80138ec:	7812      	ldrb	r2, [r2, #0]
 80138ee:	4293      	cmp	r3, r2
 80138f0:	d101      	bne.n	80138f6 <verify_crc16+0x5e>
 80138f2:	2301      	movs	r3, #1
 80138f4:	e000      	b.n	80138f8 <verify_crc16+0x60>
 80138f6:	2300      	movs	r3, #0
}
 80138f8:	4618      	mov	r0, r3
 80138fa:	3710      	adds	r7, #16
 80138fc:	46bd      	mov	sp, r7
 80138fe:	bd80      	pop	{r7, pc}

08013900 <append_crc16>:
**  Descriptions: append CRC16 to the end of data
**  Input:        Data to CRC and append,Stream length = Data + checksum
**  Output:       True or False (CRC Verify Result)
*/
void append_crc16(uint8_t* pchMessage,uint32_t dwLength)
{
 8013900:	b580      	push	{r7, lr}
 8013902:	b084      	sub	sp, #16
 8013904:	af00      	add	r7, sp, #0
 8013906:	6078      	str	r0, [r7, #4]
 8013908:	6039      	str	r1, [r7, #0]
    uint16_t wCRC = 0;
 801390a:	2300      	movs	r3, #0
 801390c:	81fb      	strh	r3, [r7, #14]

    if ((pchMessage == NULL) || (dwLength <= 2))
 801390e:	687b      	ldr	r3, [r7, #4]
 8013910:	2b00      	cmp	r3, #0
 8013912:	d01d      	beq.n	8013950 <append_crc16+0x50>
 8013914:	683b      	ldr	r3, [r7, #0]
 8013916:	2b02      	cmp	r3, #2
 8013918:	d91a      	bls.n	8013950 <append_crc16+0x50>
    {
        return;
    }
    wCRC = get_crc16 ( (uint8_t *)pchMessage, dwLength-2, CRC16_INIT );
 801391a:	683b      	ldr	r3, [r7, #0]
 801391c:	3b02      	subs	r3, #2
 801391e:	f643 22a3 	movw	r2, #15011	; 0x3aa3
 8013922:	4619      	mov	r1, r3
 8013924:	6878      	ldr	r0, [r7, #4]
 8013926:	f7ff ff8b 	bl	8013840 <get_crc16>
 801392a:	4603      	mov	r3, r0
 801392c:	81fb      	strh	r3, [r7, #14]

    pchMessage[dwLength-2] = (uint8_t)(wCRC & 0x00ff);
 801392e:	683b      	ldr	r3, [r7, #0]
 8013930:	3b02      	subs	r3, #2
 8013932:	687a      	ldr	r2, [r7, #4]
 8013934:	4413      	add	r3, r2
 8013936:	89fa      	ldrh	r2, [r7, #14]
 8013938:	b2d2      	uxtb	r2, r2
 801393a:	701a      	strb	r2, [r3, #0]
    pchMessage[dwLength-1] = (uint8_t)((wCRC >> 8)& 0x00ff);
 801393c:	89fb      	ldrh	r3, [r7, #14]
 801393e:	0a1b      	lsrs	r3, r3, #8
 8013940:	b299      	uxth	r1, r3
 8013942:	683b      	ldr	r3, [r7, #0]
 8013944:	3b01      	subs	r3, #1
 8013946:	687a      	ldr	r2, [r7, #4]
 8013948:	4413      	add	r3, r2
 801394a:	b2ca      	uxtb	r2, r1
 801394c:	701a      	strb	r2, [r3, #0]
 801394e:	e000      	b.n	8013952 <append_crc16+0x52>
        return;
 8013950:	bf00      	nop
}
 8013952:	3710      	adds	r7, #16
 8013954:	46bd      	mov	sp, r7
 8013956:	bd80      	pop	{r7, pc}

08013958 <get_crc32>:
**  Descriptions: CRC16 checksum function
**  Input:        Data to check,Stream length, initialized checksum
**  Output:       CRC checksum
*/
uint32_t get_crc32(uint8_t *pchMessage,uint32_t dwLength,uint32_t wCRC)
{
 8013958:	b480      	push	{r7}
 801395a:	b087      	sub	sp, #28
 801395c:	af00      	add	r7, sp, #0
 801395e:	60f8      	str	r0, [r7, #12]
 8013960:	60b9      	str	r1, [r7, #8]
 8013962:	607a      	str	r2, [r7, #4]
    uint8_t chData;
    if (pchMessage == NULL)
 8013964:	68fb      	ldr	r3, [r7, #12]
 8013966:	2b00      	cmp	r3, #0
 8013968:	d112      	bne.n	8013990 <get_crc32+0x38>
    {
        return 0xFFFF;
 801396a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801396e:	e015      	b.n	801399c <get_crc32+0x44>
    }

    while(dwLength--)
    {
        chData = *pchMessage++;
 8013970:	68fb      	ldr	r3, [r7, #12]
 8013972:	1c5a      	adds	r2, r3, #1
 8013974:	60fa      	str	r2, [r7, #12]
 8013976:	781b      	ldrb	r3, [r3, #0]
 8013978:	75fb      	strb	r3, [r7, #23]
        (wCRC) = ((uint32_t)(wCRC) >> 8)  ^ CRC32_Table[((uint32_t)(wCRC) ^ (uint32_t)(chData)) & 0x000000ff];
 801397a:	687b      	ldr	r3, [r7, #4]
 801397c:	0a1a      	lsrs	r2, r3, #8
 801397e:	7df9      	ldrb	r1, [r7, #23]
 8013980:	687b      	ldr	r3, [r7, #4]
 8013982:	404b      	eors	r3, r1
 8013984:	b2db      	uxtb	r3, r3
 8013986:	4908      	ldr	r1, [pc, #32]	; (80139a8 <get_crc32+0x50>)
 8013988:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 801398c:	4053      	eors	r3, r2
 801398e:	607b      	str	r3, [r7, #4]
    while(dwLength--)
 8013990:	68bb      	ldr	r3, [r7, #8]
 8013992:	1e5a      	subs	r2, r3, #1
 8013994:	60ba      	str	r2, [r7, #8]
 8013996:	2b00      	cmp	r3, #0
 8013998:	d1ea      	bne.n	8013970 <get_crc32+0x18>
    }

    return wCRC;
 801399a:	687b      	ldr	r3, [r7, #4]
}
 801399c:	4618      	mov	r0, r3
 801399e:	371c      	adds	r7, #28
 80139a0:	46bd      	mov	sp, r7
 80139a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139a6:	4770      	bx	lr
 80139a8:	08015820 	.word	0x08015820

080139ac <verify_crc32>:
**  Input:        Data to Verify,Stream length = Data + checksum
**  Output:       True or False (CRC Verify Result)
*/
//CRC 的验证方法也可以是看append后的字节流经过CRC运算后结果是否为零来判断
uint32_t verify_crc32(uint8_t *pchMessage, uint32_t dwLength)
{
 80139ac:	b580      	push	{r7, lr}
 80139ae:	b084      	sub	sp, #16
 80139b0:	af00      	add	r7, sp, #0
 80139b2:	6078      	str	r0, [r7, #4]
 80139b4:	6039      	str	r1, [r7, #0]
    uint32_t wExpected = 0;
 80139b6:	2300      	movs	r3, #0
 80139b8:	60fb      	str	r3, [r7, #12]
    uint32_t input_crc = 0;
 80139ba:	2300      	movs	r3, #0
 80139bc:	60bb      	str	r3, [r7, #8]
    if ((pchMessage == NULL) || (dwLength <= 4))
 80139be:	687b      	ldr	r3, [r7, #4]
 80139c0:	2b00      	cmp	r3, #0
 80139c2:	d002      	beq.n	80139ca <verify_crc32+0x1e>
 80139c4:	683b      	ldr	r3, [r7, #0]
 80139c6:	2b04      	cmp	r3, #4
 80139c8:	d801      	bhi.n	80139ce <verify_crc32+0x22>
    {
        return __FALSE;
 80139ca:	2300      	movs	r3, #0
 80139cc:	e036      	b.n	8013a3c <verify_crc32+0x90>
    }
    wExpected = get_crc32(pchMessage, dwLength - 4, CRC32_INIT);
 80139ce:	683b      	ldr	r3, [r7, #0]
 80139d0:	3b04      	subs	r3, #4
 80139d2:	f643 22a3 	movw	r2, #15011	; 0x3aa3
 80139d6:	4619      	mov	r1, r3
 80139d8:	6878      	ldr	r0, [r7, #4]
 80139da:	f7ff ffbd 	bl	8013958 <get_crc32>
 80139de:	60f8      	str	r0, [r7, #12]

    input_crc |= pchMessage[dwLength - 4];
 80139e0:	683b      	ldr	r3, [r7, #0]
 80139e2:	3b04      	subs	r3, #4
 80139e4:	687a      	ldr	r2, [r7, #4]
 80139e6:	4413      	add	r3, r2
 80139e8:	781b      	ldrb	r3, [r3, #0]
 80139ea:	461a      	mov	r2, r3
 80139ec:	68bb      	ldr	r3, [r7, #8]
 80139ee:	4313      	orrs	r3, r2
 80139f0:	60bb      	str	r3, [r7, #8]
    input_crc |= ((uint32_t)(pchMessage[dwLength - 3]) << 8)  & 0xff00;
 80139f2:	683b      	ldr	r3, [r7, #0]
 80139f4:	3b03      	subs	r3, #3
 80139f6:	687a      	ldr	r2, [r7, #4]
 80139f8:	4413      	add	r3, r2
 80139fa:	781b      	ldrb	r3, [r3, #0]
 80139fc:	021b      	lsls	r3, r3, #8
 80139fe:	b29b      	uxth	r3, r3
 8013a00:	68ba      	ldr	r2, [r7, #8]
 8013a02:	4313      	orrs	r3, r2
 8013a04:	60bb      	str	r3, [r7, #8]
    input_crc |= ((uint32_t)(pchMessage[dwLength - 2]) << 16) & 0xff0000;
 8013a06:	683b      	ldr	r3, [r7, #0]
 8013a08:	3b02      	subs	r3, #2
 8013a0a:	687a      	ldr	r2, [r7, #4]
 8013a0c:	4413      	add	r3, r2
 8013a0e:	781b      	ldrb	r3, [r3, #0]
 8013a10:	041b      	lsls	r3, r3, #16
 8013a12:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8013a16:	68ba      	ldr	r2, [r7, #8]
 8013a18:	4313      	orrs	r3, r2
 8013a1a:	60bb      	str	r3, [r7, #8]
    input_crc |= ((uint32_t)(pchMessage[dwLength - 1]) << 24) & 0xff000000;
 8013a1c:	683b      	ldr	r3, [r7, #0]
 8013a1e:	3b01      	subs	r3, #1
 8013a20:	687a      	ldr	r2, [r7, #4]
 8013a22:	4413      	add	r3, r2
 8013a24:	781b      	ldrb	r3, [r3, #0]
 8013a26:	061b      	lsls	r3, r3, #24
 8013a28:	68ba      	ldr	r2, [r7, #8]
 8013a2a:	4313      	orrs	r3, r2
 8013a2c:	60bb      	str	r3, [r7, #8]

    return (input_crc == wExpected);
 8013a2e:	68ba      	ldr	r2, [r7, #8]
 8013a30:	68fb      	ldr	r3, [r7, #12]
 8013a32:	429a      	cmp	r2, r3
 8013a34:	bf0c      	ite	eq
 8013a36:	2301      	moveq	r3, #1
 8013a38:	2300      	movne	r3, #0
 8013a3a:	b2db      	uxtb	r3, r3
}
 8013a3c:	4618      	mov	r0, r3
 8013a3e:	3710      	adds	r7, #16
 8013a40:	46bd      	mov	sp, r7
 8013a42:	bd80      	pop	{r7, pc}

08013a44 <append_crc32>:
**  Descriptions: append CRC16 to the end of data
**  Input:        Data to CRC and append,Stream length = Data + checksum
**  Output:       True or False (CRC Verify Result)
*/
void append_crc32(uint8_t* pchMessage,uint32_t dwLength)
{
 8013a44:	b580      	push	{r7, lr}
 8013a46:	b084      	sub	sp, #16
 8013a48:	af00      	add	r7, sp, #0
 8013a4a:	6078      	str	r0, [r7, #4]
 8013a4c:	6039      	str	r1, [r7, #0]
    uint32_t wCRC = 0;
 8013a4e:	2300      	movs	r3, #0
 8013a50:	60fb      	str	r3, [r7, #12]

    if ((pchMessage == NULL) || (dwLength <= 4))
 8013a52:	687b      	ldr	r3, [r7, #4]
 8013a54:	2b00      	cmp	r3, #0
 8013a56:	d02b      	beq.n	8013ab0 <append_crc32+0x6c>
 8013a58:	683b      	ldr	r3, [r7, #0]
 8013a5a:	2b04      	cmp	r3, #4
 8013a5c:	d928      	bls.n	8013ab0 <append_crc32+0x6c>
    {
        return;
    }
    wCRC = get_crc32 ( (uint8_t *)pchMessage, dwLength-4, CRC32_INIT);
 8013a5e:	683b      	ldr	r3, [r7, #0]
 8013a60:	3b04      	subs	r3, #4
 8013a62:	f643 22a3 	movw	r2, #15011	; 0x3aa3
 8013a66:	4619      	mov	r1, r3
 8013a68:	6878      	ldr	r0, [r7, #4]
 8013a6a:	f7ff ff75 	bl	8013958 <get_crc32>
 8013a6e:	60f8      	str	r0, [r7, #12]

    pchMessage[dwLength-4] = (uint8_t)(wCRC & 0xff);
 8013a70:	683b      	ldr	r3, [r7, #0]
 8013a72:	3b04      	subs	r3, #4
 8013a74:	687a      	ldr	r2, [r7, #4]
 8013a76:	4413      	add	r3, r2
 8013a78:	68fa      	ldr	r2, [r7, #12]
 8013a7a:	b2d2      	uxtb	r2, r2
 8013a7c:	701a      	strb	r2, [r3, #0]
    pchMessage[dwLength-3] = (uint8_t)((wCRC >> 8)& 0xff);
 8013a7e:	68fb      	ldr	r3, [r7, #12]
 8013a80:	0a19      	lsrs	r1, r3, #8
 8013a82:	683b      	ldr	r3, [r7, #0]
 8013a84:	3b03      	subs	r3, #3
 8013a86:	687a      	ldr	r2, [r7, #4]
 8013a88:	4413      	add	r3, r2
 8013a8a:	b2ca      	uxtb	r2, r1
 8013a8c:	701a      	strb	r2, [r3, #0]
    pchMessage[dwLength-2] = (uint8_t)((wCRC >> 16)& 0xff);
 8013a8e:	68fb      	ldr	r3, [r7, #12]
 8013a90:	0c19      	lsrs	r1, r3, #16
 8013a92:	683b      	ldr	r3, [r7, #0]
 8013a94:	3b02      	subs	r3, #2
 8013a96:	687a      	ldr	r2, [r7, #4]
 8013a98:	4413      	add	r3, r2
 8013a9a:	b2ca      	uxtb	r2, r1
 8013a9c:	701a      	strb	r2, [r3, #0]
    pchMessage[dwLength-1] = (uint8_t)((wCRC >> 24)& 0xff);
 8013a9e:	68fb      	ldr	r3, [r7, #12]
 8013aa0:	0e19      	lsrs	r1, r3, #24
 8013aa2:	683b      	ldr	r3, [r7, #0]
 8013aa4:	3b01      	subs	r3, #1
 8013aa6:	687a      	ldr	r2, [r7, #4]
 8013aa8:	4413      	add	r3, r2
 8013aaa:	b2ca      	uxtb	r2, r1
 8013aac:	701a      	strb	r2, [r3, #0]
 8013aae:	e000      	b.n	8013ab2 <append_crc32+0x6e>
        return;
 8013ab0:	bf00      	nop
}
 8013ab2:	3710      	adds	r7, #16
 8013ab4:	46bd      	mov	sp, r7
 8013ab6:	bd80      	pop	{r7, pc}

08013ab8 <test_init>:
}

#else

void test_init(void)
{
 8013ab8:	b480      	push	{r7}
 8013aba:	af00      	add	r7, sp, #0

}
 8013abc:	bf00      	nop
 8013abe:	46bd      	mov	sp, r7
 8013ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ac4:	4770      	bx	lr
	...

08013ac8 <TimerISR_Hook>:
//!
//! \note   Typical 1ms interval
//
//******************************************************************************************
void TimerISR_Hook(void)
{    
 8013ac8:	b480      	push	{r7}
 8013aca:	b083      	sub	sp, #12
 8013acc:	af00      	add	r7, sp, #0
    for(uint8_t i = 1; i < TIMER_ELEMENT_NUM_MAX; i++)
 8013ace:	2301      	movs	r3, #1
 8013ad0:	71fb      	strb	r3, [r7, #7]
 8013ad2:	e019      	b.n	8013b08 <TimerISR_Hook+0x40>
    {
        if(SoftTimer[i].handle !=  0)
 8013ad4:	79fb      	ldrb	r3, [r7, #7]
 8013ad6:	4a11      	ldr	r2, [pc, #68]	; (8013b1c <TimerISR_Hook+0x54>)
 8013ad8:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
 8013adc:	2b00      	cmp	r3, #0
 8013ade:	d010      	beq.n	8013b02 <TimerISR_Hook+0x3a>
        {
            if(SoftTimer[i].delay)
 8013ae0:	79fb      	ldrb	r3, [r7, #7]
 8013ae2:	4a0e      	ldr	r2, [pc, #56]	; (8013b1c <TimerISR_Hook+0x54>)
 8013ae4:	00db      	lsls	r3, r3, #3
 8013ae6:	4413      	add	r3, r2
 8013ae8:	685b      	ldr	r3, [r3, #4]
 8013aea:	2b00      	cmp	r3, #0
 8013aec:	d009      	beq.n	8013b02 <TimerISR_Hook+0x3a>
            {
                SoftTimer[i].delay--;
 8013aee:	79fa      	ldrb	r2, [r7, #7]
 8013af0:	490a      	ldr	r1, [pc, #40]	; (8013b1c <TimerISR_Hook+0x54>)
 8013af2:	00d3      	lsls	r3, r2, #3
 8013af4:	440b      	add	r3, r1
 8013af6:	685b      	ldr	r3, [r3, #4]
 8013af8:	1e59      	subs	r1, r3, #1
 8013afa:	4808      	ldr	r0, [pc, #32]	; (8013b1c <TimerISR_Hook+0x54>)
 8013afc:	00d3      	lsls	r3, r2, #3
 8013afe:	4403      	add	r3, r0
 8013b00:	6059      	str	r1, [r3, #4]
    for(uint8_t i = 1; i < TIMER_ELEMENT_NUM_MAX; i++)
 8013b02:	79fb      	ldrb	r3, [r7, #7]
 8013b04:	3301      	adds	r3, #1
 8013b06:	71fb      	strb	r3, [r7, #7]
 8013b08:	79fb      	ldrb	r3, [r7, #7]
 8013b0a:	2b13      	cmp	r3, #19
 8013b0c:	d9e2      	bls.n	8013ad4 <TimerISR_Hook+0xc>
            }
        }
    }
}
 8013b0e:	bf00      	nop
 8013b10:	bf00      	nop
 8013b12:	370c      	adds	r7, #12
 8013b14:	46bd      	mov	sp, r7
 8013b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b1a:	4770      	bx	lr
 8013b1c:	20017484 	.word	0x20017484

08013b20 <soft_timer_init>:
//!         - This function must be called first !.
//!         
//
//******************************************************************************************
uint16_t soft_timer_init(void)
{
 8013b20:	b480      	push	{r7}
 8013b22:	b083      	sub	sp, #12
 8013b24:	af00      	add	r7, sp, #0
    uint8_t i = 0;
 8013b26:	2300      	movs	r3, #0
 8013b28:	71fb      	strb	r3, [r7, #7]

    // Clear All Elements
    for(i = 1; i < TIMER_ELEMENT_NUM_MAX; i++)
 8013b2a:	2301      	movs	r3, #1
 8013b2c:	71fb      	strb	r3, [r7, #7]
 8013b2e:	e00d      	b.n	8013b4c <soft_timer_init+0x2c>
    {
        SoftTimer[i].handle    = 0;
 8013b30:	79fb      	ldrb	r3, [r7, #7]
 8013b32:	4a0b      	ldr	r2, [pc, #44]	; (8013b60 <soft_timer_init+0x40>)
 8013b34:	2100      	movs	r1, #0
 8013b36:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
        SoftTimer[i].delay     = 0;        
 8013b3a:	79fb      	ldrb	r3, [r7, #7]
 8013b3c:	4a08      	ldr	r2, [pc, #32]	; (8013b60 <soft_timer_init+0x40>)
 8013b3e:	00db      	lsls	r3, r3, #3
 8013b40:	4413      	add	r3, r2
 8013b42:	2200      	movs	r2, #0
 8013b44:	605a      	str	r2, [r3, #4]
    for(i = 1; i < TIMER_ELEMENT_NUM_MAX; i++)
 8013b46:	79fb      	ldrb	r3, [r7, #7]
 8013b48:	3301      	adds	r3, #1
 8013b4a:	71fb      	strb	r3, [r7, #7]
 8013b4c:	79fb      	ldrb	r3, [r7, #7]
 8013b4e:	2b13      	cmp	r3, #19
 8013b50:	d9ee      	bls.n	8013b30 <soft_timer_init+0x10>
    }

    return (SOFT_TIMER_SUCCESS);
 8013b52:	2300      	movs	r3, #0
}
 8013b54:	4618      	mov	r0, r3
 8013b56:	370c      	adds	r7, #12
 8013b58:	46bd      	mov	sp, r7
 8013b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b5e:	4770      	bx	lr
 8013b60:	20017484 	.word	0x20017484

08013b64 <soft_timer_req>:
//!         - Timer handle only can be used once.
//!         
//
//******************************************************************************************
uint16_t soft_timer_req(uint32_t Tick)
{
 8013b64:	b480      	push	{r7}
 8013b66:	b087      	sub	sp, #28
 8013b68:	af00      	add	r7, sp, #0
 8013b6a:	6078      	str	r0, [r7, #4]
    uint8_t i = 0;
 8013b6c:	2300      	movs	r3, #0
 8013b6e:	75fb      	strb	r3, [r7, #23]

    for (i = 1; i < TIMER_ELEMENT_NUM_MAX; i++)
 8013b70:	2301      	movs	r3, #1
 8013b72:	75fb      	strb	r3, [r7, #23]
 8013b74:	e024      	b.n	8013bc0 <soft_timer_req+0x5c>
    {
        if (SoftTimer[i].handle == 0)
 8013b76:	7dfb      	ldrb	r3, [r7, #23]
 8013b78:	4a16      	ldr	r2, [pc, #88]	; (8013bd4 <soft_timer_req+0x70>)
 8013b7a:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
 8013b7e:	2b00      	cmp	r3, #0
 8013b80:	d11b      	bne.n	8013bba <soft_timer_req+0x56>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8013b82:	f3ef 8310 	mrs	r3, PRIMASK
 8013b86:	60bb      	str	r3, [r7, #8]
  return(result);
 8013b88:	68bb      	ldr	r3, [r7, #8]
        {
            CRITICAL_SETCION_ENTER();
 8013b8a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8013b8c:	b672      	cpsid	i
}
 8013b8e:	bf00      	nop

            SoftTimer[i].handle    = i;
 8013b90:	7dfb      	ldrb	r3, [r7, #23]
 8013b92:	7dfa      	ldrb	r2, [r7, #23]
 8013b94:	b291      	uxth	r1, r2
 8013b96:	4a0f      	ldr	r2, [pc, #60]	; (8013bd4 <soft_timer_req+0x70>)
 8013b98:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
            SoftTimer[i].delay     = Tick;            
 8013b9c:	7dfb      	ldrb	r3, [r7, #23]
 8013b9e:	4a0d      	ldr	r2, [pc, #52]	; (8013bd4 <soft_timer_req+0x70>)
 8013ba0:	00db      	lsls	r3, r3, #3
 8013ba2:	4413      	add	r3, r2
 8013ba4:	687a      	ldr	r2, [r7, #4]
 8013ba6:	605a      	str	r2, [r3, #4]
 8013ba8:	693b      	ldr	r3, [r7, #16]
 8013baa:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013bac:	68fb      	ldr	r3, [r7, #12]
 8013bae:	f383 8810 	msr	PRIMASK, r3
}
 8013bb2:	bf00      	nop

            CRITICAL_SETCION_EXIT();

            return (i);
 8013bb4:	7dfb      	ldrb	r3, [r7, #23]
 8013bb6:	b29b      	uxth	r3, r3
 8013bb8:	e006      	b.n	8013bc8 <soft_timer_req+0x64>
    for (i = 1; i < TIMER_ELEMENT_NUM_MAX; i++)
 8013bba:	7dfb      	ldrb	r3, [r7, #23]
 8013bbc:	3301      	adds	r3, #1
 8013bbe:	75fb      	strb	r3, [r7, #23]
 8013bc0:	7dfb      	ldrb	r3, [r7, #23]
 8013bc2:	2b13      	cmp	r3, #19
 8013bc4:	d9d7      	bls.n	8013b76 <soft_timer_req+0x12>
        }
    }

    return (0);
 8013bc6:	2300      	movs	r3, #0
}
 8013bc8:	4618      	mov	r0, r3
 8013bca:	371c      	adds	r7, #28
 8013bcc:	46bd      	mov	sp, r7
 8013bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bd2:	4770      	bx	lr
 8013bd4:	20017484 	.word	0x20017484

08013bd8 <soft_timer_update>:
//!         - Non-Zero                 failure
//!         
//
//******************************************************************************************
uint16_t soft_timer_update(uint32_t Id, uint32_t Tick)
{
 8013bd8:	b480      	push	{r7}
 8013bda:	b087      	sub	sp, #28
 8013bdc:	af00      	add	r7, sp, #0
 8013bde:	6078      	str	r0, [r7, #4]
 8013be0:	6039      	str	r1, [r7, #0]
    for (uint8_t i = 1; i < TIMER_ELEMENT_NUM_MAX; i++)
 8013be2:	2301      	movs	r3, #1
 8013be4:	75fb      	strb	r3, [r7, #23]
 8013be6:	e01f      	b.n	8013c28 <soft_timer_update+0x50>
    {
        if (SoftTimer[i].handle == Id)
 8013be8:	7dfb      	ldrb	r3, [r7, #23]
 8013bea:	4a14      	ldr	r2, [pc, #80]	; (8013c3c <soft_timer_update+0x64>)
 8013bec:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
 8013bf0:	461a      	mov	r2, r3
 8013bf2:	687b      	ldr	r3, [r7, #4]
 8013bf4:	4293      	cmp	r3, r2
 8013bf6:	d114      	bne.n	8013c22 <soft_timer_update+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8013bf8:	f3ef 8310 	mrs	r3, PRIMASK
 8013bfc:	60bb      	str	r3, [r7, #8]
  return(result);
 8013bfe:	68bb      	ldr	r3, [r7, #8]
        {
            CRITICAL_SETCION_ENTER();
 8013c00:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8013c02:	b672      	cpsid	i
}
 8013c04:	bf00      	nop

            SoftTimer[i].delay = Tick;
 8013c06:	7dfb      	ldrb	r3, [r7, #23]
 8013c08:	4a0c      	ldr	r2, [pc, #48]	; (8013c3c <soft_timer_update+0x64>)
 8013c0a:	00db      	lsls	r3, r3, #3
 8013c0c:	4413      	add	r3, r2
 8013c0e:	683a      	ldr	r2, [r7, #0]
 8013c10:	605a      	str	r2, [r3, #4]
 8013c12:	693b      	ldr	r3, [r7, #16]
 8013c14:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013c16:	68fb      	ldr	r3, [r7, #12]
 8013c18:	f383 8810 	msr	PRIMASK, r3
}
 8013c1c:	bf00      	nop

            CRITICAL_SETCION_EXIT();

            // Success
            return (0);
 8013c1e:	2300      	movs	r3, #0
 8013c20:	e006      	b.n	8013c30 <soft_timer_update+0x58>
    for (uint8_t i = 1; i < TIMER_ELEMENT_NUM_MAX; i++)
 8013c22:	7dfb      	ldrb	r3, [r7, #23]
 8013c24:	3301      	adds	r3, #1
 8013c26:	75fb      	strb	r3, [r7, #23]
 8013c28:	7dfb      	ldrb	r3, [r7, #23]
 8013c2a:	2b13      	cmp	r3, #19
 8013c2c:	d9dc      	bls.n	8013be8 <soft_timer_update+0x10>
        }
    }

    // Failure
    return (1);
 8013c2e:	2301      	movs	r3, #1
}
 8013c30:	4618      	mov	r0, r3
 8013c32:	371c      	adds	r7, #28
 8013c34:	46bd      	mov	sp, r7
 8013c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c3a:	4770      	bx	lr
 8013c3c:	20017484 	.word	0x20017484

08013c40 <soft_timer_check>:
//!         - Timer handle only can be used once.
//!         
//
//******************************************************************************************
uint16_t soft_timer_check(uint16_t Handle)
{    
 8013c40:	b480      	push	{r7}
 8013c42:	b087      	sub	sp, #28
 8013c44:	af00      	add	r7, sp, #0
 8013c46:	4603      	mov	r3, r0
 8013c48:	80fb      	strh	r3, [r7, #6]
    uint16_t retval = SOFT_TIMER_ERR;
 8013c4a:	2303      	movs	r3, #3
 8013c4c:	82fb      	strh	r3, [r7, #22]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8013c4e:	f3ef 8310 	mrs	r3, PRIMASK
 8013c52:	60fb      	str	r3, [r7, #12]
  return(result);
 8013c54:	68fb      	ldr	r3, [r7, #12]

    CRITICAL_SETCION_ENTER();    
 8013c56:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8013c58:	b672      	cpsid	i
}
 8013c5a:	bf00      	nop
    if(SoftTimer[Handle].handle ==  Handle)
 8013c5c:	88fb      	ldrh	r3, [r7, #6]
 8013c5e:	4a0f      	ldr	r2, [pc, #60]	; (8013c9c <soft_timer_check+0x5c>)
 8013c60:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
 8013c64:	88fa      	ldrh	r2, [r7, #6]
 8013c66:	429a      	cmp	r2, r3
 8013c68:	d10b      	bne.n	8013c82 <soft_timer_check+0x42>
    {
        if(SoftTimer[Handle].delay)
 8013c6a:	88fb      	ldrh	r3, [r7, #6]
 8013c6c:	4a0b      	ldr	r2, [pc, #44]	; (8013c9c <soft_timer_check+0x5c>)
 8013c6e:	00db      	lsls	r3, r3, #3
 8013c70:	4413      	add	r3, r2
 8013c72:	685b      	ldr	r3, [r3, #4]
 8013c74:	2b00      	cmp	r3, #0
 8013c76:	d002      	beq.n	8013c7e <soft_timer_check+0x3e>
        {
            retval = SOFT_TIMER_ING;
 8013c78:	2301      	movs	r3, #1
 8013c7a:	82fb      	strh	r3, [r7, #22]
 8013c7c:	e001      	b.n	8013c82 <soft_timer_check+0x42>
        }
        else
        {
            retval = SOFT_TIMER_TIMEOUT;
 8013c7e:	2302      	movs	r3, #2
 8013c80:	82fb      	strh	r3, [r7, #22]
 8013c82:	693b      	ldr	r3, [r7, #16]
 8013c84:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013c86:	68bb      	ldr	r3, [r7, #8]
 8013c88:	f383 8810 	msr	PRIMASK, r3
}
 8013c8c:	bf00      	nop
        }
    }
    CRITICAL_SETCION_EXIT();

    return (retval);
 8013c8e:	8afb      	ldrh	r3, [r7, #22]
}
 8013c90:	4618      	mov	r0, r3
 8013c92:	371c      	adds	r7, #28
 8013c94:	46bd      	mov	sp, r7
 8013c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c9a:	4770      	bx	lr
 8013c9c:	20017484 	.word	0x20017484

08013ca0 <INIT_LIST_HEAD>:
{
 8013ca0:	b480      	push	{r7}
 8013ca2:	b083      	sub	sp, #12
 8013ca4:	af00      	add	r7, sp, #0
 8013ca6:	6078      	str	r0, [r7, #4]
  list->next = list;
 8013ca8:	687b      	ldr	r3, [r7, #4]
 8013caa:	687a      	ldr	r2, [r7, #4]
 8013cac:	601a      	str	r2, [r3, #0]
  list->prev = list;
 8013cae:	687b      	ldr	r3, [r7, #4]
 8013cb0:	687a      	ldr	r2, [r7, #4]
 8013cb2:	605a      	str	r2, [r3, #4]
}
 8013cb4:	bf00      	nop
 8013cb6:	370c      	adds	r7, #12
 8013cb8:	46bd      	mov	sp, r7
 8013cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cbe:	4770      	bx	lr

08013cc0 <__list_add>:
{
 8013cc0:	b480      	push	{r7}
 8013cc2:	b085      	sub	sp, #20
 8013cc4:	af00      	add	r7, sp, #0
 8013cc6:	60f8      	str	r0, [r7, #12]
 8013cc8:	60b9      	str	r1, [r7, #8]
 8013cca:	607a      	str	r2, [r7, #4]
  next->prev = new;
 8013ccc:	687b      	ldr	r3, [r7, #4]
 8013cce:	68fa      	ldr	r2, [r7, #12]
 8013cd0:	605a      	str	r2, [r3, #4]
  new->next = next;
 8013cd2:	68fb      	ldr	r3, [r7, #12]
 8013cd4:	687a      	ldr	r2, [r7, #4]
 8013cd6:	601a      	str	r2, [r3, #0]
  new->prev = prev;
 8013cd8:	68fb      	ldr	r3, [r7, #12]
 8013cda:	68ba      	ldr	r2, [r7, #8]
 8013cdc:	605a      	str	r2, [r3, #4]
  prev->next = new;
 8013cde:	68bb      	ldr	r3, [r7, #8]
 8013ce0:	68fa      	ldr	r2, [r7, #12]
 8013ce2:	601a      	str	r2, [r3, #0]
}
 8013ce4:	bf00      	nop
 8013ce6:	3714      	adds	r7, #20
 8013ce8:	46bd      	mov	sp, r7
 8013cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cee:	4770      	bx	lr

08013cf0 <list_add>:
{
 8013cf0:	b580      	push	{r7, lr}
 8013cf2:	b082      	sub	sp, #8
 8013cf4:	af00      	add	r7, sp, #0
 8013cf6:	6078      	str	r0, [r7, #4]
 8013cf8:	6039      	str	r1, [r7, #0]
  __list_add(new, head, head->next);
 8013cfa:	683b      	ldr	r3, [r7, #0]
 8013cfc:	681b      	ldr	r3, [r3, #0]
 8013cfe:	461a      	mov	r2, r3
 8013d00:	6839      	ldr	r1, [r7, #0]
 8013d02:	6878      	ldr	r0, [r7, #4]
 8013d04:	f7ff ffdc 	bl	8013cc0 <__list_add>
}
 8013d08:	bf00      	nop
 8013d0a:	3708      	adds	r7, #8
 8013d0c:	46bd      	mov	sp, r7
 8013d0e:	bd80      	pop	{r7, pc}

08013d10 <ulog_tag_lvl_list_get>:
 * get the tag's level list on filter
 *
 * @return tag's level list
 */
list_t *ulog_tag_lvl_list_get(void)
{
 8013d10:	b480      	push	{r7}
 8013d12:	af00      	add	r7, sp, #0
    return &ulog.filter.tag_lvl_list;
 8013d14:	4b02      	ldr	r3, [pc, #8]	; (8013d20 <ulog_tag_lvl_list_get+0x10>)
}
 8013d16:	4618      	mov	r0, r3
 8013d18:	46bd      	mov	sp, r7
 8013d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d1e:	4770      	bx	lr
 8013d20:	20017630 	.word	0x20017630

08013d24 <ulog_global_filter_lvl_set>:
 * @param level log level: LOG_LVL_ASSERT, LOG_LVL_ERROR, LOG_LVL_WARNING, LOG_LVL_INFO, LOG_LVL_DBG
 *              LOG_FILTER_LVL_SILENT: disable all log output, except assert level
 *              LOG_FILTER_LVL_ALL: enable all log output
 */
void ulog_global_filter_lvl_set(uint32_t level)
{
 8013d24:	b480      	push	{r7}
 8013d26:	b083      	sub	sp, #12
 8013d28:	af00      	add	r7, sp, #0
 8013d2a:	6078      	str	r0, [r7, #4]
    ULOG_ASSERT(level <= LOG_FILTER_LVL_ALL);

    ulog.filter.level = level;
 8013d2c:	4a04      	ldr	r2, [pc, #16]	; (8013d40 <ulog_global_filter_lvl_set+0x1c>)
 8013d2e:	687b      	ldr	r3, [r7, #4]
 8013d30:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
}
 8013d34:	bf00      	nop
 8013d36:	370c      	adds	r7, #12
 8013d38:	46bd      	mov	sp, r7
 8013d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d3e:	4770      	bx	lr
 8013d40:	20017524 	.word	0x20017524

08013d44 <ulog_backend_register>:
{
    return ulog.filter.keyword;
}

int32_t ulog_backend_register(ulog_backend_t backend, const char *name, ulog_bool_t support_color)
{
 8013d44:	b590      	push	{r4, r7, lr}
 8013d46:	b087      	sub	sp, #28
 8013d48:	af00      	add	r7, sp, #0
 8013d4a:	60f8      	str	r0, [r7, #12]
 8013d4c:	60b9      	str	r1, [r7, #8]
 8013d4e:	607a      	str	r2, [r7, #4]
    ULOG_ASSERT(backend);
    ULOG_ASSERT(name);
    ULOG_ASSERT(ulog.init_ok);
    ULOG_ASSERT(backend->output);

    if (backend->init)
 8013d50:	68fb      	ldr	r3, [r7, #12]
 8013d52:	695b      	ldr	r3, [r3, #20]
 8013d54:	2b00      	cmp	r3, #0
 8013d56:	d003      	beq.n	8013d60 <ulog_backend_register+0x1c>
    {
        backend->init(backend);
 8013d58:	68fb      	ldr	r3, [r7, #12]
 8013d5a:	695b      	ldr	r3, [r3, #20]
 8013d5c:	68f8      	ldr	r0, [r7, #12]
 8013d5e:	4798      	blx	r3
    }

    backend->support_color = support_color;
 8013d60:	68fb      	ldr	r3, [r7, #12]
 8013d62:	687a      	ldr	r2, [r7, #4]
 8013d64:	611a      	str	r2, [r3, #16]
    memcpy(backend->name, name, ULOG_NAME_MAX_NUM);
 8013d66:	68fb      	ldr	r3, [r7, #12]
 8013d68:	2210      	movs	r2, #16
 8013d6a:	68b9      	ldr	r1, [r7, #8]
 8013d6c:	4618      	mov	r0, r3
 8013d6e:	f000 f913 	bl	8013f98 <memcpy>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8013d72:	f3ef 8310 	mrs	r3, PRIMASK
 8013d76:	613b      	str	r3, [r7, #16]
  return(result);
 8013d78:	693b      	ldr	r3, [r7, #16]

    enter_critical();
 8013d7a:	461c      	mov	r4, r3
  __ASM volatile ("cpsid i" : : : "memory");
 8013d7c:	b672      	cpsid	i
}
 8013d7e:	bf00      	nop
    list_add(&backend->list, &ulog.backend_list);
 8013d80:	68fb      	ldr	r3, [r7, #12]
 8013d82:	3324      	adds	r3, #36	; 0x24
 8013d84:	4906      	ldr	r1, [pc, #24]	; (8013da0 <ulog_backend_register+0x5c>)
 8013d86:	4618      	mov	r0, r3
 8013d88:	f7ff ffb2 	bl	8013cf0 <list_add>
 8013d8c:	617c      	str	r4, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013d8e:	697b      	ldr	r3, [r7, #20]
 8013d90:	f383 8810 	msr	PRIMASK, r3
}
 8013d94:	bf00      	nop
    exit_critical();

    return RM_OK;
 8013d96:	2300      	movs	r3, #0
}
 8013d98:	4618      	mov	r0, r3
 8013d9a:	371c      	adds	r7, #28
 8013d9c:	46bd      	mov	sp, r7
 8013d9e:	bd90      	pop	{r4, r7, pc}
 8013da0:	20017528 	.word	0x20017528

08013da4 <ulog_init>:
        }
    }
}

int ulog_init(void)
{
 8013da4:	b580      	push	{r7, lr}
 8013da6:	af00      	add	r7, sp, #0
    if (ulog.init_ok)
 8013da8:	4b0b      	ldr	r3, [pc, #44]	; (8013dd8 <ulog_init+0x34>)
 8013daa:	681b      	ldr	r3, [r3, #0]
 8013dac:	2b00      	cmp	r3, #0
 8013dae:	d001      	beq.n	8013db4 <ulog_init+0x10>
        return 0;
 8013db0:	2300      	movs	r3, #0
 8013db2:	e00f      	b.n	8013dd4 <ulog_init+0x30>
    
    INIT_LIST_HEAD(&ulog.backend_list);
 8013db4:	4809      	ldr	r0, [pc, #36]	; (8013ddc <ulog_init+0x38>)
 8013db6:	f7ff ff73 	bl	8013ca0 <INIT_LIST_HEAD>

#ifdef ULOG_USING_FILTER
    INIT_LIST_HEAD(ulog_tag_lvl_list_get());
 8013dba:	f7ff ffa9 	bl	8013d10 <ulog_tag_lvl_list_get>
 8013dbe:	4603      	mov	r3, r0
 8013dc0:	4618      	mov	r0, r3
 8013dc2:	f7ff ff6d 	bl	8013ca0 <INIT_LIST_HEAD>
#endif

#ifdef ULOG_USING_FILTER
    ulog_global_filter_lvl_set(LOG_FILTER_LVL_ALL);
 8013dc6:	2007      	movs	r0, #7
 8013dc8:	f7ff ffac 	bl	8013d24 <ulog_global_filter_lvl_set>
#endif

    ulog.init_ok = TRUE;
 8013dcc:	4b02      	ldr	r3, [pc, #8]	; (8013dd8 <ulog_init+0x34>)
 8013dce:	2201      	movs	r2, #1
 8013dd0:	601a      	str	r2, [r3, #0]

    return 0;
 8013dd2:	2300      	movs	r3, #0
}
 8013dd4:	4618      	mov	r0, r3
 8013dd6:	bd80      	pop	{r7, pc}
 8013dd8:	20017524 	.word	0x20017524
 8013ddc:	20017528 	.word	0x20017528

08013de0 <ulog_console_backend_output>:

static struct ulog_backend console;

void ulog_console_backend_output(struct ulog_backend *backend, uint32_t level, const char *tag, int32_t is_raw,
        const char *log, size_t len)
{
 8013de0:	b580      	push	{r7, lr}
 8013de2:	b084      	sub	sp, #16
 8013de4:	af00      	add	r7, sp, #0
 8013de6:	60f8      	str	r0, [r7, #12]
 8013de8:	60b9      	str	r1, [r7, #8]
 8013dea:	607a      	str	r2, [r7, #4]
 8013dec:	603b      	str	r3, [r7, #0]
    usart6_transmit((uint8_t *)log, len); 
 8013dee:	69fb      	ldr	r3, [r7, #28]
 8013df0:	b29b      	uxth	r3, r3
 8013df2:	4619      	mov	r1, r3
 8013df4:	69b8      	ldr	r0, [r7, #24]
 8013df6:	f7f0 f8a7 	bl	8003f48 <usart6_transmit>
}
 8013dfa:	bf00      	nop
 8013dfc:	3710      	adds	r7, #16
 8013dfe:	46bd      	mov	sp, r7
 8013e00:	bd80      	pop	{r7, pc}
	...

08013e04 <ulog_console_backend_init>:

int ulog_console_backend_init(void)
{
 8013e04:	b580      	push	{r7, lr}
 8013e06:	af00      	add	r7, sp, #0
    console.output = ulog_console_backend_output;
 8013e08:	4b05      	ldr	r3, [pc, #20]	; (8013e20 <ulog_console_backend_init+0x1c>)
 8013e0a:	4a06      	ldr	r2, [pc, #24]	; (8013e24 <ulog_console_backend_init+0x20>)
 8013e0c:	619a      	str	r2, [r3, #24]

    ulog_backend_register(&console, "console", TRUE);
 8013e0e:	2201      	movs	r2, #1
 8013e10:	4905      	ldr	r1, [pc, #20]	; (8013e28 <ulog_console_backend_init+0x24>)
 8013e12:	4803      	ldr	r0, [pc, #12]	; (8013e20 <ulog_console_backend_init+0x1c>)
 8013e14:	f7ff ff96 	bl	8013d44 <ulog_backend_register>

    return 0;
 8013e18:	2300      	movs	r3, #0
}
 8013e1a:	4618      	mov	r0, r3
 8013e1c:	bd80      	pop	{r7, pc}
 8013e1e:	bf00      	nop
 8013e20:	20017664 	.word	0x20017664
 8013e24:	08013de1 	.word	0x08013de1
 8013e28:	080155f8 	.word	0x080155f8

08013e2c <__malloc_lock>:
 8013e2c:	4801      	ldr	r0, [pc, #4]	; (8013e34 <__malloc_lock+0x8>)
 8013e2e:	f000 b8b1 	b.w	8013f94 <__retarget_lock_acquire_recursive>
 8013e32:	bf00      	nop
 8013e34:	200177cc 	.word	0x200177cc

08013e38 <__malloc_unlock>:
 8013e38:	4801      	ldr	r0, [pc, #4]	; (8013e40 <__malloc_unlock+0x8>)
 8013e3a:	f000 b8ac 	b.w	8013f96 <__retarget_lock_release_recursive>
 8013e3e:	bf00      	nop
 8013e40:	200177cc 	.word	0x200177cc

08013e44 <strncmp>:
 8013e44:	b510      	push	{r4, lr}
 8013e46:	b16a      	cbz	r2, 8013e64 <strncmp+0x20>
 8013e48:	3901      	subs	r1, #1
 8013e4a:	1884      	adds	r4, r0, r2
 8013e4c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013e50:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8013e54:	429a      	cmp	r2, r3
 8013e56:	d103      	bne.n	8013e60 <strncmp+0x1c>
 8013e58:	42a0      	cmp	r0, r4
 8013e5a:	d001      	beq.n	8013e60 <strncmp+0x1c>
 8013e5c:	2a00      	cmp	r2, #0
 8013e5e:	d1f5      	bne.n	8013e4c <strncmp+0x8>
 8013e60:	1ad0      	subs	r0, r2, r3
 8013e62:	bd10      	pop	{r4, pc}
 8013e64:	4610      	mov	r0, r2
 8013e66:	e7fc      	b.n	8013e62 <strncmp+0x1e>

08013e68 <strncpy>:
 8013e68:	b510      	push	{r4, lr}
 8013e6a:	3901      	subs	r1, #1
 8013e6c:	4603      	mov	r3, r0
 8013e6e:	b132      	cbz	r2, 8013e7e <strncpy+0x16>
 8013e70:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8013e74:	f803 4b01 	strb.w	r4, [r3], #1
 8013e78:	3a01      	subs	r2, #1
 8013e7a:	2c00      	cmp	r4, #0
 8013e7c:	d1f7      	bne.n	8013e6e <strncpy+0x6>
 8013e7e:	441a      	add	r2, r3
 8013e80:	2100      	movs	r1, #0
 8013e82:	4293      	cmp	r3, r2
 8013e84:	d100      	bne.n	8013e88 <strncpy+0x20>
 8013e86:	bd10      	pop	{r4, pc}
 8013e88:	f803 1b01 	strb.w	r1, [r3], #1
 8013e8c:	e7f9      	b.n	8013e82 <strncpy+0x1a>

08013e8e <memset>:
 8013e8e:	4402      	add	r2, r0
 8013e90:	4603      	mov	r3, r0
 8013e92:	4293      	cmp	r3, r2
 8013e94:	d100      	bne.n	8013e98 <memset+0xa>
 8013e96:	4770      	bx	lr
 8013e98:	f803 1b01 	strb.w	r1, [r3], #1
 8013e9c:	e7f9      	b.n	8013e92 <memset+0x4>
	...

08013ea0 <_reclaim_reent>:
 8013ea0:	4b29      	ldr	r3, [pc, #164]	; (8013f48 <_reclaim_reent+0xa8>)
 8013ea2:	681b      	ldr	r3, [r3, #0]
 8013ea4:	4283      	cmp	r3, r0
 8013ea6:	b570      	push	{r4, r5, r6, lr}
 8013ea8:	4604      	mov	r4, r0
 8013eaa:	d04b      	beq.n	8013f44 <_reclaim_reent+0xa4>
 8013eac:	69c3      	ldr	r3, [r0, #28]
 8013eae:	b143      	cbz	r3, 8013ec2 <_reclaim_reent+0x22>
 8013eb0:	68db      	ldr	r3, [r3, #12]
 8013eb2:	2b00      	cmp	r3, #0
 8013eb4:	d144      	bne.n	8013f40 <_reclaim_reent+0xa0>
 8013eb6:	69e3      	ldr	r3, [r4, #28]
 8013eb8:	6819      	ldr	r1, [r3, #0]
 8013eba:	b111      	cbz	r1, 8013ec2 <_reclaim_reent+0x22>
 8013ebc:	4620      	mov	r0, r4
 8013ebe:	f000 f879 	bl	8013fb4 <_free_r>
 8013ec2:	6961      	ldr	r1, [r4, #20]
 8013ec4:	b111      	cbz	r1, 8013ecc <_reclaim_reent+0x2c>
 8013ec6:	4620      	mov	r0, r4
 8013ec8:	f000 f874 	bl	8013fb4 <_free_r>
 8013ecc:	69e1      	ldr	r1, [r4, #28]
 8013ece:	b111      	cbz	r1, 8013ed6 <_reclaim_reent+0x36>
 8013ed0:	4620      	mov	r0, r4
 8013ed2:	f000 f86f 	bl	8013fb4 <_free_r>
 8013ed6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8013ed8:	b111      	cbz	r1, 8013ee0 <_reclaim_reent+0x40>
 8013eda:	4620      	mov	r0, r4
 8013edc:	f000 f86a 	bl	8013fb4 <_free_r>
 8013ee0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013ee2:	b111      	cbz	r1, 8013eea <_reclaim_reent+0x4a>
 8013ee4:	4620      	mov	r0, r4
 8013ee6:	f000 f865 	bl	8013fb4 <_free_r>
 8013eea:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8013eec:	b111      	cbz	r1, 8013ef4 <_reclaim_reent+0x54>
 8013eee:	4620      	mov	r0, r4
 8013ef0:	f000 f860 	bl	8013fb4 <_free_r>
 8013ef4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8013ef6:	b111      	cbz	r1, 8013efe <_reclaim_reent+0x5e>
 8013ef8:	4620      	mov	r0, r4
 8013efa:	f000 f85b 	bl	8013fb4 <_free_r>
 8013efe:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8013f00:	b111      	cbz	r1, 8013f08 <_reclaim_reent+0x68>
 8013f02:	4620      	mov	r0, r4
 8013f04:	f000 f856 	bl	8013fb4 <_free_r>
 8013f08:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8013f0a:	b111      	cbz	r1, 8013f12 <_reclaim_reent+0x72>
 8013f0c:	4620      	mov	r0, r4
 8013f0e:	f000 f851 	bl	8013fb4 <_free_r>
 8013f12:	6a23      	ldr	r3, [r4, #32]
 8013f14:	b1b3      	cbz	r3, 8013f44 <_reclaim_reent+0xa4>
 8013f16:	4620      	mov	r0, r4
 8013f18:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013f1c:	4718      	bx	r3
 8013f1e:	5949      	ldr	r1, [r1, r5]
 8013f20:	b941      	cbnz	r1, 8013f34 <_reclaim_reent+0x94>
 8013f22:	3504      	adds	r5, #4
 8013f24:	69e3      	ldr	r3, [r4, #28]
 8013f26:	2d80      	cmp	r5, #128	; 0x80
 8013f28:	68d9      	ldr	r1, [r3, #12]
 8013f2a:	d1f8      	bne.n	8013f1e <_reclaim_reent+0x7e>
 8013f2c:	4620      	mov	r0, r4
 8013f2e:	f000 f841 	bl	8013fb4 <_free_r>
 8013f32:	e7c0      	b.n	8013eb6 <_reclaim_reent+0x16>
 8013f34:	680e      	ldr	r6, [r1, #0]
 8013f36:	4620      	mov	r0, r4
 8013f38:	f000 f83c 	bl	8013fb4 <_free_r>
 8013f3c:	4631      	mov	r1, r6
 8013f3e:	e7ef      	b.n	8013f20 <_reclaim_reent+0x80>
 8013f40:	2500      	movs	r5, #0
 8013f42:	e7ef      	b.n	8013f24 <_reclaim_reent+0x84>
 8013f44:	bd70      	pop	{r4, r5, r6, pc}
 8013f46:	bf00      	nop
 8013f48:	20000198 	.word	0x20000198

08013f4c <__libc_init_array>:
 8013f4c:	b570      	push	{r4, r5, r6, lr}
 8013f4e:	4d0d      	ldr	r5, [pc, #52]	; (8013f84 <__libc_init_array+0x38>)
 8013f50:	4c0d      	ldr	r4, [pc, #52]	; (8013f88 <__libc_init_array+0x3c>)
 8013f52:	1b64      	subs	r4, r4, r5
 8013f54:	10a4      	asrs	r4, r4, #2
 8013f56:	2600      	movs	r6, #0
 8013f58:	42a6      	cmp	r6, r4
 8013f5a:	d109      	bne.n	8013f70 <__libc_init_array+0x24>
 8013f5c:	4d0b      	ldr	r5, [pc, #44]	; (8013f8c <__libc_init_array+0x40>)
 8013f5e:	4c0c      	ldr	r4, [pc, #48]	; (8013f90 <__libc_init_array+0x44>)
 8013f60:	f001 f90e 	bl	8015180 <_init>
 8013f64:	1b64      	subs	r4, r4, r5
 8013f66:	10a4      	asrs	r4, r4, #2
 8013f68:	2600      	movs	r6, #0
 8013f6a:	42a6      	cmp	r6, r4
 8013f6c:	d105      	bne.n	8013f7a <__libc_init_array+0x2e>
 8013f6e:	bd70      	pop	{r4, r5, r6, pc}
 8013f70:	f855 3b04 	ldr.w	r3, [r5], #4
 8013f74:	4798      	blx	r3
 8013f76:	3601      	adds	r6, #1
 8013f78:	e7ee      	b.n	8013f58 <__libc_init_array+0xc>
 8013f7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8013f7e:	4798      	blx	r3
 8013f80:	3601      	adds	r6, #1
 8013f82:	e7f2      	b.n	8013f6a <__libc_init_array+0x1e>
 8013f84:	08015e00 	.word	0x08015e00
 8013f88:	08015e00 	.word	0x08015e00
 8013f8c:	08015e00 	.word	0x08015e00
 8013f90:	08015e04 	.word	0x08015e04

08013f94 <__retarget_lock_acquire_recursive>:
 8013f94:	4770      	bx	lr

08013f96 <__retarget_lock_release_recursive>:
 8013f96:	4770      	bx	lr

08013f98 <memcpy>:
 8013f98:	440a      	add	r2, r1
 8013f9a:	4291      	cmp	r1, r2
 8013f9c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8013fa0:	d100      	bne.n	8013fa4 <memcpy+0xc>
 8013fa2:	4770      	bx	lr
 8013fa4:	b510      	push	{r4, lr}
 8013fa6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013faa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013fae:	4291      	cmp	r1, r2
 8013fb0:	d1f9      	bne.n	8013fa6 <memcpy+0xe>
 8013fb2:	bd10      	pop	{r4, pc}

08013fb4 <_free_r>:
 8013fb4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013fb6:	2900      	cmp	r1, #0
 8013fb8:	d044      	beq.n	8014044 <_free_r+0x90>
 8013fba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013fbe:	9001      	str	r0, [sp, #4]
 8013fc0:	2b00      	cmp	r3, #0
 8013fc2:	f1a1 0404 	sub.w	r4, r1, #4
 8013fc6:	bfb8      	it	lt
 8013fc8:	18e4      	addlt	r4, r4, r3
 8013fca:	f7ff ff2f 	bl	8013e2c <__malloc_lock>
 8013fce:	4a1e      	ldr	r2, [pc, #120]	; (8014048 <_free_r+0x94>)
 8013fd0:	9801      	ldr	r0, [sp, #4]
 8013fd2:	6813      	ldr	r3, [r2, #0]
 8013fd4:	b933      	cbnz	r3, 8013fe4 <_free_r+0x30>
 8013fd6:	6063      	str	r3, [r4, #4]
 8013fd8:	6014      	str	r4, [r2, #0]
 8013fda:	b003      	add	sp, #12
 8013fdc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013fe0:	f7ff bf2a 	b.w	8013e38 <__malloc_unlock>
 8013fe4:	42a3      	cmp	r3, r4
 8013fe6:	d908      	bls.n	8013ffa <_free_r+0x46>
 8013fe8:	6825      	ldr	r5, [r4, #0]
 8013fea:	1961      	adds	r1, r4, r5
 8013fec:	428b      	cmp	r3, r1
 8013fee:	bf01      	itttt	eq
 8013ff0:	6819      	ldreq	r1, [r3, #0]
 8013ff2:	685b      	ldreq	r3, [r3, #4]
 8013ff4:	1949      	addeq	r1, r1, r5
 8013ff6:	6021      	streq	r1, [r4, #0]
 8013ff8:	e7ed      	b.n	8013fd6 <_free_r+0x22>
 8013ffa:	461a      	mov	r2, r3
 8013ffc:	685b      	ldr	r3, [r3, #4]
 8013ffe:	b10b      	cbz	r3, 8014004 <_free_r+0x50>
 8014000:	42a3      	cmp	r3, r4
 8014002:	d9fa      	bls.n	8013ffa <_free_r+0x46>
 8014004:	6811      	ldr	r1, [r2, #0]
 8014006:	1855      	adds	r5, r2, r1
 8014008:	42a5      	cmp	r5, r4
 801400a:	d10b      	bne.n	8014024 <_free_r+0x70>
 801400c:	6824      	ldr	r4, [r4, #0]
 801400e:	4421      	add	r1, r4
 8014010:	1854      	adds	r4, r2, r1
 8014012:	42a3      	cmp	r3, r4
 8014014:	6011      	str	r1, [r2, #0]
 8014016:	d1e0      	bne.n	8013fda <_free_r+0x26>
 8014018:	681c      	ldr	r4, [r3, #0]
 801401a:	685b      	ldr	r3, [r3, #4]
 801401c:	6053      	str	r3, [r2, #4]
 801401e:	440c      	add	r4, r1
 8014020:	6014      	str	r4, [r2, #0]
 8014022:	e7da      	b.n	8013fda <_free_r+0x26>
 8014024:	d902      	bls.n	801402c <_free_r+0x78>
 8014026:	230c      	movs	r3, #12
 8014028:	6003      	str	r3, [r0, #0]
 801402a:	e7d6      	b.n	8013fda <_free_r+0x26>
 801402c:	6825      	ldr	r5, [r4, #0]
 801402e:	1961      	adds	r1, r4, r5
 8014030:	428b      	cmp	r3, r1
 8014032:	bf04      	itt	eq
 8014034:	6819      	ldreq	r1, [r3, #0]
 8014036:	685b      	ldreq	r3, [r3, #4]
 8014038:	6063      	str	r3, [r4, #4]
 801403a:	bf04      	itt	eq
 801403c:	1949      	addeq	r1, r1, r5
 801403e:	6021      	streq	r1, [r4, #0]
 8014040:	6054      	str	r4, [r2, #4]
 8014042:	e7ca      	b.n	8013fda <_free_r+0x26>
 8014044:	b003      	add	sp, #12
 8014046:	bd30      	pop	{r4, r5, pc}
 8014048:	20017690 	.word	0x20017690
 801404c:	00000000 	.word	0x00000000

08014050 <cos>:
 8014050:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014052:	ec53 2b10 	vmov	r2, r3, d0
 8014056:	4826      	ldr	r0, [pc, #152]	; (80140f0 <cos+0xa0>)
 8014058:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801405c:	4281      	cmp	r1, r0
 801405e:	dc06      	bgt.n	801406e <cos+0x1e>
 8014060:	ed9f 1b21 	vldr	d1, [pc, #132]	; 80140e8 <cos+0x98>
 8014064:	b005      	add	sp, #20
 8014066:	f85d eb04 	ldr.w	lr, [sp], #4
 801406a:	f000 be01 	b.w	8014c70 <__kernel_cos>
 801406e:	4821      	ldr	r0, [pc, #132]	; (80140f4 <cos+0xa4>)
 8014070:	4281      	cmp	r1, r0
 8014072:	dd09      	ble.n	8014088 <cos+0x38>
 8014074:	ee10 0a10 	vmov	r0, s0
 8014078:	4619      	mov	r1, r3
 801407a:	f7ec f8c5 	bl	8000208 <__aeabi_dsub>
 801407e:	ec41 0b10 	vmov	d0, r0, r1
 8014082:	b005      	add	sp, #20
 8014084:	f85d fb04 	ldr.w	pc, [sp], #4
 8014088:	4668      	mov	r0, sp
 801408a:	f000 f899 	bl	80141c0 <__ieee754_rem_pio2>
 801408e:	f000 0003 	and.w	r0, r0, #3
 8014092:	2801      	cmp	r0, #1
 8014094:	d00b      	beq.n	80140ae <cos+0x5e>
 8014096:	2802      	cmp	r0, #2
 8014098:	d016      	beq.n	80140c8 <cos+0x78>
 801409a:	b9e0      	cbnz	r0, 80140d6 <cos+0x86>
 801409c:	ed9d 1b02 	vldr	d1, [sp, #8]
 80140a0:	ed9d 0b00 	vldr	d0, [sp]
 80140a4:	f000 fde4 	bl	8014c70 <__kernel_cos>
 80140a8:	ec51 0b10 	vmov	r0, r1, d0
 80140ac:	e7e7      	b.n	801407e <cos+0x2e>
 80140ae:	ed9d 1b02 	vldr	d1, [sp, #8]
 80140b2:	ed9d 0b00 	vldr	d0, [sp]
 80140b6:	f000 fea3 	bl	8014e00 <__kernel_sin>
 80140ba:	ec53 2b10 	vmov	r2, r3, d0
 80140be:	ee10 0a10 	vmov	r0, s0
 80140c2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80140c6:	e7da      	b.n	801407e <cos+0x2e>
 80140c8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80140cc:	ed9d 0b00 	vldr	d0, [sp]
 80140d0:	f000 fdce 	bl	8014c70 <__kernel_cos>
 80140d4:	e7f1      	b.n	80140ba <cos+0x6a>
 80140d6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80140da:	ed9d 0b00 	vldr	d0, [sp]
 80140de:	2001      	movs	r0, #1
 80140e0:	f000 fe8e 	bl	8014e00 <__kernel_sin>
 80140e4:	e7e0      	b.n	80140a8 <cos+0x58>
 80140e6:	bf00      	nop
	...
 80140f0:	3fe921fb 	.word	0x3fe921fb
 80140f4:	7fefffff 	.word	0x7fefffff

080140f8 <fabs>:
 80140f8:	ec51 0b10 	vmov	r0, r1, d0
 80140fc:	ee10 2a10 	vmov	r2, s0
 8014100:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8014104:	ec43 2b10 	vmov	d0, r2, r3
 8014108:	4770      	bx	lr
 801410a:	0000      	movs	r0, r0
 801410c:	0000      	movs	r0, r0
	...

08014110 <sin>:
 8014110:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014112:	ec53 2b10 	vmov	r2, r3, d0
 8014116:	4828      	ldr	r0, [pc, #160]	; (80141b8 <sin+0xa8>)
 8014118:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801411c:	4281      	cmp	r1, r0
 801411e:	dc07      	bgt.n	8014130 <sin+0x20>
 8014120:	ed9f 1b23 	vldr	d1, [pc, #140]	; 80141b0 <sin+0xa0>
 8014124:	2000      	movs	r0, #0
 8014126:	b005      	add	sp, #20
 8014128:	f85d eb04 	ldr.w	lr, [sp], #4
 801412c:	f000 be68 	b.w	8014e00 <__kernel_sin>
 8014130:	4822      	ldr	r0, [pc, #136]	; (80141bc <sin+0xac>)
 8014132:	4281      	cmp	r1, r0
 8014134:	dd09      	ble.n	801414a <sin+0x3a>
 8014136:	ee10 0a10 	vmov	r0, s0
 801413a:	4619      	mov	r1, r3
 801413c:	f7ec f864 	bl	8000208 <__aeabi_dsub>
 8014140:	ec41 0b10 	vmov	d0, r0, r1
 8014144:	b005      	add	sp, #20
 8014146:	f85d fb04 	ldr.w	pc, [sp], #4
 801414a:	4668      	mov	r0, sp
 801414c:	f000 f838 	bl	80141c0 <__ieee754_rem_pio2>
 8014150:	f000 0003 	and.w	r0, r0, #3
 8014154:	2801      	cmp	r0, #1
 8014156:	d00c      	beq.n	8014172 <sin+0x62>
 8014158:	2802      	cmp	r0, #2
 801415a:	d011      	beq.n	8014180 <sin+0x70>
 801415c:	b9f0      	cbnz	r0, 801419c <sin+0x8c>
 801415e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8014162:	ed9d 0b00 	vldr	d0, [sp]
 8014166:	2001      	movs	r0, #1
 8014168:	f000 fe4a 	bl	8014e00 <__kernel_sin>
 801416c:	ec51 0b10 	vmov	r0, r1, d0
 8014170:	e7e6      	b.n	8014140 <sin+0x30>
 8014172:	ed9d 1b02 	vldr	d1, [sp, #8]
 8014176:	ed9d 0b00 	vldr	d0, [sp]
 801417a:	f000 fd79 	bl	8014c70 <__kernel_cos>
 801417e:	e7f5      	b.n	801416c <sin+0x5c>
 8014180:	ed9d 1b02 	vldr	d1, [sp, #8]
 8014184:	ed9d 0b00 	vldr	d0, [sp]
 8014188:	2001      	movs	r0, #1
 801418a:	f000 fe39 	bl	8014e00 <__kernel_sin>
 801418e:	ec53 2b10 	vmov	r2, r3, d0
 8014192:	ee10 0a10 	vmov	r0, s0
 8014196:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801419a:	e7d1      	b.n	8014140 <sin+0x30>
 801419c:	ed9d 1b02 	vldr	d1, [sp, #8]
 80141a0:	ed9d 0b00 	vldr	d0, [sp]
 80141a4:	f000 fd64 	bl	8014c70 <__kernel_cos>
 80141a8:	e7f1      	b.n	801418e <sin+0x7e>
 80141aa:	bf00      	nop
 80141ac:	f3af 8000 	nop.w
	...
 80141b8:	3fe921fb 	.word	0x3fe921fb
 80141bc:	7fefffff 	.word	0x7fefffff

080141c0 <__ieee754_rem_pio2>:
 80141c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80141c4:	ed2d 8b02 	vpush	{d8}
 80141c8:	ec55 4b10 	vmov	r4, r5, d0
 80141cc:	4bca      	ldr	r3, [pc, #808]	; (80144f8 <__ieee754_rem_pio2+0x338>)
 80141ce:	b08b      	sub	sp, #44	; 0x2c
 80141d0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80141d4:	4598      	cmp	r8, r3
 80141d6:	4682      	mov	sl, r0
 80141d8:	9502      	str	r5, [sp, #8]
 80141da:	dc08      	bgt.n	80141ee <__ieee754_rem_pio2+0x2e>
 80141dc:	2200      	movs	r2, #0
 80141de:	2300      	movs	r3, #0
 80141e0:	ed80 0b00 	vstr	d0, [r0]
 80141e4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80141e8:	f04f 0b00 	mov.w	fp, #0
 80141ec:	e028      	b.n	8014240 <__ieee754_rem_pio2+0x80>
 80141ee:	4bc3      	ldr	r3, [pc, #780]	; (80144fc <__ieee754_rem_pio2+0x33c>)
 80141f0:	4598      	cmp	r8, r3
 80141f2:	dc78      	bgt.n	80142e6 <__ieee754_rem_pio2+0x126>
 80141f4:	9b02      	ldr	r3, [sp, #8]
 80141f6:	4ec2      	ldr	r6, [pc, #776]	; (8014500 <__ieee754_rem_pio2+0x340>)
 80141f8:	2b00      	cmp	r3, #0
 80141fa:	ee10 0a10 	vmov	r0, s0
 80141fe:	a3b0      	add	r3, pc, #704	; (adr r3, 80144c0 <__ieee754_rem_pio2+0x300>)
 8014200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014204:	4629      	mov	r1, r5
 8014206:	dd39      	ble.n	801427c <__ieee754_rem_pio2+0xbc>
 8014208:	f7eb fffe 	bl	8000208 <__aeabi_dsub>
 801420c:	45b0      	cmp	r8, r6
 801420e:	4604      	mov	r4, r0
 8014210:	460d      	mov	r5, r1
 8014212:	d01b      	beq.n	801424c <__ieee754_rem_pio2+0x8c>
 8014214:	a3ac      	add	r3, pc, #688	; (adr r3, 80144c8 <__ieee754_rem_pio2+0x308>)
 8014216:	e9d3 2300 	ldrd	r2, r3, [r3]
 801421a:	f7eb fff5 	bl	8000208 <__aeabi_dsub>
 801421e:	4602      	mov	r2, r0
 8014220:	460b      	mov	r3, r1
 8014222:	e9ca 2300 	strd	r2, r3, [sl]
 8014226:	4620      	mov	r0, r4
 8014228:	4629      	mov	r1, r5
 801422a:	f7eb ffed 	bl	8000208 <__aeabi_dsub>
 801422e:	a3a6      	add	r3, pc, #664	; (adr r3, 80144c8 <__ieee754_rem_pio2+0x308>)
 8014230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014234:	f7eb ffe8 	bl	8000208 <__aeabi_dsub>
 8014238:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801423c:	f04f 0b01 	mov.w	fp, #1
 8014240:	4658      	mov	r0, fp
 8014242:	b00b      	add	sp, #44	; 0x2c
 8014244:	ecbd 8b02 	vpop	{d8}
 8014248:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801424c:	a3a0      	add	r3, pc, #640	; (adr r3, 80144d0 <__ieee754_rem_pio2+0x310>)
 801424e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014252:	f7eb ffd9 	bl	8000208 <__aeabi_dsub>
 8014256:	a3a0      	add	r3, pc, #640	; (adr r3, 80144d8 <__ieee754_rem_pio2+0x318>)
 8014258:	e9d3 2300 	ldrd	r2, r3, [r3]
 801425c:	4604      	mov	r4, r0
 801425e:	460d      	mov	r5, r1
 8014260:	f7eb ffd2 	bl	8000208 <__aeabi_dsub>
 8014264:	4602      	mov	r2, r0
 8014266:	460b      	mov	r3, r1
 8014268:	e9ca 2300 	strd	r2, r3, [sl]
 801426c:	4620      	mov	r0, r4
 801426e:	4629      	mov	r1, r5
 8014270:	f7eb ffca 	bl	8000208 <__aeabi_dsub>
 8014274:	a398      	add	r3, pc, #608	; (adr r3, 80144d8 <__ieee754_rem_pio2+0x318>)
 8014276:	e9d3 2300 	ldrd	r2, r3, [r3]
 801427a:	e7db      	b.n	8014234 <__ieee754_rem_pio2+0x74>
 801427c:	f7eb ffc6 	bl	800020c <__adddf3>
 8014280:	45b0      	cmp	r8, r6
 8014282:	4604      	mov	r4, r0
 8014284:	460d      	mov	r5, r1
 8014286:	d016      	beq.n	80142b6 <__ieee754_rem_pio2+0xf6>
 8014288:	a38f      	add	r3, pc, #572	; (adr r3, 80144c8 <__ieee754_rem_pio2+0x308>)
 801428a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801428e:	f7eb ffbd 	bl	800020c <__adddf3>
 8014292:	4602      	mov	r2, r0
 8014294:	460b      	mov	r3, r1
 8014296:	e9ca 2300 	strd	r2, r3, [sl]
 801429a:	4620      	mov	r0, r4
 801429c:	4629      	mov	r1, r5
 801429e:	f7eb ffb3 	bl	8000208 <__aeabi_dsub>
 80142a2:	a389      	add	r3, pc, #548	; (adr r3, 80144c8 <__ieee754_rem_pio2+0x308>)
 80142a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142a8:	f7eb ffb0 	bl	800020c <__adddf3>
 80142ac:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 80142b0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80142b4:	e7c4      	b.n	8014240 <__ieee754_rem_pio2+0x80>
 80142b6:	a386      	add	r3, pc, #536	; (adr r3, 80144d0 <__ieee754_rem_pio2+0x310>)
 80142b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142bc:	f7eb ffa6 	bl	800020c <__adddf3>
 80142c0:	a385      	add	r3, pc, #532	; (adr r3, 80144d8 <__ieee754_rem_pio2+0x318>)
 80142c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142c6:	4604      	mov	r4, r0
 80142c8:	460d      	mov	r5, r1
 80142ca:	f7eb ff9f 	bl	800020c <__adddf3>
 80142ce:	4602      	mov	r2, r0
 80142d0:	460b      	mov	r3, r1
 80142d2:	e9ca 2300 	strd	r2, r3, [sl]
 80142d6:	4620      	mov	r0, r4
 80142d8:	4629      	mov	r1, r5
 80142da:	f7eb ff95 	bl	8000208 <__aeabi_dsub>
 80142de:	a37e      	add	r3, pc, #504	; (adr r3, 80144d8 <__ieee754_rem_pio2+0x318>)
 80142e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142e4:	e7e0      	b.n	80142a8 <__ieee754_rem_pio2+0xe8>
 80142e6:	4b87      	ldr	r3, [pc, #540]	; (8014504 <__ieee754_rem_pio2+0x344>)
 80142e8:	4598      	cmp	r8, r3
 80142ea:	f300 80d8 	bgt.w	801449e <__ieee754_rem_pio2+0x2de>
 80142ee:	f7ff ff03 	bl	80140f8 <fabs>
 80142f2:	ec55 4b10 	vmov	r4, r5, d0
 80142f6:	ee10 0a10 	vmov	r0, s0
 80142fa:	a379      	add	r3, pc, #484	; (adr r3, 80144e0 <__ieee754_rem_pio2+0x320>)
 80142fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014300:	4629      	mov	r1, r5
 8014302:	f7ec f939 	bl	8000578 <__aeabi_dmul>
 8014306:	4b80      	ldr	r3, [pc, #512]	; (8014508 <__ieee754_rem_pio2+0x348>)
 8014308:	2200      	movs	r2, #0
 801430a:	f7eb ff7f 	bl	800020c <__adddf3>
 801430e:	f7ec fbcd 	bl	8000aac <__aeabi_d2iz>
 8014312:	4683      	mov	fp, r0
 8014314:	f7ec f8c6 	bl	80004a4 <__aeabi_i2d>
 8014318:	4602      	mov	r2, r0
 801431a:	460b      	mov	r3, r1
 801431c:	ec43 2b18 	vmov	d8, r2, r3
 8014320:	a367      	add	r3, pc, #412	; (adr r3, 80144c0 <__ieee754_rem_pio2+0x300>)
 8014322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014326:	f7ec f927 	bl	8000578 <__aeabi_dmul>
 801432a:	4602      	mov	r2, r0
 801432c:	460b      	mov	r3, r1
 801432e:	4620      	mov	r0, r4
 8014330:	4629      	mov	r1, r5
 8014332:	f7eb ff69 	bl	8000208 <__aeabi_dsub>
 8014336:	a364      	add	r3, pc, #400	; (adr r3, 80144c8 <__ieee754_rem_pio2+0x308>)
 8014338:	e9d3 2300 	ldrd	r2, r3, [r3]
 801433c:	4606      	mov	r6, r0
 801433e:	460f      	mov	r7, r1
 8014340:	ec51 0b18 	vmov	r0, r1, d8
 8014344:	f7ec f918 	bl	8000578 <__aeabi_dmul>
 8014348:	f1bb 0f1f 	cmp.w	fp, #31
 801434c:	4604      	mov	r4, r0
 801434e:	460d      	mov	r5, r1
 8014350:	dc0d      	bgt.n	801436e <__ieee754_rem_pio2+0x1ae>
 8014352:	4b6e      	ldr	r3, [pc, #440]	; (801450c <__ieee754_rem_pio2+0x34c>)
 8014354:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 8014358:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801435c:	4543      	cmp	r3, r8
 801435e:	d006      	beq.n	801436e <__ieee754_rem_pio2+0x1ae>
 8014360:	4622      	mov	r2, r4
 8014362:	462b      	mov	r3, r5
 8014364:	4630      	mov	r0, r6
 8014366:	4639      	mov	r1, r7
 8014368:	f7eb ff4e 	bl	8000208 <__aeabi_dsub>
 801436c:	e00e      	b.n	801438c <__ieee754_rem_pio2+0x1cc>
 801436e:	462b      	mov	r3, r5
 8014370:	4622      	mov	r2, r4
 8014372:	4630      	mov	r0, r6
 8014374:	4639      	mov	r1, r7
 8014376:	f7eb ff47 	bl	8000208 <__aeabi_dsub>
 801437a:	ea4f 5328 	mov.w	r3, r8, asr #20
 801437e:	9303      	str	r3, [sp, #12]
 8014380:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8014384:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8014388:	2b10      	cmp	r3, #16
 801438a:	dc02      	bgt.n	8014392 <__ieee754_rem_pio2+0x1d2>
 801438c:	e9ca 0100 	strd	r0, r1, [sl]
 8014390:	e039      	b.n	8014406 <__ieee754_rem_pio2+0x246>
 8014392:	a34f      	add	r3, pc, #316	; (adr r3, 80144d0 <__ieee754_rem_pio2+0x310>)
 8014394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014398:	ec51 0b18 	vmov	r0, r1, d8
 801439c:	f7ec f8ec 	bl	8000578 <__aeabi_dmul>
 80143a0:	4604      	mov	r4, r0
 80143a2:	460d      	mov	r5, r1
 80143a4:	4602      	mov	r2, r0
 80143a6:	460b      	mov	r3, r1
 80143a8:	4630      	mov	r0, r6
 80143aa:	4639      	mov	r1, r7
 80143ac:	f7eb ff2c 	bl	8000208 <__aeabi_dsub>
 80143b0:	4602      	mov	r2, r0
 80143b2:	460b      	mov	r3, r1
 80143b4:	4680      	mov	r8, r0
 80143b6:	4689      	mov	r9, r1
 80143b8:	4630      	mov	r0, r6
 80143ba:	4639      	mov	r1, r7
 80143bc:	f7eb ff24 	bl	8000208 <__aeabi_dsub>
 80143c0:	4622      	mov	r2, r4
 80143c2:	462b      	mov	r3, r5
 80143c4:	f7eb ff20 	bl	8000208 <__aeabi_dsub>
 80143c8:	a343      	add	r3, pc, #268	; (adr r3, 80144d8 <__ieee754_rem_pio2+0x318>)
 80143ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80143ce:	4604      	mov	r4, r0
 80143d0:	460d      	mov	r5, r1
 80143d2:	ec51 0b18 	vmov	r0, r1, d8
 80143d6:	f7ec f8cf 	bl	8000578 <__aeabi_dmul>
 80143da:	4622      	mov	r2, r4
 80143dc:	462b      	mov	r3, r5
 80143de:	f7eb ff13 	bl	8000208 <__aeabi_dsub>
 80143e2:	4602      	mov	r2, r0
 80143e4:	460b      	mov	r3, r1
 80143e6:	4604      	mov	r4, r0
 80143e8:	460d      	mov	r5, r1
 80143ea:	4640      	mov	r0, r8
 80143ec:	4649      	mov	r1, r9
 80143ee:	f7eb ff0b 	bl	8000208 <__aeabi_dsub>
 80143f2:	9a03      	ldr	r2, [sp, #12]
 80143f4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80143f8:	1ad3      	subs	r3, r2, r3
 80143fa:	2b31      	cmp	r3, #49	; 0x31
 80143fc:	dc24      	bgt.n	8014448 <__ieee754_rem_pio2+0x288>
 80143fe:	e9ca 0100 	strd	r0, r1, [sl]
 8014402:	4646      	mov	r6, r8
 8014404:	464f      	mov	r7, r9
 8014406:	e9da 8900 	ldrd	r8, r9, [sl]
 801440a:	4630      	mov	r0, r6
 801440c:	4642      	mov	r2, r8
 801440e:	464b      	mov	r3, r9
 8014410:	4639      	mov	r1, r7
 8014412:	f7eb fef9 	bl	8000208 <__aeabi_dsub>
 8014416:	462b      	mov	r3, r5
 8014418:	4622      	mov	r2, r4
 801441a:	f7eb fef5 	bl	8000208 <__aeabi_dsub>
 801441e:	9b02      	ldr	r3, [sp, #8]
 8014420:	2b00      	cmp	r3, #0
 8014422:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8014426:	f6bf af0b 	bge.w	8014240 <__ieee754_rem_pio2+0x80>
 801442a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801442e:	f8ca 3004 	str.w	r3, [sl, #4]
 8014432:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014436:	f8ca 8000 	str.w	r8, [sl]
 801443a:	f8ca 0008 	str.w	r0, [sl, #8]
 801443e:	f8ca 300c 	str.w	r3, [sl, #12]
 8014442:	f1cb 0b00 	rsb	fp, fp, #0
 8014446:	e6fb      	b.n	8014240 <__ieee754_rem_pio2+0x80>
 8014448:	a327      	add	r3, pc, #156	; (adr r3, 80144e8 <__ieee754_rem_pio2+0x328>)
 801444a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801444e:	ec51 0b18 	vmov	r0, r1, d8
 8014452:	f7ec f891 	bl	8000578 <__aeabi_dmul>
 8014456:	4604      	mov	r4, r0
 8014458:	460d      	mov	r5, r1
 801445a:	4602      	mov	r2, r0
 801445c:	460b      	mov	r3, r1
 801445e:	4640      	mov	r0, r8
 8014460:	4649      	mov	r1, r9
 8014462:	f7eb fed1 	bl	8000208 <__aeabi_dsub>
 8014466:	4602      	mov	r2, r0
 8014468:	460b      	mov	r3, r1
 801446a:	4606      	mov	r6, r0
 801446c:	460f      	mov	r7, r1
 801446e:	4640      	mov	r0, r8
 8014470:	4649      	mov	r1, r9
 8014472:	f7eb fec9 	bl	8000208 <__aeabi_dsub>
 8014476:	4622      	mov	r2, r4
 8014478:	462b      	mov	r3, r5
 801447a:	f7eb fec5 	bl	8000208 <__aeabi_dsub>
 801447e:	a31c      	add	r3, pc, #112	; (adr r3, 80144f0 <__ieee754_rem_pio2+0x330>)
 8014480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014484:	4604      	mov	r4, r0
 8014486:	460d      	mov	r5, r1
 8014488:	ec51 0b18 	vmov	r0, r1, d8
 801448c:	f7ec f874 	bl	8000578 <__aeabi_dmul>
 8014490:	4622      	mov	r2, r4
 8014492:	462b      	mov	r3, r5
 8014494:	f7eb feb8 	bl	8000208 <__aeabi_dsub>
 8014498:	4604      	mov	r4, r0
 801449a:	460d      	mov	r5, r1
 801449c:	e760      	b.n	8014360 <__ieee754_rem_pio2+0x1a0>
 801449e:	4b1c      	ldr	r3, [pc, #112]	; (8014510 <__ieee754_rem_pio2+0x350>)
 80144a0:	4598      	cmp	r8, r3
 80144a2:	dd37      	ble.n	8014514 <__ieee754_rem_pio2+0x354>
 80144a4:	ee10 2a10 	vmov	r2, s0
 80144a8:	462b      	mov	r3, r5
 80144aa:	4620      	mov	r0, r4
 80144ac:	4629      	mov	r1, r5
 80144ae:	f7eb feab 	bl	8000208 <__aeabi_dsub>
 80144b2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80144b6:	e9ca 0100 	strd	r0, r1, [sl]
 80144ba:	e695      	b.n	80141e8 <__ieee754_rem_pio2+0x28>
 80144bc:	f3af 8000 	nop.w
 80144c0:	54400000 	.word	0x54400000
 80144c4:	3ff921fb 	.word	0x3ff921fb
 80144c8:	1a626331 	.word	0x1a626331
 80144cc:	3dd0b461 	.word	0x3dd0b461
 80144d0:	1a600000 	.word	0x1a600000
 80144d4:	3dd0b461 	.word	0x3dd0b461
 80144d8:	2e037073 	.word	0x2e037073
 80144dc:	3ba3198a 	.word	0x3ba3198a
 80144e0:	6dc9c883 	.word	0x6dc9c883
 80144e4:	3fe45f30 	.word	0x3fe45f30
 80144e8:	2e000000 	.word	0x2e000000
 80144ec:	3ba3198a 	.word	0x3ba3198a
 80144f0:	252049c1 	.word	0x252049c1
 80144f4:	397b839a 	.word	0x397b839a
 80144f8:	3fe921fb 	.word	0x3fe921fb
 80144fc:	4002d97b 	.word	0x4002d97b
 8014500:	3ff921fb 	.word	0x3ff921fb
 8014504:	413921fb 	.word	0x413921fb
 8014508:	3fe00000 	.word	0x3fe00000
 801450c:	08015c20 	.word	0x08015c20
 8014510:	7fefffff 	.word	0x7fefffff
 8014514:	ea4f 5628 	mov.w	r6, r8, asr #20
 8014518:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 801451c:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 8014520:	4620      	mov	r0, r4
 8014522:	460d      	mov	r5, r1
 8014524:	f7ec fac2 	bl	8000aac <__aeabi_d2iz>
 8014528:	f7eb ffbc 	bl	80004a4 <__aeabi_i2d>
 801452c:	4602      	mov	r2, r0
 801452e:	460b      	mov	r3, r1
 8014530:	4620      	mov	r0, r4
 8014532:	4629      	mov	r1, r5
 8014534:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8014538:	f7eb fe66 	bl	8000208 <__aeabi_dsub>
 801453c:	4b21      	ldr	r3, [pc, #132]	; (80145c4 <__ieee754_rem_pio2+0x404>)
 801453e:	2200      	movs	r2, #0
 8014540:	f7ec f81a 	bl	8000578 <__aeabi_dmul>
 8014544:	460d      	mov	r5, r1
 8014546:	4604      	mov	r4, r0
 8014548:	f7ec fab0 	bl	8000aac <__aeabi_d2iz>
 801454c:	f7eb ffaa 	bl	80004a4 <__aeabi_i2d>
 8014550:	4602      	mov	r2, r0
 8014552:	460b      	mov	r3, r1
 8014554:	4620      	mov	r0, r4
 8014556:	4629      	mov	r1, r5
 8014558:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801455c:	f7eb fe54 	bl	8000208 <__aeabi_dsub>
 8014560:	4b18      	ldr	r3, [pc, #96]	; (80145c4 <__ieee754_rem_pio2+0x404>)
 8014562:	2200      	movs	r2, #0
 8014564:	f7ec f808 	bl	8000578 <__aeabi_dmul>
 8014568:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801456c:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8014570:	2703      	movs	r7, #3
 8014572:	2400      	movs	r4, #0
 8014574:	2500      	movs	r5, #0
 8014576:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 801457a:	4622      	mov	r2, r4
 801457c:	462b      	mov	r3, r5
 801457e:	46b9      	mov	r9, r7
 8014580:	3f01      	subs	r7, #1
 8014582:	f7ec fa61 	bl	8000a48 <__aeabi_dcmpeq>
 8014586:	2800      	cmp	r0, #0
 8014588:	d1f5      	bne.n	8014576 <__ieee754_rem_pio2+0x3b6>
 801458a:	4b0f      	ldr	r3, [pc, #60]	; (80145c8 <__ieee754_rem_pio2+0x408>)
 801458c:	9301      	str	r3, [sp, #4]
 801458e:	2302      	movs	r3, #2
 8014590:	9300      	str	r3, [sp, #0]
 8014592:	4632      	mov	r2, r6
 8014594:	464b      	mov	r3, r9
 8014596:	4651      	mov	r1, sl
 8014598:	a804      	add	r0, sp, #16
 801459a:	f000 f819 	bl	80145d0 <__kernel_rem_pio2>
 801459e:	9b02      	ldr	r3, [sp, #8]
 80145a0:	2b00      	cmp	r3, #0
 80145a2:	4683      	mov	fp, r0
 80145a4:	f6bf ae4c 	bge.w	8014240 <__ieee754_rem_pio2+0x80>
 80145a8:	e9da 2100 	ldrd	r2, r1, [sl]
 80145ac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80145b0:	e9ca 2300 	strd	r2, r3, [sl]
 80145b4:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 80145b8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80145bc:	e9ca 2302 	strd	r2, r3, [sl, #8]
 80145c0:	e73f      	b.n	8014442 <__ieee754_rem_pio2+0x282>
 80145c2:	bf00      	nop
 80145c4:	41700000 	.word	0x41700000
 80145c8:	08015ca0 	.word	0x08015ca0
 80145cc:	00000000 	.word	0x00000000

080145d0 <__kernel_rem_pio2>:
 80145d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80145d4:	ed2d 8b02 	vpush	{d8}
 80145d8:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 80145dc:	f112 0f14 	cmn.w	r2, #20
 80145e0:	9306      	str	r3, [sp, #24]
 80145e2:	9104      	str	r1, [sp, #16]
 80145e4:	4bc2      	ldr	r3, [pc, #776]	; (80148f0 <__kernel_rem_pio2+0x320>)
 80145e6:	99a4      	ldr	r1, [sp, #656]	; 0x290
 80145e8:	9009      	str	r0, [sp, #36]	; 0x24
 80145ea:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80145ee:	9300      	str	r3, [sp, #0]
 80145f0:	9b06      	ldr	r3, [sp, #24]
 80145f2:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80145f6:	bfa8      	it	ge
 80145f8:	1ed4      	subge	r4, r2, #3
 80145fa:	9305      	str	r3, [sp, #20]
 80145fc:	bfb2      	itee	lt
 80145fe:	2400      	movlt	r4, #0
 8014600:	2318      	movge	r3, #24
 8014602:	fb94 f4f3 	sdivge	r4, r4, r3
 8014606:	f06f 0317 	mvn.w	r3, #23
 801460a:	fb04 3303 	mla	r3, r4, r3, r3
 801460e:	eb03 0a02 	add.w	sl, r3, r2
 8014612:	9b00      	ldr	r3, [sp, #0]
 8014614:	9a05      	ldr	r2, [sp, #20]
 8014616:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 80148e0 <__kernel_rem_pio2+0x310>
 801461a:	eb03 0802 	add.w	r8, r3, r2
 801461e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8014620:	1aa7      	subs	r7, r4, r2
 8014622:	ae20      	add	r6, sp, #128	; 0x80
 8014624:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8014628:	2500      	movs	r5, #0
 801462a:	4545      	cmp	r5, r8
 801462c:	dd13      	ble.n	8014656 <__kernel_rem_pio2+0x86>
 801462e:	9b06      	ldr	r3, [sp, #24]
 8014630:	aa20      	add	r2, sp, #128	; 0x80
 8014632:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8014636:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 801463a:	f04f 0800 	mov.w	r8, #0
 801463e:	9b00      	ldr	r3, [sp, #0]
 8014640:	4598      	cmp	r8, r3
 8014642:	dc31      	bgt.n	80146a8 <__kernel_rem_pio2+0xd8>
 8014644:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 80148e0 <__kernel_rem_pio2+0x310>
 8014648:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801464c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8014650:	462f      	mov	r7, r5
 8014652:	2600      	movs	r6, #0
 8014654:	e01b      	b.n	801468e <__kernel_rem_pio2+0xbe>
 8014656:	42ef      	cmn	r7, r5
 8014658:	d407      	bmi.n	801466a <__kernel_rem_pio2+0x9a>
 801465a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 801465e:	f7eb ff21 	bl	80004a4 <__aeabi_i2d>
 8014662:	e8e6 0102 	strd	r0, r1, [r6], #8
 8014666:	3501      	adds	r5, #1
 8014668:	e7df      	b.n	801462a <__kernel_rem_pio2+0x5a>
 801466a:	ec51 0b18 	vmov	r0, r1, d8
 801466e:	e7f8      	b.n	8014662 <__kernel_rem_pio2+0x92>
 8014670:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014674:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8014678:	f7eb ff7e 	bl	8000578 <__aeabi_dmul>
 801467c:	4602      	mov	r2, r0
 801467e:	460b      	mov	r3, r1
 8014680:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014684:	f7eb fdc2 	bl	800020c <__adddf3>
 8014688:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801468c:	3601      	adds	r6, #1
 801468e:	9b05      	ldr	r3, [sp, #20]
 8014690:	429e      	cmp	r6, r3
 8014692:	f1a7 0708 	sub.w	r7, r7, #8
 8014696:	ddeb      	ble.n	8014670 <__kernel_rem_pio2+0xa0>
 8014698:	ed9d 7b02 	vldr	d7, [sp, #8]
 801469c:	f108 0801 	add.w	r8, r8, #1
 80146a0:	ecab 7b02 	vstmia	fp!, {d7}
 80146a4:	3508      	adds	r5, #8
 80146a6:	e7ca      	b.n	801463e <__kernel_rem_pio2+0x6e>
 80146a8:	9b00      	ldr	r3, [sp, #0]
 80146aa:	aa0c      	add	r2, sp, #48	; 0x30
 80146ac:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80146b0:	930b      	str	r3, [sp, #44]	; 0x2c
 80146b2:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80146b4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80146b8:	9c00      	ldr	r4, [sp, #0]
 80146ba:	930a      	str	r3, [sp, #40]	; 0x28
 80146bc:	00e3      	lsls	r3, r4, #3
 80146be:	9308      	str	r3, [sp, #32]
 80146c0:	ab98      	add	r3, sp, #608	; 0x260
 80146c2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80146c6:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 80146ca:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 80146ce:	ab70      	add	r3, sp, #448	; 0x1c0
 80146d0:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 80146d4:	46c3      	mov	fp, r8
 80146d6:	46a1      	mov	r9, r4
 80146d8:	f1b9 0f00 	cmp.w	r9, #0
 80146dc:	f1a5 0508 	sub.w	r5, r5, #8
 80146e0:	dc77      	bgt.n	80147d2 <__kernel_rem_pio2+0x202>
 80146e2:	ec47 6b10 	vmov	d0, r6, r7
 80146e6:	4650      	mov	r0, sl
 80146e8:	f000 fc4a 	bl	8014f80 <scalbn>
 80146ec:	ec57 6b10 	vmov	r6, r7, d0
 80146f0:	2200      	movs	r2, #0
 80146f2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80146f6:	ee10 0a10 	vmov	r0, s0
 80146fa:	4639      	mov	r1, r7
 80146fc:	f7eb ff3c 	bl	8000578 <__aeabi_dmul>
 8014700:	ec41 0b10 	vmov	d0, r0, r1
 8014704:	f000 fcbc 	bl	8015080 <floor>
 8014708:	4b7a      	ldr	r3, [pc, #488]	; (80148f4 <__kernel_rem_pio2+0x324>)
 801470a:	ec51 0b10 	vmov	r0, r1, d0
 801470e:	2200      	movs	r2, #0
 8014710:	f7eb ff32 	bl	8000578 <__aeabi_dmul>
 8014714:	4602      	mov	r2, r0
 8014716:	460b      	mov	r3, r1
 8014718:	4630      	mov	r0, r6
 801471a:	4639      	mov	r1, r7
 801471c:	f7eb fd74 	bl	8000208 <__aeabi_dsub>
 8014720:	460f      	mov	r7, r1
 8014722:	4606      	mov	r6, r0
 8014724:	f7ec f9c2 	bl	8000aac <__aeabi_d2iz>
 8014728:	9002      	str	r0, [sp, #8]
 801472a:	f7eb febb 	bl	80004a4 <__aeabi_i2d>
 801472e:	4602      	mov	r2, r0
 8014730:	460b      	mov	r3, r1
 8014732:	4630      	mov	r0, r6
 8014734:	4639      	mov	r1, r7
 8014736:	f7eb fd67 	bl	8000208 <__aeabi_dsub>
 801473a:	f1ba 0f00 	cmp.w	sl, #0
 801473e:	4606      	mov	r6, r0
 8014740:	460f      	mov	r7, r1
 8014742:	dd6d      	ble.n	8014820 <__kernel_rem_pio2+0x250>
 8014744:	1e61      	subs	r1, r4, #1
 8014746:	ab0c      	add	r3, sp, #48	; 0x30
 8014748:	9d02      	ldr	r5, [sp, #8]
 801474a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801474e:	f1ca 0018 	rsb	r0, sl, #24
 8014752:	fa43 f200 	asr.w	r2, r3, r0
 8014756:	4415      	add	r5, r2
 8014758:	4082      	lsls	r2, r0
 801475a:	1a9b      	subs	r3, r3, r2
 801475c:	aa0c      	add	r2, sp, #48	; 0x30
 801475e:	9502      	str	r5, [sp, #8]
 8014760:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8014764:	f1ca 0217 	rsb	r2, sl, #23
 8014768:	fa43 fb02 	asr.w	fp, r3, r2
 801476c:	f1bb 0f00 	cmp.w	fp, #0
 8014770:	dd65      	ble.n	801483e <__kernel_rem_pio2+0x26e>
 8014772:	9b02      	ldr	r3, [sp, #8]
 8014774:	2200      	movs	r2, #0
 8014776:	3301      	adds	r3, #1
 8014778:	9302      	str	r3, [sp, #8]
 801477a:	4615      	mov	r5, r2
 801477c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8014780:	4294      	cmp	r4, r2
 8014782:	f300 809f 	bgt.w	80148c4 <__kernel_rem_pio2+0x2f4>
 8014786:	f1ba 0f00 	cmp.w	sl, #0
 801478a:	dd07      	ble.n	801479c <__kernel_rem_pio2+0x1cc>
 801478c:	f1ba 0f01 	cmp.w	sl, #1
 8014790:	f000 80c1 	beq.w	8014916 <__kernel_rem_pio2+0x346>
 8014794:	f1ba 0f02 	cmp.w	sl, #2
 8014798:	f000 80c7 	beq.w	801492a <__kernel_rem_pio2+0x35a>
 801479c:	f1bb 0f02 	cmp.w	fp, #2
 80147a0:	d14d      	bne.n	801483e <__kernel_rem_pio2+0x26e>
 80147a2:	4632      	mov	r2, r6
 80147a4:	463b      	mov	r3, r7
 80147a6:	4954      	ldr	r1, [pc, #336]	; (80148f8 <__kernel_rem_pio2+0x328>)
 80147a8:	2000      	movs	r0, #0
 80147aa:	f7eb fd2d 	bl	8000208 <__aeabi_dsub>
 80147ae:	4606      	mov	r6, r0
 80147b0:	460f      	mov	r7, r1
 80147b2:	2d00      	cmp	r5, #0
 80147b4:	d043      	beq.n	801483e <__kernel_rem_pio2+0x26e>
 80147b6:	4650      	mov	r0, sl
 80147b8:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 80148e8 <__kernel_rem_pio2+0x318>
 80147bc:	f000 fbe0 	bl	8014f80 <scalbn>
 80147c0:	4630      	mov	r0, r6
 80147c2:	4639      	mov	r1, r7
 80147c4:	ec53 2b10 	vmov	r2, r3, d0
 80147c8:	f7eb fd1e 	bl	8000208 <__aeabi_dsub>
 80147cc:	4606      	mov	r6, r0
 80147ce:	460f      	mov	r7, r1
 80147d0:	e035      	b.n	801483e <__kernel_rem_pio2+0x26e>
 80147d2:	4b4a      	ldr	r3, [pc, #296]	; (80148fc <__kernel_rem_pio2+0x32c>)
 80147d4:	2200      	movs	r2, #0
 80147d6:	4630      	mov	r0, r6
 80147d8:	4639      	mov	r1, r7
 80147da:	f7eb fecd 	bl	8000578 <__aeabi_dmul>
 80147de:	f7ec f965 	bl	8000aac <__aeabi_d2iz>
 80147e2:	f7eb fe5f 	bl	80004a4 <__aeabi_i2d>
 80147e6:	4602      	mov	r2, r0
 80147e8:	460b      	mov	r3, r1
 80147ea:	ec43 2b18 	vmov	d8, r2, r3
 80147ee:	4b44      	ldr	r3, [pc, #272]	; (8014900 <__kernel_rem_pio2+0x330>)
 80147f0:	2200      	movs	r2, #0
 80147f2:	f7eb fec1 	bl	8000578 <__aeabi_dmul>
 80147f6:	4602      	mov	r2, r0
 80147f8:	460b      	mov	r3, r1
 80147fa:	4630      	mov	r0, r6
 80147fc:	4639      	mov	r1, r7
 80147fe:	f7eb fd03 	bl	8000208 <__aeabi_dsub>
 8014802:	f7ec f953 	bl	8000aac <__aeabi_d2iz>
 8014806:	e9d5 2300 	ldrd	r2, r3, [r5]
 801480a:	f84b 0b04 	str.w	r0, [fp], #4
 801480e:	ec51 0b18 	vmov	r0, r1, d8
 8014812:	f7eb fcfb 	bl	800020c <__adddf3>
 8014816:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 801481a:	4606      	mov	r6, r0
 801481c:	460f      	mov	r7, r1
 801481e:	e75b      	b.n	80146d8 <__kernel_rem_pio2+0x108>
 8014820:	d106      	bne.n	8014830 <__kernel_rem_pio2+0x260>
 8014822:	1e63      	subs	r3, r4, #1
 8014824:	aa0c      	add	r2, sp, #48	; 0x30
 8014826:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801482a:	ea4f 5be3 	mov.w	fp, r3, asr #23
 801482e:	e79d      	b.n	801476c <__kernel_rem_pio2+0x19c>
 8014830:	4b34      	ldr	r3, [pc, #208]	; (8014904 <__kernel_rem_pio2+0x334>)
 8014832:	2200      	movs	r2, #0
 8014834:	f7ec f926 	bl	8000a84 <__aeabi_dcmpge>
 8014838:	2800      	cmp	r0, #0
 801483a:	d140      	bne.n	80148be <__kernel_rem_pio2+0x2ee>
 801483c:	4683      	mov	fp, r0
 801483e:	2200      	movs	r2, #0
 8014840:	2300      	movs	r3, #0
 8014842:	4630      	mov	r0, r6
 8014844:	4639      	mov	r1, r7
 8014846:	f7ec f8ff 	bl	8000a48 <__aeabi_dcmpeq>
 801484a:	2800      	cmp	r0, #0
 801484c:	f000 80c1 	beq.w	80149d2 <__kernel_rem_pio2+0x402>
 8014850:	1e65      	subs	r5, r4, #1
 8014852:	462b      	mov	r3, r5
 8014854:	2200      	movs	r2, #0
 8014856:	9900      	ldr	r1, [sp, #0]
 8014858:	428b      	cmp	r3, r1
 801485a:	da6d      	bge.n	8014938 <__kernel_rem_pio2+0x368>
 801485c:	2a00      	cmp	r2, #0
 801485e:	f000 808a 	beq.w	8014976 <__kernel_rem_pio2+0x3a6>
 8014862:	ab0c      	add	r3, sp, #48	; 0x30
 8014864:	f1aa 0a18 	sub.w	sl, sl, #24
 8014868:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 801486c:	2b00      	cmp	r3, #0
 801486e:	f000 80ae 	beq.w	80149ce <__kernel_rem_pio2+0x3fe>
 8014872:	4650      	mov	r0, sl
 8014874:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 80148e8 <__kernel_rem_pio2+0x318>
 8014878:	f000 fb82 	bl	8014f80 <scalbn>
 801487c:	1c6b      	adds	r3, r5, #1
 801487e:	00da      	lsls	r2, r3, #3
 8014880:	9205      	str	r2, [sp, #20]
 8014882:	ec57 6b10 	vmov	r6, r7, d0
 8014886:	aa70      	add	r2, sp, #448	; 0x1c0
 8014888:	f8df 9070 	ldr.w	r9, [pc, #112]	; 80148fc <__kernel_rem_pio2+0x32c>
 801488c:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 8014890:	462c      	mov	r4, r5
 8014892:	f04f 0800 	mov.w	r8, #0
 8014896:	2c00      	cmp	r4, #0
 8014898:	f280 80d4 	bge.w	8014a44 <__kernel_rem_pio2+0x474>
 801489c:	462c      	mov	r4, r5
 801489e:	2c00      	cmp	r4, #0
 80148a0:	f2c0 8102 	blt.w	8014aa8 <__kernel_rem_pio2+0x4d8>
 80148a4:	4b18      	ldr	r3, [pc, #96]	; (8014908 <__kernel_rem_pio2+0x338>)
 80148a6:	461e      	mov	r6, r3
 80148a8:	ab70      	add	r3, sp, #448	; 0x1c0
 80148aa:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 80148ae:	1b2b      	subs	r3, r5, r4
 80148b0:	f04f 0900 	mov.w	r9, #0
 80148b4:	f04f 0a00 	mov.w	sl, #0
 80148b8:	2700      	movs	r7, #0
 80148ba:	9306      	str	r3, [sp, #24]
 80148bc:	e0e6      	b.n	8014a8c <__kernel_rem_pio2+0x4bc>
 80148be:	f04f 0b02 	mov.w	fp, #2
 80148c2:	e756      	b.n	8014772 <__kernel_rem_pio2+0x1a2>
 80148c4:	f8d8 3000 	ldr.w	r3, [r8]
 80148c8:	bb05      	cbnz	r5, 801490c <__kernel_rem_pio2+0x33c>
 80148ca:	b123      	cbz	r3, 80148d6 <__kernel_rem_pio2+0x306>
 80148cc:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80148d0:	f8c8 3000 	str.w	r3, [r8]
 80148d4:	2301      	movs	r3, #1
 80148d6:	3201      	adds	r2, #1
 80148d8:	f108 0804 	add.w	r8, r8, #4
 80148dc:	461d      	mov	r5, r3
 80148de:	e74f      	b.n	8014780 <__kernel_rem_pio2+0x1b0>
	...
 80148ec:	3ff00000 	.word	0x3ff00000
 80148f0:	08015de8 	.word	0x08015de8
 80148f4:	40200000 	.word	0x40200000
 80148f8:	3ff00000 	.word	0x3ff00000
 80148fc:	3e700000 	.word	0x3e700000
 8014900:	41700000 	.word	0x41700000
 8014904:	3fe00000 	.word	0x3fe00000
 8014908:	08015da8 	.word	0x08015da8
 801490c:	1acb      	subs	r3, r1, r3
 801490e:	f8c8 3000 	str.w	r3, [r8]
 8014912:	462b      	mov	r3, r5
 8014914:	e7df      	b.n	80148d6 <__kernel_rem_pio2+0x306>
 8014916:	1e62      	subs	r2, r4, #1
 8014918:	ab0c      	add	r3, sp, #48	; 0x30
 801491a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801491e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8014922:	a90c      	add	r1, sp, #48	; 0x30
 8014924:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8014928:	e738      	b.n	801479c <__kernel_rem_pio2+0x1cc>
 801492a:	1e62      	subs	r2, r4, #1
 801492c:	ab0c      	add	r3, sp, #48	; 0x30
 801492e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014932:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8014936:	e7f4      	b.n	8014922 <__kernel_rem_pio2+0x352>
 8014938:	a90c      	add	r1, sp, #48	; 0x30
 801493a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801493e:	3b01      	subs	r3, #1
 8014940:	430a      	orrs	r2, r1
 8014942:	e788      	b.n	8014856 <__kernel_rem_pio2+0x286>
 8014944:	3301      	adds	r3, #1
 8014946:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 801494a:	2900      	cmp	r1, #0
 801494c:	d0fa      	beq.n	8014944 <__kernel_rem_pio2+0x374>
 801494e:	9a08      	ldr	r2, [sp, #32]
 8014950:	f502 7218 	add.w	r2, r2, #608	; 0x260
 8014954:	446a      	add	r2, sp
 8014956:	3a98      	subs	r2, #152	; 0x98
 8014958:	9208      	str	r2, [sp, #32]
 801495a:	9a06      	ldr	r2, [sp, #24]
 801495c:	a920      	add	r1, sp, #128	; 0x80
 801495e:	18a2      	adds	r2, r4, r2
 8014960:	18e3      	adds	r3, r4, r3
 8014962:	f104 0801 	add.w	r8, r4, #1
 8014966:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 801496a:	9302      	str	r3, [sp, #8]
 801496c:	9b02      	ldr	r3, [sp, #8]
 801496e:	4543      	cmp	r3, r8
 8014970:	da04      	bge.n	801497c <__kernel_rem_pio2+0x3ac>
 8014972:	461c      	mov	r4, r3
 8014974:	e6a2      	b.n	80146bc <__kernel_rem_pio2+0xec>
 8014976:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014978:	2301      	movs	r3, #1
 801497a:	e7e4      	b.n	8014946 <__kernel_rem_pio2+0x376>
 801497c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801497e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8014982:	f7eb fd8f 	bl	80004a4 <__aeabi_i2d>
 8014986:	e8e5 0102 	strd	r0, r1, [r5], #8
 801498a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801498c:	46ab      	mov	fp, r5
 801498e:	461c      	mov	r4, r3
 8014990:	f04f 0900 	mov.w	r9, #0
 8014994:	2600      	movs	r6, #0
 8014996:	2700      	movs	r7, #0
 8014998:	9b05      	ldr	r3, [sp, #20]
 801499a:	4599      	cmp	r9, r3
 801499c:	dd06      	ble.n	80149ac <__kernel_rem_pio2+0x3dc>
 801499e:	9b08      	ldr	r3, [sp, #32]
 80149a0:	e8e3 6702 	strd	r6, r7, [r3], #8
 80149a4:	f108 0801 	add.w	r8, r8, #1
 80149a8:	9308      	str	r3, [sp, #32]
 80149aa:	e7df      	b.n	801496c <__kernel_rem_pio2+0x39c>
 80149ac:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80149b0:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80149b4:	f7eb fde0 	bl	8000578 <__aeabi_dmul>
 80149b8:	4602      	mov	r2, r0
 80149ba:	460b      	mov	r3, r1
 80149bc:	4630      	mov	r0, r6
 80149be:	4639      	mov	r1, r7
 80149c0:	f7eb fc24 	bl	800020c <__adddf3>
 80149c4:	f109 0901 	add.w	r9, r9, #1
 80149c8:	4606      	mov	r6, r0
 80149ca:	460f      	mov	r7, r1
 80149cc:	e7e4      	b.n	8014998 <__kernel_rem_pio2+0x3c8>
 80149ce:	3d01      	subs	r5, #1
 80149d0:	e747      	b.n	8014862 <__kernel_rem_pio2+0x292>
 80149d2:	ec47 6b10 	vmov	d0, r6, r7
 80149d6:	f1ca 0000 	rsb	r0, sl, #0
 80149da:	f000 fad1 	bl	8014f80 <scalbn>
 80149de:	ec57 6b10 	vmov	r6, r7, d0
 80149e2:	4ba0      	ldr	r3, [pc, #640]	; (8014c64 <__kernel_rem_pio2+0x694>)
 80149e4:	ee10 0a10 	vmov	r0, s0
 80149e8:	2200      	movs	r2, #0
 80149ea:	4639      	mov	r1, r7
 80149ec:	f7ec f84a 	bl	8000a84 <__aeabi_dcmpge>
 80149f0:	b1f8      	cbz	r0, 8014a32 <__kernel_rem_pio2+0x462>
 80149f2:	4b9d      	ldr	r3, [pc, #628]	; (8014c68 <__kernel_rem_pio2+0x698>)
 80149f4:	2200      	movs	r2, #0
 80149f6:	4630      	mov	r0, r6
 80149f8:	4639      	mov	r1, r7
 80149fa:	f7eb fdbd 	bl	8000578 <__aeabi_dmul>
 80149fe:	f7ec f855 	bl	8000aac <__aeabi_d2iz>
 8014a02:	4680      	mov	r8, r0
 8014a04:	f7eb fd4e 	bl	80004a4 <__aeabi_i2d>
 8014a08:	4b96      	ldr	r3, [pc, #600]	; (8014c64 <__kernel_rem_pio2+0x694>)
 8014a0a:	2200      	movs	r2, #0
 8014a0c:	f7eb fdb4 	bl	8000578 <__aeabi_dmul>
 8014a10:	460b      	mov	r3, r1
 8014a12:	4602      	mov	r2, r0
 8014a14:	4639      	mov	r1, r7
 8014a16:	4630      	mov	r0, r6
 8014a18:	f7eb fbf6 	bl	8000208 <__aeabi_dsub>
 8014a1c:	f7ec f846 	bl	8000aac <__aeabi_d2iz>
 8014a20:	1c65      	adds	r5, r4, #1
 8014a22:	ab0c      	add	r3, sp, #48	; 0x30
 8014a24:	f10a 0a18 	add.w	sl, sl, #24
 8014a28:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8014a2c:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8014a30:	e71f      	b.n	8014872 <__kernel_rem_pio2+0x2a2>
 8014a32:	4630      	mov	r0, r6
 8014a34:	4639      	mov	r1, r7
 8014a36:	f7ec f839 	bl	8000aac <__aeabi_d2iz>
 8014a3a:	ab0c      	add	r3, sp, #48	; 0x30
 8014a3c:	4625      	mov	r5, r4
 8014a3e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8014a42:	e716      	b.n	8014872 <__kernel_rem_pio2+0x2a2>
 8014a44:	ab0c      	add	r3, sp, #48	; 0x30
 8014a46:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8014a4a:	f7eb fd2b 	bl	80004a4 <__aeabi_i2d>
 8014a4e:	4632      	mov	r2, r6
 8014a50:	463b      	mov	r3, r7
 8014a52:	f7eb fd91 	bl	8000578 <__aeabi_dmul>
 8014a56:	4642      	mov	r2, r8
 8014a58:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8014a5c:	464b      	mov	r3, r9
 8014a5e:	4630      	mov	r0, r6
 8014a60:	4639      	mov	r1, r7
 8014a62:	f7eb fd89 	bl	8000578 <__aeabi_dmul>
 8014a66:	3c01      	subs	r4, #1
 8014a68:	4606      	mov	r6, r0
 8014a6a:	460f      	mov	r7, r1
 8014a6c:	e713      	b.n	8014896 <__kernel_rem_pio2+0x2c6>
 8014a6e:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 8014a72:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 8014a76:	f7eb fd7f 	bl	8000578 <__aeabi_dmul>
 8014a7a:	4602      	mov	r2, r0
 8014a7c:	460b      	mov	r3, r1
 8014a7e:	4648      	mov	r0, r9
 8014a80:	4651      	mov	r1, sl
 8014a82:	f7eb fbc3 	bl	800020c <__adddf3>
 8014a86:	3701      	adds	r7, #1
 8014a88:	4681      	mov	r9, r0
 8014a8a:	468a      	mov	sl, r1
 8014a8c:	9b00      	ldr	r3, [sp, #0]
 8014a8e:	429f      	cmp	r7, r3
 8014a90:	dc02      	bgt.n	8014a98 <__kernel_rem_pio2+0x4c8>
 8014a92:	9b06      	ldr	r3, [sp, #24]
 8014a94:	429f      	cmp	r7, r3
 8014a96:	ddea      	ble.n	8014a6e <__kernel_rem_pio2+0x49e>
 8014a98:	9a06      	ldr	r2, [sp, #24]
 8014a9a:	ab48      	add	r3, sp, #288	; 0x120
 8014a9c:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 8014aa0:	e9c6 9a00 	strd	r9, sl, [r6]
 8014aa4:	3c01      	subs	r4, #1
 8014aa6:	e6fa      	b.n	801489e <__kernel_rem_pio2+0x2ce>
 8014aa8:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8014aaa:	2b02      	cmp	r3, #2
 8014aac:	dc0b      	bgt.n	8014ac6 <__kernel_rem_pio2+0x4f6>
 8014aae:	2b00      	cmp	r3, #0
 8014ab0:	dc39      	bgt.n	8014b26 <__kernel_rem_pio2+0x556>
 8014ab2:	d05d      	beq.n	8014b70 <__kernel_rem_pio2+0x5a0>
 8014ab4:	9b02      	ldr	r3, [sp, #8]
 8014ab6:	f003 0007 	and.w	r0, r3, #7
 8014aba:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8014abe:	ecbd 8b02 	vpop	{d8}
 8014ac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014ac6:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8014ac8:	2b03      	cmp	r3, #3
 8014aca:	d1f3      	bne.n	8014ab4 <__kernel_rem_pio2+0x4e4>
 8014acc:	9b05      	ldr	r3, [sp, #20]
 8014ace:	9500      	str	r5, [sp, #0]
 8014ad0:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8014ad4:	eb0d 0403 	add.w	r4, sp, r3
 8014ad8:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 8014adc:	46a2      	mov	sl, r4
 8014ade:	9b00      	ldr	r3, [sp, #0]
 8014ae0:	2b00      	cmp	r3, #0
 8014ae2:	f1aa 0a08 	sub.w	sl, sl, #8
 8014ae6:	dc69      	bgt.n	8014bbc <__kernel_rem_pio2+0x5ec>
 8014ae8:	46aa      	mov	sl, r5
 8014aea:	f1ba 0f01 	cmp.w	sl, #1
 8014aee:	f1a4 0408 	sub.w	r4, r4, #8
 8014af2:	f300 8083 	bgt.w	8014bfc <__kernel_rem_pio2+0x62c>
 8014af6:	9c05      	ldr	r4, [sp, #20]
 8014af8:	ab48      	add	r3, sp, #288	; 0x120
 8014afa:	441c      	add	r4, r3
 8014afc:	2000      	movs	r0, #0
 8014afe:	2100      	movs	r1, #0
 8014b00:	2d01      	cmp	r5, #1
 8014b02:	f300 809a 	bgt.w	8014c3a <__kernel_rem_pio2+0x66a>
 8014b06:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 8014b0a:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8014b0e:	f1bb 0f00 	cmp.w	fp, #0
 8014b12:	f040 8098 	bne.w	8014c46 <__kernel_rem_pio2+0x676>
 8014b16:	9b04      	ldr	r3, [sp, #16]
 8014b18:	e9c3 7800 	strd	r7, r8, [r3]
 8014b1c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8014b20:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8014b24:	e7c6      	b.n	8014ab4 <__kernel_rem_pio2+0x4e4>
 8014b26:	9e05      	ldr	r6, [sp, #20]
 8014b28:	ab48      	add	r3, sp, #288	; 0x120
 8014b2a:	441e      	add	r6, r3
 8014b2c:	462c      	mov	r4, r5
 8014b2e:	2000      	movs	r0, #0
 8014b30:	2100      	movs	r1, #0
 8014b32:	2c00      	cmp	r4, #0
 8014b34:	da33      	bge.n	8014b9e <__kernel_rem_pio2+0x5ce>
 8014b36:	f1bb 0f00 	cmp.w	fp, #0
 8014b3a:	d036      	beq.n	8014baa <__kernel_rem_pio2+0x5da>
 8014b3c:	4602      	mov	r2, r0
 8014b3e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014b42:	9c04      	ldr	r4, [sp, #16]
 8014b44:	e9c4 2300 	strd	r2, r3, [r4]
 8014b48:	4602      	mov	r2, r0
 8014b4a:	460b      	mov	r3, r1
 8014b4c:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8014b50:	f7eb fb5a 	bl	8000208 <__aeabi_dsub>
 8014b54:	ae4a      	add	r6, sp, #296	; 0x128
 8014b56:	2401      	movs	r4, #1
 8014b58:	42a5      	cmp	r5, r4
 8014b5a:	da29      	bge.n	8014bb0 <__kernel_rem_pio2+0x5e0>
 8014b5c:	f1bb 0f00 	cmp.w	fp, #0
 8014b60:	d002      	beq.n	8014b68 <__kernel_rem_pio2+0x598>
 8014b62:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014b66:	4619      	mov	r1, r3
 8014b68:	9b04      	ldr	r3, [sp, #16]
 8014b6a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8014b6e:	e7a1      	b.n	8014ab4 <__kernel_rem_pio2+0x4e4>
 8014b70:	9c05      	ldr	r4, [sp, #20]
 8014b72:	ab48      	add	r3, sp, #288	; 0x120
 8014b74:	441c      	add	r4, r3
 8014b76:	2000      	movs	r0, #0
 8014b78:	2100      	movs	r1, #0
 8014b7a:	2d00      	cmp	r5, #0
 8014b7c:	da09      	bge.n	8014b92 <__kernel_rem_pio2+0x5c2>
 8014b7e:	f1bb 0f00 	cmp.w	fp, #0
 8014b82:	d002      	beq.n	8014b8a <__kernel_rem_pio2+0x5ba>
 8014b84:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014b88:	4619      	mov	r1, r3
 8014b8a:	9b04      	ldr	r3, [sp, #16]
 8014b8c:	e9c3 0100 	strd	r0, r1, [r3]
 8014b90:	e790      	b.n	8014ab4 <__kernel_rem_pio2+0x4e4>
 8014b92:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8014b96:	f7eb fb39 	bl	800020c <__adddf3>
 8014b9a:	3d01      	subs	r5, #1
 8014b9c:	e7ed      	b.n	8014b7a <__kernel_rem_pio2+0x5aa>
 8014b9e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8014ba2:	f7eb fb33 	bl	800020c <__adddf3>
 8014ba6:	3c01      	subs	r4, #1
 8014ba8:	e7c3      	b.n	8014b32 <__kernel_rem_pio2+0x562>
 8014baa:	4602      	mov	r2, r0
 8014bac:	460b      	mov	r3, r1
 8014bae:	e7c8      	b.n	8014b42 <__kernel_rem_pio2+0x572>
 8014bb0:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8014bb4:	f7eb fb2a 	bl	800020c <__adddf3>
 8014bb8:	3401      	adds	r4, #1
 8014bba:	e7cd      	b.n	8014b58 <__kernel_rem_pio2+0x588>
 8014bbc:	e9da 8900 	ldrd	r8, r9, [sl]
 8014bc0:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8014bc4:	9b00      	ldr	r3, [sp, #0]
 8014bc6:	3b01      	subs	r3, #1
 8014bc8:	9300      	str	r3, [sp, #0]
 8014bca:	4632      	mov	r2, r6
 8014bcc:	463b      	mov	r3, r7
 8014bce:	4640      	mov	r0, r8
 8014bd0:	4649      	mov	r1, r9
 8014bd2:	f7eb fb1b 	bl	800020c <__adddf3>
 8014bd6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8014bda:	4602      	mov	r2, r0
 8014bdc:	460b      	mov	r3, r1
 8014bde:	4640      	mov	r0, r8
 8014be0:	4649      	mov	r1, r9
 8014be2:	f7eb fb11 	bl	8000208 <__aeabi_dsub>
 8014be6:	4632      	mov	r2, r6
 8014be8:	463b      	mov	r3, r7
 8014bea:	f7eb fb0f 	bl	800020c <__adddf3>
 8014bee:	ed9d 7b06 	vldr	d7, [sp, #24]
 8014bf2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8014bf6:	ed8a 7b00 	vstr	d7, [sl]
 8014bfa:	e770      	b.n	8014ade <__kernel_rem_pio2+0x50e>
 8014bfc:	e9d4 8900 	ldrd	r8, r9, [r4]
 8014c00:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8014c04:	4640      	mov	r0, r8
 8014c06:	4632      	mov	r2, r6
 8014c08:	463b      	mov	r3, r7
 8014c0a:	4649      	mov	r1, r9
 8014c0c:	f7eb fafe 	bl	800020c <__adddf3>
 8014c10:	e9cd 0100 	strd	r0, r1, [sp]
 8014c14:	4602      	mov	r2, r0
 8014c16:	460b      	mov	r3, r1
 8014c18:	4640      	mov	r0, r8
 8014c1a:	4649      	mov	r1, r9
 8014c1c:	f7eb faf4 	bl	8000208 <__aeabi_dsub>
 8014c20:	4632      	mov	r2, r6
 8014c22:	463b      	mov	r3, r7
 8014c24:	f7eb faf2 	bl	800020c <__adddf3>
 8014c28:	ed9d 7b00 	vldr	d7, [sp]
 8014c2c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8014c30:	ed84 7b00 	vstr	d7, [r4]
 8014c34:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8014c38:	e757      	b.n	8014aea <__kernel_rem_pio2+0x51a>
 8014c3a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8014c3e:	f7eb fae5 	bl	800020c <__adddf3>
 8014c42:	3d01      	subs	r5, #1
 8014c44:	e75c      	b.n	8014b00 <__kernel_rem_pio2+0x530>
 8014c46:	9b04      	ldr	r3, [sp, #16]
 8014c48:	9a04      	ldr	r2, [sp, #16]
 8014c4a:	601f      	str	r7, [r3, #0]
 8014c4c:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8014c50:	605c      	str	r4, [r3, #4]
 8014c52:	609d      	str	r5, [r3, #8]
 8014c54:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8014c58:	60d3      	str	r3, [r2, #12]
 8014c5a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014c5e:	6110      	str	r0, [r2, #16]
 8014c60:	6153      	str	r3, [r2, #20]
 8014c62:	e727      	b.n	8014ab4 <__kernel_rem_pio2+0x4e4>
 8014c64:	41700000 	.word	0x41700000
 8014c68:	3e700000 	.word	0x3e700000
 8014c6c:	00000000 	.word	0x00000000

08014c70 <__kernel_cos>:
 8014c70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c74:	ec57 6b10 	vmov	r6, r7, d0
 8014c78:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8014c7c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8014c80:	ed8d 1b00 	vstr	d1, [sp]
 8014c84:	da07      	bge.n	8014c96 <__kernel_cos+0x26>
 8014c86:	ee10 0a10 	vmov	r0, s0
 8014c8a:	4639      	mov	r1, r7
 8014c8c:	f7eb ff0e 	bl	8000aac <__aeabi_d2iz>
 8014c90:	2800      	cmp	r0, #0
 8014c92:	f000 8088 	beq.w	8014da6 <__kernel_cos+0x136>
 8014c96:	4632      	mov	r2, r6
 8014c98:	463b      	mov	r3, r7
 8014c9a:	4630      	mov	r0, r6
 8014c9c:	4639      	mov	r1, r7
 8014c9e:	f7eb fc6b 	bl	8000578 <__aeabi_dmul>
 8014ca2:	4b51      	ldr	r3, [pc, #324]	; (8014de8 <__kernel_cos+0x178>)
 8014ca4:	2200      	movs	r2, #0
 8014ca6:	4604      	mov	r4, r0
 8014ca8:	460d      	mov	r5, r1
 8014caa:	f7eb fc65 	bl	8000578 <__aeabi_dmul>
 8014cae:	a340      	add	r3, pc, #256	; (adr r3, 8014db0 <__kernel_cos+0x140>)
 8014cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014cb4:	4682      	mov	sl, r0
 8014cb6:	468b      	mov	fp, r1
 8014cb8:	4620      	mov	r0, r4
 8014cba:	4629      	mov	r1, r5
 8014cbc:	f7eb fc5c 	bl	8000578 <__aeabi_dmul>
 8014cc0:	a33d      	add	r3, pc, #244	; (adr r3, 8014db8 <__kernel_cos+0x148>)
 8014cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014cc6:	f7eb faa1 	bl	800020c <__adddf3>
 8014cca:	4622      	mov	r2, r4
 8014ccc:	462b      	mov	r3, r5
 8014cce:	f7eb fc53 	bl	8000578 <__aeabi_dmul>
 8014cd2:	a33b      	add	r3, pc, #236	; (adr r3, 8014dc0 <__kernel_cos+0x150>)
 8014cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014cd8:	f7eb fa96 	bl	8000208 <__aeabi_dsub>
 8014cdc:	4622      	mov	r2, r4
 8014cde:	462b      	mov	r3, r5
 8014ce0:	f7eb fc4a 	bl	8000578 <__aeabi_dmul>
 8014ce4:	a338      	add	r3, pc, #224	; (adr r3, 8014dc8 <__kernel_cos+0x158>)
 8014ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014cea:	f7eb fa8f 	bl	800020c <__adddf3>
 8014cee:	4622      	mov	r2, r4
 8014cf0:	462b      	mov	r3, r5
 8014cf2:	f7eb fc41 	bl	8000578 <__aeabi_dmul>
 8014cf6:	a336      	add	r3, pc, #216	; (adr r3, 8014dd0 <__kernel_cos+0x160>)
 8014cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014cfc:	f7eb fa84 	bl	8000208 <__aeabi_dsub>
 8014d00:	4622      	mov	r2, r4
 8014d02:	462b      	mov	r3, r5
 8014d04:	f7eb fc38 	bl	8000578 <__aeabi_dmul>
 8014d08:	a333      	add	r3, pc, #204	; (adr r3, 8014dd8 <__kernel_cos+0x168>)
 8014d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d0e:	f7eb fa7d 	bl	800020c <__adddf3>
 8014d12:	4622      	mov	r2, r4
 8014d14:	462b      	mov	r3, r5
 8014d16:	f7eb fc2f 	bl	8000578 <__aeabi_dmul>
 8014d1a:	4622      	mov	r2, r4
 8014d1c:	462b      	mov	r3, r5
 8014d1e:	f7eb fc2b 	bl	8000578 <__aeabi_dmul>
 8014d22:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014d26:	4604      	mov	r4, r0
 8014d28:	460d      	mov	r5, r1
 8014d2a:	4630      	mov	r0, r6
 8014d2c:	4639      	mov	r1, r7
 8014d2e:	f7eb fc23 	bl	8000578 <__aeabi_dmul>
 8014d32:	460b      	mov	r3, r1
 8014d34:	4602      	mov	r2, r0
 8014d36:	4629      	mov	r1, r5
 8014d38:	4620      	mov	r0, r4
 8014d3a:	f7eb fa65 	bl	8000208 <__aeabi_dsub>
 8014d3e:	4b2b      	ldr	r3, [pc, #172]	; (8014dec <__kernel_cos+0x17c>)
 8014d40:	4598      	cmp	r8, r3
 8014d42:	4606      	mov	r6, r0
 8014d44:	460f      	mov	r7, r1
 8014d46:	dc10      	bgt.n	8014d6a <__kernel_cos+0xfa>
 8014d48:	4602      	mov	r2, r0
 8014d4a:	460b      	mov	r3, r1
 8014d4c:	4650      	mov	r0, sl
 8014d4e:	4659      	mov	r1, fp
 8014d50:	f7eb fa5a 	bl	8000208 <__aeabi_dsub>
 8014d54:	460b      	mov	r3, r1
 8014d56:	4926      	ldr	r1, [pc, #152]	; (8014df0 <__kernel_cos+0x180>)
 8014d58:	4602      	mov	r2, r0
 8014d5a:	2000      	movs	r0, #0
 8014d5c:	f7eb fa54 	bl	8000208 <__aeabi_dsub>
 8014d60:	ec41 0b10 	vmov	d0, r0, r1
 8014d64:	b003      	add	sp, #12
 8014d66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d6a:	4b22      	ldr	r3, [pc, #136]	; (8014df4 <__kernel_cos+0x184>)
 8014d6c:	4920      	ldr	r1, [pc, #128]	; (8014df0 <__kernel_cos+0x180>)
 8014d6e:	4598      	cmp	r8, r3
 8014d70:	bfcc      	ite	gt
 8014d72:	4d21      	ldrgt	r5, [pc, #132]	; (8014df8 <__kernel_cos+0x188>)
 8014d74:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8014d78:	2400      	movs	r4, #0
 8014d7a:	4622      	mov	r2, r4
 8014d7c:	462b      	mov	r3, r5
 8014d7e:	2000      	movs	r0, #0
 8014d80:	f7eb fa42 	bl	8000208 <__aeabi_dsub>
 8014d84:	4622      	mov	r2, r4
 8014d86:	4680      	mov	r8, r0
 8014d88:	4689      	mov	r9, r1
 8014d8a:	462b      	mov	r3, r5
 8014d8c:	4650      	mov	r0, sl
 8014d8e:	4659      	mov	r1, fp
 8014d90:	f7eb fa3a 	bl	8000208 <__aeabi_dsub>
 8014d94:	4632      	mov	r2, r6
 8014d96:	463b      	mov	r3, r7
 8014d98:	f7eb fa36 	bl	8000208 <__aeabi_dsub>
 8014d9c:	4602      	mov	r2, r0
 8014d9e:	460b      	mov	r3, r1
 8014da0:	4640      	mov	r0, r8
 8014da2:	4649      	mov	r1, r9
 8014da4:	e7da      	b.n	8014d5c <__kernel_cos+0xec>
 8014da6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8014de0 <__kernel_cos+0x170>
 8014daa:	e7db      	b.n	8014d64 <__kernel_cos+0xf4>
 8014dac:	f3af 8000 	nop.w
 8014db0:	be8838d4 	.word	0xbe8838d4
 8014db4:	bda8fae9 	.word	0xbda8fae9
 8014db8:	bdb4b1c4 	.word	0xbdb4b1c4
 8014dbc:	3e21ee9e 	.word	0x3e21ee9e
 8014dc0:	809c52ad 	.word	0x809c52ad
 8014dc4:	3e927e4f 	.word	0x3e927e4f
 8014dc8:	19cb1590 	.word	0x19cb1590
 8014dcc:	3efa01a0 	.word	0x3efa01a0
 8014dd0:	16c15177 	.word	0x16c15177
 8014dd4:	3f56c16c 	.word	0x3f56c16c
 8014dd8:	5555554c 	.word	0x5555554c
 8014ddc:	3fa55555 	.word	0x3fa55555
 8014de0:	00000000 	.word	0x00000000
 8014de4:	3ff00000 	.word	0x3ff00000
 8014de8:	3fe00000 	.word	0x3fe00000
 8014dec:	3fd33332 	.word	0x3fd33332
 8014df0:	3ff00000 	.word	0x3ff00000
 8014df4:	3fe90000 	.word	0x3fe90000
 8014df8:	3fd20000 	.word	0x3fd20000
 8014dfc:	00000000 	.word	0x00000000

08014e00 <__kernel_sin>:
 8014e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e04:	ed2d 8b04 	vpush	{d8-d9}
 8014e08:	eeb0 8a41 	vmov.f32	s16, s2
 8014e0c:	eef0 8a61 	vmov.f32	s17, s3
 8014e10:	ec55 4b10 	vmov	r4, r5, d0
 8014e14:	b083      	sub	sp, #12
 8014e16:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8014e1a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8014e1e:	9001      	str	r0, [sp, #4]
 8014e20:	da06      	bge.n	8014e30 <__kernel_sin+0x30>
 8014e22:	ee10 0a10 	vmov	r0, s0
 8014e26:	4629      	mov	r1, r5
 8014e28:	f7eb fe40 	bl	8000aac <__aeabi_d2iz>
 8014e2c:	2800      	cmp	r0, #0
 8014e2e:	d051      	beq.n	8014ed4 <__kernel_sin+0xd4>
 8014e30:	4622      	mov	r2, r4
 8014e32:	462b      	mov	r3, r5
 8014e34:	4620      	mov	r0, r4
 8014e36:	4629      	mov	r1, r5
 8014e38:	f7eb fb9e 	bl	8000578 <__aeabi_dmul>
 8014e3c:	4682      	mov	sl, r0
 8014e3e:	468b      	mov	fp, r1
 8014e40:	4602      	mov	r2, r0
 8014e42:	460b      	mov	r3, r1
 8014e44:	4620      	mov	r0, r4
 8014e46:	4629      	mov	r1, r5
 8014e48:	f7eb fb96 	bl	8000578 <__aeabi_dmul>
 8014e4c:	a341      	add	r3, pc, #260	; (adr r3, 8014f54 <__kernel_sin+0x154>)
 8014e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e52:	4680      	mov	r8, r0
 8014e54:	4689      	mov	r9, r1
 8014e56:	4650      	mov	r0, sl
 8014e58:	4659      	mov	r1, fp
 8014e5a:	f7eb fb8d 	bl	8000578 <__aeabi_dmul>
 8014e5e:	a33f      	add	r3, pc, #252	; (adr r3, 8014f5c <__kernel_sin+0x15c>)
 8014e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e64:	f7eb f9d0 	bl	8000208 <__aeabi_dsub>
 8014e68:	4652      	mov	r2, sl
 8014e6a:	465b      	mov	r3, fp
 8014e6c:	f7eb fb84 	bl	8000578 <__aeabi_dmul>
 8014e70:	a33c      	add	r3, pc, #240	; (adr r3, 8014f64 <__kernel_sin+0x164>)
 8014e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e76:	f7eb f9c9 	bl	800020c <__adddf3>
 8014e7a:	4652      	mov	r2, sl
 8014e7c:	465b      	mov	r3, fp
 8014e7e:	f7eb fb7b 	bl	8000578 <__aeabi_dmul>
 8014e82:	a33a      	add	r3, pc, #232	; (adr r3, 8014f6c <__kernel_sin+0x16c>)
 8014e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e88:	f7eb f9be 	bl	8000208 <__aeabi_dsub>
 8014e8c:	4652      	mov	r2, sl
 8014e8e:	465b      	mov	r3, fp
 8014e90:	f7eb fb72 	bl	8000578 <__aeabi_dmul>
 8014e94:	a337      	add	r3, pc, #220	; (adr r3, 8014f74 <__kernel_sin+0x174>)
 8014e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e9a:	f7eb f9b7 	bl	800020c <__adddf3>
 8014e9e:	9b01      	ldr	r3, [sp, #4]
 8014ea0:	4606      	mov	r6, r0
 8014ea2:	460f      	mov	r7, r1
 8014ea4:	b9eb      	cbnz	r3, 8014ee2 <__kernel_sin+0xe2>
 8014ea6:	4602      	mov	r2, r0
 8014ea8:	460b      	mov	r3, r1
 8014eaa:	4650      	mov	r0, sl
 8014eac:	4659      	mov	r1, fp
 8014eae:	f7eb fb63 	bl	8000578 <__aeabi_dmul>
 8014eb2:	a325      	add	r3, pc, #148	; (adr r3, 8014f48 <__kernel_sin+0x148>)
 8014eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014eb8:	f7eb f9a6 	bl	8000208 <__aeabi_dsub>
 8014ebc:	4642      	mov	r2, r8
 8014ebe:	464b      	mov	r3, r9
 8014ec0:	f7eb fb5a 	bl	8000578 <__aeabi_dmul>
 8014ec4:	4602      	mov	r2, r0
 8014ec6:	460b      	mov	r3, r1
 8014ec8:	4620      	mov	r0, r4
 8014eca:	4629      	mov	r1, r5
 8014ecc:	f7eb f99e 	bl	800020c <__adddf3>
 8014ed0:	4604      	mov	r4, r0
 8014ed2:	460d      	mov	r5, r1
 8014ed4:	ec45 4b10 	vmov	d0, r4, r5
 8014ed8:	b003      	add	sp, #12
 8014eda:	ecbd 8b04 	vpop	{d8-d9}
 8014ede:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014ee2:	4b1b      	ldr	r3, [pc, #108]	; (8014f50 <__kernel_sin+0x150>)
 8014ee4:	ec51 0b18 	vmov	r0, r1, d8
 8014ee8:	2200      	movs	r2, #0
 8014eea:	f7eb fb45 	bl	8000578 <__aeabi_dmul>
 8014eee:	4632      	mov	r2, r6
 8014ef0:	ec41 0b19 	vmov	d9, r0, r1
 8014ef4:	463b      	mov	r3, r7
 8014ef6:	4640      	mov	r0, r8
 8014ef8:	4649      	mov	r1, r9
 8014efa:	f7eb fb3d 	bl	8000578 <__aeabi_dmul>
 8014efe:	4602      	mov	r2, r0
 8014f00:	460b      	mov	r3, r1
 8014f02:	ec51 0b19 	vmov	r0, r1, d9
 8014f06:	f7eb f97f 	bl	8000208 <__aeabi_dsub>
 8014f0a:	4652      	mov	r2, sl
 8014f0c:	465b      	mov	r3, fp
 8014f0e:	f7eb fb33 	bl	8000578 <__aeabi_dmul>
 8014f12:	ec53 2b18 	vmov	r2, r3, d8
 8014f16:	f7eb f977 	bl	8000208 <__aeabi_dsub>
 8014f1a:	a30b      	add	r3, pc, #44	; (adr r3, 8014f48 <__kernel_sin+0x148>)
 8014f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f20:	4606      	mov	r6, r0
 8014f22:	460f      	mov	r7, r1
 8014f24:	4640      	mov	r0, r8
 8014f26:	4649      	mov	r1, r9
 8014f28:	f7eb fb26 	bl	8000578 <__aeabi_dmul>
 8014f2c:	4602      	mov	r2, r0
 8014f2e:	460b      	mov	r3, r1
 8014f30:	4630      	mov	r0, r6
 8014f32:	4639      	mov	r1, r7
 8014f34:	f7eb f96a 	bl	800020c <__adddf3>
 8014f38:	4602      	mov	r2, r0
 8014f3a:	460b      	mov	r3, r1
 8014f3c:	4620      	mov	r0, r4
 8014f3e:	4629      	mov	r1, r5
 8014f40:	f7eb f962 	bl	8000208 <__aeabi_dsub>
 8014f44:	e7c4      	b.n	8014ed0 <__kernel_sin+0xd0>
 8014f46:	bf00      	nop
 8014f48:	55555549 	.word	0x55555549
 8014f4c:	3fc55555 	.word	0x3fc55555
 8014f50:	3fe00000 	.word	0x3fe00000
 8014f54:	5acfd57c 	.word	0x5acfd57c
 8014f58:	3de5d93a 	.word	0x3de5d93a
 8014f5c:	8a2b9ceb 	.word	0x8a2b9ceb
 8014f60:	3e5ae5e6 	.word	0x3e5ae5e6
 8014f64:	57b1fe7d 	.word	0x57b1fe7d
 8014f68:	3ec71de3 	.word	0x3ec71de3
 8014f6c:	19c161d5 	.word	0x19c161d5
 8014f70:	3f2a01a0 	.word	0x3f2a01a0
 8014f74:	1110f8a6 	.word	0x1110f8a6
 8014f78:	3f811111 	.word	0x3f811111
 8014f7c:	00000000 	.word	0x00000000

08014f80 <scalbn>:
 8014f80:	b570      	push	{r4, r5, r6, lr}
 8014f82:	ec55 4b10 	vmov	r4, r5, d0
 8014f86:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8014f8a:	4606      	mov	r6, r0
 8014f8c:	462b      	mov	r3, r5
 8014f8e:	b999      	cbnz	r1, 8014fb8 <scalbn+0x38>
 8014f90:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8014f94:	4323      	orrs	r3, r4
 8014f96:	d03f      	beq.n	8015018 <scalbn+0x98>
 8014f98:	4b35      	ldr	r3, [pc, #212]	; (8015070 <scalbn+0xf0>)
 8014f9a:	4629      	mov	r1, r5
 8014f9c:	ee10 0a10 	vmov	r0, s0
 8014fa0:	2200      	movs	r2, #0
 8014fa2:	f7eb fae9 	bl	8000578 <__aeabi_dmul>
 8014fa6:	4b33      	ldr	r3, [pc, #204]	; (8015074 <scalbn+0xf4>)
 8014fa8:	429e      	cmp	r6, r3
 8014faa:	4604      	mov	r4, r0
 8014fac:	460d      	mov	r5, r1
 8014fae:	da10      	bge.n	8014fd2 <scalbn+0x52>
 8014fb0:	a327      	add	r3, pc, #156	; (adr r3, 8015050 <scalbn+0xd0>)
 8014fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014fb6:	e01f      	b.n	8014ff8 <scalbn+0x78>
 8014fb8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8014fbc:	4291      	cmp	r1, r2
 8014fbe:	d10c      	bne.n	8014fda <scalbn+0x5a>
 8014fc0:	ee10 2a10 	vmov	r2, s0
 8014fc4:	4620      	mov	r0, r4
 8014fc6:	4629      	mov	r1, r5
 8014fc8:	f7eb f920 	bl	800020c <__adddf3>
 8014fcc:	4604      	mov	r4, r0
 8014fce:	460d      	mov	r5, r1
 8014fd0:	e022      	b.n	8015018 <scalbn+0x98>
 8014fd2:	460b      	mov	r3, r1
 8014fd4:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8014fd8:	3936      	subs	r1, #54	; 0x36
 8014fda:	f24c 3250 	movw	r2, #50000	; 0xc350
 8014fde:	4296      	cmp	r6, r2
 8014fe0:	dd0d      	ble.n	8014ffe <scalbn+0x7e>
 8014fe2:	2d00      	cmp	r5, #0
 8014fe4:	a11c      	add	r1, pc, #112	; (adr r1, 8015058 <scalbn+0xd8>)
 8014fe6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014fea:	da02      	bge.n	8014ff2 <scalbn+0x72>
 8014fec:	a11c      	add	r1, pc, #112	; (adr r1, 8015060 <scalbn+0xe0>)
 8014fee:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014ff2:	a319      	add	r3, pc, #100	; (adr r3, 8015058 <scalbn+0xd8>)
 8014ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ff8:	f7eb fabe 	bl	8000578 <__aeabi_dmul>
 8014ffc:	e7e6      	b.n	8014fcc <scalbn+0x4c>
 8014ffe:	1872      	adds	r2, r6, r1
 8015000:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8015004:	428a      	cmp	r2, r1
 8015006:	dcec      	bgt.n	8014fe2 <scalbn+0x62>
 8015008:	2a00      	cmp	r2, #0
 801500a:	dd08      	ble.n	801501e <scalbn+0x9e>
 801500c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8015010:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8015014:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8015018:	ec45 4b10 	vmov	d0, r4, r5
 801501c:	bd70      	pop	{r4, r5, r6, pc}
 801501e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8015022:	da08      	bge.n	8015036 <scalbn+0xb6>
 8015024:	2d00      	cmp	r5, #0
 8015026:	a10a      	add	r1, pc, #40	; (adr r1, 8015050 <scalbn+0xd0>)
 8015028:	e9d1 0100 	ldrd	r0, r1, [r1]
 801502c:	dac0      	bge.n	8014fb0 <scalbn+0x30>
 801502e:	a10e      	add	r1, pc, #56	; (adr r1, 8015068 <scalbn+0xe8>)
 8015030:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015034:	e7bc      	b.n	8014fb0 <scalbn+0x30>
 8015036:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801503a:	3236      	adds	r2, #54	; 0x36
 801503c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8015040:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8015044:	4620      	mov	r0, r4
 8015046:	4b0c      	ldr	r3, [pc, #48]	; (8015078 <scalbn+0xf8>)
 8015048:	2200      	movs	r2, #0
 801504a:	e7d5      	b.n	8014ff8 <scalbn+0x78>
 801504c:	f3af 8000 	nop.w
 8015050:	c2f8f359 	.word	0xc2f8f359
 8015054:	01a56e1f 	.word	0x01a56e1f
 8015058:	8800759c 	.word	0x8800759c
 801505c:	7e37e43c 	.word	0x7e37e43c
 8015060:	8800759c 	.word	0x8800759c
 8015064:	fe37e43c 	.word	0xfe37e43c
 8015068:	c2f8f359 	.word	0xc2f8f359
 801506c:	81a56e1f 	.word	0x81a56e1f
 8015070:	43500000 	.word	0x43500000
 8015074:	ffff3cb0 	.word	0xffff3cb0
 8015078:	3c900000 	.word	0x3c900000
 801507c:	00000000 	.word	0x00000000

08015080 <floor>:
 8015080:	ec51 0b10 	vmov	r0, r1, d0
 8015084:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8015088:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801508c:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8015090:	2e13      	cmp	r6, #19
 8015092:	ee10 5a10 	vmov	r5, s0
 8015096:	ee10 8a10 	vmov	r8, s0
 801509a:	460c      	mov	r4, r1
 801509c:	dc31      	bgt.n	8015102 <floor+0x82>
 801509e:	2e00      	cmp	r6, #0
 80150a0:	da14      	bge.n	80150cc <floor+0x4c>
 80150a2:	a333      	add	r3, pc, #204	; (adr r3, 8015170 <floor+0xf0>)
 80150a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80150a8:	f7eb f8b0 	bl	800020c <__adddf3>
 80150ac:	2200      	movs	r2, #0
 80150ae:	2300      	movs	r3, #0
 80150b0:	f7eb fcf2 	bl	8000a98 <__aeabi_dcmpgt>
 80150b4:	b138      	cbz	r0, 80150c6 <floor+0x46>
 80150b6:	2c00      	cmp	r4, #0
 80150b8:	da53      	bge.n	8015162 <floor+0xe2>
 80150ba:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 80150be:	4325      	orrs	r5, r4
 80150c0:	d052      	beq.n	8015168 <floor+0xe8>
 80150c2:	4c2d      	ldr	r4, [pc, #180]	; (8015178 <floor+0xf8>)
 80150c4:	2500      	movs	r5, #0
 80150c6:	4621      	mov	r1, r4
 80150c8:	4628      	mov	r0, r5
 80150ca:	e024      	b.n	8015116 <floor+0x96>
 80150cc:	4f2b      	ldr	r7, [pc, #172]	; (801517c <floor+0xfc>)
 80150ce:	4137      	asrs	r7, r6
 80150d0:	ea01 0307 	and.w	r3, r1, r7
 80150d4:	4303      	orrs	r3, r0
 80150d6:	d01e      	beq.n	8015116 <floor+0x96>
 80150d8:	a325      	add	r3, pc, #148	; (adr r3, 8015170 <floor+0xf0>)
 80150da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80150de:	f7eb f895 	bl	800020c <__adddf3>
 80150e2:	2200      	movs	r2, #0
 80150e4:	2300      	movs	r3, #0
 80150e6:	f7eb fcd7 	bl	8000a98 <__aeabi_dcmpgt>
 80150ea:	2800      	cmp	r0, #0
 80150ec:	d0eb      	beq.n	80150c6 <floor+0x46>
 80150ee:	2c00      	cmp	r4, #0
 80150f0:	bfbe      	ittt	lt
 80150f2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80150f6:	4133      	asrlt	r3, r6
 80150f8:	18e4      	addlt	r4, r4, r3
 80150fa:	ea24 0407 	bic.w	r4, r4, r7
 80150fe:	2500      	movs	r5, #0
 8015100:	e7e1      	b.n	80150c6 <floor+0x46>
 8015102:	2e33      	cmp	r6, #51	; 0x33
 8015104:	dd0b      	ble.n	801511e <floor+0x9e>
 8015106:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801510a:	d104      	bne.n	8015116 <floor+0x96>
 801510c:	ee10 2a10 	vmov	r2, s0
 8015110:	460b      	mov	r3, r1
 8015112:	f7eb f87b 	bl	800020c <__adddf3>
 8015116:	ec41 0b10 	vmov	d0, r0, r1
 801511a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801511e:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 8015122:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8015126:	40df      	lsrs	r7, r3
 8015128:	4238      	tst	r0, r7
 801512a:	d0f4      	beq.n	8015116 <floor+0x96>
 801512c:	a310      	add	r3, pc, #64	; (adr r3, 8015170 <floor+0xf0>)
 801512e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015132:	f7eb f86b 	bl	800020c <__adddf3>
 8015136:	2200      	movs	r2, #0
 8015138:	2300      	movs	r3, #0
 801513a:	f7eb fcad 	bl	8000a98 <__aeabi_dcmpgt>
 801513e:	2800      	cmp	r0, #0
 8015140:	d0c1      	beq.n	80150c6 <floor+0x46>
 8015142:	2c00      	cmp	r4, #0
 8015144:	da0a      	bge.n	801515c <floor+0xdc>
 8015146:	2e14      	cmp	r6, #20
 8015148:	d101      	bne.n	801514e <floor+0xce>
 801514a:	3401      	adds	r4, #1
 801514c:	e006      	b.n	801515c <floor+0xdc>
 801514e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8015152:	2301      	movs	r3, #1
 8015154:	40b3      	lsls	r3, r6
 8015156:	441d      	add	r5, r3
 8015158:	45a8      	cmp	r8, r5
 801515a:	d8f6      	bhi.n	801514a <floor+0xca>
 801515c:	ea25 0507 	bic.w	r5, r5, r7
 8015160:	e7b1      	b.n	80150c6 <floor+0x46>
 8015162:	2500      	movs	r5, #0
 8015164:	462c      	mov	r4, r5
 8015166:	e7ae      	b.n	80150c6 <floor+0x46>
 8015168:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801516c:	e7ab      	b.n	80150c6 <floor+0x46>
 801516e:	bf00      	nop
 8015170:	8800759c 	.word	0x8800759c
 8015174:	7e37e43c 	.word	0x7e37e43c
 8015178:	bff00000 	.word	0xbff00000
 801517c:	000fffff 	.word	0x000fffff

08015180 <_init>:
 8015180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015182:	bf00      	nop
 8015184:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015186:	bc08      	pop	{r3}
 8015188:	469e      	mov	lr, r3
 801518a:	4770      	bx	lr

0801518c <_fini>:
 801518c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801518e:	bf00      	nop
 8015190:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015192:	bc08      	pop	{r3}
 8015194:	469e      	mov	lr, r3
 8015196:	4770      	bx	lr
